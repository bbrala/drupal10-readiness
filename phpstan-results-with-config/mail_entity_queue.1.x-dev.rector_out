modules/contrib/mail_entity_queue/mail_entity_queue.module
modules/contrib/mail_entity_queue/modules/ultimate_cron/mail_entity_queue_ultimate_cron.install
modules/contrib/mail_entity_queue/modules/ultimate_cron/mail_entity_queue_ultimate_cron.module
modules/contrib/mail_entity_queue/src/Annotation/MailEntityQueueProcessor.php
modules/contrib/mail_entity_queue/src/Entity/MailEntityQueue.php
modules/contrib/mail_entity_queue/src/Entity/MailEntityQueueInterface.php
modules/contrib/mail_entity_queue/src/Entity/MailEntityQueueItem.php
modules/contrib/mail_entity_queue/src/Entity/MailEntityQueueItemInterface.php
modules/contrib/mail_entity_queue/src/Event/MailEntityQueueItemEvent.php
modules/contrib/mail_entity_queue/src/Event/MailEntityQueueItemEvents.php
modules/contrib/mail_entity_queue/src/Form/MailEntityQueueDeleteForm.php
modules/contrib/mail_entity_queue/src/Form/MailEntityQueueForm.php
modules/contrib/mail_entity_queue/src/Form/MailEntityQueueItemForm.php
modules/contrib/mail_entity_queue/src/Form/MailEntityQueueItemMultipleDeleteConfirmForm.php
modules/contrib/mail_entity_queue/src/Form/MailEntityQueueItemMultipleProcessConfirmForm.php
modules/contrib/mail_entity_queue/src/Form/MailEntityQueueItemProcessForm.php
modules/contrib/mail_entity_queue/src/MailEntityQueueItemAccessControlHandler.php
modules/contrib/mail_entity_queue/src/MailEntityQueueItemListBuilder.php
modules/contrib/mail_entity_queue/src/MailEntityQueueItemViewsData.php
modules/contrib/mail_entity_queue/src/MailEntityQueueListBuilder.php
modules/contrib/mail_entity_queue/src/MailEntityQueueProcessorPluginCollection.php
modules/contrib/mail_entity_queue/src/Plugin/Action/MailEntityQueueItemDelete.php
modules/contrib/mail_entity_queue/src/Plugin/Action/MailEntityQueueItemProcess.php
modules/contrib/mail_entity_queue/src/Plugin/MailEntityQueue/DefaultMailEntityQueueProcessor.php
modules/contrib/mail_entity_queue/src/Plugin/MailEntityQueueProcessorInterface.php
modules/contrib/mail_entity_queue/src/Plugin/MailEntityQueueProcessorPluginManager.php
modules/contrib/mail_entity_queue/src/Plugin/MailEntityQueueProcessorPluginManagerInterface.php
modules/contrib/mail_entity_queue/src/Plugin/views/field/MailEntityQueueItemCreatedToLabel.php
modules/contrib/mail_entity_queue/src/Plugin/views/field/MailEntityQueueItemCreatedToTrait.php

23 files with changes
=====================

1) modules/contrib/mail_entity_queue/src/Plugin/views/field/MailEntityQueueItemCreatedToTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Plugin\views\field;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface;
 use Drupal\views\Entity\Render\EntityTranslationRenderTrait;
 use Drupal\views\ResultRow;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Retrieve the "created to" entity from a result row.
    *
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   The result row.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Source entity of this submission is submitted to or NULL should it not
    *   have one
    */
   protected function getSourceEntity(ResultRow $row) {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $entity */
+    /** @var MailEntityQueueItemInterface $entity */
     $entity = $this->getEntity($row);

     return $entity->getSourceEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/mail_entity_queue/src/Plugin/MailEntityQueueProcessorPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Plugin;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginManagerInterface;

 /**
@@ @@
    *   An array of configuration relevant to the plugin instances. Keyed by the
    *   plugin ID.
    *
-   * @return \Drupal\mail_entity_queue\Plugin\MailEntityQueueProcessorInterface[]
+   * @return MailEntityQueueProcessorInterface[]
    *   Fully configured plugin instances.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If an instance cannot be created, such as if the ID is invalid.
    */
   public function createInstances($id = [], array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/mail_entity_queue/src/Plugin/MailEntityQueueProcessorInterface.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Sends a queue item and update it with the result.
    *
-   * @param \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $item
+   * @param MailEntityQueueItemInterface $item
    *   The item to process.
    * @param int $delay
    *   Time in milliseconds to wait after sending the item.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/mail_entity_queue/src/Plugin/MailEntityQueue/DefaultMailEntityQueueProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Plugin\MailEntityQueue;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\mail_entity_queue\Entity\MailEntityQueueInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Mail\MailManagerInterface;
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * The mail queue storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $queueStorage;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LanguageManagerInterface $language_manager, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, MailManagerInterface $mail_manager, LoggerInterface $logger) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
    * {@inheritdoc}
    */
   public function processQueue(string $mail_entity_queue) {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueInterface $queue */
+    /** @var MailEntityQueueInterface $queue */
     $queue = $this->queueStorage->load($mail_entity_queue);

     $ids = $this->queueItemStorage->getQuery()
@@ @@
     if ($ids) {
       $items = $this->queueItemStorage->loadMultiple($ids);
       foreach ($items as $item) {
-        /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $item */
+        /** @var MailEntityQueueItemInterface $item */
         $this->processItem($item, $queue->getCronDelay());
       }
     }
@@ @@
   /**
    * Notify other modules the result of the process.
    *
-   * @param \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $item
+   * @param MailEntityQueueItemInterface $item
    *   The element that generates this event.
    * @param string $event_name
    *   The name of the event to dispatch.
@@ @@
    */
   protected function dispatchEvent(MailEntityQueueItemInterface $item, string $event_name) {
     $event = new MailEntityQueueItemEvent($item);
-    $this->eventDispatcher->dispatch($event_name, $event);
+    $this->eventDispatcher->dispatch($event, $event_name);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/mail_entity_queue/src/Plugin/Action/MailEntityQueueItemProcess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Plugin\Action;

+use Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The temp store private.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The temp store private.
    * @param AccountInterface $current_user
    *   Current user.
@@ @@
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $object */
+    /** @var MailEntityQueueItemInterface $object */
     $access = $object->access('process', $account, TRUE);

     return $return_as_object ? $access : $access->isAllowed();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/mail_entity_queue/src/Plugin/Action/MailEntityQueueItemDelete.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Plugin\Action;

+use Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The temp store private.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The temp store private.
    * @param AccountInterface $current_user
    *   Current user.
@@ @@
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $object */
+    /** @var MailEntityQueueItemInterface $object */
     $access = $object->access('delete', $account, TRUE);

     return $return_as_object ? $access : $access->isAllowed();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/mail_entity_queue/src/MailEntityQueueProcessorPluginCollection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue;

+use Drupal\mail_entity_queue\Plugin\MailEntityQueueProcessorInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;
@@ @@
   /**
    * Constructs a new MailEntityQueueProcessorPluginCollection.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The manager to be used for instantiating plugins.
    * @param string $instance_id
    *   The ID of the plugin instance.
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\mail_entity_queue\Plugin\MailEntityQueueProcessorInterface
+   * @return MailEntityQueueProcessorInterface
    */
   public function &get($instance_id) {
     return parent::get($instance_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/mail_entity_queue/src/MailEntityQueueItemListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ @@
   /**
    * The date service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new MailEntityQueueItemListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, DateFormatter $date_formatter) {
     parent::__construct($entity_type, $entity_type_manager->getStorage($entity_type->id()));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/mail_entity_queue/src/MailEntityQueueItemAccessControlHandler.php:16

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $entity */
+    /** @var MailEntityQueueItemInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view mail entity queue items');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/mail_entity_queue/src/Form/MailEntityQueueItemProcessForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Form;

+use Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $entity */
+    /** @var MailEntityQueueItemInterface $entity */
     $entity = $this->getEntity();

     $success = $entity->queue()->getQueueProcessor()->processItem($entity);
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $entity */
+    /** @var MailEntityQueueItemInterface $entity */
     $entity = $this->getEntity();

     return $this->t('Are you sure you want to process the item @id in queue @queue?', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/mail_entity_queue/src/Form/MailEntityQueueItemMultipleProcessConfirmForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Form;

+use Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The temp store factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The entity type storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * Constructs a new MailEntityQueueItemMultipleProcessConfirmForm.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The temp store factory.
-   * @param \Drupal\Core\Entity\ContentEntityStorageInterface $storage
+   * @param ContentEntityStorageInterface $storage
    *   The entity type storage.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, ContentEntityStorageInterface $storage) {
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface[] $items */
+    /** @var MailEntityQueueItemInterface[] $items */
     $items = $this->tempStoreFactory
       ->get('mail_entity_queue_item_operations_process')
       ->get($this->currentUser()->id());
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     if ($form_state->getValue('confirm')) {
-      /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface[] $items */
+      /** @var MailEntityQueueItemInterface[] $items */
       $items = $this->tempStoreFactory
         ->get('mail_entity_queue_item_operations_process')
         ->get($this->currentUser()->id());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/mail_entity_queue/src/Form/MailEntityQueueItemMultipleDeleteConfirmForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Form;

+use Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The temp store private.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The entity type storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * Constructs a new MailEntityQueueItemMultipleDeleteConfirmForm.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The temp store factory.
-   * @param \Drupal\Core\Entity\ContentEntityStorageInterface $storage
+   * @param ContentEntityStorageInterface $storage
    *   The entity type storage.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, ContentEntityStorageInterface $storage) {
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface[] $items */
+    /** @var MailEntityQueueItemInterface[] $items */
     $items = $this->tempStoreFactory
       ->get('mail_entity_queue_item_operations_delete')
       ->get($this->currentUser()->id());
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     if ($form_state->getValue('confirm')) {
-      /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface[] $items */
+      /** @var MailEntityQueueItemInterface[] $items */
       $items = $this->tempStoreFactory
         ->get('mail_entity_queue_item_operations_delete')
         ->get($this->currentUser()->id());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/mail_entity_queue/src/Form/MailEntityQueueItemForm.php:15

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $item */
+    /** @var MailEntityQueueItemInterface $item */
     $item = $this->entity;

     $form['#title'] = $this->t('Mail queue item %label', ['%label' => $item->label()]);
@@ @@
   protected function actions(array $form, FormStateInterface $form_state) {
     $actions = parent::actions($form, $form_state);

-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $item */
+    /** @var MailEntityQueueItemInterface $item */
     $item = $this->entity;

     if ((integer) $item->getStatus() === MailEntityQueueItemInterface::SENT) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/mail_entity_queue/src/Form/MailEntityQueueForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Form;

+use Drupal\mail_entity_queue\Entity\MailEntityQueueInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The mail queue processor plugin manager.
    *
-   * @var \Drupal\mail_entity_queue\Plugin\MailEntityQueueProcessorPluginManagerInterface
+   * @var MailEntityQueueProcessorPluginManagerInterface
    */
   protected $mailEntityQueueProcessorPluginManager;

@@ @@
   /**
    * Constructs a MailEntityQueueForm object.
    *
-   * @param \Drupal\mail_entity_queue\Plugin\MailEntityQueueProcessorPluginManagerInterface $processor_manager
+   * @param MailEntityQueueProcessorPluginManagerInterface $processor_manager
    *   The mail queue processor plugin manager.
    */
   public function __construct(MailEntityQueueProcessorPluginManagerInterface $processor_manager) {
@@ @@
       $processors[$processor_name] = $processor['label']->__toString();
     }

-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueInterface $mail_entity_queue */
+    /** @var MailEntityQueueInterface $mail_entity_queue */
     $mail_entity_queue = $this->entity;

     if ($mail_entity_queue->isNew()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/mail_entity_queue/src/Form/MailEntityQueueDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Form;

+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityDeleteForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity query.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $query;

@@ @@
   /**
    * Constructs a new MailEntityQueueDeleteForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->query = $entity_type_manager->getStorage('mail_entity_queue_item')->getQuery();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/mail_entity_queue/src/Event/MailEntityQueueItemEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the mail queue item event.
@@ @@
   /**
    * The mail queue item.
    *
-   * @var \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface
+   * @var MailEntityQueueItemInterface
    */
   protected $item;

@@ @@
   /**
    * Constructs a new MailEntityQueueItemEvent.
    *
-   * @param \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $item
+   * @param MailEntityQueueItemInterface $item
    *   The queue item.
    */
   public function __construct(MailEntityQueueItemInterface $item) {
@@ @@
   /**
    * Gets the queue item.
    *
-   * @return \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface
+   * @return MailEntityQueueItemInterface
    *   The mail queue item.
    */
   public function getItem() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/mail_entity_queue/src/Entity/MailEntityQueueItemInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Entity;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;

@@ @@
    * @param bool $translate
    *   (optional) If TRUE the related entity will be translated.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The related entity.
    */
   public function getSourceEntity($translate = FALSE);
@@ @@
   /**
    * Gets the mail queue instance this items pertains to.
    *
-   * @return \Drupal\mail_entity_queue\Entity\MailEntityQueueInterface
+   * @return MailEntityQueueInterface
    *   The mail queue instance.
    */
   public function queue();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/mail_entity_queue/src/Entity/MailEntityQueueInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Entity;

+use Drupal\mail_entity_queue\Plugin\MailEntityQueueProcessorInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityDescriptionInterface;

@@ @@
   /**
    * Gets an instanced of the mail entity queue processor plugin.
    *
-   * @return \Drupal\mail_entity_queue\Plugin\MailEntityQueueProcessorInterface
+   * @return MailEntityQueueProcessorInterface
    */
   public function getQueueProcessor();

@@ @@
    * @param string $entity_id
    *   Id of the entity related to the item.
    *
-   * @return \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface
+   * @return MailEntityQueueItemInterface
    *   The mail entity queue item added.
    */
   public function addItem(string $mail, array $data, $entity_type = NULL, $entity_id = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/mail_entity_queue/src/Entity/MailEntityQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Entity;

+use Drupal\mail_entity_queue\Plugin\MailEntityQueueProcessorInterface;
+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
 use Drupal\mail_entity_queue\MailEntityQueueProcessorPluginCollection;

@@ @@
   /**
    * The mail queue processor plugin.
    *
-   * @var \Drupal\mail_entity_queue\Plugin\MailEntityQueueProcessorInterface
+   * @var MailEntityQueueProcessorInterface
    */
   protected $pluginCollection;

@@ @@
    * Encapsulates the creation of the mail queue processor's
    * LazyPluginCollection.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    *   The mail queue's processor plugin collection.
    */
   protected function getMailEntityQueueProcessorCollection() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/mail_entity_queue/src/Annotation/MailEntityQueueProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mail_entity_queue\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the mail queue processor.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A brief description of the mail queue processor.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


21) modules/contrib/mail_entity_queue/modules/ultimate_cron/mail_entity_queue_ultimate_cron.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\mail_entity_queue\Entity\MailEntityQueueInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\ultimate_cron\CronJobInterface;
 use Drupal\ultimate_cron\Entity\CronJob;
@@ @@
  * @param CronJobInterface $job
  *   The job being run.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+ * @throws InvalidPluginDefinitionException
  */
 function mail_entity_queue_ultimate_cron_queue_cronjob_process(CronJobInterface $job) {
   $queue_name = substr($job->id(), strlen('mail_entity_queue_process__'));

-  /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueInterface $queue */
+  /** @var MailEntityQueueInterface $queue */
   if (($queue = \Drupal::entityTypeManager()->getStorage('mail_entity_queue')->load($queue_name)) !== NULL) {
     $queue->getQueueProcessor()->processQueue($queue->id());
   }
@@ @@
  * Implements hook_ENTITY_TYPE_insert().
  */
 function mail_entity_queue_ultimate_cron_mail_entity_queue_insert(EntityInterface $entity) {
-  /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueInterface $entity */
+  /** @var MailEntityQueueInterface $entity */
   $job_name = 'mail_entity_queue_process__' . $entity->id();
   $values = [
     'id' => $job_name,
@@ @@
  * Implements hook_ENTITY_TYPE_delete().
  */
 function mail_entity_queue_ultimate_cron_mail_entity_queue_delete(EntityInterface $entity) {
-  /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueInterface $entity */
+  /** @var MailEntityQueueInterface $entity */
   $job_name = 'mail_entity_queue_process__' . $entity->id();

   /** @var \Drupal\ultimate_cron\Entity\CronJob $job */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


22) modules/contrib/mail_entity_queue/modules/ultimate_cron/mail_entity_queue_ultimate_cron.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\mail_entity_queue\Entity\MailEntityQueueInterface;
 use Drupal\ultimate_cron\Entity\CronJob;

 /**
@@ @@
  * Implements hook_install().
  */
 function mail_entity_queue_ultimate_cron_install() {
-  /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueInterface[] $queues */
+  /** @var MailEntityQueueInterface[] $queues */
   $queues = \Drupal::entityTypeManager()->getStorage('mail_entity_queue')->loadMultiple();

   foreach ($queues as $queue) {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueInterface $queue */
+    /** @var MailEntityQueueInterface $queue */
     $job_name = 'mail_entity_queue_process__' . $queue->id();
     $values = [
       'id' => $job_name,
@@ @@
  * Implements hook_install().
  */
 function mail_entity_queue_ultimate_cron_uninstall() {
-  /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueInterface[] $queues */
+  /** @var MailEntityQueueInterface[] $queues */
   $queues = \Drupal::entityTypeManager()->getStorage('mail_entity_queue')->loadMultiple();

   foreach ($queues as $queue) {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueInterface $queue */
+    /** @var MailEntityQueueInterface $queue */
     $job_name = 'mail_entity_queue_process__' . $queue->id();

     /** @var \Drupal\ultimate_cron\Entity\CronJob $job */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


23) modules/contrib/mail_entity_queue/mail_entity_queue.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\mail_entity_queue\Entity\MailEntityQueueInterface;
 use Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface;
 use Drupal\mail_entity_queue\Entity\MailEntityQueueItem;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
  */
 function mail_entity_queue_cron() {
   if (!\Drupal::moduleHandler()->moduleExists('mail_entity_queue_ultimate_cron')) {
-    /** @var \Drupal\mail_entity_queue\Entity\MailEntityQueueInterface[] $queues */
+    /** @var MailEntityQueueInterface[] $queues */
     $queues = \Drupal::entityTypeManager()->getStorage('mail_entity_queue')->loadMultiple();

     foreach ($queues as $queue) {
@@ @@
 /**
  * Sets a batch to process mail queue queue items.
  *
- * @param \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface[] $items
+ * @param MailEntityQueueItemInterface[] $items
  */
 function mail_entity_queue_item_process_batch(array $items = []) {
   // Add one operation per queue item.
@@ @@
 /**
  * Batch operation to process a single queue item.
  *
- * @param \Drupal\mail_entity_queue\Entity\MailEntityQueueItemInterface $item
+ * @param MailEntityQueueItemInterface $item
  *   The item to process.
  */
 function mail_entity_queue_item_process_batch_op(MailEntityQueueItemInterface $item, &$context) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 23 files have been changed by Rector                                      

