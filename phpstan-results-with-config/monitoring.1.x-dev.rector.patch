diff --git a/modules/demo/monitoring_demo.install b/modules/demo/monitoring_demo.install
index dfec607..9fd86ca 100644
--- a/modules/demo/monitoring_demo.install
+++ b/modules/demo/monitoring_demo.install
@@ -1,4 +1,5 @@
 <?php
+use Drupal\file\FileUsage\FileUsageInterface;
 /**
  * @file
  *   Install file of the monitoring_demo module.
@@ -107,8 +108,8 @@ function monitoring_demo_install() {
   $sensor_manager->enableSensor('monitoring_disappeared_sensors');
 
   // Generate some image style derivative errors.
-  $file = file_save_data($random->name());
-  /** @var \Drupal\file\FileUsage\FileUsageInterface $usage */
+  $file = \Drupal::service('file.repository')->writeData($random->name());
+  /** @var FileUsageInterface $usage */
   $usage = \Drupal::service('file.usage');
   foreach ($nodes as $node) {
     $usage->add($file, 'monitoring_test', 'node', $node->id());
@@ -127,7 +128,7 @@ function monitoring_demo_install() {
       ]
     );
   }
-  $file = file_save_data($random->name());
+  $file = \Drupal::service('file.repository')->writeData($random->name());
   \Drupal::logger('image')->notice('Source image at %source_image_path not found while trying to generate derivative image at %derivative_path.', [
       '%source_image_path' => $file->getFileUri(),
       '%derivative_path' => 'hash://styles/preview/5678.jpeg',
@@ -167,7 +168,7 @@ function _monitoring_setup_create_comment($settings = array()) {
  * @param array $settings
  *   Node data.
  *
- * @return \Drupal\node\Entity\Node
+ * @return Node
  *   Created node.
  */
 function _monitoring_setup_create_node($settings = array()) {
diff --git a/modules/demo/tests/src/Functional/MonitoringDemoTest.php b/modules/demo/tests/src/Functional/MonitoringDemoTest.php
index 49a5043..f5e3b77 100644
--- a/modules/demo/tests/src/Functional/MonitoringDemoTest.php
+++ b/modules/demo/tests/src/Functional/MonitoringDemoTest.php
@@ -23,15 +23,27 @@ class MonitoringDemoTest extends MonitoringTestBase {
    */
   public function testInstalled() {
     $this->drupalGet('');
-    $this->assertText('Monitoring');
-    $this->assertText(t('Welcome to the Monitoring demo installation.'));
-    $this->assertLink(t('Monitoring sensors overview'));
-    $this->assertLink(t('Monitoring sensors settings'));
-    $this->assertText(t('Sensor example: "Installed modules"'));
-    $this->assertLink(t('Configure'));
-    $this->assertLink(t('Uninstall'), 0);
-    $this->assertLink(t('Uninstall'), 1);
-    $this->assertText(t('Drush integration - open up your console and type in # drush monitoring-sensor-config'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Monitoring');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Welcome to the Monitoring demo installation.'));
+    $this->assertSession()->linkExists(t('Monitoring sensors overview'));
+    $this->assertSession()->linkExists(t('Monitoring sensors settings'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Sensor example: "Installed modules"'));
+    $this->assertSession()->linkExists(t('Configure'));
+    $this->assertSession()->linkExists(t('Uninstall'), 0);
+    $this->assertSession()->linkExists(t('Uninstall'), 1);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Drush integration - open up your console and type in # drush monitoring-sensor-config'));
   }
 
 }
diff --git a/modules/monitoring_mail/monitoring_mail.module b/modules/monitoring_mail/monitoring_mail.module
index daf299b..0dbe8d7 100644
--- a/modules/monitoring_mail/monitoring_mail.module
+++ b/modules/monitoring_mail/monitoring_mail.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\monitoring\SensorConfigInterface;
 /**
  * @file
  * Monitoring Mail bootstrap file.
@@ -17,9 +18,9 @@ use Drupal\monitoring\Result\SensorResultInterface;
  */
 function monitoring_mail_mail($key, &$message, $params) {
   // Get values to build the mail data.
-  /** @var \Drupal\monitoring\Result\SensorResultInterface $result */
+  /** @var SensorResultInterface $result */
   $result = $params['result'];
-  /** @var \Drupal\monitoring\SensorConfigInterface $sensor_config */
+  /** @var SensorConfigInterface $sensor_config */
   $sensor_config = $params['sensor_config'];
 
   $site_config = \Drupal::config('system.site');
@@ -83,7 +84,7 @@ function monitoring_mail_monitoring_run_sensors(array $results) {
   }
 
   // Send a mail if a status change has been detected.
-  /** @var \Drupal\monitoring\Result\SensorResultInterface $result */
+  /** @var SensorResultInterface $result */
   foreach ($results as $result) {
     // @todo Make mail configurable per sensor.
 
@@ -118,7 +119,7 @@ function monitoring_mail_monitoring_run_sensors(array $results) {
 /**
  * Checks if sensor results should send mail.
  *
- * @param \Drupal\monitoring\Result\SensorResultInterface $result
+ * @param SensorResultInterface $result
  *   The sensor result.
  * @param array $severities
  *   The sensor severities.
diff --git a/modules/monitoring_mail/tests/src/Kernel/MonitoringMailKernelTest.php b/modules/monitoring_mail/tests/src/Kernel/MonitoringMailKernelTest.php
index 517854a..534c645 100644
--- a/modules/monitoring_mail/tests/src/Kernel/MonitoringMailKernelTest.php
+++ b/modules/monitoring_mail/tests/src/Kernel/MonitoringMailKernelTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\monitoring_mail\Kernel;
 
+use Drupal\monitoring\Result\SensorResult;
 use Drupal\Core\Test\AssertMailTrait;
 use Drupal\monitoring\Entity\SensorConfig;
 use Drupal\monitoring\Result\SensorResultInterface;
@@ -30,7 +31,7 @@ class MonitoringMailKernelTest extends MonitoringUnitTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('dblog', ['watchdog']);
@@ -77,7 +78,7 @@ class MonitoringMailKernelTest extends MonitoringUnitTestBase {
     $this->assertEmpty($this->getMails());
 
     // Run a sensor that is CRITICAL and check its corresponding mail.
-    /** @var \Drupal\monitoring\Result\SensorResult $result */
+    /** @var SensorResult $result */
     $result = $sensor_runner->runSensors([$sensorConfig])[0];
     $this->assertEquals('CRITICAL', $result->getStatus());
     $this->assertEquals(1, count($this->getMails()));
diff --git a/modules/multigraph/src/Entity/Multigraph.php b/modules/multigraph/src/Entity/Multigraph.php
index a70b02e..7079549 100644
--- a/modules/multigraph/src/Entity/Multigraph.php
+++ b/modules/multigraph/src/Entity/Multigraph.php
@@ -85,7 +85,7 @@ class Multigraph extends ConfigEntityBase implements MultigraphInterface {
    * The entities of the included sensors, sorted by weight and with labels
    * overridden.
    *
-   * @var \Drupal\monitoring\Entity\SensorConfig[]
+   * @var SensorConfig[]
    */
   protected $sensorEntities = array();
 
diff --git a/modules/multigraph/src/Form/MultigraphDeleteForm.php b/modules/multigraph/src/Form/MultigraphDeleteForm.php
index 4528fed..2de0775 100644
--- a/modules/multigraph/src/Form/MultigraphDeleteForm.php
+++ b/modules/multigraph/src/Form/MultigraphDeleteForm.php
@@ -48,7 +48,7 @@ class MultigraphDeleteForm extends EntityConfirmFormBase {
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
diff --git a/modules/multigraph/src/Form/MultigraphForm.php b/modules/multigraph/src/Form/MultigraphForm.php
index 92d32ce..dccf81f 100644
--- a/modules/multigraph/src/Form/MultigraphForm.php
+++ b/modules/multigraph/src/Form/MultigraphForm.php
@@ -6,6 +6,9 @@
 
 namespace Drupal\monitoring_multigraph\Form;
 
+use Drupal\monitoring_multigraph\MultigraphInterface;
+use Drupal\monitoring\Entity\SensorConfig;
+use Drupal\monitoring_multigraph\Entity\Multigraph;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,7 +24,7 @@ class MultigraphForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
     $form['#tree'] = TRUE;
-    /** @var \Drupal\monitoring_multigraph\MultigraphInterface $multigraph */
+    /** @var MultigraphInterface $multigraph */
     $multigraph = $this->entity;
 
     // Find sensors that can be added.
@@ -31,7 +34,7 @@ class MultigraphForm extends EntityForm {
     // Remove already added sensors.
     $sensor_ids = array_diff($sensor_ids, array_keys($multigraph->getSensorsRaw()));
     ksort($sensor_ids);
-    /** @var \Drupal\monitoring\Entity\SensorConfig[] $sensors */
+    /** @var SensorConfig[] $sensors */
     $sensors = $this->entityTypeManager
       ->getStorage('monitoring_sensor_config')
       ->loadMultiple($sensor_ids);
@@ -186,7 +189,7 @@ class MultigraphForm extends EntityForm {
    *
    * @param array $form
    *   The updated form structure array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state structure.
    *
    * @return array
@@ -201,13 +204,13 @@ class MultigraphForm extends EntityForm {
    *
    * @param array $form
    *   The form structure array
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state structure.
    */
   public function addSensorSubmit(array $form, FormStateInterface $form_state) {
     $form_state->setRebuild();
 
-    /** @var \Drupal\monitoring_multigraph\Entity\Multigraph $multigraph */
+    /** @var Multigraph $multigraph */
     $multigraph = $this->entity;
 
     // Add any selected sensor to entity.
@@ -226,13 +229,13 @@ class MultigraphForm extends EntityForm {
    *
    * @param array $form
    *   The form structure array
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state structure.
    */
   public function removeSensorSubmit(array $form, FormStateInterface $form_state) {
     $form_state->setRebuild();
 
-    /** @var \Drupal\monitoring_multigraph\MultigraphInterface $multigraph */
+    /** @var MultigraphInterface $multigraph */
     $multigraph = $this->entity;
 
     // Remove sensor as indicated by triggering_element.
diff --git a/modules/multigraph/src/MultigraphInterface.php b/modules/multigraph/src/MultigraphInterface.php
index e14b82e..bc5da86 100644
--- a/modules/multigraph/src/MultigraphInterface.php
+++ b/modules/multigraph/src/MultigraphInterface.php
@@ -5,6 +5,7 @@
  */
 
 namespace Drupal\monitoring_multigraph;
+use Drupal\monitoring\Entity\SensorConfig;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -46,7 +47,7 @@ interface MultigraphInterface extends ConfigEntityInterface {
   /**
    * Gets the included sensors.
    *
-   * @return \Drupal\monitoring\Entity\SensorConfig[]
+   * @return SensorConfig[]
    *   The included sensors as an indexed array sorted by weight where the
    *   values are sensors with custom labels.
    */
diff --git a/modules/multigraph/src/MultigraphListBuilder.php b/modules/multigraph/src/MultigraphListBuilder.php
index 7b0dfb6..eca6ada 100644
--- a/modules/multigraph/src/MultigraphListBuilder.php
+++ b/modules/multigraph/src/MultigraphListBuilder.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\monitoring_multigraph;
 
+use Drupal\monitoring_multigraph\Entity\Multigraph;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -31,7 +32,7 @@ class MultigraphListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\monitoring_multigraph\Entity\Multigraph $entity */
+    /** @var Multigraph $entity */
     $row['label'] = $entity->label();
     $row['description'] = $entity->getDescription();
 
diff --git a/modules/multigraph/src/Plugin/rest/resource/MonitoringMultigraphResource.php b/modules/multigraph/src/Plugin/rest/resource/MonitoringMultigraphResource.php
index 5e59d5a..d9c33bf 100644
--- a/modules/multigraph/src/Plugin/rest/resource/MonitoringMultigraphResource.php
+++ b/modules/multigraph/src/Plugin/rest/resource/MonitoringMultigraphResource.php
@@ -7,6 +7,8 @@
 
 namespace Drupal\monitoring_multigraph\Plugin\rest\resource;
 
+use Symfony\Component\HttpKernel\Exception\HttpException;
+use Drupal\monitoring_multigraph\Entity\Multigraph;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Url;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ -56,10 +58,10 @@ class MonitoringMultigraphResource extends ResourceBase {
    *   (optional) The multigraph name, returns a list of all multigraphs when
    *   empty.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing the multigraph.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    */
   public function get($id = NULL) {
 
@@ -67,7 +69,7 @@ class MonitoringMultigraphResource extends ResourceBase {
     $format = $request->getRequestFormat('ĵson');
 
     if ($id) {
-      /** @var \Drupal\monitoring_multigraph\Entity\Multigraph $multigraph */
+      /** @var Multigraph $multigraph */
       $multigraph = \Drupal::entityTypeManager()
         ->getStorage('monitoring_multigraph')
         ->load($id);
@@ -89,7 +91,7 @@ class MonitoringMultigraphResource extends ResourceBase {
       ->loadMultiple();
     $cacheable_metadata = new CacheableMetadata();
     foreach ($multigraphs as $name => $multigraph) {
-      /** @var \Drupal\monitoring_multigraph\Entity\Multigraph $multigraph */
+      /** @var Multigraph $multigraph */
       $list[$name] = $multigraph->getDefinition();
       $url = Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $name, '_format' => $format])->setAbsolute()->toString(TRUE);
       $list[$name]['uri'] = $url->getGeneratedUrl();
diff --git a/modules/multigraph/tests/src/Functional/MultigraphServicesTest.php b/modules/multigraph/tests/src/Functional/MultigraphServicesTest.php
index 4712183..31f677e 100644
--- a/modules/multigraph/tests/src/Functional/MultigraphServicesTest.php
+++ b/modules/multigraph/tests/src/Functional/MultigraphServicesTest.php
@@ -6,6 +6,8 @@
 
 namespace Drupal\Tests\monitoring_multigraph\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\monitoring_multigraph\MultigraphInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\monitoring\Functional\MonitoringTestBase;
 
@@ -33,14 +35,14 @@ class MultigraphServicesTest extends MonitoringTestBase {
   /**
    * User account to make REST requests.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $servicesAccount;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->servicesAccount = $this->drupalCreateUser([
@@ -55,37 +57,37 @@ class MultigraphServicesTest extends MonitoringTestBase {
     $this->drupalLogin($this->servicesAccount);
 
     $response_data = $this->doJsonRequest('monitoring-multigraph');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
-    /** @var \Drupal\monitoring_multigraph\MultigraphInterface[] $multigraphs */
+    /** @var MultigraphInterface[] $multigraphs */
     $multigraphs = \Drupal::entityTypeManager()
       ->getStorage('monitoring_multigraph')
       ->loadMultiple();
 
     // Test the list of multigraphs.
     foreach ($multigraphs as $name => $multigraph) {
-      $this->assertEqual($response_data[$name]['id'], $multigraph->id());
-      $this->assertEqual($response_data[$name]['label'], $multigraph->label());
-      $this->assertEqual($response_data[$name]['description'], $multigraph->getDescription());
-      $this->assertEqual($response_data[$name]['sensors'], $multigraph->getSensorsRaw());
-      $this->assertEqual($response_data[$name]['uri'], Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $multigraph->id(), '_format' => 'json'])->setAbsolute()->toString());
+      $this->assertEquals($response_data[$name]['id'], $multigraph->id());
+      $this->assertEquals($response_data[$name]['label'], $multigraph->label());
+      $this->assertEquals($response_data[$name]['description'], $multigraph->getDescription());
+      $this->assertEquals($response_data[$name]['sensors'], $multigraph->getSensorsRaw());
+      $this->assertEquals($response_data[$name]['uri'], Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $multigraph->id(), '_format' => 'json'])->setAbsolute()->toString());
     }
 
     // Test response for non-existing multigraph.
     $name = 'multigraph_that_does_not_exist';
     $this->doJsonRequest('monitoring-multigraph/' . $name);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     // Test the predefined multigraph.
     $name = 'watchdog_severe_entries';
     $response_data = $this->doJsonRequest('monitoring-multigraph/' . $name);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $multigraph = $multigraphs[$name];
-    $this->assertEqual($response_data['id'], $multigraph->id());
-    $this->assertEqual($response_data['label'], $multigraph->label());
-    $this->assertEqual($response_data['description'], $multigraph->getDescription());
-    $this->assertEqual($response_data['sensors'], $multigraph->getSensorsRaw());
-    $this->assertEqual($response_data['uri'], Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $multigraph->id(), '_format' => 'json'])->setAbsolute()->toString());
+    $this->assertEquals($response_data['id'], $multigraph->id());
+    $this->assertEquals($response_data['label'], $multigraph->label());
+    $this->assertEquals($response_data['description'], $multigraph->getDescription());
+    $this->assertEquals($response_data['sensors'], $multigraph->getSensorsRaw());
+    $this->assertEquals($response_data['uri'], Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $multigraph->id(), '_format' => 'json'])->setAbsolute()->toString());
   }
 
 }
diff --git a/modules/multigraph/tests/src/Functional/MultigraphWebTest.php b/modules/multigraph/tests/src/Functional/MultigraphWebTest.php
index 8eb47e5..275778c 100644
--- a/modules/multigraph/tests/src/Functional/MultigraphWebTest.php
+++ b/modules/multigraph/tests/src/Functional/MultigraphWebTest.php
@@ -6,6 +6,7 @@
 
 namespace Drupal\Tests\monitoring_multigraph\Functional;
 
+use Drupal\user\Entity\User;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -18,7 +19,7 @@ class MultigraphWebTest extends BrowserTestBase {
   /**
    * User object.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $adminUser;
 
@@ -66,27 +67,43 @@ class MultigraphWebTest extends BrowserTestBase {
       'description' => $this->randomString(),
       'sensor_add_select' => 'dblog_404',
     ];
-    $this->drupalPostForm('admin/config/system/monitoring/multigraphs/add', $values, t('Add sensor'));
-    $this->assertText(t('Sensor "Page not found errors" added. You have unsaved changes.'));
-
-    $this->drupalPostForm(NULL, [
+    $this->drupalGet('admin/config/system/monitoring/multigraphs/add');
+    $this->submitForm($values, t('Add sensor'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Sensor "Page not found errors" added. You have unsaved changes.'));
+
+    $this->submitForm([
       'sensor_add_select' => 'user_failed_logins',
     ], t('Add sensor'));
-    $this->assertText(t('Sensor "Failed user logins" added. You have unsaved changes.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Sensor "Failed user logins" added. You have unsaved changes.'));
 
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'sensor_add_select' => 'user_successful_logins',
     ], t('Add sensor'));
-    $this->assertText(t('Sensor "Successful user logins" added. You have unsaved changes.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Sensor "Successful user logins" added. You have unsaved changes.'));
 
     // And last but not least, change all sensor label values and save form.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'sensors[dblog_404][label]' => 'Page not found errors (test)',
       'sensors[user_failed_logins][label]' => 'Failed user logins (test)',
       'sensors[user_successful_logins][label]' => 'Successful user logins (test)',
     ], t('Save'));
-    $this->assertText(t('Multigraph settings saved.'));
-    $this->assertText('Page not found errors (test), Failed user logins (test), Successful user logins (test)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Multigraph settings saved.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Page not found errors (test), Failed user logins (test), Successful user logins (test)');
   }
 
   /**
@@ -98,13 +115,25 @@ class MultigraphWebTest extends BrowserTestBase {
     // Go to multigraph overview and test editing pre-installed multigraph.
     $this->drupalGet('admin/config/system/monitoring/multigraphs');
     // Check label, description and sensors (before editing).
-    $this->assertText('Watchdog severe entries');
-    $this->assertText('Watchdog entries with severity Warning or higher');
-    $this->assertText('404, Alert, Critical, Emergency, Error');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Watchdog severe entries');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Watchdog entries with severity Warning or higher');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('404, Alert, Critical, Emergency, Error');
 
     // Edit.
     $this->drupalGet('admin/config/system/monitoring/multigraphs/watchdog_severe_entries');
-    $this->assertText('Edit Multigraph');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Edit Multigraph');
 
     // Change label, description and add a sensor.
     $values = [
@@ -112,30 +141,49 @@ class MultigraphWebTest extends BrowserTestBase {
       'description' => 'Watchdog entries with severity Warning or higher (test)',
       'sensor_add_select' => 'user_successful_logins',
     ];
-    $this->drupalPostForm(NULL, $values, t('Add sensor'));
-    $this->assertText('Sensor "Successful user logins" added. You have unsaved changes.');
+    $this->submitForm($values, t('Add sensor'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Sensor "Successful user logins" added. You have unsaved changes.');
 
     // Remove a sensor.
     $this->getSession()->getPage()->pressButton('remove_dblog_404');
     // (drupalPostAjaxForm() lets us target the button precisely.)
-    $this->assertText(t('Sensor "Page not found errors" removed.  You have unsaved changes.'));
-    $this->drupalPostForm(NULL, [], t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Sensor "Page not found errors" removed.  You have unsaved changes.'));
+    $this->submitForm([], t('Save'));
+    $this->drupalGet('admin/config/system/monitoring/multigraphs/watchdog_severe_entries');
 
     // Change weights and save form.
-    $this->drupalPostForm('admin/config/system/monitoring/multigraphs/watchdog_severe_entries', [
+    $this->submitForm([
       'sensors[user_successful_logins][weight]' => -2,
       'sensors[dblog_event_severity_error][weight]' => -1,
       'sensors[dblog_event_severity_critical][weight]' => 0,
       'sensors[dblog_event_severity_emergency][weight]' => 1,
       'sensors[dblog_event_severity_alert][weight]' => 2,
     ], t('Save'));
-    $this->assertText(t('Multigraph settings saved.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Multigraph settings saved.'));
 
     // Go back to multigraph overview and check changed values.
     $this->drupalGet('admin/config/system/monitoring/multigraphs');
-    $this->assertText('Watchdog severe entries (test)');
-    $this->assertText('Watchdog entries with severity Warning or higher (test)');
-    $this->assertText('Successful user logins, Error, Critical, Emergency, Alert');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Watchdog severe entries (test)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Watchdog entries with severity Warning or higher (test)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Successful user logins, Error, Critical, Emergency, Alert');
   }
 
   /**
@@ -145,16 +193,32 @@ class MultigraphWebTest extends BrowserTestBase {
     // Go to multigraph overview and check for pre-installed multigraph.
     $this->drupalGet('admin/config/system/monitoring/multigraphs');
     // Check label and description (before deleting).
-    $this->assertText('Watchdog severe entries');
-    $this->assertText('Watchdog entries with severity Warning or higher');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Watchdog severe entries');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Watchdog entries with severity Warning or higher');
+    $this->drupalGet('admin/config/system/monitoring/multigraphs/watchdog_severe_entries/delete');
 
     // Delete.
-    $this->drupalPostForm('admin/config/system/monitoring/multigraphs/watchdog_severe_entries/delete', [], t('Delete'));
-    $this->assertText('The Watchdog severe entries (test) multigraph has been deleted');
+    $this->submitForm([], t('Delete'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The Watchdog severe entries (test) multigraph has been deleted');
 
     // Go back to multigraph overview and check that multigraph is deleted.
     $this->drupalGet('admin/config/system/monitoring/multigraphs');
-    $this->assertNoText('Watchdog severe entries');
-    $this->assertNoText('Watchdog entries with severity Warning or higher');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Watchdog severe entries');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Watchdog entries with severity Warning or higher');
   }
 }
diff --git a/modules/multigraph/tests/src/Unit/Entity/MultigraphUnitTest.php b/modules/multigraph/tests/src/Unit/Entity/MultigraphUnitTest.php
index d1a6057..a39903f 100644
--- a/modules/multigraph/tests/src/Unit/Entity/MultigraphUnitTest.php
+++ b/modules/multigraph/tests/src/Unit/Entity/MultigraphUnitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\monitoring_multigraph\Unit\Entity;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\monitoring\Entity\SensorConfig;
@@ -19,14 +20,14 @@ class MultigraphUnitTest extends UnitTestCase {
   /**
    * A mock entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var EntityTypeManagerInterface|MockObject
    */
   protected $entityTypeManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
 
     $container = new ContainerBuilder();
@@ -78,7 +79,7 @@ class MultigraphUnitTest extends UnitTestCase {
    * @param array $id
    *   An ID to set on the sensor.
    *
-   * @return \Drupal\monitoring\Entity\SensorConfig|\PHPUnit_Framework_MockObject_MockObject
+   * @return SensorConfig|MockObject
    *   The mock sensor object.
    */
   protected function getMockSensor($id) {
diff --git a/monitoring.api.php b/monitoring.api.php
index 6ea957c..37e9e3c 100644
--- a/monitoring.api.php
+++ b/monitoring.api.php
@@ -1,28 +1,28 @@
 <?php
+use Drupal\monitoring\Entity\SensorConfig;
+use Drupal\monitoring\Result\SensorResultInterface;
 /**
  * @file
  * Monitoring API documentation.
  */
-
-
 /**
  * Allows to alter sensor links on the sensor overview page.
  *
  * @param array $links
  *   Links to be altered.
- * @param \Drupal\monitoring\Entity\SensorConfig $sensor_config
+ * @param SensorConfig $sensor_config
  *   Sensor config object of a sensor for which links are being altered.
  *
  * @see \Drupal\monitoring\Controller\SensorList::content()
  */
-function hook_monitoring_sensor_links_alter(&$links, \Drupal\monitoring\Entity\SensorConfig $sensor_config) {
+function hook_monitoring_sensor_links_alter(&$links, SensorConfig $sensor_config) {
 
 }
 
 /**
  * Allows processing the result on each sensor run.
  *
- * @param \Drupal\monitoring\Result\SensorResultInterface[] $results
+ * @param SensorResultInterface[] $results
  *   The sensor results.
  */
 function hook_monitoring_run_sensors(array $results) {
diff --git a/monitoring.drush.inc b/monitoring.drush.inc
index 8f9c80e..f4e5889 100644
--- a/monitoring.drush.inc
+++ b/monitoring.drush.inc
@@ -1,4 +1,5 @@
 <?php
+use Drupal\monitoring\Entity\SensorConfig;
 /**
  * @file
  * Drush support for monitoring.
@@ -140,7 +141,7 @@ function monitoring_drush_sensor_config_all() {
 
   $rows[] = array(dt('Label'), dt('Name'), dt('Category'), dt('Enabled'));
   $rows[] = array('----', '----', '----');
-  /** @var \Drupal\monitoring\Entity\SensorConfig $sensor_config */
+  /** @var SensorConfig $sensor_config */
   foreach ($sensor_config_list as $name => $sensor_config) {
     $rows[] = array(
       $sensor_config->getLabel(),
@@ -264,7 +265,7 @@ function monitoring_drush_run($sensor_name = NULL) {
 /**
  * Results output in sensu format.
  *
- * @param \Drupal\monitoring\Result\SensorResultInterface[] $results
+ * @param SensorResultInterface[] $results
  *   List of sensor result objects.
  * @param string $source
  *   Sensu source.
@@ -325,7 +326,7 @@ function monitoring_drush_result_output_sensu($results, $source, $ttl, $handlers
 /**
  * Results output in JSON format.
  *
- * @param \Drupal\monitoring\Result\SensorResultInterface[] $results
+ * @param SensorResultInterface[] $results
  *   List of sensor result objects.
  * @param string $expand
  *   Additional data to be expanded.
@@ -345,7 +346,7 @@ function monitoring_drush_result_output_json(array $results, $expand = NULL) {
 /**
  * Outputs human readable table with results.
  *
- * @param \Drupal\monitoring\Result\SensorResultInterface[] $results
+ * @param SensorResultInterface[] $results
  *   List of sensor result objects.
  * @param bool $show_exec_time
  *   If TRUE the multi results view will display also execution time.
@@ -362,7 +363,7 @@ function monitoring_drush_result_output_table(array $results, $show_exec_time =
 /**
  * Outputs single sensor result.
  *
- * @param \Drupal\monitoring\Result\SensorResultInterface $result
+ * @param SensorResultInterface $result
  *   Sensor result object.
  */
 function monitoring_drush_result_output_table_single(SensorResultInterface $result) {
@@ -385,7 +386,7 @@ function monitoring_drush_result_output_table_single(SensorResultInterface $resu
 /**
  * Outputs sensor results table for multiple results.
  *
- * @param \Drupal\monitoring\Result\SensorResultInterface[] $results
+ * @param SensorResultInterface[] $results
  *   List of sensor result objects.
  * @param bool $show_exec_time
  *   If TRUE the multi results view will display also execution time.
diff --git a/monitoring.install b/monitoring.install
index d71a5dd..437b881 100644
--- a/monitoring.install
+++ b/monitoring.install
@@ -81,7 +81,7 @@ function monitoring_event_severities() {
 function monitoring_update_8101() {
   // Only create if the sensor config does not exist yet.
   if (!SensorConfig::load('temporary_files_usages')) {
-    $config_path = drupal_get_path('module', 'monitoring') . '/config/install/monitoring.sensor_config.temporary_files_usages.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('monitoring') . '/config/install/monitoring.sensor_config.temporary_files_usages.yml';
     $data = Yaml::decode(file_get_contents($config_path));
     \Drupal::service('monitoring.sensor_manager')->clearCachedDefinitions();
     SensorConfig::create($data)->trustData()->save();
diff --git a/monitoring.module b/monitoring.module
index 98e90f6..b88d811 100644
--- a/monitoring.module
+++ b/monitoring.module
@@ -1,4 +1,9 @@
 <?php
+use Drupal\monitoring\Sensor\SensorManager;
+use Drupal\monitoring\Sensor\NonExistingSensorException;
+use Drupal\monitoring\Sensor\DisabledSensorException;
+use Drupal\Monitoring\SensorRunner;
+use Drupal\views\ViewExecutable;
 /**
  * @file
  * Monitoring bootstrap file.
@@ -16,7 +21,7 @@ use Drupal\search_api\IndexInterface;
 /**
  * Returns an instance of the sensor manager.
  *
- * @return \Drupal\monitoring\Sensor\SensorManager
+ * @return SensorManager
  *   The sensor manager.
  */
 function monitoring_sensor_manager() {
@@ -26,10 +31,10 @@ function monitoring_sensor_manager() {
 /**
  * Returns monitoring sensor config.
  *
- * @return \Drupal\monitoring\Entity\SensorConfig[]
+ * @return SensorConfig[]
  *   List of SensorConfig instances.
  *
- * @throws \Drupal\monitoring\Sensor\NonExistingSensorException
+ * @throws NonExistingSensorException
  *   In case a sensor name is provided, which does not exists.
  *
  * @see \Drupal\monitoring\Sensor\SensorManager
@@ -44,7 +49,7 @@ function monitoring_sensor_config() {
  * @param bool $enabled
  *   Sensor isEnabled flag.
  *
- * @return \Drupal\monitoring\Entity\SensorConfig[]
+ * @return SensorConfig[]
  *   Sensor config.
  */
 function monitoring_sensor_config_by_categories($enabled = TRUE) {
@@ -127,12 +132,12 @@ function initialize_requirements_sensors($module) {
  * @param bool $verbose
  *   (optional) Set to TRUE to enable verbose execution, defaults to FALSE.
  *
- * @return \Drupal\monitoring\Result\SensorResultInterface
+ * @return SensorResultInterface
  *   A single result object.
  *
- * @throws \Drupal\monitoring\Sensor\NonExistingSensorException
+ * @throws NonExistingSensorException
  *   Thrown if the requested sensor does not exist.
- * @throws \Drupal\monitoring\Sensor\DisabledSensorException
+ * @throws DisabledSensorException
  *   Thrown if any of the passed sensor names is not enabled.
  */
 function monitoring_sensor_run($sensor_name, $force_run = FALSE, $verbose = FALSE) {
@@ -150,12 +155,12 @@ function monitoring_sensor_run($sensor_name, $force_run = FALSE, $verbose = FALS
  * @param bool $verbose
  *   (optional) Set to TRUE to enable verbose execution, defaults to FALSE.
  *
- * @return \Drupal\monitoring\Result\SensorResultInterface[]
+ * @return SensorResultInterface[]
  *   List of result objects.
  *
- * @throws \Drupal\monitoring\Sensor\NonExistingSensorException
+ * @throws NonExistingSensorException
  *   Thrown if the requested sensor does not exist.
- * @throws \Drupal\monitoring\Sensor\DisabledSensorException
+ * @throws DisabledSensorException
  *   Thrown if any of the passed sensor names is not enabled.
  *
  * @see \Drupal\monitoring\Sensor\SensorManager
@@ -174,7 +179,7 @@ function monitoring_sensor_run_multiple($sensor_names = array(), $force_run = FA
     }
   }
 
-  /** @var \Drupal\Monitoring\SensorRunner $runner */
+  /** @var SensorRunner $runner */
   $runner = \Drupal::service('monitoring.sensor_runner');
   $results = $runner->runSensors($sensors_config, $force_run, $verbose);
   return $results;
@@ -189,7 +194,7 @@ function monitoring_sensor_run_multiple($sensor_names = array(), $force_run = FA
  *    Is it the right way how to inject custom css classes?
  */
 function monitoring_preprocess_views_view_table(&$vars) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   $view = $vars['view'];
   // We want to alter only the monitoring sensor results view.
   // @todo - really?? we do not have the view machine name available here?
@@ -213,7 +218,7 @@ function monitoring_preprocess_views_view_table(&$vars) {
  *
  * @param string $action
  *   View/page action.
- * @param \Drupal\monitoring\Entity\SensorConfig $sensor_config
+ * @param SensorConfig $sensor_config
  *   Sensor config.
  *
  * @return string
@@ -232,10 +237,10 @@ function monitoring_sensor_action_title($action, SensorConfig $sensor_config) {
 /**
  * Saves the sensor result.
  *
- * @param \Drupal\monitoring\Result\SensorResultInterface $result
+ * @param SensorResultInterface $result
  *   Sensor call result.
  *
- * @return \Drupal\monitoring\Entity\SensorResultEntity
+ * @return SensorResultEntity
  *   Sensor result entity.
  */
 function monitoring_sensor_result_save(SensorResultInterface $result) {
@@ -258,7 +263,7 @@ function monitoring_sensor_result_save(SensorResultInterface $result) {
  * @param string $sensor_name
  *   The name of the sensor.
  *
- * @return \Drupal\monitoring\Entity\SensorResultEntity|null
+ * @return SensorResultEntity|null
  *   A SensorResultEntity representing the last sensor result.
  */
 function monitoring_sensor_result_last($sensor_name) {
@@ -284,7 +289,7 @@ function monitoring_sensor_result_last($sensor_name) {
  * @param string $sensor_name
  *   The name of the sensor.
  *
- * @return \Drupal\monitoring\Entity\SensorResultEntity|null
+ * @return SensorResultEntity|null
  *   A SensorResultEntity representing the second last sensor result.
  */
 function monitoring_sensor_result_second_last($sensor_name) {
@@ -421,7 +426,7 @@ function monitoring_value_types() {
 /**
  * Formatter for time interval value.
  *
- * @param \Drupal\monitoring\Result\SensorResultInterface $result
+ * @param SensorResultInterface $result
  *   Result object for which to get the formatted value.
  *
  * @return string
@@ -436,7 +441,7 @@ function monitoring_value_label_callback_interval(SensorResultInterface $result)
 /**
  * Formatter for boolean value (TRUE, FALSE).
  *
- * @param \Drupal\monitoring\Result\SensorResultInterface $result
+ * @param SensorResultInterface $result
  *   Result object for which to get the formatted value.
  *
  * @return string
diff --git a/src/Annotation/SensorPlugin.php b/src/Annotation/SensorPlugin.php
index f09637d..812ea13 100644
--- a/src/Annotation/SensorPlugin.php
+++ b/src/Annotation/SensorPlugin.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\monitoring\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,14 +27,14 @@ class SensorPlugin extends Plugin {
   /**
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
   /**
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation (optional)
+   * @var Translation (optional)
    */
   public $description = '';
 
diff --git a/src/Commands/MonitoringCommands.php b/src/Commands/MonitoringCommands.php
index fcb9dd0..b9b6a74 100644
--- a/src/Commands/MonitoringCommands.php
+++ b/src/Commands/MonitoringCommands.php
@@ -41,23 +41,23 @@ class MonitoringCommands extends DrushCommands {
   /**
    * The Sensor Manager service.
    *
-   * @var \Drupal\monitoring\Sensor\SensorManager
+   * @var SensorManager
    */
   protected $sensorManager;
 
   /**
    * The Date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * MonitoringCommands constructor.
    *
-   * @param \Drupal\monitoring\Sensor\SensorManager $sensor_manager
+   * @param SensorManager $sensor_manager
    *   The Sensor Manager service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The Date formatter service.
    */
   public function __construct(SensorManager $sensor_manager, DateFormatterInterface $date_formatter) {
@@ -84,7 +84,7 @@ class MonitoringCommands extends DrushCommands {
    *   has_thresholds: Has thresholds
    * @default-fields label,name,category,enabled
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   A list with sensors.
    */
   public function sensorConfigAll() {
@@ -132,7 +132,7 @@ class MonitoringCommands extends DrushCommands {
    *   enabled: Enabled
    *   has_thresholds: Has thresholds
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\PropertyList
+   * @return PropertyList
    *   A list with sensor config properties.
    */
   public function sensorConfig($sensor_name = NULL) {
@@ -215,7 +215,7 @@ class MonitoringCommands extends DrushCommands {
    *   verbose: Verbose
    *   sensor: Sensor data
    *
-   * @return \Consolidation\AnnotatedCommand\CommandResult
+   * @return CommandResult
    *   The result list with exit code.
    */
   public function run($sensor_name = NULL, array $options = [
@@ -362,7 +362,7 @@ class MonitoringCommands extends DrushCommands {
   /**
    * Results output in sensu format.
    *
-   * @param \Drupal\monitoring\Result\SensorResultInterface[] $results
+   * @param SensorResultInterface[] $results
    *   List of sensor result objects.
    * @param string $source
    *   Sensu source.
diff --git a/src/Controller/CategoryAutocompleteController.php b/src/Controller/CategoryAutocompleteController.php
index cc04892..b1eab5c 100644
--- a/src/Controller/CategoryAutocompleteController.php
+++ b/src/Controller/CategoryAutocompleteController.php
@@ -19,10 +19,10 @@ class CategoryAutocompleteController {
   /**
    * Retrieves suggestions for sensor category auto completion.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing autocomplete suggestions.
    */
   public function autocomplete(Request $request) {
diff --git a/src/Controller/ConfigAutocompleteController.php b/src/Controller/ConfigAutocompleteController.php
index 6dbbc0c..a7b252f 100644
--- a/src/Controller/ConfigAutocompleteController.php
+++ b/src/Controller/ConfigAutocompleteController.php
@@ -19,10 +19,10 @@ class ConfigAutocompleteController {
   /**
    * Retrieves suggestions for config auto completion.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing autocomplete suggestions.
    */
   public function autocomplete(Request $request) {
diff --git a/src/Controller/ForceRunController.php b/src/Controller/ForceRunController.php
index 99335b4..97885aa 100644
--- a/src/Controller/ForceRunController.php
+++ b/src/Controller/ForceRunController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\monitoring\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\monitoring\Entity\SensorConfig;
 use Drupal\monitoring\Sensor\SensorManager;
@@ -13,23 +14,23 @@ class ForceRunController extends ControllerBase {
   /**
    * The sensor manager.
    *
-   * @var \Drupal\monitoring\Sensor\SensorManager
+   * @var SensorManager
    */
   protected $sensorManager;
 
   /**
    * The sensor runner.
    *
-   * @var \Drupal\monitoring\SensorRunner
+   * @var SensorRunner
    */
   protected $sensorRunner;
 
   /**
    * Constructs a \Drupal\monitoring\Form\SensorSettingsForm object.
    *
-   * @param \Drupal\monitoring\SensorRunner $sensor_runner
+   * @param SensorRunner $sensor_runner
    *   The sensor runner service.
-   * @param \Drupal\monitoring\Sensor\SensorManager $sensor_manager
+   * @param SensorManager $sensor_manager
    *   The sensor manager service.
    */
   public function __construct(SensorRunner $sensor_runner, SensorManager $sensor_manager) {
@@ -50,7 +51,7 @@ class ForceRunController extends ControllerBase {
   /**
    * Force runs all sensors.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function forceRunAll() {
     $this->sensorRunner->resetCache();
@@ -61,9 +62,9 @@ class ForceRunController extends ControllerBase {
   /**
    * Force runs a single sensor.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig $monitoring_sensor_config
+   * @param SensorConfig $monitoring_sensor_config
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function forceRunSensor(SensorConfig $monitoring_sensor_config) {
 
diff --git a/src/Controller/RequirementsIgnore.php b/src/Controller/RequirementsIgnore.php
index 71b23d9..bf5bcfa 100644
--- a/src/Controller/RequirementsIgnore.php
+++ b/src/Controller/RequirementsIgnore.php
@@ -6,6 +6,7 @@
 
 namespace Drupal\monitoring\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\monitoring\Entity\SensorConfig;
 use Drupal\monitoring\Sensor\SensorManager;
@@ -17,23 +18,23 @@ class RequirementsIgnore extends ControllerBase {
   /**
    * The sensor manager.
    *
-   * @var \Drupal\monitoring\Sensor\SensorManager
+   * @var SensorManager
    */
   protected $sensorManager;
 
   /**
    * The sensor runner.
    *
-   * @var \Drupal\monitoring\SensorRunner
+   * @var SensorRunner
    */
   protected $sensorRunner;
 
   /**
    * Constructs a \Drupal\monitoring\Form\SensorSettingsForm object.
    *
-   * @param \Drupal\monitoring\SensorRunner $sensor_runner
+   * @param SensorRunner $sensor_runner
    *   The sensor runner service.
-   * @param \Drupal\monitoring\Sensor\SensorManager $sensor_manager
+   * @param SensorManager $sensor_manager
    *   The sensor manager service.
    */
   public function __construct(SensorRunner $sensor_runner, SensorManager $sensor_manager) {
@@ -54,9 +55,9 @@ class RequirementsIgnore extends ControllerBase {
   /**
    * Adds sensor key into the excluded list.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig $monitoring_sensor_config
+   * @param SensorConfig $monitoring_sensor_config
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function sensorIgnoreKey(SensorConfig $monitoring_sensor_config, $key) {
     if (!in_array($key, $monitoring_sensor_config->settings['exclude_keys'])) {
@@ -74,9 +75,9 @@ class RequirementsIgnore extends ControllerBase {
   /**
    * Removes sensor key from the excluded list.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig $monitoring_sensor_config
+   * @param SensorConfig $monitoring_sensor_config
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function sensorUnignoreKey(SensorConfig $monitoring_sensor_config, $key) {
     if (in_array($key, $monitoring_sensor_config->settings['exclude_keys'])) {
diff --git a/src/Controller/SensorList.php b/src/Controller/SensorList.php
index 7ba0609..03a3f0a 100644
--- a/src/Controller/SensorList.php
+++ b/src/Controller/SensorList.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\monitoring\Controller;
 
+use Drupal\monitoring\SensorConfigInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\monitoring\Result\SensorResultInterface;
@@ -14,23 +15,23 @@ class SensorList extends ControllerBase {
   /**
    * The sensor runner.
    *
-   * @var \Drupal\monitoring\SensorRunner
+   * @var SensorRunner
    */
   protected $sensorRunner;
 
   /**
    * The sensor manager.
    *
-   * @var \Drupal\monitoring\Sensor\SensorManager
+   * @var SensorManager
    */
   protected $sensorManager;
 
   /**
    * Constructs a \Drupal\monitoring\Form\SensorDetailForm object.
    *
-   * @param \Drupal\monitoring\SensorRunner $sensor_runner
+   * @param SensorRunner $sensor_runner
    *   The factory for configuration objects.
-   * @param \Drupal\monitoring\Sensor\SensorManager $sensor_manager
+   * @param SensorManager $sensor_manager
    *   The sensor manager service.
    */
   public function __construct(SensorRunner $sensor_runner, SensorManager $sensor_manager) {
@@ -78,12 +79,12 @@ class SensorList extends ControllerBase {
       );
       $ok_row_count = 0;
 
-      /** @var \Drupal\monitoring\SensorConfigInterface $sensor_config */
+      /** @var SensorConfigInterface $sensor_config */
       foreach ($category_sensor_config as $sensor_name => $sensor_config) {
         if (!isset($results[$sensor_name])) {
           continue;
         }
-        /** @var \Drupal\monitoring\Result\SensorResultInterface $sensor_result */
+        /** @var SensorResultInterface $sensor_result */
         $sensor_result = $results[$sensor_name];
         $called_before = \Drupal::time()->getRequestTime() - $sensor_result->getTimestamp();
         if ($called_before > $oldest_sensor_age) {
diff --git a/src/Controller/TemporaryFilesController.php b/src/Controller/TemporaryFilesController.php
index bb3d03b..6fa3678 100644
--- a/src/Controller/TemporaryFilesController.php
+++ b/src/Controller/TemporaryFilesController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\monitoring\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\file\FileInterface;
 use Drupal\monitoring\SensorConfigInterface;
@@ -13,14 +14,14 @@ class TemporaryFilesController extends ControllerBase {
   /**
    * The sensor runner.
    *
-   * @var \Drupal\monitoring\SensorRunner
+   * @var SensorRunner
    */
   protected $sensorRunner;
 
   /**
    * Constructs a \Drupal\monitoring\Controller\TemporaryFilesController object.
    *
-   * @param \Drupal\monitoring\SensorRunner $sensor_runner
+   * @param SensorRunner $sensor_runner
    *   The sensor runner service.
    */
   public function __construct(SensorRunner $sensor_runner) {
@@ -39,12 +40,12 @@ class TemporaryFilesController extends ControllerBase {
   /**
    * Makes a file permanent.
    *
-   * @param \Drupal\monitoring\SensorConfigInterface $monitoring_sensor_config
+   * @param SensorConfigInterface $monitoring_sensor_config
    *   The sensor config.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function makePermanent(SensorConfigInterface $monitoring_sensor_config, FileInterface $file) {
     $file->setPermanent();
diff --git a/src/Form/SensorDetailForm.php b/src/Form/SensorDetailForm.php
index ee91f72..a378fd8 100644
--- a/src/Form/SensorDetailForm.php
+++ b/src/Form/SensorDetailForm.php
@@ -6,6 +6,7 @@
 
 namespace Drupal\monitoring\Form;
 
+use Drupal\monitoring\Entity\SensorConfig;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\monitoring\SensorConfigInterface;
 use Drupal\monitoring\Sensor\DisabledSensorException;
@@ -25,23 +26,23 @@ class SensorDetailForm extends EntityForm {
   /**
    * The sensor runner.
    *
-   * @var \Drupal\monitoring\SensorRunner
+   * @var SensorRunner
    */
   protected $sensorRunner;
 
   /**
    * The sensor manager.
    *
-   * @var \Drupal\monitoring\Sensor\SensorManager
+   * @var SensorManager
    */
   protected $sensorManager;
 
   /**
    * Constructs a \Drupal\monitoring\Form\SensorDetailForm object.
    *
-   * @param \Drupal\monitoring\SensorRunner $sensor_runner
+   * @param SensorRunner $sensor_runner
    *   The factory for configuration objects.
-   * @param \Drupal\monitoring\Sensor\SensorManager $sensor_manager
+   * @param SensorManager $sensor_manager
    *   The sensor manager service.
    */
   public function __construct(SensorRunner $sensor_runner, SensorManager $sensor_manager) {
@@ -72,7 +73,7 @@ class SensorDetailForm extends EntityForm {
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\monitoring\SensorConfigInterface $sensor_config */
+    /** @var SensorConfigInterface $sensor_config */
     $sensor_config = $this->entity;
     try {
       $results = $this->sensorRunner->runSensors(array($sensor_config), FALSE, TRUE);
@@ -223,7 +224,7 @@ class SensorDetailForm extends EntityForm {
   /**
    * Detail page title callback.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig $monitoring_sensor_config
+   * @param SensorConfig $monitoring_sensor_config
    *   The Sensor config.
    *
    * @return string
diff --git a/src/Form/SensorForm.php b/src/Form/SensorForm.php
index 72b7892..3f25e7b 100644
--- a/src/Form/SensorForm.php
+++ b/src/Form/SensorForm.php
@@ -6,6 +6,7 @@
 
 namespace Drupal\monitoring\Form;
 
+use Drupal\monitoring\SensorPlugin\SensorPluginInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -19,7 +20,7 @@ class SensorForm extends EntityForm {
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\monitoring\SensorConfigInterface
+   * @var SensorConfigInterface
    */
   protected $entity;
 
@@ -234,9 +235,9 @@ class SensorForm extends EntityForm {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\monitoring\SensorConfigInterface $sensor_config */
+    /** @var SensorConfigInterface $sensor_config */
     $sensor_config = $this->entity;
-    /** @var \Drupal\monitoring\SensorPlugin\SensorPluginInterface $plugin */
+    /** @var SensorPluginInterface $plugin */
     if ($sensor_config->isNew()) {
       $plugin_id = $form_state->getValue('plugin_id');
       $plugin = monitoring_sensor_manager()->createInstance($plugin_id, array('sensor_config' => $this->entity));
@@ -258,7 +259,7 @@ class SensorForm extends EntityForm {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
 
-    /** @var \Drupal\monitoring\SensorConfigInterface $sensor_config */
+    /** @var SensorConfigInterface $sensor_config */
     $sensor_config = $this->entity;
     $plugin = $sensor_config->getPlugin();
 
@@ -292,7 +293,7 @@ class SensorForm extends EntityForm {
   /**
    * Settings form page title callback.
    *
-   * @param \Drupal\monitoring\SensorConfigInterface $monitoring_sensor_config
+   * @param SensorConfigInterface $monitoring_sensor_config
    *   The Sensor config.
    *
    * @return string
@@ -415,7 +416,7 @@ class SensorForm extends EntityForm {
    *
    * @param string $threshold_key
    *   Key of the threshold value form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Drupal form state object.
    * @param string $message
    *   The validation message.
diff --git a/src/Plugin/monitoring/SensorPlugin/CommerceTurnoverSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/CommerceTurnoverSensorPlugin.php
index 5c79e53..c86a6b0 100644
--- a/src/Plugin/monitoring/SensorPlugin/CommerceTurnoverSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/CommerceTurnoverSensorPlugin.php
@@ -53,7 +53,7 @@ class CommerceTurnoverSensorPlugin extends ContentEntityAggregatorSensorPlugin {
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
diff --git a/src/Plugin/monitoring/SensorPlugin/ConfigValueSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/ConfigValueSensorPlugin.php
index 878dfb3..1e49b41 100644
--- a/src/Plugin/monitoring/SensorPlugin/ConfigValueSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/ConfigValueSensorPlugin.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\monitoring\Plugin\monitoring\SensorPlugin;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Entity\DependencyTrait;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\monitoring\SensorPlugin\ValueComparisonSensorPluginBase;
@@ -54,7 +55,7 @@ class ConfigValueSensorPlugin extends ValueComparisonSensorPluginBase {
    * @param string $name
    *   Config name.
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   The config.
    */
   protected function getConfig($name) {
diff --git a/src/Plugin/monitoring/SensorPlugin/ContentEntityAggregatorSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/ContentEntityAggregatorSensorPlugin.php
index c03b47d..28f33cf 100644
--- a/src/Plugin/monitoring/SensorPlugin/ContentEntityAggregatorSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/ContentEntityAggregatorSensorPlugin.php
@@ -6,6 +6,10 @@
 
 namespace Drupal\monitoring\Plugin\monitoring\SensorPlugin;
 
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
+use Drupal\monitoring\Form\SensorForm;
+use Drupal\monitoring\SensorConfigInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Render\HtmlEscapedText;
 use Drupal\Core\Database\Database;
@@ -50,7 +54,7 @@ class ContentEntityAggregatorSensorPlugin extends DatabaseAggregatorSensorPlugin
   /**
    * Local variable to store \Drupal::entityTypeManger().
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -64,14 +68,14 @@ class ContentEntityAggregatorSensorPlugin extends DatabaseAggregatorSensorPlugin
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Builds the entity aggregate query.
    *
-   * @return \Drupal\Core\Entity\Query\QueryAggregateInterface
+   * @return QueryAggregateInterface
    *   The entity query object.
    */
   protected function getEntityQueryAggregate() {
@@ -104,7 +108,7 @@ class ContentEntityAggregatorSensorPlugin extends DatabaseAggregatorSensorPlugin
    *
    * Similar to the aggregate query, but without aggregation.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The entity query object.
    *
    * @see \Drupal\monitoring\Plugin\monitoring\SensorPlugin\ContentEntityAggregatorSensorPlugin::getEntityQueryAggregate()
@@ -212,7 +216,7 @@ class ContentEntityAggregatorSensorPlugin extends DatabaseAggregatorSensorPlugin
   public function verboseResultUnaggregated(array &$output) {
     $output = [];
 
-    /** @var \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager */
+    /** @var FieldTypePluginManagerInterface $field_type_manager */
     $field_type_manager = \Drupal::service('plugin.manager.field.field_type');
     Database::startLog('monitoring_ceasp');
 
@@ -501,9 +505,9 @@ class ContentEntityAggregatorSensorPlugin extends DatabaseAggregatorSensorPlugin
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
     parent::submitConfigurationForm($form, $form_state);
 
-    /** @var \Drupal\monitoring\Form\SensorForm $sensor_form */
+    /** @var SensorForm $sensor_form */
     $sensor_form = $form_state->getFormObject();
-    /** @var \Drupal\monitoring\SensorConfigInterface $sensor_config */
+    /** @var SensorConfigInterface $sensor_config */
     $sensor_config = $sensor_form->getEntity();
     $settings = $sensor_config->getSettings();
 
@@ -615,7 +619,7 @@ class ContentEntityAggregatorSensorPlugin extends DatabaseAggregatorSensorPlugin
   /**
    * Add aggregation to the query.
    *
-   * @param \Drupal\Core\Entity\Query\QueryAggregateInterface $query
+   * @param QueryAggregateInterface $query
    *   The query.
    */
   protected function addAggregate(QueryAggregateInterface $query) {
diff --git a/src/Plugin/monitoring/SensorPlugin/CoreRequirementsSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/CoreRequirementsSensorPlugin.php
index 89fca92..fd77fca 100644
--- a/src/Plugin/monitoring/SensorPlugin/CoreRequirementsSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/CoreRequirementsSensorPlugin.php
@@ -250,7 +250,7 @@ class CoreRequirementsSensorPlugin extends SensorPluginBase implements ExtendedI
   /**
    * Sets sensor result status and status messages for the given requirements.
    *
-   * @param \Drupal\monitoring\Result\SensorResultInterface $result
+   * @param SensorResultInterface $result
    *   The result object to update.
    * @param array $requirements
    *   Array of requirements to process.
diff --git a/src/Plugin/monitoring/SensorPlugin/DatabaseAggregatorSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/DatabaseAggregatorSensorPlugin.php
index a8ae560..688be6c 100644
--- a/src/Plugin/monitoring/SensorPlugin/DatabaseAggregatorSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/DatabaseAggregatorSensorPlugin.php
@@ -6,6 +6,9 @@
 
 namespace Drupal\monitoring\Plugin\monitoring\SensorPlugin;
 
+use Drupal\Core\Database\StatementInterface;
+use Drupal\Core\Database\Query\Select;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\monitoring\Result\SensorResultInterface;
@@ -46,7 +49,7 @@ class DatabaseAggregatorSensorPlugin extends DatabaseAggregatorSensorPluginBase
   /**
    * The arguments of the executed query.
    *
-   * @var \Drupal\Core\Database\StatementInterface
+   * @var StatementInterface
    */
   protected $executedQuery;
 
@@ -92,7 +95,7 @@ class DatabaseAggregatorSensorPlugin extends DatabaseAggregatorSensorPluginBase
   /**
    * Builds simple aggregate query over one db table.
    *
-   * @return \Drupal\Core\Database\Query\Select
+   * @return Select
    *   The select query object.
    */
   protected function getAggregateQuery() {
@@ -120,7 +123,7 @@ class DatabaseAggregatorSensorPlugin extends DatabaseAggregatorSensorPluginBase
   /**
    * Adds the aggregate expression to the select query.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $select
+   * @param SelectInterface $select
    *   The database select query.
    */
   protected function addAggregateExpression(SelectInterface $select) {
@@ -132,7 +135,7 @@ class DatabaseAggregatorSensorPlugin extends DatabaseAggregatorSensorPluginBase
    *
    * @param array $condition
    *   The condition array.
-   * @param \Drupal\Core\Database\Query\SelectInterface $select
+   * @param SelectInterface $select
    *   The database select query.
    */
   protected function translateCondition(array &$condition, SelectInterface $select) {
@@ -145,7 +148,7 @@ class DatabaseAggregatorSensorPlugin extends DatabaseAggregatorSensorPluginBase
    *
    * Similar to the aggregate query, but without aggregation.
    *
-   * @return \Drupal\Core\Database\Query\Select
+   * @return Select
    *   The select query object.
    *
    * @see \Drupal\monitoring\Plugin\monitoring\SensorPlugin\DatabaseAggregatorSensorPlugin::getAggregateQuery()
@@ -183,7 +186,7 @@ class DatabaseAggregatorSensorPlugin extends DatabaseAggregatorSensorPluginBase
   /**
    * Builds history query over one db table.
    *
-   * @return \Drupal\Core\Database\Query\Select
+   * @return Select
    *   The select query object.
    */
   protected function getHistoryQuery() {
@@ -210,7 +213,7 @@ class DatabaseAggregatorSensorPlugin extends DatabaseAggregatorSensorPluginBase
   /**
    * Get the timestamp of the oldest entry that fits owr conditions.
    *
-   * @return \Drupal\Core\Database\Query\Select
+   * @return Select
    *   The timestamp of the oldest entry.
    */
   protected function getOldestEntry() {
@@ -689,7 +692,7 @@ class DatabaseAggregatorSensorPlugin extends DatabaseAggregatorSensorPluginBase
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
     parent::validateConfigurationForm($form, $form_state);
 
-    /** @var \Drupal\Core\Database\Connection $database */
+    /** @var Connection $database */
     $database = $this->getService('database');
     $table = $form_state->getValue(array('settings', 'table'));
     $query = $database->select($table);
diff --git a/src/Plugin/monitoring/SensorPlugin/DatabaseDiskUsagePlugin.php b/src/Plugin/monitoring/SensorPlugin/DatabaseDiskUsagePlugin.php
index dc7f61d..2b1de05 100644
--- a/src/Plugin/monitoring/SensorPlugin/DatabaseDiskUsagePlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/DatabaseDiskUsagePlugin.php
@@ -25,29 +25,29 @@ class DatabaseDiskUsagePlugin extends SensorPluginBase implements ExtendedInfoSe
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Active database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * DatabaseDiskUsagePlugin constructor.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig $sensor_config
+   * @param SensorConfig $sensor_config
    *   Sensor config object.
    * @param string $plugin_id
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\State\StateInterface $state_system
+   * @param StateInterface $state_system
    *   The state storage object.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
    */
   public function __construct(SensorConfig $sensor_config, $plugin_id, $plugin_definition, StateInterface $state_system, Connection $database) {
diff --git a/src/Plugin/monitoring/SensorPlugin/DisappearedSensorsSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/DisappearedSensorsSensorPlugin.php
index 6d14fe1..e7599c3 100644
--- a/src/Plugin/monitoring/SensorPlugin/DisappearedSensorsSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/DisappearedSensorsSensorPlugin.php
@@ -6,6 +6,7 @@
 
 namespace Drupal\monitoring\Plugin\monitoring\SensorPlugin;
 
+use Drupal\monitoring\Entity\SensorConfig;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\monitoring\Result\SensorResultInterface;
 use Drupal\monitoring\SensorPlugin\SensorPluginBase;
@@ -77,7 +78,7 @@ class DisappearedSensorsSensorPlugin extends SensorPluginBase {
    *
    * @param array $available_sensors
    *   The available sensors list.
-   * @param \Drupal\monitoring\Entity\SensorConfig[] $sensor_config
+   * @param SensorConfig[] $sensor_config
    *   The current sensor config.
    *
    * @return array
@@ -116,11 +117,11 @@ class DisappearedSensorsSensorPlugin extends SensorPluginBase {
   /**
    * Checks for missing sensors.
    *
-   * @param \Drupal\monitoring\Result\SensorResultInterface $result
+   * @param SensorResultInterface $result
    *   The current sensor result object.
    * @param array $available_sensors
    *   The available sensors list.
-   * @param \Drupal\monitoring\Entity\SensorConfig[] $sensor_config
+   * @param SensorConfig[] $sensor_config
    *   The current sensor config.
    */
   protected function checkForMissingSensors(SensorResultInterface $result, $available_sensors, $sensor_config) {
diff --git a/src/Plugin/monitoring/SensorPlugin/DiskUsageSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/DiskUsageSensorPlugin.php
index 1b1af81..fefe157 100644
--- a/src/Plugin/monitoring/SensorPlugin/DiskUsageSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/DiskUsageSensorPlugin.php
@@ -25,14 +25,14 @@ class DiskUsageSensorPlugin extends SensorPluginBase {
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
diff --git a/src/Plugin/monitoring/SensorPlugin/EnabledModulesSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/EnabledModulesSensorPlugin.php
index 0a81f38..d3de32a 100644
--- a/src/Plugin/monitoring/SensorPlugin/EnabledModulesSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/EnabledModulesSensorPlugin.php
@@ -6,6 +6,8 @@
 
 namespace Drupal\monitoring\Plugin\monitoring\SensorPlugin;
 
+use Drupal\monitoring\Entity\SensorConfig;
+use Drupal\monitoring\Result\SensorResult;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\monitoring\Result\SensorResultInterface;
 use Drupal\monitoring\SensorPlugin\SensorPluginBase;
@@ -44,7 +46,7 @@ class EnabledModulesSensorPlugin extends SensorPluginBase {
     // Otherwise test run the sensor.
     else {
       // Run on a temporary sensor config id with some changes.
-      /** @var \Drupal\monitoring\Entity\SensorConfig $run_config */
+      /** @var SensorConfig $run_config */
       $run_config = $this->sensorConfig->createDuplicate();
       // Avoid name clashes in SensorManager / caching.
       $run_config->id = $this->sensorConfig->id() . '_temp';
@@ -53,7 +55,7 @@ class EnabledModulesSensorPlugin extends SensorPluginBase {
       // Force no additional allowed to make differences visible in message.
       $run_config->settings['allow_additional'] = FALSE;
 
-      /** @var \Drupal\monitoring\Result\SensorResult $result */
+      /** @var SensorResult $result */
       $result = \Drupal::service('monitoring.sensor_runner')
         ->runSensors(array($run_config->id() => $run_config), TRUE)[$run_config->id()];
 
@@ -102,7 +104,7 @@ class EnabledModulesSensorPlugin extends SensorPluginBase {
 
     foreach ($modules as $module => $module_data) {
       // Skip profiles.
-      if (strpos(drupal_get_path('module', $module), 'profiles') === 0) {
+      if (strpos(\Drupal::service('extension.list.module')->getPath($module), 'profiles') === 0) {
         continue;
       }
       // As we also include hidden modules, some might have no name at all,
@@ -184,7 +186,7 @@ class EnabledModulesSensorPlugin extends SensorPluginBase {
     $monitoring_installed_modules = array();
     // Filter out install profile.
     foreach (array_keys(Drupal::moduleHandler()->getModuleList()) as $module) {
-      $path_parts = explode('/', drupal_get_path('module', $module));
+      $path_parts = explode('/', \Drupal::service('extension.list.module')->getPath($module));
       if ($path_parts[0] != 'profiles') {
         $monitoring_installed_modules[$module] = $module;
       }
diff --git a/src/Plugin/monitoring/SensorPlugin/GitDirtyTreeSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/GitDirtyTreeSensorPlugin.php
index 66b98fe..bc19d62 100644
--- a/src/Plugin/monitoring/SensorPlugin/GitDirtyTreeSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/GitDirtyTreeSensorPlugin.php
@@ -262,7 +262,7 @@ class GitDirtyTreeSensorPlugin extends SensorPluginBase implements ExtendedInfoS
   /**
    * Run the command and set the status message and the status to the result.
    *
-   * @param \Drupal\monitoring\Result\SensorResultInterface $result
+   * @param SensorResultInterface $result
    *   Sensor result object.
    * @param string $cmd
    *   Command we want to run.
diff --git a/src/Plugin/monitoring/SensorPlugin/ImageMissingStyleSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/ImageMissingStyleSensorPlugin.php
index 2dbc1d0..bc33738 100644
--- a/src/Plugin/monitoring/SensorPlugin/ImageMissingStyleSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/ImageMissingStyleSensorPlugin.php
@@ -6,6 +6,8 @@
 
 namespace Drupal\monitoring\Plugin\monitoring\SensorPlugin;
 
+use Drupal\file\FileUsage\FileUsageInterface;
+use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Drupal\file\Entity\File;
@@ -107,7 +109,7 @@ class ImageMissingStyleSensorPlugin extends WatchdogAggregatorSensorPlugin {
           ->execute();
         if (!empty($file)) {
           $file = File::load(array_shift($file));
-          /** @var \Drupal\file\FileUsage\FileUsageInterface $usage */
+          /** @var FileUsageInterface $usage */
           $list_usages = \Drupal::service('file.usage')->listUsage($file);
           $usages = 0;
           foreach (new RecursiveIteratorIterator(new RecursiveArrayIterator($list_usages)) as $sub) {
@@ -143,7 +145,7 @@ class ImageMissingStyleSensorPlugin extends WatchdogAggregatorSensorPlugin {
   public function verboseResultUnaggregated(array &$output) {
     parent::verboseResultUnaggregated($output);
     foreach ($output['verbose_sensor_result']['#rows'] as $key => $row) {
-      /** @var \Drupal\Component\Render\FormattableMarkup $message */
+      /** @var FormattableMarkup $message */
       $message = $row['message'];
       $tmp_str = substr($message->jsonSerialize(), strpos($message->jsonSerialize(), '>') + 1);
       $output['verbose_sensor_result']['#rows'][$key]['path'] = substr($tmp_str, 0, strpos($tmp_str, '<'));
diff --git a/src/Plugin/monitoring/SensorPlugin/SolrDiskUsageSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/SolrDiskUsageSensorPlugin.php
index 76cf858..f49025b 100644
--- a/src/Plugin/monitoring/SensorPlugin/SolrDiskUsageSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/SolrDiskUsageSensorPlugin.php
@@ -34,29 +34,29 @@ class SolrDiskUsageSensorPlugin extends SensorPluginBase implements ExtendedInfo
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Instantiates a sensor object.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig $sensor_config
+   * @param SensorConfig $sensor_config
    *   Sensor config object.
    * @param string $plugin_id
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(SensorConfig $sensor_config, $plugin_id, $plugin_definition, StateInterface $state, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/monitoring/SensorPlugin/StateValueSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/StateValueSensorPlugin.php
index 5bac9de..8338dfd 100644
--- a/src/Plugin/monitoring/SensorPlugin/StateValueSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/StateValueSensorPlugin.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\monitoring\Plugin\monitoring\SensorPlugin;
 
+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
 use Drupal\monitoring\SensorPlugin\ValueComparisonSensorPluginBase;
 
 /**
@@ -47,7 +48,7 @@ class StateValueSensorPlugin extends ValueComparisonSensorPluginBase {
   /**
    * Gets state.
    *
-   * @return \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @return KeyValueStoreInterface
    *   The state.
    */
   protected function getState() {
diff --git a/src/Plugin/monitoring/SensorPlugin/SystemLoadSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/SystemLoadSensorPlugin.php
index 7de1ea8..ec76965 100644
--- a/src/Plugin/monitoring/SensorPlugin/SystemLoadSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/SystemLoadSensorPlugin.php
@@ -24,7 +24,7 @@ class SystemLoadSensorPlugin extends SensorPluginBase {
   /**
    * Holds the state system instance.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
diff --git a/src/Plugin/monitoring/SensorPlugin/SystemMemorySensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/SystemMemorySensorPlugin.php
index 4629dcd..721cdde 100644
--- a/src/Plugin/monitoring/SensorPlugin/SystemMemorySensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/SystemMemorySensorPlugin.php
@@ -25,7 +25,7 @@ class SystemMemorySensorPlugin extends SensorPluginBase implements ExtendedInfoS
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
diff --git a/src/Plugin/monitoring/SensorPlugin/TemporaryFilesUsagesSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/TemporaryFilesUsagesSensorPlugin.php
index 8c5b8fd..db9db24 100644
--- a/src/Plugin/monitoring/SensorPlugin/TemporaryFilesUsagesSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/TemporaryFilesUsagesSensorPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\monitoring\Plugin\monitoring\SensorPlugin;
 
+use Drupal\file\FileUsage\FileUsageInterface;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ -83,7 +84,7 @@ class TemporaryFilesUsagesSensorPlugin extends DatabaseAggregatorSensorPlugin {
       $types = [];
       $fid = $row->fid;
       $file = File::load($fid);
-      /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+      /** @var FileUsageInterface $file_usage */
       $file_usage = \Drupal::service('file.usage');
 
       // List usages for the file.
@@ -118,7 +119,7 @@ class TemporaryFilesUsagesSensorPlugin extends DatabaseAggregatorSensorPlugin {
       if (!empty($types)) {
         // Delete the last unnecessary comma.
         array_pop($types);
-        $filename = Link::fromTextAndUrl($file->getFilename(), Url::fromUri(file_create_url($file->getFileUri())));
+        $filename = Link::fromTextAndUrl($file->getFilename(), \Drupal::service('file_url_generator')->generate($file->getFileUri()));
         $status = Link::createFromRoute('Make permanent', 'monitoring.make_file_permanent', [
           'monitoring_sensor_config' => $this->sensorConfig->id(),
           'file' => $fid
@@ -127,7 +128,7 @@ class TemporaryFilesUsagesSensorPlugin extends DatabaseAggregatorSensorPlugin {
         $rows[] = [
           'fid' => $fid,
           'filename' => $filename,
-          'usages' => render($types),
+          'usages' => \Drupal::service('renderer')->render($types),
           'status' => $status,
         ];
       }
diff --git a/src/Plugin/monitoring/SensorPlugin/TwigDebugSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/TwigDebugSensorPlugin.php
index 0ccc561..2420c6c 100644
--- a/src/Plugin/monitoring/SensorPlugin/TwigDebugSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/TwigDebugSensorPlugin.php
@@ -26,7 +26,7 @@ class TwigDebugSensorPlugin extends SensorPluginBase {
   /**
    * Holds the container instance.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
diff --git a/src/Plugin/monitoring/SensorPlugin/UpdateStatusSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/UpdateStatusSensorPlugin.php
index 6780b65..672a299 100644
--- a/src/Plugin/monitoring/SensorPlugin/UpdateStatusSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/UpdateStatusSensorPlugin.php
@@ -54,7 +54,7 @@ class UpdateStatusSensorPlugin extends SensorPluginBase {
   /**
    * Checks core status and sets sensor status message.
    *
-   * @param \Drupal\monitoring\Result\SensorResultInterface $result
+   * @param SensorResultInterface $result
    * @param array $project_data
    */
   protected function checkCore(SensorResultInterface $result, $project_data) {
@@ -81,7 +81,7 @@ class UpdateStatusSensorPlugin extends SensorPluginBase {
   /**
    * Checks contrib status and sets sensor status message.
    *
-   * @param \Drupal\monitoring\Result\SensorResultInterface $result
+   * @param SensorResultInterface $result
    * @param array $project_data
    */
   protected function checkContrib(SensorResultInterface $result, $project_data) {
diff --git a/src/Plugin/monitoring/SensorPlugin/UserIntegritySensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/UserIntegritySensorPlugin.php
index 3cf573b..194d4c8 100644
--- a/src/Plugin/monitoring/SensorPlugin/UserIntegritySensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/UserIntegritySensorPlugin.php
@@ -6,6 +6,7 @@
 
 namespace Drupal\monitoring\Plugin\monitoring\SensorPlugin;
 
+use Drupal\user\PermissionHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\monitoring\SensorPlugin\ExtendedInfoSensorPluginInterface;
 use Drupal\monitoring\SensorPlugin\SensorPluginBase;
@@ -124,7 +125,7 @@ class UserIntegritySensorPlugin extends SensorPluginBase implements ExtendedInfo
    * @param string[] $role_ids
    *   Roles to filter users.
    *
-   * @return \Drupal\user\Entity\User[]
+   * @return User[]
    *   Available users.
    */
   protected function loadCurrentUsers(array $role_ids) {
@@ -192,7 +193,7 @@ class UserIntegritySensorPlugin extends SensorPluginBase implements ExtendedInfo
    *   Restricted roles.
    */
   protected function getRestrictedRoles() {
-    /** @var \Drupal\user\PermissionHandlerInterface $permission_handler */
+    /** @var PermissionHandlerInterface $permission_handler */
     $permission_handler = \Drupal::service('user.permissions');
     $available_permissions = $permission_handler->getPermissions();;
     $this->restrictedPermissions = array();
@@ -215,7 +216,7 @@ class UserIntegritySensorPlugin extends SensorPluginBase implements ExtendedInfo
   /**
    * Process user entity into raw value array.
    *
-   * @param \Drupal\user\Entity\User[] $users
+   * @param User[] $users
    *   Users to process.
    *
    * @return array
diff --git a/src/Plugin/rest/resource/MonitoringSensorConfigResource.php b/src/Plugin/rest/resource/MonitoringSensorConfigResource.php
index cf772d8..b2f6e0d 100644
--- a/src/Plugin/rest/resource/MonitoringSensorConfigResource.php
+++ b/src/Plugin/rest/resource/MonitoringSensorConfigResource.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\monitoring\Plugin\rest\resource;
 
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Url;
 use Drupal\monitoring\Sensor\NonExistingSensorException;
@@ -31,7 +32,7 @@ class MonitoringSensorConfigResource extends ResourceBase {
   /**
    * The sensor manager.
    *
-   * @var \Drupal\monitoring\Sensor\SensorManager
+   * @var SensorManager
    */
   protected $sensorManager;
 
@@ -85,10 +86,10 @@ class MonitoringSensorConfigResource extends ResourceBase {
    * @param string $id
    *   (optional) The sensor name, returns a list of all sensors when empty.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing the sensor config.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    */
   public function get($id = NULL) {
     $format = \Drupal::request()->getRequestFormat('ĵson');
diff --git a/src/Plugin/rest/resource/MonitoringSensorResultResource.php b/src/Plugin/rest/resource/MonitoringSensorResultResource.php
index 2b93748..e0a7fae 100644
--- a/src/Plugin/rest/resource/MonitoringSensorResultResource.php
+++ b/src/Plugin/rest/resource/MonitoringSensorResultResource.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\monitoring\Plugin\rest\resource;
 
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Render\RenderContext;
 use Drupal\Core\Render\RendererInterface;
@@ -35,19 +36,19 @@ class MonitoringSensorResultResource extends ResourceBase {
   /**
    * The sensor manager.
    *
-   * @var \Drupal\monitoring\Sensor\SensorManager
+   * @var SensorManager
    */
   protected $sensorManager;
 
   /**
    * The sensor runner.
    *
-   * @var \Drupal\monitoring\SensorRunner
+   * @var SensorRunner
    */
   protected $sensorRunner;
 
   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -105,10 +106,10 @@ class MonitoringSensorResultResource extends ResourceBase {
    * @param string $id
    *   (optional) The sensor name, returns a list of all sensors when empty.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing the sensor config.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    */
   public function get($id = NULL) {
     $request = \Drupal::request();
diff --git a/src/Result/SensorResult.php b/src/Result/SensorResult.php
index 8b20842..fd1d889 100644
--- a/src/Result/SensorResult.php
+++ b/src/Result/SensorResult.php
@@ -21,7 +21,7 @@ class SensorResult implements SensorResultInterface {
   /**
    * The sensor config instance.
    *
-   * @var \Drupal\monitoring\Entity\SensorConfig
+   * @var SensorConfig
    */
   protected $sensorConfig;
 
@@ -63,7 +63,7 @@ class SensorResult implements SensorResultInterface {
   /**
    * The previous sensor result.
    *
-   * @var \Drupal\monitoring\Entity\SensorResultDataInterface|null
+   * @var SensorResultDataInterface|null
    */
   protected $previousResult = NULL;
 
@@ -72,7 +72,7 @@ class SensorResult implements SensorResultInterface {
    *
    * By default, the sensor status is STATUS_UNKNOWN with empty message.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig $sensor_config
+   * @param SensorConfig $sensor_config
    *   Sensor config object.
    * @param array $cached_data
    *   Result data obtained from a cache.
@@ -314,7 +314,7 @@ class SensorResult implements SensorResultInterface {
    * @return string
    *   Formatted value.
    *
-   * @throws \Drupal\monitoring\Sensor\SensorCompilationException
+   * @throws SensorCompilationException
    */
   public function getFormattedValue($value) {
 
diff --git a/src/Result/SensorResultInterface.php b/src/Result/SensorResultInterface.php
index 6540ce3..3f104e0 100644
--- a/src/Result/SensorResultInterface.php
+++ b/src/Result/SensorResultInterface.php
@@ -6,6 +6,8 @@
 
 namespace Drupal\monitoring\Result;
 
+use Drupal\monitoring\Sensor\SensorCompilationException;
+use Drupal\monitoring\Entity\SensorConfig;
 use Drupal\monitoring\Entity\SensorResultDataInterface;
 
 /**
@@ -37,7 +39,7 @@ interface SensorResultInterface extends SensorResultDataInterface {
    * based on expected value and threshold configurations. See
    * \Drupal\monitoring\SensorPlugin\SensorPluginInterface::runSensor() for details.
    *
-   * @throws \Drupal\monitoring\Sensor\SensorCompilationException
+   * @throws SensorCompilationException
    *   Thrown if an error occurs during the sensor result compilation.
    */
   public function compile();
@@ -147,7 +149,7 @@ interface SensorResultInterface extends SensorResultDataInterface {
   /**
    * Gets sensor config.
    *
-   * @return \Drupal\monitoring\Entity\SensorConfig
+   * @return SensorConfig
    */
   public function getSensorConfig();
 
@@ -201,7 +203,7 @@ interface SensorResultInterface extends SensorResultDataInterface {
   /**
    * Sets the previous sensor result.
    *
-   * @param \Drupal\monitoring\Entity\SensorResultDataInterface|null $previous_result
+   * @param SensorResultDataInterface|null $previous_result
    *   A SensorResultEntity representing the previous sensor result to set.
    *   NULL if there is no previous result.
    */
@@ -210,7 +212,7 @@ interface SensorResultInterface extends SensorResultDataInterface {
   /**
    * Gets the previous sensor result.
    *
-   * @return \Drupal\monitoring\Entity\SensorResultDataInterface|null
+   * @return SensorResultDataInterface|null
    *   A SensorResultEntity representing the previous sensor result. NULL if
    *   there is no previous result.
    */
diff --git a/src/Sensor/SensorManager.php b/src/Sensor/SensorManager.php
index 1520764..9381bee 100644
--- a/src/Sensor/SensorManager.php
+++ b/src/Sensor/SensorManager.php
@@ -6,6 +6,9 @@
 
 namespace Drupal\monitoring\Sensor;
 
+use Drupal\monitoring\SensorPlugin\SensorPluginInterface;
+use Drupal\monitoring\SensorConfigInterface;
+use Drupal\Core\Config\StorageInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\FileStorage;
@@ -34,28 +37,28 @@ class SensorManager extends DefaultPluginManager {
   /**
    * List of sensor definitions.
    *
-   * @var \Drupal\monitoring\Entity\SensorConfig[]
+   * @var SensorConfig[]
    */
   protected $sensor_config;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -65,9 +68,9 @@ class SensorManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger) {
@@ -88,7 +91,7 @@ class SensorManager extends DefaultPluginManager {
     $sensor_config = $configuration['sensor_config'];
     $definition = $this->getDefinition($plugin_id);
     // SensorPlugin class from the sensor definition.
-    /** @var \Drupal\monitoring\SensorPlugin\SensorPluginInterface $class */
+    /** @var SensorPluginInterface $class */
     $class = $definition['class'];
     // Creating instance of the sensor. Refer SensorPlugin.php for arguments.
     return $class::create(\Drupal::getContainer(), $sensor_config, $plugin_id, $definition);
@@ -97,7 +100,7 @@ class SensorManager extends DefaultPluginManager {
   /**
    * Returns monitoring sensor config.
    *
-   * @return \Drupal\monitoring\Entity\SensorConfig[]
+   * @return SensorConfig[]
    *   List of SensorConfig instances.
    */
   public function getAllSensorConfig() {
@@ -112,7 +115,7 @@ class SensorManager extends DefaultPluginManager {
   /**
    * Returns monitoring sensor config for enabled sensors.
    *
-   * @return \Drupal\monitoring\Entity\SensorConfig[]
+   * @return SensorConfig[]
    *   List of SensorConfig instances.
    */
   public function getEnabledSensorConfig() {
@@ -133,10 +136,10 @@ class SensorManager extends DefaultPluginManager {
    * @param string $sensor_name
    *   Sensor id.
    *
-   * @return \Drupal\monitoring\Entity\SensorConfig
+   * @return SensorConfig
    *   A single SensorConfig instance.
    *
-   * @throws \Drupal\monitoring\Sensor\NonExistingSensorException
+   * @throws NonExistingSensorException
    *   Thrown if the requested sensor does not exist.
    */
   public function getSensorConfigByName($sensor_name) {
@@ -155,7 +158,7 @@ class SensorManager extends DefaultPluginManager {
    * @param bool $enabled
    *   Sensor isEnabled flag.
    *
-   * @return \Drupal\monitoring\Entity\SensorConfig[][]
+   * @return SensorConfig[][]
    *   Sensor config.
    */
   public function getSensorConfigByCategories($enabled = TRUE) {
@@ -186,7 +189,7 @@ class SensorManager extends DefaultPluginManager {
    * @param string $sensor_name
    *   Sensor name to be enabled.
    *
-   * @throws \Drupal\monitoring\Sensor\NonExistingSensorException
+   * @throws NonExistingSensorException
    *   Thrown if the requested sensor does not exist.
    */
   public function enableSensor($sensor_name) {
@@ -219,7 +222,7 @@ class SensorManager extends DefaultPluginManager {
    * @param string $sensor_name
    *   Sensor name to be disabled.
    *
-   * @throws \Drupal\monitoring\Sensor\NonExistingSensorException
+   * @throws NonExistingSensorException
    *   Thrown if the requested sensor does not exist.
    */
   public function disableSensor($sensor_name) {
@@ -266,7 +269,7 @@ class SensorManager extends DefaultPluginManager {
     $sensor_ids = $storage->getQuery()
       ->condition('plugin_id', 'core_requirements')
       ->execute();
-    /** @var \Drupal\monitoring\SensorConfigInterface $sensor */
+    /** @var SensorConfigInterface $sensor */
     foreach ($storage->loadMultiple($sensor_ids) as $sensor) {
       $module = $sensor->getSetting('module');
       if (!$this->moduleHandler->implementsHook($module, 'requirements')) {
@@ -281,7 +284,7 @@ class SensorManager extends DefaultPluginManager {
       }
     }
 
-    /** @var \Drupal\Core\Config\StorageInterface[] $config_storages */
+    /** @var StorageInterface[] $config_storages */
     $config_storages[] = new FileStorage($this->moduleHandler->getModule('monitoring')->getPath() . '/config/install');
     $config_storages[] = new FileStorage($this->moduleHandler->getModule('monitoring')->getPath() . '/config/optional');
 
diff --git a/src/Sensor/Thresholds.php b/src/Sensor/Thresholds.php
index 8241e8d..c34f75f 100644
--- a/src/Sensor/Thresholds.php
+++ b/src/Sensor/Thresholds.php
@@ -20,7 +20,7 @@ class Thresholds {
   /**
    * The SensorConfig instance.
    *
-   * @var \Drupal\monitoring\Entity\SensorConfig
+   * @var SensorConfig
    */
   protected $sensorConfig;
 
@@ -34,7 +34,7 @@ class Thresholds {
   /**
    * Constructs a Thresholds object.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig $sensor_config
+   * @param SensorConfig $sensor_config
    *   The SensorConfig instance.
    */
   function __construct(SensorConfig $sensor_config) {
diff --git a/src/SensorConfigAccessControlHandler.php b/src/SensorConfigAccessControlHandler.php
index e22378b..9645375 100644
--- a/src/SensorConfigAccessControlHandler.php
+++ b/src/SensorConfigAccessControlHandler.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\monitoring;
 
+use Drupal\monitoring\Entity\SensorConfig;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -23,7 +24,7 @@ class SensorConfigAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\monitoring\Entity\SensorConfig $entity */
+    /** @var SensorConfig $entity */
     $plugin_definition = $entity->getPlugin()->getPluginDefinition();
 
     if ($operation == 'delete' && !$plugin_definition['addable']) {
diff --git a/src/SensorConfigInterface.php b/src/SensorConfigInterface.php
index 0be4956..f9897d0 100644
--- a/src/SensorConfigInterface.php
+++ b/src/SensorConfigInterface.php
@@ -6,6 +6,7 @@
 
 namespace Drupal\monitoring;
 
+use Drupal\monitoring\SensorPlugin\SensorPluginInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 
@@ -41,7 +42,7 @@ interface SensorConfigInterface extends ConfigEntityInterface {
   /**
    * Gets the sensor plugin.
    *
-   * @return \Drupal\monitoring\SensorPlugin\SensorPluginInterface
+   * @return SensorPluginInterface
    *   Instantiated sensor.
    */
   public function getPlugin();
diff --git a/src/SensorListBuilder.php b/src/SensorListBuilder.php
index 0354872..1e6bfcb 100644
--- a/src/SensorListBuilder.php
+++ b/src/SensorListBuilder.php
@@ -43,7 +43,7 @@ class SensorListBuilder extends ConfigEntityListBuilder implements FormInterface
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\monitoring\Entity\SensorConfig $entity */
+    /** @var SensorConfig $entity */
     $row['category']['data'] = $entity->getCategory();
     $row['category']['class'][] = 'table-filter-category';
     $row['label']['data'] = $entity->label();
@@ -76,7 +76,7 @@ class SensorListBuilder extends ConfigEntityListBuilder implements FormInterface
     $row = $row + parent::buildRow($entity);
 
     // Adds the link to details page if sensor is enabled.
-    /** @var \Drupal\monitoring\Entity\SensorConfig $sensor_config */
+    /** @var SensorConfig $sensor_config */
     $sensor_config = SensorConfig::load($entity->id());
     if ($sensor_config->isEnabled()) {
       $row['operations']['data']['#links']['details'] = array(
@@ -124,7 +124,7 @@ class SensorListBuilder extends ConfigEntityListBuilder implements FormInterface
     $default_value = [];
     $sensor_types = [];
 
-    /** @var \Drupal\monitoring\Entity\SensorConfig $entity */
+    /** @var SensorConfig $entity */
     foreach ($this->load() as $entity) {
       $row = $this->buildRow($entity);
       $options[$entity->id()] = $row;
@@ -206,7 +206,7 @@ class SensorListBuilder extends ConfigEntityListBuilder implements FormInterface
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     foreach ($form_state->getValue('sensors') as $sensor_id => $enabled) {
-      /** @var \Drupal\monitoring\Entity\SensorConfig $sensor */
+      /** @var SensorConfig $sensor */
       $sensor = SensorConfig::load($sensor_id);
       if ($enabled) {
         $sensor->status = TRUE;
diff --git a/src/SensorPlugin/DatabaseAggregatorSensorPluginBase.php b/src/SensorPlugin/DatabaseAggregatorSensorPluginBase.php
index 3bff48a..89161bb 100644
--- a/src/SensorPlugin/DatabaseAggregatorSensorPluginBase.php
+++ b/src/SensorPlugin/DatabaseAggregatorSensorPluginBase.php
@@ -6,6 +6,8 @@
 
 namespace Drupal\monitoring\SensorPlugin;
 
+use Drupal\monitoring\Form\SensorForm;
+use Drupal\monitoring\SensorConfigInterface;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -118,9 +120,9 @@ abstract class DatabaseAggregatorSensorPluginBase extends SensorPluginBase {
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
     parent::submitConfigurationForm($form, $form_state);
 
-    /** @var \Drupal\monitoring\Form\SensorForm $sensor_form */
+    /** @var SensorForm $sensor_form */
     $sensor_form = $form_state->getFormObject();
-    /** @var \Drupal\monitoring\SensorConfigInterface $sensor_config */
+    /** @var SensorConfigInterface $sensor_config */
     $sensor_config = $sensor_form->getEntity();
 
     // Copy time interval field & value into settings if the field is specified.
diff --git a/src/SensorPlugin/ExtendedInfoSensorPluginInterface.php b/src/SensorPlugin/ExtendedInfoSensorPluginInterface.php
index 7e902cd..9106e53 100644
--- a/src/SensorPlugin/ExtendedInfoSensorPluginInterface.php
+++ b/src/SensorPlugin/ExtendedInfoSensorPluginInterface.php
@@ -21,7 +21,7 @@ interface ExtendedInfoSensorPluginInterface {
    * This method is only executed on request. It is guaranteed that runSensor()
    * is executed before this method.
    *
-   * @param \Drupal\monitoring\Result\SensorResultInterface $result
+   * @param SensorResultInterface $result
    *   Sensor result.
    *
    * @return array
diff --git a/src/SensorPlugin/SensorPluginBase.php b/src/SensorPlugin/SensorPluginBase.php
index 955a1ba..72ffa86 100644
--- a/src/SensorPlugin/SensorPluginBase.php
+++ b/src/SensorPlugin/SensorPluginBase.php
@@ -26,7 +26,7 @@ abstract class SensorPluginBase implements SensorPluginInterface {
   /**
    * Current sensor config object.
    *
-   * @var \Drupal\monitoring\Entity\SensorConfig
+   * @var SensorConfig
    */
   protected $sensorConfig;
   protected $services = array();
@@ -56,7 +56,7 @@ abstract class SensorPluginBase implements SensorPluginInterface {
   /**
    * Instantiates a sensor object.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig $sensor_config
+   * @param SensorConfig $sensor_config
    *   Sensor config object.
    * @param string $plugin_id
    *   The plugin_id for the plugin instance.
diff --git a/src/SensorPlugin/SensorPluginInterface.php b/src/SensorPlugin/SensorPluginInterface.php
index 3d7194a..c5ea0bf 100644
--- a/src/SensorPlugin/SensorPluginInterface.php
+++ b/src/SensorPlugin/SensorPluginInterface.php
@@ -111,7 +111,7 @@ interface SensorPluginInterface extends PluginInspectionInterface, PluginFormInt
    *    threshold configuration of exceeds 20 and a status message "10 for user
    *    administrator".
    *
-   * @param \Drupal\monitoring\Result\SensorResultInterface $sensor_result
+   * @param SensorResultInterface $sensor_result
    *   Sensor result object.
    *
    * @throws \Exception
@@ -164,9 +164,9 @@ interface SensorPluginInterface extends PluginInspectionInterface, PluginFormInt
    * Similar to ContainerFactoryPluginInterface but with typed config.
    * @see \Drupal\Core\Plugin\ContainerFactoryPluginInterface
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
-   * @param \Drupal\monitoring\Entity\SensorConfig $sensor_config
+   * @param SensorConfig $sensor_config
    *   The configuration containing information about the sensor instance.
    * @param string $plugin_id
    *   The plugin ID for the plugin instance.
diff --git a/src/SensorRunner.php b/src/SensorRunner.php
index c66d7c2..bc74ff7 100644
--- a/src/SensorRunner.php
+++ b/src/SensorRunner.php
@@ -6,6 +6,8 @@
 
 namespace Drupal\monitoring;
 
+use Drupal\Core\Config\Config;
+use Drupal\monitoring\SensorPlugin\ExtendedInfoSensorPluginInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Timer;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -26,7 +28,7 @@ class SensorRunner {
   /**
    * The sensor manager.
    *
-   * @var \Drupal\monitoring\Sensor\SensorManager
+   * @var SensorManager
    */
   protected $sensorManager;
 
@@ -40,7 +42,7 @@ class SensorRunner {
   /**
    * List of sensors info keyed by sensor name that are meant to run.
    *
-   * @var \Drupal\monitoring\Entity\SensorConfig[]
+   * @var SensorConfig[]
    */
   protected $sensorConfig = array();
 
@@ -59,21 +61,21 @@ class SensorRunner {
   protected $verbose = FALSE;
 
   /**
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * Constructs a SensorRunner.
    *
-   * @param \Drupal\monitoring\Sensor\SensorManager $sensor_manager
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param SensorManager $sensor_manager
+   * @param CacheBackendInterface $cache
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(SensorManager $sensor_manager, CacheBackendInterface $cache, ConfigFactoryInterface $config_factory) {
     $this->sensorManager = $sensor_manager;
@@ -84,7 +86,7 @@ class SensorRunner {
   /**
    * Loads available sensor results from cache.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig[] $sensors_config
+   * @param SensorConfig[] $sensors_config
    *   List of sensor config object that we want to run.
    */
   protected function loadCache(array $sensors_config) {
@@ -105,17 +107,17 @@ class SensorRunner {
   /**
    * Runs the defined sensors.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig[] $sensors_config_all
+   * @param SensorConfig[] $sensors_config_all
    *   List of sensor config object that we want to run.
    * @param bool $force
    *   Force sensor execution.
    * @param bool $verbose
    *   Collect verbose info.
    *
-   * @return \Drupal\monitoring\Result\SensorResultInterface[]
+   * @return SensorResultInterface[]
    *   Array of sensor results.
    *
-   * @throws \Drupal\monitoring\Sensor\DisabledSensorException
+   * @throws DisabledSensorException
    *   Thrown if any of the passed sensors is not enabled.
    *
    * @see \Drupal\monitoring\SensorRunner::runSensor()
@@ -148,13 +150,13 @@ class SensorRunner {
   /**
    * Run a single given sensor.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig $sensor_config
+   * @param SensorConfig $sensor_config
    *   Sensor config
    *
    * @return SensorResultInterface
    *   Sensor result.
    *
-   * @throws \Drupal\monitoring\Sensor\DisabledSensorException
+   * @throws DisabledSensorException
    *   Thrown if the passed sensor is not enabled.
    *
    * @see \Drupal\monitoring\Sensor\SensorInterface::runSensor()
@@ -190,7 +192,7 @@ class SensorRunner {
       // Capture verbose output if requested and if we are able to do so.
       try {
         if ($this->verbose && $sensor_config->isExtendedInfo()) {
-          /** @var \Drupal\monitoring\SensorPlugin\ExtendedInfoSensorPluginInterface $plugin */
+          /** @var ExtendedInfoSensorPluginInterface $plugin */
           $result->setVerboseOutput($plugin->resultVerbose($result));
         }
       }
@@ -213,7 +215,7 @@ class SensorRunner {
   /**
    * Log results if needed.
    *
-   * @param \Drupal\monitoring\Result\SensorResultInterface[] $results
+   * @param SensorResultInterface[] $results
    *   Results to be saved.
    */
   protected function logResults(array $results) {
@@ -239,7 +241,7 @@ class SensorRunner {
   /**
    * Checks if sensor results should be logged.
    *
-   * @param \Drupal\monitoring\Result\SensorResultInterface $result
+   * @param SensorResultInterface $result
    *   The sensor result.
    * @param string $old_status
    *   The old sensor status.
@@ -267,7 +269,7 @@ class SensorRunner {
   /**
    * Cache results if caching applies.
    *
-   * @param \Drupal\monitoring\Result\SensorResultInterface[] $results
+   * @param SensorResultInterface[] $results
    *   Results to be cached.
    */
   protected function cacheResults(array $results) {
@@ -297,10 +299,10 @@ class SensorRunner {
   /**
    * Instantiates sensor result object.
    *
-   * @param \Drupal\monitoring\Entity\SensorConfig $sensor_config
+   * @param SensorConfig $sensor_config
    *   Sensor config.
    *
-   * @return \Drupal\monitoring\Result\SensorResultInterface
+   * @return SensorResultInterface
    *   Instantiated sensor result object.
    */
   protected function getResultObject(SensorConfig $sensor_config) {
diff --git a/tests/src/Functional/MonitoringCaptchaTest.php b/tests/src/Functional/MonitoringCaptchaTest.php
index d2b4871..b9a0636 100644
--- a/tests/src/Functional/MonitoringCaptchaTest.php
+++ b/tests/src/Functional/MonitoringCaptchaTest.php
@@ -20,7 +20,7 @@ class MonitoringCaptchaTest extends MonitoringTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Add captcha.inc file.
     module_load_include('inc', 'captcha');
@@ -41,23 +41,24 @@ class MonitoringCaptchaTest extends MonitoringTestBase {
     captcha_set_form_id_setting('user_login_form', 'captcha/Math');
 
     // Assert the number of entries in the captcha_session table is 1.
-    $this->assertEqual(\Drupal::database()->query('SELECT COUNT (*) FROM {captcha_sessions}')->fetchField(), 0);
+    $this->assertEquals(\Drupal::database()->query('SELECT COUNT (*) FROM {captcha_sessions}')->fetchField(), 0);
     // Try to log in, with invalid captcha answer which should fail.
     $edit = array(
       'name' => $user->getAccountName(),
       'pass' => $user->pass_raw,
       'captcha_response' => '?',
     );
-    $this->drupalPostForm('user', $edit, t('Log in'));
+    $this->drupalGet('user');
+    $this->submitForm($edit, t('Log in'));
 
     // Assert the total number of entries in captcha_sessions table is now 2.
-    $this->assertEqual(\Drupal::database()->query('SELECT COUNT (*) FROM {captcha_sessions}')->fetchField(), 1);
+    $this->assertEquals(\Drupal::database()->query('SELECT COUNT (*) FROM {captcha_sessions}')->fetchField(), 1);
 
     // Run sensor and get the message.
     $message = $this->runSensor('captcha_failed_count')->getMessage();
 
     // Assert the number of failed attempts.
-    $this->assertEqual($message, '1 attempt(s)');
+    $this->assertEquals($message, '1 attempt(s)');
   }
 
 }
diff --git a/tests/src/Functional/MonitoringCommerceTest.php b/tests/src/Functional/MonitoringCommerceTest.php
index 29acd3c..959845c 100644
--- a/tests/src/Functional/MonitoringCommerceTest.php
+++ b/tests/src/Functional/MonitoringCommerceTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\monitoring\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\commerce_order\Entity\Order;
 use Drupal\commerce_order\Entity\OrderItem;
 use Drupal\commerce_price\Price;
@@ -24,14 +25,14 @@ class MonitoringCommerceTest extends MonitoringTestBase {
   /**
    * The account for testing.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->account = $this->drupalCreateUser([
@@ -48,7 +49,8 @@ class MonitoringCommerceTest extends MonitoringTestBase {
     $edit = [
       'currency_codes[]' => ['CHF', 'EUR'],
     ];
-    $this->drupalPostForm('admin/commerce/config/currencies/add', $edit, t('Add'));
+    $this->drupalGet('admin/commerce/config/currencies/add');
+    $this->submitForm($edit, t('Add'));
 
     // Create a default store.
     $edit = [
@@ -60,7 +62,8 @@ class MonitoringCommerceTest extends MonitoringTestBase {
       'address[0][address][postal_code]' => '1234',
       'default_currency' => 'CHF',
     ];
-    $this->drupalPostForm('store/add/online', $edit, t('Save'));
+    $this->drupalGet('store/add/online');
+    $this->submitForm($edit, t('Save'));
 
     // Create an order item type
     $edit = [
@@ -68,7 +71,8 @@ class MonitoringCommerceTest extends MonitoringTestBase {
       'label' => 'Test',
       'orderType' => 'default'
     ];
-    $this->drupalPostForm('admin/commerce/config/order-item-types/add', $edit, t('Save'));
+    $this->drupalGet('admin/commerce/config/order-item-types/add');
+    $this->submitForm($edit, t('Save'));
   }
 
   /**
@@ -92,7 +96,7 @@ class MonitoringCommerceTest extends MonitoringTestBase {
     $sensor->save();
     // Assert there is no value if there are no orders.
     $result = $this->runSensor('commerce_total_turnover');
-    $this->assertEqual($result->getMessage(), 'No value');
+    $this->assertEquals($result->getMessage(), 'No value');
     $this->assertNull($result->getValue());
 
     // Create some orders with different states and currencies.
@@ -103,14 +107,15 @@ class MonitoringCommerceTest extends MonitoringTestBase {
     $this->createEmptyOrderWithPrice('completed', 1500, 'CHF');
 
     $result = $this->runSensor('commerce_total_turnover');
-    $this->assertEqual($result->getMessage(), 'CHF 1’900.00 in 1 day');
-    $this->assertEqual($result->getValue(), '1900.000000');
+    $this->assertEquals($result->getMessage(), 'CHF 1’900.00 in 1 day');
+    $this->assertEquals($result->getValue(), '1900.000000');
 
     // Now only consider completed orders.
     $edit = [
       'settings[commerce_order_paid_states][completed]' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/system/monitoring/sensors/commerce_total_turnover', $edit, t('Save'));
+    $this->drupalGet('admin/config/system/monitoring/sensors/commerce_total_turnover');
+    $this->submitForm($edit, t('Save'));
 
     $sensor = SensorConfig::load('commerce_total_turnover');
     $paid_states = $sensor->getSetting('commerce_order_paid_states');
@@ -118,23 +123,24 @@ class MonitoringCommerceTest extends MonitoringTestBase {
     $this->assertContains('completed', $paid_states);
 
     $result = $this->runSensor('commerce_total_turnover');
-    $this->assertEqual($result->getMessage(), 'CHF 1’500.00 in 1 day');
-    $this->assertEqual($result->getValue(), '1500.000000');
+    $this->assertEquals($result->getMessage(), 'CHF 1’500.00 in 1 day');
+    $this->assertEquals($result->getValue(), '1500.000000');
 
     // Change currency.
     $this->createEmptyOrderWithPrice('completed', 250, 'EUR');
     $edit = [
       'settings[commerce_order_currency]' => 'EUR',
     ];
-    $this->drupalPostForm('admin/config/system/monitoring/sensors/commerce_total_turnover', $edit, t('Save'));
+    $this->drupalGet('admin/config/system/monitoring/sensors/commerce_total_turnover');
+    $this->submitForm($edit, t('Save'));
 
     $result = $this->runSensor('commerce_total_turnover');
-    $this->assertEqual($result->getMessage(), '€ 250.00 in 1 day');
-    $this->assertEqual($result->getValue(), '250.000000');
+    $this->assertEquals($result->getMessage(), '€ 250.00 in 1 day');
+    $this->assertEquals($result->getValue(), '250.000000');
     $this->drupalLogout();
     $result = $this->runSensor('commerce_total_turnover');
-    $this->assertEqual($result->getMessage(), '€ 250.00 in 1 day');
-    $this->assertEqual($result->getValue(), '250.000000');
+    $this->assertEquals($result->getMessage(), '€ 250.00 in 1 day');
+    $this->assertEquals($result->getValue(), '250.000000');
   }
 
   /**
diff --git a/tests/src/Functional/MonitoringCoreWebTest.php b/tests/src/Functional/MonitoringCoreWebTest.php
index dca37cd..474c553 100644
--- a/tests/src/Functional/MonitoringCoreWebTest.php
+++ b/tests/src/Functional/MonitoringCoreWebTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\monitoring\Functional;
 
+use Drupal\file\FileUsage\FileUsageInterface;
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\taxonomy\TermInterface;
 use Behat\Mink\Element\NodeElement;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Database\Database;
@@ -44,22 +47,26 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->drupalLogin($account);
 
     $this->drupalGet('admin/config/system/monitoring/sensors/add');
-    $this->assertFieldByName('status', TRUE);
+    $this->assertSession()->fieldValueEquals('status', TRUE);
+    $this->drupalGet('admin/config/system/monitoring/sensors/add');
     // Test creation of Node entity aggregator sensor.
-    $this->drupalPostForm('admin/config/system/monitoring/sensors/add', [
+    $this->submitForm([
       'label' => 'QueueTest',
       'id' => 'queue_size_test',
       'plugin_id' => 'queue_size',
     ], 'Select sensor');
 
-    $this->assertOption('edit-settings-queue', 'monitoring_test');
-    $this->assertOptionByText('edit-settings-queue', 'Test Worker');
+    $this->assertSession()->optionExists('edit-settings-queue', 'monitoring_test');
+    $this->assertSession()->optionExists('edit-settings-queue', 'Test Worker');
 
     $edit = [
       'settings[queue]' => 'monitoring_test',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('Sensor QueueTest saved.');
+    $this->submitForm($edit, 'Save');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Sensor QueueTest saved.');
   }
 
   /**
@@ -76,17 +83,20 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     // Assert updates when installing and uninstalling the past module.
     $this->drupalGet('admin/reports/monitoring');
-    $this->assertNoRaw('<span title="Requirements of the past module">Module past</span>');
+    $this->assertSession()->responseNotContains('<span title="Requirements of the past module">Module past</span>');
     $this->installModules(['past']);
     $this->drupalGet('admin/reports/monitoring');
-    $this->assertRaw('<span title="Requirements of the past module">Module past</span>');
+    $this->assertSession()->responseContains('<span title="Requirements of the past module">Module past</span>');
     $this->uninstallModules(['past']);
     $this->drupalGet('admin/reports/monitoring');
-    $this->assertNoRaw('<span title="Requirements of the past module">Module past</span>');
+    $this->assertSession()->responseNotContains('<span title="Requirements of the past module">Module past</span>');
 
     // Assert the rebuild update changes.
     $this->drupalGet('/admin/config/system/monitoring/sensors/rebuild');
-    $this->assertText('No changes were made.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('No changes were made.');
 
   }
 
@@ -113,10 +123,14 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->assertEquals(5, count($rows), 'There are 5 results in the table.');
     $this->assertTrue(!empty($rows[0]->find('css', 'a')->getText()), 'Found WID in verbose output');
     $this->assertEquals("Session opened for {$test_user->getDisplayName()}.", $message, 'Found replaced message in output.');
-    $this->assertText('Session opened for ' . $test_user->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Session opened for ' . $test_user->label());
+    $this->drupalGet('admin/config/system/monitoring/sensors/user_successful_logins');
 
     // Remove variables from the fields and assert message has no replacements.
-    $this->drupalPostForm('admin/config/system/monitoring/sensors/user_successful_logins', ['verbose_fields[variables][field_key]' => ''], t('Save'));
+    $this->submitForm(['verbose_fields[variables][field_key]' => ''], t('Save'));
     $this->drupalGet('admin/reports/monitoring/sensors/user_successful_logins');
     $rows = $this->getSession()->getPage()->findAll('css', '#unaggregated_result tbody tr');
     $message = $rows[0]->find('css', 'td:nth-child(2)')->getText();
@@ -139,16 +153,16 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->drupalLogin($test_user);
 
     $result = $this->runSensor('user_sessions_authenticated');
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getValue(), 1);
     $result = $this->runSensor('user_sessions_all');
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getValue(), 1);
     // Logout the user to see if sensors responded to the change.
     $this->drupalLogout();
 
     $result = $this->runSensor('user_sessions_authenticated');
-    $this->assertEqual($result->getValue(), 0);
+    $this->assertEquals($result->getValue(), 0);
     $result = $this->runSensor('user_sessions_all');
-    $this->assertEqual($result->getValue(), 0);
+    $this->assertEquals($result->getValue(), 0);
 
     // Check verbose output.
     $this->drupalLogin($test_user);
@@ -176,10 +190,16 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     // The username should be replaced in the message.
     $this->drupalGet('/admin/reports/monitoring/sensors/dblog_event_severity_notice');
-    $this->assertText('Session opened for ' . $test_user->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Session opened for ' . $test_user->label());
     // 'No results' text is displayed when the query has 0 results.
     $this->drupalGet('/admin/reports/monitoring/sensors/dblog_event_severity_warning');
-    $this->assertText('There are no results for this sensor to display.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are no results for this sensor to display.');
   }
 
   /**
@@ -193,7 +213,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     // configuration.
     $result = $this->runSensor('twig_debug_mode');
     $this->assertTrue($result->isOk());
-    $this->assertEqual($result->getMessage(), 'Optimal configuration');
+    $this->assertEquals($result->getMessage(), 'Optimal configuration');
 
     $twig_config = $this->container->getParameter('twig.config');
     // Set parameters to the optimal configuration to make sure implicit changes
@@ -206,7 +226,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     $result = $this->runSensor('twig_debug_mode');
     $this->assertTrue($result->isOk());
-    $this->assertEqual($result->getMessage(), 'Optimal configuration');
+    $this->assertEquals($result->getMessage(), 'Optimal configuration');
 
     $twig_config = $this->container->getParameter('twig.config');
     // Change parameters and check sensor message.
@@ -218,7 +238,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     $result = $this->runSensor('twig_debug_mode');
     $this->assertTrue($result->isWarning());
-    $this->assertEqual($result->getMessage(), 'Twig debug mode is enabled, Twig cache disabled, Automatic recompilation of Twig templates enabled');
+    $this->assertEquals($result->getMessage(), 'Twig debug mode is enabled, Twig cache disabled, Automatic recompilation of Twig templates enabled');
   }
 
   /**
@@ -241,31 +261,31 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     // Check sensor message after first privilege user creation.
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '1 privileged user(s), 1 new user(s)');
+    $this->assertEquals($result->getMessage(), '1 privileged user(s), 1 new user(s)');
 
     // Create second privileged user.
     $test_user_second = $this->drupalCreateUser(array(), 'test_user_2', TRUE);
     $this->drupalLogin($test_user_second);
     // Check sensor message after new privilege user creation.
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '2 privileged user(s), 2 new user(s)');
+    $this->assertEquals($result->getMessage(), '2 privileged user(s), 2 new user(s)');
 
     // Reset the user data, button is tested in UI tests.
     \Drupal::keyValue('monitoring.users')->deleteAll();
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '2 privileged user(s)');
+    $this->assertEquals($result->getMessage(), '2 privileged user(s)');
 
     // Make changes to a user.
     $test_user_second->setUsername('changed');
     $test_user_second->save();
     // Check sensor message for user changes.
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '2 privileged user(s), 1 changed user(s)');
+    $this->assertEquals($result->getMessage(), '2 privileged user(s), 1 changed user(s)');
 
     // Reset the user data again, check sensor message.
     \Drupal::keyValue('monitoring.users')->deleteAll();
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '2 privileged user(s)');
+    $this->assertEquals($result->getMessage(), '2 privileged user(s)');
 
     // Add permissions to authenticated user with no privilege of registration.
     \Drupal::configFactory()->getEditable('user.settings')->set('register', 'admin_only')->save();
@@ -275,38 +295,38 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->assertTrue($result->isWarning());
 
     // Count users included admin.
-    $this->assertEqual($result->getMessage(), '3 privileged user(s), Privileged access for roles Authenticated user');
+    $this->assertEquals($result->getMessage(), '3 privileged user(s), Privileged access for roles Authenticated user');
 
     // Add permissions to anonymous user and check the sensor.
     user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, array('administer account settings'));
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '3 privileged user(s), Privileged access for roles Anonymous user, Authenticated user');
+    $this->assertEquals($result->getMessage(), '3 privileged user(s), Privileged access for roles Anonymous user, Authenticated user');
 
     // Authenticated user with privilege of register.
     \Drupal::configFactory()->getEditable('user.settings')->set('register', 'visitors')->save();
     $result = $this->runSensor('user_integrity');
     $this->assertTrue($result->isCritical());
-    $this->assertEqual($result->getMessage(), '3 privileged user(s), Privileged access for roles Anonymous user, Authenticated user, Self registration possible.');
+    $this->assertEquals($result->getMessage(), '3 privileged user(s), Privileged access for roles Anonymous user, Authenticated user, Self registration possible.');
 
     // Create an authenticated user and test that the sensor counter increments.
     $test_user_third = $this->drupalCreateUser(array(), 'test_user_3');
     \Drupal::keyValue('monitoring.users')->deleteAll();
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '4 privileged user(s), Privileged access for roles Anonymous user, Authenticated user, Self registration possible.');
+    $this->assertEquals($result->getMessage(), '4 privileged user(s), Privileged access for roles Anonymous user, Authenticated user, Self registration possible.');
 
     $test_user_third->setUsername('changed2');
     $test_user_third->save();
 
     // Check sensor message for user changes.
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '4 privileged user(s), 1 changed user(s), Privileged access for roles Anonymous user, Authenticated user, Self registration possible.');
+    $this->assertEquals($result->getMessage(), '4 privileged user(s), 1 changed user(s), Privileged access for roles Anonymous user, Authenticated user, Self registration possible.');
 
     // Check sensor message with permissions revoked.
     user_role_revoke_permissions(RoleInterface::ANONYMOUS_ID, array('administer account settings'));
     user_role_revoke_permissions(RoleInterface::AUTHENTICATED_ID, array('administer account settings'));
     \Drupal::keyValue('monitoring.users')->deleteAll();
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '2 privileged user(s)');
+    $this->assertEquals($result->getMessage(), '2 privileged user(s)');
 
   }
 
@@ -372,9 +392,10 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $convert_to_array = function (NodeElement $header) {
       return $header->getText();
     };
+    $this->drupalGet('/admin/reports/monitoring/sensors/dblog_php_notices');
 
     // Check out sensor result page.
-    $this->drupalPostForm('/admin/reports/monitoring/sensors/dblog_php_notices', [], t('Run now'));
+    $this->submitForm([], t('Run now'));
     $headers = $this->getSession()->getPage()->findAll('css', '#unaggregated_result thead tr th');
     $headers = array_map($convert_to_array, $headers);
     $this->assertEquals($expected_header, $headers, 'The header is correct.');
@@ -384,11 +405,11 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     $first_message = array_map($convert_to_array, $rows[0]->findAll('css', 'td'));
     $second_message = array_map($convert_to_array, $rows[1]->findAll('css', 'td'));
-    $this->assertEqual($first_message, $expected_body_one, 'The first notice is as expected.');
-    $this->assertEqual($second_message, $expected_body_two, 'The second notice is as expected');
+    $this->assertEquals($first_message, $expected_body_one, 'The first notice is as expected.');
+    $this->assertEquals($second_message, $expected_body_two, 'The second notice is as expected');
 
     // Test Filename shortening.
-    $this->assertEqual(str_replace(DRUPAL_ROOT . '/', '', $error['%file'] . ':' . $error['%line']), $first_message[4], 'Filename was successfully shortened.');
+    $this->assertEquals(str_replace(DRUPAL_ROOT . '/', '', $error['%file'] . ':' . $error['%line']), $first_message[4], 'Filename was successfully shortened.');
   }
 
   /**
@@ -398,8 +419,9 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
    */
   public function testUserFailedLoginSensorPlugin() {
 
+    $this->drupalGet('user/login');
     // Add a failed attempt for the admin account.
-    $this->drupalPostForm('user/login', [
+    $this->submitForm([
       'name' => 'admin',
       'pass' => '123'
     ], t('Log in'));
@@ -462,14 +484,13 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->assertTrue($result->isOk());
 
     $log = $this->loadWatchdog();
-    $this->assertEqual(count($log), 1, 'There should be one log entry: all sensors enabled by default added.');
+    $this->assertEquals(count($log), 1, 'There should be one log entry: all sensors enabled by default added.');
 
     $sensor_config_all = monitoring_sensor_manager()->getAllSensorConfig();
-    $this->assertEqual(new FormattableMarkup($log[0]->message, unserialize($log[0]->variables)),
-      new FormattableMarkup('@count new sensor/s added: @names', array(
-        '@count' => count($sensor_config_all),
-        '@names' => implode(', ', array_keys($sensor_config_all))
-      )));
+    $this->assertEquals(new FormattableMarkup($log[0]->message, unserialize($log[0]->variables)), new FormattableMarkup('@count new sensor/s added: @names', array(
+      '@count' => count($sensor_config_all),
+      '@names' => implode(', ', array_keys($sensor_config_all))
+    )));
 
     // Uninstall the media module so that the media requirements sensor goes
     // away.
@@ -479,9 +500,9 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     // critical status.
     $result = $this->runSensor('monitoring_disappeared_sensors');
     $this->assertTrue($result->isCritical());
-    $this->assertEqual($result->getMessage(), 'Missing sensor core_requirements_media');
+    $this->assertEquals($result->getMessage(), 'Missing sensor core_requirements_media');
     // There should be no new logs.
-    $this->assertEqual(count($this->loadWatchdog()), 1);
+    $this->assertEquals(count($this->loadWatchdog()), 1);
 
     // Install the comment module to test the correct procedure of removing
     // sensors.
@@ -491,7 +512,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     // Now we should be back to normal.
     $result = $this->runSensor('monitoring_disappeared_sensors');
     $this->assertTrue($result->isOk());
-    $this->assertEqual(count($this->loadWatchdog()), 1);
+    $this->assertEquals(count($this->loadWatchdog()), 1);
 
     // Do the correct procedure to remove a sensor - first disable thes sensors
     // and then uninstall the comment module.
@@ -502,8 +523,8 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $result = $this->runSensor('monitoring_disappeared_sensors');
     $this->assertTrue($result->isOk());
     $log = $this->loadWatchdog();
-    $this->assertEqual(count($log), 2, 'Removal of core_requirements_media sensor should be logged.');
-    $this->assertEqual(new FormattableMarkup($log[1]->message, unserialize($log[1]->variables)), '1 new sensor/s removed: core_requirements_media');
+    $this->assertEquals(count($log), 2, 'Removal of core_requirements_media sensor should be logged.');
+    $this->assertEquals(new FormattableMarkup($log[1]->message, unserialize($log[1]->variables)), '1 new sensor/s removed: core_requirements_media');
   }
 
   /**
@@ -524,8 +545,8 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->installModules(array('contact'));
     $result = $this->runSensor('monitoring_installed_modules');
     $this->assertTrue($result->isCritical());
-    $this->assertEqual($result->getMessage(), '1 modules delta, expected 0, Following modules are NOT expected to be installed: Contact (contact)');
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getMessage(), '1 modules delta, expected 0, Following modules are NOT expected to be installed: Contact (contact)');
+    $this->assertEquals($result->getValue(), 1);
 
     // Allow additional modules and run the sensor - it should not escalate now.
     $sensor_config = SensorConfig::load('monitoring_installed_modules');
@@ -541,8 +562,8 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->uninstallModules(array('contact'));
     $result = $this->runSensor('monitoring_installed_modules');
     $this->assertTrue($result->isCritical());
-    $this->assertEqual($result->getMessage(), '1 modules delta, expected 0, Following modules are expected to be installed: Contact (contact)');
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getMessage(), '1 modules delta, expected 0, Following modules are expected to be installed: Contact (contact)');
+    $this->assertEquals($result->getValue(), 1);
   }
 
 
@@ -573,7 +594,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     );
     $sensor_config->save();
     $result = $this->runSensor('entity_aggregate_test');
-    $this->assertEqual($result->getValue(), '1');
+    $this->assertEquals($result->getValue(), '1');
 
     // Test for node type2.
     $sensor_config->settings['conditions'] = array(
@@ -582,7 +603,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $sensor_config->save();
     $result = $this->runSensor('entity_aggregate_test');
     // There should be two nodes with node type2 and created in last 24 hours.
-    $this->assertEqual($result->getValue(), 2);
+    $this->assertEquals($result->getValue(), 2);
 
     // Test support for configurable fields, create a taxonomy reference field.
     $vocabulary = $this->createVocabulary();
@@ -665,16 +686,23 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $sensor_config->save();
     $result = $this->runSensor('entity_aggregate_test');
     // There should be three nodes with that reference.
-    $this->assertEqual($result->getValue(), 3);
+    $this->assertEquals($result->getValue(), 3);
 
     // Check the content entity aggregator verbose output and other UI elements.
     $this->drupalLogin($this->createUser(['monitoring reports', 'administer monitoring']));
-    $this->drupalPostForm('admin/reports/monitoring/sensors/entity_aggregate_test', [], t('Run now'));
-    $this->assertText('id');
-    $this->assertText('label');
-    $this->assertLink($node1->label());
-    $this->assertLink($node2->label());
-    $this->assertLink($node3->label());
+    $this->drupalGet('admin/reports/monitoring/sensors/entity_aggregate_test');
+    $this->submitForm([], t('Run now'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('id');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('label');
+    $this->assertSession()->linkExists($node1->label());
+    $this->assertSession()->linkExists($node2->label());
+    $this->assertSession()->linkExists($node3->label());
 
     // Assert Query result appears.
     $assert_session = $this->assertSession();
@@ -686,31 +714,46 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     $this->clickLink(t('Edit'));
     // Assert some of the 'available fields'.
-    $this->assertText('Available Fields for entity type Content: changed, created, default_langcode, id, label, langcode, nid, promote, revision_default, revision_log, revision_timestamp, revision_translation_affected, revision_uid, status, sticky, title, type, uid, uuid, vid.');
-    $this->assertFieldByName('conditions[0][field]', 'term_reference.target_id');
-    $this->assertFieldByName('conditions[0][value]', $term1->id());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Available Fields for entity type Content: changed, created, default_langcode, id, label, langcode, nid, promote, revision_default, revision_log, revision_timestamp, revision_translation_affected, revision_uid, status, sticky, title, type, uid, uuid, vid.');
+    $this->assertSession()->fieldValueEquals('conditions[0][field]', 'term_reference.target_id');
+    $this->assertSession()->fieldValueEquals('conditions[0][value]', $term1->id());
 
     // Test adding another field.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'settings[verbose_fields][2]' => 'revision_timestamp',
-    ] , t('Add another field'));
+    ], t('Add another field'));
     // Repeat for a condition, add an invalid field while we are at it.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
     'conditions[1][field]' => 'nid',
       'conditions[1][operator]' => '>',
       'conditions[1][value]' => 4,
       // The invalid field.
       'settings[verbose_fields][3]' => 'test_wrong_field',
-    ] , t('Add another condition'));
+    ], t('Add another condition'));
 
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
     $this->clickLink('Entity Aggregate test');
 
     // Assert the new field and it's formatted output.
-    $this->assertText('revision_timestamp');
-    $this->assertText(\Drupal::service('date.formatter')->format($node1->getRevisionCreationTime(), 'short'));
-    $this->assertText(\Drupal::service('date.formatter')->format($node2->getRevisionCreationTime(), 'short'));
-    $this->assertText(\Drupal::service('date.formatter')->format($node3->getRevisionCreationTime(), 'short'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('revision_timestamp');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(\Drupal::service('date.formatter')->format($node1->getRevisionCreationTime(), 'short'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(\Drupal::service('date.formatter')->format($node2->getRevisionCreationTime(), 'short'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(\Drupal::service('date.formatter')->format($node3->getRevisionCreationTime(), 'short'));
 
     // Update the sensor to look for nodes with a reference to term1 in the
     // first field and term2 in the second.
@@ -724,7 +767,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $sensor_config->save();
     $result = $this->runSensor('entity_aggregate_test');
     // There should be one nodes with those references.
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getValue(), 1);
   }
 
   /**
@@ -795,9 +838,13 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     // Make sure there is no used temporary files.
     $result = $this->runSensor('temporary_files_usages');
-    $this->assertEqual($result->getValue(), 0);
-    $this->drupalPostForm('admin/reports/monitoring/sensors/temporary_files_usages', [], t('Run now'));
-    $this->assertText('0 used temporary files');
+    $this->assertEquals($result->getValue(), 0);
+    $this->drupalGet('admin/reports/monitoring/sensors/temporary_files_usages');
+    $this->submitForm([], t('Run now'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('0 used temporary files');
 
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
     // Create two nodes.
@@ -810,7 +857,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
       'title' => 'Example article 2',
     ]);
 
-    /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+    /** @var FileUsageInterface $file_usage */
     $file_usage = \Drupal::service('file.usage');
 
     // Insert two temporary files which are used by the monitoring_test module.
@@ -864,39 +911,49 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     ]);
     $file_usage->add($file3, 'monitoring', 'node', $node1->id());
     $file3->save();
+    $this->drupalGet('admin/reports/monitoring/sensors/temporary_files_usages');
 
     // Run sensor and make sure there are two temporary files which are used.
-    $this->drupalPostForm('admin/reports/monitoring/sensors/temporary_files_usages', [], t('Run now'));
+    $this->submitForm([], t('Run now'));
     $result = $this->runSensor('temporary_files_usages');
-    $this->assertEqual($result->getValue(), 2);
-    $this->assertText('2 used temporary files');
-    $this->assertLink('example_file_1');
-    $this->assertLink('example_file_2');
-    $this->assertLink($node1->label());
-    $this->assertLink($node2->label());
-    $this->assertLink('Make permanent');
+    $this->assertEquals($result->getValue(), 2);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('2 used temporary files');
+    $this->assertSession()->linkExists('example_file_1');
+    $this->assertSession()->linkExists('example_file_2');
+    $this->assertSession()->linkExists($node1->label());
+    $this->assertSession()->linkExists($node2->label());
+    $this->assertSession()->linkExists('Make permanent');
 
     // Make the first file permanent and assert message.
     $this->clickLink('Make permanent');
-    $this->assertText(t('File @file is now permanent.', ['@file' => 'example_file_1']));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('File @file is now permanent.', ['@file' => 'example_file_1']));
 
     // Make sure that the temporary files are in the list.
-    $this->assertText('1 used temporary files');
-    $this->assertLink('example_file_2');
-    $this->assertLink($node2->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1 used temporary files');
+    $this->assertSession()->linkExists('example_file_2');
+    $this->assertSession()->linkExists($node2->label());
 
     // Make sure that the permanent files are not in the list.
-    $this->assertNoLink('example_file_3');
-    $this->assertNoLink('example_file_1');
-    $this->assertNoLink($node1->label());
+    $this->assertSession()->linkNotExists('example_file_3');
+    $this->assertSession()->linkNotExists('example_file_1');
+    $this->assertSession()->linkNotExists($node1->label());
   }
 
   /**
-   * Returns a new vocabulary with random properties.
-   *
-   * @return \Drupal\taxonomy\VocabularyInterface;
-   *   Vocabulary object.
-   */
+  * Returns a new vocabulary with random properties.
+  *
+   * @return VocabularyInterface ;
+    Vocabulary object.
+  */
   protected function createVocabulary() {
     // Create a vocabulary.
     $vocabulary = Vocabulary::create(array(
@@ -909,14 +966,14 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
   }
 
   /**
-   * Returns a new term with random properties in vocabulary $vid.
-   *
-   * @param \Drupal\taxonomy\VocabularyInterface $vocabulary
-   *   The vocabulary where the term will belong to.
-   *
-   * @return \Drupal\taxonomy\TermInterface;
-   *   Term object.
-   */
+  * Returns a new term with random properties in vocabulary $vid.
+  *
+   * @param VocabularyInterface $vocabulary
+  *   The vocabulary where the term will belong to.
+  *
+   * @return TermInterface ;
+    Term object.
+  */
   protected function createTerm($vocabulary) {
     $term = Term::create(array('vid' => $vocabulary->id()));
     $term->name = $this->randomMachineName();
diff --git a/tests/src/Functional/MonitoringRebuildTest.php b/tests/src/Functional/MonitoringRebuildTest.php
index 053a0d7..55fc8a2 100644
--- a/tests/src/Functional/MonitoringRebuildTest.php
+++ b/tests/src/Functional/MonitoringRebuildTest.php
@@ -50,8 +50,14 @@ class MonitoringRebuildTest extends MonitoringTestBase {
     // Rebuild and make sure they are created again.
     $this->drupalGet('/admin/config/system/monitoring/sensors');
     $this->clickLink('Rebuild sensor list');
-    $this->assertText('The sensor Ultimate cron errors has been created.');
-    $this->assertText('The sensor Twig debug mode has been created.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The sensor Ultimate cron errors has been created.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The sensor Twig debug mode has been created.');
     $this->assertNotNull(SensorConfig::load('twig_debug_mode'));
     $this->assertNotNull(SensorConfig::load('ultimate_cron_errors'));
     $this->assertNotNull(SensorConfig::load('update_core'));
diff --git a/tests/src/Functional/MonitoringServicesTest.php b/tests/src/Functional/MonitoringServicesTest.php
index 1a57f64..0ba55ea 100644
--- a/tests/src/Functional/MonitoringServicesTest.php
+++ b/tests/src/Functional/MonitoringServicesTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\monitoring\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
 use Drupal\dynamic_page_cache\EventSubscriber\DynamicPageCacheSubscriber;
 use Drupal\monitoring\Entity\SensorConfig;
@@ -23,14 +24,14 @@ class MonitoringServicesTest extends MonitoringTestBase {
   /**
    * User account created.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $servicesAccount;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->servicesAccount = $this->drupalCreateUser(array('restful get monitoring-sensor', 'restful get monitoring-sensor-result'));
@@ -43,46 +44,46 @@ class MonitoringServicesTest extends MonitoringTestBase {
     $this->drupalLogin($this->servicesAccount);
 
     $response_data = $this->doJsonRequest('monitoring-sensor');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     foreach (monitoring_sensor_manager()->getAllSensorConfig() as $sensor_name => $sensor_config) {
-      $this->assertEqual($response_data[$sensor_name]['sensor'], $sensor_config->id());
-      $this->assertEqual($response_data[$sensor_name]['label'], $sensor_config->getLabel());
-      $this->assertEqual($response_data[$sensor_name]['category'], $sensor_config->getCategory());
-      $this->assertEqual($response_data[$sensor_name]['description'], $sensor_config->getDescription());
-      $this->assertEqual($response_data[$sensor_name]['numeric'], $sensor_config->isNumeric());
-      $this->assertEqual($response_data[$sensor_name]['value_label'], $sensor_config->getValueLabel());
-      $this->assertEqual($response_data[$sensor_name]['caching_time'], $sensor_config->getCachingTime());
-      $this->assertEqual($response_data[$sensor_name]['time_interval'], $sensor_config->getTimeIntervalValue());
-      $this->assertEqual($response_data[$sensor_name]['enabled'], $sensor_config->isEnabled());
-      $this->assertEqual($response_data[$sensor_name]['uri'], Url::fromRoute('rest.monitoring-sensor.GET' , ['id' => $sensor_name, '_format' => 'json'])->setAbsolute()->toString());
+      $this->assertEquals($response_data[$sensor_name]['sensor'], $sensor_config->id());
+      $this->assertEquals($response_data[$sensor_name]['label'], $sensor_config->getLabel());
+      $this->assertEquals($response_data[$sensor_name]['category'], $sensor_config->getCategory());
+      $this->assertEquals($response_data[$sensor_name]['description'], $sensor_config->getDescription());
+      $this->assertEquals($response_data[$sensor_name]['numeric'], $sensor_config->isNumeric());
+      $this->assertEquals($response_data[$sensor_name]['value_label'], $sensor_config->getValueLabel());
+      $this->assertEquals($response_data[$sensor_name]['caching_time'], $sensor_config->getCachingTime());
+      $this->assertEquals($response_data[$sensor_name]['time_interval'], $sensor_config->getTimeIntervalValue());
+      $this->assertEquals($response_data[$sensor_name]['enabled'], $sensor_config->isEnabled());
+      $this->assertEquals($response_data[$sensor_name]['uri'], Url::fromRoute('rest.monitoring-sensor.GET' , ['id' => $sensor_name, '_format' => 'json'])->setAbsolute()->toString());
 
       if ($sensor_config->isDefiningThresholds()) {
-        $this->assertEqual($response_data[$sensor_name]['thresholds'], $sensor_config->getThresholds());
+        $this->assertEquals($response_data[$sensor_name]['thresholds'], $sensor_config->getThresholds());
       }
     }
 
     $sensor_name = 'sensor_that_does_not_exist';
     $this->doJsonRequest('monitoring-sensor/' . $sensor_name);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $sensor_name = 'dblog_event_severity_error';
     $response_data = $this->doJsonRequest('monitoring-sensor/' . $sensor_name);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $sensor_config = SensorConfig::load($sensor_name);
-    $this->assertEqual($response_data['sensor'], $sensor_config->id());
-    $this->assertEqual($response_data['label'], $sensor_config->getLabel());
-    $this->assertEqual($response_data['category'], $sensor_config->getCategory());
-    $this->assertEqual($response_data['description'], $sensor_config->getDescription());
-    $this->assertEqual($response_data['numeric'], $sensor_config->isNumeric());
-    $this->assertEqual($response_data['value_label'], $sensor_config->getValueLabel());
-    $this->assertEqual($response_data['caching_time'], $sensor_config->getCachingTime());
-    $this->assertEqual($response_data['time_interval'], $sensor_config->getTimeIntervalValue());
-    $this->assertEqual($response_data['enabled'], $sensor_config->isEnabled());
-    $this->assertEqual($response_data['uri'], Url::fromRoute('rest.monitoring-sensor.GET' , ['id' => $sensor_name, '_format' => 'json'])->setAbsolute()->toString());
+    $this->assertEquals($response_data['sensor'], $sensor_config->id());
+    $this->assertEquals($response_data['label'], $sensor_config->getLabel());
+    $this->assertEquals($response_data['category'], $sensor_config->getCategory());
+    $this->assertEquals($response_data['description'], $sensor_config->getDescription());
+    $this->assertEquals($response_data['numeric'], $sensor_config->isNumeric());
+    $this->assertEquals($response_data['value_label'], $sensor_config->getValueLabel());
+    $this->assertEquals($response_data['caching_time'], $sensor_config->getCachingTime());
+    $this->assertEquals($response_data['time_interval'], $sensor_config->getTimeIntervalValue());
+    $this->assertEquals($response_data['enabled'], $sensor_config->isEnabled());
+    $this->assertEquals($response_data['uri'], Url::fromRoute('rest.monitoring-sensor.GET' , ['id' => $sensor_name, '_format' => 'json'])->setAbsolute()->toString());
 
     if ($sensor_config->isDefiningThresholds()) {
-      $this->assertEqual($response_data['thresholds'], $sensor_config->getThresholds());
+      $this->assertEquals($response_data['thresholds'], $sensor_config->getThresholds());
     }
   }
 
@@ -94,14 +95,14 @@ class MonitoringServicesTest extends MonitoringTestBase {
 
     $sensor_name = 'dblog_event_severity_error';
     $response_data = $this->doJsonRequest('monitoring-sensor/' . $sensor_name);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $sensor_config = SensorConfig::load($sensor_name);
-    $this->assertEqual($response_data['label'], $sensor_config->getLabel());
+    $this->assertEquals($response_data['label'], $sensor_config->getLabel());
     $sensor_config->set('label', 'TestLabelForCaching');
     $sensor_config->save();
     $response_data = $this->doJsonRequest('monitoring-sensor/' . $sensor_name);
-    $this->assertResponse(200);
-    $this->assertEqual($response_data['label'], 'TestLabelForCaching');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertEquals($response_data['label'], 'TestLabelForCaching');
   }
 
   /**
@@ -112,7 +113,7 @@ class MonitoringServicesTest extends MonitoringTestBase {
 
     // Test request for sensor results with expanded sensor config.
     $response_data = $this->doJsonRequest('monitoring-sensor-result', array('expand' => 'sensor'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     foreach (monitoring_sensor_manager()->getEnabledSensorConfig() as $sensor_name => $sensor_config) {
       $this->assertTrue(isset($response_data[$sensor_name]['sensor']));
       $this->assertSensorResult($response_data[$sensor_name], $sensor_config);
@@ -121,29 +122,28 @@ class MonitoringServicesTest extends MonitoringTestBase {
     // Try a request without expanding the sensor config and check that it is not
     // present.
     $response_data = $this->doJsonRequest('monitoring-sensor-result');
-    $this->assertResponse(200);
-    $this->assertEqual('UNCACHEABLE', $this->drupalGetHeader(DynamicPageCacheSubscriber::HEADER),
-      'Render array returned, rendered as HTML response, but uncacheable: Dynamic Page Cache is running, but not caching.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertEquals('UNCACHEABLE', $this->drupalGetHeader(DynamicPageCacheSubscriber::HEADER), 'Render array returned, rendered as HTML response, but uncacheable: Dynamic Page Cache is running, but not caching.');
     $sensor_result = reset($response_data);
     $this->assertTrue(!isset($sensor_result['sensor_info']));
 
     // Make sure the response contains expected count of results.
-    $this->assertEqual(count($response_data), count(monitoring_sensor_manager()->getEnabledSensorConfig()));
+    $this->assertEquals(count($response_data), count(monitoring_sensor_manager()->getEnabledSensorConfig()));
 
     // Test non existing sensor.
     $sensor_name = 'sensor_that_does_not_exist';
     $this->doJsonRequest('monitoring-sensor-result/' . $sensor_name);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     // Test disabled sensor - note that monitoring_git_dirty_tree is disabled
     // by default.
     $sensor_name = 'monitoring_git_dirty_tree';
     $this->doJsonRequest('monitoring-sensor-result/' . $sensor_name);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $sensor_name = 'dblog_event_severity_error';
     $response_data = $this->doJsonRequest('monitoring-sensor-result/' . $sensor_name, array('expand' => 'sensor'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // The response must contain the sensor.
     $this->assertTrue(isset($response_data['sensor']));
     $this->assertSensorResult($response_data, SensorConfig::load($sensor_name));
@@ -151,7 +151,7 @@ class MonitoringServicesTest extends MonitoringTestBase {
     // Try a request without expanding the sensor config and check that it is not
     // present.
     $response_data = $this->doJsonRequest('monitoring-sensor-result/' . $sensor_name);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertTrue(!isset($response_data['sensor']));
   }
 
@@ -160,29 +160,29 @@ class MonitoringServicesTest extends MonitoringTestBase {
    *
    * @param array $response_result
    *   Result received via response.
-   * @param \Drupal\monitoring\Entity\SensorConfig $sensor_config
+   * @param SensorConfig $sensor_config
    *   Sensor config for which we have the result.
    */
   protected function assertSensorResult($response_result, SensorConfig $sensor_config) {
-    $this->assertEqual($response_result['sensor_name'], $sensor_config->id());
-    $this->assertEqual($response_result['uri'], Url::fromRoute('rest.monitoring-sensor-result.GET' , ['id' => $sensor_config->id(), '_format' => 'json'])->setAbsolute()->toString());
+    $this->assertEquals($response_result['sensor_name'], $sensor_config->id());
+    $this->assertEquals($response_result['uri'], Url::fromRoute('rest.monitoring-sensor-result.GET' , ['id' => $sensor_config->id(), '_format' => 'json'])->setAbsolute()->toString());
 
     // If the result is cached test also for the result values. In case of
     // result which is not cached we might not get the same values.
     if ($sensor_config->getCachingTime()) {
       // Cannot use $this->runSensor() as the cache needs to remain.
       $result = monitoring_sensor_run($sensor_config->id());
-      $this->assertEqual($response_result['status'], $result->getStatus());
-      $this->assertEqual($response_result['value'], $result->getValue());
-      $this->assertEqual($response_result['expected_value'], $result->getExpectedValue());
-      $this->assertEqual($response_result['numeric_value'], $result->toNumber());
-      $this->assertEqual($response_result['message'], $result->getMessage());
-      $this->assertEqual($response_result['timestamp'], $result->getTimestamp());
-      $this->assertEqual($response_result['execution_time'], $result->getExecutionTime());
+      $this->assertEquals($response_result['status'], $result->getStatus());
+      $this->assertEquals($response_result['value'], $result->getValue());
+      $this->assertEquals($response_result['expected_value'], $result->getExpectedValue());
+      $this->assertEquals($response_result['numeric_value'], $result->toNumber());
+      $this->assertEquals($response_result['message'], $result->getMessage());
+      $this->assertEquals($response_result['timestamp'], $result->getTimestamp());
+      $this->assertEquals($response_result['execution_time'], $result->getExecutionTime());
     }
 
     if (isset($response_result['sensor_info'])) {
-      $this->assertEqual($response_result['sensor_info'], $sensor_config->toArray());
+      $this->assertEquals($response_result['sensor_info'], $sensor_config->toArray());
     }
   }
 
diff --git a/tests/src/Functional/MonitoringTestBase.php b/tests/src/Functional/MonitoringTestBase.php
index 1fd3207..5ccd379 100644
--- a/tests/src/Functional/MonitoringTestBase.php
+++ b/tests/src/Functional/MonitoringTestBase.php
@@ -26,7 +26,7 @@ abstract class MonitoringTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalPlaceBlock('local_tasks_block');
diff --git a/tests/src/Functional/MonitoringTestTrait.php b/tests/src/Functional/MonitoringTestTrait.php
index 79f4fbd..f03bd4f 100644
--- a/tests/src/Functional/MonitoringTestTrait.php
+++ b/tests/src/Functional/MonitoringTestTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\monitoring\Functional;
 
+use Drupal\monitoring\Result\SensorResultInterface;
+use Drupal\Core\Extension\ModuleInstallerInterface;
 use Drupal\Component\Serialization\Json;
 
 /**
@@ -15,7 +17,7 @@ trait MonitoringTestTrait {
    * @param string $sensor_name
    *   Name of the sensor to execute.
    *
-   * @return \Drupal\monitoring\Result\SensorResultInterface
+   * @return SensorResultInterface
    *   The sensor result.
    */
   protected function runSensor($sensor_name) {
@@ -41,7 +43,7 @@ trait MonitoringTestTrait {
    * @see \Drupal\Core\Extension\ModuleInstallerInterface::install()
    */
   protected function installModules(array $module_list, $enable_dependencies = TRUE) {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_handler */
+    /** @var ModuleInstallerInterface $module_handler */
     $module_handler = \Drupal::service('module_installer');
 
     // Install the modules requested.
@@ -70,7 +72,7 @@ trait MonitoringTestTrait {
    * @see \Drupal\Core\Extension\ModuleInstallerInterface::uninstall()
    */
   protected function uninstallModules(array $module_list, $uninstall_dependents = TRUE) {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_handler */
+    /** @var ModuleInstallerInterface $module_handler */
     $module_handler = \Drupal::service('module_installer');
 
     // Install the modules requested.
