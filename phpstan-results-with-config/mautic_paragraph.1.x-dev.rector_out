modules/contrib/mautic_paragraph/mautic_paragraph.install
modules/contrib/mautic_paragraph/mautic_paragraph.module
modules/contrib/mautic_paragraph/src/Annotation/MauticParagraphConnector.php
modules/contrib/mautic_paragraph/src/Controller/FormAutocompleteController.php
modules/contrib/mautic_paragraph/src/Controller/MauticCallbackController.php
modules/contrib/mautic_paragraph/src/Form/MauticSettingsForm.php
modules/contrib/mautic_paragraph/src/MauticParagraphApi.php
modules/contrib/mautic_paragraph/src/MauticParagraphApiInterface.php
modules/contrib/mautic_paragraph/src/MauticParagraphConnector/MauticParagraphConnectorPluginBase.php
modules/contrib/mautic_paragraph/src/MauticParagraphConnector/MauticParagraphConnectorPluginManager.php
modules/contrib/mautic_paragraph/src/MauticParagraphConnectorInterface.php
modules/contrib/mautic_paragraph/src/Plugin/Field/FieldFormatter/MauticFormatter.php
modules/contrib/mautic_paragraph/src/Plugin/Field/FieldWidget/AutocompleteWidget.php
modules/contrib/mautic_paragraph/src/Plugin/MauticParagraphConnector/BasicAuthMauticParagraphConnector.php
modules/contrib/mautic_paragraph/src/Plugin/MauticParagraphConnector/OAuthMauticParagraphConnector.php

12 files with changes
=====================

1) modules/contrib/mautic_paragraph/src/Plugin/MauticParagraphConnector/OAuthMauticParagraphConnector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mautic_paragraph\Plugin\MauticParagraphConnector;

+use Drupal\Core\State\StateInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Cache\CacheBackendInterface;
+use Mautic\Auth\AuthInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\mautic_paragraph\MauticParagraphConnector\MauticParagraphConnectorPluginBase;
 use Mautic\Auth\ApiAuth;
@@ @@
   /**
    * Drupal state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The cache.default cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
    * @param bool $redirect
    *   Redirect.
    *
-   * @return \Mautic\Auth\AuthInterface|null
+   * @return AuthInterface|null
    *   Auth interface or null.
    */
   protected function validateAccesstoken($settings, $redirect = TRUE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/mautic_paragraph/src/Plugin/Field/FieldWidget/AutocompleteWidget.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The Mautic Api.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphApi
+   * @var MauticParagraphApi
    */
   protected $mauticParagraphApi;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\mautic_paragraph\MauticParagraphApi $mauticParagraphApi
+   * @param MauticParagraphApi $mauticParagraphApi
    *   The Mautic Api.
    */
   public function __construct($plugin_id,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/mautic_paragraph/src/Plugin/Field/FieldFormatter/MauticFormatter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphApiInterface
+   * @var MauticParagraphApiInterface
    */
   protected $mauticParagraphApi;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory service.
-   * @param \Drupal\mautic_paragraph\MauticParagraphApiInterface $mauticParagraphApi
+   * @param MauticParagraphApiInterface $mauticParagraphApi
    *   Mautic Paragraph Api service.
    */
   public function __construct($plugin_id,
@@ @@
   /**
    * Builds a renderable array for a field value.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field values to be rendered.
    * @param string $langcode
    *   The language that should be used to render the field.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/mautic_paragraph/src/MauticParagraphConnectorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mautic_paragraph;

+use Mautic\Auth\AbstractAuth;
 use Drupal\Component\Plugin\ConfigurableInterface;

 /**
@@ @@
   /**
    * Get an Mautic API client.
    *
-   * @return \Mautic\Auth\AbstractAuth|null
+   * @return AbstractAuth|null
    *   The Mautic API client object.
    */
   public function getApiClient();
@@ @@
    *
    * @param string $input
    *   Search string for fetching forms.
-   * @param \Mautic\Auth\AbstractAuth|null $auth
+   * @param AbstractAuth|null $auth
    *   Auth object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/mautic_paragraph/src/MauticParagraphConnector/MauticParagraphConnectorPluginManager.php:22

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/mautic_paragraph/src/MauticParagraphApiInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mautic_paragraph;

+use Mautic\Auth\AbstractAuth;
 /**
  * Interface for UnomiApi service.
  */
@@ @@
   /**
    * Get an Mautic API client.
    *
-   * @return \Mautic\Auth\AbstractAuth|null
+   * @return AbstractAuth|null
    *   The Mautic API client object.
    */
   public function getApiClient();
@@ @@
    *
    * @param string $input
    *   Search string for fetching forms.
-   * @param \Mautic\Auth\AbstractAuth|null $auth
+   * @param AbstractAuth|null $auth
    *   Auth object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/mautic_paragraph/src/MauticParagraphApi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mautic_paragraph;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * The MauticParagraph config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $mauticParagraphConfig;

@@ @@
   /**
    * Drupal state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * The current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The messenger to send info or warnings to Drupal with.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Mautic Connector Plugin Manager.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphConnector\MauticParagraphConnectorPluginManager
+   * @var MauticParagraphConnectorPluginManager
    */
   protected $mauticparagraphConnectorPluginManager;

@@ @@
   /**
    * The cache.default cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * Constructs a MauticParagraphApi class.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL Generator service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger to send info or warnings to Drupal with.
-   * @param \Drupal\mautic_paragraph\MauticParagraphConnector\MauticParagraphConnectorPluginManager $mautic_paragraph_connector_plugin_manager
+   * @param MauticParagraphConnectorPluginManager $mautic_paragraph_connector_plugin_manager
    *   The Unomi Connector Plugin Manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache object associated with the default bin.
    */
   public function __construct(ConfigFactoryInterface $config_factory,
@@ @@
     if ($this->mauticParagraphConfig->get('connector') && $this->mauticParagraphConfig->get('connector_config')) {

       // Ask the plugin to give us the MauticParagraphconnector.
-      /** @var \Drupal\mautic_paragraph\MauticParagraphConnectorInterface $connector */
+      /** @var MauticParagraphConnectorInterface $connector */
       $connector = $this->mauticparagraphConnectorPluginManager->createInstance($this->mauticParagraphConfig->get('connector'), $this->mauticParagraphConfig->get('connector_config'));
       return $connector->getApiClient();
     }
@@ @@
     if ($this->mauticParagraphConfig->get('connector') && $this->mauticParagraphConfig->get('connector_config')) {

       // Ask the plugin to give us the MauticParagraphconnector.
-      /** @var \Drupal\mautic_paragraph\MauticParagraphConnectorInterface $connector */
+      /** @var MauticParagraphConnectorInterface $connector */
       $connector = $this->mauticparagraphConnectorPluginManager->createInstance($this->mauticParagraphConfig->get('connector'), $this->mauticParagraphConfig->get('connector_config'));
       return $connector->getStatus();
     }
@@ @@
     if ($this->mauticParagraphConfig->get('connector') && $this->mauticParagraphConfig->get('connector_config')) {

       // Ask the plugin to give us the MauticParagraphconnector.
-      /** @var \Drupal\mautic_paragraph\MauticParagraphConnectorInterface $connector */
+      /** @var MauticParagraphConnectorInterface $connector */
       $connector = $this->mauticparagraphConnectorPluginManager->createInstance($this->mauticParagraphConfig->get('connector'), $this->mauticParagraphConfig->get('connector_config'));
       return $connector->getFormTitle($id);
     }
@@ @@
     if ($this->mauticParagraphConfig->get('connector') && $this->mauticParagraphConfig->get('connector_config')) {

       // Ask the plugin to give us the MauticParagraphclient.
-      /** @var \Drupal\mautic_paragraph\MauticParagraphConnectorInterface $connector */
+      /** @var MauticParagraphConnectorInterface $connector */
       $connector = $this->mauticparagraphConnectorPluginManager->createInstance($this->mauticParagraphConfig->get('connector'), $this->mauticParagraphConfig->get('connector_config'));
       return $connector->getList($input, $auth);
     }
@@ @@
     if ($this->mauticParagraphConfig->get('connector') && $this->mauticParagraphConfig->get('connector_config')) {

       // Ask the plugin to give us the MauticParagraphclient.
-      /** @var \Drupal\mautic_paragraph\MauticParagraphConnectorInterface $connector */
+      /** @var MauticParagraphConnectorInterface $connector */
       $connector = $this->mauticparagraphConnectorPluginManager->createInstance($this->mauticParagraphConfig->get('connector'), $this->mauticParagraphConfig->get('connector_config'));
       return $connector->getServerUri();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/mautic_paragraph/src/Form/MauticSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mautic_paragraph\Form;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * The MauticParagraphAPI service.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphApiInterface
+   * @var MauticParagraphApiInterface
    */
   protected $mauticParagraphApi;

@@ @@
   /**
    * The backend plugin manager.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphConnector\MauticParagraphConnectorPluginManager
+   * @var MauticParagraphConnectorPluginManager
    */
   protected $mauticparagraphConnectorPluginManager;

@@ @@
   /**
    * The messenger to send info or warnings to Drupal with.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The Mautic configuration object.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $configuration;

@@ @@
   /**
    * MauticSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\mautic_paragraph\MauticParagraphApiInterface $mautic_paragraph_api
+   * @param MauticParagraphApiInterface $mautic_paragraph_api
    *   The Unomi API service.
-   * @param \Drupal\mautic_paragraph\MauticParagraphConnector\MauticParagraphConnectorPluginManager $mautic_paragraph_connector_plugin_manager
+   * @param MauticParagraphConnectorPluginManager $mautic_paragraph_connector_plugin_manager
    *   The Unomi Connector Plugin Manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger to send info or warnings to Drupal with.
    */
   public function __construct(ConfigFactoryInterface $config_factory, MauticParagraphApiInterface $mautic_paragraph_api, MauticParagraphConnectorPluginManager $mautic_paragraph_connector_plugin_manager, MessengerInterface $messenger) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function buildConnectorConfigForm(array &$form, FormStateInterface $form_state) {
     $form['connector_config'] = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/mautic_paragraph/src/Controller/MauticCallbackController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mautic_paragraph\Controller;

+use Drupal\mautic_paragraph\MauticParagraphApi;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The MauticApi service.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphApi
+   * @var MauticParagraphApi
    */
   protected $mauticParagraphApi;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a MauticCallbackController object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger interface.
-   * @param \Drupal\mautic_paragraph\MauticParagraphApiInterface $mauticParagraphApi
+   * @param MauticParagraphApiInterface $mauticParagraphApi
    *   The MauticApi service.
    */
   public function __construct(MessengerInterface $messenger, MauticParagraphApiInterface $mauticParagraphApi) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/mautic_paragraph/src/Controller/FormAutocompleteController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The MauticParagraphApi service.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphApi
+   * @var MauticParagraphApi
    */
   protected $mauticParagraphApi;

@@ @@
   /**
    * Construct FormAutoCompleteController class.
    *
-   * @param \Drupal\mautic_paragraph\MauticParagraphApi $mauticParagraphApi
+   * @param MauticParagraphApi $mauticParagraphApi
    *   The MauticParagraph service.
    */
   public function __construct(MauticParagraphApi $mauticParagraphApi) {
@@ @@
   /**
    * Handler for autocomplete request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   HTTP request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Return formlist as Json.
    */
   public function handleAutocomplete(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/mautic_paragraph/src/Annotation/MauticParagraphConnector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mautic_paragraph\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the Mautic connector.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The backend description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


12) modules/contrib/mautic_paragraph/mautic_paragraph.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\FileStorage;
 /**
  * @file
  * Contains mautic_paragraph.module.
@@ @@
 function mautic_modules_installed($modules) {
   if (in_array('paragraphs', $modules)) {
     //loading config of mautic paragraphs if paragraphs module gets enabled
-    $config_path = drupal_get_path('module', 'mautic_paragraph') . '/config/optional';
-    $config_source = new \Drupal\Core\Config\FileStorage($config_path);
+    $config_path = \Drupal::service('extension.list.module')->getPath('mautic_paragraph') . '/config/optional';
+    $config_source = new FileStorage($config_path);
     \Drupal::service('config.installer')->installOptionalConfig($config_source);
   }
-}
+}
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 12 files have been changed by Rector                                      

