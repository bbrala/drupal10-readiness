modules/contrib/opigno_certificate/opigno_certificate.install
modules/contrib/opigno_certificate/opigno_certificate.module
modules/contrib/opigno_certificate/opigno_certificate.tokens.inc
modules/contrib/opigno_certificate/src/CertificateForm.php
modules/contrib/opigno_certificate/src/CertificateRouteProvider.php
modules/contrib/opigno_certificate/src/Controller/CertificateController.php
modules/contrib/opigno_certificate/src/Controller/EntityPrintController.php
modules/contrib/opigno_certificate/src/Entity/OpignoCertificate.php
modules/contrib/opigno_certificate/src/EventSubscriber/EventSubscriber.php
modules/contrib/opigno_certificate/src/FieldStorageDefinition.php
modules/contrib/opigno_certificate/src/OpignoCertificateAccessControlHandler.php
modules/contrib/opigno_certificate/src/OpignoCertificateInterface.php
modules/contrib/opigno_certificate/src/Plugin/Field/FieldFormatter/ViewModeSelectorFormatter.php
modules/contrib/opigno_certificate/src/Plugin/Field/FieldType/ViewModeSelectorItem.php
modules/contrib/opigno_certificate/src/Plugin/Field/FieldWidget/ViewModeSelectorSelect.php
modules/contrib/opigno_certificate/src/Plugin/Field/FieldWidget/ViewModeSelectorWidgetBase.php
modules/contrib/opigno_certificate/tests/src/Kernel/OpignoCertificateTest.php

9 files with changes
====================

1) modules/contrib/opigno_certificate/tests/src/Kernel/OpignoCertificateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\opigno_certificate\Kernel;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\opigno_certificate\Entity\OpignoCertificate;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->installConfig(['opigno_certificate_config_test']);
@@ @@
    */
   public function testCreate() {
     // Check if default certificate was created properly.
-    /** @var \Drupal\opigno_certificate\Entity\OpignoCertificate $opigno_certificate */
+    /** @var OpignoCertificate $opigno_certificate */
     $opigno_certificate = $this->entityTypeManager
       ->getStorage('opigno_certificate')
       ->create([
@@ @@
     $this->assertEquals(SAVED_NEW, $opigno_certificate->save(), 'Default certificate was saved successfully.');

     // Check if template certificate was created properly.
-    /** @var \Drupal\opigno_certificate\Entity\OpignoCertificate $template_certificate */
+    /** @var OpignoCertificate $template_certificate */
     $template_certificate = $this->entityTypeManager
       ->getStorage('opigno_certificate')
       ->create([
@@ @@
   /**
    * Sets the current user so group creation can rely on it.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to set as the current user.
    */
   protected function setCurrentUser(AccountInterface $account) {
@@ @@
   /**
    * Gets the current user so you can run some checks against them.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The current user.
    */
   protected function getCurrentUser() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/opigno_certificate/src/Plugin/Field/FieldWidget/ViewModeSelectorWidgetBase.php:20

    ---------- begin diff ----------
@@ @@
   protected $viewModes = [];

   /**
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    * @param array $settings
    * @param array $third_party_settings
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityDisplayRepositoryInterface $entity_display_repository) {
     parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $third_party_settings);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/opigno_certificate/src/OpignoCertificateInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_certificate;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\user\EntityOwnerInterface;
@@ @@
   /**
    * Returns the view mode selector field, if available.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface|null
+   * @return FieldDefinitionInterface|null
    *   A field definition or NULL if no view mode selector field is defined.
    */
   public function getViewModeSelectorField();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/opigno_certificate/src/OpignoCertificateAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_certificate;

+use Drupal\opigno_certificate\Entity\OpignoCertificate;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\opigno_certificate\Entity\OpignoCertificate $entity */
+    /** @var OpignoCertificate $entity */
     switch ($operation) {
       case 'view':
         if ($account->hasPermission('administer certificates')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/opigno_certificate/src/EventSubscriber/EventSubscriber.php:6

    ---------- begin diff ----------
@@ @@
 use Drupal\opigno_certificate\Entity\OpignoCertificate;
 use Symfony\Component\EventDispatcher\GenericEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Dompdf\Autoloader;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/opigno_certificate/src/Entity/OpignoCertificate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_certificate\Entity;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\opigno_certificate\OpignoCertificateInterface;
 use Drupal\Core\Entity\EditorialContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The view mode selector field.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   protected $viewModeSelectorField;

@@ @@
   public function getViewModeSelectorField() {
     if (!isset($this->viewModeSelectorField)) {
       $this->viewModeSelectorField = FALSE;
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+      /** @var FieldDefinitionInterface[] $fields */
       $fields = $this->getFieldDefinitions();
       foreach ($fields as $field) {
         if ($field->getType() == 'view_mode_selector') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/opigno_certificate/src/Controller/EntityPrintController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_certificate\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\entity_print\Plugin\ExportTypeManagerInterface;
@@ @@
   /**
    * The plugin manager for our Print engines.
    *
-   * @var \Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface
+   * @var EntityPrintPluginManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * The export type manager.
    *
-   * @var \Drupal\entity_print\Plugin\ExportTypeManagerInterface
+   * @var ExportTypeManagerInterface
    */
   protected $exportTypeManager;

@@ @@
   /**
    * The Print builder.
    *
-   * @var \Drupal\entity_print\PrintBuilderInterface
+   * @var PrintBuilderInterface
    */
   protected $printBuilder;

@@ @@
   /**
    * The Entity Type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * @param string $entity_id
    *   The entity ID.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response object on error otherwise the Print is sent.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function viewPrint($entity_type, $entity_id) {
     $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
@@ @@
    * @param string $entity_id
    *   The entity ID.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function viewPrintDebug($entity_type, $entity_id) {
     $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/opigno_certificate/src/Controller/CertificateController.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    * {@inheritdoc}
    */
   public function view(EntityInterface $opigno_certificate, $view_mode = 'full') {
-    /** @var \Drupal\opigno_certificate\OpignoCertificateInterface $opigno_certificate */
-
+    /** @var OpignoCertificateInterface $opigno_certificate */
     // @todo: check opigno_certificate access before rendering the opigno_certificate.
     // @todo: implement entity access to check that user has completed learning
     // path. This will need to be a custom access operation other than 'view'.
     /*if ($entity = $opigno_certificate->referencing_entity->entity) {
-    $title = $entity->label();
-    }*/
-
+      $title = $entity->label();
+      }*/
     if (in_array($view_mode, ['full', 'default']) && $opigno_certificate->getViewModeSelectorField()) {
       $view_mode = 'view_mode_selector';
     }
@@ @@
    * @param string $entity_id
    *   The entity ID.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function viewAccess($entity_type, $entity_id): AccessResultInterface {
     $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/opigno_certificate/opigno_certificate.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field_ui\Form\EntityViewDisplayEditForm;
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\opigno_certificate\OpignoCertificateInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 /**
  * @file
  * Contains opigno_certificate.module.
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function opigno_certificate_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\field_ui\Form\EntityViewDisplayEditForm $form_object */
+  /** @var EntityViewDisplayEditForm $form_object */
   $form_object = $form_state->getFormObject();
-  /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $view_display */
+  /** @var EntityViewDisplay $view_display */
   $view_display = $form_object->getEntity();

   if ($view_display->getMode() == 'view_mode_selector') {
@@ @@
   $fields = $storage->loadMultiple($field_ids);

   // Create the extra fields which represent the field deltas.
-  /** @var \Drupal\field\Entity\FieldConfig $field */
+  /** @var FieldConfig $field */
   foreach ($fields as $field) {
     $entity_type = $field->getTargetEntityTypeId();

@@ @@
 function opigno_certificate_theme_suggestions_opigno_certificate(array $variables) {
   $suggestions = [];

-  /** @var \Drupal\opigno_certificate\OpignoCertificateInterface $opigno_certificate */
+  /** @var OpignoCertificateInterface $opigno_certificate */
   $opigno_certificate = $variables['elements']['#opigno_certificate'];

   $view_mode = $variables['elements']['#view_mode'];
@@ @@

   $user = $user instanceof UserInterface ? $user : \Drupal::currentUser();

-  /** @var \Drupal\opigno_certificate\OpignoCertificateInterface $opigno_certificate */
+  /** @var OpignoCertificateInterface $opigno_certificate */
   $opigno_certificate = $variables['elements']['#opigno_certificate'];

-  /** @var \Drupal\Core\Entity\ContentEntityInterface $referencing_entity */
+  /** @var ContentEntityInterface $referencing_entity */
   $referencing_entity = $opigno_certificate->referencing_entity->entity;

   // Provide the referencing entity context.
@@ @@
     }

     // Get the completion date.
-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date_formatter = \Drupal::service('date.formatter');
     $gid = (int) $referencing_entity->id();
     $uid = (int) $user->id();
@@ @@
   }

   // Add the background image and logo.
-  $bg_img = drupal_get_path('theme', 'aristotle') . '/assets/Logo-Opigno-circle.svg';
-  $variables['bg_image'] = file_exists($bg_img) ? file_url_transform_relative(base_path() . $bg_img) : '';
-  $logo = drupal_get_path('theme', 'aristotle') . '/assets/Logo-Opigno-3-dark.svg';
-  $variables['logo'] = file_exists($logo) ? file_url_transform_relative(base_path() . $logo) : '';
+  $bg_img = \Drupal::service('extension.list.theme')->getPath('aristotle') . '/assets/Logo-Opigno-circle.svg';
+  $variables['bg_image'] = file_exists($bg_img) ? \Drupal::service('file_url_generator')->transformRelative(base_path() . $bg_img) : '';
+  $logo = \Drupal::service('extension.list.theme')->getPath('aristotle') . '/assets/Logo-Opigno-3-dark.svg';
+  $variables['logo'] = file_exists($logo) ? \Drupal::service('file_url_generator')->transformRelative(base_path() . $logo) : '';
   $variables['awarded_to'] = $user->getDisplayName();

   // Helpful $content variable for templates.
@@ @@
     $variables['content'][$key] = $variables['elements'][$key];
   }

-  $variables['style_certificate_edit_form'] = drupal_get_path('module', 'opigno_certificate') . '/css/opigno_certificate_edit_form.css';
+  $variables['style_certificate_edit_form'] = \Drupal::service('extension.list.module')->getPath('opigno_certificate') . '/css/opigno_certificate_edit_form.css';

 }

@@ @@
  * Implements hook_ckeditor_css_alter().
  */
 function opigno_certificate_ckeditor_css_alter(array &$css, Editor $editor) {
-  $css[] = drupal_get_path('module', 'opigno_certificate') . '/css/opigno_certificate_edit_form.css';
+  $css[] = \Drupal::service('extension.list.module')->getPath('opigno_certificate') . '/css/opigno_certificate_edit_form.css';
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector


 [OK] 9 files have been changed by Rector                                       

