diff --git a/graphapi.install b/graphapi.install
index a53dad1..dba0d3b 100644
--- a/graphapi.install
+++ b/graphapi.install
@@ -12,7 +12,7 @@ function graphapi_requirements($phase) {
     );
 
     if (!class_exists('\\Fhaculty\\Graph\\GraphViz')) {
-      $path = drupal_get_path('module', 'graphapi');
+      $path = \Drupal::service('extension.list.module')->getPath('graphapi');
       $requirements['graphapi']['description'] = "FIX ME"; //t('Please follow the instructions from !readme', array('!readme' => \Drupal::l("README.txt", Url::fromUri($path . "/README.txt"))));
       $requirements['graphapi']['value'] = 'Missing';
       $requirements['graphapi']['severity'] = REQUIREMENT_ERROR;
diff --git a/graphapi.module b/graphapi.module
index 4427825..d69e153 100644
--- a/graphapi.module
+++ b/graphapi.module
@@ -299,7 +299,7 @@ function _graphapi_uniform_id($config, $id) {
 function graphapi_views_api() {
   return array(
     'api' => 3.0,
-    'path' => drupal_get_path('module', 'graphapi') . '/views',
+    'path' => \Drupal::service('extension.list.module')->getPath('graphapi') . '/views',
   );
 }
 
@@ -526,7 +526,7 @@ function _graphapi_dump_to_properties($options, $recurse = FALSE) {
 }
 
 function graphapi_direct_dump($g) {
-  $graph = new Fhaculty\Graph\Graph();
+  $graph = new Graph();
   foreach ($g as $from_id => $from_data) {
     $v = $graph->createVertex($from_id);
     if (isset($from_data['data'])) {
diff --git a/modules/graphapi_class/graphapi_class.module b/modules/graphapi_class/graphapi_class.module
index ff64f68..f02c081 100644
--- a/modules/graphapi_class/graphapi_class.module
+++ b/modules/graphapi_class/graphapi_class.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Component\Discovery\YamlDiscovery;
 use Fhaculty\Graph\Uml\ClassDiagramBuilder;
 use Fhaculty\Graph\GraphViz;
 use Fhaculty\Graph\Graph;
@@ -103,7 +104,7 @@ function _graphapi_class_cache_set($cid, $data) {
 }
 
 function _graphapi_class_services() {
-  $yaml_discovery = new \Drupal\Component\Discovery\YamlDiscovery('services', \Drupal::moduleHandler()->getModuleDirectories());
+  $yaml_discovery = new YamlDiscovery('services', \Drupal::moduleHandler()->getModuleDirectories());
   $yaml = $yaml_discovery->findAll();
   $classes = array();
   foreach ($yaml as $module => $services) {
