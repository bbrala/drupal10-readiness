modules/contrib/taxonomy_scheduler/src/EventSubscriber/TaxonomySchedulerCronSubscriber.php
modules/contrib/taxonomy_scheduler/src/EventSubscriber/TaxonomySchedulerPresaveSubscriber.php
modules/contrib/taxonomy_scheduler/src/Exception/TaxonomySchedulerException.php
modules/contrib/taxonomy_scheduler/src/Form/AdminForm.php
modules/contrib/taxonomy_scheduler/src/Plugin/QueueWorker/TaxonomySchedulerQueueWorker.php
modules/contrib/taxonomy_scheduler/src/Service/TaxonomySchedulerFieldManager.php
modules/contrib/taxonomy_scheduler/src/ValueObject/TaxonomyFieldStorageItem.php
modules/contrib/taxonomy_scheduler/src/ValueObject/TaxonomySchedulerQueueItem.php
modules/contrib/taxonomy_scheduler/taxonomy_scheduler.install
modules/contrib/taxonomy_scheduler/taxonomy_scheduler.post_update.php
modules/contrib/taxonomy_scheduler/tests/src/Kernel/FieldStorageTest.php
modules/contrib/taxonomy_scheduler/tests/src/Unit/TaxonomyFieldStorageItemTest.php

7 files with changes
====================

1) modules/contrib/taxonomy_scheduler/tests/src/Unit/TaxonomyFieldStorageItemTest.php:36

    ---------- begin diff ----------
@@ @@
    *
    * @dataProvider invalidDataProvider
    *
-   * @return \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem
+   * @return TaxonomyFieldStorageItem
    *   The TaxonomyFieldStorageItem.
    */
   public function testInvalidData(array $data): TaxonomyFieldStorageItem {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/taxonomy_scheduler/tests/src/Kernel/FieldStorageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\taxonomy_scheduler\Kernel;

+use Drupal\taxonomy_scheduler\Service\TaxonomySchedulerFieldManager;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\taxonomy\Entity\Term;
@@ @@
   /**
    * FieldManager.
    *
-   * @var \Drupal\taxonomy_scheduler\Service\TaxonomySchedulerFieldManager
+   * @var TaxonomySchedulerFieldManager
    */
   protected $fieldManager;

@@ @@
   /**
    * TaxonomyFieldStorageItem.
    *
-   * @var \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem
+   * @var TaxonomyFieldStorageItem
    */
   protected $taxonomyFieldStorageItem;

@@ @@
   /**
    * SetUp.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function setUp(): void {
     parent::setUp();
@@ @@
   /**
    * TestAddField.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testAddField(): void {
     $this->fieldManager->addField($this->taxonomyFieldStorageItem);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/taxonomy_scheduler/src/Service/TaxonomySchedulerFieldManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\taxonomy_scheduler\Service;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageException;
@@ @@
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * FieldConfig.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fieldConfig;

@@ @@
   /**
    * FieldStorageConfig.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fieldStorageConfig;

@@ @@
   /**
    * EntityFormDisplay.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $entityFormDisplay;

@@ @@
   /**
    * TaxonomySchedulerFieldManager constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $fieldStorageConfig
+   * @param EntityStorageInterface $fieldStorageConfig
    *   The field storage config.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $fieldConfig
+   * @param EntityStorageInterface $fieldConfig
    *   The field config.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entityFormDisplay
+   * @param EntityStorageInterface $entityFormDisplay
    *   The entity form display.
    */
   public function __construct(
@@ @@
   /**
    * Adds the field storage configuration, if not exists.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    */
   private function addFieldStorageConfig(TaxonomyFieldStorageItem $fieldStorageItem): void {
@@ @@
   /**
    * Checks if the field storage already exists.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    *
    * @return bool
@@ @@
   /**
    * FieldConfigExists.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    * @param string $vocabulary
    *   The vocabulary id.
@@ @@
   /**
    * Adds the field configuration.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    * @param string $vocabulary
    *   The vocabulary id.
@@ @@
   /**
    * Updates field configuration.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    */
   private function updateFieldConfig(TaxonomyFieldStorageItem $fieldStorageItem): void {
@@ @@
   /**
    * Adds a field (if not exists) and enables the form display.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    */
   public function addField(TaxonomyFieldStorageItem $fieldStorageItem): void {
@@ @@
   /**
    * Disables an existing field's form display.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    */
   public function disableField(TaxonomyFieldStorageItem $fieldStorageItem): void {
@@ @@
   /**
    * Enables a field's form display.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    */
   public function enableField(TaxonomyFieldStorageItem $fieldStorageItem): void {
@@ @@
    *   The field name.
    */
   private function setFormDisplay(string $bundle, string $fieldName): void {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $formDisplay */
+    /** @var EntityFormDisplayInterface $formDisplay */
     $formDisplay = $this->entityFormDisplay->load('taxonomy_term.' . $bundle . '.default');

     if (!$formDisplay) {
@@ @@
    *   The name of the field.
    */
   private function removeFormDisplay(string $bundle, string $fieldName): void {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $formDisplay */
+    /** @var EntityFormDisplayInterface $formDisplay */
     $formDisplay = $this->entityFormDisplay->load('taxonomy_term.' . $bundle . '.default');

     if (!$formDisplay instanceof EntityFormDisplay) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/taxonomy_scheduler/src/Plugin/QueueWorker/TaxonomySchedulerQueueWorker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\taxonomy_scheduler\Plugin\QueueWorker;

+use Drupal\taxonomy\TermStorage;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ @@
   /**
    * TermStorage.
    *
-   * @var \Drupal\taxonomy\TermStorage
+   * @var TermStorage
    */
   private $termStorage;

@@ @@
   /**
    * DateTime.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   private $dateTime;

@@ @@
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\taxonomy\TermStorageInterface $termStorage
+   * @param TermStorageInterface $termStorage
    *   The term storage.
-   * @param \Drupal\Component\Datetime\TimeInterface $dateTime
+   * @param TimeInterface $dateTime
    *   The time interface.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The config.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/taxonomy_scheduler/src/Form/AdminForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * VocabularyStorage.
    *
-   * @var \Drupal\taxonomy\VocabularyStorageInterface
+   * @var VocabularyStorageInterface
    */
   private $vocabularyStorage;

@@ @@
   /**
    * TaxonomySchedulerFieldManager.
    *
-   * @var \Drupal\taxonomy_scheduler\Service\TaxonomySchedulerFieldManager
+   * @var TaxonomySchedulerFieldManager
    */
   private $fieldManager;

@@ @@
   /**
    * ConfigImmutable.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $configImmutable;

@@ @@
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $configEditable;

@@ @@
   /**
    * AdminForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\taxonomy\VocabularyStorageInterface $vocabularyStorage
+   * @param VocabularyStorageInterface $vocabularyStorage
    *   The vocabulary storage.
-   * @param \Drupal\taxonomy_scheduler\Service\TaxonomySchedulerFieldManager $fieldManager
+   * @param TaxonomySchedulerFieldManager $fieldManager
    *   The field service.
-   * @param \Drupal\Core\Config\ImmutableConfig $configImmutable
+   * @param ImmutableConfig $configImmutable
    *   The immutable config settings.
-   * @param \Drupal\Core\Config\Config $configEditable
+   * @param Config $configEditable
    *   The editable config settings.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/taxonomy_scheduler/src/EventSubscriber/TaxonomySchedulerPresaveSubscriber.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;

@@ @@
   /**
    * DateTime.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   private $dateTime;

@@ @@
   /**
    * CacheTagsInvalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   private $cacheTagsInvalidator;

@@ @@
   /**
    * TaxonomySchedulerPresaveSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The config.
-   * @param \Drupal\Component\Datetime\TimeInterface $dateTime
+   * @param TimeInterface $dateTime
    *   The Drupal time object.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   The cachetags invalidator.
    */
   public function __construct(
@@ @@
    * Sets published when set publish date has passed when
    * fields are present and filled.
    *
-   * @param \Drupal\core_event_dispatcher\Event\Entity\EntityPresaveEvent $event
+   * @param EntityPresaveEvent $event
    *   The event.
    */
   public function termPresave(EntityPresaveEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/taxonomy_scheduler/src/EventSubscriber/TaxonomySchedulerCronSubscriber.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;

@@ @@
   /**
    * TermStorage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   private $termStorage;

@@ @@
   /**
    * Queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   private $queue;

@@ @@
   /**
    * DateTime.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   private $dateTime;

@@ @@
   /**
    * DateFormatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   private $dateFormatter;

@@ @@
   /**
    * TaxonomySchedulerCronSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The config.
-   * @param \Drupal\taxonomy\TermStorageInterface $termStorage
+   * @param TermStorageInterface $termStorage
    *   The term storage.
-   * @param \Drupal\Core\Queue\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The queue.
-   * @param \Drupal\Component\Datetime\TimeInterface $dateTime
+   * @param TimeInterface $dateTime
    *   The datetime object.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The date formatter.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 7 files have been changed by Rector                                       

