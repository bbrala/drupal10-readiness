modules/contrib/inline_translation/inline_translation.module
modules/contrib/inline_translation/src/EntityOperations.php
modules/contrib/inline_translation/tests/src/Functional/InlineTranslationNodeUITest.php

3 files with changes
====================

1) modules/contrib/inline_translation/tests/src/Functional/InlineTranslationNodeUITest.php:55

    ---------- begin diff ----------
@@ @@
     // Display the language selector.
     $this->drupalLogin($this->administrator);
     $edit = ['language_configuration[language_alterable]' => TRUE];
-    $this->drupalPostForm('admin/structure/types/manage/article', $edit, 'Save content type');
+    $this->drupalGet('admin/structure/types/manage/article');
+    $this->submitForm($edit, 'Save content type');

     // Use inline translation.
     $this->drupalGet('admin/config/regional/content-language');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/inline_translation/src/EntityOperations.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\inline_translation;

+use Drupal\Core\Entity\RevisionableInterface;
+use Drupal\language\Entity\ContentLanguageSettings;
 use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The content translation manager service.
    *
-   * @var \Drupal\content_translation\ContentTranslationManagerInterface
+   * @var ContentTranslationManagerInterface
    */
   protected $contentTranslationManager;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The entity bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * Provides a way to do various entity operations.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager
+   * @param ContentTranslationManagerInterface $content_translation_manager
    *   The content translation manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The entity bundle information service.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   The form ID.
@@ @@
       return;
     }

-    /** @var \Drupal\Core\Entity\RevisionableInterface $entity */
+    /** @var RevisionableInterface $entity */
     $entity = $form_state->getFormObject()->getEntity();
     if (!$this->isSupported($entity)) {
       return;
@@ @@
    *
    * @param array $element
    *   The submit element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see \Drupal\language\Form\ContentLanguageSettingsForm
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function settingsFormSubmit(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An array of form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   protected function entityFormAddField(array &$form, FormStateInterface $form_state) {
@@ @@
    * Copies the form data to the translation.
    */
   public function entityBuilder($entity_type, ContentEntityInterface $entity, array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $bundle = $entity->bundle();
     $current_language = $this->languageManager->getCurrentLanguage();
     $languages = $this->languageManager->getLanguages();
@@ @@
    *   The field name.
    * @param array $values
    *   Form values.
-   * @param \Drupal\Core\TypedData\TranslatableInterface $translation
+   * @param TranslatableInterface $translation
    *   Translation of the entity.
    */
   protected function handleImageField(string $field_name, array &$values, TranslatableInterface $translation) {
@@ @@
   /**
    * Checks if inline translation is enabled.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return bool
@@ @@
   /**
    * Checks translation supported for given field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field definition.
    *
    * @return bool
@@ @@
    * @param string $bundle
    *   Bundle name.
    *
-   * @return \Drupal\language\Entity\ContentLanguageSettings
+   * @return ContentLanguageSettings
    *   The content language config entity if one exists. Otherwise, returns
    *   default values.
    */
@@ @@
   protected function loadContentLanguageSettings(string $entity_type_id, string $bundle) {
     $config = $this->entityTypeManager->getStorage('language_content_settings')->load($entity_type_id . '.' . $bundle);
     if ($config == NULL) {
-      /** @var \Drupal\language\Entity\ContentLanguageSettings $config */
+      /** @var ContentLanguageSettings $config */
       $config = $this->entityTypeManager->getStorage('language_content_settings')->create([
         'target_entity_type_id' => $entity_type_id,
         'target_bundle' => $bundle,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/inline_translation/inline_translation.module:14

    ---------- begin diff ----------
@@ @@
  * Add "Enable inline translation" checkbox in content translation settings.
  */
 function inline_translation_form_language_content_settings_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\inline_translation\EntityOperations $form_handler */
+  /** @var EntityOperations $form_handler */
   $form_handler = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(EntityOperations::class);
   $form_handler->settingsFormAlter($form, $form_state);
@@ @@
  */
 function inline_translation_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   if ($form_state->getFormObject() instanceof EntityFormInterface) {
-    /** @var \Drupal\inline_translation\EntityOperations $form_handler */
+    /** @var EntityOperations $form_handler */
     $form_handler = \Drupal::service('class_resolver')
       ->getInstanceFromDefinition(EntityOperations::class);
     $form_handler->entityFormAlter($form, $form_state, $form_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

