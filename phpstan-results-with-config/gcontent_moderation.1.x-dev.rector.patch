diff --git a/composer.json b/composer.json
index 32ccb00..be19cff 100644
--- a/composer.json
+++ b/composer.json
@@ -17,7 +17,7 @@
     "license": "GPL-2.0-or-later",
     "minimum-stability": "dev",
     "require": {
-        "drupal/core": "^8.8 || ^9",
-        "drupal/group": "^1.0"
+        "drupal/group": "^1.0",
+        "drupal/core": "^9.1 || ^10"
     }
 }
diff --git a/gcontent_moderation.info.yml b/gcontent_moderation.info.yml
index 3a6169f..9f5eb66 100644
--- a/gcontent_moderation.info.yml
+++ b/gcontent_moderation.info.yml
@@ -2,7 +2,7 @@ name: Group Content Moderation
 type: module
 description: Enable Content Moderation workflow transistions to be used by group members
 package: Group
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.1 || ^10
 dependencies:
   - group
   - content_moderation
diff --git a/src/Access/GroupContentModerationPermissions.php b/src/Access/GroupContentModerationPermissions.php
index dc33eac..b243c96 100644
--- a/src/Access/GroupContentModerationPermissions.php
+++ b/src/Access/GroupContentModerationPermissions.php
@@ -24,7 +24,7 @@ class GroupContentModerationPermissions {
     $perms = [];
 
     // Generate group permissions for all group types.
-    /** @var \Drupal\workflows\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     foreach (Workflow::loadMultipleByType('content_moderation') as $workflow) {
       $perms += $this->buildPermissions($workflow);
     }
@@ -35,7 +35,7 @@ class GroupContentModerationPermissions {
   /**
    * Returns a list of group permissions for a given profile type.
    *
-   * @param \Drupal\workflows\WorkflowInterface $workflow
+   * @param WorkflowInterface $workflow
    *   The profile type.
    *
    * @return array
diff --git a/src/Access/LatestRevisionCheck.php b/src/Access/LatestRevisionCheck.php
index 10a1542..cd94dc7 100644
--- a/src/Access/LatestRevisionCheck.php
+++ b/src/Access/LatestRevisionCheck.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\gcontent_moderation\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\group\Entity\GroupContentInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultNeutral;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -28,16 +30,16 @@ class LatestRevisionCheck extends ContentModerationLatestRevisionCheck implement
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs the group latest revision check object.
    *
-   * @param \Drupal\Core\Routing\Access\AccessInterface $inner
+   * @param AccessInterface $inner
    *   The inner service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(AccessInterface $inner, EntityTypeManagerInterface $entity_type_manager) {
@@ -64,12 +66,12 @@ class LatestRevisionCheck extends ContentModerationLatestRevisionCheck implement
   /**
    * Determine group-specific access to the latest revision.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to check.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user to check access for.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Returns allowed access if the entity belongs to a group, and the user
    *   has both the 'view latest version' and the
    *   'view unpublished PLUGIN_ID entity' permission in a group it belongs to.
@@ -97,7 +99,7 @@ class LatestRevisionCheck extends ContentModerationLatestRevisionCheck implement
       return $access;
     }
 
-    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
+    /** @var GroupContentInterface $group_content */
     foreach ($group_contents as $group_content) {
       $group = $group_content->getGroup();
       $access = $access->orIf(AccessResult::allowedIf(
@@ -123,12 +125,12 @@ class LatestRevisionCheck extends ContentModerationLatestRevisionCheck implement
   /**
    * Copy of content moderation's protected method.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   returns the Entity in question.
    *
    * @throws \Exception
diff --git a/src/GroupStateTransitionValidation.php b/src/GroupStateTransitionValidation.php
index fdfe635..9c63f0d 100644
--- a/src/GroupStateTransitionValidation.php
+++ b/src/GroupStateTransitionValidation.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\gcontent_moderation;
 
+use Drupal\group\Entity\GroupInterface;
+use Drupal\group\Entity\GroupContentInterface;
+use Drupal\workflows\TransitionInterface;
 use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\content_moderation\StateTransitionValidation;
 use Drupal\content_moderation\StateTransitionValidationInterface;
@@ -25,50 +28,50 @@ class GroupStateTransitionValidation extends StateTransitionValidation implement
   /**
    * The content moderation state transition validation service.
    *
-   * @var \Drupal\content_moderation\StateTransitionValidationInterface
+   * @var StateTransitionValidationInterface
    */
   protected $inner;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;
 
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;
 
   /**
    * The group content enabler plugin manager.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface
+   * @var GroupContentEnablerManagerInterface
    */
   protected $groupContentEnablerManager;
 
   /**
    * Constructs the group state transition validation object.
    *
-   * @param \Drupal\content_moderation\StateTransitionValidationInterface $inner
+   * @param StateTransitionValidationInterface $inner
    *   The content moderation state transition validation service.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_information
+   * @param ModerationInformationInterface $moderation_information
    *   The moderation information service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\group\Plugin\GroupContentEnablerManagerInterface $group_content_enabler_manager
+   * @param GroupContentEnablerManagerInterface $group_content_enabler_manager
    *   The group content enabler plugin manager.
    */
   public function __construct(StateTransitionValidationInterface $inner, ModerationInformationInterface $moderation_information, RouteMatchInterface $route_match, EntityTypeManagerInterface $entity_type_manager, GroupContentEnablerManagerInterface $group_content_enabler_manager) {
@@ -115,10 +118,10 @@ class GroupStateTransitionValidation extends StateTransitionValidation implement
       return $this->inner->getValidTransitions($entity, $user);
     }
 
-    /** @var \Drupal\group\Entity\GroupInterface[] $groups */
+    /** @var GroupInterface[] $groups */
     $groups = [];
     foreach ($group_contents as $group_content) {
-      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
+      /** @var GroupContentInterface $group_content */
       $group = $group_content->getGroup();
       $groups[$group->id()] = $group;
     }
@@ -133,7 +136,7 @@ class GroupStateTransitionValidation extends StateTransitionValidation implement
   /**
    * Create a plugin ID based on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to get the Plugin for.
    *
    * @return string
@@ -157,14 +160,14 @@ class GroupStateTransitionValidation extends StateTransitionValidation implement
   /**
    * Run the permissions checks against this set of groups.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to check access to transitions for.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The moderated entity.
    * @param array $groups
    *   The groups the entity belongs to.
    *
-   * @return \Drupal\workflows\TransitionInterface[]
+   * @return TransitionInterface[]
    *   Array of valid transitions.
    */
   public function allowedTransitions(AccountInterface $user, ContentEntityInterface $entity, array $groups) {
diff --git a/src/Plugin/views/filter/GroupContentRespectUnpublished.php b/src/Plugin/views/filter/GroupContentRespectUnpublished.php
index c077b63..d341756 100644
--- a/src/Plugin/views/filter/GroupContentRespectUnpublished.php
+++ b/src/Plugin/views/filter/GroupContentRespectUnpublished.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\gcontent_moderation\Plugin\views\filter;
 
+use Drupal\group\Plugin\views\argument\GroupId;
+use Drupal\group\Entity\GroupInterface;
+use Drupal\gnode\Plugin\GroupContentEnabler\GroupNode;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\views\Plugin\views\filter\FilterPluginBase;
@@ -19,14 +22,14 @@ class GroupContentRespectUnpublished extends FilterPluginBase {
   /**
    * The group storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $groupStorage;
 
   /**
    * The group content enabler plugin manager.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface
+   * @var GroupContentEnablerManagerInterface
    */
   protected $groupContentEnabler;
 
@@ -81,7 +84,7 @@ class GroupContentRespectUnpublished extends FilterPluginBase {
       return;
     }
 
-    /** @var \Drupal\group\Plugin\views\argument\GroupId $groupIdPlugin */
+    /** @var GroupId $groupIdPlugin */
     $groupId = NULL;
     $groupIdPlugin = $argument['gid'];
     if ($groupIdPlugin->getPluginId() === 'group_id') {
@@ -98,7 +101,7 @@ class GroupContentRespectUnpublished extends FilterPluginBase {
       return;
     }
 
-    /** @var \Drupal\group\Entity\GroupInterface $group */
+    /** @var GroupInterface $group */
     $group = $this->groupStorage->load($groupId);
     if (!$group) {
       $this->query->addWhereExpression(
@@ -108,7 +111,7 @@ class GroupContentRespectUnpublished extends FilterPluginBase {
     }
 
     $nodeTypes = [];
-    /** @var \Drupal\gnode\Plugin\GroupContentEnabler\GroupNode $plugin */
+    /** @var GroupNode $plugin */
     foreach ($this->groupContentEnabler->getAll() as $plugin) {
       $pluginDefinition = $plugin->getPluginDefinition();
       if ($pluginDefinition['entity_type_id'] === 'node') {
diff --git a/tests/modules/gcontent_moderation_test/src/Access/LatestRevisionCheck.php b/tests/modules/gcontent_moderation_test/src/Access/LatestRevisionCheck.php
index fcac74f..cfb6004 100644
--- a/tests/modules/gcontent_moderation_test/src/Access/LatestRevisionCheck.php
+++ b/tests/modules/gcontent_moderation_test/src/Access/LatestRevisionCheck.php
@@ -23,7 +23,7 @@ class LatestRevisionCheck implements AccessInterface {
   /**
    * Constructs the service decorator.
    *
-   * @param \Drupal\Core\Routing\Access\AccessInterface $inner
+   * @param AccessInterface $inner
    *   The inner service.
    */
   public function __construct(AccessInterface $inner) {
diff --git a/tests/modules/gcontent_moderation_test/src/GroupStateTransitionValidation.php b/tests/modules/gcontent_moderation_test/src/GroupStateTransitionValidation.php
index 3c2def8..a1dbd30 100644
--- a/tests/modules/gcontent_moderation_test/src/GroupStateTransitionValidation.php
+++ b/tests/modules/gcontent_moderation_test/src/GroupStateTransitionValidation.php
@@ -18,14 +18,14 @@ class GroupStateTransitionValidation extends StateTransitionValidation implement
   /**
    * The inner service.
    *
-   * @var \Drupal\content_moderation\StateTransitionValidationInterface
+   * @var StateTransitionValidationInterface
    */
   protected $inner;
 
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;
 
diff --git a/tests/src/Functional/ContentModerationIntegrationTest.php b/tests/src/Functional/ContentModerationIntegrationTest.php
index 46ff7e0..80fef6e 100644
--- a/tests/src/Functional/ContentModerationIntegrationTest.php
+++ b/tests/src/Functional/ContentModerationIntegrationTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\gcontent_moderation\Functional;
 
+use Drupal\group\Entity\GroupInterface;
+use Drupal\user\UserInterface;
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group\Entity\Storage\GroupContentTypeStorageInterface;
+use Drupal\workflows\WorkflowInterface;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;
 use Drupal\Tests\group\Functional\GroupBrowserTestBase;
 use InvalidArgumentException;
@@ -18,28 +23,28 @@ class ContentModerationIntegrationTest extends GroupBrowserTestBase {
   /**
    * A group for testing purposes.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $group;
 
   /**
    * A normal group member.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupMember;
 
   /**
    * A admin group member.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupAdmin;
 
   /**
    * A non-group member.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $nonGroupMember;
 
@@ -58,7 +63,7 @@ class ContentModerationIntegrationTest extends GroupBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create the editorial workflow.
@@ -71,7 +76,7 @@ class ContentModerationIntegrationTest extends GroupBrowserTestBase {
       'view own unpublished group_node:article entity',
       'view latest version',
     ];
-    /** @var \Drupal\group\Entity\GroupTypeInterface $type */
+    /** @var GroupTypeInterface $type */
     $type = $this->entityTypeManager->getStorage('group_type')->load('default');
     $type->getMemberRole()->grantPermissions($member_permissions)->save();
 
@@ -91,10 +96,10 @@ class ContentModerationIntegrationTest extends GroupBrowserTestBase {
 
     // Add the article content type to the group type, and enable workflow.
     $this->createContentType(['type' => 'article']);
-    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+    /** @var GroupContentTypeStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('group_content_type');
     $storage->createFromPlugin($type, 'group_node:article')->save();
-    /** @var \Drupal\workflows\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     $workflow = $this->entityTypeManager->getStorage('workflow')->load('editorial');
     $workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'article');
     $workflow->save();
@@ -168,7 +173,7 @@ class ContentModerationIntegrationTest extends GroupBrowserTestBase {
       'moderation_state[0][state]' => 'published',
     ];
     try {
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
     }
     catch (InvalidArgumentException $exception) {
       $expectedException = TRUE;
@@ -183,9 +188,9 @@ class ContentModerationIntegrationTest extends GroupBrowserTestBase {
     $edit = [
       'moderation_state[0][state]' => 'draft',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet($node->toUrl('edit-form'));
-    $this->drupalPostForm(NULL, ['title[0][value]' => 'New draft'], t('Save'));
+    $this->submitForm(['title[0][value]' => 'New draft'], t('Save'));
     $this->assertSession()->statusCodeEquals(200);
 
     // The group admin should have access.
@@ -199,7 +204,7 @@ class ContentModerationIntegrationTest extends GroupBrowserTestBase {
     $edit = [
       'moderation_state[0][state]' => 'published',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->statusCodeEquals(200);
 
   }
diff --git a/tests/src/Kernel/ContentModerationIntegrationTest.php b/tests/src/Kernel/ContentModerationIntegrationTest.php
index a521e98..66a564a 100644
--- a/tests/src/Kernel/ContentModerationIntegrationTest.php
+++ b/tests/src/Kernel/ContentModerationIntegrationTest.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\Tests\gcontent_moderation\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\group\Entity\GroupInterface;
+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use Drupal\workflows\WorkflowInterface;
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group\Entity\Storage\GroupContentTypeStorageInterface;
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -18,6 +25,7 @@ use Symfony\Component\Routing\Route;
  */
 class ContentModerationIntegrationTest extends GroupKernelTestBase {
 
+  use ProphecyTrait;
   use ContentTypeCreationTrait;
   use ContentModerationTestTrait;
   use NodeCreationTrait;
@@ -25,21 +33,21 @@ class ContentModerationIntegrationTest extends GroupKernelTestBase {
   /**
    * A group.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $group;
 
   /**
    * A group member.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupMember;
 
   /**
    * A group node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $groupNode;
 
@@ -60,7 +68,7 @@ class ContentModerationIntegrationTest extends GroupKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('content_moderation_state');
@@ -73,7 +81,7 @@ class ContentModerationIntegrationTest extends GroupKernelTestBase {
     $this->createEditorialWorkflow();
 
     // Enable workflow.
-    /** @var \Drupal\workflows\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     $workflow = $this->entityTypeManager->getStorage('workflow')->load('editorial');
     $workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'article');
     $workflow->save();
@@ -84,12 +92,12 @@ class ContentModerationIntegrationTest extends GroupKernelTestBase {
       'view latest version',
       'view unpublished group_node:article entity',
     ];
-    /** @var \Drupal\group\Entity\GroupTypeInterface $type */
+    /** @var GroupTypeInterface $type */
     $type = $this->entityTypeManager->getStorage('group_type')->load('default');
     $type->getMemberRole()->grantPermissions($member_permissions)->save();
 
     // Enable node content.
-    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+    /** @var GroupContentTypeStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('group_content_type');
     $storage->createFromPlugin($type, 'group_node:article')->save();
 
@@ -126,13 +134,13 @@ class ContentModerationIntegrationTest extends GroupKernelTestBase {
     $access_check = $this->container->get('access_check.latest_revision');
 
     // By default there should be no access granted.
-    /** @var \Symfony\Component\Routing\Route $route */
+    /** @var Route $route */
     $route = $this->prophesize(Route::class);
     $route->getOption('_content_moderation_entity_type')->willReturn('node');
     // This option is checked by the testing decorator.
     // @see \Drupal\group_test_content_moderation\Access\LatestRevisionCheck::access
     $route->getOption('_explicit_deny')->willReturn(FALSE);
-    /** @var \Drupal\Core\Routing\RouteMatchInterface $route_match */
+    /** @var RouteMatchInterface $route_match */
     $route_match = $this->prophesize(RouteMatchInterface::class);
     $route_match->getParameter('node')->willReturn($this->groupNode);
 
diff --git a/tests/src/Kernel/GroupContentRespectUnpublishedArgumentTest.php b/tests/src/Kernel/GroupContentRespectUnpublishedArgumentTest.php
index feff8c7..00ff705 100644
--- a/tests/src/Kernel/GroupContentRespectUnpublishedArgumentTest.php
+++ b/tests/src/Kernel/GroupContentRespectUnpublishedArgumentTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\gcontent_moderation\Kernel\Views;
 
+use Drupal\group\Entity\GroupType;
+use Drupal\group\Entity\Storage\GroupContentTypeStorageInterface;
+use Drupal\workflows\WorkflowInterface;
+use Drupal\user\UserInterface;
+use Drupal\group\Entity\GroupInterface;
 use Drupal\group\Entity\Group;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;
@@ -41,7 +46,7 @@ class GroupContentRespectUnpublishedArgumentTest extends ViewsKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = FALSE) {
+  protected function setUp($import_test_views = FALSE): void {
     parent::setUp($import_test_views);
 
     $this->installEntitySchema('content_moderation_state');
@@ -72,13 +77,13 @@ class GroupContentRespectUnpublishedArgumentTest extends ViewsKernelTestBase {
     $account->save();
     $this->container->get('current_user')->setAccount($account);
 
-    /** @var \Drupal\group\Entity\GroupType $type */
+    /** @var GroupType $type */
     $type = $this->container->get('entity_type.manager')->getStorage('group_type')->load('default');
 
-    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+    /** @var GroupContentTypeStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('group_content_type');
     $storage->createFromPlugin($type, 'group_node:default')->save();
-    /** @var \Drupal\workflows\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     $workflow = $this->container->get('entity_type.manager')->getStorage('workflow')->load('editorial');
     $workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'default');
     $workflow->save();
@@ -143,17 +148,17 @@ class GroupContentRespectUnpublishedArgumentTest extends ViewsKernelTestBase {
     $view = Views::getView('test_moderated_group_content');
     $view->setDisplay();
 
-    /** @var \Drupal\user\UserInterface$user1 */
+    /** @var UserInterface $user1 */
     $user1 = $this->container->get('current_user')->getAccount();
 
-    /** @var \Drupal\group\Entity\GroupInterface $group1 */
+    /** @var GroupInterface $group1 */
     $group1 = Group::create([
       'type' => 'default',
       'label' => $this->randomMachineName(),
     ]);
     $group1->save();
 
-    /** @var \Drupal\node\Entity\Node $node1 */
+    /** @var Node $node1 */
     Node::create([
       'type' => 'default',
       'title' => 'Node1',
@@ -164,7 +169,7 @@ class GroupContentRespectUnpublishedArgumentTest extends ViewsKernelTestBase {
     );
     $node1 = current($node1);
 
-    /** @var \Drupal\node\Entity\Node $node2 */
+    /** @var Node $node2 */
     Node::create([
       'type' => 'default',
       'title' => 'Node2',
@@ -189,7 +194,7 @@ class GroupContentRespectUnpublishedArgumentTest extends ViewsKernelTestBase {
     $user2->save();
     $this->container->get('current_user')->setAccount($user2);
 
-    /** @var \Drupal\node\Entity\Node $node3 */
+    /** @var Node $node3 */
     Node::create([
       'type' => 'default',
       'title' => 'Node3',
