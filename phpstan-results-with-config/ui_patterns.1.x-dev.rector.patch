diff --git a/modules/ui_patterns_ds/src/FieldTemplateProcessor.php b/modules/ui_patterns_ds/src/FieldTemplateProcessor.php
index 3f94679..0cd6385 100644
--- a/modules/ui_patterns_ds/src/FieldTemplateProcessor.php
+++ b/modules/ui_patterns_ds/src/FieldTemplateProcessor.php
@@ -68,7 +68,7 @@ class FieldTemplateProcessor implements FieldTemplateProcessorInterface {
   /**
    * Get field parent entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityBase
+   * @return ContentEntityBase
    *   Parent entity.
    */
   protected function getEntity() {
diff --git a/modules/ui_patterns_ds/src/Plugin/UiPatterns/Source/DsFieldTemplateSource.php b/modules/ui_patterns_ds/src/Plugin/UiPatterns/Source/DsFieldTemplateSource.php
index f391db1..a7e1e35 100644
--- a/modules/ui_patterns_ds/src/Plugin/UiPatterns/Source/DsFieldTemplateSource.php
+++ b/modules/ui_patterns_ds/src/Plugin/UiPatterns/Source/DsFieldTemplateSource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_ds\Plugin\UiPatterns\Source;
 
+use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\ui_patterns\Plugin\PatternSourceBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -24,7 +25,7 @@ class DsFieldTemplateSource extends PatternSourceBase implements ContainerFactor
   /**
    * Entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;
 
@@ -57,7 +58,7 @@ class DsFieldTemplateSource extends PatternSourceBase implements ContainerFactor
     $entity_type = $this->getContextProperty('entity_type');
     $bundle = $this->getContextProperty('bundle');
 
-    /** @var \Drupal\field\Entity\FieldConfig $field */
+    /** @var FieldConfig $field */
     $field = $this->fieldManager->getFieldDefinitions($entity_type, $bundle)[$field_name];
     $label = $field->getLabel();
 
diff --git a/modules/ui_patterns_ds/ui_patterns_ds.module b/modules/ui_patterns_ds/ui_patterns_ds.module
index 47d9178..bb6d539 100644
--- a/modules/ui_patterns_ds/ui_patterns_ds.module
+++ b/modules/ui_patterns_ds/ui_patterns_ds.module
@@ -32,7 +32,7 @@ function ui_patterns_ds_form_entity_view_display_edit_form_alter(&$form, FormSta
  *
  * @param array $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function ui_patterns_ds_field_overview_submit(array $form, FormStateInterface $form_state) {
diff --git a/modules/ui_patterns_field_group/src/Utility/EntityFinder.php b/modules/ui_patterns_field_group/src/Utility/EntityFinder.php
index 4e06b65..2468ebc 100644
--- a/modules/ui_patterns_field_group/src/Utility/EntityFinder.php
+++ b/modules/ui_patterns_field_group/src/Utility/EntityFinder.php
@@ -15,7 +15,7 @@ class EntityFinder {
    * @param array $fields
    *   Fields array.
    *
-   * @return \Drupal\Core\Entity\ContentEntityBase|null
+   * @return ContentEntityBase|null
    *   Entity object or NULL if none found.
    */
   public function findEntityFromFields(array $fields) {
diff --git a/modules/ui_patterns_field_group/tests/src/Unit/EntityFinderTest.php b/modules/ui_patterns_field_group/tests/src/Unit/EntityFinderTest.php
index 8259468..75a60c9 100644
--- a/modules/ui_patterns_field_group/tests/src/Unit/EntityFinderTest.php
+++ b/modules/ui_patterns_field_group/tests/src/Unit/EntityFinderTest.php
@@ -31,9 +31,7 @@ class EntityFinderTest extends UnitTestCase {
    *   Test data.
    */
   public function fieldsDataProvider() {
-    $good = $this->getMockBuilder(ContentEntityBase::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $good = $this->createMock(ContentEntityBase::class);
     $bad = new \stdClass();
 
     return [
diff --git a/modules/ui_patterns_field_group/ui_patterns_field_group.module b/modules/ui_patterns_field_group/ui_patterns_field_group.module
index 96c55e6..0b7fc0a 100644
--- a/modules/ui_patterns_field_group/ui_patterns_field_group.module
+++ b/modules/ui_patterns_field_group/ui_patterns_field_group.module
@@ -20,7 +20,7 @@ function ui_patterns_field_group_form_entity_view_display_edit_form_alter(&$form
  *
  * @param array $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function ui_patterns_field_group_field_group_field_overview_submit(array $form, FormStateInterface $form_state) {
diff --git a/modules/ui_patterns_layouts/src/Plugin/Layout/PatternLayout.php b/modules/ui_patterns_layouts/src/Plugin/Layout/PatternLayout.php
index 12ce3b1..2d3c7ad 100644
--- a/modules/ui_patterns_layouts/src/Plugin/Layout/PatternLayout.php
+++ b/modules/ui_patterns_layouts/src/Plugin/Layout/PatternLayout.php
@@ -22,21 +22,21 @@ class PatternLayout extends LayoutDefault implements PluginFormInterface, Contai
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler = NULL;
 
   /**
    * Pattern manager service.
    *
-   * @var \Drupal\ui_patterns\UiPatternsManager
+   * @var UiPatternsManager
    */
   protected $patternManager = NULL;
 
   /**
    * The element info.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;
 
@@ -47,13 +47,13 @@ class PatternLayout extends LayoutDefault implements PluginFormInterface, Contai
    *   A configuration array containing information about the plugin instance.
    * @param string $plugin_id
    *   The plugin_id for the plugin instance.
-   * @param \Drupal\Core\Layout\LayoutDefinition $plugin_definition
+   * @param LayoutDefinition $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   Element info object.
-   * @param \Drupal\ui_patterns\UiPatternsManager $pattern_manager
+   * @param UiPatternsManager $pattern_manager
    *   Pattern manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
    */
   public function __construct(array $configuration, $plugin_id, LayoutDefinition $plugin_definition, ElementInfoManagerInterface $element_info, UiPatternsManager $pattern_manager, ModuleHandlerInterface $module_handler) {
diff --git a/modules/ui_patterns_layouts/ui_patterns_layouts.api.php b/modules/ui_patterns_layouts/ui_patterns_layouts.api.php
index 455b718..6741c45 100644
--- a/modules/ui_patterns_layouts/ui_patterns_layouts.api.php
+++ b/modules/ui_patterns_layouts/ui_patterns_layouts.api.php
@@ -12,7 +12,7 @@ use Drupal\ui_patterns\Definition\PatternDefinition;
  *
  * @param array $form
  *   Pattern settings fieldset.
- * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+ * @param PatternDefinition $definition
  *   Pattern definition.
  * @param array $configuration
  *   Pattern configuration.
diff --git a/modules/ui_patterns_layouts/ui_patterns_layouts.install b/modules/ui_patterns_layouts/ui_patterns_layouts.install
index e510cd3..d1477ef 100644
--- a/modules/ui_patterns_layouts/ui_patterns_layouts.install
+++ b/modules/ui_patterns_layouts/ui_patterns_layouts.install
@@ -1,15 +1,15 @@
 <?php
 
+use Drupal\Core\Extension\ModuleInstaller;
 /**
  * @file
  * Contains install file.
  */
-
 /**
  * Uninstall layout_plugin and install layout_discovery.
  */
 function ui_patterns_layouts_update_8101() {
-  /** @var \Drupal\Core\Extension\ModuleInstaller $installer */
+  /** @var ModuleInstaller $installer */
   $installer = \Drupal::service('module_installer');
 
   if (\Drupal::moduleHandler()->moduleExists('layout_plugin')) {
diff --git a/modules/ui_patterns_layouts/ui_patterns_layouts.module b/modules/ui_patterns_layouts/ui_patterns_layouts.module
index 9aa74e5..6a5c585 100644
--- a/modules/ui_patterns_layouts/ui_patterns_layouts.module
+++ b/modules/ui_patterns_layouts/ui_patterns_layouts.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\ui_patterns\Definition\PatternDefinition;
 /**
  * @file
  * Contains module file.
@@ -16,8 +17,7 @@ use Drupal\field_layout\Display\EntityDisplayWithLayoutInterface;
  * Implements hook_layout_alter().
  */
 function ui_patterns_layouts_layout_alter(&$definitions) {
-  /** @var \Drupal\ui_patterns\Definition\PatternDefinition[] $pattern_definitions */
-
+  /** @var PatternDefinition[] $pattern_definitions */
   // @todo: Use layout deriver instead.
   // @link https://github.com/nuvoleweb/ui_patterns/issues/94
   foreach (UiPatterns::getPatternDefinitions() as $pattern_definition) {
@@ -43,7 +43,7 @@ function ui_patterns_layouts_layout_alter(&$definitions) {
 function ui_patterns_layouts_preprocess_ds_entity_view(&$variables) {
   if (isset($variables['content']['#type']) && $variables['content']['#type'] == 'pattern') {
 
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $variables['content']['#entity'];
 
     // Allow default context values to not override those exposed elsewhere.
diff --git a/modules/ui_patterns_library/src/Controller/PatternsLibraryController.php b/modules/ui_patterns_library/src/Controller/PatternsLibraryController.php
index e6494cb..1942600 100644
--- a/modules/ui_patterns_library/src/Controller/PatternsLibraryController.php
+++ b/modules/ui_patterns_library/src/Controller/PatternsLibraryController.php
@@ -17,7 +17,7 @@ class PatternsLibraryController extends ControllerBase {
   /**
    * Patterns manager service.
    *
-   * @var \Drupal\ui_patterns\UiPatternsManager
+   * @var UiPatternsManager
    */
   protected $patternsManager;
 
@@ -99,7 +99,7 @@ class PatternsLibraryController extends ControllerBase {
   /**
    * Get pattern preview render array, handling variants.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   Pattern definition object.
    *
    * @return array
diff --git a/modules/ui_patterns_library/src/Plugin/Deriver/LibraryDeriver.php b/modules/ui_patterns_library/src/Plugin/Deriver/LibraryDeriver.php
index 5601003..68badcc 100644
--- a/modules/ui_patterns_library/src/Plugin/Deriver/LibraryDeriver.php
+++ b/modules/ui_patterns_library/src/Plugin/Deriver/LibraryDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_library\Plugin\Deriver;
 
+use Drupal\Core\Extension\Extension;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\Core\Extension\ExtensionDiscovery;
 use Drupal\Core\File\FileSystemInterface;
@@ -43,21 +44,21 @@ class LibraryDeriver extends AbstractYamlPatternsDeriver {
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The module handler to invoke the alter hook.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Extension discovery class.
    *
-   * @var \Drupal\Core\Extension\ExtensionDiscovery
+   * @var ExtensionDiscovery
    */
   protected $extensionDiscovery;
 
@@ -80,19 +81,19 @@ class LibraryDeriver extends AbstractYamlPatternsDeriver {
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\TypedData\TypedDataManager $typed_data_manager
+   * @param TypedDataManager $typed_data_manager
    *   Typed data manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   File system service.
    * @param string $root
    *   Application root directory.
    * @param array $extensions
    *   File extensions.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler service.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   Theme handler service.
    */
   public function __construct($base_plugin_id, TypedDataManager $typed_data_manager, MessengerInterface $messenger, FileSystemInterface $file_system, $root, array $extensions, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler) {
@@ -205,7 +206,7 @@ class LibraryDeriver extends AbstractYamlPatternsDeriver {
    *   Array of extensions keyed by their path location.
    */
   protected function getExtensionLocations() {
-    /** @var \Drupal\Core\Extension\Extension[] $extensions */
+    /** @var Extension[] $extensions */
     if (empty($this->extensionLocations)) {
       $extensions = $this->extensionDiscovery->scan('theme') + $this->extensionDiscovery->scan('module');
       foreach ($extensions as $name => $extension) {
diff --git a/modules/ui_patterns_library/src/Plugin/UiPatterns/Pattern/LibraryPattern.php b/modules/ui_patterns_library/src/Plugin/UiPatterns/Pattern/LibraryPattern.php
index f57aad2..187c996 100644
--- a/modules/ui_patterns_library/src/Plugin/UiPatterns/Pattern/LibraryPattern.php
+++ b/modules/ui_patterns_library/src/Plugin/UiPatterns/Pattern/LibraryPattern.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_library\Plugin\UiPatterns\Pattern;
 
+use Drupal\Core\Extension\Extension;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\ui_patterns\Definition\PatternDefinition;
@@ -25,7 +26,7 @@ class LibraryPattern extends PatternBase {
   /**
    * Theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
@@ -65,14 +66,14 @@ class LibraryPattern extends PatternBase {
   /**
    * Process 'custom hook theme' definition property.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   Pattern definition array.
    *
    * @return array
    *   Processed hook definition portion.
    */
   protected function processCustomThemeHookProperty(PatternDefinition $definition) {
-    /** @var \Drupal\Core\Extension\Extension $module */
+    /** @var Extension $module */
     $return = [];
     if (!$definition->hasCustomThemeHook() && $this->moduleHandler->moduleExists($definition->getProvider())) {
       $module = $this->moduleHandler->getModule($definition->getProvider());
@@ -102,7 +103,7 @@ class LibraryPattern extends PatternBase {
   /**
    * Process 'template' definition property.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   Pattern definition array.
    *
    * @return array
diff --git a/modules/ui_patterns_library/tests/src/FunctionalJavascript/UiPatternsLibraryOverviewTest.php b/modules/ui_patterns_library/tests/src/FunctionalJavascript/UiPatternsLibraryOverviewTest.php
index 3188b00..6faa4d8 100644
--- a/modules/ui_patterns_library/tests/src/FunctionalJavascript/UiPatternsLibraryOverviewTest.php
+++ b/modules/ui_patterns_library/tests/src/FunctionalJavascript/UiPatternsLibraryOverviewTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ui_patterns_library\FunctionalJavascript;
 
+use Behat\Mink\Exception\ElementHtmlException;
 use Drupal\Core\Serialization\Yaml;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 
@@ -137,7 +138,7 @@ class UiPatternsLibraryOverviewTest extends WebDriverTestBase {
    * @param array $pattern
    *   Expected pattern.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    */
   protected function assertPatternFields($root, array $pattern) {
     $session = $this->assertSession();
@@ -197,7 +198,7 @@ class UiPatternsLibraryOverviewTest extends WebDriverTestBase {
    * @param string $name
    *   Pattern machine name.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    */
   protected function assertListLink($index, $label, $name) {
     $this->assertSession()->elementContains('css', "ul > li:nth-child($index) > a", $label);
diff --git a/modules/ui_patterns_views/src/Plugin/UiPatterns/Source/ViewsRowSource.php b/modules/ui_patterns_views/src/Plugin/UiPatterns/Source/ViewsRowSource.php
index 0ee4011..ee60903 100644
--- a/modules/ui_patterns_views/src/Plugin/UiPatterns/Source/ViewsRowSource.php
+++ b/modules/ui_patterns_views/src/Plugin/UiPatterns/Source/ViewsRowSource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_views\Plugin\UiPatterns\Source;
 
+use Drupal\views\ViewExecutable;
 use Drupal\ui_patterns\Plugin\PatternSourceBase;
 
 /**
@@ -23,7 +24,7 @@ class ViewsRowSource extends PatternSourceBase {
    */
   public function getSourceFields() {
     $sources = [];
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $this->getContextProperty('view');
     foreach ($view->display_handler->getFieldLabels() as $name => $label) {
       $sources[] = $this->getSourceField($name, $label);
diff --git a/modules/ui_patterns_views/src/Plugin/views/row/Pattern.php b/modules/ui_patterns_views/src/Plugin/views/row/Pattern.php
index 2a1a299..04064dd 100644
--- a/modules/ui_patterns_views/src/Plugin/views/row/Pattern.php
+++ b/modules/ui_patterns_views/src/Plugin/views/row/Pattern.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_views\Plugin\views\row;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\ui_patterns\Form\PatternDisplayFormTrait;
@@ -31,21 +32,21 @@ class Pattern extends Fields {
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler = NULL;
 
   /**
    * UI Patterns manager.
    *
-   * @var \Drupal\ui_patterns\UiPatternsManager
+   * @var UiPatternsManager
    */
   protected $patternsManager;
 
   /**
    * UI Patterns manager.
    *
-   * @var \Drupal\ui_patterns\UiPatternsSourceManager
+   * @var UiPatternsSourceManager
    */
   protected $sourceManager;
 
@@ -58,11 +59,11 @@ class Pattern extends Fields {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\ui_patterns\UiPatternsManager $patterns_manager
+   * @param UiPatternsManager $patterns_manager
    *   UI Patterns manager.
-   * @param \Drupal\ui_patterns\UiPatternsSourceManager $source_manager
+   * @param UiPatternsSourceManager $source_manager
    *   UI Patterns source manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UiPatternsManager $patterns_manager, UiPatternsSourceManager $source_manager, ModuleHandlerInterface $module_handler) {
@@ -132,9 +133,9 @@ class Pattern extends Fields {
   /**
    * Helper function: check for all conditions that make a field visible.
    *
-   * @param \Drupal\views\Plugin\views\field\FieldPluginBase $field
+   * @param FieldPluginBase $field
    *   Field object.
-   * @param \Drupal\Component\Render\MarkupInterface|null $field_output
+   * @param MarkupInterface|null $field_output
    *   Field output.
    *
    * @return bool
diff --git a/modules/ui_patterns_views/ui_patterns_views.module b/modules/ui_patterns_views/ui_patterns_views.module
index 0b2ad4c..c034eb0 100644
--- a/modules/ui_patterns_views/ui_patterns_views.module
+++ b/modules/ui_patterns_views/ui_patterns_views.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\ui_patterns_views\Plugin\views\row\Pattern;
 /**
  * @file
  * Contains module file.
@@ -27,8 +28,7 @@ function ui_patterns_views_theme() {
 function template_preprocess_pattern_views_row(array &$variables) {
   /** @var \Drupal\views\ResultRow $row */
   /** @var \Drupal\views\ViewExecutable $view */
-  /** @var \Drupal\ui_patterns_views\Plugin\views\row\Pattern $row_plugin */
-
+  /** @var Pattern $row_plugin */
   $fields = [];
   $view = $variables['view'];
   $row_plugin = $view->rowPlugin;
diff --git a/src/Annotation/UiPattern.php b/src/Annotation/UiPattern.php
index 203cce7..fb62637 100644
--- a/src/Annotation/UiPattern.php
+++ b/src/Annotation/UiPattern.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class UiPattern extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/UiPatternsSource.php b/src/Annotation/UiPatternsSource.php
index 1f02b88..f963925 100644
--- a/src/Annotation/UiPatternsSource.php
+++ b/src/Annotation/UiPatternsSource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class UiPatternsSource extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Definition/PatternDefinition.php b/src/Definition/PatternDefinition.php
index 07bf07c..57f8b6e 100644
--- a/src/Definition/PatternDefinition.php
+++ b/src/Definition/PatternDefinition.php
@@ -240,7 +240,7 @@ class PatternDefinition extends PluginDefinition implements DerivablePluginDefin
   /**
    * Getter.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinitionVariant[]
+   * @return PatternDefinitionVariant[]
    *   Property value.
    */
   public function getVariants() {
@@ -624,7 +624,7 @@ class PatternDefinition extends PluginDefinition implements DerivablePluginDefin
    * @param string $value
    *   Field value.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinitionField
+   * @return PatternDefinitionField
    *   Definition instance.
    */
   public function getFieldDefinition($name, $value) {
@@ -639,7 +639,7 @@ class PatternDefinition extends PluginDefinition implements DerivablePluginDefin
    * @param string $value
    *   Variant value.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinitionVariant
+   * @return PatternDefinitionVariant
    *   Definition instance.
    */
   public function getVariantDefinition($name, $value) {
diff --git a/src/Element/Pattern.php b/src/Element/Pattern.php
index e04ea99..1247382 100644
--- a/src/Element/Pattern.php
+++ b/src/Element/Pattern.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns\Element;
 
+use Drupal\ui_patterns\Exception\PatternRenderException;
 use Drupal\Core\Render\Element\RenderElement;
 use Drupal\Core\Template\Attribute;
 use Drupal\ui_patterns\UiPatterns;
@@ -154,7 +155,7 @@ class Pattern extends RenderElement {
         // This guarantees backward compatibility: single sources be simple.
         $element['#fields'][$name] = reset($field);
         if (count($field) > 1) {
-          /** @var \Drupal\ui_patterns\Element\PatternContext $context */
+          /** @var PatternContext $context */
           $context = $element['#context'];
           $context->setProperty('pattern', $element['#id']);
           $context->setProperty('field', $name);
@@ -180,7 +181,7 @@ class Pattern extends RenderElement {
    * @return array
    *   Render array.
    *
-   * @throws \Drupal\ui_patterns\Exception\PatternRenderException
+   * @throws PatternRenderException
    *    Throws an exception if no context type is specified.
    */
   public static function processContext(array $element) {
diff --git a/src/Element/PatternPreview.php b/src/Element/PatternPreview.php
index cbd15d9..1a68e5e 100644
--- a/src/Element/PatternPreview.php
+++ b/src/Element/PatternPreview.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns\Element;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Render\Markup;
 use Drupal\ui_patterns\UiPatterns;
 
@@ -50,7 +51,7 @@ class PatternPreview extends Pattern {
    * @param string|string[] $preview
    *   The preview, may be a string or an array.
    *
-   * @return array|\Drupal\Component\Render\MarkupInterface|string
+   * @return array|MarkupInterface|string
    *   Preview safe markup.
    */
   public static function getPreviewMarkup($preview) {
diff --git a/src/Form/PatternDisplayFormTrait.php b/src/Form/PatternDisplayFormTrait.php
index 3d95842..c149525 100644
--- a/src/Form/PatternDisplayFormTrait.php
+++ b/src/Form/PatternDisplayFormTrait.php
@@ -2,16 +2,21 @@
 
 namespace Drupal\ui_patterns\Form;
 
+use Drupal\ui_patterns\UiPatternsManager;
+use Drupal\ui_patterns\UiPatternsSourceManager;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\ui_patterns\Definition\PatternDefinition;
 use Drupal\Component\Utility\SortArray;
 use Drupal\ui_patterns\Plugin\PatternSourceBase;
 
 /**
  * Trait PatternDisplayFormTrait.
  *
- * @property \Drupal\ui_patterns\UiPatternsManager $patternsManager
- * @property \Drupal\ui_patterns\UiPatternsSourceManager $sourceManager
- * @property \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
- * @method \Drupal\Core\StringTranslation\TranslatableMarkup t($string, array $args = [], array $options = [])
+ * @property UiPatternsManager $patternsManager
+ * @property UiPatternsSourceManager $sourceManager
+ * @property ModuleHandlerInterface $moduleHandler
+ * @method TranslatableMarkup t($string, array $args = [], array $options = [])
  *
  * @package Drupal\ui_patterns\Form
  */
@@ -42,7 +47,7 @@ trait PatternDisplayFormTrait {
     ];
     $form['variants'] = ['#type' => 'container'];
 
-    /** @var \Drupal\ui_patterns\Definition\PatternDefinition $definition */
+    /** @var PatternDefinition $definition */
     foreach ($this->patternsManager->getDefinitions() as $pattern_id => $definition) {
       if ($definition->hasVariants()) {
         $form['variants'][$pattern_id] = [
@@ -89,7 +94,7 @@ trait PatternDisplayFormTrait {
    *   Mapping form.
    */
   public function getMappingForm($pattern_id, $tag, array $context, array $configuration) {
-    /** @var \Drupal\ui_patterns\Definition\PatternDefinition $pattern */
+    /** @var PatternDefinition $pattern */
     $pattern = $this->patternsManager->getDefinition($pattern_id);
 
     $elements = [
diff --git a/src/Plugin/Deriver/AbstractPatternsDeriver.php b/src/Plugin/Deriver/AbstractPatternsDeriver.php
index 152fb30..ac77493 100644
--- a/src/Plugin/Deriver/AbstractPatternsDeriver.php
+++ b/src/Plugin/Deriver/AbstractPatternsDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns\Plugin\Deriver;
 
+use Symfony\Component\Validator\ConstraintViolation;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -23,14 +24,14 @@ abstract class AbstractPatternsDeriver extends DeriverBase implements PatternsDe
   /**
    * Typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManager
+   * @var TypedDataManager
    */
   protected $typedDataManager;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -74,7 +75,7 @@ abstract class AbstractPatternsDeriver extends DeriverBase implements PatternsDe
    * @param array $definition
    *   Pattern definition array.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinition
+   * @return PatternDefinition
    *   Pattern definition object.
    */
   protected function getPatternDefinition(array $definition = []) {
@@ -84,7 +85,7 @@ abstract class AbstractPatternsDeriver extends DeriverBase implements PatternsDe
   /**
    * Validate pattern definition.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   Pattern definition.
    *
    * @return bool
@@ -94,7 +95,7 @@ abstract class AbstractPatternsDeriver extends DeriverBase implements PatternsDe
     $data_definition = PatternDataDefinition::create();
     $violations = $this->typedDataManager->create($data_definition, $definition->toArray())->validate();
     if ($violations->count()) {
-      /** @var \Symfony\Component\Validator\ConstraintViolation $violation */
+      /** @var ConstraintViolation $violation */
       $this->messenger->addError($this->t("Pattern ':id' is skipped because of the following validation error(s):", [':id' => $definition->id()]));
       foreach ($violations as $violation) {
         $message = $this->t('Validation error on ":id.:property": :message', [
diff --git a/src/Plugin/Deriver/AbstractYamlPatternsDeriver.php b/src/Plugin/Deriver/AbstractYamlPatternsDeriver.php
index 98db503..d141869 100644
--- a/src/Plugin/Deriver/AbstractYamlPatternsDeriver.php
+++ b/src/Plugin/Deriver/AbstractYamlPatternsDeriver.php
@@ -20,7 +20,7 @@ abstract class AbstractYamlPatternsDeriver extends AbstractPatternsDeriver imple
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
@@ -29,11 +29,11 @@ abstract class AbstractYamlPatternsDeriver extends AbstractPatternsDeriver imple
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\TypedData\TypedDataManager $typed_data_manager
+   * @param TypedDataManager $typed_data_manager
    *   Typed data manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   File system service.
    */
   public function __construct($base_plugin_id, TypedDataManager $typed_data_manager, MessengerInterface $messenger, FileSystemInterface $file_system) {
diff --git a/src/Plugin/Deriver/PatternsDeriverInterface.php b/src/Plugin/Deriver/PatternsDeriverInterface.php
index fe74332..68b1799 100644
--- a/src/Plugin/Deriver/PatternsDeriverInterface.php
+++ b/src/Plugin/Deriver/PatternsDeriverInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns\Plugin\Deriver;
 
+use Drupal\ui_patterns\Definition\PatternDefinition;
 /**
  * Interface PatternsDeriverInterface.
  *
@@ -12,7 +13,7 @@ interface PatternsDeriverInterface {
   /**
    * Get pattern definition objects.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinition[]
+   * @return PatternDefinition[]
    *   List of pattern definitions contained in the file.
    */
   public function getPatterns();
diff --git a/src/Plugin/PatternBase.php b/src/Plugin/PatternBase.php
index bd773d9..99e8ea4 100644
--- a/src/Plugin/PatternBase.php
+++ b/src/Plugin/PatternBase.php
@@ -25,7 +25,7 @@ abstract class PatternBase extends PluginBase implements PatternInterface, Conta
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -124,7 +124,7 @@ abstract class PatternBase extends PluginBase implements PatternInterface, Conta
   /**
    * Process 'use' definition property.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   Pattern definition array.
    *
    * @return array
@@ -144,7 +144,7 @@ abstract class PatternBase extends PluginBase implements PatternInterface, Conta
   /**
    * Process theme variables.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   Pattern definition array.
    *
    * @return array
diff --git a/src/Plugin/PatternSourceInterface.php b/src/Plugin/PatternSourceInterface.php
index a98016c..f9737e9 100644
--- a/src/Plugin/PatternSourceInterface.php
+++ b/src/Plugin/PatternSourceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns\Plugin;
 
+use Drupal\ui_patterns\Definition\PatternSourceField;
 /**
  * Defines an interface for UI Patterns Source plugins.
  */
@@ -15,7 +16,7 @@ interface PatternSourceInterface {
    * @param string $label
    *   Human readable label.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternSourceField
+   * @return PatternSourceField
    *   Source field instance.
    */
   public function getSourceField($name, $label);
@@ -23,7 +24,7 @@ interface PatternSourceInterface {
   /**
    * Return list of source fields.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternSourceField[]
+   * @return PatternSourceField[]
    *   List of source fields.
    */
   public function getSourceFields();
diff --git a/src/Plugin/UiPatterns/Source/FieldSource.php b/src/Plugin/UiPatterns/Source/FieldSource.php
index 7ff7301..ea92c75 100644
--- a/src/Plugin/UiPatterns/Source/FieldSource.php
+++ b/src/Plugin/UiPatterns/Source/FieldSource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns\Plugin\UiPatterns\Source;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\ui_patterns\Plugin\PatternSourceBase;
@@ -24,7 +25,7 @@ class FieldSource extends PatternSourceBase implements ContainerFactoryPluginInt
   /**
    * Entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
@@ -55,7 +56,7 @@ class FieldSource extends PatternSourceBase implements ContainerFactoryPluginInt
     $sources = [];
     $fields = $this->entityFieldManager->getFieldDefinitions($this->getContextProperty('entity_type'), $this->getContextProperty('entity_bundle'));
 
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+    /** @var FieldDefinitionInterface $field */
     foreach ($fields as $field) {
       if (!$this->getContextProperty('limit')) {
         $sources[] = $this->getSourceField($field->getName(), $field->getLabel());
diff --git a/src/TypedData/PatternDataDefinition.php b/src/TypedData/PatternDataDefinition.php
index 8270128..e296fef 100644
--- a/src/TypedData/PatternDataDefinition.php
+++ b/src/TypedData/PatternDataDefinition.php
@@ -57,7 +57,7 @@ class PatternDataDefinition extends MapDataDefinition {
   /**
    * Get valid machine name definition.
    *
-   * @return \Drupal\Core\TypedData\DataDefinition
+   * @return DataDefinition
    *   Data definition instance.
    */
   protected function getMachineNameDefinition() {
@@ -68,7 +68,7 @@ class PatternDataDefinition extends MapDataDefinition {
   /**
    * Get definition for 'field' property.
    *
-   * @return \Drupal\Core\TypedData\ListDataDefinition
+   * @return ListDataDefinition
    *   Data definition instance.
    */
   protected function getFieldsDefinition() {
@@ -83,7 +83,7 @@ class PatternDataDefinition extends MapDataDefinition {
   /**
    * Get definition for 'variant' property.
    *
-   * @return \Drupal\Core\TypedData\ListDataDefinition
+   * @return ListDataDefinition
    *   Data definition instance.
    */
   protected function getVariantsDefinition() {
diff --git a/src/UiPatterns.php b/src/UiPatterns.php
index c480b71..85aad25 100644
--- a/src/UiPatterns.php
+++ b/src/UiPatterns.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns;
 
+use Drupal\ui_patterns\Definition\PatternDefinition;
 /**
  * UI Patterns factory class.
  *
@@ -12,7 +13,7 @@ class UiPatterns {
   /**
    * Get pattern manager instance.
    *
-   * @return \Drupal\ui_patterns\UiPatternsManager
+   * @return UiPatternsManager
    *   UI Patterns manager instance.
    */
   public static function getManager() {
@@ -22,7 +23,7 @@ class UiPatterns {
   /**
    * Get pattern field sources manager instance.
    *
-   * @return \Drupal\ui_patterns\UiPatternsSourceManager
+   * @return UiPatternsSourceManager
    *   UI Patterns field sources manager instance.
    */
   public static function getSourceManager() {
@@ -35,7 +36,7 @@ class UiPatterns {
    * @param string $id
    *   Pattern ID.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinition
+   * @return PatternDefinition
    *   Pattern object instance.
    */
   public static function getPatternDefinition($id) {
@@ -45,7 +46,7 @@ class UiPatterns {
   /**
    * Get pattern definitions.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinition[]
+   * @return PatternDefinition[]
    *   Pattern object instance.
    */
   public static function getPatternDefinitions() {
diff --git a/src/UiPatternsManager.php b/src/UiPatternsManager.php
index dd4ea0c..b731f4b 100644
--- a/src/UiPatternsManager.php
+++ b/src/UiPatternsManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ui_patterns;
 
+use Drupal\ui_patterns\Definition\PatternDefinition;
+use Drupal\ui_patterns\Plugin\PatternBase;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -12,7 +14,7 @@ use Drupal\Core\Plugin\DefaultPluginManager;
 /**
  * Provides the default ui_patterns manager.
  *
- * @method \Drupal\ui_patterns\Definition\PatternDefinition getDefinition($plugin_id, $exception_on_invalid = TRUE)
+ * @method PatternDefinition getDefinition($plugin_id, $exception_on_invalid = true)
  */
 class UiPatternsManager extends DefaultPluginManager implements PluginManagerInterface {
 
@@ -21,7 +23,7 @@ class UiPatternsManager extends DefaultPluginManager implements PluginManagerInt
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
@@ -46,7 +48,7 @@ class UiPatternsManager extends DefaultPluginManager implements PluginManagerInt
   /**
    * Get pattern objects.
    *
-   * @return \Drupal\ui_patterns\Plugin\PatternBase[]
+   * @return PatternBase[]
    *   Pattern objects.
    */
   public function getPatterns() {
@@ -60,7 +62,7 @@ class UiPatternsManager extends DefaultPluginManager implements PluginManagerInt
   /**
    * Return pattern definitions.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinition[]
+   * @return PatternDefinition[]
    *   Pattern definitions.
    */
   public function getDefinitions() {
diff --git a/src/UiPatternsSourceManager.php b/src/UiPatternsSourceManager.php
index d9cccc6..9f66ed6 100644
--- a/src/UiPatternsSourceManager.php
+++ b/src/UiPatternsSourceManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ui_patterns;
 
+use Drupal\ui_patterns\Definition\PatternSourceField;
+use Drupal\ui_patterns\Plugin\PatternSourceInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -43,11 +45,11 @@ class UiPatternsSourceManager extends DefaultPluginManager {
    * @param array $context
    *   Plugin context.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternSourceField[]
+   * @return PatternSourceField[]
    *   List of source fields.
    */
   public function getFieldsByTag($tag, array $context) {
-    /** @var \Drupal\ui_patterns\Plugin\PatternSourceInterface $plugin */
+    /** @var PatternSourceInterface $plugin */
     $fields = [];
     foreach ($this->getDefinitionsByTag($tag) as $id => $definition) {
       $plugin = $this->createInstance($id, ['context' => $context]);
diff --git a/tests/src/Kernel/Plugin/PatternBaseTest.php b/tests/src/Kernel/Plugin/PatternBaseTest.php
index 5298b38..1441d64 100644
--- a/tests/src/Kernel/Plugin/PatternBaseTest.php
+++ b/tests/src/Kernel/Plugin/PatternBaseTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ui_patterns\Kernel\Plugin;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Tests\ui_patterns\Kernel\AbstractUiPatternsTest;
 use Drupal\ui_patterns\Plugin\PatternBase;
 
@@ -21,7 +22,7 @@ class PatternBaseTest extends AbstractUiPatternsTest {
    */
   public function testHookLibraryInfoBuild($actual, $expected) {
     $pattern = $this->getUiPatternBaseMock($actual);
-    /** @var \Drupal\ui_patterns\Plugin\PatternBase $pattern */
+    /** @var PatternBase $pattern */
     $libraries = $pattern->getLibraryDefinitions();
     $this->assertEquals($expected, $libraries);
   }
@@ -46,7 +47,7 @@ class PatternBaseTest extends AbstractUiPatternsTest {
    * @param array $methods
    *   List of methods to mock.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   Mock object.
    */
   protected function getUiPatternBaseMock(array $plugin_definition = [], array $methods = []) {
diff --git a/tests/src/Kernel/UiPatternsSourceManagerTest.php b/tests/src/Kernel/UiPatternsSourceManagerTest.php
index dd218a5..2f0ef10 100644
--- a/tests/src/Kernel/UiPatternsSourceManagerTest.php
+++ b/tests/src/Kernel/UiPatternsSourceManagerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\ui_patterns\Kernel;
 
+use Drupal\ui_patterns\UiPatternsSourceManager;
+use Drupal\ui_patterns\Plugin\PatternSourceBase;
 /**
  * @coversDefaultClass \Drupal\ui_patterns\UiPatternsSourceManager
  *
@@ -23,7 +25,7 @@ class UiPatternsSourceManagerTest extends AbstractUiPatternsTest {
    * @covers ::processDefinition
    */
   public function testProcessDefinition() {
-    /** @var \Drupal\ui_patterns\UiPatternsSourceManager $service */
+    /** @var UiPatternsSourceManager $service */
     $plugin_manager = \Drupal::service('plugin.manager.ui_patterns_source');
 
     $definitions = $plugin_manager->getDefinitions();
@@ -38,7 +40,7 @@ class UiPatternsSourceManagerTest extends AbstractUiPatternsTest {
       ['name' => 'field_5', 'label' => 'Field 5'],
     ];
 
-    /** @var \Drupal\ui_patterns\Plugin\PatternSourceBase $plugin */
+    /** @var PatternSourceBase $plugin */
     $plugin = $plugin_manager->createInstance('test_source');
     foreach ($plugin->getSourceFields() as $key => $field) {
       $this->assertEquals($expected[$key]['name'], $field->getFieldName());
diff --git a/ui_patterns.api.php b/ui_patterns.api.php
index 96b837f..a6083c7 100644
--- a/ui_patterns.api.php
+++ b/ui_patterns.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\ui_patterns\Definition\PatternDefinition;
 /**
  * @file
  * API file.
@@ -10,7 +11,7 @@ use Drupal\ui_patterns\Element\PatternContext;
 /**
  * Alter UI Patterns definitions.
  *
- * @param \Drupal\ui_patterns\Definition\PatternDefinition[] $definitions
+ * @param PatternDefinition[] $definitions
  *   Pattern definitions.
  *
  * @see \Drupal\ui_patterns\UiPatternsManager
diff --git a/ui_patterns.module b/ui_patterns.module
index d4d61cd..abb05db 100644
--- a/ui_patterns.module
+++ b/ui_patterns.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\ui_patterns\Plugin\PatternBase;
 /**
  * @file
  * Contains ui_patterns.module.
@@ -12,7 +13,7 @@ use Drupal\ui_patterns\Element\PatternContext;
  * Implements hook_theme().
  */
 function ui_patterns_theme() {
-  /** @var \Drupal\ui_patterns\Plugin\PatternBase $pattern */
+  /** @var PatternBase $pattern */
   $items = [
     'patterns_destination' => [
       'variables' => ['sources' => NULL, 'context' => NULL],
@@ -32,8 +33,7 @@ function ui_patterns_theme() {
  * Implements hook_library_info_build().
  */
 function ui_patterns_library_info_build() {
-  /** @var \Drupal\ui_patterns\Plugin\PatternBase $pattern */
-
+  /** @var PatternBase $pattern */
   $definitions = [];
   foreach (UiPatterns::getManager()->getPatterns() as $pattern) {
     $definitions += $pattern->getLibraryDefinitions();
