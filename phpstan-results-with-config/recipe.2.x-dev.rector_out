modules/contrib/recipe/modules/ingredient/ingredient.install
modules/contrib/recipe/modules/ingredient/ingredient.module
modules/contrib/recipe/modules/ingredient/ingredient.views.inc
modules/contrib/recipe/modules/ingredient/src/Entity/Ingredient.php
modules/contrib/recipe/modules/ingredient/src/Feeds/Target/Ingredient.php
modules/contrib/recipe/modules/ingredient/src/Form/IngredientDeleteForm.php
modules/contrib/recipe/modules/ingredient/src/Form/IngredientForm.php
modules/contrib/recipe/modules/ingredient/src/Form/IngredientSettingsForm.php
modules/contrib/recipe/modules/ingredient/src/IngredientAccessControlHandler.php
modules/contrib/recipe/modules/ingredient/src/IngredientBreadcrumbBuilder.php
modules/contrib/recipe/modules/ingredient/src/IngredientInterface.php
modules/contrib/recipe/modules/ingredient/src/IngredientListBuilder.php
modules/contrib/recipe/modules/ingredient/src/IngredientViewsData.php
modules/contrib/recipe/modules/ingredient/src/Plugin/EntityReferenceSelection/IngredientSelection.php
modules/contrib/recipe/modules/ingredient/src/Plugin/Field/FieldFormatter/IngredientFormatter.php
modules/contrib/recipe/modules/ingredient/src/Plugin/Field/FieldType/IngredientFieldItemList.php
modules/contrib/recipe/modules/ingredient/src/Plugin/Field/FieldType/IngredientItem.php
modules/contrib/recipe/modules/ingredient/src/Plugin/Field/FieldWidget/IngredientWidget.php
modules/contrib/recipe/modules/ingredient/src/Plugin/migrate/destination/EntityIngredient.php
modules/contrib/recipe/modules/ingredient/src/Plugin/migrate/field/IngredientReference.php
modules/contrib/recipe/modules/ingredient/src/Plugin/migrate/source/recipe1x/Ingredient.php
modules/contrib/recipe/modules/ingredient/src/Plugin/views/argument/Id.php
modules/contrib/recipe/modules/ingredient/src/Plugin/views/wizard/Ingredient.php
modules/contrib/recipe/modules/ingredient/src/Utility/IngredientQuantityUtility.php
modules/contrib/recipe/modules/ingredient/src/Utility/IngredientUnitFuzzymatch.php
modules/contrib/recipe/modules/ingredient/src/Utility/IngredientUnitUtility.php
modules/contrib/recipe/modules/ingredient/tests/fixtures/ingredient615.php
modules/contrib/recipe/modules/ingredient/tests/fixtures/ingredient713.php
modules/contrib/recipe/modules/ingredient/tests/fixtures/ingredient72.php
modules/contrib/recipe/modules/ingredient/tests/src/Functional/IngredientFieldTest.php
modules/contrib/recipe/modules/ingredient/tests/src/Functional/IngredientTest.php
modules/contrib/recipe/modules/ingredient/tests/src/Functional/IngredientTestTrait.php
modules/contrib/recipe/modules/ingredient/tests/src/Functional/IngredientTranslationTest.php
modules/contrib/recipe/modules/ingredient/tests/src/Kernel/IngredientAccessTest.php
modules/contrib/recipe/modules/ingredient/tests/src/Kernel/IngredientSettingsTest.php
modules/contrib/recipe/modules/ingredient/tests/src/Kernel/Migrate/recipe61/MigrateIngredient61Test.php
modules/contrib/recipe/modules/ingredient/tests/src/Kernel/Migrate/recipe61/MigrateIngredient61TestBase.php
modules/contrib/recipe/modules/ingredient/tests/src/Kernel/Migrate/recipe61/MigrateIngredientSettings61Test.php
modules/contrib/recipe/modules/ingredient/tests/src/Kernel/Migrate/recipe71/MigrateIngredient71Test.php
modules/contrib/recipe/modules/ingredient/tests/src/Kernel/Migrate/recipe71/MigrateIngredient71TestBase.php
modules/contrib/recipe/modules/ingredient/tests/src/Kernel/Migrate/recipe71/MigrateIngredientSettings71Test.php
modules/contrib/recipe/modules/ingredient/tests/src/Kernel/Migrate/recipe72/MigrateIngredient72Test.php
modules/contrib/recipe/recipe.module
modules/contrib/recipe/src/Plugin/Field/FieldFormatter/IngredientRecipeMLFormatter.php
modules/contrib/recipe/src/Plugin/Field/FieldFormatter/RecipeDurationFormatter.php
modules/contrib/recipe/src/Plugin/migrate/source/Recipe72.php
modules/contrib/recipe/src/Plugin/migrate/source/recipe61/Recipe61.php
modules/contrib/recipe/src/Plugin/migrate/source/recipe71/Recipe71.php
modules/contrib/recipe/src/Plugin/views/display/Recipe.php
modules/contrib/recipe/src/Plugin/views/style/PlainText.php
modules/contrib/recipe/src/Plugin/views/style/RecipeML.php
modules/contrib/recipe/src/RecipeBreadcrumbBuilder.php
modules/contrib/recipe/tests/fixtures/recipe61.php
modules/contrib/recipe/tests/fixtures/recipe71.php
modules/contrib/recipe/tests/fixtures/recipe72.php
modules/contrib/recipe/tests/src/Functional/PlainTextStyleTest.php
modules/contrib/recipe/tests/src/Functional/RecipeMlTest.php
modules/contrib/recipe/tests/src/Functional/RecipeNodeTest.php
modules/contrib/recipe/tests/src/Functional/RecipeSettingsTest.php
modules/contrib/recipe/tests/src/Functional/RecipeTestBase.php
modules/contrib/recipe/tests/src/Functional/RecipeTotalTimeConfigTest.php
modules/contrib/recipe/tests/src/Kernel/Migrate/recipe61/MigrateRecipe61Test.php
modules/contrib/recipe/tests/src/Kernel/Migrate/recipe61/MigrateRecipe61TestBase.php
modules/contrib/recipe/tests/src/Kernel/Migrate/recipe61/MigrateRecipeDisplaySettings61Test.php
modules/contrib/recipe/tests/src/Kernel/Migrate/recipe71/MigrateRecipe71Test.php
modules/contrib/recipe/tests/src/Kernel/Migrate/recipe71/MigrateRecipe71TestBase.php
modules/contrib/recipe/tests/src/Kernel/Migrate/recipe71/MigrateRecipeDisplaySettings71Test.php
modules/contrib/recipe/tests/src/Kernel/Migrate/recipe71/MigrateRecipeFieldSettings71Test.php
modules/contrib/recipe/tests/src/Kernel/Migrate/recipe72/MigrateRecipe72Test.php

29 files with changes
=====================

1) modules/contrib/recipe/tests/src/Kernel/Migrate/recipe71/MigrateRecipe71Test.php:50

    ---------- begin diff ----------
@@ @@
   /**
    * Asserts various aspects of a recipe.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The imported recipe node.
    * @param \stdClass $recipe
    *   A stdClass object with the following properties:
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/recipe/tests/src/Kernel/Migrate/recipe61/MigrateRecipe61Test.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * Asserts various aspects of a recipe.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The imported recipe node.
    * @param \stdClass $recipe
    *   A stdClass object with the following properties:
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/recipe/tests/src/Functional/RecipeTotalTimeConfigTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\recipe\Functional;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\user\UserInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
       'recipe_prep_time[0][value]' => $preptime,
       'recipe_cook_time[0][value]' => $cooktime,
     ];
+    $this->drupalGet('node/add/recipe');

     // Post the values to the node form.
-    $this->drupalPostForm('node/add/recipe', $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains(new FormattableMarkup('Recipe @title has been created.', ['@title' => $title]));

     // Check for the total time.
@@ @@
     $edit = [
       $field_name . '[0][value]' => $new_field_value,
     ];
-    $this->drupalPostForm('node/1/edit', $edit, 'Save');
+    $this->drupalGet('node/1/edit');
+    $this->submitForm($edit, 'Save');

     // Check for the new field's value.
     $this->drupalGet('node/1');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/recipe/tests/src/Functional/RecipeTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\recipe\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/recipe/tests/src/Functional/RecipeSettingsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\recipe\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
       'recipe_prep_time[0][value]' => $preptime,
       'recipe_cook_time[0][value]' => $cooktime,
     ];
+    $this->drupalGet('node/add/recipe');

     // Post the values to the node form.
-    $this->drupalPostForm('node/add/recipe', $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains(new FormattableMarkup('Recipe @title has been created.', ['@title' => $title]));

     // Check for the default pseudo-field labels.
@@ @@
       'recipe_total_time_label' => $total_time_label,
       'recipe_yield_label' => $yield_label,
     ];
+    $this->drupalGet('admin/structure/types/manage/recipe');

     // Post the values to the settings form.
-    $this->drupalPostForm('admin/structure/types/manage/recipe', $edit, 'Save content type');
+    $this->submitForm($edit, 'Save content type');
     $this->assertSession()->pageTextContains('The content type Recipe has been updated.');

     // Check the node display for the new labels.
@@ @@
       'recipe_total_time_label_display' => 'hidden',
       'recipe_yield_label_display' => 'hidden',
     ];
+    $this->drupalGet('admin/structure/types/manage/recipe');

     // Post the values to the settings form.
-    $this->drupalPostForm('admin/structure/types/manage/recipe', $edit, 'Save content type');
+    $this->submitForm($edit, 'Save content type');
     $this->assertSession()->pageTextContains('The content type Recipe has been updated.');

     // Check the node display for the new labels.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/recipe/tests/src/Functional/RecipeNodeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\recipe\Functional;

+use Drupal\Core\Entity\EntityDisplayRepository;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Url;

@@ @@
       'recipe_ingredient[0][target_id]' => $ing_0_name,
       'recipe_ingredient[0][note]' => $ing_0_note,
     ];
+    $this->drupalGet('node/add/recipe');

     // Post the values to the node form.
-    $this->drupalPostForm('node/add/recipe', $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains(new FormattableMarkup('Recipe @title has been created.', ['@title' => $title]));

     // Check the page for the recipe content.
@@ @@
       'recipe_prep_time[0][value]' => 1,
       'recipe_cook_time[0][value]' => 1,
     ];
-    $this->drupalPostForm('node/add/recipe', $edit, 'Save');
+    $this->drupalGet('node/add/recipe');
+    $this->submitForm($edit, 'Save');

     // Verify that the pseudo-fields are shown on the node view.
     $this->assertSession()->pageTextContains('Yield');
@@ @@
       'recipe_yield_unit[0][value]' => $this->randomMachineName(16),
       'recipe_cook_time[0][value]' => 1,
     ];
-    $this->drupalPostForm('node/add/recipe', $edit, 'Save');
+    $this->drupalGet('node/add/recipe');
+    $this->submitForm($edit, 'Save');

     // Verify that the pseudo-fields are not shown on the node view.
     $this->assertSession()->pageTextNotContains('Yield');
@@ @@
     $edit = [
       'title[0][value]' => $this->randomMachineName(16),
     ];
-    $this->drupalPostForm('node/add/recipe', $edit, 'Save');
+    $this->drupalGet('node/add/recipe');
+    $this->submitForm($edit, 'Save');

     // Verify that the pseudo-fields are not shown on the node view.
     $this->assertSession()->pageTextNotContains('Yield');
@@ @@
     // Hide the pseudo-fields.  Verify that they can't be found on the first
     // node that we created, on which it was already verified that they
     // appeared.
-    /** @var \Drupal\Core\Entity\EntityDisplayRepository $repository */
+    /** @var EntityDisplayRepository $repository */
     $repository = \Drupal::service('entity_display.repository');
     $repository->getViewDisplay('node', 'recipe', 'default')
       ->removeComponent('recipe_yield')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/recipe/tests/src/Functional/RecipeMlTest.php:47

    ---------- begin diff ----------
@@ @@
       'recipe_ingredient[0][target_id]' => $ing_0_name,
       'recipe_ingredient[0][note]' => $ing_0_note,
     ];
+    $this->drupalGet('node/add/recipe');

     // Post the values to the node form.
-    $this->drupalPostForm('node/add/recipe', $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains(new FormattableMarkup('Recipe @title has been created.', ['@title' => $title]));

     // Enable the RecipeML view.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/recipe/tests/src/Functional/PlainTextStyleTest.php:46

    ---------- begin diff ----------
@@ @@
       'recipe_ingredient[0][target_id]' => $ing_0_name,
       'recipe_ingredient[0][note]' => $ing_0_note,
     ];
+    $this->drupalGet('node/add/recipe');

     // Post the values to the node form.
-    $this->drupalPostForm('node/add/recipe', $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains(new FormattableMarkup('Recipe @title has been created.', ['@title' => $title]));

     // Enable the plain text view.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/recipe/src/Plugin/views/display/Recipe.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteProviderInterface $route_provider, StateInterface $state, RendererInterface $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/recipe/src/Plugin/migrate/source/recipe71/Recipe71.php:92

    ---------- begin diff ----------
@@ @@
   /**
    * Adapt our query for translations.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The generated query.
    */
   protected function handleTranslations(SelectInterface $query) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/recipe/src/Plugin/migrate/source/recipe61/Recipe61.php:106

    ---------- begin diff ----------
@@ @@
   /**
    * Adapt our query for translations.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The generated query.
    */
   protected function handleTranslations(SelectInterface $query) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/recipe/src/Plugin/migrate/source/Recipe72.php:68

    ---------- begin diff ----------
@@ @@
   /**
    * Adapt our query for translations.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The generated query.
    */
   protected function handleTranslations(SelectInterface $query) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/recipe/modules/ingredient/tests/src/Kernel/Migrate/recipe71/MigrateIngredient71Test.php:35

    ---------- begin diff ----------
@@ @@
    *   The ingredient name.
    */
   protected function assertEntity($id, $label) {
-    /** @var \Drupal\ingredient\IngredientInterface $ingredient */
+    /** @var IngredientInterface $ingredient */
     $ingredient = Ingredient::load($id);
     $this->assertTrue($ingredient instanceof IngredientInterface);
     $this->assertSame($label, $ingredient->label());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/recipe/modules/ingredient/tests/src/Kernel/Migrate/recipe61/MigrateIngredient61Test.php:35

    ---------- begin diff ----------
@@ @@
    *   The ingredient name.
    */
   protected function assertEntity($id, $label) {
-    /** @var \Drupal\ingredient\IngredientInterface $ingredient */
+    /** @var IngredientInterface $ingredient */
     $ingredient = Ingredient::load($id);
     $this->assertTrue($ingredient instanceof IngredientInterface);
     $this->assertSame($label, $ingredient->label());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/recipe/modules/ingredient/tests/src/Kernel/IngredientSettingsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ingredient\Kernel;

+use Drupal\Core\Config\Config;
 use Drupal\ingredient\Entity\Ingredient;
 use Drupal\KernelTests\KernelTestBase;

@@ @@
    * Tests the ingredient name normalization setting.
    */
   public function testIngredientNormalization() {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->container->get('config.factory')->getEditable('ingredient.settings');

     // Verify that ingredient normalization is off by default.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/recipe/modules/ingredient/tests/src/Kernel/IngredientAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ingredient\Kernel;

+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\ingredient\Entity\Ingredient;
@@ @@
   /**
    * Access handler.
    *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $accessHandler;

@@ @@
    *   ingredient and account, with each key as the name of an operation (e.g.
    *   'view', 'delete') and each value a Boolean indicating whether access to
    *   that operation should be granted.
-   * @param \Drupal\ingredient\IngredientInterface $ingredient
+   * @param IngredientInterface $ingredient
    *   The ingredient object to check.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account for which to check access.
    */
   public function assertIngredientAccess(array $ops, IngredientInterface $ingredient, AccountInterface $account) {
@@ @@
    *
    * @param bool $result
    *   Whether access should be granted or not.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account for which to check access.
    * @param string|null $langcode
    *   (optional) The language code indicating which translation of the
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/recipe/modules/ingredient/tests/src/Functional/IngredientTranslationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ingredient\Functional;

+use Drupal\content_translation\ContentTranslationManagerInterface;
+use Drupal\Core\Routing\RouteBuilderInterface;
+use Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface;
+use Drupal\node\NodeInterface;
+use Drupal\ingredient\IngredientInterface;
+use Drupal\user\UserInterface;
 use Drupal\ingredient\Entity\Ingredient;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * The content translation manager service.
    *
-   * @var \Drupal\content_translation\ContentTranslationManagerInterface
+   * @var ContentTranslationManagerInterface
    */
   protected $contentTranslationManager;

@@ @@
   /**
    * The router builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;

@@ @@
   /**
    * The entity definition update manager service.
    *
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @var EntityDefinitionUpdateManagerInterface
    */
   protected $entityDefinitionUpdateManager;

@@ @@
   /**
    * The node to check the translated value on.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * The ingredient that should be translated.
    *
-   * @var \Drupal\ingredient\IngredientInterface
+   * @var IngredientInterface
    */
   protected $ingredient;

@@ @@
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Gets the content translation manager service.
    *
-   * @return \Drupal\content_translation\ContentTranslationManagerInterface
+   * @return ContentTranslationManagerInterface
    *   The content translation manager service.
    */
   protected function getContentTranslationManager() {
@@ @@
   /**
    * Gets the router builder service.
    *
-   * @return \Drupal\Core\Routing\RouteBuilderInterface
+   * @return RouteBuilderInterface
    *   The router builder service.
    */
   protected function getRouterBuilder() {
@@ @@
   /**
    * Gets the entity definition update manager service.
    *
-   * @return \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @return EntityDefinitionUpdateManagerInterface
    *   The entity definition update manager service.
    */
   protected function getEntityDefinitionUpdateManager() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/recipe/modules/ingredient/tests/src/Functional/IngredientTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ingredient\Functional;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Gets the entity type manager service.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   protected function getEntityTypeManager() {
@@ @@
    * @param array $display_settings
    *   A list of display settings that will be added to the display defaults.
    *
-   * @return \Drupal\Core\Field\FieldStorageDefinitionInterface
+   * @return FieldStorageDefinitionInterface
    *   The ingredient field's storage definition.
    */
   protected function createIngredientField(array $storage_settings = [], array $field_settings = [], array $widget_settings = [], array $display_settings = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/recipe/modules/ingredient/tests/src/Functional/IngredientTest.php:77

    ---------- begin diff ----------
@@ @@
     $edit = [
       'name[0][value]' => 'test name',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Entity listed.
     $this->assertSession()->linkExists('Edit');
@@ @@

     // Confirm deletion.
     $this->assertSession()->linkExists('Cancel');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');

     // Back to list, must be empty.
     $this->assertSession()->pageTextNotContains('test name');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/recipe/modules/ingredient/tests/src/Functional/IngredientFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ingredient\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
         'field_ingredient[0][target_id]' => $ingredient['name'],
         'field_ingredient[0][note]' => $ingredient['note'],
       ];
-      $this->drupalPostForm('node/add/test_bundle', $edit, 'Save');
+      $this->drupalGet('node/add/test_bundle');
+      $this->submitForm($edit, 'Save');

       // Check for the node title to verify redirection to the node view.
       $this->assertSession()->pageTextContains($title);
@@ @@

     $this->drupalGet('node/add/test_bundle');
     // Post the values to the node form.
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Verify that the ingredient name is not linked to its entity.
     $this->assertSession()->pageTextContains('4 T');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/recipe/modules/ingredient/src/Utility/IngredientUnitUtility.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ingredient\Utility;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;

 /**
@@ @@
   /**
    * The ingredient.units configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $ingredientUnitConfig;

@@ @@
   /**
    * Constructs a new IngredientUnitUtility object.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config.factory service.
    */
   public function __construct(ConfigFactory $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/recipe/modules/ingredient/src/Utility/IngredientUnitFuzzymatch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ingredient\Utility;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;

 /**
@@ @@
   /**
    * The ingredient.units configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $ingredientUnitConfig;

@@ @@
   /**
    * Constructs a new IngredientUnitUtility object.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config.factory service.
    */
   public function __construct(ConfigFactory $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/recipe/modules/ingredient/src/Plugin/Field/FieldWidget/IngredientWidget.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The ingredient.unit service.
    *
-   * @var \Drupal\ingredient\Utility\IngredientUnitUtility
+   * @var IngredientUnitUtility
    */
   protected $ingredientUnitUtility;

@@ @@
   /**
    * The ingredient.quantity service.
    *
-   * @var \Drupal\ingredient\Utility\IngredientQuantityUtility
+   * @var IngredientQuantityUtility
    */
   protected $ingredientQuantityUtility;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\ingredient\Utility\IngredientUnitUtility $ingredient_unit_utility
+   * @param IngredientUnitUtility $ingredient_unit_utility
    *   The ingredient.unit service.
-   * @param \Drupal\ingredient\Utility\IngredientQuantityUtility $ingredient_quantity_utility
+   * @param IngredientQuantityUtility $ingredient_quantity_utility
    *   The ingredient.quantity service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, IngredientUnitUtility $ingredient_unit_utility, IngredientQuantityUtility $ingredient_quantity_utility) {
@@ @@
    *
    * @param array $element
    *   The ingredient field's form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validate(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/recipe/modules/ingredient/src/Plugin/Field/FieldFormatter/IngredientFormatter.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The ingredient.unit service.
    *
-   * @var \Drupal\ingredient\Utility\IngredientUnitUtility
+   * @var IngredientUnitUtility
    */
   protected $ingredientUnitUtility;

@@ @@
   /**
    * The ingredient.quantity service.
    *
-   * @var \Drupal\ingredient\Utility\IngredientQuantityUtility
+   * @var IngredientQuantityUtility
    */
   protected $ingredientQuantityUtility;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\ingredient\Utility\IngredientUnitUtility $ingredient_unit_utility
+   * @param IngredientUnitUtility $ingredient_unit_utility
    *   The ingredient.unit service.
-   * @param \Drupal\ingredient\Utility\IngredientQuantityUtility $ingredient_quantity_utility
+   * @param IngredientQuantityUtility $ingredient_quantity_utility
    *   The ingredient.quantity service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, IngredientUnitUtility $ingredient_unit_utility, IngredientQuantityUtility $ingredient_quantity_utility) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/recipe/modules/ingredient/src/IngredientListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new NodeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/recipe/modules/ingredient/src/Form/IngredientSettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new IngredientSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/recipe/modules/ingredient/src/Form/IngredientDeleteForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The ingredient logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannel;

@@ @@
   /**
    * Constructs a new IngredientDeleteForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger_channel
+   * @param LoggerChannelInterface $logger_channel
    *   The logger service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, LoggerChannelInterface $logger_channel) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/recipe/modules/ingredient/ingredient.views.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 /**
  * @file
  * Provides views data for ingredient.module.
@@ @@

   $entity_type_manager = \Drupal::entityTypeManager();
   $entity_type_id = $field_storage->getTargetEntityTypeId();
-  /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+  /** @var DefaultTableMapping $table_mapping */
   $table_mapping = $entity_type_manager->getStorage($entity_type_id)->getTableMapping();

   foreach ($data as $table_name => $table_data) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


29) modules/contrib/recipe/modules/ingredient/ingredient.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ingredient\IngredientInterface;
 /**
  * @file
  * Contains basic functions for the Ingredient module.
@@ @@
 function template_preprocess_ingredient(array &$variables) {
   $variables['view_mode'] = $variables['elements']['#view_mode'];
   $variables['ingredient'] = $variables['elements']['#ingredient'];
-  /** @var \Drupal\ingredient\IngredientInterface $ingredient */
+  /** @var IngredientInterface $ingredient */
   $ingredient = $variables['ingredient'];

   $variables['url'] = $ingredient->toUrl()->toString();
@@ @@
 /**
  * Returns whether the current page is the page of the passed-in ingredient.
  *
- * @param \Drupal\ingredient\Entity\Ingredient $ingredient
+ * @param Ingredient $ingredient
  *   A ingredient entity.
  *
  * @return int|false
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/recipe/modules/ingredient/src/Feeds/Target/Ingredient.ph
         p" file, due to:                                                       
         "Analyze error: "Class Drupal\feeds\Feeds\Target\EntityReference not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

