modules/contrib/lang_dropdown/lang_dropdown.module
modules/contrib/lang_dropdown/src/Form/LanguageDropdownForm.php
modules/contrib/lang_dropdown/src/Plugin/Block/LanguageDropdownBlock.php
modules/contrib/lang_dropdown/src/Plugin/Derivative/LanguageDropdownBlock.php
modules/contrib/lang_dropdown/tests/src/Functional/LanguageSwitchingTest.php

5 files with changes
====================

1) modules/contrib/lang_dropdown/tests/src/Functional/LanguageSwitchingTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create and log in user.
@@ @@
     $edit = [
       'predefined_langcode' => 'fr',
     ];
-    $this->drupalPostForm('admin/config/regional/language/add', $edit, t('Add language'));
+    $this->drupalGet('admin/config/regional/language/add');
+    $this->submitForm($edit, t('Add language'));

     // Enable session language detection and selection.
     $edit = [
@@ @@
       'language_interface[enabled][language-url]' => FALSE,
       'language_interface[enabled][language-session]' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/regional/language/detection', $edit, t('Save settings'));
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm($edit, t('Save settings'));

     // Enable the language switching block.
     $this->placeBlock('language_dropdown_block:' . LanguageInterface::TYPE_INTERFACE, [
@@ @@
     // Go to the homepage.
     $this->drupalGet('');
     // Make sure default language selected is English.
-    $this->assertEqual(1, count($this->cssSelect('#edit-lang-dropdown-select option[selected=selected]:contains(English)')));
+    $this->assertEquals(1, count($this->cssSelect('#edit-lang-dropdown-select option[selected=selected]:contains(English)')));
     // Go to the homepage for French language.
     $this->drupalGet('', ['query' => ['language' => 'fr']]);
     // Make sure default language selected is French.
-    $this->assertEqual(1, count($this->cssSelect('#edit-lang-dropdown-select option[selected=selected]:contains(French)')));
+    $this->assertEquals(1, count($this->cssSelect('#edit-lang-dropdown-select option[selected=selected]:contains(French)')));
     // @todo Add Ajax testing of language switching.
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/lang_dropdown/src/Plugin/Derivative/LanguageDropdownBlock.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs new LanguageDropdownBlock.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(LanguageManagerInterface $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/lang_dropdown/src/Plugin/Block/LanguageDropdownBlock.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscovery
+   * @var LibraryDiscovery
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Asset\LibraryDiscovery $library_discovery
+   * @param LibraryDiscovery $library_discovery
    *   The library discovery service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user account.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LanguageManagerInterface $language_manager, PathMatcherInterface $path_matcher, ModuleHandlerInterface $module_handler, LibraryDiscovery $library_discovery, AccountProxyInterface $current_user, FormBuilderInterface $form_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/lang_dropdown/src/Form/LanguageDropdownForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lang_dropdown\Form;

+use Drupal\Core\Language\LanguageInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The request object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a \Drupal\lang_dropdown\Form\LanguageDropdownForm object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack object.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(LanguageManagerInterface $language_manager, RequestStack $request_stack, PathMatcherInterface $path_matcher, RouteMatchInterface $route_match, ModuleHandlerInterface $module_handler) {
@@ @@

     // Iterate on $languages to build the needed options for the select element.
     foreach ($this->languages as $lang_code => $lang_options) {
-      /** @var \Drupal\Core\Language\LanguageInterface $language */
+      /** @var LanguageInterface $language */
       $language = $lang_options['language'];

       // There is no translation for this language
@@ @@

       // Identify selected language.
       if (isset($lang_options['url'])) {
-        /** @var \Drupal\Core\Url $url */
+        /** @var Url $url */
         $url = $lang_options['url'];
         if ($url->isRouted()) {
           $route_name = $url->getRouteName();
@@ @@
       if (isset($this->settings['widget']) && $this->moduleHandler->moduleExists('languageicons')) {
         $languageicons_config = $this->configFactory()->get('languageicons.settings');
         $languageicons_path = $languageicons_config->get('path');
-        $js_settings['languageicons'][$lang_code] = file_create_url(str_replace('*', $lang_code, $languageicons_path));
+        $js_settings['languageicons'][$lang_code] = \Drupal::service('file_url_generator')->generateAbsoluteString(str_replace('*', $lang_code, $languageicons_path));
       }
     }

@@ @@

     // Icon for the selected language.
     if (!$this->settings['widget'] && $this->moduleHandler->moduleExists('languageicons')) {
-      /** @var \Drupal\Core\Language\LanguageInterface $language */
+      /** @var LanguageInterface $language */
       $language = $this->languages[$selected_option]['language'];
       $selected_option_language_icon = [
         '#theme' => 'languageicons_link_content',
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/lang_dropdown/lang_dropdown.module:75

    ---------- begin diff ----------
@@ @@
  * Helper function to handle msdropdown skins data.
  */
 function _lang_dropdown_get_msdropdown_skins() {
-  $module_path = drupal_get_path('module', 'lang_dropdown');
+  $module_path = \Drupal::service('extension.list.module')->getPath('lang_dropdown');
   return [
     'ldsSkin' => [
       'text' => t('Default skin'),
@@ @@
  * Helper function to handle ddSlick skins data.
  */
 function _lang_dropdown_get_ddslick_skins() {
-  $module_path = drupal_get_path('module', 'lang_dropdown');
+  $module_path = \Drupal::service('extension.list.module')->getPath('lang_dropdown');
   return [
     'ddsDefault' => [
       'text' => t('Default skin'),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

