modules/contrib/photo_albums/photo_albums.install
modules/contrib/photo_albums/photo_albums.module
modules/contrib/photo_albums/src/EventSubscriber/ProtectedAlbumSubscriber.php
modules/contrib/photo_albums/src/Form/ProtectedAlbumLoginForm.php
modules/contrib/photo_albums/src/Plugin/Field/FieldFormatter/PhotoAlbumThumbnailFormatter.php
modules/contrib/photo_albums/src/TwoWayHashService.php

3 files with changes
====================

1) modules/contrib/photo_albums/src/Plugin/Field/FieldFormatter/PhotoAlbumThumbnailFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photo_albums\Plugin\Field\FieldFormatter;

+use Drupal\Core\Url;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\image\ImageStyleStorageInterface $image_style_storage
+   * @param ImageStyleStorageInterface $image_style_storage
    *   The image style entity storage handler.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, ImageStyleStorageInterface $image_style_storage, RendererInterface $renderer) {
@@ @@

     $image_style_setting = $this->getSetting('image_style');

-    /** @var \Drupal\media\MediaInterface[] $media_items */
+    /** @var MediaInterface[] $media_items */
     foreach ($media_items as $delta => $media) {
       $elements[$delta] = [
         '#theme' => 'image_formatter',
@@ @@
   /**
    * Get the URL for the media thumbnail.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media item.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity that the field belongs to.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The URL object for the media item or null if we don't want to add
    *   a link.
    */
@@ @@
   /**
    * Get the protected status of a photo album entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity that the field belongs to.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/photo_albums/src/EventSubscriber/ProtectedAlbumSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photo_albums\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\PageCache\ResponsePolicy\KillSwitch;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Routing\RedirectDestination;
@@ @@
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\RequestStack;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManager
+   * @var AliasManager
    */
   protected $aliasManager;

@@ @@
   /**
    * The account proxy service.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * The current path stack service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestination
+   * @var RedirectDestination
    */
   protected $destination;

@@ @@
   /**
    * The request stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * A policy evaluating to static::DENY when the kill switch was triggered.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $pageCacheKillSwitch;

@@ @@
   /**
    * Constructs a new ProtectedPagesSubscriber.
    *
-   * @param \Drupal\path_alias\AliasManager $aliasManager
+   * @param AliasManager $aliasManager
    *   The path alias manager.
-   * @param \Drupal\Core\Session\AccountProxy $currentUser
+   * @param AccountProxy $currentUser
    *   The account proxy service.
-   * @param \Drupal\Core\Path\CurrentPathStack $currentPathStack
+   * @param CurrentPathStack $currentPathStack
    *   The current path stack service.
-   * @param \Drupal\Core\Routing\RedirectDestination $destination
+   * @param RedirectDestination $destination
    *   The redirect destination service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack service.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $pageCacheKillSwitch
+   * @param KillSwitch $pageCacheKillSwitch
    *   The cache kill switch service.
    */
   public function __construct(AliasManager $aliasManager, AccountProxy $currentUser, CurrentPathStack $currentPathStack, RedirectDestination $destination, RequestStack $requestStack, KillSwitch $pageCacheKillSwitch) {
@@ @@
   /**
    * Redirects user to protected page login screen.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function checkProtectedAlbum(FilterResponseEvent $event) {
+  public function checkProtectedAlbum(ResponseEvent $event) {
     if ($this->currentUser->hasPermission('bypass album password protection')) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/photo_albums/photo_albums.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\node\NodeInterface;
 /**
  * @file
  * Contains photo_albums.module.
@@ @@
  *
  * { @inheritdoc }
  */
-function photo_albums_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
-  if ($entity instanceof \Drupal\node\NodeInterface && $entity->bundle() == 'album') {
+function photo_albums_node_presave(EntityInterface $entity) {
+  if ($entity instanceof NodeInterface && $entity->bundle() == 'album') {
     $nid = $entity->id();
     $reset = $entity->field_reset_password->value;
     if ($reset) {
@@ @@
  * {@inheritdoc}
  */
 function photo_albums_node_delete(EntityInterface $entity) {
-  if ($entity instanceof \Drupal\node\NodeInterface && $entity->bundle() == 'album') {
+  if ($entity instanceof NodeInterface && $entity->bundle() == 'album') {
     $results = \Drupal::database()->delete('photo_albums_protected')
       ->condition('nid', $entity->id(), '=')
       ->execute();
@@ @@
  * Helper function for insert and update nodes of type album.
  */
 function _photo_albums_insert_update(EntityInterface $entity) {
-  if ($entity instanceof \Drupal\node\NodeInterface && $entity->bundle() == 'album') {
+  if ($entity instanceof NodeInterface && $entity->bundle() == 'album') {

     $nid = $entity->id();
     $protected = $entity->field_protect_album->value;
@@ @@
     }

     if (!count($results) && $protected) {
-      $pass = user_password(8);
+      $pass = \Drupal::service('password_generator')->generate(8);

       // use the two-way hashing service to hash the password
       $tw_hash = \Drupal::service('photo_albums.twowayhash');
@@ @@
     }

     if (isset($variables['attributes']['protected']) && $variables['attributes']['protected'] == '1' && !$cookie_pass_ok) {
-      $variables['uri'] = drupal_get_path('module', 'photo_albums') . '/images/protected.png';
+      $variables['uri'] = \Drupal::service('extension.list.module')->getPath('photo_albums') . '/images/protected.png';
     }
   }

   if (!empty($variables['uri'])) {
-    $variables['attributes']['src'] = file_url_transform_relative(file_create_url($variables['uri']));
+    $variables['attributes']['src'] = \Drupal::service('file_url_generator')->generateString($variables['uri']);
   }
   // Generate a srcset attribute conforming to the spec at
   // http://www.w3.org/html/wg/drafts/html/master/embedded-content.html#attr-img-srcset
@@ @@
     $srcset = [];
     foreach ($variables['srcset'] as $src) {
       // URI is mandatory.
-      $source = file_url_transform_relative(file_create_url($src['uri']));
+      $source = \Drupal::service('file_url_generator')->generateString($src['uri']);
       if (isset($src['width']) && !empty($src['width'])) {
         $source .= ' ' . $src['width'];
       }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileUrlTransformRelativeRector
 * UserPasswordRector
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

