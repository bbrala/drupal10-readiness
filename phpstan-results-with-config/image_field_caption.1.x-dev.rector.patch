diff --git a/image_field_caption.module b/image_field_caption.module
index f0848d1..8a9b755 100644
--- a/image_field_caption.module
+++ b/image_field_caption.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\field\Entity\FieldConfig;
+use Drupal\Core\Field\FieldItemList;
 /**
  * @file
  * Provides a caption textarea for image fields.
@@ -27,7 +29,7 @@ function image_field_caption_field_info_alter(&$info) {
  * Implements hook_field_widget_form_alter().
  */
 function image_field_caption_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
-  /** @var \Drupal\field\Entity\FieldConfig $field */
+  /** @var FieldConfig $field */
   $field = $context['items']->getFieldDefinition();
   // If the current field is an image field.
   if ($field->getType() == 'image') {
@@ -159,7 +161,7 @@ function image_field_caption_entity_storage_load(array $entities, $entity_type_i
       if (in_array($entity->bundle(), $imageCaption->list('bundle'))) {
         $needToSave = FALSE;
 
-        /** @var \Drupal\Core\Field\FieldItemList $field */
+        /** @var FieldItemList $field */
         foreach ($entity->getFields() as $fieldName => $field) {
           $values = $entity->get($fieldName)->getValue();
           foreach ($values as $delta => $value) {
@@ -309,7 +311,7 @@ if (($entity instanceof FieldableEntityInterface)) {
 /**
  * Determines the image fields on an entity.
  *
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   An entity whose fields to analyze.
  *
  * @return array
diff --git a/src/ImageCaptionStorage.php b/src/ImageCaptionStorage.php
index d2fdd81..7dc0c29 100644
--- a/src/ImageCaptionStorage.php
+++ b/src/ImageCaptionStorage.php
@@ -37,7 +37,7 @@ class ImageCaptionStorage {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -58,9 +58,9 @@ class ImageCaptionStorage {
   /**
    * AbstractService constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The Cache Backend.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The Database.
    */
   public function __construct(
