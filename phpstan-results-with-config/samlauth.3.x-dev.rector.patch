diff --git a/modules/samlauth_user_fields/src/EventSubscriber/UserFieldsEventSubscriber.php b/modules/samlauth_user_fields/src/EventSubscriber/UserFieldsEventSubscriber.php
index 3c29b97..4915761 100644
--- a/modules/samlauth_user_fields/src/EventSubscriber/UserFieldsEventSubscriber.php
+++ b/modules/samlauth_user_fields/src/EventSubscriber/UserFieldsEventSubscriber.php
@@ -33,41 +33,41 @@ class UserFieldsEventSubscriber implements EventSubscriberInterface {
    * configuration, which is actually a little more efficient than storing the
    * config object in a variable in this class.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * UserFieldsEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed data manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerInterface $logger, TypedDataManagerInterface $typed_data_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -89,7 +89,7 @@ class UserFieldsEventSubscriber implements EventSubscriberInterface {
   /**
    * Tries to link an existing user based on SAML attribute values.
    *
-   * @param \Drupal\samlauth\Event\SamlauthUserLinkEvent $event
+   * @param SamlauthUserLinkEvent $event
    *   The event being dispatched.
    */
   public function onUserLink(SamlauthUserLinkEvent $event) {
@@ -224,7 +224,7 @@ class UserFieldsEventSubscriber implements EventSubscriberInterface {
   /**
    * Saves configured SAML attribute values into user fields.
    *
-   * @param \Drupal\samlauth\Event\SamlauthUserSyncEvent $event
+   * @param SamlauthUserSyncEvent $event
    *   The event being dispatched.
    */
   public function onUserSync(SamlauthUserSyncEvent $event) {
@@ -361,7 +361,7 @@ class UserFieldsEventSubscriber implements EventSubscriberInterface {
    *
    * @param mixed $input_value
    *   The value to (maybe) update / write into the user account field.
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The Drupal user account.
    * @param string $account_field_name
    *   The field name in the user account.
@@ -456,7 +456,7 @@ class UserFieldsEventSubscriber implements EventSubscriberInterface {
    *
    * @param mixed $input_value
    *   The value to (maybe) update / write into the user account field.
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The Drupal user account.
    * @param string $account_field_name
    *   The field name in the user account.
@@ -502,7 +502,7 @@ class UserFieldsEventSubscriber implements EventSubscriberInterface {
   /**
    * Extracts proper message + arguments from a violation.
    *
-   * @param \Symfony\Component\Validator\ConstraintViolation $violation
+   * @param ConstraintViolation $violation
    *   A violation object containing a message.
    *
    * @return array
diff --git a/modules/samlauth_user_fields/src/Form/SamlauthMappingDeleteForm.php b/modules/samlauth_user_fields/src/Form/SamlauthMappingDeleteForm.php
index a01fd32..f7a15cd 100644
--- a/modules/samlauth_user_fields/src/Form/SamlauthMappingDeleteForm.php
+++ b/modules/samlauth_user_fields/src/Form/SamlauthMappingDeleteForm.php
@@ -17,7 +17,7 @@ class SamlauthMappingDeleteForm extends ConfirmFormBase {
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -38,7 +38,7 @@ class SamlauthMappingDeleteForm extends ConfirmFormBase {
   /**
    * SamlauthMappingDeleteForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
@@ -66,7 +66,7 @@ class SamlauthMappingDeleteForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param int $mapping_id
    *   (optional) The numeric ID of the mapping.
diff --git a/modules/samlauth_user_fields/src/Form/SamlauthMappingEditForm.php b/modules/samlauth_user_fields/src/Form/SamlauthMappingEditForm.php
index 66dc424..5dcee6c 100644
--- a/modules/samlauth_user_fields/src/Form/SamlauthMappingEditForm.php
+++ b/modules/samlauth_user_fields/src/Form/SamlauthMappingEditForm.php
@@ -57,14 +57,14 @@ class SamlauthMappingEditForm extends FormBase {
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * SamlauthMappingEditForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
@@ -92,7 +92,7 @@ class SamlauthMappingEditForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param int $mapping_id
    *   (optional) The numeric ID of the mapping.
@@ -247,7 +247,7 @@ class SamlauthMappingEditForm extends FormBase {
    * This starts off as a private method with some hardcoded logic because I'm
    * not sure how this will evolve and if it will be general enough.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   The field to check.
    *
    * @return array
diff --git a/modules/samlauth_user_fields/src/Form/SamlauthMappingListForm.php b/modules/samlauth_user_fields/src/Form/SamlauthMappingListForm.php
index 553b4f4..638b2cc 100644
--- a/modules/samlauth_user_fields/src/Form/SamlauthMappingListForm.php
+++ b/modules/samlauth_user_fields/src/Form/SamlauthMappingListForm.php
@@ -20,16 +20,16 @@ class SamlauthMappingListForm extends ConfigFormBase {
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * SamlauthMappingListForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityFieldManagerInterface $entity_field_manager) {
@@ -66,7 +66,7 @@ class SamlauthMappingListForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param int $mapping_id
    *   (optional) The numeric ID of the mapping.
@@ -198,7 +198,7 @@ class SamlauthMappingListForm extends ConfigFormBase {
         $output['table']['#rows'][$id] = [
           $mapping['attribute_name'],
           $user_field,
-          render($operations),
+          \Drupal::service('renderer')->render($operations),
         ];
         if ($linking_enabled) {
           array_splice($output['table']['#rows'][$id], 2, 0, [$mapping['link_user_order'] ?? '']);
diff --git a/modules/samlauth_user_roles/src/EventSubscriber/UserRolesEventSubscriber.php b/modules/samlauth_user_roles/src/EventSubscriber/UserRolesEventSubscriber.php
index 4076da7..8edc931 100644
--- a/modules/samlauth_user_roles/src/EventSubscriber/UserRolesEventSubscriber.php
+++ b/modules/samlauth_user_roles/src/EventSubscriber/UserRolesEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\samlauth_user_roles\EventSubscriber;
 
+use Drupal\user\Entity\Role;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\samlauth\Event\SamlauthEvents;
@@ -27,32 +28,32 @@ class UserRolesEventSubscriber implements EventSubscriberInterface {
    * configuration, which (despite its convoluted-ness) is actually a little
    * more efficient than storing the config object in a variable in this class.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs a new SamlauthUsersyncEventSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerInterface $logger, EntityTypeManagerInterface $entity_type_manager) {
@@ -72,7 +73,7 @@ class UserRolesEventSubscriber implements EventSubscriberInterface {
   /**
    * Assigns/unassigns roles as needed during user sync.
    *
-   * @param \Drupal\samlauth\Event\SamlauthUserSyncEvent $event
+   * @param SamlauthUserSyncEvent $event
    *   The event being dispatched.
    */
   public function onUserSync(SamlauthUserSyncEvent $event) {
@@ -81,7 +82,7 @@ class UserRolesEventSubscriber implements EventSubscriberInterface {
       return;
     }
 
-    /** @var \Drupal\user\Entity\Role[] $valid_roles */
+    /** @var Role[] $valid_roles */
     $valid_roles = $this->entityTypeManager->getStorage('user_role')->loadMultiple();
     unset($valid_roles[UserInterface::ANONYMOUS_ROLE]);
     unset($valid_roles[UserInterface::AUTHENTICATED_ROLE]);
@@ -232,7 +233,7 @@ class UserRolesEventSubscriber implements EventSubscriberInterface {
    *
    * @param array $role_names
    *   The role machine names to convert.
-   * @param \Drupal\user\Entity\Role[] $valid_roles_by_name
+   * @param Role[] $valid_roles_by_name
    *   Array with all roles valid for this purpose.
    * @param string $config_log_name
    *   Name to use for warning log if applicable.
diff --git a/modules/samlauth_user_roles/src/Form/SamlauthRoleMappingForm.php b/modules/samlauth_user_roles/src/Form/SamlauthRoleMappingForm.php
index 57df794..e876d3a 100644
--- a/modules/samlauth_user_roles/src/Form/SamlauthRoleMappingForm.php
+++ b/modules/samlauth_user_roles/src/Form/SamlauthRoleMappingForm.php
@@ -18,16 +18,16 @@ class SamlauthRoleMappingForm extends ConfigFormBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructor for \Drupal\samlauth\Form\SamlauthUserMappingForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity field manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/samlauth.install b/samlauth.install
index 2fa0ef8..dce6841 100644
--- a/samlauth.install
+++ b/samlauth.install
@@ -47,7 +47,7 @@ function samlauth_update_8302() {
   foreach ($existing_roles as $role) {
     // Prefer the config value. Always check for / revoke the permission,
     // though we can't really have both the permission and $config_value set.
-    /** @var \Drupal\user\Entity\Role $role */
+    /** @var Role $role */
     if ($role->id() !== RoleInterface::ANONYMOUS_ID
         && (isset($old_config_value) ? $old_config_value : $role->hasPermission('bypass saml login'))) {
       $config_role_names[] = $role->id();
diff --git a/samlauth.module b/samlauth.module
index 728a017..3aa7b3b 100644
--- a/samlauth.module
+++ b/samlauth.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\user\Entity\User;
+use Drupal\externalauth\AuthmapInterface;
+use Drupal\samlauth\SamlService;
 /**
  * @file
  * Allows users to authenticate against an external SAML identity provider.
@@ -34,13 +37,13 @@ function samlauth_form_user_form_alter(&$form, FormStateInterface $form_state) {
   // Only affect SAML-linked users without a role that is allowed to log in
   // locally.
   $current_uid = \Drupal::currentUser()->id();
-  /** @var \Drupal\user\Entity\User $account */
+  /** @var User $account */
   $account = $form_state->getBuildInfo()['callback_object']->getEntity();
   if ($current_uid && $account->id() == $current_uid && !array_intersect(
       $account->getRoles(),
       \Drupal::config(SamlController::CONFIG_OBJECT_NAME)->get('drupal_login_roles') ?? []
     )) {
-    /** @var \Drupal\externalauth\AuthmapInterface $authmap */
+    /** @var AuthmapInterface $authmap */
     $authmap = \Drupal::service('externalauth.authmap');
     if ($authmap->get($account->id(), 'samlauth')) {
       // Hide the change password field, because the password has no function
@@ -101,7 +104,7 @@ function samlauth_check_saml_user(&$form, FormStateInterface $form_state) {
     // element may contain a user name or e-mail address; the latter happens
     // for the password reset form, and for the login form if certain contrib
     // modules are installed.
-    /** @var \Drupal\user\Entity\User $account */
+    /** @var User $account */
     $account = user_load_by_name($form_state->getValue('name'));
     if (!$account) {
       $account = user_load_by_mail($form_state->getValue('name'));
@@ -113,7 +116,7 @@ function samlauth_check_saml_user(&$form, FormStateInterface $form_state) {
       $account->getRoles(),
       \Drupal::config(SamlController::CONFIG_OBJECT_NAME)->get('drupal_login_roles') ?? []
     )) {
-      /** @var \Drupal\externalauth\AuthmapInterface $authmap */
+      /** @var AuthmapInterface $authmap */
       $authmap = \Drupal::service('externalauth.authmap');
       if ($authmap->get($account->id(), 'samlauth')) {
         // Are we allowed to tell the user why they cannot use this form, or
@@ -174,7 +177,7 @@ function samlauth_user_presave(UserInterface $account) {
     // SamlService and construct a OneLogin\Saml2\Auth object on every first
     // user save in a request, which is not ideal but not too wasteful since
     // user saves don't happen often.
-    /** @var \Drupal\samlauth\SamlService $saml_service */
+    /** @var SamlService $saml_service */
     $saml_service = \Drupal::service('samlauth.saml');
     if ($saml_service->getAttributeByConfig('user_name_attribute')) {
       // This code assumes that the first save operation of a new user is
diff --git a/src/Controller/ExecuteInRenderContextTrait.php b/src/Controller/ExecuteInRenderContextTrait.php
index aa545cb..74b3394 100644
--- a/src/Controller/ExecuteInRenderContextTrait.php
+++ b/src/Controller/ExecuteInRenderContextTrait.php
@@ -167,7 +167,7 @@ trait ExecuteInRenderContextTrait {
    *   which will log and display the message (unless overridden). Suggested
    *   value: "<front>".
    *
-   * @return \Drupal\Core\Routing\TrustedRedirectResponse
+   * @return TrustedRedirectResponse
    *   A response object.
    *
    * @see ExecuteInRenderContextTrait::executeInRenderContext()
@@ -251,7 +251,7 @@ trait ExecuteInRenderContextTrait {
    * @param string $while
    *   (Optional) description of when the error was encountered.
    *
-   * @return \Drupal\Core\Url|string
+   * @return Url|string
    *   URL to redirect to.
    */
   protected function handleExceptionInRenderContext(\Exception $exception, $default_redirect_route, $while = '') {
diff --git a/src/Controller/SamlController.php b/src/Controller/SamlController.php
index 8742614..dd7f2c8 100644
--- a/src/Controller/SamlController.php
+++ b/src/Controller/SamlController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\samlauth\Controller;
 
+use Drupal\Core\Routing\TrustedRedirectResponse;
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Cache\CacheableResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -39,70 +41,70 @@ class SamlController extends ControllerBase {
   /**
    * The samlauth SAML service.
    *
-   * @var \Drupal\samlauth\SamlService
+   * @var SamlService
    */
   protected $saml;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The PathValidator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * SamlController constructor.
    *
-   * @param \Drupal\samlauth\SamlService $saml
+   * @param SamlService $saml
    *   The samlauth SAML service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The PathValidator service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The Renderer service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(SamlService $saml, RequestStack $request_stack, ConfigFactoryInterface $config_factory, PathValidatorInterface $path_validator, RendererInterface $renderer, Token $token, MessengerInterface $messenger, LoggerInterface $logger) {
@@ -139,7 +141,7 @@ class SamlController extends ControllerBase {
    * service on the IdP, which should be redirecting back to our ACS endpoint
    * after authenticating the user.
    *
-   * @return \Drupal\Core\Routing\TrustedRedirectResponse
+   * @return TrustedRedirectResponse
    *   The HTTP response to send back.
    */
   public function login() {
@@ -162,7 +164,7 @@ class SamlController extends ControllerBase {
    * back to our SLS endpoint (possibly first logging out from other systems
    * first). We do usually log out before redirecting, though.
    *
-   * @return \Drupal\Core\Routing\TrustedRedirectResponse
+   * @return TrustedRedirectResponse
    *   The HTTP response to send back.
    */
   public function logout() {
@@ -180,7 +182,7 @@ class SamlController extends ControllerBase {
   /**
    * Displays service provider metadata XML for iDP autoconfiguration.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The HTTP response to send back.
    */
   public function metadata() {
@@ -254,7 +256,7 @@ class SamlController extends ControllerBase {
    * This is usually the second step in the authentication flow; the Login
    * service on the IdP should redirect (or: execute a POST request to) here.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The HTTP response to send back.
    */
   public function acs() {
@@ -278,7 +280,7 @@ class SamlController extends ControllerBase {
    * This is usually the second step in the logout flow; the SLS service on the
    * IdP should redirect here.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The HTTP response to send back.
    */
   public function sls() {
@@ -295,7 +297,7 @@ class SamlController extends ControllerBase {
   /**
    * Redirects to the 'Change Password' service.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The HTTP response to send back.
    */
   public function changepw() {
@@ -326,7 +328,7 @@ class SamlController extends ControllerBase {
    *   parameter), or NULL if no destination parameter was given. This value is
    *   tuned to what login() / logout() expect for an input argument.
    *
-   * @throws \Drupal\samlauth\UserVisibleException
+   * @throws UserVisibleException
    *   If the destination is disallowed.
    */
   protected function getUrlFromDestination() {
@@ -362,7 +364,7 @@ class SamlController extends ControllerBase {
    *   (Optional) TRUE if the RelayState parameter in the current request
    *   should not be used.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to redirect to.
    */
   protected function getRedirectUrlAfterProcessing($after_acs = FALSE, $ignore_relay_state = FALSE) {
diff --git a/src/Element/MultiValue.php b/src/Element/MultiValue.php
index 859a020..746c68a 100644
--- a/src/Element/MultiValue.php
+++ b/src/Element/MultiValue.php
@@ -166,7 +166,7 @@ class MultiValue extends FormElement {
    *
    * @param array $element
    *   The element being processed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    * @param array $complete_form
    *   The complete form.
@@ -268,7 +268,7 @@ class MultiValue extends FormElement {
    *
    * @param array $element
    *   The element being processed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    * @param array $complete_form
    *   The complete form.
@@ -357,7 +357,7 @@ class MultiValue extends FormElement {
    *
    * @param array $form
    *   The build form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @see \Drupal\Core\Field\WidgetBase::addMoreSubmit()
@@ -383,7 +383,7 @@ class MultiValue extends FormElement {
    *
    * @param array $form
    *   The build form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array|null
@@ -470,7 +470,7 @@ class MultiValue extends FormElement {
    *   The array of #parents where the element lives in the form.
    * @param string $element_name
    *   The field name.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -492,7 +492,7 @@ class MultiValue extends FormElement {
    *   The array of #parents where the element lives in the form.
    * @param string $element_name
    *   The element name.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $field_state
    *   The array of data to store. See getElementState() for the structure and
diff --git a/src/Event/SamlauthUserLinkEvent.php b/src/Event/SamlauthUserLinkEvent.php
index ea91f1c..95d64a7 100644
--- a/src/Event/SamlauthUserLinkEvent.php
+++ b/src/Event/SamlauthUserLinkEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\samlauth\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Wraps a samlauth user link event for event listeners.
@@ -13,7 +13,7 @@ class SamlauthUserLinkEvent extends Event {
   /**
    * The Drupal user account to link.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;
 
@@ -39,7 +39,7 @@ class SamlauthUserLinkEvent extends Event {
   /**
    * Gets the Drupal user account to link.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The Drupal user account.
    */
   public function getLinkedAccount() {
@@ -49,7 +49,7 @@ class SamlauthUserLinkEvent extends Event {
   /**
    * Sets the Drupal user account to link.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The Drupal user account.
    */
   public function setLinkedAccount(UserInterface $account) {
diff --git a/src/Event/SamlauthUserSyncEvent.php b/src/Event/SamlauthUserSyncEvent.php
index 970928e..006f09d 100644
--- a/src/Event/SamlauthUserSyncEvent.php
+++ b/src/Event/SamlauthUserSyncEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\samlauth\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Wraps a samlauth user sync event for event listeners.
@@ -13,7 +13,7 @@ class SamlauthUserSyncEvent extends Event {
   /**
    * The Drupal user account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;
 
@@ -43,7 +43,7 @@ class SamlauthUserSyncEvent extends Event {
   /**
    * Constructs a samlauth user sync event object.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The Drupal user account.
    * @param array $attributes
    *   The SAML attributes received from the IdP.
@@ -59,7 +59,7 @@ class SamlauthUserSyncEvent extends Event {
   /**
    * Gets the Drupal user entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The Drupal user account.
    */
   public function getAccount() {
@@ -69,7 +69,7 @@ class SamlauthUserSyncEvent extends Event {
   /**
    * Sets the altered Drupal user entity.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The Drupal user account.
    */
   public function setAccount(UserInterface $account) {
diff --git a/src/EventSubscriber/AccessDeniedSubscriber.php b/src/EventSubscriber/AccessDeniedSubscriber.php
index 0e99c97..df0164f 100644
--- a/src/EventSubscriber/AccessDeniedSubscriber.php
+++ b/src/EventSubscriber/AccessDeniedSubscriber.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\samlauth\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Routing\RouteMatch;
 use Drupal\Core\Url;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Event\KernelEvent;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\HttpKernel\Exception\TooManyRequestsHttpException;
@@ -32,14 +32,14 @@ class AccessDeniedSubscriber implements EventSubscriberInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * Constructs a new redirect subscriber.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    */
   public function __construct(AccountInterface $account) {
@@ -49,11 +49,11 @@ class AccessDeniedSubscriber implements EventSubscriberInterface {
   /**
    * Redirects users when access is denied.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The event to process.
    */
-  public function onException(GetResponseForExceptionEvent $event) {
-    $exception = $event->getException();
+  public function onException(ExceptionEvent $event) {
+    $exception = $event->getThrowable();
     // If our own routes threw a TooManyRequestsHttpException, don't spend time
     // redirecting to another page and rendering that. (Rendering would need to
     // be done from scratch because the page needs to include includes the
@@ -82,7 +82,7 @@ class AccessDeniedSubscriber implements EventSubscriberInterface {
   /**
    * Gets the current route name.
    *
-   * @param \Symfony\Component\HttpKernel\Event\KernelEvent $event
+   * @param KernelEvent $event
    *   The event we're subscribed to.
    *
    * @return string
diff --git a/src/EventSubscriber/UserSyncEventSubscriber.php b/src/EventSubscriber/UserSyncEventSubscriber.php
index 439651a..691ce8b 100644
--- a/src/EventSubscriber/UserSyncEventSubscriber.php
+++ b/src/EventSubscriber/UserSyncEventSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\samlauth\EventSubscriber;
 
+use Drupal\Component\Utility\EmailValidatorInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -32,55 +34,55 @@ class UserSyncEventSubscriber implements EventSubscriberInterface {
   /**
    * The EntityTypeManager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * A configuration object containing samlauth settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a new SamlauthUserSyncSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager service.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed data manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator. Note the code defines it as
    *   \Egulias\EmailValidator\EmailValidator for the time being; reason:
    *   - The default service used to be \Egulias\EmailValidator\EmailValidator,
@@ -92,11 +94,11 @@ class UserSyncEventSubscriber implements EventSubscriberInterface {
    *   We already typehint the interface in comments, otherwise the call to
    *   isValid() will appear to contain errors. But we don't want to mandate
    *   Core >= 8.7 just yet, so the 'use' statement is still not updated.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, TypedDataManagerInterface $typed_data_manager, EmailValidator $email_validator, LoggerInterface $logger, MessengerInterface $messenger, TranslationInterface $translation) {
@@ -119,7 +121,7 @@ class UserSyncEventSubscriber implements EventSubscriberInterface {
   /**
    * Performs actions to synchronize users with SAML data on login.
    *
-   * @param \Drupal\samlauth\Event\SamlauthUserSyncEvent $event
+   * @param SamlauthUserSyncEvent $event
    *   The event.
    */
   public function onUserSync(SamlauthUserSyncEvent $event) {
@@ -224,7 +226,7 @@ class UserSyncEventSubscriber implements EventSubscriberInterface {
    * @param string $config_key
    *   A key in the module's configuration, containing the name of a SAML
    *   attribute.
-   * @param \Drupal\samlauth\Event\SamlauthUserSyncEvent $event
+   * @param SamlauthUserSyncEvent $event
    *   The event, which holds the attributes from the SAML response.
    *
    * @return mixed|null
diff --git a/src/Form/SamlauthAuthmapDeleteForm.php b/src/Form/SamlauthAuthmapDeleteForm.php
index b309372..705de9a 100644
--- a/src/Form/SamlauthAuthmapDeleteForm.php
+++ b/src/Form/SamlauthAuthmapDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\samlauth\Form;
 
+use Drupal\user\Entity\User;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -19,14 +20,14 @@ class SamlauthAuthmapDeleteForm extends ConfirmFormBase {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The EntityTypeManager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -50,9 +51,9 @@ class SamlauthAuthmapDeleteForm extends ConfirmFormBase {
   /**
    * Constructs a router for Drupal with access check and upcasting.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to get authmap entries.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager service.
    */
   public function __construct(Connection $connection, EntityTypeManagerInterface $entity_type_manager) {
@@ -72,7 +73,7 @@ class SamlauthAuthmapDeleteForm extends ConfirmFormBase {
    */
   public function getQuestion() {
     if (!empty($this->authmapEntry['uid'])) {
-      /** @var \Drupal\user\Entity\User $user */
+      /** @var User $user */
       $user = $this->entityTypeManager->getStorage('user')->load($this->authmapEntry['uid']);
     }
     return $this->t('Are you sure you want to delete the link between login ID %id and Drupal user %user?', [
diff --git a/src/Form/SamlauthConfigureForm.php b/src/Form/SamlauthConfigureForm.php
index e0105f6..fcb252a 100644
--- a/src/Form/SamlauthConfigureForm.php
+++ b/src/Form/SamlauthConfigureForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\samlauth\Form;
 
+use Drupal\user\Entity\Role;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -24,21 +25,21 @@ class SamlauthConfigureForm extends ConfigFormBase {
   /**
    * The EntityTypeManager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The PathValidator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
@@ -57,13 +58,13 @@ class SamlauthConfigureForm extends ConfigFormBase {
   /**
    * Constructs a \Drupal\samlauth\Form\SamlauthConfigureForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager service.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The PathValidator service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    * @param \Drupal\key\KeyRepositoryInterface|null $key_repository
    *   The token service.
@@ -146,7 +147,7 @@ class SamlauthConfigureForm extends ConfigFormBase {
       '#default_value' => $config->get('logout_different_user'),
     ];
 
-    /** @var \Drupal\user\Entity\Role[] $roles */
+    /** @var Role[] $roles */
     $roles = $this->entityTypeManager->getStorage('user_role')->loadMultiple();
     unset($roles[UserInterface::ANONYMOUS_ROLE]);
     $role_options = [];
diff --git a/src/Plugin/Menu/LoginLogoutMenuLink.php b/src/Plugin/Menu/LoginLogoutMenuLink.php
index ff27e15..5e26c53 100644
--- a/src/Plugin/Menu/LoginLogoutMenuLink.php
+++ b/src/Plugin/Menu/LoginLogoutMenuLink.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\samlauth\Plugin\Menu;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Menu\StaticMenuLinkOverridesInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -16,7 +17,7 @@ class LoginLogoutMenuLink extends DrupalLoginLogoutMenuLink {
   /**
    * A configuration object containing samlauth settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
@@ -29,11 +30,11 @@ class LoginLogoutMenuLink extends DrupalLoginLogoutMenuLink {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Menu\StaticMenuLinkOverridesInterface $static_override
+   * @param StaticMenuLinkOverridesInterface $static_override
    *   The static override storage.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, StaticMenuLinkOverridesInterface $static_override, AccountInterface $current_user, ConfigFactoryInterface $config_factory) {
diff --git a/src/SamlService.php b/src/SamlService.php
index 5d4f090..7edb91f 100644
--- a/src/SamlService.php
+++ b/src/SamlService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\samlauth;
 
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -43,84 +44,84 @@ class SamlService {
   /**
    * Auth objects (usually 0 or 1) representing the current request state.
    *
-   * @var \OneLogin\Saml2\Auth[]
+   * @var Auth[]
    */
   protected $samlAuth;
 
   /**
    * The ExternalAuth service.
    *
-   * @var \Drupal\externalauth\ExternalAuth
+   * @var ExternalAuth
    */
   protected $externalAuth;
 
   /**
    * The Authmap service.
    *
-   * @var \Drupal\externalauth\Authmap
+   * @var Authmap
    */
   protected $authmap;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The EntityTypeManager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Private store for SAML session data.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $privateTempStore;
 
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;
 
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -138,29 +139,29 @@ class SamlService {
   /**
    * Constructs a new SamlService.
    *
-   * @param \Drupal\externalauth\ExternalAuth $external_auth
+   * @param ExternalAuth $external_auth
    *   The ExternalAuth service.
-   * @param \Drupal\externalauth\Authmap $authmap
+   * @param Authmap $authmap
    *   The Authmap service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   A temp data store factory object.
-   * @param \Drupal\Core\Flood\FloodInterface $flood
+   * @param FloodInterface $flood
    *   The flood service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation service.
    */
   public function __construct(ExternalAuth $external_auth, Authmap $authmap, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, LoggerInterface $logger, EventDispatcherInterface $event_dispatcher, RequestStack $request_stack, PrivateTempStoreFactory $temp_store_factory, FloodInterface $flood, AccountInterface $current_user, MessengerInterface $messenger, TranslationInterface $translation) {
@@ -428,7 +429,7 @@ class SamlService {
    *
    * @param string $unique_id
    *   The unique ID (attribute value) contained in the SAML response.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The existing user account derived from the unique ID, if any.
    */
   protected function doLogin($unique_id, AccountInterface $account = NULL) {
@@ -441,7 +442,7 @@ class SamlService {
       // then by name, then by email.
       if ($config->get('map_users')) {
         $event = new SamlauthUserLinkEvent($this->getAttributes());
-        $this->eventDispatcher->dispatch(SamlauthEvents::USER_LINK, $event);
+        $this->eventDispatcher->dispatch($event, SamlauthEvents::USER_LINK);
         $account = $event->getLinkedAccount();
         if ($account) {
           $this->logger->info('Existing user @name (@uid) was newly matched to SAML login attributes; linking user and logging in.', [
@@ -545,10 +546,10 @@ class SamlService {
    *
    * @param string $unique_id
    *   The unique ID (attribute value) contained in the SAML response.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The existing user account derived from the unique ID, if any.
    *
-   * @throws \Drupal\samlauth\UserVisibleException
+   * @throws UserVisibleException
    *   If linking fails or is denied.
    */
   protected function linkExistingAccount($unique_id, UserInterface $account) {
@@ -739,7 +740,7 @@ class SamlService {
   /**
    * Synchronizes user data with attributes in the SAML request.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The Drupal user to synchronize attributes into.
    * @param bool $skip_save
    *   (optional) If TRUE, skip saving the user account.
@@ -749,7 +750,7 @@ class SamlService {
   public function synchronizeUserAttributes(UserInterface $account, $skip_save = FALSE, $first_saml_login = FALSE) {
     // Dispatch a user_sync event.
     $event = new SamlauthUserSyncEvent($account, $this->getAttributes(), $first_saml_login);
-    $this->eventDispatcher->dispatch(SamlauthEvents::USER_SYNC, $event);
+    $this->eventDispatcher->dispatch($event, SamlauthEvents::USER_SYNC);
 
     if (!$skip_save && $event->isAccountChanged()) {
       $account->save();
@@ -882,7 +883,7 @@ class SamlService {
    * Some of these arguments are just added because the method is static (which
    * will change in v4.x).
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The module configuration.
    * @param string $base_url
    *   (Optional) base URL to set.
diff --git a/src/Tests/SamlTest.php b/src/Tests/SamlTest.php
index b143885..00506fc 100644
--- a/src/Tests/SamlTest.php
+++ b/src/Tests/SamlTest.php
@@ -48,11 +48,11 @@ class SamlTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Import testshib config.
-    $config = drupal_get_path('module', 'samlauth') . '/test_resources/samlauth.authentication.yml';
+    $config = \Drupal::service('extension.list.module')->getPath('samlauth') . '/test_resources/samlauth.authentication.yml';
     $config = file_get_contents($config);
     $config = Yaml::decode($config);
     \Drupal::configFactory()->getEditable('samlauth.authentication')->setData($config)->save();
@@ -68,12 +68,30 @@ class SamlTest extends BrowserTestBase {
     $web_user = $this->drupalCreateUser(['configure saml']);
     $this->drupalLogin($web_user);
     $this->drupalGet('admin/config/people/saml');
-    $this->assertText('Login / Logout', 'Login / Logout fieldset present');
-    $this->assertText('Service Provider', 'SP fieldset present');
-    $this->assertText('Identity Provider', 'iDP fieldset present');
-    $this->assertText('User Info and Syncing', 'User Info and Syncing fieldset present');
-    $this->assertText('SAML Message Construction', 'SAML Message Construction fieldset present');
-    $this->assertText('SAML Message Validation', 'SAML Message Validation fieldset present');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Login / Logout');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Service Provider');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Identity Provider');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('User Info and Syncing');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('SAML Message Construction');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('SAML Message Validation');
   }
 
   /**
@@ -85,8 +103,8 @@ class SamlTest extends BrowserTestBase {
 
     // Test that we get metadata.
     $this->drupalGet('saml/metadata');
-    $this->assertResponse(200, 'SP metadata is accessible');
-    $this->assertRaw('entityID="samlauth"', 'Entity ID found in the metadata');
+    $this->assertSession()->statusCodeEquals(200, 'SP metadata is accessible');
+    $this->assertSession()->responseContains('entityID="samlauth"');
   }
 
   /**
diff --git a/test_resources/samlauth_test/src/EventSubscriber/TestSamlauthEventSubscriber.php b/test_resources/samlauth_test/src/EventSubscriber/TestSamlauthEventSubscriber.php
index c8b598d..d256d51 100644
--- a/test_resources/samlauth_test/src/EventSubscriber/TestSamlauthEventSubscriber.php
+++ b/test_resources/samlauth_test/src/EventSubscriber/TestSamlauthEventSubscriber.php
@@ -25,7 +25,7 @@ class TestSamlauthEventSubscriber implements EventSubscriberInterface {
   /**
    * Performs actions to synchronize users with SAML data on login.
    *
-   * @param \Drupal\samlauth\Event\SamlauthUserSyncEvent $event
+   * @param SamlauthUserSyncEvent $event
    *   The event.
    */
   public function onUserSync(SamlauthUserSyncEvent $event) {
@@ -37,7 +37,7 @@ class TestSamlauthEventSubscriber implements EventSubscriberInterface {
   /**
    * Allows to link an existing user on SAML login.
    *
-   * @param \Drupal\samlauth\Event\SamlauthUserLinkEvent $event
+   * @param SamlauthUserLinkEvent $event
    *   The event.
    */
   public function onUserLink(SamlauthUserLinkEvent $event) {
