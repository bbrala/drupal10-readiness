modules/contrib/simple_survey/simple_survey.drush.inc
modules/contrib/simple_survey/simple_survey.install
modules/contrib/simple_survey/simple_survey.module
modules/contrib/simple_survey/src/Commands/SimpleSurveyCommands.php
modules/contrib/simple_survey/src/Controller/BigQueryController.php
modules/contrib/simple_survey/src/Controller/SimpleSurveyController.php
modules/contrib/simple_survey/src/Controller/SimpleSurveyRestController.php
modules/contrib/simple_survey/src/Entity/Routing/SimpleSurveyRoutingProvider.php
modules/contrib/simple_survey/src/Entity/Routing/SurveyResponseHtmlRouteProvider.php
modules/contrib/simple_survey/src/Entity/SimpleSurvey.php
modules/contrib/simple_survey/src/Entity/SimpleSurveyInterface.php
modules/contrib/simple_survey/src/Entity/SimpleSurveyListBuilder.php
modules/contrib/simple_survey/src/Entity/Sql/SurveyAnswerStorageSchema.php
modules/contrib/simple_survey/src/Entity/Sql/SurveyResponseStorageSchema.php
modules/contrib/simple_survey/src/Entity/SurveyAnswer.php
modules/contrib/simple_survey/src/Entity/SurveyAnswerInterface.php
modules/contrib/simple_survey/src/Entity/SurveyQuestion.php
modules/contrib/simple_survey/src/Entity/SurveyQuestionInterface.php
modules/contrib/simple_survey/src/Entity/SurveyResponse.php
modules/contrib/simple_survey/src/Entity/SurveyResponseInterface.php
modules/contrib/simple_survey/src/Entity/SurveyResponseListBuilder.php
modules/contrib/simple_survey/src/Entity/SurveyResponseViewsData.php
modules/contrib/simple_survey/src/Form/ConfirmCsvExportForm.php
modules/contrib/simple_survey/src/Form/ExportForm.php
modules/contrib/simple_survey/src/Form/ExternalServicesForm.php
modules/contrib/simple_survey/src/Form/SimpleSurveyDeleteForm.php
modules/contrib/simple_survey/src/Form/SimpleSurveyForm.php
modules/contrib/simple_survey/src/Form/SurveyDisplayForm.php
modules/contrib/simple_survey/src/Form/SurveyQuestionDeleteForm.php
modules/contrib/simple_survey/src/Form/SurveyQuestionForm.php
modules/contrib/simple_survey/src/Form/SurveyQuestionsListForm.php
modules/contrib/simple_survey/src/Form/SurveyResponseDeleteForm.php
modules/contrib/simple_survey/src/Plugin/Derivative/SurveyMenuLink.php
modules/contrib/simple_survey/src/Plugin/Field/FieldType/BranchingLogic.php
modules/contrib/simple_survey/src/Plugin/Field/FieldType/VisibilityPath.php
modules/contrib/simple_survey/src/Plugin/Field/FieldWidget/BranchingLogicSelect.php
modules/contrib/simple_survey/src/Plugin/Field/FieldWidget/VisibilityPathAutocomplete.php
modules/contrib/simple_survey/src/Plugin/Menu/SurveyMenuLink.php
modules/contrib/simple_survey/src/Plugin/QueueWorker/CronSurveyExport.php
modules/contrib/simple_survey/src/Plugin/QueueWorker/SurveyResponseQueueWorkerBase.php
modules/contrib/simple_survey/src/Service/BigQueryConnect.php
modules/contrib/simple_survey/src/Service/ResponseExportService.php
modules/contrib/simple_survey/src/Service/SurveyState.php
modules/contrib/simple_survey/src/SurveyAnswerViewsData.php
modules/contrib/simple_survey/src/SurveyResponseAccessControlHandler.php
modules/contrib/simple_survey/src/SurveyResponseHtmlRouteProvider.php
modules/contrib/simple_survey/src/SurveyResponseListBuilder.php
modules/contrib/simple_survey/survey_response.page.inc

21 files with changes
=====================

1) modules/contrib/simple_survey/src/SurveyResponseAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey;

+use Drupal\simple_survey\Entity\SurveyResponseInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\simple_survey\Entity\SurveyResponseInterface $entity */
+    /** @var SurveyResponseInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view survey response entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/simple_survey/src/Service/SurveyState.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Service;

+use Drupal\Core\Logger\LoggerChannelFactory;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * Drupal logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $logger;

@@ @@
   /**
    * Date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * Date time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Service config and DI.
    *
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   Date formatter service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
    * @param \Drupal\Drupal\Core\State\StateInterface $stateInterface
    *   The state service.
-   * @param \Drupal\Component\Datetime\TimeInterface $timeInterface
+   * @param TimeInterface $timeInterface
    *   The time service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/simple_survey/src/Service/ResponseExportService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Service;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * Drupal config service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * Drupal logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Drupal messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The Drupal Time Service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The Entity Type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current survey.
    *
-   * @var \Drupal\simple_survey\Entity\SimpleSurvey
+   * @var SimpleSurvey
    */
   public $survey;

@@ @@
   /**
    * Service config and DI.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Drupal Messenger service.
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   Date formatter service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   Drupal logger service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time service.
    */
   public function __construct(
@@ @@
         ->execute();
     }

-    /** @var \Drupal\simple_survey\Service\BigQueryConnect $bq */
+    /** @var BigQueryConnect $bq */
     $bq = \Drupal::service('simple_survey.big_query');

     $simpleSurvey = SimpleSurvey::load($survey);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/simple_survey/src/Service/BigQueryConnect.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Service;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatter;
 use Google\Cloud\BigQuery\BigQueryClient;
@@ @@
   /**
    * The big query client object.
    *
-   * @var \Google\Cloud\BigQuery\BigQueryClient
+   * @var BigQueryClient
    */
   private $bigQueryClient;

@@ @@
   /**
    * Drupal logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The current survey.
    *
-   * @var \Drupal\simple_survey\Entity\SimpleSurvey
+   * @var SimpleSurvey
    */
   public $survey;

@@ @@
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Service config and DI.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Drupal messenger service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config factory service.
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   Date formatter service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
    */
   public function __construct(
@@ @@
   /**
    * Sets the active survey.
    *
-   * @param \Drupal\simple_survey\Entity\SimpleSurvey $survey
+   * @param SimpleSurvey $survey
    *   The active survey.
    */
   public function setSurvey(SimpleSurvey $survey) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/simple_survey/src/Plugin/QueueWorker/SurveyResponseQueueWorkerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Plugin\QueueWorker;

+use Drupal\Core\Logger\LoggerChannel;
+use Drupal\simple_survey\Entity\SurveyResponse;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\simple_survey\Service\SurveyState;
@@ @@
   /**
    * Survey state service.
    *
-   * @var \Drupal\simple_survey\Service\ResponseExportService
+   * @var ResponseExportService
    */
   private $responseExport;

@@ @@
   /**
    * Data source state service.
    *
-   * @var \Drupal\simple_survey\Service\SurveyState
+   * @var SurveyState
    */
   private $surveyState;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   private $time;

@@ @@
   /**
    * Drupal logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   protected $logger;

@@ @@
   /**
    * The Entity Type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The BigQuery client.
    *
-   * @var \Drupal\simple_survey\Service\BigQueryConnect
+   * @var BigQueryConnect
    */
   protected $bigQueryClient;

@@ @@
   /**
    * Queueworker Construct.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\simple_survey\Service\SurveyState $surveyState
+   * @param SurveyState $surveyState
    *   Survey state service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager service.
-   * @param \Drupal\simple_survey\Service\ResponseExportService $responseExportService
+   * @param ResponseExportService $responseExportService
    *   Response export service.
-   * @param \Drupal\simple_survey\Service\BigQueryConnect $bigQueryClient
+   * @param BigQueryConnect $bigQueryClient
    *   BigQuery client service.
    */
   public function __construct(
@@ @@

           $this->surveyState->setLastExported($survey->id());

-          /** @var \Drupal\simple_survey\Entity\SurveyResponse[] $responses */
+          /** @var SurveyResponse[] $responses */
           $responses = $this->entityTypeManager->getStorage('survey_response')
             ->loadMultiple($item['responseIds']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/simple_survey/src/Plugin/Derivative/SurveyMenuLink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Plugin\Derivative;

+use Drupal\simple_survey\Entity\SimpleSurvey;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
  */
 class SurveyMenuLink extends DeriverBase implements ContainerDeriverInterface {
   /**
-   * @var Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    *   The entity type manager service.
    */
   protected $entityTypeManager;
@@ @@
    *
    * @param string $base_plugin_id
    *   The plugin id.
-   * @param Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   public function getDerivativeDefinitions($base_plugin_definition) {
     $links = [];

-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey[] $surveys */
+    /** @var SimpleSurvey[] $surveys */
     $surveys = $this->entityTypeManager->getStorage('simple_survey')->loadMultiple();

     foreach ($surveys as $survey) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/simple_survey/src/Form/SurveyQuestionsListForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Form;

+use Drupal\simple_survey\Entity\SimpleSurvey;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
       'closing' => 'Closing display',
     ];

-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey $simpleSurvey */
+    /** @var SimpleSurvey $simpleSurvey */
     $simpleSurvey = $this->entity;

     $simpleSurvey->checkStatuses();
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey $simpleSurvey */
+    /** @var SimpleSurvey $simpleSurvey */
     $simpleSurvey = $this->entity;

     $status = $simpleSurvey->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/simple_survey/src/Form/SurveyDisplayForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Form;

+use Drupal\simple_survey\Entity\SimpleSurvey;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey $simpleSurvey */
+    /** @var SimpleSurvey $simpleSurvey */
     $simpleSurvey = $this->entity;

     $simpleSurvey->checkStatuses();
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey $simpleSurvey */
+    /** @var SimpleSurvey $simpleSurvey */
     $simpleSurvey = $this->entity;

     $status = $simpleSurvey->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/simple_survey/src/Form/SimpleSurveyForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Form;

+use Drupal\simple_survey\Entity\SimpleSurvey;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey $simpleSurvey */
+    /** @var SimpleSurvey $simpleSurvey */
     $simpleSurvey = $this->entity;

     $simpleSurvey->checkStatuses();
@@ @@
    */
   public function save(array $form, FormStateInterface $form_state) {

-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey $simpleSurvey */
+    /** @var SimpleSurvey $simpleSurvey */
     $simpleSurvey = $this->entity;

     $simpleSurvey->set('basePath', $this->t('/simple-survey/api/@simple_survey', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/simple_survey/src/Form/ExternalServicesForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Form;

+use Drupal\simple_survey\Entity\SimpleSurvey;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey $simpleSurvey */
+    /** @var SimpleSurvey $simpleSurvey */
     $simpleSurvey = $this->entity;

     $simpleSurvey->checkStatuses();
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey $simpleSurvey */
+    /** @var SimpleSurvey $simpleSurvey */
     $simpleSurvey = $this->entity;

     $status = $simpleSurvey->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/simple_survey/src/Form/ExportForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Form;

+use Drupal\simple_survey\Entity\SimpleSurvey;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey $simpleSurvey */
+    /** @var SimpleSurvey $simpleSurvey */
     $simpleSurvey = $this->entity;

     $simpleSurvey->checkStatuses();
@@ @@
    * {@inheritDoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey $simple_survey */
+    /** @var SimpleSurvey $simple_survey */
     $simple_survey = $this->entity;
     $options = [
       'survey' => $simple_survey->id(),
@@ @@
   }

   private function createBqBatch(array $options) {
-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey $simple_survey */
+    /** @var SimpleSurvey $simple_survey */
     $simple_survey = $this->entity;

     $batch = [
@@ @@
   }

   private function createCsvBatch(array $options) {
-    /** @var \Drupal\simple_survey\Entity\SimpleSurvey $simple_survey */
+    /** @var SimpleSurvey $simple_survey */
     $simple_survey = $this->entity;
     $date = new \DateTime();
     $fileTime = $date->format('YdmHis');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/simple_survey/src/Form/ConfirmCsvExportForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The Drupal Time Service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a EntityForm object.
    *
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   The date formatter service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/simple_survey/src/Entity/SurveyResponseListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Entity;

+use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The survey the list belongs to.
    *
-   * @var \Drupal\simple_survey\Entity\SimpleSurveyInterface
+   * @var SimpleSurveyInterface
    */
   public $simpleSurvey;

@@ @@
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\Core\Datetime\DateFormatter $dateFormatter */
+    /** @var DateFormatter $dateFormatter */
     $dateFormatter = \Drupal::service('date.formatter');

     $row['id'] = $entity->id();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/simple_survey/src/Entity/SurveyQuestionInterface.php:25

    ---------- begin diff ----------
@@ @@
    * @param int $timestamp
    *   The Survey Response creation timestamp.
    *
-   * @return \Drupal\simple_survey\Entity\SurveyResponseInterface
+   * @return SurveyResponseInterface
    *   The called Survey Response entity.
    */
   public function setCreatedTime($timestamp);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/simple_survey/src/Entity/SimpleSurveyListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Entity;

+use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Query\QueryException;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\Core\Datetime\DateFormatter $dateFormatter */
+    /** @var DateFormatter $dateFormatter */
     $dateFormatter = \Drupal::service('date.formatter');

     $surveyQuestionCount = \Drupal::service('entity_type.manager')->getStorage('survey_question')->getQuery()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/simple_survey/src/Entity/SimpleSurvey.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Entity;

+use Drupal\Core\Path\CurrentPathStack;
+use Drupal\path_alias\AliasManager;
+use Drupal\Core\Path\PathMatcher;
+use Drupal\simple_survey\Service\SurveyState;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Messenger\MessengerTrait;
@@ @@
    */
   public function checkPath(string $path = NULL) {
     /**
-     * @var \Drupal\Core\Path\CurrentPathStack $currentPath
+     * @var CurrentPathStack $currentPath
      *   Drupal Patch Matcher service.
      */
     $currentPath = \Drupal::service('path.current')->getPath();
     /**
-     * @var \Drupal\path_alias\AliasManager $currentPath
+     * @var AliasManager $currentPath
      *   Drupal Patch Matcher service.
      */
     $currentAlias = \Drupal::service('path_alias.manager')->getAliasByPath($currentPath);
     /**
-     * @var \Drupal\Core\Path\PathMatcher $pathMatcher
+     * @var PathMatcher $pathMatcher
      *   Drupal Patch Matcher service.
      */
     $pathMatcher = \Drupal::service('path.matcher');
@@ @@
   /**
    * Get the survey that loads on this path.
    *
-   * @return null|\Drupal\simple_survey\Entity\SimpleSurveyInterface
+   * @return null|SimpleSurveyInterface
    *   Returns either null or the Simple Survey entity.
    */
   public static function getSurvey() {
@@ @@
    * Sets the last time the data was submitted to BigQuery.
    */
   public function setBqSubmission() {
-    /** @var \Drupal\simple_survey\Service\SurveyState $state */
+    /** @var SurveyState $state */
     $state = \Drupal::service('simple_survey.survey_state');

     $state->setLastExported($this->id());
@@ @@
    *   The stored last submitted value or NULL.
    */
   public function getBqSubmission() {
-    /** @var \Drupal\simple_survey\Service\SurveyState $state */
+    /** @var SurveyState $state */
     $state = \Drupal::service('simple_survey.survey_state');
     return $state->getLastExported($this->id());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/simple_survey/src/Entity/Routing/SimpleSurveyRoutingProvider.php:73

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the questions-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getQuestionsFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the display-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDisplayFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the external-services-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getExternalServicesFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the BigQuery reset route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getResetBigQueryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the CSV export route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCsvExportRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the Export form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getExportFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/simple_survey/src/Controller/SimpleSurveyRestController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Controller;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\Xss;
 use Drupal\Component\Uuid\UuidInterface;
@@ @@
   /**
    * The survey.
    *
-   * @var \Drupal\simple_survey\Entity\SimpleSurveyInterface
+   * @var SimpleSurveyInterface
    */
   private $survey = '';

@@ @@
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Drupal\Component\Uuid\UuidInterface definition.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidService;

@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelFactory definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Drupal date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * Response export service.
    *
-   * @var \Drupal\simple_survey\Service\BigQueryConnect
+   * @var BigQueryConnect
    */
   protected $bigQuery;

@@ @@
   /**
    * The Drupal Time Service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The Entity Type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @todo Look into creating a service to handle DI. Doing a janky call in simple_survey.module
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Drupal messenger service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The Drupal UUID service.
-   * @param Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   The Drupal date formatter service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\simple_survey\Service\BigQueryConnect $big_query
+   * @param BigQueryConnect $big_query
    *   The BigQuery Connection service.
    * @param \Drupal\simple_survey\ResponseExportService $response_export_service
    *   The response export service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The Drupal time service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager service.
    */
   public function __construct(
@@ @@
     $this->time = $time;
     $this->entityTypeManager = $entity_type_manager;

-    $this->modulePath = drupal_get_path('module', $this->moduleName);
+    $this->modulePath = \Drupal::service('extension.list.module')->getPath($this->moduleName);
   }

   /**
@@ @@
   /**
    * Generates a Cookie for tracking and CSRF.
    *
-   * @return Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Returns a http response.
    */
   private function generateCookie(Request $request, string $cookieName) {
@@ @@
     $expireTime = $this->time->getRequestTime() + (60 * 60 * 24 * $cooldown);

     $headerResponse = new Response();
-    $cookie = new Cookie(
-      $cookieName,
-      $this->uuidService->generate(),
-      $expireTime,
-      '/',
-      $request->getHost(),
-      FALSE,
-      FALSE,
-      FALSE,
-      'strict'
-    );
+    $cookie = Cookie::create($cookieName, $this->uuidService->generate(), $expireTime, '/', $request->getHost(), FALSE, FALSE, FALSE, 'strict');

     if ($cookie) {
       $headerResponse->headers->setCookie($cookie);
@@ @@
   /**
    * Checks if request to load a survey is valid and should be loaded displayed.
    *
-   * @param Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The Drupal request.
-   * @param Drupal\simple_survey\Entity\SimpleSurveyInterface $simple_survey
+   * @param SimpleSurveyInterface $simple_survey
    *   The Simple survey config entity.
    *
-   * @return Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The returned response.
    */
   public function validate(Request $request, SimpleSurveyInterface $simple_survey) {
@@ @@
   /**
    * Displays the questions as JSON.
    *
-   * @param Drupal\simple_survey\Entity\SimpleSurveyInterface $simple_survey
+   * @param SimpleSurveyInterface $simple_survey
    *   The Simple survey config entity.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Returns a JSON Response.
    */
   public function displayQuestions(SimpleSurveyInterface $simple_survey) {
@@ @@
   /**
    * Submits the responses.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The drupal request.
-   * @param Drupal\simple_survey\Entity\SimpleSurveyInterface $simple_survey
+   * @param SimpleSurveyInterface $simple_survey
    *   The Simple survey config entity.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Returns a HTTP Response.
    */
   public function submitForm(Request $request, SimpleSurveyInterface $simple_survey) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * NewToStaticCallRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/simple_survey/src/Controller/SimpleSurveyController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Controller;

+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\File\FileSystem;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\Response;
@@ @@
   /**
    * Drupal date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The survey state service.
    *
-   * @var \Drupal\simple_survey\Service\SurveyState
+   * @var SurveyState
    */
   protected $surveyState;

@@ @@
   /**
    * File System service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * Simple Survery Controller constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystemInterface
+   * @param FileSystemInterface $fileSystemInterface
    *   The Drupal file system service.
    */
   public function __construct(
@@ @@
     $this->fileSystem = $fileSystemInterface;
     $this->surveyState = $surveyState;

-    $this->modulePath = drupal_get_path('module', 'simple_survey');
+    $this->modulePath = \Drupal::service('extension.list.module')->getPath('simple_survey');
   }

   /**
@@ @@
   /**
    * Displays information about a survey.
    *
-   * @param \Drupal\simple_survey\Entity\SimpleSurveyInterface $simple_survey
+   * @param SimpleSurveyInterface $simple_survey
    *   The survey to display.
    *
    * @return array
@@ @@
   /**
    * Returns the page title for an survey's "View" tab.
    *
-   * @param \Drupal\simple_survey\Entity\SimpleSurveyInterface $simple_survey
+   * @param SimpleSurveyInterface $simple_survey
    *   The survey that is displayed.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/simple_survey/src/Controller/BigQueryController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_survey\Controller;

+use Drupal\simple_survey\Service\SurveyState;
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * File System service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Simple Survery Controller constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The Drupal file system service.
    */
   public function __construct(
     Connection $connection) {
     $this->database = $connection;
-    $this->modulePath = drupal_get_path('module', $this->moduleName);
+    $this->modulePath = \Drupal::service('extension.list.module')->getPath($this->moduleName);
   }

   /**
@@ @@
         ':survey' => $results['survey'],
       ]);

-      /** @var \Drupal\simple_survey\Service\SurveyState $state */
+      /** @var SurveyState $state */
       $state = \Drupal::service('simple_survey.survey_state');

       $state->setLastExported($results['survey']);
@@ @@
   /**
    * Manual submission to BigQuery.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Returns response object.
    */
   public function resetBigQuery(SimpleSurveyInterface $simple_survey) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/simple_survey/simple_survey.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_survey\Service\SurveyState;
+use Drupal\simple_survey\Service\BigQueryConnect;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Url;
@@ @@
 }

 function simple_survey_queue_bq_submissions() {
-  /** @var \Drupal\simple_survey\Service\SurveyState $surveyState */
+  /** @var SurveyState $surveyState */
   $surveyState = \Drupal::service('simple_survey.survey_state');
   $queueFactory = \Drupal::service('queue');
   $entityTypeManager = \Drupal::entityTypeManager();
@@ @@
     return;
   }

-  /** @var \Drupal\simple_survey\Service\BigQueryConnect $bigQuery */
+  /** @var BigQueryConnect $bigQuery */
   $bigQuery = \Drupal::service('simple_survey.big_query');

   foreach ($surveys as $survey) {
@@ @@
  * Implements hook_page_attachments().
  */
 function simple_survey_page_attachments(array &$attachments) {
-  /** @var \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter */
+  /** @var DateFormatterInterface $dateFormatter */
   $dateFormatter = \Drupal::service('date.formatter');
-  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
+  /** @var ModuleHandlerInterface $moduleHandler */
   $moduleHandler = \Drupal::service('module_handler');

   if (!\Drupal::service('router.admin_context')->isAdminRoute()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 21 files have been changed by Rector                                      

