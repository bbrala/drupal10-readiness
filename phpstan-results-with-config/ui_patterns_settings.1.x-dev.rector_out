modules/contrib/ui_patterns_settings/src/Annotation/UiPatternsSettingType.php
modules/contrib/ui_patterns_settings/src/Definition/PatternDefinitionSetting.php
modules/contrib/ui_patterns_settings/src/Element/PatternSettings.php
modules/contrib/ui_patterns_settings/src/Form/SettingsFormBuilder.php
modules/contrib/ui_patterns_settings/src/Plugin/Layout/PatternSettingsLayout.php
modules/contrib/ui_patterns_settings/src/Plugin/PatternSettingTypeBase.php
modules/contrib/ui_patterns_settings/src/Plugin/PatternSettingTypeInterface.php
modules/contrib/ui_patterns_settings/src/Plugin/TokenSettingTypeBase.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/AttributesSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/BooleanSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/CheckboxSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/NumberSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/SelectSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/TextfieldSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/TokenSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/UrlSettingType.php
modules/contrib/ui_patterns_settings/src/UiPatternsSettings.php
modules/contrib/ui_patterns_settings/src/UiPatternsSettingsManager.php
modules/contrib/ui_patterns_settings/tests/src/Functional/UiPatternsSettingsRenderTest.php
modules/contrib/ui_patterns_settings/ui_patterns_settings.module

8 files with changes
====================

1) modules/contrib/ui_patterns_settings/ui_patterns_settings.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Layout\LayoutDefinition;
 /**
  * @file
  * Contains ui_patterns_settings.module.
@@ @@
  * Implements hook_layout_alter().
  */
 function ui_patterns_settings_layout_alter(&$definitions) {
-  /** @var \Drupal\Core\Layout\LayoutDefinition $definition */
+  /** @var LayoutDefinition $definition */
   foreach ($definitions as $definition) {
     if ($definition->getClass() == '\Drupal\ui_patterns_layouts\Plugin\Layout\PatternLayout') {
       $definition->setClass(PatternSettingsLayout::class);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/ui_patterns_settings/tests/src/Functional/UiPatternsSettingsRenderTest.php:74

    ---------- begin diff ----------
@@ @@
     $edit = [
       'ds_layout' => 'pattern_foo_settings',
     ];
-    $this->drupalPostForm('/admin/structure/types/manage/article/display', $edit, 'Save');
+    $this->drupalGet('/admin/structure/types/manage/article/display');
+    $this->submitForm($edit, 'Save');

     // Fill settings.
     $edit = [];
@@ @@
     foreach ($mappings as $key => $mapping) {
       $edit['layout_configuration[pattern][settings]' . $key] = $mapping['input'];
     }
-    $this->drupalPostForm('/admin/structure/types/manage/article/display', $edit, 'Save');
+    $this->drupalGet('/admin/structure/types/manage/article/display');
+    $this->submitForm($edit, 'Save');

     // Check values.
     $this->drupalGet('/node/' . $created_node->id());
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ui_patterns_settings/src/UiPatternsSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_settings;

+use Drupal\ui_patterns_settings\Plugin\PatternSettingTypeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\ui_patterns\Definition\PatternDefinition;
 use Drupal\ui_patterns\UiPatterns;
@@ @@
   /**
    * Get pattern manager setting instance.
    *
-   * @return \Drupal\ui_patterns_settings\UiPatternsSettingsManager
+   * @return UiPatternsSettingsManager
    *   UI Patterns setting manager instance.
    */
   public static function getManager() {
@@ @@
    *   The variant.
    * @param bool $preview
    *   Is preview.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity of the pattern. Useful for dynamic settings.
    *
    * @return array
@@ @@
   /**
    * Get setting definitions for a pattern definition.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The definition.
    *
-   * @return \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting[]
+   * @return PatternDefinitionSetting[]
    *   Setting pattern definitons.
    */
   public static function getPatternDefinitionSettings(PatternDefinition $definition) {
@@ @@
   /**
    * Create setting type plugin.
    *
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $settingDefintion
+   * @param PatternDefinitionSetting $settingDefintion
    *   The setting defintion.
    *
-   * @return \Drupal\ui_patterns_settings\Plugin\PatternSettingTypeInterface
+   * @return PatternSettingTypeInterface
    *   UI Patterns setting manager instance.
    */
   public static function createSettingType(PatternDefinitionSetting $settingDefintion) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/ui_patterns_settings/src/Plugin/TokenSettingTypeBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_settings\Plugin;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Utility\Token;
@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;

@@ @@

     if (is_string($value)) {
       $token_data = [];
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = isset($context['entity']) ? $context['entity'] : NULL;
       if ($entity !== NULL) {
         $token_data[$entity->getEntityTypeId()] = $entity;
@@ @@
   /**
    * Sets the token service.
    *
-   * @param \Drupal\Core\Utility\Token $token_service
+   * @param Token $token_service
    *   The token service.
    *
    * @return self
@@ @@
   /**
    * Gets the token service.
    *
-   * @return \Drupal\Core\Utility\Token
+   * @return Token
    *   The token service.
    */
   public function getTokenService() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ui_patterns_settings/src/Plugin/PatternSettingTypeInterface.php:16

    ---------- begin diff ----------
@@ @@
    *   The form definition array for the settings configuration form.
    * @param string $value
    *   The stored default value.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    *
    * @return array
@@ @@
    *   Context informations.
    *   Keys:
    *    - entity.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/ui_patterns_settings/src/Plugin/PatternSettingTypeBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_settings\Plugin;

+use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting;
@@ @@
   /**
    * Return pattern definitions for setting .
    *
-   * @var \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting
+   * @var PatternDefinitionSetting
    */
   private $patternSettingDefinition;

@@ @@
   /**
    * Return pattern setting definition.
    *
-   * @return \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting
+   * @return PatternDefinitionSetting
    *   Pattern setting definition.
    */
   protected function getPatternSettingDefinition() {
@@ @@
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     $plugin = new static($configuration, $plugin_id, $plugin_definition);

-    /** @var \Drupal\Core\StringTranslation\TranslationInterface $translation */
+    /** @var TranslationInterface $translation */
     $translation = $container->get('string_translation');

     $plugin->setStringTranslation($translation);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/ui_patterns_settings/src/Form/SettingsFormBuilder.php:15

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    * @param array $configuration
    *   The pattern configuration.
@@ @@
    *   The id of the variant select field.
    * @param array $fieldset
    *   The fieldset.
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    */
   private static function buildVariantsForm($select_selector, array &$fieldset, PatternDefinition $definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/ui_patterns_settings/src/Annotation/UiPatternsSettingType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_settings\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 8 files have been changed by Rector                                       

