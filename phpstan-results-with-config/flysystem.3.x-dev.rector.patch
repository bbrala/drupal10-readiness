diff --git a/src/Asset/CssCollectionOptimizer.php b/src/Asset/CssCollectionOptimizer.php
index 4ad3876..4834ee9 100644
--- a/src/Asset/CssCollectionOptimizer.php
+++ b/src/Asset/CssCollectionOptimizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flysystem\Asset;
 
+use Drupal\Core\File\FileSystem;
 use Drupal\Core\Asset\CssCollectionOptimizer as DrupalCssCollectionOptimizer;
 
 /**
@@ -16,7 +17,7 @@ class CssCollectionOptimizer extends DrupalCssCollectionOptimizer {
    */
   public function deleteAll() {
     $this->state->delete('drupal_css_cache_files');
-    /** @var \Drupal\Core\File\FileSystem $file_system */
+    /** @var FileSystem $file_system */
     $file_system = \Drupal::service('file_system');
     $delete_stale = static function ($uri) use ($file_system) {
       // Default stale file threshold is 30 days (2592000 seconds).
diff --git a/src/Asset/CssOptimizer.php b/src/Asset/CssOptimizer.php
index 1e16e36..087a895 100644
--- a/src/Asset/CssOptimizer.php
+++ b/src/Asset/CssOptimizer.php
@@ -24,7 +24,7 @@ class CssOptimizer extends DrupalCssOptimizer {
     }
 
     // file_url_transform_relative() was removed here.
-    return 'url(' . file_create_url($path) . ')';
+    return 'url(' . \Drupal::service('file_url_generator')->generateAbsoluteString($path) . ')';
   }
 
 }
diff --git a/src/Asset/JsCollectionOptimizer.php b/src/Asset/JsCollectionOptimizer.php
index d5883dd..ebaf9a1 100644
--- a/src/Asset/JsCollectionOptimizer.php
+++ b/src/Asset/JsCollectionOptimizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flysystem\Asset;
 
+use Drupal\Core\File\FileSystem;
 use Drupal\Core\Asset\JsCollectionOptimizer as DrupalJsCollectionOptimizer;
 
 /**
@@ -16,7 +17,7 @@ class JsCollectionOptimizer extends DrupalJsCollectionOptimizer {
    */
   public function deleteAll() {
     $this->state->delete('system.js_cache_files');
-    /** @var \Drupal\Core\File\FileSystem $file_system */
+    /** @var FileSystem $file_system */
     $file_system = \Drupal::service('file_system');
     $delete_stale = static function ($uri) use ($file_system) {
       // Default stale file threshold is 30 days (2592000 seconds).
diff --git a/src/Event/EnsureEvent.php b/src/Event/EnsureEvent.php
index 304b9ba..82b66ae 100644
--- a/src/Event/EnsureEvent.php
+++ b/src/Event/EnsureEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\flysystem\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * The event fired for every result from an ensure() call.
diff --git a/src/EventSubscriber/EnsureSubscriber.php b/src/EventSubscriber/EnsureSubscriber.php
index 6cc07bd..4590532 100644
--- a/src/EventSubscriber/EnsureSubscriber.php
+++ b/src/EventSubscriber/EnsureSubscriber.php
@@ -17,7 +17,7 @@ class EnsureSubscriber implements EventSubscriberInterface {
   /**
    * The logger to use.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -35,7 +35,7 @@ class EnsureSubscriber implements EventSubscriberInterface {
   /**
    * Constructs an EnsureSubscriber object.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(LoggerInterface $logger) {
diff --git a/src/Flysystem/Adapter/CacheItemBackend.php b/src/Flysystem/Adapter/CacheItemBackend.php
index b4e92a6..5bf5969 100644
--- a/src/Flysystem/Adapter/CacheItemBackend.php
+++ b/src/Flysystem/Adapter/CacheItemBackend.php
@@ -17,7 +17,7 @@ class CacheItemBackend {
   /**
    * The Drupal cache backend to store data in.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
@@ -31,7 +31,7 @@ class CacheItemBackend {
   /**
    * Constructs a new CacheItemBackend.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The Drupal cache backend to store items in.
    */
   public function __construct($scheme, CacheBackendInterface $cacheBackend) {
@@ -58,14 +58,14 @@ class CacheItemBackend {
    * @param string $path
    *   The path of the item to load.
    *
-   * @return \Drupal\flysystem\Flysystem\Adapter\CacheItem
+   * @return CacheItem
    *   The cache item, or a new cache item if one isn't in the cache.
    */
   public function load($path) {
     $key = $this->getCacheKey($path);
 
     if ($cached = $this->cacheBackend->get($key)) {
-      /** @var \Drupal\flysystem\Flysystem\Adapter\CacheItem $item */
+      /** @var CacheItem $item */
       $item = $cached->data;
     }
     else {
@@ -80,7 +80,7 @@ class CacheItemBackend {
    *
    * @param string $path
    *   The file path.
-   * @param \Drupal\flysystem\Flysystem\Adapter\CacheItem $item
+   * @param CacheItem $item
    *   The item to set.
    */
   public function set($path, CacheItem $item) {
diff --git a/src/FlysystemServiceProvider.php b/src/FlysystemServiceProvider.php
index ca881b2..bcfcf77 100644
--- a/src/FlysystemServiceProvider.php
+++ b/src/FlysystemServiceProvider.php
@@ -46,7 +46,7 @@ class FlysystemServiceProvider implements ServiceProviderInterface {
   /**
    * Swaps the js/css dumper if a scheme is configured to serve it.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The container.
    * @param string $extension
    *   The file extension to swap.
diff --git a/src/Form/ConfigForm.php b/src/Form/ConfigForm.php
index 42755bf..76d549f 100644
--- a/src/Form/ConfigForm.php
+++ b/src/Form/ConfigForm.php
@@ -17,14 +17,14 @@ class ConfigForm extends FormBase {
   /**
    * The Flysystem factory.
    *
-   * @var \Drupal\flysystem\FlysystemFactory
+   * @var FlysystemFactory
    */
   protected $factory;
 
   /**
    * Constructs a ConfigForm object.
    *
-   * @param \Drupal\flysystem\FlysystemFactory $factory
+   * @param FlysystemFactory $factory
    *   The FlysystemF factory.
    */
   public function __construct(FlysystemFactory $factory) {
diff --git a/src/Plugin/FlysystemPluginManager.php b/src/Plugin/FlysystemPluginManager.php
index 19135a6..e21d71a 100644
--- a/src/Plugin/FlysystemPluginManager.php
+++ b/src/Plugin/FlysystemPluginManager.php
@@ -18,9 +18,9 @@ class FlysystemPluginManager extends DefaultPluginManager implements FallbackPlu
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Routing/FlysystemRoutes.php b/src/Routing/FlysystemRoutes.php
index 05d4f91..6e5d64a 100644
--- a/src/Routing/FlysystemRoutes.php
+++ b/src/Routing/FlysystemRoutes.php
@@ -18,32 +18,32 @@ class FlysystemRoutes implements ContainerInjectionInterface {
   /**
    * The Flysystem factory.
    *
-   * @var \Drupal\flysystem\FlysystemFactory
+   * @var FlysystemFactory
    */
   protected $factory;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * Constructs a new FlysystemRoutes object.
    *
-   * @param \Drupal\flysystem\FlysystemFactory $factory
+   * @param FlysystemFactory $factory
    *   The Flysystem factory.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(FlysystemFactory $factory, StreamWrapperManagerInterface $stream_wrapper_manager, ModuleHandlerInterface $module_handler) {
@@ -66,7 +66,7 @@ class FlysystemRoutes implements ContainerInjectionInterface {
   /**
    * Returns a list of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes() {
diff --git a/tests/src/Functional/ModuleInstallUninstallWebTest.php b/tests/src/Functional/ModuleInstallUninstallWebTest.php
index 0d3a488..9c1cd82 100644
--- a/tests/src/Functional/ModuleInstallUninstallWebTest.php
+++ b/tests/src/Functional/ModuleInstallUninstallWebTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Functional;
 
+use Drupal\Core\Extension\ModuleInstallerInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -28,7 +29,7 @@ class ModuleInstallUninstallWebTest extends BrowserTestBase {
     $module_handler = \Drupal::moduleHandler();
     $this->assertTrue($module_handler->moduleExists(reset(static::$modules)));
 
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = \Drupal::service('module_installer');
 
     $module_installer->uninstall(static::$modules);
diff --git a/tests/src/Kernel/CollectionOptimizerTest.php b/tests/src/Kernel/CollectionOptimizerTest.php
index a6dd6fc..b6aa0e7 100644
--- a/tests/src/Kernel/CollectionOptimizerTest.php
+++ b/tests/src/Kernel/CollectionOptimizerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Asset\AssetCollectionGrouperInterface;
 use Drupal\Core\Asset\CssOptimizer;
 use Drupal\Core\Asset\JsOptimizer;
@@ -20,10 +21,11 @@ use org\bovigo\vfs\vfsStream;
  */
 class CollectionOptimizerTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cleanUp();
   }
@@ -31,7 +33,7 @@ class CollectionOptimizerTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     $this->cleanUp();
     parent::tearDown();
   }
@@ -68,7 +70,7 @@ class CollectionOptimizerTest extends KernelTestBase {
 
     foreach ($this->jsFilesUnderTest() as $js_file => $expired) {
       if ($expired === TRUE) {
-        $this->assertFileNotExists($js_file);
+        $this->assertFileDoesNotExist($js_file);
         continue;
       }
       $this->assertFileExists($js_file);
@@ -108,7 +110,7 @@ class CollectionOptimizerTest extends KernelTestBase {
 
     foreach ($this->cssFilesUnderTest() as $css_file => $expired) {
       if ($expired === TRUE) {
-        $this->assertFileNotExists($css_file);
+        $this->assertFileDoesNotExist($css_file);
         continue;
       }
       $this->assertFileExists($css_file);
diff --git a/tests/src/Unit/EventSubscriber/EnsureSubscriberTest.php b/tests/src/Unit/EventSubscriber/EnsureSubscriberTest.php
index 156a003..35cf185 100644
--- a/tests/src/Unit/EventSubscriber/EnsureSubscriberTest.php
+++ b/tests/src/Unit/EventSubscriber/EnsureSubscriberTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Unit\EventSubscriber;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\EventSubscriber\EnsureSubscriber;
 use Drupal\flysystem\Event\EnsureEvent;
@@ -17,6 +18,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class EnsureSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests that the event subscriber logs ensure() calls.
    */
diff --git a/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php b/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php
index dbf423d..ee57435 100644
--- a/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php
+++ b/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Unit\Flysystem\Adapter;
 
+use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\MemoryBackend;
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\Flysystem\Adapter\CacheItem;
@@ -18,21 +19,21 @@ class CacheItemBackendTest extends UnitTestCase {
   /**
    * The cache backend used in the CacheItemBackend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
   /**
    * The cache item backend to test.
    *
-   * @var \Drupal\flysystem\Flysystem\Adapter\CacheItemBackend
+   * @var CacheItemBackend
    */
   protected $cacheItemBackend;
 
   /**
    * {@inheritdoc}
    */
-  public function setup() {
+  public function setup(): void {
     $this->cacheBackend = new MemoryBackend('foo');
     $this->cacheItemBackend = new CacheItemBackend('test-scheme', $this->cacheBackend);
   }
diff --git a/tests/src/Unit/Flysystem/FtpTest.php b/tests/src/Unit/Flysystem/FtpTest.php
index 0e657a7..2f28bf7 100644
--- a/tests/src/Unit/Flysystem/FtpTest.php
+++ b/tests/src/Unit/Flysystem/FtpTest.php
@@ -17,7 +17,7 @@ namespace Drupal\Tests\flysystem\Unit\Flysystem {
     /**
      * {@inheritdoc}
      */
-    public function setUp() {
+    public function setUp(): void {
       parent::setUp();
       if (!defined('FTP_BINARY')) {
         $this->markTestSkipped('The FTP_BINARY constant is not defined.');
diff --git a/tests/src/Unit/Flysystem/LocalTest.php b/tests/src/Unit/Flysystem/LocalTest.php
index fbc75fa..a603d5c 100644
--- a/tests/src/Unit/Flysystem/LocalTest.php
+++ b/tests/src/Unit/Flysystem/LocalTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Unit\Flysystem;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\Core\Routing\UrlGeneratorInterface;
@@ -18,10 +19,11 @@ use Prophecy\Argument;
  */
 class LocalTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $GLOBALS['base_url'] = 'http://example.com';
 
@@ -42,7 +44,7 @@ class LocalTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     (new LocalAdapter('foo'))->deleteDir('');
     @rmdir('foo');
 
diff --git a/tests/src/Unit/FlysystemFactoryTest.php b/tests/src/Unit/FlysystemFactoryTest.php
index c9b99c9..a149cad 100644
--- a/tests/src/Unit/FlysystemFactoryTest.php
+++ b/tests/src/Unit/FlysystemFactoryTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\flysystem\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Cache\CacheBackendInterface;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\NullBackend;
 use Drupal\Core\File\FileSystemInterface as CoreFileSystemInterface;
@@ -25,35 +28,36 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class FlysystemFactoryTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $filesystem;
 
   /**
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $plugin;
 
   /**
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $pluginManager;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->cache = new NullBackend('bin');
@@ -181,7 +185,7 @@ class FlysystemFactoryTest extends UnitTestCase {
   }
 
   /**
-   * @return \Drupal\flysystem\FlysystemFactory
+   * @return FlysystemFactory
    */
   protected function getFactory() {
     return new FlysystemFactory(
diff --git a/tests/src/Unit/FlysystemServiceProviderTest.php b/tests/src/Unit/FlysystemServiceProviderTest.php
index c0c2fde..5483e32 100644
--- a/tests/src/Unit/FlysystemServiceProviderTest.php
+++ b/tests/src/Unit/FlysystemServiceProviderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Unit;
 
+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Asset\AssetDumper;
 use Drupal\Core\Asset\CssCollectionOptimizer;
 use Drupal\Core\Asset\CssOptimizer;
@@ -26,14 +27,14 @@ class FlysystemServiceProviderTest extends UnitTestCase {
   /**
    * The container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->container = new ContainerBuilder();
   }
 
diff --git a/tests/src/Unit/Form/ConfigFormTest.php b/tests/src/Unit/Form/ConfigFormTest.php
index 502e74d..cdb525b 100644
--- a/tests/src/Unit/Form/ConfigFormTest.php
+++ b/tests/src/Unit/Form/ConfigFormTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\flysystem\Unit\Form {
 
+  use Prophecy\PhpUnit\ProphecyTrait;
+  use Prophecy\Prophecy\ObjectProphecy;
+  use Drupal\Core\Messenger\MessengerInterface;
   use function Drupal\flysystem\Form\batch_set;
   use Drupal\Core\Form\FormState;
   use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ -21,24 +24,25 @@ namespace Drupal\Tests\flysystem\Unit\Form {
    */
   class ConfigFormTest extends UnitTestCase {
 
+    use ProphecyTrait;
     /**
      * The Flysystem factory prophecy.
      *
-     * @var \Prophecy\Prophecy\ObjectProphecy
+     * @var ObjectProphecy
      */
     protected $factory;
 
     /**
      * The form object.
      *
-     * @var \Drupal\flysystem\Form\ConfigForm
+     * @var ConfigForm
      */
     protected $form;
 
     /**
      * {@inheritdoc}
      */
-    public function setUp() {
+    public function setUp(): void {
       parent::setUp();
 
       $this->factory = $this->prophesize(FlysystemFactory::class);
@@ -49,7 +53,7 @@ namespace Drupal\Tests\flysystem\Unit\Form {
 
       $this->form = new ConfigForm($this->factory->reveal());
       $this->form->setStringTranslation($this->getStringTranslationStub());
-      $messenger = $this->prophesize(\Drupal\Core\Messenger\MessengerInterface::class);
+      $messenger = $this->prophesize(MessengerInterface::class);
 
       $container = new ContainerBuilder();
       $container->set('string_translation', $this->getStringTranslationStub());
diff --git a/tests/src/Unit/InstallFunctionsTest.php b/tests/src/Unit/InstallFunctionsTest.php
index 7e046bc..8e9ba7f 100644
--- a/tests/src/Unit/InstallFunctionsTest.php
+++ b/tests/src/Unit/InstallFunctionsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\flysystem\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\Core\Site\Settings;
 use Drupal\Tests\UnitTestCase;
@@ -16,17 +18,18 @@ use Twistor\FlysystemStreamWrapper;
  */
 class InstallFunctionsTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The Flysystem factory prophecy object.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $factory;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     if (!defined('REQUIREMENT_ERROR')) {
diff --git a/tests/src/Unit/Logger/ConvertTest.php b/tests/src/Unit/Logger/ConvertTest.php
index 9dbd346..8198eb3 100644
--- a/tests/src/Unit/Logger/ConvertTest.php
+++ b/tests/src/Unit/Logger/ConvertTest.php
@@ -15,7 +15,7 @@ class ConvertTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $consts = [
       'REQUIREMENT_INFO' => -1,
       'REQUIREMENT_OK' => 0,
diff --git a/tests/src/Unit/ModuleFunctionsTest.php b/tests/src/Unit/ModuleFunctionsTest.php
index 614e510..c5b3b0f 100644
--- a/tests/src/Unit/ModuleFunctionsTest.php
+++ b/tests/src/Unit/ModuleFunctionsTest.php
@@ -2,12 +2,14 @@
 
 namespace Drupal\Tests\flysystem\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\FlysystemFactory;
 use Prophecy\Argument;
 use Symfony\Component\DependencyInjection\ContainerBuilder;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 use org\bovigo\vfs\vfsStream;
 
 /**
@@ -17,17 +19,18 @@ use org\bovigo\vfs\vfsStream;
  */
 class ModuleFunctionsTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The Flysystem factory prophecy object.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $factory;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     vfsStream::setup('module_file');
 
@@ -42,7 +45,7 @@ class ModuleFunctionsTest extends UnitTestCase {
       return $scheme;
     });
 
-    $guesser = $this->prophesize(MimeTypeGuesserInterface::class);
+    $guesser = $this->prophesize(MimeTypesInterface::class);
     $guesser->guess(Argument::type('string'))->willReturn('txt/flysystem');
 
     $container = new ContainerBuilder();
diff --git a/tests/src/Unit/PathProcessor/LocalPathProcessorTest.php b/tests/src/Unit/PathProcessor/LocalPathProcessorTest.php
index a601bf1..779aee1 100644
--- a/tests/src/Unit/PathProcessor/LocalPathProcessorTest.php
+++ b/tests/src/Unit/PathProcessor/LocalPathProcessorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Unit\PathProcessor;
 
+use Drupal\Core\PathProcessor\InboundPathProcessorInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\PathProcessor\LocalPathProcessor;
@@ -14,14 +15,14 @@ use Symfony\Component\HttpFoundation\Request;
 class LocalPathProcessorTest extends UnitTestCase {
 
   /**
-   * @var \Drupal\Core\PathProcessor\InboundPathProcessorInterface
+   * @var InboundPathProcessorInterface
    */
   protected $processor;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     new Settings(
       [
         'flysystem' => [
diff --git a/tests/src/Unit/Plugin/FlysystemUrlTraitTest.php b/tests/src/Unit/Plugin/FlysystemUrlTraitTest.php
index 15c2b66..8fc9bdb 100644
--- a/tests/src/Unit/Plugin/FlysystemUrlTraitTest.php
+++ b/tests/src/Unit/Plugin/FlysystemUrlTraitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Unit\Plugin;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Routing\UrlGenerator;
 use Drupal\Tests\UnitTestCase;
@@ -13,6 +14,7 @@ use Drupal\flysystem\Plugin\FlysystemUrlTrait;
  */
 class FlysystemUrlTraitTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::getExternalUrl
    * @covers ::getScheme
diff --git a/tests/src/Unit/Plugin/ImageStyleGenerationTraitTest.php b/tests/src/Unit/Plugin/ImageStyleGenerationTraitTest.php
index 20b4623..ae8d9fb 100644
--- a/tests/src/Unit/Plugin/ImageStyleGenerationTraitTest.php
+++ b/tests/src/Unit/Plugin/ImageStyleGenerationTraitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Unit\Plugin;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -20,6 +21,7 @@ use org\bovigo\vfs\vfsStream;
  */
 class ImageStyleGenerationTraitTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::generateImageStyle
    */
diff --git a/tests/src/Unit/Routing/FlysystemRoutesTest.php b/tests/src/Unit/Routing/FlysystemRoutesTest.php
index 1212658..517e5d6 100644
--- a/tests/src/Unit/Routing/FlysystemRoutesTest.php
+++ b/tests/src/Unit/Routing/FlysystemRoutesTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Unit\Routing;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Site\Settings;
@@ -17,25 +18,26 @@ use Drupal\flysystem\Routing\FlysystemRoutes;
  */
 class FlysystemRoutesTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\flysystem\FlysystemFactory
+   * @var FlysystemFactory
    */
   protected $factory;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\flysystem\Routing\FlysystemRoutes
+   * @var FlysystemRoutes
    */
   protected $router;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $container = new ContainerBuilder();
 
     $stream_wrapper = $this->prophesize(LocalStream::class);
