diff --git a/src/Authorization.php b/src/Authorization.php
index 3084062..e688495 100644
--- a/src/Authorization.php
+++ b/src/Authorization.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\twitter_profile_widget;
 
+use function GuzzleHttp\Psr7\str;
 use Drupal\Core\Cache\Cache;
 use GuzzleHttp\Client;
 use GuzzleHttp\Psr7;
@@ -50,7 +51,7 @@ class Authorization {
       if ($e->hasResponse()) {
         $messenger = \Drupal::messenger();
         $messenger->addMessage($e->getResponse()->getBody()->getContents(), 'error');
-        \Drupal::logger('twitter_profile_widget')->error(Psr7\str($e->getResponse()));
+        \Drupal::logger('twitter_profile_widget')->error(str($e->getResponse()));
         return FALSE;
       }
     }
diff --git a/src/EventSubscriber/TwitterWidgetSubscriber.php b/src/EventSubscriber/TwitterWidgetSubscriber.php
index f27b241..44173bb 100644
--- a/src/EventSubscriber/TwitterWidgetSubscriber.php
+++ b/src/EventSubscriber/TwitterWidgetSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\twitter_profile_widget\EventSubscriber;
 
+use Drupal\Core\Config\Config;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -9,7 +11,6 @@ use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\PageCache\RequestPolicyInterface;
 use Drupal\Core\PageCache\ResponsePolicyInterface;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
@@ -23,35 +24,35 @@ class TwitterWidgetSubscriber implements EventSubscriberInterface {
   /**
    * The language manager object for retrieving the correct language code.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * A config object for the system performance configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * A policy rule determining the cacheability of a request.
    *
-   * @var \Drupal\Core\PageCache\RequestPolicyInterface
+   * @var RequestPolicyInterface
    */
   protected $requestPolicy;
 
   /**
    * A policy rule determining the cacheability of the response.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicyInterface
+   * @var ResponsePolicyInterface
    */
   protected $responsePolicy;
 
   /**
    * The cache contexts manager service.
    *
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager
+   * @var CacheContextsManager
    */
   protected $cacheContexts;
 
@@ -65,15 +66,15 @@ class TwitterWidgetSubscriber implements EventSubscriberInterface {
   /**
    * Constructs a TwitterWidgetSubscriber object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager object for retrieving the correct language code.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
-   * @param \Drupal\Core\PageCache\RequestPolicyInterface $request_policy
+   * @param RequestPolicyInterface $request_policy
    *   A policy rule determining the cacheability of a request.
-   * @param \Drupal\Core\PageCache\ResponsePolicyInterface $response_policy
+   * @param ResponsePolicyInterface $response_policy
    *   A policy rule determining the cacheability of a response.
-   * @param \Drupal\Core\Cache\Context\CacheContextsManager $cache_contexts_manager
+   * @param CacheContextsManager $cache_contexts_manager
    *   The cache contexts manager service.
    * @param bool $http_response_debug_cacheability_headers
    *   (optional) Whether to send cacheability headers for debugging purposes.
@@ -90,10 +91,10 @@ class TwitterWidgetSubscriber implements EventSubscriberInterface {
   /**
    * Sets extra headers on successful responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
 
     $request = $event->getRequest();
     $response = $event->getResponse();
@@ -120,7 +121,7 @@ class TwitterWidgetSubscriber implements EventSubscriberInterface {
    *
    * This overrides the default logic provided by Internal Page Cache.
    *
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   A response object.
    */
   protected function setExpiresCacheLifetime(Response $response) {
diff --git a/src/Plugin/Field/FieldWidget/TwitterWidgetWidget.php b/src/Plugin/Field/FieldWidget/TwitterWidgetWidget.php
index 692fc30..486cda1 100644
--- a/src/Plugin/Field/FieldWidget/TwitterWidgetWidget.php
+++ b/src/Plugin/Field/FieldWidget/TwitterWidgetWidget.php
@@ -26,14 +26,14 @@ class TwitterWidgetWidget extends WidgetBase {
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Configuration Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;
 
@@ -44,15 +44,15 @@ class TwitterWidgetWidget extends WidgetBase {
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config_factory service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, MessengerInterface $messenger, ConfigFactory $config_factory) {
