diff --git a/forward.api.php b/forward.api.php
index 4c35c56..c0f0aea 100644
--- a/forward.api.php
+++ b/forward.api.php
@@ -13,7 +13,6 @@ use Drupal\user\UserInterface;
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Add tokens before replacements are made within a Forward email.
  *
@@ -21,7 +20,7 @@ use Drupal\user\UserInterface;
  * defined in its my_module.tokens.inc file, otherwise the tokens added
  * in this hook will never be replaced.
  *
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   A form_state being processed.  This parameter may be null.
  *
  * @return array
@@ -38,7 +37,7 @@ function hook_forward_token(FormStateInterface $form_state) {
  *
  * @param array $render_array
  *   The render array to alter.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   A form_state being processed.  Alterable.
  */
 function hook_forward_mail_pre_render_alter(array &$render_array, FormStateInterface &$form_state) {
@@ -50,7 +49,7 @@ function hook_forward_mail_pre_render_alter(array &$render_array, FormStateInter
  *
  * @param string $message_body
  *   The message content to alter.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   A form_state being processed.  Alterable.
  */
 function hook_forward_mail_post_render_alter(&$message_body, FormStateInterface &$form_state) {
@@ -60,11 +59,11 @@ function hook_forward_mail_post_render_alter(&$message_body, FormStateInterface
 /**
  * Post process the forward.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   The user account of the person who forwarded.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity that was forwarded.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   A form_state being processed.
  */
 function hook_forward_entity(UserInterface $account, EntityInterface $entity, FormStateInterface $form_state) {
diff --git a/src/Controller/ForwardController.php b/src/Controller/ForwardController.php
index c53dabc..12d8598 100644
--- a/src/Controller/ForwardController.php
+++ b/src/Controller/ForwardController.php
@@ -41,7 +41,7 @@ class ForwardController extends ControllerBase {
   /**
    * Build a Forward form when accessed as a separate page through the router.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being forwarded.
    *
    * @return array
diff --git a/src/Event/EntityForwardEvent.php b/src/Event/EntityForwardEvent.php
index b5a714b..c26ca35 100644
--- a/src/Event/EntityForwardEvent.php
+++ b/src/Event/EntityForwardEvent.php
@@ -16,14 +16,14 @@ class EntityForwardEvent extends GenericEvent {
   /**
    * The user account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   public $account;
 
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $entity;
 
diff --git a/src/Event/EntityPreforwardEvent.php b/src/Event/EntityPreforwardEvent.php
index ebb4ef9..3cde140 100644
--- a/src/Event/EntityPreforwardEvent.php
+++ b/src/Event/EntityPreforwardEvent.php
@@ -16,14 +16,14 @@ class EntityPreforwardEvent extends GenericEvent {
   /**
    * The user account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   public $account;
 
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $entity;
 
diff --git a/src/Form/ForwardForm.php b/src/Form/ForwardForm.php
index 183f3b6..d48406a 100644
--- a/src/Form/ForwardForm.php
+++ b/src/Form/ForwardForm.php
@@ -34,63 +34,63 @@ class ForwardForm extends FormBase implements BaseFormIdInterface {
   /**
    * The entity being forwarded.
    *
-   * @var Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;
 
   /**
    * The flood interface.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $floodInterface;
 
   /**
    * The account switcher service.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
    * The render service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -104,21 +104,21 @@ class ForwardForm extends FormBase implements BaseFormIdInterface {
   /**
    * The mail service.
    *
-   * @var \Drupal\Core\Mail\MailManager
+   * @var MailManager
    */
   protected $mailer;
 
   /**
    * The link generation service.
    *
-   * @var \Drupal\Core\Utility\LinkGenerator
+   * @var LinkGenerator
    */
   protected $linkGenerator;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
@@ -139,7 +139,7 @@ class ForwardForm extends FormBase implements BaseFormIdInterface {
   /**
    * Constructs a Forward Form.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being forwarded.
    */
   public function __construct(EntityInterface $entity) {
@@ -149,29 +149,29 @@ class ForwardForm extends FormBase implements BaseFormIdInterface {
   /**
    * Inject services.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Utility\Token $token_service
+   * @param Token $token_service
    *   The token service.
-   * @param \Drupal\Core\Flood\FloodInterface $flood_interface
+   * @param FloodInterface $flood_interface
    *   The flood interface.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The render service.
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher
+   * @param ContainerAwareEventDispatcher $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Mail\MailManager $mailer
+   * @param MailManager $mailer
    *   The mail service.
-   * @param \Drupal\Core\Utility\LinkGenerator $link_generator
+   * @param LinkGenerator $link_generator
    *   The link generation service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    * @param Egulias\EmailValidator\EmailValidator
    *   The email validation service.
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 822591e..c31aea8 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -19,34 +19,34 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle information manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $bundleInfoManager;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;
 
   /**
    * Constructs a Forward settings form.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $bundle_info
+   * @param EntityTypeBundleInfo $bundle_info
    *   The entity type bundle information manager.
-   * @param \Drupal\Core\File\FileSystem $file_system
+   * @param FileSystem $file_system
    *   The file system service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfo $bundle_info, FileSystem $file_system) {
diff --git a/src/ForwardAccessChecker.php b/src/ForwardAccessChecker.php
index 1023221..9c82e09 100644
--- a/src/ForwardAccessChecker.php
+++ b/src/ForwardAccessChecker.php
@@ -13,14 +13,14 @@ class ForwardAccessChecker implements ForwardAccessCheckerInterface {
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Constructs a ForwardAccessChecker object.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user service.
    */
   public function __construct(AccountProxyInterface $current_user) {
diff --git a/src/ForwardAccessCheckerInterface.php b/src/ForwardAccessCheckerInterface.php
index 9ada950..ef4d2c4 100644
--- a/src/ForwardAccessCheckerInterface.php
+++ b/src/ForwardAccessCheckerInterface.php
@@ -14,7 +14,7 @@ interface ForwardAccessCheckerInterface {
    *
    * @param array $settings
    *   Array of settings.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity for which the link is being built.
    * @param string $view_mode
    *   The view mode to check.
diff --git a/src/ForwardFormBuilder.php b/src/ForwardFormBuilder.php
index 6c48d60..7aea12e 100644
--- a/src/ForwardFormBuilder.php
+++ b/src/ForwardFormBuilder.php
@@ -28,91 +28,91 @@ class ForwardFormBuilder implements ForwardFormBuilderInterface {
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;
 
   /**
    * The flood interface.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $floodInterface;
 
   /**
    * The account switcher service.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
    * The render service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * The mail service.
    *
-   * @var \Drupal\Core\Mail\MailManager
+   * @var MailManager
    */
   protected $mailer;
 
   /**
    * The link generation service.
    *
-   * @var \Drupal\Core\Utility\LinkGenerator
+   * @var LinkGenerator
    */
   protected $linkGenerator;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
@@ -126,31 +126,31 @@ class ForwardFormBuilder implements ForwardFormBuilderInterface {
   /**
    * Constructs a ForwardFormBuilder object.
    *
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Utility\Token $token_service
+   * @param Token $token_service
    *   The token service.
-   * @param \Drupal\Core\Flood\FloodInterface $flood_interface
+   * @param FloodInterface $flood_interface
    *   The flood interface.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The render service.
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher
+   * @param ContainerAwareEventDispatcher $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Mail\MailManager $mailer
+   * @param MailManager $mailer
    *   The mail service.
-   * @param \Drupal\Core\Utility\LinkGenerator $link_generator
+   * @param LinkGenerator $link_generator
    *   The link generation service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    * @param Egulias\EmailValidator\EmailValidator
    *   The email validation service.
diff --git a/src/ForwardFormBuilderInterface.php b/src/ForwardFormBuilderInterface.php
index c3c45d3..0e0f993 100644
--- a/src/ForwardFormBuilderInterface.php
+++ b/src/ForwardFormBuilderInterface.php
@@ -12,7 +12,7 @@ interface ForwardFormBuilderInterface {
   /**
    * Builds a Forward inline form for a given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity for which the form is being built.
    * @param array $settings
    *   Array of settings.
diff --git a/src/ForwardLinkBuilder.php b/src/ForwardLinkBuilder.php
index 334329c..baea644 100644
--- a/src/ForwardLinkBuilder.php
+++ b/src/ForwardLinkBuilder.php
@@ -17,32 +17,32 @@ class ForwardLinkBuilder implements ForwardLinkBuilderInterface {
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;
 
   /**
    * The render service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The link generation service.
    *
-   * @var \Drupal\Core\Utility\LinkGenerator
+   * @var LinkGenerator
    */
   protected $linkGenerator;
 
   /**
    * Constructs a ForwardLinkBuilder object.
    *
-   * @param \Drupal\Core\Utility\Token $token_service
+   * @param Token $token_service
    *   The token service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The render service.
-   * @param \Drupal\Core\Utility\LinkGenerator $link_generator
+   * @param LinkGenerator $link_generator
    *   The link generation service.
    */
   public function __construct(Token $token_service, RendererInterface $renderer, LinkGenerator $link_generator) {
@@ -73,7 +73,7 @@ class ForwardLinkBuilder implements ForwardLinkBuilderInterface {
 
     $html = FALSE;
     // Output the correct style of link.
-    $default_icon = drupal_get_path('module', 'forward') . '/images/forward.gif';
+    $default_icon = \Drupal::service('extension.list.module')->getPath('forward') . '/images/forward.gif';
     $custom_icon = $settings['forward_link_icon'];
     $link_style = $settings['forward_link_style'];
     switch ($link_style) {
diff --git a/src/ForwardLinkBuilderInterface.php b/src/ForwardLinkBuilderInterface.php
index 8dea464..2bc3617 100644
--- a/src/ForwardLinkBuilderInterface.php
+++ b/src/ForwardLinkBuilderInterface.php
@@ -12,7 +12,7 @@ interface ForwardLinkBuilderInterface {
   /**
    * Builds a Forward link for a given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity for which the link is being built.
    * @param array $settings
    *   Array of settings.
diff --git a/src/Plugin/Block/ForwardFormBlock.php b/src/Plugin/Block/ForwardFormBlock.php
index 5333f68..c3b4b49 100644
--- a/src/Plugin/Block/ForwardFormBlock.php
+++ b/src/Plugin/Block/ForwardFormBlock.php
@@ -28,28 +28,28 @@ class ForwardFormBlock extends BlockBase implements ContainerFactoryPluginInterf
   /**
    * The access checker service.
    *
-   * @var \Drupal\forward\ForwardAccessCheckerInterface
+   * @var ForwardAccessCheckerInterface
    */
   protected $accessChecker;
 
   /**
    * The form builder service.
    *
-   * @var \Drupal\forward\ForwardFormBuilderInterface
+   * @var ForwardFormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The link builder service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The entity being forwarded.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
@@ -69,13 +69,13 @@ class ForwardFormBlock extends BlockBase implements ContainerFactoryPluginInterf
    *   The plugin Id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\forward\ForwardAccessCheckerInterface $access_checker
+   * @param ForwardAccessCheckerInterface $access_checker
    *   The Forward access checker interface.
-   * @param \Drupal\forward\ForwardFormBuilderInterface $form_builder
+   * @param ForwardFormBuilderInterface $form_builder
    *   The Forward form builder interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The core configuration factory.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The core route matcher.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ForwardAccessCheckerInterface $access_checker, ForwardFormBuilderInterface $form_builder, ConfigFactoryInterface $config_factory, RouteMatchInterface $route_match) {
diff --git a/src/Plugin/Block/ForwardLinkBlock.php b/src/Plugin/Block/ForwardLinkBlock.php
index 59a93e9..a11eaee 100644
--- a/src/Plugin/Block/ForwardLinkBlock.php
+++ b/src/Plugin/Block/ForwardLinkBlock.php
@@ -28,28 +28,28 @@ class ForwardLinkBlock extends BlockBase implements ContainerFactoryPluginInterf
   /**
    * The access checker service.
    *
-   * @var \Drupal\forward\ForwardAccessCheckerInterface
+   * @var ForwardAccessCheckerInterface
    */
   protected $accessChecker;
 
   /**
    * The link builder service.
    *
-   * @var \Drupal\forward\ForwardLinkBuilderInterface
+   * @var ForwardLinkBuilderInterface
    */
   protected $linkBuilder;
 
   /**
    * The link builder service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The entity being forwarded.
    *
-   * @var Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
@@ -69,13 +69,13 @@ class ForwardLinkBlock extends BlockBase implements ContainerFactoryPluginInterf
    *   The plugin Id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\forward\ForwardAccessCheckerInterface $access_checker
+   * @param ForwardAccessCheckerInterface $access_checker
    *   The Forward access checker interface.
-   * @param \Drupal\forward\ForwardLinkBuilderInterface $link_builder
+   * @param ForwardLinkBuilderInterface $link_builder
    *   The Forward link builder interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The core configuration factory.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The core route matcher.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ForwardAccessCheckerInterface $access_checker, ForwardLinkBuilderInterface $link_builder, ConfigFactoryInterface $config_factory, RouteMatchInterface $route_match) {
diff --git a/src/Plugin/migrate/destination/ForwardDestinationBase.php b/src/Plugin/migrate/destination/ForwardDestinationBase.php
index b7b8d4a..654de08 100644
--- a/src/Plugin/migrate/destination/ForwardDestinationBase.php
+++ b/src/Plugin/migrate/destination/ForwardDestinationBase.php
@@ -33,7 +33,7 @@ abstract class ForwardDestinationBase extends DestinationBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration) {
diff --git a/src/Plugin/views/field/ForwardLink.php b/src/Plugin/views/field/ForwardLink.php
index d423d72..564e70d 100644
--- a/src/Plugin/views/field/ForwardLink.php
+++ b/src/Plugin/views/field/ForwardLink.php
@@ -22,14 +22,14 @@ class ForwardLink extends FieldPluginBase implements ContainerFactoryPluginInter
   /**
    * The access checker service.
    *
-   * @var \Drupal\forward\ForwardAccessCheckerInterface
+   * @var ForwardAccessCheckerInterface
    */
   protected $accessChecker;
 
   /**
    * The link builder service.
    *
-   * @var \Drupal\forward\ForwardLinkBuilderInterface
+   * @var ForwardLinkBuilderInterface
    */
   protected $linkBuilder;
 
@@ -49,11 +49,11 @@ class ForwardLink extends FieldPluginBase implements ContainerFactoryPluginInter
    *   The plugin Id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\forward\ForwardAccessCheckerInterface $access_checker
+   * @param ForwardAccessCheckerInterface $access_checker
    *   The Forward access checker interface.
-   * @param \Drupal\forward\ForwardLinkBuilderInterface $link_builder
+   * @param ForwardLinkBuilderInterface $link_builder
    *   The Forward link builder interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The core configuration factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ForwardAccessCheckerInterface $access_checker, ForwardLinkBuilderInterface $link_builder, ConfigFactoryInterface $config_factory) {
diff --git a/src/Tests/AccessCheckerTest.php b/src/Tests/AccessCheckerTest.php
index f20ff42..791b88f 100644
--- a/src/Tests/AccessCheckerTest.php
+++ b/src/Tests/AccessCheckerTest.php
@@ -20,16 +20,22 @@ class AccessCheckerTest extends ForwardTestBase {
       'forward_node_types[article]' => 'article',
       'forward_view_modes[full]' => 'full',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('node/' . $article->id());
-    $this->assertText(t('Email this article'), 'The article has a Forward link.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Email this article'));
 
     // Users without "access forward" permission should not see the Forward link.
     $this->drupalLogin($this->webUser);
     $this->drupalGet('node/' . $article->id());
-    $this->assertNoText(t('Email this article'), 'The article does not have a Forward link for a user without access forward permission.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Email this article'));
 
     // Users should not see the Forward link on full nodes when Forward is configured to display on Teasers only.
     $this->drupalLogin($this->adminUser);
@@ -37,22 +43,31 @@ class AccessCheckerTest extends ForwardTestBase {
     $edit = [
       'forward_view_modes[full]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('node/' . $article->id());
-    $this->assertNoText(t('Email this article'), 'The article does not have a Forward link on a full article node when configured for teasers only.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Email this article'));
 
     // Basic pages should not have the Forward link.
     $page = $this->drupalCreateNode(['type' => 'page']);
     $this->drupalGet('node/' . $page->id());
-    $this->assertNoText(t('Email this basic page'), 'The basic page does not have a Forward link.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Email this basic page'));
 
     // Users should not have the Forward link.
     $this->drupalLogin($this->adminUser);
     $user = $this->drupalCreateUser(['access content']);
     $this->drupalGet('user/' . $user->id());
-    $this->assertNoText(t('Email this user'), 'The user does not have a Forward link.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Email this user'));
 
     // Add the Forward link to users.
     $this->drupalGet('admin/config/user-interface/forward');
@@ -60,27 +75,36 @@ class AccessCheckerTest extends ForwardTestBase {
       'forward_view_modes[full]' => 'full',
       'forward_entity_types[user]' => 'user',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $user = $this->drupalCreateUser(['access content']);
     $this->drupalGet('user/' . $user->id());
-    $this->assertText(t('Email this user'), 'The user has a Forward link after changing Forward settings.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Email this user'));
 
     // Remove the Forward link from articles.
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('node/' . $article->id());
-    $this->assertText(t('Email this article'), 'The article has a Forward link.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Email this article'));
 
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/user-interface/forward');
     $edit = [
       'forward_node_types[article]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $this->drupalLogin($this->forwardUser);
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalGet('node/' . $article->id());
-    $this->assertNoText(t('Email this article'), 'The article does not have a Forward link after configured for Users only.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Email this article'));
   }
 
 }
diff --git a/src/Tests/ForwardFormTest.php b/src/Tests/ForwardFormTest.php
index 2be2b03..0eaca58 100644
--- a/src/Tests/ForwardFormTest.php
+++ b/src/Tests/ForwardFormTest.php
@@ -21,15 +21,21 @@ class ForwardFormTest extends ForwardTestBase {
       'forward_view_modes[full]' => 'full',
       'forward_personal_message' => 2,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
 
     // Navigate to the Forward Form.
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('node/' . $article->id());
-    $this->assertText(t('Email this article'), t('The article has a Forward link.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Email this article'));
     $this->drupalGet('/forward/node/' . $article->id());
-    $this->assertText(t('Forward this article to a friend'), 'The Forward form displays for an article.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Forward this article to a friend'));
 
     // Submit the Forward form.
     $edit = [
@@ -37,8 +43,11 @@ class ForwardFormTest extends ForwardTestBase {
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
-    $this->assertText(t('Thank you for spreading the word about Drupal.'), 'The Forward form displays a thank you message after submit.');
+    $this->submitForm($edit, t('Send Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Thank you for spreading the word about Drupal.'));
 
     // Submit the Forward form without a recipient.
     $this->drupalGet('/forward/node/' . $article->id());
@@ -46,8 +55,11 @@ class ForwardFormTest extends ForwardTestBase {
       'name' => 'Test Forwarder',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
-    $this->assertText(t('Send to field is required.'), 'The Forward form displays an error message when the recipient is blank.');
+    $this->submitForm($edit, t('Send Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Send to field is required.'));
 
     // Submit the Forward form without a personal message when required.
     $this->drupalLogin($this->adminUser);
@@ -55,15 +67,18 @@ class ForwardFormTest extends ForwardTestBase {
     $edit = [
       'forward_personal_message' => 2,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('/forward/node/' . $article->id());
     $edit = [
       'name' => 'Test Forwarder',
       'recipient' => 'test@test.com',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
-    $this->assertText(t('Your personal message field is required.'), 'The Forward form displays an error message when the message is blank and one is required.');
+    $this->submitForm($edit, t('Send Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Your personal message field is required.'));
 
     // Submit the Forward form without a personal message when optional.
     $this->drupalLogin($this->adminUser);
@@ -71,15 +86,18 @@ class ForwardFormTest extends ForwardTestBase {
     $edit = [
       'forward_personal_message' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('/forward/node/' . $article->id());
     $edit = [
       'name' => 'Test Forwarder',
       'recipient' => 'test@test.com',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
-    $this->assertNoText(t('Your personal message field is required.'), 'The Forward form does not display an error message when the message is blank and optional.');
+    $this->submitForm($edit, t('Send Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Your personal message field is required.'));
   }
 
 }
diff --git a/src/Tests/ForwardTestBase.php b/src/Tests/ForwardTestBase.php
index bd8e4a0..d1e9d30 100644
--- a/src/Tests/ForwardTestBase.php
+++ b/src/Tests/ForwardTestBase.php
@@ -3,6 +3,7 @@
 namespace Drupal\forward\Tests;
 
 
+use Drupal\user\Entity\User;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -27,28 +28,28 @@ abstract class ForwardTestBase extends BrowserTestBase {
   /**
    * A simple user with 'access content' permission.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $webUser;
 
   /**
    * A user with 'access content' and 'access forward' permissions.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $forwardUser;
 
   /**
    * An user with permissions to administer Mollom.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * Perform any initial set up tasks that run before every test method.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Basic page and Article node types.
diff --git a/src/Tests/PermissionsTest.php b/src/Tests/PermissionsTest.php
index 5eb6102..d44eed8 100644
--- a/src/Tests/PermissionsTest.php
+++ b/src/Tests/PermissionsTest.php
@@ -16,30 +16,36 @@ class PermissionsTest extends ForwardTestBase {
     // Users with access content permission cannot change settings.
     $this->drupalLogin($this->webUser);
     $this->drupalGet('admin/config/user-interface/forward');
-    $this->assertResponse(403, 'Users with access content permission cannot change settings.');
+    $this->assertSession()->statusCodeEquals(403, 'Users with access content permission cannot change settings.');
 
     // Users with access forward permission cannot change settings.
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('admin/config/user-interface/forward');
-    $this->assertResponse(403, 'Users with access forward permission cannot change settings.');
+    $this->assertSession()->statusCodeEquals(403, 'Users with access forward permission cannot change settings.');
 
     // Users with administer forward permission can change settings.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/user-interface/forward');
-    $this->assertResponse(200, 'Users with administer forward permission can change settings.');
+    $this->assertSession()->statusCodeEquals(200, 'Users with administer forward permission can change settings.');
 
     // Users without override email address permission cannot change their email address on the Forward form.
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('/forward/node/' . $article->id());
-    $this->assertNoText(t('Your email address'), 'Users without override email address permission cannot change their email address on the Forward form.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Your email address'));
 
     // Users with override email address permission can change their email address on the Forward form.
     $overrideUser = $this->drupalCreateUser(['access content', 'access forward', 'override email address', 'override flood control']);
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($overrideUser);
     $this->drupalGet('/forward/node/' . $article->id());
-    $this->assertText(t('Your email address'), 'Users with override email address permission can change their email address on the Forward form.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Your email address'));
 
     // Set flood control limit to 1.
     $this->drupalLogin($this->adminUser);
@@ -47,7 +53,7 @@ class PermissionsTest extends ForwardTestBase {
     $edit = [
       'forward_flood_control_limit' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
 
     // Users without override flood control permission cannot do more than 1 forward in an hour.
     $this->drupalLogin($this->forwardUser);
@@ -57,15 +63,18 @@ class PermissionsTest extends ForwardTestBase {
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
+    $this->submitForm($edit, t('Send Message'));
     $this->drupalGet('/forward/node/' . $article->id());
     $edit = [
       'name' => 'Test Forwarder',
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
-    $this->assertNoText(t('Thank you for spreading the word about Drupal.'), 'Users without override flood control permission cannot do more than 1 forward in an hour.');
+    $this->submitForm($edit, t('Send Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Thank you for spreading the word about Drupal.'));
 
     // Users with override flood control permission can do more than 1 forward in an hour.
     $this->drupalLogin($overrideUser);
@@ -75,15 +84,18 @@ class PermissionsTest extends ForwardTestBase {
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
+    $this->submitForm($edit, t('Send Message'));
     $this->drupalGet('/forward/node/' . $article->id());
     $edit = [
       'name' => 'Test Forwarder',
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
-    $this->assertText(t('Thank you for spreading the word about Drupal.'), 'Users with override flood control permission can do more than 1 forward in an hour.');
+    $this->submitForm($edit, t('Send Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Thank you for spreading the word about Drupal.'));
   }
 
 }
