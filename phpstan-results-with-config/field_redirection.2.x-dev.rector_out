modules/contrib/field_redirection/src/FieldRedirectionResult.php
modules/contrib/field_redirection/src/FieldRedirectionResultBuilder.php
modules/contrib/field_redirection/src/Plugin/Field/FieldFormatter/FieldRedirectionFormatter.php
modules/contrib/field_redirection/tests/src/Functional/FormatterConfigurationTest.php
modules/contrib/field_redirection/tests/src/Functional/FormatterRedirectTest.php
modules/contrib/field_redirection/tests/src/Kernel/FieldRedirectionResultBuilderLinkTest.php
modules/contrib/field_redirection/tests/src/Traits/FieldRedirectionTestTrait.php
modules/contrib/field_redirection/tests/src/Unit/FieldRedirectionResultUnitTest.php

8 files with changes
====================

1) modules/contrib/field_redirection/tests/src/Unit/FieldRedirectionResultUnitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_redirection\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Url;
 use Drupal\Core\Utility\UnroutedUrlAssemblerInterface;
 use Drupal\field_redirection\FieldRedirectionResult;
@@ @@
  */
 class FieldRedirectionResultUnitTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::fromUrl
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_redirection/tests/src/Traits/FieldRedirectionTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_redirection\Traits;

+use Drupal\node\Entity\NodeType;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\link\LinkItemInterface;
@@ @@
   /**
    * Sets up a content type with a link field.
    *
-   * @return \Drupal\node\Entity\NodeType
+   * @return NodeType
    *   Created content type.
    */
   public function setupContentTypeAndField() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/field_redirection/tests/src/Kernel/FieldRedirectionResultBuilderLinkTest.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installEntitySchema('entity_test');
@@ @@
    * @param array $values
    *   Optional values to create with.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   protected function createTestEntity(array $values = []): EntityInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/field_redirection/tests/src/Functional/FormatterRedirectTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_redirection\Functional;

+use Drupal\node\Entity\NodeType;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The test content type to add fields.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $testContentType;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Setup test content type and add a 'link' field.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/field_redirection/tests/src/Functional/FormatterConfigurationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_redirection\Functional;

+use Drupal\node\Entity\NodeType;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\field_redirection\Traits\FieldRedirectionTestTrait;

@@ @@
   /**
    * The test content type to add fields.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $testContentType;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalLogin($this->rootUser);
@@ @@
     $edit = [
       'fields[url][region]' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Your settings have been saved');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your settings have been saved');

     // Verify the 'danger' message displays correctly.
     $this->assertSession()
@@ @@
     $edit = [
       'display_modes_custom[full]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Your settings have been saved');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your settings have been saved');

     // Make the field display.
     $this->drupalGet('admin/structure/types/manage/' . $this->testContentType->id() . '/display/full');
@@ @@
     $edit = [
       'fields[url][region]' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Your settings have been saved');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your settings have been saved');

     // Confirm that the danger message does not display.
     $this->assertSession()
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/field_redirection/src/Plugin/Field/FieldFormatter/FieldRedirectionFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_redirection\Plugin\Field\FieldFormatter;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\field_redirection\FieldRedirectionResultBuilder;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\field_redirection\FieldRedirectionResult;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The redirect result builder.
    *
-   * @var \Drupal\field_redirection\FieldRedirectionResultBuilder
+   * @var FieldRedirectionResultBuilder
    */
   protected $redirectResultBuilder;

@@ @@
   /**
    * The current Request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
       $response_code = $settings['code'];
     }

-    /** @var \Drupal\field_redirection\FieldRedirectionResult $result */
+    /** @var FieldRedirectionResult $result */
     $result = $this->redirectResultBuilder->buildResult($items, $this->request, $this->currentUser, $settings);
     if ($result->shouldRedirect()) {
       $result->asRedirectResponse($response_code)->send();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/field_redirection/src/FieldRedirectionResultBuilder.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Path Matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs a new FieldRedirectionResultBuilder.
    *
-   * @param \Drupal\Core\Path\PathMatcherInterface $pathMatcher
+   * @param PathMatcherInterface $pathMatcher
    *   Path matcher.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
    */
   public function __construct(PathMatcherInterface $pathMatcher, Token $token, StateInterface $state) {
@@ @@
   /**
    * Determine whether we should deny redirecting.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field items.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    * @param array $settings
    *   The field settings.
@@ @@

     // Get the URL to redirect to.
     if (!$items->isEmpty()) {
-      /** @var \Drupal\Core\Url $redirect_url */
+      /** @var Url $redirect_url */
       $redirect_url = $this->getUrl($items);
     }
     // If no URL was provided, and the user does not have permission to bypass
@@ @@
   /**
    * Builds a redirection result for a given set of values.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field items.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    * @param array $settings
    *   The field settings.
    *
-   * @return \Drupal\field_redirection\FieldRedirectionResult
+   * @return FieldRedirectionResult
    *   The redirection result.
    */
   public function buildResult(FieldItemListInterface $items, Request $request, AccountInterface $account, array $settings = []) {
@@ @@
   /**
    * Provide the destination URL for the redirect.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field items.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object representing the redirect destination.
    *
    * @throws \LogicException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/field_redirection/src/FieldRedirectionResult.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * URL to redirect to.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $redirectUrl;

@@ @@
    * @param array $headers
    *   Additional headers.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect response.
    *
    * @throws \LogicException
@@ @@
   /**
    * Gets redirect URL.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The url object.
    */
   protected function getRedirectUrl() {
@@ @@
   /**
    * Factory method to create from a URL object.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL object.
    *
    * @return \Drupal\field_redirection\FieldRedirectionResult
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 8 files have been changed by Rector                                       

