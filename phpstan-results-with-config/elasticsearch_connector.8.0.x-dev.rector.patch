diff --git a/elasticsearch_connector.api.php b/elasticsearch_connector.api.php
index c352340..aa8c296 100644
--- a/elasticsearch_connector.api.php
+++ b/elasticsearch_connector.api.php
@@ -11,13 +11,12 @@ use Drupal\elasticsearch_connector\Entity\Cluster;
  * @file
  * Hooks provided by the ElasticSearch Connector module.
  */
-
 /**
  * Modify the connector library options.
  *
  * @param array $options
  *   Library options.
- * @param \Drupal\elasticsearch_connector\Entity\Cluster $cluster
+ * @param Cluster $cluster
  *   Cluster entity.
  */
 function hook_elasticsearch_connector_load_library_options_alter(array &$options, Cluster $cluster) {
diff --git a/elasticsearch_connector.module b/elasticsearch_connector.module
index fa50959..3916913 100644
--- a/elasticsearch_connector.module
+++ b/elasticsearch_connector.module
@@ -107,8 +107,8 @@ function _elasticsearch_ec_clusters_process(array $element, array &$form_state,
  */
 function _elasticsearch_ec_index_attached() {
   return array(
-    'js' => array(drupal_get_path('module', 'elasticsearch') . '/js/ec-index.js'),
-    'css' => array(drupal_get_path('module', 'elasticsearch') . '/css/ec-index.css'),
+    'js' => array(\Drupal::service('extension.list.module')->getPath('elasticsearch') . '/js/ec-index.js'),
+    'css' => array(\Drupal::service('extension.list.module')->getPath('elasticsearch') . '/css/ec-index.css'),
     'library' => array(array('system', 'ui.dialog')),
   );
 }
@@ -350,7 +350,7 @@ function elasticsearch_connector_redirect_page($cluster, $index_name) {
   // Add appropriate javascript that will be used by the parent page to fill in
   // the required data.
   if (elasticsearch_in_dialog() && isset($_GET['elasticsearch-dialog-close'])) {
-    drupal_add_js(drupal_get_path('module', 'elasticsearch') . '/js/ec-index-child.js');
+    drupal_add_js(\Drupal::service('extension.list.module')->getPath('elasticsearch') . '/js/ec-index-child.js');
     drupal_add_js(
       array(
         'elasticsearch' =>
@@ -439,7 +439,7 @@ function elasticsearch_connector_index_valid_load($index_name) {
 /**
  * Get the nodes stats from elasticsearch server.
  *
- * @param \Elasticsearch\Client $client
+ * @param Client $client
  *   ElasticSearch client object.
  *
  * @return array
@@ -462,7 +462,7 @@ function elasticsearch_connector_get_cluster_nodes_stat(Client $client) {
  * TODO: This should be changed to check all data Nodes only but for now lets
  * check all of them.
  *
- * @param \Elasticsearch\Client $client
+ * @param Client $client
  *   Fully loaded Client object.
  * @param string $plugin_name
  *   Plugin name.
diff --git a/modules/elasticsearch_connector_views/src/Plugin/views/field/ElasticsearchViewsEntity.php b/modules/elasticsearch_connector_views/src/Plugin/views/field/ElasticsearchViewsEntity.php
index 3c2a86e..289c93b 100644
--- a/modules/elasticsearch_connector_views/src/Plugin/views/field/ElasticsearchViewsEntity.php
+++ b/modules/elasticsearch_connector_views/src/Plugin/views/field/ElasticsearchViewsEntity.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\elasticsearch_connector_views\Plugin\views\field;
 
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -23,7 +25,7 @@ class ElasticsearchViewsEntity extends ElasticsearchViewsStandard {
   /**
    * The entity display repository manager.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface|null
+   * @var EntityDisplayRepositoryInterface|null
    */
   protected $entityDisplayRepository;
 
@@ -42,7 +44,7 @@ class ElasticsearchViewsEntity extends ElasticsearchViewsStandard {
   /**
    * Retrieves the entity display repository.
    *
-   * @return \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @return EntityDisplayRepositoryInterface
    *   The entity entity display repository.
    */
   public function getEntityDisplayRepository() {
@@ -52,7 +54,7 @@ class ElasticsearchViewsEntity extends ElasticsearchViewsStandard {
   /**
    * Sets the entity display repository.
    *
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The new entity display repository.
    *
    * @return $this
@@ -217,7 +219,7 @@ class ElasticsearchViewsEntity extends ElasticsearchViewsStandard {
    * @param $item
    *   Item parameter.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   Returns rendered item.
    *
    * @throws \Exception
@@ -232,13 +234,13 @@ class ElasticsearchViewsEntity extends ElasticsearchViewsStandard {
   /**
    * Gets items.
    *
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    *   ResultRow parameter.
    *
    * @return array
    *   Returns array of items.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function getItems(ResultRow $values) {
     $property_path = $this->getCombinedPropertyPath();
@@ -260,7 +262,7 @@ class ElasticsearchViewsEntity extends ElasticsearchViewsStandard {
   /**
    * Creates an item for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array|null
@@ -268,7 +270,7 @@ class ElasticsearchViewsEntity extends ElasticsearchViewsStandard {
    *   array with at least "value" set, to either a string or a render array,
    *   and possibly also additional alter options.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   protected function getItem(EntityInterface $entity) {
     $bundle = $entity->bundle();
diff --git a/modules/elasticsearch_connector_views/src/Plugin/views/field/ElasticsearchViewsEntityField.php b/modules/elasticsearch_connector_views/src/Plugin/views/field/ElasticsearchViewsEntityField.php
index 969fc93..055e769 100644
--- a/modules/elasticsearch_connector_views/src/Plugin/views/field/ElasticsearchViewsEntityField.php
+++ b/modules/elasticsearch_connector_views/src/Plugin/views/field/ElasticsearchViewsEntityField.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\elasticsearch_connector_views\Plugin\views\field;
 
+use Drupal\views\Plugin\views\field\FieldHandlerInterface;
 use Drupal\Core\Form\FormHelper;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
@@ -34,7 +35,7 @@ class ElasticsearchViewsEntityField extends EntityField {
   /**
    * Fallback handler for this field, if Field API rendering should not be used.
    *
-   * @var \Drupal\views\Plugin\views\field\FieldHandlerInterface
+   * @var FieldHandlerInterface
    */
   protected $fallbackHandler;
 
diff --git a/modules/elasticsearch_connector_views/src/Plugin/views/field/ElasticsearchViewsFieldTrait.php b/modules/elasticsearch_connector_views/src/Plugin/views/field/ElasticsearchViewsFieldTrait.php
index 2dc1ceb..81a1eaa 100644
--- a/modules/elasticsearch_connector_views/src/Plugin/views/field/ElasticsearchViewsFieldTrait.php
+++ b/modules/elasticsearch_connector_views/src/Plugin/views/field/ElasticsearchViewsFieldTrait.php
@@ -33,7 +33,7 @@ trait ElasticsearchViewsFieldTrait {
   /**
    * Gets an array of items for the field.
    *
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    *   The result row object containing the values.
    *
    * @return array
diff --git a/modules/elasticsearch_connector_views/src/Plugin/views/filter/ElasticsearchViewsFulltextSearch.php b/modules/elasticsearch_connector_views/src/Plugin/views/filter/ElasticsearchViewsFulltextSearch.php
index 9599f26..d2db6fb 100644
--- a/modules/elasticsearch_connector_views/src/Plugin/views/filter/ElasticsearchViewsFulltextSearch.php
+++ b/modules/elasticsearch_connector_views/src/Plugin/views/filter/ElasticsearchViewsFulltextSearch.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\elasticsearch_connector_views\Plugin\views\filter;
 
+use Drupal\elasticsearch_connector\Entity\Cluster;
+use Drupal\elasticsearch_connector\ElasticSearch\ClientManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\filter\FilterPluginBase;
 use Drupal\views\Views;
@@ -79,9 +81,9 @@ class ElasticsearchViewsFulltextSearch extends FilterPluginBase {
     $index = $data['table']['base']['index'];
     $cluster_id = $data['table']['base']['cluster_id'];
 
-    /** @var \Drupal\elasticsearch_connector\Entity\Cluster $elasticsearchCluster */
+    /** @var Cluster $elasticsearchCluster */
     $elasticsearchCluster = \Drupal::service('entity.manager')->getStorage('elasticsearch_cluster')->load($cluster_id);
-    /** @var \Drupal\elasticsearch_connector\ElasticSearch\ClientManagerInterface $clientManager */
+    /** @var ClientManagerInterface $clientManager */
     $clientManager = \Drupal::service('elasticsearch_connector.client_manager');
     $client = $clientManager->getClientForCluster($elasticsearchCluster);
 
diff --git a/modules/elasticsearch_connector_views/src/Plugin/views/query/ElasticsearchViewsQuery.php b/modules/elasticsearch_connector_views/src/Plugin/views/query/ElasticsearchViewsQuery.php
index f9cf7fe..dd96876 100644
--- a/modules/elasticsearch_connector_views/src/Plugin/views/query/ElasticsearchViewsQuery.php
+++ b/modules/elasticsearch_connector_views/src/Plugin/views/query/ElasticsearchViewsQuery.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\elasticsearch_connector_views\Plugin\views\query;
 
+use Drupal\elasticsearch_connector\Entity\Cluster;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
@@ -49,7 +50,7 @@ class ElasticsearchViewsQuery extends QueryPluginBase {
   /**
    * The Elastic search cluster.
    *
-   * @var \Drupal\elasticsearch_connector\Entity\Cluster
+   * @var Cluster
    */
   protected $elasticsearchCluster;
 
@@ -104,14 +105,14 @@ class ElasticsearchViewsQuery extends QueryPluginBase {
   /**
    * The logger to use for log messages.
    *
-   * @var \Psr\Log\LoggerInterface|null
+   * @var LoggerInterface|null
    */
   protected $logger;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -122,7 +123,7 @@ class ElasticsearchViewsQuery extends QueryPluginBase {
     /** @var static $plugin */
     $plugin = parent::create($container, $configuration, $plugin_id, $plugin_definition);
 
-    /** @var \Psr\Log\LoggerInterface $logger */
+    /** @var LoggerInterface $logger */
     $logger = $container->get('logger.factory')
       ->get('elasticsearch_connector_views');
     $plugin->setLogger($logger);
@@ -136,7 +137,7 @@ class ElasticsearchViewsQuery extends QueryPluginBase {
   /**
    * Retrieves the logger to use for log messages.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger to use.
    */
   public function getLogger() {
@@ -146,7 +147,7 @@ class ElasticsearchViewsQuery extends QueryPluginBase {
   /**
    * Sets the logger to use for log messages.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The new logger.
    *
    * @return $this
@@ -159,7 +160,7 @@ class ElasticsearchViewsQuery extends QueryPluginBase {
   /**
    * Sets the entity type manager service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager) {
@@ -214,7 +215,7 @@ class ElasticsearchViewsQuery extends QueryPluginBase {
    *   The relationship to ensure the table links to. Each relationship will
    *   get a unique instance of the table being added. If not specified,
    *   will be the primary table.
-   * @param \Drupal\views\Plugin\views\join\JoinPluginBase $join
+   * @param JoinPluginBase $join
    *   A Join object (or derived object) to join the alias in.
    *
    * @return null
diff --git a/src/Controller/ClusterListBuilder.php b/src/Controller/ClusterListBuilder.php
index f0dce03..56b35ce 100644
--- a/src/Controller/ClusterListBuilder.php
+++ b/src/Controller/ClusterListBuilder.php
@@ -23,21 +23,21 @@ class ClusterListBuilder extends ConfigEntityListBuilder {
   /**
    * Storage interface for the elasticsearch_index entity.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $indexStorage;
 
   /**
    * Storage interface for the elasticsearch_cluster entity.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $clusterStorage;
 
   /**
    * Elasticsearch client manager service.
    *
-   * @var \Drupal\elasticsearch_connector\ElasticSearch\ClientManagerInterface
+   * @var ClientManagerInterface
    */
   private $clientManager;
 
@@ -84,9 +84,9 @@ class ClusterListBuilder extends ConfigEntityListBuilder {
    *   - lone_indexes: Array of indices without a cluster.
    */
   public function group(): array {
-    /** @var \Drupal\elasticsearch_connector\Entity\Cluster[] $clusters */
+    /** @var Cluster[] $clusters */
     $clusters = $this->storage->loadMultiple();
-    /** @var \Drupal\elasticsearch_connector\Entity\Index[] $indices */
+    /** @var Index[] $indices */
     $indices = $this->indexStorage->loadMultiple();
 
     $cluster_groups = [];
@@ -135,7 +135,7 @@ class ClusterListBuilder extends ConfigEntityListBuilder {
       $client = $this->clientManager->getClient($entity);
     }
     elseif ($entity instanceof Index) {
-      /** @var \Drupal\elasticsearch_connector\Entity\Cluster $cluster */
+      /** @var Cluster $cluster */
       $cluster = $this->clusterStorage->load($entity->server);
       $client = $this->clientManager->getClient($cluster);
     }
@@ -265,7 +265,7 @@ class ClusterListBuilder extends ConfigEntityListBuilder {
 
     $rows = [];
     foreach ($entity_groups['clusters'] as $cluster_group) {
-      /** @var \Drupal\elasticsearch_connector\Entity\Cluster|\Drupal\elasticsearch_connector\Entity\Index $entity */
+      /** @var Cluster|Index $entity */
       foreach ($cluster_group as $entity) {
         $rows[$entity->uuid()] = $this->buildRow($entity);
       }
diff --git a/src/Controller/ElasticsearchController.php b/src/Controller/ElasticsearchController.php
index edc229f..435e94e 100644
--- a/src/Controller/ElasticsearchController.php
+++ b/src/Controller/ElasticsearchController.php
@@ -17,14 +17,14 @@ class ElasticsearchController extends ControllerBase {
   /**
    * Elasticsearch client manager service.
    *
-   * @var \Drupal\elasticsearch_connector\ElasticSearch\ClientManagerInterface
+   * @var ClientManagerInterface
    */
   private $clientManager;
 
   /**
    * ElasticsearchController constructor.
    *
-   * @param \Drupal\elasticsearch_connector\ElasticSearch\ClientManagerInterface $client_manager
+   * @param ClientManagerInterface $client_manager
    *   Elasticsearch client manager service.
    */
   public function __construct(ClientManagerInterface $client_manager) {
@@ -43,7 +43,7 @@ class ElasticsearchController extends ControllerBase {
   /**
    * Displays information about an Elasticsearch Cluster.
    *
-   * @param \Drupal\elasticsearch_connector\Entity\Cluster $elasticsearch_cluster
+   * @param Cluster $elasticsearch_cluster
    *   An instance of Cluster.
    *
    * @return array
@@ -71,7 +71,7 @@ class ElasticsearchController extends ControllerBase {
   /**
    * Page title callback for a cluster's "View" tab.
    *
-   * @param \Drupal\elasticsearch_connector\Entity\Cluster $elasticsearch_cluster
+   * @param Cluster $elasticsearch_cluster
    *   The cluster that is displayed.
    *
    * @return string|null
@@ -85,7 +85,7 @@ class ElasticsearchController extends ControllerBase {
   /**
    * Complete information about the Elasticsearch Client.
    *
-   * @param \Drupal\elasticsearch_connector\Entity\Cluster $elasticsearch_cluster
+   * @param Cluster $elasticsearch_cluster
    *   Elasticsearch cluster.
    *
    * @return array
diff --git a/src/ElasticSearch/ClientManager.php b/src/ElasticSearch/ClientManager.php
index d15e7bc..ea8ac63 100644
--- a/src/ElasticSearch/ClientManager.php
+++ b/src/ElasticSearch/ClientManager.php
@@ -17,30 +17,30 @@ class ClientManager implements ClientManagerInterface {
   /**
    * Array of clients keyed by cluster URL.
    *
-   * @var \Elastica\Client[]
+   * @var Client[]
    */
   protected $clients = [];
 
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface|null
+   * @var LoggerChannelInterface|null
    */
   private $logger;
 
   /**
    * ClientManager constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Module service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface|null $logger
+   * @param LoggerChannelInterface|null $logger
    *   Logger.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, LoggerChannelInterface $logger = NULL) {
@@ -52,10 +52,10 @@ class ClientManager implements ClientManagerInterface {
   /**
    * Returns Elasticsearch client.
    *
-   * @param \Drupal\elasticsearch_connector\Entity\Cluster $cluster
+   * @param Cluster $cluster
    *   Cluster to connect.
    *
-   * @return \Elastica\Client
+   * @return Client
    *   Instance of Elasticsearch client.
    */
   public function getClient(Cluster $cluster): Client {
diff --git a/src/ElasticSearch/ClientManagerInterface.php b/src/ElasticSearch/ClientManagerInterface.php
index 345937d..aa7195c 100644
--- a/src/ElasticSearch/ClientManagerInterface.php
+++ b/src/ElasticSearch/ClientManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\elasticsearch_connector\ElasticSearch;
 
+use Elastica\Client;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 // TODO: Cluster should be an interface!
 use Drupal\elasticsearch_connector\Entity\Cluster;
@@ -14,10 +15,10 @@ interface ClientManagerInterface {
   /**
    * Returns Elasticsearch client.
    *
-   * @param \Drupal\elasticsearch_connector\Entity\Cluster $cluster
+   * @param Cluster $cluster
    *   Cluster to connect.
    *
-   * @return \Elastica\Client
+   * @return Client
    *   Instance of Elasticsearch client.
    */
   public function getClient(Cluster $cluster);
diff --git a/src/ElasticSearch/ClusterManager.php b/src/ElasticSearch/ClusterManager.php
index 5bf0e1d..c6da4e9 100644
--- a/src/ElasticSearch/ClusterManager.php
+++ b/src/ElasticSearch/ClusterManager.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\elasticsearch_connector\ElasticSearch;
 
+use Drupal\Node\NodeStorageInterface;
+use Drupal\elasticsearch_connector\Entity\Cluster;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\State\StateInterface;
 
@@ -13,23 +17,23 @@ class ClusterManager {
   /**
    * The state storage service.
    *
-   * @var \Drupal\Node\NodeStorageInterface
+   * @var NodeStorageInterface
    */
   protected $state;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * ClusterManager constructor.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state storage service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type service.
    */
   public function __construct(StateInterface $state, EntityTypeManagerInterface $entity_type_manager) {
@@ -67,11 +71,11 @@ class ClusterManager {
    * @param bool $include_inactive
    *   Flag to include inactive clusters.
    *
-   * @return \Drupal\elasticsearch_connector\Entity\Cluster[]
+   * @return Cluster[]
    *   Returns list of all clusters.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadAllClusters($include_inactive = TRUE): array {
     $clusters = $this
@@ -79,7 +83,7 @@ class ClusterManager {
       ->getStorage('elasticsearch_cluster')
       ->loadMultiple();
 
-    /** @var \Drupal\elasticsearch_connector\Entity\Cluster $cluster */
+    /** @var Cluster $cluster */
     foreach ($clusters as $cluster) {
       if (!$include_inactive && !$cluster->status) {
         unset($clusters[$cluster->cluster_id]);
diff --git a/src/ElasticSearch/Parameters/Builder/SearchBuilder.php b/src/ElasticSearch/Parameters/Builder/SearchBuilder.php
index 1780d08..d75efc5 100644
--- a/src/ElasticSearch/Parameters/Builder/SearchBuilder.php
+++ b/src/ElasticSearch/Parameters/Builder/SearchBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\elasticsearch_connector\Elasticsearch\Parameters\Builder;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -64,21 +65,21 @@ class SearchBuilder {
   /**
    * Elastica query object.
    *
-   * @var \Elastica\Query
+   * @var Query
    */
   protected $esQuery;
 
   /**
    * Elastica root query.
    *
-   * @var \Elastica\Query\BoolQuery
+   * @var BoolQuery
    */
   protected $esRootQuery;
 
   /**
    * Elastica post filter.
    *
-   * @var \Elastica\Query\BoolQuery
+   * @var BoolQuery
    */
   protected $esPostFilter;
 
@@ -99,7 +100,7 @@ class SearchBuilder {
   /**
    * Module Service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -147,7 +148,7 @@ class SearchBuilder {
   /**
    * Returns elastica query.
    *
-   * @return \Elastica\Query
+   * @return Query
    *   Query object.
    */
   public function getElasticQuery(): Query {
@@ -325,7 +326,7 @@ class SearchBuilder {
    * @param \Drupal\search_api\Query\ConditionGroupInterface $condition_group
    *   The condition group object that holds all conditions that should be
    *   expressed as filters.
-   * @param \Elastica\Query\BoolQuery $query
+   * @param BoolQuery $query
    *   Filter query.
    *
    * @throws \Drupal\search_api\SearchApiException
@@ -417,7 +418,7 @@ class SearchBuilder {
    * @param \Drupal\search_api\Query\ConditionInterface $condition
    *   Condition.
    *
-   * @return \Elastica\Query\AbstractQuery
+   * @return AbstractQuery
    *   Query filter.
    *
    * @throws \Drupal\search_api\SearchApiException
@@ -645,7 +646,7 @@ class SearchBuilder {
    * @param string $fuzzyness
    *   Fuzzyness.
    *
-   * @return \Elastica\Query\BoolQuery|\Elastica\Query\AbstractQuery
+   * @return BoolQuery|AbstractQuery
    *   Query.
    */
   protected function getFullTextFilter(
diff --git a/src/Event/BuildSearchParamsEvent.php b/src/Event/BuildSearchParamsEvent.php
index fb0bd03..ae80456 100644
--- a/src/Event/BuildSearchParamsEvent.php
+++ b/src/Event/BuildSearchParamsEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\elasticsearch_connector\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class BuildSearchParamsEvent
diff --git a/src/Event/BuildSearchQueryEvent.php b/src/Event/BuildSearchQueryEvent.php
index 3dd43fc..f01145f 100644
--- a/src/Event/BuildSearchQueryEvent.php
+++ b/src/Event/BuildSearchQueryEvent.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\elasticsearch_connector\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\search_api\IndexInterface;
 use Drupal\search_api\Query\QueryInterface;
 use Elastica\Query;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class BuildSearchQueryEvent.
@@ -22,7 +22,7 @@ class BuildSearchQueryEvent extends Event {
   /**
    * Elastica search query.
    *
-   * @var \Elastica\Query
+   * @var Query
    */
   protected $elasticQuery;
 
@@ -43,7 +43,7 @@ class BuildSearchQueryEvent extends Event {
   /**
    * BuildSearchQueryEvent constructor.
    *
-   * @param \Elastica\Query $elastic_query
+   * @param Query $elastic_query
    *   Elastica search query.
    * @param \Drupal\search_api\Query\QueryInterface $query
    *   Search API Query.
@@ -69,7 +69,7 @@ class BuildSearchQueryEvent extends Event {
   /**
    * Get search query.
    *
-   * @return \Elastica\Query
+   * @return Query
    *   Search query.
    */
   public function getElasticQuery(): Query {
@@ -79,7 +79,7 @@ class BuildSearchQueryEvent extends Event {
   /**
    * Set search query.
    *
-   * @param \Elastica\Query $elastic_query
+   * @param Query $elastic_query
    *   Search query.
    */
   public function setElasticQuery(Query $elastic_query): void {
diff --git a/src/Event/PrepareDocumentIndexEvent.php b/src/Event/PrepareDocumentIndexEvent.php
index 59c5be9..96022c7 100644
--- a/src/Event/PrepareDocumentIndexEvent.php
+++ b/src/Event/PrepareDocumentIndexEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\elasticsearch_connector\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\search_api\IndexInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class PrepareDocumentIndexEvent.
diff --git a/src/Event/PrepareIndexMappingEvent.php b/src/Event/PrepareIndexMappingEvent.php
index 0cf01cb..1a97974 100644
--- a/src/Event/PrepareIndexMappingEvent.php
+++ b/src/Event/PrepareIndexMappingEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\elasticsearch_connector\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class PrepareIndexMappingEvent
diff --git a/src/Event/PrepareMappingEvent.php b/src/Event/PrepareMappingEvent.php
index def819e..571b44b 100644
--- a/src/Event/PrepareMappingEvent.php
+++ b/src/Event/PrepareMappingEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\elasticsearch_connector\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class PrepareMappingEvent
diff --git a/src/Event/PrepareSearchQueryEvent.php b/src/Event/PrepareSearchQueryEvent.php
index 326cc33..0ff1218 100644
--- a/src/Event/PrepareSearchQueryEvent.php
+++ b/src/Event/PrepareSearchQueryEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\elasticsearch_connector\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class PrepareSearchQueryEvent
diff --git a/src/Form/ClusterDeleteForm.php b/src/Form/ClusterDeleteForm.php
index 361dc63..daf81ef 100644
--- a/src/Form/ClusterDeleteForm.php
+++ b/src/Form/ClusterDeleteForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\elasticsearch_connector\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,7 +21,7 @@ class ClusterDeleteForm extends EntityConfirmFormBase {
   /**
    * The client manager interface.
    *
-   * @var \Drupal\elasticsearch_connector\ElasticSearch\ClientManagerInterface
+   * @var ClientManagerInterface
    */
   private $clientManager;
 
@@ -28,25 +31,25 @@ class ClusterDeleteForm extends EntityConfirmFormBase {
    * This object members must be set to anything other than private in order for
    * \Drupal\Core\DependencyInjection\DependencySerialization to be detected.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;
 
   /**
    * The cluster manager service.
    *
-   * @var \Drupal\elasticsearch_connector\ElasticSearch\ClusterManager
+   * @var ClusterManager
    */
   protected $clusterManager;
 
   /**
    * Constructs an IndexForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
-   * @param \Drupal\elasticsearch_connector\ElasticSearch\ClientManagerInterface $client_manager
+   * @param ClientManagerInterface $client_manager
    *   The client manager.
-   * @param \Drupal\elasticsearch_connector\ElasticSearch\ClusterManager $cluster_manager
+   * @param ClusterManager $cluster_manager
    *   The cluster manager.
    */
   public function __construct(
@@ -92,9 +95,9 @@ class ClusterDeleteForm extends EntityConfirmFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $storage = $this->entityManager->getStorage('elasticsearch_index');
diff --git a/src/Form/ClusterForm.php b/src/Form/ClusterForm.php
index 7aefc4a..f00564d 100644
--- a/src/Form/ClusterForm.php
+++ b/src/Form/ClusterForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\elasticsearch_connector\Form;
 
+use Drupal\elasticsearch_connector\ElasticSearch\ClientManager;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\elasticsearch_connector\ElasticSearch\ClusterManager;
@@ -18,23 +19,23 @@ class ClusterForm extends EntityForm {
   /**
    * The client manager interface service.
    *
-   * @var \Drupal\elasticsearch_connector\ElasticSearch\ClientManager
+   * @var ClientManager
    */
   private $clientManager;
 
   /**
    * The cluster manager service.
    *
-   * @var \Drupal\elasticsearch_connector\ElasticSearch\ClusterManager
+   * @var ClusterManager
    */
   protected $clusterManager;
 
   /**
    * ElasticsearchController constructor.
    *
-   * @param \Drupal\elasticsearch_connector\ElasticSearch\ClientManagerInterface $client_manager
+   * @param ClientManagerInterface $client_manager
    *   The client manager.
-   * @param \Drupal\elasticsearch_connector\ElasticSearch\ClusterManager $cluster_manager
+   * @param ClusterManager $cluster_manager
    *   The cluster manager.
    */
   public function __construct(ClientManagerInterface $client_manager, ClusterManager $cluster_manager) {
@@ -80,7 +81,7 @@ class ClusterForm extends EntityForm {
    *
    * @param array $form
    *   Form parameter.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state parameter.
    */
   public function buildEntityForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/IndexDeleteForm.php b/src/Form/IndexDeleteForm.php
index 5a65a87..d8fa84e 100644
--- a/src/Form/IndexDeleteForm.php
+++ b/src/Form/IndexDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\elasticsearch_connector\Form;
 
+use Drupal\elasticsearch_connector\Entity\Cluster;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,23 +19,23 @@ class IndexDeleteForm extends EntityConfirmFormBase {
   /**
    * The client manager interface service.
    *
-   * @var \Drupal\elasticsearch_connector\ElasticSearch\ClientManagerInterface
+   * @var ClientManagerInterface
    */
   private $clientManager;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * ElasticsearchController constructor.
    *
-   * @param \Drupal\elasticsearch_connector\ElasticSearch\ClientManagerInterface $client_manager
+   * @param ClientManagerInterface $client_manager
    *   The client manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ClientManagerInterface $client_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -64,7 +65,7 @@ class IndexDeleteForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\elasticsearch_connector\Entity\Cluster $cluster */
+    /** @var Cluster $cluster */
     $cluster = $this->entityTypeManager->getStorage('elasticsearch_cluster')->load($this->entity->server);
     $client = $this->clientManager->getClient($cluster);
     try {
diff --git a/src/Form/IndexForm.php b/src/Form/IndexForm.php
index 73b4617..15d7d3f 100644
--- a/src/Form/IndexForm.php
+++ b/src/Form/IndexForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\elasticsearch_connector\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityForm;
@@ -19,7 +20,7 @@ class IndexForm extends EntityForm {
   /**
    * The client manager service.
    *
-   * @var \Drupal\elasticsearch_connector\ElasticSearch\ClientManagerInterface
+   * @var ClientManagerInterface
    */
   private $clientManager;
 
@@ -29,25 +30,25 @@ class IndexForm extends EntityForm {
    * This object members must be set to anything other than private in order for
    * \Drupal\Core\DependencyInjection\DependencySerialization to be detected.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The cluster manager service.
    *
-   * @var \Drupal\elasticsearch_connector\ElasticSearch\ClusterManager
+   * @var ClusterManager
    */
   protected $clusterManager;
 
   /**
    * Constructs an IndexForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
-   * @param \Drupal\elasticsearch_connector\ElasticSearch\ClientManagerInterface $client_manager
+   * @param ClientManagerInterface $client_manager
    *   The client manager.
-   * @param \Drupal\elasticsearch_connector\ElasticSearch\ClusterManager $cluster_manager
+   * @param ClusterManager $cluster_manager
    *   The cluster manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, ClientManagerInterface $client_manager, ClusterManager $cluster_manager) {
@@ -71,7 +72,7 @@ class IndexForm extends EntityForm {
   /**
    * Gets the entity manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   An instance of EntityManager.
    */
   protected function getEntityManager() {
@@ -81,11 +82,11 @@ class IndexForm extends EntityForm {
   /**
    * Gets the cluster storage controller.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   An instance of EntityStorageInterface.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getClusterStorage() {
     return $this->getEntityManager()->getStorage('elasticsearch_cluster');
@@ -94,11 +95,11 @@ class IndexForm extends EntityForm {
   /**
    * Gets the index storage controller.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   An instance of EntityStorageInterface.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getIndexStorage() {
     return $this->getEntityManager()->getStorage('elasticsearch_index');
@@ -110,8 +111,8 @@ class IndexForm extends EntityForm {
    * @return array
    *   All clusters
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getAllClusters() {
     $options = [];
@@ -133,8 +134,8 @@ class IndexForm extends EntityForm {
    * @return array
    *   All clusters' fields.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getClusterField($field) {
     $clusters = $this->getAllClusters();
@@ -154,8 +155,8 @@ class IndexForm extends EntityForm {
    * @return string
    *   Cluster url.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getSelectedClusterUrl($id) {
     $result = NULL;
@@ -188,11 +189,11 @@ class IndexForm extends EntityForm {
    *
    * @param array $form
    *   Form parameter.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state parameter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildEntityForm(array &$form, FormStateInterface $form_state) {
     // TODO: Provide check and support for other index modules settings.
@@ -295,8 +296,8 @@ class IndexForm extends EntityForm {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $cluster = $this
