diff --git a/modules/entity/access_conditions_entity.module b/modules/entity/access_conditions_entity.module
index 69e0158..c6e4d6f 100644
--- a/modules/entity/access_conditions_entity.module
+++ b/modules/entity/access_conditions_entity.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\field\FieldConfigInterface;
+use Drupal\access_conditions\AccessChecker;
+use Drupal\access_conditions\Entity\AccessModelInterface;
 /**
  * @file
  * Code for the access conditions entity module.
@@ -15,7 +18,7 @@ use Drupal\Core\Session\AccountInterface;
  * Implements hook_ENTITY_TYPE_create() for case 'field_config'.
  */
 function access_conditions_entity_field_config_create(EntityInterface $entity) {
-  /** @var \Drupal\field\FieldConfigInterface $entity */
+  /** @var FieldConfigInterface $entity */
   if ($entity->getFieldStorageDefinition()->getType() != 'access_model_reference') {
     return;
   }
@@ -31,7 +34,7 @@ function access_conditions_entity_field_config_create(EntityInterface $entity) {
  * Implements hook_ENTITY_TYPE_delete() for case 'field_config'.
  */
 function access_conditions_entity_field_config_delete(EntityInterface $entity) {
-  /** @var \Drupal\field\FieldConfigInterface $entity */
+  /** @var FieldConfigInterface $entity */
   if ($entity->getFieldStorageDefinition()->getType() != 'access_model_reference') {
     return;
   }
@@ -55,12 +58,12 @@ function access_conditions_entity_entity_access(EntityInterface $entity, string
   $restricted = FALSE;
   $forbidden_result = AccessResult::forbidden();
   if (!empty($entity_fields[$entity->getEntityTypeId() . '.' . $entity->bundle()])) {
-    /** @var \Drupal\access_conditions\AccessChecker $access_checker */
+    /** @var AccessChecker $access_checker */
     $access_checker = \Drupal::service('access_conditions.access_checker');
 
     foreach ($entity_fields[$entity->getEntityTypeId() . '.' . $entity->bundle()] as $field_name => $status) {
       $values = $entity->get($field_name)->getValue();
-      /** @var \Drupal\access_conditions\Entity\AccessModelInterface[] $access_models */
+      /** @var AccessModelInterface[] $access_models */
       $access_models = $entity->get($field_name)->referencedEntities();
       if (!empty($values)) {
         foreach ($values as $key => $value) {
diff --git a/src/AccessChecker.php b/src/AccessChecker.php
index ad659b1..42fd263 100644
--- a/src/AccessChecker.php
+++ b/src/AccessChecker.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\access_conditions;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -25,41 +27,41 @@ class AccessChecker implements CacheableDependencyInterface {
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * The context manager service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The current active user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a AccessChecker object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The ContextHandler for applying contexts to conditions properly.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current active user.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ContextHandlerInterface $context_handler, ContextRepositoryInterface $context_repository, AccountProxyInterface $current_user) {
@@ -72,14 +74,14 @@ class AccessChecker implements CacheableDependencyInterface {
   /**
    * Checks access for a permission tree.
    *
-   * @param \Drupal\access_conditions\Entity\AccessModelInterface $access_model
+   * @param AccessModelInterface $access_model
    *   The access model that contain the conditions to be evaluated.
    *
    * @return bool
    *   TRUE if access is granted or FALSE if access is denied.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function checkAccess(AccessModelInterface $access_model) {
     $this->resetCache();
diff --git a/src/AccessModelListBuilder.php b/src/AccessModelListBuilder.php
index f90d5f0..ca867b1 100644
--- a/src/AccessModelListBuilder.php
+++ b/src/AccessModelListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\access_conditions;
 
+use Drupal\access_conditions\Entity\AccessModelInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
@@ -28,7 +29,7 @@ class AccessModelListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\access_conditions\Entity\AccessModelInterface $entity */
+    /** @var AccessModelInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['description'] = $entity->getDescription();
diff --git a/src/Entity/AccessModel.php b/src/Entity/AccessModel.php
index 3976088..56bb608 100644
--- a/src/Entity/AccessModel.php
+++ b/src/Entity/AccessModel.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\access_conditions\Entity;
 
+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 
@@ -89,7 +90,7 @@ class AccessModel extends ConfigEntityBase implements AccessModelInterface {
   /**
    * The plugin collection that holds the access conditions.
    *
-   * @var \Drupal\Component\Plugin\LazyPluginCollection
+   * @var LazyPluginCollection
    */
   protected $accessConditionCollection;
 
diff --git a/src/Entity/AccessModelInterface.php b/src/Entity/AccessModelInterface.php
index f888866..7c31213 100644
--- a/src/Entity/AccessModelInterface.php
+++ b/src/Entity/AccessModelInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\access_conditions\Entity;
 
+use Drupal\Core\Condition\ConditionInterface;
+use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 
@@ -41,7 +43,7 @@ interface AccessModelInterface extends ConfigEntityInterface, EntityWithPluginCo
   /**
    * Returns the conditions used for determining access for this access model.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface[]|\Drupal\Core\Condition\ConditionPluginCollection
+   * @return ConditionInterface[]|ConditionPluginCollection
    *   An array of configured condition plugins.
    */
   public function getAccessConditions();
@@ -63,7 +65,7 @@ interface AccessModelInterface extends ConfigEntityInterface, EntityWithPluginCo
    * @param string $condition_id
    *   The access model ID.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    *   The access model object.
    */
   public function getAccessCondition($condition_id);
diff --git a/src/Form/AccessModelAddForm.php b/src/Form/AccessModelAddForm.php
index 0eb2574..ebb3695 100644
--- a/src/Form/AccessModelAddForm.php
+++ b/src/Form/AccessModelAddForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\access_conditions\Form;
 
+use Drupal\access_conditions\Entity\AccessModelInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -15,7 +16,7 @@ class AccessModelAddForm extends EntityForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\access_conditions\Entity\AccessModelInterface $access_model */
+    /** @var AccessModelInterface $access_model */
     $access_model = $this->entity;
 
     $form = parent::form($form, $form_state);
diff --git a/src/Form/AccessModelEditForm.php b/src/Form/AccessModelEditForm.php
index 852e339..bff73d8 100644
--- a/src/Form/AccessModelEditForm.php
+++ b/src/Form/AccessModelEditForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\access_conditions\Form;
 
+use Drupal\access_conditions\Entity\AccessModelInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
@@ -21,41 +22,41 @@ class AccessModelEditForm extends AccessModelAddForm {
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a AccessModelEditForm object.
    *
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The ConditionManager for building the access conditions UI.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language
+   * @param LanguageManagerInterface $language
    *   The language manager.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
    */
   public function __construct(ConditionManager $condition_manager, ContextRepositoryInterface $context_repository, LanguageManagerInterface $language, FormBuilderInterface $form_builder) {
@@ -105,7 +106,7 @@ class AccessModelEditForm extends AccessModelAddForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\access_conditions\Entity\AccessModelInterface $access_model */
+    /** @var AccessModelInterface $access_model */
     $access_model = $this->entity;
 
     $form = parent::form($form, $form_state);
diff --git a/src/Form/ConditionAddForm.php b/src/Form/ConditionAddForm.php
index 813fba1..f2eac5b 100644
--- a/src/Form/ConditionAddForm.php
+++ b/src/Form/ConditionAddForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\access_conditions\Form;
 
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Uuid\Uuid;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
@@ -23,30 +24,30 @@ class ConditionAddForm extends FormBase {
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The access model entity.
    *
-   * @var \Drupal\access_conditions\Entity\AccessModelInterface
+   * @var AccessModelInterface
    */
   protected $accessModel;
 
   /**
    * Constructs a ConditionAddForm object.
    *
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition plugin manager.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
    */
   public function __construct(ConditionManager $condition_manager, ContextRepositoryInterface $context_repository) {
@@ -87,7 +88,7 @@ class ConditionAddForm extends FormBase {
       $instance = $this->conditionManager->createInstance(str_replace('-', ":", $condition), []);
     }
 
-    /** @var \Drupal\Core\Condition\ConditionInterface $instance */
+    /** @var ConditionInterface $instance */
     $form = $instance->buildConfigurationForm($form, $form_state);
 
     if (isset($id)) {
@@ -115,12 +116,12 @@ class ConditionAddForm extends FormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Condition\ConditionInterface $instance */
+    /** @var ConditionInterface $instance */
     $instance = $form_state->getValue('instance');
     $instance->submitConfigurationForm($form, $form_state);
 
     if ($instance instanceof ContextAwarePluginInterface) {
-      /** @var \Drupal\Core\Plugin\ContextAwarePluginInterface $instance */
+      /** @var ContextAwarePluginInterface $instance */
       $context_mapping = $form_state->hasValue('context_mapping') ? $form_state->getValue('context_mapping') : [];
       $instance->setContextMapping($context_mapping);
     }
diff --git a/src/Form/ConditionDeleteForm.php b/src/Form/ConditionDeleteForm.php
index a498899..72da217 100644
--- a/src/Form/ConditionDeleteForm.php
+++ b/src/Form/ConditionDeleteForm.php
@@ -18,21 +18,21 @@ class ConditionDeleteForm extends ConfirmFormBase {
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
    * The access model entity.
    *
-   * @var \Drupal\access_conditions\Entity\AccessModelInterface
+   * @var AccessModelInterface
    */
   protected $accessModel;
 
   /**
    * Constructs a ConditionAddForm object.
    *
-   * @param \Drupal\Core\Condition\ConditionManager $manager
+   * @param ConditionManager $manager
    *   The condition plugin manager.
    */
   public function __construct(ConditionManager $manager) {
diff --git a/src/Plugin/Condition/AccessModel.php b/src/Plugin/Condition/AccessModel.php
index d558bb1..71052b9 100644
--- a/src/Plugin/Condition/AccessModel.php
+++ b/src/Plugin/Condition/AccessModel.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\access_conditions\Plugin\Condition;
 
+use Drupal\access_conditions\Entity\AccessModelInterface;
 use Drupal\access_conditions\AccessChecker;
 use Drupal\access_conditions\Entity\AccessModel as AccessModelEntity;
 use Drupal\Core\Cache\RefinableCacheableDependencyTrait;
@@ -25,7 +26,7 @@ class AccessModel extends ConditionPluginBase implements ContainerFactoryPluginI
   /**
    * The access model service.
    *
-   * @var \Drupal\access_conditions\AccessChecker
+   * @var AccessChecker
    */
   protected $accessChecker;
 
@@ -115,7 +116,7 @@ class AccessModel extends ConditionPluginBase implements ContainerFactoryPluginI
    * {@inheritdoc}
    */
   public function evaluate() {
-    /** @var \Drupal\access_conditions\Entity\AccessModelInterface[] $access_models */
+    /** @var AccessModelInterface[] $access_models */
     $access_models = AccessModelEntity::loadMultiple($this->configuration['access_models']);
 
     $result = [];
@@ -142,7 +143,7 @@ class AccessModel extends ConditionPluginBase implements ContainerFactoryPluginI
   /**
    * Sets the access model service.
    *
-   * @param \Drupal\access_conditions\AccessChecker $access_check
+   * @param AccessChecker $access_check
    *   The access model service.
    *
    * @return $this
