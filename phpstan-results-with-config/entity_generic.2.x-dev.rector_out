modules/contrib/entity_generic/entity_generic.module
modules/contrib/entity_generic/src/Access/GenericAccessControlHandler.php
modules/contrib/entity_generic/src/Access/GenericConfigAccessControlHandler.php
modules/contrib/entity_generic/src/Access/GenericTypeAccessControlHandler.php
modules/contrib/entity_generic/src/Controller/GenericController.php
modules/contrib/entity_generic/src/Controller/GenericModalController.php
modules/contrib/entity_generic/src/Entity/Basic.php
modules/contrib/entity_generic/src/Entity/BasicInterface.php
modules/contrib/entity_generic/src/Entity/EntityApprovedInterface.php
modules/contrib/entity_generic/src/Entity/EntityApprovedTrait.php
modules/contrib/entity_generic/src/Entity/EntityArchivedInterface.php
modules/contrib/entity_generic/src/Entity/EntityArchivedTrait.php
modules/contrib/entity_generic/src/Entity/EntityCreatedInterface.php
modules/contrib/entity_generic/src/Entity/EntityCreatedTrait.php
modules/contrib/entity_generic/src/Entity/EntityDeletedInterface.php
modules/contrib/entity_generic/src/Entity/EntityDeletedTrait.php
modules/contrib/entity_generic/src/Entity/EntityLabelInterface.php
modules/contrib/entity_generic/src/Entity/EntityLabelTrait.php
modules/contrib/entity_generic/src/Entity/EntityOwnerTrait.php
modules/contrib/entity_generic/src/Entity/EntityStatusInterface.php
modules/contrib/entity_generic/src/Entity/EntityStatusTrait.php
modules/contrib/entity_generic/src/Entity/EntityTypedInterface.php
modules/contrib/entity_generic/src/Entity/EntityTypedTrait.php
modules/contrib/entity_generic/src/Entity/Generic.php
modules/contrib/entity_generic/src/Entity/GenericConfig.php
modules/contrib/entity_generic/src/Entity/GenericConfigInterface.php
modules/contrib/entity_generic/src/Entity/GenericInterface.php
modules/contrib/entity_generic/src/Entity/GenericType.php
modules/contrib/entity_generic/src/Entity/GenericTypeInterface.php
modules/contrib/entity_generic/src/Entity/Simple.php
modules/contrib/entity_generic/src/Entity/SimpleInterface.php
modules/contrib/entity_generic/src/Form/GenericConfigDeleteForm.php
modules/contrib/entity_generic/src/Form/GenericConfigForm.php
modules/contrib/entity_generic/src/Form/GenericDeleteForm.php
modules/contrib/entity_generic/src/Form/GenericDeleteModalForm.php
modules/contrib/entity_generic/src/Form/GenericDeleteMultipleForm.php
modules/contrib/entity_generic/src/Form/GenericForm.php
modules/contrib/entity_generic/src/Form/GenericModalForm.php
modules/contrib/entity_generic/src/Form/GenericToggleStatusModalForm.php
modules/contrib/entity_generic/src/Form/GenericTypeDeleteForm.php
modules/contrib/entity_generic/src/Form/GenericTypeForm.php
modules/contrib/entity_generic/src/GenericConfigListBuilder.php
modules/contrib/entity_generic/src/GenericConfigManager.php
modules/contrib/entity_generic/src/GenericConfigManagerInterface.php
modules/contrib/entity_generic/src/GenericListBuilder.php
modules/contrib/entity_generic/src/GenericManager.php
modules/contrib/entity_generic/src/GenericManagerInterface.php
modules/contrib/entity_generic/src/GenericStorage.php
modules/contrib/entity_generic/src/GenericStorageInterface.php
modules/contrib/entity_generic/src/GenericStorageSchema.php
modules/contrib/entity_generic/src/GenericTypeListBuilder.php
modules/contrib/entity_generic/src/GenericViewBuilder.php
modules/contrib/entity_generic/src/GenericViewsData.php
modules/contrib/entity_generic/src/Permission/GenericPermissionProvider.php
modules/contrib/entity_generic/src/Plugin/Action/ApproveAction.php
modules/contrib/entity_generic/src/Plugin/Action/ArchiveAction.php
modules/contrib/entity_generic/src/Plugin/Action/Derivative/ApproveActionDeriver.php
modules/contrib/entity_generic/src/Plugin/Action/Derivative/ArchiveActionDeriver.php
modules/contrib/entity_generic/src/Plugin/Action/Derivative/DisableActionDeriver.php
modules/contrib/entity_generic/src/Plugin/Action/Derivative/EnableActionDeriver.php
modules/contrib/entity_generic/src/Plugin/Action/Derivative/MarkDeletedActionDeriver.php
modules/contrib/entity_generic/src/Plugin/Action/Derivative/UnapproveActionDeriver.php
modules/contrib/entity_generic/src/Plugin/Action/Derivative/UnarchiveActionDeriver.php
modules/contrib/entity_generic/src/Plugin/Action/Derivative/UnmarkDeletedActionDeriver.php
modules/contrib/entity_generic/src/Plugin/Action/DisableAction.php
modules/contrib/entity_generic/src/Plugin/Action/EnableAction.php
modules/contrib/entity_generic/src/Plugin/Action/MarkDeletedAction.php
modules/contrib/entity_generic/src/Plugin/Action/UnapproveAction.php
modules/contrib/entity_generic/src/Plugin/Action/UnarchiveAction.php
modules/contrib/entity_generic/src/Plugin/Action/UnmarkDeletedAction.php
modules/contrib/entity_generic/src/Plugin/LocalTask/Derivative/LocalTaskDeriver.php
modules/contrib/entity_generic/src/Plugin/views/field/GenericDeleteModal.php
modules/contrib/entity_generic/src/Plugin/views/field/GenericEditModal.php
modules/contrib/entity_generic/src/Plugin/views/field/GenericOperationModalBase.php
modules/contrib/entity_generic/src/Plugin/views/field/GenericToggleStatusModal.php
modules/contrib/entity_generic/src/Plugin/views/filter/IdAutocomplete.php
modules/contrib/entity_generic/src/Plugin/views/filter/IdSelect.php
modules/contrib/entity_generic/src/Routing/GenericRouteProvider.php
modules/contrib/entity_generic/tmp/Access/GenericAccessCheck.php
modules/contrib/entity_generic/tmp/Controller/GenericViewController.php
modules/contrib/entity_generic/tmp/Exception/LockException.php
modules/contrib/entity_generic/tmp/GenericServiceProvider.php

30 files with changes
=====================

1) modules/contrib/entity_generic/tmp/Controller/GenericViewController.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The _title_callback for the page that renders a single entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_generic/tmp/Access/GenericAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_generic\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 class GenericAccessCheck implements AccessInterface {

   /**
- * The entity manager.
- *
- * @var \Drupal\Core\Entity\EntityTypeManagerInterface
- */
+   * The entity manager.
+   *
+   * @var EntityTypeManagerInterface
+   */
   protected $entityTypeManager;

   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Checks access to the entity add page for the entity type.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\entity_generic\Entity\GenericTypeInterface $entity_generic_type
+   * @param GenericTypeInterface $entity_generic_type
    *   The type entity.
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, AccountInterface $account, GenericTypeInterface $entity_generic_type = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/entity_generic/src/Plugin/views/filter/IdSelect.php:26

    ---------- begin diff ----------
@@ @@
       ->sort(\Drupal::entityTypeManager()->getDefinition($this->getEntityType())->getKey('label'));
     $entities = \Drupal::entityTypeManager()->getStorage($this->getEntityType())->loadMultiple($query->execute());
     foreach ($entities as $entity) {
-      $options[$entity->id()] = \Drupal::entityManager()->getTranslationFromContext($entity)->label();
+      $options[$entity->id()] = \Drupal::service('entity.repository')->getTranslationFromContext($entity)->label();
     }

     $default_value = (array) $this->value;
    ----------- end diff -----------

Applied rules:
 * EntityManagerRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_generic/src/Plugin/views/field/GenericEditModal.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_generic\Plugin\views\field;

+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\views\ResultRow;
@@ @@
    * {@inheritdoc}
    */
   public function buildOptionsForm(&$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepository */
+    /** @var EntityDisplayRepositoryInterface $entityDisplayRepository */
     $entityDisplayRepository = \Drupal::service('entity_display.repository');
     $options = $entityDisplayRepository->getFormModeOptions($this->getEntityType());
     $form['form_mode'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_generic/src/Plugin/LocalTask/Derivative/LocalTaskDeriver.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates an local task object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_generic/src/GenericViewBuilder.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * Provides entity-specific defaults to the build process.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the defaults should be provided.
    * @param string $view_mode
    *   The view mode that should be used.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_generic/src/GenericStorageInterface.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of entity revision IDs for a specific entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as entity owner.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all entities with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/entity_generic/src/GenericManagerInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Instantiates a new instance of this entity handler.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this object should use.
    *
    * @return static
@@ @@
   /**
    * Returns the list of available entities for specific user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *  User object
    *
    * @return array
@@ @@
    * Returns the list of available entities for specific user as options for
    * select box.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *  User object
    *
    * @return array
@@ @@
    * Returns the list of available entities for specific user as options for
    * select box with UUIDs as keys.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *  User object
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/entity_generic/src/GenericManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_generic;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs an object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/entity_generic/src/GenericListBuilder.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

   /**
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter,  RedirectDestinationInterface $redirect_destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_generic/src/GenericConfigManagerInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Instantiates a new instance of this entity handler.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this object should use.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/entity_generic/src/GenericConfigManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_generic;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;

@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs an object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/entity_generic/src/Form/GenericTypeForm.php:14

    ---------- begin diff ----------
@@ @@
 class GenericTypeForm extends BundleEntityFormBase {

   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
     $status = $this->entity->save();

     if ($status == SAVED_UPDATED) {
-      drupal_set_message(t($this->entity->getEntityType()->getLabel() . ' %label has been updated.', ['%label' => $this->entity->label()]));
+      $this->messenger()->addStatus(t($this->entity->getEntityType()->getLabel() . ' %label has been updated.', ['%label' => $this->entity->label()]));
     }
     else {
-      drupal_set_message(t($this->entity->getEntityType()->getLabel() . ' %label has been created.', ['%label' => $this->entity->label()]));
+      $this->messenger()->addStatus(t($this->entity->getEntityType()->getLabel() . ' %label has been created.', ['%label' => $this->entity->label()]));
     }

     $this->entityManager->clearCachedFieldDefinitions();
@@ @@
   /**
    * Form submission handler to redirect to Manage fields page of Field UI.
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function redirectToFieldUI(array $form, FormStateInterface $form_state) {
     if ($form_state->getTriggeringElement()['#parents'][0] === 'save_continue' && $route_info = FieldUI::getOverviewRouteInfo($this->entity->getEntityType()->getBundleOf(), $this->entity->id())) {
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/entity_generic/src/Form/GenericToggleStatusModalForm.php:67

    ---------- begin diff ----------
@@ @@
    * AJAX callback handler that displays any errors or a success message.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function submitModalFormAjax(array $form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
@@ @@
   /**
    * AJAX callback handler failed submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitModalAjaxFail(AjaxResponse &$response, array $form, FormStateInterface $form_state) {

@@ @@
   /**
    * AJAX callback handler successful submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitModalAjaxSuccess(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/entity_generic/src/Form/GenericModalForm.php:74

    ---------- begin diff ----------
@@ @@
    * AJAX callback handler.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function submitModalAjax(array $form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
@@ @@
   /**
    * AJAX callback handler failed submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitModalAjaxFail(AjaxResponse &$response, array $form, FormStateInterface $form_state) {

@@ @@
   /**
    * AJAX callback handler successful submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitModalAjaxSuccess(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/entity_generic/src/Form/GenericForm.php:15

    ---------- begin diff ----------
@@ @@
   public function save(array $form, FormStateInterface $form_state) {
     $entity = $this->getEntity();
     $entity->save();
-    drupal_set_message($this->t('The entity %label has been successfully saved.', ['%label' => $entity->label()]));
+    $this->messenger()->addStatus($this->t('The entity %label has been successfully saved.', ['%label' => $entity->label()]));
     $form_state->setRedirect('entity.' . $entity->getEntityTypeId() . '.canonical', [$entity->getEntityTypeId() => $entity->id()]);
   }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity_generic/src/Form/GenericDeleteModalForm.php:65

    ---------- begin diff ----------
@@ @@
    * AJAX callback handler that displays any errors or a success message.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function submitModalFormAjax(array $form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
@@ @@
   /**
    * AJAX callback handler failed submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitModalAjaxFail(AjaxResponse &$response, array $form, FormStateInterface $form_state) {

@@ @@
   /**
    * AJAX callback handler successful submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitModalAjaxSuccess(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/entity_generic/src/Form/GenericConfigForm.php:13

    ---------- begin diff ----------
@@ @@
 class GenericConfigForm extends EntityForm {

   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
     $status = $entity->save();

     if ($status == SAVED_UPDATED) {
-      drupal_set_message($this->t($entity_label . ' %label has been updated.', ['%label' => $entity->label()]));
+      $this->messenger()->addStatus($this->t($entity_label . ' %label has been updated.', ['%label' => $entity->label()]));
     }
     else {
-      drupal_set_message($this->t($entity_label . ' %label has been created.', ['%label' => $entity->label()]));
+      $this->messenger()->addStatus($this->t($entity_label . ' %label has been created.', ['%label' => $entity->label()]));
     }

     $form_state->setRedirect('entity.' . $entity_type->id() . '.collection');
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/entity_generic/src/Form/GenericConfigDeleteForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/entity_generic/src/Entity/GenericType.php:81

    ---------- begin diff ----------
@@ @@
     if ($update && $this->getOriginalId() != $this->id()) {
       $update_count = \Drupal::entityTypeManager()->getStorage($this->getOriginalId())->updateType($this->getOriginalId(), $this->id());
       if ($update_count) {
-        drupal_set_message(\Drupal::translation()->formatPlural($update_count,
+        \Drupal::messenger()->addStatus(\Drupal::translation()->formatPlural($update_count,
           'Changed the type of 1 object from %old-type to %type.',
           'Changed the type of @count objects from %old-type to %type.',
           array(
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/entity_generic/src/Entity/EntityTypedInterface.php:18

    ---------- begin diff ----------
@@ @@
    * @param string $type
    *   The entity type.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setType($type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/entity_generic/src/Entity/EntityStatusInterface.php:40

    ---------- begin diff ----------
@@ @@
    * @param bool $active
    *   TRUE to set this entity to active, FALSE to set it to inactive.
    *
-   * @return \Drupal\entity_generic\Entity\SimpleInterface
+   * @return SimpleInterface
    *   The called entity.
    */
   public function setStatus($active);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/entity_generic/src/Entity/EntityLabelInterface.php:20

    ---------- begin diff ----------
@@ @@
    * @param string $label
    *   The entity label.
    *
-   * @return \Drupal\entity_generic\Entity\SimpleInterface
+   * @return SimpleInterface
    *   The called entity.
    */
   public function setLabel($label);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/entity_generic/src/Entity/EntityDeletedInterface.php:38

    ---------- begin diff ----------
@@ @@
    * @param bool $flag_deleted
    *   TRUE to set this entity to be flagged as deleted, FALSE to set it to unflagged as deleted.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setDeleted($flag_deleted);
@@ @@
    * @param int $timestamp
    *   The entity deleted timestamp.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setDeletedTime($timestamp);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/entity_generic/src/Entity/EntityCreatedInterface.php:20

    ---------- begin diff ----------
@@ @@
    * @param int $timestamp
    *   The entity creation timestamp.
    *
-   * @return \Drupal\entity_generic\Entity\BasicInterface
+   * @return BasicInterface
    *   The called entity.
    */
   public function setCreatedTime($timestamp);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/entity_generic/src/Entity/EntityArchivedInterface.php:38

    ---------- begin diff ----------
@@ @@
    * @param bool $archived
    *   TRUE to set this entity to archived, FALSE to set it to unarchived.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setArchived($archived);
@@ @@
    * @param int $timestamp
    *   The entity archived timestamp.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setArchivedTime($timestamp);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/entity_generic/src/Entity/EntityApprovedInterface.php:38

    ---------- begin diff ----------
@@ @@
    * @param bool $approved
    *   TRUE to set this entity to approved, FALSE to set it to unapproved.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setApproved($approved);
@@ @@
    * @param int $timestamp
    *   The entity approved timestamp.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setApprovedTime($timestamp);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/entity_generic/src/Controller/GenericModalController.php:18

    ---------- begin diff ----------
@@ @@
 class GenericModalController extends GenericController {

   /**
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param RequestStack $request_stack
+   * @param EntityFormBuilderInterface $entity_form_builder
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, RequestStack $request_stack, EntityFormBuilderInterface $entity_form_builder) {
     parent::__construct($date_formatter, $renderer, $request_stack);
@@ @@
    * @param array $values
    * @param array $args
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function composeEntity($entity_class, array $values, array $args = []) {
     return $entity_class::create($values);
@@ @@
    *
    * @param array $args
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function addGenericEntityModal(array $args = []) {
     if (!isset($args['entity_type'])) {
@@ @@
   /**
    * Callback for editing the entity using modal form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function editGenericEntityModal(EntityInterface $entity) {
     $request_parameters = \Drupal::request()->query->all();
@@ @@
   /**
    * Callback for editing the entity using modal form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function toggleStatusModal(EntityInterface $entity) {
     $request_parameters = \Drupal::request()->query->all();
@@ @@
   /**
    * Callback for deleting the entity using modal form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function deleteGenericEntityModal(EntityInterface $entity) {
     $request_parameters = \Drupal::request()->query->all();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/entity_generic/src/Controller/GenericController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_generic\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Render\RendererInterface;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   public $renderer;

   /**
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, RequestStack $request_stack) {
     $this->dateFormatter = $date_formatter;
@@ @@
    *
    * Redirects to specific add form if only one entity type is available.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the entity types that can be added; however,
    *   if there is only one entity type defined, the function
    *   will return a RedirectResponse to the entity add page for that one entity
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/entity_generic/entity_generic.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Url;
 use Drupal\Core\Cache\Cache;
@@ @@
 /**
  * Checks whether the current page is the full page view of the passed-in entity.
  *
- * @param \Drupal\entity_generic\Entity\BasicInterface $entity
+ * @param BasicInterface $entity
  *   An entity.
  *
  * @return int|false
@@ @@
  * Implements hook_entity_view_alter().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  */
-function entity_generic_entity_view_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
+function entity_generic_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   // Generalize the entity-type-specific defaults for easier default theming.
   if ($entity instanceof BasicInterface) {
     $app_root = \Drupal::service('app.root');
-    $file_path = $app_root . '/' . drupal_get_path('module', $entity->getEntityType()->getProvider()) . '/templates/entity-generic--' . strtr($entity->getEntityTypeId(), '_', '-') . '.html.twig';
+    $file_path = $app_root . '/' . \Drupal::service('extension.list.module')->getPath($entity->getEntityType()->getProvider()) . '/templates/entity-generic--' . strtr($entity->getEntityTypeId(), '_', '-') . '.html.twig';
     if (file_exists($file_path)) {
       $build['#theme'] = 'entity_generic__' . $entity->getEntityTypeId();
     }
@@ @@
  * @param array $variables
  */
 function entity_generic_theme_suggestions_entity_generic_alter(array &$suggestions, array $variables) {
-  /** @var \Drupal\entity_generic\Entity\BasicInterface $entity */
+  /** @var BasicInterface $entity */
   $entity = $variables['elements']['#entity_generic'];
   $sanitized_view_mode = 'vm-' . strtr($variables['elements']['#view_mode'], '.', '_');

@@ @@
 function entity_generic_theme_registry_alter(&$theme_registry) {
   $app_root = \Drupal::service('app.root');
   foreach (entity_generic_types() as $type => $definition) {
-    $file_path = $app_root . '/' . drupal_get_path('module', $definition->getProvider()) . '/templates/entity-generic--' . strtr($type, '_', '-') . '.html.twig';
+    $file_path = $app_root . '/' . \Drupal::service('extension.list.module')->getPath($definition->getProvider()) . '/templates/entity-generic--' . strtr($type, '_', '-') . '.html.twig';
     if (file_exists($file_path)) {
       $theme_registry['entity_generic__' . $type] = [
-        'path' => drupal_get_path('module', $definition->getProvider()) . '/templates',
+        'path' => \Drupal::service('extension.list.module')->getPath($definition->getProvider()) . '/templates',
         'preprocess functions' => [
           'template_preprocess',
           'template_preprocess_entity_generic',
@@ @@
         ],
         'render element' => 'elements',
         'template' => 'entity-generic--' . strtr($type, '_', '-'),
-        'theme path' => drupal_get_path('module', $definition->getProvider()),
+        'theme path' => \Drupal::service('extension.list.module')->getPath($definition->getProvider()),
         'type' => 'module',
       ];
     }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/entity_generic/src/Routing/GenericRouteProvider.php"  
         file, due to:                                                          
         "Analyze error: "Class Drupal\entity\Routing\AdminHtmlRouteProvider not
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/entity_generic/src/Permission/GenericPermissionProvider.
         php" file, due to:                                                     
         "Analyze error: "Class Drupal\entity\EntityPermissionProvider not      
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/entity_generic/src/Access/GenericAccessControlHandler.ph
         p" file, due to:                                                       
         "Analyze error: "Class Drupal\entity\EntityAccessControlHandler not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

