modules/contrib/cookies/cookies.install
modules/contrib/cookies/cookies.module
modules/contrib/cookies/help/cookies_base/cookies_base.install
modules/contrib/cookies/help/cookies_base/cookies_base.module
modules/contrib/cookies/modules/cookies_facebook_pixel/cookies_facebook_pixel.install
modules/contrib/cookies/modules/cookies_facebook_pixel/cookies_facebook_pixel.module
modules/contrib/cookies/modules/cookies_ga/cookies_ga.install
modules/contrib/cookies/modules/cookies_ga/cookies_ga.module
modules/contrib/cookies/modules/cookies_gtag/cookies_gtag.install
modules/contrib/cookies/modules/cookies_gtag/cookies_gtag.module
modules/contrib/cookies/modules/cookies_instagram/cookies_instagram.install
modules/contrib/cookies/modules/cookies_instagram/cookies_instagram.module
modules/contrib/cookies/modules/cookies_ivw/cookies_ivw.install
modules/contrib/cookies/modules/cookies_ivw/cookies_ivw.module
modules/contrib/cookies/modules/cookies_matomo/cookies_matomo.install
modules/contrib/cookies/modules/cookies_matomo/cookies_matomo.module
modules/contrib/cookies/modules/cookies_recaptcha/cookies_recaptcha.install
modules/contrib/cookies/modules/cookies_recaptcha/cookies_recaptcha.module
modules/contrib/cookies/modules/cookies_twitter_media/cookies_twitter_media.install
modules/contrib/cookies/modules/cookies_twitter_media/cookies_twitter_media.module
modules/contrib/cookies/modules/cookies_video/cookies_video.install
modules/contrib/cookies/modules/cookies_video/cookies_video.module
modules/contrib/cookies/src/Controller/CallbackController.php
modules/contrib/cookies/src/Controller/CookiesDocsController.php
modules/contrib/cookies/src/Controller/ServiceConfigController.php
modules/contrib/cookies/src/CookiesKnockOutService.php
modules/contrib/cookies/src/CookiesRouteProvider.php
modules/contrib/cookies/src/CookiesServiceEntityListBuilder.php
modules/contrib/cookies/src/CookiesServiceGroupListBuilder.php
modules/contrib/cookies/src/Entity/CookiesServiceEntity.php
modules/contrib/cookies/src/Entity/CookiesServiceEntityInterface.php
modules/contrib/cookies/src/Entity/CookiesServiceGroup.php
modules/contrib/cookies/src/Entity/CookiesServiceGroupInterface.php
modules/contrib/cookies/src/Form/CookiesConfigForm.php
modules/contrib/cookies/src/Form/CookiesServiceEntityDeleteForm.php
modules/contrib/cookies/src/Form/CookiesServiceEntityForm.php
modules/contrib/cookies/src/Form/CookiesServiceGroupDeleteForm.php
modules/contrib/cookies/src/Form/CookiesServiceGroupForm.php
modules/contrib/cookies/src/Form/CookiesTextsForm.php
modules/contrib/cookies/src/Plugin/Block/CookiesDocsBlock.php
modules/contrib/cookies/src/Plugin/Block/CookiesUiBlock.php
modules/contrib/cookies/src/Services/CookiesConfigService.php
modules/contrib/cookies/tests/src/Functional/FunctionalCookiesTest.php
modules/contrib/cookies/tests/src/FunctionalJavascript/FunctionalCookiesJsTest.php

13 files with changes
=====================

1) modules/contrib/cookies/tests/src/FunctionalJavascript/FunctionalCookiesJsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cookies_userlike\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

 /**
@@ @@
   /**
    * A test administrator.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * A regular authenticated user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cookies/tests/src/Functional/FunctionalCookiesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cookies\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A user with authenticated permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;

@@ @@
   /**
    * A admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminuser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cookies/src/Services/CookiesConfigService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cookies\Services;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\cookies\Entity\CookiesServiceEntity;
+use Drupal\cookies\Entity\CookiesServiceGroup;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Asset\LibraryDiscoveryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\language\ConfigurableLanguageManagerInterface definition.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * The base cookie configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $cookiesConfig;

@@ @@
   /**
    * The base cookie configuration.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Drupal\Core\Session\AccountProxyInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
    * @return array
    *   Complete formatted Cookies JSR configuration.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getCookiesConfig($langId = NULL) {
     // Pre-config language to deliver.
@@ @@
   /**
    * Lazy loader for service groups.
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
+   * @return array|EntityInterface[]
    *   Service groups.
    */
   protected function getServiceGroups() {
@@ @@
    * @param string $group
    *   Group seeking for.
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface
+   * @return bool|EntityInterface
    *   Return group Entity or false if none exists.
    */
   public function getGroup($group) {
@@ @@
    * @return array
    *   Complete groups config
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getGroups() {
     $service_entities = $this->entityTypeManager
@@ @@
       ->loadByProperties(['status' => 1]);
     $services = [];
     foreach ($service_entities as $s_entity) {
-      /** @var \Drupal\cookies\Entity\CookiesServiceEntity $s_entity */
+      /** @var CookiesServiceEntity $s_entity */
       $group = $s_entity->get('group');
       if (!isset($services[$group])) {
         $services[$group] = [
@@ @@
   /**
    * Get UI translation.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language the translation is to deliver.
    *
    * @return array|mixed
@@ @@
    * @return array
    *   Rendered cookie documentation listing.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getRenderedCookiesDocs(): array {
     $listing = [
@@ @@
     $groups = $config['services'] ?? [];

     foreach ($groups as $group_name => $group) {
-      /** @var \Drupal\cookies\Entity\CookiesServiceGroup $group_definition */
+      /** @var CookiesServiceGroup $group_definition */
       $group_definition = $this->getGroup($group_name);
       $rendered_group = [
         '#theme' => 'cookies_docs_group',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/cookies/src/Plugin/Block/CookiesUiBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cookies\Plugin\Block;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\cookies\Services\CookiesConfigService;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Config\ConfigFactory;
@@ @@
   /**
    * Config object for cookies module.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $cookiesConfig;

@@ @@
   /**
    * The COOKiES config service.
    *
-   * @var \Drupal\cookies\Services\CookiesConfigService
+   * @var CookiesConfigService
    */
   protected $cookiesConfigService;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   Block plugun definition.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   Config factory to return module config.
-   * @param \Drupal\cookies\Services\CookiesConfigService $cookies_config_service
+   * @param CookiesConfigService $cookies_config_service
    *   The config serve providing the drupalSettings (JS).
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactory $config_factory, CookiesConfigService $cookies_config_service) {
@@ @@
   /**
    * Static creator for dependencies injection in blocks.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Container delivers the services.
    * @param array $configuration
    *   Block config.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/cookies/src/Plugin/Block/CookiesDocsBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cookies\Plugin\Block;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\cookies\Services\CookiesConfigService;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The COOKiES config service.
    *
-   * @var \Drupal\cookies\Services\CookiesConfigService
+   * @var CookiesConfigService
    */
   protected $configService;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   Block plugun definition.
-   * @param \Drupal\cookies\Services\CookiesConfigService $cookies_config_service
+   * @param CookiesConfigService $cookies_config_service
    *   The config serve providing the drupalSettings (JS).
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, CookiesConfigService $cookies_config_service) {
@@ @@
   /**
    * Static creator for dependencies injection in blocks.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Container delivers the services.
    * @param array $configuration
    *   Block config.
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function build(): array {
     return $this->configService->getRenderedCookiesDocs();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cookies/src/Form/CookiesTextsForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
   /**
    * The request context.
    *
-   * @var \Drupal\Core\Routing\RequestContext
+   * @var RequestContext
    */
   protected $requestContext;

@@ @@
   /**
    * Constructs a SiteInformationForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The path alias manager.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator.
-   * @param \Drupal\Core\Routing\RequestContext $request_context
+   * @param RequestContext $request_context
    *   The request context.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AliasManagerInterface $alias_manager, PathValidatorInterface $path_validator, RequestContext $request_context) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/cookies/src/Form/CookiesServiceGroupForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The famous Drupal Cache Tags Invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidator
+   * @var CacheTagsInvalidator
    */
   protected $cacheTagsInvalidator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/cookies/src/Form/CookiesServiceEntityForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The famous Drupal Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The famous Drupal Cache Tags Invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidator
+   * @var CacheTagsInvalidator
    */
   protected $cacheTagsInvalidator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/cookies/src/CookiesKnockOutService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cookies;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\block\BlockInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Theme\ThemeManagerInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Cookies ui block instance.
    *
-   * @var \Drupal\block\BlockInterface
+   * @var BlockInterface
    */
   protected $cookiesUiBlock;

@@ @@
   /**
    * KnockOutService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Drupal EntityTypeManager.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The Drupal ThemeManager.
    */
   public function __construct(
@@ @@
   /**
    * Returns the block instance of the COOKiES UI.
    *
-   * @return \Drupal\block\BlockInterface|\Drupal\Core\Entity\EntityInterface
+   * @return BlockInterface|EntityInterface
    *   Drupal block instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getCookiesUiBlock() {
     if (!$this->cookiesUiBlock) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/cookies/src/Controller/ServiceConfigController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cookies\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\cookies\Services\CookiesConfigService;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The famous Drupal Language Manager.
    *
-   * @var \Drupal\cookies\Services\CookiesConfigService
+   * @var CookiesConfigService
    */
   protected $cookiesConfigService;

@@ @@
   /**
    * ServiceConfigController constructor.
    *
-   * @param \Drupal\cookies\Services\CookiesConfigService $cookies_config_service
+   * @param CookiesConfigService $cookies_config_service
    *   The CookiesConfigService from this project.
    */
   public function __construct(CookiesConfigService $cookies_config_service) {
@@ @@
    * @param string $lang
    *   The translation lang.
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
+   * @return CacheableJsonResponse
    *   Return as a JSON response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getJson($lang = 'en') {
     $data = $this->cookiesConfigService->getCookiesConfig($lang);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/cookies/src/Controller/CookiesDocsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cookies\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\cookies\Services\CookiesConfigService;
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\cookies\Services\CookiesConfigService
+   * @var CookiesConfigService
    */
   protected $configService;

@@ @@
   /**
    * Constructs a CookiesDocsController object.
    *
-   * @param \Drupal\cookies\Services\CookiesConfigService $config_service
+   * @param CookiesConfigService $config_service
    *   The config factory.
    */
   public function __construct(CookiesConfigService $config_service) {
@@ @@
    * @return array
    *   Returns render array with all the cookie docs collected from services.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function info() {
     return $this->configService->getRenderedCookiesDocs();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/cookies/src/Controller/CallbackController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cookies\Controller;

+use Drupal\Core\Messenger\MessengerInterface;
+use Drupal\Core\Logger\LoggerChannelFactory;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
@@ @@
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Famous Logger Channel Factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $logger;

@@ @@
   /**
    * Famous Logger Channel Factory.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/cookies/modules/cookies_instagram/cookies_instagram.module:40

    ---------- begin diff ----------
@@ @@
 function cookies_instagram_js_alter(array &$javascript, AttachedAssetsInterface $assets) {
   $doKo = CookiesKnockOutService::getInstance()->doKnockOut();
   if ($doKo) {
-    $module_path = drupal_get_path('module', 'media_entity_instagram');
+    $module_path = \Drupal::service('extension.list.module')->getPath('media_entity_instagram');
     $scripts = [
       '//platform.instagram.com/en_US/embeds.js',
       $module_path . '/js/instagram.js',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 13 files have been changed by Rector                                      

