modules/contrib/acsf/acsf.api.php
modules/contrib/acsf/acsf.install
modules/contrib/acsf/acsf.module
modules/contrib/acsf/acsf_duplication/acsf_duplication.api.php
modules/contrib/acsf/acsf_duplication/acsf_duplication.module
modules/contrib/acsf/acsf_duplication/src/Commands/AcsfDuplicationCommands.php
modules/contrib/acsf/acsf_init/lib/cloud_hooks/acquia/db_connect.php
modules/contrib/acsf/acsf_init/lib/cloud_hooks/acquia/uri.php
modules/contrib/acsf/acsf_init/lib/cloud_hooks/common/post-db-copy/000-acquia_required_scrub.php
modules/contrib/acsf/acsf_init/lib/cloud_hooks/common/pre-web-activate/000-acquia-deployment.php
modules/contrib/acsf/acsf_init/lib/sites/default/acsf.legacy.default.settings.php
modules/contrib/acsf/acsf_init/lib/sites/default/acsf.settings.php
modules/contrib/acsf/acsf_init/lib/sites/g/SimpleRest.php
modules/contrib/acsf/acsf_init/lib/sites/g/apc_rebuild.php
modules/contrib/acsf/acsf_init/lib/sites/g/settings.php
modules/contrib/acsf/acsf_init/lib/sites/g/sites.inc
modules/contrib/acsf/acsf_init/lib/sites/sites.php
modules/contrib/acsf/acsf_init/src/Commands/AcsfInitCommands.php
modules/contrib/acsf/acsf_sj/acsf_sj.install
modules/contrib/acsf/acsf_sj/acsf_sj.module
modules/contrib/acsf/acsf_sj/src/Api/SjApiClient.php
modules/contrib/acsf/acsf_sj/src/Api/SjClientInterface.php
modules/contrib/acsf/acsf_sj/src/Api/SjLocalDevClient.php
modules/contrib/acsf/acsf_sso/acsf_sso.install
modules/contrib/acsf/acsf_sso/src/EventSubscriber/SamlauthRequestSubscriber.php
modules/contrib/acsf/acsf_sso/src/EventSubscriber/SamlauthUserSyncSubscriber.php
modules/contrib/acsf/acsf_theme/acsf_theme.install
modules/contrib/acsf/acsf_theme/acsf_theme.module
modules/contrib/acsf/acsf_theme/src/Commands/AcsfThemeCommands.php
modules/contrib/acsf/acsf_variables/acsf_variables.install
modules/contrib/acsf/acsf_variables/src/Commands/AcsfVariablesCommands.php
modules/contrib/acsf/src/AcsfConfig.php
modules/contrib/acsf/src/AcsfConfigDefault.php
modules/contrib/acsf/src/AcsfConfigIncompleteException.php
modules/contrib/acsf/src/AcsfConfigMissingCredsException.php
modules/contrib/acsf/src/AcsfConfigRest.php
modules/contrib/acsf/src/AcsfException.php
modules/contrib/acsf/src/AcsfInitException.php
modules/contrib/acsf/src/AcsfInitHtaccessException.php
modules/contrib/acsf/src/AcsfLog.php
modules/contrib/acsf/src/AcsfMessage.php
modules/contrib/acsf/src/AcsfMessageEmptyResponseException.php
modules/contrib/acsf/src/AcsfMessageFailedResponseException.php
modules/contrib/acsf/src/AcsfMessageFailureException.php
modules/contrib/acsf/src/AcsfMessageMalformedResponseException.php
modules/contrib/acsf/src/AcsfMessageMissingCredsException.php
modules/contrib/acsf/src/AcsfMessageResponse.php
modules/contrib/acsf/src/AcsfMessageResponseRest.php
modules/contrib/acsf/src/AcsfMessageRest.php
modules/contrib/acsf/src/AcsfSite.php
modules/contrib/acsf/src/AcsfSiteMissingIdentifierException.php
modules/contrib/acsf/src/AcsfThemeNotify.php
modules/contrib/acsf/src/AcsfVariableStorage.php
modules/contrib/acsf/src/Commands/AcsfCommands.php
modules/contrib/acsf/src/Commands/AcsfExtraCommands.php
modules/contrib/acsf/src/Event/AcsfDuplicationScrubCommentHandler.php
modules/contrib/acsf/src/Event/AcsfDuplicationScrubCommentStorage.php
modules/contrib/acsf/src/Event/AcsfDuplicationScrubConfigurationHandler.php
modules/contrib/acsf/src/Event/AcsfDuplicationScrubEntityHandler.php
modules/contrib/acsf/src/Event/AcsfDuplicationScrubFinalizeHandler.php
modules/contrib/acsf/src/Event/AcsfDuplicationScrubInitializeHandler.php
modules/contrib/acsf/src/Event/AcsfDuplicationScrubNodeHandler.php
modules/contrib/acsf/src/Event/AcsfDuplicationScrubTemporaryFilesHandler.php
modules/contrib/acsf/src/Event/AcsfDuplicationScrubTruncateTablesHandler.php
modules/contrib/acsf/src/Event/AcsfDuplicationScrubUserHandler.php
modules/contrib/acsf/src/Event/AcsfEvent.php
modules/contrib/acsf/src/Event/AcsfEventDispatcher.php
modules/contrib/acsf/src/Event/AcsfEventHandler.php
modules/contrib/acsf/src/Event/AcsfEventHandlerIncompatibleException.php
modules/contrib/acsf/src/Event/AcsfSiteInfoHandler.php
modules/contrib/acsf/src/Event/AcsfThemeDuplicationScrubbingHandler.php
modules/contrib/acsf/src/EventSubscriber/AcsfMaintenanceModeSubscriber.php
modules/contrib/acsf/src/Routing/RouteSubscriber.php
modules/contrib/acsf/tests/AcsfConfigTest.php
modules/contrib/acsf/tests/AcsfConfigUnitTest.inc
modules/contrib/acsf/tests/AcsfConfigUnitTestIncompatible.inc
modules/contrib/acsf/tests/AcsfConfigUnitTestMissingPassword.inc
modules/contrib/acsf/tests/AcsfConfigUnitTestMissingUrl.inc
modules/contrib/acsf/tests/AcsfConfigUnitTestMissingUsername.inc
modules/contrib/acsf/tests/AcsfEventsTest.php
modules/contrib/acsf/tests/AcsfMessageResponseUnitTest.inc
modules/contrib/acsf/tests/AcsfMessageTest.php
modules/contrib/acsf/tests/AcsfMessageUnitTestFailure.inc
modules/contrib/acsf/tests/AcsfMessageUnitTestFailureException.inc
modules/contrib/acsf/tests/AcsfMessageUnitTestMissingEndpoint.inc
modules/contrib/acsf/tests/AcsfMessageUnitTestMissingResponse.inc
modules/contrib/acsf/tests/AcsfMessageUnitTestSuccess.inc
modules/contrib/acsf/tests/AcsfSiteTest.php
modules/contrib/acsf/tests/AcsfVariableStorageMock.php
modules/contrib/acsf/tests/UnitTestDummyHandler1.php
modules/contrib/acsf/tests/UnitTestDummyHandler2.php
modules/contrib/acsf/tests/UnitTestDummyHandler3.php
modules/contrib/acsf/tests/UnitTestDummyHandlerIncompatible.php
modules/contrib/acsf/tests/UnitTestDummyHandlerInterrupt.php

20 files with changes
=====================

1) modules/contrib/acsf/tests/AcsfSiteTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Setup.
    */
-  public function setUp() {
+  public function setUp(): void {
     // Simulate the sites.json configuration.
     $GLOBALS['gardens_site_settings']['conf']['acsf_site_id'] = $this->site_id;

@@ @@
   /**
    * Cleanup Mockery on each test. (PHPUnit 5 does not support listeners.)
    */
-  public function tearDown() {
+  public function tearDown(): void {
     Mockery::close();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/acsf/tests/AcsfMessageTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Setup.
    */
-  public function setUp() {
+  public function setUp(): void {
     // The files in this directory can't be autoloaded as long as they don't
     // match their classes' namespaces.
     $files = [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/acsf/tests/AcsfEventsTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Setup.
    */
-  public function setUp() {
+  public function setUp(): void {
     // The files in this directory can't be autoloaded as long as they don't
     // match their classes' namespaces.
     $files = [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/acsf/tests/AcsfConfigTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Setup.
    */
-  public function setUp() {
+  public function setUp(): void {
     // The files in this directory can't be autoloaded as long as they don't
     // match their classes' namespaces.
     $files = [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/acsf/src/EventSubscriber/AcsfMaintenanceModeSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acsf\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\State\StateInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs a new AcsfMaintenanceModeSubscriber.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state.
    */
   public function __construct(StateInterface $state) {
@@ @@
   /**
    * Sets SF maintenance mode header (on successful responses).
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/acsf/src/Event/AcsfEvent.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Handles log messages.
    *
-   * @var \Symfony\Component\Console\Output\OutputInterface
+   * @var OutputInterface
    */
   public $output;

@@ @@
    *
    * @param AcsfEventDispatcher $dispatcher
    *   The event dispatcher object.
-   * @param \Drupal\acsf\AcsfLog $log
+   * @param AcsfLog $log
    *   The log object.
    * @param string $type
    *   The type of event to run.
@@ @@
    *   The registry from acsf_registry.
    * @param array $context
    *   An arbitrary context for handlers.
-   * @param \Drupal\acsf\AcsfSite $site
+   * @param AcsfSite $site
    *   The site being operated upon (optional).
    */
   public function __construct(AcsfEventDispatcher $dispatcher, AcsfLog $log, $type, array $registry, array $context, AcsfSite $site = NULL) {
@@ @@
    *   The type of event to execute.
    * @param array $context
    *   A custom context to pass to event handlers.
-   * @param \Symfony\Component\Console\Output\OutputInterface $output
+   * @param OutputInterface $output
    *   The class that handles the logging messages.
    *
    * @return static
@@ @@
    * @return AcsfEventHandler
    *   The next event handler.
    *
-   * @throws \Drupal\acsf\Event\AcsfEventHandlerIncompatibleException
+   * @throws AcsfEventHandlerIncompatibleException
    */
   public function popHandler($type = 'incomplete') {
     if (array_key_exists($type, $this->handlers)) {
@@ @@
    * @param string $type
    *   The type of handler: incomplete, complete or failed.
    *
-   * @throws \Drupal\acsf\Event\AcsfEventHandlerIncompatibleException
+   * @throws AcsfEventHandlerIncompatibleException
    */
   public function pushHandler(AcsfEventHandler $handler, $type = 'incomplete') {
     if (array_key_exists($type, $this->handlers)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/acsf/src/Event/AcsfDuplicationScrubFinalizeHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acsf\Event;

+use Drupal\acsf\AcsfVariableStorage;
 /**
  * Handles final operations for the scrub.
  */
@@ @@
     }

     // Clean up ACSF variables.
-    /** @var \Drupal\acsf\AcsfVariableStorage $storage */
+    /** @var AcsfVariableStorage $storage */
     $storage = \Drupal::service('acsf.variable_storage');
     $acsf_variables = $storage->getGroup('acsf_duplication_scrub');
     foreach ($acsf_variables as $name => $value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/acsf/src/Event/AcsfDuplicationScrubEntityHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acsf\Event;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\acsf\AcsfVariableStorage;
+use Drupal\Core\Entity\Query\QueryInterface;
 /**
  * Handles the scrubbing of Drupal entities.
  *
@@ @@
    * variable and setting it on construction makes this easier, and makes
    * writing child methods more compatible, for the future.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * variable and setting it on construction makes this easier, and makes
    * writing child methods more compatible, for the future.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    * variable and setting it on construction makes this easier, and makes
    * writing child methods more compatible, for the future.
    *
-   * @var \Drupal\acsf\AcsfVariableStorage
+   * @var AcsfVariableStorage
    */
   protected $acsfVarStorage;

@@ @@
    * When calling this function repeatedly, a filter is applied such that the
    * query will return different IDs for each consecutive query.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The entity query instance.
    */
   protected function getBaseQuery() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/acsf/src/Event/AcsfDuplicationScrubCommentStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acsf\Event;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\comment\CommentStorage;

 /**
@@ @@
    * precaution in case a contrib module does funny things. This may be deleted
    * if we value minimizing code over supporting random theoretical failures.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $entities
+   * @param ContentEntityInterface[] $entities
    *   List of entities, keyed on the entity ID.
    */
   protected function invokeStorageLoadHook(array &$entities) {
@@ @@
     $entityFieldManager = $this->entityFieldManager ?: \Drupal::service('entity_field.manager');

     foreach ($entityFieldManager->getFieldDefinitions('comment', $bundle) as $field_definition) {
-      /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_definition */
+      /** @var FieldStorageDefinitionInterface $field_definition */
       $storage_definition = $field_definition->getFieldStorageDefinition();
       if (!$table_mapping->requiresDedicatedTableStorage($storage_definition)) {
         continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/acsf/src/Commands/AcsfExtraCommands.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Print credentials retrieved from the factory.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\PropertyList
+   * @return PropertyList
    *   Gives back the creds in json format.
    *
-   * @throws \Drupal\acsf\AcsfException
+   * @throws AcsfException
    *   If the function couldn't retrieve the necessary creds.
    *
    * @command acsf-get-factory-creds
@@ @@
   }

   /**
-   * Reports process completion back to the factory.
-   *
-   * @param array $options
-   *   The command options supplied to the executed command.
-   *
-   * @throws \Drupal\acsf\AcsfException;
-   *   If the data argument is invalid.
-   *
-   * @command report-complete-async-process
-   * @bootstrap root
-   * @option data Serialized PHP data regarding the caller.
-   */
+  * Reports process completion back to the factory.
+  *
+  * @param array $options
+  *   The command options supplied to the executed command.
+  *
+   * @throws AcsfException ;
+    If the data argument is invalid.
+  *
+  * @command report-complete-async-process
+  * @bootstrap root
+  * @option data Serialized PHP data regarding the caller.
+  */
   public function completeAsyncProcess(array $options = ['data' => NULL]) {
     $data = unserialize($options['data']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/acsf/src/AcsfVariableStorage.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The current database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The active database connection.
    */
   public function __construct(Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/acsf/src/AcsfThemeNotify.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The ACSF variable storage.
    *
-   * @var \Drupal\acsf\AcsfVariableStorage
+   * @var AcsfVariableStorage
    */
   protected $acsfVarStorage;

@@ @@
   /**
    * The current database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\acsf\AcsfVariableStorage $variable_storage
+   * @param AcsfVariableStorage $variable_storage
    *   The ACSF variable storage service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The active database connection.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(AcsfVariableStorage $variable_storage, Connection $database, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/acsf/src/AcsfSite.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * ACSF variable storage.
    *
-   * @var \Drupal\acsf\AcsfVariableStorage
+   * @var AcsfVariableStorage
    */
   protected $variableStorage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/acsf/src/AcsfMessage.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * The AcsfMessageResponse object.
    *
-   * @var \Drupal\acsf\AcsfMessageResponse
+   * @var AcsfMessageResponse
    */
   protected $response;

@@ @@
   /**
    * An optional AcsfConfig object.
    *
-   * @var \Drupal\acsf\AcsfConfig
+   * @var AcsfConfig
    */
   private $config;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/acsf/acsf_variables/src/Commands/AcsfVariablesCommands.php:18

    ---------- begin diff ----------
@@ @@
    * @param array $options
    *   The command options supplied to the executed command.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\PropertyList
+   * @return PropertyList
    *   ProperyList of the variable.
    *
-   * @throws \Drupal\acsf\AcsfException
+   * @throws AcsfException
    *   If the variable does not exist with the provided name or the
    *   acsf_variables module isn't enabled.
    * @throws \InvalidArgumentException
@@ @@
    * @param array $options
    *   The command options supplied to the executed command.
    *
-   * @throws \Drupal\acsf\AcsfException
+   * @throws AcsfException
    *   If the variable does not exist with the provided name or the
    *   acsf_variables module isn't enabled.
    * @throws \InvalidArgumentException
@@ @@
    * @param string $group
    *   The group name of the variable to retrieve.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\PropertyList
+   * @return PropertyList
    *   PropertyList of the variables.
    *
-   * @throws \Drupal\acsf\AcsfException
+   * @throws AcsfException
    *   If the variable does not exist with the provided name or the
    *   acsf_variables module isn't enabled.
    * @throws \InvalidArgumentException
@@ @@
    * @param string $name
    *   The name of the variable to delete.
    *
-   * @throws \Drupal\acsf\AcsfException
+   * @throws AcsfException
    *   If the variable does not exist with the provided name or the
    *   acsf_variables module isn't enabled.
    * @throws \InvalidArgumentException
@@ @@
   /**
    * Retrieves info about a site.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\PropertyList
+   * @return PropertyList
    *   The site info list in var_export format.
    *
    * @command acsf-info
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/acsf/acsf_sso/src/EventSubscriber/SamlauthUserSyncSubscriber.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The EntityTypeManager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Construct a new SamlauthUserSyncSubscriber.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, LoggerInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/acsf/acsf_sj/src/Api/SjApiClient.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * A logger instance for acsf_sj.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs the ACSF SJ Client.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(RequestStack $request_stack, LoggerInterface $logger) {
@@ @@

     $exit_code = -1;
     if (!$error) {
-      $command = sprintf('%s %s', $this->binary, $command_arguments);
+      $command = [$this->binary, $command_arguments];
       // Possibly one retry.
       for ($retry = 0; $retry < 2 && $exit_code !== 0; $retry++) {
         if ($retry) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * StringToArrayArgumentProcessRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/acsf/acsf_init/src/Commands/AcsfInitCommands.php:71

    ---------- begin diff ----------
@@ @@
    * @param array $options
    *   The command options supplied to the executed command.
    *
-   * @throws \Drupal\acsf\AcsfException
+   * @throws AcsfException
    *   If the command cannot be executed.
    *
    * @command acsf-init
@@ @@
    * @param array $options
    *   The command options supplied to the executed command.
    *
-   * @throws \Drupal\acsf\AcsfException
+   * @throws AcsfException
    *   If something is wrong with the current codebase.
    *
    * @command acsf-init-verify
@@ @@
    * @param array $options
    *   The command options supplied to the executed command.
    *
-   * @throws \Drupal\acsf\AcsfException
+   * @throws AcsfException
    *    If the provided email address is invalid.
    * @throws \InvalidArgumentException
    *   If one or more arguments are missing or invalid.
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    *   If the customer does not allow the creation of a new account.
    *
    * @command acsf-connect-factory
@@ @@
     $admin_account->setLastLoginTime(1)
       ->setUsername('Site Factory admin')
       ->setEmail($site_admin_mail)
-      ->setPassword(user_password())
+      ->setPassword(\Drupal::service('password_generator')->generate())
       ->activate()
       ->save();

@@ @@
     $site_owner_account->setLastLoginTime(1)
       ->setUsername($site_owner_name)
       ->setEmail($site_owner_mail)
-      ->setPassword(user_password())
+      ->setPassword(\Drupal::service('password_generator')->generate())
       ->activate()
       ->save();

@@ @@
    * want our line in their .htaccess file, then adding it verbatim, but
    * commented-out would suffice.
    *
-   * @throws \Drupal\acsf\AcsfInitHtaccessException
+   * @throws AcsfInitHtaccessException
    *   If the function couldn't patch the .htaccess file.
    */
   private function patchHtaccess() {
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/acsf/acsf_duplication/src/Commands/AcsfDuplicationCommands.php:24

    ---------- begin diff ----------
@@ @@
    * @param array $options
    *   The command options supplied to the executed command.
    *
-   * @throws \Drupal\acsf\AcsfException
+   * @throws AcsfException
    *   If the scrub process was not successful or the acsf module is not
    *   enabled.
    * @throws \InvalidArgumentException
@@ @@
    *
    * @command acsf-duplication-scrub-progress
    *
-   * @throws \Drupal\acsf\AcsfException
+   * @throws AcsfException
    *   If the scrub process was not successful or the acsf module is not
    *   enabled.
    * @throws \InvalidArgumentException
    *   If one or more arguments are missing.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\PropertyList
+   * @return PropertyList
    *   Description of remaining comments to scrub.
    */
   public function duplicationScrubProgress() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/acsf/acsf.api.php:19

    ---------- begin diff ----------
@@ @@
         // contain a namespace declaration.
         'class' => '\Drupal\your_module\YourClassName',
         // 'path' is necessary only if the location is non-standard:
-        'path' => drupal_get_path('module', 'your_module') . '/classes',
+        'path' => \Drupal::service('extension.list.module')->getPath('your_module') . '/classes',
       ],
     ],
   ];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 20 files have been changed by Rector                                      

