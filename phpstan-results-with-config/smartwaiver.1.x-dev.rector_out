modules/contrib/smartwaiver/src/ClientInterface.php
modules/contrib/smartwaiver/src/Controller/DefaultController.php
modules/contrib/smartwaiver/src/Event/SmartwaiverEvent.php
modules/contrib/smartwaiver/src/Form/ConfigForm.php
modules/contrib/smartwaiver/src/Form/ConfigFormBase.php
modules/contrib/smartwaiver/src/Form/ListConfigForm.php
modules/contrib/smartwaiver/src/Service/AuthenticWebhook.php
modules/contrib/smartwaiver/src/Service/Client.php

5 files with changes
====================

1) modules/contrib/smartwaiver/src/Service/Client.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * A config factory instance.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The immutable smartwaiver config object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * An array of options to send with the http request.
    *
-   * @var \Symfony\Component\HttpFoundation\ParameterBag
+   * @var ParameterBag
    */
   protected $options;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/smartwaiver/src/Service/AuthenticWebhook.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smartwaiver\Service;

+use Drupal\Core\Config\Config;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The key repository service.
    *
-   * @var \Drupal\key\KeyRepositoryInterface
+   * @var KeyRepositoryInterface
    */
   protected $keyRepository;

@@ @@
   /**
    * The smartwaiver config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * A logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Whether a given smartwaiver webhook request is authentic.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/smartwaiver/src/Form/ListConfigForm.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The smartwaiver client.
    *
-   * @var \Drupal\smartwaiver\ClientInterface
+   * @var ClientInterface
    */
   protected $client;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/smartwaiver/src/Event/SmartwaiverEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smartwaiver\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 class SmartwaiverEvent extends Event {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/smartwaiver/src/Controller/DefaultController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smartwaiver\Controller;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ @@
   /**
    * The smartwaiver client api service.
    *
-   * @var \Drupal\smartwaiver\ClientInterface;
+   * @var ClientInterface ;
    */
   protected $client;

@@ @@
   /**
    * The immutable smartwaiver config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The immutable smartwaiver config object.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@

     if ($waiver && $this->isActiveWaiver($waiver)) {
       $event = $this->newEvent($waiver);
-      $this->eventDispatcher->dispatch(SmartwaiverEvent::NEW_WAIVER, $event);
+      $this->eventDispatcher->dispatch($event, SmartwaiverEvent::NEW_WAIVER);
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 5 files have been changed by Rector                                       

