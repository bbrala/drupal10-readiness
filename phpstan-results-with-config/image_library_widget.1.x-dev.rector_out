modules/contrib/image_library_widget/image_library_widget.module
modules/contrib/image_library_widget/src/Element/ImageLibraryWidgetElement.php
modules/contrib/image_library_widget/src/Plugin/Field/FieldWidget/ImageLibraryWidget.php
modules/contrib/image_library_widget/tests/src/Functional/ImageLibraryWidgetSettingsTest.php
modules/contrib/image_library_widget/tests/src/FunctionalJavascript/ImageLibraryWidgetTest.php
modules/contrib/image_library_widget/tests/src/Kernel/ImageLibraryWidgetDependencyTest.php
modules/contrib/image_library_widget/tests/src/Traits/ImageLibraryWidgetTestTrait.php

5 files with changes
====================

1) modules/contrib/image_library_widget/tests/src/Traits/ImageLibraryWidgetTestTrait.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\image_library_widget\Traits;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
    * @param array $widget_options
    *   (optional) The caller may provide the widget options.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In case of failures an exception is thrown.
    */
   protected function createImageField(array $widget_options = []): void {
@@ @@
     ])->setSetting('alt_field', FALSE)
       ->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
+    /** @var EntityFormDisplayInterface $entity_form_display */
     $entity_form_display = EntityFormDisplay::load('entity_test.entity_test.default');

     if (!$entity_form_display) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/image_library_widget/tests/src/Kernel/ImageLibraryWidgetDependencyTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\image_library_widget\Kernel;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\media\Entity\MediaType;
@@ @@
       ],
     ]);

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
+    /** @var EntityFormDisplayInterface $entity_form_display */
     $entity_form_display = EntityFormDisplay::load('entity_test.entity_test.default');

     // Check that a dependency to 'logo' media type has been added.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/image_library_widget/tests/src/FunctionalJavascript/ImageLibraryWidgetTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\image_library_widget\FunctionalJavascript;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     foreach (['logo' => 'Logo', 'banner' => 'Banner'] as $id => $label) {
@@ @@
     $page = $session->getPage();

     // Check that when there are not media entries the library is not displayed.
-    $this->assertElementNotPresent('.image-library-widget');
+    $this->assertSession()->elementNotExists('.image-library-widget');

     // Add some pre-uploaded logos.
     $this->addMedia('logo', 30);
@@ @@
     $session->reload();

     // Check that the label doesn't exist as it hasn't been configured.
-    $this->assertElementNotPresent('.image-library-widget-label');
+    $this->assertSession()->elementNotExists('.image-library-widget-label');

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = EntityFormDisplay::load('entity_test.entity_test.default');
     // Add image library browser label.
     $widget = $form_display->getComponent('image');
@@ @@
     $session->reload();

     // Check that the image library is displayed.
-    $this->assertElementPresent('.image-library-widget-label');
+    $this->assertSession()->elementExists('.image-library-widget-label');
     $assert->pageTextContains('Or choose a predefined Logo');
-    $this->assertElementPresent('.image-library-widget');
+    $this->assertSession()->elementExists('.image-library-widget');

     $image_fid = $this->selectImageFromLibrary();

     // Check that after a image has been selected the browser won't show.
-    $this->assertElementNotPresent('.image-library-widget-label');
+    $this->assertSession()->elementNotExists('.image-library-widget-label');
     $assert->pageTextNotContains('Or choose a predefined Logo');
-    $this->assertElementNotPresent('.image-library-widget');
+    $this->assertSession()->elementNotExists('.image-library-widget');

     // Save the new entity.
     $page->pressButton('Save');
@@ @@
    * @return int
    *   The selected image file ID.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    *   If either images from the library or the hidden field doesn't exist.
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    *   If the hidden field's value doesn't meet the expectation.
    */
   protected function selectImageFromLibrary(): int {
@@ @@
    * @param int $amount
    *   The amount of media entities to be created.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In case of failures an exception is thrown.
    */
   protected function addMedia(string $media_type_id, int $amount): void {
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+    /** @var EntityFieldManagerInterface $entity_field_manager */
     $entity_field_manager = \Drupal::service('entity_field.manager');
     $field_definition = $entity_field_manager->getFieldDefinitions('media', $media_type_id)['image_library_widget_image'];
     for ($i = 0; $i < $amount; $i++) {
    ----------- end diff -----------

Applied rules:
 * AssertElementNotPresentRector
 * AssertElementPresentRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/image_library_widget/tests/src/Functional/ImageLibraryWidgetSettingsTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->createImageField();
@@ @@
     $assert_session->pageTextNotContains('Image library type:');

     // Use the 'Image Library Widget' widget.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'fields[image][type]' => 'image_library_widget',
     ], 'Save');

@@ @@

     // Add two media types to be used as image libraries for the widget.
     $this->clickLink('add some media types');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'Logo',
       'id' => 'logo',
       'source' => 'image',
@@ @@
     ], 'Save');
     $page->selectFieldOption('Field with source information', 'media.image_library_widget_image');
     $page->pressButton('Save');
+    $this->drupalGet('admin/structure/media/add');

-    $this->drupalPostForm('admin/structure/media/add', [
+    $this->submitForm([
       'label' => 'Banner',
       'id' => 'banner',
       'source' => 'image',
@@ @@
     ], 'Save');
     $page->selectFieldOption('Field with source information', 'media.image_library_widget_image');
     $page->pressButton('Save');
+    $this->drupalGet('admin/structure/media/add');

     // Add a media type that doesn't qualify as an image library for the widget.
-    $this->drupalPostForm('admin/structure/media/add', [
+    $this->submitForm([
       'label' => 'Not a widget image library',
       'id' => 'not_a_widget_image_library',
       'source' => 'file',
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/image_library_widget/src/Plugin/Field/FieldWidget/ImageLibraryWidget.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\image_library_widget\Plugin\Field\FieldWidget;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\views\Plugin\Block\ViewsBlock;
+use Drupal\views\ViewExecutable;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The block plugin manager service.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockPluginManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The media type entity storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $mediaTypeStorage;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   The element info manager service.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_plugin_manager
+   * @param BlockManagerInterface $block_plugin_manager
    *   The block plugin manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, ElementInfoManagerInterface $element_info, ImageFactory $image_factory, EntityTypeManagerInterface $entity_type_manager, BlockManagerInterface $block_plugin_manager, AccountProxyInterface $current_user) {
@@ @@
     // image library widget browser.
     $cache_metadata->addCacheContexts(['user.permissions']);

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $form_state->getStorage()['form_display'];
     // Invalidate the cache when the widget settings are updated.
     $cache_metadata->addCacheableDependency($form_display);
@@ @@
     if ($media_type_id = $this->getSetting('media_type_id')) {
       // @todo Use a configurable view and display in #3104544.
       // @see https://www.drupal.org/project/image_library_widget/issues/3104544
-      /** @var \Drupal\views\Plugin\Block\ViewsBlock $block_plugin */
+      /** @var ViewsBlock $block_plugin */
       $block_plugin = $this->blockPluginManager->createInstance("views_block:image_library_widget-block");
       if ($block_plugin->access($this->currentUser)) {
         $block_plugin->setContextValue('bundle', $media_type_id);
@@ @@
         // If the view display has been configured with a pager, it should use
         // Ajax, as navigating to a different widget page should be done without
         // reloading the page where the widget is rendered.
-        /** @var \Drupal\views\ViewExecutable $view */
+        /** @var ViewExecutable $view */
         if ($view =& $block_build['#view']) {
           if (!in_array($view->getPager()->getPluginId(), ['none', 'some']) && !$view->ajaxEnabled()) {
             throw new \Exception('When the image library widget is configured to use a pager, the view should be Ajax enabled.');
@@ @@
   /**
    * Returns the media type config entity for this widget.
    *
-   * @return \Drupal\media\MediaTypeInterface|null
+   * @return MediaTypeInterface|null
    *   The media type of this widget.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the 'media_type' storage handler couldn't be loaded.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the 'media_type' entity type doesn't exist.
    */
   protected function getMediaType(): ?MediaTypeInterface {
     if ($media_type_id = $this->getSetting('media_type_id')) {
-      /** @var \Drupal\media\MediaTypeInterface $media_type */
+      /** @var MediaTypeInterface $media_type */
       $media_type = $this->getMediaTypeStorage()->load($media_type_id);
       return $media_type;
     }
@@ @@
   /**
    * Returns the media type entity storage.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   The media type entity storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the 'media' storage handler couldn't be loaded.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the 'media' entity type doesn't exist.
    */
   protected function getMediaTypeStorage(): ConfigEntityStorageInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

