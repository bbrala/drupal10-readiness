diff --git a/modules/search_api_solr_admin/search_api_solr_admin.module b/modules/search_api_solr_admin/search_api_solr_admin.module
index 5c8038c3..3fdbf003 100644
--- a/modules/search_api_solr_admin/search_api_solr_admin.module
+++ b/modules/search_api_solr_admin/search_api_solr_admin.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\search_api\ServerInterface;
 /**
  * @file
  * Solr Admin.
@@ -12,7 +13,7 @@ use Drupal\search_api_solr\SolrBackendInterface;
  * Implements hook_form_FORM_ID_alter().
  */
 function search_api_solr_admin_form_search_api_server_status_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\search_api\ServerInterface $server */
+  /** @var ServerInterface $server */
   $server = $form['#server'];
   $backend = $server->getBackend();
   if ($backend instanceof SolrBackendInterface && $backend->getSolrConnector()->isCloud()) {
@@ -32,12 +33,12 @@ function search_api_solr_admin_form_search_api_server_status_alter(&$form, FormS
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function search_api_solr_admin_form_search_api_server_status_submit_delete_collection(&$form, FormStateInterface $form_state) {
   // Redirect to the "delete collection" form.
-  /** @var \Drupal\search_api\ServerInterface $server */
+  /** @var ServerInterface $server */
   $server = $form['#server'];
   $form_state->setRedirect('search_api_solr_admin.solr_delete_collection_form', ['search_api_server' => $server->id()]);
 }
diff --git a/modules/search_api_solr_admin/src/Access/SolrAdminAccessCheck.php b/modules/search_api_solr_admin/src/Access/SolrAdminAccessCheck.php
index b963c9b0..470edfb1 100644
--- a/modules/search_api_solr_admin/src/Access/SolrAdminAccessCheck.php
+++ b/modules/search_api_solr_admin/src/Access/SolrAdminAccessCheck.php
@@ -16,9 +16,9 @@ class SolrAdminAccessCheck implements AccessInterface {
   /**
    * A custom access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
-   * @param \Drupal\search_api\ServerInterface|null $search_api_server
+   * @param ServerInterface|null $search_api_server
    *   (optional) The Search API server entity.
    */
   public function access(AccountInterface $account, ServerInterface $search_api_server = NULL) {
diff --git a/modules/search_api_solr_admin/src/Access/SolrAdminCloudAccessCheck.php b/modules/search_api_solr_admin/src/Access/SolrAdminCloudAccessCheck.php
index 7fdcfe17..2e15d36e 100644
--- a/modules/search_api_solr_admin/src/Access/SolrAdminCloudAccessCheck.php
+++ b/modules/search_api_solr_admin/src/Access/SolrAdminCloudAccessCheck.php
@@ -16,9 +16,9 @@ class SolrAdminCloudAccessCheck implements AccessInterface {
   /**
    * A custom access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
-   * @param \Drupal\search_api\ServerInterface|null $search_api_server
+   * @param ServerInterface|null $search_api_server
    *   (optional) The Search API server entity.
    */
   public function access(AccountInterface $account, ServerInterface $search_api_server = NULL) {
diff --git a/modules/search_api_solr_admin/src/Commands/SearchApiSolrAdminCommands.php b/modules/search_api_solr_admin/src/Commands/SearchApiSolrAdminCommands.php
index 15e3c2ea..2e35235b 100644
--- a/modules/search_api_solr_admin/src/Commands/SearchApiSolrAdminCommands.php
+++ b/modules/search_api_solr_admin/src/Commands/SearchApiSolrAdminCommands.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\search_api_solr_admin\Commands;
 
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api_solr\SearchApiSolrException;
+use ZipStream\Exception\FileNotFoundException;
+use ZipStream\Exception\FileNotReadableException;
+use ZipStream\Exception\OverflowException;
 use Consolidation\AnnotatedCommand\Input\StdinAwareInterface;
 use Consolidation\AnnotatedCommand\Input\StdinAwareTrait;
 use Drupal\search_api_solr_admin\Utility\SolrAdminCommandHelper;
@@ -18,14 +23,14 @@ class SearchApiSolrAdminCommands extends DrushCommands implements StdinAwareInte
   /**
    * The command helper.
    *
-   * @var \Drupal\search_api_solr_admin\Utility\SolrAdminCommandHelper
+   * @var SolrAdminCommandHelper
    */
   protected $commandHelper;
 
   /**
    * Constructs a SearchApiSolrCommands object.
    *
-   * @param \Drupal\search_api_solr_admin\Utility\SolrAdminCommandHelper $commandHelper
+   * @param SolrAdminCommandHelper $commandHelper
    *   The command helper.
    */
   public function __construct(SolrAdminCommandHelper $commandHelper) {
@@ -47,8 +52,8 @@ class SearchApiSolrAdminCommands extends DrushCommands implements StdinAwareInte
    * @param string $server_id
    *   The ID of the server.
    *
-   * @throws \Drupal\search_api\SearchApiException
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws SearchApiException
+   * @throws SearchApiSolrException
    *
    * @command search-api-solr:reload
    *
@@ -69,8 +74,8 @@ class SearchApiSolrAdminCommands extends DrushCommands implements StdinAwareInte
    * @param string $server_id
    *   The ID of the server.
    *
-   * @throws \Drupal\search_api\SearchApiException
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws SearchApiException
+   * @throws SearchApiSolrException
    *
    * @command search-api-solr:delete-collection
    *
@@ -169,11 +174,11 @@ class SearchApiSolrAdminCommands extends DrushCommands implements StdinAwareInte
    *
    * @aliases solr-upload-conf
    *
-   * @throws \Drupal\search_api\SearchApiException
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
-   * @throws \ZipStream\Exception\FileNotFoundException
-   * @throws \ZipStream\Exception\FileNotReadableException
-   * @throws \ZipStream\Exception\OverflowException
+   * @throws SearchApiException
+   * @throws SearchApiSolrException
+   * @throws FileNotFoundException
+   * @throws FileNotReadableException
+   * @throws OverflowException
    */
   public function uploadConfigset(string $server_id, int $num_shards = 0, array $options = [
     'numShards' => 3,
diff --git a/modules/search_api_solr_admin/src/Form/SolrAdminFormBase.php b/modules/search_api_solr_admin/src/Form/SolrAdminFormBase.php
index c29c4eb5..0d11f2e9 100644
--- a/modules/search_api_solr_admin/src/Form/SolrAdminFormBase.php
+++ b/modules/search_api_solr_admin/src/Form/SolrAdminFormBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_solr_admin\Form;
 
+use Drupal\search_api\ServerInterface;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\search_api\LoggerTrait;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -22,30 +24,30 @@ abstract class SolrAdminFormBase extends FormBase {
   /**
    * The core messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The Search API server entity.
    *
-   * @var \Drupal\search_api\ServerInterface
+   * @var ServerInterface
    */
   protected $searchApiServer;
 
   /**
    * The Search API server entity.
    *
-   * @var \Drupal\search_api_solr_admin\Utility\SolrAdminCommandHelper
+   * @var SolrAdminCommandHelper
    */
   protected $commandHelper;
 
   /**
    * SolrDeleteCollectionForm constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\search_api_solr_admin\Utility\SolrAdminCommandHelper $commandHelper
+   * @param SolrAdminCommandHelper $commandHelper
    *   The command helper.
    */
   public function __construct(MessengerInterface $messenger, SolrAdminCommandHelper $commandHelper) {
@@ -69,7 +71,7 @@ abstract class SolrAdminFormBase extends FormBase {
    * @param string $channel
    *   The log channel.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger.
    */
   protected function getLogger($channel = '') {
diff --git a/modules/search_api_solr_admin/src/Form/SolrReloadCoreForm.php b/modules/search_api_solr_admin/src/Form/SolrReloadCoreForm.php
index a59dcc52..8d041a4c 100644
--- a/modules/search_api_solr_admin/src/Form/SolrReloadCoreForm.php
+++ b/modules/search_api_solr_admin/src/Form/SolrReloadCoreForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_solr_admin\Form;
 
+use Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\search_api\ServerInterface;
 use Drupal\search_api_solr\Utility\Utility;
@@ -26,7 +27,7 @@ class SolrReloadCoreForm extends SolrAdminFormBase {
   public function buildForm(array $form, FormStateInterface $form_state, ServerInterface $search_api_server = NULL) {
     $this->searchApiServer = $search_api_server;
 
-    /** @var \Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend $backend */
+    /** @var SearchApiSolrBackend $backend */
     $backend = $this->searchApiServer->getBackend();
 
     $core = $this->searchApiServer->getBackendConfig()['connector_config']['core'];
diff --git a/modules/search_api_solr_admin/src/Utility/SolrAdminCommandHelper.php b/modules/search_api_solr_admin/src/Utility/SolrAdminCommandHelper.php
index 27c820cb..baa7b928 100644
--- a/modules/search_api_solr_admin/src/Utility/SolrAdminCommandHelper.php
+++ b/modules/search_api_solr_admin/src/Utility/SolrAdminCommandHelper.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\search_api_solr_admin\Utility;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\search_api\SearchApiException;
+use ZipStream\Exception\FileNotFoundException;
+use ZipStream\Exception\FileNotReadableException;
+use ZipStream\Exception\OverflowException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ -19,35 +25,35 @@ class SolrAdminCommandHelper extends SolrCommandHelper {
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a CommandHelper object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the "search_api_index" or "search_api_server" entity types'
    *   storage handlers couldn't be loaded.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the "search_api_index" or "search_api_server" entity types are
    *   unknown.
    */
@@ -63,8 +69,8 @@ class SolrAdminCommandHelper extends SolrCommandHelper {
    * @param string $server_id
    *   The ID of the server.
    *
-   * @throws \Drupal\search_api\SearchApiException
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws SearchApiException
+   * @throws SearchApiSolrException
    */
   public function reload(string $server_id): void {
     $server = $this->getServer($server_id);
@@ -82,8 +88,8 @@ class SolrAdminCommandHelper extends SolrCommandHelper {
    * @param string $server_id
    *   The ID of the server.
    *
-   * @throws \Drupal\search_api\SearchApiException
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws SearchApiException
+   * @throws SearchApiSolrException
    */
   public function deleteCollection(string $server_id): void {
     $server = $this->getServer($server_id);
@@ -104,11 +110,11 @@ class SolrAdminCommandHelper extends SolrCommandHelper {
    * @param bool $messages
    *   Indicate if messages should be displayed, default is FALSE.
    *
-   * @throws \Drupal\search_api\SearchApiException
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
-   * @throws \ZipStream\Exception\FileNotFoundException
-   * @throws \ZipStream\Exception\FileNotReadableException
-   * @throws \ZipStream\Exception\OverflowException
+   * @throws SearchApiException
+   * @throws SearchApiSolrException
+   * @throws FileNotFoundException
+   * @throws FileNotReadableException
+   * @throws OverflowException
    */
   public function uploadConfigset(string $server_id, array $collection_params = [], bool $messages = FALSE): void {
     $server = $this->getServer($server_id);
diff --git a/modules/search_api_solr_autocomplete/src/Plugin/search_api_autocomplete/suggester/BackendTrait.php b/modules/search_api_solr_autocomplete/src/Plugin/search_api_autocomplete/suggester/BackendTrait.php
index c1af26b6..8c902c10 100644
--- a/modules/search_api_solr_autocomplete/src/Plugin/search_api_autocomplete/suggester/BackendTrait.php
+++ b/modules/search_api_solr_autocomplete/src/Plugin/search_api_autocomplete/suggester/BackendTrait.php
@@ -13,10 +13,10 @@ trait BackendTrait {
   /**
    * Retrieves the backend for the given index, if it supports autocomplete.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
    *
-   * @return \Drupal\search_api_solr\SolrBackendInterface|null
+   * @return SolrBackendInterface|null
    *   The backend plugin of the index's server, if it exists and supports
    *   autocomplete; NULL otherwise.
    */
diff --git a/modules/search_api_solr_autocomplete/tests/src/Kernel/SearchApiSolrAutocompleteTest.php b/modules/search_api_solr_autocomplete/tests/src/Kernel/SearchApiSolrAutocompleteTest.php
index 5b11e894..07953abd 100644
--- a/modules/search_api_solr_autocomplete/tests/src/Kernel/SearchApiSolrAutocompleteTest.php
+++ b/modules/search_api_solr_autocomplete/tests/src/Kernel/SearchApiSolrAutocompleteTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_solr_autocomplete\Kernel;
 
+use Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend;
 use Drupal\search_api\Entity\Server;
 use Drupal\search_api_autocomplete\Entity\Search;
 use Drupal\Tests\search_api_solr\Kernel\SolrBackendTestBase;
@@ -46,7 +47,7 @@ class SearchApiSolrAutocompleteTest extends SolrBackendTestBase {
 
     $this->indexItems($this->indexId);
 
-    /** @var \Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend $backend */
+    /** @var SearchApiSolrBackend $backend */
     $backend = Server::load($this->serverId)->getBackend();
     $solr_major_version = $backend->getSolrConnector()->getSolrMajorVersion();
     $autocompleteSearch = new Search(['index_id' => $this->indexId], 'search_api_autocomplete_search');
diff --git a/modules/search_api_solr_devel/search_api_solr_devel.module b/modules/search_api_solr_devel/search_api_solr_devel.module
index e4bdd707..bd0e5788 100644
--- a/modules/search_api_solr_devel/search_api_solr_devel.module
+++ b/modules/search_api_solr_devel/search_api_solr_devel.module
@@ -1,15 +1,15 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Devel integration.
  */
-
 /**
  * Implements hook_entity_type_alter().
  */
 function search_api_solr_devel_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   foreach ($entity_types as $entity_type_id => $entity_type) {
     if ($entity_type->hasLinkTemplate('devel-render') || $entity_type->hasLinkTemplate('devel-load')) {
       $entity_type->setLinkTemplate('devel-solr', "/devel/$entity_type_id/{{$entity_type_id}}/solr");
diff --git a/modules/search_api_solr_devel/src/Commands/SearchApiSolrDevelCommands.php b/modules/search_api_solr_devel/src/Commands/SearchApiSolrDevelCommands.php
index 183d40a9..6a800712 100644
--- a/modules/search_api_solr_devel/src/Commands/SearchApiSolrDevelCommands.php
+++ b/modules/search_api_solr_devel/src/Commands/SearchApiSolrDevelCommands.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api_solr_devel\Commands;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\search_api\SearchApiException;
@@ -20,22 +23,22 @@ class SearchApiSolrDevelCommands extends DrushCommands {
   /**
    * The command helper.
    *
-   * @var \Drupal\search_api_solr\Utility\SolrCommandHelper
+   * @var SolrCommandHelper
    */
   protected $commandHelper;
 
   /**
    * Constructs a SearchApiSolrCommands object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ModuleHandlerInterface $moduleHandler, EventDispatcherInterface $eventDispatcher) {
     parent::__construct();
@@ -61,9 +64,9 @@ class SearchApiSolrDevelCommands extends DrushCommands {
    * @usage search-api-solr-devel:delete-all server_id
    *   Deletes *all* documents on server_id.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws PluginException
+   * @throws SearchApiSolrException
+   * @throws SearchApiException
    */
   public function deleteAll($server_id) {
     $servers = $this->commandHelper->loadServers([$server_id]);
diff --git a/modules/search_api_solr_devel/src/Controller/DevelController.php b/modules/search_api_solr_devel/src/Controller/DevelController.php
index 6efd4fd8..f014bb17 100644
--- a/modules/search_api_solr_devel/src/Controller/DevelController.php
+++ b/modules/search_api_solr_devel/src/Controller/DevelController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\search_api_solr_devel\Controller;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\search_api_solr\SolrBackendInterface;
+use Solarium\QueryType\Select\Query\Query;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -31,14 +35,14 @@ class DevelController extends ControllerBase {
   /**
    * The server storage controller.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * The backend plugin manager.
    *
-   * @var \Drupal\search_api\Backend\BackendPluginManager
+   * @var BackendPluginManager
    */
   protected $backendPluginManager;
 
@@ -52,47 +56,47 @@ class DevelController extends ControllerBase {
   /**
    * The fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface
+   * @var FieldsHelperInterface
    */
   protected $fieldsHelper;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a DevelController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\search_api\Backend\BackendPluginManager $backend_plugin_manager
+   * @param BackendPluginManager $backend_plugin_manager
    *   The backend plugin manager.
    * @param \Drupal\devel\DevelDumperManagerInterface $devel_dumper_manager
    *   The Devel dumper manager.
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fields_helper
+   * @param FieldsHelperInterface $fields_helper
    *   The Search API Fields Helper.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, BackendPluginManager $backend_plugin_manager, DevelDumperManagerInterface $devel_dumper_manager, FieldsHelperInterface $fields_helper, ModuleHandlerInterface $module_handler, DateFormatterInterface $date_formatter, TimeInterface $time) {
@@ -141,7 +145,7 @@ class DevelController extends ControllerBase {
   /**
    * Prints the document structure to be indexed by Solr.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   A RouteMatch object.
    *
    * @return array
@@ -157,16 +161,16 @@ class DevelController extends ControllerBase {
 
     if ($entity && $entity instanceof EntityInterface) {
       foreach ($this->getBackends() as $backend_id) {
-        /** @var \Drupal\search_api\ServerInterface[] $servers */
+        /** @var ServerInterface[] $servers */
         $servers = $this->storage->loadByProperties([
           'backend' => $backend_id,
           'status' => TRUE,
         ]);
         foreach ($servers as $server) {
           /** @var \Drupal\search_api\ServerInterface $server */
-          /** @var \Drupal\search_api_solr\SolrBackendInterface $backend */
+          /** @var SolrBackendInterface $backend */
           $backend = $server->getBackend();
-          /** @var \Drupal\search_api\IndexInterface[] $indexes */
+          /** @var IndexInterface[] $indexes */
           $indexes = $server->getIndexes();
           $solr = $backend->getSolrConnector();
           foreach ($indexes as $index) {
@@ -219,7 +223,7 @@ class DevelController extends ControllerBase {
 
                       // Show current data for this item from the Solr backend.
                       /** @var \Drupal\search_api_solr\SolrConnectorInterface $solr */
-                      /** @var \Solarium\QueryType\Select\Query\Query $query */
+                      /** @var Query $query */
                       $output_details[$details_id][] = [
                         '#markup' => '<h3>' . $this->t('Current data in Solr for this item:') . '</h3>',
                       ];
@@ -307,7 +311,7 @@ class DevelController extends ControllerBase {
    * @param int $timestamp
    *   A UNIX timestamp to display.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The formatted timestamp.
    */
   protected function showTimeAndTimeAgo($timestamp) {
@@ -344,13 +348,13 @@ class DevelController extends ControllerBase {
   /**
    * Return a base row for the summary table, which will be modified later on.
    *
-   * @param \Drupal\search_api\ServerInterface $server
+   * @param ServerInterface $server
    *   The Search API server entity.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The Search API index entity.
    * @param string $datasource_id
    *   The ID of the datasource.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to return the base row.
    * @param string $langcode
    *   The language code.
diff --git a/modules/search_api_solr_devel/src/Logging/SolariumRequestLogger.php b/modules/search_api_solr_devel/src/Logging/SolariumRequestLogger.php
index 809d36df..973a1918 100644
--- a/modules/search_api_solr_devel/src/Logging/SolariumRequestLogger.php
+++ b/modules/search_api_solr_devel/src/Logging/SolariumRequestLogger.php
@@ -53,7 +53,7 @@ class SolariumRequestLogger implements EventSubscriberInterface {
   /**
    * Dumps a Solr query as drupal messages.
    *
-   * @param \Solarium\Core\Event\PostCreateQuery $event
+   * @param PostCreateQuery $event
    *   The pre execute event.
    */
   public function postCreateQuery(PostCreateQuery $event) {
@@ -120,7 +120,7 @@ class SolariumRequestLogger implements EventSubscriberInterface {
   /**
    * Dumps a Solr query as drupal messages.
    *
-   * @param \Solarium\Core\Event\PreExecuteRequest $event
+   * @param PreExecuteRequest $event
    *   The pre execute event.
    */
   public function preExecuteRequest(PreExecuteRequest $event) {
@@ -153,7 +153,7 @@ class SolariumRequestLogger implements EventSubscriberInterface {
   /**
    * Dumps a Solr response status as drupal messages and logs the response body.
    *
-   * @param \Solarium\Core\Event\PostExecuteRequest $event
+   * @param PostExecuteRequest $event
    *   The post execute event.
    */
   public function postExecuteRequest(PostExecuteRequest $event) {
diff --git a/modules/search_api_solr_devel/src/Plugin/Derivative/DevelLocalTask.php b/modules/search_api_solr_devel/src/Plugin/Derivative/DevelLocalTask.php
index c1a541c4..5f49200c 100644
--- a/modules/search_api_solr_devel/src/Plugin/Derivative/DevelLocalTask.php
+++ b/modules/search_api_solr_devel/src/Plugin/Derivative/DevelLocalTask.php
@@ -19,16 +19,16 @@ class DevelLocalTask extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an DevelLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, TranslationInterface $string_translation) {
diff --git a/modules/search_api_solr_devel/src/Routing/DevelRouteSubscriber.php b/modules/search_api_solr_devel/src/Routing/DevelRouteSubscriber.php
index 48a3219b..b023964e 100644
--- a/modules/search_api_solr_devel/src/Routing/DevelRouteSubscriber.php
+++ b/modules/search_api_solr_devel/src/Routing/DevelRouteSubscriber.php
@@ -17,14 +17,14 @@ class DevelRouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -45,10 +45,10 @@ class DevelRouteSubscriber extends RouteSubscriberBase {
   /**
    * Gets the devel Solr route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDevelSolrRoute(EntityTypeInterface $entity_type) {
diff --git a/modules/search_api_solr_legacy/src/EventSubscriber/SearchApiSolrSubscriber.php b/modules/search_api_solr_legacy/src/EventSubscriber/SearchApiSolrSubscriber.php
index 69f3e204..d73f60c2 100644
--- a/modules/search_api_solr_legacy/src/EventSubscriber/SearchApiSolrSubscriber.php
+++ b/modules/search_api_solr_legacy/src/EventSubscriber/SearchApiSolrSubscriber.php
@@ -14,11 +14,11 @@ class SearchApiSolrSubscriber implements EventSubscriberInterface {
   /**
    * Adds the mapping Solr 3, 4 and 5.
    *
-   * @param \Drupal\search_api_solr\Event\PostConfigSetTemplateMappingEvent $event
+   * @param PostConfigSetTemplateMappingEvent $event
    *   The event.
    */
   public function postConfigSetTemplateMapping(PostConfigSetTemplateMappingEvent $event) {
-    $template_path = drupal_get_path('module', 'search_api_solr_legacy') . '/solr-conf-templates/';
+    $template_path = \Drupal::service('extension.list.module')->getPath('search_api_solr_legacy') . '/solr-conf-templates/';
 
     $solr_configset_template_mapping = $event->getConfigSetTemplateMapping();
     $solr_configset_template_mapping += [
diff --git a/modules/search_api_solr_legacy/tests/modules/search_api_solr_legacy_test/src/Plugin/SolrConnector/Solr36TestConnector.php b/modules/search_api_solr_legacy/tests/modules/search_api_solr_legacy_test/src/Plugin/SolrConnector/Solr36TestConnector.php
index ea12a168..b4214945 100644
--- a/modules/search_api_solr_legacy/tests/modules/search_api_solr_legacy_test/src/Plugin/SolrConnector/Solr36TestConnector.php
+++ b/modules/search_api_solr_legacy/tests/modules/search_api_solr_legacy_test/src/Plugin/SolrConnector/Solr36TestConnector.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api_solr_legacy_test\Plugin\SolrConnector;
 
+use Solarium\Core\Query\AbstractQuery;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\search_api_solr\Utility\Utility;
 use Drupal\search_api_solr_legacy\Plugin\SolrConnector\Solr36Connector;
 use Solarium\Core\Client\Endpoint;
@@ -24,14 +27,14 @@ class Solr36TestConnector extends Solr36Connector {
   /**
    * The Solarium query.
    *
-   * @var \Solarium\Core\Query\QueryInterface
+   * @var QueryInterface
    */
   protected static $query;
 
   /**
    * The Solarium request.
    *
-   * @var \Solarium\Core\Client\Request
+   * @var Request
    */
   protected static $request;
 
@@ -49,7 +52,7 @@ class Solr36TestConnector extends Solr36Connector {
     self::$query = $query;
 
     if ($this->intercept) {
-      /** @var \Solarium\Core\Query\AbstractQuery $query */
+      /** @var AbstractQuery $query */
       return new Result($query, new Response(''));
     }
 
@@ -103,8 +106,8 @@ class Solr36TestConnector extends Solr36Connector {
    * @param $config_name
    *  The name of the config.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function adjustBackendConfig($config_name) {
     $config_factory = \Drupal::configFactory();
