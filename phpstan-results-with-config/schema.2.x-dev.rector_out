modules/contrib/schema/schema.api.php
modules/contrib/schema/schema.drush.inc
modules/contrib/schema/schema.install
modules/contrib/schema/schema.module
modules/contrib/schema/src/Comparison/Result/BaseColumn.php
modules/contrib/schema/src/Comparison/Result/BaseIndex.php
modules/contrib/schema/src/Comparison/Result/BaseTable.php
modules/contrib/schema/src/Comparison/Result/DifferentColumn.php
modules/contrib/schema/src/Comparison/Result/DifferentIndex.php
modules/contrib/schema/src/Comparison/Result/ExtraColumn.php
modules/contrib/schema/src/Comparison/Result/ExtraIndex.php
modules/contrib/schema/src/Comparison/Result/ExtraTable.php
modules/contrib/schema/src/Comparison/Result/MissingColumn.php
modules/contrib/schema/src/Comparison/Result/MissingIndex.php
modules/contrib/schema/src/Comparison/Result/MissingTable.php
modules/contrib/schema/src/Comparison/Result/SchemaComparison.php
modules/contrib/schema/src/Comparison/Result/TableComparison.php
modules/contrib/schema/src/Comparison/SchemaComparator.php
modules/contrib/schema/src/Comparison/SchemaComparisonInfoBuilder.php
modules/contrib/schema/src/Comparison/TableComparisonInfoBuilder.php
modules/contrib/schema/src/Controller/DefaultController.php
modules/contrib/schema/src/DatabaseSchemaInspectionInterface.php
modules/contrib/schema/src/DatabaseSchemaInterface.php
modules/contrib/schema/src/Form/SchemaSettingsForm.php
modules/contrib/schema/src/Migration/SchemaMigrator.php
modules/contrib/schema/src/Migration/SchemaMigratorOptions.php
modules/contrib/schema/src/Plugin/Schema/Caching.php
modules/contrib/schema/src/Plugin/Schema/Config.php
modules/contrib/schema/src/Plugin/Schema/Entity.php
modules/contrib/schema/src/Plugin/Schema/Menu.php
modules/contrib/schema/src/Plugin/Schema/System.php
modules/contrib/schema/src/SchemaDatabaseSchema_mysql.php
modules/contrib/schema/src/SchemaDatabaseSchema_pgsql.php
modules/contrib/schema/src/SchemaManager.php
modules/contrib/schema/src/SchemaProvider.php
modules/contrib/schema/src/SchemaProviderInterface.php
modules/contrib/schema/src/Tests/SchemaRegressionTest.php
modules/contrib/schema/src/Tests/SchemaUnitTestCase.php
modules/contrib/schema/tests/schema_test/SchemaTestDatabaseConnection.php
modules/contrib/schema/tests/schema_test/schema_test.install
modules/contrib/schema/tests/schema_test/schema_test.module

7 files with changes
====================

1) modules/contrib/schema/src/SchemaManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/schema/src/Migration/SchemaMigrator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\schema\Migration;

+use Psr\Log\LoggerInterface;
+use Drupal\schema\Comparison\Result\DifferentColumn;
+use Drupal\schema\Comparison\Result\ExtraColumn;
 use Drupal\schema\Comparison\Result\SchemaComparison;
 use Drupal\schema\Comparison\Result\TableComparison;
 use Drupal\schema\DatabaseSchemaInspectionInterface;
@@ @@
 class SchemaMigrator {

   /**
-   * @var \Drupal\schema\Comparison\Result\SchemaComparison
+   * @var SchemaComparison
    */
   protected $comparison;

@@ @@
   protected $options;

   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

   /**
-   * @param \Drupal\schema\Comparison\Result\SchemaComparison $comparison
-   * @param \Drupal\schema\DatabaseSchemaInspectionInterface $dbschema
+   * @param SchemaComparison $comparison
+   * @param DatabaseSchemaInspectionInterface $dbschema
    * @param SchemaMigratorOptions $options
    */
   public function __construct(SchemaComparison $comparison, DatabaseSchemaInspectionInterface $dbschema, SchemaMigratorOptions $options = NULL) {
@@ @@
       $tables += $this->comparison->getSameTables();
     }

-    /** @var \Drupal\schema\Comparison\Result\TableComparison $table */
+    /** @var TableComparison $table */
     foreach ($tables as $table) {
       if ($this->options()->fixTableComments) {
         $this->fixTableComment($table);
@@ @@
   }

   /**
-   * @param \Drupal\schema\Comparison\Result\TableComparison $table
+   * @param TableComparison $table
    */
   protected function updateColumnProperties($table) {
     $differences = $table->getDifferentColumns();
     if (!empty($differences)) {
-      /** @var \Drupal\schema\Comparison\Result\DifferentColumn $column */
+      /** @var DifferentColumn $column */
       foreach ($differences as $column) {
         // The schema comparator has already determined that the field exists
         // and that at least some of the properties are different.+.
@@ @@
   }

   /**
-   * @param \Drupal\schema\Comparison\Result\TableComparison $table
+   * @param TableComparison $table
    */
   protected function removeExtraColumns($table) {
     $extra_columns = $table->getExtraColumns();
     if (!empty($extra_columns)) {
-      /** @var \Drupal\schema\Comparison\Result\ExtraColumn $column */
+      /** @var ExtraColumn $column */
       foreach ($extra_columns as $column) {
         if ($this->dbschema->dropField($column->getTableName(), $column->getColumnName())) {
           $this->logSuccess("Dropped column {table}.{field}.", [
@@ @@
   }

   /**
-   * @param \Drupal\schema\Comparison\Result\TableComparison $table
+   * @param TableComparison $table
    */
   protected function recreatePrimaryKey($table) {
     $primary_key = $table->getDeclaredPrimaryKey();
@@ @@
   }

   /**
-   * @param \Drupal\schema\Comparison\Result\TableComparison $table
+   * @param TableComparison $table
    */
   protected function recreateIndexes($table) {
     // Recreate indices by first removing all, then adding them one by one.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/schema/src/DatabaseSchemaInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\schema;

+use Drupal\Core\Database\SchemaObjectDoesNotExistException;
+use Drupal\Core\Database\SchemaObjectExistsException;
 /**
  * This interface describes public methods of \Drupal\Core\Database\Schema.
  */
@@ @@
    * @param $new_name
    *   The new name for the table.
    *
-   * @throws \Drupal\Core\Database\SchemaObjectDoesNotExistException
+   * @throws SchemaObjectDoesNotExistException
    *   If the specified table doesn't exist.
-   * @throws \Drupal\Core\Database\SchemaObjectExistsException
+   * @throws SchemaObjectExistsException
    *   If a table with the specified new name already exists.
    */
   public function renameTable($table, $new_name);
@@ @@
    *   or index including it in this array. See db_change_field() for more
    *   explanation why.
    *
-   * @throws \Drupal\Core\Database\SchemaObjectDoesNotExistException
+   * @throws SchemaObjectDoesNotExistException
    *   If the specified table doesn't exist.
-   * @throws \Drupal\Core\Database\SchemaObjectExistsException
+   * @throws SchemaObjectExistsException
    *   If the specified table already has a field by that name.
    */
   public function addField($table, $field, $spec, $keys_new = []);
@@ @@
    * @param $default
    *   Default value to be set. NULL for 'default NULL'.
    *
-   * @throws \Drupal\Core\Database\SchemaObjectDoesNotExistException
+   * @throws SchemaObjectDoesNotExistException
    *   If the specified table or field doesn't exist.
    */
   public function fieldSetDefault($table, $field, $default);
@@ @@
    * @param $field
    *   The field to be altered.
    *
-   * @throws \Drupal\Core\Database\SchemaObjectDoesNotExistException
+   * @throws SchemaObjectDoesNotExistException
    *   If the specified table or field doesn't exist.
    */
   public function fieldSetNoDefault($table, $field);
@@ @@
    * @param $fields
    *   Fields for the primary key.
    *
-   * @throws \Drupal\Core\Database\SchemaObjectDoesNotExistException
+   * @throws SchemaObjectDoesNotExistException
    *   If the specified table doesn't exist.
-   * @throws \Drupal\Core\Database\SchemaObjectExistsException
+   * @throws SchemaObjectExistsException
    *   If the specified table already has a primary key.
    */
   public function addPrimaryKey($table, $fields);
@@ @@
    * @param $fields
    *   An array of field names.
    *
-   * @throws \Drupal\Core\Database\SchemaObjectDoesNotExistException
+   * @throws SchemaObjectDoesNotExistException
    *   If the specified table doesn't exist.
-   * @throws \Drupal\Core\Database\SchemaObjectExistsException
+   * @throws SchemaObjectExistsException
    *   If the specified table already has a key by that name.
    */
   public function addUniqueKey($table, $name, $fields);
@@ @@
    * @param $fields
    *   An array of field names.
    *
-   * @throws \Drupal\Core\Database\SchemaObjectDoesNotExistException
+   * @throws SchemaObjectDoesNotExistException
    *   If the specified table doesn't exist.
-   * @throws \Drupal\Core\Database\SchemaObjectExistsException
+   * @throws SchemaObjectExistsException
    *   If the specified table already has an index by that name.
    */
   public function addIndex($table, $name, $fields, array $spec);
@@ @@
    *   table along with changing the field. The format is the same as a
    *   table specification but without the 'fields' element.
    *
-   * @throws \Drupal\Core\Database\SchemaObjectDoesNotExistException
+   * @throws SchemaObjectDoesNotExistException
    *   If the specified table or source field doesn't exist.
-   * @throws \Drupal\Core\Database\SchemaObjectExistsException
+   * @throws SchemaObjectExistsException
    *   If the specified destination field already exists.
    */
   public function changeField($table, $field, $field_new, $spec, $keys_new = []);
@@ @@
    * @param $table
    *   A Schema API table definition array.
    *
-   * @throws \Drupal\Core\Database\SchemaObjectExistsException
+   * @throws SchemaObjectExistsException
    *   If the specified table already exists.
    */
   public function createTable($name, $table);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/schema/src/Comparison/TableComparisonInfoBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\schema\Comparison;

+use Drupal\schema\Comparison\Result\MissingColumn;
+use Drupal\schema\Comparison\Result\DifferentColumn;
+use Drupal\schema\Comparison\Result\ExtraColumn;
+use Drupal\schema\Comparison\Result\MissingIndex;
+use Drupal\schema\Comparison\Result\DifferentIndex;
+use Drupal\schema\Comparison\Result\ExtraIndex;
 use Drupal\schema\Comparison\Result\TableComparison;


@@ @@
       ];
     }

-    /** @var \Drupal\schema\Comparison\Result\MissingColumn $column */
+    /** @var MissingColumn $column */
     foreach ($this->o->getMissingColumns() as $column) {
       $reasons[] = sprintf("%s: not in database", $column->getColumnName());
     }

-    /** @var \Drupal\schema\Comparison\Result\DifferentColumn $column */
+    /** @var DifferentColumn $column */
     foreach ($this->o->getDifferentColumns() as $column) {
       $colname = $column->getColumnName();
       $kdiffs = $column->getDifferentKeys();
@@ @@
       ];
     }

-    /** @var \Drupal\schema\Comparison\Result\ExtraColumn $column */
+    /** @var ExtraColumn $column */
     foreach ($this->o->getExtraColumns() as $column) {
       $reasons[] = sprintf("%s: unexpected column in database", $column->getColumnName());
     }

-    /** @var \Drupal\schema\Comparison\Result\MissingIndex $index */
+    /** @var MissingIndex $index */
     foreach ($this->o->getMissingIndexes() as $index) {
       $keyname = $index->getIndexName();
       $type = $index->getType();
@@ @@
       }
     }

-    /** @var \Drupal\schema\Comparison\Result\DifferentIndex $index */
+    /** @var DifferentIndex $index */
     foreach ($this->o->getDifferentIndexes() as $index) {
       $type = $index->getType();
       $keyname = $index->getIndexName();
@@ @@
       }
     }

-    /** @var \Drupal\schema\Comparison\Result\ExtraIndex $index */
+    /** @var ExtraIndex $index */
     foreach ($this->o->getExtraIndexes() as $index) {
       $keyname = $index->getIndexName();
       $type = $index->getType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/schema/src/Comparison/SchemaComparisonInfoBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\schema\Comparison;

+use Drupal\schema\Comparison\Result\MissingTable;
+use Drupal\schema\Comparison\Result\TableComparison;
+use Drupal\schema\Comparison\Result\ExtraTable;
 use Drupal\schema\Comparison\Result\SchemaComparison;

 class SchemaComparisonInfoBuilder {
@@ @@
   public function getTablesArray() {
     $info = [];

-    /** @var \Drupal\schema\Comparison\Result\MissingTable $table */
+    /** @var MissingTable $table */
     foreach ($this->o->getMissingTables() as $table) {
       $info['missing'][$table->getModule()][$table->getTableName()] = ['status' => 'missing'];
     }

-    /** @var \Drupal\schema\Comparison\Result\TableComparison $table */
+    /** @var TableComparison $table */
     foreach ($this->o->getComparedTables() as $table) {
       $table_info = (new TableComparisonInfoBuilder($table))->getInfoArray();
       $info[$table_info["status"]][$table->getModule()][$table->getTableName()] = $table_info;
     }

-    /** @var \Drupal\schema\Comparison\Result\ExtraTable $table */
+    /** @var ExtraTable $table */
     foreach ($this->o->getExtraTables() as $table) {
       $info['extra'][] = $table->getTableName();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/schema/src/Comparison/SchemaComparator.php:12

    ---------- begin diff ----------
@@ @@
 class SchemaComparator {

   /**
-   * @var \Drupal\schema\DatabaseSchemaInspectionInterface
+   * @var DatabaseSchemaInspectionInterface
    */
   protected $inspector;

@@ @@
   protected $declared_schema;

   /**
-   * @var \Drupal\schema\Comparison\Result\SchemaComparison
+   * @var SchemaComparison
    */
   protected $result = NULL;

@@ @@
    *
    * @param array $declared_schema
    *   The declared schema.
-   * @param \Drupal\schema\DatabaseSchemaInspectionInterface $inspector
+   * @param DatabaseSchemaInspectionInterface $inspector
    *   The database inspector used to retrieve the actual schema.
    */
   public function __construct(array $declared_schema, DatabaseSchemaInspectionInterface $inspector) {
@@ @@
   /**
    * Compare declared schema and the default database schema.
    *
-   * @return \Drupal\schema\Comparison\Result\SchemaComparison
+   * @return SchemaComparison
    *   The comparison result.
    */
   public static function compareDefault() {
@@ @@
   /**
    * Execute the schema comparison.
    *
-   * @return \Drupal\schema\Comparison\Result\SchemaComparison
+   * @return SchemaComparison
    *   The comparison result.
    */
   public function execute() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/schema/schema.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\schema\DatabaseSchemaInspectionInterface;
+use Drupal\schema\SchemaManager;
+use Drupal\schema\SchemaProviderInterface;
 /**
  * @file
  * The Schema module provides functionality built on the Schema API.
@@ @@
  *   A database connection key, defaults to the schema_database_connection
  *   variable, which itself defaults to 'default'.
  *
- * @return Drupal\schema\DatabaseSchemaInspectionInterface
+ * @return DatabaseSchemaInspectionInterface
  *   A schema engine class set to the given connection.
  */
 function schema_dbobject($connection = NULL) {
@@ @@
  * Computes and returns the complete schema for all the drupal things.
  */
 function schema_get_schema($rebuild = FALSE) {
-  /** @var \Drupal\schema\SchemaManager $manager */
+  /** @var SchemaManager $manager */
   $manager = Drupal::service('plugin.manager.schema');
   $plugins = $manager->createInstances();
   $complete_schema = [];
-  /** @var \Drupal\schema\SchemaProviderInterface $plugin */
+  /** @var SchemaProviderInterface $plugin */
   foreach ($plugins as $plugin) {
     $complete_schema += $plugin->get($rebuild);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/schema/src/Tests/SchemaUnitTestCase.php" file, due to: 
         "Analyze error: "Class Drupal\simpletest\WebTestBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/schema/src/Tests/SchemaRegressionTest.php" file, due to:
                                                                                
         "Analyze error: "Class Drupal\simpletest\WebTestBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

