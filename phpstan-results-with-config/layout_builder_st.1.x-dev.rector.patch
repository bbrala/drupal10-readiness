diff --git a/layout_builder_st.install b/layout_builder_st.install
index 056b2c2..b47c4b3 100644
--- a/layout_builder_st.install
+++ b/layout_builder_st.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\layout_builder_st\Plugin\SectionStorage\OverridesSectionStorage;
@@ -10,7 +11,7 @@ use Drupal\layout_builder_st\Plugin\SectionStorage\OverridesSectionStorage;
  */
 function layout_builder_st_install() {
   // Add the layout translation settings field.
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+  /** @var EntityFieldManagerInterface $field_manager */
   $field_manager = \Drupal::service('entity_field.manager');
   $field_map = $field_manager->getFieldMap();
   foreach ($field_map as $entity_type_id => $field_infos) {
diff --git a/layout_builder_st.module b/layout_builder_st.module
index 7641d83..a9bdd1c 100644
--- a/layout_builder_st.module
+++ b/layout_builder_st.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\layout_builder\SectionStorage\SectionStorageDefinition;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\layout_builder_st\Entity\LayoutBuilderEntityViewDisplay;
@@ -36,11 +38,11 @@ function layout_builder_st_module_implements_alter(&$implementations, $hook) {
 function layout_builder_st_entity_type_alter(array &$entity_types) {
 
   // Replace entity_view_display class with our own.
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['entity_view_display']
     ->setClass(LayoutBuilderEntityViewDisplay::class);
 
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   foreach ($entity_types as $entity_type) {
     if ($entity_type->entityClassImplements(FieldableEntityInterface::class)) {
       $form_class = $entity_type->getFormClass('layout_builder');
@@ -77,7 +79,7 @@ function layout_builder_st_block_alter(&$definitions) {
 /**
  * Implements hook_layout_builder_section_storage_alter().
  *
- * @param \Drupal\layout_builder\SectionStorage\SectionStorageDefinition[] $definitions
+ * @param SectionStorageDefinition[] $definitions
  */
 function layout_builder_st_layout_builder_section_storage_alter(array &$definitions) {
   $definition = $definitions['overrides'];
diff --git a/src/Access/LayoutBuilderTranslationAccessCheck.php b/src/Access/LayoutBuilderTranslationAccessCheck.php
index daba01f..38cee62 100644
--- a/src/Access/LayoutBuilderTranslationAccessCheck.php
+++ b/src/Access/LayoutBuilderTranslationAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_builder_st\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\layout_builder\LayoutEntityHelperTrait;
@@ -25,12 +26,12 @@ final class LayoutBuilderTranslationAccessCheck implements AccessInterface {
   /**
    * Checks routing access to the default translation only layout.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(SectionStorageInterface $section_storage, Route $route) {
diff --git a/src/Element/LayoutBuilder.php b/src/Element/LayoutBuilder.php
index 7297a22..7a11b86 100644
--- a/src/Element/LayoutBuilder.php
+++ b/src/Element/LayoutBuilder.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\layout_builder_st\Element;
 
+use Drupal\Core\Language\LanguageInterface;
+use Drupal\layout_builder\Plugin\Block\InlineBlock;
+use Drupal\block_content\Entity\BlockContent;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -25,7 +28,7 @@ final class LayoutBuilder extends CoreLayoutbuilder {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -38,11 +41,11 @@ final class LayoutBuilder extends CoreLayoutbuilder {
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $layout_tempstore_repository
+   * @param LayoutTempstoreRepositoryInterface $layout_tempstore_repository
    *   The layout tempstore repository.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   (optional) The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LayoutTempstoreRepositoryInterface $layout_tempstore_repository, MessengerInterface $messenger, EntityTypeManagerInterface $entity_type_manager) {
@@ -116,7 +119,7 @@ final class LayoutBuilder extends CoreLayoutbuilder {
   /**
    * Creates contextual link element for a component.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    * @param $delta
    *   The section delta.
@@ -129,7 +132,6 @@ final class LayoutBuilder extends CoreLayoutbuilder {
    *
    * @return array|null
    *   The contextual link render array or NULL if none.
-   *
    */
   private function createContextualLinkElement(SectionStorageInterface $section_storage, $delta, $region, $uuid) {
     $section = $section_storage->getSection($delta);
@@ -145,15 +147,15 @@ final class LayoutBuilder extends CoreLayoutbuilder {
     if (static::isTranslation($section_storage)) {
       $contextual_group = 'layout_builder_block_translation';
       $component = $section->getComponent($uuid);
-      /** @var \Drupal\Core\Language\LanguageInterface $language */
+      /** @var LanguageInterface $language */
       $language = $section_storage->getTranslationLanguage();
       $contextual_link_settings['route_parameters']['langcode'] = $language->getId();
 
-      /** @var \Drupal\layout_builder\Plugin\Block\InlineBlock $plugin */
+      /** @var InlineBlock $plugin */
       $plugin = $component->getPlugin();
       if ($plugin instanceof DerivativeInspectionInterface && $plugin->getBaseId() === 'inline_block') {
         $configuration = $plugin->getConfiguration();
-        /** @var \Drupal\block_content\Entity\BlockContent $block */
+        /** @var BlockContent $block */
         $block = $this->entityTypeManager->getStorage('block_content')
           ->loadRevision($configuration['block_revision_id']);
         if ($block->isTranslatable()) {
@@ -183,7 +185,7 @@ final class LayoutBuilder extends CoreLayoutbuilder {
    * in https://www.drupal.org/project/drupal/issues/2946333#comment-13129737
    * This avoids having to alter the class in the module.
    *
-   * @param \Drupal\layout_builder\SectionComponent $component
+   * @param SectionComponent $component
    *
    * @return bool
    *   TRUE if the plugin has translatable configuration.
diff --git a/src/EventSubscriber/ComponentPluginTranslate.php b/src/EventSubscriber/ComponentPluginTranslate.php
index 34cbf57..d416eb7 100644
--- a/src/EventSubscriber/ComponentPluginTranslate.php
+++ b/src/EventSubscriber/ComponentPluginTranslate.php
@@ -26,23 +26,23 @@ final class ComponentPluginTranslate implements EventSubscriberInterface {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Creates a ComponentPluginTranslate object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(LanguageManagerInterface $language_manager, RouteMatchInterface $route_match) {
@@ -61,7 +61,7 @@ final class ComponentPluginTranslate implements EventSubscriberInterface {
   /**
    * Translates the plugin configuration if needed.
    *
-   * @param \Drupal\layout_builder\Event\SectionComponentBuildRenderArrayEvent $event
+   * @param SectionComponentBuildRenderArrayEvent $event
    *   The section component render event.
    */
   public function onBuildRender(SectionComponentBuildRenderArrayEvent $event) {
diff --git a/src/Form/BlockContentInlineBlockTranslateForm.php b/src/Form/BlockContentInlineBlockTranslateForm.php
index 9581c68..796813c 100644
--- a/src/Form/BlockContentInlineBlockTranslateForm.php
+++ b/src/Form/BlockContentInlineBlockTranslateForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\layout_builder_st\Form;
 
+use Drupal\layout_builder_st\TranslatableSectionStorageInterface;
+use Drupal\block_content\BlockContentInterface;
 use Drupal\block_content\BlockContentForm;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -22,7 +24,7 @@ final class BlockContentInlineBlockTranslateForm extends BlockContentForm {
   /**
    * The layout tempstore repository.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;
 
@@ -43,7 +45,7 @@ final class BlockContentInlineBlockTranslateForm extends BlockContentForm {
   /**
    * The section storage.
    *
-   * @var \Drupal\layout_builder_st\TranslatableSectionStorageInterface
+   * @var TranslatableSectionStorageInterface
    */
   protected $sectionStorage;
 
@@ -85,7 +87,7 @@ final class BlockContentInlineBlockTranslateForm extends BlockContentForm {
         return unserialize($translated_configuration['block_serialized']);
       }
       elseif (!empty($translated_configuration['block_revision_id'])) {
-        /** @var \Drupal\block_content\BlockContentInterface $entity */
+        /** @var BlockContentInterface $entity */
         $entity = $this->entityTypeManager->getStorage('block_content')->loadRevision($translated_configuration['block_revision_id']);
         $entity = $this->entityRepository->getActive('block_content', $entity->id());
         if ($entity->hasTranslation($langcode)) {
@@ -95,7 +97,7 @@ final class BlockContentInlineBlockTranslateForm extends BlockContentForm {
     }
     $configuration = $this->sectionStorage->getSection($this->delta)->getComponent($this->uuid)->getPlugin()->getConfiguration();
     if (!empty($configuration['block_revision_id'])) {
-      /** @var \Drupal\block_content\BlockContentInterface $entity */
+      /** @var BlockContentInterface $entity */
       $entity = $this->entityTypeManager->getStorage('block_content')->loadRevision($configuration['block_revision_id']);
       $entity = $this->entityRepository->getActive('block_content', $entity->id());
       if ($entity->hasTranslation($langcode)) {
diff --git a/src/Form/TranslateBlockForm.php b/src/Form/TranslateBlockForm.php
index 88d0086..d459329 100644
--- a/src/Form/TranslateBlockForm.php
+++ b/src/Form/TranslateBlockForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\layout_builder_st\Form;
 
+use Drupal\layout_builder\SectionStorageInterface;
+use Drupal\Core\TypedData\DataDefinitionInterface;
+use Drupal\Core\Config\Schema\Mapping;
 use Drupal\Component\Utility\Html;
 use Drupal\config_translation\Form\ConfigTranslationFormBase;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
@@ -31,7 +34,7 @@ class TranslateBlockForm extends FormBase {
   /**
    * The section storage.
    *
-   * @var \Drupal\layout_builder_st\TranslatableSectionStorageInterface
+   * @var TranslatableSectionStorageInterface
    */
   protected $sectionStorage;
 
@@ -45,19 +48,19 @@ class TranslateBlockForm extends FormBase {
   /**
    * The layout tempstore repository.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;
 
@@ -93,9 +96,9 @@ class TranslateBlockForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage being configured.
    * @param int $delta
    *   The delta of the section.
@@ -115,11 +118,11 @@ class TranslateBlockForm extends FormBase {
 
     $configuration = $component->getPlugin()->getConfiguration();
     $type_definition = $this->typedConfigManager->getDefinition('block.settings.' . $component->getPlugin()->getPluginId());
-    /** @var \Drupal\Core\TypedData\DataDefinitionInterface $definition */
+    /** @var DataDefinitionInterface $definition */
     $definition = new $type_definition['definition_class']($type_definition);
     $definition->setClass($type_definition['class']);
 
-    /** @var \Drupal\Core\Config\Schema\Mapping $typed_data */
+    /** @var Mapping $typed_data */
     $typed_data = $type_definition['class']::createInstance($definition);
     $typed_data->setValue($configuration);
     $translated_config = $this->sectionStorage->getTranslatedComponentConfiguration($this->uuid);
@@ -153,11 +156,11 @@ class TranslateBlockForm extends FormBase {
   /**
    * Creates translation element.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $source_language
+   * @param LanguageInterface $source_language
    *   The source language.
-   * @param \Drupal\Core\Language\LanguageInterface $translation_language
+   * @param LanguageInterface $translation_language
    *   The translation language.
-   * @param \Drupal\Core\TypedData\TraversableTypedDataInterface $typed_data
+   * @param TraversableTypedDataInterface $typed_data
    *   The typed data of the configuration settings.
    * @param array $translated_configuration
    *   The translated configuration.
diff --git a/src/InlineBlockEntityOperations.php b/src/InlineBlockEntityOperations.php
index b4257e9..5846df7 100644
--- a/src/InlineBlockEntityOperations.php
+++ b/src/InlineBlockEntityOperations.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\layout_builder_st;
 
+use Drupal\block_content\BlockContentInterface;
+use Drupal\layout_builder\Plugin\Block\InlineBlock;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\layout_builder\InlineBlockEntityOperations as CoreInlineBlockEntityOperations;
 use Drupal\layout_builder\SectionComponent;
@@ -16,7 +18,7 @@ final class InlineBlockEntityOperations extends CoreInlineBlockEntityOperations
   /**
    * Saves a translated inline block.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity with the layout.
    * @param string $component_uuid
    *   The component UUID.
@@ -26,11 +28,11 @@ final class InlineBlockEntityOperations extends CoreInlineBlockEntityOperations
    *   Whether a new revision of the block should be created.
    */
   protected function saveTranslatedInlineBlock(EntityInterface $entity, $component_uuid, array $translated_component_configuration, $new_revision) {
-    /** @var \Drupal\block_content\BlockContentInterface $block */
+    /** @var BlockContentInterface $block */
     $block = unserialize($translated_component_configuration['block_serialized']);
     // Create a InlineBlock plugin from the translated configuration in order to
     // save the block.
-    /** @var \Drupal\layout_builder\Plugin\Block\InlineBlock $plugin */
+    /** @var InlineBlock $plugin */
     $plugin = \Drupal::service('plugin.manager.block')->createInstance('inline_block:' . $block->bundle(), $translated_component_configuration);
     $plugin->saveBlockContent($new_revision);
     // Remove serialized block after the block has been saved.
@@ -41,7 +43,7 @@ final class InlineBlockEntityOperations extends CoreInlineBlockEntityOperations
     $configuration = $plugin->getConfiguration();
     $translated_component_configuration['block_revision_id'] = $configuration['block_revision_id'];
 
-    /** @var \Drupal\layout_builder_st\TranslatableSectionStorageInterface $section_storage */
+    /** @var TranslatableSectionStorageInterface $section_storage */
     $section_storage = $this->getSectionStorageForEntity($entity);
     $section_storage->setTranslatedComponentConfiguration($component_uuid, $translated_component_configuration);
   }
@@ -54,7 +56,7 @@ final class InlineBlockEntityOperations extends CoreInlineBlockEntityOperations
   protected function saveInlineBlockComponent(EntityInterface $entity, SectionComponent $component, $new_revision, $duplicate_blocks) {
     $section_storage = $this->getSectionStorageForEntity($entity);
     if (static::isTranslation($section_storage)) {
-      /** @var  \Drupal\layout_builder_st\TranslatableSectionStorageInterface $section_storage */
+      /** @var TranslatableSectionStorageInterface $section_storage */
       $translated_component_configuration = $section_storage->getTranslatedComponentConfiguration($component->getUuid());
       if (isset($translated_component_configuration['block_serialized'])) {
         $this->saveTranslatedInlineBlock($entity, $component->getUuid(), $translated_component_configuration, $new_revision);
diff --git a/src/Plugin/Field/FieldWidget/LayoutBuilderWidget.php b/src/Plugin/Field/FieldWidget/LayoutBuilderWidget.php
index de80158..9b082cf 100644
--- a/src/Plugin/Field/FieldWidget/LayoutBuilderWidget.php
+++ b/src/Plugin/Field/FieldWidget/LayoutBuilderWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_builder_st\Plugin\Field\FieldWidget;
 
+use Drupal\layout_builder\SectionStorageInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\layout_builder\Plugin\Field\FieldWidget\LayoutBuilderWidget as CoreLayoutBuilderWidget;
@@ -39,10 +40,10 @@ final class LayoutBuilderWidget extends CoreLayoutBuilderWidget {
   /**
    * Gets the section storage.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\layout_builder\SectionStorageInterface
+   * @return SectionStorageInterface
    *   The section storage loaded from the tempstore.
    */
   private function getSectionStorage(FormStateInterface $form_state) {
diff --git a/src/Plugin/SectionStorage/OverridesSectionStorage.php b/src/Plugin/SectionStorage/OverridesSectionStorage.php
index 27fdd06..a6274ed 100644
--- a/src/Plugin/SectionStorage/OverridesSectionStorage.php
+++ b/src/Plugin/SectionStorage/OverridesSectionStorage.php
@@ -50,7 +50,7 @@ final class OverridesSectionStorage extends CoreOverridesSectionStorage implemen
    */
   public function isDefaultTranslation() {
     if ($this->isTranslatable()) {
-      /** @var \Drupal\Core\Entity\TranslatableInterface $entity */
+      /** @var TranslatableInterface $entity */
       $entity = $this->getEntity();
       return $entity->isDefaultTranslation();
     }
@@ -104,7 +104,7 @@ final class OverridesSectionStorage extends CoreOverridesSectionStorage implemen
    */
   public function getSourceLanguage() {
     if (!$this->isDefaultTranslation()) {
-      /** @var \Drupal\Core\Entity\TranslatableInterface $entity */
+      /** @var TranslatableInterface $entity */
       $entity = $this->getEntity();
       return $entity->getUntranslated()->language();
     }
diff --git a/src/TranslatableSectionStorageInterface.php b/src/TranslatableSectionStorageInterface.php
index 4cbf3aa..3857e80 100644
--- a/src/TranslatableSectionStorageInterface.php
+++ b/src/TranslatableSectionStorageInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_builder_st;
 
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\layout_builder\SectionStorageInterface;
 
 /**
@@ -49,7 +50,7 @@ interface TranslatableSectionStorageInterface extends SectionStorageInterface {
   /**
    * Gets the language of the translation if any.
    *
-   * @return \Drupal\Core\Language\LanguageInterface|null
+   * @return LanguageInterface|null
    *   The translation language if the current layout is for a translation
    *   otherwise NULL.
    */
@@ -58,7 +59,7 @@ interface TranslatableSectionStorageInterface extends SectionStorageInterface {
   /**
    * Gets the source language of the translation if any.
    *
-   * @return \Drupal\Core\Language\LanguageInterface|null
+   * @return LanguageInterface|null
    *   The translation source language if the current layout is for a
    *   translation otherwise NULL.
    */
diff --git a/src/TranslationsHelperTrait.php b/src/TranslationsHelperTrait.php
index 0856c13..3ce9a7e 100644
--- a/src/TranslationsHelperTrait.php
+++ b/src/TranslationsHelperTrait.php
@@ -14,7 +14,7 @@ trait TranslationsHelperTrait {
   /**
    * Determines if the sections is for a translation.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    *
    * @return bool
