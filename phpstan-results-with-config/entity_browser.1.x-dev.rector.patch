diff --git a/entity_browser.install b/entity_browser.install
index dce49e2..ebbc144 100644
--- a/entity_browser.install
+++ b/entity_browser.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 /**
  * @file
  * Update hooks for the Entity browser module.
@@ -9,7 +10,7 @@
  * Updates submit text for existing Entity browsers.
  */
 function entity_browser_update_8001() {
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+  /** @var ConfigFactoryInterface $config_factory */
   $config_factory = \Drupal::service('config.factory');
 
   foreach ($config_factory->listAll('entity_browser.browser') as $name) {
diff --git a/entity_browser.module b/entity_browser.module
index db086af..3f0a664 100644
--- a/entity_browser.module
+++ b/entity_browser.module
@@ -125,7 +125,7 @@ function entity_browser_preprocess_page__entity_browser__modal(&$variables) {
  * may be used elsewhere would resize it for all of its uses. We copy the
  * normal validation here so that we can stop this from occurring.
  *
- * @param \Drupal\file\FileInterface $file
+ * @param FileInterface $file
  *   The file being evaluated.
  * @param int $maximum_dimensions
  *   The maximum dimensions.
diff --git a/modules/entity_form/entity_browser_entity_form.module b/modules/entity_form/entity_browser_entity_form.module
index 4d7b808..746df37 100644
--- a/modules/entity_form/entity_browser_entity_form.module
+++ b/modules/entity_form/entity_browser_entity_form.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\field\FieldConfigInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Hook implementations for entity_browser_entity_form.module.
@@ -20,14 +22,14 @@ use Drupal\inline_entity_form\Plugin\Field\FieldWidget\InlineEntityFormComplex;
  * Implements hook_inline_entity_form_reference_form_alter().
  */
 function entity_browser_entity_form_inline_entity_form_reference_form_alter(&$reference_form, FormStateInterface &$form_state) {
-  /** @var \Drupal\field\FieldConfigInterface $instance */
+  /** @var FieldConfigInterface $instance */
   $instance = $form_state->get([
     'inline_entity_form',
     $reference_form['#ief_id'],
     'instance',
   ]);
 
-  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+  /** @var EntityFormDisplayInterface $form_display */
   $entity_form_id = $instance->getTargetEntityTypeId() . '.' . $instance->getTargetBundle() . '.default';
   // TODO - 'default' might become configurable or something else in the future.
   // See https://www.drupal.org/node/2510274
@@ -84,7 +86,7 @@ function entity_browser_entity_form_inline_entity_form_reference_form_alter(&$re
  *
  * @param array $reference_form
  *   The reference entity form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state of the parent form.
  *
  * @see inline_entity_form_reference_form_validate()
@@ -122,7 +124,7 @@ function entity_browser_entity_form_reference_form_validate(array &$reference_fo
  *
  * @param array $reference_form
  *   The reference entity form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state of the parent form.
  *
  * @see inline_entity_form_reference_form_submit()
diff --git a/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php b/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php
index af08d77..22c3f5d 100644
--- a/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php
+++ b/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php
@@ -30,14 +30,14 @@ class EntityForm extends WidgetBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
@@ -50,15 +50,15 @@ class EntityForm extends WidgetBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityDisplayRepositoryInterface $entity_display_repository) {
diff --git a/modules/entity_form/src/Tests/InlineEntityIntegrationTest.php b/modules/entity_form/src/Tests/InlineEntityIntegrationTest.php
index 59e3687..4ad82c1 100644
--- a/modules/entity_form/src/Tests/InlineEntityIntegrationTest.php
+++ b/modules/entity_form/src/Tests/InlineEntityIntegrationTest.php
@@ -32,7 +32,7 @@ class InlineEntityIntegrationTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Delete unnecessary entity browser.
     $browser = $this->container->get('entity_type.manager')->getStorage('entity_browser')->load('entity_browser_test_entity_form');
diff --git a/modules/entity_form/tests/src/FunctionalJavascript/EntityFormWidgetTest.php b/modules/entity_form/tests/src/FunctionalJavascript/EntityFormWidgetTest.php
index 80269bb..8c6d227 100644
--- a/modules/entity_form/tests/src/FunctionalJavascript/EntityFormWidgetTest.php
+++ b/modules/entity_form/tests/src/FunctionalJavascript/EntityFormWidgetTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_browser_entity_form\FunctionalJavascript;
 
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -39,7 +41,7 @@ class EntityFormWidgetTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'foo', 'name' => 'Foo']);
@@ -62,7 +64,7 @@ class EntityFormWidgetTest extends WebDriverTestBase {
       'settings' => [],
     ])->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.foo.default');
@@ -89,7 +91,7 @@ class EntityFormWidgetTest extends WebDriverTestBase {
    * Test if save button is appears on form.
    */
   public function testEntityForm() {
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('entity_browser_test_entity_form');
diff --git a/modules/example/tests/src/FunctionalJavascript/EntityBrowserExampleTest.php b/modules/example/tests/src/FunctionalJavascript/EntityBrowserExampleTest.php
index b415c2d..5cb8f32 100644
--- a/modules/example/tests/src/FunctionalJavascript/EntityBrowserExampleTest.php
+++ b/modules/example/tests/src/FunctionalJavascript/EntityBrowserExampleTest.php
@@ -25,6 +25,7 @@ class EntityBrowserExampleTest extends BrowserTestBase {
 
   /**
    * Tests Entity Browser example module.
+   * @doesNotPerformAssertions
    */
   public function testExampleInstall() {
     // If we came this far example module installed successfully.
diff --git a/src/Annotation/EntityBrowserDisplay.php b/src/Annotation/EntityBrowserDisplay.php
index 15e1385..62523e3 100644
--- a/src/Annotation/EntityBrowserDisplay.php
+++ b/src/Annotation/EntityBrowserDisplay.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class EntityBrowserDisplay extends Plugin {
   /**
    * The human-readable name of the display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -34,7 +35,7 @@ class EntityBrowserDisplay extends Plugin {
    *
    * This will be shown when adding or configuring this display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/EntityBrowserFieldWidgetDisplay.php b/src/Annotation/EntityBrowserFieldWidgetDisplay.php
index 2d439b0..7c1983b 100644
--- a/src/Annotation/EntityBrowserFieldWidgetDisplay.php
+++ b/src/Annotation/EntityBrowserFieldWidgetDisplay.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class EntityBrowserFieldWidgetDisplay extends Plugin {
   /**
    * The human-readable name of the field widget display display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -34,7 +35,7 @@ class EntityBrowserFieldWidgetDisplay extends Plugin {
    *
    * This will be shown when adding or configuring this display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/EntityBrowserSelectionDisplay.php b/src/Annotation/EntityBrowserSelectionDisplay.php
index 854cc64..d1189fd 100644
--- a/src/Annotation/EntityBrowserSelectionDisplay.php
+++ b/src/Annotation/EntityBrowserSelectionDisplay.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class EntityBrowserSelectionDisplay extends Plugin {
   /**
    * The human-readable name of the selection display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -34,7 +35,7 @@ class EntityBrowserSelectionDisplay extends Plugin {
    *
    * This will be shown when adding or configuring this selection display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/EntityBrowserWidget.php b/src/Annotation/EntityBrowserWidget.php
index 50dbccf..c76632b 100644
--- a/src/Annotation/EntityBrowserWidget.php
+++ b/src/Annotation/EntityBrowserWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class EntityBrowserWidget extends Plugin {
   /**
    * The human-readable name of the widget.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -34,7 +35,7 @@ class EntityBrowserWidget extends Plugin {
    *
    * This will be shown when adding or configuring this widget.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/EntityBrowserWidgetSelector.php b/src/Annotation/EntityBrowserWidgetSelector.php
index a68d953..7d2b1a2 100644
--- a/src/Annotation/EntityBrowserWidgetSelector.php
+++ b/src/Annotation/EntityBrowserWidgetSelector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class EntityBrowserWidgetSelector extends Plugin {
   /**
    * The human-readable name of the widget selector.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -34,7 +35,7 @@ class EntityBrowserWidgetSelector extends Plugin {
    *
    * This will be shown when adding or configuring this widget selector.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/EntityBrowserWidgetValidation.php b/src/Annotation/EntityBrowserWidgetValidation.php
index 41afe91..0e5e732 100644
--- a/src/Annotation/EntityBrowserWidgetValidation.php
+++ b/src/Annotation/EntityBrowserWidgetValidation.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class EntityBrowserWidgetValidation extends Plugin {
   /**
    * The human-readable name of the widget validator.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controllers/EntityBrowserController.php b/src/Controllers/EntityBrowserController.php
index 9ecf6eb..1e1a2a3 100644
--- a/src/Controllers/EntityBrowserController.php
+++ b/src/Controllers/EntityBrowserController.php
@@ -21,12 +21,12 @@ class EntityBrowserController extends ControllerBase {
   /**
    * Return an Ajax dialog command for editing a referenced entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity being edited.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The currently processing request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An Ajax response with a command for opening or closing the dialog
    *   containing the edit form.
    */
diff --git a/src/Controllers/EntityBrowserFormController.php b/src/Controllers/EntityBrowserFormController.php
index 0a644c4..5f093f1 100644
--- a/src/Controllers/EntityBrowserFormController.php
+++ b/src/Controllers/EntityBrowserFormController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_browser\Controllers;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\HtmlFormController;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
@@ -21,38 +23,38 @@ class EntityBrowserFormController extends HtmlFormController implements Containe
   /**
    * Current route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;
 
   /**
    * The browser storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $browserStorage;
 
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Constructs Entity browser form controller.
    *
-   * @param \Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface $argument_resolver
+   * @param ArgumentResolverInterface $argument_resolver
    *   The argument resolver.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   Current route match service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    */
   public function __construct(ArgumentResolverInterface $argument_resolver, FormBuilderInterface $form_builder, ClassResolverInterface $class_resolver, RouteMatchInterface $route_match, EntityTypeManagerInterface $entity_type_manager, Request $request) {
@@ -100,7 +102,7 @@ class EntityBrowserFormController extends HtmlFormController implements Containe
   /**
    * Loads entity browser object for this page.
    *
-   * @return \Drupal\entity_browser\EntityBrowserInterface
+   * @return EntityBrowserInterface
    *   Loads the entity browser object
    */
   protected function loadBrowser() {
diff --git a/src/DisplayBase.php b/src/DisplayBase.php
index b715e4f..2d99113 100644
--- a/src/DisplayBase.php
+++ b/src/DisplayBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -30,21 +31,21 @@ abstract class DisplayBase extends PluginBase implements DisplayInterface, Conta
   /**
    * Selected entities.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities = [];
 
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * UUID generator interface.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;
 
@@ -58,7 +59,7 @@ abstract class DisplayBase extends PluginBase implements DisplayInterface, Conta
   /**
    * The selection storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $selectionStorage;
 
@@ -71,11 +72,11 @@ abstract class DisplayBase extends PluginBase implements DisplayInterface, Conta
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param UuidInterface $uuid_generator
    *   UUID generator interface.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface $selection_storage
+   * @param KeyValueStoreExpirableInterface $selection_storage
    *   The selection storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, UuidInterface $uuid_generator, KeyValueStoreExpirableInterface $selection_storage) {
diff --git a/src/DisplayInterface.php b/src/DisplayInterface.php
index 1ffd6eb..02716d8 100644
--- a/src/DisplayInterface.php
+++ b/src/DisplayInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -39,7 +40,7 @@ interface DisplayInterface extends PluginInspectionInterface, ConfigurableInterf
    *   A form element array containing basic properties for the entity browser
    *   element:
    *   - #eb_parents: The 'parents' space for the field in the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param array $complete_form
    *   The form structure where entity browser is being attached to.
@@ -67,7 +68,7 @@ interface DisplayInterface extends PluginInspectionInterface, ConfigurableInterf
    * plugin is responsible for fetching selected entities and sending them to
    * the initiating code.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Array of selected entities.
    */
   public function selectionCompleted(array $entities);
diff --git a/src/DisplayManager.php b/src/DisplayManager.php
index 44a0138..2eee429 100644
--- a/src/DisplayManager.php
+++ b/src/DisplayManager.php
@@ -17,9 +17,9 @@ class DisplayManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Element/EntityBrowserElement.php b/src/Element/EntityBrowserElement.php
index 4808eb2..095d3af 100644
--- a/src/Element/EntityBrowserElement.php
+++ b/src/Element/EntityBrowserElement.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Element;
 
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\FormElement;
@@ -138,7 +139,7 @@ class EntityBrowserElement extends FormElement {
    * Render API callback: Processes the entity browser element.
    */
   public static function processEntityBrowser(&$element, FormStateInterface $form_state, &$complete_form) {
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity_browser */
+    /** @var EntityBrowserInterface $entity_browser */
     if (is_string($element['#entity_browser'])) {
       $entity_browser = EntityBrowser::load($element['#entity_browser']);
     }
@@ -244,7 +245,7 @@ class EntityBrowserElement extends FormElement {
    *   are in [entity_type_id]:[entity_id] form. Array of IDs or a
    *   space-delimited string is supported.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entity objects.
    */
   public static function processEntityIds($ids) {
@@ -269,7 +270,7 @@ class EntityBrowserElement extends FormElement {
    *   Processes entity ID as it is returned from the entity browser. ID should
    *   be in [entity_type_id]:[entity_id] form.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Entity object.
    */
   public static function processEntityId($id) {
diff --git a/src/Element/EntityBrowserPagerElement.php b/src/Element/EntityBrowserPagerElement.php
index c20b38e..8f42e3c 100644
--- a/src/Element/EntityBrowserPagerElement.php
+++ b/src/Element/EntityBrowserPagerElement.php
@@ -89,7 +89,7 @@ class EntityBrowserPagerElement extends FormElement {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public static function submitPager(array $form, FormStateInterface $form_state) {
@@ -110,7 +110,7 @@ class EntityBrowserPagerElement extends FormElement {
   /**
    * Gets current page from the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return int
@@ -123,7 +123,7 @@ class EntityBrowserPagerElement extends FormElement {
   /**
    * Sets current page.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param int $page
    *   (Optional) Page to set as current. Pager will be reset to the first page
diff --git a/src/Entity/EntityBrowser.php b/src/Entity/EntityBrowser.php
index 54d9793..047de49 100644
--- a/src/Entity/EntityBrowser.php
+++ b/src/Entity/EntityBrowser.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Entity;
 
+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ -88,7 +89,7 @@ class EntityBrowser extends ConfigEntityBase implements EntityBrowserInterface,
   /**
    * Display lazy plugin collection.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $displayCollection;
 
@@ -102,7 +103,7 @@ class EntityBrowser extends ConfigEntityBase implements EntityBrowserInterface,
   /**
    * Holds the collection of widgets that are used by this entity browser.
    *
-   * @var \Drupal\entity_browser\WidgetsCollection
+   * @var WidgetsCollection
    */
   protected $widgetsCollection;
 
@@ -123,7 +124,7 @@ class EntityBrowser extends ConfigEntityBase implements EntityBrowserInterface,
   /**
    * Selection display plugin collection.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $selectionDisplayCollection;
 
@@ -144,7 +145,7 @@ class EntityBrowser extends ConfigEntityBase implements EntityBrowserInterface,
   /**
    * Widget selector plugin collection.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $widgetSelectorCollection;
 
@@ -235,7 +236,7 @@ class EntityBrowser extends ConfigEntityBase implements EntityBrowserInterface,
   /**
    * Returns display plugin collection.
    *
-   * @return \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @return DefaultSingleLazyPluginCollection
    *   The tag plugin collection.
    */
   protected function displayPluginCollection() {
@@ -249,7 +250,7 @@ class EntityBrowser extends ConfigEntityBase implements EntityBrowserInterface,
   /**
    * Returns the plugin collections used by this entity.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection[]
+   * @return LazyPluginCollection[]
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
@@ -336,7 +337,7 @@ class EntityBrowser extends ConfigEntityBase implements EntityBrowserInterface,
   /**
    * Returns selection display plugin collection.
    *
-   * @return \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @return DefaultSingleLazyPluginCollection
    *   The tag plugin collection.
    */
   protected function selectionDisplayPluginCollection() {
@@ -357,7 +358,7 @@ class EntityBrowser extends ConfigEntityBase implements EntityBrowserInterface,
   /**
    * Returns widget selector plugin collection.
    *
-   * @return \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @return DefaultSingleLazyPluginCollection
    *   The tag plugin collection.
    */
   protected function widgetSelectorPluginCollection() {
diff --git a/src/EntityBrowserFormInterface.php b/src/EntityBrowserFormInterface.php
index 8e1ac45..db245a2 100644
--- a/src/EntityBrowserFormInterface.php
+++ b/src/EntityBrowserFormInterface.php
@@ -12,7 +12,7 @@ interface EntityBrowserFormInterface extends FormInterface {
   /**
    * Sets entity browser entity.
    *
-   * @param \Drupal\entity_browser\EntityBrowserInterface $entity_browser
+   * @param EntityBrowserInterface $entity_browser
    *   Entity browser entity.
    */
   public function setEntityBrowser(EntityBrowserInterface $entity_browser);
@@ -20,7 +20,7 @@ interface EntityBrowserFormInterface extends FormInterface {
   /**
    * Returns the entity browser entity.
    *
-   * @return \Drupal\entity_browser\EntityBrowserInterface
+   * @return EntityBrowserInterface
    *   Entity browser entity.
    */
   public function getEntityBrowser();
diff --git a/src/EntityBrowserInterface.php b/src/EntityBrowserInterface.php
index 09a5e86..caf59b6 100644
--- a/src/EntityBrowserInterface.php
+++ b/src/EntityBrowserInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser;
 
+use Symfony\Component\Routing\Route;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -75,7 +76,7 @@ interface EntityBrowserInterface extends ConfigEntityInterface {
   /**
    * Returns the display.
    *
-   * @return \Drupal\entity_browser\DisplayInterface
+   * @return DisplayInterface
    *   The display.
    */
   public function getDisplay();
@@ -86,7 +87,7 @@ interface EntityBrowserInterface extends ConfigEntityInterface {
    * @param string $widget
    *   The widget ID.
    *
-   * @return \Drupal\entity_browser\WidgetInterface
+   * @return WidgetInterface
    *   The widget object.
    */
   public function getWidget($widget);
@@ -94,7 +95,7 @@ interface EntityBrowserInterface extends ConfigEntityInterface {
   /**
    * Returns the widgets for this entity browser.
    *
-   * @return \Drupal\entity_browser\WidgetsLazyPluginCollection
+   * @return WidgetsLazyPluginCollection
    *   The tag plugin bag.
    */
   public function getWidgets();
@@ -113,7 +114,7 @@ interface EntityBrowserInterface extends ConfigEntityInterface {
   /**
    * Deletes a widget from this entity browser.
    *
-   * @param \Drupal\entity_browser\WidgetInterface $widget
+   * @param WidgetInterface $widget
    *   The widget object.
    *
    * @return $this
@@ -149,7 +150,7 @@ interface EntityBrowserInterface extends ConfigEntityInterface {
   /**
    * Returns the selection display.
    *
-   * @return \Drupal\entity_browser\SelectionDisplayInterface
+   * @return SelectionDisplayInterface
    *   The display.
    */
   public function getSelectionDisplay();
@@ -157,7 +158,7 @@ interface EntityBrowserInterface extends ConfigEntityInterface {
   /**
    * Returns the widget selector.
    *
-   * @return \Drupal\entity_browser\WidgetSelectorInterface
+   * @return WidgetSelectorInterface
    *   The widget selector.
    */
   public function getWidgetSelector();
@@ -165,7 +166,7 @@ interface EntityBrowserInterface extends ConfigEntityInterface {
   /**
    * Gets route that matches this display.
    *
-   * @return \Symfony\Component\Routing\Route|bool
+   * @return Route|bool
    *   Route object or FALSE if no route is used.
    */
   public function route();
@@ -173,7 +174,7 @@ interface EntityBrowserInterface extends ConfigEntityInterface {
   /**
    * Gets entity browser form object.
    *
-   * @return \Drupal\entity_browser\EntityBrowserFormInterface
+   * @return EntityBrowserFormInterface
    *   Entity browser form.
    */
   public function getFormObject();
diff --git a/src/Events/AlterEntityBrowserDisplayData.php b/src/Events/AlterEntityBrowserDisplayData.php
index 22141bf..9032520 100644
--- a/src/Events/AlterEntityBrowserDisplayData.php
+++ b/src/Events/AlterEntityBrowserDisplayData.php
@@ -19,7 +19,7 @@ class AlterEntityBrowserDisplayData extends EventBase {
   /**
    * Form state object.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;
 
@@ -39,7 +39,7 @@ class AlterEntityBrowserDisplayData extends EventBase {
    *   Entity browser instance UUID.
    * @param array $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    * @param array $data
    *   Data to process.
@@ -54,7 +54,7 @@ class AlterEntityBrowserDisplayData extends EventBase {
   /**
    * Gets form state.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   Form state object.
    */
   public function getFormState() {
diff --git a/src/Events/EntitySelectionEvent.php b/src/Events/EntitySelectionEvent.php
index ad1b9a2..07421f8 100644
--- a/src/Events/EntitySelectionEvent.php
+++ b/src/Events/EntitySelectionEvent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Events;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Represents entity selection as event.
  */
@@ -10,7 +11,7 @@ class EntitySelectionEvent extends EventBase {
   /**
    * Entities being selected.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities;
 
@@ -21,7 +22,7 @@ class EntitySelectionEvent extends EventBase {
    *   Entity browser ID.
    * @param string $instance_uuid
    *   Entity browser instance UUID.
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Array of selected entities.
    */
   public function __construct($entity_browser_id, $instance_uuid, array $entities) {
@@ -32,7 +33,7 @@ class EntitySelectionEvent extends EventBase {
   /**
    * Gets selected entities.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    */
   public function getEntities() {
     return $this->entities;
diff --git a/src/Events/EventBase.php b/src/Events/EventBase.php
index 9346731..f3e9666 100644
--- a/src/Events/EventBase.php
+++ b/src/Events/EventBase.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\entity_browser\Events;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Base implementation of entity browser events.
diff --git a/src/FieldWidgetDisplayInterface.php b/src/FieldWidgetDisplayInterface.php
index cda9785..9738642 100644
--- a/src/FieldWidgetDisplayInterface.php
+++ b/src/FieldWidgetDisplayInterface.php
@@ -17,7 +17,7 @@ interface FieldWidgetDisplayInterface extends PluginInspectionInterface, Configu
   /**
    * Builds and gets render array for the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to be displayed.
    *
    * @return array
@@ -30,7 +30,7 @@ interface FieldWidgetDisplayInterface extends PluginInspectionInterface, Configu
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -41,7 +41,7 @@ interface FieldWidgetDisplayInterface extends PluginInspectionInterface, Configu
   /**
    * Returns if the FieldWidgetDisplay can be used for the provided field.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type that should be checked.
    *
    * @return bool
diff --git a/src/FieldWidgetDisplayManager.php b/src/FieldWidgetDisplayManager.php
index 90b6f4a..6d3421f 100644
--- a/src/FieldWidgetDisplayManager.php
+++ b/src/FieldWidgetDisplayManager.php
@@ -17,9 +17,9 @@ class FieldWidgetDisplayManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Form/EntityBrowserEditForm.php b/src/Form/EntityBrowserEditForm.php
index 465dc75..09053e2 100644
--- a/src/Form/EntityBrowserEditForm.php
+++ b/src/Form/EntityBrowserEditForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Form;
 
+use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_browser\DisplayManager;
@@ -20,43 +21,43 @@ class EntityBrowserEditForm extends EntityForm {
   /**
    * Entity browser display plugin manager.
    *
-   * @var \Drupal\entity_browser\DisplayManager
+   * @var DisplayManager
    */
   protected $displayManager;
 
   /**
    * Entity browser widget selector plugin manager.
    *
-   * @var \Drupal\entity_browser\WidgetSelectorManager
+   * @var WidgetSelectorManager
    */
   protected $widgetSelectorManager;
 
   /**
    * Entity browser selection display plugin manager.
    *
-   * @var \Drupal\entity_browser\SelectionDisplayManager
+   * @var SelectionDisplayManager
    */
   protected $selectionDisplayManager;
 
   /**
    * Entity browser widget plugin manager.
    *
-   * @var \Drupal\entity_browser\WidgetManager
+   * @var WidgetManager
    */
   protected $widgetManager;
 
   /**
    * Constructs EntityBrowserEditForm form class.
    *
-   * @param \Drupal\entity_browser\DisplayManager $display_manager
+   * @param DisplayManager $display_manager
    *   Entity browser display plugin manager.
-   * @param \Drupal\entity_browser\WidgetSelectorManager $widget_selector_manager
+   * @param WidgetSelectorManager $widget_selector_manager
    *   Entity browser widget selector plugin manager.
-   * @param \Drupal\entity_browser\SelectionDisplayManager $selection_display_manager
+   * @param SelectionDisplayManager $selection_display_manager
    *   Entity browser selection display plugin manager.
-   * @param \Drupal\entity_browser\WidgetManager $widget_manager
+   * @param WidgetManager $widget_manager
    *   Entity browser widget plugin manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(DisplayManager $display_manager, WidgetSelectorManager $widget_selector_manager, SelectionDisplayManager $selection_display_manager, WidgetManager $widget_manager, MessengerInterface $messenger) {
@@ -86,7 +87,7 @@ class EntityBrowserEditForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\entity_browser\Entity\EntityBrowser $entity_browser */
+    /** @var EntityBrowser $entity_browser */
     $entity_browser = $this->entity;
 
     $form['label'] = [
diff --git a/src/Form/EntityBrowserForm.php b/src/Form/EntityBrowserForm.php
index 1f274c9..d8ce28c 100644
--- a/src/Form/EntityBrowserForm.php
+++ b/src/Form/EntityBrowserForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_browser\Form;
 
+use Drupal\entity_browser\WidgetInterface;
+use Drupal\entity_browser\SelectionDisplayInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Config\ConfigException;
 use Drupal\Core\Form\BaseFormIdInterface;
@@ -23,41 +26,41 @@ class EntityBrowserForm extends FormBase implements EntityBrowserFormInterface,
   /**
    * UUID generator service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;
 
   /**
    * The entity browser object.
    *
-   * @var \Drupal\entity_browser\EntityBrowserInterface
+   * @var EntityBrowserInterface
    */
   protected $entityBrowser;
 
   /**
    * The entity browser selection storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $selectionStorage;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs a EntityBrowserForm object.
    *
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param UuidInterface $uuid_generator
    *   The UUID generator service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface $selection_storage
+   * @param KeyValueStoreExpirableInterface $selection_storage
    *   Selection storage.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(UuidInterface $uuid_generator, KeyValueStoreExpirableInterface $selection_storage, RendererInterface $renderer, MessengerInterface $messenger) {
@@ -110,7 +113,7 @@ class EntityBrowserForm extends FormBase implements EntityBrowserFormInterface,
   /**
    * Initializes form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   protected function init(FormStateInterface $form_state) {
@@ -180,7 +183,7 @@ class EntityBrowserForm extends FormBase implements EntityBrowserFormInterface,
     // Add cache access cache metadata from the widgets to the form directly as
     // it is affected.
     foreach ($this->entityBrowser->getWidgets() as $widget) {
-      /** @var \Drupal\entity_browser\WidgetInterface $widget */
+      /** @var WidgetInterface $widget */
       $this->renderer->addCacheableDependency($form, $widget->access());
     }
 
@@ -201,9 +204,9 @@ class EntityBrowserForm extends FormBase implements EntityBrowserFormInterface,
    * Check if entity browser with selected configuration combination can work.
    */
   protected function isFunctionalForm() {
-    /** @var \Drupal\entity_browser\WidgetInterface $widget */
+    /** @var WidgetInterface $widget */
     foreach ($this->entityBrowser->getWidgets() as $widget) {
-      /** @var \Drupal\entity_browser\SelectionDisplayInterface $selectionDisplay */
+      /** @var SelectionDisplayInterface $selectionDisplay */
       $selectionDisplay = $this->entityBrowser->getSelectionDisplay();
 
       if ($widget->requiresJsCommands() && !$selectionDisplay->supportsJsCommands()) {
@@ -253,7 +256,7 @@ class EntityBrowserForm extends FormBase implements EntityBrowserFormInterface,
   /**
    * Returns the widget that is currently selected.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return string
@@ -273,7 +276,7 @@ class EntityBrowserForm extends FormBase implements EntityBrowserFormInterface,
    *
    * @param string $widget
    *   New active widget UUID.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   protected function setCurrentWidget($widget, FormStateInterface $form_state) {
@@ -283,7 +286,7 @@ class EntityBrowserForm extends FormBase implements EntityBrowserFormInterface,
   /**
    * Indicates selection is done.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return bool
@@ -296,10 +299,10 @@ class EntityBrowserForm extends FormBase implements EntityBrowserFormInterface,
   /**
    * Returns currently selected entities.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of currently selected entities.
    */
   protected function getSelectedEntities(FormStateInterface $form_state) {
diff --git a/src/Form/WidgetsConfig.php b/src/Form/WidgetsConfig.php
index cde1f70..41fd00f 100644
--- a/src/Form/WidgetsConfig.php
+++ b/src/Form/WidgetsConfig.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_browser\Form;
 
+use Drupal\entity_browser\EntityBrowserInterface;
+use Drupal\entity_browser\WidgetInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -16,16 +18,16 @@ class WidgetsConfig extends EntityForm {
   /**
    * Entity browser widget plugin manager.
    *
-   * @var \Drupal\entity_browser\WidgetManager
+   * @var WidgetManager
    */
   protected $widgetManager;
 
   /**
    * WidgetsConfig constructor.
    *
-   * @param \Drupal\entity_browser\WidgetManager $widget_manager
+   * @param WidgetManager $widget_manager
    *   Entity browser widget plugin manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(WidgetManager $widget_manager, MessengerInterface $messenger) {
@@ -55,7 +57,7 @@ class WidgetsConfig extends EntityForm {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity_browser */
+    /** @var EntityBrowserInterface $entity_browser */
     $entity_browser = $this->getEntity();
 
     $options = [
@@ -76,7 +78,7 @@ class WidgetsConfig extends EntityForm {
     }
     $default_widgets = [];
     foreach ($entity_browser->getWidgets() as $widget) {
-      /** @var \Drupal\entity_browser\WidgetInterface $widget */
+      /** @var WidgetInterface $widget */
       $default_widgets[] = $widget->id();
     }
     $form['widget'] = [
@@ -117,7 +119,7 @@ class WidgetsConfig extends EntityForm {
       ],
     ];
 
-    /** @var \Drupal\entity_browser\WidgetInterface $widget */
+    /** @var WidgetInterface $widget */
     foreach ($entity_browser->getWidgets() as $uuid => $widget) {
       $row = [
         '#attributes' => [
@@ -206,7 +208,7 @@ class WidgetsConfig extends EntityForm {
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $entity_browser = $this->getEntity();
-    /** @var \Drupal\entity_browser\WidgetInterface $widget */
+    /** @var WidgetInterface $widget */
     foreach ($entity_browser->getWidgets() as $widget) {
       $widget->validateConfigurationForm($form, $form_state);
     }
@@ -218,7 +220,7 @@ class WidgetsConfig extends EntityForm {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $entity_browser = $this->getEntity();
     $table = $form_state->getValue('table');
-    /** @var \Drupal\entity_browser\WidgetInterface $widget */
+    /** @var WidgetInterface $widget */
     foreach ($entity_browser->getWidgets() as $uuid => $widget) {
       $widget->submitConfigurationForm($form, $form_state);
       $widget->setWeight($table[$uuid]['weight']);
diff --git a/src/Permissions.php b/src/Permissions.php
index 21fa758..be6c70a 100644
--- a/src/Permissions.php
+++ b/src/Permissions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -17,14 +18,14 @@ class Permissions implements ContainerInjectionInterface {
   /**
    * The entity browser storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $browserStorage;
 
   /**
    * Constructs Permissions object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -45,7 +46,7 @@ class Permissions implements ContainerInjectionInterface {
    */
   public function permissions() {
     $permissions = [];
-    /** @var \Drupal\entity_browser\EntityBrowserInterface[] $browsers */
+    /** @var EntityBrowserInterface[] $browsers */
     $browsers = $this->browserStorage->loadMultiple();
 
     foreach ($browsers as $browser) {
diff --git a/src/Plugin/EntityBrowser/Display/IFrame.php b/src/Plugin/EntityBrowser/Display/IFrame.php
index 3eda8aa..be4f776 100644
--- a/src/Plugin/EntityBrowser/Display/IFrame.php
+++ b/src/Plugin/EntityBrowser/Display/IFrame.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Plugin\EntityBrowser\Display;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,7 +17,6 @@ use Drupal\entity_browser\Events\AlterEntityBrowserDisplayData;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Path\CurrentPathStack;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Render\BareHtmlPageRendererInterface;
@@ -36,35 +36,35 @@ class IFrame extends DisplayBase implements DisplayRouterInterface {
   /**
    * Current route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;
 
   /**
    * Current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The bare HTML page renderer.
    *
-   * @var \Drupal\Core\Render\BareHtmlPageRendererInterface
+   * @var BareHtmlPageRendererInterface
    */
   protected $bareHtmlPageRenderer;
 
@@ -77,21 +77,21 @@ class IFrame extends DisplayBase implements DisplayRouterInterface {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   UUID generator interface.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface $selection_storage
+   * @param KeyValueStoreExpirableInterface $selection_storage
    *   The selection storage.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $current_route_match
+   * @param RouteMatchInterface $current_route_match
    *   The currently active route match object.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Render\BareHtmlPageRendererInterface $bare_html_page_renderer
+   * @param BareHtmlPageRendererInterface $bare_html_page_renderer
    *   The bare HTML page renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, UuidInterface $uuid, KeyValueStoreExpirableInterface $selection_storage, RouteMatchInterface $current_route_match, Request $request, CurrentPathStack $current_path, RendererInterface $renderer, BareHtmlPageRendererInterface $bare_html_page_renderer) {
@@ -139,10 +139,10 @@ class IFrame extends DisplayBase implements DisplayRouterInterface {
    */
   public function displayEntityBrowser(array $element, FormStateInterface $form_state, array &$complete_form, array $persistent_data = []) {
     parent::displayEntityBrowser($element, $form_state, $complete_form, $persistent_data);
-    /** @var \Drupal\entity_browser\Events\RegisterJSCallbacks $event */
+    /** @var RegisterJSCallbacks $event */
     $js_event_object = new RegisterJSCallbacks($this->configuration['entity_browser_id'], $this->getUuid());
     $js_event_object->registerCallback('Drupal.entityBrowser.selectionCompleted');
-    $callback_event = $this->eventDispatcher->dispatch(Events::REGISTER_JS_CALLBACKS, $js_event_object);
+    $callback_event = $this->eventDispatcher->dispatch($js_event_object, Events::REGISTER_JS_CALLBACKS);
     $original_path = $this->currentPath->getPath();
 
     $data = [
@@ -160,7 +160,7 @@ class IFrame extends DisplayBase implements DisplayRouterInterface {
       ],
     ];
     $event_object = new AlterEntityBrowserDisplayData($this->configuration['entity_browser_id'], $this->getUuid(), $this->getPluginDefinition(), $form_state, $data);
-    $event = $this->eventDispatcher->dispatch(Events::ALTER_BROWSER_DISPLAY_DATA, $event_object);
+    $event = $this->eventDispatcher->dispatch($event_object, Events::ALTER_BROWSER_DISPLAY_DATA);
     $data = $event->getData();
     return [
       '#theme_wrappers' => ['container'],
@@ -205,10 +205,10 @@ class IFrame extends DisplayBase implements DisplayRouterInterface {
    * Intercepts default response and injects response that will trigger JS to
    * propagate selected entities upstream.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   Response event.
    */
-  public function propagateSelection(FilterResponseEvent $event) {
+  public function propagateSelection(ResponseEvent $event) {
     $render = [
       '#attached' => [
         'library' => ['entity_browser/' . $this->pluginDefinition['id'] . '_selection'],
diff --git a/src/Plugin/EntityBrowser/Display/Modal.php b/src/Plugin/EntityBrowser/Display/Modal.php
index 01562b2..a74bbd2 100644
--- a/src/Plugin/EntityBrowser/Display/Modal.php
+++ b/src/Plugin/EntityBrowser/Display/Modal.php
@@ -32,7 +32,7 @@ class Modal extends IFrame {
     DisplayBase::displayEntityBrowser($element, $form_state, $complete_form, $persistent_data);
     $js_event_object = new RegisterJSCallbacks($this->configuration['entity_browser_id'], $this->getUuid());
     $js_event_object->registerCallback('Drupal.entityBrowser.selectionCompleted');
-    $js_event = $this->eventDispatcher->dispatch(Events::REGISTER_JS_CALLBACKS, $js_event_object);
+    $js_event = $this->eventDispatcher->dispatch($js_event_object, Events::REGISTER_JS_CALLBACKS);
     $original_path = $this->currentPath->getPath();
 
     $data = [
@@ -47,7 +47,7 @@ class Modal extends IFrame {
       ],
     ];
     $event_object = new AlterEntityBrowserDisplayData($this->configuration['entity_browser_id'], $this->getUuid(), $this->getPluginDefinition(), $form_state, $data);
-    $event = $this->eventDispatcher->dispatch(Events::ALTER_BROWSER_DISPLAY_DATA, $event_object);
+    $event = $this->eventDispatcher->dispatch($event_object, Events::ALTER_BROWSER_DISPLAY_DATA);
     $data = $event->getData();
     return [
       '#theme_wrappers' => ['container'],
@@ -94,10 +94,10 @@ class Modal extends IFrame {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An ajax response.
    */
   public function openModal(array &$form, FormStateInterface $form_state) {
diff --git a/src/Plugin/EntityBrowser/FieldWidgetDisplay/EntityLabel.php b/src/Plugin/EntityBrowser/FieldWidgetDisplay/EntityLabel.php
index 3cb41c9..2bf4c5f 100644
--- a/src/Plugin/EntityBrowser/FieldWidgetDisplay/EntityLabel.php
+++ b/src/Plugin/EntityBrowser/FieldWidgetDisplay/EntityLabel.php
@@ -23,7 +23,7 @@ class EntityLabel extends FieldWidgetDisplayBase implements ContainerFactoryPlug
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -36,7 +36,7 @@ class EntityLabel extends FieldWidgetDisplayBase implements ContainerFactoryPlug
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityRepositoryInterface $entity_repository) {
diff --git a/src/Plugin/EntityBrowser/FieldWidgetDisplay/ImageThumbnail.php b/src/Plugin/EntityBrowser/FieldWidgetDisplay/ImageThumbnail.php
index 9ecca60..1ea85a8 100644
--- a/src/Plugin/EntityBrowser/FieldWidgetDisplay/ImageThumbnail.php
+++ b/src/Plugin/EntityBrowser/FieldWidgetDisplay/ImageThumbnail.php
@@ -25,7 +25,7 @@ class ImageThumbnail extends FieldWidgetDisplayBase implements ContainerFactoryP
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -38,7 +38,7 @@ class ImageThumbnail extends FieldWidgetDisplayBase implements ContainerFactoryP
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/EntityBrowser/FieldWidgetDisplay/RenderedEntity.php b/src/Plugin/EntityBrowser/FieldWidgetDisplay/RenderedEntity.php
index fb43de2..90097a5 100644
--- a/src/Plugin/EntityBrowser/FieldWidgetDisplay/RenderedEntity.php
+++ b/src/Plugin/EntityBrowser/FieldWidgetDisplay/RenderedEntity.php
@@ -24,14 +24,14 @@ class RenderedEntity extends FieldWidgetDisplayBase implements ContainerFactoryP
   /**
    * Entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
@@ -44,9 +44,9 @@ class RenderedEntity extends FieldWidgetDisplayBase implements ContainerFactoryP
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   Entity display repository service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository) {
diff --git a/src/Plugin/EntityBrowser/SelectionDisplay/MultiStepDisplay.php b/src/Plugin/EntityBrowser/SelectionDisplay/MultiStepDisplay.php
index 88c57c3..f8c3238 100644
--- a/src/Plugin/EntityBrowser/SelectionDisplay/MultiStepDisplay.php
+++ b/src/Plugin/EntityBrowser/SelectionDisplay/MultiStepDisplay.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_browser\Plugin\EntityBrowser\SelectionDisplay;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Ajax\AfterCommand;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\InvokeCommand;
@@ -29,7 +31,7 @@ class MultiStepDisplay extends SelectionDisplayBase {
   /**
    * Field widget display plugin manager.
    *
-   * @var \Drupal\entity_browser\FieldWidgetDisplayManager
+   * @var FieldWidgetDisplayManager
    */
   protected $fieldDisplayManager;
 
@@ -42,11 +44,11 @@ class MultiStepDisplay extends SelectionDisplayBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\FieldWidgetDisplayManager $field_display_manager
+   * @param FieldWidgetDisplayManager $field_display_manager
    *   Field widget display plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager) {
@@ -180,7 +182,7 @@ class MultiStepDisplay extends SelectionDisplayBase {
   /**
    * Execute command generated by front-end.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   protected function executeJsCommand(FormStateInterface $form_state) {
@@ -261,10 +263,10 @@ class MultiStepDisplay extends SelectionDisplayBase {
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Return Ajax response with commands.
    */
   public static function handleAjaxCommand(array $form, FormStateInterface $form_state) {
@@ -275,7 +277,7 @@ class MultiStepDisplay extends SelectionDisplayBase {
 
       // Entity IDs that are affected by this command.
       if (isset($commands['add'])) {
-        /** @var \Drupal\Core\Render\RendererInterface $renderer */
+        /** @var RendererInterface $renderer */
         $renderer = \Drupal::service('renderer');
         $entity_ids = $commands['add'];
 
@@ -358,7 +360,7 @@ class MultiStepDisplay extends SelectionDisplayBase {
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public static function removeItemSubmit(array &$form, FormStateInterface $form_state) {
@@ -391,7 +393,7 @@ class MultiStepDisplay extends SelectionDisplayBase {
   /**
    * Saves new ordering of entities based on weight.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public static function saveNewOrder(FormStateInterface $form_state) {
@@ -432,7 +434,7 @@ class MultiStepDisplay extends SelectionDisplayBase {
 
     $entity_types = [];
     foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+      /** @var EntityTypeInterface $entity_type */
       $entity_types[$entity_type_id] = $entity_type->getLabel();
     }
 
diff --git a/src/Plugin/EntityBrowser/Widget/Upload.php b/src/Plugin/EntityBrowser/Widget/Upload.php
index a0b7edf..26da476 100644
--- a/src/Plugin/EntityBrowser/Widget/Upload.php
+++ b/src/Plugin/EntityBrowser/Widget/Upload.php
@@ -28,14 +28,14 @@ class Upload extends WidgetBase {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
@@ -48,15 +48,15 @@ class Upload extends WidgetBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager, ModuleHandlerInterface $module_handler, Token $token) {
@@ -150,7 +150,7 @@ class Upload extends WidgetBase {
    *
    * @param array $element
    *   Upload form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   protected function clearFormValues(array &$element, FormStateInterface $form_state) {
diff --git a/src/Plugin/EntityBrowser/Widget/View.php b/src/Plugin/EntityBrowser/Widget/View.php
index 51b7ba2..8bc2f48 100644
--- a/src/Plugin/EntityBrowser/Widget/View.php
+++ b/src/Plugin/EntityBrowser/Widget/View.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Plugin\EntityBrowser\Widget;
 
+use Drupal\views\ViewExecutable;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
@@ -33,7 +34,7 @@ class View extends WidgetBase implements ContainerFactoryPluginInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -71,13 +72,13 @@ class View extends WidgetBase implements ContainerFactoryPluginInterface {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager, AccountInterface $current_user) {
@@ -94,7 +95,7 @@ class View extends WidgetBase implements ContainerFactoryPluginInterface {
     // case either of those is nonexistent or display not of correct type)?
     $form['#attached']['library'] = ['entity_browser/view'];
 
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $this->entityTypeManager
       ->getStorage('view')
       ->load($this->configuration['view'])
@@ -305,7 +306,7 @@ class View extends WidgetBase implements ContainerFactoryPluginInterface {
    */
   public function access() {
     // Mark the widget as not visible if the user has no access to the view.
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $this->entityTypeManager
       ->getStorage('view')
       ->load($this->configuration['view'])
diff --git a/src/Plugin/EntityBrowser/WidgetSelector/DropDown.php b/src/Plugin/EntityBrowser/WidgetSelector/DropDown.php
index 497cbac..c8a7b95 100644
--- a/src/Plugin/EntityBrowser/WidgetSelector/DropDown.php
+++ b/src/Plugin/EntityBrowser/WidgetSelector/DropDown.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Plugin\EntityBrowser\WidgetSelector;
 
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\entity_browser\WidgetSelectorBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -24,7 +25,7 @@ class DropDown extends WidgetSelectorBase {
     $form['#prefix'] = '<div id="entity-browser-form">';
     $form['#suffix'] = '</div>';
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $form_state->getFormObject()->getEntityBrowser();
 
     $widget_ids = [];
@@ -70,7 +71,7 @@ class DropDown extends WidgetSelectorBase {
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
diff --git a/src/Plugin/EntityBrowser/WidgetSelector/Tabs.php b/src/Plugin/EntityBrowser/WidgetSelector/Tabs.php
index 0128b29..230e71d 100644
--- a/src/Plugin/EntityBrowser/WidgetSelector/Tabs.php
+++ b/src/Plugin/EntityBrowser/WidgetSelector/Tabs.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Plugin\EntityBrowser\WidgetSelector;
 
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\entity_browser\WidgetSelectorBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -21,7 +22,7 @@ class Tabs extends WidgetSelectorBase {
    */
   public function getForm(array &$form = [], FormStateInterface &$form_state = NULL) {
     $element = [];
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $form_state->getFormObject()->getEntityBrowser();
     foreach ($this->widget_ids as $id => $label) {
       $name = 'tab_selector_' . $id;
diff --git a/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php b/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
index 0901eba..405e3d0 100644
--- a/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
+++ b/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Plugin\Field\FieldWidget;
 
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\entity_browser\Entity\EntityBrowser;
@@ -43,14 +44,14 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Field widget display plugin manager.
    *
-   * @var \Drupal\entity_browser\FieldWidgetDisplayManager
+   * @var FieldWidgetDisplayManager
    */
   protected $fieldDisplayManager;
 
@@ -66,14 +67,14 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
   /**
    * The module handler interface.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -84,21 +85,21 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\entity_browser\FieldWidgetDisplayManager $field_display_manager
+   * @param FieldWidgetDisplayManager $field_display_manager
    *   Field widget display plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, MessengerInterface $messenger) {
@@ -151,7 +152,7 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
     $element = parent::settingsForm($form, $form_state);
 
     $browsers = [];
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     foreach ($this->entityTypeManager->getStorage('entity_browser')->loadMultiple() as $browser) {
       $browsers[$browser->id()] = $browser->label();
     }
@@ -278,7 +279,7 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
     $values = NestedArray::getValue($form_state->getValues(), $element['#parents']);
 
     if ($values['selection_mode'] == 'selection_edit') {
-      /** @var \Drupal\entity_browser\Entity\EntityBrowser $entity_browser */
+      /** @var EntityBrowser $entity_browser */
       $entity_browser = EntityBrowser::load($values['entity_browser']);
       if ($entity_browser->getSelectionDisplay()->supportsPreselection() === FALSE) {
         $tparams = [
@@ -330,7 +331,7 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
    */
   public function flagErrors(FieldItemListInterface $items, ConstraintViolationListInterface $violations, array $form, FormStateInterface $form_state) {
     if ($violations->count() > 0) {
-      /** @var \Symfony\Component\Validator\ConstraintViolation $violation */
+      /** @var ConstraintViolation $violation */
       foreach ($violations as $offset => $violation) {
         // The value of the required field is checked through the "not null"
         // constraint, whose message is not very useful. We override it here for
@@ -358,7 +359,7 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
   /**
    * Returns a key used to store the previously loaded entity.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field items.
    *
    * @return string
@@ -560,7 +561,7 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
    *   The ID for the details element.
    * @param string[] $field_parents
    *   Field parents.
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $entities
+   * @param ContentEntityInterface[] $entities
    *   Array of referenced entities.
    *
    * @return array
@@ -781,14 +782,14 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
   /**
    * Determines the entities used for the form element.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field item to extract the entities from.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The list of entities for the form element.
    */
   protected function formElementEntities(FieldItemListInterface $items, array $element, FormStateInterface $form_state) {
@@ -895,10 +896,10 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]|false
+   * @return EntityInterface[]|false
    *   Return list of entities if they are available or false.
    */
   protected function getEntitiesByTargetId(array $element, FormStateInterface $form_state) {
diff --git a/src/Plugin/Field/FieldWidget/FileBrowserWidget.php b/src/Plugin/Field/FieldWidget/FileBrowserWidget.php
index e298ab1..bc94f9f 100644
--- a/src/Plugin/Field/FieldWidget/FileBrowserWidget.php
+++ b/src/Plugin/Field/FieldWidget/FileBrowserWidget.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_browser\Plugin\Field\FieldWidget;
 
+use Symfony\Component\Mime\MimeTypesInterface;
+use Drupal\file\FileInterface;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -18,7 +20,6 @@ use Drupal\image\Entity\ImageStyle;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Component\Utility\Environment;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 
 /**
  * Entity browser file widget.
@@ -46,28 +47,28 @@ class FileBrowserWidget extends EntityReferenceBrowserWidget {
   /**
    * A list of currently edited items. Used to determine alt/title values.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   protected $items;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $displayRepository;
 
   /**
    * The mime type guesser service.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;
 
@@ -78,30 +79,30 @@ class FileBrowserWidget extends EntityReferenceBrowserWidget {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\entity_browser\FieldWidgetDisplayManager $field_display_manager
+   * @param FieldWidgetDisplayManager $field_display_manager
    *   Field widget display plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository
+   * @param EntityDisplayRepositoryInterface $display_repository
    *   The entity display repository service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mime_type_guesser
+   * @param MimeTypesInterface $mime_type_guesser
    *   The mime type guesser service.
    */
-  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager, ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $display_repository, ModuleHandlerInterface $module_handler, AccountInterface $current_user, MimeTypeGuesserInterface $mime_type_guesser, MessengerInterface $messenger) {
+  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager, ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $display_repository, ModuleHandlerInterface $module_handler, AccountInterface $current_user, MimeTypesInterface $mime_type_guesser, MessengerInterface $messenger) {
     parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $third_party_settings, $entity_type_manager, $field_display_manager, $module_handler, $current_user, $messenger);
     $this->entityTypeManager = $entity_type_manager;
     $this->fieldDisplayManager = $field_display_manager;
@@ -255,7 +256,7 @@ class FileBrowserWidget extends EntityReferenceBrowserWidget {
     $current['#header'][] = ['data' => $this->t('Operations'), 'colspan' => 3];
     $current['#header'][] = $this->t('Order', [], ['context' => 'Sort order']);
 
-    /** @var \Drupal\file\FileInterface[] $entities */
+    /** @var FileInterface[] $entities */
     foreach ($entities as $entity) {
       // Check to see if this entity has an edit form. If not, the edit button
       // will only throw an exception.
diff --git a/src/Plugin/views/argument_default/EntityBrowserWidgetContext.php b/src/Plugin/views/argument_default/EntityBrowserWidgetContext.php
index 97604f9..044fedd 100644
--- a/src/Plugin/views/argument_default/EntityBrowserWidgetContext.php
+++ b/src/Plugin/views/argument_default/EntityBrowserWidgetContext.php
@@ -20,7 +20,7 @@ class EntityBrowserWidgetContext extends ArgumentDefaultPluginBase {
   /**
    * The selection storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $selectionStorage;
 
diff --git a/src/Plugin/views/display/EntityBrowser.php b/src/Plugin/views/display/EntityBrowser.php
index f4f7fbe..cd48442 100644
--- a/src/Plugin/views/display/EntityBrowser.php
+++ b/src/Plugin/views/display/EntityBrowser.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Plugin\views\display;
 
+use Drupal\entity_browser\Plugin\views\field\SelectForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
 
@@ -152,7 +153,7 @@ class EntityBrowser extends DisplayPluginBase {
   protected function handleForm(array &$render) {
     if (!empty($this->view->field['entity_browser_select'])) {
 
-      /** @var \Drupal\entity_browser\Plugin\views\field\SelectForm $select */
+      /** @var SelectForm $select */
       $select = $this->view->field['entity_browser_select'];
       $select->viewsForm($render);
 
diff --git a/src/Plugin/views/field/SelectForm.php b/src/Plugin/views/field/SelectForm.php
index 30039b9..b0e1a0c 100644
--- a/src/Plugin/views/field/SelectForm.php
+++ b/src/Plugin/views/field/SelectForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Plugin\views\field;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\Plugin\views\style\Table;
@@ -21,14 +22,14 @@ class SelectForm extends FieldPluginBase {
   /**
    * The current request.
    *
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   protected $currentRequest;
 
   /**
    * The entity browser selection storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $selectionStorage;
 
@@ -41,9 +42,9 @@ class SelectForm extends FieldPluginBase {
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface $selection_storage
+   * @param KeyValueStoreExpirableInterface $selection_storage
    *   The selection storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RequestStack $request_stack, KeyValueStoreExpirableInterface $selection_storage) {
@@ -94,7 +95,7 @@ class SelectForm extends FieldPluginBase {
   /**
    * Returns the ID for a result row.
    *
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   The result row.
    *
    * @return string
diff --git a/src/Plugin/views/filter/ContextualBundle.php b/src/Plugin/views/filter/ContextualBundle.php
index d59ed6a..eb7db81 100644
--- a/src/Plugin/views/filter/ContextualBundle.php
+++ b/src/Plugin/views/filter/ContextualBundle.php
@@ -25,28 +25,28 @@ class ContextualBundle extends Bundle {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * A request stack symfony instance.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The entity browser selection storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $selectionStorage;
 
   /**
    * The bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfoService;
 
@@ -59,11 +59,11 @@ class ContextualBundle extends Bundle {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   A request stack symfony instance.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info_service
+   * @param EntityTypeBundleInfoInterface $bundle_info_service
    *   The bundle info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, RequestStack $request_stack, KeyValueStoreExpirableInterface $selection_storage, EntityTypeBundleInfoInterface $bundle_info_service) {
diff --git a/src/RouteSubscriber.php b/src/RouteSubscriber.php
index 6d307b3..21c47b7 100644
--- a/src/RouteSubscriber.php
+++ b/src/RouteSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\Routing\RouteCollection;
 
@@ -13,23 +14,23 @@ class RouteSubscriber {
   /**
    * The entity browser storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $browserStorage;
 
   /**
    * Display plugin manager.
    *
-   * @var \Drupal\entity_browser\DisplayManager
+   * @var DisplayManager
    */
   protected $displayManager;
 
   /**
    * Constructs a \Drupal\views\EventSubscriber\RouteSubscriber instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_browser\DisplayManager $display_manager
+   * @param DisplayManager $display_manager
    *   The display manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, DisplayManager $display_manager) {
@@ -40,7 +41,7 @@ class RouteSubscriber {
   /**
    * Returns a set of route objects.
    *
-   * @return \Symfony\Component\Routing\RouteCollection
+   * @return RouteCollection
    *   A route collection.
    */
   public function routes() {
diff --git a/src/SelectionDisplayBase.php b/src/SelectionDisplayBase.php
index 7591acb..7aeb2a7 100644
--- a/src/SelectionDisplayBase.php
+++ b/src/SelectionDisplayBase.php
@@ -30,14 +30,14 @@ abstract class SelectionDisplayBase extends PluginBase implements SelectionDispl
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -50,9 +50,9 @@ abstract class SelectionDisplayBase extends PluginBase implements SelectionDispl
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager type service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager) {
@@ -156,11 +156,11 @@ abstract class SelectionDisplayBase extends PluginBase implements SelectionDispl
   protected function selectionDone(FormStateInterface $form_state) {
     $form_state->set(['entity_browser', 'selection_completed'], TRUE);
     $this->eventDispatcher->dispatch(
-      Events::DONE,
       new SelectionDoneEvent(
         $this->configuration['entity_browser_id'],
         $form_state->get(['entity_browser', 'instance_uuid'])
-      ));
+      ),
+      Events::DONE);
   }
 
 }
diff --git a/src/SelectionDisplayInterface.php b/src/SelectionDisplayInterface.php
index 1958320..f786219 100644
--- a/src/SelectionDisplayInterface.php
+++ b/src/SelectionDisplayInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser;
 
+use Drupal\Core\Config\ConfigException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -32,7 +33,7 @@ interface SelectionDisplayInterface extends PluginInspectionInterface, Configura
    *   Entire form built up to this point. Form elements for selection display
    *   should generally not be added directly to it but returned from function
    *   as a separated unit.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
@@ -45,7 +46,7 @@ interface SelectionDisplayInterface extends PluginInspectionInterface, Configura
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function validate(array &$form, FormStateInterface $form_state);
@@ -55,7 +56,7 @@ interface SelectionDisplayInterface extends PluginInspectionInterface, Configura
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function submit(array &$form, FormStateInterface $form_state);
@@ -68,7 +69,7 @@ interface SelectionDisplayInterface extends PluginInspectionInterface, Configura
    *
    * @deprecated Use ::supportsPreselection instead.
    *
-   * @throws \Drupal\Core\Config\ConfigException
+   * @throws ConfigException
    */
   public function checkPreselectionSupport();
 
diff --git a/src/SelectionDisplayManager.php b/src/SelectionDisplayManager.php
index 537d9f8..b1af756 100644
--- a/src/SelectionDisplayManager.php
+++ b/src/SelectionDisplayManager.php
@@ -17,9 +17,9 @@ class SelectionDisplayManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/WidgetBase.php b/src/WidgetBase.php
index f5d2ea7..101e830 100644
--- a/src/WidgetBase.php
+++ b/src/WidgetBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_browser;
 
+use Drupal\Core\Entity\EntityInterface;
+use Symfony\Component\Validator\ConstraintViolationListInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -51,21 +53,21 @@ abstract class WidgetBase extends PluginBase implements WidgetInterface, Contain
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Widget Validation Manager service.
    *
-   * @var \Drupal\entity_browser\WidgetValidationManager
+   * @var WidgetValidationManager
    */
   protected $validationManager;
 
@@ -78,11 +80,11 @@ abstract class WidgetBase extends PluginBase implements WidgetInterface, Contain
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager) {
@@ -277,10 +279,10 @@ abstract class WidgetBase extends PluginBase implements WidgetInterface, Contain
    *
    * @param array $form
    *   Complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entities.
    */
   abstract protected function prepareEntities(array $form, FormStateInterface $form_state);
@@ -307,14 +309,14 @@ abstract class WidgetBase extends PluginBase implements WidgetInterface, Contain
    * @param array $validators
    *   Array of widget validator ids.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationListInterface
+   * @return ConstraintViolationListInterface
    *   A list of constraint violations. If the list is empty, validation
    *   succeeded.
    */
   protected function runWidgetValidators(array $entities, $validators = []) {
     $violations = new ConstraintViolationList();
     foreach ($validators as $validator_id => $options) {
-      /** @var \Drupal\entity_browser\WidgetValidationInterface $widget_validator */
+      /** @var WidgetValidationInterface $widget_validator */
       $widget_validator = $this->validationManager->createInstance($validator_id, []);
       if ($widget_validator) {
         $violations->addAll($widget_validator->validate($entities, $options));
@@ -340,12 +342,12 @@ abstract class WidgetBase extends PluginBase implements WidgetInterface, Contain
     $selected_entities = array_merge($selected_entities, $entities);
 
     $this->eventDispatcher->dispatch(
-      Events::SELECTED,
       new EntitySelectionEvent(
         $this->configuration['entity_browser_id'],
         $form_state->get(['entity_browser', 'instance_uuid']),
         $entities
-      ));
+      ),
+      Events::SELECTED);
   }
 
   /**
diff --git a/src/WidgetInterface.php b/src/WidgetInterface.php
index 3e9938a..1cc926b 100644
--- a/src/WidgetInterface.php
+++ b/src/WidgetInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -78,7 +79,7 @@ interface WidgetInterface extends PluginInspectionInterface, ConfigurableInterfa
    *   Entire form bult up to this point. Form elements for widget should generally
    *   not be added directly to it but returned from funciton as a separated
    *   unit.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    * @param array $additional_widget_parameters
    *   Additional parameters that we want to pass to the widget.
@@ -93,7 +94,7 @@ interface WidgetInterface extends PluginInspectionInterface, ConfigurableInterfa
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function validate(array &$form, FormStateInterface $form_state);
@@ -105,7 +106,7 @@ interface WidgetInterface extends PluginInspectionInterface, ConfigurableInterfa
    *   Widget part of the form.
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function submit(array &$element, array &$form, FormStateInterface $form_state);
@@ -122,7 +123,7 @@ interface WidgetInterface extends PluginInspectionInterface, ConfigurableInterfa
   /**
    * Defines if the widget is visible / accessible in a given context.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access();
diff --git a/src/WidgetManager.php b/src/WidgetManager.php
index 7dc33f7..abd054c 100644
--- a/src/WidgetManager.php
+++ b/src/WidgetManager.php
@@ -17,9 +17,9 @@ class WidgetManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/WidgetSelectorInterface.php b/src/WidgetSelectorInterface.php
index b23bc39..14167eb 100644
--- a/src/WidgetSelectorInterface.php
+++ b/src/WidgetSelectorInterface.php
@@ -47,7 +47,7 @@ interface WidgetSelectorInterface extends PluginInspectionInterface, Configurabl
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function validate(array &$form, FormStateInterface $form_state);
@@ -57,7 +57,7 @@ interface WidgetSelectorInterface extends PluginInspectionInterface, Configurabl
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return string
diff --git a/src/WidgetSelectorManager.php b/src/WidgetSelectorManager.php
index b5d2f51..0300142 100644
--- a/src/WidgetSelectorManager.php
+++ b/src/WidgetSelectorManager.php
@@ -17,9 +17,9 @@ class WidgetSelectorManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/WidgetValidationBase.php b/src/WidgetValidationBase.php
index 0bb76d1..dcc079e 100644
--- a/src/WidgetValidationBase.php
+++ b/src/WidgetValidationBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser;
 
+use Symfony\Component\Validator\ConstraintViolationListInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ -24,7 +25,7 @@ abstract class WidgetValidationBase extends PluginBase implements WidgetValidati
   /**
    * The Typed Data Manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
@@ -105,7 +106,7 @@ abstract class WidgetValidationBase extends PluginBase implements WidgetValidati
    * @param array $options
    *   Array of options needed by the constraint validator.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   A data definition object for the given data type.
    */
   protected function getDataDefinition($data_type, $constraint_name = NULL, array $options = []) {
@@ -119,12 +120,12 @@ abstract class WidgetValidationBase extends PluginBase implements WidgetValidati
   /**
    * Creates and validates instances of typed data for each Entity.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The data definition generated from ::getDataDefinition().
    * @param array $entities
    *   An array of Entities to validate the definition against.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationListInterface
+   * @return ConstraintViolationListInterface
    *   A list of violations.
    */
   protected function validateDataDefinition(DataDefinitionInterface $data_definition, array $entities) {
diff --git a/src/WidgetValidationInterface.php b/src/WidgetValidationInterface.php
index de5e4d5..c25d2ea 100644
--- a/src/WidgetValidationInterface.php
+++ b/src/WidgetValidationInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser;
 
+use Symfony\Component\Validator\ConstraintViolationListInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -27,7 +28,7 @@ interface WidgetValidationInterface extends PluginInspectionInterface, Configura
    * @param array $options
    *   (Optional) Array of options needed by the constraint validator.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationListInterface
+   * @return ConstraintViolationListInterface
    *   A list of constraint violations. If the list is empty, validation
    *   succeeded.
    */
diff --git a/src/WidgetValidationManager.php b/src/WidgetValidationManager.php
index eb8a6a6..9ed0267 100644
--- a/src/WidgetValidationManager.php
+++ b/src/WidgetValidationManager.php
@@ -17,9 +17,9 @@ class WidgetValidationManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/DummyWidget.php b/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/DummyWidget.php
index 820d271..6fcbdc9 100644
--- a/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/DummyWidget.php
+++ b/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/DummyWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser_test\Plugin\EntityBrowser\Widget;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_browser\WidgetBase;
@@ -21,7 +22,7 @@ class DummyWidget extends WidgetBase {
   /**
    * Entity to be returned.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $entity;
 
diff --git a/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/MultipleSubmitTestWidget.php b/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/MultipleSubmitTestWidget.php
index 8c9db76..104791a 100644
--- a/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/MultipleSubmitTestWidget.php
+++ b/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/MultipleSubmitTestWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser_test\Plugin\EntityBrowser\Widget;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_browser\WidgetBase;
 
@@ -20,7 +21,7 @@ class MultipleSubmitTestWidget extends WidgetBase {
   /**
    * Entity to be returned.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $entity;
 
diff --git a/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/PagerTestWidget.php b/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/PagerTestWidget.php
index 551aaef..d9e163c 100644
--- a/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/PagerTestWidget.php
+++ b/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/PagerTestWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser_test\Plugin\EntityBrowser\Widget;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_browser\Element\EntityBrowserPagerElement;
 use Drupal\entity_browser\WidgetBase;
@@ -21,7 +22,7 @@ class PagerTestWidget extends WidgetBase {
   /**
    * Entity to be returned.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $entity;
 
diff --git a/tests/src/Functional/ConfigAccessTest.php b/tests/src/Functional/ConfigAccessTest.php
index cab0760..bba69ac 100644
--- a/tests/src/Functional/ConfigAccessTest.php
+++ b/tests/src/Functional/ConfigAccessTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_browser\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -29,7 +30,7 @@ class ConfigAccessTest extends BrowserTestBase {
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -41,7 +42,7 @@ class ConfigAccessTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('local_actions_block');
@@ -83,7 +84,7 @@ class ConfigAccessTest extends BrowserTestBase {
     $this->drupalGet('/admin/config/content/entity_browser');
     $this->clickLink('Delete');
     $this->assertSession()->responseContains('This action cannot be undone.', 'Delete question found.');
-    $this->drupalPostForm(NULL, [], 'Delete Entity Browser');
+    $this->submitForm([], 'Delete Entity Browser');
 
     $this->assertSession()->responseContains('Entity browser <em class="placeholder">Test entity browser</em> was deleted.', 'Confirmation message found.');
     $this->assertSession()->responseContains('There are no entity browser entities yet.', 'Entity browsers table is empty.');
diff --git a/tests/src/Functional/EntityBrowserUpdateHookTest.php b/tests/src/Functional/EntityBrowserUpdateHookTest.php
index 8851bd6..029518f 100644
--- a/tests/src/Functional/EntityBrowserUpdateHookTest.php
+++ b/tests/src/Functional/EntityBrowserUpdateHookTest.php
@@ -29,7 +29,7 @@ class EntityBrowserUpdateHookTest extends UpdatePathTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $entity_browser_type = $this->container
       ->get('entity_type.manager')
diff --git a/tests/src/Functional/FormElementTest.php b/tests/src/Functional/FormElementTest.php
index ca840af..2841854 100644
--- a/tests/src/Functional/FormElementTest.php
+++ b/tests/src/Functional/FormElementTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_browser\Functional;
 
+use Drupal\node\NodeInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,7 +23,7 @@ class FormElementTest extends BrowserTestBase {
   /**
    * Test nodes.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $nodes;
 
@@ -34,7 +35,7 @@ class FormElementTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->container
       ->get('entity_type.manager')
diff --git a/tests/src/FunctionalJavascript/CardinalityTest.php b/tests/src/FunctionalJavascript/CardinalityTest.php
index 59ef388..e8a9352 100644
--- a/tests/src/FunctionalJavascript/CardinalityTest.php
+++ b/tests/src/FunctionalJavascript/CardinalityTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\user\RoleInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\field\Entity\FieldConfig;
@@ -32,10 +35,10 @@ class CardinalityTest extends EntityBrowserWebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load('authenticated');
     $this->grantPermissions($role, [
       'access cardinality entity browser pages',
@@ -80,7 +83,7 @@ class CardinalityTest extends EntityBrowserWebDriverTestBase {
     ]);
     $field->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ -282,7 +285,7 @@ class CardinalityTest extends EntityBrowserWebDriverTestBase {
    */
   public function testInlineEntityForm() {
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.ief_content.default');
@@ -363,7 +366,7 @@ class CardinalityTest extends EntityBrowserWebDriverTestBase {
   /**
    * Helper function for repetitive task.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function openIframe() {
     $open_iframe_link = $this->assertSession()
diff --git a/tests/src/FunctionalJavascript/ConfigurationTest.php b/tests/src/FunctionalJavascript/ConfigurationTest.php
index a18abaf..fdb25d2 100644
--- a/tests/src/FunctionalJavascript/ConfigurationTest.php
+++ b/tests/src/FunctionalJavascript/ConfigurationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
 use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 
@@ -33,7 +34,7 @@ class ConfigurationTest extends WebDriverTestBase {
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -45,7 +46,7 @@ class ConfigurationTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('local_actions_block');
@@ -81,7 +82,7 @@ class ConfigurationTest extends WebDriverTestBase {
     $this->assertSession()->fieldExists('display_configuration[link_text]')->setValue('Select some entities');
     $this->assertSession()->selectExists('widget_selector')->selectOption('tabs');
     $this->assertSession()->selectExists('selection_display')->selectOption('no_display');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been added. Now you may configure the widgets you would like to use.');
 
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/widgets');
@@ -112,7 +113,7 @@ class ConfigurationTest extends WebDriverTestBase {
     $this->assertSession()->fieldExists('display_configuration[width]')->setValue('100');
     $this->assertSession()->fieldExists('display_configuration[height]')->setValue('100');
     $this->assertSession()->fieldExists('display_configuration[link_text]')->setValue('All animals are created equal');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/edit');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been updated.');
 
@@ -137,7 +138,7 @@ class ConfigurationTest extends WebDriverTestBase {
     $this->assertSession()->selectExists('display')->selectOption('standalone');
     $this->assertSession()->assertWaitOnAjaxRequest();
     $this->assertSession()->fieldExists('display_configuration[path]')->setValue('/all-animals');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/edit');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been updated.');
     $this->clickLink('General Settings');
@@ -155,10 +156,10 @@ class ConfigurationTest extends WebDriverTestBase {
 
     // Test validation of leading forward slash.
     $this->assertSession()->fieldExists('display_configuration[path]')->setValue('no-forward-slash');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->responseContains('The Path field must begin with a forward slash.');
     $this->assertSession()->fieldExists('display_configuration[path]')->setValue('/all-animals');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been updated.');
     $this->getSession()->executeScript("jQuery('details').attr('open', 'open');");
 
@@ -229,7 +230,7 @@ class ConfigurationTest extends WebDriverTestBase {
     $this->getSession()->executeScript("jQuery('.visually-hidden').removeClass('visually-hidden');");
     $this->assertSession()->fieldExists('name')->setValue('test_entity_browser');
     // Use defaults and save to go to WidgetsConfig form.
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/widgets');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been added. Now you may configure the widgets you would like to use.');
     $widgetSelect = $this->assertSession()->selectExists('widget');
@@ -251,7 +252,7 @@ class ConfigurationTest extends WebDriverTestBase {
     $this->assertSession()->assertWaitOnAjaxRequest();
     $this->assertSession()->selectExists("table[$uuid][form][bundle][select]")->selectOption('foo');
     $this->assertSession()->selectExists("table[$uuid][form][form_mode][form_select]");
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/widgets');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been updated.');
 
@@ -282,7 +283,7 @@ class ConfigurationTest extends WebDriverTestBase {
     $this->assertSession()->fieldExists("table[$uuid][form][submit_text]");
     $this->assertSession()->fieldExists("table[$uuid][form][auto_select]")->check();
     $this->assertSession()->selectExists("table[$uuid][form][view]")->selectOption('nodes_entity_browser.entity_browser_1');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/widgets');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been updated.');
 
@@ -315,7 +316,7 @@ class ConfigurationTest extends WebDriverTestBase {
     $this->assertSession()->fieldExists("table[$uuid][form][multiple]");
     $this->assertSession()->fieldExists("table[$uuid][form][upload_location]");
     $this->assertSession()->elementExists('css', 'a.token-dialog.use-ajax');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/widgets');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been updated.');
 
diff --git a/tests/src/FunctionalJavascript/EntityBrowserTest.php b/tests/src/FunctionalJavascript/EntityBrowserTest.php
index e32d35d..7d77e2f 100644
--- a/tests/src/FunctionalJavascript/EntityBrowserTest.php
+++ b/tests/src/FunctionalJavascript/EntityBrowserTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\entity_browser\EntityBrowserInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Field\FieldConfigInterface;
 /**
  * Tests the entity_browser.
  *
@@ -15,7 +18,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
   public function testSingleWidgetSelector() {
 
     // Sets the single widget selector.
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_file');
@@ -126,7 +129,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
   public function testTabsWidgetSelector() {
 
     // Sets the tabs widget selector.
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_file')
@@ -205,7 +208,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
   public function testDropdownWidgetSelector() {
 
     // Sets the dropdown widget selector.
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_file')
@@ -281,7 +284,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
   public function testViewsSelectionDisplayWidget() {
 
     // Sets the dropdown widget selector.
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_file')
@@ -296,7 +299,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
    * Tests NoDisplay selection display plugin.
    */
   public function testNoDisplaySelectionDisplay() {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ -343,7 +346,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
     $this->createNode(['type' => 'jet', 'title' => 'Leia']);
     $this->createNode(['type' => 'article', 'title' => 'Darth']);
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ -357,7 +360,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
       ],
     ])->save();
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.article.field_reference');
@@ -397,7 +400,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
     $this->assertSession()->pageTextContains('Leia');
     $this->assertSession()->pageTextNotContains('Darth');
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.article.field_reference');
@@ -431,7 +434,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
     $this->createNode(['type' => 'jet', 'title' => 'Leia']);
     $this->createNode(['type' => 'article', 'title' => 'Darth']);
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ -445,7 +448,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
       ],
     ])->save();
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.article.field_reference');
@@ -485,7 +488,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
     $this->assertSession()->pageTextContains('Leia');
     $this->assertSession()->pageTextNotContains('Darth');
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.article.field_reference');
@@ -522,7 +525,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
     $this->createNode(['type' => 'jet', 'title' => 'Leia']);
     $this->createNode(['type' => 'article', 'title' => 'Darth']);
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ -536,7 +539,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
       ],
     ])->save();
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.article.field_reference');
@@ -604,7 +607,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
     $this->assertSession()->pageTextContains('Leia');
     $this->assertSession()->pageTextNotContains('Darth');
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.article.field_reference');
diff --git a/tests/src/FunctionalJavascript/EntityBrowserViewsWidgetTest.php b/tests/src/FunctionalJavascript/EntityBrowserViewsWidgetTest.php
index 23f2297..3da5a88 100644
--- a/tests/src/FunctionalJavascript/EntityBrowserViewsWidgetTest.php
+++ b/tests/src/FunctionalJavascript/EntityBrowserViewsWidgetTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\file\FileInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\file\Entity\File;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
@@ -30,7 +32,7 @@ class EntityBrowserViewsWidgetTest extends EntityBrowserWebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $user = $this->drupalCreateUser([
@@ -47,7 +49,7 @@ class EntityBrowserViewsWidgetTest extends EntityBrowserWebDriverTestBase {
   public function testViewsWidget() {
     // Create a file so that our test View isn't empty.
     \Drupal::service('file_system')->copy(\Drupal::root() . '/core/misc/druplicon.png', 'public://example.jpg');
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = File::create([
       'uri' => 'public://example.jpg',
     ]);
@@ -88,7 +90,7 @@ class EntityBrowserViewsWidgetTest extends EntityBrowserWebDriverTestBase {
 
     // Create another file to test bulk select form.
     \Drupal::service('file_system')->copy(\Drupal::root() . '/core/misc/druplicon.png', 'public://example_1.jpg');
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $new_file = File::create([
       'uri' => 'public://example_1.jpg',
     ]);
@@ -138,7 +140,7 @@ class EntityBrowserViewsWidgetTest extends EntityBrowserWebDriverTestBase {
     ]);
     $field->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
diff --git a/tests/src/FunctionalJavascript/EntityBrowserWebDriverTestBase.php b/tests/src/FunctionalJavascript/EntityBrowserWebDriverTestBase.php
index bd40f3e..0eabd0d 100644
--- a/tests/src/FunctionalJavascript/EntityBrowserWebDriverTestBase.php
+++ b/tests/src/FunctionalJavascript/EntityBrowserWebDriverTestBase.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\file\FileInterface;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\file\Entity\File;
@@ -56,7 +61,7 @@ abstract class EntityBrowserWebDriverTestBase extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     FieldStorageConfig::create([
@@ -77,7 +82,7 @@ abstract class EntityBrowserWebDriverTestBase extends WebDriverTestBase {
       'settings' => [],
     ])->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ -117,15 +122,15 @@ abstract class EntityBrowserWebDriverTestBase extends WebDriverTestBase {
    * @param array $widget_configurations
    *   Widget configurations. Have be provided with widget UUIDs.
    *
-   * @return \Drupal\entity_browser\EntityBrowserInterface
+   * @return EntityBrowserInterface
    *   Returns an Entity Browser.
    */
   protected function getEntityBrowser($browser_name, $display_id, $widget_selector_id, $selection_display_id, array $display_configuration = [], array $widget_selector_configuration = [], array $selection_display_configuration = [], array $widget_configurations = []) {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser');
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $storage->load($browser_name) ?: $storage->create(['name' => $browser_name]);
 
     $browser->setDisplay($display_id);
@@ -169,7 +174,7 @@ abstract class EntityBrowserWebDriverTestBase extends WebDriverTestBase {
    * @param string $extension
    *   File extension.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   Returns an image.
    */
   protected function createFile($name, $extension = 'jpg') {
@@ -195,7 +200,7 @@ abstract class EntityBrowserWebDriverTestBase extends WebDriverTestBase {
   /**
    * Drag element in document with defined offset position.
    *
-   * @param \Behat\Mink\Element\NodeElement $element
+   * @param NodeElement $element
    *   Element that will be dragged.
    * @param int $offsetX
    *   Vertical offset for element drag in pixels.
@@ -239,10 +244,10 @@ abstract class EntityBrowserWebDriverTestBase extends WebDriverTestBase {
    * @param string $value
    *   The string value of the radio element.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The radio input form element.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function assertRadioExistsByValue($value) {
     $value = (string) $value;
@@ -256,10 +261,10 @@ abstract class EntityBrowserWebDriverTestBase extends WebDriverTestBase {
    * @param string $value
    *   The string value of the radio element.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The radio input form element.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function assertRadioNotExistsByValue($value) {
     $value = (string) $value;
@@ -273,10 +278,10 @@ abstract class EntityBrowserWebDriverTestBase extends WebDriverTestBase {
    * @param string $value
    *   The string value of the radio element.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The radio input form element.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function assertCheckboxExistsByValue($value) {
     $value = (string) $value;
@@ -290,10 +295,10 @@ abstract class EntityBrowserWebDriverTestBase extends WebDriverTestBase {
    * @param string $value
    *   The string value of the radio element.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The radio input form element.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function assertCheckboxNotExistsByValue($value) {
     $value = (string) $value;
diff --git a/tests/src/FunctionalJavascript/EntityEmbedTest.php b/tests/src/FunctionalJavascript/EntityEmbedTest.php
index 5bdbb40..f5c96d9 100644
--- a/tests/src/FunctionalJavascript/EntityEmbedTest.php
+++ b/tests/src/FunctionalJavascript/EntityEmbedTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 
 /**
@@ -29,7 +30,7 @@ class EntityEmbedTest extends WebDriverTestBase {
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -41,7 +42,7 @@ class EntityEmbedTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([
diff --git a/tests/src/FunctionalJavascript/EntityQueueTest.php b/tests/src/FunctionalJavascript/EntityQueueTest.php
index 88bca00..ff26830 100644
--- a/tests/src/FunctionalJavascript/EntityQueueTest.php
+++ b/tests/src/FunctionalJavascript/EntityQueueTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
 use Drupal\entityqueue\Entity\EntitySubqueue;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 
@@ -29,7 +30,7 @@ class EntityQueueTest extends WebDriverTestBase {
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -41,7 +42,7 @@ class EntityQueueTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([
diff --git a/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php b/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php
index 9129e09..3bc21ce 100644
--- a/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php
+++ b/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\user\RoleInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\field\Entity\FieldConfig;
@@ -19,10 +22,10 @@ class EntityReferenceWidgetTest extends EntityBrowserWebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load('authenticated');
     $this->grantPermissions($role, [
       'access test_entity_browser_iframe_node_view entity browser pages',
@@ -59,7 +62,7 @@ class EntityReferenceWidgetTest extends EntityBrowserWebDriverTestBase {
     ]);
     $field->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ -196,7 +199,7 @@ class EntityReferenceWidgetTest extends EntityBrowserWebDriverTestBase {
     ])->save();
     // In order to ensure the replace button opens the browser, it needs to be
     // closed.
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_iframe_node_view');
@@ -317,7 +320,7 @@ class EntityReferenceWidgetTest extends EntityBrowserWebDriverTestBase {
 
     // Verify that if the user cannot edit the entity, the "Edit" button does
     // not show up, even if configured to.
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load('authenticated');
     $role->revokePermission('bypass node access')->trustData()->save();
     $this->drupalGet('node/add/article');
@@ -393,7 +396,7 @@ class EntityReferenceWidgetTest extends EntityBrowserWebDriverTestBase {
     $field2 = FieldConfig::create($field2_config);
     $field2->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
diff --git a/tests/src/FunctionalJavascript/FieldWidgetConfigTest.php b/tests/src/FunctionalJavascript/FieldWidgetConfigTest.php
index d1dd9d8..e4c4f96 100644
--- a/tests/src/FunctionalJavascript/FieldWidgetConfigTest.php
+++ b/tests/src/FunctionalJavascript/FieldWidgetConfigTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\field\Entity\FieldConfig;
@@ -42,14 +44,14 @@ class FieldWidgetConfigTest extends WebDriverTestBase {
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('local_actions_block');
@@ -100,7 +102,7 @@ class FieldWidgetConfigTest extends WebDriverTestBase {
     ]);
     $field->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
diff --git a/tests/src/FunctionalJavascript/ImageFieldTest.php b/tests/src/FunctionalJavascript/ImageFieldTest.php
index 03cd9e1..177a195 100644
--- a/tests/src/FunctionalJavascript/ImageFieldTest.php
+++ b/tests/src/FunctionalJavascript/ImageFieldTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\field\Entity\FieldConfig;
@@ -22,14 +24,14 @@ class ImageFieldTest extends EntityBrowserWebDriverTestBase {
   /**
    * Created file entity.
    *
-   * @var \Drupal\file\Entity\File
+   * @var File
    */
   protected $image;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     FieldStorageConfig::create([
@@ -69,7 +71,7 @@ class ImageFieldTest extends EntityBrowserWebDriverTestBase {
     // this file on node save.
     \Drupal::service('file.usage')->add($this->image, 'entity_browser', 'test', '1');
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ -93,7 +95,7 @@ class ImageFieldTest extends EntityBrowserWebDriverTestBase {
       'height' => '500',
       'link_text' => 'Select images',
     ];
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_iframe_view');
@@ -248,10 +250,10 @@ class ImageFieldTest extends EntityBrowserWebDriverTestBase {
     $this->waitForAjaxToFinish();
     $entity_id = $this->getSession()->evaluateScript('jQuery("#edit-field-image-wrapper [data-entity-id]").data("entity-id")');
     $this->assertStringStartsWith('file:', $entity_id);
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $fid = explode(':', $entity_id)[1];
     $file = File::load($fid);
-    $this->assertContains('entity-browser-test', $file->getFileUri());
+    $this->assertStringContainsString('entity-browser-test', $file->getFileUri());
   }
 
 }
diff --git a/tests/src/FunctionalJavascript/InlineEntityFormTest.php b/tests/src/FunctionalJavascript/InlineEntityFormTest.php
index c2f3635..a2c92d4 100644
--- a/tests/src/FunctionalJavascript/InlineEntityFormTest.php
+++ b/tests/src/FunctionalJavascript/InlineEntityFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\Core\Field\FieldConfigInterface;
 /**
  * Test for integration of entity browser and inline entity form.
  *
@@ -254,7 +255,7 @@ class InlineEntityFormTest extends EntityBrowserWebDriverTestBase {
     $this->assertSession()->pageTextContains('Leia');
     $this->assertSession()->pageTextNotContains('Darth');
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.ief_content.field_nodes');
@@ -337,7 +338,7 @@ class InlineEntityFormTest extends EntityBrowserWebDriverTestBase {
     $this->assertSession()->pageTextContains('Leia');
     $this->assertSession()->pageTextNotContains('Darth');
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.ief_content.field_nodes');
@@ -407,8 +408,8 @@ class InlineEntityFormTest extends EntityBrowserWebDriverTestBase {
 
     $ief_table = $this->assertSession()->elementExists('xpath', '//table[contains(@id, "ief-entity-table-edit-field-nodes-entities")]');
     $table_text = $ief_table->getText();
-    $this->assertContains('Boxer', $table_text);
-    $this->assertContains('Napoleon', $table_text);
+    $this->assertStringContainsString('Boxer', $table_text);
+    $this->assertStringContainsString('Napoleon', $table_text);
   }
 
 }
diff --git a/tests/src/FunctionalJavascript/MultiStepSelectionDisplayTest.php b/tests/src/FunctionalJavascript/MultiStepSelectionDisplayTest.php
index 9f3162c..ad1ad81 100644
--- a/tests/src/FunctionalJavascript/MultiStepSelectionDisplayTest.php
+++ b/tests/src/FunctionalJavascript/MultiStepSelectionDisplayTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Component\Utility\NestedArray;
 
 /**
@@ -67,7 +68,7 @@ class MultiStepSelectionDisplayTest extends EntityBrowserWebDriverTestBase {
    *   Configuration that will be used for field form display.
    */
   protected function changeFieldFormDisplayConfig(array $configuration) {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
diff --git a/tests/src/FunctionalJavascript/PagerElementTest.php b/tests/src/FunctionalJavascript/PagerElementTest.php
index 2569846..a9c8861 100644
--- a/tests/src/FunctionalJavascript/PagerElementTest.php
+++ b/tests/src/FunctionalJavascript/PagerElementTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -29,7 +30,7 @@ class PagerElementTest extends EntityBrowserWebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'foo', 'name' => 'Foo']);
@@ -52,7 +53,7 @@ class PagerElementTest extends EntityBrowserWebDriverTestBase {
       'settings' => [],
     ])->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.foo.default');
diff --git a/tests/src/FunctionalJavascript/PluginsTest.php b/tests/src/FunctionalJavascript/PluginsTest.php
index 1c8155d..39f6c11 100644
--- a/tests/src/FunctionalJavascript/PluginsTest.php
+++ b/tests/src/FunctionalJavascript/PluginsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\views\Entity\View;
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\Sql\SqlContentEntityStorageException;
 
 /**
@@ -85,7 +87,7 @@ class PluginsTest extends EntityBrowserWebDriverTestBase {
     // DropDown widget selector does not work with exposed view filter. This is
     // a known bug and we need to remove exposed filters from the view until
     // that is fixed.
-    /** @var \Drupal\views\Entity\View $view */
+    /** @var View $view */
     $view = $this->container->get('entity_type.manager')->getStorage('view')->load('files_entity_browser');
     $display = &$view->getDisplay('default');
     $display['display_options']['filters'] = [];
@@ -232,10 +234,10 @@ class PluginsTest extends EntityBrowserWebDriverTestBase {
   /**
    * Get the most recently uploaded file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   File entity.
    *
-   * @throws \Drupal\Core\Entity\Sql\SqlContentEntityStorageException
+   * @throws SqlContentEntityStorageException
    *   Thrown if no results from query.
    */
   protected function getLastUploadedFile() {
diff --git a/tests/src/FunctionalJavascript/UploadWidgetTest.php b/tests/src/FunctionalJavascript/UploadWidgetTest.php
index 6bf0585..9c7336c 100644
--- a/tests/src/FunctionalJavascript/UploadWidgetTest.php
+++ b/tests/src/FunctionalJavascript/UploadWidgetTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\user\RoleInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\user\Entity\Role;
 
 /**
@@ -14,11 +16,11 @@ class UploadWidgetTest extends EntityBrowserWebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Grant permission to this user to use also the EB page we are testing.
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load('authenticated');
     $this->grantPermissions($role, ['access test_entity_browser_standalone_upload entity browser pages']);
 
@@ -29,7 +31,7 @@ class UploadWidgetTest extends EntityBrowserWebDriverTestBase {
    */
   public function testUploadWidget() {
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_standalone_upload');
@@ -37,7 +39,7 @@ class UploadWidgetTest extends EntityBrowserWebDriverTestBase {
     $page = $this->getSession()->getPage();
 
     // Make sure the test file is not present beforehand.
-    $this->assertFileNotExists('public://druplicon.png');
+    $this->assertFileDoesNotExist('public://druplicon.png');
 
     // Go to the widget standalone page and test the upload.
     $this->drupalGet($browser->getDisplay()->path());
diff --git a/tests/src/Kernel/Extension/EntityBrowserTest.php b/tests/src/Kernel/Extension/EntityBrowserTest.php
index fbc4d10..1353428 100644
--- a/tests/src/Kernel/Extension/EntityBrowserTest.php
+++ b/tests/src/Kernel/Extension/EntityBrowserTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\entity_browser\Kernel\Extension;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Routing\RouteProviderInterface;
+use Drupal\entity_browser\EntityBrowserFormInterface;
+use Drupal\user\UserInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\user\RoleInterface;
 use Drupal\Component\FileCache\FileCacheFactory;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
@@ -40,7 +46,7 @@ class EntityBrowserTest extends KernelTestBase {
   /**
    * The entity browser storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $controller;
 
@@ -54,14 +60,14 @@ class EntityBrowserTest extends KernelTestBase {
   /**
    * Route provider service.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     FileCacheFactory::setPrefix($this->randomString(4));
     parent::setUp();
 
@@ -127,7 +133,7 @@ class EntityBrowserTest extends KernelTestBase {
         $this->fail('An entity browser without required ' . $plugin_type . ' created with no exception thrown.');
       }
       catch (PluginException $e) {
-        $this->assertContains('The "" plugin does not exist.', $e->getMessage(), 'An exception was thrown when an entity_browser was created without a ' . $plugin_type . ' plugin.');
+        $this->assertStringContainsString('The "" plugin does not exist.', $e->getMessage(), 'An exception was thrown when an entity_browser was created without a ' . $plugin_type . ' plugin.');
       }
     }
 
@@ -200,7 +206,7 @@ class EntityBrowserTest extends KernelTestBase {
    * Tests the loading of entity browser.
    */
   protected function loadTests() {
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test_browser');
 
     $this->assertTrue($entity instanceof EntityBrowserInterface, 'The loaded entity is an entity browser.');
@@ -248,7 +254,7 @@ class EntityBrowserTest extends KernelTestBase {
     $this->installConfig(['entity_browser_test']);
     $this->container->get('router.builder')->rebuild();
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test');
     $route = $entity->route();
 
@@ -280,7 +286,7 @@ class EntityBrowserTest extends KernelTestBase {
     $this->installConfig(['entity_browser_test']);
     $permissions = $this->container->get('user.permissions')->getPermissions();
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test');
 
     $expected_permission_name = 'access ' . $entity->id() . ' entity browser pages';
@@ -305,10 +311,10 @@ class EntityBrowserTest extends KernelTestBase {
   public function testDefaultWidget() {
     $this->installConfig(['entity_browser_test']);
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test');
 
-    /** @var \Drupal\entity_browser\EntityBrowserFormInterface $form_object */
+    /** @var EntityBrowserFormInterface $form_object */
     $form_object = $entity->getFormObject();
     $form_object->setEntityBrowser($entity);
     $form_state = new FormState();
@@ -333,10 +339,10 @@ class EntityBrowserTest extends KernelTestBase {
   public function testSelectedEvent() {
     $this->installConfig(['entity_browser_test']);
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('dummy_widget');
 
-    /** @var \Drupal\entity_browser\EntityBrowserFormInterface $form_object */
+    /** @var EntityBrowserFormInterface $form_object */
     $form_object = $entity->getFormObject();
     $form_object->setEntityBrowser($entity);
 
@@ -367,10 +373,10 @@ class EntityBrowserTest extends KernelTestBase {
     $this->installConfig(['entity_browser_test']);
     $this->installEntitySchema('user');
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test');
 
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->container->get('entity_type.manager')
       ->getStorage('user')
       ->create([
@@ -379,7 +385,7 @@ class EntityBrowserTest extends KernelTestBase {
       ]);
     $user->save();
 
-    /** @var \Symfony\Component\HttpFoundation\Request $request */
+    /** @var Request $request */
     $uuid = $this->container->get('uuid')->generate();
     $this->container->get('request_stack')
       ->getCurrentRequest()
@@ -387,7 +393,7 @@ class EntityBrowserTest extends KernelTestBase {
       ->set('uuid', $uuid);
     $this->container->get('entity_browser.selection_storage')->setWithExpire($uuid, ['selected_entities' => [$user]], 21600);
 
-    /** @var \Drupal\entity_browser\EntityBrowserFormInterface $form_object */
+    /** @var EntityBrowserFormInterface $form_object */
     $form_object = $entity->getFormObject();
     $form_object->setEntityBrowser($entity);
     $form_state = new FormState();
@@ -411,10 +417,10 @@ class EntityBrowserTest extends KernelTestBase {
     $this->installConfig(['entity_browser_test']);
     $this->installEntitySchema('user');
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test');
 
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->container->get('entity_type.manager')
       ->getStorage('user')
       ->create([
@@ -423,7 +429,7 @@ class EntityBrowserTest extends KernelTestBase {
       ]);
     $user->save();
 
-    /** @var \Symfony\Component\HttpFoundation\Request $request */
+    /** @var Request $request */
     $uuid = $this->container->get('uuid')->generate();
     $this->container->get('request_stack')
       ->getCurrentRequest()
@@ -437,7 +443,7 @@ class EntityBrowserTest extends KernelTestBase {
     ];
     $this->container->get('entity_browser.selection_storage')->setWithExpire($uuid, $storage, 21600);
 
-    /** @var \Drupal\entity_browser\EntityBrowserFormInterface $form_object */
+    /** @var EntityBrowserFormInterface $form_object */
     $form_object = $entity->getFormObject();
     $form_object->setEntityBrowser($entity);
     $form_state = new FormState();
@@ -475,13 +481,13 @@ class EntityBrowserTest extends KernelTestBase {
     $this->installEntitySchema('user');
     $this->installEntitySchema('user_role');
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test_entity_browser_file');
 
     $this->assertFalse($entity->getWidget('774798f1-5ec5-4b63-84bd-124cd51ec07d')->access()->isAllowed());
 
     // Create a user that has permission to access the view and try with it.
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = $this->container->get('entity_type.manager')
       ->getStorage('user_role')
       ->create([
diff --git a/tests/src/Kernel/Plugin/FieldWidgetDisplayTest.php b/tests/src/Kernel/Plugin/FieldWidgetDisplayTest.php
index 604041a..ce29c2b 100644
--- a/tests/src/Kernel/Plugin/FieldWidgetDisplayTest.php
+++ b/tests/src/Kernel/Plugin/FieldWidgetDisplayTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_browser\Kernel\Plugin;
 
+use Drupal\entity_browser\FieldWidgetDisplayManager;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -23,14 +24,14 @@ class FieldWidgetDisplayTest extends KernelTestBase {
   /**
    * Field widget display plugin manager.
    *
-   * @var \Drupal\entity_browser\FieldWidgetDisplayManager
+   * @var FieldWidgetDisplayManager
    */
   protected $pluginManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->pluginManager = $this->container->get('plugin.manager.entity_browser.field_widget_display');
