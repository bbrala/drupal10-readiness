diff --git a/modules/mustache_magic/mustache_magic.module b/modules/mustache_magic/mustache_magic.module
index e0cf8e8..aed15de 100644
--- a/modules/mustache_magic/mustache_magic.module
+++ b/modules/mustache_magic/mustache_magic.module
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\mustache_magic\Storage\MustacheTemplateStorage;
 /**
  * @file
  * The mustache_magic module file.
  */
-
 /**
  * Implements hook_mustache_templates().
  */
@@ -15,7 +15,7 @@ function mustache_magic_mustache_templates() {
     'mustache_magic_js' => ['file' => $path . 'magic-js.mustache.tpl'],
     'mustache_magic_css' => ['file' => $path . 'magic-css.mustache.tpl'],
   ];
-  /** @var \Drupal\mustache_magic\Storage\MustacheTemplateStorage $template_storage */
+  /** @var MustacheTemplateStorage $template_storage */
   $template_storage = \Drupal::service('mustache.template_storage');
   foreach ($template_storage->getAll() as $hash => $template) {
     $templates[$template['name']]['file'] = 'mustache-template://magic/' . $hash;
diff --git a/modules/mustache_magic/src/Controller/ProxySyncController.php b/modules/mustache_magic/src/Controller/ProxySyncController.php
index 3f8deee..7c98b07 100644
--- a/modules/mustache_magic/src/Controller/ProxySyncController.php
+++ b/modules/mustache_magic/src/Controller/ProxySyncController.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\mustache_magic\Controller;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\mustache_magic\Storage\MustacheSyncStorage;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityRepositoryInterface;
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -27,49 +33,49 @@ class ProxySyncController implements ContainerInjectionInterface {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The sync storage.
    *
-   * @var \Drupal\mustache_magic\Storage\MustacheSyncStorage
+   * @var MustacheSyncStorage
    */
   protected $syncStorage;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface|null
+   * @var MessengerInterface|null
    */
   protected $messenger;
 
@@ -108,7 +114,7 @@ class ProxySyncController implements ContainerInjectionInterface {
   /**
    * Controller method to get a synchronized template.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The given request.
    *
    * @return \Symfony\Component\HttpFoundation
diff --git a/modules/mustache_magic/src/Plugin/mustache/Magic/Javascript.php b/modules/mustache_magic/src/Plugin/mustache/Magic/Javascript.php
index 3134616..df5e9a4 100644
--- a/modules/mustache_magic/src/Plugin/mustache/Magic/Javascript.php
+++ b/modules/mustache_magic/src/Plugin/mustache/Magic/Javascript.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache_magic\Plugin\mustache\Magic;
 
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\RenderContext;
@@ -56,7 +57,7 @@ class Javascript extends Template {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -85,7 +86,7 @@ class Javascript extends Template {
     }
 
     if (!isset($this->templateName)) {
-      return $render($template_content);
+      return \Drupal::service('renderer')->render($template_content);
     }
 
     $renderer = $this->renderer;
diff --git a/modules/mustache_magic/src/Plugin/mustache/Magic/Library.php b/modules/mustache_magic/src/Plugin/mustache/Magic/Library.php
index 499ad7b..8eae5fd 100644
--- a/modules/mustache_magic/src/Plugin/mustache/Magic/Library.php
+++ b/modules/mustache_magic/src/Plugin/mustache/Magic/Library.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache_magic\Plugin\mustache\Magic;
 
+use Drupal\Core\Asset\LibraryDiscoveryInterface;
 use Drupal\mustache\Plugin\MustacheMagic;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -55,7 +56,7 @@ class Library extends MustacheMagic {
   /**
    * The library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;
 
@@ -112,7 +113,7 @@ class Library extends MustacheMagic {
         }
       }
     }
-    return $render($template_content);
+    return \Drupal::service('renderer')->render($template_content);
   }
 
 }
diff --git a/modules/mustache_magic/src/Plugin/mustache/Magic/Message.php b/modules/mustache_magic/src/Plugin/mustache/Magic/Message.php
index 99772de..9596a7a 100644
--- a/modules/mustache_magic/src/Plugin/mustache/Magic/Message.php
+++ b/modules/mustache_magic/src/Plugin/mustache/Magic/Message.php
@@ -103,7 +103,7 @@ class Message extends MustacheMagic {
 
     $this->attachLibrary();
     $this->element['#cache']['max-age'] = 0;
-    $rendered = trim($render($template_content));
+    $rendered = trim(\Drupal::service('renderer')->render($template_content));
     if (!empty($rendered)) {
       $this->messenger->addMessage($rendered, static::$messageTypes[$this->messageType]);
     }
diff --git a/modules/mustache_magic/src/Plugin/mustache/Magic/Sync.php b/modules/mustache_magic/src/Plugin/mustache/Magic/Sync.php
index 0b155a2..a8f5a18 100644
--- a/modules/mustache_magic/src/Plugin/mustache/Magic/Sync.php
+++ b/modules/mustache_magic/src/Plugin/mustache/Magic/Sync.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\mustache_magic\Plugin\mustache\Magic;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\mustache_magic\Storage\MustacheSyncStorage;
+use Drupal\mustache\MustacheTokenProcessor;
+use Drupal\mustache_magic\Storage\MustacheTemplateStorage;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Render\BubbleableMetadata;
@@ -57,14 +61,14 @@ class Sync extends MustacheMagic {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The sync storage.
    *
-   * @var \Drupal\mustache_magic\Storage\MustacheSyncStorage
+   * @var MustacheSyncStorage
    */
   protected $syncStorage;
 
@@ -384,7 +388,7 @@ class Sync extends MustacheMagic {
     $url_exists = !empty($url) && ($url = Mustache::getUrlFromParam($url));
 
     if (!$url_exists) {
-      $build->withPlaceholder(['#markup' => Markup::create($render($template_content))]);
+      $build->withPlaceholder(['#markup' => Markup::create(\Drupal::service('renderer')->render($template_content))]);
     }
     elseif (empty($data)) {
       $build->usingDataFromUrl($url);
@@ -412,7 +416,7 @@ class Sync extends MustacheMagic {
 
       if (!empty($this->element['#with_tokens'])) {
         $server_side_render['#with_tokens'] = $this->element['#with_tokens'];
-        /** @var \Drupal\mustache\MustacheTokenProcessor $token_processor */
+        /** @var MustacheTokenProcessor $token_processor */
         $token_processor = \Drupal::service('mustache.token_processor');
         $tokenized = $token_processor->tokenizeTemplate($template_hash, $template_content);
         if (!empty($tokenized['tokens'])) {
@@ -488,7 +492,7 @@ class Sync extends MustacheMagic {
         $summable = \Drupal::service('mustache.summables')->isEnabled();
       }
       $template_name = $template_name ?? $template_hash;
-      /** @var \Drupal\mustache_magic\Storage\MustacheTemplateStorage $template_storage */
+      /** @var MustacheTemplateStorage $template_storage */
       $template_storage = \Drupal::service('mustache.template_storage');
       $template_values = [
         'name' => $template_name,
diff --git a/modules/mustache_magic/src/Plugin/mustache/Magic/Template.php b/modules/mustache_magic/src/Plugin/mustache/Magic/Template.php
index 248ae57..41ada52 100644
--- a/modules/mustache_magic/src/Plugin/mustache/Magic/Template.php
+++ b/modules/mustache_magic/src/Plugin/mustache/Magic/Template.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache_magic\Plugin\mustache\Magic;
 
+use Drupal\mustache_magic\Storage\MustacheTemplateStorage;
 use Drupal\mustache\Plugin\MustacheMagic;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -37,7 +38,7 @@ class Template extends MustacheMagic {
   /**
    * The template storage.
    *
-   * @var \Drupal\mustache_magic\Storage\MustacheTemplateStorage
+   * @var MustacheTemplateStorage
    */
   protected $templateStorage;
 
diff --git a/modules/mustache_magic/src/Storage/ExpirableHashStorageTrait.php b/modules/mustache_magic/src/Storage/ExpirableHashStorageTrait.php
index 614b1a2..53fd390 100644
--- a/modules/mustache_magic/src/Storage/ExpirableHashStorageTrait.php
+++ b/modules/mustache_magic/src/Storage/ExpirableHashStorageTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache_magic\Storage;
 
+use Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface;
 use Drupal\Core\KeyValueStore\KeyValueExpirableFactoryInterface;
 
 /**
@@ -12,7 +13,7 @@ trait ExpirableHashStorageTrait {
   /**
    * The key value store to use.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   public $kv;
 
@@ -49,7 +50,7 @@ trait ExpirableHashStorageTrait {
   /**
    * Constructs a new ExpirableHashStorageTrait object.
    *
-   * @param \Drupal\Core\KeyValueStore\KeyValueExpirableFactoryInterface $key_value_factory
+   * @param KeyValueExpirableFactoryInterface $key_value_factory
    *   The key value store to use.
    */
   public function __construct(KeyValueExpirableFactoryInterface $key_value_factory) {
diff --git a/modules/mustache_magic/src/StreamWrapper/MustacheTemplateStream.php b/modules/mustache_magic/src/StreamWrapper/MustacheTemplateStream.php
index fab86e8..3566582 100644
--- a/modules/mustache_magic/src/StreamWrapper/MustacheTemplateStream.php
+++ b/modules/mustache_magic/src/StreamWrapper/MustacheTemplateStream.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\mustache_magic\StreamWrapper;
 
+use Drupal\mustache\MustacheTemplates;
+use Drupal\mustache_magic\Storage\MustacheTemplateStorage;
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\StreamWrapper\LocalReadOnlyStream;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
@@ -17,28 +21,28 @@ class MustacheTemplateStream extends LocalReadOnlyStream {
   /**
    * The finder of Mustache templates.
    *
-   * @var \Drupal\mustache\MustacheTemplates
+   * @var MustacheTemplates
    */
   protected $templates;
 
   /**
    * The template storage.
    *
-   * @var \Drupal\mustache_magic\Storage\MustacheTemplateStorage
+   * @var MustacheTemplateStorage
    */
   protected $templateStorage;
 
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
@@ -97,7 +101,7 @@ class MustacheTemplateStream extends LocalReadOnlyStream {
           $temp_dir = 'temporary://mustache/magic';
           $temp_file = $temp_dir . '/' . $values_hash . '.mustache.tpl';
           if (!file_exists($temp_file)) {
-            /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+            /** @var FileSystemInterface $file_system */
             $file_system = \Drupal::service('file_system');
             if (!$file_system->prepareDirectory($temp_dir, FileSystemInterface::CREATE_DIRECTORY) || (!file_exists($temp_file) && FALSE === @file_put_contents($temp_file, $template['content']))) {
               $this->logger->error("Failed to write Mustache template into temporary directory.");
@@ -150,7 +154,7 @@ class MustacheTemplateStream extends LocalReadOnlyStream {
   /**
    * Get the templates service.
    *
-   * @return \Drupal\mustache\MustacheTemplates
+   * @return MustacheTemplates
    *   The templates service.
    */
   protected static function getTemplates() {
@@ -160,7 +164,7 @@ class MustacheTemplateStream extends LocalReadOnlyStream {
   /**
    * Get the template storage.
    *
-   * @return \Drupal\mustache_magic\Storage\MustacheTemplateStorage
+   * @return MustacheTemplateStorage
    *   The template storage.
    */
   protected static function getTemplateStorage() {
@@ -170,7 +174,7 @@ class MustacheTemplateStream extends LocalReadOnlyStream {
   /**
    * Get the stream wrapper manager.
    *
-   * @return \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @return StreamWrapperManagerInterface
    *   The stream wrapper manager.
    */
   protected static function getStreamWrapperManager() {
@@ -180,7 +184,7 @@ class MustacheTemplateStream extends LocalReadOnlyStream {
   /**
    * Get the logger channel.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   The logger channel.
    */
   protected static function getLogger() {
diff --git a/modules/mustache_test/src/Controller/MustacheCacheableTestController.php b/modules/mustache_test/src/Controller/MustacheCacheableTestController.php
index e7c5212..9c5fd76 100644
--- a/modules/mustache_test/src/Controller/MustacheCacheableTestController.php
+++ b/modules/mustache_test/src/Controller/MustacheCacheableTestController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache_test\Controller;
 
+use Symfony\Component\HttpFoundation\JsonResponse;
 use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\mustache\Helpers\MustacheRenderTemplate;
 use Drupal\mustache_test\TestLinks;
@@ -14,7 +15,7 @@ class MustacheCacheableTestController {
   /**
    * Returns a Json response containing cacheable dummy data.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A cacheable JSON response.
    */
   public function cacheableJsonFeed() {
diff --git a/modules/mustache_test/src/Controller/MustacheTestController.php b/modules/mustache_test/src/Controller/MustacheTestController.php
index f4aa851..81be957 100644
--- a/modules/mustache_test/src/Controller/MustacheTestController.php
+++ b/modules/mustache_test/src/Controller/MustacheTestController.php
@@ -15,7 +15,7 @@ class MustacheTestController {
   /**
    * Returns a Json response containing dummy data.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    */
   public function jsonFeed() {
@@ -34,7 +34,7 @@ class MustacheTestController {
   /**
    * Returns a response with Javascript code.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A response containing Javascript code.
    */
   public function javascriptProvider() {
diff --git a/modules/mustache_test/src/Controller/MustacheTestFormController.php b/modules/mustache_test/src/Controller/MustacheTestFormController.php
index 652a3f7..37f5137 100644
--- a/modules/mustache_test/src/Controller/MustacheTestFormController.php
+++ b/modules/mustache_test/src/Controller/MustacheTestFormController.php
@@ -16,7 +16,7 @@ class MustacheTestFormController {
   /**
    * Returns a Json response that echoes query parameters in uppercase.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    */
   public function echoFeed(Request $request) {
diff --git a/modules/mustache_test/src/Controller/MustacheTestIncrementController.php b/modules/mustache_test/src/Controller/MustacheTestIncrementController.php
index 290b38b..ca01de5 100644
--- a/modules/mustache_test/src/Controller/MustacheTestIncrementController.php
+++ b/modules/mustache_test/src/Controller/MustacheTestIncrementController.php
@@ -15,10 +15,10 @@ class MustacheTestIncrementController {
   /**
    * Returns an incrementing list as Json feed.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    */
   public function jsonIncrementingListFeed(Request $request) {
diff --git a/modules/mustache_test/src/Controller/MustacheTestListController.php b/modules/mustache_test/src/Controller/MustacheTestListController.php
index 7baeb98..f5ef022 100644
--- a/modules/mustache_test/src/Controller/MustacheTestListController.php
+++ b/modules/mustache_test/src/Controller/MustacheTestListController.php
@@ -16,10 +16,10 @@ class MustacheTestListController {
   /**
    * Returns a list as Json feed.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    */
   public function jsonListFeed(Request $request) {
diff --git a/modules/mustache_test/src/TestLinks.php b/modules/mustache_test/src/TestLinks.php
index 2886e4b..2ded964 100644
--- a/modules/mustache_test/src/TestLinks.php
+++ b/modules/mustache_test/src/TestLinks.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache_test;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\mustache\Render\Markup;
 
 /**
@@ -12,7 +13,7 @@ abstract class TestLinks {
   /**
    * Get a HTML list of test links.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The markup containing test links.
    */
   public static function get() {
diff --git a/modules/mustache_token/mustache_token.tokens.inc b/modules/mustache_token/mustache_token.tokens.inc
index 63cde46..cf0235f 100644
--- a/modules/mustache_token/mustache_token.tokens.inc
+++ b/modules/mustache_token/mustache_token.tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\mustache\MustacheTokenIterate;
 /**
  * @file
  * Builds placeholder replacement tokens for iterating.
@@ -73,7 +74,7 @@ function mustache_token_tokens($type, $tokens, array $data, array $options, Bubb
   $replacements = [];
 
   if ($type == 'iterate') {
-    /** @var \Drupal\mustache\MustacheTokenIterate $token_iterate */
+    /** @var MustacheTokenIterate $token_iterate */
     $token_iterate = \Drupal::service('mustache.token_iterate');
     foreach ($tokens as $name => $original) {
       $token_keys = explode(':', $name);
diff --git a/modules/mustache_token/src/MustacheTokenDecoratorTrait.php b/modules/mustache_token/src/MustacheTokenDecoratorTrait.php
index 1f4c4c2..1478a92 100644
--- a/modules/mustache_token/src/MustacheTokenDecoratorTrait.php
+++ b/modules/mustache_token/src/MustacheTokenDecoratorTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache_token;
 
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Utility\Token;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\RenderContext;
@@ -17,21 +18,21 @@ trait MustacheTokenDecoratorTrait {
   /**
    * The decorated token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The renderer, usually injected via constructor.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Set the token service that is being decorated by this service.
    *
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service to decorate.
    */
   public function setDecoratedToken(Token $token) {
diff --git a/modules/mustache_token/tests/src/Kernel/MustacheTokenTest.php b/modules/mustache_token/tests/src/Kernel/MustacheTokenTest.php
index c598d52..0e592c5 100644
--- a/modules/mustache_token/tests/src/Kernel/MustacheTokenTest.php
+++ b/modules/mustache_token/tests/src/Kernel/MustacheTokenTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\mustache_token\Kernel;
 
+use Drupal\Core\Session\AccountSwitcherInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ -85,7 +86,7 @@ class MustacheTokenTest extends KernelTestBase {
   public function testIterate() {
     $admin_user = User::load(1);
     $token = \Drupal::token();
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     $template = "{{#iterate.loop.user.field_string_single}}START: {{#first}}FIRST {{/first}}{{^first}}NOT-FIRST!:{{/first}}{{position}}. {{.}}{{#last}} - LAST!{{/last}} END{{/iterate.loop.user.field_string_single}}";
@@ -149,7 +150,7 @@ class MustacheTokenTest extends KernelTestBase {
   public function testMagicConditions() {
     $admin_user = User::load(1);
     $token = \Drupal::token();
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
     $account_switcher->switchTo($admin_user);
 
diff --git a/modules/mustache_views/src/MustacheViews.php b/modules/mustache_views/src/MustacheViews.php
index bc34df2..27fe51e 100644
--- a/modules/mustache_views/src/MustacheViews.php
+++ b/modules/mustache_views/src/MustacheViews.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache_views;
 
+use Drupal\Core\Database\Query\Select;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\RenderContext;
@@ -18,14 +19,14 @@ class MustacheViews {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The MustacheViews constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(RendererInterface $renderer) {
@@ -35,7 +36,7 @@ class MustacheViews {
   /**
    * Query alteration that evaluates any Mustache template syntax.
    *
-   * @param \Drupal\Core\Database\Query\AlterableInterface $query
+   * @param AlterableInterface $query
    *   A Query object describing the composite parts of a SQL query.
    */
   public function alterQuery(AlterableInterface $query) {
@@ -75,13 +76,13 @@ class MustacheViews {
   /**
    * Collects templates from the given query.
    *
-   * @param \Drupal\Core\Database\Query\AlterableInterface $query
+   * @param AlterableInterface $query
    *   A Query object describing the composite parts of a SQL query.
    * @param array &$to_evaluate
    *   A list of already collected templates to evaluate.
    */
   protected function collectTemplates(AlterableInterface $query, array &$to_evaluate) {
-    /** @var \Drupal\Core\Database\Query\Select $query */
+    /** @var Select $query */
     $tables = &$query->getTables();
     $conditions = &$query->conditions();
 
@@ -109,7 +110,7 @@ class MustacheViews {
   /**
    * Sub-method to collect templates from conditions.
    *
-   * @param \Drupal\Core\Database\Query\AlterableInterface $query
+   * @param AlterableInterface $query
    *   A Query object describing the composite parts of a SQL query.
    * @param mixed &$conditions
    *   The conditions.
diff --git a/mustache.module b/mustache.module
index 0486478..75a396d 100644
--- a/mustache.module
+++ b/mustache.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\mustache\Summable\SummableScriptsInterface;
 /**
  * @file
  * Mustache Templates module file.
@@ -24,7 +25,7 @@ function mustache_theme($existing, $type, $theme, $path) {
  */
 function mustache_library_info_build() {
   // Rebuild libraries for summable scripts, if enabled.
-  /** @var \Drupal\mustache\Summable\SummableScriptsInterface $summables */
+  /** @var SummableScriptsInterface $summables */
   $summables = \Drupal::service('mustache.summables');
   if ($summables->isEnabled()) {
     return $summables->getAllLibraries();
diff --git a/src/Annotation/MustacheMagic.php b/src/Annotation/MustacheMagic.php
index 7d82276..7453de1 100755
--- a/src/Annotation/MustacheMagic.php
+++ b/src/Annotation/MustacheMagic.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class MustacheMagic extends Plugin {
   /**
    * The human-readable name of the magic variable.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -32,7 +33,7 @@ class MustacheMagic extends Plugin {
   /**
    * The description of the magic variable.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Element/MustacheTemplateJsInline.php b/src/Element/MustacheTemplateJsInline.php
index b3f64dd..533e70d 100644
--- a/src/Element/MustacheTemplateJsInline.php
+++ b/src/Element/MustacheTemplateJsInline.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache\Element;
 
+use Drupal\mustache\MustacheTemplates;
 use Drupal\Core\Render\Element\RenderElement;
 
 /**
@@ -34,7 +35,7 @@ class MustacheTemplateJsInline extends RenderElement {
    *   The element to render.
    */
   public static function generateTemplateContent(array $element) {
-    /** @var \Drupal\mustache\MustacheTemplates $templates */
+    /** @var MustacheTemplates $templates */
     $templates = \Drupal::service('mustache.templates');
 
     $template_name = $element['#template'];
diff --git a/src/Helpers/MustacheRenderTemplate.php b/src/Helpers/MustacheRenderTemplate.php
index ee9f6b8..73858ab 100644
--- a/src/Helpers/MustacheRenderTemplate.php
+++ b/src/Helpers/MustacheRenderTemplate.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache\Helpers;
 
+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\mustache\Exception\MustacheException;
 
@@ -88,7 +89,7 @@ class MustacheRenderTemplate {
   /**
    * Define the url from where to receive Json-encoded data.
    *
-   * @param \Drupal\Core\Url|string $url
+   * @param Url|string $url
    *   The url as object or string.
    * @param array|null $select
    *   (Optional) The array holding the keys for nested data selection.
@@ -230,7 +231,7 @@ class MustacheRenderTemplate {
    * disabled, or the relevant arguments may be attached to the redirect url,
    * then extracted and (manually) passed to the data array.
    *
-   * @param \Drupal\Core\Form\FormStateInterface|array $form_state_or_array
+   * @param FormStateInterface|array $form_state_or_array
    *   The form state or an associative array with a 'values' key, which is an
    *   associative array of submitted form values. When using an array and
    *   client synchronization, optionally set a 'selector' key that will be used
@@ -347,7 +348,7 @@ final class SynchronizationOptions {
   /**
    * Define the url from where to receive Json-encoded data.
    *
-   * @param \Drupal\Core\Url|string $url
+   * @param Url|string $url
    *   The url as object or string.
    * @param array|null $select
    *   (Optional) The array holding the keys for nested data selection.
diff --git a/src/Magic/LazyMagic.php b/src/Magic/LazyMagic.php
index 5e4384d..3752264 100644
--- a/src/Magic/LazyMagic.php
+++ b/src/Magic/LazyMagic.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache\Magic;
 
+use Drupal\mustache\Plugin\MustacheMagicInterface;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\mustache\Plugin\MustacheMagicManager;
 
@@ -27,14 +28,14 @@ class LazyMagic implements MarkupInterface {
   /**
    * The manager of Mustache magic variable plugins.
    *
-   * @var \Drupal\mustache\Plugin\MustacheMagicManager
+   * @var MustacheMagicManager
    */
   protected $pluginManager;
 
   /**
    * The instantiated plugin object, or NULL if not yet loaded.
    *
-   * @var \Drupal\mustache\Plugin\MustacheMagicInterface|null
+   * @var MustacheMagicInterface|null
    */
   protected $plugin;
 
@@ -48,7 +49,7 @@ class LazyMagic implements MarkupInterface {
   /**
    * The LazyMagic constructor.
    *
-   * @param \Drupal\mustache\Plugin\MustacheMagicManager $plugin_manager
+   * @param MustacheMagicManager $plugin_manager
    *   The manager of Mustache magic variable plugins.
    * @param string $plugin_id
    *   The plugin ID.
@@ -154,7 +155,7 @@ class LazyMagic implements MarkupInterface {
   /**
    * Loads the plugin instance.
    *
-   * @return \Drupal\mustache\Plugin\MustacheMagicInterface
+   * @return MustacheMagicInterface
    *   The plugin instance.
    */
   public function plugin() {
diff --git a/src/Magic/MagicFactory.php b/src/Magic/MagicFactory.php
index e404283..b4fb861 100644
--- a/src/Magic/MagicFactory.php
+++ b/src/Magic/MagicFactory.php
@@ -13,14 +13,14 @@ class MagicFactory {
   /**
    * The manager of Mustache magic variable plugins.
    *
-   * @var \Drupal\mustache\Plugin\MustacheMagicManager
+   * @var MustacheMagicManager
    */
   protected $pluginManager;
 
   /**
    * The MagicFactory constructor.
    *
-   * @param \Drupal\mustache\Plugin\MustacheMagicManager $plugin_manager
+   * @param MustacheMagicManager $plugin_manager
    *   The manager of Mustache magic variable plugins.
    */
   public function __construct(MustacheMagicManager $plugin_manager) {
diff --git a/src/MustacheHttp.php b/src/MustacheHttp.php
index a8ee35f..e4e07a6 100644
--- a/src/MustacheHttp.php
+++ b/src/MustacheHttp.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\mustache;
 
+use GuzzleHttp\Client;
+use function GuzzleHttp\default_user_agent;
 use Drupal\Core\Cache\BackendChain;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Http\ClientFactory;
@@ -41,35 +43,35 @@ class MustacheHttp {
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $client;
 
   /**
    * The cache backend that is an in-memory cache for Mustache data.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $memoryCache;
 
   /**
    * The consistent cache backend for Mustache data.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $consistentCache;
 
   /**
    * The chained cache backends for Mustache data.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $chainedCache;
 
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
@@ -99,13 +101,13 @@ class MustacheHttp {
    *   Without using a volatility, cache items might expire all at once and
    *   would possibly result in a request flood. This value is meant for trying
    *   to reduce that risk. Set to 0 to not use any volatility.
-   * @param \Drupal\Core\Http\ClientFactory $client_factory
+   * @param ClientFactory $client_factory
    *   The HTTP client factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $memory_cache
+   * @param CacheBackendInterface $memory_cache
    *   The cache backend that is an in-memory cache for Mustache data.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $consistent_cache
+   * @param CacheBackendInterface $consistent_cache
    *   The consistent cache backend for Mustache data.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger_channel
+   * @param LoggerChannelInterface $logger_channel
    *   The logger channel.
    */
   public function __construct($cache_ttl_min, $cache_ttl_max, $cache_volatility, ClientFactory $client_factory, CacheBackendInterface $memory_cache, CacheBackendInterface $consistent_cache, LoggerChannelInterface $logger_channel) {
@@ -114,7 +116,7 @@ class MustacheHttp {
     $this->volatility = (int) $cache_volatility;
     $client_config = [
       'headers' => [
-        'User-Agent' => 'Drupal/' . \Drupal::VERSION . ' (+https://www.drupal.org/) ' . \GuzzleHttp\default_user_agent() . ' Mustache/2',
+        'User-Agent' => 'Drupal/' . \Drupal::VERSION . ' (+https://www.drupal.org/) ' . default_user_agent() . ' Mustache/2',
       ],
     ];
     $this->client = $client_factory->fromOptions($client_config);
@@ -129,9 +131,9 @@ class MustacheHttp {
   /**
    * Get data from the given URL.
    *
-   * @param \Drupal\Core\Url|string $url
+   * @param Url|string $url
    *   The URL to get the data from.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) The bubbleable metadata for attaching cacheability metadata.
    * @param bool $throw_exception
    *   Set to TRUE when an exception should be thrown on errors.
@@ -255,7 +257,7 @@ class MustacheHttp {
   /**
    * Get the memory cache for Mustache data.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The memory cache.
    */
   public function getDataMemoryCache() {
@@ -265,7 +267,7 @@ class MustacheHttp {
   /**
    * Get the consistent cache for Mustache data.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The consistent cache.
    */
   public function getDataConsistentCache() {
@@ -275,7 +277,7 @@ class MustacheHttp {
   /**
    * Get the chained cache for Mustache data.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The chained cache.
    */
   public function getDataChainedCache() {
@@ -289,7 +291,7 @@ class MustacheHttp {
    *   Whether caching should be used or not.
    * @param string &$uri
    *   The URI that is being used to perform the request.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metadata for attaching cacheability metadata.
    * @param bool $allow_invalid
    *   (optional) If TRUE, a cache item may be returned even if it is expired or
@@ -342,9 +344,9 @@ class MustacheHttp {
    *   The extracted contents of the response body.
    * @param array &$data
    *   The data to cache.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metadata for attaching cacheability metadata.
-   * @param \Psr\Http\Message\ResponseInterface|null $response
+   * @param ResponseInterface|null $response
    *   The received response object (if any).
    */
   protected function writeCache($use_cache, $uri, $body, array &$data, BubbleableMetadata $bubbleable_metadata, ResponseInterface $response = NULL) {
@@ -482,9 +484,9 @@ class MustacheHttp {
    *   The extracted contents of the response body (if any).
    * @param mixed &$data
    *   The decoded data (if any).
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metadata for attaching cacheability metadata.
-   * @param \Psr\Http\Message\ResponseInterface|null $response
+   * @param ResponseInterface|null $response
    *   The received response object (if any).
    *
    * @return array|false
diff --git a/src/MustacheTemplates.php b/src/MustacheTemplates.php
index 7280c88..80954e6 100644
--- a/src/MustacheTemplates.php
+++ b/src/MustacheTemplates.php
@@ -50,68 +50,68 @@ class MustacheTemplates {
   /**
    * The cache bin to store template file contents.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $templatesCache;
 
   /**
    * The cache bin to store template path information.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The Drupal state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * MustacheTemplates constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $templates_cache
+   * @param CacheBackendInterface $templates_cache
    *   The cache bin to store template file contents.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache bin to store template path information.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The Drupal state.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
    */
   public function __construct(CacheBackendInterface $templates_cache, CacheBackendInterface $cache, StateInterface $state, FileSystemInterface $file_system, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, ThemeManagerInterface $theme_manager) {
@@ -129,14 +129,14 @@ class MustacheTemplates {
    *
    * @param string $name
    *   The name of the template, without file ending.
-   * @param \Drupal\Core\Theme\ActiveTheme|null $theme
+   * @param ActiveTheme|null $theme
    *   (Optional) When given, the lookup is based on this theme.
    *   By default, the lookup uses the currently active theme.
    *
    * @return string|false
    *   The content of the template, or FALSE if the content could not be read.
    *
-   * @throws \Drupal\mustache\Exception\MustacheTemplateNotFoundException
+   * @throws MustacheTemplateNotFoundException
    *   In case the template file could not be found.
    */
   public function getContent($name, ActiveTheme $theme = NULL) {
@@ -167,14 +167,14 @@ class MustacheTemplates {
    *
    * @param string $name
    *   The name of the template, without file ending.
-   * @param \Drupal\Core\Theme\ActiveTheme|null $theme
+   * @param ActiveTheme|null $theme
    *   (Optional) When given, the lookup is based on this theme.
    *   By default, the lookup uses the currently active theme.
    *
    * @return string
    *   The file path as string if found.
    *
-   * @throws \Drupal\mustache\Exception\MustacheTemplateNotFoundException
+   * @throws MustacheTemplateNotFoundException
    *   In case the template file could not be found.
    */
   public function find($name, ActiveTheme $theme = NULL) {
@@ -285,12 +285,12 @@ class MustacheTemplates {
           if (isset($info['default'])) {
             // Convert url objects to strings for serialization.
             if (isset($info['default']['#data']) && ($info['default']['#data'] instanceof Url)) {
-              /** @var \Drupal\Core\Url $url */
+              /** @var Url $url */
               $url = clone $info['default']['#data'];
               $info['default']['#data'] = $url->setAbsolute($url->isExternal())->toString();
             }
             if (isset($info['default']['#sync']['data']) && ($info['default']['#sync']['data'] instanceof Url)) {
-              /** @var \Drupal\Core\Url $url */
+              /** @var Url $url */
               $url = clone $info['default']['#sync']['data'];
               $info['default']['#sync']['data'] = $url->setAbsolute($url->isExternal())->toString();
             }
diff --git a/src/MustacheTokenIterate.php b/src/MustacheTokenIterate.php
index 7d1b8ff..06fb9e1 100644
--- a/src/MustacheTokenIterate.php
+++ b/src/MustacheTokenIterate.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessibleInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -28,7 +29,7 @@ class MustacheTokenIterate {
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
@@ -42,16 +43,16 @@ class MustacheTokenIterate {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The MustacheTokenIterate constructor.
    *
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(Token $token, EntityTypeManagerInterface $entity_type_manager) {
@@ -72,14 +73,14 @@ class MustacheTokenIterate {
    *   Provided token data.
    * @param array $options
    *   Provided token options.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metadata. This is passed to the token replacement
    *   implementations so that they can attach their metadata.
    * @param string|bool $check_access
    *   (Optional) The type of access check to perform on the addressed target.
    *   Set to FALSE if access check should be skipped.
    *
-   * @return \Drupal\mustache\Render\IterableMarkup
+   * @return IterableMarkup
    *   The iterable target, starting at root level.
    */
   public function getIterableTarget($token_name, array $data, array $options, BubbleableMetadata $bubbleable_metadata, $check_access = 'view') {
@@ -102,7 +103,7 @@ class MustacheTokenIterate {
    *   Provided token data.
    * @param array $options
    *   Provided token options.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metadata. This is passed to the token replacement
    *   implementations so that they can attach their metadata.
    * @param array $token_keys
@@ -111,7 +112,7 @@ class MustacheTokenIterate {
    *   (Optional) The type of access check to perform on the addressed target.
    *   Set to FALSE if access check should be skipped.
    *
-   * @return \Drupal\mustache\Render\IterableMarkup
+   * @return IterableMarkup
    *   The target data. May hold empty leaves if requested target was either
    *   not found, or if not an iterable data type, or if the current user has
    *   no permissions to access the data.
@@ -156,7 +157,7 @@ class MustacheTokenIterate {
     }
 
     if ($check_access && $candidate instanceof AccessibleInterface) {
-      /** @var \Drupal\Core\Access\AccessResultInterface $access_result */
+      /** @var AccessResultInterface $access_result */
       $access_result = $candidate->access($check_access, NULL, TRUE);
       $bubbleable_metadata->addCacheableDependency($access_result);
       if (!$access_result->isAllowed()) {
@@ -178,7 +179,7 @@ class MustacheTokenIterate {
           $bubbleable_metadata->addCacheableDependency($root);
         }
         if ($check_access && $root instanceof AccessibleInterface) {
-          /** @var \Drupal\Core\Access\AccessResultInterface $access_result */
+          /** @var AccessResultInterface $access_result */
           $access_result = $root->access($check_access, NULL, TRUE);
           $bubbleable_metadata->addCacheableDependency($access_result);
           if (!$access_result->isAllowed()) {
@@ -417,7 +418,7 @@ class MustacheTokenIterate {
   /**
    * Get the token type for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return string
diff --git a/src/MustacheTokenProcessor.php b/src/MustacheTokenProcessor.php
index 53b553a..6f57993 100644
--- a/src/MustacheTokenProcessor.php
+++ b/src/MustacheTokenProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessibleInterface;
 use Drupal\Core\Cache\BackendChain;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -26,63 +27,63 @@ class MustacheTokenProcessor {
   /**
    * The cache bin to store tokenized template content.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $templateCache;
 
   /**
    * The cache backend that is an in-memory cache for Mustache data.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $dataMemoryCache;
 
   /**
    * The consistent cache backend for Mustache data.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $dataConsistentCache;
 
   /**
    * The chained cache backends for Mustache data.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $dataChainedCache;
 
   /**
    * The cache contexts manager.
    *
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager
+   * @var CacheContextsManager
    */
   protected $cacheContextsManager;
 
   /**
    * The token service.
    *
-   * @var Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The manager of Mustache magic variable plugins.
    *
-   * @var \Drupal\mustache\Plugin\MustacheMagicManager
+   * @var MustacheMagicManager
    */
   protected $magicPluginManager;
 
@@ -96,21 +97,21 @@ class MustacheTokenProcessor {
   /**
    * The MustacheTokenProcessor constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $template_cache
+   * @param CacheBackendInterface $template_cache
    *   The cache bin to store tokenized template content.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $data_memory_cache
+   * @param CacheBackendInterface $data_memory_cache
    *   The cache backend that is an in-memory cache for Mustache data.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $data_consistent_cache
+   * @param CacheBackendInterface $data_consistent_cache
    *   The consistent cache backend for Mustache data.
-   * @param \Drupal\Core\Cache\Context\CacheContextsManager $cache_contexts_manager
+   * @param CacheContextsManager $cache_contexts_manager
    *   The cache contexts manager.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The context repository.
-   * @param \Drupal\mustache\Plugin\MustacheMagicManager $magic_plugin_manager
+   * @param MustacheMagicManager $magic_plugin_manager
    *   The manager of Mustache magic variable plugins.
    */
   public function __construct(CacheBackendInterface $template_cache, CacheBackendInterface $data_memory_cache, CacheBackendInterface $data_consistent_cache, CacheContextsManager $cache_contexts_manager, Token $token, EntityTypeManagerInterface $entity_type_manager, ContextRepositoryInterface $context_repository, MustacheMagicManager $magic_plugin_manager) {
@@ -378,7 +379,7 @@ class MustacheTokenProcessor {
    *   otherwise cacheability may be not working properly.
    * @param string $check_access
    *   (Optional) The access check to perform. Set NULL to skip access filter.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (Optional) The object to collect bubbleable metadata.
    * @param string|null $langcode
    *   (Optional) The langcode to use. Leave NULL to use the current language.
@@ -450,7 +451,7 @@ class MustacheTokenProcessor {
       if (!($value instanceof EntityInterface)) {
         continue;
       }
-      /** @var \Drupal\Core\Entity\EntityInterface $value */
+      /** @var EntityInterface $value */
       if ($entity_token_type_mapper) {
         $the_real_token_type = $entity_token_type_mapper->getTokenTypeForEntityType($value->getEntityTypeId(), TRUE);
       }
@@ -476,7 +477,7 @@ class MustacheTokenProcessor {
         $bubbleable_metadata->addCacheableDependency($contexts[$type]);
       }
       if ($check_access && $value instanceof AccessibleInterface) {
-        /** @var \Drupal\Core\Access\AccessResultInterface $access_result */
+        /** @var AccessResultInterface $access_result */
         $access_result = $value->access($check_access, NULL, TRUE);
         $bubbleable_metadata->addCacheableDependency($access_result);
         if (!$access_result->isAllowed()) {
@@ -626,7 +627,7 @@ class MustacheTokenProcessor {
   /**
    * Get the memory cache for Mustache data.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The memory cache.
    */
   public function getDataMemoryCache() {
@@ -636,7 +637,7 @@ class MustacheTokenProcessor {
   /**
    * Get the consistent cache for Mustache data.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The consistent cache.
    */
   public function getDataConsistentCache() {
@@ -646,7 +647,7 @@ class MustacheTokenProcessor {
   /**
    * Get the chained cache for Mustache data.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The chained cache.
    */
   public function getDataChainedCache() {
@@ -689,7 +690,7 @@ class MustacheTokenProcessor {
   /**
    * Get the token iterate service.
    *
-   * @return \Drupal\mustache\MustacheTokenIterate
+   * @return MustacheTokenIterate
    *   The token iterate service.
    */
   protected static function getTokenIterate() {
diff --git a/src/Plugin/Filter/MustacheFilter.php b/src/Plugin/Filter/MustacheFilter.php
index a4a251c..b536ec9 100644
--- a/src/Plugin/Filter/MustacheFilter.php
+++ b/src/Plugin/Filter/MustacheFilter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache\Plugin\Filter;
 
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\RenderContext;
@@ -27,7 +28,7 @@ class MustacheFilter extends FilterBase implements ContainerFactoryPluginInterfa
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
diff --git a/src/Plugin/MustacheMagic.php b/src/Plugin/MustacheMagic.php
index a037ddf..d1704e9 100644
--- a/src/Plugin/MustacheMagic.php
+++ b/src/Plugin/MustacheMagic.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\mustache\Plugin;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -28,14 +30,14 @@ abstract class MustacheMagic extends PluginBase implements MustacheMagicInterfac
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The messenger, if any.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface|null
+   * @var MessengerInterface|null
    */
   protected $messenger;
 
diff --git a/src/Plugin/MustacheMagicManager.php b/src/Plugin/MustacheMagicManager.php
index d4fa8a0..75bcf75 100755
--- a/src/Plugin/MustacheMagicManager.php
+++ b/src/Plugin/MustacheMagicManager.php
@@ -17,9 +17,9 @@ class MustacheMagicManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/mustache/Magic/Condition.php b/src/Plugin/mustache/Magic/Condition.php
index 5843f31..9f7bd75 100644
--- a/src/Plugin/mustache/Magic/Condition.php
+++ b/src/Plugin/mustache/Magic/Condition.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mustache\Plugin\mustache\Magic;
 
+use Drupal\mustache\MustacheTokenIterate;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\mustache\Plugin\MustacheMagic;
 
@@ -312,7 +313,7 @@ class Condition extends MustacheMagic {
   /**
    * Get the token iterate service.
    *
-   * @return \Drupal\mustache\MustacheTokenIterate
+   * @return MustacheTokenIterate
    *   The token iterate service.
    */
   protected static function getTokenIterate() {
diff --git a/src/Plugin/mustache/Magic/Filter.php b/src/Plugin/mustache/Magic/Filter.php
index f5c1b12..4ce9fb3 100644
--- a/src/Plugin/mustache/Magic/Filter.php
+++ b/src/Plugin/mustache/Magic/Filter.php
@@ -104,7 +104,7 @@ class Filter extends MustacheMagic {
     // include that one (and will not forget about it).
     $this->attachLibrary();
 
-    $rendered = $render($template_content);
+    $rendered = \Drupal::service('renderer')->render($template_content);
 
     foreach ($this->keys as $i => $key) {
       if (!isset(static::$available[$key])) {
diff --git a/src/Plugin/mustache/Magic/Introspection.php b/src/Plugin/mustache/Magic/Introspection.php
index bd5cc22..134b373 100644
--- a/src/Plugin/mustache/Magic/Introspection.php
+++ b/src/Plugin/mustache/Magic/Introspection.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\mustache\Plugin\mustache\Magic;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\mustache\MustacheHttp;
+use Drupal\mustache\MustacheTokenProcessor;
+use Drupal\mustache\MustacheTemplates;
 use Drupal\Core\Access\AccessibleInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -49,7 +53,7 @@ class Introspection extends MustacheMagic {
   /**
    * The module handler, if any.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|null
+   * @var ModuleHandlerInterface|null
    */
   protected $moduleHandler;
 
@@ -113,7 +117,7 @@ class Introspection extends MustacheMagic {
     if (isset($endpoint, $this->element['#success'])) {
       $received = FALSE;
       if ($this->element['#success']) {
-        /** @var \Drupal\mustache\MustacheHttp $http */
+        /** @var MustacheHttp $http */
         $http = \Drupal::service('mustache.http');
         $received = $http->getData($this->element['#endpoint']);
       }
@@ -143,7 +147,7 @@ class Introspection extends MustacheMagic {
     if ($with_tokens) {
       $token_settings = &$this->element['#with_tokens'];
       $token_data = isset($token_settings['data']) ? $token_settings['data'] : [];
-      /** @var \Drupal\mustache\MustacheTokenProcessor $token_processor */
+      /** @var MustacheTokenProcessor $token_processor */
       $token_processor = \Drupal::service('mustache.token_processor');
       $token_processor->processData($token_data);
       if (!empty($token_data)) {
@@ -210,7 +214,7 @@ class Introspection extends MustacheMagic {
       return $this->__toString();
     }
 
-    /** @var \Drupal\mustache\MustacheTemplates */
+    /** @var MustacheTemplates */
     $templates = \Drupal::service('mustache.templates');
     $available = [];
     $all_templates = array_keys($templates->findAll());
diff --git a/src/Plugin/mustache/Magic/Translation.php b/src/Plugin/mustache/Magic/Translation.php
index 322709b..667039a 100644
--- a/src/Plugin/mustache/Magic/Translation.php
+++ b/src/Plugin/mustache/Magic/Translation.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\mustache\Plugin\mustache\Magic;
 
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\mustache_magic\Storage\MustacheTemplateStorage;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessibleInterface;
 use Drupal\Core\Render\BubbleableMetadata;
@@ -50,7 +53,7 @@ class Translation extends MustacheMagic {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -64,7 +67,7 @@ class Translation extends MustacheMagic {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -139,7 +142,7 @@ class Translation extends MustacheMagic {
 
     if (!$language) {
       // Nothing to do when language does not exist for the given langcode.
-      return $render($template_content);
+      return \Drupal::service('renderer')->render($template_content);
     }
 
     if (isset($this->langcode) && !empty($this->element['#use_sync'])) {
@@ -154,7 +157,7 @@ class Translation extends MustacheMagic {
     $bubbleable_metadata = BubbleableMetadata::createFromRenderArray($this->element);
 
     if (!$this->isInline() && \Drupal::hasService('mustache.template_storage')) {
-      /** @var \Drupal\mustache_magic\Storage\MustacheTemplateStorage $template_storage */
+      /** @var MustacheTemplateStorage $template_storage */
       $template_storage = \Drupal::service('mustache.template_storage');
       $template_storage->registerTemplate($template_name, $translated_content);
       $build = MustacheRenderTemplate::build($template_name);
@@ -330,7 +333,7 @@ class Translation extends MustacheMagic {
     }
     else {
       $bubbleable_metadata->addCacheContexts(['languages'])->applyTo($this->element);
-      return $render($translated_content);
+      return \Drupal::service('renderer')->render($translated_content);
     }
   }
 
diff --git a/src/Summable/SummableScripts.php b/src/Summable/SummableScripts.php
index e4f6991..ce64608 100644
--- a/src/Summable/SummableScripts.php
+++ b/src/Summable/SummableScripts.php
@@ -36,42 +36,42 @@ class SummableScripts implements SummableScriptsInterface {
   /**
    * The cache backend to store summable script information.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The finder of Mustache templates.
    *
-   * @var \Drupal\mustache\MustacheTemplates
+   * @var MustacheTemplates
    */
   protected $templates;
 
   /**
    * The library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;
 
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * The theme initialization service.
    *
-   * @var \Drupal\Core\Theme\ThemeInitializationInterface
+   * @var ThemeInitializationInterface
    */
   protected $themeInitialization;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
@@ -96,17 +96,17 @@ class SummableScripts implements SummableScriptsInterface {
    *   Whether the usage of summable script files is enabled or not.
    * @param string $js_path
    *   The file path where to store generated script files.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to store summable script information.
-   * @param \Drupal\mustache\MustacheTemplates $templates
+   * @param MustacheTemplates $templates
    *   The finder of Mustache templates.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The library discovery service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $theme_initialization
+   * @param ThemeInitializationInterface $theme_initialization
    *   The theme initialization service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct($enabled, $js_path, CacheBackendInterface $cache, MustacheTemplates $templates, LibraryDiscoveryInterface $library_discovery, ThemeManagerInterface $theme_manager, ThemeInitializationInterface $theme_initialization, FileSystemInterface $file_system) {
diff --git a/src/Summable/SummableScriptsInterface.php b/src/Summable/SummableScriptsInterface.php
index 1f7ab35..76d2225 100644
--- a/src/Summable/SummableScriptsInterface.php
+++ b/src/Summable/SummableScriptsInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\mustache\Summable;
 
+use Drupal\mustache\Exception\MustacheTemplateNotFoundException;
+use Drupal\mustache\Exception\MustacheFileException;
 use Drupal\Core\Theme\ActiveTheme;
 
 /**
@@ -25,16 +27,16 @@ interface SummableScriptsInterface {
    *
    * @param string $template
    *   The name of the template.
-   * @param \Drupal\Core\Theme\ActiveTheme|null $theme
+   * @param ActiveTheme|null $theme
    *   (Optional) When given, the lookup is based on this theme.
    *   By default, the lookup uses the currently active theme.
    *
    * @return string
    *   The library for the template.
    *
-   * @throws \Drupal\mustache\Exception\MustacheTemplateNotFoundException
+   * @throws MustacheTemplateNotFoundException
    *   When the template has not been found.
-   * @throws \Drupal\mustache\Exception\MustacheFileException
+   * @throws MustacheFileException
    *   When the summable script file is not available.
    */
   public function getLibraryName($template, ActiveTheme $theme = NULL);
@@ -73,7 +75,7 @@ interface SummableScriptsInterface {
    *   Returns TRUE when the script file was generated and is available, FALSE
    *   otherwise.
    *
-   * @throws \Drupal\mustache\Exception\MustacheTemplateNotFoundException
+   * @throws MustacheTemplateNotFoundException
    *   When the corresponding template has not been found.
    */
   public function generate($library_name, $regenerate = FALSE);
diff --git a/tests/src/Kernel/InlineTemplatesTest.php b/tests/src/Kernel/InlineTemplatesTest.php
index bb0522f..fa0adf5 100644
--- a/tests/src/Kernel/InlineTemplatesTest.php
+++ b/tests/src/Kernel/InlineTemplatesTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\mustache\Kernel;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\mustache\Helpers\MustacheRenderTemplate;
 use Drupal\user\Entity\User;
@@ -34,9 +36,9 @@ class InlineTemplatesTest extends KernelTestBase {
    * Tests rendering of inline templates.
    */
   public function testRenderInline() {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     $render_array = MustacheRenderTemplate::build('my_inline_template', 'Value: {{ baz.qux }}')
@@ -102,9 +104,9 @@ class InlineTemplatesTest extends KernelTestBase {
    */
   public function testMagicConditions() {
     $admin_user = User::load(1);
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
     $account_switcher->switchTo($admin_user);
 
@@ -208,7 +210,7 @@ class InlineTemplatesTest extends KernelTestBase {
    * Tests magic filters using inline templates.
    */
   public function testMagicFilters() {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
 
     $render_array = MustacheRenderTemplate::build('filter_template', ' {{#filter.trim}}          Hello!       {{/filter.trim}} ')
diff --git a/tests/src/Kernel/MagicTranslationTest.php b/tests/src/Kernel/MagicTranslationTest.php
index 7bf38d8..86d0d7c 100644
--- a/tests/src/Kernel/MagicTranslationTest.php
+++ b/tests/src/Kernel/MagicTranslationTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\mustache\Kernel;
 
+use Drupal\locale\StringStorageInterface;
+use Drupal\node\NodeTypeInterface;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\mustache\Helpers\MustacheRenderTemplate;
 use Drupal\user\Entity\User;
@@ -69,7 +74,7 @@ class MagicTranslationTest extends KernelTestBase {
     $config->save();
     $config = $this->config('language.negotiation');
 
-    /** @var \Drupal\locale\StringStorageInterface $string_storage */
+    /** @var StringStorageInterface $string_storage */
     $string_storage = \Drupal::service('locale.storage');
     $string_storage->createString(['source' => 'This text should be translated...', 'context' => ''])->save();
     $string = $string_storage->findString(['source' => 'This text should be translated...', 'context' => '']);
@@ -82,7 +87,7 @@ class MagicTranslationTest extends KernelTestBase {
     _locale_refresh_translations(['de'], [$lid]);
 
     // Create the Article content type with revisioning and translation enabled.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'article',
       'name' => 'Article',
@@ -97,7 +102,7 @@ class MagicTranslationTest extends KernelTestBase {
       'language_alterable' => TRUE,
     ])->save();
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
       'type' => 'article',
       'title' => 'English title',
@@ -121,9 +126,9 @@ class MagicTranslationTest extends KernelTestBase {
    */
   public function testInline() {
     $admin_user = User::load(1);
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
     $account_switcher->switchTo($admin_user);
 
