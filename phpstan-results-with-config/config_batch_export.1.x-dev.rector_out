modules/contrib/config_batch_export/config_batch_export.module
modules/contrib/config_batch_export/src/Config/Storage.php
modules/contrib/config_batch_export/src/Controller/ConfigBatchExportController.php
modules/contrib/config_batch_export/tests/src/Functional/FileGenerationTest.php

3 files with changes
====================

1) modules/contrib/config_batch_export/tests/src/Functional/FileGenerationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_batch_export\Functional;

+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
 use Drupal\Core\Archiver\ArchiveTar;
 use Drupal\Core\Serialization\Yaml;
@@ @@
   protected $fpdir;

   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalLogin($this->drupalCreateUser([
@@ @@
    *  Test batch processing.
    */
   public function testBatchProcessing() {
-    $this->drupalPostForm('admin/config/development/configuration/full/export', [], 'edit-export-batch');
+    $this->drupalGet('admin/config/development/configuration/full/export');
+    $this->submitForm([], 'edit-export-batch');
     $this->clickLink('here');

     $this->headers = $this->getSession()->getResponseHeaders();
@@ @@
   }

   public function _testFilesize() {
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = $this->fileSystem;
     $this->filepath = $file_system->tempnam('temporary://', hash('adler32', 'config_batch_export')) . '.' . $this->extension;
     $file_content = $this->content;
@@ @@

         $decoded = Yaml::decode($file_content);
       }
-      catch (\Drupal\Component\Serialization\Exception\InvalidDataTypeException $e) {
+      catch (InvalidDataTypeException $e) {
         $this->fail('Yaml data incorrect');
       }

@@ @@
     }
   }

-  public function tearDown() {
+  public function tearDown(): void {
     $this->fileSystem->delete($this->filepath);

     if ($this->fpdir) {
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/config_batch_export/src/Controller/ConfigBatchExportController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_batch_export\Controller;

+use Drupal\Core\Config\StorageInterface;
+use Drupal\Core\Lock\LockBackendInterface;
+use Symfony\Component\HttpFoundation\BinaryFileResponse;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\config\Controller\ConfigController;
@@ @@
   /**
    * File system.
    *
-   * @return \Drupal\Core\File\FileSystemInterface
+   * @return FileSystemInterface
    *   File system.
    */
   protected static function getFilesystem() {
@@ @@
   public static function callbackBatchJob($batch_data, &$context) {
     $sandbox = &$context['sandbox'];
     if (!isset($sandbox['started'])) {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = \Drupal::entityTypeManager()->getStorage('file')->load($batch_data['file_id']);

       $sandbox['filename'] = $file->getFileUri();
@@ @@
       $archiver = new ArchiveTar($sandbox['filename']);

       $config_factory = \Drupal::configFactory();
-      /** @var \Drupal\Core\Config\StorageInterface $target_storage */
+      /** @var StorageInterface $target_storage */
       $target_storage = \Drupal::service('config_batch_export.config_storage');
       foreach ($configs as $config_definition) {
         if (is_array($config_definition)) {
@@ @@
    * Batch finished callback.
    */
   public static function callbackBatchFinished($status, $results) {
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = \Drupal::entityTypeManager()->getStorage('file')->load($results['file_id']);
     $oldpath = $file->getFileUri();

@@ @@
     $existing_files = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => 'private://configs.tar.gz']);
     $existing_files += \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => 'private://configs.tar']);
     if (!empty($existing_files)) {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       foreach ($existing_files as $file) {
         try {
           $file->delete();
@@ @@
   /**
    * Get lock backend.
    *
-   * @return \Drupal\Core\Lock\LockBackendInterface
+   * @return LockBackendInterface
    */
   protected static function lockBackend() {
     return \Drupal::service('lock.persistent');
@@ @@
   /**
    * Downloads a file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File object.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   Response.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function downloadExportFile(FileInterface $file) {
     if (static::isLocked()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/config_batch_export/config_batch_export.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\FileStorageInterface;
 /**
  * @file
  * Allows to download configs archive in batch.
@@ @@
 function config_batch_export_file_download($uri) {
   $routeMatch = \Drupal::routeMatch();

-  /** @var \Drupal\file\FileStorageInterface $file_storage */
+  /** @var FileStorageInterface $file_storage */
   $file_storage = \Drupal::entityTypeManager()->getStorage('file');
   if (
     ($fid = $routeMatch->getRawParameter('file')) &&
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

