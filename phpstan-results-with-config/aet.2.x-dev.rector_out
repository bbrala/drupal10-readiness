modules/contrib/aet/aet.module
modules/contrib/aet/src/TokenReplacer.php
modules/contrib/aet/tests/src/Functional/AETRecursionWebTest.php

3 files with changes
====================

1) modules/contrib/aet/tests/src/Functional/AETRecursionWebTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\aet\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Speed things up with a minimal profile.
@@ @@
   /**
    * Test normal operation - embed content from one node into another.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function testSingleEmbedding() {
     $this->drupalLogin($this->editor_user);
@@ @@
   /**
    * Test that it's OK to embed a different field from myself into myself.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function testSelfEmbedding() {
     $this->drupalLogin($this->editor_user);
@@ @@
    * Tries to embed alpha into the body of beta, and the beta into
    * the body of alpha. We expect this to be caught and stopped.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function testCyclicEmbedding() {
     $this->drupalLogin($this->editor_user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/aet/src/TokenReplacer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\aet;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Uuid\Uuid;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\token\Token
+   * @var Token
    */
   protected $tokenService;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The current-user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * This module's logging service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The bubbleable metadata we're working with.
    *
-   * @var \Drupal\Core\Render\BubbleableMetadata
+   * @var BubbleableMetadata
    */
   protected $bubbleableMetadata;

@@ @@
   /**
    * TokenReplacer constructor.
    *
-   * @param \Drupal\token\Token $token_service
+   * @param Token $token_service
    *   The token service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current-user service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   This module's logging service.
    * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
@@ @@
    *
    * It's necessary to call this method before any other non-static methods.
    *
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metadata.
    *
    * @return $this
@@ @@
   /**
    * Fetches the bubbleable metadata currently in use by the service.
    *
-   * @return \Drupal\Core\Render\BubbleableMetadata
+   * @return BubbleableMetadata
    *   The bubbleable metadata.
    *
    * @throws \Exception
@@ @@
    * @return array
    *   The replacements.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getReplacements(array $tokens) {
     $replacements = [];
@@ @@
    * @return array
    *   The replacements.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getReplacementsForTokenType(string $token_type, array $tokens) {
     list($entity_type_id, $entity_type_info) = $this->getEntityInfoMatchingTokenType($token_type);
@@ @@
    *
    * @return EntityInterface|null
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function getEntityFromId(string $entity_type_id, string $entity_id) {
     if (Uuid::isValid($entity_id)) {
@@ @@
    *
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $token_type
    *   The token type.
@@ @@
    *
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $view_mode
    *   The view mode.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML
    */
   protected function getRenderedEntity(string $entity_type_id, EntityInterface $entity, string $view_mode) {
     $renderable_entity = $this->entityTypeManager->getViewBuilder($entity_type_id)->view($entity, $view_mode);
-    return render($renderable_entity);
+    return \Drupal::service('renderer')->render($renderable_entity);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/aet/aet.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityType;
 /**
  * @file
  * The AET main module file.
@@ @@
   // Looping the entity information array to add the token types.
   foreach ($entities as $entity_type => $entity_info) {

-    /** @var \Drupal\Core\Entity\EntityType $entity_info */
+    /** @var EntityType $entity_info */
     $token_type = $entity_info->get('additional')['token_type'] ?: $entity_type;

     if (empty($info['types'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

