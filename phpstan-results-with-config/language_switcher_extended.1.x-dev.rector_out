modules/contrib/language_switcher_extended/language_switcher_extended.install
modules/contrib/language_switcher_extended/language_switcher_extended.module
modules/contrib/language_switcher_extended/src/Form/LanguageSwitcherExtendedSettingsForm.php
modules/contrib/language_switcher_extended/src/LanguageSwitcherLinkProcessor.php
modules/contrib/language_switcher_extended/tests/src/Functional/LanguageSwitcherExtendedTest.php

3 files with changes
====================

1) modules/contrib/language_switcher_extended/tests/src/Functional/LanguageSwitcherExtendedTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\language_switcher_extended\Functional;

+use Drupal\node\NodeInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The node object used in the test.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Login as root user.
@@ @@
     $edit = [
       'predefined_langcode' => 'de',
     ];
-    $this->drupalPostForm('admin/config/regional/language/add', $edit, $this->t('Add language'));
+    $this->drupalGet('admin/config/regional/language/add');
+    $this->submitForm($edit, $this->t('Add language'));

     // Enable URL language detection and selection.
     $edit = ['language_interface[enabled][language-url]' => '1'];
-    $this->drupalPostForm('admin/config/regional/language/detection', $edit, $this->t('Save settings'));
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm($edit, $this->t('Save settings'));

     // Enable the language switching block.
     $this->drupalPlaceBlock('language_block:' . LanguageInterface::TYPE_INTERFACE, [
@@ @@
       'entity_types[node]' => TRUE,
       'settings[node][article][translatable]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save configuration'));
+    $this->submitForm($edit, $this->t('Save configuration'));

     // Create a node without a translation.
     $this->node = $this->createNode([
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/language_switcher_extended/src/LanguageSwitcherLinkProcessor.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\Routing\CurrentRouteMatch definition.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * LanguageSwitcherLinkProcessor constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   Route match service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, CurrentRouteMatch $currentRouteMatch, LanguageManagerInterface $language_manager) {
@@ @@
   /**
    * Retrieves the current page entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The retrieved entity, or FALSE if none found.
    */
   protected function getPageEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/language_switcher_extended/language_switcher_extended.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\language_switcher_extended\LanguageSwitcherLinkProcessor;
 /**
  * @file
  * Handles language switcher links for untranslated languages on an entity.
@@ @@
  */
 function language_switcher_extended_language_switch_links_alter(array &$links, $type, Url $url) {
   $processor = Drupal::service('language_switcher_extended.link_processor');
-  /** @var \Drupal\language_switcher_extended\LanguageSwitcherLinkProcessor $processor */
+  /** @var LanguageSwitcherLinkProcessor $processor */
   $processor->process($links);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

