diff --git a/search_api_autocomplete.api.php b/search_api_autocomplete.api.php
index d45f0da..a0c2477 100644
--- a/search_api_autocomplete.api.php
+++ b/search_api_autocomplete.api.php
@@ -1,19 +1,21 @@
 <?php
 
+use Drupal\search_api_autocomplete\Suggestion\SuggestionInterface;
+use Drupal\search_api_autocomplete\SearchInterface;
+use Drupal\search_api_autocomplete\Suggestion\Suggestion;
+use Drupal\views\ViewExecutable;
 /**
  * @file
  * Hooks provided by the Search API autocomplete module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter the suggestions that will be returned for a certain request.
  *
- * @param \Drupal\search_api_autocomplete\Suggestion\SuggestionInterface[] $suggestions
+ * @param SuggestionInterface[] $suggestions
  *   The suggestions that will be returned.
  * @param array $alter_params
  *   An associative array with the following keys:
@@ -28,12 +30,12 @@ function hook_search_api_autocomplete_suggestions_alter(array &$suggestions, arr
   // Users should really try searching for "mandelbrot" once, so just always
   // suggest that, too. In case the suggestions generated have reached the
   // limit, replace the last suggestion to this end.
-  /** @var \Drupal\search_api_autocomplete\SearchInterface $search */
+  /** @var SearchInterface $search */
   $search = $alter_params['search'];
   if (count($suggestions) >= $search->getOption('limit')) {
     array_pop($suggestions);
   }
-  $suggestions[] = new \Drupal\search_api_autocomplete\Suggestion\Suggestion('mandelbrot');
+  $suggestions[] = new Suggestion('mandelbrot');
 }
 
 /**
@@ -86,12 +88,12 @@ function hook_search_api_autocomplete_search_info_alter(array &$searches) {
  *   The fields considered to be fulltext fields. These are the "real field"
  *   values in their Views data definition. By default, all Views fields added
  *   for an index's fulltext fields are included, plus "search_api_fulltext".
- * @param \Drupal\search_api_autocomplete\SearchInterface $search
+ * @param SearchInterface $search
  *   The search for which to get the fulltext fields.
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  *   The view for which to get the fulltext fields.
  */
-function hook_search_api_autocomplete_views_fulltext_fields_alter(array &$fields, \Drupal\search_api_autocomplete\SearchInterface $search, \Drupal\views\ViewExecutable $view) {
+function hook_search_api_autocomplete_views_fulltext_fields_alter(array &$fields, SearchInterface $search, ViewExecutable $view) {
   if ($view->id() === 'my_view' || $search->getIndexId() === 'my_index') {
     $fields[] = 'my_field';
   }
diff --git a/search_api_autocomplete.module b/search_api_autocomplete.module
index 060ec0b..b456cfd 100644
--- a/search_api_autocomplete.module
+++ b/search_api_autocomplete.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\views\ViewExecutable;
+use Drupal\search_api_autocomplete\Entity\SearchStorage;
 /**
  * @file
  * Adds autocomplete capabilities for Search API searches.
@@ -79,7 +81,7 @@ function search_api_autocomplete_hook_info() {
  * @see \Drupal\search_api_autocomplete\Plugin\search_api_autocomplete\search\Views
  */
 function search_api_autocomplete_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   $view = $form_state->get('view');
   if (substr($view->storage->get('base_table'), 0, 17) != 'search_api_index_') {
     return;
@@ -92,7 +94,7 @@ function search_api_autocomplete_form_views_exposed_form_alter(array &$form, For
     $form['#cache']['tags'][] = $cache_tag;
   }
 
-  /** @var \Drupal\search_api_autocomplete\Entity\SearchStorage $search_storage */
+  /** @var SearchStorage $search_storage */
   $search_storage = \Drupal::entityTypeManager()
     ->getStorage('search_api_autocomplete_search');
   $search = $search_storage->loadBySearchPlugin($plugin_id);
@@ -171,7 +173,7 @@ function search_api_autocomplete_form_views_exposed_form_alter(array &$form, For
  */
 function search_api_autocomplete_form_search_api_page_block_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
   $page_id = substr($form_id, strlen('search_api_page_block_form_'));
-  /** @var \Drupal\search_api_autocomplete\Entity\SearchStorage $search_storage */
+  /** @var SearchStorage $search_storage */
   $search_storage = \Drupal::entityTypeManager()
     ->getStorage('search_api_autocomplete_search');
   $plugin_id = 'page:' . $page_id;
diff --git a/src/AutocompleteBackendInterface.php b/src/AutocompleteBackendInterface.php
index 410a30d..ec456f5 100644
--- a/src/AutocompleteBackendInterface.php
+++ b/src/AutocompleteBackendInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_autocomplete;
 
+use Drupal\search_api_autocomplete\Suggestion\SuggestionInterface;
 @trigger_error('\Drupal\search_api_autocomplete\AutocompleteBackendInterface is deprecated in search_api_autocomplete:8.x-1.6 and is removed from search_api_autocomplete:2.0.0. Use \Drupal\search_api\Contrib\AutocompleteBackendInterface instead. See https://www.drupal.org/node/3256202.', E_USER_DEPRECATED);
 
 use Drupal\search_api\Query\QueryInterface;
@@ -27,10 +28,10 @@ interface AutocompleteBackendInterface extends BackendInterface {
   /**
    * Retrieves autocompletion suggestions for some user input.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   A query representing the base search, with all completely entered words
    *   in the user input so far as the search keys.
-   * @param \Drupal\search_api_autocomplete\SearchInterface $search
+   * @param SearchInterface $search
    *   An object containing details about the search the user is on, and
    *   settings for the autocompletion. See the class documentation for details.
    *   Especially $search->getOptions() should be checked for settings, like
@@ -43,7 +44,7 @@ interface AutocompleteBackendInterface extends BackendInterface {
    * @param string $user_input
    *   The complete user input for the fulltext search keywords so far.
    *
-   * @return \Drupal\search_api_autocomplete\Suggestion\SuggestionInterface[]
+   * @return SuggestionInterface[]
    *   An array of autocomplete suggestions.
    */
   public function getAutocompleteSuggestions(QueryInterface $query, SearchInterface $search, $incomplete_key, $user_input);
diff --git a/src/Controller/AutocompleteController.php b/src/Controller/AutocompleteController.php
index 4caec8e..3bf7e75 100644
--- a/src/Controller/AutocompleteController.php
+++ b/src/Controller/AutocompleteController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_autocomplete\Controller;
 
+use Drupal\search_api_autocomplete\Suggestion\SuggestionInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Render\RendererInterface;
@@ -21,32 +22,32 @@ class AutocompleteController extends ControllerBase implements ContainerInjectio
   /**
    * The autocomplete helper service.
    *
-   * @var \Drupal\search_api_autocomplete\Utility\AutocompleteHelperInterface
+   * @var AutocompleteHelperInterface
    */
   protected $autocompleteHelper;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The transliterator.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliterator;
 
   /**
    * Creates a new AutocompleteController instance.
    *
-   * @param \Drupal\search_api_autocomplete\Utility\AutocompleteHelperInterface $autocomplete_helper
+   * @param AutocompleteHelperInterface $autocomplete_helper
    *   The autocomplete helper service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliterator
+   * @param TransliterationInterface $transliterator
    *   The transliterator.
    */
   public function __construct(AutocompleteHelperInterface $autocomplete_helper, RendererInterface $renderer, TransliterationInterface $transliterator) {
@@ -69,12 +70,12 @@ class AutocompleteController extends ControllerBase implements ContainerInjectio
   /**
    * Page callback: Retrieves autocomplete suggestions.
    *
-   * @param \Drupal\search_api_autocomplete\SearchInterface $search_api_autocomplete_search
+   * @param SearchInterface $search_api_autocomplete_search
    *   The search for which to retrieve autocomplete suggestions.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The autocompletion response.
    */
   public function autocomplete(SearchInterface $search_api_autocomplete_search, Request $request) {
@@ -111,7 +112,7 @@ class AutocompleteController extends ControllerBase implements ContainerInjectio
       $suggester_weights += array_fill_keys(array_keys($suggesters), 0);
       asort($suggester_weights);
 
-      /** @var \Drupal\search_api_autocomplete\Suggestion\SuggestionInterface[] $suggestions */
+      /** @var SuggestionInterface[] $suggestions */
       $suggestions = [];
       // Go through all enabled suggesters in order of increasing weight and
       // add their suggestions (until the limit is reached).
diff --git a/src/Element/SearchApiAutocomplete.php b/src/Element/SearchApiAutocomplete.php
index 29e0937..5dd9033 100644
--- a/src/Element/SearchApiAutocomplete.php
+++ b/src/Element/SearchApiAutocomplete.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_autocomplete\Element;
 
+use Drupal\search_api_autocomplete\SearchInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\Element\Textfield;
@@ -38,7 +39,7 @@ class SearchApiAutocomplete extends Textfield {
    *   - #search_id: The entity ID of the Search config entity.
    *   - #additional_data: (optional) Additional data to pass to the
    *     autocomplete callback as GET parameters.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -55,7 +56,7 @@ class SearchApiAutocomplete extends Textfield {
     if (empty($element['#search_id'])) {
       throw new \InvalidArgumentException('Missing required "#search_id" parameter.');
     }
-    /** @var \Drupal\search_api_autocomplete\SearchInterface $search */
+    /** @var SearchInterface $search */
     $search = Search::load($element['#search_id']);
     if (!$search) {
       $search_id = $element['#search_id'];
diff --git a/src/Entity/Search.php b/src/Entity/Search.php
index 5dcd065..845d914 100644
--- a/src/Entity/Search.php
+++ b/src/Entity/Search.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api_autocomplete\Entity;
 
+use Drupal\search_api\IndexInterface;
+use Drupal\search_api_autocomplete\Search\SearchPluginInterface;
+use Drupal\search_api_autocomplete\Plugin\PluginInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -87,7 +90,7 @@ class Search extends ConfigEntityBase implements SearchInterface {
   /**
    * The search index instance.
    *
-   * @var \Drupal\search_api\IndexInterface|null
+   * @var IndexInterface|null
    *
    * @see \Drupal\search_api_autocomplete\Entity\Search::getIndex()
    */
@@ -128,7 +131,7 @@ class Search extends ConfigEntityBase implements SearchInterface {
   /**
    * The loaded suggester plugins.
    *
-   * @var \Drupal\search_api_autocomplete\Suggester\SuggesterInterface[]|null
+   * @var SuggesterInterface[]|null
    */
   protected $suggesterInstances;
 
@@ -154,7 +157,7 @@ class Search extends ConfigEntityBase implements SearchInterface {
   /**
    * The search plugin.
    *
-   * @var \Drupal\search_api_autocomplete\Search\SearchPluginInterface|null
+   * @var SearchPluginInterface|null
    */
   protected $searchPlugin;
 
@@ -412,7 +415,7 @@ class Search extends ConfigEntityBase implements SearchInterface {
 
     // Make sure only one search entity is ever saved for a certain search
     // plugin.
-    /** @var \Drupal\search_api_autocomplete\Entity\SearchStorage $storage */
+    /** @var SearchStorage $storage */
     $search = $storage->loadBySearchPlugin($this->getSearchPluginId());
     if ($search && $search->id() !== $this->id()) {
       throw new SearchApiAutocompleteException("Attempt to save autocomplete search '{$this->id()}' with search plugin '{$this->getSearchPluginId()}' when this plugin is already used for '{$search->id()}'");
@@ -691,7 +694,7 @@ class Search extends ConfigEntityBase implements SearchInterface {
   /**
    * Retrieves all the plugins contained in this search entity.
    *
-   * @return \Drupal\search_api_autocomplete\Plugin\PluginInterface[][]
+   * @return PluginInterface[][]
    *   All plugins contained in this search, keyed by the plugin type
    *   ("search_plugin" or "suggesters") and their plugin IDs.
    */
diff --git a/src/Entity/SearchStorage.php b/src/Entity/SearchStorage.php
index be7f483..8dd6019 100644
--- a/src/Entity/SearchStorage.php
+++ b/src/Entity/SearchStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_autocomplete\Entity;
 
+use Drupal\search_api_autocomplete\SearchInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
 
 /**
@@ -15,7 +16,7 @@ class SearchStorage extends ConfigEntityStorage {
    * @param string $plugin_id
    *   The search plugin ID.
    *
-   * @return \Drupal\search_api_autocomplete\SearchInterface|null
+   * @return SearchInterface|null
    *   The autocomplete search entity with that plugin, or NULL if none exists.
    */
   public function loadBySearchPlugin($plugin_id) {
@@ -23,7 +24,7 @@ class SearchStorage extends ConfigEntityStorage {
     // $matching_entities = $this->getQuery()
     //   ->exists("search_settings.$plugin_id")
     //   ->execute();
-    /** @var \Drupal\search_api_autocomplete\SearchInterface $search */
+    /** @var SearchInterface $search */
     foreach ($this->loadMultiple() as $search) {
       if ($search->getSearchPluginId() === $plugin_id) {
         return $search;
diff --git a/src/Form/IndexOverviewForm.php b/src/Form/IndexOverviewForm.php
index 8e6e6a4..a616b94 100644
--- a/src/Form/IndexOverviewForm.php
+++ b/src/Form/IndexOverviewForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_autocomplete\Form;
 
+use Drupal\search_api_autocomplete\SearchInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -28,68 +29,68 @@ class IndexOverviewForm extends FormBase {
   /**
    * The autocomplete suggester manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $suggesterManager;
 
   /**
    * The search plugin manager.
    *
-   * @var \Drupal\search_api_autocomplete\Search\SearchPluginManager
+   * @var SearchPluginManager
    */
   protected $searchPluginManager;
 
   /**
    * The plugin helper.
    *
-   * @var \Drupal\search_api_autocomplete\Utility\PluginHelperInterface
+   * @var PluginHelperInterface
    */
   protected $pluginHelper;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The redirect destination.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Creates a new AutocompleteSearchAdminOverview instance.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $suggester_manager
+   * @param PluginManagerInterface $suggester_manager
    *   The suggester manager.
-   * @param \Drupal\search_api_autocomplete\Search\SearchPluginManager $search_plugin_manager
+   * @param SearchPluginManager $search_plugin_manager
    *   The search plugin manager.
-   * @param \Drupal\search_api_autocomplete\Utility\PluginHelperInterface $plugin_helper
+   * @param PluginHelperInterface $plugin_helper
    *   The plugin helper.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(PluginManagerInterface $suggester_manager, SearchPluginManager $search_plugin_manager, PluginHelperInterface $plugin_helper, EntityTypeManagerInterface $entity_type_manager, RedirectDestinationInterface $redirect_destination, MessengerInterface $messenger, ModuleHandlerInterface $module_handler) {
@@ -148,7 +149,7 @@ class IndexOverviewForm extends FormBase {
     $form['#tree'] = TRUE;
     $form['#title'] = $this->t('Manage autocomplete for search index %label', ['%label' => $search_api_index->label()]);
 
-    /** @var \Drupal\search_api_autocomplete\SearchInterface[] $searches_by_plugin */
+    /** @var SearchInterface[] $searches_by_plugin */
     $searches_by_plugin = [];
     foreach ($this->loadAutocompleteSearchByIndex($index_id) as $search) {
       $searches_by_plugin[$search->getSearchPluginId()] = $search;
@@ -240,13 +241,13 @@ class IndexOverviewForm extends FormBase {
   /**
    * Creates a new search entity for the given search plugin.
    *
-   * @param \Drupal\search_api_autocomplete\Search\SearchPluginInterface $plugin
+   * @param SearchPluginInterface $plugin
    *   The search plugin for which to create a search entity.
    * @param true[] $used_ids
    *   The IDs of the searches created so far for this form (to avoid
    *   duplicates). IDs are used as array keys, mapping to TRUE.
    *
-   * @return \Drupal\search_api_autocomplete\SearchInterface
+   * @return SearchInterface
    *   The new search entity.
    */
   protected function createSearchForPlugin(SearchPluginInterface $plugin, array $used_ids) {
@@ -299,7 +300,7 @@ class IndexOverviewForm extends FormBase {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $messages = $this->t('The settings have been saved.');
     foreach ($form_state->getValue('searches') as $id => $enabled) {
-      /** @var \Drupal\search_api_autocomplete\SearchInterface $search */
+      /** @var SearchInterface $search */
       $search = $form_state->get(['searches', $id]);
       if ($search && $search->status() != $enabled) {
         $change = TRUE;
@@ -325,11 +326,11 @@ class IndexOverviewForm extends FormBase {
    * @param string $index_id
    *   The index ID.
    *
-   * @return \Drupal\search_api_autocomplete\SearchInterface[]
+   * @return SearchInterface[]
    *   An array of autocomplete plugins.
    */
   protected function loadAutocompleteSearchByIndex($index_id) {
-    /** @var \Drupal\search_api_autocomplete\SearchInterface[] $searches */
+    /** @var SearchInterface[] $searches */
     $searches = $this->entityTypeManager
       ->getStorage('search_api_autocomplete_search')
       ->loadByProperties([
diff --git a/src/Form/SearchEditForm.php b/src/Form/SearchEditForm.php
index 582283f..bc32dbc 100644
--- a/src/Form/SearchEditForm.php
+++ b/src/Form/SearchEditForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_autocomplete\Form;
 
+use Drupal\search_api_autocomplete\SearchInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\SortArray;
@@ -23,48 +24,48 @@ class SearchEditForm extends EntityForm {
   /**
    * The entity.
    *
-   * @var \Drupal\search_api_autocomplete\SearchInterface
+   * @var SearchInterface
    */
   protected $entity;
 
   /**
    * The autocomplete suggester manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $suggesterManager;
 
   /**
    * The autocomplete search plugin manager.
    *
-   * @var \Drupal\search_api_autocomplete\Search\SearchPluginManager
+   * @var SearchPluginManager
    */
   protected $searchPluginManager;
 
   /**
    * The logger to use.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Creates a new SearchEditForm instance.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $suggester_manager
+   * @param PluginManagerInterface $suggester_manager
    *   The suggester manager.
-   * @param \Drupal\search_api_autocomplete\Search\SearchPluginManager $search_plugin_manager
+   * @param SearchPluginManager $search_plugin_manager
    *   The search plugin manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(PluginManagerInterface $suggester_manager, SearchPluginManager $search_plugin_manager, LoggerInterface $logger, MessengerInterface $messenger) {
@@ -78,7 +79,7 @@ class SearchEditForm extends EntityForm {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Psr\Log\LoggerInterface $logger */
+    /** @var LoggerInterface $logger */
     $logger = $container->get('logger.channel.search_api_autocomplete');
     return new static(
       $container->get('plugin.manager.search_api_autocomplete.suggester'),
@@ -185,7 +186,7 @@ class SearchEditForm extends EntityForm {
   /**
    * Builds a form for the search's suggester plugins.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the (parent) form.
    *
    * @return array
@@ -336,7 +337,7 @@ class SearchEditForm extends EntityForm {
 
     // Iterate over all suggesters that are enabled.
     $available_suggesters = $this->getAvailableSuggesters();
-    /** @var \Drupal\search_api_autocomplete\Suggester\SuggesterInterface[] $enabled_suggesters */
+    /** @var SuggesterInterface[] $enabled_suggesters */
     $enabled_suggesters = array_intersect_key($available_suggesters, array_filter($values['suggesters']['enabled']));
     $suggester_weights = [];
     $suggester_limits = [];
@@ -371,7 +372,7 @@ class SearchEditForm extends EntityForm {
   /**
    * Returns all suggesters available for this search.
    *
-   * @return \Drupal\search_api_autocomplete\Suggester\SuggesterInterface[]
+   * @return SuggesterInterface[]
    *   The available suggesters, sorted by label.
    */
   protected function getAvailableSuggesters() {
@@ -386,7 +387,7 @@ class SearchEditForm extends EntityForm {
       if (class_exists($definition['class'])) {
         $method = [$definition['class'], 'supportsSearch'];
         if (call_user_func($method, $this->entity)) {
-          /** @var \Drupal\search_api_autocomplete\Suggester\SuggesterInterface $suggester */
+          /** @var SuggesterInterface $suggester */
           $suggester = $this->suggesterManager
             ->createInstance($plugin_id, $settings);
           $suggesters[$plugin_id] = $suggester;
diff --git a/src/Permissions.php b/src/Permissions.php
index 8222a62..3f5e774 100644
--- a/src/Permissions.php
+++ b/src/Permissions.php
@@ -17,14 +17,14 @@ class Permissions implements ContainerInjectionInterface {
   /**
    * The entity storage service.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * Constructs a Permissions object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage service.
    */
   public function __construct(EntityStorageInterface $storage) {
@@ -48,7 +48,7 @@ class Permissions implements ContainerInjectionInterface {
    */
   public function bySearch() {
     $perms = [];
-    /** @var \Drupal\search_api_autocomplete\SearchInterface $search */
+    /** @var SearchInterface $search */
     foreach ($this->storage->loadMultiple() as $id => $search) {
       $perms['use search_api_autocomplete for ' . $id] = [
         'title' => $this->t('Use autocomplete for the %search search', ['%search' => $search->label()]),
diff --git a/src/Plugin/PluginBase.php b/src/Plugin/PluginBase.php
index 2f240a2..bb04212 100644
--- a/src/Plugin/PluginBase.php
+++ b/src/Plugin/PluginBase.php
@@ -13,7 +13,7 @@ abstract class PluginBase extends ConfigurablePluginBase implements PluginInterf
   /**
    * The search this suggester is attached to.
    *
-   * @var \Drupal\search_api_autocomplete\SearchInterface
+   * @var SearchInterface
    */
   protected $search;
 
diff --git a/src/Plugin/PluginInterface.php b/src/Plugin/PluginInterface.php
index 29905fb..a24000f 100644
--- a/src/Plugin/PluginInterface.php
+++ b/src/Plugin/PluginInterface.php
@@ -13,7 +13,7 @@ interface PluginInterface extends ConfigurablePluginInterface {
   /**
    * Retrieves the search this plugin is configured for.
    *
-   * @return \Drupal\search_api_autocomplete\SearchInterface|null
+   * @return SearchInterface|null
    *   The search this plugin is configured for, or NULL if no search entity has
    *   yet been set for it.
    */
@@ -22,7 +22,7 @@ interface PluginInterface extends ConfigurablePluginInterface {
   /**
    * Sets the search this plugin is configured for.
    *
-   * @param \Drupal\search_api_autocomplete\SearchInterface $search
+   * @param SearchInterface $search
    *   The new search entity this plugin should be linked to.
    *
    * @return $this
diff --git a/src/Plugin/search_api_autocomplete/search/Page.php b/src/Plugin/search_api_autocomplete/search/Page.php
index bef1b27..9ccf211 100644
--- a/src/Plugin/search_api_autocomplete/search/Page.php
+++ b/src/Plugin/search_api_autocomplete/search/Page.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_autocomplete\Plugin\search_api_autocomplete\search;
 
+use Drupal\search_api\ParseMode\ParseModeInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -30,21 +31,21 @@ class Page extends SearchPluginBase implements ContainerFactoryPluginInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The query helper service.
    *
-   * @var \Drupal\search_api\Utility\QueryHelperInterface|null
+   * @var QueryHelperInterface|null
    */
   protected $queryHelper;
 
   /**
    * The parse mode manager.
    *
-   * @var \Drupal\search_api\ParseMode\ParseModePluginManager|null
+   * @var ParseModePluginManager|null
    */
   protected $parseModeManager;
 
@@ -57,7 +58,7 @@ class Page extends SearchPluginBase implements ContainerFactoryPluginInterface {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ -78,7 +79,7 @@ class Page extends SearchPluginBase implements ContainerFactoryPluginInterface {
 
     $plugin->setQueryHelper($container->get('search_api.query_helper'));
     $plugin->setParseModeManager($container->get('plugin.manager.search_api.parse_mode'));
-    /** @var \Psr\Log\LoggerInterface $logger */
+    /** @var LoggerInterface $logger */
     $logger = $container->get('logger.channel.search_api_autocomplete');
     $plugin->setLogger($logger);
 
@@ -88,7 +89,7 @@ class Page extends SearchPluginBase implements ContainerFactoryPluginInterface {
   /**
    * Retrieves the query helper.
    *
-   * @return \Drupal\search_api\Utility\QueryHelperInterface
+   * @return QueryHelperInterface
    *   The query helper.
    */
   public function getQueryHelper() {
@@ -98,7 +99,7 @@ class Page extends SearchPluginBase implements ContainerFactoryPluginInterface {
   /**
    * Sets the query helper.
    *
-   * @param \Drupal\search_api\Utility\QueryHelperInterface $query_helper
+   * @param QueryHelperInterface $query_helper
    *   The new query helper.
    *
    * @return $this
@@ -111,7 +112,7 @@ class Page extends SearchPluginBase implements ContainerFactoryPluginInterface {
   /**
    * Retrieves the parse mode manager.
    *
-   * @return \Drupal\search_api\ParseMode\ParseModePluginManager
+   * @return ParseModePluginManager
    *   The parse mode manager.
    */
   public function getParseModeManager(): ParseModePluginManager {
@@ -121,7 +122,7 @@ class Page extends SearchPluginBase implements ContainerFactoryPluginInterface {
   /**
    * Sets the parse mode manager.
    *
-   * @param \Drupal\search_api\ParseMode\ParseModePluginManager $parse_mode_manager
+   * @param ParseModePluginManager $parse_mode_manager
    *   The new parse mode manager.
    *
    * @return $this
@@ -134,7 +135,7 @@ class Page extends SearchPluginBase implements ContainerFactoryPluginInterface {
   /**
    * Retrieves the logger.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger.
    */
   public function getLogger(): LoggerInterface {
@@ -157,7 +158,7 @@ class Page extends SearchPluginBase implements ContainerFactoryPluginInterface {
     }
     if ($parse_mode_id !== $query->getParseMode()->getPluginId()) {
       try {
-        /** @var \Drupal\search_api\ParseMode\ParseModeInterface $parse_mode */
+        /** @var ParseModeInterface $parse_mode */
         $parse_mode = $this->getParseModeManager()
           ->createInstance($parse_mode_id);
         $query->setParseMode($parse_mode);
diff --git a/src/Plugin/search_api_autocomplete/search/Views.php b/src/Plugin/search_api_autocomplete/search/Views.php
index fc96572..c87e0aa 100644
--- a/src/Plugin/search_api_autocomplete/search/Views.php
+++ b/src/Plugin/search_api_autocomplete/search/Views.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_autocomplete\Plugin\search_api_autocomplete\search;
 
+use Drupal\views\Plugin\views\display\DisplayPluginBase;
+use Drupal\views\Plugin\views\filter\FilterPluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\search_api\Plugin\PluginFormTrait;
@@ -32,7 +34,7 @@ class Views extends SearchPluginBase implements PluginFormInterface {
   /**
    * The views executable factory.
    *
-   * @var \Drupal\views\ViewExecutableFactory|null
+   * @var ViewExecutableFactory|null
    */
   protected $viewsExecutableFactory;
 
@@ -51,7 +53,7 @@ class Views extends SearchPluginBase implements PluginFormInterface {
   /**
    * Retrieves the Views executable factory.
    *
-   * @return \Drupal\views\ViewExecutableFactory
+   * @return ViewExecutableFactory
    *   The Views executable factory.
    */
   public function getViewsExecutableFactory() {
@@ -61,7 +63,7 @@ class Views extends SearchPluginBase implements PluginFormInterface {
   /**
    * Sets the Views executable factory.
    *
-   * @param \Drupal\views\ViewExecutableFactory $views_executable_factory
+   * @param ViewExecutableFactory $views_executable_factory
    *   The new Views executable factory.
    *
    * @return $this
@@ -94,7 +96,7 @@ class Views extends SearchPluginBase implements PluginFormInterface {
     $options = [];
     $view->initDisplay();
     foreach ($view->displayHandlers as $id => $display) {
-      /** @var \Drupal\views\Plugin\views\display\DisplayPluginBase $display */
+      /** @var DisplayPluginBase $display */
       $options[$id] = $display->display['display_title'];
     }
 
@@ -178,7 +180,7 @@ class Views extends SearchPluginBase implements PluginFormInterface {
     // which use the Form API actually don't seem to cause problems, but it's
     // still better to be on the safe side here and just disabled "Required" for
     // all filters. (It also makes the code simpler.)
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     foreach ($view->display_handler->getHandlers('filter') as $filter) {
       $filter->options['expose']['required'] = FALSE;
     }
diff --git a/src/Plugin/search_api_autocomplete/search/ViewsDeriver.php b/src/Plugin/search_api_autocomplete/search/ViewsDeriver.php
index 36052fa..c7d24d2 100644
--- a/src/Plugin/search_api_autocomplete/search/ViewsDeriver.php
+++ b/src/Plugin/search_api_autocomplete/search/ViewsDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_autocomplete\Plugin\search_api_autocomplete\search;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\views\ViewEntityInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\search_api\IndexInterface;
 use Drupal\search_api\Plugin\views\query\SearchApiQuery;
@@ -22,14 +24,14 @@ class ViewsDeriver extends SearchPluginDeriverBase {
       $this->derivatives = [];
 
       try {
-        /** @var \Drupal\Core\Entity\EntityStorageInterface $views_storage */
+        /** @var EntityStorageInterface $views_storage */
         $views_storage = $this->getEntityTypeManager()->getStorage('view');
       }
       catch (PluginException $e) {
         return $this->derivatives;
       }
 
-      /** @var \Drupal\views\ViewEntityInterface $view */
+      /** @var ViewEntityInterface $view */
       foreach ($views_storage->loadMultiple() as $view) {
         $index = SearchApiQuery::getIndexFromTable($view->get('base_table'));
         if (!($index instanceof IndexInterface)) {
diff --git a/src/Plugin/search_api_autocomplete/suggester/LiveResults.php b/src/Plugin/search_api_autocomplete/suggester/LiveResults.php
index 16b8d11..6ac636a 100644
--- a/src/Plugin/search_api_autocomplete/suggester/LiveResults.php
+++ b/src/Plugin/search_api_autocomplete/suggester/LiveResults.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_autocomplete\Plugin\search_api_autocomplete\suggester;
 
+use Psr\Log\LoggerInterface;
+use Drupal\Core\Entity\EntityViewModeInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Entity\EntityInterface;
@@ -35,14 +37,14 @@ class LiveResults extends SuggesterPluginBase implements PluginFormInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
   /**
    * The Search API processor plugin manager.
    *
-   * @var \Drupal\search_api\Processor\ProcessorPluginManager
+   * @var ProcessorPluginManager
    */
   protected $processorPluginManager;
 
@@ -63,7 +65,7 @@ class LiveResults extends SuggesterPluginBase implements PluginFormInterface {
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ -73,7 +75,7 @@ class LiveResults extends SuggesterPluginBase implements PluginFormInterface {
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
@@ -86,7 +88,7 @@ class LiveResults extends SuggesterPluginBase implements PluginFormInterface {
   /**
    * Retrieves the Search API processor plugin manager.
    *
-   * @return \Drupal\search_api\Processor\ProcessorPluginManager
+   * @return ProcessorPluginManager
    *   The Search API processor plugin manager.
    */
   public function getProcessorPluginManager(): ProcessorPluginManager {
@@ -96,7 +98,7 @@ class LiveResults extends SuggesterPluginBase implements PluginFormInterface {
   /**
    * Sets the Search API processor plugin manager.
    *
-   * @param \Drupal\search_api\Processor\ProcessorPluginManager $processor_plugin_manager
+   * @param ProcessorPluginManager $processor_plugin_manager
    *   The Search API processor plugin manager.
    *
    * @return $this
@@ -109,7 +111,7 @@ class LiveResults extends SuggesterPluginBase implements PluginFormInterface {
   /**
    * Retrieves the logger.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger.
    */
   public function getLogger() {
@@ -401,7 +403,7 @@ class LiveResults extends SuggesterPluginBase implements PluginFormInterface {
         if ($view_mode === '') {
           continue;
         }
-        /** @var \Drupal\Core\Entity\EntityViewModeInterface $view_mode_entity */
+        /** @var EntityViewModeInterface $view_mode_entity */
         $view_mode_entity = $this->getEntityTypeManager()
           ->getStorage('entity_view_mode')
           ->load($entity_type_id . '.' . $view_mode);
diff --git a/src/Plugin/search_api_autocomplete/suggester/Server.php b/src/Plugin/search_api_autocomplete/suggester/Server.php
index f505d52..50b0fd8 100644
--- a/src/Plugin/search_api_autocomplete/suggester/Server.php
+++ b/src/Plugin/search_api_autocomplete/suggester/Server.php
@@ -35,14 +35,14 @@ class Server extends SuggesterPluginBase implements PluginFormInterface {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|null
+   * @var LanguageManagerInterface|null
    */
   protected $languageManager;
 
   /**
    * The transliteration.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface|null
+   * @var TransliterationInterface|null
    */
   protected $transliterator;
 
@@ -69,7 +69,7 @@ class Server extends SuggesterPluginBase implements PluginFormInterface {
   /**
    * Retrieves the language manager.
    *
-   * @return \Drupal\Core\Language\LanguageManagerInterface
+   * @return LanguageManagerInterface
    *   The language manager.
    */
   public function getLanguageManager() {
@@ -79,7 +79,7 @@ class Server extends SuggesterPluginBase implements PluginFormInterface {
   /**
    * Sets the language manager.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The new language manager.
    *
    * @return $this
@@ -92,7 +92,7 @@ class Server extends SuggesterPluginBase implements PluginFormInterface {
   /**
    * Retrieves the transliteration.
    *
-   * @return \Drupal\Component\Transliteration\TransliterationInterface
+   * @return TransliterationInterface
    *   The transliteration.
    */
   public function getTransliterator() {
@@ -102,7 +102,7 @@ class Server extends SuggesterPluginBase implements PluginFormInterface {
   /**
    * Sets the transliteration.
    *
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliterator
+   * @param TransliterationInterface $transliterator
    *   The new transliteration.
    *
    * @return $this
@@ -182,7 +182,7 @@ class Server extends SuggesterPluginBase implements PluginFormInterface {
   /**
    * Retrieves the backend for the given index, if it supports autocomplete.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
    *
    * @return \Drupal\search_api_autocomplete\AutocompleteBackendInterface|null
diff --git a/src/Search/SearchPluginBase.php b/src/Search/SearchPluginBase.php
index 4b49d50..c8839ce 100644
--- a/src/Search/SearchPluginBase.php
+++ b/src/Search/SearchPluginBase.php
@@ -38,7 +38,7 @@ abstract class SearchPluginBase extends PluginBase implements SearchPluginInterf
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -58,7 +58,7 @@ abstract class SearchPluginBase extends PluginBase implements SearchPluginInterf
   /**
    * Retrieves the entity manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity manager.
    */
   public function getEntityTypeManager() {
@@ -68,7 +68,7 @@ abstract class SearchPluginBase extends PluginBase implements SearchPluginInterf
   /**
    * Sets the entity manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    *
    * @return $this
diff --git a/src/Search/SearchPluginDeriverBase.php b/src/Search/SearchPluginDeriverBase.php
index d698b1d..2bdbbca 100644
--- a/src/Search/SearchPluginDeriverBase.php
+++ b/src/Search/SearchPluginDeriverBase.php
@@ -30,7 +30,7 @@ abstract class SearchPluginDeriverBase extends DeriverBase implements ContainerD
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -68,7 +68,7 @@ abstract class SearchPluginDeriverBase extends DeriverBase implements ContainerD
   /**
    * Retrieves the entity manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity manager.
    */
   public function getEntityTypeManager() {
@@ -78,7 +78,7 @@ abstract class SearchPluginDeriverBase extends DeriverBase implements ContainerD
   /**
    * Sets the entity manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    *
    * @return $this
diff --git a/src/Search/SearchPluginInterface.php b/src/Search/SearchPluginInterface.php
index 7623a47..a2d45bb 100644
--- a/src/Search/SearchPluginInterface.php
+++ b/src/Search/SearchPluginInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api_autocomplete\Search;
 
+use Drupal\search_api\IndexInterface;
+use Drupal\search_api\Query\QueryInterface;
+use Drupal\search_api_autocomplete\SearchApiAutocompleteException;
 use Drupal\search_api_autocomplete\Plugin\PluginInterface;
 
 /**
@@ -46,7 +49,7 @@ interface SearchPluginInterface extends PluginInterface {
   /**
    * Retrieves the index to which this search plugin belongs.
    *
-   * @return \Drupal\search_api\IndexInterface
+   * @return IndexInterface
    *   The search plugin's index.
    */
   public function getIndex();
@@ -60,10 +63,10 @@ interface SearchPluginInterface extends PluginInterface {
    * @param array $data
    *   (optional) Additional data passed to the callback.
    *
-   * @return \Drupal\search_api\Query\QueryInterface
+   * @return QueryInterface
    *   The created query.
    *
-   * @throws \Drupal\search_api_autocomplete\SearchApiAutocompleteException
+   * @throws SearchApiAutocompleteException
    *   Thrown if the query couldn't be created.
    */
   public function createQuery($keys, array $data = []);
diff --git a/src/Search/SearchPluginManager.php b/src/Search/SearchPluginManager.php
index 075c2c5..d90ba66 100644
--- a/src/Search/SearchPluginManager.php
+++ b/src/Search/SearchPluginManager.php
@@ -23,9 +23,9 @@ class SearchPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/SearchInterface.php b/src/SearchInterface.php
index fcd1a88..9187505 100644
--- a/src/SearchInterface.php
+++ b/src/SearchInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api_autocomplete;
 
+use Drupal\search_api\IndexInterface;
+use Drupal\search_api_autocomplete\Search\SearchPluginInterface;
+use Drupal\search_api\Query\QueryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\search_api_autocomplete\Suggester\SuggesterInterface;
 
@@ -37,10 +40,10 @@ interface SearchInterface extends ConfigEntityInterface {
   /**
    * Retrieves the index this search belongs to.
    *
-   * @return \Drupal\search_api\IndexInterface
+   * @return IndexInterface
    *   The index this search belongs to.
    *
-   * @throws \Drupal\search_api_autocomplete\SearchApiAutocompleteException
+   * @throws SearchApiAutocompleteException
    *   Thrown if the index couldn't be retrieved.
    */
   public function getIndex();
@@ -48,7 +51,7 @@ interface SearchInterface extends ConfigEntityInterface {
   /**
    * Retrieves this search's suggester plugins.
    *
-   * @return \Drupal\search_api_autocomplete\Suggester\SuggesterInterface[]
+   * @return SuggesterInterface[]
    *   The suggester plugins used by this search, keyed by plugin ID.
    */
   public function getSuggesters();
@@ -83,10 +86,10 @@ interface SearchInterface extends ConfigEntityInterface {
    * @param string $suggester_id
    *   The ID of the suggester plugin to return.
    *
-   * @return \Drupal\search_api_autocomplete\Suggester\SuggesterInterface
+   * @return SuggesterInterface
    *   The suggester plugin with the given ID.
    *
-   * @throws \Drupal\search_api_autocomplete\SearchApiAutocompleteException
+   * @throws SearchApiAutocompleteException
    *   Thrown if the specified suggester isn't enabled for this search, or
    *   couldn't be loaded.
    */
@@ -97,7 +100,7 @@ interface SearchInterface extends ConfigEntityInterface {
    *
    * An existing suggester with the same ID will be replaced.
    *
-   * @param \Drupal\search_api_autocomplete\Suggester\SuggesterInterface $suggester
+   * @param SuggesterInterface $suggester
    *   The suggester to be added.
    *
    * @return $this
@@ -117,7 +120,7 @@ interface SearchInterface extends ConfigEntityInterface {
   /**
    * Sets this search's suggester plugins.
    *
-   * @param \Drupal\search_api_autocomplete\Suggester\SuggesterInterface[] $suggesters
+   * @param SuggesterInterface[] $suggesters
    *   An array of suggesters.
    *
    * @return $this
@@ -159,10 +162,10 @@ interface SearchInterface extends ConfigEntityInterface {
   /**
    * Retrieves the search plugin.
    *
-   * @return \Drupal\search_api_autocomplete\Search\SearchPluginInterface
+   * @return SearchPluginInterface
    *   The search's search plugin.
    *
-   * @throws \Drupal\search_api_autocomplete\SearchApiAutocompleteException
+   * @throws SearchApiAutocompleteException
    *   Thrown if the search plugin couldn't be instantiated.
    */
   public function getSearchPlugin();
@@ -216,12 +219,12 @@ interface SearchInterface extends ConfigEntityInterface {
    * @param array $data
    *   (optional) Additional data passed to the callback.
    *
-   * @return \Drupal\search_api\Query\QueryInterface
+   * @return QueryInterface
    *   The query that would normally be executed when $keys is entered as the
    *   keywords for this search. Callers should check whether keywords are
    *   actually set on the query.
    *
-   * @throws \Drupal\search_api_autocomplete\SearchApiAutocompleteException
+   * @throws SearchApiAutocompleteException
    *   Thrown if the query couldn't be created.
    */
   public function createQuery($keys, array $data = []);
diff --git a/src/Suggester/SuggesterInterface.php b/src/Suggester/SuggesterInterface.php
index 8ccdd4f..d7e857a 100644
--- a/src/Suggester/SuggesterInterface.php
+++ b/src/Suggester/SuggesterInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_autocomplete\Suggester;
 
+use Drupal\search_api_autocomplete\Suggestion\SuggestionInterface;
 use Drupal\search_api\Query\QueryInterface;
 use Drupal\search_api_autocomplete\Plugin\PluginInterface;
 use Drupal\search_api_autocomplete\SearchInterface;
@@ -19,7 +20,7 @@ interface SuggesterInterface extends PluginInterface {
   /**
    * Determines whether this plugin supports the given search.
    *
-   * @param \Drupal\search_api_autocomplete\SearchInterface $search
+   * @param SearchInterface $search
    *   The search in question.
    *
    * @return bool
@@ -63,7 +64,7 @@ interface SuggesterInterface extends PluginInterface {
    *   ];
    * @endcode
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   A query representing the completed user input so far.
    * @param string $incomplete_key
    *   The start of another fulltext keyword for the search, which should be
@@ -73,7 +74,7 @@ interface SuggesterInterface extends PluginInterface {
    * @param string $user_input
    *   The complete user input for the fulltext search keywords so far.
    *
-   * @return \Drupal\search_api_autocomplete\Suggestion\SuggestionInterface[]
+   * @return SuggestionInterface[]
    *   An array of autocomplete suggestions.
    */
   public function getAutocompleteSuggestions(QueryInterface $query, $incomplete_key, $user_input);
diff --git a/src/Suggester/SuggesterManager.php b/src/Suggester/SuggesterManager.php
index e3875bd..0a055a2 100644
--- a/src/Suggester/SuggesterManager.php
+++ b/src/Suggester/SuggesterManager.php
@@ -23,9 +23,9 @@ class SuggesterManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Suggestion/Suggestion.php b/src/Suggestion/Suggestion.php
index 887b14f..ed1ecbe 100644
--- a/src/Suggestion/Suggestion.php
+++ b/src/Suggestion/Suggestion.php
@@ -19,7 +19,7 @@ class Suggestion implements SuggestionInterface {
   /**
    * A URL to which the suggestion should redirect.
    *
-   * @var \Drupal\Core\Url|null
+   * @var Url|null
    */
   protected $url;
 
@@ -77,7 +77,7 @@ class Suggestion implements SuggestionInterface {
    *
    * @param string|null $suggested_keys
    *   (optional) The suggested keys.
-   * @param \Drupal\Core\Url|null $url
+   * @param Url|null $url
    *   (optional) The URL to redirect to.
    * @param string|null $prefix
    *   (optional) The prefix for the suggestion.
diff --git a/src/Suggestion/SuggestionFactory.php b/src/Suggestion/SuggestionFactory.php
index 131adfb..2a907e7 100644
--- a/src/Suggestion/SuggestionFactory.php
+++ b/src/Suggestion/SuggestionFactory.php
@@ -36,7 +36,7 @@ class SuggestionFactory {
    * @param int|null $results_count
    *   (optional) The estimated number of results.
    *
-   * @return \Drupal\search_api_autocomplete\Suggestion\SuggestionInterface
+   * @return SuggestionInterface
    *   An autocomplete suggestion.
    */
   public function createFromSuggestedKeys($suggested_keys, $results_count = NULL) {
@@ -77,7 +77,7 @@ class SuggestionFactory {
    * @param int|null $results_count
    *   (optional) The estimated number of results.
    *
-   * @return \Drupal\search_api_autocomplete\Suggestion\SuggestionInterface
+   * @return SuggestionInterface
    *   An autocomplete suggestion.
    */
   public function createFromSuggestionSuffix($suggestion_suffix, $results_count = NULL) {
@@ -95,7 +95,7 @@ class SuggestionFactory {
   /**
    * Creates a suggestion that redirects to the specified URL.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL to which this suggestion should redirect.
    * @param string|null $label
    *   (optional) The label to set for the suggestion. Only makes sense if
@@ -103,7 +103,7 @@ class SuggestionFactory {
    * @param array|null $render
    *   (optional) The render array that should be displayed for this suggestion.
    *
-   * @return \Drupal\search_api_autocomplete\Suggestion\SuggestionInterface
+   * @return SuggestionInterface
    *   An autocomplete suggestion.
    */
   public function createUrlSuggestion(Url $url, $label = NULL, array $render = NULL) {
diff --git a/src/Suggestion/SuggestionInterface.php b/src/Suggestion/SuggestionInterface.php
index 72cb74e..83eb5cb 100644
--- a/src/Suggestion/SuggestionInterface.php
+++ b/src/Suggestion/SuggestionInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_autocomplete\Suggestion;
 
+use Drupal\Core\Url;
 use Drupal\Core\Render\RenderableInterface;
 
 /**
@@ -25,7 +26,7 @@ interface SuggestionInterface extends RenderableInterface {
    * user input in the text field. This overrides the normal behavior and thus
    * makes the suggested keys obsolete.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The URL to which the suggestion should redirect to, or NULL if none was
    *   set.
    */
@@ -110,7 +111,7 @@ interface SuggestionInterface extends RenderableInterface {
   /**
    * Sets the URL.
    *
-   * @param \Drupal\Core\Url|null $url
+   * @param Url|null $url
    *   The URL.
    *
    * @return $this
diff --git a/src/Tests/TestsHelper.php b/src/Tests/TestsHelper.php
index 62aab21..987fe8e 100644
--- a/src/Tests/TestsHelper.php
+++ b/src/Tests/TestsHelper.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_autocomplete\Tests;
 
+use Drupal\search_api_autocomplete\Suggestion\SuggestionInterface;
+use Drupal\search_api\SearchApiException;
 use Drupal\search_api\Backend\BackendInterface;
 use Drupal\search_api\Query\QueryInterface;
 use Drupal\search_api\Utility\Utility;
@@ -31,12 +33,12 @@ class TestsHelper {
   /**
    * Retrieves autocompletion suggestions for some user input.
    *
-   * @param \Drupal\search_api\Backend\BackendInterface $backend
+   * @param BackendInterface $backend
    *   The backend on which this method was originally called.
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   A query representing the base search, with all completely entered words
    *   in the user input so far as the search keys.
-   * @param \Drupal\search_api_autocomplete\SearchInterface $search
+   * @param SearchInterface $search
    *   An object containing details about the search the user is on, and
    *   settings for the autocompletion. See the class documentation for details.
    *   Especially $search->getOptions() should be checked for settings, like
@@ -49,7 +51,7 @@ class TestsHelper {
    * @param string $user_input
    *   The complete user input for the fulltext search keywords so far.
    *
-   * @return \Drupal\search_api_autocomplete\Suggestion\SuggestionInterface[]
+   * @return SuggestionInterface[]
    *   An array of autocomplete suggestions.
    *
    * @see \Drupal\search_api_autocomplete\AutocompleteBackendInterface::getAutocompleteSuggestions()
@@ -69,12 +71,12 @@ class TestsHelper {
   /**
    * Executes a search on this server.
    *
-   * @param \Drupal\search_api\Backend\BackendInterface $backend
+   * @param BackendInterface $backend
    *   The test backend on which the query is executed.
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query to execute.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   If the index doesn't have the "entity:entity_test_mulrev_changed"
    *   datasource.
    *
diff --git a/src/Utility/AutocompleteHelper.php b/src/Utility/AutocompleteHelper.php
index f56f9d4..109e672 100644
--- a/src/Utility/AutocompleteHelper.php
+++ b/src/Utility/AutocompleteHelper.php
@@ -16,14 +16,14 @@ class AutocompleteHelper implements AutocompleteHelperInterface {
   /**
    * The element info manager.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface|null $element_info
+   * @param ElementInfoManagerInterface|null $element_info
    *   The element info manager.
    */
   public function __construct(ElementInfoManagerInterface $element_info = NULL) {
diff --git a/src/Utility/AutocompleteHelperInterface.php b/src/Utility/AutocompleteHelperInterface.php
index f0a03fc..1704be5 100644
--- a/src/Utility/AutocompleteHelperInterface.php
+++ b/src/Utility/AutocompleteHelperInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_autocomplete\Utility;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\search_api_autocomplete\SearchInterface;
@@ -31,7 +32,7 @@ interface AutocompleteHelperInterface extends AccessInterface {
    *
    * @param array $element
    *   The altered element.
-   * @param \Drupal\search_api_autocomplete\SearchInterface $search
+   * @param SearchInterface $search
    *   The autocomplete search.
    * @param array $data
    *   (optional) Additional data to pass to the autocomplete callback.
@@ -41,12 +42,12 @@ interface AutocompleteHelperInterface extends AccessInterface {
   /**
    * Checks access to the autocompletion route.
    *
-   * @param \Drupal\search_api_autocomplete\SearchInterface $search_api_autocomplete_search
+   * @param SearchInterface $search_api_autocomplete_search
    *   The configured autocompletion search.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(SearchInterface $search_api_autocomplete_search, AccountInterface $account);
diff --git a/src/Utility/PluginHelper.php b/src/Utility/PluginHelper.php
index 9e33cdd..0e8a963 100644
--- a/src/Utility/PluginHelper.php
+++ b/src/Utility/PluginHelper.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_autocomplete\Utility;
 
+use Drupal\search_api_autocomplete\Plugin\PluginInterface;
+use Drupal\search_api_autocomplete\Search\SearchPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\search_api_autocomplete\SearchApiAutocompleteException;
 use Drupal\search_api_autocomplete\SearchInterface;
@@ -16,23 +18,23 @@ class PluginHelper implements PluginHelperInterface {
   /**
    * The suggester plugin manager.
    *
-   * @var \Drupal\search_api_autocomplete\Suggester\SuggesterManager
+   * @var SuggesterManager
    */
   protected $suggesterPluginManager;
 
   /**
    * The search plugin manager.
    *
-   * @var \Drupal\search_api_autocomplete\Search\SearchPluginManager
+   * @var SearchPluginManager
    */
   protected $searchPluginManager;
 
   /**
    * Constructs a PluginHelper object.
    *
-   * @param \Drupal\search_api_autocomplete\Suggester\SuggesterManager $suggester_plugin_manager
+   * @param SuggesterManager $suggester_plugin_manager
    *   The suggester plugin manager.
-   * @param \Drupal\search_api_autocomplete\Search\SearchPluginManager $search_plugin_manager
+   * @param SearchPluginManager $search_plugin_manager
    *   The search plugin manager.
    */
   public function __construct(SuggesterManager $suggester_plugin_manager, SearchPluginManager $search_plugin_manager) {
@@ -43,7 +45,7 @@ class PluginHelper implements PluginHelperInterface {
   /**
    * Creates a plugin object for the given search.
    *
-   * @param \Drupal\search_api_autocomplete\SearchInterface $search
+   * @param SearchInterface $search
    *   The search for which to create the plugins.
    * @param string $type
    *   The type of plugin to create: "suggester" or "search".
@@ -52,10 +54,10 @@ class PluginHelper implements PluginHelperInterface {
    * @param array $configuration
    *   (optional) The configuration to set for the plugin.
    *
-   * @return \Drupal\search_api_autocomplete\Plugin\PluginInterface
+   * @return PluginInterface
    *   The new plugin object.
    *
-   * @throws \Drupal\search_api_autocomplete\SearchApiAutocompleteException
+   * @throws SearchApiAutocompleteException
    *   Thrown if an unknown $type or $plugin_id is given.
    */
   protected function createPlugin(SearchInterface $search, $type, $plugin_id, array $configuration = []) {
@@ -75,7 +77,7 @@ class PluginHelper implements PluginHelperInterface {
   /**
    * Creates multiple plugin objects for the given search.
    *
-   * @param \Drupal\search_api_autocomplete\SearchInterface $search
+   * @param SearchInterface $search
    *   The search for which to create the plugins.
    * @param string $type
    *   The type of plugin to create: "suggester" or "search".
@@ -87,10 +89,10 @@ class PluginHelper implements PluginHelperInterface {
    *   Missing configurations are either taken from the search's stored settings,
    *   if they are present there, or default to an empty array.
    *
-   * @return \Drupal\search_api_autocomplete\Plugin\PluginInterface[]
+   * @return PluginInterface[]
    *   The created plugin objects.
    *
-   * @throws \Drupal\search_api_autocomplete\SearchApiAutocompleteException
+   * @throws SearchApiAutocompleteException
    *   Thrown if an unknown $type is given.
    */
   protected function createPlugins(SearchInterface $search, $type, array $plugin_ids = NULL, array $configurations = []) {
@@ -154,7 +156,7 @@ class PluginHelper implements PluginHelperInterface {
       if (!empty($definition['index']) && $definition['index'] !== $index_id) {
         continue;
       }
-      /** @var \Drupal\search_api_autocomplete\Search\SearchPluginInterface $search */
+      /** @var SearchPluginInterface $search */
       $search = $this->searchPluginManager->createInstance($search_id);
       if ($search->getIndexId() === $index_id) {
         $searches[$search_id] = $search;
diff --git a/src/Utility/PluginHelperInterface.php b/src/Utility/PluginHelperInterface.php
index af4cfa7..dd83c1c 100644
--- a/src/Utility/PluginHelperInterface.php
+++ b/src/Utility/PluginHelperInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api_autocomplete\Utility;
 
+use Drupal\search_api_autocomplete\Suggester\SuggesterInterface;
+use Drupal\search_api_autocomplete\SearchApiAutocompleteException;
+use Drupal\search_api_autocomplete\Search\SearchPluginInterface;
 use Drupal\search_api_autocomplete\SearchInterface;
 
 /**
@@ -12,17 +15,17 @@ interface PluginHelperInterface {
   /**
    * Creates a suggester plugin object for the given search.
    *
-   * @param \Drupal\search_api_autocomplete\SearchInterface $search
+   * @param SearchInterface $search
    *   The search for which to create the plugin.
    * @param string $plugin_id
    *   The plugin's ID.
    * @param array $configuration
    *   (optional) The configuration to set for the plugin.
    *
-   * @return \Drupal\search_api_autocomplete\Suggester\SuggesterInterface
+   * @return SuggesterInterface
    *   The new suggester plugin object.
    *
-   * @throws \Drupal\search_api_autocomplete\SearchApiAutocompleteException
+   * @throws SearchApiAutocompleteException
    *   Thrown if an unknown plugin ID is given.
    */
   public function createSuggesterPlugin(SearchInterface $search, $plugin_id, array $configuration = []);
@@ -30,17 +33,17 @@ interface PluginHelperInterface {
   /**
    * Creates a search plugin object for the given search.
    *
-   * @param \Drupal\search_api_autocomplete\SearchInterface $search
+   * @param SearchInterface $search
    *   The search for which to create the plugin.
    * @param string $plugin_id
    *   The plugin's ID.
    * @param array $configuration
    *   (optional) The configuration to set for the plugin.
    *
-   * @return \Drupal\search_api_autocomplete\Search\SearchPluginInterface
+   * @return SearchPluginInterface
    *   The new search plugin object.
    *
-   * @throws \Drupal\search_api_autocomplete\SearchApiAutocompleteException
+   * @throws SearchApiAutocompleteException
    *   Thrown if an unknown plugin ID is given.
    */
   public function createSearchPlugin(SearchInterface $search, $plugin_id, array $configuration = []);
@@ -48,7 +51,7 @@ interface PluginHelperInterface {
   /**
    * Creates multiple suggester plugin objects for the given search.
    *
-   * @param \Drupal\search_api_autocomplete\SearchInterface $search
+   * @param SearchInterface $search
    *   The search for which to create the plugins.
    * @param string[]|null $plugin_ids
    *   (optional) The IDs of the plugins to create, or NULL to create instances
@@ -58,7 +61,7 @@ interface PluginHelperInterface {
    *   Missing configurations are either taken from the search's stored settings,
    *   if they are present there, or default to an empty array.
    *
-   * @return \Drupal\search_api_autocomplete\Suggester\SuggesterInterface[]
+   * @return SuggesterInterface[]
    *   The created suggester plugin objects, keyed by plugin ID. If a plugin
    *   could not be created, it will be missing in the return array.
    */
@@ -73,7 +76,7 @@ interface PluginHelperInterface {
    * @param string $index_id
    *   The ID of the search index for which to create search plugins.
    *
-   * @return \Drupal\search_api_autocomplete\Search\SearchPluginInterface[]
+   * @return SearchPluginInterface[]
    *   The created search plugin objects.
    */
   public function createSearchPluginsForIndex($index_id);
diff --git a/tests/src/Functional/CacheInvalidationTest.php b/tests/src/Functional/CacheInvalidationTest.php
index db424bd..93a7945 100644
--- a/tests/src/Functional/CacheInvalidationTest.php
+++ b/tests/src/Functional/CacheInvalidationTest.php
@@ -30,7 +30,7 @@ class CacheInvalidationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Change the view to use an exposed form block.
diff --git a/tests/src/FunctionalJavascript/IntegrationTest.php b/tests/src/FunctionalJavascript/IntegrationTest.php
index 67f0ec4..ab11810 100644
--- a/tests/src/FunctionalJavascript/IntegrationTest.php
+++ b/tests/src/FunctionalJavascript/IntegrationTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\search_api_autocomplete\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
+use Drupal\search_api_autocomplete\SearchInterface;
 use Behat\Mink\Driver\GoutteDriver;
 use Drupal\search_api\Query\QueryInterface;
 use Drupal\search_api_autocomplete\Entity\Search;
@@ -43,21 +45,21 @@ class IntegrationTest extends IntegrationTestBase {
   /**
    * An admin user used for the tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * A normal (non-admin) user used for the tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $normalUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -181,7 +183,7 @@ class IntegrationTest extends IntegrationTestBase {
    * Verifies that the search entity's dependencies were calculated correctly.
    */
   protected function checkEntityDependencies() {
-    /** @var \Drupal\search_api_autocomplete\SearchInterface $search */
+    /** @var SearchInterface $search */
     $search = Search::load($this->searchId);
     $expected = [
       'config' => [
@@ -255,7 +257,7 @@ class IntegrationTest extends IntegrationTestBase {
     $this->assertEquals($expected, $suggestions);
 
     // Make sure the query looks as it should.
-    /** @var \Drupal\search_api\Query\QueryInterface $query */
+    /** @var QueryInterface $query */
     list($query) = $this->getMethodArguments('backend', 'getAutocompleteSuggestions');
     $this->assertFalse($query->wasAborted());
     $this->assertEquals(['body'], $query->getFulltextFields());
@@ -277,7 +279,7 @@ class IntegrationTest extends IntegrationTestBase {
     $keys = urlencode($keys);
     // @todo Replace with $assert_session->addressMatches() (and prepend "^")
     //   once we depend on Drupal 9.1+.
-    $this->assertRegExp("#/search-api-autocomplete-test\\?(?:.*&)?keys=$keys#", $this->getUrl());
+    $this->assertMatchesRegularExpression("#/search-api-autocomplete-test\\?(?:.*&)?keys=$keys#", $this->getUrl());
 
     // Check that autocomplete in the "Name" filter works, too, and that it sets
     // the correct fields on the query.
@@ -328,7 +330,7 @@ class IntegrationTest extends IntegrationTestBase {
     $this->assertEquals($expected, array_keys($suggestions));
 
     // Make sure all the search query settings were as expected.
-    /** @var \Drupal\search_api\Query\QueryInterface $query */
+    /** @var QueryInterface $query */
     $query = $this->getMethodArguments('backend', 'search')[0];
     $this->assertInstanceOf(QueryInterface::class, $query);
     $this->assertEquals(0, $query->getOption('offset'));
@@ -501,7 +503,7 @@ class IntegrationTest extends IntegrationTestBase {
         $this->assertStringContainsString($this->searchId, $element->getAttribute('data-search-api-autocomplete-search'), "Autocomplete should not be enabled for $user_type user without the necessary permission.");
       }
       else {
-        $this->assertContains($this->searchId, $element->getAttribute('data-search-api-autocomplete-search'), "Autocomplete should not be enabled for $user_type user without the necessary permission.");
+        $this->assertStringContainsString($this->searchId, $element->getAttribute('data-search-api-autocomplete-search'), "Autocomplete should not be enabled for $user_type user without the necessary permission.");
       }
       $this->assertTrue($element->hasClass('form-autocomplete'), "Autocomplete should not be enabled for $user_type user without the necessary permission.");
 
diff --git a/tests/src/FunctionalJavascript/IntegrationTestBase.php b/tests/src/FunctionalJavascript/IntegrationTestBase.php
index 20edd12..2ab7b02 100644
--- a/tests/src/FunctionalJavascript/IntegrationTestBase.php
+++ b/tests/src/FunctionalJavascript/IntegrationTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_autocomplete\FunctionalJavascript;
 
+use Behat\Mink\Exception\ElementNotFoundException;
 use Behat\Mink\Driver\GoutteDriver;
 use Behat\Mink\Element\NodeElement;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ -36,7 +37,7 @@ abstract class IntegrationTestBase extends WebDriverTestBase {
    *   uppercase characters and accents to verify input is properly
    *   preprocessed.
    *
-   * @return \Behat\Mink\Element\NodeElement[]
+   * @return NodeElement[]
    *   The suggestion elements from the page.
    */
   protected function getAutocompleteSuggestions($field_html_id = 'edit-keys', $input = 'Tést') {
@@ -60,7 +61,7 @@ abstract class IntegrationTestBase extends WebDriverTestBase {
   /**
    * Retrieves the text contents of a descendant of the given element.
    *
-   * @param \Behat\Mink\Element\NodeElement $element
+   * @param NodeElement $element
    *   The element.
    * @param string $css_selector
    *   The CSS selector defining the descendant to look for.
@@ -138,7 +139,7 @@ abstract class IntegrationTestBase extends WebDriverTestBase {
    * @param string|array $selector
    *   The element selector. Note: the first found element is used.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    *   Thrown if the element doesn't exist.
    */
   protected function assertVisible($selector_type, $selector) {
@@ -154,7 +155,7 @@ abstract class IntegrationTestBase extends WebDriverTestBase {
    * @param string|array $selector
    *   The element selector. Note: the first found element is used.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    *   Thrown if the element doesn't exist.
    */
   protected function assertNotVisible($selector_type, $selector) {
diff --git a/tests/src/FunctionalJavascript/PagesIntegrationTest.php b/tests/src/FunctionalJavascript/PagesIntegrationTest.php
index 0af3616..931df4c 100644
--- a/tests/src/FunctionalJavascript/PagesIntegrationTest.php
+++ b/tests/src/FunctionalJavascript/PagesIntegrationTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\search_api_autocomplete\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
+use Drupal\search_api\Query\QueryInterface;
 use Drupal\search_api_autocomplete\Entity\Search;
 use Drupal\search_api_autocomplete\SearchInterface;
 use Drupal\search_api_autocomplete\Tests\TestsHelper;
@@ -39,21 +41,21 @@ class PagesIntegrationTest extends IntegrationTestBase {
   /**
    * An admin user used for the tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * A normal (non-admin) user used for the tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $normalUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -135,7 +137,7 @@ class PagesIntegrationTest extends IntegrationTestBase {
    * Verifies that the search entity's dependencies were calculated correctly.
    */
   protected function checkEntityDependencies() {
-    /** @var \Drupal\search_api_autocomplete\SearchInterface $search */
+    /** @var SearchInterface $search */
     $search = Search::load($this->searchId);
     $expected = [
       'config' => [
@@ -202,7 +204,7 @@ class PagesIntegrationTest extends IntegrationTestBase {
     ];
     $this->assertEquals($expected, $suggestions);
 
-    /** @var \Drupal\search_api\Query\QueryInterface $query */
+    /** @var QueryInterface $query */
     list($query) = $this->getMethodArguments('backend', 'getAutocompleteSuggestions');
     $this->assertEquals(['name'], $query->getFulltextFields());
 
@@ -212,7 +214,7 @@ class PagesIntegrationTest extends IntegrationTestBase {
     $edit = [
       'suggesters[settings][server][fields][body]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
 
     $this->drupalGet('test-search');
 
diff --git a/tests/src/Kernel/DependencyRemovalTest.php b/tests/src/Kernel/DependencyRemovalTest.php
index f7aa85e..ee79e38 100644
--- a/tests/src/Kernel/DependencyRemovalTest.php
+++ b/tests/src/Kernel/DependencyRemovalTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\search_api_autocomplete\Kernel;
 
+use Drupal\search_api_autocomplete\SearchInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\search_api\Entity\Server;
 use Drupal\search_api_autocomplete\Entity\Search;
@@ -36,21 +38,21 @@ class DependencyRemovalTest extends KernelTestBase {
   /**
    * The autocomplete search entity used in this test.
    *
-   * @var \Drupal\search_api_autocomplete\SearchInterface
+   * @var SearchInterface
    */
   protected $search;
 
   /**
    * A config entity, to be used as a dependency in the tests.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @var ConfigEntityInterface
    */
   protected $dependency;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Do not use a batch for tracking the initial items after creating an
diff --git a/tests/src/Kernel/SearchCrudTest.php b/tests/src/Kernel/SearchCrudTest.php
index 10b8a7e..48da117 100644
--- a/tests/src/Kernel/SearchCrudTest.php
+++ b/tests/src/Kernel/SearchCrudTest.php
@@ -32,7 +32,7 @@ class SearchCrudTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('search_api_task');
@@ -86,7 +86,7 @@ class SearchCrudTest extends KernelTestBase {
     });
 
     $values = $this->getSearchTestValues();
-    /** @var \Drupal\search_api_autocomplete\SearchInterface $search */
+    /** @var SearchInterface $search */
     $search = Search::create($values);
     $search->save();
 
diff --git a/tests/src/Kernel/ViewsTest.php b/tests/src/Kernel/ViewsTest.php
index 935bc69..8652440 100644
--- a/tests/src/Kernel/ViewsTest.php
+++ b/tests/src/Kernel/ViewsTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\search_api_autocomplete\Kernel;
 
+use Drupal\search_api_autocomplete\Search\SearchPluginInterface;
+use Drupal\search_api\Query\ConditionGroupInterface;
+use Drupal\views\ViewExecutable;
+use Drupal\views\Plugin\views\exposed_form\ExposedFormPluginInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\search_api\Query\ConditionInterface;
 use Drupal\search_api_autocomplete\Entity\Search;
@@ -36,7 +40,7 @@ class ViewsTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('entity_test_mulrev_changed');
@@ -83,7 +87,7 @@ class ViewsTest extends KernelTestBase {
 
     $plugins = $plugin_helper->createSearchPluginsForIndex($index_id);
     $this->assertArrayHasKey($view_id, $plugins);
-    /** @var \Drupal\search_api_autocomplete\Search\SearchPluginInterface $plugin */
+    /** @var SearchPluginInterface $plugin */
     $plugin = $plugins[$view_id];
     $this->assertEquals('Search API Autocomplete Test view', $plugin->label());
     $this->assertEquals('Search views', $plugin->getGroupLabel());
@@ -117,7 +121,7 @@ class ViewsTest extends KernelTestBase {
       $this->assertStringContainsString('foobar', (string) $query);
     }
     else {
-      $this->assertContains('foobar', (string) $query);
+      $this->assertStringContainsString('foobar', (string) $query);
     }
     $conditions = $query->getConditionGroup()->getConditions();
     $conditions = $this->collectConditions($conditions);
@@ -135,10 +139,10 @@ class ViewsTest extends KernelTestBase {
    * Any information about condition nesting, group operators, etc. is lost.
    * Only makes sense for tests.
    *
-   * @param \Drupal\search_api\Query\ConditionInterface[]|\Drupal\search_api\Query\ConditionGroupInterface[] $conditions
+   * @param ConditionInterface[]|ConditionGroupInterface[] $conditions
    *   An array of conditions and condition groups.
    *
-   * @return \Drupal\search_api\Query\ConditionInterface[]
+   * @return ConditionInterface[]
    *   All conditions contained in the given array of conditions and condition
    *   groups.
    */
@@ -186,12 +190,12 @@ class ViewsTest extends KernelTestBase {
     ])->save();
 
     $view = View::load('search_api_autocomplete_test_view');
-    /** @var \Drupal\views\ViewExecutable $executable */
+    /** @var ViewExecutable $executable */
     $executable = $view->getExecutable();
     $this->assertTrue($executable->setDisplay($display_id));
     $executable->initHandlers();
 
-    /** @var \Drupal\views\Plugin\views\exposed_form\ExposedFormPluginInterface $exposed_form */
+    /** @var ExposedFormPluginInterface $exposed_form */
     $exposed_form = $executable->display_handler->getPlugin('exposed_form');
     $form = $exposed_form->renderExposedForm();
 
diff --git a/tests/src/Unit/AccessTest.php b/tests/src/Unit/AccessTest.php
index 73b54bf..b0c30af 100644
--- a/tests/src/Unit/AccessTest.php
+++ b/tests/src/Unit/AccessTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\search_api_autocomplete\Unit;
 
+use Drupal\search_api_autocomplete\Utility\AutocompleteHelperInterface;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Core\Access\AccessResultNeutral;
 use Drupal\Core\Access\AccessResultReasonInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Cache\Context\CacheContextsManager;
@@ -25,21 +28,21 @@ class AccessTest extends UnitTestCase {
   /**
    * The autocomplete helper object used for the test.
    *
-   * @var \Drupal\search_api_autocomplete\Utility\AutocompleteHelperInterface
+   * @var AutocompleteHelperInterface
    */
   protected $autocompleteHelper;
 
   /**
    * The search entity used in this test.
    *
-   * @var \Drupal\search_api_autocomplete\SearchInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var SearchInterface|MockObject
    */
   protected $search;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $element_info = $this->createMock(ElementInfoManagerInterface::class);
@@ -96,7 +99,7 @@ class AccessTest extends UnitTestCase {
       $this->search->method('getIndex')->willReturn($index);
     }
 
-    /** @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject $account */
+    /** @var AccountInterface|MockObject $account */
     $account = $this->createMock(AccountInterface::class);
     $permission = 'use search_api_autocomplete for ' . $this->search->id();
     $account->method('hasPermission')->willReturnMap([
@@ -106,7 +109,7 @@ class AccessTest extends UnitTestCase {
 
     // Needn't really be AccessResultNeutral, of course, but this is the easiest
     // way to get all the possible interfaces.
-    /** @var \Drupal\Core\Access\AccessResultNeutral $result */
+    /** @var AccessResultNeutral $result */
     $result = $this->autocompleteHelper->access($this->search, $account);
     $this->assertEquals($should_be_allowed, $result->isAllowed());
     $this->assertEquals(FALSE, $result->isForbidden());
diff --git a/tests/src/Unit/SuggestionFactoryTest.php b/tests/src/Unit/SuggestionFactoryTest.php
index 4fdd30e..36e8112 100644
--- a/tests/src/Unit/SuggestionFactoryTest.php
+++ b/tests/src/Unit/SuggestionFactoryTest.php
@@ -92,10 +92,8 @@ class SuggestionFactoryTest extends UnitTestCase {
    */
   public function testCreateUrlSuggestion() {
     $factory = new SuggestionFactory('foo');
-    /** @var \Drupal\Core\Url $url */
-    $url = $this->getMockBuilder(Url::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var Url $url */
+    $url = $this->createMock(Url::class);
 
     $suggestion = $factory->createUrlSuggestion($url, 'Foobar');
     $this->assertSame($url, $suggestion->getUrl());
