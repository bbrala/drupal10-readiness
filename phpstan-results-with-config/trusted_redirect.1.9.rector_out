modules/contrib/trusted_redirect/modules/trusted_redirect_entity_edit/src/Controller/EntityEditController.php
modules/contrib/trusted_redirect/modules/trusted_redirect_entity_edit/src/EventSubscriber/TrustedRedirectEntityEditSubscriber.php
modules/contrib/trusted_redirect/modules/trusted_redirect_entity_edit/src/Service/EntityEditUrlResolver.php
modules/contrib/trusted_redirect/src/EventSubscriber/TrustedRedirectSubscriber.php
modules/contrib/trusted_redirect/src/Form/ConfigForm.php
modules/contrib/trusted_redirect/src/TrustedRedirectHelpersTrait.php
modules/contrib/trusted_redirect/trusted_redirect.api.php

5 files with changes
====================

1) modules/contrib/trusted_redirect/src/TrustedRedirectHelpersTrait.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Sets the config factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
    *
    * @return $this
@@ @@
   /**
    * Gets the config factory.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config factory.
    */
   public function getConfigFactory() {
@@ @@
   /**
    * Sets the module handler.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    *
    * @return $this
@@ @@
   /**
    * Gets the module handler.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler.
    */
   public function getModuleHandler() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/trusted_redirect/src/EventSubscriber/TrustedRedirectSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\trusted_redirect\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\HttpFoundation\SecuredRedirectResponse;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Routing\TrustedRedirectResponse;
@@ @@
 use Drupal\trusted_redirect\TrustedRedirectHelpersTrait;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

@@ @@
   /**
    * Redirect to trusted host.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespondRedirectToTrustedHost(FilterResponseEvent $event) {
+  public function onRespondRedirectToTrustedHost(ResponseEvent $event) {
     $response = $event->getResponse();
     if ($response instanceof RedirectResponse) {
       $request = $event->getRequest();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/trusted_redirect/modules/trusted_redirect_entity_edit/src/Service/EntityEditUrlResolver.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeManagerInterface $entity_type_manager, RouteProviderInterface $route_provider) {
@@ @@
    * @param string $route_name
    *   Route name.
    *
-   * @return bool|\Symfony\Component\Routing\Route
+   * @return bool|Route
    *   Route object or false if route cannot be loaded.
    */
   protected function getRouteByName($route_name) {
@@ @@
    * @param string $entity_type
    *   Entity type to get route for.
    *
-   * @return bool|\Symfony\Component\Routing\Route
+   * @return bool|Route
    *   Entity edit route.
    */
   protected function getEntityEditRoute($entity_type) {
@@ @@
    * @param string $uuid
    *   Uuid of entity.
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface
+   * @return bool|EntityInterface
    */
   protected function loadEntityByUuid($entity_type, $uuid) {
     try {
@@ @@
    * @param string $uuid
    *   Uuid of entity.
    *
-   * @return \Drupal\Core\Url|bool
+   * @return Url|bool
    *   Entity edit url or false if not possible to obtain.
    */
   public function resolveEditUrlByUuid($uuid) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/trusted_redirect/modules/trusted_redirect_entity_edit/src/EventSubscriber/TrustedRedirectEntityEditSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\trusted_redirect_entity_edit\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(RouteMatchInterface $route_match) {
@@ @@
   /**
    * Redirect to trusted host.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespondAssureEntityEditRedirect(FilterResponseEvent $event) {
+  public function onRespondAssureEntityEditRedirect(ResponseEvent $event) {
     // Apply only for entity edit url.
     if ($this->routeMatch->getRouteName() != 'trusted_redirect_entity_edit.edit.controller') {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/trusted_redirect/modules/trusted_redirect_entity_edit/src/Controller/EntityEditController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity edit url resolver.
    *
-   * @var \Drupal\trusted_redirect_entity_edit\Service\EntityEditUrlResolver
+   * @var EntityEditUrlResolver
    */
   protected $editUrlResolver;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\trusted_redirect_entity_edit\Service\EntityEditUrlResolver $edit_url_resolver
+   * @param EntityEditUrlResolver $edit_url_resolver
    *   The entity edit url resolver.
    */
   public function __construct(EntityEditUrlResolver $edit_url_resolver) {
@@ @@
   /**
    * Redirect to entity edit form based on uuid of that entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param string $uuid
    *   Uuid of entity.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Return not found if entity (or route for it) cannot be found.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect to the extract edit form of identified entity.
    */
   public function resolveEntityEditUrl(Request $request, $uuid) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 5 files have been changed by Rector                                       

