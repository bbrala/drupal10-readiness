diff --git a/module_builder.module b/module_builder.module
index 43b62b8..bf2da56 100644
--- a/module_builder.module
+++ b/module_builder.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\module_builder\Form\ModuleMiscForm;
+use Drupal\module_builder\Form\ComponentSectionForm;
 /**
  * @file
  * Builds scaffolding for custom modules.
@@ -10,7 +13,7 @@ use Drupal\Core\Render\Element;
 /**
  * Implements hook_help().
  */
-function module_builder_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function module_builder_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'help.page.module_builder':
       return t("Module builder allows you to generate code files for new custom modules.");
@@ -75,14 +78,14 @@ function module_builder_entity_type_build(array &$entity_types) {
 
     // Set a generic form class for the 'misc' section if not specified.
     if (empty($entity_type->getFormClass('misc'))) {
-      $entity_type->setFormClass('misc', \Drupal\module_builder\Form\ModuleMiscForm::class);
+      $entity_type->setFormClass('misc', ModuleMiscForm::class);
     }
 
     $canonical_template = $entity_type->getLinkTemplate('canonical');
     foreach ($form_operations as $form_op) {
       // Allow the entity type to specify a form class.
       if (empty($entity_type->getFormClass($form_op))) {
-        $entity_type->setFormClass($form_op, \Drupal\module_builder\Form\ComponentSectionForm::class);
+        $entity_type->setFormClass($form_op, ComponentSectionForm::class);
       }
 
       // TODO: this is clobbering link templates in the entity if they are set
diff --git a/module_builder_devel/src/DrupalCodeBuilderDevel.php b/module_builder_devel/src/DrupalCodeBuilderDevel.php
index 7020145..c461753 100644
--- a/module_builder_devel/src/DrupalCodeBuilderDevel.php
+++ b/module_builder_devel/src/DrupalCodeBuilderDevel.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\module_builder_devel;
 
+use DrupalCodeBuilder\Factory;
 use Drupal\module_builder\DrupalCodeBuilder;
 use Drupal\module_builder_devel\Environment\ModuleBuilderDevel;
 
@@ -19,7 +20,7 @@ class DrupalCodeBuilderDevel extends DrupalCodeBuilder {
   protected function doLoadLibrary() {
     $environment = new ModuleBuilderDevel;
 
-    \DrupalCodeBuilder\Factory::setEnvironment($environment)
+    Factory::setEnvironment($environment)
       ->setCoreVersionNumber(\Drupal::VERSION);
   }
 
diff --git a/module_builder_devel/src/DrupalCodeBuilderTestSamples.php b/module_builder_devel/src/DrupalCodeBuilderTestSamples.php
index 8dbb458..964a023 100644
--- a/module_builder_devel/src/DrupalCodeBuilderTestSamples.php
+++ b/module_builder_devel/src/DrupalCodeBuilderTestSamples.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\module_builder_devel;
 
+use DrupalCodeBuilder\Factory;
 use Drupal\module_builder\DrupalCodeBuilder;
 
 /**
@@ -13,7 +14,7 @@ class DrupalCodeBuilderTestSamples extends DrupalCodeBuilder {
    * {@inheritdoc}
    */
   protected function doLoadLibrary() {
-    \DrupalCodeBuilder\Factory::setEnvironmentLocalClass('WriteTestsSampleLocation')
+    Factory::setEnvironmentLocalClass('WriteTestsSampleLocation')
       ->setCoreVersionNumber(\Drupal::VERSION);
   }
 
diff --git a/module_builder_devel/src/Form/ProcessDevelForm.php b/module_builder_devel/src/Form/ProcessDevelForm.php
index 3691a9f..0e64702 100644
--- a/module_builder_devel/src/Form/ProcessDevelForm.php
+++ b/module_builder_devel/src/Form/ProcessDevelForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\module_builder_devel\Form;
 
+use DrupalCodeBuilder\Factory;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -78,7 +79,7 @@ class ProcessDevelForm extends FormBase {
 
     foreach ($jobs_to_run as $job) {
       // Get the helper from the DCB container.
-      $collector_helper = \DrupalCodeBuilder\Factory::getContainer()->get($job['collector']);
+      $collector_helper = Factory::getContainer()->get($job['collector']);
       $job_data = $collector_helper->collect([$job]);
 
       dpm($job_data);
@@ -91,7 +92,7 @@ class ProcessDevelForm extends FormBase {
   /**
    * Gets the job list from the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return
diff --git a/module_builder_devel/src/Routing/RouteSubscriber.php b/module_builder_devel/src/Routing/RouteSubscriber.php
index f2d5de0..c21c070 100644
--- a/module_builder_devel/src/Routing/RouteSubscriber.php
+++ b/module_builder_devel/src/Routing/RouteSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\module_builder_devel\Routing;
 
+use Drupal\module_builder_devel\Form\ProcessFormExtra;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Symfony\Component\Routing\RouteCollection;
 
@@ -16,7 +17,7 @@ class RouteSubscriber extends RouteSubscriberBase {
   protected function alterRoutes(RouteCollection $collection) {
     // Change form class for the process form.
     if ($route = $collection->get('module_builder.analyse')) {
-      $route->setDefault('_form', \Drupal\module_builder_devel\Form\ProcessFormExtra::class);
+      $route->setDefault('_form', ProcessFormExtra::class);
     }
   }
 
diff --git a/src/Controller/AutocompleteController.php b/src/Controller/AutocompleteController.php
index 8641fbe..32bbcb4 100644
--- a/src/Controller/AutocompleteController.php
+++ b/src/Controller/AutocompleteController.php
@@ -17,13 +17,13 @@ class AutocompleteController extends ControllerBase {
   /**
    * Handler for autocomplete request for properties with extra options.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $property_address
    *   The address of the property this autocomplete request is for, as a string
    *   imploded with ':'.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matching options.
    */
   public function handleAutocomplete(Request $request, $property_address) {
diff --git a/src/DrupalCodeBuilder.php b/src/DrupalCodeBuilder.php
index 3053b75..2db124a 100644
--- a/src/DrupalCodeBuilder.php
+++ b/src/DrupalCodeBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\module_builder;
 
+use DrupalCodeBuilder\Factory;
 /**
  * Service class that wraps around the DCB library, to make it injectable.
  */
@@ -32,7 +33,7 @@ class DrupalCodeBuilder {
       $this->loadLibrary();
     }
 
-    return \DrupalCodeBuilder\Factory::getTask($task_name, $task_options);
+    return Factory::getTask($task_name, $task_options);
   }
 
   /**
@@ -42,7 +43,7 @@ class DrupalCodeBuilder {
    *  Throws an exception if the library can't be found.
    */
   public function loadLibrary() {
-    if (!class_exists(\DrupalCodeBuilder\Factory::class)) {
+    if (!class_exists(Factory::class)) {
       throw new \Exception("Mising library.");
     }
 
@@ -56,7 +57,7 @@ class DrupalCodeBuilder {
    */
   protected function doLoadLibrary() {
     // TODO: add an environment class with a more appropriate name.
-    \DrupalCodeBuilder\Factory::setEnvironmentLocalClass('DrupalLibrary')
+    Factory::setEnvironmentLocalClass('DrupalLibrary')
       ->setCoreVersionNumber(\Drupal::VERSION);
   }
 
diff --git a/src/EntityHandler/ComponentSectionFormHandler.php b/src/EntityHandler/ComponentSectionFormHandler.php
index 28ed20d..701560d 100644
--- a/src/EntityHandler/ComponentSectionFormHandler.php
+++ b/src/EntityHandler/ComponentSectionFormHandler.php
@@ -50,7 +50,7 @@ class ComponentSectionFormHandler {
   /**
    * Constructs a new ComponentSectionFormHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    */
   public function __construct(EntityTypeInterface $entity_type) {
diff --git a/src/ExceptionHandler.php b/src/ExceptionHandler.php
index 7636819..3c0f440 100644
--- a/src/ExceptionHandler.php
+++ b/src/ExceptionHandler.php
@@ -13,7 +13,7 @@ class ExceptionHandler {
   /**
    * Handle a sanity exception from the library and output a message.
    *
-   * @param DrupalCodeBuilder\Exception\SanityException $e
+   * @param SanityException $e
    *  A sanity exception object.
    */
   public static function handleSanityException(SanityException $e) {
diff --git a/src/Form/ComponentFormBase.php b/src/Form/ComponentFormBase.php
index dcdd77c..0035e29 100644
--- a/src/Form/ComponentFormBase.php
+++ b/src/Form/ComponentFormBase.php
@@ -24,7 +24,7 @@ abstract class ComponentFormBase extends EntityForm {
   /**
    * The Drupal Code Builder wrapping service.
    *
-   * @var \Drupal\module_builder\DrupalCodeBuilder
+   * @var DrupalCodeBuilder
    */
   protected $codeBuilder;
 
@@ -36,14 +36,14 @@ abstract class ComponentFormBase extends EntityForm {
   /**
    * The exception thrown by DCB when initialized, if any.
    *
-   * @var \DrupalCodeBuilder\Exception\SanityException
+   * @var SanityException
    */
   protected $sanityException;
 
   /**
    * Construct a new form object
    *
-   * @param \Drupal\module_builder\DrupalCodeBuilder $code_builder
+   * @param DrupalCodeBuilder $code_builder
    *   The Drupal Code Builder service.
    *   This needs to be injected so that submissions after an AJAX operation
    *   work (plus it's good for testing too).
@@ -89,7 +89,7 @@ abstract class ComponentFormBase extends EntityForm {
   /**
    * Sets the generate task.
    *
-   * @param \DrupalCodeBuilder\Task\Generate $generate_task
+   * @param Generate $generate_task
    */
   public function setGenerateTask(Generate $generate_task) {
     $this->codeBuilderTaskHandlerGenerate = $generate_task;
@@ -98,7 +98,7 @@ abstract class ComponentFormBase extends EntityForm {
   /**
    * Gets the data object for the entity in the form.
    *
-   * @return \MutableTypedData\Data\DataItem
+   * @return DataItem
    *   The data item object loaded with entity data.
    */
   protected function getComponentDataObject(): DataItem {
diff --git a/src/Form/ComponentSectionForm.php b/src/Form/ComponentSectionForm.php
index 21b8dcd..07adbd0 100644
--- a/src/Form/ComponentSectionForm.php
+++ b/src/Form/ComponentSectionForm.php
@@ -154,9 +154,9 @@ class ComponentSectionForm extends ComponentFormBase {
    *   The parent form element (or the entire form), passed by reference. The
    *   data item's element is placed with an array key that is its machine
    *   name.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \MutableTypedData\Data\DataItem $data
+   * @param DataItem $data
    *   The data item.
    */
   protected function buildFormElement(&$form, FormStateInterface $form_state, DataItem $data) {
@@ -944,11 +944,11 @@ class ComponentSectionForm extends ComponentFormBase {
    * This should not change existing entity properties that are not being edited
    * by this form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
@@ -1004,7 +1004,7 @@ class ComponentSectionForm extends ComponentFormBase {
    * @param array &$array
    *   An array of form values, passed by reference. This will be altered in
    *   place.
-   * @param \MutableTypedData\Data\DataItem $data
+   * @param DataItem $data
    *   The data item that corresponds to the form values array.
    */
   protected function cleanUpValues(&$array, DataItem $data) {
@@ -1583,7 +1583,7 @@ class ComponentSectionForm extends ComponentFormBase {
    *  element of this is name of the property and the form element.
    * @param $value
    *  The incoming form value from the form element for this property.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return
diff --git a/src/Form/ModuleHooksForm.php b/src/Form/ModuleHooksForm.php
index eb37355..53a64b1 100644
--- a/src/Form/ModuleHooksForm.php
+++ b/src/Form/ModuleHooksForm.php
@@ -125,11 +125,11 @@ class ModuleHooksForm extends ComponentSectionForm {
    * This should not change existing entity properties that are not being edited
    * by this form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
diff --git a/src/Form/ModuleNameForm.php b/src/Form/ModuleNameForm.php
index 1d6938a..732e7ca 100644
--- a/src/Form/ModuleNameForm.php
+++ b/src/Form/ModuleNameForm.php
@@ -93,11 +93,11 @@ class ModuleNameForm extends ComponentSectionForm {
    * This should not change existing entity properties that are not being edited
    * by this form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
diff --git a/src/Form/ProcessForm.php b/src/Form/ProcessForm.php
index 3ff761b..c861a2d 100644
--- a/src/Form/ProcessForm.php
+++ b/src/Form/ProcessForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\module_builder\Form;
 
+use DrupalCodeBuilder\Factory;
+use DrupalCodeBuilder\Exception\StorageException;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -16,14 +18,14 @@ class ProcessForm extends FormBase {
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Creates a ProcessForm instance.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Messenger service.
    */
   public function __construct(
@@ -84,7 +86,7 @@ class ProcessForm extends FormBase {
     // The task handler returns sane values for these even if there's no hook
     // data.
     $last_update = $task_handler_report->lastUpdatedDate();
-    $directory = \DrupalCodeBuilder\Factory::getEnvironment()->getHooksDirectory();
+    $directory = Factory::getEnvironment()->getHooksDirectory();
 
     $form['intro'] = array(
       '#markup' => '<p>' . t("Module Builder analyses your site's code to find data about Drupal components such as hooks, plugins, tagged services, and more." . ' '
@@ -119,7 +121,7 @@ class ProcessForm extends FormBase {
       try {
         $analysis_data = $task_report_summary->listStoredData();
       }
-      catch (\DrupalCodeBuilder\Exception\StorageException $e) {
+      catch (StorageException $e) {
         // Bail if the storage has a problem.
         $this->messenger()->addError($e->getMessage());
         return $form;
@@ -175,7 +177,7 @@ class ProcessForm extends FormBase {
     $batch = array(
       'title' => t('Analysing site code'),
       'operations' => array(),
-      'file' => drupal_get_path('module', 'module_builder') . '/includes/module_builder.admin.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('module_builder') . '/includes/module_builder.admin.inc',
       'finished' => [get_class($this), 'batchFinished'],
     );
 
diff --git a/src/LibraryWrapper.php b/src/LibraryWrapper.php
index a8cef9d..4b79dfb 100644
--- a/src/LibraryWrapper.php
+++ b/src/LibraryWrapper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\module_builder;
 
+use DrupalCodeBuilder\Factory;
 /**
  * Quick and dirty wrapper class to load our library.
  *
@@ -16,12 +17,12 @@ class LibraryWrapper {
    *  Throws an exception if the library can't be found.
    */
   public static function loadLibrary() {
-    if (!class_exists(\DrupalCodeBuilder\Factory::class)) {
+    if (!class_exists(Factory::class)) {
       throw new \Exception("Mising library.");
     }
 
     // TODO: add an environment class with a more appropriate name.
-    \DrupalCodeBuilder\Factory::setEnvironmentLocalClass('DrupalLibrary')
+    Factory::setEnvironmentLocalClass('DrupalLibrary')
       ->setCoreVersionNumber(\Drupal::VERSION);
   }
 
diff --git a/src/ModuleFileWriter.php b/src/ModuleFileWriter.php
index 48b8347..4e337b8 100644
--- a/src/ModuleFileWriter.php
+++ b/src/ModuleFileWriter.php
@@ -13,23 +13,23 @@ class ModuleFileWriter {
   /**
    * The Module extension list service.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;
 
   /**
    * The File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Creates a ModuleFileWriter instance.
    *
-   * @param \Drupal\Core\Extension\ModuleExtensionList $module_extension_list
+   * @param ModuleExtensionList $module_extension_list
    *   The Module extension list service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The File system service.
    */
   public function __construct(
diff --git a/src/Plugin/Derivative/ComponentSectionFormsLocalTasks.php b/src/Plugin/Derivative/ComponentSectionFormsLocalTasks.php
index 423b950..e497a9e 100644
--- a/src/Plugin/Derivative/ComponentSectionFormsLocalTasks.php
+++ b/src/Plugin/Derivative/ComponentSectionFormsLocalTasks.php
@@ -15,14 +15,14 @@ class ComponentSectionFormsLocalTasks extends DeriverBase implements ContainerDe
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an ComponentSectionFormsLocalTasks object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/tests/modules/module_builder_test_component_type/src/Form/TestComponentMiscForm.php b/tests/modules/module_builder_test_component_type/src/Form/TestComponentMiscForm.php
index 267e394..4d6fd7e 100644
--- a/tests/modules/module_builder_test_component_type/src/Form/TestComponentMiscForm.php
+++ b/tests/modules/module_builder_test_component_type/src/Form/TestComponentMiscForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\module_builder_test_component_type\Form;
 
+use DrupalCodeBuilder\Factory;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\module_builder\Form\ModuleMiscForm;
 use Drupal\module_builder_test_component_type\TestGenerateTask;
@@ -18,7 +19,7 @@ class TestComponentMiscForm extends ModuleMiscForm {
    * {@inheritdoc}
    */
   public function setGenerateTask(Generate $generate_task) {
-    $dcb_container =  \DrupalCodeBuilder\Factory::getContainer();
+    $dcb_container =  Factory::getContainer();
 
     // Can't use the container directly, as it won't know about the class we
     // want to use instead.
diff --git a/tests/modules/module_builder_test_component_type/src/TestDrupalCodeBuilder.php b/tests/modules/module_builder_test_component_type/src/TestDrupalCodeBuilder.php
index 5621630..ef17f09 100644
--- a/tests/modules/module_builder_test_component_type/src/TestDrupalCodeBuilder.php
+++ b/tests/modules/module_builder_test_component_type/src/TestDrupalCodeBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\module_builder_test_component_type;
 
+use DrupalCodeBuilder\Factory;
 use Drupal\module_builder\DrupalCodeBuilder;
 
 /**
@@ -17,7 +18,7 @@ class TestDrupalCodeBuilder extends DrupalCodeBuilder {
   protected function doLoadLibrary() {
     $environment = new TestEnvironment();
 
-    \DrupalCodeBuilder\Factory::setEnvironment($environment)
+    Factory::setEnvironment($environment)
       ->setCoreVersionNumber(\Drupal::VERSION);
   }
 
diff --git a/tests/modules/test_dummy_module_write_location/src/DrupalCodeBuilderTestSampleData.php b/tests/modules/test_dummy_module_write_location/src/DrupalCodeBuilderTestSampleData.php
index be50869..c91a502 100644
--- a/tests/modules/test_dummy_module_write_location/src/DrupalCodeBuilderTestSampleData.php
+++ b/tests/modules/test_dummy_module_write_location/src/DrupalCodeBuilderTestSampleData.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\test_dummy_module_write_location;
 
+use DrupalCodeBuilder\Factory;
 use Drupal\module_builder\DrupalCodeBuilder;
 
 /**
@@ -18,7 +19,7 @@ class DrupalCodeBuilderTestSampleData extends DrupalCodeBuilder {
   protected function doLoadLibrary() {
     $environment = new TestSampleDataEnvironment();
 
-    \DrupalCodeBuilder\Factory::setEnvironment($environment)
+    Factory::setEnvironment($environment)
       ->setCoreVersionNumber(\Drupal::VERSION);
   }
 
diff --git a/tests/src/Functional/ComponentFormTest.php b/tests/src/Functional/ComponentFormTest.php
index 4a2380b..9d27162 100644
--- a/tests/src/Functional/ComponentFormTest.php
+++ b/tests/src/Functional/ComponentFormTest.php
@@ -50,7 +50,7 @@ class ComponentFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Enable error output to the browser.
diff --git a/tests/src/Functional/GenerateFormTest.php b/tests/src/Functional/GenerateFormTest.php
index 450e899..e015b68 100644
--- a/tests/src/Functional/GenerateFormTest.php
+++ b/tests/src/Functional/GenerateFormTest.php
@@ -42,7 +42,7 @@ class GenerateFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->container->get('module_installer')->install(['test_dummy_module_write_location']);
@@ -91,7 +91,7 @@ class GenerateFormTest extends BrowserTestBase {
     $page->pressButton('Write selected files');
 
     $this->assertFileExists($site_path . '/my_module/my_module.module');
-    $this->assertFileNotExists($site_path . '/my_module/my_module.install');
+    $this->assertFileDoesNotExist($site_path . '/my_module/my_module.install');
     $this->assertSession()->pageTextMatches('@Written 1 files to folder sites/simpletest/\d+/my_module@');
 
     // Put some junk in the existing files, so we can check that 'Write new files'
diff --git a/tests/src/Unit/ComponentSectionFormHandlerTest.php b/tests/src/Unit/ComponentSectionFormHandlerTest.php
index 8052de6..3f962f2 100644
--- a/tests/src/Unit/ComponentSectionFormHandlerTest.php
+++ b/tests/src/Unit/ComponentSectionFormHandlerTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\module_builder\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\module_builder\EntityHandler\ComponentSectionFormHandler;
 use Drupal\Tests\UnitTestCase;
 
 /**
@@ -11,6 +14,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class ComponentSectionFormHandlerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The modules to enable.
    *
@@ -46,12 +50,12 @@ class ComponentSectionFormHandlerTest extends UnitTestCase {
       ],
     ];
 
-    $entity_type = $this->prophesize(\Drupal\Core\Entity\EntityTypeInterface::class);
+    $entity_type = $this->prophesize(EntityTypeInterface::class);
     $entity_type->id()->willReturn('test');
     $entity_type->get('code_builder')->willReturn($entity_code_builder_annotation_data);
 
     // Create the handler, with mock passed in.
-    $component_sections_handler = new \Drupal\module_builder\EntityHandler\ComponentSectionFormHandler(
+    $component_sections_handler = new ComponentSectionFormHandler(
       $entity_type->reveal()
     );
 
