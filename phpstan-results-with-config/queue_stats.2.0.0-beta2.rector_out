modules/contrib/queue_stats/queue_stats.install
modules/contrib/queue_stats/src/Annotation/QueueStatistic.php
modules/contrib/queue_stats/src/Event/QueueItemEvent.php
modules/contrib/queue_stats/src/Form/AdminForm.php
modules/contrib/queue_stats/src/MonitoredQueue.php
modules/contrib/queue_stats/src/MonitoredQueueFactory.php
modules/contrib/queue_stats/src/MonitoredQueueInterface.php
modules/contrib/queue_stats/src/MonitoredQueueUIManager.php
modules/contrib/queue_stats/src/Plugin/Block/ListBlock.php
modules/contrib/queue_stats/src/Plugin/DateIntervalStatistic.php
modules/contrib/queue_stats/src/Plugin/Derivative/DynamicLocalTasks.php
modules/contrib/queue_stats/src/Plugin/QueueStatistic/EstimatedTimeToFinish.php
modules/contrib/queue_stats/src/Plugin/QueueStatistic/NumItems.php
modules/contrib/queue_stats/src/Plugin/QueueStatistic/ProcessingRate.php
modules/contrib/queue_stats/src/Plugin/QueueStatistic/ProcessingTime.php
modules/contrib/queue_stats/src/Plugin/QueueStatistic/QueueTime.php
modules/contrib/queue_stats/src/Plugin/QueueStatisticBase.php
modules/contrib/queue_stats/src/Plugin/QueueStatisticInterface.php
modules/contrib/queue_stats/src/Plugin/QueueStatisticManager.php
modules/contrib/queue_stats/src/Plugin/StatefulStatistic.php
modules/contrib/queue_stats/src/QueueStatsServiceProvider.php
modules/contrib/queue_stats/src/Statistics/ExponentialMovingAverage.php
modules/contrib/queue_stats/test/src/Unit/ExponentialMovingAverageTest.php

14 files with changes
=====================

1) modules/contrib/queue_stats/src/Plugin/StatefulStatistic.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_stats\Plugin;

+use Drupal\Core\State\StateInterface;
 use Drupal\queue_stats\MonitoredQueueInterface;

 /**
@@ @@
   /**
    * The state interface.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Return a parent key for the queue under which statistics should store data.
    *
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   The queue.
    *
    * @return string
@@ @@
   /**
    * Store a value for a queue.
    *
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   The queue to store a value for.
    * @param string $name
    *   The name of the value to store.
@@ @@
   /**
    * Retrieve a value for queue.
    *
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   The queue to retrieve a value for.
    * @param string $name
    *   The name of the value to store.
@@ @@
   /**
    * Delete a stored entry.
    *
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   The queue to delete a value for.
    * @param string $name
    *   The name of the entry to store.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/queue_stats/src/Plugin/QueueStatisticManager.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The queue worker manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorkerManager;

@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\queue_stats\MonitoredQueueFactory
+   * @var MonitoredQueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The event dispatcher used to dispatch queue events.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_worker_manager
+   * @param QueueWorkerManagerInterface $queue_worker_manager
    *   The queue worker manager.
-   * @param \Drupal\queue_stats\MonitoredQueueFactory $queue_factory
+   * @param MonitoredQueueFactory $queue_factory
    *   The queue factory.
    */
   public function __construct(
@@ @@
   /**
    * Event handler for reacting to queue events.
    *
-   * @param \Drupal\queue_stats\Event\QueueItemEvent $event
+   * @param QueueItemEvent $event
    *   Queue event.
    */
   public function onEvent(QueueItemEvent $event) {
-    $this->eventDispatcher->dispatch($event->getName(), $event);
+    $this->eventDispatcher->dispatch($event, $event->getName());
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/queue_stats/src/Plugin/QueueStatisticInterface.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Return the statistics value for a queue.
    *
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   The queue to show statistics for.
    *
    * @return int|float
@@ @@
   /**
    * Reset the statistic for a queue.
    *
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   The queue to reset statistics for.
    */
   public function reset(MonitoredQueueInterface $queue);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/queue_stats/src/Plugin/QueueStatistic/QueueTime.php:33

    ---------- begin diff ----------
@@ @@
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The site state.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
    */
   public function __construct(
@@ @@
   /**
    * Event handler for tracking when items have finished processing.
    *
-   * @param \Drupal\queue_stats\Event\QueueItemEvent $event
+   * @param QueueItemEvent $event
    *   The event.
    */
   public function trackCompletion(QueueItemEvent $event) {
@@ @@
    * {@inheritdoc}
    */
   public function getValue(MonitoredQueueInterface $queue) {
-    /** @var \Drupal\queue_stats\Statistics\ExponentialMovingAverage $average */
+    /** @var ExponentialMovingAverage $average */
     $average = $this->retrieveValue($queue, 'value', new ExponentialMovingAverage(10));
     return $average->average();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/queue_stats/src/Plugin/QueueStatistic/ProcessingTime.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Events for items which have started processing.
    *
-   * @var \Drupal\queue_stats\Event\QueueItemEvent[]
+   * @var QueueItemEvent[]
    */
   protected $itemStarts;

@@ @@
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The site state.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
    */
   public function __construct(
@@ @@
   /**
    * Event handler when events start processing.
    *
-   * @param \Drupal\queue_stats\Event\QueueItemEvent $event
+   * @param QueueItemEvent $event
    *   The event.
    */
   public function trackStart(QueueItemEvent $event) {
@@ @@
   /**
    * Event handler when events have finished processing.
    *
-   * @param \Drupal\queue_stats\Event\QueueItemEvent $event
+   * @param QueueItemEvent $event
    *   The event.
    */
   public function trackCompletion(QueueItemEvent $event) {
@@ @@

       $processing_time = $event->getTimestamp() - $startEvent->getTimestamp();
       if ($processing_time > 0) {
-        /** @var \Drupal\queue_stats\Statistics\ExponentialMovingAverage $value */
+        /** @var ExponentialMovingAverage $value */
         $value = $this->retrieveValue($event->getQueue(), 'value', new ExponentialMovingAverage(10));
         $value->add($processing_time);
         $this->storeValue($event->getQueue(), 'value', $value);
@@ @@
    * {@inheritdoc}
    */
   public function getValue(MonitoredQueueInterface $queue) {
-    /** @var \Drupal\queue_stats\Statistics\ExponentialMovingAverage $average */
+    /** @var ExponentialMovingAverage $average */
     $average = $this->retrieveValue($queue, 'value', new ExponentialMovingAverage(10));
     return $average->average();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/queue_stats/src/Plugin/QueueStatistic/ProcessingRate.php:31

    ---------- begin diff ----------
@@ @@
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The site state.
    */
   public function __construct(
@@ @@
   /**
    * Event handler for when items have been processed successfully.
    *
-   * @param \Drupal\queue_stats\Event\QueueItemEvent $event
+   * @param QueueItemEvent $event
    *   The event.
    */
   public function trackCompletion(QueueItemEvent $event) {
-    /** @var \Drupal\queue_stats\Statistics\ExponentialMovingAverage $value */
+    /** @var ExponentialMovingAverage $value */
     $value = $this->retrieveValue($event->getQueue(), 'value', new ExponentialMovingAverage(10));

     $last_processing_time = $this->retrieveValue($event->getQueue(), 'last_processing_time');
@@ @@
    * {@inheritdoc}
    */
   public function getValue(MonitoredQueueInterface $queue) {
-    /** @var \Drupal\queue_stats\Statistics\ExponentialMovingAverage $item_rate */
+    /** @var ExponentialMovingAverage $item_rate */
     $item_rate = $this->retrieveValue($queue, 'value', new ExponentialMovingAverage(10));
     return $item_rate->average();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/queue_stats/src/Plugin/QueueStatistic/EstimatedTimeToFinish.php:30

    ---------- begin diff ----------
@@ @@
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The dependency injection container.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/queue_stats/src/Plugin/DateIntervalStatistic.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_stats\Plugin;

+use Drupal\Core\Datetime\DateFormatterInterface;
 /**
  * Trait for statistics in the form of date intervals.
  */
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/queue_stats/src/Plugin/Block/ListBlock.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The queue worker factory.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorkerManager;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_worker_manager
+   * @param QueueWorkerManagerInterface $queue_worker_manager
    *   The queue worker manager factory.
-   * @param \Drupal\queue_stats\Plugin\QueueStatisticManager $queue_stat_manager
+   * @param QueueStatisticManager $queue_stat_manager
    *   The queue stats manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/queue_stats/src/MonitoredQueueFactory.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The event dispatcher for queue events.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * The current time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/queue_stats/src/MonitoredQueue.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * The current time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * MonitoredQueue constructor.
    *
-   * @param \Drupal\Core\Queue\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The queue to be monitored.
    * @param string $name
    *   The queue name.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The current time.
    */
   public function __construct(QueueInterface $queue, string $name, EventDispatcherInterface $dispatcher, TimeInterface $time) {
@@ @@
    */
   public function deleteItem($item) {
     $event = new QueueItemEvent(QueueItemEvent::PROCESSING_COMPLETED, $this, $item, $this->time->getCurrentMicroTime());
-    $this->dispatcher->dispatch($event->getName(), $event);
+    $this->dispatcher->dispatch($event, $event->getName());

     $this->queue->deleteItem($item);
   }
@@ @@
     $item = $this->queue->claimItem($lease_time);
     if ($item !== FALSE) {
       $event = new QueueItemEvent(QueueItemEvent::PROCESSING_STARTED, $this, $item, $this->time->getCurrentMicroTime());
-      $this->dispatcher->dispatch($event->getName(), $event);
+      $this->dispatcher->dispatch($event, $event->getName());
     }
     return $item;
   }
@@ @@
     $released = $this->queue->releaseItem($item);
     if ($released) {
       $event = new QueueItemEvent(QueueItemEvent::PROCESSING_ABORTED, $this, $item, $this->time->getCurrentMicroTime());
-      $this->dispatcher->dispatch($event->getName(), $event);
+      $this->dispatcher->dispatch($event, $event->getName());
     }
     return $released;
   }
@@ @@
   /**
    * Return the queue being monitored.
    *
-   * @return \Drupal\Core\Queue\QueueInterface
+   * @return QueueInterface
    *   The queue being monitored.
    */
   public function getMonitoredQueue() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/queue_stats/src/Form/AdminForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The queue worker manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorkerManager;

@@ @@
   /**
    * The queue stat manager.
    *
-   * @var \Drupal\queue_stats\Plugin\QueueStatisticManager
+   * @var QueueStatisticManager
    */
   protected $queueStatManager;

@@ @@
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * AdminForm constructor.
    *
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_worker_manager
+   * @param QueueWorkerManagerInterface $queue_worker_manager
    *   The queue worker manager.
-   * @param \Drupal\queue_stats\Plugin\QueueStatisticManager $queue_stat_manager
+   * @param QueueStatisticManager $queue_stat_manager
    *   The The queue stat manager.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/queue_stats/src/Event/QueueItemEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_stats\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\queue_stats\MonitoredQueueInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Queue item event class.
@@ @@
   /**
    * The queue the item is/was related to.
    *
-   * @var \Drupal\queue_stats\MonitoredQueueInterface
+   * @var MonitoredQueueInterface
    */
   protected $queue;

@@ @@
    *
    * @param string $name
    *   Event name.
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   Related queue.
    * @param object $item
    *   Queue item.
@@ @@
   /**
    * Returns the related queue.
    *
-   * @return \Drupal\queue_stats\MonitoredQueueInterface
+   * @return MonitoredQueueInterface
    *   Related queue.
    */
   public function getQueue() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/queue_stats/src/Annotation/QueueStatistic.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_stats\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [ERROR] Could not process                                                      
         "modules/contrib/queue_stats/src/MonitoredQueueUIManager.php" file, due
         to:                                                                    
         "Analyze error: "Class Drupal\queue_ui\QueueUIManager not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

