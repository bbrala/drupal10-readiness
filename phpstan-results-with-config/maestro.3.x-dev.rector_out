modules/contrib/maestro/maestro.install
modules/contrib/maestro/maestro.module
modules/contrib/maestro/maestro.views.inc
modules/contrib/maestro/modules/examples/maestro_form_approval_example/maestro_form_approval_example.install
modules/contrib/maestro/modules/examples/maestro_form_approval_example/maestro_form_approval_example.module
modules/contrib/maestro/modules/examples/maestro_form_approval_example/src/MaestroFormApprovalExampleUninstallValidator.php
modules/contrib/maestro/modules/examples/maestro_form_approval_example/src/ProxyClass/MaestroFormApprovalExampleUninstallValidator.php
modules/contrib/maestro/modules/examples/maestro_interactive_task_plugin_example/src/MaestroInteractiveExampleTaskUninstallValidator.php
modules/contrib/maestro/modules/examples/maestro_interactive_task_plugin_example/src/Plugin/EngineTasks/MaestroInteractiveExampleTask.php
modules/contrib/maestro/modules/examples/maestro_interactive_task_plugin_example/src/ProxyClass/MaestroInteractiveExampleTaskUninstallValidator.php
modules/contrib/maestro/modules/examples/maestro_noninteractive_task_plugin_example/src/MaestroNonInteractiveExampleTaskUninstallValidator.php
modules/contrib/maestro/modules/examples/maestro_noninteractive_task_plugin_example/src/Plugin/EngineTasks/MaestroNonInteractiveExampleTask.php
modules/contrib/maestro/modules/examples/maestro_noninteractive_task_plugin_example/src/ProxyClass/MaestroNonInteractiveExampleTaskUninstallValidator.php
modules/contrib/maestro/modules/maestro_taskconsole/maestro_taskconsole.module
modules/contrib/maestro/modules/maestro_taskconsole/src/Controller/MaestroTaskConsoleController.php
modules/contrib/maestro/modules/maestro_template_builder/maestro_template_builder.module
modules/contrib/maestro/modules/maestro_template_builder/src/Ajax/FireJavascriptCommand.php
modules/contrib/maestro/modules/maestro_template_builder/src/Form/MaestroTemplateBuilderAddNew.php
modules/contrib/maestro/modules/maestro_template_builder/src/Form/MaestroTemplateBuilderCanvas.php
modules/contrib/maestro/modules/maestro_template_builder/src/Form/MaestroTemplateBuilderEditTask.php
modules/contrib/maestro/modules/maestro_template_builder/src/Form/MaestroTemplateBuilderForm.php
modules/contrib/maestro/modules/maestro_template_builder/src/Form/MaestroTemplateBuilderSettingsForm.php
modules/contrib/maestro/modules/maestro_template_builder/src/Form/MaestroValidityCheck.php
modules/contrib/maestro/modules/maestro_utilities/maestro_utilities.module
modules/contrib/maestro/modules/maestro_webform/maestro_webform.module
modules/contrib/maestro/modules/maestro_webform/src/Plugin/EngineTasks/MaestroWebformTask.php
modules/contrib/maestro/modules/maestro_webform/src/Plugin/WebformHandler/MaestroWebformHandler.php
modules/contrib/maestro/modules/maestro_webform/tests/src/Functional/LoadTest.php
modules/contrib/maestro/src/Controller/MaestroAutoCompleteController.php
modules/contrib/maestro/src/Controller/MaestroOrchestrator.php
modules/contrib/maestro/src/Controller/MaestroProcessStatusController.php
modules/contrib/maestro/src/Controller/MaestroTemplateListBuilder.php
modules/contrib/maestro/src/Engine/Exception/MaestroGeneralException.php
modules/contrib/maestro/src/Engine/Exception/MaestroSaveEntityException.php
modules/contrib/maestro/src/Engine/MaestroEngine.php
modules/contrib/maestro/src/Entity/MaestroEntityIdentifiers.php
modules/contrib/maestro/src/Entity/MaestroProcess.php
modules/contrib/maestro/src/Entity/MaestroProcessStatus.php
modules/contrib/maestro/src/Entity/MaestroProcessVariables.php
modules/contrib/maestro/src/Entity/MaestroProcessViewsData.php
modules/contrib/maestro/src/Entity/MaestroProductionAssignments.php
modules/contrib/maestro/src/Entity/MaestroProductionAssignmentsViewsData.php
modules/contrib/maestro/src/Entity/MaestroQueue.php
modules/contrib/maestro/src/Entity/MaestroQueueViewsData.php
modules/contrib/maestro/src/Entity/MaestroTemplate.php
modules/contrib/maestro/src/Form/MaestroContentTypeCompleteTask.php
modules/contrib/maestro/src/Form/MaestroEngineSettingsForm.php
modules/contrib/maestro/src/Form/MaestroExecuteInteractive.php
modules/contrib/maestro/src/Form/MaestroInteractiveFormBase.php
modules/contrib/maestro/src/Form/MaestroProcessSettingsForm.php
modules/contrib/maestro/src/Form/MaestroProcessVariablesSettingsForm.php
modules/contrib/maestro/src/Form/MaestroReassign.php
modules/contrib/maestro/src/Form/MaestroTemplateAddForm.php
modules/contrib/maestro/src/Form/MaestroTemplateDeleteForm.php
modules/contrib/maestro/src/Form/MaestroTemplateEditForm.php
modules/contrib/maestro/src/Form/MaestroTemplateFormBase.php
modules/contrib/maestro/src/Form/MaestroTrace.php
modules/contrib/maestro/src/Form/MaestroTraceDeleteProcess.php
modules/contrib/maestro/src/Form/MaestroTraceDeleteTask.php
modules/contrib/maestro/src/MaestroEnginePermissions.php
modules/contrib/maestro/src/MaestroEngineTaskInterface.php
modules/contrib/maestro/src/MaestroEngineTasksPluginManager.php
modules/contrib/maestro/src/MaestroEntityIdentifiersAccessControlHandler.php
modules/contrib/maestro/src/MaestroProcessAccessControlHandler.php
modules/contrib/maestro/src/MaestroProcessInterface.php
modules/contrib/maestro/src/MaestroProductionAssignmentsAccessControlHandler.php
modules/contrib/maestro/src/MaestroQueueAccessControlHandler.php
modules/contrib/maestro/src/MaestroTaskTrait.php
modules/contrib/maestro/src/MaestroTemplateAccessController.php
modules/contrib/maestro/src/Plugin/Block/MaestroProcessStatusBlock.php
modules/contrib/maestro/src/Plugin/EngineTasks/MaestroAndTask.php
modules/contrib/maestro/src/Plugin/EngineTasks/MaestroBatchFunctionTask.php
modules/contrib/maestro/src/Plugin/EngineTasks/MaestroContentTypeTask.php
modules/contrib/maestro/src/Plugin/EngineTasks/MaestroEndTask.php
modules/contrib/maestro/src/Plugin/EngineTasks/MaestroIfTask.php
modules/contrib/maestro/src/Plugin/EngineTasks/MaestroInteractiveTask.php
modules/contrib/maestro/src/Plugin/EngineTasks/MaestroManualWebTask.php
modules/contrib/maestro/src/Plugin/EngineTasks/MaestroOrTask.php
modules/contrib/maestro/src/Plugin/EngineTasks/MaestroSetProcessVariableTask.php
modules/contrib/maestro/src/Plugin/EngineTasks/MaestroSpawnSubFlowTask.php
modules/contrib/maestro/src/Plugin/EngineTasks/MaestroStartTask.php
modules/contrib/maestro/src/Plugin/Menu/LocalAction/TemplateEditorCustomAction.php
modules/contrib/maestro/src/Plugin/RulesAction/MaestroRulesActionSpawnWorkflow.php
modules/contrib/maestro/src/Plugin/views/argument_default/CurrentUserName.php
modules/contrib/maestro/src/Plugin/views/field/MaestroEngineActiveAssignments.php
modules/contrib/maestro/src/Plugin/views/field/MaestroEngineActiveHandler.php
modules/contrib/maestro/src/Plugin/views/field/MaestroEngineAdminOperations.php
modules/contrib/maestro/src/Plugin/views/field/MaestroEngineCompletedTimestamp.php
modules/contrib/maestro/src/Plugin/views/field/MaestroEngineEntityIdentifierEditLink.php
modules/contrib/maestro/src/Plugin/views/field/MaestroEngineEntityIdentifierEntityLabel.php
modules/contrib/maestro/src/Plugin/views/field/MaestroEngineProcessCompletionTime.php
modules/contrib/maestro/src/Plugin/views/field/MaestroEngineProcessDetails.php
modules/contrib/maestro/src/Plugin/views/field/MaestroEngineProcessInitiator.php
modules/contrib/maestro/src/Plugin/views/field/MaestroEngineStartedTimestamp.php
modules/contrib/maestro/src/Plugin/views/field/MaestroEngineUserWhoCompleted.php
modules/contrib/maestro/src/Plugin/views/filter/MaestroEngineTemplateFilter.php
modules/contrib/maestro/src/Utility/MaestroStatus.php
modules/contrib/maestro/src/Utility/TaskHandler.php

24 files with changes
=====================

1) modules/contrib/maestro/src/Plugin/EngineTasks/MaestroSpawnSubFlowTask.php:267

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   From render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current state of form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/maestro/src/Plugin/EngineTasks/MaestroInteractiveTask.php:235

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   From render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current state of form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/maestro/src/Plugin/EngineTasks/MaestroBatchFunctionTask.php:187

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   From render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current state of form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/maestro/src/MaestroTaskTrait.php:484

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form submission from the submit handler.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The FormStateInterface from the submit handler.
    * @param array $task
    *   The array representation of loading a task from the template via the MaestroEngine::getTemplateTaskByID method.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/maestro/src/MaestroEngineTasksPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/maestro/src/MaestroEngineTaskInterface.php:41

    ---------- begin diff ----------
@@ @@
    *
    * @param string $modal
    *   Defines if the form is a modal form or not.
-   * @param Drupal\maestro\Form\MaestroExecuteInteractive $parent
+   * @param MaestroExecuteInteractive $parent
    *   Parent class for using modal callbacks to the interactive form base if needed.
    */
   public function getExecutableForm($modal, MaestroExecuteInteractive $parent);
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form's form state.
    * @param array $task
    *   The fully loaded task array from the template.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/maestro/src/MaestroEnginePermissions.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new MaestroEnginePermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/maestro/src/Form/MaestroTemplateFormBase.php:24

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form's form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form's form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form's form state.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form's form state.
    */
   public function save(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/maestro/src/Form/MaestroTemplateEditForm.php:21

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/maestro/src/Form/MaestroTemplateDeleteForm.php:66

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the cancel route.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Returns a formatted Drupal URL.
    */
   public function getCancelUrl() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form's form state.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/maestro/src/Form/MaestroTemplateAddForm.php:19

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form's form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/maestro/src/Form/MaestroInteractiveFormBase.php:113

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the form.
    */
   public function completeForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/maestro/src/Controller/MaestroTemplateListBuilder.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a row for an entity in the entity listing.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to build the row.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/maestro/src/Controller/MaestroProcessStatusController.php:21

    ---------- begin diff ----------
@@ @@
    * @param int $processID
    *   The processID we wish to get details for.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response
    */
   public function getDetails($processID) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/maestro/src/Controller/MaestroAutoCompleteController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Returns response for the autocompletion.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object containing the search string.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function autocompleteRoles(Request $request) {
@@ @@
   /**
    * Returns response for the autocompletion.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object containing the search string.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function autocompleteInteractiveHandlers(Request $request) {
@@ @@
   /**
    * Returns response for the autocompletion.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object containing the search string.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function autocompleteBatchHandlers(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/maestro/modules/maestro_webform/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\maestro_webform\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/maestro/modules/examples/maestro_noninteractive_task_plugin_example/src/ProxyClass/MaestroNonInteractiveExampleTaskUninstallValidator.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\maestro_noninteractive_task_plugin_example\ProxyClass {

+    use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\StringTranslation\TranslationInterface;
     /**
      * Provides a proxy class for \Drupal\maestro_noninteractive_task_plugin_example\MaestroNonInteractiveExampleTaskUninstallValidator.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class MaestroNonInteractiveExampleTaskUninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface
+    class MaestroNonInteractiveExampleTaskUninstallValidator implements ModuleUninstallValidatorInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;

@@ @@
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation)
+        public function setStringTranslation(TranslationInterface $translation)
         {
             return $this->lazyLoadItself()->setStringTranslation($translation);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/maestro/modules/examples/maestro_noninteractive_task_plugin_example/src/MaestroNonInteractiveExampleTaskUninstallValidator.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new MaestroExampleTaskUninstallValidator.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/maestro/modules/examples/maestro_interactive_task_plugin_example/src/ProxyClass/MaestroInteractiveExampleTaskUninstallValidator.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\maestro_interactive_task_plugin_example\ProxyClass {

+    use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\StringTranslation\TranslationInterface;
     /**
      * Provides a proxy class for \Drupal\maestro_interactive_task_plugin_example\MaestroInteractiveExampleTaskUninstallValidator.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class MaestroInteractiveExampleTaskUninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface
+    class MaestroInteractiveExampleTaskUninstallValidator implements ModuleUninstallValidatorInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;

@@ @@
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation)
+        public function setStringTranslation(TranslationInterface $translation)
         {
             return $this->lazyLoadItself()->setStringTranslation($translation);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/maestro/modules/examples/maestro_interactive_task_plugin_example/src/MaestroInteractiveExampleTaskUninstallValidator.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new MaestroInteractiveExampleTaskUninstallValidator.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/maestro/modules/examples/maestro_form_approval_example/src/ProxyClass/MaestroFormApprovalExampleUninstallValidator.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\maestro_form_approval_example\ProxyClass {

+    use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\StringTranslation\TranslationInterface;
     /**
      * Provides a proxy class for \Drupal\maestro_form_approval_example\MaestroFormApprovalExampleUninstallValidator.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class MaestroFormApprovalExampleUninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface
+    class MaestroFormApprovalExampleUninstallValidator implements ModuleUninstallValidatorInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;

@@ @@
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation)
+        public function setStringTranslation(TranslationInterface $translation)
         {
             return $this->lazyLoadItself()->setStringTranslation($translation);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/maestro/modules/examples/maestro_form_approval_example/src/MaestroFormApprovalExampleUninstallValidator.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new MaestroFormApprovalExampleUninstallValidator.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/maestro/maestro.module:306

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The formstate information from the form.
  */
 function maestro_content_type_task_submit(array &$form, FormStateInterface $form_state) {
@@ @@

   // Now, we actually want to use our own template, which is inside of our Maestro module templates folder.
   $theme_registry['maestro_views_view_table']['template'] = 'maestro-views-view-table';
-  $path = drupal_get_path('module', 'maestro');
+  $path = \Drupal::service('extension.list.module')->getPath('maestro');
   $theme_registry['maestro_views_view_table']['path'] = $path . '/templates';
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


24) modules/contrib/maestro/maestro.install:114

    ---------- begin diff ----------
@@ @@
 function maestro_update_8004() {
   $message = NULL;
   if (\Drupal::moduleHandler()->moduleExists('views') && !View::load('maestro_completed_tasks')) {
-    $config_path = drupal_get_path('module', 'maestro') . '/config/install/views.view.maestro_completed_tasks.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('maestro') . '/config/install/views.view.maestro_completed_tasks.yml';
     $data = Yaml::parse(file_get_contents($config_path));
     \Drupal::configFactory()->getEditable('views.view.maestro_completed_tasks')->setData($data)->save(TRUE);
     $message = 'The new Maestro Completed Tasks view has been created.';
@@ @@
 function maestro_update_8005() {
   $message = NULL;
   if (\Drupal::moduleHandler()->moduleExists('views') && !View::load('maestro_entity_identifiers')) {
-    $config_path = drupal_get_path('module', 'maestro') . '/config/install/views.view.maestro_entity_identifiers.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('maestro') . '/config/install/views.view.maestro_entity_identifiers.yml';
     $data = Yaml::parse(file_get_contents($config_path));
     \Drupal::configFactory()->getEditable('views.view.maestro_entity_identifiers')->setData($data)->save(TRUE);
     $message = 'The new Maestro Entity Identifiers view for the Task Console has been created.';
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/maestro/src/Plugin/RulesAction/MaestroRulesActionSpawnWo
         rkflow.php" file, due to:                                              
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/maestro/modules/maestro_webform/src/Plugin/WebformHandle
         r/MaestroWebformHandler.php" file, due to:                             
         "Analyze error: "Class Drupal\webform\Plugin\WebformHandlerBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

