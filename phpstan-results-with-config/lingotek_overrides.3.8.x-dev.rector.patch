diff --git a/lingotek_overrides.module b/lingotek_overrides.module
index b854113..0c82fa1 100644
--- a/lingotek_overrides.module
+++ b/lingotek_overrides.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Extends default Lingotek services and plugins.
@@ -13,7 +14,7 @@ use Drupal\node\NodeInterface;
  * Implements hook_entity_type_alter().
  */
 function lingotek_overrides_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   if (isset($entity_types['lingotek_content_metadata'])) {
     $entity_types['lingotek_content_metadata']->setClass('Drupal\lingotek_overrides\Entity\LingotekOverridesContentMetadata');
   }
diff --git a/src/Annotation/LingotekFieldProcessor.php b/src/Annotation/LingotekFieldProcessor.php
index a98be68..8f2bab6 100644
--- a/src/Annotation/LingotekFieldProcessor.php
+++ b/src/Annotation/LingotekFieldProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\AnnotationBase;
 
 /**
@@ -23,7 +24,7 @@ class LingotekFieldProcessor extends AnnotationBase {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $title;
 
@@ -32,7 +33,7 @@ class LingotekFieldProcessor extends AnnotationBase {
    *
    * @ingroup_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Annotation/LingotekOverridesFormPluginBase.php b/src/Annotation/LingotekOverridesFormPluginBase.php
index 5c1026e..a5ed355 100644
--- a/src/Annotation/LingotekOverridesFormPluginBase.php
+++ b/src/Annotation/LingotekOverridesFormPluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -19,7 +20,7 @@ abstract class LingotekOverridesFormPluginBase extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -28,7 +29,7 @@ abstract class LingotekOverridesFormPluginBase extends Plugin {
   /**
    * The group the plugin belongs to.
    *
-   * @var string|\Drupal\Core\Annotation\Translation
+   * @var string|Translation
    */
   public $group;
 
diff --git a/src/EventSubscriber/LingotekConfigMetadataTransformSubscriber.php b/src/EventSubscriber/LingotekConfigMetadataTransformSubscriber.php
index ae2fce7..91c2639 100644
--- a/src/EventSubscriber/LingotekConfigMetadataTransformSubscriber.php
+++ b/src/EventSubscriber/LingotekConfigMetadataTransformSubscriber.php
@@ -28,41 +28,41 @@ class LingotekConfigMetadataTransformSubscriber implements EventSubscriberInterf
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The active config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $activeStorage;
 
   /**
    * The sync config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $syncStorage;
 
   /**
    * Constructs a new event subscriber instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The config active storage.
-   * @param \Drupal\Core\Config\StorageInterface $sync_storage
+   * @param StorageInterface $sync_storage
    *   The sync config storage.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, StorageInterface $config_storage, StorageInterface $sync_storage) {
@@ -94,12 +94,12 @@ class LingotekConfigMetadataTransformSubscriber implements EventSubscriberInterf
   /**
    * The storage is transformed for exporting.
    *
-   * @param \Drupal\Core\Config\StorageTransformEvent $event
+   * @param StorageTransformEvent $event
    *   The config storage transform event.
    */
   public function onExportTransform(StorageTransformEvent $event) {
     if ($this->isEnabled()) {
-      /** @var \Drupal\Core\Config\StorageInterface $storage */
+      /** @var StorageInterface $storage */
       $storage = $event->getStorage();
       // Never export lingotek metadata config entities.
       $list = $storage->listAll();
@@ -118,12 +118,12 @@ class LingotekConfigMetadataTransformSubscriber implements EventSubscriberInterf
   /**
    * The storage is transformed for importing.
    *
-   * @param \Drupal\Core\Config\StorageTransformEvent $event
+   * @param StorageTransformEvent $event
    *   The config storage transform event.
    */
   public function onImportTransform(StorageTransformEvent $event) {
     if ($this->isEnabled()) {
-      /** @var \Drupal\Core\Config\StorageInterface $storage */
+      /** @var StorageInterface $storage */
       $storage = $event->getStorage();
       $list = $this->activeStorage->listAll();
       foreach ($list as $config_name) {
diff --git a/src/FieldProcessor/LingotekFieldProcessorInterface.php b/src/FieldProcessor/LingotekFieldProcessorInterface.php
index 2d1aa6a..2a5d905 100644
--- a/src/FieldProcessor/LingotekFieldProcessorInterface.php
+++ b/src/FieldProcessor/LingotekFieldProcessorInterface.php
@@ -13,9 +13,9 @@ interface LingotekFieldProcessorInterface {
   /**
    * Check if this processor applies to a given field name.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Content entity to process.
    */
   public function appliesToField(FieldDefinitionInterface $field_definition, ContentEntityInterface &$entity);
@@ -23,11 +23,11 @@ interface LingotekFieldProcessorInterface {
   /**
    * Extract data for the given field in the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Content entity to extract data from.
    * @param string $field_name
    *   The field name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $data
    *   The data being extracted.
@@ -39,15 +39,15 @@ interface LingotekFieldProcessorInterface {
   /**
    * Extract data for the given field in the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $translation
+   * @param ContentEntityInterface $translation
    *   Content entity to store data in.
    * @param string $langcode
    *   The langcode being saved.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $revision
+   * @param ContentEntityInterface $revision
    *   Uploaded content entity revision as a reference.
    * @param string $field_name
    *   The field name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $field_data
    *   The field data for being stored.
diff --git a/src/FieldProcessor/LingotekFieldProcessorManager.php b/src/FieldProcessor/LingotekFieldProcessorManager.php
index 42454e5..f180059 100644
--- a/src/FieldProcessor/LingotekFieldProcessorManager.php
+++ b/src/FieldProcessor/LingotekFieldProcessorManager.php
@@ -22,9 +22,9 @@ class LingotekFieldProcessorManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -42,12 +42,12 @@ class LingotekFieldProcessorManager extends DefaultPluginManager {
   /**
    * Gets the processor plugins for a given field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\lingotek_overrides\FieldProcessor\LingotekFieldProcessorInterface[]
+   * @return LingotekFieldProcessorInterface[]
    *   The field processors.
    */
   public function getProcessorsForField(FieldDefinitionInterface $field_definition, EntityInterface $entity) {
@@ -55,7 +55,7 @@ class LingotekFieldProcessorManager extends DefaultPluginManager {
     $valid_processors = [];
     uasort($field_processor_definitions, 'Drupal\Component\Utility\SortArray::sortByWeightElement');
     foreach ($field_processor_definitions as $field_processor_definition_id => $field_processor_definition) {
-      /** @var \Drupal\lingotek_overrides\FieldProcessor\LingotekFieldProcessorInterface $processor */
+      /** @var LingotekFieldProcessorInterface $processor */
       $processor = $this->createInstance($field_processor_definition_id, []);
       if ($processor->appliesToField($field_definition, $entity)) {
         $valid_processors[] = $processor;
@@ -71,7 +71,7 @@ class LingotekFieldProcessorManager extends DefaultPluginManager {
   /**
    * Gets the default processor.
    *
-   * @return \Drupal\lingotek_overrides\FieldProcessor\LingotekFieldProcessorInterface
+   * @return LingotekFieldProcessorInterface
    *   The default processor.
    */
   public function getDefaultProcessor() {
diff --git a/src/Form/LingotekConfigManagementForm.php b/src/Form/LingotekConfigManagementForm.php
index bb482e7..22d27b2 100644
--- a/src/Form/LingotekConfigManagementForm.php
+++ b/src/Form/LingotekConfigManagementForm.php
@@ -49,7 +49,7 @@ class LingotekConfigManagementForm extends FormLingotekConfigManagementForm {
     }
     elseif (substr($this->filter, -7) == '_fields') {
       $showingFields = TRUE;
-      /** @var \Drupal\config_translation\ConfigFieldMapper $mapper */
+      /** @var ConfigFieldMapper $mapper */
       $mapper = $this->mappers[$this->filter];
       $base_entity_type = $mapper->getPluginDefinition()['base_entity_type'];
 
@@ -107,7 +107,7 @@ class LingotekConfigManagementForm extends FormLingotekConfigManagementForm {
 
       $ids = $query->execute();
       $entities = $entity_storage->loadMultiple($ids);
-      /** @var \Drupal\config_translation\ConfigEntityMapper $mapper  */
+      /** @var ConfigEntityMapper $mapper  */
       $mappers = [];
       foreach ($entities as $entity) {
         $new_mapper = clone $mapper;
@@ -276,7 +276,7 @@ class LingotekConfigManagementForm extends FormLingotekConfigManagementForm {
     });
     $bundles = [];
     foreach ($mappers as $bundle => $mapper) {
-      /** @var \Drupal\config_translation\ConfigEntityMapper $mapper */
+      /** @var ConfigEntityMapper $mapper */
       $bundles[$bundle] = (string) $mapper->getTypeLabel();
     }
     asort($bundles);
diff --git a/src/Form/LingotekManagementForm.php b/src/Form/LingotekManagementForm.php
index 79fd947..86a6fbb 100644
--- a/src/Form/LingotekManagementForm.php
+++ b/src/Form/LingotekManagementForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek_overrides\Form;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Database\Query\TableSortExtender;
 use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\PagerSelectExtender;
@@ -45,43 +47,43 @@ class LingotekManagementForm extends BaseLingotekManagementForm {
   /**
    * LingotekManagementForm constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The current database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The Lingotek service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager
+   * @param ContentTranslationManagerInterface $content_translation_manager
    *   The content translation manager.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    * @param string $entity_type_id
    *   The entity type id.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator.
-   * @param \Drupal\lingotek_overrides\FormFilterPluginManager $form_filter_manager
+   * @param FormFilterPluginManager $form_filter_manager
    *   The form-filter plugin manager.
-   * @param \Drupal\lingotek_overrides\FormFieldPluginManager $form_field_manager
+   * @param FormFieldPluginManager $form_field_manager
    *   The form-field plugin manager.
-   * @param \Drupal\lingotek_overrides\FormOperationPluginManager $form_operation_manager
+   * @param FormOperationPluginManager $form_operation_manager
    *   The form-operation plugin manager.
-   * @param \Drupal\lingotek_overrides\FormOptionPluginManager $form_option_manager
+   * @param FormOptionPluginManager $form_option_manager
    *   The form-option plugin manager.
    */
   public function __construct(
@@ -233,9 +235,9 @@ class LingotekManagementForm extends BaseLingotekManagementForm {
     $items_per_page = $this->getItemsPerPage();
     $temp_store = $this->tempStoreFactory->get($this->getTempStorageFilterKey());
 
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = $this->entityTypeManager->getDefinition($this->entityTypeId);
-    /** @var \Drupal\Core\Database\Query\PagerSelectExtender $query */
+    /** @var PagerSelectExtender $query */
     $query = $this->connection->select($entity_type->getBaseTable(), 'entity_table')->extend('\Drupal\Core\Database\Query\PagerSelectExtender');
     $query->fields('entity_table', [$entity_type->getKey('id')]);
 
@@ -391,7 +393,7 @@ class LingotekManagementForm extends BaseLingotekManagementForm {
       }
     }
     if ($jobFilter) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $metadata_type */
+      /** @var EntityTypeInterface $metadata_type */
       $metadata_type = $this->entityTypeManager->getDefinition('lingotek_content_metadata');
       $query->innerJoin($metadata_type->getBaseTable(), 'metadata',
         'entity_table.' . $entity_type->getKey('id') . '= metadata.content_entity_id AND metadata.content_entity_type_id = \'' . $entity_type->id() . '\'');
@@ -502,7 +504,7 @@ class LingotekManagementForm extends BaseLingotekManagementForm {
     $query->condition('entity_table.' . $entity_type->getKey('langcode'), LanguageInterface::LANGCODE_NOT_SPECIFIED, '!=');
 
     if ($targetStatusFilter) {
-      /** @var \Drupal\Core\Database\Query\PagerSelectExtender $subquery */
+      /** @var PagerSelectExtender $subquery */
       $subquery = $this->connection->select($entity_type->getBaseTable(), 'entity_table')->extend('\Drupal\Core\Database\Query\PagerSelectExtender');
       $subquery->fields('entity_table', [$entity_type->getKey('id')]);
       $metadata_type = $this->entityTypeManager->getDefinition('lingotek_content_metadata');
@@ -612,7 +614,7 @@ class LingotekManagementForm extends BaseLingotekManagementForm {
    * @return bool
    *   TRUE if the entity type has bundles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function hasBundles() {
     if (is_null($this->hasBundles)) {
@@ -627,13 +629,13 @@ class LingotekManagementForm extends BaseLingotekManagementForm {
   /**
    * Makes a query sortable.
    *
-   * @param \Drupal\Core\Database\Query\PagerSelectExtender $query
+   * @param PagerSelectExtender $query
    *   The query.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    */
   protected function sortableQuery(PagerSelectExtender $query, EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Database\Query\TableSortExtender $table_sort_query */
+    /** @var TableSortExtender $table_sort_query */
     // ::distinct() prevents results from being displayed one per page.
     $table_sort_query = $query->distinct()->extend('Drupal\Core\Database\Query\TableSortExtender');
     $table_sort_query->orderByHeader($this->getHeaders());
@@ -643,7 +645,7 @@ class LingotekManagementForm extends BaseLingotekManagementForm {
       [$table, $field] = explode('.', $field);
       $table_sort_query->fields($table, [$field]);
     }
-    /** @var \Drupal\Core\Database\Query\PagerSelectExtender $query */
+    /** @var PagerSelectExtender $query */
     $query = $table_sort_query->extend('Drupal\Core\Database\Query\PagerSelectExtender');
     $query->condition('entity_data.default_langcode', 1);
     $query->innerJoin($entity_type->getDataTable(), 'entity_data',
diff --git a/src/Form/LingotekManagementFormTrait.php b/src/Form/LingotekManagementFormTrait.php
index b1d1956..9a603b3 100644
--- a/src/Form/LingotekManagementFormTrait.php
+++ b/src/Form/LingotekManagementFormTrait.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\lingotek_overrides\Form;
 
+use Drupal\Core\TempStore\PrivateTempStoreFactory;
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormFilterInterface;
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormFieldInterface;
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface;
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -16,42 +22,42 @@ trait LingotekManagementFormTrait {
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $translationService;
 
   /**
    * Available form-filter plugins.
    *
-   * @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormFilterInterface[]
+   * @var FormFilterInterface[]
    */
   protected $formFilters = [];
 
   /**
    * Available form-field plugins.
    *
-   * @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormFieldInterface[]
+   * @var FormFieldInterface[]
    */
   protected $formFields = [];
 
   /**
    * Available form-operation plugins.
    *
-   * @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface[]
+   * @var FormOperationInterface[]
    */
   protected $formOperations = [];
 
   /**
    * Available form-option plugins.
    *
-   * @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface[]
+   * @var FormOptionInterface[]
    */
   protected $formOptions = [];
 
@@ -157,7 +163,7 @@ trait LingotekManagementFormTrait {
   /**
    * Uploads source for translation.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param $language
    *   The language.
@@ -230,7 +236,7 @@ trait LingotekManagementFormTrait {
   /**
    * Submits the selected operation.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
diff --git a/src/Form/LingotekManagementRelatedEntitiesForm.php b/src/Form/LingotekManagementRelatedEntitiesForm.php
index f500261..f2ec472 100644
--- a/src/Form/LingotekManagementRelatedEntitiesForm.php
+++ b/src/Form/LingotekManagementRelatedEntitiesForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek_overrides\Form;
 
+use Drupal\lingotek\RelatedEntities\RelatedEntitiesDetectorInterface;
+use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -40,66 +42,66 @@ class LingotekManagementRelatedEntitiesForm extends BaseLingotekManagementRelate
   /**
    * Override for lingotek.configuration service.
    *
-   * @var \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The pager.manager service.
    *
-   * @var \Drupal\Core\Pager\PagerManagerInterface
+   * @var PagerManagerInterface
    */
   protected $pagerManager;
 
   /**
    * The plugin.manager.related_entities_detector service.
    *
-   * @var \Drupal\lingotek\RelatedEntities\RelatedEntitiesDetectorManager
+   * @var RelatedEntitiesDetectorManager
    */
   protected $relatedEntitiesDetectorManager;
 
   /**
    * LingotekManagementRelatedEntitiesForm constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The current database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The lingotek service.
    * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager
+   * @param ContentTranslationManagerInterface $content_translation_manager
    *   The content translation manager.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator.
-   * @param \Drupal\Core\Pager\PagerManagerInterface $pager_manager
+   * @param PagerManagerInterface $pager_manager
    *   The pager.manager service.
-   * @param \Drupal\lingotek_overrides\FormFilterPluginManager $form_filter_manager
+   * @param FormFilterPluginManager $form_filter_manager
    *   The form-filter plugin manager.
-   * @param \Drupal\lingotek_overrides\FormFieldPluginManager $form_field_manager
+   * @param FormFieldPluginManager $form_field_manager
    *   The form-field plugin manager.
-   * @param \Drupal\lingotek_overrides\FormOperationPluginManager $form_operation_manager
+   * @param FormOperationPluginManager $form_operation_manager
    *   The form-operation plugin manager.
-   * @param \Drupal\lingotek_overrides\FormOptionPluginManager $form_option_manager
+   * @param FormOptionPluginManager $form_option_manager
    *   The form-option plugin manager.
-   * @param \Drupal\lingotek\RelatedEntities\RelatedEntitiesDetectorManager $related_entities_detector_manager
+   * @param RelatedEntitiesDetectorManager $related_entities_detector_manager
    *   The plugin.manager.related_entities_detector service.
    */
   public function __construct(
@@ -325,7 +327,7 @@ class LingotekManagementRelatedEntitiesForm extends BaseLingotekManagementRelate
     $restrict = $this->getRestrictRelated();
     $this->lingotekConfiguration->setRestrictFilter($restrict);
     // Replace parent::getFilteredEntities() completely.
-    /** @var \Drupal\Core\Entity\ContentEntityInterface[][] $entities */
+    /** @var ContentEntityInterface[][] $entities */
     $entities = [];
     $related = [];
     $visited = [];
@@ -333,7 +335,7 @@ class LingotekManagementRelatedEntitiesForm extends BaseLingotekManagementRelate
     $plugin_definitions = $this->relatedEntitiesDetectorManager->getDefinitions();
     uasort($plugin_definitions, 'Drupal\Component\Utility\SortArray::sortByWeightElement');
     foreach ($plugin_definitions as $plugin_definition_id => $plugin_definition) {
-      /** @var \Drupal\lingotek\RelatedEntities\RelatedEntitiesDetectorInterface $plugin */
+      /** @var RelatedEntitiesDetectorInterface $plugin */
       $plugin = $this->relatedEntitiesDetectorManager->createInstance($plugin_definition_id, []);
 
       if ($restrict && !($plugin instanceof RestrictedEntitiesDetectorInterface)) {
@@ -373,7 +375,7 @@ class LingotekManagementRelatedEntitiesForm extends BaseLingotekManagementRelate
       if ($entity_ids) {
         $_entities = array_intersect_key($_entities, array_flip($entity_ids));
       }
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       foreach ($_entities as $id => $entity) {
         if ($document_ids) {
           if (!in_array($this->translationService->getDocumentId($entity), $document_ids)) {
@@ -433,7 +435,7 @@ class LingotekManagementRelatedEntitiesForm extends BaseLingotekManagementRelate
       }
 
       if ($_entities && ($overrides = $filters['lingotek_overrides'] ?? [])) {
-        /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+        /** @var SelectInterface $query */
         $query = NULL;
 
         foreach ($overrides as $filter_id => $filter_value) {
diff --git a/src/FormFieldPluginManager.php b/src/FormFieldPluginManager.php
index 8b721ed..6ede491 100644
--- a/src/FormFieldPluginManager.php
+++ b/src/FormFieldPluginManager.php
@@ -21,9 +21,9 @@ class FormFieldPluginManager extends FormPluginManagerBase {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache.discovery service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/FormFilterPluginManager.php b/src/FormFilterPluginManager.php
index 172add0..a57d7f8 100644
--- a/src/FormFilterPluginManager.php
+++ b/src/FormFilterPluginManager.php
@@ -21,9 +21,9 @@ class FormFilterPluginManager extends FormPluginManagerBase {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache.discovery service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/FormOperationPluginManager.php b/src/FormOperationPluginManager.php
index 1796b1d..92f47b6 100644
--- a/src/FormOperationPluginManager.php
+++ b/src/FormOperationPluginManager.php
@@ -21,9 +21,9 @@ class FormOperationPluginManager extends FormPluginManagerBase {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache.discovery service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/FormOptionPluginManager.php b/src/FormOptionPluginManager.php
index 017f9b7..3b543ca 100644
--- a/src/FormOptionPluginManager.php
+++ b/src/FormOptionPluginManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek_overrides;
 
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface;
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -25,9 +27,9 @@ class FormOptionPluginManager extends DefaultPluginManager implements FormOption
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache.discovery service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -42,7 +44,7 @@ class FormOptionPluginManager extends DefaultPluginManager implements FormOption
    */
   public function getApplicable(array $operations = [], string $entity_type_id = NULL) {
     $options = [];
-    /** @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface[] $operations */
+    /** @var FormOperationInterface[] $operations */
     foreach ($operations as $operation_id => $operation) {
       foreach ($operation->getOptions() as $option) {
         $options[$option][$operation_id] = $operation;
@@ -50,12 +52,12 @@ class FormOptionPluginManager extends DefaultPluginManager implements FormOption
     }
 
     $definitions = array_intersect_key($this->getDefinitions(), $options);
-    /** @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface[] $plugins */
+    /** @var FormOptionInterface[] $plugins */
     $plugins = [];
 
     foreach (array_keys($definitions) as $plugin_name) {
       try {
-        /** @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface $plugin */
+        /** @var FormOptionInterface $plugin */
         $plugin = $this->createInstance($plugin_name);
 
         if ($plugin->isApplicable([$operations, $entity_type_id])) {
diff --git a/src/FormOptionPluginManagerInterface.php b/src/FormOptionPluginManagerInterface.php
index 8351c7c..879a665 100644
--- a/src/FormOptionPluginManagerInterface.php
+++ b/src/FormOptionPluginManagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek_overrides;
 
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface;
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface;
 /**
  * Interface FormOptionPluginManagerInterface.
  *
@@ -12,12 +14,12 @@ interface FormOptionPluginManagerInterface {
   /**
    * Gets applicable plugins for a the given operations.
    *
-   * @param \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface[] $operations
+   * @param FormOperationInterface[] $operations
    *   The operation plugins.
    * @param string $entity_type_id
    *   The entity-type ID, if any.
    *
-   * @return \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface[]
+   * @return FormOptionInterface[]
    *   The applicable option plugins.
    */
   public function getApplicable(array $operations = [], string $entity_type_id = NULL);
diff --git a/src/FormPluginManagerBase.php b/src/FormPluginManagerBase.php
index 5de6239..3507d5d 100644
--- a/src/FormPluginManagerBase.php
+++ b/src/FormPluginManagerBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides;
 
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Plugin\DefaultPluginManager;
 
@@ -18,7 +19,7 @@ abstract class FormPluginManagerBase extends DefaultPluginManager implements For
    * {@inheritdoc}
    */
   public function getApplicable($form_id, $entity_type_id = NULL) {
-    /** @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormPluginInterface[] $plugins */
+    /** @var FormPluginInterface[] $plugins */
     $plugins = [];
 
     $definitions = array_filter($this->getDefinitions(), function (&$definition) use ($form_id, $entity_type_id) {
@@ -39,7 +40,7 @@ abstract class FormPluginManagerBase extends DefaultPluginManager implements For
 
     foreach (array_keys($definitions) as $plugin_name) {
       try {
-        /** @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormPluginInterface $plugin */
+        /** @var FormPluginInterface $plugin */
         $plugin = $this->createInstance($plugin_name);
 
         if ($plugin->isApplicable([$form_id, $entity_type_id])) {
diff --git a/src/FormPluginManagerInterface.php b/src/FormPluginManagerInterface.php
index 500e7cb..e028d11 100644
--- a/src/FormPluginManagerInterface.php
+++ b/src/FormPluginManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides;
 
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormPluginInterface;
 /**
  * Interface FormPluginManagerInterface.
  *
@@ -17,7 +18,7 @@ interface FormPluginManagerInterface {
    * @param string|null $entity_type_id
    *   The entity-type ID.
    *
-   * @return \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormPluginInterface[]
+   * @return FormPluginInterface[]
    *   The form plugins.
    */
   public function getApplicable($form_id, $entity_type_id = NULL);
diff --git a/src/Lingotek.php b/src/Lingotek.php
index b29424d..dc67422 100644
--- a/src/Lingotek.php
+++ b/src/Lingotek.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Serialization\SerializationInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ -23,21 +24,21 @@ class Lingotek extends BaseLingotek implements LingotekInterface {
   /**
    * The Lingotek API.
    *
-   * @var \Drupal\lingotek_overrides\Remote\LingotekApiInterface
+   * @var LingotekApiInterface
    */
   protected $api;
 
   /**
    * The serialization.json service.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $json;
 
   /**
    * The logger channel for lingotek_overrides.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
@@ -51,19 +52,19 @@ class Lingotek extends BaseLingotek implements LingotekInterface {
   /**
    * Lingotek constructor.
    *
-   * @param \Drupal\lingotek_overrides\Remote\LingotekApiInterface $api
+   * @param LingotekApiInterface $api
    *   The lingotek service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\lingotek\LingotekFilterManagerInterface $lingotek_filter_manager
+   * @param LingotekFilterManagerInterface $lingotek_filter_manager
    *   The Lingotek Filter manager.
    * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\Component\Serialization\SerializationInterface $json
+   * @param SerializationInterface $json
    *   The serialization.json service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger.
    */
   public function __construct(LingotekApiInterface $api, LanguageLocaleMapperInterface $language_locale_mapper, ConfigFactoryInterface $config_factory, LingotekFilterManagerInterface $lingotek_filter_manager, LingotekConfigurationServiceInterface $lingotek_configuration = NULL, SerializationInterface $json, LoggerChannelFactoryInterface $logger) {
diff --git a/src/LingotekConfigurationService.php b/src/LingotekConfigurationService.php
index 4a7c598..83ddf81 100644
--- a/src/LingotekConfigurationService.php
+++ b/src/LingotekConfigurationService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Field\FieldConfigInterface;
@@ -17,14 +18,14 @@ class LingotekConfigurationService extends BaseLingotekConfigurationService impl
   /**
    * The lingotek.settings configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * The entity_field.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -38,9 +39,9 @@ class LingotekConfigurationService extends BaseLingotekConfigurationService impl
   /**
    * LingotekConfigurationService constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config.factory service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity_field.manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityFieldManagerInterface $entity_field_manager) {
diff --git a/src/LingotekConfigurationServiceInterface.php b/src/LingotekConfigurationServiceInterface.php
index 08bef78..3a4a37f 100644
--- a/src/LingotekConfigurationServiceInterface.php
+++ b/src/LingotekConfigurationServiceInterface.php
@@ -38,7 +38,7 @@ interface LingotekConfigurationServiceInterface extends BaseLingotekConfiguratio
    *   The entity-type ID.
    * @param $bundle
    *   The bundle name.
-   * @param \Drupal\Core\Field\FieldConfigInterface $field
+   * @param FieldConfigInterface $field
    *   The field configuration.
    * @param mixed $value
    *   The setting value.
diff --git a/src/LingotekContentTranslationService.php b/src/LingotekContentTranslationService.php
index 220da46..d74fd39 100644
--- a/src/LingotekContentTranslationService.php
+++ b/src/LingotekContentTranslationService.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lingotek_overrides;
 
+use Drupal\lingotek\Moderation\LingotekModerationFactoryInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Database\Connection;
@@ -37,30 +40,30 @@ class LingotekContentTranslationService extends BaseLingotekContentTranslationSe
   /**
    * The plugin.manager.lingotek_field_processor service.
    *
-   * @var \Drupal\lingotek_overrides\FieldProcessor\LingotekFieldProcessorManager
+   * @var LingotekFieldProcessorManager
    */
   protected $fieldProcessorManager;
 
   /**
    * Constructs a new LingotekContentTranslationService object.
    *
-   * @param \Drupal\lingotek_overrides\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   An lingotek object.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
    * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   An entity manager object.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection object.
-   * @param \Drupal\lingotek_overrides\FieldProcessor\LingotekFieldProcessorManager $field_processor_manager
+   * @param LingotekFieldProcessorManager $field_processor_manager
    *   The plugin.manager.lingotek_field_processor service.
    */
   public function __construct(
@@ -105,7 +108,7 @@ class LingotekContentTranslationService extends BaseLingotekContentTranslationSe
     $source_entity = NULL;
 
     if ($entity instanceof RevisionableInterface) {
-      /** @var \Drupal\lingotek\Moderation\LingotekModerationFactoryInterface $moderation_factory */
+      /** @var LingotekModerationFactoryInterface $moderation_factory */
       $moderation_factory = \Drupal::service('lingotek.moderation_factory');
       $moderation_handler = $moderation_factory->getModerationHandler();
       // Check that handler was overridden in lingotek_overrides.
@@ -160,14 +163,14 @@ class LingotekContentTranslationService extends BaseLingotekContentTranslationSe
   /**
    * Gets an entity's translatable fields.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return array
    *   The translatable fields.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getTranslatableFields(ContentEntityInterface $entity) {
     $entity_type = $entity->getEntityType();
@@ -207,8 +210,7 @@ class LingotekContentTranslationService extends BaseLingotekContentTranslationSe
       // We need to load the revision that was uploaded for consistency. For that,
       // we check if we have a valid revision in the response, and if not, we
       // check the date of the uploaded document.
-
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $revision = (isset($data['_lingotek_metadata']) && isset($data['_lingotek_metadata']['_entity_revision'])) ? $data['_lingotek_metadata']['_entity_revision'] : NULL;
       $revision = $this->loadUploadedRevision($entity, $revision);
 
@@ -225,7 +227,7 @@ class LingotekContentTranslationService extends BaseLingotekContentTranslationSe
       }
 
       // Initialize the translation on the Drupal side, if necessary.
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if (!$entity->hasTranslation($langcode)) {
         $entity->addTranslation($langcode, $revision->toArray());
       }
@@ -271,7 +273,7 @@ class LingotekContentTranslationService extends BaseLingotekContentTranslationSe
 
       // If there is any content moderation module is enabled, we may need to
       // perform a transition in their workflow.
-      /** @var \Drupal\lingotek\Moderation\LingotekModerationFactoryInterface $moderation_factory */
+      /** @var LingotekModerationFactoryInterface $moderation_factory */
       $moderation_factory = \Drupal::service('lingotek.moderation_factory');
       $moderation_handler = $moderation_factory->getModerationHandler();
       $moderation_handler->performModerationTransitionIfNeeded($translation);
diff --git a/src/LingotekContentTranslationServiceInterface.php b/src/LingotekContentTranslationServiceInterface.php
index bf8a4e7..f273120 100644
--- a/src/LingotekContentTranslationServiceInterface.php
+++ b/src/LingotekContentTranslationServiceInterface.php
@@ -13,7 +13,7 @@ interface LingotekContentTranslationServiceInterface extends BaseLingotekContent
   /**
    * Public wrapper for ::includeMetadata().
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param $data
    *   The array of data.
diff --git a/src/LingotekFieldConfigEditForm.php b/src/LingotekFieldConfigEditForm.php
index 1cdd4c8..d482bef 100644
--- a/src/LingotekFieldConfigEditForm.php
+++ b/src/LingotekFieldConfigEditForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides;
 
+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\lingotek\Form\LingotekFieldConfigEditForm as BaseLingotekFieldConfigEditForm;
 
@@ -15,7 +16,7 @@ class LingotekFieldConfigEditForm extends BaseLingotekFieldConfigEditForm {
   /**
    * The lingotek.configuration service.
    *
-   * @var \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfig;
 
@@ -26,7 +27,7 @@ class LingotekFieldConfigEditForm extends BaseLingotekFieldConfigEditForm {
     // Prevent error in the parent due to a missing existence check.
     $form['translatable']['#disabled'] = $form['translatable']['#disabled'] ?? FALSE;
     parent::form($form, $form_state);
-    /** @var \Drupal\field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = $form_state->getFormObject()->getEntity();
     if ($field->getType() == 'entity_reference') {
       $entity_id = $field->getTargetEntityTypeId();
diff --git a/src/LingotekInterface.php b/src/LingotekInterface.php
index 6b01e66..b605603 100644
--- a/src/LingotekInterface.php
+++ b/src/LingotekInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides;
 
+use Drupal\lingotek_overrides\Remote\LingotekApiInterface;
 use Drupal\lingotek\LingotekInterface as BaseLingotekInterface;
 
 /**
@@ -14,7 +15,7 @@ interface LingotekInterface extends BaseLingotekInterface {
   /**
    * Gets the Lingotek API object.
    *
-   * @return \Drupal\lingotek_overrides\Remote\LingotekApiInterface
+   * @return LingotekApiInterface
    *   The API.
    */
   public function getApi();
diff --git a/src/Moderation/LingotekContentModerationHandler.php b/src/Moderation/LingotekContentModerationHandler.php
index 958dabe..145022c 100644
--- a/src/Moderation/LingotekContentModerationHandler.php
+++ b/src/Moderation/LingotekContentModerationHandler.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lingotek_overrides\Moderation;
 
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\content_moderation\Entity\ContentModerationStateInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\lingotek\Moderation\LingotekContentModerationHandler as BaseLingotekContentModerationHandler;
 
@@ -17,7 +20,7 @@ class LingotekContentModerationHandler extends BaseLingotekContentModerationHand
     // Make sure the entity is untranslated.
     $entity = $entity->getUntranslated();
     $entity_type_id = $entity->getEntityTypeId();
-    /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $storage */
+    /** @var SqlContentEntityStorage $storage */
     $storage = $this->entityTypeManager->getStorage('content_moderation_state');
     $query = $storage->getQuery()
       ->condition('moderation_state', $state)
@@ -26,7 +29,7 @@ class LingotekContentModerationHandler extends BaseLingotekContentModerationHand
       ->condition('langcode', $entity->language()->getId())
       ->sort('content_entity_revision_id', 'DESC')
       ->allRevisions();
-    /** @var \Drupal\content_moderation\Entity\ContentModerationStateInterface[] $states */
+    /** @var ContentModerationStateInterface[] $states */
     $states = $storage->loadMultipleRevisions(array_keys($query->execute()));
     $entity_revisions = [];
 
@@ -36,9 +39,9 @@ class LingotekContentModerationHandler extends BaseLingotekContentModerationHand
 
     if ($entity_revisions) {
       $entity_type = $entity->getEntityType();
-      /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $entity_storage */
+      /** @var ContentEntityStorageInterface $entity_storage */
       $entity_storage = $this->entityTypeManager->getStorage($entity_type_id);
-      /** @var \Drupal\Core\Entity\ContentEntityInterface[] $entity_revisions */
+      /** @var ContentEntityInterface[] $entity_revisions */
       $entity_revisions = $entity_storage->loadMultipleRevisions($entity_revisions);
 
       foreach ($entity_revisions as $entity_revision) {
diff --git a/src/Moderation/LingotekModerationHandlerInterface.php b/src/Moderation/LingotekModerationHandlerInterface.php
index bc9e3cd..1e7e7fb 100644
--- a/src/Moderation/LingotekModerationHandlerInterface.php
+++ b/src/Moderation/LingotekModerationHandlerInterface.php
@@ -13,12 +13,12 @@ interface LingotekModerationHandlerInterface extends BaseLingotekModerationHandl
   /**
    * Gets the latest affected revision with a given moderation state.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $state
    *   The moderation state.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The revision, or NULL if none matched the given state.
    */
   public function getLatestAffectedRevisionByState(ContentEntityInterface $entity, string $state);
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekBlockFieldProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekBlockFieldProcessor.php
index 9d3859c..58952c3 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekBlockFieldProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekBlockFieldProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Plugin\LingotekFieldProcessor;
 
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -28,49 +29,49 @@ class LingotekBlockFieldProcessor extends PluginBase implements LingotekFieldPro
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The typed config handler.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -83,19 +84,19 @@ class LingotekBlockFieldProcessor extends PluginBase implements LingotekFieldPro
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $repository
+   * @param EntityRepositoryInterface $repository
    *   The entity repository.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $lingotek_content_translation
+   * @param LingotekContentTranslationServiceInterface $lingotek_content_translation
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
+   * @param TypedConfigManagerInterface $typed_config
    *   The typed config handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $repository, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, LingotekContentTranslationServiceInterface $lingotek_content_translation, TypedConfigManagerInterface $typed_config, LoggerInterface $logger) {
@@ -171,7 +172,7 @@ class LingotekBlockFieldProcessor extends PluginBase implements LingotekFieldPro
   public function store(ContentEntityInterface &$translation, string $langcode, ContentEntityInterface &$revision, string $field_name, FieldDefinitionInterface $field_definition, array &$field_data) {
     $translation->set($field_name, NULL);
     foreach ($field_data as $delta => $field_item) {
-      /** @var \Drupal\Core\Block\BlockPluginInterface $block */
+      /** @var BlockPluginInterface $block */
       $block = $revision->get($field_name)->get($delta)->getBlock();
       if ($block !== NULL) {
         $entityData = NULL;
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekCohesionEntityReferenceRevisionsProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekCohesionEntityReferenceRevisionsProcessor.php
index c93b1e2..573b9b4 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekCohesionEntityReferenceRevisionsProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekCohesionEntityReferenceRevisionsProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Plugin\LingotekFieldProcessor;
 
+use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -38,7 +39,7 @@ class LingotekCohesionEntityReferenceRevisionsProcessor extends LingotekEntityRe
       $embedded_entity_id = $revision->get($field_name)->get($index)
         ->get('target_id')
         ->getValue();
-      /** @var \Drupal\Core\Entity\RevisionableInterface $embedded_entity */
+      /** @var RevisionableInterface $embedded_entity */
       $embedded_entity = $this->entityTypeManager->getStorage($target_entity_type_id)
         ->load($embedded_entity_id);
       if ($embedded_entity !== NULL) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekCohesionLayoutProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekCohesionLayoutProcessor.php
index e7a40de..67625e2 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekCohesionLayoutProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekCohesionLayoutProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Plugin\LingotekFieldProcessor;
 
+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
 use Drupal\cohesion\LayoutCanvas\ElementModel;
 use Drupal\cohesion\LayoutCanvas\LayoutCanvas;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -28,42 +29,42 @@ class LingotekCohesionLayoutProcessor extends PluginBase implements LingotekFiel
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The key value store to use.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected $keyValueStore;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -76,17 +77,17 @@ class LingotekCohesionLayoutProcessor extends PluginBase implements LingotekFiel
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $lingotek_content_translation
+   * @param LingotekContentTranslationServiceInterface $lingotek_content_translation
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value_factory
+   * @param KeyValueFactoryInterface $key_value_factory
    *   The key-value store factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, LingotekContentTranslationServiceInterface $lingotek_content_translation, KeyValueFactoryInterface $key_value_factory, LoggerInterface $logger) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekDefaultProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekDefaultProcessor.php
index ebfee74..15ced93 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekDefaultProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekDefaultProcessor.php
@@ -22,7 +22,7 @@ class LingotekDefaultProcessor extends PluginBase implements LingotekFieldProces
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -35,7 +35,7 @@ class LingotekDefaultProcessor extends PluginBase implements LingotekFieldProces
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LingotekConfigurationServiceInterface $lingotek_configuration) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceProcessor.php
index 8d52ff9..f949af7 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceProcessor.php
@@ -25,28 +25,28 @@ class LingotekEntityReferenceProcessor extends PluginBase implements LingotekFie
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -59,13 +59,13 @@ class LingotekEntityReferenceProcessor extends PluginBase implements LingotekFie
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $lingotek_content_translation
+   * @param LingotekContentTranslationServiceInterface $lingotek_content_translation
    *   The Lingotek content translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, LingotekContentTranslationServiceInterface $lingotek_content_translation) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceRevisionsProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceRevisionsProcessor.php
index 43d58be..b4c611e 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceRevisionsProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceRevisionsProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Plugin\LingotekFieldProcessor;
 
+use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -25,35 +26,35 @@ class LingotekEntityReferenceRevisionsProcessor extends PluginBase implements Li
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -66,15 +67,15 @@ class LingotekEntityReferenceRevisionsProcessor extends PluginBase implements Li
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $lingotek_content_translation
+   * @param LingotekContentTranslationServiceInterface $lingotek_content_translation
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, LingotekContentTranslationServiceInterface $lingotek_content_translation, ModuleHandlerInterface $module_handler) {
@@ -147,7 +148,7 @@ class LingotekEntityReferenceRevisionsProcessor extends PluginBase implements Li
       $embedded_entity_id = $revision->get($field_name)->get($index)
         ->get('target_id')
         ->getValue();
-      /** @var \Drupal\Core\Entity\RevisionableInterface $embedded_entity */
+      /** @var RevisionableInterface $embedded_entity */
       $embedded_entity = $this->entityTypeManager->getStorage($target_entity_type_id)
         ->load($embedded_entity_id);
       if ($embedded_entity !== NULL) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderATProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderATProcessor.php
index 0869084..18655b9 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderATProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderATProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek_overrides\Plugin\LingotekFieldProcessor;
 
+use Drupal\layout_builder\SectionComponent;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Config\TypedConfigManagerInterface;
@@ -30,63 +32,63 @@ class LingotekLayoutBuilderATProcessor extends PluginBase implements LingotekFie
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The typed config handler.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -99,23 +101,23 @@ class LingotekLayoutBuilderATProcessor extends PluginBase implements LingotekFie
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $repository
+   * @param EntityRepositoryInterface $repository
    *   The entity repository.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $lingotek_content_translation
+   * @param LingotekContentTranslationServiceInterface $lingotek_content_translation
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
+   * @param TypedConfigManagerInterface $typed_config
    *   The typed config handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $repository, BlockManagerInterface $block_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, LingotekContentTranslationServiceInterface $lingotek_content_translation, TypedConfigManagerInterface $typed_config, ModuleHandlerInterface $module_handler, LoggerInterface $logger) {
@@ -169,9 +171,9 @@ class LingotekLayoutBuilderATProcessor extends PluginBase implements LingotekFie
       foreach ($entity->get($field_name) as $field_item) {
         $sectionObject = $field_item->getValue()['section'];
         $components = $sectionObject->getComponents();
-        /** @var \Drupal\layout_builder\SectionComponent $component */
+        /** @var SectionComponent $component */
         foreach ($components as $componentUuid => $component) {
-          /** @var \Drupal\Core\Block\BlockPluginInterface $block_instance */
+          /** @var BlockPluginInterface $block_instance */
           // TODO: Change this to getConfiguration() when is safe to do so.
           // See https://www.drupal.org/project/drupal/issues/3180555.
           $block_instance = $this->blockManager->createInstance($component->getPluginId(), $component->get('configuration'));
@@ -235,10 +237,10 @@ class LingotekLayoutBuilderATProcessor extends PluginBase implements LingotekFie
       }
     }
     foreach ($sourceSections as $delta => &$field_item) {
-      /** @var \Drupal\layout_builder\SectionComponent $sectionObject */
+      /** @var SectionComponent $sectionObject */
       $sectionObject = clone $field_item->section;
       $components = $sectionObject->getComponents();
-      /** @var \Drupal\layout_builder\SectionComponent $component */
+      /** @var SectionComponent $component */
       foreach ($components as $componentUuid => &$component) {
         $config = $component->get('configuration');
         if (isset($field_data['components'][$componentUuid])) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderSTProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderSTProcessor.php
index cd84f07..b0fe0ba 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderSTProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderSTProcessor.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lingotek_overrides\Plugin\LingotekFieldProcessor;
 
+use Drupal\layout_builder\Section;
+use Drupal\layout_builder\SectionComponent;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Config\TypedConfigManagerInterface;
@@ -31,63 +34,63 @@ class LingotekLayoutBuilderSTProcessor extends PluginBase implements LingotekFie
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The typed config handler.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -100,23 +103,23 @@ class LingotekLayoutBuilderSTProcessor extends PluginBase implements LingotekFie
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $repository
+   * @param EntityRepositoryInterface $repository
    *   The entity repository.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $lingotek_content_translation
+   * @param LingotekContentTranslationServiceInterface $lingotek_content_translation
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
+   * @param TypedConfigManagerInterface $typed_config
    *   The typed config handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $repository, BlockManagerInterface $block_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, LingotekContentTranslationServiceInterface $lingotek_content_translation, TypedConfigManagerInterface $typed_config, ModuleHandlerInterface $module_handler, LoggerInterface $logger) {
@@ -170,13 +173,13 @@ class LingotekLayoutBuilderSTProcessor extends PluginBase implements LingotekFie
       $data[$field_name] = ['components' => []];
       $layoutField = $entity->get(OverridesSectionStorage::FIELD_NAME);
       $layout = $layoutField->getValue();
-      /** @var \Drupal\layout_builder\Section $sectionObject */
+      /** @var Section $sectionObject */
       foreach ($layout as $sectionIndex => $section) {
         $sectionObject = $section['section'];
         $components = $sectionObject->getComponents();
-        /** @var \Drupal\layout_builder\SectionComponent $component */
+        /** @var SectionComponent $component */
         foreach ($components as $componentUuid => $component) {
-          /** @var \Drupal\Core\Block\BlockPluginInterface $block_instance */
+          /** @var BlockPluginInterface $block_instance */
           // TODO: Change this to getConfiguration() when is safe to do so.
           // See https://www.drupal.org/project/drupal/issues/3180555.
           $block_instance = $this->blockManager->createInstance($component->getPluginId(), $component->get('configuration'));
@@ -222,9 +225,9 @@ class LingotekLayoutBuilderSTProcessor extends PluginBase implements LingotekFie
     $layout = $layoutField->getValue();
 
     foreach ($field_data['components'] as $componentUuid => $componentData) {
-      /** @var \Drupal\layout_builder\SectionComponent $originalComponent */
+      /** @var SectionComponent $originalComponent */
       $originalComponent = NULL;
-      /** @var \Drupal\layout_builder\Section $section */
+      /** @var Section $section */
       foreach ($layout as $sectionInfo) {
         $sectionComponents = $sectionInfo['section']->getComponents();
         if (isset($sectionComponents[$componentUuid])) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekPathProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekPathProcessor.php
index 8bea8ac..84a176b 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekPathProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekPathProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek_overrides\Plugin\LingotekFieldProcessor;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\path_alias\PathAliasInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,21 +26,21 @@ class LingotekPathProcessor extends PluginBase implements LingotekFieldProcessor
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -51,11 +53,11 @@ class LingotekPathProcessor extends PluginBase implements LingotekFieldProcessor
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, LoggerInterface $logger) {
@@ -92,9 +94,9 @@ class LingotekPathProcessor extends PluginBase implements LingotekFieldProcessor
   public function extract(ContentEntityInterface &$entity, string $field_name, FieldDefinitionInterface $field_definition, array &$data, array &$visited = []) {
     if ($entity->id()) {
       $source = '/' . $entity->toUrl()->getInternalPath();
-      /** @var \Drupal\Core\Entity\EntityStorageInterface $aliasStorage */
+      /** @var EntityStorageInterface $aliasStorage */
       $alias_storage = $this->entityTypeManager->getStorage('path_alias');
-      /** @var \Drupal\path_alias\PathAliasInterface[] $paths */
+      /** @var PathAliasInterface[] $paths */
       $paths = $alias_storage->loadByProperties([
         'path' => $source,
         'langcode' => $entity->language()->getId(),
@@ -120,9 +122,9 @@ class LingotekPathProcessor extends PluginBase implements LingotekFieldProcessor
   public function store(ContentEntityInterface &$translation, string $langcode, ContentEntityInterface &$revision, string $field_name, FieldDefinitionInterface $field_definition, array &$field_data) {
     $stored = FALSE;
     $source = '/' . $revision->toUrl()->getInternalPath();
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $aliasStorage */
+    /** @var EntityStorageInterface $aliasStorage */
     $alias_storage = $this->entityTypeManager->getStorage('path_alias');
-    /** @var \Drupal\path_alias\PathAliasInterface[] $original_paths */
+    /** @var PathAliasInterface[] $original_paths */
     $original_paths = $alias_storage->loadByProperties(['path' => $source, 'langcode' => $revision->getUntranslated()->language()->getId()]);
     $original_path = NULL;
     $alias = $field_data[0]['alias'];
diff --git a/src/Plugin/RelatedEntitiesDetector/RestrictedRelatedEntitiesDetectorBase.php b/src/Plugin/RelatedEntitiesDetector/RestrictedRelatedEntitiesDetectorBase.php
index f448e19..180e052 100644
--- a/src/Plugin/RelatedEntitiesDetector/RestrictedRelatedEntitiesDetectorBase.php
+++ b/src/Plugin/RelatedEntitiesDetector/RestrictedRelatedEntitiesDetectorBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek_overrides\Plugin\RelatedEntitiesDetector;
 
+use Drupal\lingotek_overrides\LingotekConfigurationServiceInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\lingotek\Plugin\RelatedEntitiesDetector\EntityReferenceDetectorBase;
@@ -16,7 +18,7 @@ abstract class RestrictedRelatedEntitiesDetectorBase extends EntityReferenceDete
    * {@inheritdoc}
    */
   public function extract(ContentEntityInterface &$entity, array &$entities, array &$related, $depth, array $visited) {
-    /** @var \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface $config */
+    /** @var LingotekConfigurationServiceInterface $config */
     $config = $this->lingotekConfiguration;
     // Redundant, since the calling method is already checking for restrictions.
     static $restrict;
@@ -42,7 +44,7 @@ abstract class RestrictedRelatedEntitiesDetectorBase extends EntityReferenceDete
       }
 
       asort($field_labels);
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions */
+      /** @var FieldDefinitionInterface[] $field_definitions */
       $field_definitions = array_merge($field_labels, $field_definitions);
 
       foreach ($field_definitions as $field_name => $definition) {
diff --git a/src/Plugin/lingotek_overrides/FormField/Changed.php b/src/Plugin/lingotek_overrides/FormField/Changed.php
index 93c2bb2..d3d5bdf 100644
--- a/src/Plugin/lingotek_overrides/FormField/Changed.php
+++ b/src/Plugin/lingotek_overrides/FormField/Changed.php
@@ -34,7 +34,7 @@ class Changed extends FormFieldBase {
   /**
    * The date.formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -47,11 +47,11 @@ class Changed extends FormFieldBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date.formatter service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, Connection $connection, DateFormatterInterface $date_formatter) {
diff --git a/src/Plugin/lingotek_overrides/FormField/ModerationState.php b/src/Plugin/lingotek_overrides/FormField/ModerationState.php
index 892a0b9..afec1f0 100644
--- a/src/Plugin/lingotek_overrides/FormField/ModerationState.php
+++ b/src/Plugin/lingotek_overrides/FormField/ModerationState.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormField;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Plugin\Context\Context;
@@ -48,7 +49,7 @@ class ModerationState extends Status {
 
       foreach ($languages as $langcode => $language) {
         $language_context = Context::createFromContext($this->languageContext, $language);
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $active */
+        /** @var ContentEntityInterface $active */
         $active = $this->entityRepository->getActive($entity->getEntityTypeId(), $entity->id(), [$this::CURRENT_LANGUAGE_CONTEXT_ID => $language_context]);
         // Make sure the active entity is not a language fallback.
         if ($active->language()->getId() == $langcode) {
diff --git a/src/Plugin/lingotek_overrides/FormField/Status.php b/src/Plugin/lingotek_overrides/FormField/Status.php
index fd12f4b..ff9b999 100644
--- a/src/Plugin/lingotek_overrides/FormField/Status.php
+++ b/src/Plugin/lingotek_overrides/FormField/Status.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormField;
 
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -43,35 +44,35 @@ class Status extends FormFieldBase {
   /**
    * The entity.repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The language_manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The current-language context.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextInterface
+   * @var ContextInterface
    */
   protected $languageContext;
 
   /**
    * The module_handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The content_moderation.moderation_information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;
 
@@ -84,17 +85,17 @@ class Status extends FormFieldBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\Core\Language\ContextProvider\CurrentLanguageContext $language_context_provier
+   * @param CurrentLanguageContext $language_context_provier
    *   The language.current_language_context service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_information
+   * @param ModerationInformationInterface $moderation_information
    *   The content_moderation.moderation_information service.
    */
   public function __construct(
@@ -182,7 +183,7 @@ class Status extends FormFieldBase {
   /**
    * Gets an entity's status or moderation state.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return string
@@ -203,7 +204,7 @@ class Status extends FormFieldBase {
   /**
    * Gets the revision's content moderation state, if available.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity revision.
    *
    * @return string|bool
diff --git a/src/Plugin/lingotek_overrides/FormFieldInterface.php b/src/Plugin/lingotek_overrides/FormFieldInterface.php
index 6d0b484..2c449bc 100644
--- a/src/Plugin/lingotek_overrides/FormFieldInterface.php
+++ b/src/Plugin/lingotek_overrides/FormFieldInterface.php
@@ -21,7 +21,7 @@ interface FormFieldInterface extends FormPluginInterface {
   /**
    * Returns the data for a field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return array
    */
diff --git a/src/Plugin/lingotek_overrides/FormFilter/EntityBundle.php b/src/Plugin/lingotek_overrides/FormFilter/EntityBundle.php
index 8dfd3e4..ac4c414 100644
--- a/src/Plugin/lingotek_overrides/FormFilter/EntityBundle.php
+++ b/src/Plugin/lingotek_overrides/FormFilter/EntityBundle.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormFilter;
 
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\node\NodeInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\SelectInterface;
@@ -30,28 +32,28 @@ class EntityBundle extends FormFilterBase {
   /**
    * The current_route_match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRoute;
 
   /**
    * The lingotek.configuration service.
    *
-   * @var \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The entity_field.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The lingotek.management.filter.node private tempstore.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $filterTempStore;
 
@@ -65,7 +67,7 @@ class EntityBundle extends FormFilterBase {
   /**
    * Entity types used in the filter.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface[]
+   * @var EntityTypeInterface[]
    */
   protected $entityTypes;
 
@@ -99,15 +101,15 @@ class EntityBundle extends FormFilterBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $current_route
+   * @param RouteMatchInterface $current_route
    *   The current_route_match service.
-   * @param \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity_field.manager service.
    */
   public function __construct(
@@ -227,7 +229,7 @@ class EntityBundle extends FormFilterBase {
    */
   protected function extract(string $entity_type_id = NULL, string $entity_bundle = NULL, string $field_name = NULL, int $depth = 100) {
     if (!$entity_type_id && !$entity_bundle) {
-      /** @var \Drupal\node\NodeInterface $entity */
+      /** @var NodeInterface $entity */
       if (!($entity = $this->currentRoute->getParameter('node'))) {
         return [];
       }
@@ -368,7 +370,7 @@ class EntityBundle extends FormFilterBase {
   /**
    * Saves an entity type's definition to a local property.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity-type definition.
    */
   protected function setEntityType(EntityTypeInterface $entity_type) {
diff --git a/src/Plugin/lingotek_overrides/FormFilterBase.php b/src/Plugin/lingotek_overrides/FormFilterBase.php
index 23f7e07..dfb87b1 100644
--- a/src/Plugin/lingotek_overrides/FormFilterBase.php
+++ b/src/Plugin/lingotek_overrides/FormFilterBase.php
@@ -56,7 +56,7 @@ abstract class FormFilterBase extends FormPluginBase implements FormFilterInterf
   /**
    * Adds left join on the lingotek_metadata table.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The query.
    * @param string $entity_id_key
    *   The entity ID's key.
diff --git a/src/Plugin/lingotek_overrides/FormFilterInterface.php b/src/Plugin/lingotek_overrides/FormFilterInterface.php
index adb8298..95325a9 100644
--- a/src/Plugin/lingotek_overrides/FormFilterInterface.php
+++ b/src/Plugin/lingotek_overrides/FormFilterInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Database\Query\SelectInterface;
 
 /**
@@ -36,11 +37,11 @@ interface FormFilterInterface extends FormPluginInterface {
    * Performs the filter operation.
    *
    * @param string $entity_type
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    * @param mixed $value
-   * @param \Drupal\Core\Database\Query\SelectInterface|null $query
+   * @param SelectInterface|null $query
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface|null
+   * @return SelectInterface|null
    */
   public function filter(string $entity_type, array $entities, $value, SelectInterface &$query = NULL);
 
diff --git a/src/Plugin/lingotek_overrides/FormOperation/DeleteContent.php b/src/Plugin/lingotek_overrides/FormOperation/DeleteContent.php
index 62a9315..064d1f3 100644
--- a/src/Plugin/lingotek_overrides/FormOperation/DeleteContent.php
+++ b/src/Plugin/lingotek_overrides/FormOperation/DeleteContent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperation;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 
@@ -47,13 +48,13 @@ class DeleteContent extends DeleteOperationBase {
   protected function redirectToDeleteMultipleEntitiesForm(array $arguments) {
     /**
      * @var array $values
-     * @var \Drupal\Core\Form\FormStateInterface $form_state
+     * @var FormStateInterface $form_state
      */
     [$values, $form_state] = $arguments;
     $entityInfo = [];
     $entities = $this->getSelectedEntities($values);
     foreach ($entities as $entity) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $language = $entity->getUntranslated()->language();
       $entityInfo[$entity->id()] = [$language->getId() => $language->getId()];
     }
diff --git a/src/Plugin/lingotek_overrides/FormOperation/DeleteOperationBase.php b/src/Plugin/lingotek_overrides/FormOperation/DeleteOperationBase.php
index cf1626a..e5e4ac5 100644
--- a/src/Plugin/lingotek_overrides/FormOperation/DeleteOperationBase.php
+++ b/src/Plugin/lingotek_overrides/FormOperation/DeleteOperationBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperation;
 
+use Drupal\Core\Routing\CurrentRouteMatch;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ -17,21 +19,21 @@ abstract class DeleteOperationBase extends FormOperationBase {
   /**
    * The current_route_match service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRoute;
 
   /**
    * The current_user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The tempstore.private service.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempstore;
 
@@ -44,13 +46,13 @@ abstract class DeleteOperationBase extends FormOperationBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current_user service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempstore_private
+   * @param PrivateTempStoreFactory $tempstore_private
    *   The tempstore.private service.
    */
   public function __construct(
@@ -100,7 +102,7 @@ abstract class DeleteOperationBase extends FormOperationBase {
    * @param string[] $values
    *   Array of values that identify the selected entities.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities.
    */
   protected function getSelectedEntities(array $values) {
diff --git a/src/Plugin/lingotek_overrides/FormOperation/DeleteTranslation.php b/src/Plugin/lingotek_overrides/FormOperation/DeleteTranslation.php
index dd10070..2dccb00 100644
--- a/src/Plugin/lingotek_overrides/FormOperation/DeleteTranslation.php
+++ b/src/Plugin/lingotek_overrides/FormOperation/DeleteTranslation.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperation;
 
+use Drupal\Core\Entity\TranslatableInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 
@@ -53,18 +55,18 @@ class DeleteTranslation extends DeleteOperationBase {
     /**
      * @var array $values
      * @var array $langcodes
-     * @var \Drupal\Core\Form\FormStateInterface $form_state
+     * @var FormStateInterface $form_state
      */
     [$values, $langcodes, $form_state] = $arguments;
     $entityInfo = [];
-    /** @var \Drupal\Core\Entity\TranslatableInterface[] $entities */
+    /** @var TranslatableInterface[] $entities */
     $entities = $this->getSelectedEntities($values);
     foreach ($entities as $entity) {
       $source_langcode = $entity->getUntranslated()->language()->getId();
 
       foreach ($langcodes as $langcode) {
         if ($source_langcode !== $langcode && $entity->hasTranslation($langcode)) {
-          /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+          /** @var ContentEntityInterface $entity */
           $entityInfo[$entity->id()][$langcode] = $langcode;
         }
       }
diff --git a/src/Plugin/lingotek_overrides/FormOperationBase.php b/src/Plugin/lingotek_overrides/FormOperationBase.php
index 6c509f1..dd0db1a 100644
--- a/src/Plugin/lingotek_overrides/FormOperationBase.php
+++ b/src/Plugin/lingotek_overrides/FormOperationBase.php
@@ -41,7 +41,7 @@ abstract class FormOperationBase extends FormPluginBase implements FormOperation
   /**
    * Returns the form's submitted values.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -54,7 +54,7 @@ abstract class FormOperationBase extends FormPluginBase implements FormOperation
   /**
    * Returns the selected languages.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/src/Plugin/lingotek_overrides/FormOperationInterface.php b/src/Plugin/lingotek_overrides/FormOperationInterface.php
index 7e27fa5..1f4f72b 100644
--- a/src/Plugin/lingotek_overrides/FormOperationInterface.php
+++ b/src/Plugin/lingotek_overrides/FormOperationInterface.php
@@ -24,7 +24,7 @@ interface FormOperationInterface extends FormPluginInterface {
    * followed by a variable number of arguments. If the callback is a string,
    * it will be considered a method of LingotekManagementFormBase.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/src/Plugin/lingotek_overrides/FormOption/JobId.php b/src/Plugin/lingotek_overrides/FormOption/JobId.php
index a578895..6f72b1d 100644
--- a/src/Plugin/lingotek_overrides/FormOption/JobId.php
+++ b/src/Plugin/lingotek_overrides/FormOption/JobId.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOption;
 
+use Drupal\node\NodeInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -28,21 +29,21 @@ class JobId extends FormOptionBase {
   /**
    * The current_route_match service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRoute;
 
   /**
    * The datetime.time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The date.formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -62,17 +63,17 @@ class JobId extends FormOptionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore.private service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route
+   * @param CurrentRouteMatch $current_route
    *   The current_route_match service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The datetime.time service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date.formatter service.
    * @param \Drupal\pathauto\AliasCleanerInterface|null $alias_cleaner
    *   The pathauto.alias_cleaner service.
@@ -127,7 +128,7 @@ class JobId extends FormOptionBase {
   public function buildElement(array $element = []) {
     $date = $this->dateFormatter->format($this->time->getRequestTime(), 'custom', 'Y-m-d');
     $title = '';
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     if ($node = $this->currentRoute->getParameter('node') ?? NULL) {
       $title = $node->getUntranslated()->label();
     }
diff --git a/src/Plugin/lingotek_overrides/FormOption/Language.php b/src/Plugin/lingotek_overrides/FormOption/Language.php
index d20b082..9d2af8b 100644
--- a/src/Plugin/lingotek_overrides/FormOption/Language.php
+++ b/src/Plugin/lingotek_overrides/FormOption/Language.php
@@ -23,7 +23,7 @@ class Language extends FormOptionBase {
   /**
    * The language_manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -36,13 +36,13 @@ class Language extends FormOptionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore.private service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
    */
   public function __construct(
diff --git a/src/Plugin/lingotek_overrides/FormOption/Profile.php b/src/Plugin/lingotek_overrides/FormOption/Profile.php
index fe5b8c2..ecf1c22 100644
--- a/src/Plugin/lingotek_overrides/FormOption/Profile.php
+++ b/src/Plugin/lingotek_overrides/FormOption/Profile.php
@@ -23,7 +23,7 @@ class Profile extends FormOptionBase {
   /**
    * The lingotek.configuration service.
    *
-   * @var \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -36,13 +36,13 @@ class Profile extends FormOptionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore.private service.
-   * @param \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
    */
   public function __construct(
diff --git a/src/Plugin/lingotek_overrides/FormOptionBase.php b/src/Plugin/lingotek_overrides/FormOptionBase.php
index f79338b..797d7b6 100644
--- a/src/Plugin/lingotek_overrides/FormOptionBase.php
+++ b/src/Plugin/lingotek_overrides/FormOptionBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides;
 
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -20,14 +22,14 @@ abstract class FormOptionBase extends FormPluginBase implements FormOptionInterf
    *
    * Set by the plugin manager when the plugin instance is created.
    *
-   * @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface[]
+   * @var FormOperationInterface[]
    */
   protected $operations = [];
 
   /**
    * The lingotek.management.option private tempstore.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;
 
@@ -40,11 +42,11 @@ abstract class FormOptionBase extends FormPluginBase implements FormOptionInterf
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore.private service.
    */
   public function __construct(
@@ -133,7 +135,7 @@ abstract class FormOptionBase extends FormPluginBase implements FormOptionInterf
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ -152,7 +154,7 @@ abstract class FormOptionBase extends FormPluginBase implements FormOptionInterf
    *
    * Plugins should customize this message with more specific wording.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The error message.
    */
   protected function getErrorMessage() {
diff --git a/src/Plugin/lingotek_overrides/FormOptionInterface.php b/src/Plugin/lingotek_overrides/FormOptionInterface.php
index 252e608..537842f 100644
--- a/src/Plugin/lingotek_overrides/FormOptionInterface.php
+++ b/src/Plugin/lingotek_overrides/FormOptionInterface.php
@@ -25,7 +25,7 @@ interface FormOptionInterface extends FormPluginInterface {
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateElement(array &$element, FormStateInterface $form_state);
@@ -33,7 +33,7 @@ interface FormOptionInterface extends FormPluginInterface {
   /**
    * Stores the operations that are allowing the plugin.
    *
-   * @param \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface[] $operations
+   * @param FormOperationInterface[] $operations
    *   The operations.
    *
    * @return $this
@@ -43,7 +43,7 @@ interface FormOptionInterface extends FormPluginInterface {
   /**
    * Retrieves the operations that are allowing the plugin.
    *
-   * @return \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface[]
+   * @return FormOperationInterface[]
    *   The operations.
    */
   public function getOperations();
diff --git a/src/Plugin/lingotek_overrides/FormPluginBase.php b/src/Plugin/lingotek_overrides/FormPluginBase.php
index 0489219..2a83506 100644
--- a/src/Plugin/lingotek_overrides/FormPluginBase.php
+++ b/src/Plugin/lingotek_overrides/FormPluginBase.php
@@ -19,14 +19,14 @@ abstract class FormPluginBase extends PluginBase implements ContainerFactoryPlug
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
@@ -46,9 +46,9 @@ abstract class FormPluginBase extends PluginBase implements ContainerFactoryPlug
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, Connection $connection) {
diff --git a/src/Plugin/lingotek_overrides/FormPluginInterface.php b/src/Plugin/lingotek_overrides/FormPluginInterface.php
index bce4735..7f0b221 100644
--- a/src/Plugin/lingotek_overrides/FormPluginInterface.php
+++ b/src/Plugin/lingotek_overrides/FormPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 
 /**
@@ -33,7 +34,7 @@ interface FormPluginInterface extends PluginInspectionInterface {
   /**
    * Gets the plugin's title.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The title.
    */
   public function getTitle();
diff --git a/src/Remote/LingotekApiInterface.php b/src/Remote/LingotekApiInterface.php
index 261435c..bca05db 100644
--- a/src/Remote/LingotekApiInterface.php
+++ b/src/Remote/LingotekApiInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_overrides\Remote;
 
+use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Remote\LingotekApiInterface as BaseLingotekApiInterface;
 
 /**
@@ -20,7 +21,7 @@ interface LingotekApiInterface extends BaseLingotekApiInterface {
    * @return mixed
    *   The response.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekApiException
    */
   public function getTaskContent($id);
 
@@ -33,7 +34,7 @@ interface LingotekApiInterface extends BaseLingotekApiInterface {
    * @return mixed
    *   The document content.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekApiException
    */
   public function getDocumentFile($doc_id);
 
@@ -47,7 +48,7 @@ interface LingotekApiInterface extends BaseLingotekApiInterface {
    *
    * @return mixed
    *   The response.
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekApiException
    */
   public function patchTaskContent($id, $args);
 
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index d62a845..23b44be 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -15,14 +15,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * RouteSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
