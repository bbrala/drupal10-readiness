diff --git a/src/Plugin/Field/FieldFormatter/ViewfieldFormatterDefault.php b/src/Plugin/Field/FieldFormatter/ViewfieldFormatterDefault.php
index 5423e23..992ef89 100644
--- a/src/Plugin/Field/FieldFormatter/ViewfieldFormatterDefault.php
+++ b/src/Plugin/Field/FieldFormatter/ViewfieldFormatterDefault.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\viewfield\Plugin\Field\FieldFormatter;
 
+use Drupal\views\Plugin\views\pager\None;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -167,7 +168,7 @@ class ViewfieldFormatterDefault extends FormatterBase {
 
         // Disable pager, if items_to_display was set.
         if (!empty($items_to_display)) {
-          $view->pager = new \Drupal\views\Plugin\views\pager\None([], '', []);
+          $view->pager = new None([], '', []);
           $view->pager->init($view, $view->display_handler);
           $view->pager->setItemsPerPage($items_to_display);
         }
@@ -208,7 +209,7 @@ class ViewfieldFormatterDefault extends FormatterBase {
    *
    * @param string $argument_string
    *   The raw argument string.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity containing this field.
    *
    * @return array
diff --git a/src/Plugin/Field/FieldWidget/ViewfieldWidgetSelect.php b/src/Plugin/Field/FieldWidget/ViewfieldWidgetSelect.php
index 9536b65..14e8a84 100644
--- a/src/Plugin/Field/FieldWidget/ViewfieldWidgetSelect.php
+++ b/src/Plugin/Field/FieldWidget/ViewfieldWidgetSelect.php
@@ -209,7 +209,7 @@ class ViewfieldWidgetSelect extends OptionsSelectWidget {
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @see OptionsWidgetBase::validateElement()
@@ -261,10 +261,10 @@ class ViewfieldWidgetSelect extends OptionsSelectWidget {
    *
    * @param array $form
    *   The form from which the display IDs are being requested.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The Ajax response.
    */
   public function ajaxGetDisplayOptions(array &$form, FormStateInterface $form_state) {
diff --git a/tests/src/FunctionalJavascript/ViewfieldFormatterTest.php b/tests/src/FunctionalJavascript/ViewfieldFormatterTest.php
index 2070055..af960b5 100644
--- a/tests/src/FunctionalJavascript/ViewfieldFormatterTest.php
+++ b/tests/src/FunctionalJavascript/ViewfieldFormatterTest.php
@@ -43,7 +43,7 @@ class ViewfieldFormatterTest extends ViewfieldFunctionalTestBase {
     $viewfield_display->setValue('block_1');
 
     // Submit node form.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('Article 1');
     $this->assertSession()->responseContains('Page 1');
   }
@@ -82,7 +82,7 @@ class ViewfieldFormatterTest extends ViewfieldFunctionalTestBase {
     $viewfield_display->setValue('block_1');
 
     // Submit node form.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('View: (content_test)');
     $this->assertSession()->pageTextContains('Display: Block (block_1)');
   }
@@ -126,7 +126,7 @@ class ViewfieldFormatterTest extends ViewfieldFunctionalTestBase {
     ];
 
     // Submit node form.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     // Test results to verify that only page nodes are shown.
     $this->assertSession()->responseContains('Page 1');
@@ -173,7 +173,7 @@ class ViewfieldFormatterTest extends ViewfieldFunctionalTestBase {
     ];
 
     // Submit node form.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     // Test results to verify that only page nodes are shown.
     $rows = $page->findAll('css', '.views-element-container div .views-row');
@@ -219,7 +219,7 @@ class ViewfieldFormatterTest extends ViewfieldFunctionalTestBase {
     ];
 
     // Submit node form.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     // Test results to verify that only page nodes are shown.
     $this->assertSession()->elementNotExists('css', 'div.field--name-field-view-test');
diff --git a/tests/src/FunctionalJavascript/ViewfieldFunctionalTestBase.php b/tests/src/FunctionalJavascript/ViewfieldFunctionalTestBase.php
index 38c0911..715545d 100644
--- a/tests/src/FunctionalJavascript/ViewfieldFunctionalTestBase.php
+++ b/tests/src/FunctionalJavascript/ViewfieldFunctionalTestBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\viewfield\FunctionalJavascript;
 
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -35,28 +38,28 @@ abstract class ViewfieldFunctionalTestBase extends WebDriverTestBase {
   /**
    * The Entity View Display for the article_test node type.
    *
-   * @var \Drupal\Core\Entity\Entity\EntityViewDisplay
+   * @var EntityViewDisplay
    */
   protected $display;
 
   /**
    * The Entity Form Display for the article_test node type.
    *
-   * @var \Drupal\Core\Entity\Entity\EntityFormDisplay
+   * @var EntityFormDisplay
    */
   protected $form;
 
   /**
    * A user with all permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'article_test']);
diff --git a/tests/src/FunctionalJavascript/ViewfieldWidgetTest.php b/tests/src/FunctionalJavascript/ViewfieldWidgetTest.php
index 20e846a..4c3f87b 100644
--- a/tests/src/FunctionalJavascript/ViewfieldWidgetTest.php
+++ b/tests/src/FunctionalJavascript/ViewfieldWidgetTest.php
@@ -47,7 +47,7 @@ class ViewfieldWidgetTest extends ViewfieldFunctionalTestBase {
     $viewfield_display = $session->fieldExists('field_view_test[0][display_id]');
     $viewfield_display->setValue('block_1');
 
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     // Test response.
     $session->responseContains('content_test');
diff --git a/tests/src/Kernel/ViewfieldKernelTest.php b/tests/src/Kernel/ViewfieldKernelTest.php
index 21c08c9..54d4a23 100644
--- a/tests/src/Kernel/ViewfieldKernelTest.php
+++ b/tests/src/Kernel/ViewfieldKernelTest.php
@@ -28,7 +28,7 @@ class ViewfieldKernelTest extends FieldKernelTestBase {
    */
   protected $defaultTheme = 'stark';
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp(); // TODO: Change the autogenerated stub
 
     FieldStorageConfig::create([
@@ -56,6 +56,9 @@ class ViewfieldKernelTest extends FieldKernelTestBase {
     ])->save();
   }
 
+  /**
+   * @doesNotPerformAssertions
+   */
   public function testViewfieldItem() {
     // Create the test entity.
 
@@ -75,6 +78,9 @@ class ViewfieldKernelTest extends FieldKernelTestBase {
 
   }
 
+  /**
+   * @doesNotPerformAssertions
+   */
   public function testViewfieldItemDefaultValue() {
 
   }
diff --git a/viewfield.install b/viewfield.install
index 56f69bb..c69ed46 100644
--- a/viewfield.install
+++ b/viewfield.install
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Entity\Sql\SqlEntityStorageInterface;
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
+use Drupal\Core\Field\FieldConfigInterface;
 /**
  * @file
  * Install, update and uninstall functions for the viewfield module.
@@ -22,14 +26,14 @@ function viewfield_update_8301() {
   }
 
   foreach ($field_storage_configs as $field_storage) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+    /** @var FieldStorageDefinitionInterface $field_storage */
     $schema = $field_storage->getSchema();
     $field_spec = $schema['columns'][$property];
     $field_spec['type'] = $db_type;
     $entity_type_id = $field_storage->getTargetEntityTypeId();
-    /** @var \Drupal\Core\Entity\Sql\SqlEntityStorageInterface $entity_storage */
+    /** @var SqlEntityStorageInterface $entity_storage */
     $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
-    /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+    /** @var DefaultTableMapping $table_mapping */
     $table_mapping = $entity_storage->getTableMapping();
     $tables = [$table_mapping->getDedicatedDataTableName($field_storage)];
     if ($field_storage->isRevisionable()) {
@@ -60,14 +64,14 @@ function viewfield_update_8302() {
   }
 
   foreach ($field_storage_configs as $field_storage) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+    /** @var FieldStorageDefinitionInterface $field_storage */
     $schema = $field_storage->getSchema();
     $field_spec = $schema['columns'][$property];
     $field_spec['type'] = $db_type;
     $entity_type_id = $field_storage->getTargetEntityTypeId();
-    /** @var \Drupal\Core\Entity\Sql\SqlEntityStorageInterface $entity_storage */
+    /** @var SqlEntityStorageInterface $entity_storage */
     $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
-    /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+    /** @var DefaultTableMapping $table_mapping */
     $table_mapping = $entity_storage->getTableMapping();
     $tables = [$table_mapping->getDedicatedDataTableName($field_storage)];
     if ($field_storage->isRevisionable()) {
@@ -96,7 +100,7 @@ function viewfield_update_8303() {
   }
 
   foreach ($field_configs as $field) {
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $default_values = $field->getDefaultValueLiteral();
 
     foreach ($default_values as $key => $value) {
@@ -119,10 +123,10 @@ function viewfield_update_8304() {
 
   $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
   foreach ($field_configs as $field) {
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $entity_type = $field->getTargetEntityTypeId();
     $field_name = $field->getName();
     $field_storage_definition = $entity_definition_update_manager->getFieldStorageDefinition($field_name, $entity_type);
     $entity_definition_update_manager->updateFieldStorageDefinition($field_storage_definition);
   }
-}
\ No newline at end of file
+}
