modules/contrib/lightning_scheduler/lightning_scheduler.module
modules/contrib/lightning_scheduler/src/Form/SettingsForm.php
modules/contrib/lightning_scheduler/src/Permissions.php
modules/contrib/lightning_scheduler/src/Plugin/Field/FieldWidget/ModerationStateWidget.php
modules/contrib/lightning_scheduler/src/Time.php
modules/contrib/lightning_scheduler/src/TransitionManager.php
modules/contrib/lightning_scheduler/src/TransitionSet.php
modules/contrib/lightning_scheduler/tests/src/Functional/InlineEntityFormTest.php
modules/contrib/lightning_scheduler/tests/src/Functional/ScheduledTransitionTest.php
modules/contrib/lightning_scheduler/tests/src/FunctionalJavascript/TimeStepTest.php
modules/contrib/lightning_scheduler/tests/src/FunctionalJavascript/TransitionTest.php
modules/contrib/lightning_scheduler/tests/src/FunctionalJavascript/UiTest.php
modules/contrib/lightning_scheduler/tests/src/Kernel/BaseFieldsTest.php
modules/contrib/lightning_scheduler/tests/src/Kernel/TransitionManagerTest.php
modules/contrib/lightning_scheduler/tests/src/Traits/SchedulerUiTrait.php

13 files with changes
=====================

1) modules/contrib/lightning_scheduler/tests/src/Traits/SchedulerUiTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_scheduler\Traits;

+use Drupal\workflows\WorkflowInterface;
 use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Component\Serialization\Json;
 use Drupal\workflows\Entity\Workflow;
@@ @@
   /**
    * Creates the editorial workflow.
    *
-   * @return \Drupal\workflows\WorkflowInterface
+   * @return WorkflowInterface
    *   The editorial workflow entity.
    */
   protected function createEditorialWorkflow() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/lightning_scheduler/tests/src/Kernel/TransitionManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_scheduler\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Form\FormInterface;
 use Drupal\Core\Form\FormState;
@@ @@
  */
 class TransitionManagerTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/lightning_scheduler/tests/src/Kernel/BaseFieldsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_scheduler\Kernel;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   ];

   public function testBaseFieldDefinitions() {
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions */
+    /** @var FieldDefinitionInterface[] $field_definitions */
     $field_definitions = $this->container->get('entity_field.manager')
       ->getBaseFieldDefinitions('node');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/lightning_scheduler/tests/src/FunctionalJavascript/UiTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->setUpTimeZone();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/lightning_scheduler/tests/src/FunctionalJavascript/TransitionTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/lightning_scheduler/tests/src/Functional/ScheduledTransitionTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'page']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/lightning_scheduler/tests/src/Functional/InlineEntityFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_scheduler\Functional;

+use Behat\Mink\Element\NodeElement;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\field\Traits\EntityReferenceTestTrait;
 use Drupal\Tests\lightning_scheduler\Traits\SchedulerUiTrait;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->createContentType(['type' => 'alpha']);
@@ @@
   /**
    * Asserts that an inline entity form for field_inline_entity exists.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The inline entity form element.
    */
   private function assertInlineEntityForm() {
@@ @@
     $this->setTransitionData($inline_field, $transition_2);
     $page->pressButton('Save');

-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('node');
     $alpha = $storage->loadByProperties(['type' => 'alpha']);
     $beta = $storage->loadByProperties(['type' => 'beta']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/lightning_scheduler/src/TransitionSet.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * A set of scheduled transition dates for an entity.
    *
-   * @var \Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList
+   * @var DateTimeFieldItemList
    */
   protected $dateList;

@@ @@
   /**
    * A set of scheduled workflow states for an entity.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   protected $stateList;

@@ @@
   /**
    * TransitionSet constructor.
    *
-   * @param \Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList $date_list
+   * @param DateTimeFieldItemList $date_list
    *   A set of scheduled transition dates for an entity.
-   * @param \Drupal\Core\Field\FieldItemListInterface $state_list
+   * @param FieldItemListInterface $state_list
    *   A set of scheduled workflow states for an entity.
    *
    * @throws \InvalidArgumentException if the date list and state list are not
@@ @@
   /**
    * Returns the expected workflow state for a given date and time.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $at
+   * @param DrupalDateTime $at
    *   The date and time.
    *
    * @return string|null
@@ @@
   /**
    * Removes all transitions older than a given date and time.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $until
+   * @param DrupalDateTime $until
    *   The date and time older than which all transitions will be removed.
    */
   public function trim(DrupalDateTime $until) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/lightning_scheduler/src/TransitionManager.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   private $moderationInformation;

@@ @@
   /**
    * The currently logged-in user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @see lightning_scheduler_form_alter()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/lightning_scheduler/src/Time.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   private $state;

@@ @@
   /**
    * Time constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(RequestStack $request_stack, StateInterface $state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/lightning_scheduler/src/Plugin/Field/FieldWidget/ModerationStateWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_scheduler\Plugin\Field\FieldWidget;

+use Drupal\Core\Entity\RevisionableStorageInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\content_moderation\Plugin\Field\FieldWidget\ModerationStateWidget as BaseModerationStateWidget;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@

     // The latest revision, if there is one, is the canonical source of truth
     // regarding scheduled transitions.
-    /** @var \Drupal\Core\Entity\RevisionableStorageInterface $storage */
+    /** @var RevisionableStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
     if (!$entity->isNew() && $storage->getEntityType()->isRevisionable() && $latest_revision_id = $storage->getLatestRevisionId($entity->id())) {
       $latest_revision = $storage->loadRevision($latest_revision_id) ?: $entity;
@@ @@
    *
    * @param array $element
    *   The unprocessed element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
    *
    * @param array $element
    *   The hidden input.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to update.
    */
   public function storeValue(array $element, FormStateInterface $form_state) {
@@ @@
    * A workflow state is considered "available" if the current user has
    * permission to use or schedule it.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity which has the workflow.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/lightning_scheduler/src/Permissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_scheduler;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\content_moderation\Permissions as BasePermissions;

 /**
@@ @@

       $permission = preg_replace('/^use /', 'schedule ', $permission);

-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $title */
+      /** @var TranslatableMarkup $title */
       $title = $info['title'];
       $info['title'] = $this->t('%workflow workflow: Schedule %transition transition.', $title->getArguments());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/lightning_scheduler/lightning_scheduler.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\lightning_scheduler\TransitionManager;
+use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\Core\Cache\CacheCollectorInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
  */
 function lightning_scheduler_library_info_alter(array &$libraries, $extension) {
   if ($extension === 'seven') {
-    $dir = drupal_get_path('module', 'lightning_scheduler');
+    $dir = \Drupal::service('extension.list.module')->getPath('lightning_scheduler');

     $libraries['lightning_scheduler.widget'] = [
       'css' => [
@@ @@

   $field_map = Drupal::service('entity_field.manager')->getFieldMap();

-  /** @var \Drupal\lightning_scheduler\TransitionManager $transition_manager */
+  /** @var TransitionManager $transition_manager */
   $transition_manager = Drupal::service('lightning_scheduler.transition_manager');

   $start = new DrupalDateTime('now', DateTimeItemInterface::STORAGE_TIMEZONE);
@@ @@
  */
 function lightning_scheduler_entity_base_field_info(EntityTypeInterface $entity_type) {
   $fields = [];
-  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
+  /** @var ModerationInformationInterface $moderation_info */
   $moderation_info = Drupal::service('content_moderation.moderation_information');

   if ($moderation_info->canModerateEntitiesOfEntityType($entity_type)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 13 files have been changed by Rector                                      

