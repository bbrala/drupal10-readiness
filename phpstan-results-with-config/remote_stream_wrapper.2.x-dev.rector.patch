diff --git a/src/Controller/RemoteImageStyleDownloadController.php b/src/Controller/RemoteImageStyleDownloadController.php
index 7018baf..2ffa8d2 100644
--- a/src/Controller/RemoteImageStyleDownloadController.php
+++ b/src/Controller/RemoteImageStyleDownloadController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\remote_stream_wrapper\Controller;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\image\Controller\ImageStyleDownloadController;
 use Drupal\image\ImageStyleInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +17,7 @@ class RemoteImageStyleDownloadController extends ImageStyleDownloadController {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fileStorage;
 
diff --git a/src/File/MimeType/HttpMimeTypeGuesser.php b/src/File/MimeType/HttpMimeTypeGuesser.php
index 03bc747..78b635a 100644
--- a/src/File/MimeType/HttpMimeTypeGuesser.php
+++ b/src/File/MimeType/HttpMimeTypeGuesser.php
@@ -18,23 +18,23 @@ class HttpMimeTypeGuesser implements MimeTypeGuesserInterface {
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The extension guesser.
    *
-   * @var \Symfony\Component\Mime\MimeTypeGuesserInterface
+   * @var MimeTypeGuesserInterface
    */
   protected $extensionGuesser;
 
   /**
    * Constructs a new HttpMimeTypeGuesser.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Symfony\Component\Mime\MimeTypeGuesserInterface $extension_guesser
+   * @param MimeTypeGuesserInterface $extension_guesser
    *   The extension guesser.
    */
   public function __construct(FileSystemInterface $file_system, MimeTypeGuesserInterface $extension_guesser) {
@@ -78,7 +78,7 @@ class HttpMimeTypeGuesser implements MimeTypeGuesserInterface {
   /**
    * Extract the mime type from a HTTP response using Content-Type headers.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   The HTTP request response.
    *
    * @return string|null
diff --git a/src/HttpClientTrait.php b/src/HttpClientTrait.php
index 1700fae..b77ea07 100644
--- a/src/HttpClientTrait.php
+++ b/src/HttpClientTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\remote_stream_wrapper;
 
+use Psr\Http\Message\ResponseInterface;
+use GuzzleHttp\Exception\GuzzleException;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\ClientException;
 use GuzzleHttp\Exception\ServerException;
@@ -14,14 +16,14 @@ trait HttpClientTrait {
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * Sets the HTTP client.
    *
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   An HTTP client.
    */
   public function setHttpClient(ClientInterface $httpClient) {
@@ -31,7 +33,7 @@ trait HttpClientTrait {
   /**
    * Returns the HTTP client.
    *
-   * @return \GuzzleHttp\ClientInterface
+   * @return ClientInterface
    */
   public function getHttpClient() {
     if (!isset($this->httpClient)) {
@@ -52,10 +54,10 @@ trait HttpClientTrait {
    *   Case-insensitive header field name.
    * @param array $options
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   The HTTP response object.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function requestTryHeadLookingForHeader($uri, $header, array $options = []) {
     try {
diff --git a/src/Routing/RemoteImageStyleRoutes.php b/src/Routing/RemoteImageStyleRoutes.php
index 7ba8f21..8b5b5c7 100644
--- a/src/Routing/RemoteImageStyleRoutes.php
+++ b/src/Routing/RemoteImageStyleRoutes.php
@@ -16,23 +16,23 @@ class RemoteImageStyleRoutes implements ContainerInjectionInterface {
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * The module handler used to check whether the image module exists.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new PathProcessorImageStyles object.
    *
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager, ModuleHandlerInterface $module_handler) {
@@ -53,7 +53,7 @@ class RemoteImageStyleRoutes implements ContainerInjectionInterface {
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes() {
diff --git a/src/StreamWrapper/HttpStreamWrapper.php b/src/StreamWrapper/HttpStreamWrapper.php
index 16fec43..6f9695c 100644
--- a/src/StreamWrapper/HttpStreamWrapper.php
+++ b/src/StreamWrapper/HttpStreamWrapper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\remote_stream_wrapper\StreamWrapper;
 
+use Psr\Http\Message\StreamInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\remote_stream_wrapper\HttpClientTrait;
 
@@ -22,7 +23,7 @@ class HttpStreamWrapper implements RemoteStreamWrapperInterface {
   /**
    * The response stream.
    *
-   * @var \Psr\Http\Message\StreamInterface
+   * @var StreamInterface
    */
   protected $stream;
 
diff --git a/src/StreamWrapper/RemoteStreamWrapperInterface.php b/src/StreamWrapper/RemoteStreamWrapperInterface.php
index b29396d..a33bb4e 100644
--- a/src/StreamWrapper/RemoteStreamWrapperInterface.php
+++ b/src/StreamWrapper/RemoteStreamWrapperInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\remote_stream_wrapper\StreamWrapper;
 
+use Psr\Http\Message\ResponseInterface;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 
 interface RemoteStreamWrapperInterface extends StreamWrapperInterface {
@@ -24,10 +26,10 @@ interface RemoteStreamWrapperInterface extends StreamWrapperInterface {
    * @param string $method
    *   The HTTP method.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   The HTTP response object.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function request($method = 'GET');
 
diff --git a/tests/src/Kernel/HttpMimeTypeGuesserTest.php b/tests/src/Kernel/HttpMimeTypeGuesserTest.php
index 4be4eb2..9e64df0 100644
--- a/tests/src/Kernel/HttpMimeTypeGuesserTest.php
+++ b/tests/src/Kernel/HttpMimeTypeGuesserTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\remote_stream_wrapper\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\Mime\MimeTypeGuesserInterface;
+use Drupal\remote_stream_wrapper\File\MimeType\HttpMimeTypeGuesser;
+use GuzzleHttp\Psr7\Uri;
+use Psr\Http\Message\ResponseInterface;
 use Drupal\KernelTests\KernelTestBase;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\ClientException;
@@ -16,17 +21,18 @@ use GuzzleHttp\Psr7\Response;
  */
 class HttpMimeTypeGuesserTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * The mime type guesser.
    *
-   * @var \Symfony\Component\Mime\MimeTypeGuesserInterface
+   * @var MimeTypeGuesserInterface
    */
   protected $guesser;
 
   /**
    * The HTTP mime type guesser.
    *
-   * @var \Drupal\remote_stream_wrapper\File\MimeType\HttpMimeTypeGuesser
+   * @var HttpMimeTypeGuesser
    */
   protected $httpGuesser;
 
@@ -168,14 +174,14 @@ class HttpMimeTypeGuesserTest extends KernelTestBase {
   /**
    * Prepare the mock HTTP requests and responses.
    *
-   * @param \GuzzleHttp\Psr7\Uri|string $url
+   * @param Uri|string $url
    *   The request URL.
-   * @param \Psr\Http\Message\ResponseInterface|int $head_response
+   * @param ResponseInterface|int $head_response
    *   The HEAD request response or an exception HTTP response error code.
-   * @param \Psr\Http\Message\ResponseInterface|int $get_response
+   * @param ResponseInterface|int $get_response
    *   The GET request response or an exception HTTP response error code.
    *
-   * @return \GuzzleHttp\ClientInterface
+   * @return ClientInterface
    *   The HTTP client.
    */
   protected function prepareClient($url, $head_response, $get_response): ClientInterface {
diff --git a/tests/src/Kernel/HttpStreamWrapperTest.php b/tests/src/Kernel/HttpStreamWrapperTest.php
index 61a6b60..dc028f5 100644
--- a/tests/src/Kernel/HttpStreamWrapperTest.php
+++ b/tests/src/Kernel/HttpStreamWrapperTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\remote_stream_wrapper\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\remote_stream_wrapper\StreamWrapper\HttpStreamWrapper;
+use GuzzleHttp\Psr7\Uri;
+use Psr\Http\Message\ResponseInterface;
 use Drupal\KernelTests\KernelTestBase;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\ClientException;
@@ -17,10 +21,11 @@ use GuzzleHttp\Psr7\Stream;
  */
 class HttpStreamWrapperTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * The HTTP stream wrapper.
    *
-   * @var \Drupal\remote_stream_wrapper\StreamWrapper\HttpStreamWrapper
+   * @var HttpStreamWrapper
    */
   protected $wrapper;
 
@@ -129,14 +134,14 @@ class HttpStreamWrapperTest extends KernelTestBase {
   /**
    * Prepare the mock HTTP requests and responses.
    *
-   * @param \GuzzleHttp\Psr7\Uri|string $url
+   * @param Uri|string $url
    *   The request URL.
-   * @param \Psr\Http\Message\ResponseInterface|int $head_response
+   * @param ResponseInterface|int $head_response
    *   The HEAD request response or an exception HTTP response error code.
-   * @param \Psr\Http\Message\ResponseInterface|int $get_response
+   * @param ResponseInterface|int $get_response
    *   The GET request response or an exception HTTP response error code.
    *
-   * @return \GuzzleHttp\ClientInterface
+   * @return ClientInterface
    *   The HTTP client.
    */
   protected function prepareClient($url, $head_response, $get_response): ClientInterface {
diff --git a/tests/src/Kernel/ImageStyleTest.php b/tests/src/Kernel/ImageStyleTest.php
index c175c80..19b89f3 100644
--- a/tests/src/Kernel/ImageStyleTest.php
+++ b/tests/src/Kernel/ImageStyleTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\remote_stream_wrapper\Kernel;
 
+use Drupal\image\ImageStyleInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\remote_stream_wrapper\Entity\ImageStyle;
 
@@ -25,7 +26,7 @@ class ImageStyleTest extends KernelTestBase {
   /**
    * A testing image style entity.
    *
-   * @var \Drupal\image\ImageStyleInterface
+   * @var ImageStyleInterface
    */
   protected $imageStyle;
 
