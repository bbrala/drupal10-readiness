modules/contrib/standwithukraine/src/Form/StandWithUkraineForm.php
modules/contrib/standwithukraine/src/Service/StandWithUkraineAccess.php
modules/contrib/standwithukraine/src/Service/StandWithUkraineAccessInterface.php
modules/contrib/standwithukraine/src/Service/StandWithUkraineFavicon.php
modules/contrib/standwithukraine/src/Service/StandWithUkraineFaviconInterface.php
modules/contrib/standwithukraine/standwithukraine.install
modules/contrib/standwithukraine/standwithukraine.module

7 files with changes
====================

1) modules/contrib/standwithukraine/standwithukraine.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\standwithukraine\Service\StandWithUkraineAccessInterface;
+use Drupal\Core\Render\RendererInterface;
 /**
  * @file
  * Provides a message to show your support for Ukrainians.
@@ @@
     return;
   }

-  /** @var \Drupal\standwithukraine\Service\StandWithUkraineAccessInterface $access */
+  /** @var StandWithUkraineAccessInterface $access */
   $access = \Drupal::service('standwithukraine.access');

   if (!$access->isAllowed('standwithukraine keep favicon')) {
@@ @@
     return;
   }

-  /** @var \Drupal\standwithukraine\Service\StandWithUkraineFaviconInterface $favicon */
+  /** @var StandWithUkraineFaviconInterface $favicon */
   $favicon = \Drupal::service('standwithukraine.favicon');

   if (!$favicon->isSupported(theme_get_setting('favicon.mimetype'))) {
@@ @@
  * Implements hook_page_top().
  */
 function standwithukraine_page_top(array &$page_top) {
-  /** @var \Drupal\standwithukraine\Service\StandWithUkraineAccessInterface $access */
+  /** @var StandWithUkraineAccessInterface $access */
   $access = \Drupal::service('standwithukraine.access');

   if ($access->isAllowed('hide standwithukraine message')) {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');

     $element = ['#theme' => 'standwithukraine'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/standwithukraine/standwithukraine.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\RoleStorageInterface;
 /**
  * @file
  * Install, update and uninstall functions for the standwithukraine module.
@@ @@
     ->range($sandbox['offset'], $sandbox['limit'])
     ->execute();

-  /** @var \Drupal\user\RoleStorageInterface $storage */
+  /** @var RoleStorageInterface $storage */
   $storage = \Drupal::entityTypeManager()->getStorage('user_role');

   foreach ($rids as $rid) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/standwithukraine/src/Service/StandWithUkraineFaviconInterface.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * StandWithUkraineFavicon constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger channel factory.
-   * @param \Drupal\Core\File\FileUrlGeneratorInterface|null $file_url_generator
+   * @param FileUrlGeneratorInterface|null $file_url_generator
    *   (optional) The file URL generator. Defaults to NULL.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/standwithukraine/src/Service/StandWithUkraineFavicon.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\standwithukraine\Service;

+use Elphin\IcoFileLoader\IconImage;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileUrlGeneratorInterface;
@@ @@
   /**
    * The cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The file URL generator.
    *
-   * @var \Drupal\Core\File\FileUrlGeneratorInterface|null
+   * @var FileUrlGeneratorInterface|null
    */
   protected $fileUrlGenerator;

@@ @@
     $settings = (array) $config->get('favicon.themes.' . $theme);
     $ratio = $settings['ratio'] ?? self::UNDEFINED_RATIO;

-    /** @var \Elphin\IcoFileLoader\IconImage $image */
+    /** @var IconImage $image */
     foreach ($icon as $image) {
       $width = $image->width;
       $height = $image->height;
@@ @@

       $items[$theme][$dimensions] = $this->fileUrlGenerator !== NULL
         ? $this->fileUrlGenerator->generateString($filename)
-        : file_create_url($filename);
+        : \Drupal::service('file_url_generator')->generateAbsoluteString($filename);
     }

     $this->cache->set('standwithukraine', $items);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/standwithukraine/src/Service/StandWithUkraineAccessInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * StandWithUkraineAccess constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current active user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/standwithukraine/src/Service/StandWithUkraineAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\standwithukraine\Service;

+use Drupal\user\RoleStorageInterface;
+use Drupal\user\RoleInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountProxyInterface;

@@ @@
   /**
    * The current active user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The role storage.
    *
-   * @var \Drupal\user\RoleStorageInterface
+   * @var RoleStorageInterface
    */
   protected $storage;

@@ @@
    */
   public function isAllowed($permission) {
     foreach ($this->currentUser->getRoles() as $role_id) {
-      /** @var \Drupal\user\RoleInterface $role */
+      /** @var RoleInterface $role */
       $role = $this->storage->load($role_id);

       if (
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/standwithukraine/src/Form/StandWithUkraineForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\standwithukraine\Form;

+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Component\Datetime\TimeInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * The cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The favicon.
    *
-   * @var \Drupal\standwithukraine\Service\StandWithUkraineFaviconInterface
+   * @var StandWithUkraineFaviconInterface
    */
   protected $favicon;

@@ @@
   /**
    * The time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
     $suffix = '?timestamp=' . $this->time->getRequestTime();
     $count = 0;

-    /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $title */
+    /** @var TranslatableMarkup $title */
     foreach ([$this->t('Default'), $this->t('Admin')] as $title) {
       $theme_type = strtolower($title->getUntranslatedString());
       $theme_name = $theme_config->get($theme_type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

