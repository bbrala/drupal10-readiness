modules/contrib/mollie/modules/mollie_commerce/src/EventSubscriber/MollieEventSubscriberBase.php
modules/contrib/mollie/modules/mollie_commerce/src/EventSubscriber/MollieRedirectEventSubscriber.php
modules/contrib/mollie/modules/mollie_commerce/src/EventSubscriber/MollieTransactionEventSubscriber.php
modules/contrib/mollie/modules/mollie_commerce/src/Plugin/Commerce/PaymentGateway/Mollie.php
modules/contrib/mollie/modules/mollie_commerce/src/PluginForm/OffsiteRedirect/MolliePaymentOffsiteForm.php
modules/contrib/mollie/modules/mollie_customers/src/Controller/CustomerController.php
modules/contrib/mollie/modules/mollie_customers/src/Controller/CustomerListBuilder.php
modules/contrib/mollie/modules/mollie_customers/src/CustomerAccessControlHandler.php
modules/contrib/mollie/modules/mollie_customers/src/CustomerInterface.php
modules/contrib/mollie/modules/mollie_customers/src/CustomerPermissions.php
modules/contrib/mollie/modules/mollie_customers/src/Entity/Customer.php
modules/contrib/mollie/modules/mollie_customers/src/Entity/CustomerStorage.php
modules/contrib/mollie/modules/mollie_customers/src/Entity/CustomerStorageBase.php
modules/contrib/mollie/modules/mollie_customers/src/Entity/Query/CustomerQuery.php
modules/contrib/mollie/modules/mollie_customers/src/Entity/Query/CustomerQueryBase.php
modules/contrib/mollie/modules/mollie_customers/src/Form/CustomerDeleteForm.php
modules/contrib/mollie/modules/mollie_customers/src/Form/CustomerForm.php
modules/contrib/mollie/modules/mollie_uc/src/Controller/SaleCompleteController.php
modules/contrib/mollie/modules/mollie_uc/src/EventSubscriber/MollieRedirectEventSubscriber.php
modules/contrib/mollie/modules/mollie_uc/src/EventSubscriber/MollieTransactionEventSubscriber.php
modules/contrib/mollie/modules/mollie_uc/src/Plugin/Ubercart/PaymentMethod/Mollie.php
modules/contrib/mollie/modules/mollie_webform/src/EventSubscriber/MollieRedirectEventSubscriber.php
modules/contrib/mollie/modules/mollie_webform/src/EventSubscriber/MollieTransactionEventSubscriber.php
modules/contrib/mollie/modules/mollie_webform/src/MollieWebformHelper.php
modules/contrib/mollie/modules/mollie_webform/src/Plugin/WebformElement/MolliePaymentStatus.php
modules/contrib/mollie/modules/mollie_webform/src/Plugin/WebformHandler/MolliePaymentHandler.php
modules/contrib/mollie/mollie.install
modules/contrib/mollie/mollie.module
modules/contrib/mollie/src/Controller/MollieEntityBaseController.php
modules/contrib/mollie/src/Controller/PaymentListBuilder.php
modules/contrib/mollie/src/Controller/RedirectController.php
modules/contrib/mollie/src/Controller/TransactionController.php
modules/contrib/mollie/src/Controller/WebhookController.php
modules/contrib/mollie/src/Entity/Payment.php
modules/contrib/mollie/src/Entity/PaymentStorage.php
modules/contrib/mollie/src/Entity/Query/Condition.php
modules/contrib/mollie/src/Entity/Query/PaymentQuery.php
modules/contrib/mollie/src/Entity/Query/TransactionQueryBase.php
modules/contrib/mollie/src/Entity/TransactionBase.php
modules/contrib/mollie/src/Entity/TransactionStorageBase.php
modules/contrib/mollie/src/Events/MollieEventBase.php
modules/contrib/mollie/src/Events/MollieNotificationEvent.php
modules/contrib/mollie/src/Events/MollieRedirectEvent.php
modules/contrib/mollie/src/Events/MollieTransactionChargebackEvent.php
modules/contrib/mollie/src/Events/MollieTransactionEventBase.php
modules/contrib/mollie/src/Events/MollieTransactionRefundEvent.php
modules/contrib/mollie/src/Events/MollieTransactionStatusChangeEvent.php
modules/contrib/mollie/src/Form/MollieConfigForm.php
modules/contrib/mollie/src/Form/PaymentForm.php
modules/contrib/mollie/src/Mollie.php
modules/contrib/mollie/src/MollieConfigValidator.php
modules/contrib/mollie/src/MollieConfigValidatorInterface.php
modules/contrib/mollie/src/MollieEntityBasePermissions.php
modules/contrib/mollie/src/PaymentAccessControlHandler.php
modules/contrib/mollie/src/TransactionAccessControlHandler.php
modules/contrib/mollie/src/TransactionInterface.php
modules/contrib/mollie/src/TransactionPermissions.php

35 files with changes
=====================

1) modules/contrib/mollie/src/TransactionPermissions.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * TransactionPermissions constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Returns permissions for operations on entities of a given type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   Entity type.
    *
    * @return array
@@ @@
   /**
    * Returns available operations on entities of a given type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   Entity type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/mollie/src/MollieEntityBasePermissions.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * CustomerPermissions constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   protected function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Returns permissions for operations on entities of a given type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   Entity type.
    *
    * @return array
@@ @@
   /**
    * Returns available operations on entities of a given type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   Entity type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/mollie/src/Mollie.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mollie;

+use Mollie\Api\Resources\Method;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\Query\QueryInterface;
@@ @@
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Mollie config validator.
    *
-   * @var \Drupal\mollie\MollieConfigValidator
+   * @var MollieConfigValidator
    */
   protected $configValidator;

@@ @@
   /**
    * Mollie API client.
    *
-   * @var \Mollie\Api\MollieApiClient
+   * @var MollieApiClient
    */
   protected $client;

@@ @@
   /**
    * Mollie constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\mollie\MollieConfigValidator $configValidator
+   * @param MollieConfigValidator $configValidator
    *   Mollie config validator.
    */
   public function __construct(
@@ @@
   /**
    * Returns a client for communication with the Mollie API.
    *
-   * @return \Mollie\Api\MollieApiClient|null
+   * @return MollieApiClient|null
    *   A client for communication with the Mollie API or NULL if this client
    *   could not be loaded.
    */
@@ @@
   /**
    * Returns an entity query for a Mollie transaction entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type.
    * @param string $conjunction
    *   Conjunction to use for query conditions.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   Entity query object.
    */
   public function get(EntityTypeInterface $entityType, string $conjunction): ?QueryInterface {
@@ @@
     $methods = [];

     foreach ($this->getMethodsRaw($amount, $currency) as $method) {
-      /** @var \Mollie\Api\Resources\Method $method */
+      /** @var Method $method */
       $methods[$method->id] = $method->description;
     }

@@ @@
    * @param string $currency
    *   Currency in which the amount should be paid.
    *
-   * @return \Mollie\Api\Resources\MethodCollection
+   * @return MethodCollection
    *   Method collection.
    */
   protected function getMethodsRaw(float $amount, string $currency): MethodCollection {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/mollie/src/Form/PaymentForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * UUID generator.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;

@@ @@
   /**
    * Mollie API client.
    *
-   * @var \Drupal\mollie\Mollie
+   * @var Mollie
    */
   protected $mollieApiClient;

@@ @@
   /**
    * PaymentForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   UUID generator.
-   * @param \Drupal\mollie\Mollie $mollieApiClient
+   * @param Mollie $mollieApiClient
    *   Mollie API client.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(
@@ @@
    *
    * @param $form
    *   Renderable array for the form as build by the form builder.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/mollie/src/Form/MollieConfigForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Mollie config validator.
    *
-   * @var \Drupal\mollie\MollieConfigValidatorInterface
+   * @var MollieConfigValidatorInterface
    */
   protected $mollieConfigValidator;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The factory for configuration objects.
-   * @param \Drupal\mollie\MollieConfigValidatorInterface $mollieConfigValidator
+   * @param MollieConfigValidatorInterface $mollieConfigValidator
    *   Mollie config validator.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/mollie/src/Events/MollieTransactionEventBase.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The Mollie transaction.
    *
-   * @var \Drupal\mollie\TransactionInterface
+   * @var TransactionInterface
    */
   protected $transaction;

@@ @@
    *   triggered for.
    * @param string $contextId
    *   ID of entity within the context corresponding to the Mollie transaction.
-   * @param \Drupal\mollie\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The Mollie transaction.
    */
   public function __construct(string $context, string $contextId, TransactionInterface $transaction) {
@@ @@
   /**
    * Returns the Mollie transaction for which the event is occurring.
    *
-   * @return \Drupal\mollie\TransactionInterface
+   * @return TransactionInterface
    *   The Mollie transaction.
    */
   public function getTransaction(): TransactionInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/mollie/src/Events/MollieRedirectEvent.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * URL to redirect to.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $redirectUrl;

@@ @@
   /**
    * Set the URL to redirect to.
    *
-   * @param \Drupal\Core\Url $redirectUrl
+   * @param Url $redirectUrl
    *   URL to redirect to.
    */
   public function setRedirectUrl(Url $redirectUrl): void {
@@ @@
   /**
    * Returns the URL to redirect to.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   URL to redirect to.
    */
   public function getRedirectUrl(): Url {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/mollie/src/Events/MollieNotificationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mollie\Events;

+use Drupal\mollie\TransactionInterface;
 /**
  * Class MollieNotificationEvent.
  *
@@ @@
    *   The type of event occurring.
    */
   public function __construct(string $context, string $contextId, string $transactionId, string $eventType) {
-    /** @var \Drupal\mollie\TransactionInterface $transaction */
+    /** @var TransactionInterface $transaction */
     $transaction = \Drupal::entityTypeManager()->getStorage('mollie_payment')->load($transactionId);
     parent::__construct($context, $contextId, $transaction);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/mollie/src/Events/MollieEventBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mollie\Events;

-/**
- * TODO: Change to \Symfony\Contracts\EventDispatcher\Event once Drupal 8 is
- *   EOL.
- */
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class MollieEventBase.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/mollie/src/Entity/TransactionStorageBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mollie\Entity;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Mollie API client.
    *
-   * @var \Mollie\Api\MollieApiClient|null
+   * @var MollieApiClient|null
    */
   protected $mollieApiClient;

@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * TransactionStorageBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldTypeManager
+   * @param EntityFieldManagerInterface $entityFieldTypeManager
    *   The entity manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
-   * @param \Drupal\mollie\Mollie $mollieConnector
+   * @param Mollie $mollieConnector
    *   Mollie connector.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memoryCache
+   * @param MemoryCacheInterface|null $memoryCache
    *   The memory cache backend.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info.
    */
   public function __construct(
@@ @@
   /**
    * Static cache for entities.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $loadedEntities = [];

@@ @@
    * This method should be implemented by storage classes for specific
    * transaction types.
    *
-   * @param \Mollie\Api\Resources\BaseResource $transaction
+   * @param BaseResource $transaction
    *   Transaction object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   abstract protected function createEntityFromTransaction(BaseResource $transaction): ?EntityInterface;

@@ @@
    * This method should be implemented by storage classes for specific
    * transaction types.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   abstract protected function createTransactionFromEntity(EntityInterface $entity): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/mollie/src/Entity/Query/TransactionQueryBase.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Mollie API client.
    *
-   * @var \Mollie\Api\MollieApiClient
+   * @var MollieApiClient
    */
   protected $mollieApiClient;

@@ @@
   /**
    * TransactionQuery constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type definition.
    * @param string $conjunction
    *   - AND: all of the conditions on the query need to match.
@@ @@
    *   - OR: at least one of the conditions on the query need to match.
    * @param array $namespaces
    *   List of potential namespaces of the classes belonging to this query.
-   * @param \Mollie\Api\MollieApiClient $mollieApiClient
+   * @param MollieApiClient $mollieApiClient
    *   Mollie API client.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/mollie/src/Entity/Query/PaymentQuery.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mollie\Entity\Query;

+use Mollie\Api\Resources\Payment;
 use Mollie\Api\Exceptions\ApiException;
 use Mollie\Api\Resources\PaymentCollection;

@@ @@

     $payments = $this->getPaymentsFromMollie();
     foreach ($payments as $payment) {
-      /** @var \Mollie\Api\Resources\Payment $payment */
+      /** @var Payment $payment */
       $paymentIds[$payment->id] = $payment->id;
     }

@@ @@
   /**
    * Returns the payments for the configured Mollie account.
    *
-   * @return \Mollie\Api\Resources\PaymentCollection
+   * @return PaymentCollection
    *
    * TODO: Add paging, sorting and parameters.
    * TODO: Only return payments created by this module.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/mollie/src/Entity/Payment.php:39

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entityType) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
+    /** @var BaseFieldDefinition[] $fields */
     $fields = parent::baseFieldDefinitions($entityType);

     if (isset($fields['id'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/mollie/src/Controller/WebhookController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mollie\Controller;

+use Drupal\mollie\TransactionInterface;
+use Mollie\Api\Resources\Refund;
+use Mollie\Api\Resources\Chargeback;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Mollie connector.
    *
-   * @var \Drupal\mollie\Mollie
+   * @var Mollie
    */
   protected $mollie;

@@ @@
   /**
    * RedirectController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   Event dispatcher.
-   * @param \Drupal\mollie\Mollie $mollie
+   * @param Mollie $mollie
    *   Mollie connector.
    */
   public function __construct(
@@ @@
    * @param string $context_id
    *   The ID of the context that requested the payment.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Response that will inform Mollie whether the event was processed
    *   correctly.
    */
@@ @@

     try {
       // Get the transaction for which the hook was invoked.
-      /** @var \Drupal\mollie\TransactionInterface $transaction */
+      /** @var TransactionInterface $transaction */
       $transaction = $this->entityTypeManager()->getStorage('mollie_payment')
         ->load($transaction_id);

@@ @@
         $event->setHttpStatusCode(200);

         // Dispatch event.
-        $this->eventDispatcher->dispatch(MollieTransactionStatusChangeEvent::EVENT_NAME, $event);
+        $this->eventDispatcher->dispatch($event, MollieTransactionStatusChangeEvent::EVENT_NAME);

         // BC: Support for old MollieNotificationEvent.
         // TODO: Remove in Mollie for Drupal 3.0.0.
@@ @@
         $deprecated_event->setHttpStatusCode(200);

         // Dispatch deprecated event.
-        $this->eventDispatcher->dispatch(MollieNotificationEvent::EVENT_NAME, $deprecated_event);
+        $this->eventDispatcher->dispatch($deprecated_event, MollieNotificationEvent::EVENT_NAME);
       }
       else {
         // Just return a 200 OK if the transaction could not be loaded. This is
@@ @@
    * @param string $context_id
    *   The ID of the context that requested the payment.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Response that will inform Mollie whether the event was processed
    *   correctly.
    */
@@ @@

     try {
       // Get the transaction for which the hook was invoked.
-      /** @var \Drupal\mollie\TransactionInterface $transaction */
+      /** @var TransactionInterface $transaction */
       $transaction = $this->entityTypeManager()->getStorage('mollie_payment')
         ->load($transaction_id);

@@ @@
         // Loop over refunds and see if a new one has been added since the
         // previous webhook invocation.
         foreach ($payment->refunds() as $refund) {
-          /** @var \Mollie\Api\Resources\Refund $refund */
+          /** @var Refund $refund */
           if ($refund->createdAt > $previous_invocation) {
             $event = new MollieTransactionRefundEvent($context, $context_id, $transaction);
             // BC: Support for old MollieNotificationEvent.
@@ @@
         // If no new refund was found, check for chargebacks.
         if (!isset($event)) {
           foreach ($payment->chargebacks() as $chargeback) {
-            /** @var \Mollie\Api\Resources\Chargeback $chargeback */
+            /** @var Chargeback $chargeback */
             if ($chargeback->createdAt > $previous_invocation) {
               $event = new MollieTransactionChargebackEvent($context, $context_id, $transaction);
               // BC: Support for old MollieNotificationEvent.
@@ @@
           $deprecated_event->setHttpStatusCode(200);

           // Dispatch deprecated event.
-          $this->eventDispatcher->dispatch(MollieNotificationEvent::EVENT_NAME, $deprecated_event);
+          $this->eventDispatcher->dispatch($deprecated_event, MollieNotificationEvent::EVENT_NAME);
         }
       }
       else {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/mollie/src/Controller/TransactionController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the title for a payment.
    *
-   * @param \Drupal\mollie\Entity\Payment $mollie_payment
+   * @param Payment $mollie_payment
    *   Payment.
    *
    * @return string
@@ @@
   /**
    * Returns the title for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/mollie/src/Controller/RedirectController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * RedirectController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   Event dispatcher.
    */
   public function __construct(EventDispatcherInterface $eventDispatcher) {
@@ @@
    * @param string $context_id
    *   The ID of the context that requested the payment.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Response that redirects to the appropriate place.
    */
   public function paymentRedirect(string $context, string $context_id): RedirectResponse {
@@ @@
     $event->setRedirectUrl($url);

     // Dispatch event.
-    $this->eventDispatcher->dispatch(MollieRedirectEvent::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, MollieRedirectEvent::EVENT_NAME);

     return new RedirectResponse($event->getRedirectUrl()->toString());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/mollie/src/Controller/PaymentListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mollie\Controller;

+use Drupal\mollie\Entity\Payment;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ @@
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   Date formatter.
    */
   public function __construct(
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\mollie\Entity\Payment $entity */
+    /** @var Payment $entity */
     $row = [];

     $row['description'] = Link::fromTextAndUrl($entity->getDescription(), $entity->toUrl());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/mollie/src/Controller/MollieEntityBaseController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the title for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/mollie/mollie.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\mollie\MollieConfigValidatorInterface;
+use Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface;
 /**
  * @file
  * Install, update and uninstall hooks for Mollie for Drupal.
@@ @@
         ];
       }

-      /** @var \Drupal\mollie\MollieConfigValidatorInterface $configValidator */
+      /** @var MollieConfigValidatorInterface $configValidator */
       $configValidator = \Drupal::service('mollie.config_validator');

       if ($configValidator->hasLiveApiKey()) {
@@ @@
         ];
       }

-      /** @var \Drupal\mollie\Mollie $mollieClient */
+      /** @var Mollie $mollieClient */
       $mollieClient = \Drupal::service('mollie.mollie');
       if ($mollieClient->useTestMode()) {
         $requirements['mollie_test_mode'] = [
@@ @@
  * Add missing amount fields for payments.
  */
 function mollie_update_9101() {
-  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entity_definition_update_manager */
+  /** @var EntityDefinitionUpdateManagerInterface $entity_definition_update_manager */
   $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();

   // Refunded amount.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


20) modules/contrib/mollie/modules/mollie_webform/src/EventSubscriber/MollieTransactionEventSubscriber.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Mollie webform helper.
    *
-   * @var \Drupal\mollie_webform\MollieWebformHelper
+   * @var MollieWebformHelper
    */
   protected $mollieWebformHelper;

@@ @@
   /**
    * MollieTransactionEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\mollie_webform\MollieWebformHelper $mollieWebformHelper
+   * @param MollieWebformHelper $mollieWebformHelper
    *  Mollie webform helper.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, MollieWebformHelper $mollie_webform_helper) {
@@ @@
   /**
    * Updates the status of the order when the status of a payment has changed.
    *
-   * @param \Drupal\mollie\Events\MollieTransactionStatusChangeEvent $event
+   * @param MollieTransactionStatusChangeEvent $event
    *   Event.
    */
   public function updateOrderStatus(MollieTransactionStatusChangeEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/mollie/modules/mollie_webform/src/EventSubscriber/MollieRedirectEventSubscriber.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@

   /**
    * Current route match.
-   * 
-   * @var \Drupal\Core\Routing\RouteMatchInterface 
+   *
+   * @var RouteMatchInterface 
    */
   protected $routeMatch;

@@ @@
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * Path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
   /**
    * MollieRedirectEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    * @param \Drupal\webform\WebformMessageManagerInterface $messageManager
    *   Webform message manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   Current route match.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
    * @param \Drupal\webform\WebformTokenManagerInterface $tokenManager
    *   Webform token manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Configuration factory.
-   * @param \Drupal\path_alias\AliasManagerInterface $aliasManager
+   * @param AliasManagerInterface $aliasManager
    *   Alias manager.
-   * @param \Drupal\Core\Path\PathValidatorInterface $pathValidator
+   * @param PathValidatorInterface $pathValidator
    *   Path validator.
    * @param \Drupal\webform\WebformRequestInterface $requestHandler
    *   Webform request handler.
@@ @@
   /**
    * Sets the redirect URL on the event.
    *
-   * @param \Drupal\mollie\Events\MollieRedirectEvent $event
+   * @param MollieRedirectEvent $event
    *   Event.
    */
   public function setRedirectUrl(MollieRedirectEvent $event): void {
@@ @@

   /**
    * Returns webform confirmation redirect URL and sets message if applicable.
-   * 
+   *
    * This is mainly a copy of
    * \Drupal\webform\WebformSubmissionForm::setConfirmation() which
    * unfortunately is not usable outside the
@@ @@
    *
    * @param \Drupal\webform\WebformSubmissionInterface $webformSubmission
    *   Webform submission.
-   * 
-   * @return \Drupal\Core\Url
+   *
+   * @return Url
    *   Webform confirmation redirect URL.
    */
   protected function getConfirmationUrl(WebformSubmissionInterface $webformSubmission): Url {
@@ @@
    * @param \Drupal\webform\WebformSubmissionInterface $webformSubmission
    *   Webform submission.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Source entity of the webform submission. Or null if no source entity
    *   could be determined.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/mollie/modules/mollie_uc/src/EventSubscriber/MollieTransactionEventSubscriber.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * MollieTransactionNotificationSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Updates the status of the order when the status of a payment has changed.
    *
-   * @param \Drupal\mollie\Events\MollieTransactionStatusChangeEvent $event
+   * @param MollieTransactionStatusChangeEvent $event
    *   Event.
    */
   public function updateOrderStatus(MollieTransactionStatusChangeEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/mollie/modules/mollie_uc/src/EventSubscriber/MollieRedirectEventSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the redirect URL on the event.
    *
-   * @param \Drupal\mollie\Events\MollieRedirectEvent $event
+   * @param MollieRedirectEvent $event
    *   Event.
    */
   public function setRedirectUrl(MollieRedirectEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/mollie/modules/mollie_customers/src/Form/CustomerForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * UUID generator.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;

@@ @@
   /**
    * Mollie API client.
    *
-   * @var \Drupal\mollie\Mollie
+   * @var Mollie
    */
   protected $mollieApiClient;

@@ @@
   /**
    * PaymentForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   UUID generator.
-   * @param \Drupal\mollie\Mollie $mollieApiClient
+   * @param Mollie $mollieApiClient
    *   Mollie API client.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/mollie/modules/mollie_customers/src/Form/CustomerDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mollie_customers\Form;

+use Drupal\Core\Url;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\mollie_customers\Entity\CustomerStorage;
@@ @@
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/mollie/modules/mollie_customers/src/Entity/Query/CustomerQueryBase.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Mollie API client.
    *
-   * @var \Mollie\Api\MollieApiClient
+   * @var MollieApiClient
    */
   protected $mollieApiClient;

@@ @@
   /**
    * CustomerQueryBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type definition.
    * @param string $conjunction
    *   - AND: all of the conditions on the query need to match.
@@ @@
    *   - OR: at least one of the conditions on the query need to match.
    * @param array $namespaces
    *   List of potential namespaces of the classes belonging to this query.
-   * @param \Mollie\Api\MollieApiClient $mollieApiClient
+   * @param MollieApiClient $mollieApiClient
    *   Mollie API client.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/mollie/modules/mollie_customers/src/Entity/Query/CustomerQuery.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mollie_customers\Entity\Query;

+use Mollie\Api\Resources\Customer;
 use Mollie\Api\Exceptions\ApiException;
 use Mollie\Api\Resources\CustomerCollection;

@@ @@

     $customers = $this->getCustomersFromMollie();
     foreach ($customers as $customer) {
-      /** @var \Mollie\Api\Resources\Customer $customer */
+      /** @var Customer $customer */
       $customerIds[$customer->id] = $customer->id;
     }

@@ @@
   /**
    * Returns the customers for the configured Mollie account.
    *
-   * @return \Mollie\Api\Resources\CustomerCollection
+   * @return CustomerCollection
    *
    * TODO: Add paging, sorting and parameters.
    * TODO: Optionally only return customers created by this module.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


28) modules/contrib/mollie/modules/mollie_customers/src/Entity/CustomerStorageBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mollie_customers\Entity;

+use Mollie\Api\MollieApiClient;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Mollie API client.
    *
-   * @var \Mollie\Api\MollieApiClient|null
+   * @var MollieApiClient|null
    */
   protected $mollieApiClient;

@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * TransactionStorageBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
-   * @param \Drupal\mollie\Mollie $mollieConnector
+   * @param Mollie $mollieConnector
    *   Mollie connector.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memoryCache
+   * @param MemoryCacheInterface|null $memoryCache
    *   The memory cache backend.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info.
    */
   public function __construct(
@@ @@
   /**
    * Static cache for entities.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $loadedEntities = [];

@@ @@
    * This method should be implemented by storage classes for specific
    * customer base types.
    *
-   * @param \Mollie\Api\Resources\BaseResource $customer
+   * @param BaseResource $customer
    *   Transaction object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   abstract protected function createEntityFromCustomer(BaseResource $customer): ?EntityInterface;

@@ @@
    * This method should be implemented by storage classes for specific
    * customer base types.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   abstract protected function createCustomerFromEntity(EntityInterface $entity): void;

@@ @@
    * This method should be implemented by storage classes for specific
    * customer base types.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   abstract protected function deleteCustomerByEntity(EntityInterface $entity): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/mollie/modules/mollie_customers/src/Entity/Customer.php:154

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function delete() {
-    /** @var \Drupal\mollie_customers\Entity\CustomerStorage $customerStorage */
+    /** @var CustomerStorage $customerStorage */
     $customerStorage = \Drupal::service('entity_type.manager')->getStorage('mollie_customer');
     $customerStorage->delete([$this->id() => $this]);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/mollie/modules/mollie_customers/src/CustomerPermissions.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Returns available operations on entities of a given type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   Entity type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/mollie/modules/mollie_customers/src/Controller/CustomerListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mollie_customers\Controller;

+use Drupal\mollie_customers\CustomerInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ @@
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   Date formatter.
    */
   public function __construct(
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\mollie_customers\CustomerInterface $entity */
+    /** @var CustomerInterface $entity */
     $row = [];

     $row['id'] = Link::fromTextAndUrl($entity->id(), $entity->toUrl());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/mollie/modules/mollie_customers/src/Controller/CustomerController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the title for a customer entity.
    *
-   * @param \Drupal\mollie_customers\CustomerInterface $mollie_customer
+   * @param CustomerInterface $mollie_customer
    *   Customer entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/mollie/modules/mollie_commerce/src/EventSubscriber/MollieTransactionEventSubscriber.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Updates the status of the order when the status of a payment has changed.
    *
-   * @param \Drupal\mollie\Events\MollieTransactionStatusChangeEvent $event
+   * @param MollieTransactionStatusChangeEvent $event
    *   Event.
    */
   public function updateOrderStatus(MollieTransactionStatusChangeEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/mollie/modules/mollie_commerce/src/EventSubscriber/MollieRedirectEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mollie_commerce\EventSubscriber;

+use Drupal\mollie\TransactionInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Url;
@@ @@
   /**
    * Sets the redirect URL on the event.
    *
-   * @param \Drupal\mollie\Events\MollieRedirectEvent $event
+   * @param MollieRedirectEvent $event
    *   Event.
    */
   public function setRedirectUrl(MollieRedirectEvent $event): void {
@@ @@
     // By default, redirect to the return URL in Drupal Commerce.
     $routeName = 'commerce_payment.checkout.return';
     try {
-      /** @var \Drupal\mollie\TransactionInterface[] $payments */
+      /** @var TransactionInterface[] $payments */
       $payments = $this->entityTypeManager->getStorage('mollie_payment')
         ->loadByProperties([
           'context' => $event->getContext(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/mollie/modules/mollie_commerce/src/EventSubscriber/MollieEventSubscriberBase.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * HTTP kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * MollieRedirectEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $httpKernel
+   * @param HttpKernelInterface $httpKernel
    *   HTTP kernel.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, HttpKernelInterface $httpKernel) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [ERROR] Could not process                                                      
         "modules/contrib/mollie/modules/mollie_webform/src/Plugin/WebformHandler/
         MolliePaymentHandler.php" file, due to:                                
         "Analyze error: "Class Drupal\webform\Plugin\WebformHandlerBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/mollie/modules/mollie_webform/src/Plugin/WebformElement/
         MolliePaymentStatus.php" file, due to:                                 
         "Analyze error: "Class Drupal\webform\Plugin\WebformElement\Value not  
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/mollie/modules/mollie_uc/src/Plugin/Ubercart/PaymentMeth
         od/Mollie.php" file, due to:                                           
         "Analyze error: "Class Drupal\uc_payment\PaymentMethodPluginBase not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/mollie/modules/mollie_commerce/src/PluginForm/OffsiteRed
         irect/MolliePaymentOffsiteForm.php" file, due to:                      
         "Analyze error: "Class                                                 
         Drupal\commerce_payment\PluginForm\PaymentOffsiteForm not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/mollie/modules/mollie_commerce/src/Plugin/Commerce/Payme
         ntGateway/Mollie.php" file, due to:                                    
         "Analyze error: "Class                                                 
         Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\OffsitePaymentGate
         wayBase not found.". Include your files in                             
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

