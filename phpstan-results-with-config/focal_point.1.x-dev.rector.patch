diff --git a/focal_point.install b/focal_point.install
index 0979bfc..8d0f40b 100644
--- a/focal_point.install
+++ b/focal_point.install
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\file\FileUsage\FileUsageInterface;
+use Drupal\file\FileInterface;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
 /**
  * @file
  * Install hooks for focal_point.
@@ -29,7 +32,7 @@ function focal_point_update_8001() {
  * Migrates legacy values to crop entities.
  */
 function focal_point_update_8002(&$sandbox) {
-  /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+  /** @var FileUsageInterface $file_usage */
   $file_storage = \Drupal::entityTypeManager()->getStorage('file');
   $crop_storage = \Drupal::entityTypeManager()->getStorage('crop');
   $crop_type = \Drupal::config('focal_point.settings')->get('crop_type');
@@ -53,7 +56,7 @@ function focal_point_update_8002(&$sandbox) {
     ->fetchAll();
 
   foreach ($focal_points as $focal_point) {
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $file_storage->load($focal_point->fid);
 
     if (!is_null($file)) {
@@ -117,7 +120,7 @@ function focal_point_update_8004() {
           'bundle' => $bundle,
         ];
         if ($formDisplays = $formStorage->loadByProperties($properties)) {
-          /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $formDisplay */
+          /** @var EntityFormDisplay $formDisplay */
           foreach ($formDisplays as $formDisplay) {
             $componentConfig = $formDisplay->getComponent($fieldName);
             if (is_array($componentConfig) && $componentConfig['type'] === 'image_image') {
diff --git a/focal_point.module b/focal_point.module
index b10bf78..b222590 100644
--- a/focal_point.module
+++ b/focal_point.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\focal_point\FocalPointManagerInterface;
+use Drupal\media\MediaInterface;
 /**
  * @file
  * Allow users to specify a focal point on content images.
@@ -67,7 +69,7 @@ function focal_point_entity_update(EntityInterface $entity) {
         $crop_type = \Drupal::config('focal_point.settings')->get('crop_type');
         // Loop through all values for this field. Its cardinality might be > 1.
         foreach ($entity->{$field->getName()} as $item) {
-          /** @var \Drupal\focal_point\FocalPointManagerInterface $focal_point_manager */
+          /** @var FocalPointManagerInterface $focal_point_manager */
           $focal_point_manager = \Drupal::service('focal_point.manager');
           if (!$item->entity instanceof FileInterface) {
             continue;
@@ -118,7 +120,7 @@ function focal_point_form_media_library_add_form_upload_alter(array &$form, Form
   // Get any media items that are in the process of being added.
   // @see \Drupal\media_library\Form\AddFormBase::getAddedMediaItems().
   $media = $form_state->get('media') ?: [];
-  /** @var \Drupal\media\MediaInterface $item */
+  /** @var MediaInterface $item */
   foreach ($media as $delta => $item) {
     $element = &$form['media'][$delta]['fields'];
     // As a kindness to alter hooks like this one, Media Library includes the
diff --git a/src/Controller/FocalPointPreviewController.php b/src/Controller/FocalPointPreviewController.php
index a7ef76f..aaaa337 100644
--- a/src/Controller/FocalPointPreviewController.php
+++ b/src/Controller/FocalPointPreviewController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\focal_point\Controller;
 
+use Drupal\file\FileStorage;
+use Drupal\Core\GeneratedUrl;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\focal_point\Plugin\Field\FieldWidget\FocalPointImageWidget;
 use Drupal\file\Entity\File;
@@ -27,30 +29,30 @@ class FocalPointPreviewController extends ControllerBase {
   /**
    * The image factory service.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
   /**
    * The request service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;
 
   /**
    * The file storage service.
    *
-   * @var \Drupal\file\FileStorage
+   * @var FileStorage
    */
   protected $fileStorage;
 
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image_factory parameter.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request parameter.
    */
   public function __construct(ImageFactory $image_factory, RequestStack $request_stack) {
@@ -161,12 +163,12 @@ class FocalPointPreviewController extends ControllerBase {
    * if they've provide a valid token as a query string. The later is needed so
    * preview will work when creating a new entity that has not yet been saved.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    * @param int $fid
    *   The file id for the image being previewed from the URL.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   An AccessResult object defining if permission is granted or not.
    */
   public function access(AccountInterface $account, $fid) {
@@ -232,15 +234,15 @@ class FocalPointPreviewController extends ControllerBase {
   /**
    * Create the URL for a preview image including a query parameter.
    *
-   * @param \Drupal\image\ImageStyleInterface $style
+   * @param ImageStyleInterface $style
    *   The image style being previewed.
-   * @param \Drupal\file\Entity\File $image
+   * @param File $image
    *   The image being previewed.
    * @param string $focal_point_value
    *   The focal point being previewed in the format XxY where x and y are the
    *   left and top offsets in percentages.
    *
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    *   The URL of the preview image.
    */
   protected function buildUrl(ImageStyleInterface $style, File $image, $focal_point_value) {
diff --git a/src/FocalPointEffectBase.php b/src/FocalPointEffectBase.php
index bf5e07e..49c8718 100644
--- a/src/FocalPointEffectBase.php
+++ b/src/FocalPointEffectBase.php
@@ -21,14 +21,14 @@ abstract class FocalPointEffectBase extends ResizeImageEffect implements Contain
   /**
    * Crop storage.
    *
-   * @var \Drupal\crop\CropStorageInterface
+   * @var CropStorageInterface
    */
   protected $cropStorage;
 
   /**
    * Focal point configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $focalPointConfig;
 
@@ -42,14 +42,14 @@ abstract class FocalPointEffectBase extends ResizeImageEffect implements Contain
   /**
    * Focal point manager object.
    *
-   * @var \Drupal\focal_point\FocalPointManager
+   * @var FocalPointManager
    */
   protected $focalPointManager;
 
   /**
    * The current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   public $request;
 
@@ -62,15 +62,15 @@ abstract class FocalPointEffectBase extends ResizeImageEffect implements Contain
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Image logger.
-   * @param \Drupal\focal_point\FocalPointManager $focal_point_manager
+   * @param FocalPointManager $focal_point_manager
    *   Focal point manager.
-   * @param \Drupal\crop\CropStorageInterface $crop_storage
+   * @param CropStorageInterface $crop_storage
    *   Crop storage.
-   * @param \Drupal\Core\Config\ImmutableConfig $focal_point_config
+   * @param ImmutableConfig $focal_point_config
    *   Focal point configuration object.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request object.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerInterface $logger, FocalPointManager $focal_point_manager, CropStorageInterface $crop_storage, ImmutableConfig $focal_point_config, Request $request) {
@@ -157,9 +157,9 @@ abstract class FocalPointEffectBase extends ResizeImageEffect implements Contain
   /**
    * Applies the crop effect to an image.
    *
-   * @param \Drupal\Core\Image\ImageInterface $image
+   * @param ImageInterface $image
    *   The image resource to crop.
-   * @param \Drupal\crop\CropInterface $crop
+   * @param CropInterface $crop
    *   A crop object containing the relevant crop information.
    *
    * @return bool
@@ -189,16 +189,16 @@ abstract class FocalPointEffectBase extends ResizeImageEffect implements Contain
   /**
    * Get the cropped image.
    *
-   * @param \Drupal\Core\Image\ImageInterface $image
+   * @param ImageInterface $image
    *   The image resource whose crop is being requested.
    *
-   * @return \Drupal\crop\CropInterface
+   * @return CropInterface
    *   The crop.
    */
   public function getCrop(ImageInterface $image) {
     $crop_type = $this->focalPointConfig->get('crop_type');
 
-    /** @var \Drupal\crop\CropInterface $crop */
+    /** @var CropInterface $crop */
     if ($crop = Crop::findCrop($image->getSource(), $crop_type)) {
       // An existing crop has been found; set the size.
       $crop->setSize($this->configuration['width'], $this->configuration['height']);
@@ -220,7 +220,7 @@ abstract class FocalPointEffectBase extends ResizeImageEffect implements Contain
   /**
    * Returns the focal point config.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The focal point config.
    */
   public function getFocalPointConfig() {
@@ -230,7 +230,7 @@ abstract class FocalPointEffectBase extends ResizeImageEffect implements Contain
   /**
    * Returns the crop storage.
    *
-   * @return \Drupal\crop\CropStorageInterface
+   * @return CropStorageInterface
    *   The crop storage.
    */
   public function getCropStorage() {
@@ -240,9 +240,9 @@ abstract class FocalPointEffectBase extends ResizeImageEffect implements Contain
   /**
    * Get the top-left anchor position of the crop area.
    *
-   * @param \Drupal\Core\Image\ImageInterface $image
+   * @param ImageInterface $image
    *   Image object representing original image.
-   * @param \Drupal\crop\CropInterface $crop
+   * @param CropInterface $crop
    *   Crop entity.
    *
    * @return array
@@ -293,9 +293,9 @@ abstract class FocalPointEffectBase extends ResizeImageEffect implements Contain
    *
    * @param array $focal_point
    *   The focal point value.
-   * @param \Drupal\Core\Image\ImageInterface $image
+   * @param ImageInterface $image
    *   The original image to be cropped.
-   * @param \Drupal\crop\CropInterface $crop
+   * @param CropInterface $crop
    *   The crop object used to define the crop.
    *
    * @return array
@@ -326,9 +326,9 @@ abstract class FocalPointEffectBase extends ResizeImageEffect implements Contain
    * @param array $anchor
    *   An array with the keys 'x' and 'y'. Values are in pixels representing the
    *   top left corner of the of the crop area relative to the image.
-   * @param \Drupal\Core\Image\ImageInterface $image
+   * @param ImageInterface $image
    *   The image to which the crop area must be constrained.
-   * @param \Drupal\crop\CropInterface $crop
+   * @param CropInterface $crop
    *   The crop object used to define the crop.
    *
    * @return array
@@ -359,9 +359,9 @@ abstract class FocalPointEffectBase extends ResizeImageEffect implements Contain
   /**
    * Returns the focal point value (in pixels) relative to the original image.
    *
-   * @param \Drupal\crop\CropInterface $crop
+   * @param CropInterface $crop
    *   The crop object used to define the crop.
-   * @param \Drupal\focal_point\FocalPointManager $focal_point_manager
+   * @param FocalPointManager $focal_point_manager
    *   The focal point manager.
    *
    * @return array
@@ -386,7 +386,7 @@ abstract class FocalPointEffectBase extends ResizeImageEffect implements Contain
   /**
    * Returns the focal point value (in pixels) relative to the provided image.
    *
-   * @param \Drupal\Core\Image\ImageInterface $image
+   * @param ImageInterface $image
    *   Image object that the focal point must be applied to.
    * @param array $original_focal_point
    *   An array with keys 'x' and 'y' which represent the focal point in pixels
diff --git a/src/FocalPointManager.php b/src/FocalPointManager.php
index 84ec7d3..2a4e69a 100644
--- a/src/FocalPointManager.php
+++ b/src/FocalPointManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\focal_point;
 
+use Drupal\crop\CropStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\crop\CropInterface;
 use Drupal\crop\Entity\Crop;
@@ -22,14 +23,14 @@ class FocalPointManager implements FocalPointManagerInterface {
   /**
    * Crop entity storage.
    *
-   * @var \Drupal\crop\CropStorageInterface
+   * @var CropStorageInterface
    */
   protected $cropStorage;
 
   /**
    * Constructs FocalPointManager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -70,7 +71,7 @@ class FocalPointManager implements FocalPointManagerInterface {
    */
   public function getCropEntity(FileInterface $file, $crop_type) {
     if (Crop::cropExists($file->getFileUri(), $crop_type)) {
-      /** @var \Drupal\crop\CropInterface $crop */
+      /** @var CropInterface $crop */
       $crop = Crop::findCrop($file->getFileUri(), $crop_type);
     }
     else {
diff --git a/src/FocalPointManagerInterface.php b/src/FocalPointManagerInterface.php
index 86a4a1d..d6881b1 100644
--- a/src/FocalPointManagerInterface.php
+++ b/src/FocalPointManagerInterface.php
@@ -73,12 +73,12 @@ interface FocalPointManagerInterface {
    *
    * If an existing crop entity is not found then a new one is created.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File this focal point applies to.
    * @param string $crop_type
    *   Crop type to be used.
    *
-   * @return \Drupal\crop\CropInterface
+   * @return CropInterface
    *   Created crop entity.
    */
   public function getCropEntity(FileInterface $file, $crop_type);
@@ -98,10 +98,10 @@ interface FocalPointManagerInterface {
    *   Width of the original image.
    * @param int $height
    *   Height of the original image.
-   * @param \Drupal\crop\CropInterface $crop
+   * @param CropInterface $crop
    *   Crop entity for the given file.
    *
-   * @return \Drupal\crop\CropInterface
+   * @return CropInterface
    *   Saved crop entity.
    */
   public function saveCropEntity($x, $y, $width, $height, CropInterface $crop);
diff --git a/src/Plugin/Field/FieldWidget/FocalPointImageWidget.php b/src/Plugin/Field/FieldWidget/FocalPointImageWidget.php
index c86adca..16450bf 100755
--- a/src/Plugin/Field/FieldWidget/FocalPointImageWidget.php
+++ b/src/Plugin/Field/FieldWidget/FocalPointImageWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\focal_point\Plugin\Field\FieldWidget;
 
+use Drupal\file\FileInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\crop\Entity\Crop;
@@ -177,7 +178,7 @@ class FocalPointImageWidget extends ImageWidget {
     // When an element is loaded, focal_point needs to be set. During a form
     // submission the value will already be there.
     if (isset($return['target_id']) && !isset($return['focal_point'])) {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = \Drupal::service('entity_type.manager')
         ->getStorage('file')
         ->load($return['target_id']);
diff --git a/tests/src/Functional/FocalPointWidgetTest.php b/tests/src/Functional/FocalPointWidgetTest.php
index 64e5eb7..a2abccf 100644
--- a/tests/src/Functional/FocalPointWidgetTest.php
+++ b/tests/src/Functional/FocalPointWidgetTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\focal_point\Functional;
 
+use Drupal\focal_point\FocalPointManagerInterface;
 use Drupal\file\Entity\File;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\image\Kernel\ImageFieldCreationTrait;
@@ -30,7 +31,7 @@ class FocalPointWidgetTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create an article content type that we will use for testing.
@@ -73,7 +74,7 @@ class FocalPointWidgetTest extends BrowserTestBase {
     $image_factory = $this->container->get('image.factory');
     $image = $image_factory->get($images[0]->uri);
 
-    /** @var \Drupal\focal_point\FocalPointManagerInterface $focalPointManager */
+    /** @var FocalPointManagerInterface $focalPointManager */
     $focalPointManager = \Drupal::service('focal_point.manager');
 
     $crop = $focalPointManager->getCropEntity($file, 'focal_point');
diff --git a/tests/src/FunctionalJavascript/MediaLibraryIntegrationTest.php b/tests/src/FunctionalJavascript/MediaLibraryIntegrationTest.php
index 9ba048e..4bf293f 100644
--- a/tests/src/FunctionalJavascript/MediaLibraryIntegrationTest.php
+++ b/tests/src/FunctionalJavascript/MediaLibraryIntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\focal_point\FunctionalJavascript;
 
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Behat\Mink\Element\DocumentElement;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -36,7 +37,7 @@ class MediaLibraryIntegrationTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType([
@@ -71,7 +72,7 @@ class MediaLibraryIntegrationTest extends WebDriverTestBase {
 
     // Ensure that the media type is using Focal Point in its media library
     // form display.
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = $this->container->get('entity_display.repository');
     $display_repository->getFormDisplay('media', 'image', 'media_library')
       ->setComponent('field_media_image', [
diff --git a/tests/src/Unit/Effects/FocalPointEffectsTest.php b/tests/src/Unit/Effects/FocalPointEffectsTest.php
index ae73e89..7da0d7b 100644
--- a/tests/src/Unit/Effects/FocalPointEffectsTest.php
+++ b/tests/src/Unit/Effects/FocalPointEffectsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\focal_point\Unit\Effects;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\crop\CropInterface;
 use Drupal\crop\CropStorageInterface;
@@ -20,10 +21,11 @@ use Symfony\Component\HttpFoundation\Request;
  */
 class FocalPointEffectsTest extends FocalPointUnitTestCase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }
 
diff --git a/tests/src/Unit/FieldWidgets/FocalPointFieldWidgetTest.php b/tests/src/Unit/FieldWidgets/FocalPointFieldWidgetTest.php
index 0fc763f..cfa7faf 100644
--- a/tests/src/Unit/FieldWidgets/FocalPointFieldWidgetTest.php
+++ b/tests/src/Unit/FieldWidgets/FocalPointFieldWidgetTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\focal_point\Unit\FieldWidgets;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Form\FormStateInterface;
 use Drupal\focal_point\FocalPointManager;
 use Drupal\focal_point\Plugin\Field\FieldWidget\FocalPointImageWidget;
 use Drupal\Core\Entity\EntityTypeManager;
@@ -19,6 +21,7 @@ use Drupal;
  */
 class FocalPointFieldWidgetTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * A simple form element for testing.
    *
@@ -29,14 +32,14 @@ class FocalPointFieldWidgetTest extends UnitTestCase {
   /**
    * A mock FormState object for testing.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $testFormState;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create some mock objects.
@@ -57,7 +60,7 @@ class FocalPointFieldWidgetTest extends UnitTestCase {
 
     // Setup a mock form state object for testing.
     // @todo: Figure out why using prophesize for this mock causes an exception.
-    $this->testFormState = $this->getMockBuilder('\Drupal\Core\Form\FormStateInterface')->disableOriginalConstructor()->getMock();
+    $this->testFormState = $this->createMock('\Drupal\Core\Form\FormStateInterface');
   }
 
   /**
@@ -66,6 +69,7 @@ class FocalPointFieldWidgetTest extends UnitTestCase {
    * @covers ::validateFocalPoint
    *
    * @dataProvider providerValidateFocalPoint
+   * @doesNotPerformAssertions
    */
   public function testValidateFocalPoint($value, $is_valid) {
     $this->testElement['#value'] = $value;
diff --git a/tests/src/Unit/FocalPointManagerTest.php b/tests/src/Unit/FocalPointManagerTest.php
index 9691a84..3db15c3 100644
--- a/tests/src/Unit/FocalPointManagerTest.php
+++ b/tests/src/Unit/FocalPointManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\focal_point\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\crop\CropInterface;
 use Drupal\focal_point\FocalPointManager;
 use Drupal\Core\Entity\EntityTypeManager;
@@ -13,6 +14,7 @@ use Drupal\Core\Entity\EntityTypeManager;
  */
 class FocalPointManagerTest extends FocalPointUnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Test constructor.
    *
diff --git a/tests/src/Unit/FocalPointUnitTestCase.php b/tests/src/Unit/FocalPointUnitTestCase.php
index 5bc88bc..a213764 100644
--- a/tests/src/Unit/FocalPointUnitTestCase.php
+++ b/tests/src/Unit/FocalPointUnitTestCase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\focal_point\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\focal_point\FocalPointManagerInterface;
 use Drupal\crop\CropStorageInterface;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Image\ImageInterface;
@@ -20,24 +22,25 @@ use Drupal\Core\Config\ImmutableConfig;
  */
 abstract class FocalPointUnitTestCase extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Drupal container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
    * Focal point manager.
    *
-   * @var \Drupal\focal_point\FocalPointManagerInterface
+   * @var FocalPointManagerInterface
    */
   protected $focalPointManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $crop_storage = $this->prophesize(CropStorageInterface::class);
@@ -59,10 +62,10 @@ abstract class FocalPointUnitTestCase extends UnitTestCase {
   /**
    * Get the test effects.
    *
-   * @param \Drupal\Core\Image\ImageInterface|null $original_image
+   * @param ImageInterface|null $original_image
    *   Original Image.
    *
-   * @return \Drupal\focal_point\Plugin\ImageEffect\FocalPointCropImageEffect
+   * @return FocalPointCropImageEffect
    *   Effect.
    */
   protected function getTestEffect(ImageInterface $original_image = NULL) {
