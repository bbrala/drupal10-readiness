modules/contrib/drush_language/default.settings.php
modules/contrib/drush_language/drush_language.drush.inc
modules/contrib/drush_language/src/Commands/DrushLanguageCommands.php
modules/contrib/drush_language/src/Drush8Io.php
modules/contrib/drush_language/src/Service/DrushLanguageCliService.php
modules/contrib/drush_language/tests/src/Functional/AdminPageTest.php

3 files with changes
====================

1) modules/contrib/drush_language/tests/src/Functional/AdminPageTest.php:32

    ---------- begin diff ----------
@@ @@
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/drush_language/src/Service/DrushLanguageCliService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drush_language\Service;

+use Drupal\Core\Config\ConfigFactory;
+use Symfony\Component\Console\Style\StyleInterface;
+use Drupal\drush_language\Drush8Io;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Component\Gettext\PoStreamWriter;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The config.factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language_manager service.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The module_handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * DrushLanguageCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config.factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity_type.manager service.
-   * @param \Drupal\language\ConfigurableLanguageManagerInterface $languageManager
+   * @param ConfigurableLanguageManagerInterface $languageManager
    *   The language_manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module_handler service.
    */
   public function __construct(
@@ @@
   /**
    * Add and import one or more new language definitions.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface|\Drupal\drush_language\Drush8Io $io
+   * @param StyleInterface|Drush8Io $io
    *   The $io interface of the cli tool calling.
    * @param callable $t
    *   The translation function akin to t().
@@ @@
   /**
    * Assign an enabled language as default.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface|\Drupal\drush_language\Drush8Io $io
+   * @param StyleInterface|Drush8Io $io
    *   The $io interface of the cli tool calling.
    * @param callable $t
    *   The translation function akin to t().
@@ @@
   /**
    * Import a single .po file.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface|\Drupal\drush_language\Drush8Io $io
+   * @param StyleInterface|Drush8Io $io
    *   The $io interface of the cli tool calling.
    * @param callable $t
    *   The translation function akin to t().
@@ @@
       foreach ($langcodes_to_import as $langcode_to_import) {
         if (!isset($languages[$langcode_to_import])) {
           try {
-            /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $language_storage */
+            /** @var ConfigEntityStorageInterface $language_storage */
             $language_storage = $this->entityTypeManager->getStorage('configurable_language');
             $language = $language_storage->create(['langcode' => $opt_langcode]);
             $io->success($t('The language @id (@label) has been created.', [
@@ @@
   /**
    * Export strings of a language as a .po file.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface|\Drupal\drush_language\Drush8Io $io
+   * @param StyleInterface|Drush8Io $io
    *   The $io interface of the cli tool calling.
    * @param callable $t
    *   The translation function akin to t().
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/drush_language/src/Commands/DrushLanguageCommands.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The interoperability cli service.
    *
-   * @var \Drupal\drush_language\Service\DrushLanguageCliService
+   * @var DrushLanguageCliService
    */
   protected $cliService;

@@ @@
   /**
    * DrushLanguageCommands constructor.
    *
-   * @param \Drupal\drush_language\Service\DrushLanguageCliService $cliService
+   * @param DrushLanguageCliService $cliService
    *   The CLI service which allows interoperability.
    */
   public function __construct(DrushLanguageCliService $cliService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

