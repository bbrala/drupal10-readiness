modules/contrib/shorthand/shorthand.install
modules/contrib/shorthand/shorthand.module
modules/contrib/shorthand/shorthand.page.inc
modules/contrib/shorthand/src/Controller/ShorthandStoryController.php
modules/contrib/shorthand/src/Entity/ShorthandStory.php
modules/contrib/shorthand/src/Entity/ShorthandStoryInterface.php
modules/contrib/shorthand/src/Entity/ShorthandStoryViewsData.php
modules/contrib/shorthand/src/Form/ShorthandStoryDeleteForm.php
modules/contrib/shorthand/src/Form/ShorthandStoryForm.php
modules/contrib/shorthand/src/Form/ShorthandStoryRevisionDeleteForm.php
modules/contrib/shorthand/src/Form/ShorthandStoryRevisionRevertForm.php
modules/contrib/shorthand/src/Form/ShorthandStoryRevisionRevertTranslationForm.php
modules/contrib/shorthand/src/Form/ShorthandStorySettingsForm.php
modules/contrib/shorthand/src/Plugin/Field/FieldType/StoryIdFieldType.php
modules/contrib/shorthand/src/Plugin/Field/FieldWidget/PublishConfigurationSelectFieldWidget.php
modules/contrib/shorthand/src/Plugin/Field/FieldWidget/StorySelectFieldWidget.php
modules/contrib/shorthand/src/ShorthandApiInterface.php
modules/contrib/shorthand/src/ShorthandApiV2.php
modules/contrib/shorthand/src/ShorthandStoryAccessControlHandler.php
modules/contrib/shorthand/src/ShorthandStoryHtmlRouteProvider.php
modules/contrib/shorthand/src/ShorthandStoryListBuilder.php
modules/contrib/shorthand/src/ShorthandStoryStorage.php
modules/contrib/shorthand/src/ShorthandStoryStorageInterface.php
modules/contrib/shorthand/src/ShorthandStoryTranslationHandler.php

16 files with changes
=====================

1) modules/contrib/shorthand/src/ShorthandStoryStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Shorthand story revision IDs for a specific Shorthand story.
    *
-   * @param \Drupal\shorthand\Entity\ShorthandStoryInterface $entity
+   * @param ShorthandStoryInterface $entity
    *   The Shorthand story entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Shorthand story author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\shorthand\Entity\ShorthandStoryInterface $entity
+   * @param ShorthandStoryInterface $entity
    *   The Shorthand story entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Shorthand story with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/shorthand/src/ShorthandStoryListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\shorthand;

+use Drupal\shorthand\Entity\ShorthandStory;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\shorthand\Entity\ShorthandStory $entity */
+    /** @var ShorthandStory $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/shorthand/src/ShorthandStoryHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/shorthand/src/ShorthandStoryAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\shorthand;

+use Drupal\shorthand\Entity\ShorthandStoryInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\shorthand\Entity\ShorthandStoryInterface $entity */
+    /** @var ShorthandStoryInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/shorthand/src/ShorthandApiV2.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * GuzzleHttp\Client definition.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new ShorthandApi object.
    *
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   Http client service instance.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger interface.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger instance.
-   * @param Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory instance.
    */
   public function __construct(Client $http_client, FileSystemInterface $file_system, MessengerInterface $messenger, LoggerInterface $logger, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/shorthand/src/Plugin/Field/FieldWidget/StorySelectFieldWidget.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Shorthand Api service.
    *
-   * @var \Drupal\shorthand\ShorthandApiInterface
+   * @var ShorthandApiInterface
    */
   protected $shorthandApi;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/shorthand/src/Plugin/Field/FieldWidget/PublishConfigurationSelectFieldWidget.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Shorthand Api service.
    *
-   * @var \Drupal\shorthand\ShorthandApiInterface
+   * @var ShorthandApiInterface
    */
   protected $shorthandApi;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/shorthand/src/Form/ShorthandStorySettingsForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The manages modules.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Shorthand Api service.
    *
-   * @var \Drupal\shorthand\ShorthandApiInterface
+   * @var ShorthandApiInterface
    */
   protected $shorthandApi;

@@ @@
   /**
    * The constructor method.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The manages modules.
-   * @param \Drupal\shorthand\ShorthandApiInterface $shorthandApi
+   * @param ShorthandApiInterface $shorthandApi
    *   The shorthand api connector.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/shorthand/src/Form/ShorthandStoryRevisionRevertTranslationForm.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new ShorthandStoryRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Shorthand story storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager, TimeInterface $time) {
@@ @@
   protected function prepareRevertedRevision(ShorthandStoryInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\shorthand\Entity\ShorthandStoryInterface $default_revision */
+    /** @var ShorthandStoryInterface $default_revision */
     $latest_revision = $this->shorthandStoryStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/shorthand/src/Form/ShorthandStoryRevisionRevertForm.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The Shorthand story revision.
    *
-   * @var \Drupal\shorthand\Entity\ShorthandStoryInterface
+   * @var ShorthandStoryInterface
    */
   protected $revision;

@@ @@
   /**
    * The Shorthand story storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $shorthandStoryStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new ShorthandStoryRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Shorthand story storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, TimeInterface $time) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\shorthand\Entity\ShorthandStoryInterface $revision
+   * @param ShorthandStoryInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\shorthand\Entity\ShorthandStoryInterface
+   * @return ShorthandStoryInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(ShorthandStoryInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/shorthand/src/Form/ShorthandStoryRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\shorthand\Form;

+use Drupal\shorthand\Entity\ShorthandStoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The Shorthand story revision.
    *
-   * @var \Drupal\shorthand\Entity\ShorthandStoryInterface
+   * @var ShorthandStoryInterface
    */
   protected $revision;

@@ @@
   /**
    * The Shorthand story storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $shorthandStoryStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new ShorthandStoryRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection, DateFormatterInterface $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/shorthand/src/Form/ShorthandStoryForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\shorthand\Form;

+use Drupal\shorthand\Entity\ShorthandStory;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The book being displayed.
    *
-   * @var \Drupal\shorthand\Entity\ShorthandStory
+   * @var ShorthandStory
    */
   protected $entity;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Initializes an instance of the Shorthand story.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger interface.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger instance.
-   * @param Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory instance.
    */
   public function __construct(EntityRepositoryInterface $entity_repository,
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\shorthand\Entity\ShorthandStory $entity */
+    /** @var ShorthandStory $entity */
     $form = parent::buildForm($form, $form_state);
     $form['#attached']['library'][] = 'shorthand/shorthandForm';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/shorthand/src/Entity/ShorthandStoryInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\shorthand\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Shorthand story revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/shorthand/src/Entity/ShorthandStory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\shorthand\Entity;

+use Drupal\Core\Archiver\ArchiverInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ @@
       $input_format = filter_default_format();
     }

-    /** @var \Drupal\Core\Archiver\ArchiverInterface $archiver */
+    /** @var ArchiverInterface $archiver */
     $file_system = \Drupal::service('file_system');
     $filepath = $file_system->realpath($file);
     $archiver = \Drupal::service('plugin.manager.archiver')->getInstance(['filepath' => $filepath]);
@@ @@
     // tag with the new local path
     $thumb = $this->thumbnail->value;
     if(empty($thumb) || strpos($thumb, '{Shorthand Local}/') !== false){
-      $assets_path = file_create_url($this->getShorthandStoryFilesStorageUri());
+      $assets_path = \Drupal::service('file_url_generator')->generateAbsoluteString($this->getShorthandStoryFilesStorageUri());
       $thumb = str_replace('{Shorthand Local}/', $assets_path.'/assets/', $thumb);
       $this->thumbnail->value = $thumb;
     }
@@ @@
    *   storage path.
    */
   protected function fixStoryContentPaths($content, $external_assets) {
-    $absolute_assets_path = file_create_url($this->getShorthandStoryFilesStorageUri());
-    $assets_path = file_url_transform_relative($absolute_assets_path);
+    $absolute_assets_path = \Drupal::service('file_url_generator')->generateAbsoluteString($this->getShorthandStoryFilesStorageUri());
+    $assets_path = \Drupal::service('file_url_generator')->transformRelative($absolute_assets_path);
     if (!$external_assets) {
       $content = str_replace('./assets/', $assets_path . '/assets/', $content);
     }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/shorthand/src/Controller/ShorthandStoryController.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Shorthand story controller.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Generates an overview table of older revisions of a Shorthand story .
    *
-   * @param \Drupal\shorthand\Entity\ShorthandStoryInterface $shorthand_story
+   * @param ShorthandStoryInterface $shorthand_story
    *   A Shorthand story  object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/shorthand/shorthand.module:32

    ---------- begin diff ----------
@@ @@
     ($story = \Drupal::routeMatch()->getParameter('shorthand_story')) &&
     ($story instanceof ShorthandStoryInterface)
   ) {
-    $files_url = file_create_url($story->getShorthandStoryFilesStorageUri());
+    $files_url = \Drupal::service('file_url_generator')->generateAbsoluteString($story->getShorthandStoryFilesStorageUri());
     $node_url = $story->toUrl()->setAbsolute()->toString();
     $html_head = $story->get('head')->value;
     if (strpos($html_head, 'amphtml') !== FALSE) {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


 [OK] 16 files have been changed by Rector                                      

