modules/contrib/workspace_moderation/src/WorkspaceModerationListBuilder.php
modules/contrib/workspace_moderation/src/WorkspaceModerationManager.php
modules/contrib/workspace_moderation/src/WorkspaceModerationManagerInterface.php
modules/contrib/workspace_moderation/tests/src/Kernel/WorkspaceModerationIntegrationTest.php
modules/contrib/workspace_moderation/workspace_moderation.module

4 files with changes
====================

1) modules/contrib/workspace_moderation/workspace_moderation.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\workspace_moderation\WorkspaceModerationManagerInterface;
+use Drupal\content_moderation\ModerationInformationInterface;
+use Drupal\workspaces\WorkspaceAssociationInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\workspaces\WorkspaceInterface;
@@ @@
  * Implements hook_entity_preload().
  */
 function workspace_moderation_workspace_update(WorkspaceInterface $workspace) {
-  /** @var \Drupal\workspace_moderation\WorkspaceModerationManagerInterface $workspacesModerationManager */
+  /** @var WorkspaceModerationManagerInterface $workspacesModerationManager */
   $workspacesModerationManager = \Drupal::service('workspaces.manager');

   if ($workspacesModerationManager->isShadowWorkspace($workspace)) {
@@ @@

     $entityType = $entity->getEntityType();

-    /** @var \Drupal\workspace_moderation\WorkspaceModerationManagerInterface $workspaceModerationManager */
+    /** @var WorkspaceModerationManagerInterface $workspaceModerationManager */
     $workspaceModerationManager = \Drupal::service('workspaces.manager');
     if (!$workspaceModerationManager->isEntityTypeSupported($entityType)) {
       return;
@@ @@
       return;
     }

-    /** @var \Drupal\content_moderation\ModerationInformationInterface $content_moderation_info */
+    /** @var ModerationInformationInterface $content_moderation_info */
     $content_moderation_info = \Drupal::service('content_moderation.moderation_information');
     $workflow = $content_moderation_info->getWorkflowForEntity($entity);
     if (!($workflow && $workflow->getTypePlugin()->hasState($entity->moderation_state->value))) {
@@ @@
       return;
     }

-    /** @var \Drupal\workspaces\WorkspaceAssociationInterface $workspaceAssociation */
+    /** @var WorkspaceAssociationInterface $workspaceAssociation */
     $workspaceAssociation = \Drupal::service('workspaces.association');
-    /** @var \Drupal\workspaces\WorkspaceInterface $parentWorkspace */
+    /** @var WorkspaceInterface $parentWorkspace */
     $parentWorkspace = $activeWorkspace->parent->entity;
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());

     $parentRevisions = $workspaceAssociation->getTrackedEntities(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/workspace_moderation/tests/src/Kernel/WorkspaceModerationIntegrationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\workspace_moderation\Kernel;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\node\NodeStorageInterface;
+use Drupal\workspace_moderation\WorkspaceModerationManagerInterface;
+use Drupal\node\NodeInterface;
+use Drupal\user\Entity\User;
+use Drupal\workspaces\WorkspaceInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\node\NodeStorageInterface
+   * @var NodeStorageInterface
    */
   protected $nodeStorage;

@@ @@
   /**
    * The workspaces moderation manager service.
    *
-   * @var \Drupal\workspace_moderation\WorkspaceModerationManagerInterface
+   * @var WorkspaceModerationManagerInterface
    */
   protected $workspaceModerationManager;

@@ @@
   /**
    * The checked node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * The workspace moderator account.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $workspaceModerator;

@@ @@
   /**
    * An account that can see the workspace content.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $workspaceViewer;

@@ @@
     'workspace_moderation',
   ];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = \Drupal::entityTypeManager();
@@ @@
     // core workspace manager.
     $this->workspaceModerationManager->switchToLive();

-    /** @var \Drupal\workspaces\WorkspaceInterface $workspace */
+    /** @var WorkspaceInterface $workspace */
     $workspace = Workspace::load($id);
     $this->workspaceModerationManager->setActiveWorkspace($workspace);
     $this->reloadNode();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/workspace_moderation/src/WorkspaceModerationManager.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The underlying manager service.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspacesManager;

@@ @@
   /**
    * WorkspacesModerationManager constructor.
    *
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager
+   * @param WorkspaceManagerInterface $workspaceManager
    *   The underlying manager service.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    */
   public function __construct(WorkspaceManagerInterface $workspaceManager, AccountInterface $currentUser) {
     $this->workspacesManager = $workspaceManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/workspace_moderation/src/WorkspaceModerationListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\workspace_moderation;

+use Drupal\workspaces\WorkspaceInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\workspaces\WorkspaceListBuilder;

@@ @@
 class WorkspaceModerationListBuilder extends WorkspaceListBuilder {

   /**
-   * @var \Drupal\workspace_moderation\WorkspaceModerationManagerInterface
+   * @var WorkspaceModerationManagerInterface
    */
   protected $workspaceManager;

@@ @@
     $build = EntityListBuilder::render();
     $rows = &$build['table']['#rows'];
     $activeWorkspace = $this->workspaceManager->getActiveWorkspace();
-    /** @var \Drupal\workspaces\WorkspaceInterface $parentWorkspace */
+    /** @var WorkspaceInterface $parentWorkspace */
     $parentWorkspace =
       $this->workspaceManager->isShadowWorkspace($activeWorkspace)
       ? $activeWorkspace->parent->entity : NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

