diff --git a/modules/social_simple_per_node/social_simple_per_node.module b/modules/social_simple_per_node/social_simple_per_node.module
index f431260..7d386aa 100755
--- a/modules/social_simple_per_node/social_simple_per_node.module
+++ b/modules/social_simple_per_node/social_simple_per_node.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Node\NodeInterface;
+use Drupal\node\NodeTypeInterface;
 /**
  * @file
  * Contains social.module..
@@ -53,9 +55,9 @@ function social_simple_per_node_entity_base_field_info(EntityTypeInterface $enti
  * for this node.
  */
 function social_simple_per_node_form_node_form_alter(&$form, FormStateInterface &$form_state) {
-  /** @var \Drupal\Node\NodeInterface $node */
+  /** @var NodeInterface $node */
   $node = $form_state->getFormObject()->getEntity();
-  /** @var \Drupal\node\NodeTypeInterface $node_type */
+  /** @var NodeTypeInterface $node_type */
   $node_type = $node->type->entity;
   $share = $node_type->getThirdPartySetting('social_simple', 'share', 0);
 
diff --git a/social_simple.module b/social_simple.module
index 3b0e0b4..0c5673f 100755
--- a/social_simple.module
+++ b/social_simple.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\node\NodeInterface;
+use Drupal\social_simple\SocialSimpleGenerator;
+use Drupal\Core\Field\BaseFieldDefinition;
 /**
  * @file
  * Contains social.module..
@@ -34,7 +37,7 @@ function social_simple_help($route_name, RouteMatchInterface $route_match) {
 function social_simple_entity_extra_field_info() {
   $extra = [];
 
-  /** @var \Drupal\node\Entity\NodeType $bundle */
+  /** @var NodeType $bundle */
   foreach (NodeType::loadMultiple() as $bundle) {
     if ($bundle->getThirdPartySetting('social_simple', 'share', 0)) {
       $extra['node'][$bundle->Id()]['display']['social_simple_buttons'] = [
@@ -87,18 +90,17 @@ function social_simple_theme_suggestions_social_simple_buttons_alter(array &$sug
  */
 function social_simple_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
   if ($display->getComponent('social_simple_buttons')) {
-    /** @var \Drupal\node\NodeInterface $entity */
-
+    /** @var NodeInterface $entity */
     // Support social simple per node feature.
     if ($entity->hasField('social_share')) {
       if ($entity->social_share->value !== NULL && empty($entity->social_share->value)) {
         return;
       }
     }
-    /** @var \Drupal\social_simple\SocialSimpleGenerator $social_simple_generator */
+    /** @var SocialSimpleGenerator $social_simple_generator */
     $social_simple_generator = \Drupal::service('social_simple.generator');
 
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = $entity->type->entity;
     $share = $node_type->getThirdPartySetting('social_simple', 'share', 0);
     $networks = $node_type->getThirdPartySetting('social_simple', 'networks', []);
@@ -116,7 +118,7 @@ function social_simple_node_view(array &$build, EntityInterface $entity, EntityV
  * Implements hook_form_FORM_ID_alter().
  */
 function social_simple_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\node\NodeTypeInterface $type */
+  /** @var NodeTypeInterface $type */
   $type = $form_state->getFormObject()->getEntity();
 
   $form['social_simple'] = [
@@ -143,7 +145,7 @@ function social_simple_form_node_type_form_alter(&$form, FormStateInterface $for
     ],
   ];
 
-  /** @var \Drupal\social_simple\SocialSimpleGenerator $social_simple_generator */
+  /** @var SocialSimpleGenerator $social_simple_generator */
   $social_simple_generator = \Drupal::service('social_simple.generator');
 
   $form['social_simple']['social_simple_networks'] = [
@@ -161,7 +163,7 @@ function social_simple_form_node_type_form_alter(&$form, FormStateInterface $for
   $options = [];
   $valid_field_type = ['entity_reference'];
   $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $type->id());
-  /** @var \Drupal\Core\Field\BaseFieldDefinition $field */
+  /** @var BaseFieldDefinition $field */
   foreach ($fields as $name => $field) {
     if (!empty($field->getTargetBundle()) && in_array($field->getType(), $valid_field_type)) {
       $options[$name] = $field->getLabel();
diff --git a/src/Plugin/Block/SocialSimpleBlock.php b/src/Plugin/Block/SocialSimpleBlock.php
index ba0e1d9..e09fae5 100644
--- a/src/Plugin/Block/SocialSimpleBlock.php
+++ b/src/Plugin/Block/SocialSimpleBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\social_simple\Plugin\Block;
 
+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -26,28 +28,28 @@ class SocialSimpleBlock extends BlockBase implements ContainerFactoryPluginInter
   /**
    * Drupal\Core\Controller\TitleResolver definition.
    *
-   * @var \Drupal\Core\Controller\TitleResolver
+   * @var TitleResolver
    */
   protected $titleResolver;
 
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Drupal\Core\Routing\CurrentRouteMatch definition.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;
 
   /**
    * The Social Simple Generator.
    *
-   * @var \Drupal\social_simple\SocialSimpleGenerator
+   * @var SocialSimpleGenerator
    */
   protected $socialSimpleGenerator;
 
@@ -60,13 +62,13 @@ class SocialSimpleBlock extends BlockBase implements ContainerFactoryPluginInter
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Controller\TitleResolver $title_resolver
+   * @param TitleResolver $title_resolver
    *   The title resolver service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The current route match.
-   * @param \Drupal\social_simple\SocialSimpleGenerator $social_simple_generator
+   * @param SocialSimpleGenerator $social_simple_generator
    *   The social simple generator service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TitleResolver $title_resolver, RequestStack $request_stack, CurrentRouteMatch $current_route_match, SocialSimpleGenerator $social_simple_generator) {
@@ -179,11 +181,11 @@ class SocialSimpleBlock extends BlockBase implements ContainerFactoryPluginInter
    * {@inheritdoc}
    */
   public function getCacheTags() {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     if ($node = $this->currentRouteMatch->getParameter('node')) {
       return Cache::mergeTags(parent::getCacheTags(), $node->getCacheTags());
     }
-    /** @var \Drupal\taxonomy\TermInterface $taxonomy_term */
+    /** @var TermInterface $taxonomy_term */
     elseif ($taxonomy_term = $this->currentRouteMatch->getParameter('taxonomy_term')) {
       return Cache::mergeTags(parent::getCacheTags(), $taxonomy_term->getCacheTags());
     }
diff --git a/src/SocialNetwork/EntityPrintPdf.php b/src/SocialNetwork/EntityPrintPdf.php
index 93642ad..5979f34 100644
--- a/src/SocialNetwork/EntityPrintPdf.php
+++ b/src/SocialNetwork/EntityPrintPdf.php
@@ -29,23 +29,23 @@ class EntityPrintPdf implements SocialNetworkInterface {
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new Entity Print Pdf object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
diff --git a/src/SocialNetwork/Mail.php b/src/SocialNetwork/Mail.php
index b1907bf..6a4bb3e 100644
--- a/src/SocialNetwork/Mail.php
+++ b/src/SocialNetwork/Mail.php
@@ -23,7 +23,7 @@ class Mail implements SocialNetworkInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -94,7 +94,7 @@ class Mail implements SocialNetworkInterface {
   /**
    * Check if the mail button should use the forward module.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity which will be shared.
    *
    * @return boolean
@@ -104,7 +104,7 @@ class Mail implements SocialNetworkInterface {
     if (!$this->moduleHandler->moduleExists('forward')) {
       return FALSE;
     }
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity_type */
+    /** @var ConfigEntityInterface $entity_type */
     $entity_type = $entity->type->entity;
     if (!$entity_type instanceof ConfigEntityInterface) {
       return FALSE;
diff --git a/src/SocialNetwork/PrintPage.php b/src/SocialNetwork/PrintPage.php
index 0649f60..2749b68 100644
--- a/src/SocialNetwork/PrintPage.php
+++ b/src/SocialNetwork/PrintPage.php
@@ -23,7 +23,7 @@ class PrintPage implements SocialNetworkInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
diff --git a/src/SocialNetwork/SocialNetworkInterface.php b/src/SocialNetwork/SocialNetworkInterface.php
index d7d1f37..6cb7994 100644
--- a/src/SocialNetwork/SocialNetworkInterface.php
+++ b/src/SocialNetwork/SocialNetworkInterface.php
@@ -19,7 +19,7 @@ interface SocialNetworkInterface {
    *   The url to share.
    * @param string $title
    *   The page's title to share.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
    * @param array $additional_options
    *   Additional options to pass as que query parameter to the social link.
diff --git a/src/SocialNetwork/Twitter.php b/src/SocialNetwork/Twitter.php
index 3263bce..7d5cc9a 100644
--- a/src/SocialNetwork/Twitter.php
+++ b/src/SocialNetwork/Twitter.php
@@ -92,7 +92,7 @@ class Twitter implements SocialNetworkInterface {
     if (!$entity instanceof NodeInterface) {
       return $options;
     }
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity_type */
+    /** @var ConfigEntityInterface $entity_type */
     $entity_type = $entity->type->entity;
     if (!$entity_type instanceof ConfigEntityInterface) {
       return $options;
@@ -102,7 +102,7 @@ class Twitter implements SocialNetworkInterface {
     if (!empty($key_value) && $entity->hasField($key_value)) {
       $referenced_entities = $entity->get($key_value)->referencedEntities();
       $labels = [];
-      /** @var \Drupal\Core\Entity\EntityInterface $referenced_entity */
+      /** @var EntityInterface $referenced_entity */
       foreach ($referenced_entities as $referenced_entity) {
         $labels[] = preg_replace('/\s+/', '', $referenced_entity->label());
       }
diff --git a/src/SocialSimpleGenerator.php b/src/SocialSimpleGenerator.php
index a539218..233347a 100644
--- a/src/SocialSimpleGenerator.php
+++ b/src/SocialSimpleGenerator.php
@@ -25,42 +25,42 @@ class SocialSimpleGenerator implements SocialSimpleGeneratorInterface {
   /**
    * Drupal\Core\Controller\TitleResolver definition.
    *
-   * @var \Drupal\Core\Controller\TitleResolver
+   * @var TitleResolver
    */
   protected $titleResolver;
 
   /**
    * Drupal\Core\Routing\CurrentRouteMatch definition.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;
 
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * Drupal\Core\Render\Renderer .
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * Drupal\social_simple\SocialSimpleManagerInterface.
    *
-   * @var \Drupal\social_simple\SocialSimpleManagerInterface
+   * @var SocialSimpleManagerInterface
    */
   protected $socialSimpleManager;
 
@@ -74,17 +74,17 @@ class SocialSimpleGenerator implements SocialSimpleGeneratorInterface {
   /**
    * Constructs a new SocialSimpleGenerator object.
    *
-   * @param \Drupal\Core\Controller\TitleResolver $title_resolver
+   * @param TitleResolver $title_resolver
    *   The title resolver service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The current route match.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Render\Renderer $renderer_service
+   * @param Renderer $renderer_service
    *   The renderer service.
-   * @param \Drupal\social_simple\SocialSimpleManagerInterface $social_simple_manager
+   * @param SocialSimpleManagerInterface $social_simple_manager
    *   The social simple manager.
    */
   public function __construct(TitleResolver $title_resolver, CurrentRouteMatch $current_route_match, RequestStack $request_stack, ConfigFactory $config_factory, Renderer $renderer_service, SocialSimpleManagerInterface $social_simple_manager) {
diff --git a/src/SocialSimpleGeneratorInterface.php b/src/SocialSimpleGeneratorInterface.php
index 789d9e1..348edd3 100644
--- a/src/SocialSimpleGeneratorInterface.php
+++ b/src/SocialSimpleGeneratorInterface.php
@@ -26,7 +26,7 @@ interface SocialSimpleGeneratorInterface {
    *   An array of social network name keyed with network id.
    * @param string $title
    *   The title to use for the share links.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity if provided.
    * @param array $options
    *   Additional options to pass as a query for the url built.
@@ -48,7 +48,7 @@ interface SocialSimpleGeneratorInterface {
    *
    * @param array $networks
    *   An array of social network name keyed with network id.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity if provided.
    * @param array $options
    *   Additional options to pass as a query for the url built.
@@ -68,7 +68,7 @@ interface SocialSimpleGeneratorInterface {
   /**
    * Get the title to share.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity if provided.
    *
    * @return string $title
@@ -79,7 +79,7 @@ interface SocialSimpleGeneratorInterface {
   /**
    * Get the share url.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity if provided.
    *
    * @return string $url
diff --git a/src/SocialSimpleManager.php b/src/SocialSimpleManager.php
index 3ef04fb..a453433 100644
--- a/src/SocialSimpleManager.php
+++ b/src/SocialSimpleManager.php
@@ -20,7 +20,7 @@ class SocialSimpleManager implements SocialSimpleManagerInterface {
   /**
    * The module handler to invoke the alter hook.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -36,14 +36,14 @@ class SocialSimpleManager implements SocialSimpleManagerInterface {
    *
    * Set to NULL if the array needs to be re-calculated.
    *
-   * @var \Drupal\social_simple\SocialNetwork\SocialNetworkInterface[]|null
+   * @var SocialNetworkInterface[]|null
    */
   protected $sortedNetworks;
 
   /**
    * Constructs a \Drupal\Core\Breadcrumb\BreadcrumbManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
diff --git a/src/SocialSimpleManagerInterface.php b/src/SocialSimpleManagerInterface.php
index 5f08655..ae00b75 100644
--- a/src/SocialSimpleManagerInterface.php
+++ b/src/SocialSimpleManagerInterface.php
@@ -12,7 +12,7 @@ interface SocialSimpleManagerInterface {
   /**
    * Adds another social network builder.
    *
-   * @param \Drupal\social_simple\SocialNetwork\SocialNetworkInterface $network
+   * @param SocialNetworkInterface $network
    *   The social network builder to add.
    * @param int $priority
    *   Priority of the social network builder.
@@ -25,7 +25,7 @@ interface SocialSimpleManagerInterface {
    * @param string $network_id
    *   The network id.
    *
-   * @return \Drupal\social_simple\SocialNetwork\SocialNetworkInterface
+   * @return SocialNetworkInterface
    *   The social network service.
    */
   public function get($network_id);
@@ -41,7 +41,7 @@ interface SocialSimpleManagerInterface {
   /**
    * Returns the sorted array of social network objects.
    *
-   * @return \Drupal\social_simple\SocialNetwork\SocialNetworkInterface[]
+   * @return SocialNetworkInterface[]
    *   An array of social network objects keyed by their id.
    */
   public function getSortedNetworks();
diff --git a/tests/src/Functional/TestSocialSimpleTest.php b/tests/src/Functional/TestSocialSimpleTest.php
index d48c1dd..ad70cd4 100644
--- a/tests/src/Functional/TestSocialSimpleTest.php
+++ b/tests/src/Functional/TestSocialSimpleTest.php
@@ -12,7 +12,7 @@ class TestSocialSimpleTest extends TestSocialSimpleTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a super admin.
@@ -57,7 +57,10 @@ class TestSocialSimpleTest extends TestSocialSimpleTestBase {
     $this->setComponentViewDisplay('node.article.default', 'node', 'article', 'default', 'social_simple_buttons');
     $this->drupalGet($bundle_path . '/display');
     $this->assertSession()->pageTextContains('Social simple buttons');
-    $this->assertText('Social simple buttons');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Social simple buttons');
 
     $this->drupalGet('/node/' . $this->article->id());
     $this->assertSession()->pageTextContains('Share on');
diff --git a/tests/src/Functional/TestSocialSimpleTestBase.php b/tests/src/Functional/TestSocialSimpleTestBase.php
index 3c7f573..275120e 100644
--- a/tests/src/Functional/TestSocialSimpleTestBase.php
+++ b/tests/src/Functional/TestSocialSimpleTestBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\social_simple\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ -44,70 +48,70 @@ abstract class TestSocialSimpleTestBase extends BrowserTestBase {
   /**
    * User with admin permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * Advanced  User with permission on social share per node.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $advancedUser;
 
   /**
    * Standard User without permission on social share per node.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $normalUser;
 
   /**
    * Entity view display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @var EntityViewDisplayInterface
    */
   protected $viewDisplay;
 
   /**
    * Entity form display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @var EntityFormDisplayInterface
    */
   protected $formDisplay;
 
   /**
    * A node created.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article;
 
   /**
    * A vocabulary created.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;
 
   /**
    * A term created.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term1;
 
   /**
    * A term created.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term2;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create vocabulary and terms.
