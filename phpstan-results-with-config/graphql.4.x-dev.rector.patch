diff --git a/examples/graphql_composable/src/GraphQL/Response/ArticleResponse.php b/examples/graphql_composable/src/GraphQL/Response/ArticleResponse.php
index a1b354b..cc889be 100644
--- a/examples/graphql_composable/src/GraphQL/Response/ArticleResponse.php
+++ b/examples/graphql_composable/src/GraphQL/Response/ArticleResponse.php
@@ -13,14 +13,14 @@ class ArticleResponse extends Response {
   /**
    * The article to be served.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $article;
 
   /**
    * Sets the content.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $article
+   * @param EntityInterface|null $article
    *   The article to be served.
    */
   public function setArticle(?EntityInterface $article): void {
@@ -30,7 +30,7 @@ class ArticleResponse extends Response {
   /**
    * Gets the article to be served.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The article to be served.
    */
   public function article(): ?EntityInterface {
diff --git a/examples/graphql_composable/src/Plugin/GraphQL/DataProducer/CreateArticle.php b/examples/graphql_composable/src/Plugin/GraphQL/DataProducer/CreateArticle.php
index 8200f5a..4e01c33 100644
--- a/examples/graphql_composable/src/Plugin/GraphQL/DataProducer/CreateArticle.php
+++ b/examples/graphql_composable/src/Plugin/GraphQL/DataProducer/CreateArticle.php
@@ -34,7 +34,7 @@ class CreateArticle extends DataProducerPluginBase implements ContainerFactoryPl
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -59,7 +59,7 @@ class CreateArticle extends DataProducerPluginBase implements ContainerFactoryPl
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, string $plugin_id, array $plugin_definition, AccountInterface $current_user) {
@@ -73,7 +73,7 @@ class CreateArticle extends DataProducerPluginBase implements ContainerFactoryPl
    * @param array $data
    *   The submitted values for the article.
    *
-   * @return \Drupal\graphql_composable\GraphQL\Response\ArticleResponse
+   * @return ArticleResponse
    *   The newly created article.
    *
    * @throws \Exception
diff --git a/examples/graphql_composable/src/Plugin/GraphQL/SchemaExtension/ComposableSchemaExampleExtension.php b/examples/graphql_composable/src/Plugin/GraphQL/SchemaExtension/ComposableSchemaExampleExtension.php
index 66fbf8e..2ba6e0c 100644
--- a/examples/graphql_composable/src/Plugin/GraphQL/SchemaExtension/ComposableSchemaExampleExtension.php
+++ b/examples/graphql_composable/src/Plugin/GraphQL/SchemaExtension/ComposableSchemaExampleExtension.php
@@ -80,7 +80,7 @@ class ComposableSchemaExampleExtension extends SdlSchemaExtensionPluginBase {
   /**
    * Resolves the response type.
    *
-   * @param \Drupal\graphql\GraphQL\Response\ResponseInterface $response
+   * @param ResponseInterface $response
    *   Response object.
    *
    * @return string
diff --git a/examples/graphql_composable/src/Wrappers/Response/ArticleResponse.php b/examples/graphql_composable/src/Wrappers/Response/ArticleResponse.php
index 25cb885..c2d90be 100644
--- a/examples/graphql_composable/src/Wrappers/Response/ArticleResponse.php
+++ b/examples/graphql_composable/src/Wrappers/Response/ArticleResponse.php
@@ -15,14 +15,14 @@ class ArticleResponse extends Response {
   /**
    * The article to be served.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $article;
 
   /**
    * Sets the content.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $article
+   * @param EntityInterface|null $article
    *   The article to be served.
    */
   public function setArticle(?EntityInterface $article): void {
@@ -32,7 +32,7 @@ class ArticleResponse extends Response {
   /**
    * Gets the article to be served.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The article to be served.
    */
   public function article(): ?EntityInterface {
diff --git a/examples/graphql_example/src/Plugin/GraphQL/DataProducer/QueryArticles.php b/examples/graphql_example/src/Plugin/GraphQL/DataProducer/QueryArticles.php
index f110725..d53f241 100644
--- a/examples/graphql_example/src/Plugin/GraphQL/DataProducer/QueryArticles.php
+++ b/examples/graphql_example/src/Plugin/GraphQL/DataProducer/QueryArticles.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql_examples\Plugin\GraphQL\DataProducer;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -35,7 +37,7 @@ class QueryArticles extends DataProducerPluginBase implements ContainerFactoryPl
   const MAX_LIMIT = 100;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -62,7 +64,7 @@ class QueryArticles extends DataProducerPluginBase implements ContainerFactoryPl
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *
    * @codeCoverageIgnore
    */
@@ -79,11 +81,11 @@ class QueryArticles extends DataProducerPluginBase implements ContainerFactoryPl
   /**
    * @param int $offset
    * @param int $limit
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param RefinableCacheableDependencyInterface $metadata
    *
-   * @return \Drupal\graphql_examples\Wrappers\QueryConnection
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return QueryConnection
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function resolve($offset, $limit, RefinableCacheableDependencyInterface $metadata) {
     if ($limit > static::MAX_LIMIT) {
diff --git a/examples/graphql_example/src/Plugin/GraphQL/Schema/ExampleSchema.php b/examples/graphql_example/src/Plugin/GraphQL/Schema/ExampleSchema.php
index b7cfe3d..d1034de 100644
--- a/examples/graphql_example/src/Plugin/GraphQL/Schema/ExampleSchema.php
+++ b/examples/graphql_example/src/Plugin/GraphQL/Schema/ExampleSchema.php
@@ -32,8 +32,8 @@ class ExampleSchema extends SdlSchemaPluginBase {
   }
 
   /**
-   * @param \Drupal\graphql\GraphQL\ResolverRegistry $registry
-   * @param \Drupal\graphql\GraphQL\ResolverBuilder $builder
+   * @param ResolverRegistry $registry
+   * @param ResolverBuilder $builder
    */
   protected function addArticleFields(ResolverRegistry $registry, ResolverBuilder $builder): void {
     $registry->addFieldResolver('Article', 'id',
@@ -61,8 +61,8 @@ class ExampleSchema extends SdlSchemaPluginBase {
   }
 
   /**
-   * @param \Drupal\graphql\GraphQL\ResolverRegistry $registry
-   * @param \Drupal\graphql\GraphQL\ResolverBuilder $builder
+   * @param ResolverRegistry $registry
+   * @param ResolverBuilder $builder
    */
   protected function addQueryFields(ResolverRegistry $registry, ResolverBuilder $builder): void {
     $registry->addFieldResolver('Query', 'article',
@@ -81,8 +81,8 @@ class ExampleSchema extends SdlSchemaPluginBase {
 
   /**
    * @param string $type
-   * @param \Drupal\graphql\GraphQL\ResolverRegistry $registry
-   * @param \Drupal\graphql\GraphQL\ResolverBuilder $builder
+   * @param ResolverRegistry $registry
+   * @param ResolverBuilder $builder
    */
   protected function addConnectionFields($type, ResolverRegistry $registry, ResolverBuilder $builder): void {
     $registry->addFieldResolver($type, 'total',
diff --git a/examples/graphql_example/src/Plugin/GraphQL/SchemaExtension/ExampleSchemaExtension.php b/examples/graphql_example/src/Plugin/GraphQL/SchemaExtension/ExampleSchemaExtension.php
index d7e7026..2162efc 100644
--- a/examples/graphql_example/src/Plugin/GraphQL/SchemaExtension/ExampleSchemaExtension.php
+++ b/examples/graphql_example/src/Plugin/GraphQL/SchemaExtension/ExampleSchemaExtension.php
@@ -27,8 +27,8 @@ class ExampleSchemaExtension extends SdlSchemaExtensionPluginBase {
   }
 
   /**
-   * @param \Drupal\graphql\GraphQL\ResolverRegistryInterface $registry
-   * @param \Drupal\graphql\GraphQL\ResolverBuilder $builder
+   * @param ResolverRegistryInterface $registry
+   * @param ResolverBuilder $builder
    */
   protected function addPageFields(ResolverRegistryInterface $registry, ResolverBuilder $builder): void {
     $registry->addFieldResolver('Page', 'id',
@@ -47,8 +47,8 @@ class ExampleSchemaExtension extends SdlSchemaExtensionPluginBase {
   }
 
   /**
-   * @param \Drupal\graphql\GraphQL\ResolverRegistryInterface $registry
-   * @param \Drupal\graphql\GraphQL\ResolverBuilder $builder
+   * @param ResolverRegistryInterface $registry
+   * @param ResolverBuilder $builder
    */
   protected function addQueryFields(ResolverRegistryInterface $registry, ResolverBuilder $builder): void {
     $registry->addFieldResolver('Query', 'page',
diff --git a/examples/graphql_example/src/Wrappers/QueryConnection.php b/examples/graphql_example/src/Wrappers/QueryConnection.php
index b6b98ba..783d037 100644
--- a/examples/graphql_example/src/Wrappers/QueryConnection.php
+++ b/examples/graphql_example/src/Wrappers/QueryConnection.php
@@ -11,14 +11,14 @@ use GraphQL\Deferred;
 class QueryConnection {
 
   /**
-   * @var \Drupal\Core\Entity\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $query;
 
   /**
    * QueryConnection constructor.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
+   * @param QueryInterface $query
    */
   public function __construct(QueryInterface $query) {
     $this->query = $query;
@@ -35,7 +35,7 @@ class QueryConnection {
   }
 
   /**
-   * @return array|\GraphQL\Deferred
+   * @return array|Deferred
    */
   public function items() {
     $result = $this->query->execute();
diff --git a/graphql.api.php b/graphql.api.php
index a087d5c..cd496a7 100644
--- a/graphql.api.php
+++ b/graphql.api.php
@@ -1,23 +1,24 @@
 <?php
 
+use Drupal\Core\Database\Query\SelectInterface;
+use Drupal\Core\Database\Query\ConditionInterface;
 /**
  * @file
  * Hooks provided by GraphQL module.
  */
-
 /**
  * Alter the query built by the term autocomplete data producer.
  *
  * @param array $args
  *   Input arguments of taxonomy term data producer.
- * @param \Drupal\Core\Database\Query\SelectInterface $query
+ * @param SelectInterface $query
  *   The term autocomplete query.
- * @param \Drupal\Core\Database\Query\ConditionInterface $name_condition_group
+ * @param ConditionInterface $name_condition_group
  *   The condition group matching the term name. This condition group is defined
  *   as OR condition group which allows to cover a match in term name OR in some
  *   other fields.
  */
-function hook_graphql_term_autocomplete_query_alter(array $args, \Drupal\Core\Database\Query\SelectInterface $query, \Drupal\Core\Database\Query\ConditionInterface $name_condition_group): void {
+function hook_graphql_term_autocomplete_query_alter(array $args, SelectInterface $query, ConditionInterface $name_condition_group): void {
   // Custom field on profile entity type of bundle resume has a reference to
   // synonyms field. Extend a query so it matches the string in term names OR in
   // synonyms.
diff --git a/graphql.install b/graphql.install
index dcc9c47..ebc63c3 100644
--- a/graphql.install
+++ b/graphql.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 /**
  * @file
  * Install, update and uninstall functions for the GraphQL module.
@@ -33,7 +34,7 @@ function graphql_requirements(string $phase): array {
  */
 function graphql_uninstall(): void {
   // Remove the config keys set in GraphQLConfigOverrides::loadOverrides().
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+  /** @var ConfigFactoryInterface $configFactory */
   $configFactory = \Drupal::getContainer()->get('config.factory');
   $languageTypes = $configFactory->getEditable('language.types');
   $negotiation = $languageTypes->get('negotiation');
diff --git a/src/Access/ExplorerAccessCheck.php b/src/Access/ExplorerAccessCheck.php
index ed532bd..a32db37 100644
--- a/src/Access/ExplorerAccessCheck.php
+++ b/src/Access/ExplorerAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -15,12 +16,12 @@ class ExplorerAccessCheck implements AccessInterface {
   /**
    * Checks access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The server instance.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, ServerInterface $graphql_server) {
diff --git a/src/Access/QueryAccessCheck.php b/src/Access/QueryAccessCheck.php
index 53d81b4..f2ae854 100644
--- a/src/Access/QueryAccessCheck.php
+++ b/src/Access/QueryAccessCheck.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
+use GraphQL\Server\OperationParams;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -16,14 +18,14 @@ class QueryAccessCheck implements AccessInterface {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * QueryAccessCheck constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(RequestStack $requestStack) {
@@ -33,12 +35,12 @@ class QueryAccessCheck implements AccessInterface {
   /**
    * Checks access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The server instance.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, ServerInterface $graphql_server) {
@@ -63,7 +65,7 @@ class QueryAccessCheck implements AccessInterface {
       // If a query was provided by the user, this is an arbitrary query (it's
       // not a persisted query). Hence, we only grant access if the user has the
       // permission to execute any query.
-      /** @var \GraphQL\Server\OperationParams $operation */
+      /** @var OperationParams $operation */
       if ($operation->getOriginalInput('query')) {
         return AccessResult::allowedIfHasPermission($account, "execute $id arbitrary graphql requests");
       }
diff --git a/src/Access/VoyagerAccessCheck.php b/src/Access/VoyagerAccessCheck.php
index f9217d4..fa2be4f 100644
--- a/src/Access/VoyagerAccessCheck.php
+++ b/src/Access/VoyagerAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -15,12 +16,12 @@ class VoyagerAccessCheck implements AccessInterface {
   /**
    * Checks access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The server instance.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, ServerInterface $graphql_server) {
diff --git a/src/Annotation/DataProducer.php b/src/Annotation/DataProducer.php
index c80a0a8..cdb2c5d 100644
--- a/src/Annotation/DataProducer.php
+++ b/src/Annotation/DataProducer.php
@@ -40,7 +40,7 @@ class DataProducer extends Plugin {
    * @param array $values
    *   The plugin annotation values.
    *
-   * @throws \Doctrine\Common\Annotations\AnnotationException
+   * @throws AnnotationException
    *   In case of missing required annotation values.
    */
   public function __construct(array $values) {
diff --git a/src/Annotation/PersistedQuery.php b/src/Annotation/PersistedQuery.php
index d91cc54..81c9743 100644
--- a/src/Annotation/PersistedQuery.php
+++ b/src/Annotation/PersistedQuery.php
@@ -40,7 +40,7 @@ class PersistedQuery extends Plugin {
    * @param array $values
    *   The plugin annotation values.
    *
-   * @throws \Doctrine\Common\Annotations\AnnotationException
+   * @throws AnnotationException
    *   In case of missing required annotation values.
    */
   public function __construct(array $values) {
diff --git a/src/Annotation/Schema.php b/src/Annotation/Schema.php
index 90dc132..31255d2 100644
--- a/src/Annotation/Schema.php
+++ b/src/Annotation/Schema.php
@@ -40,7 +40,7 @@ class Schema extends Plugin {
    * @param mixed $values
    *   The plugin annotation values.
    *
-   * @throws \Doctrine\Common\Annotations\AnnotationException
+   * @throws AnnotationException
    *   In case of missing required values.
    */
   public function __construct($values) {
diff --git a/src/Annotation/SchemaExtension.php b/src/Annotation/SchemaExtension.php
index c6f4b87..ad33a9b 100644
--- a/src/Annotation/SchemaExtension.php
+++ b/src/Annotation/SchemaExtension.php
@@ -47,7 +47,7 @@ class SchemaExtension extends Plugin {
    * @param mixed $values
    *   The plugin annotation values.
    *
-   * @throws \Doctrine\Common\Annotations\AnnotationException
+   * @throws AnnotationException
    *   In case of missing required values.
    */
   public function __construct($values) {
diff --git a/src/Config/LanguageConfigOverride.php b/src/Config/LanguageConfigOverride.php
index 979b3bf..9bd8eff 100644
--- a/src/Config/LanguageConfigOverride.php
+++ b/src/Config/LanguageConfigOverride.php
@@ -17,23 +17,23 @@ class LanguageConfigOverride implements ConfigFactoryOverrideInterface {
   /**
    * The config storage service.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $baseStorage;
 
   /**
    * The negotiator manager service.
    *
-   * @var \Drupal\language\LanguageNegotiationMethodManager|null
+   * @var LanguageNegotiationMethodManager|null
    */
   protected $negotiatorManager;
 
   /**
    * GraphQLConfigOverrides constructor.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The config storage service.
-   * @param \Drupal\language\LanguageNegotiationMethodManager|null $negotiatorManager
+   * @param LanguageNegotiationMethodManager|null $negotiatorManager
    */
   public function __construct(StorageInterface $storage, LanguageNegotiationMethodManager $negotiatorManager = NULL) {
     $this->baseStorage = $storage;
diff --git a/src/Controller/ExplorerController.php b/src/Controller/ExplorerController.php
index 200fcf5..ab44fa6 100644
--- a/src/Controller/ExplorerController.php
+++ b/src/Controller/ExplorerController.php
@@ -22,21 +22,21 @@ class ExplorerController implements ContainerInjectionInterface {
   /**
    * The URL generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * The introspection service.
    *
-   * @var \Drupal\graphql\GraphQL\Utility\Introspection
+   * @var Introspection
    */
   protected $introspection;
 
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $pluginManager;
 
@@ -56,11 +56,11 @@ class ExplorerController implements ContainerInjectionInterface {
   /**
    * ExplorerController constructor.
    *
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $urlGenerator
+   * @param UrlGeneratorInterface $urlGenerator
    *   The url generator service.
-   * @param \Drupal\graphql\GraphQL\Utility\Introspection $introspection
+   * @param Introspection $introspection
    *   The introspection service.
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $pluginManager
+   * @param SchemaPluginManager $pluginManager
    *   The schema plugin manager.
    *
    * @codeCoverageIgnore
@@ -74,9 +74,9 @@ class ExplorerController implements ContainerInjectionInterface {
   /**
    * Controller for the GraphiQL query builder IDE.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The server.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return array
diff --git a/src/Controller/RequestController.php b/src/Controller/RequestController.php
index 60dcf9e..e04773a 100644
--- a/src/Controller/RequestController.php
+++ b/src/Controller/RequestController.php
@@ -44,12 +44,12 @@ class RequestController implements ContainerInjectionInterface {
   /**
    * Handles graphql requests.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The server instance.
-   * @param \GraphQL\Server\OperationParams|\GraphQL\Server\OperationParams[] $operations
+   * @param OperationParams|OperationParams[] $operations
    *   The graphql operation(s) to execute.
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
+   * @return CacheableJsonResponse
    *   The JSON formatted response.
    *
    * @throws \Exception
@@ -59,17 +59,17 @@ class RequestController implements ContainerInjectionInterface {
       return $this->handleBatch($graphql_server, $operations);
     }
 
-    /** @var \GraphQL\Server\OperationParams $operations */
+    /** @var OperationParams $operations */
     return $this->handleSingle($graphql_server, $operations);
   }
 
   /**
    * Execute a single operation and turn that into a cacheable response.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
-   * @param \GraphQL\Server\OperationParams $operation
+   * @param ServerInterface $server
+   * @param OperationParams $operation
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
+   * @return CacheableJsonResponse
    *
    * @throws \Exception
    */
@@ -83,10 +83,10 @@ class RequestController implements ContainerInjectionInterface {
   /**
    * Execute multiple operations as batch and turn that into cacheable response.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
-   * @param \GraphQL\Server\OperationParams[] $operations
+   * @param ServerInterface $server
+   * @param OperationParams[] $operations
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
+   * @return CacheableJsonResponse
    *
    * @throws \Exception
    */
diff --git a/src/Controller/SubrequestExtractionController.php b/src/Controller/SubrequestExtractionController.php
index 68f2239..07e9bf5 100644
--- a/src/Controller/SubrequestExtractionController.php
+++ b/src/Controller/SubrequestExtractionController.php
@@ -18,14 +18,14 @@ class SubrequestExtractionController extends ControllerBase {
   /**
    * The symfony request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -45,11 +45,11 @@ class SubrequestExtractionController extends ControllerBase {
   /**
    * SubrequestExtractionController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    *
    * @codeCoverageIgnore
@@ -63,7 +63,7 @@ class SubrequestExtractionController extends ControllerBase {
   /**
    * Extracts the sub-request callback response.
    *
-   * @return \Drupal\graphql\SubRequestResponse
+   * @return SubRequestResponse
    *   The sub-request response object.
    */
   public function extract() {
diff --git a/src/Controller/ValidationController.php b/src/Controller/ValidationController.php
index 00f90bf..3081cf8 100644
--- a/src/Controller/ValidationController.php
+++ b/src/Controller/ValidationController.php
@@ -17,7 +17,7 @@ class ValidationController implements ContainerInjectionInterface {
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\GraphQL\ValidatorInterface
+   * @var ValidatorInterface
    */
   protected $validator;
 
@@ -33,7 +33,7 @@ class ValidationController implements ContainerInjectionInterface {
   /**
    * ValidateResolverController constructor.
    *
-   * @param \Drupal\graphql\GraphQL\ValidatorInterface $validator
+   * @param ValidatorInterface $validator
    *   The GraphQL validator.
    */
   public function __construct(ValidatorInterface $validator) {
@@ -43,7 +43,7 @@ class ValidationController implements ContainerInjectionInterface {
   /**
    * Controller for the GraphiQL query builder IDE.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The GraphQL server entity.
    *
    * @return array
diff --git a/src/Controller/VoyagerController.php b/src/Controller/VoyagerController.php
index cde9816..d6204dd 100644
--- a/src/Controller/VoyagerController.php
+++ b/src/Controller/VoyagerController.php
@@ -16,7 +16,7 @@ class VoyagerController implements ContainerInjectionInterface {
   /**
    * The introspection service.
    *
-   * @var \Drupal\graphql\GraphQL\Utility\Introspection
+   * @var Introspection
    */
   protected $introspection;
 
@@ -32,7 +32,7 @@ class VoyagerController implements ContainerInjectionInterface {
   /**
    * VoyagerController constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Utility\Introspection $introspection
+   * @param Introspection $introspection
    *   The GraphQL introspection service.
    *
    * @codeCoverageIgnore
@@ -44,7 +44,7 @@ class VoyagerController implements ContainerInjectionInterface {
   /**
    * Display for the GraphQL Voyager visualization API.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The server.
    *
    * @return array
diff --git a/src/Entity/Server.php b/src/Entity/Server.php
index 39449bb..0f44937 100644
--- a/src/Entity/Server.php
+++ b/src/Entity/Server.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\graphql\Entity;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\graphql\Plugin\SchemaPluginManager;
+use Drupal\graphql\Plugin\PersistedQueryPluginManager;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ -227,15 +230,15 @@ class Server extends ConfigEntityBase implements ServerInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function configuration() {
     $params = \Drupal::getContainer()->getParameter('graphql.config');
-    /** @var \Drupal\graphql\Plugin\SchemaPluginManager $manager */
+    /** @var SchemaPluginManager $manager */
     $manager = \Drupal::service('plugin.manager.graphql.schema');
     $schema = $this->get('schema');
 
-    /** @var \Drupal\graphql\Plugin\SchemaPluginInterface $plugin */
+    /** @var SchemaPluginInterface $plugin */
     $plugin = $manager->createInstance($schema);
     if ($plugin instanceof ConfigurableInterface && $config = $this->get('schema_configuration')) {
       $plugin->setConfiguration($config[$schema] ?? []);
@@ -306,7 +309,7 @@ class Server extends ConfigEntityBase implements ServerInterface {
    *
    * @endcode
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginInterface $schema
+   * @param SchemaPluginInterface $schema
    *   The schema plugin instance.
    * @param array $config
    *
@@ -340,7 +343,7 @@ class Server extends ConfigEntityBase implements ServerInterface {
    * Fields that don't explicitly declare a field resolver will use this one
    * as a fallback.
    *
-   * @param \Drupal\graphql\GraphQL\ResolverRegistryInterface $registry
+   * @param ResolverRegistryInterface $registry
    *   The resolver registry.
    *
    * @return null|callable
@@ -437,7 +440,7 @@ class Server extends ConfigEntityBase implements ServerInterface {
       return $this->persisted_query_instances;
     }
 
-    /** @var \Drupal\graphql\Plugin\PersistedQueryPluginManager $plugin_manager */
+    /** @var PersistedQueryPluginManager $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.graphql.persisted_query');
     $definitions = $plugin_manager->getDefinitions();
     $persisted_queries_settings = $this->get('persisted_queries_settings');
diff --git a/src/Entity/ServerInterface.php b/src/Entity/ServerInterface.php
index 5ad8edc..b7ebcef 100644
--- a/src/Entity/ServerInterface.php
+++ b/src/Entity/ServerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\Entity;
 
+use Drupal\graphql\GraphQL\Execution\ExecutionResult;
+use GraphQL\Server\ServerConfig;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\graphql\Plugin\PersistedQueryPluginInterface;
 use GraphQL\Server\OperationParams;
@@ -14,25 +16,25 @@ interface ServerInterface extends ConfigEntityInterface {
   /**
    * Execute an operation on this server.
    *
-   * @param \GraphQL\Server\OperationParams $operation
+   * @param OperationParams $operation
    *
-   * @return \Drupal\graphql\GraphQL\Execution\ExecutionResult
+   * @return ExecutionResult
    */
   public function executeOperation(OperationParams $operation);
 
   /**
    * Execute multiple operations as batch on this server.
    *
-   * @param \GraphQL\Server\OperationParams[] $operations
+   * @param OperationParams[] $operations
    *
-   * @return \Drupal\graphql\GraphQL\Execution\ExecutionResult[]
+   * @return ExecutionResult[]
    */
   public function executeBatch(array $operations);
 
   /**
    * Retrieves the server configuration.
    *
-   * @return \GraphQL\Server\ServerConfig
+   * @return ServerConfig
    *   The server configuration.
    */
   public function configuration();
@@ -40,7 +42,7 @@ interface ServerInterface extends ConfigEntityInterface {
   /**
    * Adds a Persisted Query plugin instance to the persisted queries set.
    *
-   * @param \Drupal\graphql\Plugin\PersistedQueryPluginInterface $queryPlugin
+   * @param PersistedQueryPluginInterface $queryPlugin
    */
   public function addPersistedQueryInstance(PersistedQueryPluginInterface $queryPlugin);
 
@@ -60,14 +62,14 @@ interface ServerInterface extends ConfigEntityInterface {
   /**
    * Returns the current persisted queries set.
    *
-   * @return \Drupal\graphql\Plugin\PersistedQueryPluginInterface[]
+   * @return PersistedQueryPluginInterface[]
    */
   public function getPersistedQueryInstances();
 
   /**
    * Returns the current persisted queries set, sorted by the plugins weight.
    *
-   * @return \Drupal\graphql\Plugin\PersistedQueryPluginInterface[]
+   * @return PersistedQueryPluginInterface[]
    */
   public function getSortedPersistedQueryInstances();
 
diff --git a/src/Event/OperationEvent.php b/src/Event/OperationEvent.php
index f51164b..3784755 100644
--- a/src/Event/OperationEvent.php
+++ b/src/Event/OperationEvent.php
@@ -28,22 +28,22 @@ class OperationEvent extends Event {
   /**
    * Result of the query execution.
    *
-   * @var \GraphQL\Executor\ExecutionResult
+   * @var ExecutionResult
    */
   protected $result;
 
   /**
    * Resolver context used for the query.
    *
-   * @var \Drupal\graphql\GraphQL\Execution\ResolveContext
+   * @var ResolveContext
    */
   protected $context;
 
   /**
    * OperationEvent constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Executor\ExecutionResult $result
+   * @param ResolveContext $context
+   * @param ExecutionResult $result
    */
   public function __construct(ResolveContext $context, ExecutionResult $result = NULL) {
     $this->context = $context;
@@ -53,7 +53,7 @@ class OperationEvent extends Event {
   /**
    * Returns the execution result.
    *
-   * @return \GraphQL\Executor\ExecutionResult
+   * @return ExecutionResult
    */
   public function getResult() {
     return $this->result;
@@ -62,7 +62,7 @@ class OperationEvent extends Event {
   /**
    * Returns the resolver context.
    *
-   * @return \Drupal\graphql\GraphQL\Execution\ResolveContext
+   * @return ResolveContext
    */
   public function getContext() {
     return $this->context;
diff --git a/src/EventSubscriber/CurrentLanguageResetTrait.php b/src/EventSubscriber/CurrentLanguageResetTrait.php
index f0f2e56..8856d2f 100644
--- a/src/EventSubscriber/CurrentLanguageResetTrait.php
+++ b/src/EventSubscriber/CurrentLanguageResetTrait.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\graphql\EventSubscriber;
 
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\language\LanguageNegotiatorInterface;
+use Drupal\Core\StringTranslation\Translator\TranslatorInterface;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\language\ConfigurableLanguageManagerInterface;
 
 /**
@@ -12,28 +16,28 @@ trait CurrentLanguageResetTrait {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The language negotiator.
    *
-   * @var \Drupal\language\LanguageNegotiatorInterface|null
+   * @var LanguageNegotiatorInterface|null
    */
   protected $languageNegotiator;
 
   /**
    * The translator.
    *
-   * @var \Drupal\Core\StringTranslation\Translator\TranslatorInterface
+   * @var TranslatorInterface
    */
   protected $translator;
 
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
diff --git a/src/EventSubscriber/OperationSubscriber.php b/src/EventSubscriber/OperationSubscriber.php
index a79cd94..ecb6bf9 100644
--- a/src/EventSubscriber/OperationSubscriber.php
+++ b/src/EventSubscriber/OperationSubscriber.php
@@ -21,18 +21,18 @@ class OperationSubscriber implements EventSubscriberInterface {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a OperationSubscriber object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
-   * @param \Drupal\Core\StringTranslation\Translator\TranslatorInterface $translator
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
-   * @param \Drupal\language\LanguageNegotiatorInterface $languageNegotiator
+   * @param ModuleHandlerInterface $moduleHandler
+   * @param LanguageManagerInterface $languageManager
+   * @param TranslatorInterface $translator
+   * @param AccountInterface $currentUser
+   * @param LanguageNegotiatorInterface $languageNegotiator
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, LanguageManagerInterface $languageManager, TranslatorInterface $translator, AccountInterface $currentUser, LanguageNegotiatorInterface $languageNegotiator = NULL) {
     $this->moduleHandler = $moduleHandler;
@@ -45,7 +45,7 @@ class OperationSubscriber implements EventSubscriberInterface {
   /**
    * Handle operation start events.
    *
-   * @param \Drupal\graphql\Event\OperationEvent $event
+   * @param OperationEvent $event
    *   The kernel event object.
    */
   public function onBeforeOperation(OperationEvent $event): void {
@@ -59,7 +59,7 @@ class OperationSubscriber implements EventSubscriberInterface {
   /**
    * Handle operation end events.
    *
-   * @param \Drupal\graphql\Event\OperationEvent $event
+   * @param OperationEvent $event
    *   The kernel event object.
    */
   public function onAfterOperation(OperationEvent $event): void {
diff --git a/src/EventSubscriber/SubrequestSubscriber.php b/src/EventSubscriber/SubrequestSubscriber.php
index 7466a4a..5b60c80 100644
--- a/src/EventSubscriber/SubrequestSubscriber.php
+++ b/src/EventSubscriber/SubrequestSubscriber.php
@@ -21,10 +21,10 @@ class SubrequestSubscriber implements EventSubscriberInterface {
   /**
    * Constructs a SubrequestSubscriber object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
-   * @param \Drupal\Core\StringTranslation\Translator\TranslatorInterface $translator
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
-   * @param \Drupal\language\LanguageNegotiatorInterface $languageNegotiator
+   * @param LanguageManagerInterface $languageManager
+   * @param TranslatorInterface $translator
+   * @param AccountInterface $currentUser
+   * @param LanguageNegotiatorInterface $languageNegotiator
    */
   public function __construct(LanguageManagerInterface $languageManager, TranslatorInterface $translator, AccountInterface $currentUser, LanguageNegotiatorInterface $languageNegotiator = NULL) {
     $this->languageManager = $languageManager;
@@ -36,7 +36,7 @@ class SubrequestSubscriber implements EventSubscriberInterface {
   /**
    * Handle kernel request events.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The kernel event object.
    */
   public function onKernelRequest(RequestEvent $event): void {
@@ -52,7 +52,7 @@ class SubrequestSubscriber implements EventSubscriberInterface {
   /**
    * Handle kernel request finished events.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FinishRequestEvent $event
+   * @param FinishRequestEvent $event
    *   The kernel event object.
    */
   public function onKernelRequestFinished(FinishRequestEvent $event): void {
diff --git a/src/Form/PersistedQueriesForm.php b/src/Form/PersistedQueriesForm.php
index 8927ec4..6dd248e 100644
--- a/src/Form/PersistedQueriesForm.php
+++ b/src/Form/PersistedQueriesForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\Form;
 
+use Drupal\graphql\Entity\Server;
+use Drupal\graphql\Plugin\PersistedQueryPluginInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,21 +20,21 @@ class PersistedQueriesForm extends EntityForm {
   /**
    * Plugin manager for persisted query plugins.
    *
-   * @var \Drupal\graphql\Plugin\PersistedQueryPluginManager
+   * @var PersistedQueryPluginManager
    */
   protected $persistedQueryPluginManager;
 
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\graphql\Entity\Server
+   * @var Server
    */
   protected $entity;
 
   /**
    * PersistedQueriesForm constructor.
    *
-   * @param \Drupal\graphql\Plugin\PersistedQueryPluginManager $persistedQueryPluginManager
+   * @param PersistedQueryPluginManager $persistedQueryPluginManager
    */
   public function __construct(PersistedQueryPluginManager $persistedQueryPluginManager) {
     $this->persistedQueryPluginManager = $persistedQueryPluginManager;
@@ -60,7 +62,7 @@ class PersistedQueriesForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state): array {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\graphql\Plugin\PersistedQueryPluginInterface[] $plugins */
+    /** @var PersistedQueryPluginInterface[] $plugins */
     $plugins = $this->entity->getPersistedQueryInstances();
     $all_plugins = $this->getAllPersistedQueryPlugins();
     $form['#tree'] = TRUE;
@@ -195,7 +197,7 @@ class PersistedQueriesForm extends EntityForm {
   /**
    * Returns an array with all the available persisted query plugins.
    *
-   * @return \Drupal\graphql\Plugin\PersistedQueryPluginInterface[]
+   * @return PersistedQueryPluginInterface[]
    */
   protected function getAllPersistedQueryPlugins() {
     $plugins = [];
diff --git a/src/Form/ServerForm.php b/src/Form/ServerForm.php
index c1b747e..e9da26e 100644
--- a/src/Form/ServerForm.php
+++ b/src/Form/ServerForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\graphql\Form;
 
+use Drupal\graphql\Entity\ServerInterface;
+use Drupal\graphql\Plugin\SchemaPluginInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Ajax\AjaxResponse;
@@ -28,23 +31,23 @@ class ServerForm extends EntityForm {
   /**
    * The request context.
    *
-   * @var \Drupal\Core\Routing\RequestContext
+   * @var RequestContext
    */
   protected $requestContext;
 
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;
 
   /**
    * ServerForm constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The schema plugin manager.
-   * @param \Drupal\Core\Routing\RequestContext $requestContext
+   * @param RequestContext $requestContext
    *   The request context.
    *
    * @codeCoverageIgnore
@@ -72,7 +75,7 @@ class ServerForm extends EntityForm {
    * @param array $form
    *   The form array.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function ajaxSchemaConfigurationForm(array $form) {
@@ -87,7 +90,7 @@ class ServerForm extends EntityForm {
    */
   public function form(array $form, FormStateInterface $formState): array {
     $form = parent::form($form, $formState);
-    /** @var \Drupal\graphql\Entity\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->entity;
     $schemas = array_map(function ($definition) {
       return $definition['name'] ?? $definition['id'];
@@ -148,7 +151,7 @@ class ServerForm extends EntityForm {
       '#tree' => TRUE,
     ];
 
-    /** @var \Drupal\graphql\Plugin\SchemaPluginInterface $instance */
+    /** @var SchemaPluginInterface $instance */
     $instance = $schema ? $this->schemaManager->createInstance($schema) : NULL;
     if ($instance instanceof PluginFormInterface && $instance instanceof ConfigurableInterface) {
       $instance->setConfiguration($server->get('schema_configuration')[$schema] ?? []);
@@ -246,7 +249,7 @@ class ServerForm extends EntityForm {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function validateForm(array &$form, FormStateInterface $formState): void {
     $endpoint = &$formState->getValue('endpoint');
@@ -262,7 +265,7 @@ class ServerForm extends EntityForm {
     }
 
     $schema = $formState->getValue('schema');
-    /** @var \Drupal\graphql\Plugin\SchemaPluginInterface $instance */
+    /** @var SchemaPluginInterface $instance */
     $instance = $this->schemaManager->createInstance($schema);
     if (!empty($form['schema_configuration'][$schema]) && $instance instanceof PluginFormInterface && $instance instanceof ConfigurableInterface) {
       $state = SubformState::createForSubform($form['schema_configuration'][$schema], $form, $formState);
@@ -280,7 +283,7 @@ class ServerForm extends EntityForm {
     parent::submitForm($form, $formState);
 
     $schema = $formState->getValue('schema');
-    /** @var \Drupal\graphql\Plugin\SchemaPluginInterface $instance */
+    /** @var SchemaPluginInterface $instance */
     $instance = $this->schemaManager->createInstance($schema);
     if ($instance instanceof PluginFormInterface && $instance instanceof ConfigurableInterface) {
       $state = SubformState::createForSubform($form['schema_configuration'][$schema], $form, $formState);
@@ -291,7 +294,7 @@ class ServerForm extends EntityForm {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function save(array $form, FormStateInterface $formState) {
     $save_result = parent::save($form, $formState);
diff --git a/src/GraphQL/Buffers/EntityBuffer.php b/src/GraphQL/Buffers/EntityBuffer.php
index 198bc2a..5012d62 100644
--- a/src/GraphQL/Buffers/EntityBuffer.php
+++ b/src/GraphQL/Buffers/EntityBuffer.php
@@ -12,14 +12,14 @@ class EntityBuffer extends BufferBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * EntityBuffer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/src/GraphQL/Buffers/EntityRevisionBuffer.php b/src/GraphQL/Buffers/EntityRevisionBuffer.php
index 1e93572..02efb37 100644
--- a/src/GraphQL/Buffers/EntityRevisionBuffer.php
+++ b/src/GraphQL/Buffers/EntityRevisionBuffer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\GraphQL\Buffers;
 
+use Drupal\Core\Entity\RevisionableStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 
 /**
@@ -12,14 +13,14 @@ class EntityRevisionBuffer extends BufferBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * EntityBuffer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ -66,7 +67,7 @@ class EntityRevisionBuffer extends BufferBase {
     $vids = array_values(array_unique($vids));
 
     // Load the buffered entities.
-    /** @var \Drupal\Core\Entity\RevisionableStorageInterface $storage */
+    /** @var RevisionableStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($type);
     $entities = $storage->loadMultipleRevisions($vids);
 
diff --git a/src/GraphQL/Buffers/EntityUuidBuffer.php b/src/GraphQL/Buffers/EntityUuidBuffer.php
index ae78e7e..702784d 100644
--- a/src/GraphQL/Buffers/EntityUuidBuffer.php
+++ b/src/GraphQL/Buffers/EntityUuidBuffer.php
@@ -14,14 +14,14 @@ class EntityUuidBuffer extends BufferBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * EntityBuffer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/src/GraphQL/Execution/Executor.php b/src/GraphQL/Execution/Executor.php
index 110c946..131de11 100644
--- a/src/GraphQL/Execution/Executor.php
+++ b/src/GraphQL/Execution/Executor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\GraphQL\Execution;
 
+use Drupal\graphql\Plugin\SchemaPluginManager;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -32,56 +33,56 @@ class Executor implements ExecutorImplementation {
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $pluginManager;
 
   /**
    * The cache backend for caching query results.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
   /**
    * The cache contexts manager service.
    *
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager
+   * @var CacheContextsManager
    */
   protected $contextsManager;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * The adapter for promises.
    *
-   * @var \GraphQL\Executor\Promise\PromiseAdapter
+   * @var PromiseAdapter
    */
   protected $adapter;
 
   /**
    * Represents the GraphQL schema document.
    *
-   * @var \GraphQL\Language\AST\DocumentNode
+   * @var DocumentNode
    */
   protected $document;
 
   /**
    * The context to pass down during field resolving.
    *
-   * @var \Drupal\graphql\GraphQL\Execution\ResolveContext
+   * @var ResolveContext
    */
   protected $context;
 
@@ -102,7 +103,7 @@ class Executor implements ExecutorImplementation {
   /**
    * The parsed GraphQL schema.
    *
-   * @var \GraphQL\Type\Schema
+   * @var Schema
    */
   protected $schema;
 
@@ -123,18 +124,18 @@ class Executor implements ExecutorImplementation {
   /**
    * Executor constructor.
    *
-   * @param \Drupal\Core\Cache\Context\CacheContextsManager $contextsManager
+   * @param CacheContextsManager $contextsManager
    *   The cache contexts manager service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend for caching query results.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Type\Schema $schema
-   * @param \GraphQL\Language\AST\DocumentNode $document
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param PromiseAdapter $adapter
+   * @param Schema $schema
+   * @param DocumentNode $document
+   * @param ResolveContext $context
    * @param mixed $root
    * @param mixed $variables
    * @param string $operation
@@ -172,11 +173,11 @@ class Executor implements ExecutorImplementation {
   /**
    * Constructs an object from a services container.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Type\Schema $schema
-   * @param \GraphQL\Language\AST\DocumentNode $document
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ContainerInterface $container
+   * @param PromiseAdapter $adapter
+   * @param Schema $schema
+   * @param DocumentNode $document
+   * @param ResolveContext $context
    * @param mixed $root
    * @param mixed $variables
    * @param string $operation
@@ -237,7 +238,7 @@ class Executor implements ExecutorImplementation {
    *
    * @param string $prefix
    *
-   * @return \GraphQL\Executor\Promise\Promise
+   * @return Promise
    */
   protected function doExecuteCached($prefix) {
     if ($result = $this->cacheRead($prefix)) {
@@ -262,7 +263,7 @@ class Executor implements ExecutorImplementation {
   /**
    * Get query results on a cache miss.
    *
-   * @return \GraphQL\Executor\Promise\Promise
+   * @return Promise
    */
   protected function doExecuteUncached() {
     $executor = ReferenceExecutor::create(
@@ -292,7 +293,7 @@ class Executor implements ExecutorImplementation {
   /**
    * Logs unsafe errors if any.
    *
-   * @param \GraphQL\Server\OperationParams $operation
+   * @param OperationParams $operation
    * @param \Drupal\graphql\GraphQL\Execution\ExecutionResult $result
    */
   protected function logUnsafeErrors(OperationParams $operation, ExecutionResult $result): void {
diff --git a/src/GraphQL/Execution/ExecutorFactory.php b/src/GraphQL/Execution/ExecutorFactory.php
index 7e9e4d0..4144966 100644
--- a/src/GraphQL/Execution/ExecutorFactory.php
+++ b/src/GraphQL/Execution/ExecutorFactory.php
@@ -15,14 +15,14 @@ class ExecutorFactory {
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
    * ExecutorFactory constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    */
   public function __construct(ContainerInterface $container) {
     $this->container = $container;
@@ -31,16 +31,16 @@ class ExecutorFactory {
   /**
    * Factory method to make a new executor.
    *
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Type\Schema $schema
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param PromiseAdapter $adapter
+   * @param Schema $schema
+   * @param DocumentNode $document
    * @param mixed $root
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    * @param mixed $variables
    * @param string $operation
    * @param callable $resolver
    *
-   * @return \Drupal\graphql\GraphQL\Execution\Executor
+   * @return Executor
    */
   public function create(
     PromiseAdapter $adapter,
diff --git a/src/GraphQL/Execution/FieldContext.php b/src/GraphQL/Execution/FieldContext.php
index b69e117..cb50d1c 100644
--- a/src/GraphQL/Execution/FieldContext.php
+++ b/src/GraphQL/Execution/FieldContext.php
@@ -15,22 +15,22 @@ class FieldContext implements RefinableCacheableDependencyInterface {
   /**
    * The context that has been passed down.
    *
-   * @var \Drupal\graphql\GraphQL\Execution\ResolveContext
+   * @var ResolveContext
    */
   protected $context;
 
   /**
    * Schema type information of the current field.
    *
-   * @var \GraphQL\Type\Definition\ResolveInfo
+   * @var ResolveInfo
    */
   protected $info;
 
   /**
    * FieldContext constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
    */
   public function __construct(ResolveContext $context, ResolveInfo $info) {
     $this->addCacheContexts(['user.permissions']);
diff --git a/src/GraphQL/Execution/ResolveContext.php b/src/GraphQL/Execution/ResolveContext.php
index e03f973..97864b8 100644
--- a/src/GraphQL/Execution/ResolveContext.php
+++ b/src/GraphQL/Execution/ResolveContext.php
@@ -18,7 +18,7 @@ class ResolveContext implements RefinableCacheableDependencyInterface {
   /**
    * The GraphQL server configuration.
    *
-   * @var \Drupal\graphql\Entity\ServerInterface
+   * @var ServerInterface
    */
   protected $server;
 
@@ -39,14 +39,14 @@ class ResolveContext implements RefinableCacheableDependencyInterface {
   /**
    * The operation parameters to perform.
    *
-   * @var \GraphQL\Server\OperationParams
+   * @var OperationParams
    */
   protected $operation;
 
   /**
    * The parsed schema document.
    *
-   * @var \GraphQL\Language\AST\DocumentNode
+   * @var DocumentNode
    */
   protected $document;
 
@@ -67,9 +67,9 @@ class ResolveContext implements RefinableCacheableDependencyInterface {
   /**
    * ResolveContext constructor.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
-   * @param \GraphQL\Server\OperationParams $operation
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param ServerInterface $server
+   * @param OperationParams $operation
+   * @param DocumentNode $document
    * @param string $type
    * @param array $config
    */
@@ -92,7 +92,7 @@ class ResolveContext implements RefinableCacheableDependencyInterface {
   /**
    * Returns the GraphQL server config entity.
    *
-   * @return \Drupal\graphql\Entity\ServerInterface
+   * @return ServerInterface
    */
   public function getServer() {
     return $this->server;
@@ -101,7 +101,7 @@ class ResolveContext implements RefinableCacheableDependencyInterface {
   /**
    * Returns the current operation parameters.
    *
-   * @return \GraphQL\Server\OperationParams
+   * @return OperationParams
    */
   public function getOperation() {
     return $this->operation;
@@ -110,7 +110,7 @@ class ResolveContext implements RefinableCacheableDependencyInterface {
   /**
    * Returns the parsed GraphQL schema.
    *
-   * @return \GraphQL\Language\AST\DocumentNode
+   * @return DocumentNode
    */
   public function getDocument() {
     return $this->document;
@@ -152,7 +152,7 @@ class ResolveContext implements RefinableCacheableDependencyInterface {
    * Allows field resolvers to set contextual values which can be inherited by
    * their descendants.
    *
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    * @param string $name
    *   The name of the context.
@@ -173,7 +173,7 @@ class ResolveContext implements RefinableCacheableDependencyInterface {
    *
    * Allows field resolvers to inherit contextual values from their ancestors.
    *
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    * @param string $name
    *   The name of the context.
@@ -201,7 +201,7 @@ class ResolveContext implements RefinableCacheableDependencyInterface {
    *
    * Also checks ancestors of the field.
    *
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    * @param string $name
    *   The name of the context.
diff --git a/src/GraphQL/Resolver/Composite.php b/src/GraphQL/Resolver/Composite.php
index d727258..bfb746d 100644
--- a/src/GraphQL/Resolver/Composite.php
+++ b/src/GraphQL/Resolver/Composite.php
@@ -32,7 +32,7 @@ class Composite implements ResolverInterface {
   /**
    * Add one more producer.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $resolver
+   * @param ResolverInterface $resolver
    *   DataProducerProxy object.
    */
   public function add(ResolverInterface $resolver): void {
diff --git a/src/GraphQL/Resolver/Condition.php b/src/GraphQL/Resolver/Condition.php
index b86984f..48ab935 100644
--- a/src/GraphQL/Resolver/Condition.php
+++ b/src/GraphQL/Resolver/Condition.php
@@ -53,7 +53,7 @@ class Condition implements ResolverInterface {
       }
 
       if ((bool) $condition) {
-        /** @var \Drupal\graphql\GraphQL\Resolver\ResolverInterface|null $resolver */
+        /** @var ResolverInterface|null $resolver */
         return $resolver ? $resolver->resolve($value, $args, $context, $info, $field) : $condition;
       }
     }
diff --git a/src/GraphQL/Resolver/DefaultValue.php b/src/GraphQL/Resolver/DefaultValue.php
index ce3c1d8..753b236 100644
--- a/src/GraphQL/Resolver/DefaultValue.php
+++ b/src/GraphQL/Resolver/DefaultValue.php
@@ -18,23 +18,23 @@ class DefaultValue implements ResolverInterface {
   /**
    * The initial value.
    *
-   * @var \Drupal\graphql\GraphQL\Resolver\ResolverInterface
+   * @var ResolverInterface
    */
   protected $value;
 
   /**
    * The fallback value in case the initial value resolves to NULL.
    *
-   * @var \Drupal\graphql\GraphQL\Resolver\ResolverInterface
+   * @var ResolverInterface
    */
   protected $default;
 
   /**
    * DefaultValue constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $value
+   * @param ResolverInterface $value
    *   The initial value to check.
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $default
+   * @param ResolverInterface $default
    *   The fallback value returned if the initial one resolves to NULL.
    */
   public function __construct(ResolverInterface $value, ResolverInterface $default) {
diff --git a/src/GraphQL/Resolver/Map.php b/src/GraphQL/Resolver/Map.php
index 2f13c8e..c0e5aa4 100644
--- a/src/GraphQL/Resolver/Map.php
+++ b/src/GraphQL/Resolver/Map.php
@@ -21,7 +21,7 @@ class Map implements ResolverInterface {
   /**
    * Map constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $resolver
+   * @param ResolverInterface $resolver
    */
   public function __construct(ResolverInterface $resolver) {
     $this->resolver = $resolver;
diff --git a/src/GraphQL/Resolver/Path.php b/src/GraphQL/Resolver/Path.php
index 3405f05..aeec4ac 100644
--- a/src/GraphQL/Resolver/Path.php
+++ b/src/GraphQL/Resolver/Path.php
@@ -25,7 +25,7 @@ class Path implements ResolverInterface {
   /**
    * Name of the context.
    *
-   * @var string|\Drupal\Core\TypedData\DataDefinitionInterface
+   * @var string|DataDefinitionInterface
    */
   protected $type;
 
@@ -48,7 +48,7 @@ class Path implements ResolverInterface {
    *
    * @param string $type
    * @param mixed $path
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface|null $value
+   * @param ResolverInterface|null $value
    */
   public function __construct($type, $path, ResolverInterface $value = NULL) {
     $this->type = $type;
diff --git a/src/GraphQL/Resolver/ResolverInterface.php b/src/GraphQL/Resolver/ResolverInterface.php
index 0b24fad..c8da276 100644
--- a/src/GraphQL/Resolver/ResolverInterface.php
+++ b/src/GraphQL/Resolver/ResolverInterface.php
@@ -16,9 +16,9 @@ interface ResolverInterface {
    *
    * @param mixed $value
    * @param mixed $args
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
+   * @param FieldContext $field
    *
    * @return mixed
    */
diff --git a/src/GraphQL/Resolver/SourceContext.php b/src/GraphQL/Resolver/SourceContext.php
index 5608c8d..be6c80a 100644
--- a/src/GraphQL/Resolver/SourceContext.php
+++ b/src/GraphQL/Resolver/SourceContext.php
@@ -29,7 +29,7 @@ class SourceContext implements ResolverInterface {
    * SourceContext constructor.
    *
    * @param string $name
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface|null $source
+   * @param ResolverInterface|null $source
    */
   public function __construct($name, ResolverInterface $source = NULL) {
     $this->name = $name;
diff --git a/src/GraphQL/Resolver/Tap.php b/src/GraphQL/Resolver/Tap.php
index 06584bc..851cd45 100644
--- a/src/GraphQL/Resolver/Tap.php
+++ b/src/GraphQL/Resolver/Tap.php
@@ -21,7 +21,7 @@ class Tap implements ResolverInterface {
   /**
    * Tap constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $resolver
+   * @param ResolverInterface $resolver
    */
   public function __construct(ResolverInterface $resolver) {
     $this->resolver = $resolver;
diff --git a/src/GraphQL/ResolverBuilder.php b/src/GraphQL/ResolverBuilder.php
index 19b6722..bff790a 100644
--- a/src/GraphQL/ResolverBuilder.php
+++ b/src/GraphQL/ResolverBuilder.php
@@ -31,7 +31,7 @@ class ResolverBuilder {
    * @param string $id
    * @param array $config
    *
-   * @return \Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerProxy
+   * @return DataProducerProxy
    */
   public function produce($id, array $config = []) {
     return DataProducerProxy::create($id, $config);
@@ -40,9 +40,9 @@ class ResolverBuilder {
   /**
    * Combine multiple resolvers in a chain resolving after each other.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface ...$resolvers
+   * @param ResolverInterface ...$resolvers
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Composite
+   * @return Composite
    */
   public function compose(ResolverInterface ...$resolvers) {
     return new Composite($resolvers);
@@ -51,9 +51,9 @@ class ResolverBuilder {
   /**
    * Register a resolver.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $callback
+   * @param ResolverInterface $callback
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Tap
+   * @return Tap
    */
   public function tap(ResolverInterface $callback) {
     return new Tap($callback);
@@ -62,9 +62,9 @@ class ResolverBuilder {
   /**
    * Register a resolver for multiple items.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $callback
+   * @param ResolverInterface $callback
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Map
+   * @return Map
    */
   public function map(ResolverInterface $callback) {
     return new Map($callback);
@@ -75,7 +75,7 @@ class ResolverBuilder {
    *
    * @param callable $callback
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Callback
+   * @return Callback
    */
   public function callback(callable $callback) {
     return new Callback($callback);
@@ -85,9 +85,9 @@ class ResolverBuilder {
    * Add a context that is available for further resolvers.
    *
    * @param string $name
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $source
+   * @param ResolverInterface $source
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Tap
+   * @return Tap
    */
   public function context($name, ResolverInterface $source = NULL) {
     $callback = new SourceContext($name, $source);
@@ -99,7 +99,7 @@ class ResolverBuilder {
    *
    * @param array $branches
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Condition
+   * @return Condition
    */
   public function cond(array $branches) {
     return new Condition($branches);
@@ -110,9 +110,9 @@ class ResolverBuilder {
    *
    * @param string $type
    * @param string $path
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $value
+   * @param ResolverInterface $value
    *
-   * @return \Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerProxy
+   * @return DataProducerProxy
    */
   public function fromPath($type, $path, ResolverInterface $value = NULL) {
     return $this->produce('property_path')
@@ -126,7 +126,7 @@ class ResolverBuilder {
    *
    * @param mixed $value
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Value
+   * @return Value
    */
   public function fromValue($value) {
     return new Value($value);
@@ -137,7 +137,7 @@ class ResolverBuilder {
    *
    * @param string $name
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Argument
+   * @return Argument
    */
   public function fromArgument($name) {
     return new Argument($name);
@@ -146,7 +146,7 @@ class ResolverBuilder {
   /**
    * Resolves the current value that will be a parent for the field.
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\ParentValue
+   * @return ParentValue
    */
   public function fromParent() {
     return new ParentValue();
@@ -158,7 +158,7 @@ class ResolverBuilder {
    * @param string $name
    * @param callable|null $default
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Context
+   * @return Context
    */
   public function fromContext($name, $default = NULL) {
     return new Context($name, $default);
@@ -170,7 +170,7 @@ class ResolverBuilder {
    * @param mixed $value
    * @param mixed $default
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\DefaultValue
+   * @return DefaultValue
    */
   public function defaultValue($value, $default) {
     return new DefaultValue($value, $default);
diff --git a/src/GraphQL/ResolverRegistry.php b/src/GraphQL/ResolverRegistry.php
index 30181e5..eedf8cc 100644
--- a/src/GraphQL/ResolverRegistry.php
+++ b/src/GraphQL/ResolverRegistry.php
@@ -154,12 +154,12 @@ class ResolverRegistry implements ResolverRegistryInterface {
    * This should be used instead of `getFieldResolver` unless you're certain you
    * want the resolver only for the specific type.
    *
-   * @param \GraphQL\Type\Definition\Type $type
+   * @param Type $type
    *   The type to find a resolver for.
    * @param string $fieldName
    *   The name of the field to find a resolver for.
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\ResolverInterface|null
+   * @return ResolverInterface|null
    *   The defined resolver for the field or NULL if none exists.
    *
    * @todo This should be added to ResolverRegistryInterface in 5.0.0.
@@ -189,8 +189,8 @@ class ResolverRegistry implements ResolverRegistryInterface {
    *
    * @param mixed $value
    * @param string $args
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
    *
    * @return callable|null
    */
@@ -203,9 +203,9 @@ class ResolverRegistry implements ResolverRegistryInterface {
    *
    * @param mixed $value
    * @param mixed $args
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
+   * @param FieldContext $field
    *
    * @return mixed|null
    */
@@ -217,8 +217,8 @@ class ResolverRegistry implements ResolverRegistryInterface {
    * Returns the type resolver that should be used on runtime.
    *
    * @param mixed $value
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
    *
    * @return callable|null
    */
@@ -230,8 +230,8 @@ class ResolverRegistry implements ResolverRegistryInterface {
    * Returns NULL as default type.
    *
    * @param mixed $value
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
    *
    * @return null
    */
diff --git a/src/GraphQL/ResolverRegistryInterface.php b/src/GraphQL/ResolverRegistryInterface.php
index 2121db8..1f846c6 100644
--- a/src/GraphQL/ResolverRegistryInterface.php
+++ b/src/GraphQL/ResolverRegistryInterface.php
@@ -17,9 +17,9 @@ interface ResolverRegistryInterface {
    *
    * @param mixed $value
    * @param mixed $args
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
+   * @param FieldContext $field
    *
    * @return callable|null
    */
@@ -29,8 +29,8 @@ interface ResolverRegistryInterface {
    * Resolve a type.
    *
    * @param mixed $value
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
    *
    * @return callable|null
    */
@@ -41,7 +41,7 @@ interface ResolverRegistryInterface {
    *
    * @param string $type
    * @param string $field
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $resolver
+   * @param ResolverInterface $resolver
    *
    * @return $this
    */
diff --git a/src/GraphQL/Response/FileUploadResponse.php b/src/GraphQL/Response/FileUploadResponse.php
index fd56943..5fba901 100644
--- a/src/GraphQL/Response/FileUploadResponse.php
+++ b/src/GraphQL/Response/FileUploadResponse.php
@@ -14,14 +14,14 @@ class FileUploadResponse extends Response {
   /**
    * The file entities in case of successful file upload.
    *
-   * @var \Drupal\file\FileInterface[]
+   * @var FileInterface[]
    */
   protected $fileEntities = [];
 
   /**
    * Sets file entity.
    *
-   * @param \Drupal\file\FileInterface $fileEntity
+   * @param FileInterface $fileEntity
    *   File entity.
    */
   public function setFileEntity(FileInterface $fileEntity): void {
@@ -31,7 +31,7 @@ class FileUploadResponse extends Response {
   /**
    * Sets file entities.
    *
-   * @param \Drupal\file\FileInterface[] $fileEntities
+   * @param FileInterface[] $fileEntities
    *   File entities.
    */
   public function setFileEntities(array $fileEntities): void {
@@ -41,7 +41,7 @@ class FileUploadResponse extends Response {
   /**
    * Get the first file entity if there is one.
    *
-   * @return \Drupal\file\FileInterface|null
+   * @return FileInterface|null
    *   First file entity or NULL.
    */
   public function getFileEntity(): ?FileInterface {
@@ -51,7 +51,7 @@ class FileUploadResponse extends Response {
   /**
    * Get the file entities.
    *
-   * @return \Drupal\file\FileInterface[]
+   * @return FileInterface[]
    *   File entities.
    */
   public function getFileEntities(): array {
diff --git a/src/GraphQL/Response/ResponseInterface.php b/src/GraphQL/Response/ResponseInterface.php
index e641005..a7d42aa 100644
--- a/src/GraphQL/Response/ResponseInterface.php
+++ b/src/GraphQL/Response/ResponseInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\graphql\GraphQL\Response;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * Response interface used for GraphQL responses.
  */
@@ -12,7 +13,7 @@ interface ResponseInterface {
   /**
    * Adds the violation.
    *
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $message
+   * @param string|TranslatableMarkup $message
    *   Violation message.
    * @param array $properties
    *   Other properties related to the violation.
@@ -22,7 +23,7 @@ interface ResponseInterface {
   /**
    * Adds multiple violations.
    *
-   * @param string[]|\Drupal\Core\StringTranslation\TranslatableMarkup[] $messages
+   * @param string[]|TranslatableMarkup[] $messages
    *   Violation messages.
    * @param array $properties
    *   Other properties related to the violation.
diff --git a/src/GraphQL/Utility/DeferredUtility.php b/src/GraphQL/Utility/DeferredUtility.php
index 86e8e25..c961f5b 100644
--- a/src/GraphQL/Utility/DeferredUtility.php
+++ b/src/GraphQL/Utility/DeferredUtility.php
@@ -14,14 +14,14 @@ class DeferredUtility {
   /**
    * The promise adapter.
    *
-   * @var \GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter|null
+   * @var SyncPromiseAdapter|null
    */
   public static $promiseAdapter;
 
   /**
    * Return the singleton promise adapter.
    *
-   * @return \GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter
+   * @return SyncPromiseAdapter
    *   The singleton promise adapter.
    */
   public static function promiseAdapter() {
@@ -60,7 +60,7 @@ class DeferredUtility {
    * @param mixed $value
    * @param callable $callback
    *
-   * @return \GraphQL\Executor\Promise\Adapter\SyncPromise|mixed
+   * @return SyncPromise|mixed
    */
   public static function returnFinally($value, callable $callback) {
     if ($value instanceof SyncPromise) {
@@ -82,7 +82,7 @@ class DeferredUtility {
    * @param array $values
    *   An array of promises and arbitrary values.
    *
-   * @return \GraphQL\Deferred|array
+   * @return Deferred|array
    *   The deferred result or the unchanged input array if it does not contain
    *   any promises.
    */
diff --git a/src/GraphQL/Utility/DocumentSerializer.php b/src/GraphQL/Utility/DocumentSerializer.php
index 8edb35a..017fbc0 100644
--- a/src/GraphQL/Utility/DocumentSerializer.php
+++ b/src/GraphQL/Utility/DocumentSerializer.php
@@ -13,7 +13,7 @@ class DocumentSerializer {
   /**
    * Turn the AST document to a serializable array.
    *
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param DocumentNode $document
    *
    * @return array
    */
diff --git a/src/GraphQL/Utility/FileUpload.php b/src/GraphQL/Utility/FileUpload.php
index 1fbb3fa..d6ac508 100644
--- a/src/GraphQL/Utility/FileUpload.php
+++ b/src/GraphQL/Utility/FileUpload.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\graphql\GraphQL\Utility;
 
+use Drupal\file\FileStorageInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Symfony\Component\HttpKernel\Exception\UnprocessableEntityHttpException;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\Crypt;
@@ -36,70 +41,70 @@ class FileUpload {
   /**
    * The file storage where we will create new file entities from.
    *
-   * @var \Drupal\file\FileStorageInterface
+   * @var FileStorageInterface
    */
   protected $fileStorage;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The mime type guesser service.
    *
-   * @var \Symfony\Component\Mime\MimeTypeGuesserInterface
+   * @var MimeTypeGuesserInterface
    */
   protected $mimeTypeGuesser;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * GraphQL logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The token replacement instance for tokens in file directory paths.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The lock service to prevent duplicate file uploads to the same destination.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * The file system configuration to determine if we allow insecure uploads.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $systemFileConfig;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -118,7 +123,7 @@ class FileUpload {
     RendererInterface $renderer,
     EventDispatcherInterface $eventDispatcher
   ) {
-    /** @var \Drupal\file\FileStorageInterface $file_storage */
+    /** @var FileStorageInterface $file_storage */
     $file_storage = $entityTypeManager->getStorage('file');
     $this->fileStorage = $file_storage;
     $this->currentUser = $currentUser;
@@ -158,7 +163,7 @@ class FileUpload {
    * \Drupal\file\Plugin\Field\FieldType\FileItem
    * \Drupal\file\Plugin\rest\resource\FileUploadResource.
    *
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile $uploaded_file
+   * @param UploadedFile $uploaded_file
    *   The file entity to upload.
    * @param array $settings
    *   File settings as specified in regular file field config. Contains keys:
@@ -167,11 +172,11 @@ class FileUpload {
    *   - file_extensions: List of valid file extensions (eg [xml, pdf])
    *   - max_filesize: Maximum allowed size of uploaded file.
    *
-   * @return \Drupal\graphql\GraphQL\Response\FileUploadResponse
+   * @return FileUploadResponse
    *   The file upload response containing file entity or list of violations.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \RuntimeException
    */
   public function saveFileUpload(UploadedFile $uploaded_file, array $settings): FileUploadResponse {
@@ -247,7 +252,7 @@ class FileUpload {
 
     try {
       // Begin building file entity.
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $this->fileStorage->create([]);
       $file->setOwnerId($this->currentUser->id());
       $file->setFilename($prepared_filename);
@@ -304,7 +309,7 @@ class FileUpload {
   /**
    * Validates uploaded files, saves them and returns a file upload response.
    *
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile[] $uploaded_files
+   * @param UploadedFile[] $uploaded_files
    *   The file entities to upload.
    * @param array $settings
    *   File settings as specified in regular file field config. Contains keys:
@@ -313,7 +318,7 @@ class FileUpload {
    *   - file_extensions: List of valid file extensions (eg [xml, pdf])
    *   - max_filesize: Maximum allowed size of uploaded file.
    *
-   * @return \Drupal\graphql\GraphQL\Response\FileUploadResponse
+   * @return FileUploadResponse
    *   The file upload response containing file entities or list of violations.
    */
   public function saveMultipleFileUploads(array $uploaded_files, array $settings): FileUploadResponse {
@@ -345,14 +350,14 @@ class FileUpload {
   /**
    * Validates the file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to validate.
    * @param array $validators
    *   An array of upload validators to pass to file_validate().
-   * @param \Drupal\graphql\GraphQL\Response\FileUploadResponse $response
+   * @param FileUploadResponse $response
    *   The response where validation errors will be added.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\UnprocessableEntityHttpException
+   * @throws UnprocessableEntityHttpException
    *   Thrown when there are file validation errors.
    *
    * @return bool
@@ -403,7 +408,7 @@ class FileUpload {
         // reject it below.
         $passes_validation = FALSE;
         if (!empty($validators['file_validate_extensions'][0])) {
-          /** @var \Drupal\file\FileInterface $file */
+          /** @var FileInterface $file */
           $file = $this->fileStorage->create([]);
           $file->setFilename($filename);
           $passes_validation = empty(file_validate_extensions($file, $validators['file_validate_extensions'][0]));
diff --git a/src/GraphQL/Utility/Introspection.php b/src/GraphQL/Utility/Introspection.php
index e1374c0..b4ab583 100644
--- a/src/GraphQL/Utility/Introspection.php
+++ b/src/GraphQL/Utility/Introspection.php
@@ -14,7 +14,7 @@ class Introspection {
   /**
    * Perform an introspection query and return result.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The server instance.
    *
    * @return array
diff --git a/src/GraphQL/Validator.php b/src/GraphQL/Validator.php
index 302c1b5..d853b80 100644
--- a/src/GraphQL/Validator.php
+++ b/src/GraphQL/Validator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\GraphQL;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\graphql\Entity\ServerInterface;
 use Drupal\graphql\Plugin\SchemaPluginInterface;
@@ -20,21 +22,21 @@ class Validator implements ValidatorInterface {
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $pluginManager;
 
   /**
    * GraphQL logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * ValidateResolverController constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $pluginManager
+   * @param SchemaPluginManager $pluginManager
    *   The schema plugin manager.
    */
   public function __construct(SchemaPluginManager $pluginManager) {
@@ -183,18 +185,18 @@ class Validator implements ValidatorInterface {
   /**
    * Get the schema plugin for a GraphQL server.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The GraphQL server.
    *
-   * @return \Drupal\graphql\Plugin\SchemaPluginInterface
+   * @return SchemaPluginInterface
    *   A schema plugin interface.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   Thrown when no schema plugin is defined for the server.
    */
   private function getSchemaPlugin(ServerInterface $server) : SchemaPluginInterface {
     $schema_name = $server->get('schema');
-    /** @var \Drupal\graphql\Plugin\SchemaPluginInterface $plugin */
+    /** @var SchemaPluginInterface $plugin */
     $plugin = $this->pluginManager->createInstance($schema_name);
     if ($plugin instanceof ConfigurableInterface && $config = $server->get('schema_configuration')) {
       $plugin->setConfiguration($config[$schema_name] ?? []);
diff --git a/src/GraphQL/ValidatorInterface.php b/src/GraphQL/ValidatorInterface.php
index a4b3301..01fd2eb 100644
--- a/src/GraphQL/ValidatorInterface.php
+++ b/src/GraphQL/ValidatorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\GraphQL;
 
+use GraphQL\Error\Error;
 use Drupal\graphql\Entity\ServerInterface;
 
 /**
@@ -12,10 +13,10 @@ interface ValidatorInterface {
   /**
    * Validates the schema of the server.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The server to validate.
    *
-   * @return \GraphQL\Error\Error[]
+   * @return Error[]
    *   An array of validation errors.
    */
   public function validateSchema(ServerInterface $server) : array;
@@ -28,7 +29,7 @@ interface ValidatorInterface {
    * interfaces do not have a registered resolver in the server's resolver
    * registry for the field.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The server to validate.
    * @param array $ignore_types
    *   Any types to ignore during validation.
@@ -44,7 +45,7 @@ interface ValidatorInterface {
    * A resolver is considered orphaned if it's defined in the resolver registry
    * for the server but the field does not occur in any SDL (.graphqls) files.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The server to validate.
    * @param array $ignore_types
    *   Any types to ignore during validation.
diff --git a/src/PermissionProvider.php b/src/PermissionProvider.php
index 3c31a0f..dc4de25 100644
--- a/src/PermissionProvider.php
+++ b/src/PermissionProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql;
 
+use Drupal\graphql\Entity\ServerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
@@ -14,14 +15,14 @@ class PermissionProvider {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * PermissionProvider constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
     $this->entityTypeManager = $entityTypeManager;
@@ -32,7 +33,7 @@ class PermissionProvider {
    */
   public function permissions(): array {
     $storage = $this->entityTypeManager->getStorage('graphql_server');
-    /** @var \Drupal\graphql\Entity\ServerInterface[] $servers */
+    /** @var ServerInterface[] $servers */
     $servers = $storage->loadMultiple();
     $permissions = [];
 
diff --git a/src/Plugin/DataProducerPluginInterface.php b/src/Plugin/DataProducerPluginInterface.php
index e8b8945..c8a7808 100644
--- a/src/Plugin/DataProducerPluginInterface.php
+++ b/src/Plugin/DataProducerPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin;
 
+use GraphQL\Deferred;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Plugin\ContextAwarePluginInterface;
@@ -18,9 +19,9 @@ interface DataProducerPluginInterface extends ContextAwarePluginInterface, Cache
   /**
    * Resolves the queried field with the given context.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param FieldContext $field
    *
-   * @return \GraphQL\Deferred|mixed
+   * @return Deferred|mixed
    */
   public function resolveField(FieldContext $field);
 
diff --git a/src/Plugin/DataProducerPluginManager.php b/src/Plugin/DataProducerPluginManager.php
index 45e26aa..8c6abcb 100644
--- a/src/Plugin/DataProducerPluginManager.php
+++ b/src/Plugin/DataProducerPluginManager.php
@@ -17,21 +17,21 @@ class DataProducerPluginManager extends DefaultPluginManager {
   /**
    * The request stack later used to get the request time.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The cache context manager for calculating cache keys.
    *
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager
+   * @var CacheContextsManager
    */
   protected $contextsManager;
 
   /**
    * The cache backend to cache results in.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $resultCacheBackend;
 
@@ -43,12 +43,12 @@ class DataProducerPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $definitionCacheBackend
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
-   * @param \Drupal\Core\Cache\Context\CacheContextsManager $contextsManager
-   * @param \Drupal\Core\Cache\CacheBackendInterface $resultCacheBackend
+   * @param CacheBackendInterface $definitionCacheBackend
+   * @param RequestStack $requestStack
+   * @param CacheContextsManager $contextsManager
+   * @param CacheBackendInterface $resultCacheBackend
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
    * @param string $pluginAnnotationName
@@ -94,7 +94,7 @@ class DataProducerPluginManager extends DefaultPluginManager {
    * @param array $mapping
    * @param array $config
    *
-   * @return \Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerProxy
+   * @return DataProducerProxy
    */
   public function proxy($id, array $mapping = [], array $config = []) {
     return new DataProducerProxy(
diff --git a/src/Plugin/GraphQL/DataProducer/DataProducerPluginBase.php b/src/Plugin/GraphQL/DataProducer/DataProducerPluginBase.php
index 1a8a6d5..dae2699 100644
--- a/src/Plugin/GraphQL/DataProducer/DataProducerPluginBase.php
+++ b/src/Plugin/GraphQL/DataProducer/DataProducerPluginBase.php
@@ -26,7 +26,7 @@ abstract class DataProducerPluginBase extends ContextAwarePluginBase implements
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
+   * @throws ContextException
    */
   public function getContextDefinition($name) {
     $definitions = $this->getContextDefinitions();
diff --git a/src/Plugin/GraphQL/DataProducer/DataProducerProxy.php b/src/Plugin/GraphQL/DataProducer/DataProducerProxy.php
index 1858af6..c844113 100644
--- a/src/Plugin/GraphQL/DataProducer/DataProducerProxy.php
+++ b/src/Plugin/GraphQL/DataProducer/DataProducerProxy.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Plugin\Context\Context;
+use GraphQL\Deferred;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -39,28 +42,28 @@ class DataProducerProxy implements ResolverInterface {
   /**
    * The plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\DataProducerPluginManager
+   * @var DataProducerPluginManager
    */
   protected $pluginManager;
 
   /**
    * The request stack for looking up request time.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The cache context manager for cache keys.
    *
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager
+   * @var CacheContextsManager
    */
   protected $contextsManager;
 
   /**
    * The cache backend for results.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
@@ -86,10 +89,10 @@ class DataProducerProxy implements ResolverInterface {
    * @param array $mapping
    * @param array $config
    *   Plugin configuration.
-   * @param \Drupal\graphql\Plugin\DataProducerPluginManager $pluginManager
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
-   * @param \Drupal\Core\Cache\Context\CacheContextsManager $contextsManager
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param DataProducerPluginManager $pluginManager
+   * @param RequestStack $requestStack
+   * @param CacheContextsManager $contextsManager
+   * @param CacheBackendInterface $cacheBackend
    */
   public function __construct(
     $id,
@@ -127,7 +130,7 @@ class DataProducerProxy implements ResolverInterface {
    * Store a resolver for a given name.
    *
    * @param string $name
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $mapping
+   * @param ResolverInterface $mapping
    *
    * @return $this
    */
@@ -153,20 +156,20 @@ class DataProducerProxy implements ResolverInterface {
    *
    * @param mixed $value
    * @param mixed $args
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
+   * @param FieldContext $field
    *
    * @return mixed
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function resolve($value, $args, ResolveContext $context, ResolveInfo $info, FieldContext $field) {
     $plugin = $this->prepare($value, $args, $context, $info, $field);
 
     return DeferredUtility::returnFinally($plugin, function (DataProducerPluginInterface $plugin) use ($context, $field) {
       foreach ($plugin->getContexts() as $item) {
-        /** @var \Drupal\Core\Plugin\Context\Context $item */
+        /** @var Context $item */
         if ($item->getContextDefinition()->isRequired() && !$item->hasContextValue()) {
           return NULL;
         }
@@ -187,17 +190,17 @@ class DataProducerProxy implements ResolverInterface {
    *
    * @param mixed $value
    * @param mixed $args
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
+   * @param FieldContext $field
    *
-   * @return \GraphQL\Deferred|\Drupal\graphql\Plugin\DataProducerPluginInterface
+   * @return Deferred|DataProducerPluginInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @throws \Exception
    */
   protected function prepare($value, $args, ResolveContext $context, ResolveInfo $info, FieldContext $field) {
-    /** @var \Drupal\graphql\Plugin\DataProducerPluginInterface $plugin */
+    /** @var DataProducerPluginInterface $plugin */
     $plugin = $this->pluginManager->createInstance($this->id, $this->config);
     $contexts = $plugin->getContextDefinitions();
 
@@ -228,9 +231,9 @@ class DataProducerProxy implements ResolverInterface {
   /**
    * Invoke the data producer directly.
    *
-   * @param \Drupal\graphql\Plugin\DataProducerPluginInterface $plugin
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param DataProducerPluginInterface $plugin
+   * @param ResolveContext $context
+   * @param FieldContext $field
    *
    * @return mixed
    */
@@ -244,9 +247,9 @@ class DataProducerProxy implements ResolverInterface {
   /**
    * Try to return a value from cache, otherwise invoke data producer.
    *
-   * @param \Drupal\graphql\Plugin\DataProducerPluginCachingInterface $plugin
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param DataProducerPluginCachingInterface $plugin
+   * @param ResolveContext $context
+   * @param FieldContext $field
    *
    * @return mixed
    */
@@ -267,7 +270,7 @@ class DataProducerProxy implements ResolverInterface {
   /**
    * Calculates a cache prefix.
    *
-   * @param \Drupal\graphql\Plugin\DataProducerPluginCachingInterface $plugin
+   * @param DataProducerPluginCachingInterface $plugin
    *
    * @return string
    */
@@ -309,7 +312,7 @@ class DataProducerProxy implements ResolverInterface {
    *
    * @param string $prefix
    * @param mixed $value
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param FieldContext $field
    */
   protected function cacheWrite($prefix, $value, FieldContext $field): void {
     // Bail out early if the field context is already uncacheable.
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityAccess.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityAccess.php
index c672fa1..f5d86c9 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityAccess.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase;
@@ -36,11 +37,11 @@ class EntityAccess extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $operation
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResultInterface
    */
   public function resolve(EntityInterface $entity, $operation = NULL, AccountInterface $user = NULL) {
     return $entity->access($operation ?? 'view', $user);
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityBundle.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityBundle.php
index 99be7c7..84fd134 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityBundle.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityBundle.php
@@ -27,7 +27,7 @@ class EntityBundle extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return string
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityChanged.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityChanged.php
index e59562a..2bebbfc 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityChanged.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityChanged.php
@@ -33,7 +33,7 @@ class EntityChanged extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string|null $format
    *
    * @return string|null
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityCreated.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityCreated.php
index 95ae650..9eb467d 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityCreated.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityCreated.php
@@ -32,7 +32,7 @@ class EntityCreated extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string|null $format
    *
    * @return string|null
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityDescription.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityDescription.php
index fe3c6ec..1ff5bf0 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityDescription.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityDescription.php
@@ -28,7 +28,7 @@ class EntityDescription extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return string|null
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityId.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityId.php
index b1fb0e9..ede7658 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityId.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityId.php
@@ -27,7 +27,7 @@ class EntityId extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return int|string|null
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityLabel.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityLabel.php
index 7e9ec92..bba4731 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityLabel.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityLabel.php
@@ -28,7 +28,7 @@ class EntityLabel extends DataProducerPluginBase implements DataProducerPluginCa
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return string|null
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityLanguage.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityLanguage.php
index fc1362a..c222abf 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityLanguage.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityLanguage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;
 
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase;
 
@@ -27,9 +28,9 @@ class EntityLanguage extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\Core\Language\LanguageInterface
+   * @return LanguageInterface
    */
   public function resolve(EntityInterface $entity) {
     return $entity->language();
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityLoad.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityLoad.php
index 867a28c..11e2376 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityLoad.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityLoad.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TranslatableInterface;
@@ -63,21 +65,21 @@ class EntityLoad extends DataProducerPluginBase implements ContainerFactoryPlugi
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;
 
@@ -106,11 +108,11 @@ class EntityLoad extends DataProducerPluginBase implements ContainerFactoryPlugi
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    *
    * @codeCoverageIgnore
@@ -137,11 +139,11 @@ class EntityLoad extends DataProducerPluginBase implements ContainerFactoryPlugi
    * @param string|null $language
    * @param array|null $bundles
    * @param bool|null $access
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    * @param string|null $accessOperation
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *
-   * @return \GraphQL\Deferred|null
+   * @return Deferred|null
    */
   public function resolve($type, $id, ?string $language, ?array $bundles, ?bool $access, ?AccountInterface $accessUser, ?string $accessOperation, FieldContext $context): ?Deferred {
     // If this data producer was composed to a field (entity reference) and
@@ -158,7 +160,7 @@ class EntityLoad extends DataProducerPluginBase implements ContainerFactoryPlugi
         // the cache entry is purged whenever a new entity of this type is
         // saved.
         $type = $this->entityTypeManager->getDefinition($type);
-        /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+        /** @var EntityTypeInterface $type */
         $tags = $type->getListCacheTags();
         $context->addCacheTags($tags);
         return NULL;
@@ -179,7 +181,7 @@ class EntityLoad extends DataProducerPluginBase implements ContainerFactoryPlugi
       // Check if the passed user (or current user if none is passed) has access
       // to the entity, if not return NULL.
       if ($access) {
-        /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+        /** @var AccessResultInterface $accessResult */
         $accessResult = $entity->access($accessOperation, $accessUser, TRUE);
         $context->addCacheableDependency($accessResult);
         if (!$accessResult->isAllowed()) {
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityLoadByUuid.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityLoadByUuid.php
index 10e2d40..e60c393 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityLoadByUuid.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityLoadByUuid.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TranslatableInterface;
@@ -62,21 +64,21 @@ class EntityLoadByUuid extends DataProducerPluginBase implements ContainerFactor
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityUuidBuffer
+   * @var EntityUuidBuffer
    */
   protected $entityBuffer;
 
@@ -105,11 +107,11 @@ class EntityLoadByUuid extends DataProducerPluginBase implements ContainerFactor
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityUuidBuffer $entityBuffer
+   * @param EntityUuidBuffer $entityBuffer
    *   The entity buffer service.
    *
    * @codeCoverageIgnore
@@ -136,11 +138,11 @@ class EntityLoadByUuid extends DataProducerPluginBase implements ContainerFactor
    * @param string|null $language
    * @param array|null $bundles
    * @param bool|null $access
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    * @param string|null $accessOperation
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *
-   * @return \GraphQL\Deferred
+   * @return Deferred
    */
   public function resolve($type, $uuid, ?string $language, ?array $bundles, ?bool $access, ?AccountInterface $accessUser, ?string $accessOperation, FieldContext $context) {
     $resolver = $this->entityBuffer->add($type, $uuid);
@@ -151,7 +153,7 @@ class EntityLoadByUuid extends DataProducerPluginBase implements ContainerFactor
         // the cache entry is purged whenever a new entity of this type is
         // saved.
         $type = $this->entityTypeManager->getDefinition($type);
-        /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+        /** @var EntityTypeInterface $type */
         $tags = $type->getListCacheTags();
         $context->addCacheTags($tags);
         return NULL;
@@ -172,7 +174,7 @@ class EntityLoadByUuid extends DataProducerPluginBase implements ContainerFactor
       // Check if the passed user (or current user if none is passed) has access
       // to the entity, if not return NULL.
       if ($access) {
-        /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+        /** @var AccessResultInterface $accessResult */
         $accessResult = $entity->access($accessOperation, $accessUser, TRUE);
         $context->addCacheableDependency($accessResult);
         if (!$accessResult->isAllowed()) {
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityLoadMultiple.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityLoadMultiple.php
index 2a0259c..e90ac15 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityLoadMultiple.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityLoadMultiple.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TranslatableInterface;
@@ -63,21 +66,21 @@ class EntityLoadMultiple extends DataProducerPluginBase implements ContainerFact
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;
 
@@ -106,11 +109,11 @@ class EntityLoadMultiple extends DataProducerPluginBase implements ContainerFact
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    *
    * @codeCoverageIgnore
@@ -137,11 +140,11 @@ class EntityLoadMultiple extends DataProducerPluginBase implements ContainerFact
    * @param string|null $language
    * @param array|null $bundles
    * @param bool $access
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    * @param string|null $accessOperation
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *
-   * @return \GraphQL\Deferred
+   * @return Deferred
    */
   public function resolve($type, array $ids, ?string $language, ?array $bundles, bool $access, ?AccountInterface $accessUser, ?string $accessOperation, FieldContext $context) {
     // Remove any NULL IDs.
@@ -150,14 +153,14 @@ class EntityLoadMultiple extends DataProducerPluginBase implements ContainerFact
     $resolver = $this->entityBuffer->add($type, $ids);
 
     return new Deferred(function () use ($type, $language, $bundles, $resolver, $context, $access, $accessUser, $accessOperation) {
-      /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
+      /** @var EntityInterface[] $entities */
       $entities = $resolver();
       if (!$entities) {
         // If there is no entity with this id, add the list cache tags so that
         // the cache entry is purged whenever a new entity of this type is
         // saved.
         $type = $this->entityTypeManager->getDefinition($type);
-        /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+        /** @var EntityTypeInterface $type */
         $tags = $type->getListCacheTags();
         $context->addCacheTags($tags);
         return [];
@@ -177,7 +180,7 @@ class EntityLoadMultiple extends DataProducerPluginBase implements ContainerFact
         }
 
         if ($access) {
-          /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+          /** @var AccessResultInterface $accessResult */
           $accessResult = $entities[$id]->access($accessOperation, $accessUser, TRUE);
           $context->addCacheableDependency($accessResult);
           // We need to call isAllowed() because isForbidden() returns FALSE
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityOwner.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityOwner.php
index 201d242..1558cc7 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityOwner.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityOwner.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase;
 use Drupal\user\EntityOwnerInterface;
@@ -29,9 +30,9 @@ class EntityOwner extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    */
   public function resolve(EntityInterface $entity) {
     if ($entity instanceof EntityOwnerInterface) {
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityPublished.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityPublished.php
index 0959755..cc1201c 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityPublished.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityPublished.php
@@ -29,7 +29,7 @@ class EntityPublished extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return bool|null
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityRendered.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityRendered.php
index 715bc62..cdddf27 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityRendered.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityRendered.php
@@ -39,14 +39,14 @@ class EntityRendered extends DataProducerPluginBase implements ContainerFactoryP
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -74,9 +74,9 @@ class EntityRendered extends DataProducerPluginBase implements ContainerFactoryP
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    *
    * @codeCoverageIgnore
@@ -96,9 +96,9 @@ class EntityRendered extends DataProducerPluginBase implements ContainerFactoryP
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string|null $mode
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param RefinableCacheableDependencyInterface $metadata
    *
    * @return string
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityTranslation.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityTranslation.php
index 633bdc2..b59d38b 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityTranslation.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityTranslation.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -52,7 +53,7 @@ class EntityTranslation extends DataProducerPluginBase implements ContainerFacto
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -79,7 +80,7 @@ class EntityTranslation extends DataProducerPluginBase implements ContainerFacto
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
    *
    * @codeCoverageIgnore
@@ -92,13 +93,13 @@ class EntityTranslation extends DataProducerPluginBase implements ContainerFacto
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $language
    * @param bool|null $access
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    * @param string|null $accessOperation
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    */
   public function resolve(EntityInterface $entity, $language, ?bool $access, ?AccountInterface $accessUser, ?string $accessOperation) {
     if ($entity instanceof TranslatableInterface && $entity->isTranslatable()) {
@@ -107,7 +108,7 @@ class EntityTranslation extends DataProducerPluginBase implements ContainerFacto
       // Check if the passed user (or current user if none is passed) has access
       // to the entity, if not return NULL.
       if ($access) {
-        /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+        /** @var AccessResultInterface $accessResult */
         $accessResult = $entity->access($accessOperation, $accessUser, TRUE);
         if (!$accessResult->isAllowed()) {
           return NULL;
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityTranslations.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityTranslations.php
index 5a68d8e..1833c95 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityTranslations.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityTranslations.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -52,7 +53,7 @@ class EntityTranslations extends DataProducerPluginBase implements ContainerFact
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -79,7 +80,7 @@ class EntityTranslations extends DataProducerPluginBase implements ContainerFact
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
    *
    * @codeCoverageIgnore
@@ -92,9 +93,9 @@ class EntityTranslations extends DataProducerPluginBase implements ContainerFact
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param bool|null $access
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    * @param string|null $accessOperation
    *
    * @return array|null
@@ -108,7 +109,7 @@ class EntityTranslations extends DataProducerPluginBase implements ContainerFact
         $entity = $entity->getTranslation($langcode);
         $entity->addCacheContexts(["static:language:{$langcode}"]);
         if ($access) {
-          /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+          /** @var AccessResultInterface $accessResult */
           $accessResult = $entity->access($accessOperation, $accessUser, TRUE);
           if (!$accessResult->isAllowed()) {
             return NULL;
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityType.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityType.php
index 910edb2..017d502 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityType.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityType.php
@@ -27,7 +27,7 @@ class EntityType extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return string
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityUrl.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityUrl.php
index dda25c1..06ede09 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityUrl.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityUrl.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;
 
+use Drupal\Core\Url;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase;
 
@@ -27,11 +29,11 @@ class EntityUrl extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function resolve(EntityInterface $entity) {
     return $entity->toUrl();
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/EntityUuid.php b/src/Plugin/GraphQL/DataProducer/Entity/EntityUuid.php
index 8cec1bc..e6ad551 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/EntityUuid.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/EntityUuid.php
@@ -27,7 +27,7 @@ class EntityUuid extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return null|string
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/Fields/Image/ImageDerivative.php b/src/Plugin/GraphQL/DataProducer/Entity/Fields/Image/ImageDerivative.php
index bb9b206..fe69812 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/Fields/Image/ImageDerivative.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/Fields/Image/ImageDerivative.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity\Fields\Image;
 
+use Drupal\Core\Image\ImageInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\RenderContext;
@@ -37,7 +38,7 @@ class ImageDerivative extends DataProducerPluginBase implements ContainerFactory
   /**
    * The rendering service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -64,7 +65,7 @@ class ImageDerivative extends DataProducerPluginBase implements ContainerFactory
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    *
    * @codeCoverageIgnore
@@ -82,9 +83,9 @@ class ImageDerivative extends DataProducerPluginBase implements ContainerFactory
   /**
    * Resolver.
    *
-   * @param \Drupal\file\FileInterface $entity
+   * @param FileInterface $entity
    * @param string $style
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param RefinableCacheableDependencyInterface $metadata
    *
    * @return array|null
    */
@@ -105,7 +106,7 @@ class ImageDerivative extends DataProducerPluginBase implements ContainerFactory
       // check the entity properties first.
       // @phpstan-ignore-next-line
       if (empty($width) || empty($height)) {
-        /** @var \Drupal\Core\Image\ImageInterface $image */
+        /** @var ImageInterface $image */
         $image = \Drupal::service('image.factory')->get($entity->getFileUri());
         if ($image->isValid()) {
           $width = $image->getWidth();
diff --git a/src/Plugin/GraphQL/DataProducer/Entity/Fields/Image/ImageUrl.php b/src/Plugin/GraphQL/DataProducer/Entity/Fields/Image/ImageUrl.php
index 84b1cfb..ce903ce 100644
--- a/src/Plugin/GraphQL/DataProducer/Entity/Fields/Image/ImageUrl.php
+++ b/src/Plugin/GraphQL/DataProducer/Entity/Fields/Image/ImageUrl.php
@@ -33,14 +33,14 @@ class ImageUrl extends DataProducerPluginBase implements ContainerFactoryPluginI
   /**
    * The rendering service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The file URL generator service.
    *
-   * @var \Drupal\Core\File\FileUrlGeneratorInterface
+   * @var FileUrlGeneratorInterface
    */
   protected $fileUrlGenerator;
 
@@ -68,9 +68,9 @@ class ImageUrl extends DataProducerPluginBase implements ContainerFactoryPluginI
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\File\FileUrlGeneratorInterface $fileUrlGenerator
+   * @param FileUrlGeneratorInterface $fileUrlGenerator
    *   The file URL generator service.
    *
    * @codeCoverageIgnore
@@ -90,8 +90,8 @@ class ImageUrl extends DataProducerPluginBase implements ContainerFactoryPluginI
   /**
    * Resolver.
    *
-   * @param \Drupal\file\FileInterface $entity
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param FileInterface $entity
+   * @param RefinableCacheableDependencyInterface $metadata
    *
    * @return string|null
    */
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/EntityDefinition.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/EntityDefinition.php
index 04b47d2..bfd6c8f 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/EntityDefinition.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/EntityDefinition.php
@@ -40,7 +40,7 @@ class EntityDefinition extends DataProducerPluginBase implements ContainerFactor
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -67,7 +67,7 @@ class EntityDefinition extends DataProducerPluginBase implements ContainerFactor
    *   The plugin id.
    * @param array $plugin_definition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager service.
    *
    * @codeCoverageIgnore
@@ -94,10 +94,10 @@ class EntityDefinition extends DataProducerPluginBase implements ContainerFactor
    *   Optional. The field types to retrieve (base fields, configurable fields,
    *   or both) which are stored as a context for upcoming data producers deeper
    *   in hierarchy.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field_context
+   * @param FieldContext $field_context
    *   Field context.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity definition.
    */
   public function resolve(string $entity_type,
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields.php
index 2891803..09da270 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields.php
@@ -44,14 +44,14 @@ class Fields extends DataProducerPluginBase implements ContainerFactoryPluginInt
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
@@ -79,9 +79,9 @@ class Fields extends DataProducerPluginBase implements ContainerFactoryPluginInt
    *   The plugin id.
    * @param array $plugin_definition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The entity field manager service.
    *
    * @codeCoverageIgnore
@@ -106,13 +106,13 @@ class Fields extends DataProducerPluginBase implements ContainerFactoryPluginInt
    * The same goes for field types when either base fields of configurable
    * fields may be returned.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_definition
+   * @param EntityTypeInterface $entity_definition
    *   The entity type definition.
    * @param array|null $bundle_context
    *   Bundle context.
    * @param string|null $field_types_context
    *   Field types context.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field_context
+   * @param FieldContext $field_context
    *   Field context.
    */
   public function resolve(
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/DefaultValue.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/DefaultValue.php
index b47a41b..3fa2010 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/DefaultValue.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/DefaultValue.php
@@ -27,7 +27,7 @@ class DefaultValue extends DataProducerPluginBase {
   /**
    * Resolves the default value property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return string|bool|int|null
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Description.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Description.php
index 7892333..b198288 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Description.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Description.php
@@ -28,14 +28,14 @@ class Description extends DataProducerPluginBase {
   /**
    * Resolves the field description.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return string|null
    *   The description.
    */
   public function resolve(FieldDefinitionInterface $entity_definition_field): ?string {
-    /** @var \Drupal\Component\Render\MarkupInterface|string|null $description */
+    /** @var MarkupInterface|string|null $description */
     $description = $entity_definition_field->getDescription();
     // Convert translation object to string.
     if ($description instanceof MarkupInterface) {
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Hidden.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Hidden.php
index 9e953af..587e15a 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Hidden.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Hidden.php
@@ -32,9 +32,9 @@ class Hidden extends DataProducerPluginBase {
   /**
    * Resolves the hidden property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
-   * @param \Drupal\Core\Entity\Entity\EntityFormDisplay|null $entity_form_display_context
+   * @param EntityFormDisplay|null $entity_form_display_context
    *   Entity form display context.
    *
    * @return bool
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Id.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Id.php
index 8cc9c64..6c48e39 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Id.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Id.php
@@ -27,7 +27,7 @@ class Id extends DataProducerPluginBase {
   /**
    * Resolves the ID property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return string
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Label.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Label.php
index c8dbe67..f981bbd 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Label.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Label.php
@@ -27,7 +27,7 @@ class Label extends DataProducerPluginBase {
   /**
    * Resolves the field label.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return string
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/MaxNumItems.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/MaxNumItems.php
index db34daa..02ea8a5 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/MaxNumItems.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/MaxNumItems.php
@@ -28,7 +28,7 @@ class MaxNumItems extends DataProducerPluginBase {
   /**
    * Resolves the "max_num_items" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return int
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Multiple.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Multiple.php
index 8f3e090..3af92c6 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Multiple.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Multiple.php
@@ -28,7 +28,7 @@ class Multiple extends DataProducerPluginBase {
   /**
    * Resolves the "multiple" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return bool
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Reference.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Reference.php
index 4723ea4..25c8192 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Reference.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Reference.php
@@ -27,7 +27,7 @@ class Reference extends DataProducerPluginBase {
   /**
    * Resolves the "reference" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return bool
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Required.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Required.php
index 2e06825..01ae7a3 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Required.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Required.php
@@ -27,7 +27,7 @@ class Required extends DataProducerPluginBase {
   /**
    * Resolves the "required" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return bool
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Settings.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Settings.php
index fc95abc..d437b0b 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Settings.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Settings.php
@@ -32,9 +32,9 @@ class Settings extends DataProducerPluginBase {
   /**
    * Resolves the field settings.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
-   * @param \Drupal\Core\Entity\Entity\EntityFormDisplay|null $entity_form_display_context
+   * @param EntityFormDisplay|null $entity_form_display_context
    *   Entity form display context.
    *
    * @return \Iterator
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Status.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Status.php
index 415ad13..521b121 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Status.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Status.php
@@ -30,7 +30,7 @@ class Status extends DataProducerPluginBase {
   /**
    * Resolves the "status" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return bool
@@ -38,15 +38,15 @@ class Status extends DataProducerPluginBase {
    */
   public function resolve(FieldDefinitionInterface $entity_definition_field): bool {
     if ($entity_definition_field instanceof BaseFieldDefinition) {
-      /** @var \Drupal\Core\Field\BaseFieldDefinition $entity_definition_field */
+      /** @var BaseFieldDefinition $entity_definition_field */
       return TRUE;
     }
     elseif ($entity_definition_field instanceof FieldConfig) {
-      /** @var \Drupal\field\Entity\FieldConfig $entity_definition_field */
+      /** @var FieldConfig $entity_definition_field */
       return $entity_definition_field->status();
     }
     elseif ($entity_definition_field instanceof BaseFieldOverride) {
-      /** @var \Drupal\Core\Field\Entity\BaseFieldOverride $entity_definition_field */
+      /** @var BaseFieldOverride $entity_definition_field */
       return $entity_definition_field->status();
     }
 
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Type.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Type.php
index 450fc67..07d9daa 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Type.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Type.php
@@ -27,7 +27,7 @@ class Type extends DataProducerPluginBase {
   /**
    * Resolves the "type" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return string
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Weight.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Weight.php
index 64e2573..35d31c1 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Weight.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Weight.php
@@ -32,9 +32,9 @@ class Weight extends DataProducerPluginBase {
   /**
    * Resolves the "weight" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
-   * @param \Drupal\Core\Entity\Entity\EntityFormDisplay|null $entity_form_display_context
+   * @param EntityFormDisplay|null $entity_form_display_context
    *   Entity form display context.
    *
    * @return int
diff --git a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Label.php b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Label.php
index 6528b09..b420deb 100644
--- a/src/Plugin/GraphQL/DataProducer/EntityDefinition/Label.php
+++ b/src/Plugin/GraphQL/DataProducer/EntityDefinition/Label.php
@@ -27,7 +27,7 @@ class Label extends DataProducerPluginBase {
   /**
    * Resolves the entity definition label.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_definition
+   * @param EntityTypeInterface $entity_definition
    *   The entity type definition.
    *
    * @return string
diff --git a/src/Plugin/GraphQL/DataProducer/Field/EntityReference.php b/src/Plugin/GraphQL/DataProducer/Field/EntityReference.php
index 55e5bbd..1125419 100644
--- a/src/Plugin/GraphQL/DataProducer/Field/EntityReference.php
+++ b/src/Plugin/GraphQL/DataProducer/Field/EntityReference.php
@@ -67,21 +67,21 @@ class EntityReference extends DataProducerPluginBase implements ContainerFactory
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;
 
@@ -110,11 +110,11 @@ class EntityReference extends DataProducerPluginBase implements ContainerFactory
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    *
    * @codeCoverageIgnore
@@ -136,16 +136,16 @@ class EntityReference extends DataProducerPluginBase implements ContainerFactory
   /**
    * Resolve entity references in the given field name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $field
    * @param string|null $language
    * @param array|null $bundles
    * @param bool|null $access
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    * @param string|null $accessOperation
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *
-   * @return \GraphQL\Deferred|array
+   * @return Deferred|array
    *   A promise that will return referenced entities or empty array if there
    *   aren't any.
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceLayoutRevisions.php b/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceLayoutRevisions.php
index c09266d..032e079 100644
--- a/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceLayoutRevisions.php
+++ b/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceLayoutRevisions.php
@@ -66,14 +66,14 @@ class EntityReferenceLayoutRevisions extends DataProducerPluginBase implements C
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The entity revision buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityRevisionBuffer
+   * @var EntityRevisionBuffer
    */
   protected $entityRevisionBuffer;
 
@@ -101,9 +101,9 @@ class EntityReferenceLayoutRevisions extends DataProducerPluginBase implements C
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityRevisionBuffer $entityRevisionBuffer
+   * @param EntityRevisionBuffer $entityRevisionBuffer
    *   The entity revision buffer service.
    *
    * @codeCoverageIgnore
@@ -125,7 +125,7 @@ class EntityReferenceLayoutRevisions extends DataProducerPluginBase implements C
    *
    * May optionally respect the entity bundles and language.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $field
    *   The field of a given entity to get entity reference layout revisions for.
@@ -135,14 +135,14 @@ class EntityReferenceLayoutRevisions extends DataProducerPluginBase implements C
    *   Optional. List of bundles to be respected for retrieved entities.
    * @param bool $access
    *   Whether check for access or not. Default is true.
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    *   User entity to check access for. Default is null.
    * @param string $accessOperation
    *   Operation to check access for. Default is view.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The caching context related to the current field.
    *
-   * @return \GraphQL\Deferred|array
+   * @return Deferred|array
    *   A promise that will return referenced entities or empty array if there
    *   aren't any.
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceRevisions.php b/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceRevisions.php
index b0f9a50..0e3ec55 100644
--- a/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceRevisions.php
+++ b/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceRevisions.php
@@ -66,14 +66,14 @@ class EntityReferenceRevisions extends DataProducerPluginBase implements Contain
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The entity revision buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityRevisionBuffer
+   * @var EntityRevisionBuffer
    */
   protected $entityRevisionBuffer;
 
@@ -101,9 +101,9 @@ class EntityReferenceRevisions extends DataProducerPluginBase implements Contain
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityRevisionBuffer $entityRevisionBuffer
+   * @param EntityRevisionBuffer $entityRevisionBuffer
    *   The entity revision buffer service.
    *
    * @codeCoverageIgnore
@@ -125,7 +125,7 @@ class EntityReferenceRevisions extends DataProducerPluginBase implements Contain
    *
    * May optionally respect the entity bundles and language.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $field
    *   The field of a given entity to get entity reference revisions for.
@@ -135,14 +135,14 @@ class EntityReferenceRevisions extends DataProducerPluginBase implements Contain
    *   Optional. List of bundles to be respected for retrieved entities.
    * @param bool $access
    *   Whether check for access or not. Default is true.
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    *   User entity to check access for. Default is null.
    * @param string $accessOperation
    *   Operation to check access for. Default is view.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The caching context related to the current field.
    *
-   * @return \GraphQL\Deferred|array
+   * @return Deferred|array
    *   A promise that will return referenced entities or empty array if there
    *   aren't any.
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceTrait.php b/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceTrait.php
index 6e33d72..3a5baee 100644
--- a/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceTrait.php
+++ b/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Field;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -25,16 +27,16 @@ trait EntityReferenceTrait {
    *   Optional. List of bundles to be respected for retrieved entities.
    * @param bool $access
    *   Whether to filter out inaccessible entities.
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    *   User entity to check access for. Default is null.
    * @param string $accessOperation
    *   Operation to check access for. Default is view.
    * @param \Closure $resolver
    *   The resolver to execute.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The caching context related to the current field.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The list of references entities.
    */
   protected function getReferencedEntities(string $type, ?string $language, ?array $bundles, bool $access, ?AccountInterface $accessUser, string $accessOperation, \Closure $resolver, FieldContext $context): array {
@@ -54,7 +56,7 @@ trait EntityReferenceTrait {
 
     if (empty($entities)) {
       $type = $this->entityTypeManager->getDefinition($type);
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+      /** @var EntityTypeInterface $type */
       $tags = $type->getListCacheTags();
       $context->addCacheTags($tags);
       return [];
@@ -66,12 +68,12 @@ trait EntityReferenceTrait {
   /**
    * Get the referenced entities in the specified language.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Entities to process.
    * @param string $language
    *   Language to be respected for retrieved entities.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Translated entities.
    */
   private function getTranslated(array $entities, string $language): array {
@@ -87,21 +89,21 @@ trait EntityReferenceTrait {
   /**
    * Filter out not accessible entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Entities to filter.
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    *   User entity to check access for. Default is null.
    * @param string $accessOperation
    *   Operation to check access for. Default is view.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The caching context related to the current field.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Filtered entities.
    */
   private function filterAccessible(array $entities, ?AccountInterface $accessUser, string $accessOperation, FieldContext $context): array {
     return array_filter($entities, function (EntityInterface $entity) use ($accessOperation, $accessUser, $context) {
-      /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+      /** @var AccessResultInterface $accessResult */
       $accessResult = $entity->access($accessOperation, $accessUser, TRUE);
       $context->addCacheableDependency($accessResult);
       if (!$accessResult->isAllowed()) {
diff --git a/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkAttribute.php b/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkAttribute.php
index cff02ef..4175027 100644
--- a/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkAttribute.php
+++ b/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkAttribute.php
@@ -33,7 +33,7 @@ class MenuLinkAttribute extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $link
+   * @param MenuLinkInterface $link
    * @param string $attribute
    *
    * @return mixed
diff --git a/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkDescription.php b/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkDescription.php
index e0c22f1..a88c912 100644
--- a/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkDescription.php
+++ b/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkDescription.php
@@ -29,7 +29,7 @@ class MenuLinkDescription extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $link
+   * @param MenuLinkInterface $link
    *
    * @return mixed
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkExpanded.php b/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkExpanded.php
index 02eadda..8452887 100644
--- a/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkExpanded.php
+++ b/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkExpanded.php
@@ -29,7 +29,7 @@ class MenuLinkExpanded extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $link
+   * @param MenuLinkInterface $link
    *
    * @return bool
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkLabel.php b/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkLabel.php
index 0f2f865..2d0064d 100644
--- a/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkLabel.php
+++ b/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkLabel.php
@@ -29,7 +29,7 @@ class MenuLinkLabel extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $link
+   * @param MenuLinkInterface $link
    *
    * @return mixed
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkUrl.php b/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkUrl.php
index 8526c03..7632144 100644
--- a/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkUrl.php
+++ b/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkUrl.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Menu\MenuLink;
 
+use Drupal\Core\Url;
 use Drupal\Core\Menu\MenuLinkInterface;
 use Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase;
 
@@ -29,9 +30,9 @@ class MenuLinkUrl extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $link
+   * @param MenuLinkInterface $link
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function resolve(MenuLinkInterface $link) {
     return $link->getUrlObject();
diff --git a/src/Plugin/GraphQL/DataProducer/Menu/MenuLinks.php b/src/Plugin/GraphQL/DataProducer/Menu/MenuLinks.php
index fe27ea9..3853d6d 100644
--- a/src/Plugin/GraphQL/DataProducer/Menu/MenuLinks.php
+++ b/src/Plugin/GraphQL/DataProducer/Menu/MenuLinks.php
@@ -38,7 +38,7 @@ class MenuLinks extends DataProducerPluginBase implements ContainerFactoryPlugin
   /**
    * The menu link tree.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuLinkTree;
 
@@ -65,7 +65,7 @@ class MenuLinks extends DataProducerPluginBase implements ContainerFactoryPlugin
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menuLinkTree
+   * @param MenuLinkTreeInterface $menuLinkTree
    *   The menu link tree service.
    *
    * @codeCoverageIgnore
@@ -78,7 +78,7 @@ class MenuLinks extends DataProducerPluginBase implements ContainerFactoryPlugin
   /**
    * Resolver.
    *
-   * @param \Drupal\system\MenuInterface $menu
+   * @param MenuInterface $menu
    *
    * @return array
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Menu/MenuTree/MenuTreeLink.php b/src/Plugin/GraphQL/DataProducer/Menu/MenuTree/MenuTreeLink.php
index 10bdaac..5b76a71 100644
--- a/src/Plugin/GraphQL/DataProducer/Menu/MenuTree/MenuTreeLink.php
+++ b/src/Plugin/GraphQL/DataProducer/Menu/MenuTree/MenuTreeLink.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Menu\MenuTree;
 
+use Drupal\Core\Menu\MenuLinkInterface;
 use Drupal\Core\Menu\MenuLinkTreeElement;
 use Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase;
 
@@ -29,9 +30,9 @@ class MenuTreeLink extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeElement $element
+   * @param MenuLinkTreeElement $element
    *
-   * @return \Drupal\Core\Menu\MenuLinkInterface
+   * @return MenuLinkInterface
    */
   public function resolve(MenuLinkTreeElement $element) {
     return $element->link;
diff --git a/src/Plugin/GraphQL/DataProducer/Menu/MenuTree/MenuTreeSubtree.php b/src/Plugin/GraphQL/DataProducer/Menu/MenuTree/MenuTreeSubtree.php
index a3488fa..5fa805d 100644
--- a/src/Plugin/GraphQL/DataProducer/Menu/MenuTree/MenuTreeSubtree.php
+++ b/src/Plugin/GraphQL/DataProducer/Menu/MenuTree/MenuTreeSubtree.php
@@ -30,9 +30,9 @@ class MenuTreeSubtree extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeElement $element
+   * @param MenuLinkTreeElement $element
    *
-   * @return \Drupal\Core\Menu\MenuLinkTreeElement[]
+   * @return MenuLinkTreeElement[]
    */
   public function resolve(MenuLinkTreeElement $element) {
     return array_filter($element->subtree, function (MenuLinkTreeElement $item) {
diff --git a/src/Plugin/GraphQL/DataProducer/Routing/RouteEntity.php b/src/Plugin/GraphQL/DataProducer/Routing/RouteEntity.php
index 10ea4e6..429b5a1 100644
--- a/src/Plugin/GraphQL/DataProducer/Routing/RouteEntity.php
+++ b/src/Plugin/GraphQL/DataProducer/Routing/RouteEntity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Routing;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TranslatableInterface;
@@ -40,7 +41,7 @@ class RouteEntity extends DataProducerPluginBase implements ContainerFactoryPlug
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -48,7 +49,7 @@ class RouteEntity extends DataProducerPluginBase implements ContainerFactoryPlug
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;
 
@@ -76,9 +77,9 @@ class RouteEntity extends DataProducerPluginBase implements ContainerFactoryPlug
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The language manager service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    *
    * @codeCoverageIgnore
@@ -98,11 +99,11 @@ class RouteEntity extends DataProducerPluginBase implements ContainerFactoryPlug
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Url|mixed $url
+   * @param Url|mixed $url
    *   The URL to get the route entity from.
    * @param string|null $language
    *   The language code to get a translation of the entity.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The GraphQL field context.
    */
   public function resolve($url, ?string $language, FieldContext $context): ?Deferred {
@@ -118,7 +119,7 @@ class RouteEntity extends DataProducerPluginBase implements ContainerFactoryPlug
           // the cache entry is purged whenever a new entity of this type is
           // saved.
           $type = $this->entityTypeManager->getDefinition($type);
-          /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+          /** @var EntityTypeInterface $type */
           $tags = $type->getListCacheTags();
           $context->addCacheTags($tags)->addCacheTags(['4xx-response']);
           return NULL;
diff --git a/src/Plugin/GraphQL/DataProducer/Routing/RouteLoad.php b/src/Plugin/GraphQL/DataProducer/Routing/RouteLoad.php
index 6b40a1a..fbaccee 100644
--- a/src/Plugin/GraphQL/DataProducer/Routing/RouteLoad.php
+++ b/src/Plugin/GraphQL/DataProducer/Routing/RouteLoad.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Routing;
 
+use Drupal\Core\Url;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Path\PathValidatorInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -33,7 +34,7 @@ class RouteLoad extends DataProducerPluginBase implements ContainerFactoryPlugin
   /**
    * The path validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
@@ -68,7 +69,7 @@ class RouteLoad extends DataProducerPluginBase implements ContainerFactoryPlugin
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Path\PathValidatorInterface $pathValidator
+   * @param PathValidatorInterface $pathValidator
    *   The path validator service.
    * @param \Drupal\redirect\RedirectRepository|null $redirectRepository
    *
@@ -90,9 +91,9 @@ class RouteLoad extends DataProducerPluginBase implements ContainerFactoryPlugin
    * Resolver.
    *
    * @param string $path
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param RefinableCacheableDependencyInterface $metadata
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    */
   public function resolve($path, RefinableCacheableDependencyInterface $metadata) {
     if ($this->redirectRepository) {
diff --git a/src/Plugin/GraphQL/DataProducer/Routing/Url/UrlPath.php b/src/Plugin/GraphQL/DataProducer/Routing/Url/UrlPath.php
index 138b18e..8d5cd50 100644
--- a/src/Plugin/GraphQL/DataProducer/Routing/Url/UrlPath.php
+++ b/src/Plugin/GraphQL/DataProducer/Routing/Url/UrlPath.php
@@ -30,8 +30,8 @@ class UrlPath extends DataProducerPluginBase {
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Url $url
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param Url $url
+   * @param RefinableCacheableDependencyInterface $metadata
    *
    * @return string
    */
diff --git a/src/Plugin/GraphQL/DataProducer/Taxonomy/TaxonomyLoadTree.php b/src/Plugin/GraphQL/DataProducer/Taxonomy/TaxonomyLoadTree.php
index 1bcd624..ea809e9 100644
--- a/src/Plugin/GraphQL/DataProducer/Taxonomy/TaxonomyLoadTree.php
+++ b/src/Plugin/GraphQL/DataProducer/Taxonomy/TaxonomyLoadTree.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Taxonomy;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -68,14 +71,14 @@ class TaxonomyLoadTree extends DataProducerPluginBase implements ContainerFactor
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;
 
@@ -103,9 +106,9 @@ class TaxonomyLoadTree extends DataProducerPluginBase implements ContainerFactor
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    *
    * @codeCoverageIgnore
@@ -135,14 +138,14 @@ class TaxonomyLoadTree extends DataProducerPluginBase implements ContainerFactor
    *   Optional. Language to be respected for retrieved entities.
    * @param bool $access
    *   Whether check for access or not. Default is true.
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    *   User entity to check access for. Default is null.
    * @param string $accessOperation
    *   Operation to check access for. Default is view.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The caching context related to the current field.
    *
-   * @return \GraphQL\Deferred|null
+   * @return Deferred|null
    *   A promise that will return entities or NULL if there aren't any.
    */
   public function resolve(string $vid, int $parent, ?int $max_depth, ?string $language, bool $access, ?AccountInterface $accessUser, string $accessOperation, FieldContext $context): ?Deferred {
@@ -158,14 +161,14 @@ class TaxonomyLoadTree extends DataProducerPluginBase implements ContainerFactor
     $resolver = $this->entityBuffer->add('taxonomy_term', $term_ids);
 
     return new Deferred(function () use ($language, $resolver, $context, $access, $accessUser, $accessOperation) {
-      /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
+      /** @var EntityInterface[] $entities */
       $entities = $resolver();
       if (!$entities) {
         // If there is no entity with this id, add the list cache tags so that
         // the cache entry is purged whenever a new entity of this type is
         // saved.
         $type = $this->entityTypeManager->getDefinition('taxonomy_term');
-        /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+        /** @var EntityTypeInterface $type */
         $tags = $type->getListCacheTags();
         $context->addCacheTags($tags);
         return [];
@@ -180,7 +183,7 @@ class TaxonomyLoadTree extends DataProducerPluginBase implements ContainerFactor
         }
 
         if ($access) {
-          /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+          /** @var AccessResultInterface $accessResult */
           $accessResult = $entity->access($accessOperation, $accessUser, TRUE);
           $context->addCacheableDependency($accessResult);
           if (!$accessResult->isAllowed()) {
diff --git a/src/Plugin/GraphQL/DataProducer/Taxonomy/TermFieldAutocomplete.php b/src/Plugin/GraphQL/DataProducer/Taxonomy/TermFieldAutocomplete.php
index 00fa5f8..c585596 100644
--- a/src/Plugin/GraphQL/DataProducer/Taxonomy/TermFieldAutocomplete.php
+++ b/src/Plugin/GraphQL/DataProducer/Taxonomy/TermFieldAutocomplete.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Taxonomy;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -61,35 +62,35 @@ class TermFieldAutocomplete extends DataProducerPluginBase implements ContainerF
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface|null
+   * @var TermStorageInterface|null
    */
   protected $termStorage;
 
   /**
    * The term type.
    *
-   * @var \Drupal\Core\Entity\ContentEntityTypeInterface|null
+   * @var ContentEntityTypeInterface|null
    */
   protected $termType;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -127,12 +128,12 @@ class TermFieldAutocomplete extends DataProducerPluginBase implements ContainerF
   /**
    * Gets the term storage.
    *
-   * @return \Drupal\taxonomy\TermStorageInterface
+   * @return TermStorageInterface
    *   The term storage.
    */
   protected function getTermStorage(): TermStorageInterface {
     if (!isset($this->termStorage)) {
-      /** @var \Drupal\taxonomy\TermStorageInterface $term_storage */
+      /** @var TermStorageInterface $term_storage */
       $term_storage = $this->entityTypeManager->getStorage('taxonomy_term');
       $this->termStorage = $term_storage;
     }
@@ -142,12 +143,12 @@ class TermFieldAutocomplete extends DataProducerPluginBase implements ContainerF
   /**
    * Gets the term type.
    *
-   * @return \Drupal\Core\Entity\ContentEntityTypeInterface
+   * @return ContentEntityTypeInterface
    *   The term type.
    */
   protected function getTermType(): ContentEntityTypeInterface {
     if (!isset($this->termType)) {
-      /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $term_type */
+      /** @var ContentEntityTypeInterface $term_type */
       $term_type = $this->entityTypeManager->getDefinition('taxonomy_term');
       $this->termType = $term_type;
     }
@@ -164,15 +165,15 @@ class TermFieldAutocomplete extends DataProducerPluginBase implements ContainerF
    * @param string $field
    *   Field to get the field config for.
    *
-   * @return \Drupal\field\FieldConfigInterface|null
+   * @return FieldConfigInterface|null
    *   Field config for given field of given entity type of given bundle, or
    *   null if it does not exist.
    */
   protected function getFieldConfig(string $entity_type, string $bundle, string $field): ?FieldConfigInterface {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $field_config_storage */
+    /** @var ConfigEntityStorageInterface $field_config_storage */
     $field_config_storage = $this->entityTypeManager->getStorage('field_config');
 
-    /** @var \Drupal\field\FieldConfigInterface|null $field_config */
+    /** @var FieldConfigInterface|null $field_config */
     $field_config = $field_config_storage->load($entity_type . '.' . $bundle . '.' . $field);
 
     return $field_config;
@@ -181,7 +182,7 @@ class TermFieldAutocomplete extends DataProducerPluginBase implements ContainerF
   /**
    * Whether given field storage config is configured for term field.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_config
+   * @param FieldStorageDefinitionInterface $field_storage_config
    *   The field storage config to be examined.
    *
    * @return bool
@@ -258,7 +259,7 @@ class TermFieldAutocomplete extends DataProducerPluginBase implements ContainerF
    *   Whether terms which start with matching string should come first.
    * @param int $limit
    *   Number of items to be returned.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The caching context related to the current field.
    *
    * @return array
diff --git a/src/Plugin/GraphQL/DataProducer/TypedData/PropertyPath.php b/src/Plugin/GraphQL/DataProducer/TypedData/PropertyPath.php
index 292ed0b..6cf3b3c 100644
--- a/src/Plugin/GraphQL/DataProducer/TypedData/PropertyPath.php
+++ b/src/Plugin/GraphQL/DataProducer/TypedData/PropertyPath.php
@@ -45,7 +45,7 @@ class PropertyPath extends DataProducerPluginBase {
    * @param string $path
    * @param mixed $value
    * @param string|null $type
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param RefinableCacheableDependencyInterface $metadata
    *
    * @return mixed
    */
diff --git a/src/Plugin/GraphQL/DataProducer/User/CurrentUser.php b/src/Plugin/GraphQL/DataProducer/User/CurrentUser.php
index 8f4d6ab..39d434a 100644
--- a/src/Plugin/GraphQL/DataProducer/User/CurrentUser.php
+++ b/src/Plugin/GraphQL/DataProducer/User/CurrentUser.php
@@ -25,7 +25,7 @@ class CurrentUser extends DataProducerPluginBase implements ContainerFactoryPlug
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -50,7 +50,7 @@ class CurrentUser extends DataProducerPluginBase implements ContainerFactoryPlug
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, string $plugin_id, array $plugin_definition, AccountInterface $current_user) {
@@ -61,10 +61,10 @@ class CurrentUser extends DataProducerPluginBase implements ContainerFactoryPlug
   /**
    * Returns current user.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field_context
+   * @param FieldContext $field_context
    *   Field context.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The current user.
    */
   public function resolve(FieldContext $field_context): AccountInterface {
diff --git a/src/Plugin/GraphQL/DataProducer/User/PasswordReset.php b/src/Plugin/GraphQL/DataProducer/User/PasswordReset.php
index ab08fbf..e53ae8d 100644
--- a/src/Plugin/GraphQL/DataProducer/User/PasswordReset.php
+++ b/src/Plugin/GraphQL/DataProducer/User/PasswordReset.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\User;
 
+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -33,14 +34,14 @@ class PasswordReset extends DataProducerPluginBase implements ContainerFactoryPl
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;
 
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
@@ -48,9 +49,9 @@ class PasswordReset extends DataProducerPluginBase implements ContainerFactoryPl
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Symfony\Component\HttpFoundation\RequestStack $request_stack */
+    /** @var RequestStack $request_stack */
     $request_stack = $container->get('request_stack');
-    /** @var \Drupal\Core\Logger\LoggerChannelInterface $logger */
+    /** @var LoggerChannelInterface $logger */
     $logger = $container->get('logger.channel.graphql');
     return new static(
       $configuration,
@@ -70,9 +71,9 @@ class PasswordReset extends DataProducerPluginBase implements ContainerFactoryPl
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\Request $current_request
+   * @param Request $current_request
    *   The current request.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger service.
    */
   public function __construct(
@@ -93,7 +94,7 @@ class PasswordReset extends DataProducerPluginBase implements ContainerFactoryPl
    * @param string $email
    *   The email address to reset the password for.
    *
-   * @return \Drupal\graphql\GraphQL\Response\ResponseInterface
+   * @return ResponseInterface
    *   Response for password reset mutation with violations in case of failure.
    */
   public function resolve(string $email): ResponseInterface {
diff --git a/src/Plugin/GraphQL/Schema/SdlSchemaPluginBase.php b/src/Plugin/GraphQL/Schema/SdlSchemaPluginBase.php
index 47d1e7f..034d149 100644
--- a/src/Plugin/GraphQL/Schema/SdlSchemaPluginBase.php
+++ b/src/Plugin/GraphQL/Schema/SdlSchemaPluginBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\Schema;
 
+use GraphQL\Error\SyntaxError;
+use GraphQL\Error\Error;
+use GraphQL\Language\AST\DocumentNode;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -30,7 +33,7 @@ abstract class SdlSchemaPluginBase extends PluginBase implements SchemaPluginInt
   /**
    * The cache bin for caching the parsed SDL.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $astCache;
 
@@ -44,14 +47,14 @@ abstract class SdlSchemaPluginBase extends PluginBase implements SchemaPluginInt
   /**
    * The schema extension plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaExtensionPluginManager
+   * @var SchemaExtensionPluginManager
    */
   protected $extensionManager;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -81,11 +84,11 @@ abstract class SdlSchemaPluginBase extends PluginBase implements SchemaPluginInt
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $astCache
+   * @param CacheBackendInterface $astCache
    *   The cache bin for caching the parsed SDL.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler service.
-   * @param \Drupal\graphql\Plugin\SchemaExtensionPluginManager $extensionManager
+   * @param SchemaExtensionPluginManager $extensionManager
    *   The schema extension plugin manager.
    * @param array $config
    *   The service configuration.
@@ -111,9 +114,9 @@ abstract class SdlSchemaPluginBase extends PluginBase implements SchemaPluginInt
   /**
    * {@inheritdoc}
    *
-   * @throws \GraphQL\Error\SyntaxError
-   * @throws \GraphQL\Error\Error
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws SyntaxError
+   * @throws Error
+   * @throws InvalidPluginDefinitionException
    */
   public function getSchema(ResolverRegistryInterface $registry) {
     $extensions = $this->getExtensions();
@@ -143,7 +146,7 @@ abstract class SdlSchemaPluginBase extends PluginBase implements SchemaPluginInt
   }
 
   /**
-   * @return \Drupal\graphql\Plugin\SchemaExtensionPluginInterface[]
+   * @return SchemaExtensionPluginInterface[]
    */
   protected function getExtensions() {
     return $this->extensionManager->getExtensions($this->getPluginId());
@@ -154,11 +157,11 @@ abstract class SdlSchemaPluginBase extends PluginBase implements SchemaPluginInt
    *
    * @param array $extensions
    *
-   * @return \GraphQL\Language\AST\DocumentNode
+   * @return DocumentNode
    *   The parsed schema document.
    *
-   * @throws \GraphQL\Error\SyntaxError
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws SyntaxError
+   * @throws InvalidPluginDefinitionException
    */
   protected function getSchemaDocument(array $extensions = []) {
     // Only use caching of the parsed document if we aren't in development mode.
@@ -187,10 +190,10 @@ abstract class SdlSchemaPluginBase extends PluginBase implements SchemaPluginInt
    *
    * @param array $extensions
    *
-   * @return \GraphQL\Language\AST\DocumentNode|null
+   * @return DocumentNode|null
    *   The parsed schema document.
    *
-   * @throws \GraphQL\Error\SyntaxError
+   * @throws SyntaxError
    */
   protected function getExtensionDocument(array $extensions = []) {
     // Only use caching of the parsed document if we aren't in development mode.
@@ -219,7 +222,7 @@ abstract class SdlSchemaPluginBase extends PluginBase implements SchemaPluginInt
    * @return string
    *   The schema definition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getSchemaDefinition() {
     $id = $this->getPluginId();
diff --git a/src/Plugin/GraphQL/SchemaExtension/SdlSchemaExtensionPluginBase.php b/src/Plugin/GraphQL/SchemaExtension/SdlSchemaExtensionPluginBase.php
index 8a08711..f265a4a 100644
--- a/src/Plugin/GraphQL/SchemaExtension/SdlSchemaExtensionPluginBase.php
+++ b/src/Plugin/GraphQL/SchemaExtension/SdlSchemaExtensionPluginBase.php
@@ -17,7 +17,7 @@ abstract class SdlSchemaExtensionPluginBase extends PluginBase implements Schema
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -44,7 +44,7 @@ abstract class SdlSchemaExtensionPluginBase extends PluginBase implements Schema
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler service.
    *
    * @codeCoverageIgnore
@@ -62,7 +62,7 @@ abstract class SdlSchemaExtensionPluginBase extends PluginBase implements Schema
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function getBaseDefinition() {
     return $this->loadDefinitionFile('base');
@@ -71,7 +71,7 @@ abstract class SdlSchemaExtensionPluginBase extends PluginBase implements Schema
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function getExtensionDefinition() {
     return $this->loadDefinitionFile('extension');
@@ -86,7 +86,7 @@ abstract class SdlSchemaExtensionPluginBase extends PluginBase implements Schema
    * @return string|null
    *   The loaded definition file content or NULL if it was empty.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function loadDefinitionFile($type) {
     $id = $this->getPluginId();
diff --git a/src/Plugin/LanguageNegotiation/OperationLanguageNegotiation.php b/src/Plugin/LanguageNegotiation/OperationLanguageNegotiation.php
index 421a8ea..f5d702d 100644
--- a/src/Plugin/LanguageNegotiation/OperationLanguageNegotiation.php
+++ b/src/Plugin/LanguageNegotiation/OperationLanguageNegotiation.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\LanguageNegotiation;
 
+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\graphql\GraphQL\Execution\ResolveContext;
 use Drupal\language\LanguageNegotiationMethodBase;
 use Symfony\Component\HttpFoundation\Request;
@@ -26,14 +27,14 @@ class OperationLanguageNegotiation extends LanguageNegotiationMethodBase {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The current execution context.
    *
-   * @var \Drupal\graphql\GraphQL\Execution\ResolveContext|null
+   * @var ResolveContext|null
    */
   protected static $context;
 
@@ -51,7 +52,7 @@ class OperationLanguageNegotiation extends LanguageNegotiationMethodBase {
   /**
    * Set the current resolve context statically which contains the language.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    */
   public static function setContext(ResolveContext $context = NULL): void {
     static::$context = $context;
diff --git a/src/Plugin/PersistedQueryPluginInterface.php b/src/Plugin/PersistedQueryPluginInterface.php
index f220c51..acfcd5a 100644
--- a/src/Plugin/PersistedQueryPluginInterface.php
+++ b/src/Plugin/PersistedQueryPluginInterface.php
@@ -16,7 +16,7 @@ interface PersistedQueryPluginInterface extends ConfigurableInterface, PluginIns
    *
    * @param string $id
    *   ID of the persisted query.
-   * @param \GraphQL\Server\OperationParams $operation
+   * @param OperationParams $operation
    *   The operation with parameters.
    *
    * @return string|null
diff --git a/src/Plugin/PersistedQueryPluginManager.php b/src/Plugin/PersistedQueryPluginManager.php
index 2d11f08..e825e67 100644
--- a/src/Plugin/PersistedQueryPluginManager.php
+++ b/src/Plugin/PersistedQueryPluginManager.php
@@ -19,9 +19,9 @@ class PersistedQueryPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $definitionCacheBackend
+   * @param CacheBackendInterface $definitionCacheBackend
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
    * @param string $pluginAnnotationName
diff --git a/src/Plugin/SchemaExtensionPluginInterface.php b/src/Plugin/SchemaExtensionPluginInterface.php
index 234aa19..0ae3d6d 100644
--- a/src/Plugin/SchemaExtensionPluginInterface.php
+++ b/src/Plugin/SchemaExtensionPluginInterface.php
@@ -14,7 +14,7 @@ interface SchemaExtensionPluginInterface extends PluginInspectionInterface, Deri
   /**
    * Registers type and field resolvers in the shared registry.
    *
-   * @param \Drupal\graphql\GraphQL\ResolverRegistryInterface $registry
+   * @param ResolverRegistryInterface $registry
    *   The resolver registry.
    */
   public function registerResolvers(ResolverRegistryInterface $registry);
diff --git a/src/Plugin/SchemaExtensionPluginManager.php b/src/Plugin/SchemaExtensionPluginManager.php
index 61abbf9..03deeb3 100644
--- a/src/Plugin/SchemaExtensionPluginManager.php
+++ b/src/Plugin/SchemaExtensionPluginManager.php
@@ -18,7 +18,7 @@ class SchemaExtensionPluginManager extends DefaultPluginManager {
   /**
    * Static cache of plugin instances per schema plugin.
    *
-   * @var \Drupal\graphql\Plugin\SchemaExtensionPluginInterface[][]
+   * @var SchemaExtensionPluginInterface[][]
    */
   protected $extensions;
 
@@ -30,9 +30,9 @@ class SchemaExtensionPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
@@ -69,7 +69,7 @@ class SchemaExtensionPluginManager extends DefaultPluginManager {
    * @param string $id
    *   The id of the schema plugin to retrieve the extensions for.
    *
-   * @return \Drupal\graphql\Plugin\SchemaExtensionPluginInterface[]
+   * @return SchemaExtensionPluginInterface[]
    */
   public function getExtensions($id) {
     if (!isset($this->extensions[$id])) {
diff --git a/src/Plugin/SchemaPluginInterface.php b/src/Plugin/SchemaPluginInterface.php
index d13c1e7..43ee2ef 100644
--- a/src/Plugin/SchemaPluginInterface.php
+++ b/src/Plugin/SchemaPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin;
 
+use GraphQL\Type\Schema;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\graphql\GraphQL\ResolverRegistryInterface;
@@ -17,10 +18,10 @@ interface SchemaPluginInterface extends PluginInspectionInterface, DerivativeIns
   /**
    * Retrieves the schema.
    *
-   * @param \Drupal\graphql\GraphQL\ResolverRegistryInterface $registry
+   * @param ResolverRegistryInterface $registry
    *   The resolver registry.
    *
-   * @return \GraphQL\Type\Schema
+   * @return Schema
    *   The schema.
    */
   public function getSchema(ResolverRegistryInterface $registry);
@@ -30,7 +31,7 @@ interface SchemaPluginInterface extends PluginInspectionInterface, DerivativeIns
    *
    * @todo Instead, this should be configuration.
    *
-   * @return \Drupal\graphql\GraphQL\ResolverRegistryInterface
+   * @return ResolverRegistryInterface
    *   The resolver registry.
    */
   public function getResolverRegistry();
diff --git a/src/Plugin/SchemaPluginManager.php b/src/Plugin/SchemaPluginManager.php
index 2168ead..3c4ea7a 100644
--- a/src/Plugin/SchemaPluginManager.php
+++ b/src/Plugin/SchemaPluginManager.php
@@ -23,9 +23,9 @@ class SchemaPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
diff --git a/src/RouteProvider.php b/src/RouteProvider.php
index b8692fe..6689a06 100644
--- a/src/RouteProvider.php
+++ b/src/RouteProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql;
 
+use Drupal\graphql\Entity\ServerInterface;
 use Drupal\Core\Authentication\AuthenticationCollectorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\Routing\Route;
@@ -14,23 +15,23 @@ class RouteProvider {
   /**
    * The authentication collector service.
    *
-   * @var \Drupal\Core\Authentication\AuthenticationCollectorInterface
+   * @var AuthenticationCollectorInterface
    */
   protected $authenticationCollector;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * RouteProvider constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Authentication\AuthenticationCollectorInterface $authenticationCollector
+   * @param AuthenticationCollectorInterface $authenticationCollector
    *   The authentication collector service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, AuthenticationCollectorInterface $authenticationCollector) {
@@ -43,7 +44,7 @@ class RouteProvider {
    */
   public function routes(): array {
     $storage = $this->entityTypeManager->getStorage('graphql_server');
-    /** @var \Drupal\graphql\Entity\ServerInterface[] $servers */
+    /** @var ServerInterface[] $servers */
     $servers = $storage->loadMultiple();
     $routes = [];
 
diff --git a/src/Routing/QueryRouteEnhancer.php b/src/Routing/QueryRouteEnhancer.php
index f2508ed..bab8cfc 100644
--- a/src/Routing/QueryRouteEnhancer.php
+++ b/src/Routing/QueryRouteEnhancer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Routing;
 
+use GraphQL\Server\RequestError;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Routing\EnhancerInterface;
 use Drupal\Core\Routing\RouteObjectInterface;
@@ -18,7 +19,7 @@ class QueryRouteEnhancer implements EnhancerInterface {
   /**
    * Returns whether the enhancer runs on the current route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The current route.
    *
    * @return bool
@@ -30,7 +31,7 @@ class QueryRouteEnhancer implements EnhancerInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \GraphQL\Server\RequestError
+   * @throws RequestError
    */
   public function enhance(array $defaults, Request $request) {
     $route = $defaults[RouteObjectInterface::ROUTE_OBJECT];
@@ -50,7 +51,7 @@ class QueryRouteEnhancer implements EnhancerInterface {
   /**
    * Extracts the query parameters from a request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The http request object.
    *
    * @return array
@@ -63,7 +64,7 @@ class QueryRouteEnhancer implements EnhancerInterface {
   /**
    * Extracts the body parameters from a request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The http request object.
    *
    * @return array
@@ -87,7 +88,7 @@ class QueryRouteEnhancer implements EnhancerInterface {
   /**
    * Handles file uploads from multipart/form-data requests.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param array $values
    *   The request body values.
diff --git a/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageDerivativeTest.php b/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageDerivativeTest.php
index cfd9263..1c52b89 100644
--- a/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageDerivativeTest.php
+++ b/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageDerivativeTest.php
@@ -28,9 +28,7 @@ class ImageDerivativeTest extends GraphQLTestBase {
 
     $this->file_uri = 'public://test.jpg';
 
-    $this->file = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->file = $this->createMock(FileInterface::class);
 
     $this->file->method('getFileUri')->willReturn($this->file_uri);
     $this->file->method('access')->willReturn((new AccessResultAllowed())->addCacheTags(['test_tag']));
@@ -49,9 +47,7 @@ class ImageDerivativeTest extends GraphQLTestBase {
     $this->style->addImageEffect($effect);
     $this->style->save();
 
-    $this->file_not_accessible = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->file_not_accessible = $this->createMock(FileInterface::class);
 
     $this->file_not_accessible->method('access')->willReturn((new AccessResultForbidden())->addCacheTags(['test_tag_forbidden']));
   }
diff --git a/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageUrlTest.php b/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageUrlTest.php
index 705da43..5a18c31 100644
--- a/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageUrlTest.php
+++ b/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageUrlTest.php
@@ -23,16 +23,12 @@ class ImageUrlTest extends GraphQLTestBase {
 
     $this->fileUri = \Drupal::service('file_url_generator')->generateAbsoluteString('public://test.jpg');
 
-    $this->file = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->file = $this->createMock(FileInterface::class);
 
     $this->file->method('getFileUri')->willReturn($this->fileUri);
     $this->file->method('access')->willReturn((new AccessResultAllowed())->addCacheTags(['test_tag']));
 
-    $this->file_not_accessible = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->file_not_accessible = $this->createMock(FileInterface::class);
 
     $this->file_not_accessible->method('access')->willReturn((new AccessResultForbidden())->addCacheTags(['test_tag_forbidden']));
   }
diff --git a/tests/src/Kernel/DataProducer/EntityMultipleTest.php b/tests/src/Kernel/DataProducer/EntityMultipleTest.php
index a363526..c06a87c 100644
--- a/tests/src/Kernel/DataProducer/EntityMultipleTest.php
+++ b/tests/src/Kernel/DataProducer/EntityMultipleTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\DataProducer;
 
+use Drupal\graphql\Plugin\DataProducerPluginManager;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -17,22 +18,22 @@ use Drupal\node\Entity\Node;
 class EntityMultipleTest extends GraphQLTestBase {
 
   /**
-   * @var \Drupal\graphql\Plugin\DataProducerPluginManager
+   * @var DataProducerPluginManager
    */
   protected $dataProducerManager;
 
   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node1;
 
   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node2;
 
   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node3;
 
@@ -42,17 +43,11 @@ class EntityMultipleTest extends GraphQLTestBase {
   public function setUp(): void {
     parent::setUp();
 
-    $this->entity = $this->getMockBuilder(NodeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(NodeInterface::class);
 
-    $this->entity_interface = $this->getMockBuilder(EntityInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity_interface = $this->createMock(EntityInterface::class);
 
-    $this->user = $this->getMockBuilder(UserInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->user = $this->createMock(UserInterface::class);
 
     $content_type = NodeType::create([
       'type' => 'lorem',
diff --git a/tests/src/Kernel/DataProducer/EntityReferenceTest.php b/tests/src/Kernel/DataProducer/EntityReferenceTest.php
index 3197dd8..1b758f5 100644
--- a/tests/src/Kernel/DataProducer/EntityReferenceTest.php
+++ b/tests/src/Kernel/DataProducer/EntityReferenceTest.php
@@ -25,17 +25,11 @@ class EntityReferenceTest extends GraphQLTestBase {
   public function setUp(): void {
     parent::setUp();
 
-    $this->entity = $this->getMockBuilder(NodeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(NodeInterface::class);
 
-    $this->entity_interface = $this->getMockBuilder(EntityInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity_interface = $this->createMock(EntityInterface::class);
 
-    $this->user = $this->getMockBuilder(UserInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->user = $this->createMock(UserInterface::class);
 
     $content_type1 = NodeType::create([
       'type' => 'test1',
diff --git a/tests/src/Kernel/DataProducer/EntityTest.php b/tests/src/Kernel/DataProducer/EntityTest.php
index 7edd596..12557ec 100644
--- a/tests/src/Kernel/DataProducer/EntityTest.php
+++ b/tests/src/Kernel/DataProducer/EntityTest.php
@@ -20,7 +20,7 @@ use Drupal\entity_test\Entity\EntityTestBundle;
 class EntityTest extends GraphQLTestBase {
 
   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -30,17 +30,11 @@ class EntityTest extends GraphQLTestBase {
   public function setUp(): void {
     parent::setUp();
 
-    $this->entity = $this->getMockBuilder(NodeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(NodeInterface::class);
 
-    $this->entity_interface = $this->getMockBuilder(EntityInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity_interface = $this->createMock(EntityInterface::class);
 
-    $this->user = $this->getMockBuilder(UserInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->user = $this->createMock(UserInterface::class);
 
     $content_type = NodeType::create([
       'type' => 'lorem',
@@ -130,9 +124,7 @@ class EntityTest extends GraphQLTestBase {
    * @covers \Drupal\graphql\Plugin\GraphQL\DataProducer\Entity\EntityDescription::resolve
    */
   public function testResolveDescription(): void {
-    $entity = $this->getMockBuilder(EntityTestBundle::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity = $this->createMock(EntityTestBundle::class);
 
     $entity->expects($this->once())
       ->method('getDescription')
@@ -173,9 +165,7 @@ class EntityTest extends GraphQLTestBase {
    * @covers \Drupal\graphql\Plugin\GraphQL\DataProducer\Entity\EntityLanguage::resolve
    */
   public function testResolveLanguage(): void {
-    $language = $this->getMockBuilder(LanguageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language = $this->createMock(LanguageInterface::class);
 
     $this->entity->expects($this->once())
       ->method('language')
@@ -273,9 +263,7 @@ class EntityTest extends GraphQLTestBase {
    * @covers \Drupal\graphql\Plugin\GraphQL\DataProducer\Entity\EntityUrl::resolve
    */
   public function testResolveUrl(): void {
-    $url = $this->getMockBuilder(Url::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock(Url::class);
 
     $this->entity->expects($this->once())
       ->method('toUrl')
diff --git a/tests/src/Kernel/DataProducer/MenuTest.php b/tests/src/Kernel/DataProducer/MenuTest.php
index 7dcb0c9..2a65454 100644
--- a/tests/src/Kernel/DataProducer/MenuTest.php
+++ b/tests/src/Kernel/DataProducer/MenuTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\DataProducer;
 
+use Drupal\Core\Menu\MenuLinkManagerInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 use Drupal\system\Entity\Menu;
 use Drupal\menu_link_content\Entity\MenuLinkContent;
@@ -16,7 +17,7 @@ use Drupal\Core\Menu\MenuLinkTreeElement;
 class MenuTest extends GraphQLTestBase {
 
   /**
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $menuLinkManager;
 
diff --git a/tests/src/Kernel/EntityBufferTest.php b/tests/src/Kernel/EntityBufferTest.php
index 8637fa6..3031f27 100644
--- a/tests/src/Kernel/EntityBufferTest.php
+++ b/tests/src/Kernel/EntityBufferTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
 
@@ -18,7 +19,7 @@ class EntityBufferTest extends GraphQLTestBase {
   protected $nodeIds = [];
 
   /**
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $entityBuffer;
 
diff --git a/tests/src/Kernel/EntityUuidBufferTest.php b/tests/src/Kernel/EntityUuidBufferTest.php
index e129e20..d62a3f7 100644
--- a/tests/src/Kernel/EntityUuidBufferTest.php
+++ b/tests/src/Kernel/EntityUuidBufferTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
 
@@ -18,7 +19,7 @@ class EntityUuidBufferTest extends GraphQLTestBase {
   protected $nodeUuids = [];
 
   /**
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $entityBuffer;
 
diff --git a/tests/src/Kernel/Framework/InvalidPayloadTest.php b/tests/src/Kernel/Framework/InvalidPayloadTest.php
index 47d9b17..910f7e9 100644
--- a/tests/src/Kernel/Framework/InvalidPayloadTest.php
+++ b/tests/src/Kernel/Framework/InvalidPayloadTest.php
@@ -29,6 +29,7 @@ GQL;
 
   /**
    * Tests the empty payload.
+   * @doesNotPerformAssertions
    */
   public function testEmptyPayload(): void {
     $request = Request::create('/graphql/test', 'POST', [], [], [], [], '{ invalid');
diff --git a/tests/src/Kernel/Framework/PersistedQueriesTest.php b/tests/src/Kernel/Framework/PersistedQueriesTest.php
index 43daeb2..a51fd89 100644
--- a/tests/src/Kernel/Framework/PersistedQueriesTest.php
+++ b/tests/src/Kernel/Framework/PersistedQueriesTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\Framework;
 
+use Drupal\graphql\Plugin\DataProducerPluginManager;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 
 /**
@@ -45,7 +46,7 @@ GQL;
     $this->mockResolver('Link', 'url', 'https://www.ecosia.org');
     $this->mockResolver('Link', 'title', 'Ecosia');
 
-    /** @var \Drupal\graphql\Plugin\DataProducerPluginManager $manager */
+    /** @var DataProducerPluginManager $manager */
     $manager = $this->container->get('plugin.manager.graphql.persisted_query');
 
     $this->plugin_one = $manager->createInstance('persisted_query_plugin_one');
diff --git a/tests/src/Kernel/Framework/ResultCacheTest.php b/tests/src/Kernel/Framework/ResultCacheTest.php
index bef53bd..7b24580 100644
--- a/tests/src/Kernel/Framework/ResultCacheTest.php
+++ b/tests/src/Kernel/Framework/ResultCacheTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\graphql\Kernel\Framework;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\MethodProphecy;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Cache\Context\ContextCacheKeys;
 use Drupal\Core\Render\RenderContext;
@@ -19,6 +22,7 @@ use GraphQL\Deferred;
  */
 class ResultCacheTest extends GraphQLTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -228,7 +232,7 @@ GQL;
       ->willReturn(new ContextCacheKeys([]));
 
     // Store the method prophecy so we can replace the result on the fly.
-    /** @var \Prophecy\Prophecy\MethodProphecy $contextKeys */
+    /** @var MethodProphecy $contextKeys */
     $contextKeys = $contextManager->convertTokensToKeys($hasContext);
 
     $this->mockResolver('Query', 'root',
@@ -317,7 +321,7 @@ GQL;
    * resolvers. Should still be added to the processors result.
    */
   public function testLeakingCacheMetadata(): void {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');
 
     $this->mockResolver('Query', 'leakA',
diff --git a/tests/src/Kernel/Framework/UploadFileServiceTest.php b/tests/src/Kernel/Framework/UploadFileServiceTest.php
index c3f6d8d..d2d5356 100644
--- a/tests/src/Kernel/Framework/UploadFileServiceTest.php
+++ b/tests/src/Kernel/Framework/UploadFileServiceTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\Framework;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Lock\LockBackendInterface;
 use Drupal\graphql\GraphQL\Utility\FileUpload;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
@@ -15,6 +16,7 @@ use Symfony\Component\HttpFoundation\File\UploadedFile;
  */
 class UploadFileServiceTest extends GraphQLTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -23,7 +25,7 @@ class UploadFileServiceTest extends GraphQLTestBase {
   /**
    * The FileUpload object we want to test, gets prepared in setUp().
    *
-   * @var \Drupal\graphql\GraphQL\Utility\FileUpload
+   * @var FileUpload
    */
   protected $uploadService;
 
diff --git a/tests/src/Kernel/GraphQLTestBase.php b/tests/src/Kernel/GraphQLTestBase.php
index 3c77569..4e2b1de 100644
--- a/tests/src/Kernel/GraphQLTestBase.php
+++ b/tests/src/Kernel/GraphQLTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel;
 
+use Drupal\graphql\Entity\Server;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\PageCache\ChainRequestPolicy;
 use Drupal\Core\PageCache\RequestPolicy\NoSessionOpen;
@@ -32,7 +33,7 @@ abstract class GraphQLTestBase extends KernelTestBase {
   /**
    * The server under test.
    *
-   * @var \Drupal\graphql\Entity\Server|null
+   * @var Server|null
    */
   protected $server;
 
@@ -54,7 +55,7 @@ abstract class GraphQLTestBase extends KernelTestBase {
   ];
 
   /**
-   * @var \Drupal\graphql\GraphQL\ResolverBuilder
+   * @var ResolverBuilder
    */
   protected $builder;
 
diff --git a/tests/src/Kernel/ResolverBuilderTest.php b/tests/src/Kernel/ResolverBuilderTest.php
index dd4808e..76e039b 100644
--- a/tests/src/Kernel/ResolverBuilderTest.php
+++ b/tests/src/Kernel/ResolverBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel;
 
+use Drupal\graphql_resolver_builder_test\Plugin\DataType\Tree;
 use GraphQL\Deferred;
 use Drupal\graphql\GraphQL\Resolver\ResolverInterface;
 
@@ -130,10 +131,10 @@ GQL;
   public function testFromPath(): void {
     $manager = $this->container->get('typed_data_manager');
     $tree_definition = $manager->createDataDefinition('tree');
-    /** @var \Drupal\graphql_resolver_builder_test\Plugin\DataType\Tree $right */
+    /** @var Tree $right */
     $right = $manager->create($tree_definition);
     $right->set('value', 'Front page');
-    /** @var \Drupal\graphql_resolver_builder_test\Plugin\DataType\Tree $tree */
+    /** @var Tree $tree */
     $tree = $manager->create($tree_definition);
     $tree->set('left', [
       'value' => '<front>',
diff --git a/tests/src/Traits/DataProducerExecutionTrait.php b/tests/src/Traits/DataProducerExecutionTrait.php
index 6e43ac6..da8d39b 100644
--- a/tests/src/Traits/DataProducerExecutionTrait.php
+++ b/tests/src/Traits/DataProducerExecutionTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\graphql\Traits;
 
+use Drupal\graphql\Plugin\DataProducerPluginManager;
+use Drupal\graphql\Plugin\DataProducerPluginInterface;
 use Drupal\graphql\GraphQL\Execution\FieldContext;
 use GraphQL\Executor\Promise\Adapter\SyncPromise;
 use GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter;
@@ -19,10 +21,10 @@ trait DataProducerExecutionTrait {
    * @return mixed
    */
   protected function executeDataProducer($id, array $contexts = []) {
-    /** @var \Drupal\graphql\Plugin\DataProducerPluginManager $manager */
+    /** @var DataProducerPluginManager $manager */
     $manager = $this->container->get('plugin.manager.graphql.data_producer');
 
-    /** @var \Drupal\graphql\Plugin\DataProducerPluginInterface $plugin */
+    /** @var DataProducerPluginInterface $plugin */
     $plugin = $manager->createInstance($id);
     foreach ($contexts as $key => $value) {
       $plugin->setContextValue($key, $value);
diff --git a/tests/src/Traits/HttpRequestTrait.php b/tests/src/Traits/HttpRequestTrait.php
index 69fd4e1..a2b5997 100644
--- a/tests/src/Traits/HttpRequestTrait.php
+++ b/tests/src/Traits/HttpRequestTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Traits;
 
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\graphql\Entity\Server;
 use Drupal\graphql\Entity\ServerInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ -14,7 +15,7 @@ trait HttpRequestTrait {
   /**
    * The default server.
    *
-   * @var \Drupal\graphql\Entity\Server
+   * @var Server
    */
   protected $server;
 
@@ -23,7 +24,7 @@ trait HttpRequestTrait {
    *
    * @param string $query
    *   The query string.
-   * @param \Drupal\graphql\Entity\Server|null $server
+   * @param Server|null $server
    *   The server instance.
    * @param array $variables
    *   Query variables.
@@ -34,7 +35,7 @@ trait HttpRequestTrait {
    * @param string $method
    *   Method, GET or POST.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response object.
    */
   protected function query($query, $server = NULL, array $variables = [], array $extensions = NULL, $persisted = FALSE, string $method = Request::METHOD_GET) {
@@ -67,10 +68,10 @@ trait HttpRequestTrait {
    *
    * @param array[] $queries
    *   A set of queries to be executed in one go.
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The server instance.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response object.
    */
   protected function batchedQueries(array $queries, ServerInterface $server = NULL) {
diff --git a/tests/src/Traits/MockingTrait.php b/tests/src/Traits/MockingTrait.php
index ec70b70..ab19e39 100644
--- a/tests/src/Traits/MockingTrait.php
+++ b/tests/src/Traits/MockingTrait.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\Tests\graphql\Traits;
 
+use Drupal\graphql\Entity\ServerInterface;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\graphql\Plugin\SchemaPluginInterface;
+use Drupal\graphql\Plugin\DataProducerPluginManager;
+use PHPUnit\Framework\MockObject\Stub\ReturnCallback;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\graphql\Plugin\SchemaExtensionPluginInterface;
 use Drupal\graphql\GraphQL\Resolver\Callback;
 use Drupal\graphql\GraphQL\Resolver\ResolverInterface;
 use Drupal\graphql\GraphQL\Resolver\Value;
@@ -19,27 +26,27 @@ trait MockingTrait {
   use RandomGeneratorTrait;
 
   /**
-   * @var \Drupal\graphql\Entity\ServerInterface
+   * @var ServerInterface
    */
   protected $server;
 
   /**
-   * @var \Drupal\graphql\GraphQL\ResolverRegistry
+   * @var ResolverRegistry
    */
   protected $registry;
 
   /**
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\graphql\Plugin\SchemaPluginInterface
+   * @var MockObject|SchemaPluginInterface
    */
   protected $schema;
 
   /**
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\graphql\Plugin\SchemaPluginManager
+   * @var MockObject|SchemaPluginManager
    */
   protected $schemaPluginManager;
 
   /**
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\graphql\Plugin\DataProducerPluginManager
+   * @var MockObject|DataProducerPluginManager
    */
   protected $dataProducerPluginManager;
 
@@ -49,7 +56,7 @@ trait MockingTrait {
    * @param mixed $value
    *   The return value. Can also be a value callback.
    *
-   * @return \PHPUnit\Framework\MockObject\Stub\ReturnCallback
+   * @return ReturnCallback
    *   The return callback promise.
    */
   protected function toPromise($value) {
@@ -66,7 +73,7 @@ trait MockingTrait {
    * @param mixed $scope
    *   The resolver's bound object and class scope.
    *
-   * @return \PHPUnit\Framework\MockObject\Stub\ReturnCallback
+   * @return ReturnCallback
    *   The return callback promise.
    */
   protected function toBoundPromise($value, $scope) {
@@ -101,7 +108,7 @@ trait MockingTrait {
    * @param string $endpoint
    * @param array $values
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createTestServer($schema, $endpoint, array $values = []): void {
     $this->server = Server::create([
@@ -120,11 +127,11 @@ trait MockingTrait {
    *   The schema id.
    * @param string $schema
    *   The schema.
-   * @param \Drupal\graphql\Plugin\SchemaExtensionPluginInterface[] $extensions
+   * @param SchemaExtensionPluginInterface[] $extensions
    *   An array of schema extension plugins.
    */
   protected function mockSchema($id, $schema, array $extensions = []): void {
-    /** @var \PHPUnit\Framework\MockObject\MockObject $extensionManager */
+    /** @var MockObject $extensionManager */
     $extensionManager = $this->getMockBuilder(SchemaExtensionPluginManager::class)
       ->disableOriginalConstructor()
       ->setMethods(['getExtensions'])
@@ -163,9 +170,7 @@ trait MockingTrait {
    * @param string $id
    */
   protected function mockSchemaPluginManager($id): void {
-    $this->schemaPluginManager = $this->getMockBuilder(SchemaPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->schemaPluginManager = $this->createMock(SchemaPluginManager::class);
 
     $this->schemaPluginManager->expects($this->any())
       ->method('getDefinitions')
@@ -186,7 +191,7 @@ trait MockingTrait {
    *   Parent Type.
    * @param string $field
    *   Field name.
-   * @param mixed|\Drupal\graphql\GraphQL\Resolver\ResolverInterface $resolver
+   * @param mixed|ResolverInterface $resolver
    *   Resolver.
    */
   protected function mockResolver($type, $field, $resolver = NULL): void {
diff --git a/tests/src/Traits/QueryResultAssertionTrait.php b/tests/src/Traits/QueryResultAssertionTrait.php
index 6917103..48a7112 100644
--- a/tests/src/Traits/QueryResultAssertionTrait.php
+++ b/tests/src/Traits/QueryResultAssertionTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Traits;
 
+use Drupal\graphql\Entity\ServerInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Render\RenderContext;
 use Drupal\Core\Render\RendererInterface;
@@ -14,12 +15,12 @@ use GraphQL\Server\OperationParams;
 trait QueryResultAssertionTrait {
 
   /**
-   * @var \Drupal\graphql\Entity\ServerInterface
+   * @var ServerInterface
    */
   protected $server;
 
   /**
-   * @var \Drupal\Core\Render\RendererInterface|null
+   * @var RendererInterface|null
    */
   protected $renderer;
 
@@ -50,7 +51,7 @@ trait QueryResultAssertionTrait {
   /**
    * The default cache metadata object.
    *
-   * @return \Drupal\Core\Cache\CacheableMetadata
+   * @return CacheableMetadata
    *   The cache metadata object.
    */
   protected function defaultCacheMetaData() {
@@ -64,7 +65,7 @@ trait QueryResultAssertionTrait {
   /**
    * The default mutation cache metadata object.
    *
-   * @return \Drupal\Core\Cache\CacheableMetadata
+   * @return CacheableMetadata
    *   The cache metadata object.
    */
   protected function defaultMutationCacheMetaData() {
@@ -84,7 +85,7 @@ trait QueryResultAssertionTrait {
    *   The query variables.
    * @param array $expected
    *   The expected result.
-   * @param \Drupal\Core\Cache\CacheableMetadata|null $metadata
+   * @param CacheableMetadata|null $metadata
    *   The expected cache metadata object.
    */
   protected function assertResults($query, array $variables, array $expected, CacheableMetadata $metadata = NULL): void {
@@ -116,7 +117,7 @@ trait QueryResultAssertionTrait {
    *   The query variables.
    * @param mixed $expected
    *   The expected error messages.
-   * @param \Drupal\Core\Cache\CacheableMetadata $metadata
+   * @param CacheableMetadata $metadata
    *   The expected cache metadata object.
    */
   protected function assertErrors($query, array $variables, $expected, CacheableMetadata $metadata): void {
@@ -141,7 +142,7 @@ trait QueryResultAssertionTrait {
   /**
    * Assert a certain result data set on a query result.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ExecutionResult $result
+   * @param ExecutionResult $result
    *   The query result object.
    * @param mixed $expected
    *   The expected result data set.
@@ -157,7 +158,7 @@ trait QueryResultAssertionTrait {
   /**
    * Assert that the result contains contains a certain set of errors.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ExecutionResult $result
+   * @param ExecutionResult $result
    *   The query result object.
    * @param array $expected
    *   The list of expected error messages. Also allows regular expressions.
@@ -208,9 +209,9 @@ trait QueryResultAssertionTrait {
   /**
    * Assert a certain set of result metadata on a query result.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ExecutionResult $result
+   * @param ExecutionResult $result
    *   The query result object.
-   * @param \Drupal\Core\Cache\CacheableMetadata $expected
+   * @param CacheableMetadata $expected
    *   The expected metadata object.
    *
    * @internal
@@ -237,7 +238,7 @@ trait QueryResultAssertionTrait {
    * Uses either the renderer available in the test class or fetches the Drupal
    * renderer service.
    *
-   * @return \Drupal\Core\Render\RendererInterface
+   * @return RendererInterface
    *   The renderer service for the test.
    */
   private function getRenderer() : RendererInterface {
diff --git a/tests/src/Traits/SchemaPrinterTrait.php b/tests/src/Traits/SchemaPrinterTrait.php
index e4986ca..3009bac 100644
--- a/tests/src/Traits/SchemaPrinterTrait.php
+++ b/tests/src/Traits/SchemaPrinterTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Traits;
 
+use GraphQL\Server\ServerConfig;
 use Drupal\graphql\Entity\ServerInterface;
 use GraphQL\Utils\SchemaPrinter;
 
@@ -13,7 +14,7 @@ trait SchemaPrinterTrait {
   /**
    * Gets printed version of the schema.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The server id.
    *
    * @return string
@@ -21,7 +22,7 @@ trait SchemaPrinterTrait {
    */
   protected function getPrintedSchema(ServerInterface $server = NULL) {
     $server = $server ?? $this->server;
-    /** @var \GraphQL\Server\ServerConfig $config */
+    /** @var ServerConfig $config */
     $config = $server->configuration();
     $schema = $config->getSchema();
     return SchemaPrinter::doPrint($schema);
