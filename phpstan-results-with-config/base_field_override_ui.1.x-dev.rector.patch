diff --git a/src/BaseFieldOverrideListBuilder.php b/src/BaseFieldOverrideListBuilder.php
index aaedf01..10ac02b 100644
--- a/src/BaseFieldOverrideListBuilder.php
+++ b/src/BaseFieldOverrideListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\base_field_override_ui;
 
+use Drupal\Core\Field\Entity\BaseFieldOverride;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ -33,27 +34,27 @@ class BaseFieldOverrideListBuilder extends ConfigEntityListBuilder {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ModuleHandlerInterface $module_handler) {
@@ -125,7 +126,7 @@ class BaseFieldOverrideListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $base_field_override) {
-    /** @var \Drupal\Core\Field\Entity\BaseFieldOverride $base_field_override */
+    /** @var BaseFieldOverride $base_field_override */
     $row = [
       'id' => Html::getClass($base_field_override->getName()),
       'data' => [
@@ -145,7 +146,7 @@ class BaseFieldOverrideListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\Core\Field\Entity\BaseFieldOverride $entity */
+    /** @var BaseFieldOverride $entity */
     $operations = parent::getDefaultOperations($entity);
 
     if ($entity->access('update')) {
diff --git a/src/BaseFieldOverrideUI.php b/src/BaseFieldOverrideUI.php
index 4207690..5ac2b1f 100644
--- a/src/BaseFieldOverrideUI.php
+++ b/src/BaseFieldOverrideUI.php
@@ -19,7 +19,7 @@ class BaseFieldOverrideUI extends FieldUI {
    * @param string $bundle
    *   The entity bundle.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public static function getOverviewRouteInfo($entity_type_id, $bundle) {
@@ -32,10 +32,10 @@ class BaseFieldOverrideUI extends FieldUI {
   /**
    * Returns the route info for add a new configuration.
    *
-   * @param \Drupal\Core\Field\Entity\BaseFieldOverride $config
+   * @param BaseFieldOverride $config
    *   The base field override entity.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public static function getAddRouteInfo(BaseFieldOverride $config) {
@@ -52,10 +52,10 @@ class BaseFieldOverrideUI extends FieldUI {
   /**
    * Returns the route info for edit the configuration.
    *
-   * @param \Drupal\Core\Field\Entity\BaseFieldOverride $config
+   * @param BaseFieldOverride $config
    *   The base field override entity.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public static function getEditRouteInfo(BaseFieldOverride $config) {
@@ -72,10 +72,10 @@ class BaseFieldOverrideUI extends FieldUI {
   /**
    * Returns the route info for delete the configuration.
    *
-   * @param \Drupal\Core\Field\Entity\BaseFieldOverride $config
+   * @param BaseFieldOverride $config
    *   The base field override entity.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public static function getDeleteRouteInfo(BaseFieldOverride $config) {
@@ -92,10 +92,10 @@ class BaseFieldOverrideUI extends FieldUI {
   /**
    * Returns the route info for translate the configuration.
    *
-   * @param \Drupal\Core\Field\Entity\BaseFieldOverride $config
+   * @param BaseFieldOverride $config
    *   The base field override entity.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public static function getTranslateRouteInfo(BaseFieldOverride $config) {
diff --git a/src/ConfigTranslation/BaseFieldOverrideMapper.php b/src/ConfigTranslation/BaseFieldOverrideMapper.php
index 58d90f0..a855b74 100644
--- a/src/ConfigTranslation/BaseFieldOverrideMapper.php
+++ b/src/ConfigTranslation/BaseFieldOverrideMapper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\base_field_override_ui\ConfigTranslation;
 
+use Drupal\field\FieldConfigInterface;
 use Drupal\config_translation\ConfigEntityMapper;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
@@ -13,7 +14,7 @@ class BaseFieldOverrideMapper extends ConfigEntityMapper {
   /**
    * Loaded entity instance to help produce the translation interface.
    *
-   * @var \Drupal\field\FieldConfigInterface
+   * @var FieldConfigInterface
    */
   protected $entity;
 
diff --git a/src/Controller/BaseFieldOverrideController.php b/src/Controller/BaseFieldOverrideController.php
index 7c6c6b7..3e78cd6 100644
--- a/src/Controller/BaseFieldOverrideController.php
+++ b/src/Controller/BaseFieldOverrideController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\base_field_override_ui\Controller;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\Controller\EntityListController;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -18,14 +19,14 @@ class BaseFieldOverrideController extends EntityListController {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs the BaseFieldOverrideController object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
@@ -93,7 +94,7 @@ class BaseFieldOverrideController extends EntityListController {
    * @param string $bundle
    *   The bundle.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The label of the field.
    */
   public function getAddTitle($base_field_name, $entity_type_id, $bundle) {
@@ -107,16 +108,16 @@ class BaseFieldOverrideController extends EntityListController {
   /**
    * The _access_callback for add a base field override form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    * @param string $base_field_name
    *   The machine name of the base field.
    * @param string $entity_type_id
    *   The entity type id.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function addAccess(RouteMatchInterface $route_match, AccountInterface $account, $base_field_name, $entity_type_id) {
diff --git a/src/Form/BaseFieldOverrideForm.php b/src/Form/BaseFieldOverrideForm.php
index 95e31c4..29f1e2c 100644
--- a/src/Form/BaseFieldOverrideForm.php
+++ b/src/Form/BaseFieldOverrideForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\base_field_override_ui\Form;
 
+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Field\Entity\BaseFieldOverride;
 use Drupal\Core\Form\FormStateInterface;
@@ -15,7 +16,7 @@ class BaseFieldOverrideForm extends EntityForm {
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\field\FieldConfigInterface
+   * @var FieldConfigInterface
    */
   protected $entity;
 
@@ -106,7 +107,7 @@ class BaseFieldOverrideForm extends EntityForm {
   /**
    * The _title_callback for the field settings form.
    *
-   * @param \Drupal\Core\Field\Entity\BaseFieldOverride $base_field_override
+   * @param BaseFieldOverride $base_field_override
    *   The base field override.
    *
    * @return string
diff --git a/src/Plugin/Derivative/BaseFieldOverrideUiLocalTask.php b/src/Plugin/Derivative/BaseFieldOverrideUiLocalTask.php
index aee867d..a57091c 100644
--- a/src/Plugin/Derivative/BaseFieldOverrideUiLocalTask.php
+++ b/src/Plugin/Derivative/BaseFieldOverrideUiLocalTask.php
@@ -19,25 +19,25 @@ class BaseFieldOverrideUiLocalTask extends DeriverBase implements ContainerDeriv
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an BaseFieldOverrideUiLocalTask object.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(RouteProviderInterface $route_provider, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 2b608cb..4205dcc 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -16,14 +16,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
