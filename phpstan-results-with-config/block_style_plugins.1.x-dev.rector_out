modules/contrib/block_style_plugins/block_style_plugins.module
modules/contrib/block_style_plugins/src/Annotation/BlockStyle.php
modules/contrib/block_style_plugins/src/Plugin/BlockStyle.php
modules/contrib/block_style_plugins/src/Plugin/BlockStyleBase.php
modules/contrib/block_style_plugins/src/Plugin/BlockStyleInterface.php
modules/contrib/block_style_plugins/src/Plugin/BlockStyleManager.php
modules/contrib/block_style_plugins/tests/modules/block_style_plugins_test/block_style_plugins_test.module
modules/contrib/block_style_plugins/tests/modules/block_style_plugins_test/src/Plugin/BlockStyle/CheckboxWithExclude.php
modules/contrib/block_style_plugins/tests/modules/block_style_plugins_test/src/Plugin/BlockStyle/DropdownWithInclude.php
modules/contrib/block_style_plugins/tests/modules/block_style_plugins_test/src/Plugin/BlockStyle/SimpleClass.php
modules/contrib/block_style_plugins/tests/src/Functional/CheckboxWithExcludeTest.php
modules/contrib/block_style_plugins/tests/src/Functional/CustomBlockVisibilityTest.php
modules/contrib/block_style_plugins/tests/src/Functional/DropdownWithIncludeTest.php
modules/contrib/block_style_plugins/tests/src/Functional/FormFieldsCreatedWithYaml.php
modules/contrib/block_style_plugins/tests/src/Functional/SimpleClassTest.php
modules/contrib/block_style_plugins/tests/src/Functional/TemplateSetWithYamlTest.php
modules/contrib/block_style_plugins/tests/src/Kernel/PluginDiscoveryTest.php
modules/contrib/block_style_plugins/tests/src/Unit/Plugin/BlockStyleBaseTest.php
modules/contrib/block_style_plugins/tests/src/Unit/Plugin/BlockStyleTest.php
modules/contrib/block_style_plugins/tests/src/Unit/Plugin/MockBlockStyleBase.php

12 files with changes
=====================

1) modules/contrib/block_style_plugins/tests/src/Unit/Plugin/BlockStyleTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\block_style_plugins\Unit\Plugin;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Entity\EntityRepository;
 use Drupal\Tests\UnitTestCase;
 use Drupal\block_style_plugins\Plugin\BlockStyle;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
  */
 class BlockStyleTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Mocked entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepository
+   * @var EntityRepository
    */
   protected $entityRepository;

@@ @@
   /**
    * Mocked entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Mocked form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;

@@ @@
   /**
    * Instance of the BlockStyle plugin.
    *
-   * @var \Drupal\block_style_plugins\Plugin\BlockStyle
+   * @var BlockStyle
    */
   protected $plugin;

@@ @@
   /**
    * Create the setup for constants and configFactory stub.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Stub the Iconset Finder Service.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/block_style_plugins/tests/src/Unit/Plugin/BlockStyleBaseTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\block_style_plugins\Unit\Plugin;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Entity\EntityRepository;
+use Drupal\block_style_plugins\Plugin\BlockStyleBase;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
  */
 class BlockStyleBaseTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Mocked entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepository
+   * @var EntityRepository
    */
   protected $entityRepository;

@@ @@
   /**
    * Mocked entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Mocked form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;

@@ @@
   /**
    * Mocked Block Plugin.
    *
-   * @var \Drupal\Core\Block\BlockPluginInterface
+   * @var BlockPluginInterface
    */
   protected $blockPlugin;

@@ @@
   /**
    * Instance of the BlockStyleBase plugin.
    *
-   * @var \Drupal\block_style_plugins\Plugin\BlockStyleBase
+   * @var BlockStyleBase
    */
   protected $plugin;

@@ @@
   /**
    * Create the setup for constants and configFactory stub.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Stub the Iconset Finder Service.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/block_style_plugins/tests/src/Functional/TemplateSetWithYamlTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\block_style_plugins\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A user that can edit content types.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/block_style_plugins/tests/src/Functional/SimpleClassTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\block_style_plugins\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A user that can edit content types.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser(['administer blocks', 'access administration pages']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/block_style_plugins/tests/src/Functional/FormFieldsCreatedWithYaml.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\block_style_plugins\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A user that can edit content types.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/block_style_plugins/tests/src/Functional/DropdownWithIncludeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\block_style_plugins\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A user that can edit content types.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/block_style_plugins/tests/src/Functional/CheckboxWithExcludeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\block_style_plugins\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A user that can edit content types.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/block_style_plugins/src/Plugin/BlockStyleManager.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handle to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/block_style_plugins/src/Plugin/BlockStyleInterface.php:19

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form definition array for the block configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form definition array for the block configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form definition array for the full block configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm($form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/block_style_plugins/src/Plugin/BlockStyleBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_style_plugins\Plugin;

+use Drupal\block\Entity\Block;
 use Drupal\Core\Form\SubformState;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * Instance of the Entity Repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Instance of the Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   An Entity Repository instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   An Entity Type Manager instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityRepositoryInterface $entityRepository, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    */
   public function prepareForm(array $form, FormStateInterface $form_state) {
     // Get the current block config entity.
-    /** @var \Drupal\block\Entity\Block $entity */
+    /** @var Block $entity */
     $entity = $form_state->getFormObject()->getEntity();

     // Set properties and configuration.
@@ @@
    *
    * @param array $form
    *   The form definition array for the full block configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @deprecated in 8.x-1.4 and will be removed before 8.x-2.x.
@@ @@
     }

     // Load the block config entity.
-    /** @var \Drupal\block\Entity\Block $block */
+    /** @var Block $block */
     $block = $this->entityTypeManager->getStorage('block')->load($variables['elements']['#id']);
     $styles = $block->getThirdPartySetting('block_style_plugins', $this->pluginId);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/block_style_plugins/src/Annotation/BlockStyle.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_style_plugins\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


12) modules/contrib/block_style_plugins/block_style_plugins.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_style_plugins\Plugin\BlockStyleManager;
+use Drupal\block_style_plugins\Plugin\BlockStyleInterface;
 /**
  * @file
  * Contains block_style_plugins.module.
@@ @@
  */
 function block_style_plugins_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // Retrieve a list of style plugin definitions.
-  /** @var Drupal\block_style_plugins\Plugin\BlockStyleManager $plugin_manager */
+  /** @var BlockStyleManager $plugin_manager */
   $plugin_manager = \Drupal::service('plugin.manager.block_style.processor');
   $style_plugins = $plugin_manager->getDefinitions();

   foreach ($style_plugins as $name => $plugin) {
-    /** @var \Drupal\block_style_plugins\Plugin\BlockStyleInterface $style_plugin */
+    /** @var BlockStyleInterface $style_plugin */
     $style_plugin = $plugin_manager->createInstance($name);
     $form = $style_plugin->prepareForm($form, $form_state);
   }
@@ @@
  */
 function block_style_plugins_preprocess_block(&$variables) {
   // Retrieve a list of style plugin definitions.
-  /** @var Drupal\block_style_plugins\Plugin\BlockStyleManager $plugin_manager */
+  /** @var BlockStyleManager $plugin_manager */
   $plugin_manager = \Drupal::service('plugin.manager.block_style.processor');
   $style_plugins = $plugin_manager->getDefinitions();

@@ @@
  */
 function block_style_plugins_theme_suggestions_block_alter(array &$suggestions, array $variables) {
   // Retrieve a list of style plugin definitions.
-  /** @var Drupal\block_style_plugins\Plugin\BlockStyleManager $plugin_manager */
+  /** @var BlockStyleManager $plugin_manager */
   $plugin_manager = \Drupal::service('plugin.manager.block_style.processor');
   $style_plugins = $plugin_manager->getDefinitions();

@@ @@
  */
 function block_style_plugins_themes_uninstalled(array $themes) {
   // Clear the Plugins cache when a theme using a plugin is uninstalled.
-  /** @var Drupal\block_style_plugins\Plugin\BlockStyleManager $plugin_manager */
+  /** @var BlockStyleManager $plugin_manager */
   $plugin_manager = \Drupal::service('plugin.manager.block_style.processor');
   $style_plugins = $plugin_manager->getDefinitions();
   $clear_cache = FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 12 files have been changed by Rector                                      

