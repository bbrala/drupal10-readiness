diff --git a/emr.install b/emr.install
index 8d53f13..ac7269b 100644
--- a/emr.install
+++ b/emr.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\emr\EntityMetaStorageInterface;
 /**
  * @file
  * Entity Meta Relation install file.
@@ -90,7 +91,7 @@ function emr_update_8002(&$sandbox) {
  */
 function emr_update_8003(&$sandbox) {
   // Update the revisions.
-  /** @var \Drupal\emr\EntityMetaStorageInterface $storage */
+  /** @var EntityMetaStorageInterface $storage */
   $storage = \Drupal::entityTypeManager()->getStorage('entity_meta');
   if (!isset($sandbox['total'])) {
     $ids = $storage->getQuery()->allRevisions()->condition('emr_default_revision', 1)->execute();
diff --git a/emr.post_update.php b/emr.post_update.php
index 2b3e78d..8695642 100644
--- a/emr.post_update.php
+++ b/emr.post_update.php
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\emr\EntityMetaStorageInterface;
+use Drupal\emr\Entity\EntityMetaInterface;
 /**
  * @file
  * Entity Meta Relation post update file.
@@ -18,7 +20,7 @@ function emr_post_update_00001(&$sandbox) {
 function emr_post_update_00002(&$sandbox) {
   \Drupal::service('plugin.manager.field.field_type')->clearCachedDefinitions();
 
-  /** @var \Drupal\emr\EntityMetaStorageInterface $storage */
+  /** @var EntityMetaStorageInterface $storage */
   $storage = \Drupal::entityTypeManager()->getStorage('entity_meta');
   $meta_ids = $storage->getQuery()->allRevisions()->execute();
   $grouped = [];
@@ -28,7 +30,7 @@ function emr_post_update_00002(&$sandbox) {
 
   foreach ($grouped as $meta_id => $revision_ids) {
     foreach ($revision_ids as $revision_id) {
-      /** @var \Drupal\emr\Entity\EntityMetaInterface $revision */
+      /** @var EntityMetaInterface $revision */
       $revision = $storage->loadRevision($revision_id);
       $revision->set('emr_default_revision', $revision->isDefaultRevision());
       $revision->setNewRevision(FALSE);
diff --git a/modules/emr_node/emr_node.module b/modules/emr_node/emr_node.module
index 66bfd48..c81168f 100644
--- a/modules/emr_node/emr_node.module
+++ b/modules/emr_node/emr_node.module
@@ -6,6 +6,7 @@
  */
 
 declare(strict_types = 1);
+use Drupal\Core\Entity\EntityTypeInterface;
 
 use Drupal\emr_node\NodeFormHandler;
 
@@ -17,7 +18,7 @@ function emr_node_entity_type_alter(array &$entity_types) {
     return;
   }
 
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   $entity_type = $entity_types['node'];
   if (!$entity_type->hasHandlerClass('emr_content_form')) {
     // Add the entity meta content form handler to the Node entity type.
diff --git a/modules/emr_node/emr_node.post_update.php b/modules/emr_node/emr_node.post_update.php
index 2c604ff..5b2340f 100644
--- a/modules/emr_node/emr_node.post_update.php
+++ b/modules/emr_node/emr_node.post_update.php
@@ -7,6 +7,8 @@
 
 declare(strict_types = 1);
 
+use Drupal\Core\Field\FieldConfigInterface;
+
 /**
  * Fix misconfigured handler_settings.
  */
@@ -14,7 +16,7 @@ function emr_node_post_update_00001(): void {
   $entity_type_manager = \Drupal::entityTypeManager();
   $bundles = \Drupal::service('entity_type.bundle.info')->getAllBundleInfo();
   foreach (['emr_meta_revision', 'emr_node_revision'] as $field_name) {
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $entity_type_manager->getStorage('field_config')->load('entity_meta_relation.node_meta_relation.' . $field_name);
     if (!$field_config) {
       continue;
diff --git a/modules/entity_meta_example/entity_meta_example.install b/modules/entity_meta_example/entity_meta_example.install
index 2964678..c176f64 100644
--- a/modules/entity_meta_example/entity_meta_example.install
+++ b/modules/entity_meta_example/entity_meta_example.install
@@ -7,6 +7,8 @@
 
 declare(strict_types = 1);
 
+use Drupal\emr\EntityMetaRelationInstaller;
+
 /**
  * Implements hook_install().
  */
@@ -14,7 +16,7 @@ function entity_meta_example_install($is_syncing) {
   if ($is_syncing) {
     return;
   }
-  /** @var \Drupal\emr\EntityMetaRelationInstaller $installer */
+  /** @var EntityMetaRelationInstaller $installer */
   $installer = \Drupal::service('emr.installer');
   $installer->installEntityMetaTypeOnContentEntityType('visual', 'node', ['entity_meta_example_ct']);
   $installer->installEntityMetaTypeOnContentEntityType('audio', 'node', ['entity_meta_multi_example_ct']);
diff --git a/modules/entity_meta_example/modules/entity_meta_speed/src/Plugin/EntityMetaRelation/SpeedConfiguration.php b/modules/entity_meta_example/modules/entity_meta_speed/src/Plugin/EntityMetaRelation/SpeedConfiguration.php
index be9937b..b9b1fe8 100644
--- a/modules/entity_meta_example/modules/entity_meta_speed/src/Plugin/EntityMetaRelation/SpeedConfiguration.php
+++ b/modules/entity_meta_example/modules/entity_meta_speed/src/Plugin/EntityMetaRelation/SpeedConfiguration.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_meta_speed\Plugin\EntityMetaRelation;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -29,16 +30,16 @@ class SpeedConfiguration extends EntityMetaRelationContentFormPluginBase {
   /**
    * Builds the entity meta from the values of the $form_state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\emr\Entity\EntityMetaInterface|null
+   * @return EntityInterface|EntityMetaInterface|null
    *   The entity meta.
    */
   protected function buildEntity(FormStateInterface $form_state): ?EntityMetaInterface {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $form_state->getFormObject()->getEntity();
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+    /** @var EntityMetaInterface $entity_meta */
     $entity_meta = $entity->get('emr_entity_metas')->getEntityMeta($this->getPluginDefinition()['entity_meta_bundle']);
 
     $entity_meta->getWrapper()->setGear($form_state->getValue('gear'));
diff --git a/src/Annotation/EntityMetaRelation.php b/src/Annotation/EntityMetaRelation.php
index 6ff3788..d04a9f3 100644
--- a/src/Annotation/EntityMetaRelation.php
+++ b/src/Annotation/EntityMetaRelation.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\emr\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class EntityMetaRelation extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -33,7 +34,7 @@ class EntityMetaRelation extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/ContentFormHandlerBase.php b/src/ContentFormHandlerBase.php
index 5448e3b..7dbf487 100644
--- a/src/ContentFormHandlerBase.php
+++ b/src/ContentFormHandlerBase.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\emr;
 
+use Drupal\emr\Plugin\EntityMetaRelationPluginInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,23 +22,23 @@ class ContentFormHandlerBase implements ContentFormHandlerInterface {
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
   /**
    * The plugin manager.
    *
-   * @var \Drupal\emr\Plugin\EntityMetaRelationPluginManager
+   * @var EntityMetaRelationPluginManager
    */
   protected $pluginManager;
 
   /**
    * Constructs the EntityMetaContentFormHandlerBase.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type.
-   * @param \Drupal\emr\Plugin\EntityMetaRelationPluginManager $pluginManager
+   * @param EntityMetaRelationPluginManager $pluginManager
    *   The entity meta relation plugin manager.
    */
   public function __construct(EntityTypeInterface $entityType, EntityMetaRelationPluginManager $pluginManager) {
@@ -70,7 +71,7 @@ class ContentFormHandlerBase implements ContentFormHandlerInterface {
         continue;
       }
 
-      /** @var \Drupal\emr\Plugin\EntityMetaRelationPluginInterface $plugin */
+      /** @var EntityMetaRelationPluginInterface $plugin */
       $plugin = $this->pluginManager->createInstance($id);
       if ($plugin instanceof EntityMetaRelationContentFormPluginInterface && $plugin->applies($entity)) {
         $form = $plugin->build($form, $form_state, $entity);
@@ -118,10 +119,10 @@ class ContentFormHandlerBase implements ContentFormHandlerInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\emr\Plugin\EntityMetaRelationContentFormPluginInterface[]
+   * @return EntityMetaRelationContentFormPluginInterface[]
    *   The applicable plugins that can be validated and submitted.
    */
   protected function getApplicablePlugins(array &$form, FormStateInterface $form_state): array {
@@ -134,7 +135,7 @@ class ContentFormHandlerBase implements ContentFormHandlerInterface {
         continue;
       }
 
-      /** @var \Drupal\emr\Plugin\EntityMetaRelationPluginInterface $plugin */
+      /** @var EntityMetaRelationPluginInterface $plugin */
       $plugin = $this->pluginManager->createInstance($id);
       if ($plugin instanceof EntityMetaRelationContentFormPluginInterface && $plugin->applies($entity)) {
         $applicable[] = $plugin;
diff --git a/src/ContentFormHandlerInterface.php b/src/ContentFormHandlerInterface.php
index f2a4ee3..c90fdda 100644
--- a/src/ContentFormHandlerInterface.php
+++ b/src/ContentFormHandlerInterface.php
@@ -20,7 +20,7 @@ interface ContentFormHandlerInterface extends EntityHandlerInterface {
    *
    * @param array $form
    *   The form being altered.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -33,7 +33,7 @@ interface ContentFormHandlerInterface extends EntityHandlerInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateFormElements(array &$form, FormStateInterface $form_state): void;
@@ -43,7 +43,7 @@ interface ContentFormHandlerInterface extends EntityHandlerInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitFormElements(array &$form, FormStateInterface $form_state): void;
diff --git a/src/Entity/EntityMeta.php b/src/Entity/EntityMeta.php
index d230fe2..8ec28af 100644
--- a/src/Entity/EntityMeta.php
+++ b/src/Entity/EntityMeta.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\emr\Entity;
 
+use Drupal\emr\EntityMetaWrapper;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -74,7 +75,7 @@ class EntityMeta extends RevisionableContentEntityBase implements EntityMetaInte
   /**
    * The entity meta wrapper.
    *
-   * @var \Drupal\emr\EntityMetaWrapper
+   * @var EntityMetaWrapper
    */
   protected $entityMetaWrapper;
 
diff --git a/src/Entity/EntityMetaInterface.php b/src/Entity/EntityMetaInterface.php
index 73d58a7..4c36369 100644
--- a/src/Entity/EntityMetaInterface.php
+++ b/src/Entity/EntityMetaInterface.php
@@ -61,7 +61,7 @@ interface EntityMetaInterface extends ContentEntityInterface, EntityChangedInter
    *
    * The "host" entity is the content entity which relates to this EntityMeta.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    *
    * @return \Drupal\emr\Entity\EntityMetaInterface
@@ -72,7 +72,7 @@ interface EntityMetaInterface extends ContentEntityInterface, EntityChangedInter
   /**
    * Gets the "host" entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Returns the host entity if present.
    */
   public function getHostEntity(): ?ContentEntityInterface;
@@ -106,7 +106,7 @@ interface EntityMetaInterface extends ContentEntityInterface, EntityChangedInter
   /**
    * Gets the wrapper for this entity meta.
    *
-   * @return \Drupal\emr\EntityMetaWrapperInterface
+   * @return EntityMetaWrapperInterface
    *   The entity meta wrapper.
    */
   public function getWrapper(): EntityMetaWrapperInterface;
@@ -114,7 +114,7 @@ interface EntityMetaInterface extends ContentEntityInterface, EntityChangedInter
   /**
    * Sets the wrapper for this entity meta.
    *
-   * @param \Drupal\emr\EntityMetaWrapperInterface $entityMetaWrapper
+   * @param EntityMetaWrapperInterface $entityMetaWrapper
    *   The entity meta wrapper.
    */
   public function setWrapper(EntityMetaWrapperInterface $entityMetaWrapper): void;
diff --git a/src/EntityMetaListBuilder.php b/src/EntityMetaListBuilder.php
index ee1e930..e7ce8f3 100644
--- a/src/EntityMetaListBuilder.php
+++ b/src/EntityMetaListBuilder.php
@@ -18,27 +18,27 @@ class EntityMetaListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new EntityMetaListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
diff --git a/src/EntityMetaRelationInstaller.php b/src/EntityMetaRelationInstaller.php
index 3b0380a..c02bbfe 100644
--- a/src/EntityMetaRelationInstaller.php
+++ b/src/EntityMetaRelationInstaller.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\emr;
 
+use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -17,32 +19,32 @@ class EntityMetaRelationInstaller {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * EntityMetaRelationInstaller constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info.
    */
   public function __construct(ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $entityTypeBundleInfo) {
@@ -87,7 +89,7 @@ class EntityMetaRelationInstaller {
     // Sets correct 3rd party settings.
     $bundle_entity_storage = $this->entityTypeManager->getStorage($definition->getBundleEntityType());
     foreach ($bundles as $bundle_id) {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityBundleBase $bundle */
+      /** @var ConfigEntityBundleBase $bundle */
       $bundle = $bundle_entity_storage->load($bundle_id);
       $entity_meta_bundles = $bundle->getThirdPartySetting('emr', 'entity_meta_bundles');
       if (empty($entity_meta_bundles) || !in_array($entity_meta_type, $entity_meta_bundles)) {
@@ -110,7 +112,7 @@ class EntityMetaRelationInstaller {
    *   The list of allowed bundles.
    */
   protected function updateTargetBundlesInField(string $emr_bundle, string $field_name, array $target_bundles): void {
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->entityTypeManager->getStorage('field_config')->load("entity_meta_relation.{$emr_bundle}.{$field_name}");
     if (!$field_config) {
       throw new FieldException("Field config 'entity_meta_relation.{$emr_bundle}.{$field_name}' not found. Without this field, we cannot properly configure Entity Meta type.");
diff --git a/src/EntityMetaRelationListBuilder.php b/src/EntityMetaRelationListBuilder.php
index e6dd2e8..971f31c 100644
--- a/src/EntityMetaRelationListBuilder.php
+++ b/src/EntityMetaRelationListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\emr;
 
+use Drupal\emr\Entity\EntityMetaRelationInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -18,27 +19,27 @@ class EntityMetaRelationListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new EntityMetaRelationListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ -86,7 +87,7 @@ class EntityMetaRelationListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\emr\Entity\EntityMetaRelationInterface $entity */
+    /** @var EntityMetaRelationInterface $entity */
     $row['id'] = $entity->toLink()->toString();
     return $row + parent::buildRow($entity);
   }
diff --git a/src/EntityMetaRelationStorage.php b/src/EntityMetaRelationStorage.php
index 392af3a..7cd60a0 100644
--- a/src/EntityMetaRelationStorage.php
+++ b/src/EntityMetaRelationStorage.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\emr;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drupal\emr\Entity\EntityMetaInterface;
@@ -29,7 +31,7 @@ class EntityMetaRelationStorage extends SqlContentEntityStorage implements Entit
    */
   public function getRelationFieldName(ContentEntityInterface $entity, string $target): ?string {
     $fields = $this->entityFieldManager->getFieldDefinitions($entity->getEntityTypeId(), $entity->bundle());
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+    /** @var FieldDefinitionInterface $field */
     foreach ($fields as $field) {
       if ($field->getType() == 'entity_reference_revisions') {
         if ($target === EntityMetaRelationStorageInterface::RELATION_FIELD_TARGET_CONTENT && $field->getSetting('target_type') !== 'entity_meta') {
@@ -53,7 +55,7 @@ class EntityMetaRelationStorage extends SqlContentEntityStorage implements Entit
    * allow the deletion.
    */
   public function deleteRevision($revision_id) {
-    /** @var \Drupal\Core\Entity\RevisionableInterface $revision */
+    /** @var RevisionableInterface $revision */
     $revision = $this->loadRevision($revision_id);
     if (!$revision->isDefaultRevision()) {
       // If it's not the default revision we just defer to the parent to delete
@@ -95,7 +97,7 @@ class EntityMetaRelationStorage extends SqlContentEntityStorage implements Entit
   public function delete(array $entities) {
     parent::delete($entities);
 
-    /** @var \Drupal\emr\Entity\EntityMetaRelationInterface $relation */
+    /** @var EntityMetaRelationInterface $relation */
     foreach ($entities as $relation) {
       $field_name = $this->getRelationFieldName($relation, EntityMetaRelationStorageInterface::RELATION_FIELD_TARGET_META);
       $target_revision_id = $relation->get($field_name)->target_revision_id;
@@ -121,7 +123,7 @@ class EntityMetaRelationStorage extends SqlContentEntityStorage implements Entit
    * the EntityMeta revision it was pointing to was not left orphaned (no other
    * relations point to it). If it did, we need to delete it.
    *
-   * @param \Drupal\emr\Entity\EntityMetaRelationInterface $revision
+   * @param EntityMetaRelationInterface $revision
    *   The EntityMetaRelation revision ID.
    */
   protected function deleteOrphanEntityMetaRevision(EntityMetaRelationInterface $revision): void {
diff --git a/src/EntityMetaRelationStorageInterface.php b/src/EntityMetaRelationStorageInterface.php
index f5a49a3..3fbbdd0 100644
--- a/src/EntityMetaRelationStorageInterface.php
+++ b/src/EntityMetaRelationStorageInterface.php
@@ -31,7 +31,7 @@ interface EntityMetaRelationStorageInterface extends EntityStorageInterface, Rev
   /**
    * Gets a list of revision IDs for a specific entity meta relation.
    *
-   * @param \Drupal\emr\Entity\EntityMetaRelationInterface $entity_meta_relation
+   * @param EntityMetaRelationInterface $entity_meta_relation
    *   The entity meta relation.
    *
    * @return int[]
@@ -45,7 +45,7 @@ interface EntityMetaRelationStorageInterface extends EntityStorageInterface, Rev
    * This is the name of the field on a given entity meta relation entity that
    * points either to the entity meta or to the content entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $target
    *   The relation direction: 'content' or 'meta'.
diff --git a/src/EntityMetaStorage.php b/src/EntityMetaStorage.php
index 8a5d6c2..d373043 100644
--- a/src/EntityMetaStorage.php
+++ b/src/EntityMetaStorage.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\emr;
 
+use Drupal\emr\Plugin\EntityMetaRelationPluginInterface;
+use Drupal\Core\Entity\RevisionableInterface;
+use Drupal\emr\Entity\EntityMetaRelationInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Drupal\Core\Database\Connection;
@@ -30,39 +33,39 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
   /**
    * The entity meta wrapper factory.
    *
-   * @var \Drupal\emr\EntityMetaWrapperFactoryInterface
+   * @var EntityMetaWrapperFactoryInterface
    */
   protected $entityMetaWrapperFactory;
 
   /**
    * The entity meta relation plugin manager.
    *
-   * @var \Drupal\emr\Plugin\EntityMetaRelationPluginManager
+   * @var EntityMetaRelationPluginManager
    */
   protected $pluginManager;
 
   /**
    * Constructs a EntityMetaStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memory_cache
+   * @param MemoryCacheInterface|null $memory_cache
    *   The memory cache backend to be used.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\emr\EntityMetaWrapperFactoryInterface $entity_meta_wrapper_factory
+   * @param EntityMetaWrapperFactoryInterface $entity_meta_wrapper_factory
    *   The entity meta wrapper factory.
-   * @param \Drupal\emr\Plugin\EntityMetaRelationPluginManager $pluginManager
+   * @param EntityMetaRelationPluginManager $pluginManager
    *   The entity meta relation plugin manager.
    *
    * @SuppressWarnings(PHPMD.ExcessiveParameterList)
@@ -96,13 +99,13 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
    */
   public function create(array $values = []) {
     // Set the wrapper on the EntityMeta.
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity */
+    /** @var EntityMetaInterface $entity */
     $entity = parent::create($values);
     $entity->setWrapper($this->entityMetaWrapperFactory->create($entity));
 
     $default_definition = $this->pluginManager->getDefaultDefinitionForBundle($entity->bundle());
     if ($default_definition) {
-      /** @var \Drupal\emr\Plugin\EntityMetaRelationPluginInterface $plugin */
+      /** @var EntityMetaRelationPluginInterface $plugin */
       $plugin = $this->pluginManager->createInstance($default_definition['id']);
       $plugin->fillDefaultEntityMetaValues($entity);
     }
@@ -125,7 +128,7 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
    */
   protected function postLoad(array &$entities) {
     parent::postLoad($entities);
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity */
+    /** @var EntityMetaInterface $entity */
     foreach ($entities as &$entity) {
       // Set the wrapper on the EntityMeta.
       $entity->setWrapper($this->entityMetaWrapperFactory->create($entity));
@@ -136,7 +139,7 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
    * {@inheritdoc}
    */
   public function save(EntityInterface $entity) {
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity */
+    /** @var EntityMetaInterface $entity */
     if ($this->shouldMakeRevision($entity)) {
       $entity->setNewRevision(TRUE);
     }
@@ -174,7 +177,7 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
    * @SuppressWarnings(PHPMD.NPathComplexity)
    */
   public function doPostSave(EntityInterface $entity, $update) {
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity */
+    /** @var EntityMetaInterface $entity */
     parent::doPostSave($entity, $update);
 
     // Create or updates the entity meta relations for a given entity.
@@ -261,7 +264,7 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
     // associated entity meta relation entities. This is because once an entity
     // meta is deleted for any reason, there is no more relation that needs to
     // existing between it and any content entity.
-    /** @var \Drupal\emr\EntityMetaRelationStorageInterface $entity_meta_relation_storage */
+    /** @var EntityMetaRelationStorageInterface $entity_meta_relation_storage */
     $entity_meta_relation_storage = $this->entityTypeManager->getStorage('entity_meta_relation');
     $entity_meta_relation_fields = [];
     // Determine the field names that reference the entity metas.
@@ -306,7 +309,7 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
    * allow the deletion.
    */
   public function deleteRevision($revision_id) {
-    /** @var \Drupal\Core\Entity\RevisionableInterface $revision */
+    /** @var RevisionableInterface $revision */
     $revision = $this->loadRevision($revision_id);
     if (!$revision instanceof EntityMetaInterface) {
       // It's possible that by the time this revision delete is requested, the
@@ -336,7 +339,7 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
     // to perform the deletion.
     array_pop($revision_ids);
     $revision_id_to_default = end($revision_ids);
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $revision_to_default */
+    /** @var EntityMetaInterface $revision_to_default */
     $revision_to_default = $this->loadRevision($revision_id_to_default);
     $revision_to_default->isDefaultRevision(TRUE);
     $revision_to_default->setNewRevision(FALSE);
@@ -355,7 +358,7 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
     $entity_meta_relation_content_field = $entity_type->get('entity_meta_relation_content_field');
     $entity_meta_relation_meta_field = $entity_type->get('entity_meta_relation_meta_field');
 
-    /** @var \Drupal\emr\EntityMetaRelationStorageInterface $entity_meta_relation_storage */
+    /** @var EntityMetaRelationStorageInterface $entity_meta_relation_storage */
     $entity_meta_relation_storage = $this->entityTypeManager->getStorage('entity_meta_relation');
     $ids = $entity_meta_relation_storage->getQuery()
       ->condition($entity_meta_relation_content_field . '.target_id', $content_entity->id())
@@ -366,7 +369,7 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
       return;
     }
 
-    /** @var \Drupal\emr\Entity\EntityMetaRelationInterface[] $entity_meta_relations */
+    /** @var EntityMetaRelationInterface[] $entity_meta_relations */
     $entity_meta_relations = $entity_meta_relation_storage->loadMultiple($ids);
     foreach ($entity_meta_relations as $relation) {
       $entity = $relation->get($entity_meta_relation_meta_field)->entity;
@@ -386,7 +389,7 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
 
     // Find all the revisions of EntityMetaRelation that point to the current
     // revision of this entity.
-    /** @var \Drupal\emr\EntityMetaRelationStorageInterface $entity_meta_relation_storage */
+    /** @var EntityMetaRelationStorageInterface $entity_meta_relation_storage */
     $entity_meta_relation_storage = $this->entityTypeManager->getStorage('entity_meta_relation');
     $ids = $entity_meta_relation_storage->getQuery()
       ->condition($entity_meta_relation_content_field . '.target_revision_id', $content_entity->getRevisionId())
@@ -454,7 +457,7 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
     }
 
     // Load all the relation revisions that point to the passed entity.
-    /** @var \Drupal\emr\EntityMetaRelationStorageInterface $entity_meta_relation_storage */
+    /** @var EntityMetaRelationStorageInterface $entity_meta_relation_storage */
     $entity_meta_relation_storage = $this->entityTypeManager->getStorage('entity_meta_relation');
     $ids = $entity_meta_relation_storage->getQuery()
       ->condition($relation_field_name . '.' . $target_field, $target_id)
@@ -465,12 +468,12 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
       return [];
     }
 
-    /** @var \Drupal\emr\Entity\EntityMetaRelationInterface[] $entity_meta_relations */
+    /** @var EntityMetaRelationInterface[] $entity_meta_relations */
     $entity_meta_relation_revisions = $entity_meta_relation_storage->loadMultipleRevisions(array_keys($ids));
 
     $related_entities = $related_entities_revisions = [];
 
-    /** @var \Drupal\emr\Entity\EntityMetaRelationInterface $relation */
+    /** @var EntityMetaRelationInterface $relation */
     foreach ($entity_meta_relation_revisions as $relation) {
       // Find the correct field to get the reverse relation.
       if ($entity instanceof EntityMetaInterface) {
@@ -561,7 +564,7 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
       // In case there are revisions, load the latest revision to compare
       // against.
       $original_id = $this->getLatestRevisionId($entity->id());
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $original */
+      /** @var ContentEntityInterface $original */
       $original = $this->loadRevision($original_id);
     }
 
@@ -594,7 +597,7 @@ class EntityMetaStorage extends SqlContentEntityStorage implements EntityMetaSto
         continue;
       }
 
-      /** @var \Drupal\emr\Plugin\EntityMetaRelationPluginInterface $plugin */
+      /** @var EntityMetaRelationPluginInterface $plugin */
       $plugin = $this->pluginManager->createInstance($id);
       if ($plugin->applies($entity)) {
         $default_metas[$definition['entity_meta_bundle']] = $this->create([
diff --git a/src/EntityMetaStorageInterface.php b/src/EntityMetaStorageInterface.php
index 7461cb2..f4babf0 100644
--- a/src/EntityMetaStorageInterface.php
+++ b/src/EntityMetaStorageInterface.php
@@ -15,7 +15,7 @@ interface EntityMetaStorageInterface extends EntityStorageInterface, Revisionabl
   /**
    * Gets a list of revision IDs for a specific entity meta.
    *
-   * @param \Drupal\emr\Entity\EntityMetaInterface $entity_meta
+   * @param EntityMetaInterface $entity_meta
    *   The entity meta.
    *
    * @return int[]
@@ -32,10 +32,10 @@ interface EntityMetaStorageInterface extends EntityStorageInterface, Revisionabl
    *
    * Note that this will return the last revision of the target entities
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to look for related entities.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   The related entities.
    */
   public function getRelatedEntities(ContentEntityInterface $entity): array;
@@ -46,7 +46,7 @@ interface EntityMetaStorageInterface extends EntityStorageInterface, Revisionabl
    * We don't need to delete the relation entities because those are deleted
    * in turn when an entity meta is deleted.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $content_entity
+   * @param ContentEntityInterface $content_entity
    *   The content entity.
    *
    * @see emr_entity_delete()
@@ -59,7 +59,7 @@ interface EntityMetaStorageInterface extends EntityStorageInterface, Revisionabl
    * These are the revisions that reference the current revision of the passed
    * host entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $content_entity
+   * @param ContentEntityInterface $content_entity
    *   The content entity.
    */
   public function deleteAllRelatedEntityMetaRelationRevisions(ContentEntityInterface $content_entity): void;
@@ -70,7 +70,7 @@ interface EntityMetaStorageInterface extends EntityStorageInterface, Revisionabl
    * These are only the FieldConfigInterface fields because these are the ones
    * where we store data (since we are using bundles).
    *
-   * @param \Drupal\emr\Entity\EntityMetaInterface $entity
+   * @param EntityMetaInterface $entity
    *   The entity.
    *
    * @return array
@@ -83,7 +83,7 @@ interface EntityMetaStorageInterface extends EntityStorageInterface, Revisionabl
    *
    * We make a new revision if there is a change in one of the relevant fields.
    *
-   * @param \Drupal\emr\Entity\EntityMetaInterface $entity
+   * @param EntityMetaInterface $entity
    *   The entity meta entity.
    *
    * @return bool
@@ -98,10 +98,10 @@ interface EntityMetaStorageInterface extends EntityStorageInterface, Revisionabl
    * that some defaults need to be set on them whenever the host entity gets
    * created.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The host entity for which to determine the default metas.
    *
-   * @return \Drupal\emr\Entity\EntityMetaInterface[]
+   * @return EntityMetaInterface[]
    *   The list of default entity metas.
    */
   public function getDefaultEntityMetas(ContentEntityInterface $entity): array;
diff --git a/src/EntityMetaWrapper.php b/src/EntityMetaWrapper.php
index 8dfa350..b6d67aa 100644
--- a/src/EntityMetaWrapper.php
+++ b/src/EntityMetaWrapper.php
@@ -14,7 +14,7 @@ class EntityMetaWrapper implements EntityMetaWrapperInterface {
   /**
    * The entity meta.
    *
-   * @var \Drupal\emr\Entity\EntityMetaInterface
+   * @var EntityMetaInterface
    */
   protected $entityMeta;
 
diff --git a/src/EntityMetaWrapperFactory.php b/src/EntityMetaWrapperFactory.php
index 571e53f..b34d17b 100644
--- a/src/EntityMetaWrapperFactory.php
+++ b/src/EntityMetaWrapperFactory.php
@@ -15,14 +15,14 @@ class EntityMetaWrapperFactory implements EntityMetaWrapperFactoryInterface {
   /**
    * The plugin manager.
    *
-   * @var \Drupal\emr\Plugin\EntityMetaRelationPluginManager
+   * @var EntityMetaRelationPluginManager
    */
   protected $pluginManager;
 
   /**
    * EntityMetaWrapperFactory constructor.
    *
-   * @param \Drupal\emr\Plugin\EntityMetaRelationPluginManager $pluginManager
+   * @param EntityMetaRelationPluginManager $pluginManager
    *   The plugin manager.
    */
   public function __construct(EntityMetaRelationPluginManager $pluginManager) {
diff --git a/src/EntityMetaWrapperFactoryInterface.php b/src/EntityMetaWrapperFactoryInterface.php
index 19851cb..e772037 100644
--- a/src/EntityMetaWrapperFactoryInterface.php
+++ b/src/EntityMetaWrapperFactoryInterface.php
@@ -17,10 +17,10 @@ interface EntityMetaWrapperFactoryInterface {
    * Instantiate a new entity meta wrapper or a more specific class in case it
    * finds a plugin mapping an entity meta wrapper class to this bundle.
    *
-   * @param \Drupal\emr\Entity\EntityMetaInterface $entity_meta
+   * @param EntityMetaInterface $entity_meta
    *   The entity meta.
    *
-   * @return \Drupal\emr\EntityMetaWrapper
+   * @return EntityMetaWrapper
    *   The entity meta wrapper.
    */
   public function create(EntityMetaInterface $entity_meta);
diff --git a/src/EntityMetaWrapperInterface.php b/src/EntityMetaWrapperInterface.php
index 6ece078..6881e32 100644
--- a/src/EntityMetaWrapperInterface.php
+++ b/src/EntityMetaWrapperInterface.php
@@ -14,7 +14,7 @@ interface EntityMetaWrapperInterface {
   /**
    * Returns the entity meta.
    *
-   * @return \Drupal\emr\Entity\EntityMetaInterface
+   * @return EntityMetaInterface
    *   The entity meta.
    */
   public function getEntityMeta(): EntityMetaInterface;
diff --git a/src/Field/ComputedEntityMetasItemList.php b/src/Field/ComputedEntityMetasItemList.php
index 57abfa7..9fa0476 100644
--- a/src/Field/ComputedEntityMetasItemList.php
+++ b/src/Field/ComputedEntityMetasItemList.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\emr\Field;
 
+use Drupal\emr\EntityMetaStorageInterface;
 use Drupal\Core\Field\FieldItemList;
 use Drupal\Core\TypedData\ComputedItemListTrait;
 use Drupal\emr\Entity\EntityMetaInterface;
@@ -25,7 +26,7 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
    * EntityMeta. However, the previous revision will still link to the
    * EntityMeta via existing EntityMetaRelation revisions.
    *
-   * @var \Drupal\emr\Entity\EntityMetaInterface[]
+   * @var EntityMetaInterface[]
    */
   protected $entitiesToSkipRelations = [];
 
@@ -40,7 +41,7 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
    * current revision. However, the previous revisions will still link to the
    * EntityMeta via existing EntityMetaRelation revisions.
    *
-   * @var \Drupal\emr\Entity\EntityMetaInterface[]
+   * @var EntityMetaInterface[]
    */
   protected $entitiesToDeleteRelations = [];
 
@@ -55,11 +56,11 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
       return;
     }
 
-    /** @var \Drupal\emr\EntityMetaStorageInterface $entity_meta_storage */
+    /** @var EntityMetaStorageInterface $entity_meta_storage */
     $entity_meta_storage = \Drupal::entityTypeManager()->getStorage('entity_meta');
     $entity_metas = $entity_meta_storage->getRelatedEntities($entity);
 
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+    /** @var EntityMetaInterface $entity_meta */
     foreach ($entity_metas as $entity_meta_id => $entity_meta) {
       $delta = count($this->list);
       $this->list[$delta] = $this->createItem($delta, $entity_meta);
@@ -77,7 +78,7 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
     $values = $this->list;
     $uuid = $entity->uuid();
 
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $item */
+    /** @var EntityMetaInterface $item */
     foreach ($values as $delta => $item) {
       if ($uuid === $item->entity->uuid()) {
         // If we already have it in the list, replace it and we are done.
@@ -118,14 +119,14 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
    * EntityMeta entities are only attached in case they have changes because we
    * don't want them updated if there are no changes.
    *
-   * @param \Drupal\emr\Entity\EntityMetaInterface $entity
+   * @param EntityMetaInterface $entity
    *   The entity meta entity.
    *
    * @return bool
    *   Whether it should attach or not.
    */
   protected function shouldAttach(EntityMetaInterface $entity): bool {
-    /** @var \Drupal\emr\EntityMetaStorageInterface $entity_meta_storage */
+    /** @var EntityMetaStorageInterface $entity_meta_storage */
     $entity_meta_storage = \Drupal::entityTypeManager()->getStorage('entity_meta');
 
     $change_fields = $entity_meta_storage->getChangeFields($entity);
@@ -158,7 +159,7 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
     }
 
     if (empty($entity_meta)) {
-      /** @var \Drupal\emr\EntityMetaStorageInterface $entity_meta_storage */
+      /** @var EntityMetaStorageInterface $entity_meta_storage */
       $entity_meta_storage = $entity_type_manager = \Drupal::entityTypeManager()->getStorage('entity_meta');
       $entity_meta = $entity_meta_storage->create([
         'bundle' => $bundle,
@@ -235,7 +236,7 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
     // Detach all the values that have not found themselves in the new list.
     $content_entity = $this->getEntity();
     foreach ($to_detach as $item) {
-      /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+      /** @var EntityMetaInterface $entity_meta */
       $entity_meta = $item->entity;
 
       if ($content_entity->isNewRevision()) {
@@ -271,7 +272,7 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
     // Keep track of the new revision in case the loaded one was updated.
     $new_revision = NULL;
     $reverting = FALSE;
-    /** @var \Drupal\emr\EntityMetaStorageInterface $entity_meta_storage */
+    /** @var EntityMetaStorageInterface $entity_meta_storage */
     $entity_meta_storage = \Drupal::entityTypeManager()->getStorage('entity_meta');
 
     if (empty($this->list) && empty($this->entitiesToSkipRelations) && empty($this->entitiesToDeleteRelations)) {
@@ -337,7 +338,7 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
         continue;
       }
 
-      /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+      /** @var EntityMetaInterface $entity_meta */
       $entity_meta = $item->entity;
       if (isset($default_entity_metas[$entity_meta->bundle()])) {
         unset($default_entity_metas[$entity_meta->bundle()]);
@@ -404,7 +405,7 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
    *
    * Marks them also correctly on what should happen with their relations.
    *
-   * @param \Drupal\emr\Entity\EntityMetaInterface $entity_meta
+   * @param EntityMetaInterface $entity_meta
    *   The entity meta.
    *
    * @return bool
@@ -427,7 +428,7 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
   /**
    * Looks in the list for an EntityMeta and returns its delta.
    *
-   * @param \Drupal\emr\Entity\EntityMetaInterface $entity_meta
+   * @param EntityMetaInterface $entity_meta
    *   The entity meta entity.
    *
    * @return int|null
@@ -456,7 +457,7 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
    */
   public function delete() {
     $entity = $this->getEntity();
-    /** @var \Drupal\emr\EntityMetaStorageInterface $storage */
+    /** @var EntityMetaStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('entity_meta');
     $storage->deleteAllRelatedMetaEntities($entity);
   }
@@ -470,7 +471,7 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
    */
   public function deleteRevision() {
     parent::deleteRevision();
-    /** @var \Drupal\emr\EntityMetaStorageInterface $storage */
+    /** @var EntityMetaStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('entity_meta');
     $storage->deleteAllRelatedEntityMetaRelationRevisions($this->getEntity());
   }
@@ -484,7 +485,7 @@ class ComputedEntityMetasItemList extends FieldItemList implements EntityMetaIte
    * @param mixed $item
    *   The field item.
    *
-   * @return \Drupal\emr\Entity\EntityMetaInterface|null
+   * @return EntityMetaInterface|null
    *   The EntityMeta or NULL if none can be found.
    */
   protected function getEntityMetaFromFieldItem($item): ?EntityMetaInterface {
diff --git a/src/Field/EntityMetaItemListInterface.php b/src/Field/EntityMetaItemListInterface.php
index 900f568..d0ee854 100644
--- a/src/Field/EntityMetaItemListInterface.php
+++ b/src/Field/EntityMetaItemListInterface.php
@@ -17,7 +17,7 @@ interface EntityMetaItemListInterface {
    * EntityMeta entities are added to the existing list or replaced if they are
    * already there.
    *
-   * @param \Drupal\emr\Entity\EntityMetaInterface $entity
+   * @param EntityMetaInterface $entity
    *   The entity meta.
    */
   public function attach(EntityMetaInterface $entity): void;
@@ -29,7 +29,7 @@ interface EntityMetaItemListInterface {
    * they can either be marked to have their EntityMetaRelation revision skipped
    * or deleted.
    *
-   * @param \Drupal\emr\Entity\EntityMetaInterface $entity
+   * @param EntityMetaInterface $entity
    *   The entity meta.
    *
    * @see self::entitiesToSkipRelations
@@ -46,7 +46,7 @@ interface EntityMetaItemListInterface {
    * @param string $bundle
    *   The EntityMeta type.
    *
-   * @return \Drupal\emr\Entity\EntityMetaInterface
+   * @return EntityMetaInterface
    *   The entity meta or NULL if none found.
    */
   public function getEntityMeta(string $bundle): ?EntityMetaInterface;
diff --git a/src/Form/EntityMetaForm.php b/src/Form/EntityMetaForm.php
index 2e9b28f..0baefcf 100644
--- a/src/Form/EntityMetaForm.php
+++ b/src/Form/EntityMetaForm.php
@@ -21,7 +21,7 @@ class EntityMetaForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result === SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New entity meta %label has been created.', $message_arguments));
diff --git a/src/Form/EntityMetaRelationForm.php b/src/Form/EntityMetaRelationForm.php
index 4621db3..4479098 100755
--- a/src/Form/EntityMetaRelationForm.php
+++ b/src/Form/EntityMetaRelationForm.php
@@ -21,7 +21,7 @@ class EntityMetaRelationForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result === SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New entity meta relation %label has been created.', $message_arguments));
diff --git a/src/Plugin/EntityMetaRelationContentFormPluginBase.php b/src/Plugin/EntityMetaRelationContentFormPluginBase.php
index b01b5e7..49aadee 100644
--- a/src/Plugin/EntityMetaRelationContentFormPluginBase.php
+++ b/src/Plugin/EntityMetaRelationContentFormPluginBase.php
@@ -31,7 +31,7 @@ abstract class EntityMetaRelationContentFormPluginBase extends EntityMetaRelatio
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $key
    *   The key to use for the container.
diff --git a/src/Plugin/EntityMetaRelationContentFormPluginInterface.php b/src/Plugin/EntityMetaRelationContentFormPluginInterface.php
index 8beda72..c9598f0 100644
--- a/src/Plugin/EntityMetaRelationContentFormPluginInterface.php
+++ b/src/Plugin/EntityMetaRelationContentFormPluginInterface.php
@@ -25,9 +25,9 @@ interface EntityMetaRelationContentFormPluginInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return array
@@ -40,7 +40,7 @@ interface EntityMetaRelationContentFormPluginInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validate(array $form, FormStateInterface $form_state): void;
@@ -50,7 +50,7 @@ interface EntityMetaRelationContentFormPluginInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submit(array $form, FormStateInterface $form_state): void;
diff --git a/src/Plugin/EntityMetaRelationInlineContentFormPluginBase.php b/src/Plugin/EntityMetaRelationInlineContentFormPluginBase.php
index 320bcff..69e08f0 100644
--- a/src/Plugin/EntityMetaRelationInlineContentFormPluginBase.php
+++ b/src/Plugin/EntityMetaRelationInlineContentFormPluginBase.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\emr\Plugin;
 
+use Drupal\emr\Entity\EntityMetaInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -38,7 +39,7 @@ abstract class EntityMetaRelationInlineContentFormPluginBase extends EntityMetaR
    * {@inheritdoc}
    */
   public function submit(array $form, FormStateInterface $form_state): void {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $host_entity */
+    /** @var ContentEntityInterface $host_entity */
     $host_entity = $form_state->getFormObject()->getEntity();
 
     $key = $this->getFormKey();
@@ -52,7 +53,7 @@ abstract class EntityMetaRelationInlineContentFormPluginBase extends EntityMetaR
     $inline_form_handler = $this->entityTypeManager->getHandler($entity_form['#entity_type'], 'inline_form');
     $inline_form_handler->entityFormSubmit($entity_form, $form_state);
 
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity */
+    /** @var EntityMetaInterface $entity */
     $entity = $entity_form['#entity'];
     $host_entity->get('emr_entity_metas')->attach($entity);
   }
diff --git a/src/Plugin/EntityMetaRelationPluginBase.php b/src/Plugin/EntityMetaRelationPluginBase.php
index 165a5b8..8feb417 100644
--- a/src/Plugin/EntityMetaRelationPluginBase.php
+++ b/src/Plugin/EntityMetaRelationPluginBase.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\emr\Plugin;
 
+use Drupal\emr\EntityMetaStorageInterface;
+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -20,21 +23,21 @@ abstract class EntityMetaRelationPluginBase extends PluginBase implements Entity
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity meta storage.
    *
-   * @var \Drupal\emr\EntityMetaStorageInterface
+   * @var EntityMetaStorageInterface
    */
   protected $entityMetaStorage;
 
@@ -88,7 +91,7 @@ abstract class EntityMetaRelationPluginBase extends PluginBase implements Entity
       return FALSE;
     }
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $content_field_definition */
+    /** @var FieldConfigInterface $content_field_definition */
     $meta_field_definition = $fields[$entity_meta_relation_meta_field];
     $target_meta_bundles = $meta_field_definition->getSetting('handler_settings')['target_bundles'] ?? [];
     // If the associated entity meta bundle used by the plugin is not available
@@ -97,7 +100,7 @@ abstract class EntityMetaRelationPluginBase extends PluginBase implements Entity
       return FALSE;
     }
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_definition */
+    /** @var FieldConfigInterface $field_definition */
     $content_field_definition = $fields[$entity_meta_relation_content_field];
     $target_content_bundles = $content_field_definition->getSetting('handler_settings')['target_bundles'];
     // If current content bundle is not available in the relationship,
@@ -109,7 +112,7 @@ abstract class EntityMetaRelationPluginBase extends PluginBase implements Entity
     // If this entity has bundles, checks that the plugin is applicable to it.
     if (!empty($entity->getEntityType()->getBundleEntityType())) {
       $bundle_storage = $this->entityTypeManager->getStorage($entity->getEntityType()->getBundleEntityType());
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle */
+      /** @var ConfigEntityInterface $bundle */
       $bundle = $bundle_storage->load($entity->bundle());
       $entity_meta_bundles = $bundle->getThirdPartySetting('emr', 'entity_meta_bundles');
       if (!in_array($this->pluginDefinition['entity_meta_bundle'], $entity_meta_bundles)) {
diff --git a/src/Plugin/EntityMetaRelationPluginInterface.php b/src/Plugin/EntityMetaRelationPluginInterface.php
index 8679993..6f16cc9 100644
--- a/src/Plugin/EntityMetaRelationPluginInterface.php
+++ b/src/Plugin/EntityMetaRelationPluginInterface.php
@@ -16,7 +16,7 @@ interface EntityMetaRelationPluginInterface extends PluginInspectionInterface {
   /**
    * Checks if the plugin is applicable to the passed content entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    *
    * @return bool
@@ -27,7 +27,7 @@ interface EntityMetaRelationPluginInterface extends PluginInspectionInterface {
   /**
    * Fill entity meta with default values.
    *
-   * @param \Drupal\emr\Entity\EntityMetaInterface $entity_meta
+   * @param EntityMetaInterface $entity_meta
    *   The entity meta.
    */
   public function fillDefaultEntityMetaValues(EntityMetaInterface $entity_meta): void;
diff --git a/src/Plugin/EntityMetaRelationPluginManager.php b/src/Plugin/EntityMetaRelationPluginManager.php
index 3641874..cce2514 100644
--- a/src/Plugin/EntityMetaRelationPluginManager.php
+++ b/src/Plugin/EntityMetaRelationPluginManager.php
@@ -17,9 +17,9 @@ class EntityMetaRelationPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/tests/src/Functional/EntityMetaRelationContentFormTest.php b/tests/src/Functional/EntityMetaRelationContentFormTest.php
index 837b213..b109b3e 100644
--- a/tests/src/Functional/EntityMetaRelationContentFormTest.php
+++ b/tests/src/Functional/EntityMetaRelationContentFormTest.php
@@ -4,6 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\entity_meta_relation\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\emr\EntityMetaStorageInterface;
+use Drupal\emr\EntityMetaRelationStorageInterface;
+use Drupal\node\NodeStorageInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\BrowserTestBase;
@@ -19,7 +23,7 @@ class EntityMetaRelationContentFormTest extends BrowserTestBase {
   /**
    * Admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
@@ -71,9 +75,9 @@ class EntityMetaRelationContentFormTest extends BrowserTestBase {
    * Tests content editing in entities using a single entity meta.
    */
   public function testContentWithSingleEntityMetaEditing(): void {
-    /** @var \Drupal\emr\EntityMetaStorageInterface $entity_meta_storage */
+    /** @var EntityMetaStorageInterface $entity_meta_storage */
     $entity_meta_storage = \Drupal::service('entity_type.manager')->getStorage('entity_meta');
-    /** @var \Drupal\emr\EntityMetaRelationStorageInterface $entity_meta_relation_storage */
+    /** @var EntityMetaRelationStorageInterface $entity_meta_relation_storage */
     $entity_meta_relation_storage = \Drupal::service('entity_type.manager')->getStorage('entity_meta_relation');
 
     // Create a new content entity but don't specify any meta value.
@@ -183,9 +187,9 @@ class EntityMetaRelationContentFormTest extends BrowserTestBase {
    * Tests that we can unset an entity meta relation in the form.
    */
   public function testRemoveMetaRelation(): void {
-    /** @var \Drupal\emr\EntityMetaStorageInterface $entity_meta_storage */
+    /** @var EntityMetaStorageInterface $entity_meta_storage */
     $entity_meta_storage = \Drupal::service('entity_type.manager')->getStorage('entity_meta');
-    /** @var \Drupal\emr\EntityMetaRelationStorageInterface $entity_meta_relation_storage */
+    /** @var EntityMetaRelationStorageInterface $entity_meta_relation_storage */
     $entity_meta_relation_storage = \Drupal::service('entity_type.manager')->getStorage('entity_meta_relation');
 
     // Create a new content entity with a meta value.
@@ -262,11 +266,11 @@ class EntityMetaRelationContentFormTest extends BrowserTestBase {
    * Tests content editing in entities using multiple entity metas.
    */
   public function testContentWithMultiEntityMetaEditing(): void {
-    /** @var \Drupal\emr\EntityMetaStorageInterface $entity_meta_storage */
+    /** @var EntityMetaStorageInterface $entity_meta_storage */
     $entity_meta_storage = \Drupal::service('entity_type.manager')->getStorage('entity_meta');
-    /** @var \Drupal\emr\EntityMetaRelationStorageInterface $entity_meta_relation_storage */
+    /** @var EntityMetaRelationStorageInterface $entity_meta_relation_storage */
     $entity_meta_relation_storage = \Drupal::service('entity_type.manager')->getStorage('entity_meta_relation');
-    /** @var \Drupal\node\NodeStorageInterface $node_storage */
+    /** @var NodeStorageInterface $node_storage */
     $node_storage = \Drupal::service('entity_type.manager')->getStorage('node');
 
     // Create a new content entity but don't specify any meta value.
@@ -446,7 +450,7 @@ class EntityMetaRelationContentFormTest extends BrowserTestBase {
    * @param string $label
    *   The label of the entity to load.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   protected function getEntityByLabel($type, $label): EntityInterface {
diff --git a/tests/src/Kernel/EntityMetaRelationAttachByDefaultTest.php b/tests/src/Kernel/EntityMetaRelationAttachByDefaultTest.php
index 9639a9d..ff376a5 100644
--- a/tests/src/Kernel/EntityMetaRelationAttachByDefaultTest.php
+++ b/tests/src/Kernel/EntityMetaRelationAttachByDefaultTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\emr\Kernel;
 
+use Drupal\emr\EntityMetaStorageInterface;
+use Drupal\emr\EntityMetaRelationStorageInterface;
+use Drupal\node\NodeStorageInterface;
+use Drupal\emr\Entity\EntityMetaInterface;
 use Drupal\emr\Field\EntityMetaItemListInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\NodeInterface;
@@ -34,21 +38,21 @@ class EntityMetaRelationAttachByDefaultTest extends KernelTestBase {
   /**
    * The entity meta storage.
    *
-   * @var \Drupal\emr\EntityMetaStorageInterface
+   * @var EntityMetaStorageInterface
    */
   protected $entityMetaStorage;
 
   /**
    * The entity meta relation storage.
    *
-   * @var \Drupal\emr\EntityMetaRelationStorageInterface
+   * @var EntityMetaRelationStorageInterface
    */
   protected $entityMetaRelationStorage;
 
   /**
    * The node storage.
    *
-   * @var \Drupal\node\NodeStorageInterface
+   * @var NodeStorageInterface
    */
   protected $nodeStorage;
 
@@ -79,7 +83,7 @@ class EntityMetaRelationAttachByDefaultTest extends KernelTestBase {
 
     // We create a first node, we don't use for anything to ensure we don't
     // have coincidental matching IDs between nodes and entity metas.
-    /** @var \Drupal\node\NodeInterface $first_node */
+    /** @var NodeInterface $first_node */
     $first_node = $this->nodeStorage->create([
       'type' => 'entity_meta_example_ct',
       'title' => 'First node',
@@ -102,7 +106,7 @@ class EntityMetaRelationAttachByDefaultTest extends KernelTestBase {
    * values when needed.
    */
   public function testCreateEntityMetaWithDefaultValues() {
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+    /** @var EntityMetaInterface $entity_meta */
     $entity_meta = $this->entityMetaStorage->create([
       'bundle' => 'force',
     ]);
@@ -111,7 +115,7 @@ class EntityMetaRelationAttachByDefaultTest extends KernelTestBase {
     // Assert that force EntityMeta has default values.
     $this->assertEquals('weak', $entity_meta->getWrapper()->getGravity());
 
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+    /** @var EntityMetaInterface $entity_meta */
     $entity_meta = $this->entityMetaStorage->create([
       'bundle' => 'audio',
     ]);
@@ -124,7 +128,7 @@ class EntityMetaRelationAttachByDefaultTest extends KernelTestBase {
    * Tests that entity metas can be created with default values.
    */
   public function testApiWithDefaultValues() {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->nodeStorage->create([
       'type' => 'entity_meta_example_ct',
       'title' => 'Second node',
@@ -224,7 +228,7 @@ class EntityMetaRelationAttachByDefaultTest extends KernelTestBase {
    * Tests that the host entity can skip the presetting of defaults in the meta.
    */
   public function testApiWithSkippingDefaultValues() {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->nodeStorage->create([
       'type' => 'entity_meta_example_ct',
       'title' => 'Second node',
@@ -254,10 +258,10 @@ class EntityMetaRelationAttachByDefaultTest extends KernelTestBase {
   /**
    * Helper method to retrieve the entity meta list field value from a Node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node.
    *
-   * @return \Drupal\emr\Field\EntityMetaItemListInterface
+   * @return EntityMetaItemListInterface
    *   The computed list.
    */
   protected function getEntityMetaList(NodeInterface $node): EntityMetaItemListInterface {
diff --git a/tests/src/Kernel/EntityMetaRelationRevisionTest.php b/tests/src/Kernel/EntityMetaRelationRevisionTest.php
index 4b51f4d..cefd356 100644
--- a/tests/src/Kernel/EntityMetaRelationRevisionTest.php
+++ b/tests/src/Kernel/EntityMetaRelationRevisionTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\emr\Kernel;
 
+use Drupal\emr\EntityMetaStorageInterface;
+use Drupal\emr\EntityMetaRelationStorageInterface;
+use Drupal\node\NodeStorageInterface;
+use Drupal\node\NodeInterface;
+use Drupal\emr\Entity\EntityMetaInterface;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -31,21 +36,21 @@ class EntityMetaRelationRevisionTest extends KernelTestBase {
   /**
    * The entity meta storage.
    *
-   * @var \Drupal\emr\EntityMetaStorageInterface
+   * @var EntityMetaStorageInterface
    */
   protected $entityMetaStorage;
 
   /**
    * The entity meta relation storage.
    *
-   * @var \Drupal\emr\EntityMetaRelationStorageInterface
+   * @var EntityMetaRelationStorageInterface
    */
   protected $entityMetaRelationStorage;
 
   /**
    * The node storage.
    *
-   * @var \Drupal\node\NodeStorageInterface
+   * @var NodeStorageInterface
    */
   protected $nodeStorage;
 
@@ -158,7 +163,7 @@ class EntityMetaRelationRevisionTest extends KernelTestBase {
    */
   public function testContentEntityRevisionsRevert() {
     // Revert first revision.
-    /** @var \Drupal\node\NodeInterface $node_first_revision */
+    /** @var NodeInterface $node_first_revision */
     $node_first_revision = $this->nodeStorage->loadRevision(1);
     $node_first_revision->setNewRevision(TRUE);
     $node_first_revision->save();
@@ -237,7 +242,7 @@ class EntityMetaRelationRevisionTest extends KernelTestBase {
    * list.
    */
   public function testContentEntityRevisionStatus(): void {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->nodeStorage->create([
       'type' => 'entity_meta_multi_example_ct',
       'title' => 'Node test',
@@ -252,7 +257,7 @@ class EntityMetaRelationRevisionTest extends KernelTestBase {
 
     $this->nodeStorage->resetCache();
     $node = $this->nodeStorage->load($node->id());
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+    /** @var EntityMetaInterface $entity_meta */
     $entity_meta = $node->get('emr_entity_metas')->getEntityMeta('visual');
     $this->assertTrue($entity_meta->isEnabled());
 
@@ -267,7 +272,7 @@ class EntityMetaRelationRevisionTest extends KernelTestBase {
     // Now the meta should be disabled.
     $this->nodeStorage->resetCache();
     $node = $this->nodeStorage->load($node->id());
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+    /** @var EntityMetaInterface $entity_meta */
     $entity_meta = $node->get('emr_entity_metas')->getEntityMeta('visual');
     $this->assertFalse($entity_meta->isEnabled());
   }
@@ -276,7 +281,7 @@ class EntityMetaRelationRevisionTest extends KernelTestBase {
    * Create a node with changes done through three revisions.
    */
   protected function createNodeWithFourRevisions() {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->nodeStorage->create([
       'type' => 'entity_meta_multi_example_ct',
       'title' => 'Node test',
@@ -315,7 +320,7 @@ class EntityMetaRelationRevisionTest extends KernelTestBase {
 
     // Third revision - Change visual and speed.
     $this->nodeStorage->resetCache();
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->nodeStorage->load(1);
     $entity_meta_visual = $node->get('emr_entity_metas')->getEntityMeta('visual');
     $entity_meta_speed = $node->get('emr_entity_metas')->getEntityMeta('speed');
@@ -328,7 +333,7 @@ class EntityMetaRelationRevisionTest extends KernelTestBase {
     $node->save();
 
     // Fourth revision - Change visual an publish back the node.
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->nodeStorage->load(1);
     $entity_meta_visual = $node->get('emr_entity_metas')->getEntityMeta('visual');
     $entity_meta_visual->set('field_color', 'red');
@@ -370,7 +375,7 @@ class EntityMetaRelationRevisionTest extends KernelTestBase {
    *   The Node revision ID.
    */
   protected function assertEntityMetaRevisionValues(int $revision): void {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->nodeStorage->loadRevision($revision);
 
     switch ($revision) {
diff --git a/tests/src/Kernel/EntityMetaRelationTest.php b/tests/src/Kernel/EntityMetaRelationTest.php
index a8b5704..d290606 100644
--- a/tests/src/Kernel/EntityMetaRelationTest.php
+++ b/tests/src/Kernel/EntityMetaRelationTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\emr\Kernel;
 
+use Drupal\emr\EntityMetaStorageInterface;
+use Drupal\emr\EntityMetaRelationStorageInterface;
+use Drupal\node\NodeStorageInterface;
+use Drupal\emr\Entity\EntityMetaRelationInterface;
 use Drupal\emr\Entity\EntityMetaInterface;
 use Drupal\emr\Field\EntityMetaItemListInterface;
 use Drupal\KernelTests\KernelTestBase;
@@ -34,21 +38,21 @@ class EntityMetaRelationTest extends KernelTestBase {
   /**
    * The entity meta storage.
    *
-   * @var \Drupal\emr\EntityMetaStorageInterface
+   * @var EntityMetaStorageInterface
    */
   protected $entityMetaStorage;
 
   /**
    * The entity meta relation storage.
    *
-   * @var \Drupal\emr\EntityMetaRelationStorageInterface
+   * @var EntityMetaRelationStorageInterface
    */
   protected $entityMetaRelationStorage;
 
   /**
    * The node storage.
    *
-   * @var \Drupal\node\NodeStorageInterface
+   * @var NodeStorageInterface
    */
   protected $nodeStorage;
 
@@ -78,7 +82,7 @@ class EntityMetaRelationTest extends KernelTestBase {
 
     // We create a first node we don't use for anything to ensure we don't
     // have coincidental matching IDs between nodes and entity metas.
-    /** @var \Drupal\node\NodeInterface $first_node */
+    /** @var NodeInterface $first_node */
     $first_node = $this->nodeStorage->create([
       'type' => 'entity_meta_example_ct',
       'title' => 'First node',
@@ -91,7 +95,7 @@ class EntityMetaRelationTest extends KernelTestBase {
    * Tests that entity meta can be correctly related to content entities (node).
    */
   public function testSingleEntityMetaRelations() {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->nodeStorage->create([
       'type' => 'entity_meta_example_ct',
       'title' => 'Second node',
@@ -104,7 +108,7 @@ class EntityMetaRelationTest extends KernelTestBase {
     $this->assertEmpty($entity_meta_relations);
 
     // Manually create an entity meta for bundle "visual".
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+    /** @var EntityMetaInterface $entity_meta */
     $entity_meta = $this->entityMetaStorage->create([
       'bundle' => 'visual',
       'field_color' => 'red',
@@ -135,7 +139,7 @@ class EntityMetaRelationTest extends KernelTestBase {
     // been created.
     $entity_meta_relations = $this->entityMetaRelationStorage->loadMultiple();
     $this->assertCount(1, $entity_meta_relations);
-    /** @var \Drupal\emr\Entity\EntityMetaRelationInterface $entity_meta_relation */
+    /** @var EntityMetaRelationInterface $entity_meta_relation */
     $entity_meta_relation = reset($entity_meta_relations);
     // Only one revision of the relation should have been made.
     $results = $this->entityMetaRelationStorage->getQuery()->allRevisions()->execute();
@@ -263,7 +267,7 @@ class EntityMetaRelationTest extends KernelTestBase {
    * Tests that entity meta can be correctly related to content entities (node).
    */
   public function testMultipleEntityMetaRelations() {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->nodeStorage->create([
       'type' => 'entity_meta_multi_example_ct',
       'title' => 'Second node',
@@ -276,7 +280,7 @@ class EntityMetaRelationTest extends KernelTestBase {
     $this->assertEmpty($entity_meta_relations);
 
     // Create entity meta for bundle "visual".
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta_visual */
+    /** @var EntityMetaInterface $entity_meta_visual */
     $entity_meta_visual = $this->entityMetaStorage->create([
       'bundle' => 'visual',
       'field_color' => 'red',
@@ -287,7 +291,7 @@ class EntityMetaRelationTest extends KernelTestBase {
     $this->assertEquals('red', $entity_meta_visual->get('field_color')->value);
 
     // Create entity meta for bundle "audio".
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta_audio */
+    /** @var EntityMetaInterface $entity_meta_audio */
     $entity_meta_audio = $this->entityMetaStorage->create([
       'bundle' => 'audio',
       'field_volume' => 'low',
@@ -326,7 +330,7 @@ class EntityMetaRelationTest extends KernelTestBase {
     $entity_meta_relations = $this->entityMetaRelationStorage->loadMultiple();
     $this->assertCount(2, $entity_meta_relations);
     // The first relation points to the Visual meta.
-    /** @var \Drupal\emr\Entity\EntityMetaRelationInterface $entity_meta_relation */
+    /** @var EntityMetaRelationInterface $entity_meta_relation */
     $entity_meta_relation = array_shift($entity_meta_relations);
     $this->assertEquals(1, $entity_meta_relation->getRevisionId());
     $this->assertEquals(1, $entity_meta_relation->get('emr_meta_revision')->target_id);
@@ -446,7 +450,7 @@ class EntityMetaRelationTest extends KernelTestBase {
    * Tests that entity metas can be attached to content entities.
    */
   public function testContentEntityAttach() {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->nodeStorage->create([
       'type' => 'entity_meta_multi_example_ct',
       'title' => 'Second node',
@@ -461,7 +465,7 @@ class EntityMetaRelationTest extends KernelTestBase {
     $this->assertTrue($entity_meta_speed->isNew());
     $entity_meta_speed->getWrapper()->setGear(1);
 
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+    /** @var EntityMetaInterface $entity_meta */
     $entity_meta_audio = $this->getEntityMetaList($node)->getEntityMeta('audio');
     $entity_meta_audio->getWrapper()->setVolume('low');
 
@@ -573,7 +577,7 @@ class EntityMetaRelationTest extends KernelTestBase {
    * Tests that entity metas can be detached from content entities.
    */
   public function testContentEntityDetach() {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->nodeStorage->create([
       'type' => 'entity_meta_multi_example_ct',
       'title' => 'Second node',
@@ -770,7 +774,7 @@ class EntityMetaRelationTest extends KernelTestBase {
    * Test setting entity metas using the field API setter.
    */
   public function testContentEntitySet() {
-    /** @var \Drupal\node\NodeInterface $first_node */
+    /** @var NodeInterface $first_node */
     $node = $this->nodeStorage->create([
       'type' => 'entity_meta_multi_example_ct',
       'title' => 'Node test',
@@ -779,7 +783,7 @@ class EntityMetaRelationTest extends KernelTestBase {
       'bundle' => 'speed',
       'field_gear' => '3',
     ]);
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+    /** @var EntityMetaInterface $entity_meta */
     $entity_meta_audio = $this->entityMetaStorage->create([
       'bundle' => 'audio',
       'field_volume' => 'low',
@@ -847,7 +851,7 @@ class EntityMetaRelationTest extends KernelTestBase {
       'bundle' => 'speed',
       'field_gear' => '3',
     ])->save();
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+    /** @var EntityMetaInterface $entity_meta */
     $this->entityMetaStorage->create([
       'bundle' => 'audio',
       'field_volume' => 'low',
@@ -928,7 +932,7 @@ class EntityMetaRelationTest extends KernelTestBase {
    * Tests the entity meta default marking with a host.
    */
   public function testEntityMetaDefaultRevisionsWithHost(): void {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->nodeStorage->create([
       'type' => 'entity_meta_example_ct',
       'title' => 'Second node',
@@ -1055,7 +1059,7 @@ class EntityMetaRelationTest extends KernelTestBase {
    * Tests the computed default revision field.
    */
   public function testDefaultRevisionField(): void {
-    /** @var \Drupal\emr\Entity\EntityMetaInterface $entity_meta */
+    /** @var EntityMetaInterface $entity_meta */
     $entity_meta = $this->entityMetaStorage->create([
       'bundle' => 'speed',
       'field_gear' => '3',
@@ -1113,10 +1117,10 @@ class EntityMetaRelationTest extends KernelTestBase {
   /**
    * Helper method to retrieve the entity meta list field value from a Node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node.
    *
-   * @return \Drupal\emr\Field\EntityMetaItemListInterface
+   * @return EntityMetaItemListInterface
    *   The computed list.
    */
   protected function getEntityMetaList(NodeInterface $node): EntityMetaItemListInterface {
@@ -1126,7 +1130,7 @@ class EntityMetaRelationTest extends KernelTestBase {
   /**
    * Asserts a given entity meta's default revision ID.
    *
-   * @param \Drupal\emr\Entity\EntityMetaInterface $entity_meta
+   * @param EntityMetaInterface $entity_meta
    *   The entity meta.
    * @param int|strin $revision_id
    *   The expected revision ID.
