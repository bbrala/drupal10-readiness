diff --git a/modules/exportable_controllers_metatag/exportable_controllers_metatag.module b/modules/exportable_controllers_metatag/exportable_controllers_metatag.module
index 9900f4c..fb42140 100644
--- a/modules/exportable_controllers_metatag/exportable_controllers_metatag.module
+++ b/modules/exportable_controllers_metatag/exportable_controllers_metatag.module
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\exportable_controllers_metatag\MetatagsManager;
+use Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Routing\RouteMatch;
 /**
  * @file
  * Primary module hooks for Exportable Controllers: Metatag module.
@@ -16,7 +21,7 @@ use Drupal\exportable_controllers\Entity\ExportableControllerEntity;
  * Implements hook_form_alter().
  */
 function exportable_controllers_metatag_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\exportable_controllers_metatag\MetatagsManager $exportableMegatags */
+  /** @var MetatagsManager $exportableMegatags */
   $exportableMegatags = \Drupal::service('exportable_controllers_metatag.manager');
 
   switch ($form_id) {
@@ -24,7 +29,7 @@ function exportable_controllers_metatag_form_alter(&$form, FormStateInterface $f
     case 'config_translation_edit_form':
       // Get the parameters from request.
       $request = \Drupal::request();
-      /** @var \Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface $exportableController */
+      /** @var ExportableControllerEntityInterface $exportableController */
       $exportableController = $request->get('exportable_controller_entity');
       if (!$exportableController) {
         return;
@@ -80,14 +85,14 @@ function exportable_controllers_metatag_form_alter(&$form, FormStateInterface $f
  *
  * @param array $form
  *   The form definition.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current form state.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _exportable_controllers_metatag_translated_submit(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\exportable_controllers_metatag\MetatagsManager $exportableMegatags */
+  /** @var MetatagsManager $exportableMegatags */
   $exportableMegatags = \Drupal::service('exportable_controllers_metatag.manager');
 
   // Get the values of metatags.
@@ -95,7 +100,7 @@ function _exportable_controllers_metatag_translated_submit(array &$form, FormSta
   $translated_values = array_combine(array_keys($values), array_column($values, 'translation'));
 
   // Get object.
-  /** @var \Drupal\Core\Routing\RouteMatch $routeMatch */
+  /** @var RouteMatch $routeMatch */
   $routeMatch = $form_state->getBuildInfo()['args'][0];
   $exportableController = $routeMatch->getParameter('exportable_controller_entity');
   $language = \Drupal::languageManager()->getLanguage($routeMatch->getParameter('langcode'));
@@ -144,14 +149,14 @@ function _exportable_controllers_metatag_translated_submit(array &$form, FormSta
  *
  * @param array $form
  *   The form definition.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current form state.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _exportable_controllers_metatag_submit(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\exportable_controllers_metatag\MetatagsManager $exportableMegatags */
+  /** @var MetatagsManager $exportableMegatags */
   $exportableMegatags = \Drupal::service('exportable_controllers_metatag.manager');
   // Get the submitted form values.
   $metatags = $form_state->getValues();
diff --git a/modules/exportable_controllers_metatag/src/MetatagsManager.php b/modules/exportable_controllers_metatag/src/MetatagsManager.php
index a0e6064..d76b7e3 100644
--- a/modules/exportable_controllers_metatag/src/MetatagsManager.php
+++ b/modules/exportable_controllers_metatag/src/MetatagsManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\exportable_controllers_metatag;
 
+use Drupal\Core\Routing\RouteMatch;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
@@ -34,21 +36,21 @@ class MetatagsManager {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -64,11 +66,11 @@ class MetatagsManager {
    *
    * @param \Drupal\metatag\MetatagManager $metatag_manager
    *   The metatag.manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language manager.
    * @param \Drupal\metatag\MetatagTagPluginManager $metatagTagPluginManager
    *   Metatag tag plugin manager.
@@ -90,13 +92,13 @@ class MetatagsManager {
   /**
    * Gets the translated values while storing a copy of the original values.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
-   * @param \Drupal\Core\Language\Language $language
+   * @param Language $language
    *   Language.
    */
   public function prepareTranslatedValues(FormStateInterface $form_state, Language $language) {
-    /** @var \Drupal\Core\Routing\RouteMatch $routeMatch */
+    /** @var RouteMatch $routeMatch */
     $routeMatch = $form_state->getBuildInfo()['args'][0];
     $exportableController = $routeMatch->getParameter('exportable_controller_entity');
 
@@ -162,7 +164,7 @@ class MetatagsManager {
         $lines = [];
         /**
          * @var string $key
-         * @var \Drupal\Core\StringTranslation\TranslatableMarkup $option
+         * @var TranslatableMarkup $option
          */
         foreach ($options as $key => $option) {
           if ($value[$key] === $key) {
@@ -170,7 +172,7 @@ class MetatagsManager {
           }
         }
         $element[$tag_id]['source']['#markup'] = '<ul>';
-        /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $line */
+        /** @var TranslatableMarkup $line */
         foreach ($lines as $line) {
           $element[$tag_id]['source']['#markup'] .= '<li>' . $line . '</li>';
         }
diff --git a/src/Controller/ExportableControllersController.php b/src/Controller/ExportableControllersController.php
index afe255c..5d15ffe 100644
--- a/src/Controller/ExportableControllersController.php
+++ b/src/Controller/ExportableControllersController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\exportable_controllers\Controller;
 
+use Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\exportable_controllers\Entity\ExportableControllerEntity;
 
@@ -21,14 +24,14 @@ class ExportableControllersController extends ControllerBase {
   /**
    * Provides the page title for this controller.
    *
-   * @param \Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface|null $entity
+   * @param ExportableControllerEntityInterface|null $entity
    *   Current entity.
    *
    * @return string
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getTitle($entity = NULL) {
     $exportable = $this->entityTypeManager()->getStorage('exportable_controller_entity')->load($entity);
diff --git a/src/Entity/ExportableControllerEntity.php b/src/Entity/ExportableControllerEntity.php
index 90d6163..1b51a51 100644
--- a/src/Entity/ExportableControllerEntity.php
+++ b/src/Entity/ExportableControllerEntity.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\exportable_controllers\Entity;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -143,18 +146,18 @@ class ExportableControllerEntity extends ConfigEntityBase implements ExportableC
   /**
    * Get translated config entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $configEntity
+   * @param ConfigEntityInterface $configEntity
    *   The config entity to translate.
-   * @param \Drupal\Core\Language\LanguageInterface|null $language
+   * @param LanguageInterface|null $language
    *   The translation language to get.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Translated config entity.
    *
    * @see https://drupal.stackexchange.com/a/270095
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function getTranslated(ConfigEntityInterface $configEntity, LanguageInterface $language = NULL) {
     if (!$language) {
diff --git a/src/ExportableControllerEntityListBuilder.php b/src/ExportableControllerEntityListBuilder.php
index ae0832a..ae622fb 100644
--- a/src/ExportableControllerEntityListBuilder.php
+++ b/src/ExportableControllerEntityListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\exportable_controllers;
 
+use Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -40,7 +41,7 @@ class ExportableControllerEntityListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface $entity */
+    /** @var ExportableControllerEntityInterface $entity */
     $label = [
       '#markup' => $entity->label(),
     ];
diff --git a/src/Form/ExportableControllerEntityForm.php b/src/Form/ExportableControllerEntityForm.php
index 98c5899..a657b4d 100644
--- a/src/Form/ExportableControllerEntityForm.php
+++ b/src/Form/ExportableControllerEntityForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\exportable_controllers\Form;
 
+use Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,32 +19,32 @@ class ExportableControllerEntityForm extends EntityForm {
   /**
    * The permission handler.
    *
-   * @var \Drupal\user\PermissionHandlerInterface
+   * @var PermissionHandlerInterface
    */
   protected $permissionHandler;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Router builder.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;
 
   /**
    * Constructs a object.
    *
-   * @param \Drupal\user\PermissionHandlerInterface $permission_handler
+   * @param PermissionHandlerInterface $permission_handler
    *   The permission handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $routeBuilder
+   * @param RouteBuilderInterface $routeBuilder
    *   Router builder.
    */
   public function __construct(
@@ -73,7 +74,7 @@ class ExportableControllerEntityForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface $exportable_controller_entity */
+    /** @var ExportableControllerEntityInterface $exportable_controller_entity */
     $exportable_controller_entity = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ -204,7 +205,7 @@ class ExportableControllerEntityForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface $exportable_controller_entity */
+    /** @var ExportableControllerEntityInterface $exportable_controller_entity */
     $exportable_controller_entity = $this->entity;
 
     $exportable_controller_entity->setPath($form_state->getValue('path'));
diff --git a/src/Routing/ExportableControllerRoutes.php b/src/Routing/ExportableControllerRoutes.php
index b81362d..dfcb758 100644
--- a/src/Routing/ExportableControllerRoutes.php
+++ b/src/Routing/ExportableControllerRoutes.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\exportable_controllers\Routing;
 
+use Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\exportable_controllers\Entity\ExportableControllerEntity;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -17,23 +18,23 @@ class ExportableControllerRoutes implements ContainerInjectionInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new ExportableControllerRoutes object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language manager.
    */
   public function __construct(
@@ -57,16 +58,16 @@ class ExportableControllerRoutes implements ContainerInjectionInterface {
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes() {
     $routes = [];
 
     $expRoutes = $this->entityTypeManager->getStorage('exportable_controller_entity')->loadMultiple();
-    /** @var \Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface $exportableController */
+    /** @var ExportableControllerEntityInterface $exportableController */
     foreach ($expRoutes as $exportableController) {
-      /** @var \Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface $exportableControllerDefault */
+      /** @var ExportableControllerEntityInterface $exportableControllerDefault */
       $exportableControllerDefault = ExportableControllerEntity::getTranslated($exportableController);
       if ($exportableController->status()) {
         $aux = [
@@ -101,7 +102,7 @@ class ExportableControllerRoutes implements ContainerInjectionInterface {
         $languages = $this->languageManager->getLanguages();
         unset($languages[$this->languageManager->getDefaultLanguage()->getId()]);
         foreach ($languages as $language) {
-          /** @var \Drupal\exportable_controllers\Entity\ExportableControllerEntityInterface $exportableControllerDefault */
+          /** @var ExportableControllerEntityInterface $exportableControllerDefault */
           $exportableControllerTrans = ExportableControllerEntity::getTranslated($exportableControllerDefault, $language);
           if (!$exportableControllerTrans->isNew()) {
             if ($exportableControllerDefault->label() != $exportableControllerTrans->label()) {
