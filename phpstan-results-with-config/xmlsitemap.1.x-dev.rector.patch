diff --git a/src/Commands/XmlSitemapCommands.php b/src/Commands/XmlSitemapCommands.php
index 4cb8366..384899c 100644
--- a/src/Commands/XmlSitemapCommands.php
+++ b/src/Commands/XmlSitemapCommands.php
@@ -15,32 +15,32 @@ class XmlSitemapCommands extends DrushCommands {
   /**
    * The config.factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The module_handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Default database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * XmlSitemapCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config.factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module_handler service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Default database connection.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ModuleHandlerInterface $moduleHandler, Connection $connection) {
diff --git a/src/Controller/XmlSitemapController.php b/src/Controller/XmlSitemapController.php
index ccd7535..c815129 100644
--- a/src/Controller/XmlSitemapController.php
+++ b/src/Controller/XmlSitemapController.php
@@ -24,23 +24,23 @@ class XmlSitemapController extends ControllerBase {
   /**
    * The state store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new XmlSitemapController object.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(StateInterface $state, ConfigFactoryInterface $config_factory) {
@@ -61,14 +61,14 @@ class XmlSitemapController extends ControllerBase {
   /**
    * Provides the sitemap in XML format.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The sitemap in XML format or plain text if xmlsitemap_developer_mode flag
    *   is set.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   If the sitemap is not found or the sitemap file is not readable.
    */
   public function renderSitemapXml(Request $request) {
@@ -104,15 +104,15 @@ class XmlSitemapController extends ControllerBase {
    *
    * @param string $file
    *   File uri.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param array $headers
    *   An array of response headers
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The sitemap response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   If the sitemap is not found or the sitemap file is not readable.
    */
   public function getSitemapResponse($file, Request $request, array $headers = []) {
@@ -154,12 +154,12 @@ class XmlSitemapController extends ControllerBase {
   /**
    * Provides the sitemap in XSL format.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Response object in XSL format.
    */
   public function renderSitemapXsl() {
     // Read the XSL content from the file.
-    $module_path = drupal_get_path('module', 'xmlsitemap');
+    $module_path = \Drupal::service('extension.list.module')->getPath('xmlsitemap');
     $xsl_content = file_get_contents($module_path . '/xsl/xmlsitemap.xsl');
 
     // Make sure the strings in the XSL content are translated properly.
diff --git a/src/Form/XmlSitemapEntitiesSettingsForm.php b/src/Form/XmlSitemapEntitiesSettingsForm.php
index 377697a..df23306 100644
--- a/src/Form/XmlSitemapEntitiesSettingsForm.php
+++ b/src/Form/XmlSitemapEntitiesSettingsForm.php
@@ -20,21 +20,21 @@ class XmlSitemapEntitiesSettingsForm extends ConfigFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -48,13 +48,13 @@ class XmlSitemapEntitiesSettingsForm extends ConfigFormBase {
   /**
    * Constructs a XmlSitemapEntitiesSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The object State.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, StateInterface $state) {
@@ -91,7 +91,7 @@ class XmlSitemapEntitiesSettingsForm extends ConfigFormBase {
     $form = parent::buildForm($form, $form_state);
 
     // Create the list of possible entity types.
-    /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+    /** @var EntityTypeInterface[] $entity_types */
     $entity_types = array_filter($this->entityTypeManager->getDefinitions(), 'xmlsitemap_is_entity_type_supported');
 
     // Create the list of options as well as the default values based on which
diff --git a/src/Form/XmlSitemapLinkBundleSettingsForm.php b/src/Form/XmlSitemapLinkBundleSettingsForm.php
index 327714b..fce907b 100644
--- a/src/Form/XmlSitemapLinkBundleSettingsForm.php
+++ b/src/Form/XmlSitemapLinkBundleSettingsForm.php
@@ -19,20 +19,19 @@ class XmlSitemapLinkBundleSettingsForm extends ConfigFormBase {
   private $entity_type;
   private $bundle_type;
   // @codingStandardsIgnoreEnd
-
   /**
    * The state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Constructs a XmlSitemapLinkBundleSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StateInterface $state) {
diff --git a/src/Form/XmlSitemapRebuildForm.php b/src/Form/XmlSitemapRebuildForm.php
index 7ad3453..1ff9d02 100644
--- a/src/Form/XmlSitemapRebuildForm.php
+++ b/src/Form/XmlSitemapRebuildForm.php
@@ -17,16 +17,16 @@ class XmlSitemapRebuildForm extends ConfigFormBase {
   /**
    * The state store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Constructs a new XmlSitemapRebuildForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StateInterface $state) {
diff --git a/src/Form/XmlSitemapSettingsForm.php b/src/Form/XmlSitemapSettingsForm.php
index 8c4fb42..ea9786c 100644
--- a/src/Form/XmlSitemapSettingsForm.php
+++ b/src/Form/XmlSitemapSettingsForm.php
@@ -22,43 +22,43 @@ class XmlSitemapSettingsForm extends ConfigFormBase {
   /**
    * The state store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The date service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $date;
 
   /**
    * The xmlsitemap.link_storage service.
    *
-   * @var \Drupal\xmlsitemap\XmlSitemapLinkStorageInterface
+   * @var XmlSitemapLinkStorageInterface
    */
   protected $linkStorage;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new XmlSitemapSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date
+   * @param DateFormatterInterface $date
    *   The date formatter service.
-   * @param \Drupal\xmlsitemap\XmlSitemapLinkStorageInterface $link_storage
+   * @param XmlSitemapLinkStorageInterface $link_storage
    *   The xmlsitemap link storage service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StateInterface $state, DateFormatterInterface $date, XmlSitemapLinkStorageInterface $link_storage, ModuleHandlerInterface $module_handler) {
@@ -197,7 +197,7 @@ class XmlSitemapSettingsForm extends ConfigFormBase {
       '#size' => 30,
       '#maxlength' => 255,
       '#description' => $this->t('Subdirectory where the sitemap data will be stored. This folder <strong>must not be shared</strong> with any other Drupal site or install using XML Sitemap.'),
-      '#field_prefix' => file_build_uri(''),
+      '#field_prefix' => \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . '')),
       '#required' => TRUE,
     ];
     $base_url_override = Settings::get('xmlsitemap_base_url', FALSE);
diff --git a/src/XmlSitemapGenerator.php b/src/XmlSitemapGenerator.php
index e464d97..4ad3371 100644
--- a/src/XmlSitemapGenerator.php
+++ b/src/XmlSitemapGenerator.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\xmlsitemap;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Language\LanguageManager;
+use Drupal\Core\State\State;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -54,104 +57,104 @@ class XmlSitemapGenerator implements XmlSitemapGeneratorInterface {
   /**
    * The xmlsitemap.settings config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * The language manager object.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager;
 
   /**
    * The state object.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The entity memory cache service.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   protected $entityMemoryCache;
 
   /**
    * Constructs a XmlSitemapGenerator object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory object.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state handler.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language Manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StateInterface $state, LanguageManagerInterface $language_manager, LoggerInterface $logger, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, Connection $connection, MessengerInterface $messenger, FileSystemInterface $file_system, TimeInterface $time, MemoryCacheInterface $memory_cache) {
@@ -426,7 +429,7 @@ class XmlSitemapGenerator implements XmlSitemapGeneratorInterface {
       xmlsitemap_clear_directory($context['sandbox']['sitemap']);
     }
 
-    /** @var \Drupal\xmlsitemap\XmlSitemapInterface $sitemap */
+    /** @var XmlSitemapInterface $sitemap */
     $sitemap = &$context['sandbox']['sitemap'];
 
     try {
diff --git a/src/XmlSitemapGeneratorInterface.php b/src/XmlSitemapGeneratorInterface.php
index 2ebeaac..84ba847 100644
--- a/src/XmlSitemapGeneratorInterface.php
+++ b/src/XmlSitemapGeneratorInterface.php
@@ -70,9 +70,9 @@ interface XmlSitemapGeneratorInterface {
   /**
    * Generates one chunk of the sitemap.
    *
-   * @param \Drupal\xmlsitemap\XmlSitemapInterface $sitemap
+   * @param XmlSitemapInterface $sitemap
    *   The XML Sitemap config entity.
-   * @param \Drupal\xmlsitemap\XmlSitemapWriter $writer
+   * @param XmlSitemapWriter $writer
    *   XML writer object.
    * @param int $chunk
    *   Chunk value.
@@ -82,7 +82,7 @@ interface XmlSitemapGeneratorInterface {
   /**
    * Generate the index sitemap.
    *
-   * @param \Drupal\xmlsitemap\XmlSitemapInterface $sitemap
+   * @param XmlSitemapInterface $sitemap
    *   The XML Sitemap config entity.
    * @param int|null $pages
    *   The number of pages to write in the sitemap. Defaults to the value of
diff --git a/src/XmlSitemapLinkStorage.php b/src/XmlSitemapLinkStorage.php
index 2a641c6..2433951 100644
--- a/src/XmlSitemapLinkStorage.php
+++ b/src/XmlSitemapLinkStorage.php
@@ -22,39 +22,39 @@ class XmlSitemapLinkStorage implements XmlSitemapLinkStorageInterface {
   /**
    * The state store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The anonymous user object.
    *
-   * @var \Drupal\Core\Session\AnonymousUserSession
+   * @var AnonymousUserSession
    */
   protected $anonymousUser;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a XmlSitemapLinkStorage object.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(StateInterface $state, ModuleHandlerInterface $module_handler, Connection $connection) {
@@ -108,7 +108,7 @@ class XmlSitemapLinkStorage implements XmlSitemapLinkStorageInterface {
         }
         else {
           // Attempt to transform this to a relative URL.
-          $loc = file_url_transform_relative($url->toString());
+          $loc = \Drupal::service('file_url_generator')->transformRelative($url->toString());
           // If it could not be transformed into a relative path, disregard it
           // since we cannot store external URLs in the sitemap.
           if (UrlHelper::isExternal($loc)) {
diff --git a/src/XmlSitemapLinkStorageInterface.php b/src/XmlSitemapLinkStorageInterface.php
index a72a1a4..f132cec 100644
--- a/src/XmlSitemapLinkStorageInterface.php
+++ b/src/XmlSitemapLinkStorageInterface.php
@@ -14,7 +14,7 @@ interface XmlSitemapLinkStorageInterface {
    *
    * The link will be saved as $entity->xmlsitemap.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity whose sitemap link will be created.
    */
   public function create(EntityInterface $entity);
diff --git a/src/XmlSitemapListBuilder.php b/src/XmlSitemapListBuilder.php
index 0abbc12..8e71fe9 100644
--- a/src/XmlSitemapListBuilder.php
+++ b/src/XmlSitemapListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\xmlsitemap;
 
+use Drupal\language\ConfigurableLanguageManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -19,27 +20,27 @@ class XmlSitemapListBuilder extends ConfigEntityListBuilder {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a XmlSitemapListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager) {
@@ -84,7 +85,7 @@ class XmlSitemapListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\xmlsitemap\XmlSitemapInterface $entity */
+    /** @var XmlSitemapInterface $entity */
     $row['label'] = $entity->label();
     if ($this->moduleHandler->moduleExists('language')) {
       if (isset($entity->getContext()['language'])) {
@@ -112,7 +113,7 @@ class XmlSitemapListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function getOperations(EntityInterface $entity) {
-    /** @var \Drupal\xmlsitemap\XmlSitemapInterface $entity */
+    /** @var XmlSitemapInterface $entity */
     $operations = parent::getOperations($entity);
 
     if (isset($operations['translate'])) {
diff --git a/src/XmlSitemapStorage.php b/src/XmlSitemapStorage.php
index d469020..b69b31e 100644
--- a/src/XmlSitemapStorage.php
+++ b/src/XmlSitemapStorage.php
@@ -20,24 +20,24 @@ class XmlSitemapStorage extends ConfigEntityStorage {
   /**
    * The state store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Constructs a ConfigEntityStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memory_cache
+   * @param MemoryCacheInterface|null $memory_cache
    *   The memory cache backend.
    */
   public function __construct(EntityTypeInterface $entity_type, ConfigFactoryInterface $config_factory, UuidInterface $uuid_service, LanguageManagerInterface $language_manager, StateInterface $state, MemoryCacheInterface $memory_cache = NULL) {
diff --git a/src/XmlSitemapWriter.php b/src/XmlSitemapWriter.php
index 9908d5e..a922e81 100644
--- a/src/XmlSitemapWriter.php
+++ b/src/XmlSitemapWriter.php
@@ -35,7 +35,7 @@ class XmlSitemapWriter extends \XMLWriter {
   /**
    * Sitemap object to be written.
    *
-   * @var \Drupal\xmlsitemap\XmlSitemapInterface
+   * @var XmlSitemapInterface
    */
   protected $sitemap;
 
@@ -49,14 +49,14 @@ class XmlSitemapWriter extends \XMLWriter {
   /**
    * Constructors and XmlSitemapWriter object.
    *
-   * @param \Drupal\xmlsitemap\XmlSitemapInterface $sitemap
+   * @param XmlSitemapInterface $sitemap
    *   The XML Sitemap.
    * @param int|string $page
    *   The current page of the sitemap being generated.
    *
    * @throws \InvalidArgumentException
    *   If the page is invalid.
-   * @throws \Drupal\xmlsitemap\XmlSitemapGenerationException
+   * @throws XmlSitemapGenerationException
    *   If the file URI cannot be opened.
    */
   public function __construct(XmlSitemapInterface $sitemap, $page) {
diff --git a/tests/src/Functional/XmlSitemapEntityFunctionalTest.php b/tests/src/Functional/XmlSitemapEntityFunctionalTest.php
index 1b2815f..71481e8 100644
--- a/tests/src/Functional/XmlSitemapEntityFunctionalTest.php
+++ b/tests/src/Functional/XmlSitemapEntityFunctionalTest.php
@@ -21,7 +21,7 @@ class XmlSitemapEntityFunctionalTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->admin_user = $this->drupalCreateUser(['administer entity_test content', 'administer xmlsitemap']);
@@ -45,7 +45,7 @@ class XmlSitemapEntityFunctionalTest extends XmlSitemapTestBase {
       'entity_types[entity_test_mul]' => 1,
       'settings[entity_test_mul][types][entity_test_mul]' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $entity = EntityTestMul::create();
     $entity->save();
@@ -77,7 +77,7 @@ class XmlSitemapEntityFunctionalTest extends XmlSitemapTestBase {
       'xmlsitemap[priority]' => 0.3,
       'xmlsitemap[changefreq]' => XMLSITEMAP_FREQUENCY_WEEKLY,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $entity = EntityTestMul::create();
     $entity->save();
     $this->assertSitemapLinkValues('entity_test_mul', $entity->id(), [
@@ -100,7 +100,8 @@ class XmlSitemapEntityFunctionalTest extends XmlSitemapTestBase {
       'xmlsitemap[priority]' => 0.6,
       'xmlsitemap[changefreq]' => XMLSITEMAP_FREQUENCY_YEARLY,
     ];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings/entity_test_mul/entity_test_mul', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/settings/entity_test_mul/entity_test_mul');
+    $this->submitForm($edit, t('Save configuration'));
     $entity = EntityTestMul::create();
     $entity->save();
     $this->assertSitemapLinkValues('entity_test_mul', $entity->id(), [
diff --git a/tests/src/Functional/XmlSitemapFunctionalTest.php b/tests/src/Functional/XmlSitemapFunctionalTest.php
index 0ed827e..b7aa4b1 100644
--- a/tests/src/Functional/XmlSitemapFunctionalTest.php
+++ b/tests/src/Functional/XmlSitemapFunctionalTest.php
@@ -17,7 +17,7 @@ class XmlSitemapFunctionalTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->admin_user = $this->drupalCreateUser([
@@ -54,18 +54,22 @@ class XmlSitemapFunctionalTest extends XmlSitemapTestBase {
     // @codingStandardsIgnoreEnd
     $this->drupalLogin($this->admin_user);
     $edit = ['xmlsitemap_base_url' => ''];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/search/xmlsitemap/settings');
+    $this->submitForm($edit, 'Save configuration');
 
     $edit = ['xmlsitemap_base_url' => 'invalid'];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/search/xmlsitemap/settings');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->pageTextContains('Invalid base URL.');
 
     $edit = ['xmlsitemap_base_url' => 'http://example.com/ '];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/search/xmlsitemap/settings');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->pageTextContains('Invalid base URL.');
 
     $edit = ['xmlsitemap_base_url' => 'http://example.com/'];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/search/xmlsitemap/settings');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
 
     $this->regenerateSitemap();
