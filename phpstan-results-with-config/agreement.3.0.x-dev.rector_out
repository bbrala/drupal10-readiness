modules/contrib/agreement/agreement.install
modules/contrib/agreement/agreement.module
modules/contrib/agreement/agreement.post_update.php
modules/contrib/agreement/agreement.views.inc
modules/contrib/agreement/src/AgreementHandler.php
modules/contrib/agreement/src/AgreementHandlerInterface.php
modules/contrib/agreement/src/Entity/Agreement.php
modules/contrib/agreement/src/Entity/AgreementDeleteForm.php
modules/contrib/agreement/src/Entity/AgreementForm.php
modules/contrib/agreement/src/Entity/AgreementListBuilder.php
modules/contrib/agreement/src/Entity/AgreementViewBuilder.php
modules/contrib/agreement/src/Entity/Routing/AgreementRouteProvider.php
modules/contrib/agreement/src/EventSubscriber/AgreementSubscriber.php
modules/contrib/agreement/src/Form/AgreementForm.php
modules/contrib/agreement/src/Plugin/migrate/destination/Agreement.php
modules/contrib/agreement/src/Plugin/migrate/process/AgreementSettings.php
modules/contrib/agreement/src/Plugin/migrate/source/Agreement.php
modules/contrib/agreement/src/Plugin/migrate/source/d7/AgreementType.php
modules/contrib/agreement/src/Plugin/views/field/AgreementEntity.php
modules/contrib/agreement/tests/fixtures/drupal6.php
modules/contrib/agreement/tests/fixtures/drupal7.php
modules/contrib/agreement/tests/src/Functional/AgreementAccessDeniedRedirectTest.php
modules/contrib/agreement/tests/src/Functional/AgreementAnonymousTest.php
modules/contrib/agreement/tests/src/Functional/AgreementBypassUserTest.php
modules/contrib/agreement/tests/src/Functional/AgreementCustomFrequencyTest.php
modules/contrib/agreement/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php
modules/contrib/agreement/tests/src/Functional/AgreementDefaultsPrivilegedUserTest.php
modules/contrib/agreement/tests/src/Functional/AgreementDefaultsUnprivilegedUserTest.php
modules/contrib/agreement/tests/src/Functional/AgreementLogoutExceptionTest.php
modules/contrib/agreement/tests/src/Functional/AgreementMultilingualTest.php
modules/contrib/agreement/tests/src/Functional/AgreementMultipleRoleTest.php
modules/contrib/agreement/tests/src/Functional/AgreementMultipleTest.php
modules/contrib/agreement/tests/src/Functional/AgreementRecordsViewsTest.php
modules/contrib/agreement/tests/src/Functional/AgreementRevokeTest.php
modules/contrib/agreement/tests/src/Functional/AgreementTestBase.php
modules/contrib/agreement/tests/src/Kernel/d6/AgreementMigrateTest.php
modules/contrib/agreement/tests/src/Kernel/d7/AgreementMigrateTest.php
modules/contrib/agreement/tests/src/Unit/AgreementHandlerTest.php
modules/contrib/agreement/tests/src/Unit/Entity/AgreementTest.php
modules/contrib/agreement/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php
modules/contrib/agreement/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php

22 files with changes
=====================

1) modules/contrib/agreement/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Unit\Plugin\views\field;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\agreement\Plugin\views\field\AgreementEntity;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
  */
 class AgreementEntityTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Agreement entity plugin.
    *
-   * @var \Drupal\agreement\Plugin\views\field\AgreementEntity
+   * @var AgreementEntity
    */
   protected $plugin;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/agreement/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Unit\EventSubscriber;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\EventSubscriber\AgreementSubscriber;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;

@@ @@
  */
 class AgreementSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Asserts that check for redirection method is functional.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/agreement/tests/src/Unit/AgreementHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\AgreementHandler;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
@@ @@
  */
 class AgreementHandlerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Asserts that database operation errors are handled.
    *
@@ @@
       ->willReturn($transactionProphet->reveal());

     // Prophecy does not allow mocking objects that return $this because.
-    $delete = $this->getMockBuilder('\Drupal\Core\Database\Query\Delete')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $delete = $this->createMock('\Drupal\Core\Database\Query\Delete');
     $delete->expects($this->any())
       ->method('condition')
       ->willReturnSelf();
@@ @@
         return 3;
       });

-    $insert = $this->getMockBuilder('\Drupal\Core\Database\Query\Insert')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $insert = $this->createMock('\Drupal\Core\Database\Query\Insert');
     $insert->expects($this->any())
       ->method('fields')
       ->willReturnSelf();
@@ @@
   /**
    * Asserts agreement discovery.
    *
-   * @param \Drupal\agreement\Entity\Agreement|false $expected
+   * @param Agreement|false $expected
    *   The expected return value for this test.
-   * @param \Drupal\agreement\Entity\Agreement[] $agreements
+   * @param Agreement[] $agreements
    *   A list of agreements.
    * @param array $roles
    *   An indexed array of user roles to apply to the mock user.
@@ @@
     $statementProphet->fetchField()->willReturn($agreed);

     // Mocks select query using mock object because prophecy.
-    $select = $this->getMockBuilder('\Drupal\Core\Database\Query\SelectInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $select = $this->createMock('\Drupal\Core\Database\Query\SelectInterface');
     $select->expects($this->any())
       ->method('fields')
       ->willReturnSelf();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/agreement/tests/src/Kernel/d7/AgreementMigrateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Kernel\d7;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\agreement\Entity\Agreement;
 use Drupal\Tests\migrate_drupal\Kernel\d7\MigrateDrupal7TestBase;
 use Drupal\user\Entity\User;

@@ @@
   public function testDataMigration() {
     $agreementHandler = $this->container->get('agreement.handler');
     $entityTypeManager = $this->container->get('entity_type.manager');
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $configStorage */
+    /** @var ConfigEntityStorageInterface $configStorage */
     $configStorage = $entityTypeManager->getStorage('agreement');
     $agreement_types = $configStorage->loadMultiple();

@@ @@
       'reset_date' => 0,
     ];

-    /** @var \Drupal\agreement\Entity\Agreement $default */
+    /** @var Agreement $default */
     $default = $configStorage->load('default');
     $this->assertEquals('Default agreement', $default->label());
     $this->assertEquals('Default agreement.', $default->get('agreement'));
@@ @@
     $this->assertEquals('/agreement', $default->get('path'));
     $this->assertEquals($expected_default_settings, $default->getSettings());

-    /** @var \Drupal\agreement\Entity\Agreement $node1Agreement */
+    /** @var Agreement $node1Agreement */
     $node1Agreement = $configStorage->load('node_1_agreement');
     $this->assertEquals('Node 1 agreement', $node1Agreement->label());
     $this->assertEquals('Agree to node 1.', $node1Agreement->get('agreement'));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/agreement/tests/src/Kernel/d6/AgreementMigrateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Kernel\d6;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\agreement\Entity\Agreement;
 use Drupal\Tests\migrate_drupal\Kernel\d6\MigrateDrupal6TestBase;
 use Drupal\user\Entity\User;

@@ @@
   public function testDataMigration() {
     $agreementHandler = $this->container->get('agreement.handler');
     $entityTypeManager = $this->container->get('entity_type.manager');
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $configStorage */
+    /** @var ConfigEntityStorageInterface $configStorage */
     $configStorage = $entityTypeManager->getStorage('agreement');
     $agreement_types = $configStorage->loadMultiple();

     $this->assertEquals(1, count($agreement_types), 'Found default agreement type.');

-    /** @var \Drupal\agreement\Entity\Agreement $default */
+    /** @var Agreement $default */
     $default = $configStorage->load('default');

     $user2 = User::load(2);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/agreement/tests/src/Functional/AgreementTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Functional;

+use Drupal\node\Entity\Node;
+use Drupal\user\Entity\User;
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
@@ @@
   /**
    * A page node to test with.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;

@@ @@
   /**
    * An alternate page node to test.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $otherNode;

@@ @@
   /**
    * Agreement to test with.
    *
-   * @var \Drupal\agreement\Entity\Agreement
+   * @var Agreement
    */
   protected $agreement;

@@ @@
     /* @var \Drupal\node\Entity\Node node */
     $this->node = $this->createNode();

-    /** @var \Drupal\node\Entity\Node node */
+    /** @var Node node */
     $this->otherNode = $this->createNode();

     // Load the default agreement.
@@ @@
   /**
    * Create a privileged user account.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   The user account.
    */
   public function createPrivilegedUser() {
@@ @@
   /**
    * Create an unprivileged user account.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   The user account.
    */
   public function createUnprivilegedUser() {
@@ @@
   /**
    * Create a user account that can bypass agreements.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   The user account.
    */
   public function createBypassUser() {
@@ @@
   /**
    * Create a user account that can revoke own agreement.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   The user account.
    */
   public function createRevokeUser() {
@@ @@
   /**
    * Assert that the current page is the agreement page.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement entity to assert.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function assertAgreementPage(Agreement $agreement) {
     $settings = $agreement->getSettings();
@@ @@
   /**
    * Assert that the current page is not the agreement page.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement entity to assert.
    */
   public function assertNotAgreementPage(Agreement $agreement) {
@@ @@
    * @param string $message
    *   The message to display for the assertion.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   public function assertFrontPage($message = 'Page is the front page.') {
     $body = $this->assertSession()->elementExists('xpath', 'body');
@@ @@
   /**
    * Asserts that the user has not agreed to the agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to agree to.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function assertNotAgreed(Agreement $agreement) {
     $settings = $agreement->getSettings();
@@ @@
   /**
    * Asserts that the user has agreed to the agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to agree to.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function assertAgreed(Agreement $agreement) {
     $settings = $agreement->getSettings();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/agreement/tests/src/Functional/AgreementMultipleTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * A second agreement.
    *
-   * @var \Drupal\agreement\Entity\Agreement
+   * @var Agreement
    */
   protected $newAgreement;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/agreement/tests/src/Functional/AgreementMultilingualTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Functional;

+use Drupal\user\Entity\User;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\user\Traits\UserCreationTrait;
@@ @@
   /**
    * Spanish user account to test with.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $spanishSpeaker;

@@ @@
   /**
    * Asserts that the user has agreed to the agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to agree to.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function assertAgreed(Agreement $agreement) {
     $this->drupalGet($agreement->get('path'));
@@ @@
   /**
    * Asserts that the user has not agreed to the agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to agree to.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function assertNotAgreed(Agreement $agreement) {
     $this->drupalGet($agreement->get('path'));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/agreement/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Functional;

+use Drupal\user\Entity\User;
 /**
  * Tests custom agreement settings.
  *
@@ @@
   /**
    * The user account.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/agreement/tests/src/Functional/AgreementCustomFrequencyTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Functional;

+use Drupal\Core\Session\AccountProxyInterface;
 /**
  * Tests custom frequencies.
  *
@@ @@
   /**
    * User account to test custom frequency.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $unprivilegedAccount;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/agreement/tests/src/Functional/AgreementAccessDeniedRedirectTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Functional;

+use Drupal\user\Entity\User;
 /**
  * Tests that user is redirected when attempting to access privileged route.
  *
@@ @@
   /**
    * The user account to test.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $unprivilegedUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/agreement/src/Plugin/views/field/AgreementEntity.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/agreement/src/Plugin/migrate/process/AgreementSettings.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Migration.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
   /**
    * The process plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigratePluginManagerInterface
+   * @var MigratePluginManagerInterface
    */
   protected $processPluginManager;

@@ @@
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
    *   The plugin ID.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   This migration.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   Migration plugin manager.
-   * @param \Drupal\migrate\Plugin\MigratePluginManagerInterface $process_plugin_manager
+   * @param MigratePluginManagerInterface $process_plugin_manager
    *   Process plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, MigrationInterface $migration, MigrationPluginManagerInterface $migration_plugin_manager, MigratePluginManagerInterface $process_plugin_manager) {
@@ @@
    *
    * @param string $value
    *   The role name.
-   * @param \Drupal\migrate\MigrateExecutableInterface $executable
+   * @param MigrateExecutableInterface $executable
    *   The migration execution.
    *
    * @return string
@@ @@

     try {
       $row = new Row(['rid' => $value], ['rid' => ['type' => 'integer']]);
-      /** @var  \Drupal\migrate\Plugin\MigrationInterface $migration */
+      /** @var MigrationInterface $migration */
       $migration = $this->migrationPluginManager->createInstance('d7_user_role');
       $configuration = ['source' => 'rid'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/agreement/src/Plugin/migrate/destination/Agreement.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    *   The plugin ID.
    * @param array $plugin_definition
    *   The plugin definition array.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, MigrationInterface $migration, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/agreement/src/Form/AgreementForm.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Agreement handler.
    *
-   * @var \Drupal\agreement\AgreementHandlerInterface
+   * @var AgreementHandlerInterface
    */
   protected $agreementHandler;

@@ @@
   /**
    * Route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * Initialize method.
    *
-   * @param \Drupal\agreement\AgreementHandlerInterface $agreementHandler
+   * @param AgreementHandlerInterface $agreementHandler
    *   The agreement handler interface.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The current route match.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mailManager
+   * @param MailManagerInterface $mailManager
    *   The mail service.
    */
   public function __construct(AgreementHandlerInterface $agreementHandler, RouteMatchInterface $routeMatch, LanguageManagerInterface $languageManager, AccountProxyInterface $account, MessengerInterface $messenger, MailManagerInterface $mailManager) {
@@ @@
   /**
    * Get the page title.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route match object. Ignored.
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement entity.
    *
    * @return string
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\agreement\Entity\Agreement|null $agreement
+   * @param Agreement|null $agreement
    *   The agreement entity.
    *
    * @return array
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $storage = $form_state->getStorage();
-    /** @var \Drupal\agreement\Entity\Agreement $agreement */
+    /** @var Agreement $agreement */
     $agreement = $storage['agreement'];
     $settings = $agreement->getSettings();
     $destination = '/';
@@ @@
   /**
    * Process and generate a response for successful agreements.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement being processed.
    * @param int $agree
    *   An integer to set the agreement status to.
@@ @@
    * @param string $destination
    *   The destination to send the user to upon successful agreement.
    *
-   * @return bool|\Drupal\Core\Routing\LocalRedirectResponse
+   * @return bool|LocalRedirectResponse
    *   A local redirect response if the agreement was processed successfully,
    *   otherwise FALSE.
    */
@@ @@
   /**
    * Notify email recipient if provided.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    * @param string $mail
    *   The email recipient.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/agreement/src/EventSubscriber/AgreementSubscriber.php:7

    ---------- begin diff ----------
@@ @@
 use Drupal\Core\Session\SessionManagerInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpKernel\Event\ExceptionEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;

 /**
@@ @@
   /**
    * Agreement handler.
    *
-   * @var \Drupal\agreement\AgreementHandlerInterface
+   * @var AgreementHandlerInterface
    */
   protected $handler;

@@ @@
   /**
    * Current path getter because paths > routes for users.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $pathStack;

@@ @@
   /**
    * Session manager.
    *
-   * @var \Drupal\Core\Session\SessionManagerInterface
+   * @var SessionManagerInterface
    */
   protected $sessionManager;

@@ @@
   /**
    * Current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
   /**
    * Initialize method.
    *
-   * @param \Drupal\agreement\AgreementHandlerInterface $agreementHandler
+   * @param AgreementHandlerInterface $agreementHandler
    *   The agreement handler.
-   * @param \Drupal\Core\Path\CurrentPathStack $pathStack
+   * @param CurrentPathStack $pathStack
    *   The current path.
-   * @param \Drupal\Core\Session\SessionManagerInterface $sessionManager
+   * @param SessionManagerInterface $sessionManager
    *   The session manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user account.
    */
   public function __construct(AgreementHandlerInterface $agreementHandler, CurrentPathStack $pathStack, SessionManagerInterface $sessionManager, AccountProxyInterface $account) {
@@ @@
   /**
    * Check if the user needs to accept an agreement.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent|\Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param ExceptionEvent|RequestEvent $event
    *   The response event.
    */
   public function checkForRedirection($event) {
@@ @@
    * the checkForRedirection function, that will lead to an infinite redirect
    * loop.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The response exception event.
    */
   public function exceptionRedirect(ExceptionEvent $event) {
@@ @@
   /**
    * Executes function to set redirect response if it is required.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The response event.
    */
   public function requestForRedirection(RequestEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/agreement/src/Entity/Routing/AgreementRouteProvider.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Initialize method.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Get the route information from the agreement entity.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement entity.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   A route object.
    */
   protected function getCanonicalRouteForEntity(Agreement $agreement) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/agreement/src/Entity/AgreementForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\agreement\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
   /**
    * Initialize method.
    *
-   * @param \Drupal\Core\Path\PathValidatorInterface $pathValidator
+   * @param PathValidatorInterface $pathValidator
    *   The path validator service.
    */
   public function __construct(PathValidatorInterface $pathValidator) {
@@ @@
    *
    * @param array $element
    *   The form array element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validatePath(array $element, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $element
    *   The settings[frequency] form element array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for the settings form.
    */
   public function validateFrequency(array $element, FormStateInterface $form_state) {
@@ @@
    * @return bool
    *   TRUE if the machine name exists already.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exists($value) {
     $agreements = $this->entityTypeManager
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/agreement/src/Entity/Agreement.php:104

    ---------- begin diff ----------
@@ @@
   /**
    * Find if the agreement applies to an user account by role.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to check roles for.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/agreement/src/AgreementHandlerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\agreement;

+use Symfony\Component\HttpFoundation\Cookie;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\user\UserInterface;
@@ @@
   /**
    * Check the status of an user account for a particular agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to check if a user has agreed.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to check.
    *
    * @return bool
@@ @@
   /**
    * Get the last agreement for the user for the agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to check if a user has agreed.
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account to check.
    *
    * @return int
@@ @@
   /**
    * Check if an user can bypass the agreement or if the agreement applies.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to check roles.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to check bypass permission.
    */
   public function canAgree(Agreement $agreement, AccountProxyInterface $account);
@@ @@
   /**
    * Accept the agreement for an user account.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement that the user is agreeing to.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to agree.
    * @param int $agreed
    *   An optional integer to set the agreement status to. Defaults to 1.
    *
-   * @return bool|\Symfony\Component\HttpFoundation\Cookie
+   * @return bool|Cookie
    *   TRUE if the operation was successful and the user is authenticated,
    *   a cookie if the operation was successful and the user is anonymous,
    *   otherwise FALSE.
@@ @@
   /**
    * Find the agreement by user account and path.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to check.
    * @param string $path
    *   The path to check.
    *
-   * @return \Drupal\agreement\Entity\Agreement|false
+   * @return Agreement|false
    *   The agreement entity to use or FALSE if none found.
    */
   public function getAgreementByUserAndPath(AccountProxyInterface $account, $path);
@@ @@
   /**
    * Checks if we're processing an anonymous agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to check for anonymous support.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to check.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/agreement/src/AgreementHandler.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * The datetime.time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Initialize method.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Path\PathMatcherInterface $pathMatcher
+   * @param PathMatcherInterface $pathMatcher
    *   The path matcher service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The datetime.time service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(Connection $connection, EntityTypeManagerInterface $entityTypeManager, PathMatcherInterface $pathMatcher, TimeInterface $time, RequestStack $requestStack) {
@@ @@
   /**
    * Accept agreement for an anonymous user.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to agree.
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement that the user is agreeing to.
    * @param int $agreed
    *   An optional integer to set the agreement status to. Defaults to 1.
    *
-   * @return \Symfony\Component\HttpFoundation\Cookie
+   * @return Cookie
    *   A cookie to retain the user's acceptance of the agreement.
    */
   protected function agreeAnonymously(AccountProxyInterface $account, Agreement $agreement, $agreed) {
@@ @@
     elseif ($agreement->agreeOnce()) {
       $expire = new \DateTime('+10 years');
     }
-    return new Cookie($cookieName, $agreed, $expire, '/', NULL, NULL, 'lax');
+    return Cookie::create($cookieName, $agreed, $expire, '/', NULL, NULL, 'lax');
   }

   /**
    * Accept agreement for an authenticated user.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account that is agreeing.
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement that the user is agreeing to.
    * @param int $agreed
    *   An optional integer to set the agreement status to. Defaults to 1.
@@ @@
   /**
    * Check the status of the anonymous user for a particular agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to check if a user has agreed.
    *
    * @return bool
@@ @@
   /**
    * Check the status of a user account for a particular agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to check if a user has agreed.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to check.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * NewToStaticCallRector
 * AddParamTypeDeclarationRector


22) modules/contrib/agreement/agreement.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\Entity\User;
+use Drupal\agreement\Entity\Agreement;
+use Drupal\Core\Session\AccountInterface;
 /**
  * @file
  * Agreement module code - agreement.module.
@@ @@
  * Implements hook_user_update().
  */
 function agreement_user_update(EntityInterface $account) {
-  /** @var \Drupal\user\Entity\User $account */
+  /** @var User $account */
   if ($account->getEntityTypeId() === 'user') {
     $current_user = \Drupal::currentUser();
     $agreements = \Drupal::entityTypeManager()->getStorage('agreement')->loadMultiple();
-    /** @var \Drupal\agreement\Entity\Agreement $agreement */
+    /** @var Agreement $agreement */
     foreach ($agreements as $agreement) {
       // Do not require user to re-accept agreement if they've just changed
       // their password.
@@ @@
  * @internal
  */
 function _agreement_get_mail_variables(array $params) {
-  /** @var \Drupal\Core\Session\AccountInterface $account */
+  /** @var AccountInterface $account */
   $account = $params['account'];
-  /** @var \Drupal\agreement\Entity\Agreement $agreement */
+  /** @var Agreement $agreement */
   $agreement = $params['context']['agreement'];

   return [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 22 files have been changed by Rector                                      

