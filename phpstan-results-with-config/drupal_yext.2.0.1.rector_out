modules/contrib/drupal_yext/drupal_yext.module
modules/contrib/drupal_yext/modules/drupal_yext_find_by_title/src/Plugin/YextPlugin/FindByTitle.php
modules/contrib/drupal_yext/modules/drupal_yext_find_by_title/src/YextFindByTitle.php
modules/contrib/drupal_yext/modules/drupal_yext_find_by_title/tests/src/Unit/Plugin/YextPlugin/FindByTitleTest.php
modules/contrib/drupal_yext/modules/drupal_yext_sync_deleted/drupal_yext_sync_deleted.module
modules/contrib/drupal_yext/modules/drupal_yext_sync_deleted/src/YextSyncDeleted.php
modules/contrib/drupal_yext/modules/drupal_yext_sync_deleted/tests/YextSyncDeletedTest.php
modules/contrib/drupal_yext/phpunit-autoload.php
modules/contrib/drupal_yext/phpunit-bootstrap.php
modules/contrib/drupal_yext/src/Annotation/YextPluginAnnotation.php
modules/contrib/drupal_yext/src/Form/YextSettingsForm.php
modules/contrib/drupal_yext/src/Plugin/YextPlugin/YextIdAlreadyExists.php
modules/contrib/drupal_yext/src/Plugin/YextPlugin/YextNonNumericFieldParser.php
modules/contrib/drupal_yext/src/Plugin/YextPlugin/YextNumericFieldParser.php
modules/contrib/drupal_yext/src/SelfTest/SelfTest.php
modules/contrib/drupal_yext/src/Yext/FieldMapper.php
modules/contrib/drupal_yext/src/Yext/Yext.php
modules/contrib/drupal_yext/src/YextContent/NodeMigrateDestinationInterface.php
modules/contrib/drupal_yext/src/YextContent/NodeMigrateSourceInterface.php
modules/contrib/drupal_yext/src/YextContent/NodeMigrationAtCreation.php
modules/contrib/drupal_yext/src/YextContent/NodeMigrationOnSave.php
modules/contrib/drupal_yext/src/YextContent/YextEntity.php
modules/contrib/drupal_yext/src/YextContent/YextEntityFactory.php
modules/contrib/drupal_yext/src/YextContent/YextIgnoreNode.php
modules/contrib/drupal_yext/src/YextContent/YextIgnoreSourceRecord.php
modules/contrib/drupal_yext/src/YextContent/YextSourceRecord.php
modules/contrib/drupal_yext/src/YextContent/YextSourceRecordFactory.php
modules/contrib/drupal_yext/src/YextContent/YextTargetNode.php
modules/contrib/drupal_yext/src/YextPluginBase.php
modules/contrib/drupal_yext/src/YextPluginCollection.php
modules/contrib/drupal_yext/src/YextPluginInterface.php
modules/contrib/drupal_yext/src/YextPluginManager.php
modules/contrib/drupal_yext/src/traits/CommonUtilities.php
modules/contrib/drupal_yext/src/traits/Singleton.php
modules/contrib/drupal_yext/test/Form/YextSettingsFormTest.php
modules/contrib/drupal_yext/test/Plugin/YextPlugin/YextIdAlreadyExistsTest.php
modules/contrib/drupal_yext/test/Plugin/YextPlugin/YextNonNumericFieldParserTest.php
modules/contrib/drupal_yext/test/Plugin/YextPlugin/YextNumericFieldParserTest.php
modules/contrib/drupal_yext/test/Yext/FieldMapperTest.php
modules/contrib/drupal_yext/test/Yext/YextTest.php
modules/contrib/drupal_yext/test/YextContent/NodeMigrateDestinationInterfaceTest.php
modules/contrib/drupal_yext/test/YextContent/NodeMigrateSourceInterfaceTest.php
modules/contrib/drupal_yext/test/YextContent/NodeMigratorTest.php
modules/contrib/drupal_yext/test/YextContent/YextEntityFactoryTest.php
modules/contrib/drupal_yext/test/YextContent/YextEntityTest.php
modules/contrib/drupal_yext/test/YextContent/YextSourceRecordTest.php
modules/contrib/drupal_yext/test/YextContent/YextTargetNodeTest.php
modules/contrib/drupal_yext/test/traits/CommonUtilitiesTest.php
modules/contrib/drupal_yext/test/traits/SingletonTest.php

13 files with changes
=====================

1) modules/contrib/drupal_yext/src/traits/CommonUtilities.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupal_yext\traits;

+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\drupal_yext\Yext\FieldMapper;
 use Drupal\drupal_yext\Yext\Yext;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ @@
    * @param string $type
    *   A type such as node.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The query object that can query the given entity type.
    */
   public function drupalEntityQuery(string $type) {
@@ @@
   /**
    * Mockable wrapper around \Drupal::moduleHandler().
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler.
    */
   public function drupalModuleHandler() {
@@ @@
   /**
    * Get the field mapping singleton.
    *
-   * @return \Drupal\drupal_yext\Yext\FieldMapper
+   * @return FieldMapper
    *   The field mapper singleton.
    */
   public function fieldmap() : FieldMapper {
@@ @@
    *
    * @param string $url
    *   An URL which contains an image.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A Drupal entity.
    * @param string $field_name
    *   An image field on the entity.
@@ @@
    *
    * This is relatively equivalent to the l() function in Drupal 7.
    *
-   * @return \Drupal\Core\Link
+   * @return Link
    *   A displayable link.
    */
   public function link(string $text, string $path) : Link {
@@ @@
   /**
    * Get the Yext app singleton.
    *
-   * @return \Drupal\drupal_yext\Yext\Yext
+   * @return Yext
    *   The Yext singleton.
    */
   public function yext() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/drupal_yext/src/YextPluginManager.php:29

    ---------- begin diff ----------
@@ @@
 // @phpstan-ignore-next-line
 class YextPluginManager extends DefaultPluginManager {
 // @codingStandardsIgnoreEnd
-
   /**
    * Creates the discovery object.
    *
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/drupal_yext/src/YextPluginInterface.php:18

    ---------- begin diff ----------
@@ @@
    *
    * @param array $result
    *   A result which should contain .
-   * @param \Drupal\drupal_yext\YextContent\YextSourceRecord $record
+   * @param YextSourceRecord $record
    *   A source record from Yext.
    */
   public function alterNodeFromSourceRecord(array &$result, YextSourceRecord $record);
@@ @@
    * sometimes directly as strings. Different plugins can manage different
    * types of data.
    *
-   * @param \Drupal\drupal_yext\YextContent\YextSourceRecord $source_record
+   * @param YextSourceRecord $source_record
    *   A Yext source record.
    * @param string $field_id
    *   A field id.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/drupal_yext/src/YextPluginBase.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Check whether this plugin can parse a source record from its ID.
    *
-   * @param \Drupal\drupal_yext\YextContent\YextSourceRecord $source_record
+   * @param YextSourceRecord $source_record
    *   A Yext source record.
    * @param string $field_id
    *   A field id.
@@ @@
   /**
    * Assume we can and should parse a source record field, and parse it.
    *
-   * @param \Drupal\drupal_yext\YextContent\YextSourceRecord $source_record
+   * @param YextSourceRecord $source_record
    *   A Yext source record.
    * @param string $field_id
    *   A field id.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/drupal_yext/src/YextContent/YextEntityFactory.php:19

    ---------- begin diff ----------
@@ @@
    *
    * If the entity does not have raw Yext data in it, ignore it.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A Drupal entity.
    *
-   * @return \Drupal\drupal_yext\YextContent\NodeMigrateDestinationInterface
+   * @return NodeMigrateDestinationInterface
    *   A destination for migration.
    */
   public function destinationIfLinkedToYext(FieldableEntityInterface $entity) : NodeMigrateDestinationInterface {
@@ @@
   /**
    * Given a Drupal entity, return a Yext Entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A Drupal entity.
    *
-   * @return \Drupal\drupal_yext\YextContent\YextEntity
+   * @return YextEntity
    *   A Yext-specific wrapper for a Drupal entity.
    */
   public function entity(FieldableEntityInterface $entity) : YextEntity {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/drupal_yext/src/YextContent/YextEntity.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The Drupal entity.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface|null
+   * @var FieldableEntityInterface|null
    */
   protected $drupalEntity;

@@ @@
   /**
    * Set the entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $drupal_entity
+   * @param FieldableEntityInterface $drupal_entity
    *   A Drupal entity.
    */
   public function setEntity(FieldableEntityInterface $drupal_entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/drupal_yext/src/YextContent/NodeMigrationOnSave.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The source.
    *
-   * @var \Drupal\drupal_yext\YextContent\NodeMigrateSourceInterface
+   * @var NodeMigrateSourceInterface
    */
   protected $from;

@@ @@
   /**
    * The destination.
    *
-   * @var \Drupal\drupal_yext\YextContent\NodeMigrateDestinationInterface
+   * @var NodeMigrateDestinationInterface
    */
   protected $to;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\drupal_yext\YextContent\NodeMigrateSourceInterface $from
+   * @param NodeMigrateSourceInterface $from
    *   A source node.
-   * @param \Drupal\drupal_yext\YextContent\NodeMigrateDestinationInterface $to
+   * @param NodeMigrateDestinationInterface $to
    *   A destination node.
    */
   public function __construct(NodeMigrateSourceInterface $from, NodeMigrateDestinationInterface $to) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/drupal_yext/src/Yext/Yext.php:353

    ---------- begin diff ----------
@@ @@
   /**
    * Given a source Yext record, return a new or existing node.
    *
-   * @param \Drupal\drupal_yext\YextContent\YextSourceRecord $record
+   * @param YextSourceRecord $record
    *   A record from Yext.
    *
-   * @return \Drupal\drupal_yext\YextContent\YextTargetNode
+   * @return YextTargetNode
    *   A node on Drupal.
    */
   public function getOrCreateUniqueNode(YextSourceRecord $record) : YextTargetNode {
@@ @@
   /**
    * Get all YextPlugin plugins.
    *
-   * @return \Drupal\drupal_yext\YextPluginCollection
+   * @return YextPluginCollection
    *   All plugins.
    */
   public function plugins() : YextPluginCollection {
@@ @@
    * If the config variable "update_raw_on_save" is set, or if the raw field is
    * empty for the entity, this will return TRUE.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A Drupal entity.
    *
    * @return bool
@@ @@
   /**
    * Given an entity, update it based on a response from the server.
    *
-   * @param \Drupal\drupal_yext\YextContent\YextEntity $candidate
+   * @param YextEntity $candidate
    *   An entity to be updated.
    */
   public function updateEntityFromId(YextEntity $candidate) {
@@ @@
   /**
    * Update the raw data field but only if this is required.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A Drupal entity.
    */
   public function updateRaw(FieldableEntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/drupal_yext/src/SelfTest/SelfTest.php:93

    ---------- begin diff ----------
@@ @@
    * @param array $structure
    *   A mock data structure on Yext.
    *
-   * @return \Drupal\drupal_yext\YextContent\YextTargetNode
+   * @return YextTargetNode
    *   A resulting target node on Drupal.
    */
   public function mockMigrate(array $structure) : YextTargetNode {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/drupal_yext/src/Form/YextSettingsForm.php:82

    ---------- begin diff ----------
@@ @@
     }
     $form = [];
     $form['#attached']['library'][] = 'drupal_yext/ajaxy';
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Please confirm that `$this` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Please confirm that `$this` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
     $form['yextbase'] = [
       '#type' => 'details',
       '#title' => $this->t('Basic node information'),
       '#description' => $this->t('This website attempts to synchronize data from @yext using their @api, creating nodes. Enter information about the target nodes here.', [
-        '@yext' => $this->link('Yext', 'https://www.yext.com')->toString(),
-        '@api' => $this->link('API', 'http://developer.yext.ca/docs/guides/get-started/')->toString(),
+        '@yext' => $this->toLink('Yext', 'https://www.yext.com')->toString()->toString(),
+        '@api' => $this->toLink('API', 'http://developer.yext.ca/docs/guides/get-started/')->toString()->toString(),
       ]),
       '#open' => FALSE,
     ];
@@ @@
       '#default_value' => $this->yext()->uniqueYextLastUpdatedFieldName(),
     ];
     try {
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Please confirm that `$this` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Please confirm that `$this` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
       $form['yext'] = [
         '#type' => 'details',
         '#title' => $this->t('Yext integration'),
         '#description' => $this->t('This website attempts to synchronize data from @yext using their @api, creating nodes. Once you have an "app" and API key set up, you can enter them here.', [
-          '@yext' => $this->link('Yext', 'https://www.yext.com')->toString(),
-          '@api' => $this->link('API', 'http://developer.yext.ca/docs/guides/get-started/')->toString(),
+          '@yext' => $this->toLink('Yext', 'https://www.yext.com')->toString()->toString(),
+          '@api' => $this->toLink('API', 'http://developer.yext.ca/docs/guides/get-started/')->toString()->toString(),
         ]),
         '#open' => FALSE,
       ];
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/drupal_yext/src/Annotation/YextPluginAnnotation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupal_yext\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * A brief, human readable, description of the modifier.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


12) modules/contrib/drupal_yext/modules/drupal_yext_sync_deleted/src/YextSyncDeleted.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * Mark an entity as deleted and save it.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   An entity.
    * @param string $old_value
    *   The Yext entity id.
@@ @@
   /**
    * Synchronize a given node if it's been deleted in Yext.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   An entity to sync.
    */
   public function syncDeleted(FieldableEntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/drupal_yext/modules/drupal_yext_find_by_title/src/YextFindByTitle.php:25

    ---------- begin diff ----------
@@ @@
    * @param string $yext_title
    *   A location title from Yext.
    *
-   * @return NULL|\Drupal\drupal_yext\YextContent\YextTargetNode
+   * @return NULL|YextTargetNode
    *   The target node if possible.
    */
   public function candidate(string $yext_title) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 13 files have been changed by Rector                                      

