modules/contrib/html_tag_usage/html_tag_usage.install
modules/contrib/html_tag_usage/html_tag_usage.module
modules/contrib/html_tag_usage/src/Analyzer.php
modules/contrib/html_tag_usage/src/Batch/BatchOperations.php
modules/contrib/html_tag_usage/src/Controller/ReportController.php
modules/contrib/html_tag_usage/src/Form/ConfigurationForm.php

3 files with changes
====================

1) modules/contrib/html_tag_usage/src/Form/ConfigurationForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The field type plugin manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;

@@ @@
   /**
    * Constructs a new HTML Tag Usage configuration form.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, FieldTypePluginManagerInterface $field_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/html_tag_usage/src/Controller/ReportController.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The HTML tag usage analyzer.
    *
-   * @var \Drupal\html_tag_usage\Analyzer
+   * @var Analyzer
    */
   protected $analyzer;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new ReportController instance.
    *
-   * @param \Drupal\html_tag_usage\Analyzer $analyzer
+   * @param Analyzer $analyzer
    *   The HTML tag usage analyzer.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
    */
   public function __construct(Analyzer $analyzer, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Analyze field types for tag usage.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response.
    */
   public function analyze(): RedirectResponse {
@@ @@
    * @param string $attribute
    *   The attribute name. Use '*' to get results for tags without attributes.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Dialog title.
    */
   public function getDialogTitle(string $text_format, string $tag, string $attribute): TranslatableMarkup {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/html_tag_usage/src/Analyzer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\html_tag_usage;

+use Drupal\Core\Database\Query\PagerSelectExtender;
+use Drupal\Core\Database\Query\TableSortExtender;
+use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Batch\BatchBuilder;
@@ @@
   /**
    * The factory for configuration object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new Analyzer instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Connection $database, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, MessengerInterface $messenger, StateInterface $state, TimeInterface $time) {
@@ @@
    * @param bool $include_tag_count
    *   Whether to include the tag count.
    *
-   * @return \Drupal\Core\Database\StatementInterface|null
+   * @return StatementInterface|null
    *   A prepared statement or NULL, if the query is not valid.
    */
   protected function getTagsByFormat(bool $include_tag_count = TRUE): ?StatementInterface {
@@ @@
    * @param string $attribute
    *   The attribute name. Use '*' to get results for tags without attributes.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The title.
    */
   public function getInspectionTitle(string $text_format, string $tag, string $attribute): TranslatableMarkup {
@@ @@
     $query = $this->database->select('html_tag_usage', 'htu')
       ->extend('\\Drupal\\Core\\Database\\Query\\PagerSelectExtender')
       ->extend('\\Drupal\\Core\\Database\\Query\\TableSortExtender');
-    /** @var \Drupal\Core\Database\Query\PagerSelectExtender $query */
+    /** @var PagerSelectExtender $query */
     $query->limit(15);
-    /** @var \Drupal\Core\Database\Query\TableSortExtender $query */
+    /** @var TableSortExtender $query */
     $query->orderByHeader($header);
-    /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+    /** @var SelectInterface $query */
     $query->fields('htu', ['entity_type', 'entity_id', 'langcode', 'field_name']);
     $query->condition('htu.text_format', $text_format);
     $query->condition('htu.tag', $tag);
@@ @@
     $results = $query->execute();
     $rows = [];
     foreach ($results as $record) {
-      /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+      /** @var FieldableEntityInterface $entity */
       $entity = $this->entityTypeManager
         ->getStorage($record->entity_type)
         ->load($record->entity_id);
@@ @@
    * Analyzes a field of an entity for HTML tag usage and writes the results
    * into the database.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to analyze.
    * @param string $field_name
    *   The field to analyze.
@@ @@
    * Analyzes a field item value of a field of an entity for HTML tag usage and
    * writes the results into the database.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to analyze.
    * @param string $field_name
    *   The name of the field to analyze.
    * @param int $delta
    *   The delta of the field item.
-   * @param \Drupal\Core\TypedData\TypedDataInterface $field_item
+   * @param TypedDataInterface $field_item
    *   The field item to analyze.
    */
   protected function analyzeEntityFieldItem(FieldableEntityInterface $entity, string $field_name, int $delta, TypedDataInterface $field_item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 3 files have been changed by Rector                                       

