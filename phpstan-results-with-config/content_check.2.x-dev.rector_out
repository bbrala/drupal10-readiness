modules/contrib/content_check/content_check.module
modules/contrib/content_check/src/Annotation/ContentCheck.php
modules/contrib/content_check/src/Annotation/ContentCheckInput.php
modules/contrib/content_check/src/ContentChecker.php
modules/contrib/content_check/src/Controller/ContentCheckController.php
modules/contrib/content_check/src/Element/ContentCheckReportPage.php
modules/contrib/content_check/src/Plugin/ContentCheck/LinkedContentCheck.php
modules/contrib/content_check/src/Plugin/ContentCheck/UrlAliasCheck.php
modules/contrib/content_check/src/Plugin/ContentCheckBase.php
modules/contrib/content_check/src/Plugin/ContentCheckInput/RenderedEntityFullView.php
modules/contrib/content_check/src/Plugin/ContentCheckInput/RenderedEntityFullViewDom.php
modules/contrib/content_check/src/Plugin/ContentCheckInputBase.php
modules/contrib/content_check/src/Plugin/ContentCheckInputInterface.php
modules/contrib/content_check/src/Plugin/ContentCheckInputPluginManager.php
modules/contrib/content_check/src/Plugin/ContentCheckInterface.php
modules/contrib/content_check/src/Plugin/ContentCheckItem.php
modules/contrib/content_check/src/Plugin/ContentCheckPluginManager.php

10 files with changes
=====================

1) modules/contrib/content_check/src/Plugin/ContentCheckPluginManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/content_check/src/Plugin/ContentCheckItem.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Entity that all variants are based off.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * ContentCheckItem constructor.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to base this item from.
    */
   public function __construct(ContentEntityInterface $entity) {
@@ @@
   /**
    * The initial base entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The base entity for this item.
    */
   public function getEntity() {
@@ @@
       return $this->inputCache[$plugin];
     }

-    /** @var \Drupal\content_check\Plugin\ContentCheckInputPluginManager $input_plugin_manager */
+    /** @var ContentCheckInputPluginManager $input_plugin_manager */
     try {
       $input_plugin_manager = \Drupal::service('plugin.manager.content_check.content_check_input');
       $instance = $input_plugin_manager->createInstance($plugin);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/content_check/src/Plugin/ContentCheckInterface.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Perform the check on the item.
    *
-   * @param \Drupal\content_check\Plugin\ContentCheckItem $item
+   * @param ContentCheckItem $item
    *   The item to test.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/content_check/src/Plugin/ContentCheckInputPluginManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/content_check/src/Plugin/ContentCheckInputInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Check whether the test is applicable to this entity.
    *
-   * @param \Drupal\content_check\Plugin\ContentCheckItem $item
+   * @param ContentCheckItem $item
    *   The entity to check.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/content_check/src/Plugin/ContentCheckInput/RenderedEntityFullView.php:18

    ---------- begin diff ----------
@@ @@
   public function getData($item) {
     $view_builder = \Drupal::entityTypeManager()->getViewBuilder($item->getEntity()->getEntityTypeId());
     $build = $view_builder->view($item->getEntity(), 'full', $item->getEntity()->language()->getId());
-    return render($build);
+    return \Drupal::service('renderer')->render($build);
   }

 }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/content_check/src/Plugin/ContentCheck/UrlAliasCheck.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The alias manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ModuleHandlerInterface $module_handler, AliasManagerInterface $alias_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/content_check/src/Controller/ContentCheckController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_check\Controller;

+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\content_check\ContentChecker;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The content checking service.
    *
-   * @var \Drupal\content_check\ContentChecker
+   * @var ContentChecker
    */
   protected $contentChecker;

@@ @@
   /**
    * Render the output of the checks applicable to this entity.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   The node entity we're checking.
    *
    * @return array
@@ @@
    *   The render array containing the output for the page.
    */
   public function overview($node) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     //$entity = $route_match->getParameter($entity_type_id);
     $results = $this->contentChecker->checkEntity($node);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/content_check/src/ContentChecker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_check;

+use Drupal\content_check\Plugin\ContentCheckPluginManager;
+use Drupal\content_check\Plugin\ContentCheckInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\content_check\Plugin\ContentCheckItem;
@@ @@
   /**
    * The content check plugin manager.
    *
-   * @var \Drupal\content_check\Plugin\ContentCheckPluginManager
+   * @var ContentCheckPluginManager
    */
   protected $contentCheckPluginManager;

@@ @@
   /**
    * Run the content checks against a specific entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to test.
    *
    * @return array
@@ @@
     $results = [];

     foreach ($this->contentCheckPluginManager->getDefinitions() as $id => $definition) {
-      /** @var \Drupal\content_check\Plugin\ContentCheckInterface $instance */
+      /** @var ContentCheckInterface $instance */
       try {
         $instance = $this->contentCheckPluginManager->createInstance($id);
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/content_check/src/Annotation/ContentCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_check\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the content check.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 10 files have been changed by Rector                                      

