diff --git a/src/EventSubscriber/PasswordResetSubscriber.php b/src/EventSubscriber/PasswordResetSubscriber.php
index deb1fcb..3ae19bb 100644
--- a/src/EventSubscriber/PasswordResetSubscriber.php
+++ b/src/EventSubscriber/PasswordResetSubscriber.php
@@ -24,7 +24,7 @@ final class PasswordResetSubscriber implements EventSubscriberInterface {
   /**
    * Handles the dispatched password reset event.
    *
-   * @param \Drupal\jsonapi_user_resources\Events\PasswordResetEvent $event
+   * @param PasswordResetEvent $event
    *   The event.
    */
   public function onPasswordReset(PasswordResetEvent $event) {
diff --git a/src/EventSubscriber/UserRegistrationSubscriber.php b/src/EventSubscriber/UserRegistrationSubscriber.php
index 68a3e4a..cd57011 100644
--- a/src/EventSubscriber/UserRegistrationSubscriber.php
+++ b/src/EventSubscriber/UserRegistrationSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\jsonapi_user_resources\EventSubscriber;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\jsonapi_user_resources\Events\RegistrationEvent;
 use Drupal\jsonapi_user_resources\Events\UserResourcesEvents;
@@ -16,14 +17,14 @@ final class UserRegistrationSubscriber implements EventSubscriberInterface {
   /**
    * User settings config instance.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $userSettings;
 
   /**
    * UserRegistrationSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ -42,7 +43,7 @@ final class UserRegistrationSubscriber implements EventSubscriberInterface {
   /**
    * Sends email notifications when a user has registered.
    *
-   * @param \Drupal\jsonapi_user_resources\Events\RegistrationEvent $event
+   * @param RegistrationEvent $event
    *   The registration event.
    */
   public function sendEmailNotifications(RegistrationEvent $event) {
diff --git a/src/Events/PasswordResetEvent.php b/src/Events/PasswordResetEvent.php
index 83eda7b..5e65249 100644
--- a/src/Events/PasswordResetEvent.php
+++ b/src/Events/PasswordResetEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\jsonapi_user_resources\Events;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the event for reacting to user password resets.
@@ -14,23 +14,23 @@ final class PasswordResetEvent extends Event {
   /**
    * The user account being registered.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $user;
 
   /**
    * The JSON:API request document.
    *
-   * @var \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel
+   * @var JsonApiDocumentTopLevel
    */
   private $document;
 
   /**
    * Constructs a new RegistrationEvent object.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user account.
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel $document
+   * @param JsonApiDocumentTopLevel $document
    *   The JSON:API request document.
    */
   public function __construct(UserInterface $user, JsonApiDocumentTopLevel $document) {
@@ -41,7 +41,7 @@ final class PasswordResetEvent extends Event {
   /**
    * Get the user account.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user account.
    */
   public function getUser() {
@@ -51,7 +51,7 @@ final class PasswordResetEvent extends Event {
   /**
    * Get the JSON:API request document.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel
+   * @return JsonApiDocumentTopLevel
    *   The document.
    */
   public function getDocument() {
diff --git a/src/Events/RegistrationEvent.php b/src/Events/RegistrationEvent.php
index 674163b..f2c9e4d 100644
--- a/src/Events/RegistrationEvent.php
+++ b/src/Events/RegistrationEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\jsonapi_user_resources\Events;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the event for reacting to user account registrations.
@@ -14,23 +14,23 @@ final class RegistrationEvent extends Event {
   /**
    * The user account being registered.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $user;
 
   /**
    * The JSON:API request document.
    *
-   * @var \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel
+   * @var JsonApiDocumentTopLevel
    */
   private $document;
 
   /**
    * Constructs a new RegistrationEvent object.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user account.
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel $document
+   * @param JsonApiDocumentTopLevel $document
    *   The JSON:API request document.
    */
   public function __construct(UserInterface $user, JsonApiDocumentTopLevel $document) {
@@ -41,7 +41,7 @@ final class RegistrationEvent extends Event {
   /**
    * Get the user account.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user account.
    */
   public function getUser() {
@@ -51,7 +51,7 @@ final class RegistrationEvent extends Event {
   /**
    * Get the JSON:API request document.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel
+   * @return JsonApiDocumentTopLevel
    *   The document.
    */
   public function getDocument() {
diff --git a/src/Resource/PasswordReset.php b/src/Resource/PasswordReset.php
index 33a0c18..516e7a2 100644
--- a/src/Resource/PasswordReset.php
+++ b/src/Resource/PasswordReset.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\jsonapi_user_resources\Resource;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel;
@@ -32,23 +34,23 @@ final class PasswordReset extends EntityResourceBase implements ContainerInjecti
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;
 
   /**
    * Constructs a new PasswordReset object.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(LoggerInterface $logger, EventDispatcherInterface $event_dispatcher) {
@@ -69,17 +71,17 @@ final class PasswordReset extends EntityResourceBase implements ContainerInjecti
   /**
    * Handles the resource request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel $document
+   * @param JsonApiDocumentTopLevel $document
    *   The document.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity could not be saved.
    */
   public function process(Request $request, JsonApiDocumentTopLevel $document): ResourceResponse {
@@ -114,7 +116,7 @@ final class PasswordReset extends EntityResourceBase implements ContainerInjecti
     $this->logger->notice('A password reset has been requested for %name (%email).', ['%name' => $account->getAccountName(), '%email' => $account->getEmail()]);
 
     $event = new PasswordResetEvent($account, $document);
-    $this->eventDispatcher->dispatch(UserResourcesEvents::PASSWORD_RESET, $event);
+    $this->eventDispatcher->dispatch($event, UserResourcesEvents::PASSWORD_RESET);
     return new ResourceResponse(new JsonApiDocumentTopLevel(
       new OmittedData([]),
       new NullIncludedData(),
diff --git a/src/Resource/PasswordUpdate.php b/src/Resource/PasswordUpdate.php
index 2906a86..1ce5fe5 100644
--- a/src/Resource/PasswordUpdate.php
+++ b/src/Resource/PasswordUpdate.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\jsonapi_user_resources\Resource;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -22,23 +26,23 @@ final class PasswordUpdate extends EntityResourceBase implements ContainerInject
   /**
    * User settings config instance.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $userSettings;
 
   /**
    * The time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a new PasswordUpdate object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time.
    */
   public function __construct(ConfigFactoryInterface $config_factory, TimeInterface $time) {
@@ -59,20 +63,20 @@ final class PasswordUpdate extends EntityResourceBase implements ContainerInject
   /**
    * Handles the resource request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel $document
+   * @param JsonApiDocumentTopLevel $document
    *   The document.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The account.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown if the entity could not be saved.
    */
   public function process(Request $request, JsonApiDocumentTopLevel $document, UserInterface $user): ResourceResponse {
diff --git a/src/Resource/Registration.php b/src/Resource/Registration.php
index 76e3cbc..2997b90 100644
--- a/src/Resource/Registration.php
+++ b/src/Resource/Registration.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\jsonapi_user_resources\Resource;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -32,41 +35,41 @@ final class Registration extends EntityResourceBase implements ContainerInjectio
   /**
    * User settings config instance.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $userSettings;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;
 
   /**
    * The entity type repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   private $entityRepository;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;
 
   /**
    * Constructs a new Registration object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AccountInterface $account, EntityRepositoryInterface $entity_repository, EventDispatcherInterface $event_dispatcher) {
@@ -106,23 +109,23 @@ final class Registration extends EntityResourceBase implements ContainerInjectio
 
     $document = $this->getDocumentFromRequest($request);
     $event = new RegistrationEvent($created_entity, $document);
-    $this->eventDispatcher->dispatch(UserResourcesEvents::REGISTRATION_VALIDATE, $event);
+    $this->eventDispatcher->dispatch($event, UserResourcesEvents::REGISTRATION_VALIDATE);
   }
 
   /**
    * Handles the resource request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel $document
+   * @param JsonApiDocumentTopLevel $document
    *   The document.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown if the entity could not be saved.
    */
   public function process(Request $request, JsonApiDocumentTopLevel $document): ResourceResponse {
@@ -137,14 +140,14 @@ final class Registration extends EntityResourceBase implements ContainerInjectio
     );
     assert($account instanceof UserInterface);
     $event = new RegistrationEvent($account, $document);
-    $this->eventDispatcher->dispatch(UserResourcesEvents::REGISTRATION_COMPLETE, $event);
+    $this->eventDispatcher->dispatch($event, UserResourcesEvents::REGISTRATION_COMPLETE);
     return $response;
   }
 
   /**
    * Ensure the account can be registered in this request.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account to register.
    */
   protected function ensureAccountCanRegister(UserInterface $account = NULL) {
diff --git a/src/Routing/Routes.php b/src/Routing/Routes.php
index 7006eca..d8f5e16 100644
--- a/src/Routing/Routes.php
+++ b/src/Routing/Routes.php
@@ -19,7 +19,7 @@ class Routes implements ContainerInjectionInterface {
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;
 
@@ -33,7 +33,7 @@ class Routes implements ContainerInjectionInterface {
   /**
    * Constructs a new Routes object.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
    */
   public function __construct(ResourceTypeRepositoryInterface $resource_type_repository) {
@@ -71,7 +71,7 @@ class Routes implements ContainerInjectionInterface {
   /**
    * Gets the user registration route.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The route.
    */
   protected function getUserRegistrationRoute() {
@@ -88,7 +88,7 @@ class Routes implements ContainerInjectionInterface {
   /**
    * Gets the password reset route.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The route.
    */
   public function getPasswordResetRoute() {
@@ -105,7 +105,7 @@ class Routes implements ContainerInjectionInterface {
   /**
    * Gets the password update route.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The route.
    */
   public function getPasswordUpdateRoute() {
diff --git a/tests/modules/jsonapi_user_resources_test/src/EventSubscriber/RegistrationSubscriber.php b/tests/modules/jsonapi_user_resources_test/src/EventSubscriber/RegistrationSubscriber.php
index b2e97f3..1c14131 100644
--- a/tests/modules/jsonapi_user_resources_test/src/EventSubscriber/RegistrationSubscriber.php
+++ b/tests/modules/jsonapi_user_resources_test/src/EventSubscriber/RegistrationSubscriber.php
@@ -24,7 +24,7 @@ final class RegistrationSubscriber implements EventSubscriberInterface {
   /**
    * React on user registration.
    *
-   * @param \Drupal\jsonapi_user_resources\Events\RegistrationEvent $event
+   * @param RegistrationEvent $event
    *   The event.
    */
   public function onUserRegistration(RegistrationEvent $event) {
diff --git a/tests/src/Functional/PasswordResetTest.php b/tests/src/Functional/PasswordResetTest.php
index 0be3728..2316003 100644
--- a/tests/src/Functional/PasswordResetTest.php
+++ b/tests/src/Functional/PasswordResetTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\jsonapi_user_resources\Functional;
 
+use Drupal\user\Entity\User;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Test\AssertMailTrait;
 use Drupal\Core\Url;
@@ -40,14 +41,14 @@ final class PasswordResetTest extends BrowserTestBase {
   /**
    * The test user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $sut;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('jsonapi.settings')->set('read_only', FALSE)->save(TRUE);
     $this->sut = $this->createUser([], 'sut');
diff --git a/tests/src/Functional/PasswordUpdateTest.php b/tests/src/Functional/PasswordUpdateTest.php
index 8f47dfa..89abd82 100644
--- a/tests/src/Functional/PasswordUpdateTest.php
+++ b/tests/src/Functional/PasswordUpdateTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\jsonapi_user_resources\Functional;
 
+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
@@ -36,7 +38,7 @@ final class PasswordUpdateTest extends BrowserTestBase {
   /**
    * The test user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $sut;
 
@@ -50,7 +52,7 @@ final class PasswordUpdateTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('jsonapi.settings')->set('read_only', FALSE)->save(TRUE);
     $this->sut = $this->createUser([], 'sut');
@@ -110,7 +112,7 @@ final class PasswordUpdateTest extends BrowserTestBase {
       'data' => [
         'type' => 'user--user',
         'attributes' => [
-          'pass' => user_password(),
+          'pass' => \Drupal::service('password_generator')->generate(),
           'hash' => user_pass_rehash($this->sut, $timestamp),
           'timestamp' => $timestamp,
         ],
@@ -123,7 +125,7 @@ final class PasswordUpdateTest extends BrowserTestBase {
     $this->assertEquals(200, $response->getStatusCode(), $body);
     $this->sut = $this->reloadEntity($this->sut);
     $this->assertTrue($this->sut->isActive());
-    $this->assertNotEqual($this->sut->getPassword(), $previous_password);
+    $this->assertNotEquals($this->sut->getPassword(), $previous_password);
   }
 
   /**
@@ -163,14 +165,14 @@ final class PasswordUpdateTest extends BrowserTestBase {
   /**
    * Reloads the entity after clearing the static cache.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to reload.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The reloaded entity.
    */
   protected function reloadEntity(EntityInterface $entity) {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage($entity->getEntityTypeId());
     $storage->resetCache([$entity->id()]);
     return $storage->load($entity->id());
diff --git a/tests/src/Functional/RegistrationTest.php b/tests/src/Functional/RegistrationTest.php
index 2bce7ac..f8bd639 100644
--- a/tests/src/Functional/RegistrationTest.php
+++ b/tests/src/Functional/RegistrationTest.php
@@ -42,7 +42,7 @@ final class RegistrationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('jsonapi.settings')->set('read_only', FALSE)->save(TRUE);
   }
