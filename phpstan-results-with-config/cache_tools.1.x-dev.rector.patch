diff --git a/cache_tools.module b/cache_tools.module
index c05ef57..2fb722d 100644
--- a/cache_tools.module
+++ b/cache_tools.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Config\Entity\ConfigEntityType;
+use Drupal\cache_tools\Service\CacheInvalidator;
 /**
  * @file
  * Provides various caching enhancements.
@@ -11,7 +13,7 @@ use Drupal\Core\Entity\EntityInterface;
  * Implements hook_entity_type_alter().
  */
 function cache_tools_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityType $block */
+  /** @var ConfigEntityType $block */
   $block = $entity_types['block'];
   $block->setViewBuilderClass('Drupal\cache_tools\CachewiseBlockViewBuilder');
 }
@@ -28,7 +30,7 @@ function cache_tools_entity_type_alter(array &$entity_types) {
  *   https://www.drupal.org/project/drupal/issues/2551893 .
  */
 function cache_tools_entity_insert(EntityInterface $entity) {
-  /** @var \Drupal\cache_tools\Service\CacheInvalidator $cache_invalidator */
+  /** @var CacheInvalidator $cache_invalidator */
   $cache_invalidator = \Drupal::service('cache_tools.cache.invalidator');
   $cache_invalidator->invalidatePublishedEntity($entity);
   $cache_invalidator->invalidatePublishedEntityFields($entity);
@@ -43,7 +45,7 @@ function cache_tools_entity_insert(EntityInterface $entity) {
  * a field needs to be allowed for invalidation.
  */
 function cache_tools_entity_update(EntityInterface $entity) {
-  /** @var \Drupal\cache_tools\Service\CacheInvalidator $cache_invalidator */
+  /** @var CacheInvalidator $cache_invalidator */
   $cache_invalidator = \Drupal::service('cache_tools.cache.invalidator');
   $cache_invalidator->invalidatePublishedEntity($entity);
   $cache_invalidator->invalidatePublishedEntityFields($entity);
@@ -58,7 +60,7 @@ function cache_tools_entity_update(EntityInterface $entity) {
  * Note: Deleted entities are invalidated via entity_type:id (eg node:123).
  */
 function cache_tools_entity_delete(EntityInterface $entity) {
-  /** @var \Drupal\cache_tools\Service\CacheInvalidator $cache_invalidator */
+  /** @var CacheInvalidator $cache_invalidator */
   $cache_invalidator = \Drupal::service('cache_tools.cache.invalidator');
   $cache_invalidator->invalidatePublishedEntityFields($entity);
 }
diff --git a/src/CachewiseBlockViewBuilder.php b/src/CachewiseBlockViewBuilder.php
index e37a964..2f946f2 100644
--- a/src/CachewiseBlockViewBuilder.php
+++ b/src/CachewiseBlockViewBuilder.php
@@ -20,27 +20,26 @@ class CachewiseBlockViewBuilder extends BlockViewBuilder {
   /**
    * The cache sanitizer.
    *
-   * @var \Drupal\cache_tools\Service\CacheSanitizer
+   * @var CacheSanitizer
    */
   protected $cacheSanitizer;
 
   /**
    * Constructs a new CachewiseBlockViewBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The module handler.
-   * @param \Drupal\Core\Theme\Registry $theme_registry
+   * @param Registry $theme_registry
    *   The theme registry.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\cache_tools\Service\CacheSanitizer $cacheSanitizer
+   * @param CacheSanitizer $cacheSanitizer
    *   The cache sanitizer.
    */
-
   public function __construct(EntityTypeInterface $entity_type, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, Registry $theme_registry, EntityDisplayRepositoryInterface $entity_display_repository, CacheSanitizer $cacheSanitizer) {
     parent::__construct($entity_type, $entity_repository, $language_manager, $theme_registry, $entity_display_repository);
     $this->cacheSanitizer = $cacheSanitizer;
@@ -81,7 +80,7 @@ class CachewiseBlockViewBuilder extends BlockViewBuilder {
   public static function preRender($build) {
     static $cacheSanitizer;
     if (!isset($cacheSanitizer)) {
-      /** @var \Drupal\cache_tools\Service\CacheSanitizer $cacheSanitizer */
+      /** @var CacheSanitizer $cacheSanitizer */
       $cacheSanitizer = \Drupal::service('cache_tools.cache.sanitizer');
     }
     $block = $build['#block'];
diff --git a/src/Plugin/views/cache/SanitizedCacheFieldTag.php b/src/Plugin/views/cache/SanitizedCacheFieldTag.php
index be89635..5783fe9 100644
--- a/src/Plugin/views/cache/SanitizedCacheFieldTag.php
+++ b/src/Plugin/views/cache/SanitizedCacheFieldTag.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cache_tools\Plugin\views\cache;
 
+use Drupal\node\Entity\NodeType;
 use Drupal\cache_tools\Service\CacheSanitizer;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityTypeManager;
@@ -34,21 +35,21 @@ class SanitizedCacheFieldTag extends SanitizedCacheTag {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;
 
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -110,7 +111,7 @@ class SanitizedCacheFieldTag extends SanitizedCacheTag {
     parent::buildOptionsForm($form, $form_state);
     $options = [];
 
-    /** @var \Drupal\node\Entity\NodeType[] $bundles */
+    /** @var NodeType[] $bundles */
     $bundles = $this->entityTypeManager
       ->getStorage('node_type')
       ->loadMultiple();
diff --git a/src/Plugin/views/cache/SanitizedCacheTag.php b/src/Plugin/views/cache/SanitizedCacheTag.php
index 8a1228a..7c2be7e 100644
--- a/src/Plugin/views/cache/SanitizedCacheTag.php
+++ b/src/Plugin/views/cache/SanitizedCacheTag.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\cache_tools\Plugin\views\cache;
 
+use Drupal\views\Plugin\views\display\DisplayPluginBase;
+use Drupal\views\Plugin\views\HandlerBase;
 use Drupal\cache_tools\Service\CacheSanitizer;
 use Drupal\node\Plugin\views\argument\Type;
 use Drupal\views\Plugin\views\cache\Tag;
@@ -27,7 +29,7 @@ class SanitizedCacheTag extends Tag {
   /**
    * Cache sanitizer.
    *
-   * @var \Drupal\cache_tools\Service\CacheSanitizer
+   * @var CacheSanitizer
    */
   protected $cacheSanitizer;
 
@@ -56,7 +58,7 @@ class SanitizedCacheTag extends Tag {
    *
    * TODO: Make this work with custom conditions (e.g. NOT, or grouped one).
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    *
    * @return array
@@ -64,7 +66,7 @@ class SanitizedCacheTag extends Tag {
    */
   protected function extractPublishedTagsFromView(ViewExecutable $view) {
     $tags = [];
-    /** @var \Drupal\views\Plugin\views\display\DisplayPluginBase $currentDisplay */
+    /** @var DisplayPluginBase $currentDisplay */
     $currentDisplay = $view->getDisplay();
     $lookupHandlers = [
       'filter' => Bundle::class,
@@ -74,7 +76,7 @@ class SanitizedCacheTag extends Tag {
       $handlers = $currentDisplay->getHandlers($handlerName);
       foreach ($handlers as $handler) {
         if ($handler instanceof $handlerClass) {
-          /** @var \Drupal\views\Plugin\views\HandlerBase $handler */
+          /** @var HandlerBase $handler */
           foreach ($handler->value as $bundle) {
             try {
               $entityType = $handler->getEntityType();
diff --git a/src/Service/CacheInvalidator.php b/src/Service/CacheInvalidator.php
index 728bdea..d885b6b 100644
--- a/src/Service/CacheInvalidator.php
+++ b/src/Service/CacheInvalidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cache_tools\Service;
 
+use Drupal\Core\Field\EntityReferenceFieldItemList;
 use drunomics\ServiceUtils\Core\Entity\EntityTypeManagerTrait;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ -21,7 +22,7 @@ class CacheInvalidator {
   /**
    * The cache tag invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
@@ -35,7 +36,7 @@ class CacheInvalidator {
   /**
    * CacheSanitizer constructor.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tag invalidator.
    * @param array $settings
    *   The cache settings.
@@ -48,7 +49,7 @@ class CacheInvalidator {
   /**
    * Get published cache tag in format `entitytype_pub`.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   Entity.
    *
    * @return string
@@ -61,7 +62,7 @@ class CacheInvalidator {
   /**
    * Get published cache tag in format `entitytype_entitybundle_pub`.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return string
@@ -83,7 +84,7 @@ class CacheInvalidator {
    * 3. Published entities going to be deleted or unpublished are invalidated
    *    via entity_type:id (eg node:123).
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return bool
@@ -123,9 +124,9 @@ class CacheInvalidator {
   /**
    * Get field cache tags for configured fields having (modified) values.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   Entity.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity_compare
+   * @param FieldableEntityInterface|null $entity_compare
    *   (optional) An entity to compare field values with. When provided only
    *   non-equal field values will be considered.
    *
@@ -164,7 +165,7 @@ class CacheInvalidator {
           }
           if (!$entity_compare->get($field_name)->isEmpty()) {
             // Add tag for the original field value.
-            /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $field_items */
+            /** @var EntityReferenceFieldItemList $field_items */
             foreach ($entity_compare->get($field_name)->getValue() as $value) {
               $tags = array_merge($tags, $this->generateTagsBasedOnInvalidationStrategy($target_type, $value[$key], $tag_prefix_field, $invalidate_term_parents));
             }
@@ -172,7 +173,7 @@ class CacheInvalidator {
         }
         if (!$entity->get($field_name)->isEmpty()) {
           // Add tag for the new field value.
-          /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $field_items */
+          /** @var EntityReferenceFieldItemList $field_items */
           foreach ($entity->get($field_name)->getValue() as $value) {
             $tags = array_merge($tags, $this->generateTagsBasedOnInvalidationStrategy($target_type, $value[$key], $tag_prefix_field, $invalidate_term_parents));
           }
@@ -237,7 +238,7 @@ class CacheInvalidator {
    * 4. Update and publish: all non-empty field values.
    * 5. Update and unpublish: all non-empty original field values.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return bool
diff --git a/src/Service/CacheSanitizer.php b/src/Service/CacheSanitizer.php
index 41f6e17..11f934e 100644
--- a/src/Service/CacheSanitizer.php
+++ b/src/Service/CacheSanitizer.php
@@ -13,7 +13,7 @@ class CacheSanitizer {
   /**
    * The cache tag handler.
    *
-   * @var \Drupal\cache_tools\Service\CacheInvalidator
+   * @var CacheInvalidator
    */
   protected $cacheInvalidator;
 
@@ -27,7 +27,7 @@ class CacheSanitizer {
   /**
    * CacheSanitizer constructor.
    *
-   * @param \Drupal\cache_tools\Service\CacheInvalidator $cache_invalidator
+   * @param CacheInvalidator $cache_invalidator
    *   PublishedEntityCacheTag object.
    * @param array $settings
    *   The cache tools settings.
@@ -95,7 +95,7 @@ class CacheSanitizer {
   /**
    * Sanitizes cacheable metadata.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    * @param array $build
    *   Build.
@@ -141,7 +141,7 @@ class CacheSanitizer {
   /**
    * Get published cache tag in format `entitytype_entitybundle_pub`.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return string
@@ -158,7 +158,7 @@ class CacheSanitizer {
   /**
    * Get published cache tag in format `entitytype_pub`.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   Entity.
    *
    * @return string
@@ -184,7 +184,7 @@ class CacheSanitizer {
    * 3. Published entities going to be deleted or unpublished are invalidated
    *    via entity_type:id (eg node:123).
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return bool
