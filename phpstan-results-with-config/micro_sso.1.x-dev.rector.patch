diff --git a/micro_sso.module b/micro_sso.module
index 767e9b7..ba085b7 100644
--- a/micro_sso.module
+++ b/micro_sso.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\micro_site\SiteNegotiatorInterface;
+use Drupal\micro_site\Entity\SiteInterface;
+use Drupal\micro_sso\MicroSsoHelperInterface;
 /**
  * @file
  * Micro_sso.module - Pseudo SSO across micro sites.
@@ -84,7 +87,7 @@ function micro_sso_scheme_get() {
  *   Return TRUE if the host is the master host.
  */
 function micro_sso_is_master() {
-  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+  /** @var SiteNegotiatorInterface $negotiator */
   $negotiator = \Drupal::service('micro_site.negotiator');
   return !$negotiator->getActiveSite() && !(PHP_SAPI === 'cli') && $_SERVER['HTTP_HOST'] === \Drupal::config('micro_site.settings')->get('public_url');
 }
@@ -97,9 +100,9 @@ function micro_sso_is_master() {
  */
 function micro_sso_origin_get() {
   if (!empty($_SERVER['HTTP_ORIGIN'])) {
-    /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+    /** @var SiteNegotiatorInterface $negotiator */
     $negotiator = \Drupal::service('micro_site.negotiator');
-    /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+    /** @var SiteInterface $site */
     $site = $negotiator->loadByHostname($_SERVER['HTTP_ORIGIN']);
     // @TODO check user access to site too.
     if ($site) {
@@ -113,7 +116,7 @@ function micro_sso_origin_get() {
  * Implements hook_page_attachments().
  */
 function micro_sso_page_attachments(array &$attachments) {
-  /** @var \Drupal\micro_sso\MicroSsoHelperInterface $micro_sso_helper */
+  /** @var MicroSsoHelperInterface $micro_sso_helper */
   $micro_sso_helper = \Drupal::service('micro_sso.helper');
   $scheme = $micro_sso_helper->getScheme();
   $is_master = $micro_sso_helper->isMaster();
diff --git a/src/Controller/MicroSsoController.php b/src/Controller/MicroSsoController.php
index 7124c76..3588081 100644
--- a/src/Controller/MicroSsoController.php
+++ b/src/Controller/MicroSsoController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\micro_sso\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\micro_site\Entity\SiteInterface;
@@ -20,32 +22,32 @@ class MicroSsoController extends ControllerBase {
   /**
    * The micro site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
   /**
    * The micro SSO helper.
    *
-   * @var \Drupal\micro_sso\MicroSsoHelperInterface
+   * @var MicroSsoHelperInterface
    */
   protected $microSsoHelper;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs the controller.
    *
-   * @param \Drupal\micro_sso\MicroSsoHelperInterface $micro_sso_helper
+   * @param MicroSsoHelperInterface $micro_sso_helper
    *   The micro sso helper service.
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The micro site negotiator.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(MicroSsoHelperInterface $micro_sso_helper, SiteNegotiatorInterface $site_negotiator, EntityTypeManagerInterface $entity_type_manager) {
@@ -68,10 +70,10 @@ class MicroSsoController extends ControllerBase {
   /**
    * Check on the master host if the user is authenticated and the request is valid.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The Json response.
    */
   public function check(Request $request) {
@@ -121,14 +123,14 @@ class MicroSsoController extends ControllerBase {
   /**
    * Attempt to login the user on the micro site.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function login(Request $request) {
     $token = $request->get('token');
@@ -188,7 +190,7 @@ class MicroSsoController extends ControllerBase {
    * @param string $destination
    *   The optional destination once the user is logged in.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   protected function getResponse($status, $reason, $success = NULL, $login = [], $destination = NULL) {
diff --git a/src/EventSubscriber/MicroSsoSubscriber.php b/src/EventSubscriber/MicroSsoSubscriber.php
index 4aae5d0..6d2b4cd 100644
--- a/src/EventSubscriber/MicroSsoSubscriber.php
+++ b/src/EventSubscriber/MicroSsoSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\micro_sso\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\micro_sso\MicroSsoHelperInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 
 /**
  * The micro SSO event subscriber.
@@ -15,14 +15,14 @@ class MicroSsoSubscriber implements EventSubscriberInterface {
   /**
    * The micro sso helper.
    *
-   * @var \Drupal\micro_sso\MicroSsoHelperInterface
+   * @var MicroSsoHelperInterface
    */
   protected $microSsoHelper;
 
   /**
    * Constructs an event subscriber object for allowing CORS request.
    *
-   * @param \Drupal\micro_sso\MicroSsoHelperInterface $micro_sso_helper
+   * @param MicroSsoHelperInterface $micro_sso_helper
    *   The micro sso helper service.
    */
   public function __construct(MicroSsoHelperInterface $micro_sso_helper) {
@@ -40,7 +40,7 @@ class MicroSsoSubscriber implements EventSubscriberInterface {
   /**
    * {@inheritdoc}
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if ($this->microSsoHelper->isMaster()) {
       if ($origin = $this->microSsoHelper->getOrigin()) {
         // We had an origin in the request query, should not happen with images
diff --git a/src/MicroSsoHelper.php b/src/MicroSsoHelper.php
index fca49a0..0917ab4 100644
--- a/src/MicroSsoHelper.php
+++ b/src/MicroSsoHelper.php
@@ -20,68 +20,68 @@ class MicroSsoHelper implements MicroSsoHelperInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The cache sso.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheSSO;
 
   /**
    * The datetime service.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $dateTime;
 
   /**
    * The request stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The crsf token service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The Site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
   /**
    * Constructs the micro sso helper service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The Site negotiator.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrf_token
+   * @param CsrfTokenGenerator $csrf_token
    *   The csrf token service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack object.
-   * @param \Drupal\Component\Datetime\Time $time
+   * @param Time $time
    *   The date time service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_sso
+   * @param CacheBackendInterface $cache_sso
    *   The cache sso.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(ConfigFactoryInterface $config_factory, SiteNegotiatorInterface $site_negotiator, CsrfTokenGenerator $csrf_token, RequestStack $request_stack, Time $time, CacheBackendInterface $cache_sso, AccountProxyInterface $current_user) {
@@ -109,7 +109,7 @@ class MicroSsoHelper implements MicroSsoHelperInterface {
     $http_origin = $request->server->get('HTTP_ORIGIN');
     if (!empty($http_origin)) {
       $url = parse_url($http_origin);
-      /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+      /** @var SiteInterface $site */
       $site = $this->negotiator->loadByHostname($url['host']);
       if ($site instanceof SiteInterface) {
         return $site->getSiteUrl();
diff --git a/src/MicroSsoHelperInterface.php b/src/MicroSsoHelperInterface.php
index 6a7e716..c4f3f11 100644
--- a/src/MicroSsoHelperInterface.php
+++ b/src/MicroSsoHelperInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\micro_sso;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Cache\CacheBackendInterface;
 /**
  * Middleware for the micro_site module.
  */
@@ -45,7 +48,7 @@ interface MicroSsoHelperInterface {
   /**
    * Get the current request.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The request oject.
    */
   public function getRequest();
@@ -61,7 +64,7 @@ interface MicroSsoHelperInterface {
   /**
    * Get the current user.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The current user object.
    */
   public function getCurrentUser();
@@ -77,7 +80,7 @@ interface MicroSsoHelperInterface {
   /**
    * Get the sso cache backend object.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The micro SSO cache backend.
    */
   public function getCacheSso();
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 93117ea..42030fe 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\micro_sso\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\micro_site\Functional\MicroSiteBase;
 
@@ -22,7 +23,7 @@ class LoadTest extends MicroSiteBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
@@ -38,7 +39,7 @@ class LoadTest extends MicroSiteBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ -49,7 +50,7 @@ class LoadTest extends MicroSiteBase {
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
 }
