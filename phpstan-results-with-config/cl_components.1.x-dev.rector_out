modules/contrib/cl_components/cl_components.install
modules/contrib/cl_components/cl_components.module
modules/contrib/cl_components/src/Component/Component.php
modules/contrib/cl_components/src/Component/ComponentDiscovery.php
modules/contrib/cl_components/src/Component/ComponentLoader.php
modules/contrib/cl_components/src/Component/ComponentMetadata.php
modules/contrib/cl_components/src/Controller/ComponentAudit.php
modules/contrib/cl_components/src/Element/ComponentElement.php
modules/contrib/cl_components/src/Exception/ComponentNotFoundException.php
modules/contrib/cl_components/src/Exception/ComponentSyntaxException.php
modules/contrib/cl_components/src/Exception/InvalidComponentException.php
modules/contrib/cl_components/src/Exception/TemplateNotFoundException.php
modules/contrib/cl_components/src/Form/SettingsForm.php
modules/contrib/cl_components/src/Twig/TwigExtension.php

7 files with changes
====================

1) modules/contrib/cl_components/src/Twig/TwigExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cl_components\Twig;

+use Drupal\cl_components\Exception\ComponentNotFoundException;
 use Drupal\cl_components\Component\ComponentDiscovery;
 use Drupal\cl_components\Exception\TemplateNotFoundException;
 use Twig\Extension\AbstractExtension;
@@ @@
   /**
    * The discovery.
    *
-   * @var \Drupal\cl_components\Component\ComponentDiscovery
+   * @var ComponentDiscovery
    */
   private ComponentDiscovery $discovery;

@@ @@
   /**
    * Creates TwigExtension.
    *
-   * @param \Drupal\cl_components\Component\ComponentDiscovery $discovery
+   * @param ComponentDiscovery $discovery
    *   The component discovery.
    */
   public function __construct(ComponentDiscovery $discovery) {
@@ @@
    * @param string $variant
    *   The variant.
    *
-   * @throws \Drupal\cl_components\Exception\TemplateNotFoundException|\Drupal\cl_components\Exception\ComponentNotFoundException
+   * @throws TemplateNotFoundException|ComponentNotFoundException
    */
   public function addAdditionalContext(array &$context, string $component_id, string $variant, int $debug) {
     $component = $this->discovery->find($component_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cl_components/src/Element/ComponentElement.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cl_components\Element;

+use Drupal\cl_components\Exception\ComponentNotFoundException;
+use Drupal\cl_components\Exception\TemplateNotFoundException;
 use Drupal\cl_components\Component\ComponentDiscovery;
 use Drupal\Core\Render\Element\RenderElement;

@@ @@
    * @return array
    *   The form element.
    *
-   * @throws \Drupal\cl_components\Exception\ComponentNotFoundException
-   * @throws \Drupal\cl_components\Exception\TemplateNotFoundException
+   * @throws ComponentNotFoundException
+   * @throws TemplateNotFoundException
    */
   public static function preRenderComponent(array $element): array {
     $variant = $element['#variant'] ?? '';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cl_components/src/Controller/ComponentAudit.php:16

    ---------- begin diff ----------
@@ @@
   private ComponentDiscovery $discovery;

   /**
-   * @param \Drupal\cl_components\Component\ComponentDiscovery $discovery
+   * @param ComponentDiscovery $discovery
    */
   public function __construct(ComponentDiscovery $discovery) {
     $this->discovery = $discovery;
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    $discovery = $container->get(ComponentDiscovery::class);
+    $discovery = $this->discovery;
     assert($discovery instanceof ComponentDiscovery);
     return new static($discovery);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cl_components/src/Component/ComponentMetadata.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cl_components\Component;

+use League\CommonMark\CommonMarkConverter;
 use Drupal\cl_components\Exception\InvalidComponentException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\File\FileUrlGeneratorInterface;
@@ @@
    * @param string $path
    *   The path to the component folder.
    *
-   * @throws \Drupal\cl_components\Exception\InvalidComponentException
+   * @throws InvalidComponentException
    */
   public function __construct(string $path) {
     $this->path = $path;
@@ @@
     if (file_exists($documentation_path) && class_exists('\League\CommonMark\CommonMarkConverter')) {
       $documentation_md = file_get_contents($documentation_path);
       // phpcs:ignore Drupal.Classes.FullyQualifiedNamespace.UseStatementMissing
-      $converter = new \League\CommonMark\CommonMarkConverter();
+      $converter = new CommonMarkConverter();
       $this->documentation = $converter->convertToHtml($documentation_md);
     }

@@ @@
    * @param object $metadata_info
    *   The loaded metadata info.
    *
-   * @throws \Drupal\cl_components\Exception\InvalidComponentException
+   * @throws InvalidComponentException
    */
   private function validateMetadataFile(object $metadata_info): void {
     $validator = new Validator();
@@ @@
    * @param array $metadata_info
    *   The metadata information as decoded from "metadata.json".
    *
-   * @throws \Drupal\cl_components\Exception\InvalidComponentException
+   * @throws InvalidComponentException
    */
   private function parseSchemaInfo(array $metadata_info): void {
     $default_props_schema = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/cl_components/src/Component/ComponentLoader.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The component discovery service.
    *
-   * @var \Drupal\cl_components\Component\ComponentDiscovery
+   * @var ComponentDiscovery
    */
   protected ComponentDiscovery $componentDiscovery;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   private RendererInterface $renderer;

@@ @@
   /**
    * Constructs a new ComponentLoader object.
    *
-   * @param \Drupal\cl_components\Component\ComponentDiscovery $component_discovery
+   * @param ComponentDiscovery $component_discovery
    *   The component discovery.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    * @param ?array $twig_config
    *   The twig configuration.
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Twig\Error\LoaderError
+   * @throws LoaderError
    *   Thrown if a template matching $name cannot be found.
    */
   protected function findTemplate($name, $throw = TRUE) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\cl_components\Exception\ComponentNotFoundException
+   * @throws ComponentNotFoundException
    * @throws \Exception
    */
   public function getSourceContext($name): Source {
@@ @@
    * @return array
    *   The component ID and variant.
    *
-   * @throws \Twig\Error\LoaderError
+   * @throws LoaderError
    */
   public function parseIdAndVariant(string $name): array {
     if (isset($this->idVariantCache[$name])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cl_components/src/Component/ComponentDiscovery.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Cached component information.
    *
-   * @var \Drupal\cl_components\Component\Component[]|null
+   * @var Component[]|null
    */
   private array $components;

@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private CacheBackendInterface $cache;

@@ @@
   /**
    * Creates a new ComponentDiscovery.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory, CacheBackendInterface $cache) {
@@ @@
    * @param bool $no_wip
    *   If TRUE, only return Components that are not marked as WIP.
    *
-   * @return \Drupal\cl_components\Component\Component[]
+   * @return Component[]
    *   The modules.
    */
   public function findAllOrganisms(bool $no_wip = FALSE): array {
@@ @@
   /**
    * Creates the library declaration array from a component.
    *
-   * @param \Drupal\cl_components\Component\Component $component
+   * @param Component $component
    *   The component info.
    *
    * @return array
@@ @@
    * @return Component|null
    *   The component.
    *
-   * @throws \Drupal\cl_components\Exception\ComponentNotFoundException
+   * @throws ComponentNotFoundException
    */
   public function findBySiblingFile(string $filename): ?Component {
     // The file may be relative to something else.
@@ @@
    * @param string $id
    *   The ID of the component to find.
    *
-   * @return \Drupal\cl_components\Component\Component
+   * @return Component
    *   The component.
    *
-   * @throws \Drupal\cl_components\Exception\ComponentNotFoundException
+   * @throws ComponentNotFoundException
    *   When the component cannot be found.
    */
   public function find(string $id): Component {
@@ @@
   }

   /**
-   * Creates a component from a component path.
-   *
-   * @param string $path
-   *   The path to the directory that holds the component.
-   *
-   * @return \Drupal\cl_components\Component\Component|null The component.
-   *   The component.
-   */
+  * Creates a component from a component path.
+  *
+  * @param string $path
+  *   The path to the directory that holds the component.
+  *
+   * @return Component|null The component.
+    The component.
+  */
   private function createComponent(string $path): ?Component {
     try {
       return $this->instantiateComponent($path);
@@ @@
    * @param string $path
    *   The path to the directory that holds the component.
    *
-   * @return \Drupal\cl_components\Component\Component
+   * @return Component
    *   The component.
    *
-   * @throws \Drupal\cl_components\Exception\InvalidComponentException
+   * @throws InvalidComponentException
    */
   public function instantiateComponent(string $path): Component {
     $assets = $this->discoverDistAssets($path);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/cl_components/src/Component/Component.php:35

    ---------- begin diff ----------
@@ @@
    *
    * This includes the available variants, and documentation.
    *
-   * @var \Drupal\cl_components\Component\ComponentMetadata
+   * @var ComponentMetadata
    */
   private ComponentMetadata $metadata;

@@ @@
    *   The styles.
    * @param string[] $scripts
    *   The JS.
-   * @param \Drupal\cl_components\Component\ComponentMetadata $metadata
+   * @param ComponentMetadata $metadata
    *   The component metadata.
    *
-   * @throws \Drupal\cl_components\Exception\InvalidComponentException
+   * @throws InvalidComponentException
    *   If the component is invalid.
    */
   public function __construct(string $id, array $templates, array $styles, array $scripts, ComponentMetadata $metadata, bool $debug_mode) {
@@ @@
   /**
    * Validates the data for the component object.
    *
-   * @throws \Drupal\cl_components\Exception\InvalidComponentException
+   * @throws InvalidComponentException
    *   If the component is invalid.
    */
   private function validate() {
@@ @@
    * @return string
    *   The name of the template.
    *
-   * @throws \Drupal\cl_components\Exception\TemplateNotFoundException
+   * @throws TemplateNotFoundException
    */
   public function getTemplateName(string $variant = ''): string {
     $filename = sprintf('%s%s%s.twig', $this->getId(), static::TEMPLATE_VARIANT_SEPARATOR, $variant);
@@ @@
   /**
    * Gets the component metadata.
    *
-   * @return \Drupal\cl_components\Component\ComponentMetadata
+   * @return ComponentMetadata
    *   The component metadata.
    */
   public function getMetadata(): ComponentMetadata {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 7 files have been changed by Rector                                       

