modules/contrib/cloudfront_edge_caching/cloudfront_edge_caching.module
modules/contrib/cloudfront_edge_caching/src/CloudfrontEdgeCache.php
modules/contrib/cloudfront_edge_caching/src/Controller/CloudfrontEdgeCacheController.php
modules/contrib/cloudfront_edge_caching/src/Form/CloudfrontEdgeCacheInvalidateUrlForm.php
modules/contrib/cloudfront_edge_caching/src/Form/CloudfrontEdgeCacheSettingsForm.php

4 files with changes
====================

1) modules/contrib/cloudfront_edge_caching/src/Form/CloudfrontEdgeCacheInvalidateUrlForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cloudfront_edge_caching\Form;

+use Aws\Result;
 use Drupal\cloudfront_edge_caching\CloudfrontEdgeCache;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The cloudfront edge cache service.
    *
-   * @var \Drupal\cloudfront_edge_caching\CloudfrontEdgeCache
+   * @var CloudfrontEdgeCache
    */
   protected $cloudfrontEdgeCache;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\cloudfront_edge_caching\CloudfrontEdgeCache $cloudfront_edge_cache
+   * @param CloudfrontEdgeCache $cloudfront_edge_cache
    *   The cloudfront edge cache service.
    */
   public function __construct(CloudfrontEdgeCache $cloudfront_edge_cache) {
@@ @@
       // Invalidate.
       $result = $this->cloudfrontEdgeCache->invalidateUrl($paths);
       if ($result) {
-        /** @var \Aws\Result $result */
+        /** @var Result $result */
         $data = $result->toArray();
         $this->messenger()
           ->addStatus($this->t('Your invalidation, @id is in progress.', ['@id' => $data['Invalidation']['Id']]), 'status');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cloudfront_edge_caching/src/Controller/CloudfrontEdgeCacheController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cloudfront_edge_caching\Controller;

+use Aws\Api\DateTimeResult;
 use Drupal\cloudfront_edge_caching\CloudfrontEdgeCache;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The cloudfront edge cache service.
    *
-   * @var \Drupal\cloudfront_edge_caching\CloudfrontEdgeCache
+   * @var CloudfrontEdgeCache
    */
   protected $cloudfrontEdgeCache;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\cloudfront_edge_caching\CloudfrontEdgeCache $cloudfront_edge_cache
+   * @param CloudfrontEdgeCache $cloudfront_edge_cache
    *   The cloudfront edge cache service.
    */
   public function __construct(RequestStack $request_stack, CloudfrontEdgeCache $cloudfront_edge_cache) {
@@ @@
   /**
    * Get distributions.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return array
@@ @@
     if (isset($distributions['DistributionList'])) {
       if ($distributions['DistributionList']['Quantity'] > 0) {
         foreach ($distributions['DistributionList']['Items'] as $distribution) {
-          /** @var \Aws\Api\DateTimeResult $created */
+          /** @var DateTimeResult $created */
           $modified = $distribution['LastModifiedTime'];
           $rows[] = [
             'id' => $distribution['Id'],
@@ @@
   /**
    * Get invalidations.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return array
@@ @@
     if (isset($invalidations['InvalidationList'])) {
       if ($invalidations['InvalidationList']['Quantity'] > 0) {
         foreach ($invalidations['InvalidationList']['Items'] as $invalidation) {
-          /** @var \Aws\Api\DateTimeResult $created */
+          /** @var DateTimeResult $created */
           $created = $invalidation['CreateTime'];
           $rows[] = [
             'id' => $invalidation['Id'],
@@ @@
   /**
    * Flush site cache in Cloudfront.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function flushCache(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cloudfront_edge_caching/src/CloudfrontEdgeCache.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cloudfront_edge_caching;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\Config;
+use Aws\Result;
 use Aws\CloudFront\CloudFrontClient;
 use Aws\Exception\AwsException;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The AWS key repository object.
    *
-   * @var \Drupal\key_aws\AWSKeyRepository
+   * @var AWSKeyRepository
    */
   protected $awsKeyRepository;

@@ @@
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\key_aws\AWSKeyRepository $aws_key_repository
+   * @param AWSKeyRepository $aws_key_repository
    *   AWS Key repository object.
    */
   public function __construct(
@@ @@
   /**
    * Get configuration.
    *
-   * @return \Drupal\Core\Config\Config|null
+   * @return Config|null
    *   Returns the config.
    */
   public function getConfig() {
@@ @@
   /**
    * Get client.
    *
-   * @return \Aws\CloudFront\CloudFrontClient|null
+   * @return CloudFrontClient|null
    *   Return the client.
    */
   public function getClient(): ?CloudFrontClient {
@@ @@
   /**
    * Get distributions.
    *
-   * @return array|\Aws\Result
+   * @return array|Result
    *   Return the array of distributions.
    */
   public function getDistributions() {
@@ @@
    * @param array $paths
    *   Array of paths to invalidate.
    *
-   * @return \Aws\Result|false
+   * @return Result|false
    *   Returns the result or false if failed.
    */
   public function invalidateUrl(array $paths) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/cloudfront_edge_caching/cloudfront_edge_caching.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\cloudfront_edge_caching\CloudfrontEdgeCache;
 /**
  * @file
  * This module enables integration with Amazon Cloudfront functionality.
@@ @@
  * Implements hook_entity_update().
  */
 function cloudfront_edge_caching_entity_update(EntityInterface $entity) {
-  /** @var \Drupal\cloudfront_edge_caching\CloudfrontEdgeCache $cloudfrontEdgeCache */
+  /** @var CloudfrontEdgeCache $cloudfrontEdgeCache */
   $cloudfrontEdgeCache = \Drupal::service('cloudfront_edge_cache');
   $pathAliasManager = \Drupal::service('path_alias.manager');
   $messenger = \Drupal::messenger();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

