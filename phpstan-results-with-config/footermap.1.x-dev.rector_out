modules/contrib/footermap/footermap.install
modules/contrib/footermap/footermap.module
modules/contrib/footermap/footermap.theme.inc
modules/contrib/footermap/src/Menu/AnonymousMenuLinkTreeManipulator.php
modules/contrib/footermap/src/Plugin/Block/FootermapBlock.php
modules/contrib/footermap/src/Plugin/Block/FootermapInterface.php
modules/contrib/footermap/tests/src/Functional/FootermapBlockWebTest.php
modules/contrib/footermap/tests/src/Unit/Plugin/Block/FootermapBlockTest.php

4 files with changes
====================

1) modules/contrib/footermap/tests/src/Unit/Plugin/Block/FootermapBlockTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\footermap\Unit\Plugin\Block;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Entity\ConfigEntityType;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Logger\LoggerChannel;
@@ @@
  */
 class FootermapBlockTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Service Container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create some menu entities.
@@ @@
    * @param string|bool $menu
    *   (Optional) The menu plugin id.
    *
-   * @return \Drupal\Core\Menu\MenuTreeParameters
+   * @return MenuTreeParameters
    *   Menu tree parameter class.
    */
   protected function getMenuParameters($limit = FALSE, $menu = FALSE) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/footermap/tests/src/Functional/FootermapBlockWebTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\footermap\Functional;

+use Drupal\block\Entity\Block;
 use Drupal\Tests\block\Functional\AssertBlockAppearsTrait;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   protected static $modules = ['block', 'menu_ui', 'path', 'footermap'];

   /**
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $settings = [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/footermap/src/Plugin/Block/FootermapBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\footermap\Plugin\Block;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Menu\MenuLinkInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResultNeutral;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The menu.link_tree service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuTree;

@@ @@
   /**
    * The entity.repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The plugin.manager.menu_link service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $menuLinkManager;

@@ @@
   /**
    * The footermap logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
    *   The block plugin id.
    * @param mixed $plugin_definition
    *   The block plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity.repository service.
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_tree
+   * @param MenuLinkTreeInterface $menu_tree
    *   The menu.link_tree service.
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager
+   * @param MenuLinkManagerInterface $menu_link_manager
    *   The plugin.manager.menu_link service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The Logger Channel Factory service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_manager, EntityRepositoryInterface $entityRepository, MenuLinkTreeInterface $menu_tree, MenuLinkManagerInterface $menu_link_manager, LoggerChannelFactoryInterface $logger_factory) {
@@ @@
   public function buildMenu(array &$tree, array &$mapref) {

     foreach ($tree as $key => $item) {
-      /** @var \Drupal\Core\Menu\MenuLinkInterface $link */
+      /** @var MenuLinkInterface $link */
       $link = $item->link;
       $link_title = $link->getTitle();

@@ @@
    * @return array
    *   An associative array of menus keyed by menu id (string) and menu label.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getMenus($plugin_id = NULL) {
     $options = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/footermap/src/Menu/AnonymousMenuLinkTreeManipulator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\footermap\Menu;

+use Drupal\Core\Menu\MenuLinkTreeElement;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The access manager.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The entity_type.manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a \Drupal\Core\Menu\DefaultMenuLinkTreeManipulators object.
    *
-   * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The access manager.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity_type.manager service.
    */
   public function __construct(AccessManagerInterface $access_manager, AccountInterface $account, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    * subtrees to become accessible again, thus forcing us to conclude that that
    * subtree is unconditionally inaccessible.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeElement[] $tree
+   * @param MenuLinkTreeElement[] $tree
    *   The menu link tree to manipulate.
    *
-   * @return \Drupal\Core\Menu\MenuLinkTreeElement[]
+   * @return MenuLinkTreeElement[]
    *   The manipulated menu link tree.
    */
   public function checkAccess(array $tree) {
@@ @@
    * This manipulator should be added before the generic ::checkAccess() one,
    * because it provides a performance optimization for ::checkAccess().
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeElement[] $tree
+   * @param MenuLinkTreeElement[] $tree
    *   The menu link tree to manipulate.
    *
-   * @return \Drupal\Core\Menu\MenuLinkTreeElement[]
+   * @return MenuLinkTreeElement[]
    *   The manipulated menu link tree.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function checkNodeAccess(array $tree) {
     $node_links = [];
@@ @@
   /**
    * Collects the node links in the menu tree.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeElement[] $tree
+   * @param MenuLinkTreeElement[] $tree
    *   The menu link tree to manipulate.
    * @param array $node_links
    *   Stores references to menu link elements to effectively set access.
@@ @@
   /**
    * Checks access for one menu link instance.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $instance
+   * @param MenuLinkInterface $instance
    *   The menu link instance.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function menuLinkCheckAccess(MenuLinkInterface $instance) {
@@ @@
   /**
    * Generates a unique index and sorts by it.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeElement[] $tree
+   * @param MenuLinkTreeElement[] $tree
    *   The menu link tree to manipulate.
    *
-   * @return \Drupal\Core\Menu\MenuLinkTreeElement[]
+   * @return MenuLinkTreeElement[]
    *   The manipulated menu link tree.
    */
   public function generateIndexAndSort(array $tree) {
@@ @@
   /**
    * Flattens the tree to a single level.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeElement[] $tree
+   * @param MenuLinkTreeElement[] $tree
    *   The menu link tree to manipulate.
    *
-   * @return \Drupal\Core\Menu\MenuLinkTreeElement[]
+   * @return MenuLinkTreeElement[]
    *   The manipulated menu link tree.
    */
   public function flatten(array $tree) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 4 files have been changed by Rector                                       

