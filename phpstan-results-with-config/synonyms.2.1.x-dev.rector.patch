diff --git a/modules/synonyms_autocomplete/src/Controller/EntityAutocomplete.php b/modules/synonyms_autocomplete/src/Controller/EntityAutocomplete.php
index c3820ef..890fa49 100644
--- a/modules/synonyms_autocomplete/src/Controller/EntityAutocomplete.php
+++ b/modules/synonyms_autocomplete/src/Controller/EntityAutocomplete.php
@@ -19,7 +19,7 @@ class EntityAutocomplete extends ControllerBase {
   /**
    * The autocomplete service.
    *
-   * @var \Drupal\synonyms_autocomplete\SynonymsService\Behavior\AutocompleteService
+   * @var AutocompleteService
    */
   protected $autocompleteService;
 
diff --git a/modules/synonyms_autocomplete/src/SynonymsService/Behavior/AutocompleteService.php b/modules/synonyms_autocomplete/src/SynonymsService/Behavior/AutocompleteService.php
index 7f983da..6a347b6 100644
--- a/modules/synonyms_autocomplete/src/SynonymsService/Behavior/AutocompleteService.php
+++ b/modules/synonyms_autocomplete/src/SynonymsService/Behavior/AutocompleteService.php
@@ -23,35 +23,35 @@ class AutocompleteService implements BehaviorInterface, WidgetInterface {
   /**
    * The key value.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   * @var KeyValueFactoryInterface
    */
   protected $keyValue;
 
   /**
    * The entity reference selection handler plugin manager.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface
+   * @var SelectionPluginManagerInterface
    */
   protected $selectionManager;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The synonyms provider service.
    *
-   * @var \Drupal\synonyms\SynonymsService\ProviderService
+   * @var ProviderService
    */
   protected $providerService;
 
diff --git a/modules/synonyms_search/src/SynonymsService/Behavior/SearchService.php b/modules/synonyms_search/src/SynonymsService/Behavior/SearchService.php
index 768046e..210e49e 100644
--- a/modules/synonyms_search/src/SynonymsService/Behavior/SearchService.php
+++ b/modules/synonyms_search/src/SynonymsService/Behavior/SearchService.php
@@ -27,35 +27,35 @@ class SearchService implements BehaviorInterface {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The synonyms provider service.
    *
-   * @var \Drupal\synonyms\SynonymsService\ProviderService
+   * @var ProviderService
    */
   protected $providerService;
 
@@ -127,7 +127,7 @@ class SearchService implements BehaviorInterface {
   /**
    * Mark all search index dependent on a given entity for reindexing.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity whose dependent search index should be marked for reindexing.
    */
   public function entityMarkForReindex(ContentEntityInterface $entity) {
diff --git a/modules/synonyms_search/synonyms_search.module b/modules/synonyms_search/synonyms_search.module
index 110b496..0232b93 100644
--- a/modules/synonyms_search/synonyms_search.module
+++ b/modules/synonyms_search/synonyms_search.module
@@ -59,7 +59,7 @@ function synonyms_search_synonym_delete(EntityInterface $entity) {
 /**
  * Mark all search index dependent on a given synonym config for reindexing.
  *
- * @param \Drupal\synonyms\SynonymInterface $synonym
+ * @param SynonymInterface $synonym
  *   Synonym config whose dependent search index should be marked
  *   for reindexing.
  */
diff --git a/modules/synonyms_select/src/SynonymsService/Behavior/SelectService.php b/modules/synonyms_select/src/SynonymsService/Behavior/SelectService.php
index f6c2328..f4c05b0 100644
--- a/modules/synonyms_select/src/SynonymsService/Behavior/SelectService.php
+++ b/modules/synonyms_select/src/SynonymsService/Behavior/SelectService.php
@@ -17,7 +17,7 @@ class SelectService implements BehaviorInterface, WidgetInterface {
   /**
    * The synonyms provider service.
    *
-   * @var \Drupal\synonyms\SynonymsService\ProviderService
+   * @var ProviderService
    */
   protected $providerService;
 
diff --git a/modules/synonyms_views_argument_validator/src/Plugin/Derivative/ViewsSynonymsEntityArgumentValidator.php b/modules/synonyms_views_argument_validator/src/Plugin/Derivative/ViewsSynonymsEntityArgumentValidator.php
index a3d7afd..5199023 100644
--- a/modules/synonyms_views_argument_validator/src/Plugin/Derivative/ViewsSynonymsEntityArgumentValidator.php
+++ b/modules/synonyms_views_argument_validator/src/Plugin/Derivative/ViewsSynonymsEntityArgumentValidator.php
@@ -27,7 +27,7 @@ class ViewsSynonymsEntityArgumentValidator extends DeriverBase implements Contai
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/modules/synonyms_views_filter/src/Plugin/views/filter/SynonymsEntity.php b/modules/synonyms_views_filter/src/Plugin/views/filter/SynonymsEntity.php
index 23cb672..7230edd 100644
--- a/modules/synonyms_views_filter/src/Plugin/views/filter/SynonymsEntity.php
+++ b/modules/synonyms_views_filter/src/Plugin/views/filter/SynonymsEntity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\synonyms_views_filter\Plugin\views\filter;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,21 +22,21 @@ class SynonymsEntity extends FilterPluginBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The synonyms behavior service.
    *
-   * @var \Drupal\synonyms\SynonymsService\BehaviorService
+   * @var BehaviorService
    */
   protected $behaviorService;
 
@@ -257,7 +258,7 @@ class SynonymsEntity extends FilterPluginBase {
   /**
    * Get entity storage of the entity type this filter is set up to use.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The return value
    */
   protected function getEntityStorage() {
diff --git a/src/Controller/SynonymConfigController.php b/src/Controller/SynonymConfigController.php
index b581425..e2ca011 100644
--- a/src/Controller/SynonymConfigController.php
+++ b/src/Controller/SynonymConfigController.php
@@ -20,32 +20,32 @@ class SynonymConfigController extends ControllerBase {
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The synonyms behavior service.
    *
-   * @var \Drupal\synonyms\SynonymsService\BehaviorService
+   * @var BehaviorService
    */
   protected $behaviorService;
 
   /**
    * The synonyms provider service.
    *
-   * @var \Drupal\synonyms\SynonymsService\ProviderService
+   * @var ProviderService
    */
   protected $providerService;
 
   /**
    * SynonymConfigController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\synonyms\SynonymsService\BehaviorService $behavior_service
+   * @param BehaviorService $behavior_service
    *   The behavior service.
-   * @param \Drupal\synonyms\SynonymsService\ProviderService $provider_service
+   * @param ProviderService $provider_service
    *   The provider service.
    */
   public function __construct(EntityTypeBundleInfoInterface $entity_type_bundle_info, BehaviorService $behavior_service, ProviderService $provider_service) {
diff --git a/src/Entity/Synonym.php b/src/Entity/Synonym.php
index b1e38eb..756efee 100644
--- a/src/Entity/Synonym.php
+++ b/src/Entity/Synonym.php
@@ -68,7 +68,7 @@ class Synonym extends ConfigEntityBase implements SynonymInterface {
   /**
    * The plugin collection that stores synonym provider plugins.
    *
-   * @var \Drupal\synonyms\ProviderPluginCollection
+   * @var ProviderPluginCollection
    */
   protected $pluginCollection;
 
@@ -125,7 +125,7 @@ class Synonym extends ConfigEntityBase implements SynonymInterface {
   /**
    * Gets the plugin collections used by this entity.
    *
-   * @return \Drupal\synonyms\ProviderPluginCollection
+   * @return ProviderPluginCollection
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
@@ -205,7 +205,7 @@ class Synonym extends ConfigEntityBase implements SynonymInterface {
   /**
    * Encapsulates the creation of entity's LazyPluginCollection.
    *
-   * @return \Drupal\synonyms\ProviderPluginCollection
+   * @return ProviderPluginCollection
    *   The entity's plugin collection.
    */
   protected function getPluginCollection() {
diff --git a/src/Form/BehaviorForm.php b/src/Form/BehaviorForm.php
index 7a5006b..867d8c8 100644
--- a/src/Form/BehaviorForm.php
+++ b/src/Form/BehaviorForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\synonyms\Form;
 
+use Drupal\synonyms\SynonymInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -22,35 +24,35 @@ class BehaviorForm extends ConfigFormBase {
   /**
    * The behavior configuration.
    *
-   * @var \Drupal\synonyms\SynonymInterface
+   * @var SynonymInterface
    */
   protected $config;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The behavior service.
    *
-   * @var \Drupal\synonyms\SynonymsService\BehaviorService
+   * @var BehaviorService
    */
   protected $behaviorService;
 
   /**
    * Entity type that is being managed.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
@@ -78,20 +80,20 @@ class BehaviorForm extends ConfigFormBase {
   /**
    * The container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
    * BehaviorForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\synonyms\SynonymsService\BehaviorService $behavior_service
+   * @param BehaviorService $behavior_service
    *   The behavior service.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, BehaviorService $behavior_service, ContainerInterface $container) {
diff --git a/src/Form/SynonymForm.php b/src/Form/SynonymForm.php
index 70ec81f..f5d3baf 100644
--- a/src/Form/SynonymForm.php
+++ b/src/Form/SynonymForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\synonyms\Form;
 
+use Drupal\synonyms\SynonymInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -19,35 +21,35 @@ class SynonymForm extends EntityForm {
   /**
    * The synonym entity.
    *
-   * @var \Drupal\synonyms\SynonymInterface
+   * @var SynonymInterface
    */
   protected $entity;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The synonyms provider plugin manager.
    *
-   * @var \Drupal\synonyms\ProviderPluginManager
+   * @var ProviderPluginManager
    */
   protected $synonymsProviderPluginManager;
 
   /**
    * Entity type that is being edited/added.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $controlledEntityType;
 
@@ -61,20 +63,20 @@ class SynonymForm extends EntityForm {
   /**
    * The container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
    * SynonymForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\synonyms\ProviderPluginManager $synonyms_provider_plugin_manager
+   * @param ProviderPluginManager $synonyms_provider_plugin_manager
    *   The synonyms provider plugin_manager.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, ProviderPluginManager $synonyms_provider_plugin_manager, ContainerInterface $container) {
@@ -247,10 +249,10 @@ class SynonymForm extends EntityForm {
    *   Name of the nested form element for which to create a sub form state.
    * @param array $form
    *   Full form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Full form state out of which to create sub form state.
    *
-   * @return \Drupal\Core\Form\SubformState
+   * @return SubformState
    *   Sub form state object generated based on the input arguments
    */
   protected function getSubFormState($element_name, array $form, FormStateInterface $form_state) {
diff --git a/src/ParamConverter/EntityTypeParamConverter.php b/src/ParamConverter/EntityTypeParamConverter.php
index 41e3915..6896ef9 100644
--- a/src/ParamConverter/EntityTypeParamConverter.php
+++ b/src/ParamConverter/EntityTypeParamConverter.php
@@ -14,7 +14,7 @@ class EntityTypeParamConverter implements ParamConverterInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/Derivative/EntityReferenceField.php b/src/Plugin/Derivative/EntityReferenceField.php
index f7db4f5..cef22f7 100644
--- a/src/Plugin/Derivative/EntityReferenceField.php
+++ b/src/Plugin/Derivative/EntityReferenceField.php
@@ -18,21 +18,21 @@ class EntityReferenceField extends DeriverBase implements ContainerDeriverInterf
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
diff --git a/src/Plugin/Derivative/Field.php b/src/Plugin/Derivative/Field.php
index 424f97f..29cf694 100644
--- a/src/Plugin/Derivative/Field.php
+++ b/src/Plugin/Derivative/Field.php
@@ -19,28 +19,28 @@ class Field extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The field type to synonyms.
    *
-   * @var \Drupal\synonyms\SynonymsService\FieldTypeToSynonyms
+   * @var FieldTypeToSynonyms
    */
   protected $fieldTypeToSynonyms;
 
diff --git a/src/Plugin/Synonyms/Provider/AbstractProvider.php b/src/Plugin/Synonyms/Provider/AbstractProvider.php
index 13f0a52..9fa4188 100644
--- a/src/Plugin/Synonyms/Provider/AbstractProvider.php
+++ b/src/Plugin/Synonyms/Provider/AbstractProvider.php
@@ -25,7 +25,7 @@ abstract class AbstractProvider extends PluginBase implements ProviderInterface,
   /**
    * The container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
diff --git a/src/Plugin/Synonyms/Provider/BaseField.php b/src/Plugin/Synonyms/Provider/BaseField.php
index 036703d..5bcae94 100644
--- a/src/Plugin/Synonyms/Provider/BaseField.php
+++ b/src/Plugin/Synonyms/Provider/BaseField.php
@@ -22,21 +22,21 @@ class BaseField extends AbstractProvider {
   /**
    * The field type to synonyms.
    *
-   * @var \Drupal\synonyms\SynonymsService\FieldTypeToSynonyms
+   * @var FieldTypeToSynonyms
    */
   protected $fieldTypeToSynonyms;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
diff --git a/src/Plugin/Synonyms/Provider/EntityReferenceField.php b/src/Plugin/Synonyms/Provider/EntityReferenceField.php
index 68fdc08..98c4d49 100644
--- a/src/Plugin/Synonyms/Provider/EntityReferenceField.php
+++ b/src/Plugin/Synonyms/Provider/EntityReferenceField.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\synonyms\Plugin\Synonyms\Provider;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\ConditionInterface;
@@ -27,21 +28,21 @@ class EntityReferenceField extends AbstractProvider implements DependentPluginIn
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -190,7 +191,7 @@ class EntityReferenceField extends AbstractProvider implements DependentPluginIn
   /**
    * Retrieve the field definition against which this plugin is configured.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   Field definition against which this plugin is configured.
    */
   protected function getFieldDefinition() {
diff --git a/src/Plugin/Synonyms/Provider/Field.php b/src/Plugin/Synonyms/Provider/Field.php
index 5941055..b395b14 100644
--- a/src/Plugin/Synonyms/Provider/Field.php
+++ b/src/Plugin/Synonyms/Provider/Field.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\synonyms\Plugin\Synonyms\Provider;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\ConditionInterface;
@@ -28,28 +30,28 @@ class Field extends AbstractProvider implements DependentPluginInterface {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The field type to synonyms.
    *
-   * @var \Drupal\synonyms\SynonymsService\FieldTypeToSynonyms
+   * @var FieldTypeToSynonyms
    */
   protected $fieldTypeToSynonyms;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -199,7 +201,7 @@ class Field extends AbstractProvider implements DependentPluginInterface {
   /**
    * Retrieve the field definition against which this plugin is configured.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   Field definition against which this plugin is configured.
    */
   protected function getFieldDefinition() {
@@ -217,7 +219,7 @@ class FieldQuery extends Query {
   /**
    * We need to be able to extract SQL query object.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   The return value
    */
   public function getSqlQuery() {
diff --git a/src/ProviderInterface/ConfigurationInterface.php b/src/ProviderInterface/ConfigurationInterface.php
index 8b24c62..aca1905 100644
--- a/src/ProviderInterface/ConfigurationInterface.php
+++ b/src/ProviderInterface/ConfigurationInterface.php
@@ -18,12 +18,12 @@ interface ConfigurationInterface extends ProviderInterface, ConfigurableInterfac
    *   Form into which your configuration form will be embedded. You are
    *   supposed to extend this array with additional configuration form elements
    *   that your provider needs.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object that corresponds to this form.
    * @param array $configuration
    *   Array of existing configuration for your provider. Normally you would use
    *   it as a source of default values for your configuration form elements.
-   * @param \Drupal\synonyms\SynonymInterface $synonym_config
+   * @param SynonymInterface $synonym_config
    *   Synonym config entity in the context of which the form is being built.
    *
    * @return array
@@ -38,10 +38,10 @@ interface ConfigurationInterface extends ProviderInterface, ConfigurableInterfac
    * @param array $form
    *   Your configuration form as it was built in
    *   static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state that corresponds to this form. You should rise form validation
    *   errors on this form state, should you discover any in user input.
-   * @param \Drupal\synonyms\SynonymInterface $synonym_config
+   * @param SynonymInterface $synonym_config
    *   Synonym config entity in the context of which the form is being built.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state, SynonymInterface $synonym_config);
@@ -52,9 +52,9 @@ interface ConfigurationInterface extends ProviderInterface, ConfigurableInterfac
    * @param array $form
    *   Your configuration form as it was built in
    *   static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state that corresponds to this form.
-   * @param \Drupal\synonyms\SynonymInterface $synonym_config
+   * @param SynonymInterface $synonym_config
    *   Synonym config entity in the context of which the form is being built.
    *
    * @return array
diff --git a/src/ProviderInterface/FindInterface.php b/src/ProviderInterface/FindInterface.php
index f47636c..627dfef 100644
--- a/src/ProviderInterface/FindInterface.php
+++ b/src/ProviderInterface/FindInterface.php
@@ -30,7 +30,7 @@ interface FindInterface {
    * column names in $condition for you, so you do not have to worry about
    * internal processing of $condition object.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   Condition to be processed.
    * @param string $synonym_column
    *   Actual name of the column where synonyms are kept in text.
@@ -47,7 +47,7 @@ interface FindInterface {
    * result: what entities are matched by the provided condition through what
    * synonyms.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   Condition that defines what to search for. Apart from normal SQL
    *   conditions as known in Drupal, it may contain the following placeholders:
    *   - FindInterface::COLUMN_SYNONYM_PLACEHOLDER: to denote
diff --git a/src/ProviderInterface/FindTrait.php b/src/ProviderInterface/FindTrait.php
index 51bd9ed..d408776 100644
--- a/src/ProviderInterface/FindTrait.php
+++ b/src/ProviderInterface/FindTrait.php
@@ -16,7 +16,7 @@ trait FindTrait {
    * column names in $condition for you, so you do not have to worry about
    * internal processing of $condition object.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   Condition to be processed.
    * @param string $synonym_column
    *   Actual name of the column where synonyms are kept in text.
@@ -50,7 +50,7 @@ trait FindTrait {
    * result: what entities are matched by the provided condition through what
    * synonyms.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   Condition that defines what to search for. Apart from normal SQL
    *   conditions as known in Drupal, it may contain the following placeholders:
    *   - FindInterface::COLUMN_SYNONYM_PLACEHOLDER: to denote
diff --git a/src/ProviderInterface/FormatWordingInterface.php b/src/ProviderInterface/FormatWordingInterface.php
index 2f0c86b..421a50d 100644
--- a/src/ProviderInterface/FormatWordingInterface.php
+++ b/src/ProviderInterface/FormatWordingInterface.php
@@ -15,9 +15,9 @@ interface FormatWordingInterface {
    *
    * @param string $synonym
    *   Synonym that should be formatted.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity to which this synonym belongs.
-   * @param \Drupal\synonyms\SynonymInterface $synonym_config
+   * @param SynonymInterface $synonym_config
    *   Synonym config entity in the context of which it all happens.
    * @param string $service_id
    *   The caller widget's service id.
diff --git a/src/ProviderInterface/GetInterface.php b/src/ProviderInterface/GetInterface.php
index 2dc9b14..4547940 100644
--- a/src/ProviderInterface/GetInterface.php
+++ b/src/ProviderInterface/GetInterface.php
@@ -12,7 +12,7 @@ interface GetInterface {
   /**
    * Fetch synonyms from an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity whose synonyms should be fetched.
    *
    * @return string[]
diff --git a/src/ProviderInterface/GetTrait.php b/src/ProviderInterface/GetTrait.php
index 02afb3b..da0fe2e 100644
--- a/src/ProviderInterface/GetTrait.php
+++ b/src/ProviderInterface/GetTrait.php
@@ -35,7 +35,7 @@ trait GetTrait {
   /**
    * Fetch synonyms from an entity.
    *
-   * @param Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity whose synonyms should be fetched.
    *
    * @return string[]
diff --git a/src/ProviderPluginCollection.php b/src/ProviderPluginCollection.php
index b1ff02e..f0b055f 100644
--- a/src/ProviderPluginCollection.php
+++ b/src/ProviderPluginCollection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\synonyms;
 
+use Drupal\synonyms\ProviderInterface\ProviderInterface;
 use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;
 
 /**
@@ -12,7 +13,7 @@ class ProviderPluginCollection extends DefaultSingleLazyPluginCollection {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\synonyms\ProviderInterface\ProviderInterface
+   * @return ProviderInterface
    *   The return value
    */
   public function &get($instance_id) {
diff --git a/src/SynonymInterface.php b/src/SynonymInterface.php
index b1c93ff..91ec5d9 100644
--- a/src/SynonymInterface.php
+++ b/src/SynonymInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\synonyms;
 
+use Drupal\synonyms\ProviderInterface\ProviderInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 
@@ -22,7 +23,7 @@ interface SynonymInterface extends ConfigEntityInterface, EntityWithPluginCollec
   /**
    * Get instance of the synonyms provider plugin that is set up in this entity.
    *
-   * @return \Drupal\synonyms\ProviderInterface\ProviderInterface
+   * @return ProviderInterface
    *   Initiated synonyms provider instance that corresponds to this
    *   configuration entity
    */
diff --git a/src/SynonymsService/BehaviorService.php b/src/SynonymsService/BehaviorService.php
index fe6d8d9..f5afaf4 100644
--- a/src/SynonymsService/BehaviorService.php
+++ b/src/SynonymsService/BehaviorService.php
@@ -46,7 +46,7 @@ class BehaviorService implements ContainerInjectionInterface {
   /**
    * Add a new discovered behavior service.
    *
-   * @param \Drupal\synonyms\BehaviorInterface\BehaviorInterface $behavior_service
+   * @param BehaviorInterface $behavior_service
    *   Behavior service object that was discovered and should be added into the
    *   list of known ones.
    * @param string $id
diff --git a/src/SynonymsService/FieldTypeToSynonyms.php b/src/SynonymsService/FieldTypeToSynonyms.php
index c48a48f..940c0bb 100644
--- a/src/SynonymsService/FieldTypeToSynonyms.php
+++ b/src/SynonymsService/FieldTypeToSynonyms.php
@@ -12,7 +12,7 @@ class FieldTypeToSynonyms {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
diff --git a/src/SynonymsService/ProviderService.php b/src/SynonymsService/ProviderService.php
index 4d3ee18..d6bc9d3 100644
--- a/src/SynonymsService/ProviderService.php
+++ b/src/SynonymsService/ProviderService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\synonyms\SynonymsService;
 
+use Drupal\synonyms\Entity\Synonym;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -18,14 +19,14 @@ class ProviderService {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -50,7 +51,7 @@ class ProviderService {
   /**
    * Retrieve a list of entity synonyms.
    *
-   * @param Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity for which to conduct the search.
    *
    * @return string[]
@@ -75,7 +76,7 @@ class ProviderService {
    *   Single bundle or an array of them for which to conduct the search. If
    *   null is given, then no restrictions are applied on bundle level.
    *
-   * @return \Drupal\synonyms\Entity\Synonym[]
+   * @return Synonym[]
    *   The array of enabled synonym providers
    */
   public function getSynonymConfigEntities($entity_type, $bundle) {
@@ -99,9 +100,9 @@ class ProviderService {
   /**
    * Lookup entity IDs by the $condition.
    *
-   * @param \Drupal\Core\Database\Query\Condition $condition
+   * @param Condition $condition
    *   Condition which defines what to search for.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   Entity type within which to search.
    * @param string|array $bundle
    *   Either single bundle string or array of such within which to search. NULL
@@ -136,7 +137,7 @@ class ProviderService {
   /**
    * Try finding entities by their name or synonym.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   What entity type is being searched.
    * @param string $name
    *   The look up keyword (the supposed name or synonym).
