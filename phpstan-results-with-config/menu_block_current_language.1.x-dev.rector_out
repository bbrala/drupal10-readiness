modules/contrib/menu_block_current_language/menu_block_current_language.module
modules/contrib/menu_block_current_language/src/Event/Events.php
modules/contrib/menu_block_current_language/src/Event/HasTranslationEvent.php
modules/contrib/menu_block_current_language/src/MenuLinkTranslatableInterface.php
modules/contrib/menu_block_current_language/src/MenuLinkTreeManipulator.php
modules/contrib/menu_block_current_language/src/Plugin/Block/MenuBlockCurrentLanguage.php
modules/contrib/menu_block_current_language/tests/src/Functional/MenuBlockCurrentLanguageTest.php

4 files with changes
====================

1) modules/contrib/menu_block_current_language/tests/src/Functional/MenuBlockCurrentLanguageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\menu_block_current_language\Functional;

+use Drupal\user\UserInterface;
+use Drupal\block\Entity\Block;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Config\StorageInterface;
+use Drupal\locale\StringDatabaseStorage;
+use Drupal\locale\TranslationString;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\menu_link_content\Entity\MenuLinkContent;
 use Drupal\Tests\content_translation\Functional\ContentTranslationTestBase;
@@ @@
   /**
    * A user with permission to access admin pages and administer languages.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * A non-administrator user for this test.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $regularUser;

@@ @@
   /**
    * The menu block.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $menuBlock;

@@ @@
    * @param array $overrides
    *   The overrides.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The menu link.
    */
   protected function createTestLink($langcode, $title, array $overrides = []) {
@@ @@
     $this->drupalGet('test-view', ['query' => ['language' => 'fr']]);
     $this->assertSession()->linkExists('Test menu link');

-    /** @var \Drupal\Core\Config\StorageInterface $sync */
+    /** @var StorageInterface $sync */
     $sync = \Drupal::service('config.storage.sync');
     $this->copyConfig(\Drupal::service('config.storage'), $sync);
     $override_sync = $sync->createCollection('language.fr');
@@ @@
     $this->drupalGet('test-view', ['query' => ['language' => 'fr']]);
     $this->assertSession()->linkNotExists('Home');

-    /** @var \Drupal\locale\StringDatabaseStorage $locale_storage */
+    /** @var StringDatabaseStorage $locale_storage */
     $locale_storage = $this->container->get('locale.storage');
     $translations = $locale_storage->getTranslations([], [
       'filters' => ['source' => 'Home'],
     ]);

-    /** @var \Drupal\locale\TranslationString $translation */
+    /** @var TranslationString $translation */
     foreach ($translations as $translation) {
       if ($translation->source !== 'Home') {
         continue;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/menu_block_current_language/src/Plugin/Block/MenuBlockCurrentLanguage.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The menu active trail.
    *
-   * @var \Drupal\Core\Menu\MenuActiveTrailInterface
+   * @var MenuActiveTrailInterface
    */
   protected $menuActiveTrail;

@@ @@
   /**
    * Sets the menu active trail.
    *
-   * @param \Drupal\Core\Menu\MenuActiveTrailInterface $activeTrail
+   * @param MenuActiveTrailInterface $activeTrail
    *   The active menu trail.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/menu_block_current_language/src/MenuLinkTreeManipulator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\menu_block_current_language;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\locale\TranslationString;
+use Drupal\Core\Menu\MenuLinkTreeElement;
+use Drupal\language\Config\LanguageConfigOverride;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The locale storage.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $localeStorage;

@@ @@
   /**
    * MenuLinkTreeManipulator constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\locale\StringStorageInterface $locale_storage
+   * @param StringStorageInterface $locale_storage
    *   The locale storage.
    */
   public function __construct(LanguageManagerInterface $language_manager, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, EventDispatcherInterface $event_dispatcher, StringStorageInterface $locale_storage) {
@@ @@
   /**
    * Load entity with given menu link.
    *
-   * @param \Drupal\menu_link_content\Plugin\Menu\MenuLinkContent $link
+   * @param MenuLinkContent $link
    *   The menu link.
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface|null
+   * @return bool|EntityInterface|null
    *   Boolean if menu link has no metadata. NULL if entity not found and
    *   an EntityInterface if found.
    */
@@ @@
   /**
    * Check if given string has a string translation.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $markup
+   * @param TranslatableMarkup $markup
    *   The markup.
    *
    * @return bool
@@ @@
     $translations = $this->localeStorage->getTranslations($conditions, [
       'filters' => ['source' => $markup->getUntranslatedString()],
     ]);
-    /** @var \Drupal\locale\TranslationString $translation */
+    /** @var TranslationString $translation */
     foreach ($translations as $translation) {
       // No translation found / original string found.
       if ($translation->isNew()) {
@@ @@
   /**
    * Filter out links that are not translated to the current language.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeElement[] $tree
+   * @param MenuLinkTreeElement[] $tree
    *   The menu link tree to manipulate.
    * @param array $providers
    *   The menu block translatable link types.
    *
-   * @return \Drupal\Core\Menu\MenuLinkTreeElement[]
+   * @return MenuLinkTreeElement[]
    *   The manipulated menu link tree.
    */
   public function filterLanguages(array $tree, array $providers = []) {
@@ @@
       if (isset($providers[$provider]) && empty($providers[$provider])) {
         continue;
       }
-      /** @var \Drupal\menu_block_current_language\Event\HasTranslationEvent $event */
+      /** @var HasTranslationEvent $event */
       // Allow other modules to determine visibility as well.
-      $event = $this->eventDispatcher->dispatch(Events::HAS_TRANSLATION, new HasTranslationEvent($link, TRUE));
+      $event = $this->eventDispatcher->dispatch(new HasTranslationEvent($link, TRUE), Events::HAS_TRANSLATION);

       // This only works with translated menu links.
       if ($link instanceof MenuLinkContent && $entity = $this->getEntity($link)) {
@@ @@
       }
       // String translated menu links.
       elseif ($link->getPluginDefinition()['title'] instanceof TranslatableMarkup) {
-        /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $markup */
+        /** @var TranslatableMarkup $markup */
         $markup = $link->getPluginDefinition()['title'];

         if (!$this->hasStringTranslation($markup)) {
@@ @@
         if ($current_language === $original) {
           continue;
         }
-        /** @var \Drupal\language\Config\LanguageConfigOverride $config */
+        /** @var LanguageConfigOverride $config */
         $config = $this->languageManager->getLanguageConfigOverride($current_language, $view_id);
         // Configuration override will be marked as new if one does not
         // exist for the current language (thus has no translation).
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


4) modules/contrib/menu_block_current_language/src/Event/HasTranslationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\menu_block_current_language\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Menu\MenuLinkInterface;

 /**
@@ @@
   /**
    * The menu link.
    *
-   * @var \Drupal\Core\Menu\MenuLinkInterface
+   * @var MenuLinkInterface
    */
   protected $link;

@@ @@
   /**
    * HasTranslationEvent constructor.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $link
+   * @param MenuLinkInterface $link
    *   The menu link.
    * @param bool $status
    *   The visibility.
@@ @@
   /**
    * Gets the menu link.
    *
-   * @return \Drupal\Core\Menu\MenuLinkInterface
+   * @return MenuLinkInterface
    *   The menu link.
    */
   public function getLink() {
@@ @@
   /**
    * Sets the menu link.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $menu_link
+   * @param MenuLinkInterface $menu_link
    *   The menu link.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 4 files have been changed by Rector                                       

