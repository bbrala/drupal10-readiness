modules/contrib/json_field/json_field.install
modules/contrib/json_field/json_field.module
modules/contrib/json_field/json_field.views.inc
modules/contrib/json_field/modules/json_field_widget/src/Plugin/Field/FieldWidget/JsonEditorWidget.php
modules/contrib/json_field/src/Element/JSONText.php
modules/contrib/json_field/src/JSONViews.php
modules/contrib/json_field/src/JSONViewsInterface.php
modules/contrib/json_field/src/JsonFieldRequirements.php
modules/contrib/json_field/src/JsonFieldRequirementsInterface.php
modules/contrib/json_field/src/JsonMarkup.php
modules/contrib/json_field/src/Plugin/Field/FieldFormatter/JSONFormatter.php
modules/contrib/json_field/src/Plugin/Field/FieldType/JSONItem.php
modules/contrib/json_field/src/Plugin/Field/FieldType/NativeBinaryJSONItem.php
modules/contrib/json_field/src/Plugin/Field/FieldType/NativeJSONItem.php
modules/contrib/json_field/src/Plugin/Field/FieldWidget/JSONTextareaWidget.php
modules/contrib/json_field/src/Plugin/Validation/Constraint/ValidJSONConstraint.php
modules/contrib/json_field/src/Plugin/Validation/Constraint/ValidJSONConstraintValidator.php
modules/contrib/json_field/src/Plugin/views/field/JSONDataField.php
modules/contrib/json_field/tests/src/Kernel/JSONTextareaWidgetTest.php
modules/contrib/json_field/tests/src/Kernel/JsonFormatterTest.php
modules/contrib/json_field/tests/src/Kernel/JsonItemTest.php
modules/contrib/json_field/tests/src/Kernel/KernelTestBase.php

8 files with changes
====================

1) modules/contrib/json_field/tests/src/Kernel/KernelTestBase.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     FileCacheFactory::setPrefix(Settings::getApcuPrefix('file_cache', $this->root));
     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/json_field/tests/src/Kernel/JsonItemTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\json_field\Kernel;

+use Symfony\Component\Validator\ConstraintViolation;
 use Drupal\Core\Database\Connection;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\Core\Validation\Plugin\Validation\Constraint\LengthConstraint;
@@ @@

     $constraint_list = $entity->validate()->getByField('test_json_field');
     $this->assertEquals(1, $constraint_list->count());
-    /** @var \Symfony\Component\Validator\ConstraintViolation $violation */
+    /** @var ConstraintViolation $violation */
     $violation = $constraint_list->get(0);
     $this->assertTrue($violation->getConstraint() instanceof LengthConstraint);
   }
@@ @@
   /**
    * Adds primary key, unique keys, and index information to the schema.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    * @param string $table
    *   The table to find indexes for.
@@ @@
   /**
    * Set the table collation.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    * @param string $table
    *   The table to find indexes for.
@@ @@
    *
    * If a table is set to be schema only, and empty array is returned.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    * @param string $table
    *   The table to query.
@@ @@
   /**
    * Given a database field type, return a Drupal type.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    * @param string $type
    *   The MySQL field type.
@@ @@
   /**
    * Given a database field type, return a Drupal size.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    * @param string $type
    *   The MySQL field type.
@@ @@
   /**
    * Gets field ordering for a given table.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    * @param string $table
    *   The table name.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/json_field/tests/src/Kernel/JSONTextareaWidgetTest.php:12

    ---------- begin diff ----------
@@ @@

   /**
    * Tests that we can save form settings without error.
+   * @doesNotPerformAssertions
    */
   public function testWidgetSettings() {
     $this->createTestField();
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/json_field/src/Plugin/views/field/JSONDataField.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The serializer which serializes the views result.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/json_field/src/Plugin/Validation/Constraint/ValidJSONConstraintValidator.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The serializer which serializes the views result.
    *
-   * @var \Symfony\Component\Serializer\Encoder\DecoderInterface
+   * @var DecoderInterface
    */
   protected $serializer;

@@ @@
   /**
    * Constructs a ValidJSONConstraintValidator object.
    *
-   * @param \Symfony\Component\Serializer\Encoder\DecoderInterface $serializer
+   * @param DecoderInterface $serializer
    */
   public function __construct(DecoderInterface $serializer) {
     $this->serializer = $serializer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/json_field/src/JsonFieldRequirementsInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\json_field;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * Defines Json Field Library interface.
  */
@@ @@
   /**
    * Get the warning message.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The warning message.
    */
   public function getLibraryWarningMessage();
@@ @@
   /**
    * Get the database warning message.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The warning message.
    */
   public function getDatabaseWarningMessage();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/json_field/src/JSONViewsInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the views data for a field instance.
    *
-   * @param \Drupal\field\FieldStorageConfigInterface $field_storage
+   * @param FieldStorageConfigInterface $field_storage
    *
    * @return array
    *   The JSON field views data.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/json_field/modules/json_field_widget/src/Plugin/Field/FieldWidget/JsonEditorWidget.php:163

    ---------- begin diff ----------
@@ @@
    * Check the submitted JSON against the configured JSON Schema.
    *
    * @param $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public static function validateJsonData($element, FormStateInterface $form_state) {
     $hash = $element['#attributes']['data-json-editor'];
@@ @@
    * Ensure the JSON schema is itself valid and supported by the PHP library.
    *
    * @param $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public static function validateJsonSchema($element, FormStateInterface $form_state) {
     try {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 8 files have been changed by Rector                                       

