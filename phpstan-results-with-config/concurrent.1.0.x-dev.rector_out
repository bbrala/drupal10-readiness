modules/contrib/concurrent/concurrent_queue/concurrent_queue.install
modules/contrib/concurrent/concurrent_queue/concurrent_queue.module
modules/contrib/concurrent/concurrent_queue/queue-worker.php
modules/contrib/concurrent/concurrent_queue/src/Commands/ConcurrentQueueCommands.php
modules/contrib/concurrent/concurrent_queue/src/EventSubscriber/ConcurrentQueueSubscriber.php
modules/contrib/concurrent/concurrent_queue_test/concurrent_queue_test.install
modules/contrib/concurrent/concurrent_queue_test/concurrent_queue_test.module
modules/contrib/concurrent/concurrent_queue_test/src/Commands/ConcurrentQueueTestCommands.php
modules/contrib/concurrent/concurrent_queue_test/src/Plugin/QueueWorker/SwapiCharactersWorker.php

5 files with changes
====================

1) modules/contrib/concurrent/concurrent_queue_test/src/Plugin/QueueWorker/SwapiCharactersWorker.php:20

    ---------- begin diff ----------
@@ @@
 class SwapiCharactersWorker extends QueueWorkerBase implements ContainerFactoryPluginInterface{

   /**
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $client;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ClientInterface $client, EntityTypeManagerInterface $entityTypeManager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/concurrent/concurrent_queue_test/src/Commands/ConcurrentQueueTestCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\concurrent_queue_test\Commands;

+use Drupal\Core\Queue\QueueInterface;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Queue\QueueFactory;
@@ @@
   /**
    * The Queue instance for characters.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $charactersQueue;

@@ @@
   /**
    * The Queue instance for characters.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
    * @aliases token
    *
    * @filter-default-field name
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    */
   public function token($options = ['format' => 'table']) {
     $all = \Drupal::token()->getInfo();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/concurrent/concurrent_queue/src/EventSubscriber/ConcurrentQueueSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\concurrent_queue\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Messenger\MessengerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs event subscriber.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(MessengerInterface $messenger) {
@@ @@
   /**
    * Kernel request event handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   Response event.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
   }

   /**
    * Kernel response event handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   Response event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(ResponseEvent $event) {
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/concurrent/concurrent_queue/src/Commands/ConcurrentQueueCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\concurrent_queue\Commands;

+use React\Socket\ServerInterface;
+use Drupal\Core\Queue\QueueInterface;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Queue\QueueWorkerManagerInterface;
@@ @@
 class ConcurrentQueueCommands extends DrushCommands {

   /**
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueService;

@@ @@
   protected $loop;

   /**
-   * @var \React\Socket\ServerInterface
+   * @var ServerInterface
    */
   protected $socket;

   /**
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * ConcurrentQueueCommands constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queueService
+   * @param QueueFactory $queueService
    */
   public function __construct(QueueFactory $queueService)
   {
@@ @@
    */
   public function spawnWorker() {
     $moduleDir = \Drupal::service('file_system')->realpath(
-      drupal_get_path('module', 'concurrent_queue')
+      \Drupal::service('extension.list.module')->getPath('concurrent_queue')
     );
     $projectDir = dirname(DRUPAL_ROOT);
     $bin = 'php -d memory_limit=2G ';
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/concurrent/concurrent_queue/queue-worker.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use React\EventLoop\Factory;
+use React\Socket\TcpConnector;
+use React\Socket\ConnectionInterface;
 $memory_limit = 512 * 1024 * 1024 * 0.95;

-$loop = React\EventLoop\Factory::create();
-$tcpConnector = new React\Socket\TcpConnector($loop);
+$loop = Factory::create();
+$tcpConnector = new TcpConnector($loop);
 $workerManager = \Drupal::service('plugin.manager.queue_worker');
-$tcpConnector->connect('127.0.0.1:30001')->then(function (React\Socket\ConnectionInterface $connection) use ($loop, $workerManager, $memory_limit) {
+$tcpConnector->connect('127.0.0.1:30001')->then(function (ConnectionInterface $connection) use ($loop, $workerManager, $memory_limit) {
   $connection->write('r');
   $connection->on('data', function ($data) use ($connection, $loop, $memory_limit, $workerManager) {
     $info = unserialize($data);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

