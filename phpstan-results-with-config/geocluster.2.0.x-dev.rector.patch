diff --git a/geocluster.module b/geocluster.module
index f228c19..c87cff4 100644
--- a/geocluster.module
+++ b/geocluster.module
@@ -24,10 +24,10 @@ function geocluster_field_info_alter(&$info) {
 /**
  * Initializes a geocluster config with a provided backend.
  *
- * @param \Drupal\geocluster\GeoclusterConfigBackendInterface $config_backend
+ * @param GeoclusterConfigBackendInterface $config_backend
  *   The provided GeoclusterConfigBackendInterface object.
  *
- * @return \Drupal\geocluster\GeoclusterConfig
+ * @return GeoclusterConfig
  *   A GeoclusterConfig fully initialized with its backend
  */
 function geocluster_init_config(GeoclusterConfigBackendInterface $config_backend) {
@@ -38,7 +38,7 @@ function geocluster_init_config(GeoclusterConfigBackendInterface $config_backend
 /**
  * Initializes the geocluster algorithm.
  *
- * @param \Drupal\geocluster\GeoclusterConfigBackendInterface $config_backend
+ * @param GeoclusterConfigBackendInterface $config_backend
  *   The GeoclusterConfigBackendInterface object.
  *
  * @return GeoclusterAlgorithm|null
@@ -117,7 +117,7 @@ function geocluster_init_algorithm(GeoclusterConfigBackendInterface $config_back
 /**
  * Retrieves the geocluster algorithm from a given view.
  *
- * @param Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  *   The Drupal view object.
  *
  * @return GeoclusterAlgorithm|null
diff --git a/src/Annotation/GeoclusterAlgorithm.php b/src/Annotation/GeoclusterAlgorithm.php
index 561eabf..87d5f8f 100644
--- a/src/Annotation/GeoclusterAlgorithm.php
+++ b/src/Annotation/GeoclusterAlgorithm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geocluster\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class GeoclusterAlgorithm extends Plugin {
   /**
    * The administrative label of the geofield backend.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/InstallBatch.php b/src/Controller/InstallBatch.php
index ee719dd..50662ca 100644
--- a/src/Controller/InstallBatch.php
+++ b/src/Controller/InstallBatch.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\geocluster\Controller;
 
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -16,32 +18,32 @@ class InstallBatch extends ControllerBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Construct the InstallBatch object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity_field_manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, Connection $connection) {
@@ -87,10 +89,10 @@ class InstallBatch extends ControllerBase {
       $entityStorage = $this->entityTypeManager->getStorage($entityTypeId);
       $entityType = $this->entityTypeManager->getDefinition($entityTypeId);
       $fieldStorageDefinitions = $this->entityFieldManager->getFieldStorageDefinitions($entityTypeId);
-      /** @var Drupal\Core\Entity\Sql\DefaultTableMapping $tableMapping */
+      /** @var DefaultTableMapping $tableMapping */
       $tableMapping = $entityStorage->getTableMapping($fieldStorageDefinitions);
       // Only need field storage definitions of address fields.
-      /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $fieldStorageDefinition */
+      /** @var FieldStorageDefinitionInterface $fieldStorageDefinition */
       foreach (array_intersect_key($fieldStorageDefinitions, $fieldMap) as $fieldStorageDefinition) {
         $fieldName = $fieldStorageDefinition->getName();
         $tables = [];
@@ -343,7 +345,7 @@ class InstallBatch extends ControllerBase {
     $entityType = $this->entityTypeManager->getDefinition($entityTypeId);
     $fieldStorageDefinition = $entityUpdateManager->getFieldStorageDefinition($fieldName, $entityTypeId);
     $entityStorage = $this->entityTypeManager()->getStorage($entityTypeId);
-    /** @var Drupal\Core\Entity\Sql\DefaultTableMapping $tableMapping */
+    /** @var DefaultTableMapping $tableMapping */
     $tableMapping = $entityStorage->getTableMapping([$fieldName => $fieldStorageDefinition]);
 
     // Load the installed field schema so that it can be updated.
diff --git a/src/GeoclusterConfig.php b/src/GeoclusterConfig.php
index a0d31fd..a17c236 100644
--- a/src/GeoclusterConfig.php
+++ b/src/GeoclusterConfig.php
@@ -23,7 +23,7 @@ class GeoclusterConfig implements GeoclusterConfigBackendInterface {
   /**
    * Storing the backend configuration object.
    *
-   * @var \Drupal\geocluster\GeoclusterConfigBackendInterface
+   * @var GeoclusterConfigBackendInterface
    */
   public $configBackend;
 
diff --git a/src/Plugin/GeoclusterAlgorithmManager.php b/src/Plugin/GeoclusterAlgorithmManager.php
index f3f5236..026d60c 100644
--- a/src/Plugin/GeoclusterAlgorithmManager.php
+++ b/src/Plugin/GeoclusterAlgorithmManager.php
@@ -19,9 +19,9 @@ class GeoclusterAlgorithmManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
