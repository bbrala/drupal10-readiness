modules/contrib/enforce_user_fields/enforce_user_fields.install
modules/contrib/enforce_user_fields/enforce_user_fields.module
modules/contrib/enforce_user_fields/src/EventSubscriber/EnforceUserFieldsSubscriber.php
modules/contrib/enforce_user_fields/src/Form/SettingsForm.php

3 files with changes
====================

1) modules/contrib/enforce_user_fields/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\enforce_user_fields\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('enforce_user_fields.settings');
     $form['message'] = [
       '#type' => 'textfield',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/enforce_user_fields/src/EventSubscriber/EnforceUserFieldsSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\enforce_user_fields\EventSubscriber;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Path\PathMatcherInterface;
@@ @@
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\RequestStack;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The enforce user fields settings config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $globalConfig;

@@ @@
   /**
    * EnforceUserFieldsSubscriber constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(AccountProxyInterface $current_user, RouteMatchInterface $route_match, PathMatcherInterface $path_matcher, RequestStack $request_stack, MessengerInterface $messenger, ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Check that user have filled all required fields.
    */
-  public function checkForUserFields(GetResponseEvent $event) {
+  public function checkForUserFields(RequestEvent $event) {
     $route_name = $this->routeMatch->getRouteName();
     $skip_route = in_array($route_name, [
       'entity.user.edit_form',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/enforce_user_fields/enforce_user_fields.module:53

    ---------- begin diff ----------
@@ @@
 /**
  * Checks, if the given user has admin rights.
  *
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The account to check.
  *
  * @return bool
@@ @@
 }

 /**
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  * @return bool
  */
 function enforce_user_fields_have_unfilled_required_fields(AccountInterface $account){
@@ @@
 /**
  * Submit user form callback
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param $form_id
  */
 function enforce_user_fields_form_user_form_submit(&$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

