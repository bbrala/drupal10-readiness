diff --git a/cas.module b/cas.module
index 174a38c..923bbe9 100644
--- a/cas.module
+++ b/cas.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\cas\Service\CasUserManager;
+use Drupal\filter\FilterPluginManager;
 /**
  * @file
  * Provides CAS authentication for Drupal.
@@ -111,7 +113,7 @@ function _cas_validate_user_pass_form(array &$form, FormStateInterface $form_sta
   // @see \Drupal\user\Form\UserPasswordForm::validateForm()
   $account = $form_state->getValue('account');
   if ($account) {
-    /** @var \Drupal\cas\Service\CasUserManager $cas_user_manager */
+    /** @var CasUserManager $cas_user_manager */
     $cas_user_manager = \Drupal::service('cas.user_manager');
     // Check if this user account is associated with CAS and set an error if so.
     if ($cas_user_manager->getCasUsernameForAccount($account->id())) {
@@ -160,7 +162,7 @@ function _cas_add_cas_username_to_user_form(array &$form) {
  *
  * @param array $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  */
 function _cas_user_form_validate(array &$form, FormStateInterface $form_state) {
@@ -195,7 +197,7 @@ function _cas_user_form_validate(array &$form, FormStateInterface $form_state) {
  *
  * @param array $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  */
 function _cas_user_form_submit(array $form, FormStateInterface $form_state) {
@@ -292,7 +294,7 @@ function cas_help($route_name, RouteMatchInterface $route_match) {
       }
       else {
         // Use the Markdown filter to render the README.
-        /** @var \Drupal\filter\FilterPluginManager $filter_manager */
+        /** @var FilterPluginManager $filter_manager */
         $filter_manager = \Drupal::service('plugin.manager.filter');
         $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
         $config = ['settings' => $settings];
diff --git a/src/Access/CasUserAccessCheck.php b/src/Access/CasUserAccessCheck.php
index 12bf2fc..a81c041 100644
--- a/src/Access/CasUserAccessCheck.php
+++ b/src/Access/CasUserAccessCheck.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\cas\Access;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\cas\Service\CasUserManager;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -16,23 +18,23 @@ class CasUserAccessCheck implements AccessInterface {
   /**
    * The CAS settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;
 
   /**
    * The CAS user manager service.
    *
-   * @var \Drupal\cas\Service\CasUserManager
+   * @var CasUserManager
    */
   protected $casUserManager;
 
   /**
    * Constructs a new access checker instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory service.
-   * @param \Drupal\cas\Service\CasUserManager $cas_user_manager
+   * @param CasUserManager $cas_user_manager
    *   The CAS user manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, CasUserManager $cas_user_manager) {
@@ -46,10 +48,10 @@ class CasUserAccessCheck implements AccessInterface {
    * If the current user account is linked to a CAS account and the setting
    * 'restrict_password_management' is TRUE, deny the access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result object.
    */
   public function access(AccountInterface $account) {
diff --git a/src/CasServerConfig.php b/src/CasServerConfig.php
index ff3f654..9c54427 100644
--- a/src/CasServerConfig.php
+++ b/src/CasServerConfig.php
@@ -74,7 +74,7 @@ class CasServerConfig {
   /**
    * Initialize an object from the CAS module config.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The config object for the CAS module.
    *
    * @return \Drupal\cas\CasServerConfig
diff --git a/src/Controller/ForceLoginController.php b/src/Controller/ForceLoginController.php
index ee52e2a..4f97b5c 100644
--- a/src/Controller/ForceLoginController.php
+++ b/src/Controller/ForceLoginController.php
@@ -18,23 +18,23 @@ class ForceLoginController implements ContainerInjectionInterface {
   /**
    * The cas helper to get config settings from.
    *
-   * @var \Drupal\cas\Service\CasRedirector
+   * @var CasRedirector
    */
   protected $casRedirector;
 
   /**
    * Used to get query string parameters from the request.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\cas\Service\CasRedirector $cas_redirector
+   * @param CasRedirector $cas_redirector
    *   The CAS Redirector service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   Symfony request stack.
    */
   public function __construct(CasRedirector $cas_redirector, RequestStack $request_stack) {
diff --git a/src/Controller/LogoutController.php b/src/Controller/LogoutController.php
index 1b52aad..064c9b8 100644
--- a/src/Controller/LogoutController.php
+++ b/src/Controller/LogoutController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cas\Controller;
 
+use Drupal\Core\Config\Config;
 use Drupal\cas\CasRedirectResponse;
 use Drupal\cas\CasServerConfig;
 use Drupal\Component\Utility\UrlHelper;
@@ -24,41 +25,41 @@ class LogoutController implements ContainerInjectionInterface {
   /**
    * The cas helper used to get settings from.
    *
-   * @var \Drupal\cas\Service\CasHelper
+   * @var CasHelper
    */
   protected $casHelper;
 
   /**
    * The request stack to get the request object from.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Stores settings object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $settings;
 
   /**
    * Stores the URL generator.
    *
-   * @var \Symfony\Component\Routing\Generator\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\cas\Service\CasHelper $cas_helper
+   * @param CasHelper $cas_helper
    *   The CasHelper to get the logout Url from.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The current request stack, to provide context.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Symfony\Component\Routing\Generator\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL generator.
    */
   public function __construct(CasHelper $cas_helper, RequestStack $request_stack, ConfigFactoryInterface $config_factory, UrlGeneratorInterface $url_generator) {
@@ -96,7 +97,7 @@ class LogoutController implements ContainerInjectionInterface {
   /**
    * Return the logout URL for the CAS server.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request, to provide base url context.
    *
    * @return string
diff --git a/src/Controller/ProxyCallbackController.php b/src/Controller/ProxyCallbackController.php
index a4d44a9..0156845 100644
--- a/src/Controller/ProxyCallbackController.php
+++ b/src/Controller/ProxyCallbackController.php
@@ -18,32 +18,32 @@ class ProxyCallbackController implements ContainerInjectionInterface {
   /**
    * Used when inserting the CAS PGT into the database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Used to get params from the current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Used for logging.
    *
-   * @var \Drupal\cas\Service\CasHelper
+   * @var CasHelper
    */
   protected $casHelper;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database_connection
+   * @param Connection $database_connection
    *   The database service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The Symfony request stack.
-   * @param \Drupal\cas\Service\CasHelper $cas_helper
+   * @param CasHelper $cas_helper
    *   The CasHelper.
    */
   public function __construct(Connection $database_connection, RequestStack $request_stack, CasHelper $cas_helper) {
diff --git a/src/Controller/ServiceController.php b/src/Controller/ServiceController.php
index 9346931..00e9503 100644
--- a/src/Controller/ServiceController.php
+++ b/src/Controller/ServiceController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\cas\Controller;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\cas\Event\CasPreUserLoadEvent;
 use Drupal\cas\Event\CasPreUserLoadRedirectEvent;
 use Drupal\cas\Exception\CasLoginException;
@@ -36,95 +38,95 @@ class ServiceController implements ContainerInjectionInterface {
   /**
    * CAS Helper.
    *
-   * @var \Drupal\cas\Service\CasHelper
+   * @var CasHelper
    */
   protected $casHelper;
 
   /**
    * Used to validate CAS service tickets.
    *
-   * @var \Drupal\cas\Service\CasValidator
+   * @var CasValidator
    */
   protected $casValidator;
 
   /**
    * Used to log a user in after they've been validated.
    *
-   * @var \Drupal\cas\Service\CasUserManager
+   * @var CasUserManager
    */
   protected $casUserManager;
 
   /**
    * Used to log a user out due to a single log out request.
    *
-   * @var \Drupal\cas\Service\CasLogout
+   * @var CasLogout
    */
   protected $casLogout;
 
   /**
    * Used to retrieve request parameters.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Used to generate redirect URLs.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Stores settings object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $settings;
 
   /**
    * Stores a Messenger object.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The external auth service.
    *
-   * @var \Drupal\externalauth\ExternalAuthInterface
+   * @var ExternalAuthInterface
    */
   protected $externalAuth;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\cas\Service\CasHelper $cas_helper
+   * @param CasHelper $cas_helper
    *   The CAS Helper service.
-   * @param \Drupal\cas\Service\CasValidator $cas_validator
+   * @param CasValidator $cas_validator
    *   The CAS Validator service.
-   * @param \Drupal\cas\Service\CasUserManager $cas_user_manager
+   * @param CasUserManager $cas_user_manager
    *   The CAS User Manager service.
-   * @param \Drupal\cas\Service\CasLogout $cas_logout
+   * @param CasLogout $cas_logout
    *   The CAS Logout service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL generator.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\externalauth\ExternalAuthInterface $external_auth
+   * @param ExternalAuthInterface $external_auth
    *   The external auth service.
    */
   public function __construct(CasHelper $cas_helper, CasValidator $cas_validator, CasUserManager $cas_user_manager, CasLogout $cas_logout, RequestStack $request_stack, UrlGeneratorInterface $url_generator, ConfigFactoryInterface $config_factory, MessengerInterface $messenger, EventDispatcherInterface $event_dispatcher, ExternalAuthInterface $external_auth) {
@@ -243,7 +245,7 @@ class ServiceController implements ContainerInjectionInterface {
     // Dispatch an event that allows modules to alter any of the CAS data before
     // it's used to lookup a Drupal user account via the authmap table.
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_USER_LOAD.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_USER_LOAD, new CasPreUserLoadEvent($cas_validation_info));
+    $this->eventDispatcher->dispatch(new CasPreUserLoadEvent($cas_validation_info), CasHelper::EVENT_PRE_USER_LOAD);
 
     if ($cas_validation_info->getUsername() !== $cas_validation_info->getOriginalUsername()) {
       $this->casHelper->log(
@@ -260,7 +262,7 @@ class ServiceController implements ContainerInjectionInterface {
     // @see \Drupal\cas\Event\CasPreUserLoadRedirectEvent
     $cas_pre_user_load_redirect_event = new CasPreUserLoadRedirectEvent($ticket, $cas_validation_info, $service_params);
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_USER_LOAD_REDIRECT.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_USER_LOAD_REDIRECT, $cas_pre_user_load_redirect_event);
+    $this->eventDispatcher->dispatch($cas_pre_user_load_redirect_event, CasHelper::EVENT_PRE_USER_LOAD_REDIRECT);
 
     // A subscriber might have set an HTTP redirect response allowing potential
     // user interaction to be injected into the flow.
@@ -304,12 +306,12 @@ class ServiceController implements ContainerInjectionInterface {
   /**
    * Create a redirect response that sends users somewhere after login.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param bool $login_failed
    *   Indicates if the login failed or not.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   private function createRedirectResponse(Request $request, $login_failed = FALSE) {
@@ -334,10 +336,10 @@ class ServiceController implements ContainerInjectionInterface {
   /**
    * Get the error message to display when there is a login exception.
    *
-   * @param \Drupal\cas\Exception\CasLoginException $e
+   * @param CasLoginException $e
    *   The login exception.
    *
-   * @return array|\Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return array|TranslatableMarkup|string
    *   The error message.
    */
   private function getLoginErrorMessage(CasLoginException $e) {
diff --git a/src/Event/CasPostLoginEvent.php b/src/Event/CasPostLoginEvent.php
index 3da8652..929ac56 100644
--- a/src/Event/CasPostLoginEvent.php
+++ b/src/Event/CasPostLoginEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\cas\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
 
 /**
@@ -19,23 +19,23 @@ class CasPostLoginEvent extends Event {
   /**
    * Store the CAS property bag.
    *
-   * @var \Drupal\cas\CasPropertyBag
+   * @var CasPropertyBag
    */
   protected $casPropertyBag;
 
   /**
    * The drupal user entity about to be logged in.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The drupal user entity about to be logged in.
-   * @param \Drupal\cas\CasPropertyBag $cas_property_bag
+   * @param CasPropertyBag $cas_property_bag
    *   The CasPropertyBag of the current login cycle.
    */
   public function __construct(UserInterface $account, CasPropertyBag $cas_property_bag) {
@@ -46,7 +46,7 @@ class CasPostLoginEvent extends Event {
   /**
    * CasPropertyBag getter.
    *
-   * @return \Drupal\cas\CasPropertyBag
+   * @return CasPropertyBag
    *   The casPropertyBag property.
    */
   public function getCasPropertyBag() {
@@ -56,7 +56,7 @@ class CasPostLoginEvent extends Event {
   /**
    * Return the user account entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user account entity.
    */
   public function getAccount() {
diff --git a/src/Event/CasPostValidateEvent.php b/src/Event/CasPostValidateEvent.php
index 82dce95..6f9fd81 100644
--- a/src/Event/CasPostValidateEvent.php
+++ b/src/Event/CasPostValidateEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\cas\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event fired after CAS validation happens.
@@ -27,7 +27,7 @@ class CasPostValidateEvent extends Event {
   /**
    * The bag of properties extracted from the response after the validation.
    *
-   * @var \Drupal\cas\CasPropertyBag
+   * @var CasPropertyBag
    */
   protected $casPropertyBag;
 
@@ -36,7 +36,7 @@ class CasPostValidateEvent extends Event {
    *
    * @param string $response_data
    *   The raw validation response data from CAS server.
-   * @param \Drupal\cas\CasPropertyBag $cas_property_bag
+   * @param CasPropertyBag $cas_property_bag
    *   The bag of properties extracted from the response after the validation.
    */
   public function __construct($response_data, CasPropertyBag $cas_property_bag) {
@@ -47,7 +47,7 @@ class CasPostValidateEvent extends Event {
   /**
    * Returns the CasPropertyBag object.
    *
-   * @return \Drupal\cas\CasPropertyBag
+   * @return CasPropertyBag
    *   The property bag
    */
   public function getCasPropertyBag() {
diff --git a/src/Event/CasPreLoginEvent.php b/src/Event/CasPreLoginEvent.php
index e77b58b..7a9535f 100644
--- a/src/Event/CasPreLoginEvent.php
+++ b/src/Event/CasPreLoginEvent.php
@@ -2,8 +2,9 @@
 
 namespace Drupal\cas\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
 
 /**
@@ -28,14 +29,14 @@ class CasPreLoginEvent extends Event {
   /**
    * Store the CAS property bag.
    *
-   * @var \Drupal\cas\CasPropertyBag
+   * @var CasPropertyBag
    */
   protected $casPropertyBag;
 
   /**
    * The drupal user entity about to be logged in.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;
 
@@ -49,16 +50,16 @@ class CasPreLoginEvent extends Event {
   /**
    * The user message why logging-in has been canceled.
    *
-   * @var \Drupal\Component\Render\MarkupInterface|string|null
+   * @var MarkupInterface|string|null
    */
   protected $cancelLoginReason;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The drupal user entity about to be logged in.
-   * @param \Drupal\cas\CasPropertyBag $cas_property_bag
+   * @param CasPropertyBag $cas_property_bag
    *   The CasPropertyBag of the current login cycle.
    */
   public function __construct(UserInterface $account, CasPropertyBag $cas_property_bag) {
@@ -69,7 +70,7 @@ class CasPreLoginEvent extends Event {
   /**
    * CasPropertyBag getter.
    *
-   * @return \Drupal\cas\CasPropertyBag
+   * @return CasPropertyBag
    *   The casPropertyBag property.
    */
   public function getCasPropertyBag() {
@@ -79,7 +80,7 @@ class CasPreLoginEvent extends Event {
   /**
    * Return the user account entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user account entity.
    */
   public function getAccount() {
@@ -100,7 +101,7 @@ class CasPreLoginEvent extends Event {
   /**
    * Cancels the login operation.
    *
-   * @param \Drupal\Component\Render\MarkupInterface|string|null $reason
+   * @param MarkupInterface|string|null $reason
    *   (optional) A user message explaining why the login has been canceled. If
    *   passed, this value will be used to show a message to the user that tries
    *   to login. If omitted, a standard message will be displayed.
@@ -145,7 +146,7 @@ class CasPreLoginEvent extends Event {
   /**
    * Returns a user message explaining why the login process is asked to cancel.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string|null
+   * @return MarkupInterface|string|null
    *   The reason why the login process is asked to cancel, if any has been set.
    */
   public function getCancelLoginReason() {
diff --git a/src/Event/CasPreRedirectEvent.php b/src/Event/CasPreRedirectEvent.php
index fbfeef0..593cf40 100644
--- a/src/Event/CasPreRedirectEvent.php
+++ b/src/Event/CasPreRedirectEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\cas\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasRedirectData;
 use Drupal\cas\CasServerConfig;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class CasPreRedirectEvent.
@@ -31,23 +31,23 @@ class CasPreRedirectEvent extends Event {
   /**
    * Data used to decide on final redirection.
    *
-   * @var \Drupal\cas\CasRedirectData
+   * @var CasRedirectData
    */
   protected $casRedirectData;
 
   /**
    * Data object representing the CAS server configuration to redirect to.
    *
-   * @var \Drupal\cas\CasServerConfig
+   * @var CasServerConfig
    */
   protected $casServerConfig;
 
   /**
    * CasPreRedirectEvent constructor.
    *
-   * @param \Drupal\cas\CasRedirectData $cas_redirect_data
+   * @param CasRedirectData $cas_redirect_data
    *   The redirect data object.
-   * @param \Drupal\cas\CasServerConfig $cas_server_config
+   * @param CasServerConfig $cas_server_config
    *   The CAS server config data object.
    */
   public function __construct(CasRedirectData $cas_redirect_data, CasServerConfig $cas_server_config) {
@@ -58,7 +58,7 @@ class CasPreRedirectEvent extends Event {
   /**
    * Getter for $casRedirectData.
    *
-   * @return \Drupal\cas\CasRedirectData
+   * @return CasRedirectData
    *   The redirect data object.
    */
   public function getCasRedirectData() {
@@ -68,7 +68,7 @@ class CasPreRedirectEvent extends Event {
   /**
    * Get the CAS server config for the server to redirect to.
    *
-   * @return \Drupal\cas\CasServerConfig
+   * @return CasServerConfig
    *   The config, which can be modified.
    */
   public function getCasServerConfig() {
diff --git a/src/Event/CasPreRegisterEvent.php b/src/Event/CasPreRegisterEvent.php
index 425d8d2..bd40cda 100644
--- a/src/Event/CasPreRegisterEvent.php
+++ b/src/Event/CasPreRegisterEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\cas\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
 
 /**
@@ -30,7 +30,7 @@ class CasPreRegisterEvent extends Event {
   /**
    * The user information returned from the CAS server.
    *
-   * @var \Drupal\cas\CasPropertyBag
+   * @var CasPropertyBag
    */
   protected $casPropertyBag;
 
@@ -60,7 +60,7 @@ class CasPreRegisterEvent extends Event {
   /**
    * Contructor.
    *
-   * @param \Drupal\cas\CasPropertyBag $cas_property_bag
+   * @param CasPropertyBag $cas_property_bag
    *   The CasPropertyBag for context.
    */
   public function __construct(CasPropertyBag $cas_property_bag) {
@@ -71,7 +71,7 @@ class CasPreRegisterEvent extends Event {
   /**
    * Return the CasPropertyBag of the event.
    *
-   * @return \Drupal\cas\CasPropertyBag
+   * @return CasPropertyBag
    *   The $casPropertyBag property.
    */
   public function getCasPropertyBag() {
diff --git a/src/Event/CasPreUserLoadEvent.php b/src/Event/CasPreUserLoadEvent.php
index a91d165..7a4a2b5 100644
--- a/src/Event/CasPreUserLoadEvent.php
+++ b/src/Event/CasPreUserLoadEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\cas\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
 
 /**
@@ -21,7 +21,7 @@ class CasPreUserLoadEvent extends Event {
   /**
    * Store the CAS property bag.
    *
-   * @var \Drupal\cas\CasPropertyBag
+   * @var CasPropertyBag
    *   The CasPropertyBag for context.
    */
   protected $casPropertyBag;
@@ -29,7 +29,7 @@ class CasPreUserLoadEvent extends Event {
   /**
    * Constructor.
    *
-   * @param \Drupal\cas\CasPropertyBag $cas_property_bag
+   * @param CasPropertyBag $cas_property_bag
    *   The CasPropertyBag of the current login cycle.
    */
   public function __construct(CasPropertyBag $cas_property_bag) {
@@ -39,7 +39,7 @@ class CasPreUserLoadEvent extends Event {
   /**
    * CasPropertyBag getter.
    *
-   * @return \Drupal\cas\CasPropertyBag
+   * @return CasPropertyBag
    *   The casPropertyBag property.
    */
   public function getCasPropertyBag() {
diff --git a/src/Event/CasPreUserLoadRedirectEvent.php b/src/Event/CasPreUserLoadRedirectEvent.php
index c3df7d0..210dce8 100644
--- a/src/Event/CasPreUserLoadRedirectEvent.php
+++ b/src/Event/CasPreUserLoadRedirectEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\cas\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 
 /**
@@ -34,7 +34,7 @@ class CasPreUserLoadRedirectEvent extends Event {
   /**
    * The CAS property bag.
    *
-   * @var \Drupal\cas\CasPropertyBag
+   * @var CasPropertyBag
    */
   protected $propertyBag;
 
@@ -55,7 +55,7 @@ class CasPreUserLoadRedirectEvent extends Event {
   /**
    * Subscribers may trigger an HTTP redirect.
    *
-   * @var \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @var RedirectResponse|null
    */
   protected $redirectResponse;
 
@@ -64,7 +64,7 @@ class CasPreUserLoadRedirectEvent extends Event {
    *
    * @param string $ticket
    *   The CAS authentication ticket.
-   * @param \Drupal\cas\CasPropertyBag $property_bag
+   * @param CasPropertyBag $property_bag
    *   The CasPropertyBag of the current login cycle.
    * @param array $service_parameters
    *   The CAS service parameters.
@@ -78,7 +78,7 @@ class CasPreUserLoadRedirectEvent extends Event {
   /**
    * Returns the CAS property bag.
    *
-   * @return \Drupal\cas\CasPropertyBag
+   * @return CasPropertyBag
    *   The the CAS property bag.
    */
   public function getPropertyBag() {
@@ -111,7 +111,7 @@ class CasPreUserLoadRedirectEvent extends Event {
    * Subscribers may decide to trigger a redirect just after the attempt to
    * find a local Drupal user account.
    *
-   * @param \Symfony\Component\HttpFoundation\RedirectResponse $redirect_response
+   * @param RedirectResponse $redirect_response
    *   The HTTP redirect response to be set along with the event.
    *
    * @return $this
@@ -124,7 +124,7 @@ class CasPreUserLoadRedirectEvent extends Event {
   /**
    * Returns the HTTP redirect response.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   The HTTP redirect response or NULL, if none was set.
    */
   public function getRedirectResponse() {
diff --git a/src/Event/CasPreValidateEvent.php b/src/Event/CasPreValidateEvent.php
index 0fa660d..25296d2 100644
--- a/src/Event/CasPreValidateEvent.php
+++ b/src/Event/CasPreValidateEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\cas\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class CasPreValidateEvent.
diff --git a/src/Event/CasPreValidateServerConfigEvent.php b/src/Event/CasPreValidateServerConfigEvent.php
index 7c9299f..b2f9fb2 100644
--- a/src/Event/CasPreValidateServerConfigEvent.php
+++ b/src/Event/CasPreValidateServerConfigEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\cas\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasServerConfig;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
@@ -19,14 +19,14 @@ class CasPreValidateServerConfigEvent extends Event {
   /**
    * The CAS server config value object.
    *
-   * @var \Drupal\cas\CasServerConfig
+   * @var CasServerConfig
    */
   protected $casServerConfig;
 
   /**
    * CasPreValidateServerConfigEvent constructor.
    *
-   * @param \Drupal\cas\CasServerConfig $casServerConfig
+   * @param CasServerConfig $casServerConfig
    *   The CAS server config value object.
    */
   public function __construct(CasServerConfig $casServerConfig) {
diff --git a/src/Exception/CasLoginException.php b/src/Exception/CasLoginException.php
index eb03dd9..5ba1176 100644
--- a/src/Exception/CasLoginException.php
+++ b/src/Exception/CasLoginException.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cas\Exception;
 
+use Drupal\Component\Render\MarkupInterface;
 /**
  * Class CasLoginException.
  */
@@ -40,14 +41,14 @@ class CasLoginException extends \Exception {
   /**
    * A user message when login failed on a subscriber cancellation.
    *
-   * @var \Drupal\Component\Render\MarkupInterface|string;
+   * @var MarkupInterface|string ;
    */
   protected $subscriberCancelReason;
 
   /**
    * Sets a user message when login failed on a subscriber cancellation.
    *
-   * @param \Drupal\Component\Render\MarkupInterface|string $reason
+   * @param MarkupInterface|string $reason
    *   A user message to be set along with the exception.
    *
    * @return $this
@@ -62,7 +63,7 @@ class CasLoginException extends \Exception {
   /**
    * Returns the user message if login failed on a subscriber cancellation.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string|null
+   * @return MarkupInterface|string|null
    *   The reason why login failed, if any.
    */
   public function getSubscriberCancelReason() {
diff --git a/src/Form/BulkAddCasUsers.php b/src/Form/BulkAddCasUsers.php
index c6726f7..ec8fe76 100755
--- a/src/Form/BulkAddCasUsers.php
+++ b/src/Form/BulkAddCasUsers.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cas\Form;
 
+use Drupal\user\UserInterface;
 use Drupal\cas\Exception\CasLoginException;
 use Drupal\cas\Service\CasUserManager;
 use Drupal\Core\Form\FormBase;
@@ -142,7 +143,7 @@ class BulkAddCasUsers extends FormBase {
     ];
 
     try {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = $cas_user_manager->register($cas_username, $user_properties, $cas_username);
       $context['results']['messages']['created'][] = $user->toLink()->toString();
     }
diff --git a/src/Form/CasSettings.php b/src/Form/CasSettings.php
index 6aa8a00..2633a9a 100755
--- a/src/Form/CasSettings.php
+++ b/src/Form/CasSettings.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cas\Form;
 
+use Drupal\system\Plugin\Condition\RequestPath;
 use Drupal\cas\Service\CasUserManager;
 use Drupal\Component\Plugin\Factory\FactoryInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -23,32 +24,32 @@ class CasSettings extends ConfigFormBase {
   /**
    * RequestPath condition that contains the paths to use for gateway.
    *
-   * @var \Drupal\system\Plugin\Condition\RequestPath
+   * @var RequestPath
    */
   protected $gatewayPaths;
 
   /**
    * RequestPath condition that contains the paths to used for forcedLogin.
    *
-   * @var \Drupal\system\Plugin\Condition\RequestPath
+   * @var RequestPath
    */
   protected $forcedLoginPaths;
 
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a \Drupal\cas\Form\CasSettings object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Component\Plugin\Factory\FactoryInterface $plugin_factory
+   * @param FactoryInterface $plugin_factory
    *   The condition plugin factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, FactoryInterface $plugin_factory, ModuleHandlerInterface $module_handler) {
diff --git a/src/PageCache/DenyCas.php b/src/PageCache/DenyCas.php
index 3e1ed5d..539c010 100644
--- a/src/PageCache/DenyCas.php
+++ b/src/PageCache/DenyCas.php
@@ -20,23 +20,23 @@ class DenyCas implements ResponsePolicyInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Condition manager.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected $conditionManager;
 
   /**
    * Constructs a response policy for disabling cache on specific CAS paths.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The current route match.
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $condition_manager
+   * @param ExecutableManagerInterface $condition_manager
    *   The condition manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ExecutableManagerInterface $condition_manager) {
diff --git a/src/Plugin/Validation/Constraint/CasProtectedUserFieldConstraintValidator.php b/src/Plugin/Validation/Constraint/CasProtectedUserFieldConstraintValidator.php
index 3f60e2e..e21d394 100644
--- a/src/Plugin/Validation/Constraint/CasProtectedUserFieldConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/CasProtectedUserFieldConstraintValidator.php
@@ -18,7 +18,7 @@ class CasProtectedUserFieldConstraintValidator extends ProtectedUserFieldConstra
   /**
    * The CasUserManager service.
    *
-   * @var \Drupal\cas\Service\CasUserManager
+   * @var CasUserManager
    */
   protected $casUserManager;
 
@@ -32,13 +32,13 @@ class CasProtectedUserFieldConstraintValidator extends ProtectedUserFieldConstra
   /**
    * Constructs the object.
    *
-   * @param \Drupal\user\UserStorageInterface $user_storage
+   * @param UserStorageInterface $user_storage
    *   The user storage handler.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\cas\Service\CasUserManager $cas_user_manager
+   * @param CasUserManager $cas_user_manager
    *   The CAS user manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(UserStorageInterface $user_storage, AccountProxyInterface $current_user, CasUserManager $cas_user_manager, ConfigFactoryInterface $config_factory) {
diff --git a/src/Routing/CasRouteEnhancer.php b/src/Routing/CasRouteEnhancer.php
index ab19eeb..e9ddfff 100644
--- a/src/Routing/CasRouteEnhancer.php
+++ b/src/Routing/CasRouteEnhancer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cas\Routing;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\EnhancerInterface;
 use Symfony\Cmf\Component\Routing\RouteObjectInterface;
@@ -20,14 +21,14 @@ class CasRouteEnhancer implements EnhancerInterface {
   /**
    * Stores settings object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $settings;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/src/Service/CasHelper.php b/src/Service/CasHelper.php
index 93abb59..adbb1a2 100644
--- a/src/Service/CasHelper.php
+++ b/src/Service/CasHelper.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\cas\Service;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Logger\LoggerChannel;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -119,32 +122,32 @@ class CasHelper {
   /**
    * Stores settings object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $settings;
 
   /**
    * Stores logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   protected $loggerChannel;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger channel factory.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerChannelFactoryInterface $logger_factory, Token $token) {
@@ -195,7 +198,7 @@ class CasHelper {
    * then convert it back to a "destination" parameter and let Drupal do it's
    * thing when redirecting.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The Symfony request object.
    */
   public function handleReturnToParameter(Request $request) {
@@ -211,7 +214,7 @@ class CasHelper {
    * @param string $key
    *   The message config key.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    *   The customized message or an empty string.
    *
    * @throws \InvalidArgumentException
diff --git a/src/Service/CasLogout.php b/src/Service/CasLogout.php
index 0afb3f3..70ea94f 100644
--- a/src/Service/CasLogout.php
+++ b/src/Service/CasLogout.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cas\Service;
 
+use Drupal\Core\Config\Config;
 use Drupal\cas\Exception\CasSloException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
@@ -22,25 +23,25 @@ class CasLogout {
   /**
    * The database connection used to find the user's session ID.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Stores settings object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $settings;
 
   /**
    * CasLogout constructor.
    *
-   * @param \Drupal\cas\Service\CasHelper $cas_helper
+   * @param CasHelper $cas_helper
    *   The CAS helper.
-   * @param \Drupal\Core\Database\Connection $database_connection
+   * @param Connection $database_connection
    *   The database connection.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(CasHelper $cas_helper, Connection $database_connection, ConfigFactoryInterface $config_factory) {
@@ -55,7 +56,7 @@ class CasLogout {
    * @param string $data
    *   The raw data posted to us from the CAS server.
    *
-   * @throws \Drupal\cas\Exception\CasSloException
+   * @throws CasSloException
    *   If the logout data could not be parsed.
    */
   public function handleSlo($data) {
@@ -116,7 +117,7 @@ class CasLogout {
    * @return string
    *   The service ticket to log out.
    *
-   * @throws \Drupal\cas\Exception\CasSloException
+   * @throws CasSloException
    *   If the logout data could not be parsed.
    */
   private function getServiceTicketFromData($data) {
diff --git a/src/Service/CasProxyHelper.php b/src/Service/CasProxyHelper.php
index 4c9e8b5..427905e 100644
--- a/src/Service/CasProxyHelper.php
+++ b/src/Service/CasProxyHelper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cas\Service;
 
+use Drupal\Core\Config\Config;
 use Drupal\cas\CasServerConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use GuzzleHttp\Client;
@@ -21,50 +22,50 @@ class CasProxyHelper {
   /**
    * The Guzzle HTTP client used to make ticket validation request.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
   /**
    * CAS Helper object.
    *
-   * @var \Drupal\cas\Service\CasHelper
+   * @var CasHelper
    */
   protected $casHelper;
 
   /**
    * Used to get session data.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;
 
   /**
    * Stores settings object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $settings;
 
   /**
    * Stores database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructor.
    *
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   The HTTP Client library.
-   * @param \Drupal\cas\Service\CasHelper $cas_helper
+   * @param CasHelper $cas_helper
    *   The CAS Helper service.
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Database\Connection $database_connection
+   * @param Connection $database_connection
    *   The database connection.
    */
   public function __construct(Client $http_client, CasHelper $cas_helper, SessionInterface $session, ConfigFactoryInterface $config_factory, Connection $database_connection) {
@@ -103,7 +104,7 @@ class CasProxyHelper {
    * @return string
    *   The proxy ticket returned by the CAS server.
    *
-   * @throws \Drupal\cas\Exception\CasProxyException
+   * @throws CasProxyException
    *   Thrown if there was a problem communicating with the CAS server.
    */
   public function getProxyTicket($target_service) {
@@ -139,11 +140,11 @@ class CasProxyHelper {
    * @param string $target_service
    *   The service to be proxied.
    *
-   * @return \GuzzleHttp\Cookie\CookieJar
+   * @return CookieJar
    *   A CookieJar object (array storage) containing cookies from the
    *   proxied service.
    *
-   * @throws \Drupal\cas\Exception\CasProxyException
+   * @throws CasProxyException
    *   Thrown if there was a problem communicating with the CAS server
    *   or if there was is invalid use rsession data.
    */
@@ -194,7 +195,7 @@ class CasProxyHelper {
    * @return mixed
    *   A proxy ticket to be used with the target service, FALSE on failure.
    *
-   * @throws \Drupal\cas\Exception\CasProxyException
+   * @throws CasProxyException
    *   Thrown if there was a problem parsing the proxy validation response.
    */
   private function parseProxyTicket($xml) {
diff --git a/src/Service/CasRedirector.php b/src/Service/CasRedirector.php
index 24c9698..b1ca90c 100644
--- a/src/Service/CasRedirector.php
+++ b/src/Service/CasRedirector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\cas\Service;
 
+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Drupal\Core\Config\Config;
 use Drupal\cas\CasRedirectData;
 use Drupal\cas\CasRedirectResponse;
 use Drupal\cas\CasServerConfig;
@@ -29,34 +31,34 @@ class CasRedirector {
   /**
    * The EventDispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * Stores URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Stores CAS settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $settings;
 
   /**
    * CasRedirector constructor.
    *
-   * @param \Drupal\cas\Service\CasHelper $cas_helper
+   * @param CasHelper $cas_helper
    *   The CasHelper service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The EventDispatcher service.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL generator service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(CasHelper $cas_helper, EventDispatcherInterface $event_dispatcher, UrlGeneratorInterface $url_generator, ConfigFactoryInterface $config_factory) {
@@ -69,14 +71,14 @@ class CasRedirector {
   /**
    * Determine login URL response.
    *
-   * @param \Drupal\cas\CasRedirectData $data
+   * @param CasRedirectData $data
    *   Data used to generate redirector.
    * @param bool $force
    *   True implies that you always want to generate a redirector as occurs with
    *   the ForceRedirectController. False implies redirector is controlled by
    *   the allow_redirect property in the CasRedirectData object.
    *
-   * @return \Drupal\Core\Routing\TrustedRedirectResponse|\Drupal\cas\CasRedirectResponse|null
+   * @return TrustedRedirectResponse|CasRedirectResponse|null
    *   The RedirectResponse or NULL if a redirect shouldn't be done.
    */
   public function buildRedirectResponse(CasRedirectData $data, $force = FALSE) {
@@ -87,7 +89,7 @@ class CasRedirector {
     // Dispatch an event that allows modules to alter or prevent the redirect,
     // or to change the CAS server that we're redirected to.
     $pre_redirect_event = new CasPreRedirectEvent($data, $casServerConfig);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_REDIRECT, $pre_redirect_event);
+    $this->eventDispatcher->dispatch($pre_redirect_event, CasHelper::EVENT_PRE_REDIRECT);
 
     // Build the service URL, which is where the CAS server will send users
     // back to after authenticating them. We always send users back to our main
diff --git a/src/Service/CasUserManager.php b/src/Service/CasUserManager.php
index 2cf46ca..6d8e9c3 100644
--- a/src/Service/CasUserManager.php
+++ b/src/Service/CasUserManager.php
@@ -40,56 +40,56 @@ class CasUserManager {
   /**
    * Used to include the externalauth service from the external_auth module.
    *
-   * @var \Drupal\externalauth\ExternalAuthInterface
+   * @var ExternalAuthInterface
    */
   protected $externalAuth;
 
   /**
    * An authmap service object.
    *
-   * @var \Drupal\externalauth\AuthmapInterface
+   * @var AuthmapInterface
    */
   protected $authmap;
 
   /**
    * Stores settings object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $settings;
 
   /**
    * Used to get session data.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;
 
   /**
    * Used when storing CAS login data.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The CAS Helper.
    *
-   * @var \Drupal\cas\Service\CasHelper
+   * @var CasHelper
    */
   protected $casHelper;
 
   /**
    * CAS proxy helper.
    *
-   * @var \Drupal\cas\Service\CasProxyHelper
+   * @var CasProxyHelper
    */
   protected $casProxyHelper;
 
   /**
    * Used to dispatch CAS login events.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -103,21 +103,21 @@ class CasUserManager {
   /**
    * CasUserManager constructor.
    *
-   * @param \Drupal\externalauth\ExternalAuthInterface $external_auth
+   * @param ExternalAuthInterface $external_auth
    *   The external auth interface.
-   * @param \Drupal\externalauth\AuthmapInterface $authmap
+   * @param AuthmapInterface $authmap
    *   The authmap interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $settings
+   * @param ConfigFactoryInterface $settings
    *   The settings.
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
-   * @param \Drupal\Core\Database\Connection $database_connection
+   * @param Connection $database_connection
    *   The database connection.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\cas\Service\CasHelper $cas_helper
+   * @param CasHelper $cas_helper
    *   The CAS helper.
-   * @param \Drupal\cas\Service\CasProxyHelper $cas_proxy_helper
+   * @param CasProxyHelper $cas_proxy_helper
    *   The CAS Proxy helper.
    */
   public function __construct(ExternalAuthInterface $external_auth, AuthmapInterface $authmap, ConfigFactoryInterface $settings, SessionInterface $session, Connection $database_connection, EventDispatcherInterface $event_dispatcher, CasHelper $cas_helper, CasProxyHelper $cas_proxy_helper = NULL) {
@@ -145,10 +145,10 @@ class CasUserManager {
    * @param string $local_username
    *   The local Drupal username to be created.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity of the newly registered user.
    *
-   * @throws \Drupal\cas\Exception\CasLoginException
+   * @throws CasLoginException
    *   When the user account could not be registered.
    */
   public function register($authname, array $property_values = [], $local_username = NULL) {
@@ -172,12 +172,12 @@ class CasUserManager {
   /**
    * Attempts to log the user in to the Drupal site.
    *
-   * @param \Drupal\cas\CasPropertyBag $property_bag
+   * @param CasPropertyBag $property_bag
    *   CasPropertyBag containing username and attributes from CAS.
    * @param string $ticket
    *   The service ticket.
    *
-   * @throws \Drupal\cas\Exception\CasLoginException
+   * @throws CasLoginException
    *   Thrown if there was a problem logging in the user.
    */
   public function login(CasPropertyBag $property_bag, $ticket) {
@@ -197,7 +197,7 @@ class CasUserManager {
         $cas_pre_register_event = new CasPreRegisterEvent($property_bag);
         $cas_pre_register_event->setPropertyValue('mail', $this->getEmailForNewAccount($property_bag));
         $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_REGISTER.');
-        $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_REGISTER, $cas_pre_register_event);
+        $this->eventDispatcher->dispatch($cas_pre_register_event, CasHelper::EVENT_PRE_REGISTER);
         if ($cas_pre_register_event->getAllowAutomaticRegistration()) {
           $account = $this->register($property_bag->getUsername(), $cas_pre_register_event->getPropertyValues(), $cas_pre_register_event->getDrupalUsername());
         }
@@ -219,7 +219,7 @@ class CasUserManager {
     // in and/or alter the user entity before we save it.
     $pre_login_event = new CasPreLoginEvent($account, $property_bag);
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_LOGIN.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_LOGIN, $pre_login_event);
+    $this->eventDispatcher->dispatch($pre_login_event, CasHelper::EVENT_PRE_LOGIN);
 
     // Save user entity since event listeners may have altered it.
     // @todo Don't take it for granted. Find if the account was really altered.
@@ -239,7 +239,7 @@ class CasUserManager {
 
     $postLoginEvent = new CasPostLoginEvent($account, $property_bag);
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_POST_LOGIN.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_POST_LOGIN, $postLoginEvent);
+    $this->eventDispatcher->dispatch($postLoginEvent, CasHelper::EVENT_POST_LOGIN);
 
     if ($this->settings->get('proxy.initialize') && $property_bag->getPgt()) {
       $this->casHelper->log(LogLevel::DEBUG, "Storing PGT information for this session.");
@@ -295,7 +295,7 @@ class CasUserManager {
   /**
    * Save an association of the passed in Drupal user account and CAS username.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account entity.
    * @param string $cas_username
    *   The CAS username.
@@ -307,7 +307,7 @@ class CasUserManager {
   /**
    * Remove the CAS username association with the provided user.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account entity.
    */
   public function removeCasUsernameForAccount(UserInterface $account) {
@@ -322,19 +322,19 @@ class CasUserManager {
    */
   protected function randomPassword() {
     // Default length is 10, use a higher number that's harder to brute force.
-    return \user_password(30);
+    return \Drupal::service('password_generator')->generate(30);
   }
 
   /**
    * Return the email address that should be assigned to an auto-register user.
    *
-   * @param \Drupal\cas\CasPropertyBag $cas_property_bag
+   * @param CasPropertyBag $cas_property_bag
    *   The CasPropertyBag associated with the user's login attempt.
    *
    * @return string
    *   The email address.
    *
-   * @throws \Drupal\cas\Exception\CasLoginException
+   * @throws CasLoginException
    *   Thrown when the email address cannot be derived properly.
    */
   public function getEmailForNewAccount(CasPropertyBag $cas_property_bag) {
diff --git a/src/Service/CasValidator.php b/src/Service/CasValidator.php
index c3ac9b9..ef8e1ed 100644
--- a/src/Service/CasValidator.php
+++ b/src/Service/CasValidator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\cas\Service;
 
+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Drupal\Core\Config\Config;
 use Drupal\cas\CasServerConfig;
 use Drupal\cas\Event\CasPostValidateEvent;
 use Drupal\cas\Event\CasPreValidateEvent;
@@ -24,50 +26,50 @@ class CasValidator {
   /**
    * Stores the Guzzle HTTP client used when validating service tickets.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
   /**
    * Stores CAS helper.
    *
-   * @var \Drupal\cas\Service\CasHelper
+   * @var CasHelper
    */
   protected $casHelper;
 
   /**
    * The EventDispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * Stores settings object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $settings;
 
   /**
    * Stores URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Constructor.
    *
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   The HTTP Client library.
    * @param CasHelper $cas_helper
    *   The CAS Helper service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL generator.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The EventDispatcher service.
    */
   public function __construct(Client $http_client, CasHelper $cas_helper, ConfigFactoryInterface $config_factory, UrlGeneratorInterface $url_generator, EventDispatcherInterface $event_dispatcher) {
@@ -89,10 +91,10 @@ class CasValidator {
    * @param array $service_params
    *   An array of query string parameters to add to the service URL.
    *
-   * @return \Drupal\cas\CasPropertyBag
+   * @return CasPropertyBag
    *   Contains user info from the CAS server.
    *
-   * @throws \Drupal\cas\Exception\CasValidateException
+   * @throws CasValidateException
    *   Thrown if there was a problem making the validation request or
    *   if there was a local configuration issue.
    */
@@ -101,7 +103,7 @@ class CasValidator {
     // Allow modules to modify the server config before it's used to validate
     // the login ticket.
     $event = new CasPreValidateServerConfigEvent($casServerConfig);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_VALIDATE_SERVER_CONFIG, $event);
+    $this->eventDispatcher->dispatch($event, CasHelper::EVENT_PRE_VALIDATE_SERVER_CONFIG);
 
     // Determine the path to send the validation request to on the CAS server.
     $path = '';
@@ -139,7 +141,7 @@ class CasValidator {
     // Dispatch an event that allows modules to alter the validation path or
     // URL parameters.
     $pre_validate_event = new CasPreValidateEvent($path, $params);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_VALIDATE, $pre_validate_event);
+    $this->eventDispatcher->dispatch($pre_validate_event, CasHelper::EVENT_PRE_VALIDATE);
     $validate_url = $casServerConfig->getServerBaseUrl() . $pre_validate_event->getValidationPath();
     if (!empty($pre_validate_event->getParameters())) {
       $validate_url .= '?' . UrlHelper::buildQuery($pre_validate_event->getParameters());
@@ -178,7 +180,7 @@ class CasValidator {
 
     // Dispatch an event that allows modules to alter the CAS property bag.
     $event = new CasPostValidateEvent($response_data, $cas_property_bag);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_POST_VALIDATE, $event);
+    $this->eventDispatcher->dispatch($event, CasHelper::EVENT_POST_VALIDATE);
     return $event->getCasPropertyBag();
   }
 
@@ -188,10 +190,10 @@ class CasValidator {
    * @param string $data
    *   The raw validation response data from CAS server.
    *
-   * @return \Drupal\cas\CasPropertyBag
+   * @return CasPropertyBag
    *   Contains user info from the CAS server.
    *
-   * @throws \Drupal\cas\Exception\CasValidateException
+   * @throws CasValidateException
    *   Thrown if there was a problem parsing the validation data.
    */
   private function validateVersion1($data) {
@@ -219,10 +221,10 @@ class CasValidator {
    * @param string $data
    *   The raw validation response data from CAS server.
    *
-   * @return \Drupal\cas\CasPropertyBag
+   * @return CasPropertyBag
    *   Contains user info from the CAS server.
    *
-   * @throws \Drupal\cas\Exception\CasValidateException
+   * @throws CasValidateException
    *   Thrown if there was a problem parsing the validation data.
    */
   private function validateVersion2($data) {
@@ -305,7 +307,7 @@ class CasValidator {
    * @param \DOMNodeList $proxy_chain
    *   An XML element containing proxy values, from most recent to first.
    *
-   * @throws \Drupal\cas\Exception\CasValidateException
+   * @throws CasValidateException
    *   Thrown if the proxy chain did not match the allowed list from settings.
    */
   private function verifyProxyChain(\DOMNodeList $proxy_chain) {
diff --git a/src/Subscriber/CasAutoAssignRolesSubscriber.php b/src/Subscriber/CasAutoAssignRolesSubscriber.php
index 895d2d3..882face 100644
--- a/src/Subscriber/CasAutoAssignRolesSubscriber.php
+++ b/src/Subscriber/CasAutoAssignRolesSubscriber.php
@@ -15,14 +15,14 @@ class CasAutoAssignRolesSubscriber implements EventSubscriberInterface {
   /**
    * Stores settings object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $settings;
 
   /**
    * CasAutoAssignRoleSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   A config factory instance.
    */
   public function __construct(ConfigFactoryInterface $config) {
@@ -42,7 +42,7 @@ class CasAutoAssignRolesSubscriber implements EventSubscriberInterface {
    *
    * Assign roles to a user that just registered via CAS.
    *
-   * @param \Drupal\cas\Event\CasPreRegisterEvent $event
+   * @param CasPreRegisterEvent $event
    *   The event object.
    */
   public function assignRolesOnRegistration(CasPreRegisterEvent $event) {
diff --git a/src/Subscriber/CasSubscriber.php b/src/Subscriber/CasSubscriber.php
index 0822ad7..df07207 100644
--- a/src/Subscriber/CasSubscriber.php
+++ b/src/Subscriber/CasSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\cas\Subscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\cas\CasRedirectData;
 use Drupal\cas\Service\CasRedirector;
 
@@ -9,9 +11,7 @@ use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\EventSubscriber\HttpExceptionSubscriberBase;
 use Drupal\Core\Session\AccountInterface;
 use Psr\Log\LogLevel;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -26,49 +26,49 @@ class CasSubscriber extends HttpExceptionSubscriberBase {
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Route matcher object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatcher;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Condition manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
    * CAS helper.
    *
-   * @var \Drupal\cas\Service\CasHelper
+   * @var CasHelper
    */
   protected $casHelper;
 
   /**
    * CasRedirector.
    *
-   * @var \Drupal\cas\Service\CasRedirector
+   * @var CasRedirector
    */
   protected $casRedirector;
 
@@ -103,19 +103,19 @@ class CasSubscriber extends HttpExceptionSubscriberBase {
   /**
    * Constructs a new CasSubscriber.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_matcher
+   * @param RouteMatchInterface $route_matcher
    *   The route matcher.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition manager.
-   * @param \Drupal\cas\Service\CasHelper $cas_helper
+   * @param CasHelper $cas_helper
    *   The CAS Helper service.
-   * @param \Drupal\cas\Service\CasRedirector $cas_redirector
+   * @param CasRedirector $cas_redirector
    *   The CAS Redirector Service.
    */
   public function __construct(RequestStack $request_stack, RouteMatchInterface $route_matcher, ConfigFactoryInterface $config_factory, AccountInterface $current_user, ConditionManager $condition_manager, CasHelper $cas_helper, CasRedirector $cas_redirector) {
@@ -147,10 +147,10 @@ class CasSubscriber extends HttpExceptionSubscriberBase {
   /**
    * The entry point for our subscriber.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The response event from the kernel.
    */
-  public function handle(GetResponseEvent $event) {
+  public function handle(RequestEvent $event) {
     // Don't do anything if this is a sub request and not a master request.
     if ($event->getRequestType() != HttpKernelInterface::MASTER_REQUEST) {
       return;
@@ -365,10 +365,10 @@ class CasSubscriber extends HttpExceptionSubscriberBase {
    * instances we handle the forced login redirect if applicable here instead,
    * using an exception subscriber.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The event to process.
    */
-  public function on403(GetResponseForExceptionEvent $event) {
+  public function on403(ExceptionEvent $event) {
     if ($this->currentUser->isAnonymous()) {
       $return_to = $this->requestStack->getCurrentRequest()->getUri();
       $redirect_data = new CasRedirectData(['returnto' => $return_to]);
diff --git a/tests/modules/cas_test/src/CasTestSubscriber.php b/tests/modules/cas_test/src/CasTestSubscriber.php
index 6af7656..b4778d5 100644
--- a/tests/modules/cas_test/src/CasTestSubscriber.php
+++ b/tests/modules/cas_test/src/CasTestSubscriber.php
@@ -24,7 +24,7 @@ class CasTestSubscriber implements EventSubscriberInterface {
   /**
    * Change the username of the user being registered.
    *
-   * @param \Drupal\cas\Event\CasPreRegisterEvent $event
+   * @param CasPreRegisterEvent $event
    *   The event.
    */
   public function onPreRegister(CasPreRegisterEvent $event) {
@@ -37,7 +37,7 @@ class CasTestSubscriber implements EventSubscriberInterface {
   /**
    * Cancels the login.
    *
-   * @param \Drupal\cas\Event\CasPreLoginEvent $event
+   * @param CasPreLoginEvent $event
    */
   public function onPreLogin(CasPreLoginEvent $event) {
     $flag = \Drupal::state()->get('cas_test.flag');
diff --git a/tests/modules/cas_user_interaction_test/src/CasUserInteractionTestForm.php b/tests/modules/cas_user_interaction_test/src/CasUserInteractionTestForm.php
index 2d6e0fa..eeaf4d9 100644
--- a/tests/modules/cas_user_interaction_test/src/CasUserInteractionTestForm.php
+++ b/tests/modules/cas_user_interaction_test/src/CasUserInteractionTestForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\cas_user_interaction_test;
 
+use Drupal\cas\Service\CasUserManager;
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -31,10 +33,10 @@ class CasUserInteractionTestForm extends FormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\cas\Service\CasUserManager $cas_user_manager */
+    /** @var CasUserManager $cas_user_manager */
     $cas_user_manager = \Drupal::service('cas.user_manager');
 
-    /** @var \Drupal\Core\TempStore\PrivateTempStore $tempstore */
+    /** @var PrivateTempStore $tempstore */
     $tempstore = \Drupal::service('tempstore.private')->get('cas_user_interaction_test');
 
     $cas_user_manager->login($tempstore->get('property_bag'), $tempstore->get('ticket'));
diff --git a/tests/modules/cas_user_interaction_test/src/CasUserInteractionTestSubscriber.php b/tests/modules/cas_user_interaction_test/src/CasUserInteractionTestSubscriber.php
index ea7d442..ad7b7d7 100644
--- a/tests/modules/cas_user_interaction_test/src/CasUserInteractionTestSubscriber.php
+++ b/tests/modules/cas_user_interaction_test/src/CasUserInteractionTestSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cas_user_interaction_test;
 
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\cas\Event\CasPreUserLoadRedirectEvent;
 use Drupal\cas\Service\CasHelper;
 use Drupal\Core\Url;
@@ -25,7 +26,7 @@ class CasUserInteractionTestSubscriber implements EventSubscriberInterface {
   /**
    * Redirects to a form that asks user to accept the site's 'Legal Notice'.
    *
-   * @param \Drupal\cas\Event\CasPreUserLoadRedirectEvent $event
+   * @param CasPreUserLoadRedirectEvent $event
    *   The event.
    */
   public function onPreUserLoadRedirect(CasPreUserLoadRedirectEvent $event) {
@@ -34,7 +35,7 @@ class CasUserInteractionTestSubscriber implements EventSubscriberInterface {
     // Add a redirect only if a local account exists (i.e. it's a login
     // operation) and the site's 'Legal Notice' has changed.
     if ($local_account && $is_legal_notice_changed) {
-      /** @var \Drupal\Core\TempStore\PrivateTempStore $tempstore */
+      /** @var PrivateTempStore $tempstore */
       $tempstore = \Drupal::service('tempstore.private')->get('cas_user_interaction_test');
       $tempstore->set('ticket', $event->getTicket());
       $tempstore->set('property_bag', $event->getPropertyBag());
diff --git a/tests/src/Functional/CasAutoAssignedRolesTest.php b/tests/src/Functional/CasAutoAssignedRolesTest.php
index 3285903..a1f708a 100644
--- a/tests/src/Functional/CasAutoAssignedRolesTest.php
+++ b/tests/src/Functional/CasAutoAssignedRolesTest.php
@@ -25,7 +25,8 @@ class CasAutoAssignedRolesTest extends CasBrowserTestBase {
       'user_accounts[auto_assigned_roles][]' => [$role_1, $role_2],
       'user_accounts[email_hostname]' => 'sample.com',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $this->assertEquals([$role_1, $role_2], $this->config('cas.settings')->get('user_accounts.auto_assigned_roles'));
 
diff --git a/tests/src/Functional/CasBulkAddCasUsersTest.php b/tests/src/Functional/CasBulkAddCasUsersTest.php
index 61f7733..06ca77c 100644
--- a/tests/src/Functional/CasBulkAddCasUsersTest.php
+++ b/tests/src/Functional/CasBulkAddCasUsersTest.php
@@ -25,8 +25,9 @@ class CasBulkAddCasUsersTest extends CasBrowserTestBase {
       'email_hostname' => 'sample.com',
       'roles[sample_role]' => TRUE,
     ];
+    $this->drupalGet('/admin/people/create/cas-bulk');
 
-    $this->drupalPostForm('/admin/people/create/cas-bulk', $edit, 'Create new accounts');
+    $this->submitForm($edit, 'Create new accounts');
 
     $casUserManager = \Drupal::service('cas.user_manager');
 
@@ -34,12 +35,12 @@ class CasBulkAddCasUsersTest extends CasBrowserTestBase {
     $user_test3 = user_load_by_name('test 3');
     $this->assertNotFalse($user_test3, 'User with username "test 3" exists.');
     $this->assertTrue($user_test3->hasRole('sample_role'), 'The "test 3" user has role "sample_role"');
-    $this->assertEqual('test 3@sample.com', $user_test3->get('mail')->value, 'The "test 3" user has the email "test 3@sample.com".');
+    $this->assertEquals('test 3@sample.com', $user_test3->get('mail')->value, 'The "test 3" user has the email "test 3@sample.com".');
     $this->assertEquals('test 3', $casUserManager->getCasUsernameForAccount($user_test3->id()));
 
     $user_test4 = user_load_by_name('test4');
     $this->assertNotFalse($user_test4, 'User with username "test4" exists.');
-    $this->assertEqual('test4@sample.com', $user_test4->get('mail')->value, 'The "test4" user has the email "test4@sample.com".');
+    $this->assertEquals('test4@sample.com', $user_test4->get('mail')->value, 'The "test4" user has the email "test4@sample.com".');
     $this->assertTrue($user_test4->hasRole('sample_role'), 'The "test4" user has role "sample_role"');
     $this->assertEquals('test4', $casUserManager->getCasUsernameForAccount($user_test4->id()));
 
diff --git a/tests/src/Functional/CasEventsTest.php b/tests/src/Functional/CasEventsTest.php
index e60d5d2..7449377 100644
--- a/tests/src/Functional/CasEventsTest.php
+++ b/tests/src/Functional/CasEventsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\cas\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\externalauth\AuthmapInterface;
 use Drupal\cas\CasPropertyBag;
 use Drupal\Tests\cas\Traits\CasTestTrait;
 
@@ -31,17 +33,18 @@ class CasEventsTest extends CasBrowserTestBase {
       'user_accounts[auto_register]' => TRUE,
       'user_accounts[email_hostname]' => 'sample.com',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $cas_property_bag = new CasPropertyBag('foo');
     \Drupal::service('cas.user_manager')->login($cas_property_bag, 'fake_ticket_string');
 
     $this->assertFalse(user_load_by_name('foo'), 'User with name "foo" exists, but should not.');
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = user_load_by_name('testing_foo');
     $this->assertNotFalse($account, 'User with name "testing_foo" was not found.');
 
-    /** @var \Drupal\externalauth\AuthmapInterface $authmap */
+    /** @var AuthmapInterface $authmap */
     $authmap = \Drupal::service('externalauth.authmap');
 
     // Check that the external name has been registered correctly.
diff --git a/tests/src/Functional/CasForcedLoginControllerTest.php b/tests/src/Functional/CasForcedLoginControllerTest.php
index 5195bd7..4952624 100644
--- a/tests/src/Functional/CasForcedLoginControllerTest.php
+++ b/tests/src/Functional/CasForcedLoginControllerTest.php
@@ -27,7 +27,8 @@ class CasForcedLoginControllerTest extends CasBrowserTestBase {
       'server[hostname]' => 'fakecasserver.localhost',
       'server[path]' => '/auth',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $this->drupalLogout();
 
diff --git a/tests/src/Functional/CasLoginFormTest.php b/tests/src/Functional/CasLoginFormTest.php
index f30e4ea..f303003 100644
--- a/tests/src/Functional/CasLoginFormTest.php
+++ b/tests/src/Functional/CasLoginFormTest.php
@@ -31,7 +31,8 @@ class CasLoginFormTest extends CasBrowserTestBase {
       'general[login_link_enabled]' => TRUE,
       'general[login_link_label]' => 'Click here to login!',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $config = $this->config('cas.settings');
     $this->assertTrue($config->get('login_link_enabled'));
     $this->assertEquals('Click here to login!', $config->get('login_link_label'));
@@ -57,17 +58,19 @@ class CasLoginFormTest extends CasBrowserTestBase {
     $cas_user->setPassword('password');
     $cas_user->save();
     $this->container->get('cas.user_manager')->setCasUsernameForAccount($cas_user, 'cas_user');
+    $this->drupalGet('/user/login');
 
     // Log in in as normal user should work.
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'normal_user',
       'pass' => 'password',
     ], 'Log in');
     $this->assertSession()->addressEquals('/user/' . $normal_user->id());
     $this->drupalLogout();
+    $this->drupalGet('/user/login');
 
     // Log in as CAS user should not work.
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'cas_user',
       'pass' => 'password',
     ], 'Log in');
@@ -79,8 +82,9 @@ class CasLoginFormTest extends CasBrowserTestBase {
     $this->config('cas.settings')
       ->set('error_handling.message_prevent_normal_login', 'Just use the <a href="[cas:login-url]">CAS Login</a>')
       ->save();
+    $this->drupalGet('/user/login');
 
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'cas_user',
       'pass' => 'password',
     ], 'Log in');
@@ -93,11 +97,13 @@ class CasLoginFormTest extends CasBrowserTestBase {
     $edit = [
       'user_accounts[prevent_normal_login]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogout();
+    $this->drupalGet('/user/login');
 
     // Log in as CAS user should work now.
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'cas_user',
       'pass' => 'password',
     ], 'Log in');
diff --git a/tests/src/Functional/CasPasswordResetTest.php b/tests/src/Functional/CasPasswordResetTest.php
index 96ead2a..f12aa8f 100644
--- a/tests/src/Functional/CasPasswordResetTest.php
+++ b/tests/src/Functional/CasPasswordResetTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\cas\Functional;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\user\UserInterface;
 /**
  * Tests the user's ability to reset their password.
  *
@@ -12,28 +14,28 @@ class CasPasswordResetTest extends CasBrowserTestBase {
   /**
    * The CAS settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;
 
   /**
    * A user linked with a CAS account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $casUser;
 
   /**
    * A user not linked with a CAS account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $nonCasUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->settings = $this->config('cas.settings');
@@ -49,22 +51,25 @@ class CasPasswordResetTest extends CasBrowserTestBase {
   public function testPasswordResetAsAnonymous() {
     // Test with the 'user_accounts.restrict_password_management' setting off.
     $this->settings->set('user_accounts.restrict_password_management', FALSE)->save();
+    $this->drupalGet('/user/password');
 
     // Check that a CAS user is able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_with_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_with_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/login');
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
+    $this->drupalGet('/user/password');
 
     // Check that a non-CAS user is able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_without_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_without_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/login');
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
 
     // Test with the 'user_accounts.restrict_password_management' setting on.
     $this->settings->set('user_accounts.restrict_password_management', TRUE)->save();
+    $this->drupalGet('/user/password');
 
     // Check that a CAS user is not able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_with_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_with_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/password');
     $this->assertSession()->pageTextContains('The requested account is associated with CAS and its password cannot be managed from this website.');
 
@@ -74,9 +79,10 @@ class CasPasswordResetTest extends CasBrowserTestBase {
     $this->getSession()->reload();
     $this->assertSession()->pageTextContains('You cannot manage your password. Back to homepage.');
     $this->assertSession()->linkExists('homepage');
+    $this->drupalGet('/user/password');
 
     // Check that a non-CAS user is able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_without_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_without_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/login');
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
   }
@@ -94,13 +100,15 @@ class CasPasswordResetTest extends CasBrowserTestBase {
 
     // Check that a non-CAS user is able to reset their password.
     $this->drupalLogin($this->nonCasUser);
-    $this->drupalPostForm('/user/password', [], 'Submit');
+    $this->drupalGet('/user/password');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->addressEquals($this->nonCasUser->toUrl());
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
 
     // Check that a CAS user is able to reset their password.
     $this->drupalLogin($this->casUser);
-    $this->drupalPostForm('/user/password', [], 'Submit');
+    $this->drupalGet('/user/password');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->addressEquals($this->casUser->toUrl());
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
 
@@ -113,7 +121,8 @@ class CasPasswordResetTest extends CasBrowserTestBase {
 
     // Check that a non-CAS user is able to reset their password.
     $this->drupalLogin($this->nonCasUser);
-    $this->drupalPostForm('/user/password', [], 'Submit');
+    $this->drupalGet('/user/password');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->addressEquals($this->nonCasUser->toUrl());
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
   }
diff --git a/tests/src/Functional/CasSubscriberTest.php b/tests/src/Functional/CasSubscriberTest.php
index 30f20b4..cafb033 100644
--- a/tests/src/Functional/CasSubscriberTest.php
+++ b/tests/src/Functional/CasSubscriberTest.php
@@ -51,7 +51,8 @@ class CasSubscriberTest extends CasBrowserTestBase {
       'forced_login[enabled]' => TRUE,
       'forced_login[paths][pages]' => "/node/2\n/my/path",
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $config = $this->config('cas.settings');
     $this->assertTrue($config->get('forced_login.enabled'));
@@ -114,7 +115,8 @@ class CasSubscriberTest extends CasBrowserTestBase {
       'gateway[check_frequency]' => CasHelper::CHECK_ONCE,
       'gateway[paths][pages]' => "/node/1",
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $config = $this->config('cas.settings');
     $this->assertEquals(CasHelper::CHECK_ONCE, $config->get('gateway.check_frequency'));
