modules/contrib/ckeditor_mentions/ckeditor_mentions.install
modules/contrib/ckeditor_mentions/ckeditor_mentions.module
modules/contrib/ckeditor_mentions/modules/ckeditor_mentions_realname/src/Plugin/MentionsType/Realname.php
modules/contrib/ckeditor_mentions/src/Annotation/MentionsType.php
modules/contrib/ckeditor_mentions/src/CKEditorMentionEvent.php
modules/contrib/ckeditor_mentions/src/CKEditorMentionSuggestionEvent.php
modules/contrib/ckeditor_mentions/src/Controller/CKMentionsController.php
modules/contrib/ckeditor_mentions/src/Events/CKEditorEvents.php
modules/contrib/ckeditor_mentions/src/Events/CKEditorMentionEventInterface.php
modules/contrib/ckeditor_mentions/src/Events/CKEditorMentionSuggestionEventInterface.php
modules/contrib/ckeditor_mentions/src/Events/CKEditorMentionSuggestionsEvent.php
modules/contrib/ckeditor_mentions/src/Events/CKEditorMentionsEvent.php
modules/contrib/ckeditor_mentions/src/Exception/MatchIsMissingException.php
modules/contrib/ckeditor_mentions/src/MentionEventDispatcher.php
modules/contrib/ckeditor_mentions/src/MentionsType/MentionsTypeBase.php
modules/contrib/ckeditor_mentions/src/MentionsType/MentionsTypeInterface.php
modules/contrib/ckeditor_mentions/src/MentionsType/MentionsTypeManager.php
modules/contrib/ckeditor_mentions/src/MentionsType/MentionsTypeManagerInterface.php
modules/contrib/ckeditor_mentions/src/Plugin/CKEditorPlugin/Ajax.php
modules/contrib/ckeditor_mentions/src/Plugin/CKEditorPlugin/Autocomplete.php
modules/contrib/ckeditor_mentions/src/Plugin/CKEditorPlugin/Mentions.php
modules/contrib/ckeditor_mentions/src/Plugin/CKEditorPlugin/TextMatch.php
modules/contrib/ckeditor_mentions/src/Plugin/CKEditorPlugin/TextWatcher.php
modules/contrib/ckeditor_mentions/src/Plugin/CKEditorPlugin/Xml.php
modules/contrib/ckeditor_mentions/src/Plugin/MentionsType/Node.php
modules/contrib/ckeditor_mentions/src/Plugin/MentionsType/User.php
modules/contrib/ckeditor_mentions/tests/modules/ckeditor_mentions_events_test/src/EventSubscriber/CkeditorMentionsSuggestionSubscriberTest.php
modules/contrib/ckeditor_mentions/tests/modules/ckeditor_mentions_events_test/src/Exception/SuggestionSuccessTestException.php
modules/contrib/ckeditor_mentions/tests/modules/ckeditor_mentions_user_test/ckeditor_mentions_user_test.module
modules/contrib/ckeditor_mentions/tests/modules/ckeditor_mentions_user_test/src/Plugin/MentionsType/UserTest.php
modules/contrib/ckeditor_mentions/tests/src/Kernel/CkeditorMentionsEventsTest.php
modules/contrib/ckeditor_mentions/tests/src/Kernel/CkeditorMentionsUserTest.php
modules/contrib/ckeditor_mentions/tests/src/Kernel/KernelTestBase.php

19 files with changes
=====================

1) modules/contrib/ckeditor_mentions/tests/src/Kernel/KernelTestBase.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Editor.
    *
-   * @var \Drupal\editor\Entity\Editor
+   * @var Editor
    */
   protected $editor;

@@ @@
   /**
    * Filter format.
    *
-   * @var \Drupal\filter\Entity\FilterFormat
+   * @var FilterFormat
    */
   protected $format;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ckeditor_mentions/tests/src/Kernel/CkeditorMentionsUserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ckeditor_mentions\Kernel;

+use Drupal\ckeditor_mentions_user_test\Plugin\MentionsType\UserTest;
 use Drupal\user\Entity\User;

 /**
@@ @@
     $user_3->save();

     $plugin_manager = $this->container->get('plugin.manager.mentions_type');
-    /** @var \Drupal\ckeditor_mentions_user_test\Plugin\MentionsType\UserTest $plugin */
+    /** @var UserTest $plugin */
     $plugin = $plugin_manager->createInstance('user_test', [
       'match' => 'Jho',
     ]);
@@ @@
     $response = $plugin->buildResponse();

     $expected = [];
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     foreach ([$user_1, $user_2] as $user) {
       $expected[$user->id()] = [
         'id' => $user->id(),
@@ @@
         'user_name' => $user->getDisplayName(),
       ];
     }
-    $this->assertIdentical($response, $expected);
+    $this->assertSame($response, $expected);

     $plugin->setMatch('Kip');
     $response = $plugin->buildResponse();
@@ @@
     $user->save();

     $plugin_manager = $this->container->get('plugin.manager.mentions_type');
-    /** @var \Drupal\ckeditor_mentions_user_test\Plugin\MentionsType\UserTest $plugin */
+    /** @var UserTest $plugin */
     $plugin = $plugin_manager->createInstance('user_test', [
       'match' => 'test_query_alter',
     ]);
@@ @@
     $response = $plugin->buildResponse();

     $this->assertNotEmpty($response);
-    $this->assertEqual(current($response)['id'], $user->id());
+    $this->assertEquals(current($response)['id'], $user->id());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ckeditor_mentions/tests/src/Kernel/CkeditorMentionsEventsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ckeditor_mentions\Kernel;

+use Drupal\ckeditor_mentions\MentionEventDispatcher;
+use Drupal\ckeditor_mentions_user_test\Plugin\MentionsType\UserTest;
 use Drupal\ckeditor_mentions\Events\CKEditorEvents;
 use Drupal\ckeditor_mentions_events_test\EventSubscriber\CkeditorMentionsSuggestionSubscriberTest as TestSubscriber;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ @@
   /**
    * Dispatcher.
    *
-   * @var \Drupal\ckeditor_mentions\MentionEventDispatcher
+   * @var MentionEventDispatcher
    */
   protected $dispatcher;

@@ @@
     $entities = $this->dispatcher->getMentionedEntities($search_string);

     $this->assertNotEmpty($entities);
-    $this->assertEqual($entities[$id]['entity']->id(), $user->id());
+    $this->assertEquals($entities[$id]['entity']->id(), $user->id());

     $search_string = "<p><a data-mention=\"$id\" data-plugin=\"not_existing\" href=\"/user/3\">@Kekwinko Pesto</a></p>";
     $this->expectException(PluginNotFoundException::class);
@@ @@
    */
   public function testTestFormatUsingMentions() {
     $formats = $this->dispatcher->getTexformatsUsingMentions();
-    $this->assertEqual([$this->format->id()], $formats);
+    $this->assertEquals([$this->format->id()], $formats);

     $setting = $this->editor->getSettings();
     $setting['plugins']['mentions']['enable'] = FALSE;
@@ @@
     ]);

     $this->dispatcher->dispatchMentionEvent($node, CKEditorEvents::MENTION_FIRST);
-    $this->assertEqual($node->getTitle(), TestSubscriber::TEST_MENTIONED_USER_NAME);
+    $this->assertEquals($node->getTitle(), TestSubscriber::TEST_MENTIONED_USER_NAME);
   }

   /**
@@ @@
     $user->save();

     $plugin_manager = $this->container->get('plugin.manager.mentions_type');
-    /** @var \Drupal\ckeditor_mentions_user_test\Plugin\MentionsType\UserTest $plugin */
+    /** @var UserTest $plugin */
     $plugin = $plugin_manager->createInstance('user_test', [
       'match' => TestSubscriber::TEST_SUGGESTION_KEYWORD,
     ]);
     $response = $plugin->buildResponse();

-    $this->assertEqual($response, TestSubscriber::TEST_SUGGESTION_EXPECT);
+    $this->assertEquals($response, TestSubscriber::TEST_SUGGESTION_EXPECT);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ckeditor_mentions/tests/modules/ckeditor_mentions_user_test/ckeditor_mentions_user_test.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ckeditor_mentions_user_test\Plugin\MentionsType\UserTest;
 /**
  * @file
  * Contain main hooks for ckeditor_mentions_user_test module.
@@ @@
  * Implements hook_query_TAG_alter().
  */
 function ckeditor_mentions_user_test_query_ckeditor_mentions_user_test_alter(AlterableInterface $query) {
-  /** @var \Drupal\ckeditor_mentions_user_test\Plugin\MentionsType\UserTest $plugin */
+  /** @var UserTest $plugin */
   $plugin = $query->getMetaData('plugin');
   if ($plugin->getMatch() === 'test_query_alter') {
     $conditions = &$query->conditions()[0]['field']->conditions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/ckeditor_mentions/tests/modules/ckeditor_mentions_events_test/src/EventSubscriber/CkeditorMentionsSuggestionSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor_mentions_events_test\EventSubscriber;

+use Drupal\node\NodeInterface;
 use Drupal\ckeditor_mentions\Events\CKEditorEvents;
 use Drupal\ckeditor_mentions\Events\CKEditorMentionsEvent;
 use Drupal\ckeditor_mentions\Events\CKEditorMentionSuggestionsEvent;
@@ @@
   /**
    * Change suggestions.
    *
-   * @param \Drupal\ckeditor_mentions\Events\CKEditorMentionSuggestionsEvent $event
+   * @param CKEditorMentionSuggestionsEvent $event
    *   The suggestion event.
    */
   public function onSuggestion(CKEditorMentionSuggestionsEvent $event) {
@@ @@
   /**
    * Change suggestions.
    *
-   * @param \Drupal\ckeditor_mentions\Events\CKEditorMentionsEvent $event
+   * @param CKEditorMentionsEvent $event
    *   The mentions' event.
    */
   public function onMentions(CKEditorMentionsEvent $event) {
     if ($event->getMentionedEntity()->getDisplayName() === self::TEST_MENTIONED_USER_NAME) {
-      /** @var \Drupal\node\NodeInterface $node */
+      /** @var NodeInterface $node */
       $node = $event->getEntity();
       $node->setTitle(self::TEST_MENTIONED_USER_NAME);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/ckeditor_mentions/src/Plugin/MentionsType/User.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor_mentions\Plugin\MentionsType;

+use Drupal\Core\Extension\ModuleHandler;
+use Drupal\image\Entity\ImageStyle;
 use Drupal\ckeditor_mentions\MentionsType\MentionsTypeBase;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@

     // The image style to use.
     // Move style type into configuration?
-    /** @var \Drupal\image\Entity\ImageStyle $style */
+    /** @var ImageStyle $style */
     $style = $this->entityManager->getStorage('image_style')->load('mentions_icon');

     foreach ($entities as $id => $user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/ckeditor_mentions/src/Plugin/MentionsType/Node.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritDoc}
    *
-   * @param \Drupal\node\NodeInterface[] $entities
+   * @param NodeInterface[] $entities
    *   Entities.
    */
   public function buildTokens(array $entities): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/ckeditor_mentions/src/Plugin/CKEditorPlugin/Mentions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor_mentions\Plugin\CKEditorPlugin;

+use Drupal\ckeditor_mentions\MentionsType\MentionsTypeManager;
+use Drupal\ckeditor_mentions\MentionsType\MentionsTypeBase;
 use Drupal\ckeditor\CKEditorPluginBase;
 use Drupal\ckeditor\CKEditorPluginConfigurableInterface;
 use Drupal\ckeditor\CKEditorPluginContextualInterface;
@@ @@
   /**
    * Mentions Plugin Manager.
    *
-   * @var \Drupal\ckeditor_mentions\MentionsType\MentionsTypeManager
+   * @var MentionsTypeManager
    */
   protected $mentionsPluginManager;

@@ @@
     $settings = $editor->getSettings()['plugins']['mentions'];

     $type = $settings['mentions_type'];
-    /** @var \Drupal\ckeditor_mentions\MentionsType\MentionsTypeBase $plugin */
+    /** @var MentionsTypeBase $plugin */
     $plugin = $this->mentionsPluginManager->createInstance($type);

     $config = [
@@ @@
    *
    * @param array $element
    *   The Form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The FormState Object.
    */
   public function isRequired(array $element, FormStateInterface $form_state) {
@@ @@
   /**
    * Get current values from form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/ckeditor_mentions/src/MentionsType/MentionsTypeManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/ckeditor_mentions/src/MentionsType/MentionsTypeBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor_mentions\MentionsType;

+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\ckeditor_mentions\CKEditorMentionSuggestionEvent;
 use Drupal\ckeditor_mentions\Events\CKEditorMentionSuggestionsEvent;
 use Drupal\ckeditor_mentions\Events\CKEditorEvents;
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityManager;

@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Add required tags and metadata to the query.
    *
-   * @param \Drupal\Core\Database\Query\AlterableInterface $query
+   * @param AlterableInterface $query
    *   Query to preprocess.
    */
   protected function preprocessQuery(AlterableInterface $query) {
@@ @@
   /**
    * Build the query.
    *
-   * @return \Drupal\Core\Database\Query\AlterableInterface
+   * @return AlterableInterface
    *   The query.
    */
   protected function buildQuery(): AlterableInterface {
@@ @@
   /**
    * Get the query for plugin.
    *
-   * @return \Drupal\Core\Database\Query\AlterableInterface
+   * @return AlterableInterface
    *   Query.
    */
   abstract protected function getQuery(): AlterableInterface;
@@ @@
    */
   protected function dispatchSuggestionsEvent(array $suggestions): array {
     $suggestion_event = new CKEditorMentionSuggestionsEvent($this->getMatch(), $suggestions);
-    $this->eventDispatcher->dispatch(CKEditorEvents::SUGGESTION, $suggestion_event);
+    $this->eventDispatcher->dispatch($suggestion_event, CKEditorEvents::SUGGESTION);
     // @todo Remove in 3.0
     $suggestion_event_legacy = new CKEditorMentionSuggestionEvent($this->getMatch());
     $suggestion_event_legacy->setSuggestions($suggestion_event->getSuggestions());
-    $this->eventDispatcher->dispatch(CKEditorMentionSuggestionEvent::SUGGESTION, $suggestion_event);
+    $this->eventDispatcher->dispatch($suggestion_event, CKEditorMentionSuggestionEvent::SUGGESTION);

     return $suggestion_event_legacy->getSuggestions();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/ckeditor_mentions/src/MentionEventDispatcher.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor_mentions;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\ckeditor_mentions\Plugin\CKEditorPlugin\Mentions;
+use Drupal\editor\Entity\Editor;
+use Drupal\ckeditor_mentions\MentionsType\MentionsTypeBase;
 use Drupal\ckeditor\CKEditorPluginManager;
 use Drupal\ckeditor_mentions\Events\CKEditorEvents;
 use Drupal\ckeditor_mentions\Events\CKEditorMentionsEvent;
@@ @@
   /**
    * ConfigFactory Service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityManager;

@@ @@
   /**
    * Mentions type manager.
    *
-   * @var \Drupal\ckeditor_mentions\MentionsType\MentionsTypeManagerInterface
+   * @var MentionsTypeManagerInterface
    */
   protected $mentionsTypeManager;

@@ @@
   /**
    * Ckeditor plugin manager.
    *
-   * @var \Drupal\ckeditor\CKEditorPluginManager
+   * @var CKEditorPluginManager
    */
   protected $ckeditorPluginManager;

@@ @@
   /**
    * MentionService constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A configuration factory instance.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\ckeditor_mentions\MentionsType\MentionsTypeManagerInterface $mentionsTypeManager
+   * @param MentionsTypeManagerInterface $mentionsTypeManager
    *   Mentions type.
-   * @param \Drupal\ckeditor\CKEditorPluginManager $ckeditor_plugin_manager
+   * @param CKEditorPluginManager $ckeditor_plugin_manager
    *   Ckeditor plugin manager.
    */
   public function __construct(AccountInterface $current_user,
@@ @@
   /**
    * Triggers the Mention Event.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Trigger the mention event.
    * @param string $event_name
    *   The name of the event.
@@ @@
     // @todo Remove in 3.0
     foreach ($mentioned_entities as $mentioned_entity) {
       $event = new CKEditorMentionsEvent($entity, $mentioned_entity['entity'], $mentioned_entity['plugin'], $mentioned_entity);
-      $dispatcher->dispatch($event_name, $event);
+      $dispatcher->dispatch($event, $event_name);

       $legacy_event_name = $event_name === CKEditorEvents::MENTION_FIRST ? CKEditorMentionEvent::MENTION_FIRST : CKEditorMentionEvent::MENTION_SUBSEQUENT;
       $legacy_event = new CKEditorMentionEvent($event->getEntity(), [
@@ @@
         'entity' => $event->getMentionedEntity(),
         'plugin' => $event->getPlugin(),
       ] + $event->getAdditionalInformation());
-      $dispatcher->dispatch($legacy_event_name, $legacy_event);
+      $dispatcher->dispatch($legacy_event, $legacy_event_name);
     }
   }

@@ @@
    * The first key is the user id, the next key is the field_name where the
    * user was mentioned and finally the deltas of the fields.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity from which will get the mentions.
    *
    * @return array
@@ @@
   public function getTexformatsUsingMentions(): array {
     $editor_using_mentions = [];
     $editors = $this->entityManager->getStorage('editor')->loadByProperties(['editor' => 'ckeditor']);
-    /** @var \Drupal\ckeditor_mentions\Plugin\CKEditorPlugin\Mentions $mentions_plugin */
+    /** @var Mentions $mentions_plugin */
     $mentions_plugin = $this->ckeditorPluginManager->createInstance('mentions');
-    /** @var \Drupal\editor\Entity\Editor $editor */
+    /** @var Editor $editor */
     foreach ($editors as $editor) {
       if ($mentions_plugin->isEnabled($editor)) {
         $editor_using_mentions[] = $editor->id();
@@ @@
         continue;
       }

-      /** @var \Drupal\ckeditor_mentions\MentionsType\MentionsTypeBase $plugin */
+      /** @var MentionsTypeBase $plugin */
       $plugin = $plugins[$plugin_id] = $plugins[$plugin_id] ?? $this->mentionsTypeManager->createInstance($plugin_id);

       $mentioned_entities[$entity_id] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


12) modules/contrib/ckeditor_mentions/src/Events/CKEditorMentionsEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor_mentions\Events;

+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\user\UserInterface;
 use Drupal\ckeditor_mentions\MentionsType\MentionsTypeInterface;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class provide the mention event.
@@ @@
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $entity;

@@ @@
   /**
    * The users mentioned in the entity.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   public $mentionedEntity;

@@ @@
   /**
    * Mentions type plugin.
    *
-   * @var \Drupal\ckeditor_mentions\MentionsType\MentionsTypeInterface
+   * @var MentionsTypeInterface
    */
   public $plugin;

@@ @@
   /**
    * CKEditorMentionsEvent constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity that triggered the event.
-   * @param \Drupal\Core\Entity\EntityInterface $mentioned_entity
+   * @param EntityInterface $mentioned_entity
    *   Entity mentioned in the entity.
-   * @param \Drupal\ckeditor_mentions\MentionsType\MentionsTypeInterface $plugin
+   * @param MentionsTypeInterface $plugin
    *   Mentions type plugin.
    * @param array $additionalInformation
    *   Additional information.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/ckeditor_mentions/src/Events/CKEditorMentionSuggestionsEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor_mentions\Events;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Provides a Ckeditor mentions suggestion event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/ckeditor_mentions/src/Events/CKEditorMentionEventInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the reference ID.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The reference Id.
    */
   public function getEntity(): EntityInterface;
@@ @@
   /**
    * Sets the Entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity that triggered the event.
    */
   public function setEntity(EntityInterface $entity);
@@ @@
   /**
    * Returns an array with the mentioned users.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   An array with the mentioned users.
    */
   public function getMentionedEntity(): EntityInterface;
@@ @@
   /**
    * Sets the list of the mentioned users.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $mentioned_user
+   * @param EntityInterface $mentioned_user
    *   The mentioned user ID.
    */
   public function setMentionedEntity(EntityInterface $mentioned_user);
@@ @@
   /**
    * Get mentions type plugin.
    *
-   * @return \Drupal\ckeditor_mentions\MentionsType\MentionsTypeInterface
+   * @return MentionsTypeInterface
    *   Plugin.
    */
   public function getPlugin(): MentionsTypeInterface;
@@ @@
   /**
    * Set mentions plugin.
    *
-   * @param \Drupal\ckeditor_mentions\MentionsType\MentionsTypeInterface $mentionsType
+   * @param MentionsTypeInterface $mentionsType
    *   Mentions type.
    */
   public function setPlugin(MentionsTypeInterface $mentionsType);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/ckeditor_mentions/src/Controller/CKMentionsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor_mentions\Controller;

+use Drupal\ckeditor_mentions\MentionsType\MentionsTypeBase;
 use Drupal\ckeditor_mentions\MentionsType\MentionsTypeManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Mention type manager.
    *
-   * @var \Drupal\ckeditor_mentions\MentionsType\MentionsTypeManagerInterface
+   * @var MentionsTypeManagerInterface
    */
   protected $mentionsManager;

@@ @@
   /**
    * CKMentionsController constructor.
    *
-   * @param \Drupal\ckeditor_mentions\MentionsType\MentionsTypeManagerInterface $mentionsTypeManager
+   * @param MentionsTypeManagerInterface $mentionsTypeManager
    *   Mention type manager.
    */
   public function __construct(MentionsTypeManagerInterface $mentionsTypeManager) {
@@ @@
    * @param string $match
    *   Match value.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Json of matches.
    */
   public function getMatch(string $plugin_id, string $match = ''): JsonResponse {
@@ @@
     // Replace nbsp with real spaces.
     $match = str_replace("\xc2\xa0", ' ', $match);

-    /** @var \Drupal\ckeditor_mentions\MentionsType\MentionsTypeBase $plugin */
+    /** @var MentionsTypeBase $plugin */
     $plugin = $this->mentionsManager->createInstance($plugin_id, [
       'match' => $match,
     ]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/ckeditor_mentions/src/CKEditorMentionSuggestionEvent.php:2

    ---------- begin diff ----------
@@ @@
 // @codingStandardsIgnoreFile
 namespace Drupal\ckeditor_mentions;

+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\ckeditor_mentions\Events\CKEditorMentionSuggestionsEvent;
 use Drupal\ckeditor_mentions\Events\CKEditorMentionSuggestionEventInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class CKEditorMentionSuggestionEvent.
@@ @@
   /**
    * Event CKEditorMentionSuggestionEvent.
    *
-   * @var \Drupal\ckeditor_mentions\Events\CKEditorMentionSuggestionsEvent
+   * @var CKEditorMentionSuggestionsEvent
    */
   protected $event;

@@ @@
    *   The keyword  used by the user.
    */
   public function __construct(string $keyword) {
-    $this->event = new Events\CKEditorMentionSuggestionsEvent($keyword, []);
+    $this->event = new CKEditorMentionSuggestionsEvent($keyword, []);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/ckeditor_mentions/src/CKEditorMentionEvent.php:2

    ---------- begin diff ----------
@@ @@
 // @codingStandardsIgnoreFile
 namespace Drupal\ckeditor_mentions;

+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\ckeditor_mentions\Events\CKEditorMentionsEvent;
 use Drupal\ckeditor_mentions\Events\CKEditorMentionEventInterface;
 use Drupal\ckeditor_mentions\MentionsType\MentionsTypeInterface;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class provide the mention event.
@@ @@
   /**
    * CKEditorMentionEvent Event.
    *
-   * @var \Drupal\ckeditor_mentions\Events\CKEditorMentionsEvent
+   * @var CKEditorMentionsEvent
    */
   protected $event;

@@ @@
   /**
    * CKEditorMentionEvent constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity that triggered the event.
    * @param array $mentioned_entity
    *   The users mentioned in the entity.
    */
   public function __construct(EntityInterface $entity, array $information = []) {
-    $this->event = new Events\CKEditorMentionsEvent($entity, $information['entity'], $information['plugin'], $information);
+    $this->event = new CKEditorMentionsEvent($entity, $information['entity'], $information['plugin'], $information);
   }

   /**
@@ @@
   /**
    * Sets the Entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity that triggered the event.
    */
   public function setEntity(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/ckeditor_mentions/src/Annotation/MentionsType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor_mentions\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the action plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


19) modules/contrib/ckeditor_mentions/ckeditor_mentions.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ckeditor\CKEditorPluginManager;
+use Drupal\ckeditor_mentions\Plugin\CKEditorPlugin\Mentions;
 /**
  * @file
  * Contains installation and update scripts.
@@ @@
  */
 function _ckeditor_mentions_get_uninstalled_plugins() {
   $uninstalled_plugins = [];
-  /** @var \Drupal\ckeditor\CKEditorPluginManager $ckeditor_plugin_manager */
+  /** @var CKEditorPluginManager $ckeditor_plugin_manager */
   $ckeditor_plugin_manager = \Drupal::service('plugin.manager.ckeditor.plugin');
-  /** @var \Drupal\ckeditor_mentions\Plugin\CKEditorPlugin\Mentions $mentions_plugin */
+  /** @var Mentions $mentions_plugin */
   $mentions_plugin = $ckeditor_plugin_manager->createInstance('mentions');

   // We just need to mock-up editor, and to make sure that it exists.
@@ @@
  */
 function _ckeditor_mentions_mentions_map(callable $settings_processor) {
   $editors = \Drupal::entityTypeManager()->getStorage('editor')->loadMultiple();
-  /** @var \Drupal\ckeditor\CKEditorPluginManager $ckeditor_plugin_manager */
+  /** @var CKEditorPluginManager $ckeditor_plugin_manager */
   $ckeditor_plugin_manager = \Drupal::service('plugin.manager.ckeditor.plugin');
-  /** @var \Drupal\ckeditor_mentions\Plugin\CKEditorPlugin\Mentions $mentions_plugin */
+  /** @var Mentions $mentions_plugin */
   $mentions_plugin = $ckeditor_plugin_manager->createInstance('mentions');
-  /** @var \Drupal\editor\Entity\Editor $editor */
+  /** @var Editor $editor */
   foreach ($editors as $editor) {
     $settings = $editor->getSettings();
     if ($mentions_plugin->isEnabled($editor) && $settings_processor($settings)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 4 nodes were removed                                                 

 [OK] 19 files have been changed by Rector                                      

