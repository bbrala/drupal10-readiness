diff --git a/src/Annotation/DataFilter.php b/src/Annotation/DataFilter.php
index d27f51b..f627421 100644
--- a/src/Annotation/DataFilter.php
+++ b/src/Annotation/DataFilter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_data\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class DataFilter extends Plugin {
   /**
    * The human-readable name of the filter.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/TypedDataFormWidget.php b/src/Annotation/TypedDataFormWidget.php
index 99f33e5..9aa93ff 100644
--- a/src/Annotation/TypedDataFormWidget.php
+++ b/src/Annotation/TypedDataFormWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_data\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class TypedDataFormWidget extends Plugin {
   /**
    * The human-readable name of the widget.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class TypedDataFormWidget extends Plugin {
   /**
    * The human-readable description of the widget.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Context/Annotation/ContextDefinition.php b/src/Context/Annotation/ContextDefinition.php
index 8bf2028..49d6e71 100644
--- a/src/Context/Annotation/ContextDefinition.php
+++ b/src/Context/Annotation/ContextDefinition.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_data\Context\Annotation;
 
+use Drupal\typed_data\Context\ContextDefinitionInterface;
 use Drupal\Core\Annotation\ContextDefinition as CoreContextDefinition;
 use Drupal\Core\Annotation\Translation;
 use Drupal\typed_data\Context\ContextDefinition as TypedDataContextDefinition;
@@ -21,7 +22,7 @@ class ContextDefinition extends CoreContextDefinition {
   /**
    * The ContextDefinitionInterface object.
    *
-   * @var \Drupal\typed_data\Context\ContextDefinitionInterface
+   * @var ContextDefinitionInterface
    */
   protected $definition;
 
@@ -41,7 +42,7 @@ class ContextDefinition extends CoreContextDefinition {
   /**
    * Returns the value of an annotation.
    *
-   * @return \Drupal\typed_data\Context\ContextDefinitionInterface
+   * @return ContextDefinitionInterface
    *   Return the Typed Data version of the ContextDefinitionInterface.
    */
   public function get() {
diff --git a/src/Context/ContextDefinition.php b/src/Context/ContextDefinition.php
index 24944c5..79e98f9 100644
--- a/src/Context/ContextDefinition.php
+++ b/src/Context/ContextDefinition.php
@@ -67,7 +67,7 @@ class ContextDefinition extends ContextDefinitionCore implements ContextDefiniti
    * @return static
    *   The created definition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
+   * @throws ContextException
    *   If the required classes are not implemented.
    */
   public static function createFromArray(array $values) {
diff --git a/src/DataFetcher.php b/src/DataFetcher.php
index c21d01b..e0ddf45 100644
--- a/src/DataFetcher.php
+++ b/src/DataFetcher.php
@@ -279,7 +279,7 @@ class DataFetcher implements DataFetcherInterface {
   /**
    * Generates autocomplete suggestions for a matched data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The data definition to inspect.
    * @param string $variable_name
    *   The variable name or property path.
@@ -319,9 +319,9 @@ class DataFetcher implements DataFetcherInterface {
   /**
    * Adds the bubbleable metadata of the given data.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The data of which to add the metadata.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metadata to which to add the data.
    */
   protected function addBubbleableMetadata(TypedDataInterface $data, BubbleableMetadata $bubbleable_metadata) {
diff --git a/src/DataFetcherInterface.php b/src/DataFetcherInterface.php
index d16c9f6..71ff061 100644
--- a/src/DataFetcherInterface.php
+++ b/src/DataFetcherInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\typed_data;
 
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\typed_data\Exception\InvalidArgumentException;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\TypedData\DataDefinitionInterface;
 use Drupal\Core\TypedData\TypedDataInterface;
@@ -14,23 +16,23 @@ interface DataFetcherInterface {
   /**
    * Fetches data based upon the given property path.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $typed_data
+   * @param TypedDataInterface $typed_data
    *   The data from which to select a value.
    * @param string $property_path
    *   The property path string, e.g. "uid.entity.mail.value".
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which required bubbleable metadata will be added.
    * @param string $langcode
    *   (optional) The language code used to get the argument value if the
    *   argument value should be translated. Defaults to NULL.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The variable wrapped as typed data.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    *   Thrown if the data cannot be fetched due to missing data; e.g., unset
    *   properties or list items.
-   * @throws \Drupal\typed_data\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   Thrown if the given path is not valid for the given data; e.g., a not
    *   existing property is referenced.
    */
@@ -39,23 +41,23 @@ interface DataFetcherInterface {
   /**
    * Fetches data based upon the given sub-paths.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $typed_data
+   * @param TypedDataInterface $typed_data
    *   The data from which to select a value.
    * @param string[] $sub_paths
    *   A list of sub paths; i.e., a property path separated into its parts.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which required bubbleable metadata will be added.
    * @param string $langcode
    *   (optional) The language code used to get the argument value if the
    *   argument value should be translated. Defaults to NULL.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The variable wrapped as typed data.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    *   Thrown if the data cannot be fetched due to missing data; e.g., unset
    *   properties or list items.
-   * @throws \Drupal\typed_data\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   Thrown if the given path is not valid for the given data; e.g., a not
    *   existing property is referenced.
    */
@@ -64,7 +66,7 @@ interface DataFetcherInterface {
   /**
    * Fetches a data definition based upon the given property path.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The data definition from which to retrieve a nested definition.
    * @param string $property_path
    *   The property path string, e.g. "uid.entity.mail.value".
@@ -72,10 +74,10 @@ interface DataFetcherInterface {
    *   (optional) The language code used to get the argument value if the
    *   argument value should be translated. Defaults to NULL.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   The data definition of the target.
    *
-   * @throws \Drupal\typed_data\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   Thrown if the given path is not valid for the given data; e.g., a not
    *   existing property is referenced.
    */
@@ -84,7 +86,7 @@ interface DataFetcherInterface {
   /**
    * Fetches a data definition based upon the given sub-paths.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The data definition from which to retrieve a nested definition.
    * @param string[] $sub_paths
    *   A list of sub paths; i.e., a property path separated into its parts.
@@ -92,10 +94,10 @@ interface DataFetcherInterface {
    *   (optional) The language code used to get the argument value if the
    *   argument value should be translated. Defaults to NULL.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   The data definition of the target.
    *
-   * @throws \Drupal\typed_data\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   Thrown if the given path is not valid for the given data; e.g., a not
    *   existing property is referenced.
    */
@@ -104,7 +106,7 @@ interface DataFetcherInterface {
   /**
    * Provides autocomplete suggestions for an incomplete property path.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface[] $data_definitions
+   * @param DataDefinitionInterface[] $data_definitions
    *   A map of available data definitions that should be seareched. The array
    *   keys are the first part of the property path.
    * @param string $partial_property_path
diff --git a/src/DataFetcherTrait.php b/src/DataFetcherTrait.php
index 0c37e14..295c05e 100644
--- a/src/DataFetcherTrait.php
+++ b/src/DataFetcherTrait.php
@@ -10,14 +10,14 @@ trait DataFetcherTrait {
   /**
    * The data fetcher.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;
 
   /**
    * Sets the data fetcher.
    *
-   * @param \Drupal\typed_data\DataFetcherInterface $data_fetcher
+   * @param DataFetcherInterface $data_fetcher
    *   The data fetcher.
    *
    * @return $this
@@ -30,7 +30,7 @@ trait DataFetcherTrait {
   /**
    * Gets the data fetcher.
    *
-   * @return \Drupal\typed_data\DataFetcherInterface
+   * @return DataFetcherInterface
    *   The data fetcher.
    */
   public function getDataFetcher() {
diff --git a/src/DataFilterInterface.php b/src/DataFilterInterface.php
index ee02b12..a736cf6 100644
--- a/src/DataFilterInterface.php
+++ b/src/DataFilterInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_data;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\TypedData\DataDefinitionInterface;
 
@@ -19,13 +20,13 @@ interface DataFilterInterface {
   /**
    * Filters the given data value.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the filtered data.
    * @param mixed $value
    *   The value for which to apply the filter.
    * @param array $arguments
    *   The array of filter arguments.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which required bubbleable metadata will be added.
    *
    * @return mixed
@@ -36,7 +37,7 @@ interface DataFilterInterface {
   /**
    * Determines whether data based upon the given definition can be filtered.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the filtered data.
    *
    * @return bool
@@ -47,12 +48,12 @@ interface DataFilterInterface {
   /**
    * Describes the data after applying the filter.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the filtered data.
    * @param string[] $arguments
    *   The array of filter arguments.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   The definition of the resulting data.
    */
   public function filtersTo(DataDefinitionInterface $definition, array $arguments);
@@ -78,7 +79,7 @@ interface DataFilterInterface {
    *
    * This is used to provide sensible auto-completion.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the filtered data.
    * @param string[] $arguments
    *   The array of filter arguments, which have been already inputted.
@@ -97,12 +98,12 @@ interface DataFilterInterface {
    * Determines whether the given arguments have a valid syntax and can be
    * applied to data of the given definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the filtered data.
    * @param string[] $arguments
    *   The array of filter arguments.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]|string[]
+   * @return TranslatableMarkup[]|string[]
    *   An array of translated validation error messages. If the arguments are
    *   valid, an empty array must be returned.
    */
diff --git a/src/DataFilterManagerInterface.php b/src/DataFilterManagerInterface.php
index 2b090c7..f8772d6 100644
--- a/src/DataFilterManagerInterface.php
+++ b/src/DataFilterManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_data;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginManagerInterface;
 
 /**
@@ -18,10 +19,10 @@ interface DataFilterManagerInterface extends PluginManagerInterface {
    *   An array of configuration relevant to the plugin instance. As this plugin
    *   is not configurable, this is unused and should stay empty.
    *
-   * @return \Drupal\typed_data\DataFilterInterface
+   * @return DataFilterInterface
    *   A fully configured plugin instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []);
diff --git a/src/Form/SubformState.php b/src/Form/SubformState.php
index de684c2..e41c968 100644
--- a/src/Form/SubformState.php
+++ b/src/Form/SubformState.php
@@ -31,7 +31,7 @@ class SubformState extends CoreSubformState {
    *   array parents would be "fieldset" and "parent".
    * @param mixed[] $parentForm
    *   The subform's complete parent form array.
-   * @param \Drupal\Core\Form\FormStateInterface $parentFormState
+   * @param FormStateInterface $parentFormState
    *   The parent form state.
    *
    * @return static
diff --git a/src/PlaceholderResolver.php b/src/PlaceholderResolver.php
index 8783a75..fc4c0d2 100644
--- a/src/PlaceholderResolver.php
+++ b/src/PlaceholderResolver.php
@@ -18,23 +18,23 @@ class PlaceholderResolver implements PlaceholderResolverInterface {
   /**
    * The typed data manager.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;
 
   /**
    * The data filter manager.
    *
-   * @var \Drupal\typed_data\DataFilterManagerInterface
+   * @var DataFilterManagerInterface
    */
   protected $dataFilterManager;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\typed_data\DataFetcherInterface $data_fetcher
+   * @param DataFetcherInterface $data_fetcher
    *   The typed data manager.
-   * @param \Drupal\typed_data\DataFilterManagerInterface $data_filter_manager
+   * @param DataFilterManagerInterface $data_filter_manager
    *   The data filter manager.
    */
   public function __construct(DataFetcherInterface $data_fetcher, DataFilterManagerInterface $data_filter_manager) {
@@ -120,7 +120,7 @@ class PlaceholderResolver implements PlaceholderResolverInterface {
    *     entry is another numerically indexed array containing two items: the
    *     the filter id and the array of filter arguments.
    *
-   * @throws \Drupal\typed_data\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   Thrown if in invalid placeholders are to be parsed.
    */
   protected function parseMainPlaceholderPart($main_part, $placeholder) {
diff --git a/src/PlaceholderResolverInterface.php b/src/PlaceholderResolverInterface.php
index 7c8c301..b80c765 100644
--- a/src/PlaceholderResolverInterface.php
+++ b/src/PlaceholderResolverInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\typed_data;
 
+use Drupal\Core\TypedData\TypedDataInterface;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Render\BubbleableMetadata;
 
 /**
@@ -27,10 +29,10 @@ interface PlaceholderResolverInterface {
    *   An HTML string containing replaceable tokens. The caller is responsible
    *   for calling \Drupal\Component\Utility\Html::escape() in case the $text
    *   was plain text.
-   * @param \Drupal\Core\TypedData\TypedDataInterface[] $data
+   * @param TypedDataInterface[] $data
    *   The data to use for generating values for the placeholder, keyed by
    *   name.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which required bubbleable metadata will be added.
    *   Refer to ::replacePlaceHolders() for further details.
    * @param array $options
@@ -41,7 +43,7 @@ interface PlaceholderResolverInterface {
    *   - clear: A boolean flag indicating that tokens should be removed from the
    *     final text if no replacement value can be generated. Defaults to FALSE.
    *
-   * @return \Drupal\Component\Render\MarkupInterface[]
+   * @return MarkupInterface[]
    *   An array of replacement values for the placeholders contained in the
    *   text, keyed by placeholder.
    */
@@ -64,10 +66,10 @@ interface PlaceholderResolverInterface {
    *
    * @param string $text
    *   The text containing the placeholders.
-   * @param \Drupal\Core\TypedData\TypedDataInterface[] $data
+   * @param TypedDataInterface[] $data
    *   The data to use for generating values for the placeholder, keyed by
    *   name.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which required bubbleable metadata will be added.
    * @param array $options
    *   (optional) A keyed array of settings and flags to control the token
diff --git a/src/PlaceholderResolverTrait.php b/src/PlaceholderResolverTrait.php
index 0c7726b..8c6e604 100644
--- a/src/PlaceholderResolverTrait.php
+++ b/src/PlaceholderResolverTrait.php
@@ -10,14 +10,14 @@ trait PlaceholderResolverTrait {
   /**
    * The placeholder resolver.
    *
-   * @var \Drupal\typed_data\PlaceholderResolverInterface
+   * @var PlaceholderResolverInterface
    */
   protected $placeholderResolver;
 
   /**
    * Sets the placeholder resolver.
    *
-   * @param \Drupal\typed_data\PlaceholderResolverInterface $placeholder_resolver
+   * @param PlaceholderResolverInterface $placeholder_resolver
    *   The placeholder resolver.
    *
    * @return $this
@@ -30,7 +30,7 @@ trait PlaceholderResolverTrait {
   /**
    * Gets the placeholder resolver.
    *
-   * @return \Drupal\typed_data\PlaceholderResolverInterface
+   * @return PlaceholderResolverInterface
    *   The placeholder resolver.
    */
   public function getPlaceholderResolver() {
diff --git a/src/Plugin/TypedDataFilter/FormatDateFilter.php b/src/Plugin/TypedDataFilter/FormatDateFilter.php
index 76a5a08..224ddaf 100644
--- a/src/Plugin/TypedDataFilter/FormatDateFilter.php
+++ b/src/Plugin/TypedDataFilter/FormatDateFilter.php
@@ -26,14 +26,14 @@ class FormatDateFilter extends DataFilterBase implements ContainerFactoryPluginI
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The date format storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateFormatStorage;
 
@@ -46,9 +46,9 @@ class FormatDateFilter extends DataFilterBase implements ContainerFactoryPluginI
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter to use.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $date_format_storage
+   * @param EntityStorageInterface $date_format_storage
    *   The date format storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DateFormatterInterface $date_formatter, EntityStorageInterface $date_format_storage) {
diff --git a/src/Plugin/TypedDataFormWidget/DatetimeRangeWidget.php b/src/Plugin/TypedDataFormWidget/DatetimeRangeWidget.php
index 03e6326..afadb30 100644
--- a/src/Plugin/TypedDataFormWidget/DatetimeRangeWidget.php
+++ b/src/Plugin/TypedDataFormWidget/DatetimeRangeWidget.php
@@ -126,7 +126,7 @@ class DatetimeRangeWidget extends FormWidgetBase {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/Widget/FormWidgetBase.php b/src/Widget/FormWidgetBase.php
index 4efbe76..a8e7127 100644
--- a/src/Widget/FormWidgetBase.php
+++ b/src/Widget/FormWidgetBase.php
@@ -17,7 +17,7 @@ abstract class FormWidgetBase extends PluginBase implements FormWidgetInterface,
   /**
    * The typed data plugin manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
@@ -30,7 +30,7 @@ abstract class FormWidgetBase extends PluginBase implements FormWidgetInterface,
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed data plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TypedDataManagerInterface $typed_data_manager) {
diff --git a/src/Widget/FormWidgetInterface.php b/src/Widget/FormWidgetInterface.php
index ef4da8d..75f7a1d 100644
--- a/src/Widget/FormWidgetInterface.php
+++ b/src/Widget/FormWidgetInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_data\Widget;
 
+use Drupal\typed_data\Context\ContextDefinitionInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Form\SubformStateInterface;
@@ -17,7 +18,7 @@ interface FormWidgetInterface extends ConfigurableInterface, PluginInspectionInt
   /**
    * Returns if the widget can be used for the provided data.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the edited data.
    *
    * @return bool
@@ -36,9 +37,9 @@ interface FormWidgetInterface extends ConfigurableInterface, PluginInspectionInt
    * them as ad-hoc $element['#custom'] properties, for later use by its element
    * callbacks.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The data to be edited.
-   * @param \Drupal\Core\Form\SubformStateInterface $form_state
+   * @param SubformStateInterface $form_state
    *   The form state of the widget's form.
    *
    * @return array[]
@@ -50,9 +51,9 @@ interface FormWidgetInterface extends ConfigurableInterface, PluginInspectionInt
   /**
    * Extracts the data value from submitted form values.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The data to be updated with the submitted form values.
-   * @param \Drupal\Core\Form\SubformStateInterface $form_state
+   * @param SubformStateInterface $form_state
    *   The form state of the widget's form.
    */
   public function extractFormValues(TypedDataInterface $data, SubformStateInterface $form_state);
@@ -67,11 +68,11 @@ interface FormWidgetInterface extends ConfigurableInterface, PluginInspectionInt
    * the data definition. In addition to that, widget-level validation may be
    * provided using the regular #element_validate callbacks of the form API.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The data to be edited.
-   * @param \Symfony\Component\Validator\ConstraintViolationListInterface $violations
+   * @param ConstraintViolationListInterface $violations
    *   A list of constraint violations to flag.
-   * @param \Drupal\Core\Form\SubformStateInterface $formState
+   * @param SubformStateInterface $formState
    *   The form state of the widget's form.
    */
   public function flagViolations(TypedDataInterface $data, ConstraintViolationListInterface $violations, SubformStateInterface $formState);
@@ -83,10 +84,10 @@ interface FormWidgetInterface extends ConfigurableInterface, PluginInspectionInt
    * setting values. The definitions may include suiting widgets and widget
    * configurations for generating a configuration form.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the edited data.
    *
-   * @return \Drupal\typed_data\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    *   An array of context definitions describing the configuration values,
    *   keyed by configuration setting name. The keys must match the actual keys
    *   of the supported configuration.
diff --git a/src/Widget/FormWidgetManagerInterface.php b/src/Widget/FormWidgetManagerInterface.php
index a98dca7..2982689 100644
--- a/src/Widget/FormWidgetManagerInterface.php
+++ b/src/Widget/FormWidgetManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_data\Widget;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginManagerInterface;
 
 /**
@@ -20,10 +21,10 @@ interface FormWidgetManagerInterface extends PluginManagerInterface {
    *   An array of configuration relevant to the plugin instance. As this plugin
    *   is not configurable, this is unused and should stay empty.
    *
-   * @return \Drupal\typed_data\Widget\FormWidgetInterface
+   * @return FormWidgetInterface
    *   A fully configured plugin instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []);
diff --git a/src/Widget/FormWidgetManagerTrait.php b/src/Widget/FormWidgetManagerTrait.php
index ef67aac..a1fbeb2 100644
--- a/src/Widget/FormWidgetManagerTrait.php
+++ b/src/Widget/FormWidgetManagerTrait.php
@@ -10,14 +10,14 @@ trait FormWidgetManagerTrait {
   /**
    * The widget manager.
    *
-   * @var \Drupal\typed_data\Widget\FormWidgetManagerInterface
+   * @var FormWidgetManagerInterface
    */
   protected $widgetManager;
 
   /**
    * Sets the widget manager.
    *
-   * @param \Drupal\typed_data\Widget\FormWidgetManagerInterface $widgetManager
+   * @param FormWidgetManagerInterface $widgetManager
    *   The widget manager.
    *
    * @return $this
@@ -30,7 +30,7 @@ trait FormWidgetManagerTrait {
   /**
    * Gets the widget manager.
    *
-   * @return \Drupal\typed_data\Widget\FormWidgetManagerInterface
+   * @return FormWidgetManagerInterface
    *   The widget manager.
    */
   public function getFormWidgetManager() {
diff --git a/tests/modules/typed_data_widget_test/src/FormWidgetExampleForm.php b/tests/modules/typed_data_widget_test/src/FormWidgetExampleForm.php
index eb0fd35..3484102 100644
--- a/tests/modules/typed_data_widget_test/src/FormWidgetExampleForm.php
+++ b/tests/modules/typed_data_widget_test/src/FormWidgetExampleForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_data_widget_test;
 
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\Context\ContextDefinition;
@@ -21,14 +22,14 @@ class FormWidgetExampleForm extends FormBase {
   /**
    * The state storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Form constructor.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state storage.
    */
   public function __construct(StateInterface $state) {
@@ -57,7 +58,7 @@ class FormWidgetExampleForm extends FormBase {
    * @param string $widget_id
    *   The widget id.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface
+   * @return ContextDefinitionInterface
    *   The definition.
    */
   public function getExampleContextDefinition($widget_id) {
diff --git a/tests/src/Functional/TypedDataFormWidget/BrokenWidgetTest.php b/tests/src/Functional/TypedDataFormWidget/BrokenWidgetTest.php
index d3b9e87..54b24af 100644
--- a/tests/src/Functional/TypedDataFormWidget/BrokenWidgetTest.php
+++ b/tests/src/Functional/TypedDataFormWidget/BrokenWidgetTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\typed_data\Functional\TypedDataFormWidget;
 
+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\TypedData\ListDataDefinition;
@@ -19,7 +21,7 @@ class BrokenWidgetTest extends FormWidgetBrowserTestBase {
   /**
    * The tested form widget.
    *
-   * @var \Drupal\typed_data\Widget\FormWidgetInterface
+   * @var FormWidgetInterface
    */
   protected $widget;
 
@@ -65,7 +67,7 @@ class BrokenWidgetTest extends FormWidgetBrowserTestBase {
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
     $this->drupalGet($path);
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->elementTextContains('css', 'label[for=edit-data-value]', $context_definition->getLabel());
     $assert->elementTextContains('css', 'div[id=edit-data-value]', 'No widget exists for this data type.');
@@ -78,6 +80,7 @@ class BrokenWidgetTest extends FormWidgetBrowserTestBase {
   /**
    * @covers ::form
    * @covers ::flagViolations
+   * @doesNotPerformAssertions
    */
   public function testValidation(): void {
     // No validation as there is no input widget.
diff --git a/tests/src/Functional/TypedDataFormWidget/DatetimeWidgetTest.php b/tests/src/Functional/TypedDataFormWidget/DatetimeWidgetTest.php
index f7b137d..c2dcd04 100644
--- a/tests/src/Functional/TypedDataFormWidget/DatetimeWidgetTest.php
+++ b/tests/src/Functional/TypedDataFormWidget/DatetimeWidgetTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\typed_data\Functional\TypedDataFormWidget;
 
+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\TypedData\DataDefinition;
@@ -20,7 +22,7 @@ class DatetimeWidgetTest extends FormWidgetBrowserTestBase {
   /**
    * The tested form widget.
    *
-   * @var \Drupal\typed_data\Widget\FormWidgetInterface
+   * @var FormWidgetInterface
    */
   protected $widget;
 
@@ -67,7 +69,7 @@ class DatetimeWidgetTest extends FormWidgetBrowserTestBase {
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
     $this->drupalGet($path);
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
 
     // Unlike other form widgets where the label is directly related to the
@@ -115,7 +117,7 @@ class DatetimeWidgetTest extends FormWidgetBrowserTestBase {
       ->setDefaultValue('2017-04-18T06:20:52');
     $this->container->get('state')->set('typed_data_widgets.definition', $context_definition);
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
 
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
@@ -148,7 +150,7 @@ class DatetimeWidgetTest extends FormWidgetBrowserTestBase {
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
     $this->drupalGet($path);
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
 
     // Check that empty date and 12:00:00 for the time are shown when no default
diff --git a/tests/src/Functional/TypedDataFormWidget/FormWidgetBrowserTestBase.php b/tests/src/Functional/TypedDataFormWidget/FormWidgetBrowserTestBase.php
index 09a1fc7..71f9d4a 100644
--- a/tests/src/Functional/TypedDataFormWidget/FormWidgetBrowserTestBase.php
+++ b/tests/src/Functional/TypedDataFormWidget/FormWidgetBrowserTestBase.php
@@ -32,6 +32,7 @@ abstract class FormWidgetBrowserTestBase extends BrowserTestBase {
 
   /**
    * @covers ::isApplicable
+   * @doesNotPerformAssertions
    */
   public function testIsApplicable(): void {
     // Force any tests that extend this class to implement their own version
@@ -42,6 +43,7 @@ abstract class FormWidgetBrowserTestBase extends BrowserTestBase {
   /**
    * @covers ::form
    * @covers ::extractFormValues
+   * @doesNotPerformAssertions
    */
   public function testFormEditing(): void {
     $this->fail('There is no implementation of the mandatory test function: ' . $this->getName());
@@ -50,6 +52,7 @@ abstract class FormWidgetBrowserTestBase extends BrowserTestBase {
   /**
    * @covers ::form
    * @covers ::flagViolations
+   * @doesNotPerformAssertions
    */
   public function testValidation(): void {
     $this->fail('There is no implementation of the mandatory test function: ' . $this->getName());
diff --git a/tests/src/Functional/TypedDataFormWidget/SelectWidgetTest.php b/tests/src/Functional/TypedDataFormWidget/SelectWidgetTest.php
index 71ddb4e..f16f340 100644
--- a/tests/src/Functional/TypedDataFormWidget/SelectWidgetTest.php
+++ b/tests/src/Functional/TypedDataFormWidget/SelectWidgetTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\typed_data\Functional\TypedDataFormWidget;
 
+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\TypedData\ListDataDefinition;
@@ -19,7 +21,7 @@ class SelectWidgetTest extends FormWidgetBrowserTestBase {
   /**
    * The tested form widget.
    *
-   * @var \Drupal\typed_data\Widget\FormWidgetInterface
+   * @var FormWidgetInterface
    */
   protected $widget;
 
@@ -71,7 +73,7 @@ class SelectWidgetTest extends FormWidgetBrowserTestBase {
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
     $this->drupalGet($path);
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->elementTextContains('css', 'label[for=edit-data-value]', $context_definition->getLabel());
     $assert->elementTextContains('css', 'div[id=edit-data-value--description]', $context_definition->getDescription());
@@ -103,7 +105,7 @@ class SelectWidgetTest extends FormWidgetBrowserTestBase {
     $this->fillField('data[value]', '');
     $this->pressButton('Submit');
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->fieldExists('data[value]')->hasClass('error');
 
diff --git a/tests/src/Functional/TypedDataFormWidget/TextInputWidgetTest.php b/tests/src/Functional/TypedDataFormWidget/TextInputWidgetTest.php
index 0b65e99..d4e8940 100644
--- a/tests/src/Functional/TypedDataFormWidget/TextInputWidgetTest.php
+++ b/tests/src/Functional/TypedDataFormWidget/TextInputWidgetTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\typed_data\Functional\TypedDataFormWidget;
 
+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\TypedData\ListDataDefinition;
@@ -19,7 +21,7 @@ class TextInputWidgetTest extends FormWidgetBrowserTestBase {
   /**
    * The tested form widget.
    *
-   * @var \Drupal\typed_data\Widget\FormWidgetInterface
+   * @var FormWidgetInterface
    */
   protected $widget;
 
@@ -66,7 +68,7 @@ class TextInputWidgetTest extends FormWidgetBrowserTestBase {
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
     $this->drupalGet($path);
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->elementTextContains('css', 'label[for=edit-data-value]', $context_definition->getLabel());
     $assert->elementTextContains('css', 'div[id=edit-data-value--description]', $context_definition->getDescription());
@@ -98,7 +100,7 @@ class TextInputWidgetTest extends FormWidgetBrowserTestBase {
     $this->fillField('data[value]', 'too-long');
     $this->pressButton('Submit');
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->fieldExists('data[value]')->hasClass('error');
 
diff --git a/tests/src/Functional/TypedDataFormWidget/TextareaWidgetTest.php b/tests/src/Functional/TypedDataFormWidget/TextareaWidgetTest.php
index abe0d54..510ac4c 100644
--- a/tests/src/Functional/TypedDataFormWidget/TextareaWidgetTest.php
+++ b/tests/src/Functional/TypedDataFormWidget/TextareaWidgetTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\typed_data\Functional\TypedDataFormWidget;
 
+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\TypedData\ListDataDefinition;
@@ -19,7 +21,7 @@ class TextareaWidgetTest extends FormWidgetBrowserTestBase {
   /**
    * The tested form widget.
    *
-   * @var \Drupal\typed_data\Widget\FormWidgetInterface
+   * @var FormWidgetInterface
    */
   protected $widget;
 
@@ -66,7 +68,7 @@ class TextareaWidgetTest extends FormWidgetBrowserTestBase {
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
     $this->drupalGet($path);
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->elementTextContains('css', 'label[for=edit-data-value]', $context_definition->getLabel());
     $assert->elementTextContains('css', 'div[id=edit-data-value--description]', $context_definition->getDescription());
@@ -111,7 +113,7 @@ class TextareaWidgetTest extends FormWidgetBrowserTestBase {
     $this->fillField('data[value]', $this->randomString(20));
     $this->pressButton('Submit');
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->fieldExists('data[value]')->hasClass('error');
 
diff --git a/tests/src/Kernel/DataDefinitionFetcherTest.php b/tests/src/Kernel/DataDefinitionFetcherTest.php
index a994ed6..7547fa0 100644
--- a/tests/src/Kernel/DataDefinitionFetcherTest.php
+++ b/tests/src/Kernel/DataDefinitionFetcherTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\typed_data\Kernel;
 
+use Drupal\typed_data\DataFetcherInterface;
+use Drupal\Core\TypedData\TypedDataManagerInterface;
+use Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\field\Entity\FieldConfig;
@@ -20,21 +23,21 @@ class DataDefinitionFetcherTest extends KernelTestBase {
   /**
    * The data fetcher object we want to test.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;
 
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * The data definition of our page node used for testing.
    *
-   * @var \Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface
+   * @var EntityDataDefinitionInterface
    */
   protected $nodeDefinition;
 
diff --git a/tests/src/Kernel/DataFetcherAutocompleteTest.php b/tests/src/Kernel/DataFetcherAutocompleteTest.php
index 16bc95c..3043447 100644
--- a/tests/src/Kernel/DataFetcherAutocompleteTest.php
+++ b/tests/src/Kernel/DataFetcherAutocompleteTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\typed_data\Kernel;
 
+use Drupal\typed_data\DataFetcherInterface;
+use Drupal\Core\TypedData\TypedDataManagerInterface;
+use Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\field\Entity\FieldConfig;
@@ -19,28 +22,28 @@ class DataFetcherAutocompleteTest extends KernelTestBase {
   /**
    * The data fetcher object we want to test.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;
 
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * The data definition of our page node used for testing.
    *
-   * @var \Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface
+   * @var EntityDataDefinitionInterface
    */
   protected $nodeDefinition;
 
   /**
    * The data definition of the global page node used for testing.
    *
-   * @var \Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface
+   * @var EntityDataDefinitionInterface
    */
   protected $globalNodeDefinition;
 
diff --git a/tests/src/Kernel/DataFetcherTest.php b/tests/src/Kernel/DataFetcherTest.php
index 146a5df..6321d72 100644
--- a/tests/src/Kernel/DataFetcherTest.php
+++ b/tests/src/Kernel/DataFetcherTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\typed_data\Kernel;
 
+use Drupal\Core\TypedData\TypedDataManagerInterface;
+use Drupal\typed_data\DataFetcherInterface;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Entity\TypedData\EntityDataDefinition;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Render\BubbleableMetadata;
@@ -23,28 +27,28 @@ class DataFetcherTest extends KernelTestBase {
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * The data fetcher object we want to test.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;
 
   /**
    * A node used for testing.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * An entity type manager used for testing.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
diff --git a/tests/src/Kernel/DataFilterTest.php b/tests/src/Kernel/DataFilterTest.php
index 66de35d..6dd95eb 100644
--- a/tests/src/Kernel/DataFilterTest.php
+++ b/tests/src/Kernel/DataFilterTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\typed_data\Kernel;
 
+use Drupal\Core\TypedData\TypedDataManagerInterface;
+use Drupal\typed_data\DataFilterManagerInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\node\NodeInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\Core\Entity\TypedData\EntityDataDefinition;
 use Drupal\Core\Render\BubbleableMetadata;
@@ -23,14 +28,14 @@ class DataFilterTest extends KernelTestBase {
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * The data filter manager.
    *
-   * @var \Drupal\typed_data\DataFilterManagerInterface
+   * @var DataFilterManagerInterface
    */
   protected $dataFilterManager;
 
@@ -225,7 +230,7 @@ class DataFilterTest extends KernelTestBase {
     $fails = $filter->validateArguments($data->getDataDefinition(), ['custom', 'Y']);
     $this->assertCount(0, $fails);
 
-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date_formatter = $this->container->get('date.formatter');
     $this->assertEquals($date_formatter->format(3700), $filter->filter($data->getDataDefinition(), $data->getValue(), []));
     $this->assertEquals($date_formatter->format(3700, 'short'), $filter->filter($data->getDataDefinition(), $data->getValue(), ['short']));
@@ -306,7 +311,7 @@ class DataFilterTest extends KernelTestBase {
     $this->installEntitySchema('user');
     $this->installEntitySchema('node');
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
       'title' => 'Test node',
       'type' => 'page',
@@ -332,7 +337,7 @@ class DataFilterTest extends KernelTestBase {
    */
   public function testFileEntityUrlFilter(): void {
     file_put_contents('public://example.txt', $this->randomMachineName());
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = File::create([
       'uri' => 'public://example.txt',
     ]);
diff --git a/tests/src/Kernel/PlaceholderResolverTest.php b/tests/src/Kernel/PlaceholderResolverTest.php
index 284bd29..20d7ffb 100644
--- a/tests/src/Kernel/PlaceholderResolverTest.php
+++ b/tests/src/Kernel/PlaceholderResolverTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\typed_data\Kernel;
 
+use Drupal\Core\TypedData\TypedDataManagerInterface;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\typed_data\PlaceholderResolver;
+use Drupal\typed_data_global_context_test\ContextProvider\SimpleTestContext;
 use Drupal\Component\Render\HtmlEscapedText;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Datetime\Entity\DateFormat;
@@ -24,35 +29,35 @@ class PlaceholderResolverTest extends KernelTestBase {
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * A node used for testing.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * An entity type manager used for testing.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The placeholder resolver instanced tested.
    *
-   * @var \Drupal\typed_data\PlaceholderResolver
+   * @var PlaceholderResolver
    */
   protected $placeholderResolver;
 
   /**
    * A simple global context for testing.
    *
-   * @var \Drupal\typed_data_global_context_test\ContextProvider\SimpleTestContext
+   * @var SimpleTestContext
    */
   protected $simpleTestContext;
 
diff --git a/tests/src/Traits/BrowserTestHelpersTrait.php b/tests/src/Traits/BrowserTestHelpersTrait.php
index 131f4f6..8cf1f30 100644
--- a/tests/src/Traits/BrowserTestHelpersTrait.php
+++ b/tests/src/Traits/BrowserTestHelpersTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\typed_data\Traits;
 
+use Behat\Mink\Exception\ElementNotFoundException;
 use Behat\Mink\Element\NodeElement;
 
 /**
@@ -15,7 +16,7 @@ trait BrowserTestHelpersTrait {
    * @param string $locator
    *   Link id, title, text or image alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The link node element.
    */
   public function findLink(string $locator): ?NodeElement {
@@ -28,7 +29,7 @@ trait BrowserTestHelpersTrait {
    * @param string $locator
    *   Input id, name or label.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The input field element.
    */
   public function findField(string $locator): ?NodeElement {
@@ -41,7 +42,7 @@ trait BrowserTestHelpersTrait {
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The button node element.
    */
   public function findButton(string $locator): ?NodeElement {
@@ -54,7 +55,7 @@ trait BrowserTestHelpersTrait {
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   public function pressButton(string $locator): void {
     $this->getSession()->getPage()->pressButton($locator);
@@ -68,7 +69,7 @@ trait BrowserTestHelpersTrait {
    * @param string $value
    *   Value.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    *
    * @see \Behat\Mink\Element\NodeElement::setValue
    */
