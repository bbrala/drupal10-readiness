diff --git a/dynamic_layouts.info.yml b/dynamic_layouts.info.yml
index 952787f..c1127dd 100644
--- a/dynamic_layouts.info.yml
+++ b/dynamic_layouts.info.yml
@@ -4,7 +4,7 @@ description: 'Provides a dynamic layout builder.'
 package: Dynamic Layouts
 configure: dynamic_layout.dynamic_layout_settings
 # version: VERSION
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - drupal:layout_discovery
   - drupal:system (>= 8.3.x)
diff --git a/dynamic_layouts.install b/dynamic_layouts.install
index 11a985e..db8d322 100644
--- a/dynamic_layouts.install
+++ b/dynamic_layouts.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\dynamic_layouts\DynamicLayoutSettingsInterface;
 /**
  * @file
  * Install, update and uninstall functions for the dynamic_layouts module.
@@ -35,7 +36,7 @@ function dynamic_layouts_requirements($phase) {
   }
 
   if ($phase == 'runtime') {
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     if ($settings = \Drupal::entityTypeManager()
       ->getStorage('dynamic_layout_settings')
       ->load('settings')) {
@@ -58,4 +59,4 @@ function dynamic_layouts_requirements($phase) {
   }
 
   return $requirements;
-}
\ No newline at end of file
+}
diff --git a/src/Controller/DynamicLayoutController.php b/src/Controller/DynamicLayoutController.php
index 9c6c5f4..ac67631 100644
--- a/src/Controller/DynamicLayoutController.php
+++ b/src/Controller/DynamicLayoutController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dynamic_layouts\Controller;
 
+use Drupal\dynamic_layouts\DynamicLayoutSettingsInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ -20,32 +21,32 @@ class DynamicLayoutController extends ControllerBase {
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;
 
   /**
    * EditRowModalForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Form\FormBuilder $formBuilder
+   * @param FormBuilder $formBuilder
    *   The form builder.
    */
   public function __construct(EntityFormBuilderInterface $entity_form_builder, EntityTypeManagerInterface $entityTypeManager, FormBuilder $formBuilder) {
@@ -71,7 +72,7 @@ class DynamicLayoutController extends ControllerBase {
   public function access() {
     $settings_created = FALSE;
 
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     if (($settings = $this->entityTypeManager->getStorage('dynamic_layout_settings')->load('settings')) && ($settings->getFrontendLibrary())) {
       $settings_created = TRUE;
     }
diff --git a/src/DynamicLayoutListBuilder.php b/src/DynamicLayoutListBuilder.php
index 6a6fa8c..63e56fd 100644
--- a/src/DynamicLayoutListBuilder.php
+++ b/src/DynamicLayoutListBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\dynamic_layouts;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\dynamic_layouts\Entity\DynamicLayout;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\Entity\DraggableListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ -24,14 +26,14 @@ class DynamicLayoutListBuilder extends EntityListBuilder {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -49,11 +51,11 @@ class DynamicLayoutListBuilder extends EntityListBuilder {
   /**
    * Constructs a new LanguageListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage handler class.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, EntityTypeManagerInterface $entityTypeManager) {
@@ -72,7 +74,7 @@ class DynamicLayoutListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildHeader() {
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     if (($settings = $this->entityTypeManager->getStorage('dynamic_layout_settings')->load('settings')) && (!$settings->getFrontendLibrary())) {
       $settings_link = Link::fromTextAndUrl(t('here'), Url::fromRoute('dynamic_layout.dynamic_layout_settings'))->toString();
 
@@ -89,7 +91,7 @@ class DynamicLayoutListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\dynamic_layouts\Entity\DynamicLayout $entity */
+    /** @var DynamicLayout $entity */
     $row['label'] = $entity->label();
     $row['category'] = Html::escape($entity->getCategory());
     return $row + parent::buildRow($entity);
diff --git a/src/Entity/DynamicLayout.php b/src/Entity/DynamicLayout.php
index 13251b8..8672a48 100644
--- a/src/Entity/DynamicLayout.php
+++ b/src/Entity/DynamicLayout.php
@@ -359,7 +359,7 @@ class DynamicLayout extends ConfigEntityBase implements DynamicLayoutInterface {
     $rows = $this->getRows();
     $column_count = 1;
 
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     $last_column_class = '';
     $column_width_prefix = '';
     if ($settings = \Drupal::entityTypeManager()
@@ -431,7 +431,7 @@ class DynamicLayout extends ConfigEntityBase implements DynamicLayoutInterface {
       $this->default_row_class = $starting_default_row_class;
     }
 
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     $last_column_class = '';
     $column_width_prefix = '';
     if ($settings = \Drupal::entityTypeManager()
@@ -510,7 +510,7 @@ class DynamicLayout extends ConfigEntityBase implements DynamicLayoutInterface {
     $delete_column_link = Link::fromTextAndUrl($title, $delete_column_url);
     $delete_column = $delete_column_link->toRenderable();
 
-    return render($delete_column);
+    return \Drupal::service('renderer')->render($delete_column);
   }
 
   /**
@@ -543,7 +543,7 @@ class DynamicLayout extends ConfigEntityBase implements DynamicLayoutInterface {
     $edit_column_link = Link::fromTextAndUrl($title, $edit_column_url);
     $edit_column = $edit_column_link->toRenderable();
 
-    return render($edit_column);
+    return \Drupal::service('renderer')->render($edit_column);
   }
 
   /**
@@ -564,7 +564,7 @@ class DynamicLayout extends ConfigEntityBase implements DynamicLayoutInterface {
   public function getRowLink($row_id, $route, $text, array $options = []) {
     $link = Link::createFromRoute($text, $route, ['dynamic_layout_id' => $this->id(), Constants::ROW_ID => $row_id], $options);
     $renderLink = $link->toRenderable();
-    return render($renderLink);
+    return \Drupal::service('renderer')->render($renderLink);
   }
 
   /**
@@ -574,7 +574,7 @@ class DynamicLayout extends ConfigEntityBase implements DynamicLayoutInterface {
     $updated_row = $this->getRowById($row_id);
     $columns = $updated_row[Constants::COLUMNS];
 
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     $calculated_column_width_number = NULL;
     if ($settings = \Drupal::entityTypeManager()
       ->getStorage(Constants::DYNAMIC_LAYOUT_SETTINGS)
@@ -617,7 +617,7 @@ class DynamicLayout extends ConfigEntityBase implements DynamicLayoutInterface {
     $edit_column = $this->getEditColumnLink($this->id(), $row_id, $column_id);
     $delete_column = $this->getDeleteColumnLink($this->id(), $row_id, $column_id);
 
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     $column_width_prefix = '';
     if ($settings = \Drupal::entityTypeManager()
       ->getStorage(Constants::DYNAMIC_LAYOUT_SETTINGS)
diff --git a/src/Form/DynamicLayoutForm.php b/src/Form/DynamicLayoutForm.php
index bcc9712..ebbee0a 100644
--- a/src/Form/DynamicLayoutForm.php
+++ b/src/Form/DynamicLayoutForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\dynamic_layouts\Form;
 
+use Drupal\dynamic_layouts\Entity\DynamicLayout;
+use Drupal\dynamic_layouts\Entity\DynamicLayoutSettings;
 use Drupal\Core\Url;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,7 +20,7 @@ class DynamicLayoutForm extends EntityForm {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -34,7 +36,7 @@ class DynamicLayoutForm extends EntityForm {
   /**
    * Constructs a new DynamicLayoutForm.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(RendererInterface $renderer) {
@@ -46,7 +48,7 @@ class DynamicLayoutForm extends EntityForm {
    */
   public function form(array $form, FormStateInterface $form_state) {
 
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutInterface $entity */
+    /** @var DynamicLayoutInterface $entity */
     $entity = $this->entity;
 
     // Attach dynamic layout & popups dialogs/modals libraries.
@@ -227,7 +229,7 @@ class DynamicLayoutForm extends EntityForm {
    */
   protected function addRowFormFields(array &$form) {
 
-    /** @var \Drupal\dynamic_layouts\Entity\DynamicLayout $entity */
+    /** @var DynamicLayout $entity */
     $entity = $this->entity;
 
     // Check if we need to render rows.
@@ -330,7 +332,7 @@ class DynamicLayoutForm extends EntityForm {
    * {@inheritdoc}
    */
   protected function actions(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\dynamic_layouts\Entity\DynamicLayout $entity */
+    /** @var DynamicLayout $entity */
     $entity = $this->entity;
 
     // Change submit button title if entity is new.
@@ -373,7 +375,7 @@ class DynamicLayoutForm extends EntityForm {
   public function getWrapperClasses() {
     $wrapper_classes_arr = ['container-fluid'];
 
-    /** @var \Drupal\dynamic_layouts\Entity\DynamicLayoutSettings $settings */
+    /** @var DynamicLayoutSettings $settings */
     $frontend_library_class = 'custom';
     if ($settings = $this->entityTypeManager->getStorage('dynamic_layout_settings')->load('settings')) {
       $frontend_library = $settings->getFrontendLibrary();
@@ -430,7 +432,7 @@ class DynamicLayoutForm extends EntityForm {
       return NULL;
     }
 
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutInterface $entity */
+    /** @var DynamicLayoutInterface $entity */
     $entity = $this->entity;
 
     // Check if we need to redirect to the list.
diff --git a/src/Form/EditColumnModalForm.php b/src/Form/EditColumnModalForm.php
index b623a37..cee8807 100644
--- a/src/Form/EditColumnModalForm.php
+++ b/src/Form/EditColumnModalForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dynamic_layouts\Form;
 
+use Drupal\dynamic_layouts\DynamicLayoutSettingsInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Ajax\AjaxResponse;
@@ -20,23 +21,23 @@ class EditColumnModalForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;
 
   /**
    * EditRowModalForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityFormBuilderInterface $entity_form_builder, EntityTypeManagerInterface $entityTypeManager) {
@@ -119,7 +120,7 @@ class EditColumnModalForm extends FormBase {
       '#disabled' => TRUE,
     ];
 
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     if ($settings = $this->entityTypeManager->getStorage('dynamic_layout_settings')->load('settings')) {
       $column_class_options = $settings->getFrontendColumnClasses();
 
diff --git a/src/Form/EditRowModalForm.php b/src/Form/EditRowModalForm.php
index 951f96a..5edb876 100644
--- a/src/Form/EditRowModalForm.php
+++ b/src/Form/EditRowModalForm.php
@@ -19,14 +19,14 @@ class EditRowModalForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * EditRowModalForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 4410d16..05b5a20 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dynamic_layouts\Form;
 
+use Drupal\dynamic_layouts\Entity\DynamicLayoutSettings;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Drupal\Core\Form\FormBase;
@@ -19,14 +20,14 @@ class SettingsForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * EditRowModalForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ -54,7 +55,7 @@ class SettingsForm extends FormBase {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
 
-    /** @var \Drupal\dynamic_layouts\Entity\DynamicLayoutSettings $settings */
+    /** @var DynamicLayoutSettings $settings */
     $frontend_library_default = '';
     $column_prefix = '';
     $grid_column_count = '';
@@ -129,7 +130,7 @@ class SettingsForm extends FormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     if (!$settings = $this->entityTypeManager->getStorage('dynamic_layout_settings')->load('settings')) {
       return NULL;
     }
@@ -192,7 +193,7 @@ class SettingsForm extends FormBase {
    *   The old frontend library.
    * @param object $new_frontend_library
    *   The new frontend library.
-   * @param \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings
+   * @param DynamicLayoutSettingsInterface $settings
    *   The settings object.
    */
   public function updateValues(
diff --git a/src/Plugin/Derivative/DynamicLayoutDeriver.php b/src/Plugin/Derivative/DynamicLayoutDeriver.php
index 1781dab..5c2c4de 100644
--- a/src/Plugin/Derivative/DynamicLayoutDeriver.php
+++ b/src/Plugin/Derivative/DynamicLayoutDeriver.php
@@ -23,7 +23,7 @@ class DynamicLayoutDeriver extends DeriverBase implements ContainerDeriverInterf
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -32,7 +32,7 @@ class DynamicLayoutDeriver extends DeriverBase implements ContainerDeriverInterf
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entityTypeManager) {
@@ -65,7 +65,7 @@ class DynamicLayoutDeriver extends DeriverBase implements ContainerDeriverInterf
         $regions = $entity->getLayoutRegions();
         $icon_map = $entity->getIconMap();
 
-        $module_path = drupal_get_path('module', 'dynamic_layouts') . '/templates';
+        $module_path = \Drupal::service('extension.list.module')->getPath('dynamic_layouts') . '/templates';
 
         $this->derivatives[$entity->id()] = new LayoutDefinition([
           'label' => $entity->label(),
diff --git a/src/Plugin/Layout/DynamicLayout.php b/src/Plugin/Layout/DynamicLayout.php
index 2cdda6f..2de6e0d 100644
--- a/src/Plugin/Layout/DynamicLayout.php
+++ b/src/Plugin/Layout/DynamicLayout.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dynamic_layouts\Plugin\Layout;
 
+use Drupal\dynamic_layouts\Entity\DynamicLayoutSettings;
 use Drupal\Core\Layout\LayoutDefault;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -22,12 +23,12 @@ class DynamicLayout extends LayoutDefault implements ContainerFactoryPluginInter
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\dynamic_layouts\Entity\DynamicLayoutSettings
+   * @var DynamicLayoutSettings
    */
   protected $settings;
 
