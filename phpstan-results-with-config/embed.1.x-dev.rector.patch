diff --git a/embed.module b/embed.module
index 2834b39..134f167 100644
--- a/embed.module
+++ b/embed.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\ckeditor\CKEditorPluginManager;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -18,7 +19,7 @@ function ckeditor_form_embed_button_add_form_alter(array &$form, FormStateInterf
  * conflict with any existing CKEditor buttons.
  */
 function ckeditor_form_embed_button_add_form_validate(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\ckeditor\CKEditorPluginManager $ckeditor_plugin_manager */
+  /** @var CKEditorPluginManager $ckeditor_plugin_manager */
   $ckeditor_plugin_manager = \Drupal::service('plugin.manager.ckeditor.plugin');
 
   // Get a list of all buttons that are provided by all plugins.
diff --git a/embed.post_update.php b/embed.post_update.php
index 42a3e36..ddc7c71 100644
--- a/embed.post_update.php
+++ b/embed.post_update.php
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\embed\EmbedButtonInterface;
 /**
  * @file
  * Post update functions for Embed.
  */
-
 /**
  * Convert embed button icons from managed files to encoded data.
  */
@@ -12,7 +12,7 @@ function embed_post_update_convert_encoded_icon_data() {
   $file_storage = \Drupal::entityTypeManager()->getStorage('file');
   $file_usage = \Drupal::service('file.usage');
 
-  /** @var \Drupal\embed\EmbedButtonInterface[] $buttons */
+  /** @var EmbedButtonInterface[] $buttons */
   $buttons = \Drupal::entityTypeManager()->getStorage('embed_button')->loadMultiple();
 
   foreach ($buttons as $button) {
diff --git a/src/Access/EmbedButtonEditorAccessCheck.php b/src/Access/EmbedButtonEditorAccessCheck.php
index 01463b6..3d3f709 100644
--- a/src/Access/EmbedButtonEditorAccessCheck.php
+++ b/src/Access/EmbedButtonEditorAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\embed\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -27,12 +28,12 @@ class EmbedButtonEditorAccessCheck implements AccessInterface {
    *   _embed_button_editor_access: 'TRUE'
    * @endcode
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
@@ -65,15 +66,15 @@ class EmbedButtonEditorAccessCheck implements AccessInterface {
   /**
    * Checks if the embed button is enabled in an editor configuration.
    *
-   * @param \Drupal\embed\EmbedButtonInterface $embed_button
+   * @param EmbedButtonInterface $embed_button
    *   The embed button entity to check.
-   * @param \Drupal\editor\EditorInterface $editor
+   * @param EditorInterface $editor
    *   The editor entity to check.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   When the received Text Editor entity does not use CKEditor. This is
    *   currently only capable of detecting buttons used by CKEditor.
    */
diff --git a/src/Annotation/EmbedType.php b/src/Annotation/EmbedType.php
index 441b80b..a1219f5 100644
--- a/src/Annotation/EmbedType.php
+++ b/src/Annotation/EmbedType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\embed\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class EmbedType extends Plugin {
   /**
    * The human-readable name of the embed type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/EmbedController.php b/src/Controller/EmbedController.php
index 23088a4..c7ba431 100644
--- a/src/Controller/EmbedController.php
+++ b/src/Controller/EmbedController.php
@@ -28,14 +28,14 @@ class EmbedController extends ControllerBase {
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs an EmbedController instance.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(RendererInterface $renderer) {
@@ -56,15 +56,15 @@ class EmbedController extends ControllerBase {
    *
    * Expects the HTML element as GET parameter.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\filter\FilterFormatInterface $filter_format
+   * @param FilterFormatInterface $filter_format
    *   The filter format.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Throws an exception if 'value' parameter is not found in the request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The preview of the embedded item specified by the data attributes.
    */
   public function preview(Request $request, FilterFormatInterface $filter_format) {
@@ -107,17 +107,17 @@ class EmbedController extends ControllerBase {
    *
    * Expects the HTML element as GET parameter.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\editor\EditorInterface $editor
+   * @param EditorInterface $editor
    *   The editor.
-   * @param \Drupal\embed\EmbedButtonInterface $embed_button
+   * @param EmbedButtonInterface $embed_button
    *   The embed button.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Throws an exception if 'value' parameter is not found in the request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The preview of the embedded item specified by the data attributes.
    */
   public function previewEditor(Request $request, EditorInterface $editor, EmbedButtonInterface $embed_button) {
diff --git a/src/EmbedButtonInterface.php b/src/EmbedButtonInterface.php
index 8e81c22..7a145b5 100644
--- a/src/EmbedButtonInterface.php
+++ b/src/EmbedButtonInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\embed;
 
+use Drupal\embed\EmbedType\EmbedTypeInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -28,7 +30,7 @@ interface EmbedButtonInterface extends ConfigEntityInterface {
   /**
    * Returns the plugin of the associated embed type.
    *
-   * @return \Drupal\embed\EmbedType\EmbedTypeInterface
+   * @return EmbedTypeInterface
    *   The plugin of the embed type.
    */
   public function getTypePlugin();
@@ -57,7 +59,7 @@ interface EmbedButtonInterface extends ConfigEntityInterface {
   /**
    * Returns the button's icon file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file entity of the button icon.
    *
    * @deprecated in embed:8.x-1.2 and is removed from embed:2.0.0. Use
diff --git a/src/EmbedButtonListBuilder.php b/src/EmbedButtonListBuilder.php
index 629a1fb..3b07858 100644
--- a/src/EmbedButtonListBuilder.php
+++ b/src/EmbedButtonListBuilder.php
@@ -28,7 +28,7 @@ class EmbedButtonListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\embed\EmbedButtonInterface $entity */
+    /** @var EmbedButtonInterface $entity */
     $row = [];
     $row['label'] = $entity->label();
     $row['embed_type'] = $entity->getTypeLabel();
diff --git a/src/EmbedCKEditorPluginBase.php b/src/EmbedCKEditorPluginBase.php
index 64867f0..b55655a 100644
--- a/src/EmbedCKEditorPluginBase.php
+++ b/src/EmbedCKEditorPluginBase.php
@@ -18,7 +18,7 @@ abstract class EmbedCKEditorPluginBase extends CKEditorPluginBase implements Con
   /**
    * The embed button query.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $embedButtonQuery;
 
@@ -31,7 +31,7 @@ abstract class EmbedCKEditorPluginBase extends CKEditorPluginBase implements Con
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\Query\QueryInterface $embed_button_query
+   * @param QueryInterface $embed_button_query
    *   The entity query object for embed button.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, QueryInterface $embed_button_query) {
@@ -73,7 +73,7 @@ abstract class EmbedCKEditorPluginBase extends CKEditorPluginBase implements Con
   /**
    * Build the information about the specific button.
    *
-   * @param \Drupal\embed\EmbedButtonInterface $embed_button
+   * @param EmbedButtonInterface $embed_button
    *   The embed button.
    *
    * @return array
diff --git a/src/EmbedType/EmbedTypeManager.php b/src/EmbedType/EmbedTypeManager.php
index aaf4102..a5f890f 100644
--- a/src/EmbedType/EmbedTypeManager.php
+++ b/src/EmbedType/EmbedTypeManager.php
@@ -22,9 +22,9 @@ class EmbedTypeManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Entity/EmbedButton.php b/src/Entity/EmbedButton.php
index 26aa9bd..e6abc54 100644
--- a/src/Entity/EmbedButton.php
+++ b/src/Entity/EmbedButton.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\embed\Entity;
 
+use Drupal\embed\EmbedType\EmbedTypeManager;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\File\FileSystemInterface;
@@ -130,13 +131,13 @@ class EmbedButton extends ConfigEntityBase implements EmbedButtonInterface {
       if (!is_file($uri) && !UrlHelper::isExternal($uri)) {
         static::convertEncodedDataToImage($this->icon);
       }
-      $uri = file_create_url($uri);
+      $uri = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
     }
     else {
       $uri = $this->getTypePlugin()->getDefaultIconUrl();
     }
 
-    return file_url_transform_relative($uri);
+    return \Drupal::service('file_url_generator')->transformRelative($uri);
   }
 
   /**
@@ -156,7 +157,7 @@ class EmbedButton extends ConfigEntityBase implements EmbedButtonInterface {
   /**
    * Gets the embed type plugin manager.
    *
-   * @return \Drupal\embed\EmbedType\EmbedTypeManager
+   * @return EmbedTypeManager
    *   The embed type plugin manager.
    */
   protected function embedTypeManager() {
@@ -196,7 +197,7 @@ class EmbedButton extends ConfigEntityBase implements EmbedButtonInterface {
   public static function convertEncodedDataToImage(array $data) {
     if (!is_file($data['uri'])) {
       $directory = dirname($data['uri']);
-      /** @var \Drupal\Core\File\FileSystemInterface $filesystem */
+      /** @var FileSystemInterface $filesystem */
       $fileSystem = \Drupal::service('file_system');
       $fileSystem->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
       $fileSystem->saveData(base64_decode($data['data']), $data['uri'], FileSystemInterface::EXISTS_REPLACE);
diff --git a/src/Form/EmbedButtonForm.php b/src/Form/EmbedButtonForm.php
index 5379c90..00a4233 100644
--- a/src/Form/EmbedButtonForm.php
+++ b/src/Form/EmbedButtonForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\embed\Form;
 
+use Drupal\embed\EmbedButtonInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ -22,25 +23,25 @@ class EmbedButtonForm extends EntityForm {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The embed type plugin manager.
    *
-   * @var \Drupal\embed\EmbedType\EmbedTypeManager
+   * @var EmbedTypeManager
    */
   protected $embedTypeManager;
 
   /**
    * Constructs a new EmbedButtonForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\embed\EmbedType\EmbedTypeManager $embed_type_manager
+   * @param EmbedTypeManager $embed_type_manager
    *   The embed type plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EmbedTypeManager $embed_type_manager, ConfigFactoryInterface $config_factory) {
@@ -66,7 +67,7 @@ class EmbedButtonForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\embed\EmbedButtonInterface $button */
+    /** @var EmbedButtonInterface $button */
     $button = $this->entity;
     $form_state->setTemporaryValue('embed_button', $button);
 
@@ -171,7 +172,7 @@ class EmbedButtonForm extends EntityForm {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\embed\EmbedButtonInterface $button */
+    /** @var EmbedButtonInterface $button */
     $button = $this->entity;
 
     // Run embed type plugin validation.
@@ -192,7 +193,7 @@ class EmbedButtonForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\embed\EmbedButtonInterface $button */
+    /** @var EmbedButtonInterface $button */
     $button = $this->entity;
 
     // Run embed type plugin submission.
@@ -236,10 +237,10 @@ class EmbedButtonForm extends EntityForm {
    *
    * @param array $form
    *   The build form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response with updated options for the embed type.
    */
   public function updateTypeSettings(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/EmbedSettingsForm.php b/src/Form/EmbedSettingsForm.php
index a090db8..cff016d 100644
--- a/src/Form/EmbedSettingsForm.php
+++ b/src/Form/EmbedSettingsForm.php
@@ -17,16 +17,16 @@ class EmbedSettingsForm extends ConfigFormBase {
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * Constructs a EmbedSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StreamWrapperManagerInterface $stream_wrapper_manager) {
diff --git a/tests/embed_test/src/Controller/EmbedTestController.php b/tests/embed_test/src/Controller/EmbedTestController.php
index d88bd09..875b949 100644
--- a/tests/embed_test/src/Controller/EmbedTestController.php
+++ b/tests/embed_test/src/Controller/EmbedTestController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\embed_test\Controller;
 
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\editor\EditorInterface;
@@ -34,7 +35,7 @@ class EmbedTestController extends ControllerBase {
   /**
    * Return CSRF token.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   CSRF token.
    */
   public function getCsrfToken() {
diff --git a/tests/embed_test/src/Plugin/Filter/EntityEmbedByID.php b/tests/embed_test/src/Plugin/Filter/EntityEmbedByID.php
index 06589f9..bbb8e76 100644
--- a/tests/embed_test/src/Plugin/Filter/EntityEmbedByID.php
+++ b/tests/embed_test/src/Plugin/Filter/EntityEmbedByID.php
@@ -26,14 +26,14 @@ class EntityEmbedByID extends FilterBase implements ContainerFactoryPluginInterf
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -46,9 +46,9 @@ class EntityEmbedByID extends FilterBase implements ContainerFactoryPluginInterf
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer) {
diff --git a/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php b/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php
index e275664..56eea3b 100644
--- a/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php
+++ b/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php
@@ -28,26 +28,26 @@ class EmbedButtonEditorAccessCheckTest extends EmbedTestBase {
     // The anonymous user should have access to the plain_text format, but it
     // hasn't been configured to use an editor yet.
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // The anonymous user should not have permission to use embed_test format.
     $this->getRoute('embed_test', 'embed_test_default');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // Now login a user that can use the embed_test format.
     $this->drupalLogin($this->webUser);
 
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.plain_text');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.plain_text');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // Add an empty configuration for the plain_text editor configuration.
     $editor = Editor::create([
@@ -56,38 +56,41 @@ class EmbedButtonEditorAccessCheckTest extends EmbedTestBase {
     ]);
     $editor->save();
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.plain_text');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.plain_text');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     $this->getRoute('embed_test', 'embed_test_default');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.embed_test');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(static::SUCCESS);
 
     // Test route with an empty request.
     $this->getRoute('embed_test', 'embed_test_default', '');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.embed_test');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // Test route with an invalid text format.
     $this->getRoute('invalid_editor', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.invalid_editor');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.invalid_editor');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // Test route with an invalid embed button.
     $this->getRoute('embed_test', 'invalid_button');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.invalid_button');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.invalid_button');
   }
 
   /**
diff --git a/tests/src/Functional/EmbedTestBase.php b/tests/src/Functional/EmbedTestBase.php
index 8999e12..84c64fd 100644
--- a/tests/src/Functional/EmbedTestBase.php
+++ b/tests/src/Functional/EmbedTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\embed\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\file\FileInterface;
 use Drupal\editor\Entity\Editor;
 use Drupal\file\Entity\File;
 use Drupal\filter\Entity\FilterFormat;
@@ -36,21 +38,21 @@ abstract class EmbedTestBase extends BrowserTestBase {
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Filtered HTML text format and enable entity_embed filter.
@@ -105,7 +107,7 @@ abstract class EmbedTestBase extends BrowserTestBase {
    *   (optional) File size in bytes to match. Defaults to NULL, which will not
    *   filter the returned list by size.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file entity.
    *
    * @see \Drupal\Tests\TestFileCreationTrait::getTestFiles()
diff --git a/tests/src/Functional/PreviewTest.php b/tests/src/Functional/PreviewTest.php
index c64ae5d..8a27a74 100644
--- a/tests/src/Functional/PreviewTest.php
+++ b/tests/src/Functional/PreviewTest.php
@@ -22,31 +22,40 @@ class PreviewTest extends EmbedTestBase {
   public function testPreviewRoute() {
     // Ensure the default filter can be previewed by the anonymous user.
     $this->getRoute('plain_text');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(static::SUCCESS);
 
     // The anonymous user should not have permission to use embed_test format.
     $this->getRoute('embed_test');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Now login a user that can use the embed_test format.
     $this->drupalLogin($this->webUser);
 
     $this->getRoute('plain_text');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(static::SUCCESS);
 
     $this->getRoute('embed_test');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(static::SUCCESS);
 
     // Test preview route with an empty request.
     $this->getRoute('embed_test', '');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     // Test preview route with an invalid text format.
     $this->getRoute('invalid_format');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }
 
   /**
diff --git a/tests/src/FunctionalJavascript/EmbedButtonAdminTest.php b/tests/src/FunctionalJavascript/EmbedButtonAdminTest.php
index 93ef79d..b9fa41a 100644
--- a/tests/src/FunctionalJavascript/EmbedButtonAdminTest.php
+++ b/tests/src/FunctionalJavascript/EmbedButtonAdminTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\embed\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
 use Drupal\editor\Entity\Editor;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ -34,21 +35,21 @@ class EmbedButtonAdminTest extends WebDriverTestBase {
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Filtered HTML text format and enable entity_embed filter.
@@ -115,7 +116,7 @@ class EmbedButtonAdminTest extends WebDriverTestBase {
     $this->assertNotEmpty($assert_session->waitForText("Machine name: $button_id"));
     $page->selectFieldOption('type_id', 'embed_test_default');
     $assert_session->assertWaitOnAjaxRequest();
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     // Ensure that the newly created button is listed.
     $this->drupalGet('admin/config/content/embed');
     $assert_session->pageTextContains($button_label);
@@ -126,7 +127,7 @@ class EmbedButtonAdminTest extends WebDriverTestBase {
     $edit = [
       'label' => $new_button_label,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     // Ensure that name and label has been changed.
     $this->drupalGet('admin/config/content/embed');
     $assert_session->pageTextContains($new_button_label);
@@ -134,7 +135,7 @@ class EmbedButtonAdminTest extends WebDriverTestBase {
 
     // Delete embed button.
     $this->drupalGet('admin/config/content/embed/button/manage/' . $button_id . '/delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
     // Ensure that the deleted embed button no longer exists.
     $this->drupalGet('admin/config/content/embed/button/manage/' . $button_id);
     $assert_session->pageTextContains('The requested page could not be found.');
@@ -160,15 +161,15 @@ class EmbedButtonAdminTest extends WebDriverTestBase {
     $this->assertSame('fixed-wing', $aircraft_type->getValue());
 
     $edit['type_settings[aircraft_type]'] = 'invalid';
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->pageTextContains('Cannot select invalid aircraft type.');
 
     $edit['type_settings[aircraft_type]'] = 'helicopters';
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->pageTextContains('Helicopters are just rotorcraft.');
 
     $this->drupalGet('admin/config/content/embed/button/manage/' . $button_id);
-    $this->assertFieldByName('type_settings[aircraft_type]', 'rotorcraft');
+    $this->assertSession()->fieldValueEquals('type_settings[aircraft_type]', 'rotorcraft');
   }
 
   public function testCKEditorButtonConflict() {
@@ -193,7 +194,7 @@ class EmbedButtonAdminTest extends WebDriverTestBase {
     $edit = [
       'type_id' => 'embed_test_default',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
   }
 
 }
diff --git a/tests/src/Kernel/IconTest.php b/tests/src/Kernel/IconTest.php
index ca34d46..961fb4c 100644
--- a/tests/src/Kernel/IconTest.php
+++ b/tests/src/Kernel/IconTest.php
@@ -26,7 +26,7 @@ class IconTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->installEntitySchema('embed_button');
@@ -78,13 +78,13 @@ class IconTest extends KernelTestBase {
    *
    * @param string $uri
    *   The exepcted URI to the icon file.
-   * @param \Drupal\embed\EmbedButtonInterface $button
+   * @param EmbedButtonInterface $button
    *   The embed button.
    * @param string $message
    *   The assertion message.
    */
   protected function assertIconUrl($uri, EmbedButtonInterface $button, string $message = '') {
-    $this->assertSame(file_url_transform_relative(file_create_url($uri)), $button->getIconUrl(), $message);
+    $this->assertSame(\Drupal::service('file_url_generator')->generateString($uri), $button->getIconUrl(), $message);
   }
 
 }
diff --git a/tests/src/Unit/DomHelperTraitTest.php b/tests/src/Unit/DomHelperTraitTest.php
index 95eda71..df89317 100644
--- a/tests/src/Unit/DomHelperTraitTest.php
+++ b/tests/src/Unit/DomHelperTraitTest.php
@@ -32,7 +32,7 @@ class DomHelperTraitTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->document = Html::load('<outer><test foo="bar" namespace:foo="bar"><test bar="foo"></test></test></outer>');
     $this->node = $this->document->getElementsByTagName('body')->item(0)->firstChild->firstChild;
   }
