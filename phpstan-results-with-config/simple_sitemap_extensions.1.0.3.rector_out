modules/contrib/simple_sitemap_extensions/modules/sse_dynamic_monthly/src/Plugin/simple_sitemap/SitemapGenerator/MonthlySitemapGenerator.php
modules/contrib/simple_sitemap_extensions/modules/sse_dynamic_monthly/src/Plugin/simple_sitemap/SitemapType/MonthlySitemapType.php
modules/contrib/simple_sitemap_extensions/modules/sse_dynamic_monthly/src/Plugin/simple_sitemap/UrlGenerator/MonthlySitemapUrlGenerator.php
modules/contrib/simple_sitemap_extensions/modules/sse_dynamic_monthly/sse_dynamic_monthly.module
modules/contrib/simple_sitemap_extensions/simple_sitemap_extensions.api.php
modules/contrib/simple_sitemap_extensions/simple_sitemap_extensions.install
modules/contrib/simple_sitemap_extensions/simple_sitemap_extensions.module
modules/contrib/simple_sitemap_extensions/src/Controller/DynamicSimplesitemapController.php
modules/contrib/simple_sitemap_extensions/src/DynamicSitemapQueueWorker.php
modules/contrib/simple_sitemap_extensions/src/Form/SitemapIndexForm.php
modules/contrib/simple_sitemap_extensions/src/PathProcessor/PathProcessorSitemapVariantIn.php
modules/contrib/simple_sitemap_extensions/src/PathProcessor/PathProcessorSitemapVariantOut.php
modules/contrib/simple_sitemap_extensions/src/Plugin/simple_sitemap/SitemapGenerator/AbstractDynamicSitemapGenerator.php
modules/contrib/simple_sitemap_extensions/src/Plugin/simple_sitemap/SitemapGenerator/DynamicSitemapGeneratorInterface.php
modules/contrib/simple_sitemap_extensions/src/Plugin/simple_sitemap/SitemapGenerator/SitemapIndexGenerator.php
modules/contrib/simple_sitemap_extensions/src/Plugin/simple_sitemap/SitemapType/DynamicSitemapType.php
modules/contrib/simple_sitemap_extensions/src/Plugin/simple_sitemap/SitemapType/ExtendedEntitySitemapType.php
modules/contrib/simple_sitemap_extensions/src/Plugin/simple_sitemap/SitemapType/SitemapIndexType.php
modules/contrib/simple_sitemap_extensions/src/Plugin/simple_sitemap/UrlGenerator/ExtendedEntityUrlGenerator.php
modules/contrib/simple_sitemap_extensions/src/Plugin/simple_sitemap/UrlGenerator/SitemapVariantUrlGenerator.php
modules/contrib/simple_sitemap_extensions/src/Routing/RouteSubscriber.php
modules/contrib/simple_sitemap_extensions/src/SimpleSitemapExtensionsServiceProvider.php
modules/contrib/simple_sitemap_extensions/src/SitemapIndexTrait.php

10 files with changes
=====================

1) modules/contrib/simple_sitemap_extensions/src/SitemapIndexTrait.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Gets variants that are sitemap index variants.
    *
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $manager
+   * @param SimplesitemapManager $manager
    *   Sitemap manager.
    *
    * @return array
@@ @@
   /**
    * Gets variants that are not sitemap index variants.
    *
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $manager
+   * @param SimplesitemapManager $manager
    *   Sitemap manager.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/simple_sitemap_extensions/src/Plugin/simple_sitemap/UrlGenerator/SitemapVariantUrlGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_extensions\Plugin\simple_sitemap\UrlGenerator;

+use Drupal\simple_sitemap\SimplesitemapManager;
+use Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorBase;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Url;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Sitemap manager.
    *
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   protected $sitemapManager;

@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
    *   Plugin id.
    * @param string $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
+   * @param Simplesitemap $generator
    *   Sitemap generator.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   Logger.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database.
    */
   public function __construct(
@@ @@
   /**
    * The static create function.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    * @param array $configuration
    *   The configuration.
@@ @@
    * @param mixed $plugin_definition
    *   The plugin definition.
    *
-   * @return \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorBase|\Drupal\simple_sitemap_extensions\Plugin\simple_sitemap\UrlGenerator\SitemapVariantUrlGenerator|static
+   * @return UrlGeneratorBase|\Drupal\simple_sitemap_extensions\Plugin\simple_sitemap\UrlGenerator\SitemapVariantUrlGenerator|static
    *   Instance of this class.
    */
   public static function create(
@@ @@
    * @param string $variant
    *   Current sitemap variant.
    *
-   * @return \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorBase
+   * @return SitemapGeneratorBase
    *   Sitemap generator plugin with variant configured.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getGeneratorFromVariant(string $variant) {
     $sitemap_variants = $this->sitemapManager->getSitemapVariants();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/simple_sitemap_extensions/src/Plugin/simple_sitemap/UrlGenerator/ExtendedEntityUrlGenerator.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Traverses the entity according to path configuration to fetch image data.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A fieldable entity.
    * @param array $image_paths
    *   Configuration of image paths.
@@ @@
   /**
    * Gets the image data for an image field.
    *
-   * @param \Drupal\file\Plugin\Field\FieldType\FileFieldItemList $field
+   * @param FileFieldItemList $field
    *   Image field.
    *
    * @return array
@@ @@
     foreach ($field->getValue() as $value) {
       $id = $value['target_id'];
       $image_data[$id] = [
-        'path' => file_create_url(File::load($value['target_id'])->getFileUri()),
+        'path' => \Drupal::service('file_url_generator')->generateAbsoluteString(File::load($value['target_id'])->getFileUri()),
         'alt' => $value['alt'],
         'title' => $value['title'],
       ];
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/simple_sitemap_extensions/src/Plugin/simple_sitemap/SitemapGenerator/AbstractDynamicSitemapGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_extensions\Plugin\simple_sitemap\SitemapGenerator;

+use Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorBase;
 use Drupal\Component\Datetime\Time;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Extension\ModuleHandler;
@@ @@
   /**
    * Drupal state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
    *   Plugin id.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Drupal database connection service.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   Module handler service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager service.
-   * @param \Drupal\Component\Datetime\Time $time
+   * @param Time $time
    *   Time service.
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapWriter $sitemap_writer
+   * @param SitemapWriter $sitemap_writer
    *   Sitemap writer service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   Drupal state service.
    */
   public function __construct(
@@ @@
   /**
    * Poor man's dependency injection.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Service container.
    * @param array $configuration
    *   Configuration.
@@ @@
    * @param mixed $plugin_definition
    *   Plugin definition.
    *
-   * @return AbstractDynamicSitemapGenerator|\Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorBase|static
+   * @return AbstractDynamicSitemapGenerator|SitemapGeneratorBase|static
    *   Constructor parameters.
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/simple_sitemap_extensions/src/Form/SitemapIndexForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_extensions\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\simple_sitemap\Form\FormHelper;
@@ @@
   /**
    * Sitemap generator.
    *
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;

@@ @@
   /**
    * Sitemap manager.
    *
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   protected $manager;

@@ @@
   /**
    * Form helper.
    *
-   * @var \Drupal\simple_sitemap\Form\FormHelper
+   * @var FormHelper
    */
   protected $formHelper;

@@ @@
   /**
    * SitemapIndexForm constructor.
    *
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
+   * @param Simplesitemap $generator
    *   Sitemap generator.
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $manager
+   * @param SimplesitemapManager $manager
    *   Sitemap manager.
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param FormHelper $form_helper
    *   Form helper.
    */
   public function __construct(
@@ @@
   /**
    * Gets the configuration for sitemap index.
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   The config.
    */
   protected function getEditableConfig() {
@@ @@
   /**
    * Gets enabled variants from the form submission.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Formstate.
    *
    * @return string[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/simple_sitemap_extensions/src/DynamicSitemapQueueWorker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_extensions;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\simple_sitemap_extensions\Plugin\simple_sitemap\SitemapGenerator\DynamicSitemapGeneratorInterface;
 use Drupal\simple_sitemap\Queue\QueueWorker;

@@ @@
    * @param bool $complete
    *   All the links has been processed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function generateVariantChunksFromResults($complete = FALSE) {
     $generator = $this->manager->getSitemapGenerator($this->generatorProcessedNow)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/simple_sitemap_extensions/src/Controller/DynamicSimplesitemapController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_extensions\Controller;

+use Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorBase;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\State\StateInterface;
 use Drupal\simple_sitemap\Controller\SimplesitemapController;
 use Drupal\simple_sitemap\Simplesitemap;
@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * MonthlySitemapController constructor.
    *
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
+   * @param Simplesitemap $generator
    *   Simple sitemap generator service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
    */
   public function __construct(Simplesitemap $generator, StateInterface $state) {
@@ @@
    * @param string $variant
    *   Current sitemap variant.
    *
-   * @return \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorBase
+   * @return SitemapGeneratorBase
    *   Sitemap generator plugin with variant configured.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getGeneratorFromVariant(string $variant) {
     $sitemap_manager = $this->generator->getSitemapManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/simple_sitemap_extensions/simple_sitemap_extensions.install:15

    ---------- begin diff ----------
@@ @@

   $sitemap_manager = NULL;
   if (\Drupal::service('module_handler')->moduleExists('simple_sitemap')) {
-    /** @var \Drupal\simple_sitemap\SimplesitemapManager $sitemap_manager */
+    /** @var SimplesitemapManager $sitemap_manager */
     $sitemap_manager = \Drupal::service('simple_sitemap.manager');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/simple_sitemap_extensions/simple_sitemap_extensions.api.php:10

    ---------- begin diff ----------
@@ @@
 /**
  * Allows altering of the entity query when generating the dataset.
  *
- * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\EntityUrlGenerator $generator
+ * @param EntityUrlGenerator $generator
  *   The generator.
- * @param \Drupal\Core\Entity\Query\QueryInterface $query
+ * @param QueryInterface $query
  *   The query which selects the entities to be put on the sitemap.
  */
 function hook_simple_sitemap_extensions_alter_dataset_entity_query(EntityUrlGenerator $generator, QueryInterface $query) {
    ----------- end diff -----------

10) modules/contrib/simple_sitemap_extensions/modules/sse_dynamic_monthly/src/Plugin/simple_sitemap/UrlGenerator/MonthlySitemapUrlGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sse_dynamic_monthly\Plugin\simple_sitemap\UrlGenerator;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ @@
   /**
    * Drupal datetime formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    * @return mixed
    *   Usually a timestamp.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getOldestEntityCreatedDate($bundle_settings) {
     $oldest = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 10 files have been changed by Rector                                      

