modules/contrib/spalp/spalp.module
modules/contrib/spalp/spalp_example/spalp_example.module
modules/contrib/spalp/spalp_example/src/EventSubscriber/SpalpExampleAppIdsAlterSubscriber.php
modules/contrib/spalp/spalp_example/src/EventSubscriber/SpalpExampleConfigAlterSubscriber.php
modules/contrib/spalp/spalp_example/src/EventSubscriber/SpalpExampleConfigLocationAlterSubscriber.php
modules/contrib/spalp/spalp_example/src/Plugin/Block/ExampleBlock.php
modules/contrib/spalp/spalp_example/src/SpalpExampleInterface.php
modules/contrib/spalp/spalp_example/tests/src/Functional/LoadTest.php
modules/contrib/spalp/src/Commands/SpalpCommands.php
modules/contrib/spalp/src/Controller/AppLandingJsonController.php
modules/contrib/spalp/src/Event/SpalpAppIdsAlterEvent.php
modules/contrib/spalp/src/Event/SpalpConfigAlterEvent.php
modules/contrib/spalp/src/Event/SpalpConfigLocationAlterEvent.php
modules/contrib/spalp/src/Form/SpalpConfigForm.php
modules/contrib/spalp/src/Plugin/Field/FieldWidget/JsonConfigFormWidget.php
modules/contrib/spalp/src/Plugin/Validation/Constraint/UniqueSpalpAppId.php
modules/contrib/spalp/src/Plugin/Validation/Constraint/UniqueSpalpAppIdValidator.php
modules/contrib/spalp/src/Service/Core.php
modules/contrib/spalp/src/Service/SpalpConfig.php
modules/contrib/spalp/tests/src/Functional/LoadTest.php
modules/contrib/spalp/tests/src/Unit/SpalpCoreTest.php

14 files with changes
=====================

1) modules/contrib/spalp/tests/src/Unit/SpalpCoreTest.php:15

    ---------- begin diff ----------
@@ @@

   public $coreService;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $loggerFactory = $this->createMock('\Drupal\Core\Logger\LoggerChannelFactoryInterface');
     $moduleHandler = $this->createMock('\Drupal\Core\Extension\ModuleHandlerInterface');
     $event_dispatcher = $this->createMock('\Symfony\Contracts\EventDispatcher\EventDispatcherInterface');
     $entity_type_manager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');
-    $language_manager = $this->getMockBuilder('\Drupal\Core\Language\LanguageManagerInterface')->disableOriginalConstructor()->getMock();
+    $language_manager = $this->createMock('\Drupal\Core\Language\LanguageManagerInterface');

     $this->coreService = new Core(
       $loggerFactory,
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/spalp/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\spalp\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/spalp/src/Service/SpalpConfig.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * An event dispatcher instance to use for configuration events.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * SpalpConfig constructor.
    *
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Injected event dispatcher dependency.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/spalp/src/Service/Core.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\spalp\Service;

+use Drupal\Core\Language\LanguageManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * Logger Factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Event Dispatcher.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager;

@@ @@
   /**
    * Spalp Core constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   LoggerChannelFactory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Module Handler Interface.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event Dispatcher interface.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   EntityTypeManagerInterface.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   LanguageManagerInterface.
    */
   public function __construct(
@@ @@
    * @param string $module
    *   The machine name of the module being installed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function createNodes($module) {

@@ @@
     $json = [];

     // Set up default paths to config files.
-    $module_path = DRUPAL_ROOT . '/' . drupal_get_path('module', $module);
+    $module_path = DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath($module);

     $base_filename = $module;
     if (!empty($language)) {
@@ @@
    * @return array
    *   The text and configuration settings for the app json endpoint, as array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getAppConfig($module, $language = NULL, $revision = NULL) {
     $config = [];
@@ @@
    * @param int $revision
    *   The ID of a specific revision to load.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The applanding node for this module.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getAppNode($module, $language = NULL, $revision = NULL) {
     $node_storage = $this->entityTypeManager->getStorage('node');
@@ @@
    * @param string $language
    *   The language code.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function setAppConfig($module, array $config_json = NULL, $overwrite = FALSE, $language = NULL) {

@@ @@
    *   - 'node': the value on the node.
    *   - 'json': the value in JSON.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getAppConfigDiff($module) {
     $config_node = $this->getAppConfig($module);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/spalp/src/Plugin/Validation/Constraint/UniqueSpalpAppIdValidator.php:14

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $items
    *   The value that should be validated.
-   * @param \Symfony\Component\Validator\Constraint $constraint
+   * @param Constraint $constraint
    *   The constraint for the validation.
    */
   public function validate(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/spalp/src/Plugin/Field/FieldWidget/JsonConfigFormWidget.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Spalp Core Service.
    *
-   * @var \Drupal\spalp\Service\Core
+   * @var Core
    */
   protected $spalpCoreService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/spalp/src/Controller/AppLandingJsonController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\spalp\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
   /**
    * Spalp core service instance.
    *
-   * @var \Drupal\spalp\Service\Core
+   * @var Core
    */
   protected $spalpCoreService;

@@ @@
   /**
    * Language Manager instance.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * ConfigurationJsonController constructor.
    *
-   * @param \Drupal\spalp\Service\Core $spalp_core_service
+   * @param Core $spalp_core_service
    *   Spalp core service to get app configurations and texts.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager instance.
    */
   public function __construct(Core $spalp_core_service, LanguageManagerInterface $language_manager) {
@@ @@
    * @param int $revision
    *   The ID of a specific revision to load.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON output.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function data($app_id = '', $revision = NULL) {
     if (empty($app_id)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/spalp/src/Commands/SpalpCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\spalp\Commands;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drush\Exceptions\UserAbortException;
 use Drupal\Component\Serialization\Json;
 use Drupal\spalp\Service\Core;
 use Drupal\spalp\Service\SpalpConfig;
@@ @@
   /**
    * Spalp Core Service.
    *
-   * @var \Drupal\spalp\Service\Core
+   * @var Core
    */
   protected $spalpCore;

@@ @@
   /**
    * Spalp Config Service.
    *
-   * @var \Drupal\spalp\Service\SpalpConfig
+   * @var SpalpConfig
    */
   private $spalpConfig;

@@ @@
   /**
    * SpalpCommands constructor.
    *
-   * @param \Drupal\spalp\Service\Core $spalpCore
+   * @param Core $spalpCore
    *   Spalp Core Service.
-   * @param \Drupal\spalp\Service\SpalpConfig $spalpConfig
+   * @param SpalpConfig $spalpConfig
    *   Spalp Config Service.
    */
   public function __construct(Core $spalpCore, SpalpConfig $spalpConfig) {
@@ @@
    * @param string $module
    *   The machine name of the module.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws UserAbortException
    *
    * @usage spalp:import-json spalp_example
    *   Re-import JSON for the spalp_example module.
@@ @@
    * @param string $module
    *   The machine name of the module.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws UserAbortException
    *
    * @command spalp:config-diff
    * @aliases scd
@@ @@
    * @param string $module
    *   The machine name of the module.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws UserAbortException
    *
    * @command spalp:config-export
    * @aliases sce
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/spalp/spalp_example/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\spalp_example\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/spalp/spalp_example/src/Plugin/Block/ExampleBlock.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\spalp\Service\Core definition.
    *
-   * @var \Drupal\spalp\Service\Core
+   * @var Core
    */
   protected $spalpCore;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\spalp\Service\Core $spalp_core
+   * @param Core $spalp_core
    *   The core service from the spalp module.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/spalp/spalp_example/src/EventSubscriber/SpalpExampleConfigLocationAlterSubscriber.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Use a custom location for spalp configuration.
    *
-   * @param \Drupal\spalp\Event\SpalpConfigLocationAlterEvent $event
+   * @param SpalpConfigLocationAlterEvent $event
    *   Spalp Config Location Alter event.
    */
   public function doConfigLocationAlter(SpalpConfigLocationAlterEvent $event) {
@@ @@
       // In a real implementation, you would change them.
       // For instance, your JSON might be in the libraries directory.
       // TODO: proper dependency injection example.
-      $module_path = drupal_get_path('module', 'spalp_example');
+      $module_path = \Drupal::service('extension.list.module')->getPath('spalp_example');
       $locations = [
         'config' => $module_path . '/config/spalp/spalp_example.config.json',
         'schema' => $module_path . '/config/spalp/spalp_example.config.schema.json',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/spalp/spalp_example/src/EventSubscriber/SpalpExampleConfigAlterSubscriber.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * React to app alter event to add additional config.
    *
-   * @param \Drupal\spalp\Event\SpalpConfigAlterEvent $event
+   * @param SpalpConfigAlterEvent $event
    *   Spalp App Ids Alter Event.
    */
   public function doAppConfigAlter(SpalpConfigAlterEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/spalp/spalp_example/src/EventSubscriber/SpalpExampleAppIdsAlterSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * React to app id alter event to add this modules app id.
    *
-   * @param \Drupal\spalp\Event\SpalpAppIdsAlterEvent $event
+   * @param SpalpAppIdsAlterEvent $event
    *   Spalp App Ids Alter Event.
    */
   public function doAppIdsListAlter(SpalpAppIdsAlterEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/spalp/spalp.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleExtensionList;
 /**
  * @file
  * Contains spalp.module.
@@ @@
 /**
  * Set dynamic allowed values for the app ID field.
  *
- * @param \Drupal\field\Entity\FieldStorageConfig $definition
+ * @param FieldStorageConfig $definition
  *   The field definition.
- * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
+ * @param ContentEntityInterface|null $entity
  *   The entity being created if applicable.
  * @param bool $cacheable
  *   Boolean indicating if the results are cacheable.
@@ @@
  * Implements hook_modules_installed().
  */
 function spalp_modules_installed($modules) {
-  /** @var \Drupal\Core\Extension\ModuleExtensionList $module_list_service */
+  /** @var ModuleExtensionList $module_list_service */
   $module_list_service = \Drupal::service('extension.list.module');
   $module_list = $module_list_service->getList();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

