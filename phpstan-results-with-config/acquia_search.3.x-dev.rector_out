modules/contrib/acquia_search/acquia_search.api.php
modules/contrib/acquia_search/acquia_search.install
modules/contrib/acquia_search/acquia_search.module
modules/contrib/acquia_search/acquia_search.post_update.php
modules/contrib/acquia_search/src/AcquiaCryptConnector.php
modules/contrib/acquia_search/src/AcquiaSearchApiClient.php
modules/contrib/acquia_search/src/Client/Adapter/TimeoutAwarePsr18Adapter.php
modules/contrib/acquia_search/src/Commands/AcquiaSearchCommands.php
modules/contrib/acquia_search/src/EventSubscriber/SearchSubscriber.php
modules/contrib/acquia_search/src/Helper/Flood.php
modules/contrib/acquia_search/src/Helper/Messages.php
modules/contrib/acquia_search/src/Helper/Runtime.php
modules/contrib/acquia_search/src/Helper/Storage.php
modules/contrib/acquia_search/src/Plugin/SolrConnector/SearchApiSolrAcquiaConnector.php
modules/contrib/acquia_search/src/Plugin/migrate/destination/AcquiaSearchIndex.php
modules/contrib/acquia_search/src/Plugin/migrate/source/AcquiaSearchIndex.php
modules/contrib/acquia_search/src/PreferredSearchCore.php
modules/contrib/acquia_search/tests/fixtures/drupal7.php
modules/contrib/acquia_search/tests/src/Kernel/Migrate/d7/MigrateAcquiaSearchConfigurationTest.php
modules/contrib/acquia_search/tests/src/Unit/AcquiaCryptConnectorTest.php
modules/contrib/acquia_search/tests/src/Unit/AcquiaSearchApiClientTest.php
modules/contrib/acquia_search/tests/src/Unit/Commands/AcquiaSearchCommandsTest.php
modules/contrib/acquia_search/tests/src/Unit/Helper/RuntimeTest.php
modules/contrib/acquia_search/tests/src/Unit/Helper/StorageTest.php
modules/contrib/acquia_search/tests/src/Unit/PreferredSearchCoreTest.php

16 files with changes
=====================

1) modules/contrib/acquia_search/tests/src/Unit/PreferredSearchCoreTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_search\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\acquia_search\Helper\Storage;
 use Drupal\acquia_search\PreferredSearchCore;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
  */
 class PreferredSearchCoreTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The Acquia Search Solr module config.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $config;

@@ @@
   /**
    * The Drupal module handler.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $moduleHandler;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $state = $this->prophesize(State::class);
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     parent::tearDown();
     $container = new ContainerBuilder();
     \Drupal::setContainer($container);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/acquia_search/tests/src/Unit/Helper/StorageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_search\Unit\Helper;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\acquia_search\Helper\Storage;
 use Drupal\Component\Uuid\Php;
 use Drupal\Core\Config\Config;
@@ @@
  */
 class StorageTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $state = $this->prophesize(State::class);
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     parent::tearDown();
     $container = new ContainerBuilder();
     \Drupal::setContainer($container);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/acquia_search/tests/src/Unit/Helper/RuntimeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_search\Unit\Helper;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\acquia_search\Helper\Runtime;
 use Drupal\acquia_search\Helper\Storage;
 use Drupal\Component\Datetime\Time;
@@ @@
  */
 class RuntimeTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Cache backend.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $cacheBackend;

@@ @@
   /**
    * The Acquia Search Solr module config.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $config;

@@ @@
   /**
    * GuzzleHttp Client.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $guzzleClient;

@@ @@
   /**
    * The Drupal module handler.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $moduleHandler;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $state = $this->prophesize(State::class);
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     parent::tearDown();
     $container = new ContainerBuilder();
     \Drupal::setContainer($container);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/acquia_search/tests/src/Unit/Commands/AcquiaSearchCommandsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_search\Unit\Commands {

+  use Prophecy\PhpUnit\ProphecyTrait;
+  use Prophecy\Prophecy\ObjectProphecy;
   use Drupal\acquia_search\Commands\AcquiaSearchCommands;
   use Drupal\acquia_search\Helper\Storage;
   use Drupal\Component\Datetime\Time;
@@ @@
    */
   class AcquiaSearchCommandsTest extends UnitTestCase {

+    use ProphecyTrait;
     /**
      * OutputInterface.
      *
-     * @var \Prophecy\Prophecy\ObjectProphecy
+     * @var ObjectProphecy
      */
     protected $output;

@@ @@
     /**
      * Command.
      *
-     * @var \Drupal\acquia_search\Commands\AcquiaSearchCommands
+     * @var AcquiaSearchCommands
      */
     protected $command;

@@ @@
     /**
      * CacheBackendInterface.
      *
-     * @var \Prophecy\Prophecy\ObjectProphecy
+     * @var ObjectProphecy
      */
     protected $cache;

@@ @@
     /**
      * GuzzleHttp Client.
      *
-     * @var \Prophecy\Prophecy\ObjectProphecy
+     * @var ObjectProphecy
      */
     protected $guzzleClient;

@@ @@
     /**
      * {@inheritdoc}
      */
-    protected function setUp() {
+    protected function setUp(): void {
       parent::setUp();

       $state = $this->prophesize(State::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/acquia_search/tests/src/Unit/AcquiaSearchApiClientTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_search\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\acquia_search\AcquiaSearchApiClient;
 use Drupal\acquia_search\Helper\Storage;
 use Drupal\Component\Datetime\Time;
@@ @@
  */
 class AcquiaSearchApiClientTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * GuzzleHttp Client.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $guzzleClient;

@@ @@
   /**
    * Cache backend.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $cacheBackend;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {

     parent::setUp();

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     parent::tearDown();
     $container = new ContainerBuilder();
     \Drupal::setContainer($container);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/acquia_search/tests/src/Kernel/Migrate/d7/MigrateAcquiaSearchConfigurationTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->loadFixture(implode(DIRECTORY_SEPARATOR, [
       DRUPAL_ROOT,
-      drupal_get_path('module', 'acquia_search'),
+      \Drupal::service('extension.list.module')->getPath('acquia_search'),
       'tests',
       'fixtures',
       'drupal7.php',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/acquia_search/src/Plugin/SolrConnector/SearchApiSolrAcquiaConnector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_search\Plugin\SolrConnector;

+use Drupal\acquia_search\EventSubscriber\SearchSubscriber;
+use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\acquia_search\Client\Adapter\TimeoutAwarePsr18Adapter;
 use Drupal\acquia_search\Helper\Messages;
 use Drupal\acquia_search\Helper\Runtime;
@@ @@
   /**
    * Centralized place for accessing and updating Acquia Search Solr settings.
    *
-   * @var \Drupal\acquia_search\Helper\Storage
+   * @var Storage
    */
   protected $storage;

@@ @@
   /**
    * Event subscriber.
    *
-   * @var \Drupal\acquia_search\EventSubscriber\SearchSubscriber
+   * @var SearchSubscriber
    */
   protected $searchSubscriber;

@@ @@
   /**
    * A cache backend interface.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
    *
    * @param array $configuration
    *   Solr connection configuration.
-   * @param \Drupal\acquia_search\PreferredSearchCore $preferred_core_service
+   * @param PreferredSearchCore $preferred_core_service
    *   Service for determining the preferred search core.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/acquia_search/src/Helper/Runtime.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Preferred search core service.
    *
-   * @var \Drupal\acquia_search\PreferredSearchCore
+   * @var PreferredSearchCore
    */
   protected static $preferredSearchCoreService;

@@ @@
    * Helps to determines which search core should be used and whether it is
    * available within the subscription.
    *
-   * @return \Drupal\acquia_search\PreferredSearchCore
+   * @return PreferredSearchCore
    *   Preferred search core service.
    */
   public static function getPreferredSearchCoreService(): PreferredSearchCore {
@@ @@
    * @param string $application_uuid
    *   Acquia application UUID.
    *
-   * @return \Drupal\acquia_search\AcquiaSearchApiClient
+   * @return AcquiaSearchApiClient
    *   Acquia Search API Client.
    */
   public static function getAcquiaSearchApiClient(string $application_uuid = NULL): AcquiaSearchApiClient {
@@ @@
   /**
    * Determine whether given server belongs to an Acquia search server.
    *
-   * @param \Drupal\search_api\Entity\Server $server
+   * @param Server $server
    *   A search server configuration entity.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/acquia_search/src/Helper/Messages.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_search\Helper;

+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend;
 use Drupal\acquia_search\Plugin\SolrConnector\SearchApiSolrAcquiaConnector;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
   /**
    * Returns formatted message about Acquia Search connection details.
    *
-   * @param \Drupal\search_api\Entity\Server $server
+   * @param Server $server
    *   Search server configuration entity.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    *   Formatted message about Acquia Search connection details.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws PluginException
+   * @throws SearchApiException
    */
   public static function getSearchStatusMessage(Server $server) {

-    /** @var \Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend $backend */
+    /** @var SearchApiSolrBackend $backend */
     $backend = $server->getBackend();
     $configuration = $backend->getSolrConnector()->getConfiguration();

@@ @@
    * @param int $override
    *   Override mode. Read-only or core auto selected.
    *
-   * @return array|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return array|TranslatableMarkup
    *   Text describing the current override mode.
    */
   public static function getOverriddenModeMessage(int $override) {
@@ @@
    * @param array $configuration
    *   A configuration array containing scheme, host, port and path.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translatable markup showing the current URL based on configuration.
    */
   public static function getServerUrlMessage(array $configuration): TranslatableMarkup {
@@ @@
    * @param string|int|null $server_id
    *   Server ID.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translatable markup describing current server.
    */
   public static function getServerIdMessage($server_id): TranslatableMarkup {
@@ @@
   /**
    * Get text describing availability for the given server.
    *
-   * @param \Drupal\search_api\Entity\Server $server
+   * @param Server $server
    *   Search server configuration entity.
    *
-   * @return array|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return array|TranslatableMarkup
    *   Solr server availability message.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    */
   public static function getServerAvailabilityMessage(Server $server) {

@@ @@
   /**
    * Get message describing authentication status for the given server.
    *
-   * @param \Drupal\search_api\Entity\Server $server
+   * @param Server $server
    *   Search server configuration entity.
    *
-   * @return array|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return array|TranslatableMarkup
    *   Solr server authentication status message.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    */
   public static function getServerAuthCheckMessage(Server $server) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/acquia_search/src/EventSubscriber/SearchSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_search\EventSubscriber;

+use Solarium\Core\Event\PreExecuteRequest;
+use Solarium\Core\Client\Request;
+use Solarium\Core\Event\PostExecuteRequest;
 use Drupal\acquia_search\AcquiaCryptConnector;
 use Drupal\acquia_search\Helper\Flood;
 use Drupal\acquia_search\Helper\Runtime;
@@ @@
   /**
    * Build Acquia Search Solr Authenticator.
    *
-   * @param \Solarium\Core\Event\PreExecuteRequest|\Drupal\search_api_solr\Solarium\EventDispatcher\EventProxy $event
+   * @param PreExecuteRequest|\Drupal\search_api_solr\Solarium\EventDispatcher\EventProxy $event
    *   PreExecuteRequest event.
    */
   public function preExecuteRequest($event) {
     /** @var \Solarium\Core\Event\PreExecuteRequest $event */
-    /** @var \Solarium\Core\Client\Request $request */
+    /** @var Request $request */
     $request = $event->getRequest();

     if (!($this->client instanceof Client)) {
@@ @@
   /**
    * Validate response.
    *
-   * @param \Solarium\Core\Event\PostExecuteRequest|\Drupal\search_api_solr\Solarium\EventDispatcher\EventProxy $event
+   * @param PostExecuteRequest|\Drupal\search_api_solr\Solarium\EventDispatcher\EventProxy $event
    *   postExecuteRequest event.
    *
-   * @throws \Solarium\Exception\HttpException
+   * @throws HttpException
    */
   public function postExecuteRequest($event) {
     if (!($this->client instanceof Client)) {
@@ @@
       return;
     }

-    /** @var \Solarium\Core\Event\PostExecuteRequest $event */
+    /** @var PostExecuteRequest $event */
     $response = $event->getResponse();

     if ($response->getStatusCode() != 200) {
@@ @@
   /**
    * Validate the hmac for the response body.
    *
-   * @param \Solarium\Core\Client\Response $response
+   * @param Response $response
    *   Solarium Response.
    * @param string $nonce
    *   Nonce.
@@ @@
    * @param string $url
    *   Url.
    *
-   * @return \Solarium\Core\Client\Response
+   * @return Response
    *   Solarium Response.
    *
-   * @throws \Solarium\Exception\HttpException
+   * @throws HttpException
    */
   protected function authenticateResponse(Response $response, $nonce, $url) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/acquia_search/src/Commands/AcquiaSearchCommands.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $cache;

@@ @@
   /**
    * AcquiaSearchCommands constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache backend service.
    */
   public function __construct(CacheBackendInterface $cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/acquia_search/src/Client/Adapter/TimeoutAwarePsr18Adapter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Solarium Psr18 Adapter.
    *
-   * @var \Solarium\Core\Client\Adapter\Psr18Adapter
+   * @var Psr18Adapter
    */
   protected $psr18Adapter;

@@ @@
   /**
    * Constructor of TimeoutAwarePsr18Adapter.
    *
-   * @param \Psr\Http\Client\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   Guzzle HTTP Client.
    */
   public function __construct(ClientInterface $httpClient) {
@@ @@
   /**
    * Executes request.
    *
-   * @param \Solarium\Core\Client\Request $request
+   * @param Request $request
    *   Solarium Request.
-   * @param \Solarium\Core\Client\Endpoint $endpoint
+   * @param Endpoint $endpoint
    *   Solarium Endpoint.
    *
-   * @return \Solarium\Core\Client\Response
+   * @return Response
    *   Solarium response object.
    */
   public function execute(Request $request, Endpoint $endpoint): Response {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/acquia_search/src/AcquiaSearchApiClient.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The HTTP client to fetch the feed data with.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $client;

@@ @@
    *
    * @param array $auth_info
    *   Authorization array.
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   HTTP client.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache backend.
    */
   public function __construct(array $auth_info, Client $http_client, CacheBackendInterface $cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/acquia_search/acquia_search.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleInstallerInterface;
 /**
  * @file
  * Search Solr updates once other modules have made their own updates.
@@ @@
   }

   // Uninstall Search API Solr Multilingual if its still around.
-  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+  /** @var ModuleInstallerInterface $module_installer */
   $module_installer = \Drupal::service('module_installer');
   if (\Drupal::moduleHandler()->moduleExists('search_api_solr_multilingual')) {
     $module_installer->uninstall(['search_api_solr_multilingual']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


15) modules/contrib/acquia_search/acquia_search.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\search_api\Entity\Index;
+use Drupal\search_api\IndexInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 /**
  * @file
  * Integration between Drupal and Acquia's hosted Solr search service.
@@ @@
  * Flag when a certain server should be enforcing read-only mode.
  */
 function acquia_search_search_api_server_load(array $entities) {
-  /** @var \Drupal\search_api\Entity\Server[] $entities */
+  /** @var Server[] $entities */
   $acquia_servers = array_filter($entities, function ($server) {
     return Runtime::isAcquiaServer($server);
   });

   foreach ($acquia_servers as $server) {
-    /** @var \Drupal\search_api\Entity\Server $server */
+    /** @var Server $server */
     $backend_config = $server->getBackendConfig();

     unset($backend_config['overridden_by_acquia_search']);
@@ @@
  */
 function acquia_search_search_api_index_load($entities) {
   // Loop through the Index entities.
-  /** @var \Drupal\search_api\Entity\Index $index */
+  /** @var Index $index */
   foreach ($entities as &$index) {

     // Check for server-less indexes.
@@ @@
     return;
   }

-  /** @var \Drupal\search_api\Entity\Server $server */
+  /** @var Server $server */
   if (!Runtime::isAcquiaServer($server)) {
     return;
   }
@@ @@
  */
 function acquia_search_form_search_api_index_edit_form_alter(&$form, FormState $form_state) {

-  /** @var \Drupal\search_api\Entity\Server $server */
+  /** @var Server $server */
   $server = Server::load($form['server']['#default_value']);

   if (!$server) {
@@ @@

   $settings = [];
   $default_settings = ['use_edismax' => TRUE];
-  /** @var \Drupal\search_api\IndexInterface $search_index */
+  /** @var IndexInterface $search_index */
   $search_index = $form_state->getFormObject()->getEntity();
   if (!$search_index->isNew()) {
     $settings = $search_index->getThirdPartySettings('acquia_search');
@@ @@
  *
  * Theme override for Search API index status page.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\search_api\SearchApiException
+ * @throws PluginException
+ * @throws SearchApiException
  */
 function acquia_search_preprocess_search_api_index(array &$variables) {
-  /** @var \Drupal\search_api\Entity\Index $index */
+  /** @var Index $index */
   $index = $variables['index'];
-  /** @var \Drupal\search_api\Entity\Server $server */
+  /** @var Server $server */
   $server = Server::load($index->get('server'));

   if (!$server || !Runtime::isAcquiaServer($server)) {
@@ @@
  * @param array $variables
  *   Variables.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\search_api\SearchApiException
+ * @throws PluginException
+ * @throws SearchApiException
  */
 function acquia_search_preprocess_search_api_server(array &$variables) {
-  /** @var \Drupal\search_api\Entity\Server $server */
+  /** @var Server $server */
   $server = $variables['server'];

   if (!Runtime::isAcquiaServer($server)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


16) modules/contrib/acquia_search/acquia_search.install:30

    ---------- begin diff ----------
@@ @@
       $requirements['acquia_search_ssl']['description'] = t('In order to protect the privacy of your content with the Acquia Search module you must have SSL support enabled in PHP on your host.');
     }

-    /** @var \Drupal\search_api\Entity\Server[] $servers */
+    /** @var Server[] $servers */
     $servers = Server::loadMultiple();

     $acquia_servers = array_filter($servers, function (Server $server) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 16 files have been changed by Rector                                      

