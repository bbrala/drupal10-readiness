diff --git a/src/Service/ImageBuilder.php b/src/Service/ImageBuilder.php
index 0e86942..ed7d07f 100644
--- a/src/Service/ImageBuilder.php
+++ b/src/Service/ImageBuilder.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\paragraphs_summary_token\Service;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\paragraphs\ParagraphInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -24,36 +28,36 @@ class ImageBuilder implements ImageBuilderInterface {
   /**
    * The file storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fileStorage;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * SummaryBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $streamWrapperManager
+   * @param StreamWrapperManagerInterface $streamWrapperManager
    *   The stream wrapper manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager, StreamWrapperManagerInterface $streamWrapperManager) {
     $this->setFieldStorageConfigStorage($entityTypeManager->getStorage('field_storage_config'));
@@ -76,13 +80,13 @@ class ImageBuilder implements ImageBuilderInterface {
       return $image_style->buildUrl($image_url);
     }
 
-    return file_create_url($image_url);
+    return \Drupal::service('file_url_generator')->generateAbsoluteString($image_url);
   }
 
   /**
    * Get the image URL from the given paragraphs field.
    *
-   * @param \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $paragraphs_field
+   * @param EntityReferenceRevisionsFieldItemList $paragraphs_field
    *   The paragraphs field.
    *
    * @return string
@@ -93,7 +97,7 @@ class ImageBuilder implements ImageBuilderInterface {
 
     if (!$paragraphs_field->isEmpty()) {
       $language = $this->languageManager->getCurrentLanguage()->getId();
-      /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
+      /** @var ParagraphInterface $paragraph */
       foreach ($paragraphs_field->referencedEntities() as $paragraph) {
         // First, loop over all text_long fields and check if one of those
         // fields contain content.
@@ -133,7 +137,7 @@ class ImageBuilder implements ImageBuilderInterface {
   /**
    * Retrieve the image URL from the given field.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field that contains an image.
    *
    * @return string
@@ -163,10 +167,10 @@ class ImageBuilder implements ImageBuilderInterface {
   /**
    * Retrieve the file entity from the given media entity.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity.
    *
-   * @return \Drupal\file\FileInterface|null
+   * @return FileInterface|null
    *   The file when found, else NULL.
    */
   private function retrieveFileFromMediaEntity(MediaInterface $media): ?FileInterface {
diff --git a/src/Service/ImageBuilderInterface.php b/src/Service/ImageBuilderInterface.php
index 983ef7b..507beb5 100644
--- a/src/Service/ImageBuilderInterface.php
+++ b/src/Service/ImageBuilderInterface.php
@@ -13,9 +13,9 @@ interface ImageBuilderInterface {
   /**
    * Retrieves the first image for the given paragraphs field.
    *
-   * @param \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $paragraphs_field
+   * @param EntityReferenceRevisionsFieldItemList $paragraphs_field
    *   The paragraphs field entity.
-   * @param \Drupal\image\ImageStyleInterface|null $image_style
+   * @param ImageStyleInterface|null $image_style
    *   The image style.
    *
    * @return string
diff --git a/src/Service/TextSummaryBuilder.php b/src/Service/TextSummaryBuilder.php
index 3c190d9..ee4a645 100644
--- a/src/Service/TextSummaryBuilder.php
+++ b/src/Service/TextSummaryBuilder.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\paragraphs_summary_token\Service;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\paragraphs\ParagraphInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;
@@ -17,20 +21,20 @@ class TextSummaryBuilder implements TextSummaryBuilderInterface {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * SummaryBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager) {
     $this->setFieldStorageConfigStorage($entityTypeManager->getStorage('field_storage_config'));
@@ -47,20 +51,20 @@ class TextSummaryBuilder implements TextSummaryBuilderInterface {
   /**
    * Build the summary for the given content entity based on paragraph fields.
    *
-   * @param \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $paragraphs_field
+   * @param EntityReferenceRevisionsFieldItemList $paragraphs_field
    *   The paragraphs field entity.
    *
    * @return string
    *   The summary.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   private function buildSummary(EntityReferenceRevisionsFieldItemList $paragraphs_field): string {
     $summary = '';
 
     if (!$paragraphs_field->isEmpty()) {
       $language = $this->languageManager->getCurrentLanguage()->getId();
-      /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
+      /** @var ParagraphInterface $paragraph */
       foreach ($paragraphs_field->referencedEntities() as $paragraph) {
         // First, loop over all text_long fields and check if one of those
         // fields contain content.
diff --git a/src/Service/TextSummaryBuilderInterface.php b/src/Service/TextSummaryBuilderInterface.php
index 14b8493..47ae9d0 100644
--- a/src/Service/TextSummaryBuilderInterface.php
+++ b/src/Service/TextSummaryBuilderInterface.php
@@ -12,7 +12,7 @@ interface TextSummaryBuilderInterface {
   /**
    * Builds a paragraph summary.
    *
-   * @param \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $paragraphs_field
+   * @param EntityReferenceRevisionsFieldItemList $paragraphs_field
    *   The paragraphs field entity.
    * @param int|null $trim
    *   The length of the text.
diff --git a/src/Traits/ParagraphsSummaryTokenTrait.php b/src/Traits/ParagraphsSummaryTokenTrait.php
index a510ff8..d650509 100644
--- a/src/Traits/ParagraphsSummaryTokenTrait.php
+++ b/src/Traits/ParagraphsSummaryTokenTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\paragraphs_summary_token\Traits;
 
+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 
@@ -27,14 +28,14 @@ trait ParagraphsSummaryTokenTrait {
   /**
    * The field storage config storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $fieldStorageConfigStorage;
 
   /**
    * Get all fields for the given entity type of the given field type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type to search on.
    * @param string $field_type
    *   The field type to search on.
@@ -45,7 +46,7 @@ trait ParagraphsSummaryTokenTrait {
   protected function getFieldsByEntityTypeAndFieldType(EntityTypeInterface $entity_type, string $field_type): array {
     if (empty($this->fields[$entity_type->id()][$field_type])) {
       $fields = [];
-      /** @var \Drupal\field\FieldStorageConfigInterface[] $paragraph_text_fields_config */
+      /** @var FieldStorageConfigInterface[] $paragraph_text_fields_config */
       $field_configs = $this->getFieldStorageConfigStorage()->loadByProperties([
         'entity_type' => $entity_type->id(),
         'type' => $field_type,
@@ -65,7 +66,7 @@ trait ParagraphsSummaryTokenTrait {
   /**
    * Get all ER or ERR fields for the given entity type and target type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type to search on.
    * @param string $target_type
    *   The target type to search on.
@@ -82,7 +83,7 @@ trait ParagraphsSummaryTokenTrait {
 
     if (empty($this->entityReferenceFields[$entity_type->id()][$field_type][$target_type])) {
       $fields = [];
-      /** @var \Drupal\field\FieldStorageConfigInterface[] $paragraph_text_fields_config */
+      /** @var FieldStorageConfigInterface[] $paragraph_text_fields_config */
       $field_configs = $this->getFieldStorageConfigStorage()->loadByProperties([
         'entity_type' => $entity_type->id(),
         'type' => $field_type,
@@ -102,7 +103,7 @@ trait ParagraphsSummaryTokenTrait {
   /**
    * Gets the field storage config storage.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   The field storage config storage.
    */
   protected function getFieldStorageConfigStorage(): ConfigEntityStorageInterface {
@@ -116,7 +117,7 @@ trait ParagraphsSummaryTokenTrait {
   /**
    * Sets the field storage config storage to use.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $field_storage_config_storage
+   * @param ConfigEntityStorageInterface $field_storage_config_storage
    *   The field storage config storage.
    *
    * @return $this
diff --git a/tests/modules/paragraphs_summary_token_test/src/ParagraphsSummaryTokenTestLanguageManager.php b/tests/modules/paragraphs_summary_token_test/src/ParagraphsSummaryTokenTestLanguageManager.php
index 8987096..27a7adc 100644
--- a/tests/modules/paragraphs_summary_token_test/src/ParagraphsSummaryTokenTestLanguageManager.php
+++ b/tests/modules/paragraphs_summary_token_test/src/ParagraphsSummaryTokenTestLanguageManager.php
@@ -13,7 +13,7 @@ class ParagraphsSummaryTokenTestLanguageManager extends ConfigurableLanguageMana
   /**
    * Sets current language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   Language interface.
    * @param string $type
    *   Type interface.
diff --git a/tests/src/Kernel/ImageBuilderTest.php b/tests/src/Kernel/ImageBuilderTest.php
index 0032c50..b0c3a13 100644
--- a/tests/src/Kernel/ImageBuilderTest.php
+++ b/tests/src/Kernel/ImageBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\paragraphs_summary_token\Kernel;
 
+use Drupal\paragraphs_summary_token\Service\ImageBuilderInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\paragraphs\Entity\Paragraph;
@@ -22,14 +23,14 @@ class ImageBuilderTest extends KernelTestBase {
   /**
    * The image builder.
    *
-   * @var \Drupal\paragraphs_summary_token\Service\ImageBuilderInterface
+   * @var ImageBuilderInterface
    */
   protected $imageBuilder;
 
   /**
    * The image style.
    *
-   * @var Drupal\image\Entity\ImageStyle
+   * @var ImageStyle
    */
   protected $imageStyle;
 
diff --git a/tests/src/Kernel/ImageBuilderTokenTest.php b/tests/src/Kernel/ImageBuilderTokenTest.php
index 50d07d1..2fcdda9 100644
--- a/tests/src/Kernel/ImageBuilderTokenTest.php
+++ b/tests/src/Kernel/ImageBuilderTokenTest.php
@@ -24,7 +24,7 @@ class ImageBuilderTokenTest extends KernelTestBase {
   /**
    * The image style.
    *
-   * @var Drupal\image\Entity\ImageStyle
+   * @var ImageStyle
    */
   protected $imageStyle;
 
@@ -107,7 +107,7 @@ class ImageBuilderTokenTest extends KernelTestBase {
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($image->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($image->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($image->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ -150,7 +150,7 @@ class ImageBuilderTokenTest extends KernelTestBase {
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($image_1->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_1->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($image_1->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ -229,7 +229,7 @@ class ImageBuilderTokenTest extends KernelTestBase {
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($image_1->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_1->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($image_1->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ -259,7 +259,7 @@ class ImageBuilderTokenTest extends KernelTestBase {
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($media->get('field_media_image')->entity->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($media->get('field_media_image')->entity->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($media->get('field_media_image')->entity->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ -294,7 +294,7 @@ class ImageBuilderTokenTest extends KernelTestBase {
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($media->get('field_media_image')->entity->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($media->get('field_media_image')->entity->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($media->get('field_media_image')->entity->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ -373,7 +373,7 @@ class ImageBuilderTokenTest extends KernelTestBase {
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($media_1->get('field_media_image')->entity->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($media_1->get('field_media_image')->entity->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($media_1->get('field_media_image')->entity->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ -410,7 +410,7 @@ class ImageBuilderTokenTest extends KernelTestBase {
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($media->get('field_media_image')->entity->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($media->get('field_media_image')->entity->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($media->get('field_media_image')->entity->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ -447,7 +447,7 @@ class ImageBuilderTokenTest extends KernelTestBase {
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($image_media->get('field_media_image')->entity->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_media->get('field_media_image')->entity->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($image_media->get('field_media_image')->entity->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
diff --git a/tests/src/Kernel/TextSummaryBuilderTest.php b/tests/src/Kernel/TextSummaryBuilderTest.php
index 23c30eb..4001da4 100644
--- a/tests/src/Kernel/TextSummaryBuilderTest.php
+++ b/tests/src/Kernel/TextSummaryBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\paragraphs_summary_token\Kernel;
 
+use Drupal\paragraphs_summary_token\Service\SummaryBuilder;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\paragraphs\Entity\Paragraph;
@@ -19,7 +20,7 @@ class TextSummaryBuilderTest extends KernelTestBase {
   /**
    * The text summary builder.
    *
-   * @var \Drupal\paragraphs_summary_token\Service\SummaryBuilder
+   * @var SummaryBuilder
    */
   protected $textSummaryBuilder;
 
diff --git a/tests/src/Kernel/TextSummaryTokenTest.php b/tests/src/Kernel/TextSummaryTokenTest.php
index 0d0706f..21760cb 100644
--- a/tests/src/Kernel/TextSummaryTokenTest.php
+++ b/tests/src/Kernel/TextSummaryTokenTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\paragraphs_summary_token\Kernel;
 
+use Drupal\Core\Entity\EntityTypeBundleInfo;
+use Drupal\content_translation\ContentTranslationManagerInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\node\Entity\Node;
@@ -22,28 +26,28 @@ class TextSummaryTokenTest extends KernelTestBase {
   /**
    * The bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $bundleInfo;
 
   /**
    * The content translation manager.
    *
-   * @var \Drupal\content_translation\ContentTranslationManagerInterface
+   * @var ContentTranslationManagerInterface
    */
   protected $contentTranslationManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;
 
diff --git a/tests/src/Traits/ParagraphsSummaryTokenTestTrait.php b/tests/src/Traits/ParagraphsSummaryTokenTestTrait.php
index 156173d..b87b389 100644
--- a/tests/src/Traits/ParagraphsSummaryTokenTestTrait.php
+++ b/tests/src/Traits/ParagraphsSummaryTokenTestTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\paragraphs_summary_token\Traits;
 
+use Drupal\media\MediaTypeInterface;
 use Drupal\file\FileInterface;
 use Drupal\file\Entity\File;
 use Drupal\media\Entity\Media;
@@ -18,21 +19,21 @@ trait ParagraphsSummaryTokenTestTrait {
   /**
    * The image media type.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   protected $imageMediaType;
 
   /**
    * The file media type.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   protected $fileMediaType;
 
   /**
    * Generates an image file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   An image file.
    */
   protected function createImageFile(): FileInterface {
@@ -48,7 +49,7 @@ trait ParagraphsSummaryTokenTestTrait {
   /**
    * Generates a text file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   A text file.
    */
   protected function createTextFile(): FileInterface {
