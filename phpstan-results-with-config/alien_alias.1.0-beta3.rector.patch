diff --git a/src/AlienAliasAccessControlHandler.php b/src/AlienAliasAccessControlHandler.php
index 9ee79ee..682eb67 100644
--- a/src/AlienAliasAccessControlHandler.php
+++ b/src/AlienAliasAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\alien_alias;
 
+use Drupal\alien_alias\Entity\AlienAliasInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class AlienAliasAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\alien_alias\Entity\AlienAliasInterface $entity */
+    /** @var AlienAliasInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
diff --git a/src/AlienAliasAccesses.php b/src/AlienAliasAccesses.php
index 0abccfd..b16d602 100644
--- a/src/AlienAliasAccesses.php
+++ b/src/AlienAliasAccesses.php
@@ -22,9 +22,9 @@ final class AlienAliasAccesses {
   /**
    * Flags permitting, we store this information in the database.
    *
-   * @param \Drupal\alien_alias\Exogen\ExogenInterface $exogen
+   * @param ExogenInterface $exogen
    *   This alien alias.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current page request.
    * @param int|null $time
    *
@@ -126,7 +126,7 @@ final class AlienAliasAccesses {
    *
    * @param Request $request
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public static function Respond404(Request $request) {
     $message = Settings::get('fast404_html', '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.0//EN" "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL "@path" was not found on this server (Fast 404).</p></body></html>');
diff --git a/src/AlienAliasHtmlRouteProvider.php b/src/AlienAliasHtmlRouteProvider.php
index 980a164..3e75366 100644
--- a/src/AlienAliasHtmlRouteProvider.php
+++ b/src/AlienAliasHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class AlienAliasHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/AlienAliasStatsManager.php b/src/AlienAliasStatsManager.php
index d07dea4..15e52ab 100644
--- a/src/AlienAliasStatsManager.php
+++ b/src/AlienAliasStatsManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\alien_alias;
 
+use Drupal\Core\Database\Query\Delete;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\Entity\Query\QueryInterface;
@@ -16,7 +17,7 @@ class AlienAliasStatsManager implements AlienAliasStatsManagerInterface {
   /**
    * The database handler.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -74,7 +75,7 @@ class AlienAliasStatsManager implements AlienAliasStatsManagerInterface {
    * @param int $end
    *   The timestamp end.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   The query for finding the matching records.
    */
   public function getQuery(array $conditions = [], $start = -1, $end = -1): SelectInterface {
@@ -92,7 +93,7 @@ class AlienAliasStatsManager implements AlienAliasStatsManagerInterface {
    *
    * If a string contains '%' then 'LIKE' will be used instead of '='.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface|\Drupal\Core\Database\Query\SelectInterface|\Drupal\Core\Database\Query\Delete $query
+   * @param QueryInterface|SelectInterface|Delete $query
    *   The query.
    * @param array $conditions
    *   Indexed by field, value is the condition value.
diff --git a/src/AlienAliasStatsManagerInterface.php b/src/AlienAliasStatsManagerInterface.php
index b03bd2a..aae1d42 100644
--- a/src/AlienAliasStatsManagerInterface.php
+++ b/src/AlienAliasStatsManagerInterface.php
@@ -43,7 +43,7 @@ interface AlienAliasStatsManagerInterface {
    * @param int $end
    *   The timestamp end.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   The query for finding the matching records.
    */
   public function getQuery(array $conditions = [], $start = 0, $end = -1): SelectInterface;
diff --git a/src/Controller/AlienAliasController.php b/src/Controller/AlienAliasController.php
index cc4fcd5..83dca23 100644
--- a/src/Controller/AlienAliasController.php
+++ b/src/Controller/AlienAliasController.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\alien_alias\Controller;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\alien_alias\Entity\AlienAliasInterface;
 use Drupal\alien_alias\AlienAliasAccesses;
 use Drupal\alien_alias\Exogen\Exogen;
 use Drupal\Core\Controller\ControllerBase;
@@ -21,25 +26,25 @@ class AlienAliasController extends ControllerBase {
   /**
    * The place we're storing the static aliases.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $aliases;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Constructs a new StaticPageController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $stack
+   * @param RequestStack $stack
    *   The page request stack.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, RequestStack $stack) {
     $this->aliases = $entityTypeManager->getStorage('alien_alias');
@@ -55,8 +60,8 @@ class AlienAliasController extends ControllerBase {
    * @return ControllerBase|AlienAliasController
    *   The instantiation.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function create(ContainerInterface $container) {
     return new static(
@@ -75,7 +80,7 @@ class AlienAliasController extends ControllerBase {
    *   Redirect to the other place (or do a fast 404).
    */
   public function redirector(string $alien_alias_name) {
-    /** @var \Drupal\alien_alias\Entity\AlienAliasInterface $alien_alias */
+    /** @var AlienAliasInterface $alien_alias */
     $alien_alias = $this->aliases->load($alien_alias_name);
     $exogen = Exogen::Factory($alien_alias);
 
diff --git a/src/EventSubscriber/AlienAliasSubscriber.php b/src/EventSubscriber/AlienAliasSubscriber.php
index ee51990..42397ad 100644
--- a/src/EventSubscriber/AlienAliasSubscriber.php
+++ b/src/EventSubscriber/AlienAliasSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\alien_alias\EventSubscriber;
 
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\alien_alias\AlienAliasAccesses;
 use Drupal\alien_alias\Exogen\ExogenInterface;
 use Drupal\Core\Database\Database;
@@ -11,7 +13,6 @@ use Drupal\Core\Site\Settings;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\Routing\Route;
 
@@ -25,7 +26,7 @@ class AlienAliasSubscriber implements EventSubscriberInterface {
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
@@ -63,9 +64,9 @@ class AlienAliasSubscriber implements EventSubscriberInterface {
    * Check whether the requested path is an alien alias, if it is
    * we redirect straight to it. This avoids unnecessary boot-up.
    *
-   * @param GetResponseEvent $event
+   * @param RequestEvent $event
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     // Check to see whether we want to prevent processing alien aliases here.
     if (!Settings::get('alien_alias_fast_response', TRUE)) {
       // Yes, we don't want to do it at all, just leave.
diff --git a/src/Form/AlienAliasSettingsForm.php b/src/Form/AlienAliasSettingsForm.php
index 69d8d85..61b0863 100644
--- a/src/Form/AlienAliasSettingsForm.php
+++ b/src/Form/AlienAliasSettingsForm.php
@@ -38,7 +38,7 @@ class AlienAliasSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -81,7 +81,7 @@ class AlienAliasSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Plugin/views/argument_default/AlienAlias.php b/src/Plugin/views/argument_default/AlienAlias.php
index 1ce8f06..29c8294 100644
--- a/src/Plugin/views/argument_default/AlienAlias.php
+++ b/src/Plugin/views/argument_default/AlienAlias.php
@@ -22,7 +22,7 @@ class AlienAlias extends ArgumentDefaultPluginBase implements CacheableDependenc
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -35,7 +35,7 @@ class AlienAlias extends ArgumentDefaultPluginBase implements CacheableDependenc
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match) {
diff --git a/src/Routing/AlienAliasRouting.php b/src/Routing/AlienAliasRouting.php
index af7f46b..773d426 100644
--- a/src/Routing/AlienAliasRouting.php
+++ b/src/Routing/AlienAliasRouting.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\alien_alias\Routing;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\alien_alias\Entity\AlienAliasInterface;
 use Drupal\alien_alias\Exogen\Exogen;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -19,18 +23,18 @@ class AlienAliasRouting implements ContainerInjectionInterface {
   /**
    * The storage for the static aliases.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $aliases;
 
   /**
    * AlienAliasRouting constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager we're using.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
     $this->aliases = $entityTypeManager->getStorage('alien_alias');
@@ -44,14 +48,14 @@ class AlienAliasRouting implements ContainerInjectionInterface {
    * class, but not the container itself. Every call to this method must return
    * a new instance of this class; that is, it may not implement a singleton.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this instance should use.
    *
    * @return static
    *   The new instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function create(ContainerInterface $container) {
     return new static(
@@ -65,7 +69,7 @@ class AlienAliasRouting implements ContainerInjectionInterface {
   public function routes() {
     $collection = new RouteCollection();
 
-    /** @var \Drupal\alien_alias\Entity\AlienAliasInterface $alien */
+    /** @var AlienAliasInterface $alien */
     foreach ($this->aliases->loadMultiple() as $alien) {
       if (!$alien->isPublished()) {
         // Don't include disabled AlienAliases.
diff --git a/tests/src/Functional/AlienAliasTest.php b/tests/src/Functional/AlienAliasTest.php
index 668a673..630cb19 100644
--- a/tests/src/Functional/AlienAliasTest.php
+++ b/tests/src/Functional/AlienAliasTest.php
@@ -58,7 +58,7 @@ class AlienAliasTest extends BrowserTestBase {
   /**
    * The things to be setup, like a default user and a test AlienAlias.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->user = $this->drupalCreateUser(['access content']);
diff --git a/tests/src/Kernel/AlienAliasTest.php b/tests/src/Kernel/AlienAliasTest.php
index ac9ad1b..d499605 100644
--- a/tests/src/Kernel/AlienAliasTest.php
+++ b/tests/src/Kernel/AlienAliasTest.php
@@ -68,7 +68,7 @@ class AlienAliasTest extends EntityKernelTestBase {
   /**
    * The things to be setup, like a default user and a test AlienAlias.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('alien_alias');
diff --git a/tests/src/Kernel/AlienStatsTest.php b/tests/src/Kernel/AlienStatsTest.php
index d904841..dfea584 100644
--- a/tests/src/Kernel/AlienStatsTest.php
+++ b/tests/src/Kernel/AlienStatsTest.php
@@ -7,6 +7,8 @@
 
 namespace Drupal\Tests\alien_alias\Unit;
 
+use Drupal\Core\Database\Connection;
+use Drupal\alien_alias\AlienAliasStatsManagerInterface;
 use Drupal\alien_alias\Entity\AlienAlias;
 use Drupal\alien_alias\Entity\AlienAliasInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -73,21 +75,21 @@ class AlienStatsTest extends EntityKernelTestBase {
   /**
    * The database connector.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The service for managing the stats table.
    *
-   * @var \Drupal\alien_alias\AlienAliasStatsManagerInterface
+   * @var AlienAliasStatsManagerInterface
    */
   protected $alienAliasStatsManager;
 
   /**
    * Before a test method is run, setUp() is invoked.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->user = $this->createUser();
@@ -217,7 +219,7 @@ class AlienStatsTest extends EntityKernelTestBase {
   /**
    * Once test method has finished running, succeeded or failed, invoke this.
    */
-  public function tearDown() {
+  public function tearDown(): void {
     parent::tearDown();
   }
 
diff --git a/tests/src/Unit/ExogenTest.php b/tests/src/Unit/ExogenTest.php
index dca8a19..09169b7 100644
--- a/tests/src/Unit/ExogenTest.php
+++ b/tests/src/Unit/ExogenTest.php
@@ -50,7 +50,7 @@ class ExogenTest extends UnitTestCase {
    *
    * Create new Exogen object to be tested.
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->exogen = new Exogen(static::$id, static::$url, TRUE, static::$statName, TRUE);
   }
 
@@ -103,7 +103,7 @@ class ExogenTest extends UnitTestCase {
    *
    * Unset the $exogen object.
    */
-  public function tearDown() {
+  public function tearDown(): void {
     unset($this->exogen);
   }
 
