modules/contrib/color_field/color_field.install
modules/contrib/color_field/color_field.module
modules/contrib/color_field/color_field.post_update.php
modules/contrib/color_field/src/ColorBase.php
modules/contrib/color_field/src/ColorCMY.php
modules/contrib/color_field/src/ColorCMYK.php
modules/contrib/color_field/src/ColorHSL.php
modules/contrib/color_field/src/ColorHex.php
modules/contrib/color_field/src/ColorInterface.php
modules/contrib/color_field/src/ColorRGB.php
modules/contrib/color_field/src/Feeds/Target/Color.php
modules/contrib/color_field/src/Plugin/Field/FieldFormatter/ColorFieldFormatterCss.php
modules/contrib/color_field/src/Plugin/Field/FieldFormatter/ColorFieldFormatterSwatch.php
modules/contrib/color_field/src/Plugin/Field/FieldFormatter/ColorFieldFormatterSwatchOptions.php
modules/contrib/color_field/src/Plugin/Field/FieldFormatter/ColorFieldFormatterText.php
modules/contrib/color_field/src/Plugin/Field/FieldType/ColorFieldType.php
modules/contrib/color_field/src/Plugin/Field/FieldWidget/ColorFieldWidgetBase.php
modules/contrib/color_field/src/Plugin/Field/FieldWidget/ColorFieldWidgetBox.php
modules/contrib/color_field/src/Plugin/Field/FieldWidget/ColorFieldWidgetDefault.php
modules/contrib/color_field/src/Plugin/Field/FieldWidget/ColorFieldWidgetGrid.php
modules/contrib/color_field/src/Plugin/Field/FieldWidget/ColorFieldWidgetHTML5.php
modules/contrib/color_field/src/Plugin/Field/FieldWidget/ColorFieldWidgetSpectrum.php
modules/contrib/color_field/src/Plugin/migrate/field/ColorField.php
modules/contrib/color_field/tests/src/Functional/ColorFieldFormatterTest.php
modules/contrib/color_field/tests/src/Functional/ColorFieldFormatterTokenTest.php
modules/contrib/color_field/tests/src/Functional/ColorFieldFunctionalTestBase.php
modules/contrib/color_field/tests/src/Functional/ColorFieldWidgetTest.php
modules/contrib/color_field/tests/src/FunctionalJavascript/ColorFieldWidgetJavascriptTests.php
modules/contrib/color_field/tests/src/Kernel/ColorFieldTypeTest.php

12 files with changes
=====================

1) modules/contrib/color_field/tests/src/Kernel/ColorFieldTypeTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a color field storage and field for validation.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/color_field/tests/src/FunctionalJavascript/ColorFieldWidgetJavascriptTests.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\color_field\FunctionalJavascript;

+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
+use Behat\Mink\Element\NodeElement;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ @@
   /**
    * The Entity View Display for the article node type.
    *
-   * @var \Drupal\Core\Entity\Entity\EntityViewDisplay
+   * @var EntityViewDisplay
    */
   protected $display;

@@ @@
   /**
    * The Entity Form Display for the article node type.
    *
-   * @var \Drupal\Core\Entity\Entity\EntityFormDisplay
+   * @var EntityFormDisplay
    */
   protected $form;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article']);
@@ @@
     $boxes = $page->findAll('css', '#color-field-field-color button');
     $this->assertEquals(8, count($boxes));

-    /** @var \Behat\Mink\Element\NodeElement $box */
+    /** @var NodeElement $box */
     $box = $boxes[0];
     $this->assertEquals('#007749', $box->getAttribute('color'));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/color_field/tests/src/Functional/ColorFieldWidgetTest.php:37

    ---------- begin diff ----------
@@ @@
       'field_color[0][opacity]' => 1,
     ];

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $session->responseContains('#E70000 1</div>');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/color_field/tests/src/Functional/ColorFieldFunctionalTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\color_field\Functional;

+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * The Entity View Display for the article node type.
    *
-   * @var \Drupal\Core\Entity\Entity\EntityViewDisplay
+   * @var EntityViewDisplay
    */
   protected $display;

@@ @@
   /**
    * The Entity Form Display for the article node type.
    *
-   * @var \Drupal\Core\Entity\Entity\EntityFormDisplay
+   * @var EntityFormDisplay
    */
   protected $form;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/color_field/tests/src/Functional/ColorFieldFormatterTokenTest.php:47

    ---------- begin diff ----------
@@ @@
       ],
       'label' => 'hidden',
     ])->save();
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('.node-article { background-color: rgba(156,89,209,0.95); }');

     // Ensure 2 fields on the same entity are both rendered properly.
@@ @@
       'field_text_color[0][color]' => "#000000",
       'field_text_color[0][opacity]' => 1,
     ];
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('.node-article { background-color: rgba(0,0,0,0.1); }');
     $this->assertSession()->responseContains('.node-article { color: rgba(0,0,0,1); }');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/color_field/tests/src/Functional/ColorFieldFormatterTest.php:43

    ---------- begin diff ----------
@@ @@
       'field_color[0][opacity]' => 1,
     ];

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('#E70000 1</div>');

     // Ensure alternate hex format works.
@@ @@
         'opacity' => FALSE,
       ],
     ])->save();
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('#FF8C00</div>');

     // Test rgba Render mode.
@@ @@
         'opacity' => TRUE,
       ],
     ])->save();
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('rgba(255,239,0,0.9)');

     // Test RGB render mode.
@@ @@
         'opacity' => FALSE,
       ],
     ])->save();
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('rgb(0,129,31)');
   }

@@ @@
       'field_color[0][color]' => "#0044FF",
       'field_color[0][opacity]' => 0.9,
     ];
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('background-color: rgba(0,68,255,0.9)');
     $this->assertSession()->responseContains('color_field__swatch--square');

@@ @@
         'opacity' => FALSE,
       ],
     ])->save();
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('background-color: rgb(118,0,137)');
     $this->assertSession()->responseContains('color_field__swatch--circle');
   }
@@ @@
       'field_color[0][color]' => "#FFF430",
       'field_color[0][opacity]' => 0.9,
     ];
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('body { background-color: rgba(255,244,48,0.9) !important; }');

     // Test without opacity and not important.
@@ @@
       ],
       'label' => 'hidden',
     ])->save();
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('body { background-color: rgb(255,255,255); }');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/color_field/src/Plugin/Field/FieldWidget/ColorFieldWidgetBox.php:54

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The Default colors element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function settingsColorValidate(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/color_field/src/Plugin/Field/FieldFormatter/ColorFieldFormatterSwatchOptions.php:60

    ---------- begin diff ----------
@@ @@
   /**
    * Return the raw field value.
    *
-   * @param \Drupal\color_field\Plugin\Field\FieldType\ColorFieldType $item
+   * @param ColorFieldType $item
    *   The color field item.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/color_field/src/Plugin/Field/FieldFormatter/ColorFieldFormatterCss.php:45

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Utility\Token $token_service
+   * @param Token $token_service
    *   The token service.
    * @param \Drupal\token\TokenEntityMapperInterface $token_entity_mapper
    *   Optional token entity mapper service.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/color_field/src/ColorInterface.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Get the color as a hex instance.
    *
-   * @return \Drupal\color_field\ColorHex
+   * @return ColorHex
    *   The color as a hex instance.
    */
   public function toHex();
@@ @@
   /**
    * Get the color as a RGB instance.
    *
-   * @return \Drupal\color_field\ColorRGB
+   * @return ColorRGB
    *   The color as a RGB instance.
    */
   public function toRgb();
@@ @@
   /**
    * Get the color as a HSL instance.
    *
-   * @return \Drupal\color_field\ColorHSL
+   * @return ColorHSL
    *   The color as a HSL instance.
    */
   public function toHsl();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/color_field/color_field.post_update.php:10

    ---------- begin diff ----------
@@ @@
  * Update spectrum widget configuration to allow multiple palettes.
  */
 function color_field_post_update_spectrum_palette() {
-  /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $entity_form_display */
+  /** @var EntityFormDisplay $entity_form_display */
   foreach (EntityFormDisplay::loadMultiple() as $entity_form_display) {
     $changed = FALSE;
     foreach ($entity_form_display->getComponents() as $name => $options) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


12) modules/contrib/color_field/color_field.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\color_field\Plugin\Field\FieldType\ColorFieldType;
 /**
  * @file
  * A color field with a custom color picker using the Field Types API.
@@ @@
 function color_field_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
   $replacements = [];
   if ($type === 'color_field' && !empty($data['color_field'])) {
-    /** @var \Drupal\color_field\Plugin\Field\FieldType\ColorFieldType $color_field */
+    /** @var ColorFieldType $color_field */
     $color_field = $data['color_field'];
     $color_hex = new ColorHex($color_field->color, $color_field->opacity);
     foreach ($tokens as $name => $original) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/color_field/src/Feeds/Target/Color.php" file, due to: 
         "Analyze error: "Class Drupal\feeds\Plugin\Type\Target\FieldTargetBase 
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

