modules/contrib/entity_share_auto/entity_share_auto.module
modules/contrib/entity_share_auto/modules/entity_share_auto_client/entity_share_auto_client.module
modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Commands/ImportCommand.php
modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Controller/EntityShareAutoClientController.php
modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Exception/EntityShareAutoImportFailedException.php
modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Form/EntityShareAutoClientConfig.php
modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Plugin/QueueWorker/EntityShareAutoImportWorker.php
modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Service/EntityShareAutoImportQueueHelper.php
modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Service/EntityShareAutoQueueImportHelperInterface.php
modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Service/EntityShareImportQueue.php
modules/contrib/entity_share_auto/modules/entity_share_auto_instant/entity_share_auto_instant.module
modules/contrib/entity_share_auto/modules/entity_share_auto_instant/src/Controller/EntityShareAutoInstantController.php
modules/contrib/entity_share_auto/modules/entity_share_auto_instant/src/Entity/EntitySyncStatus.php
modules/contrib/entity_share_auto/modules/entity_share_auto_instant/src/Entity/EntitySyncStatusInterface.php
modules/contrib/entity_share_auto/modules/entity_share_auto_instant/src/Entity/EntitySyncStatusViewsData.php
modules/contrib/entity_share_auto/modules/entity_share_auto_instant/src/EntitySyncStatusAccessControlHandler.php
modules/contrib/entity_share_auto/modules/entity_share_auto_instant/src/EntitySyncStatusListBuilder.php
modules/contrib/entity_share_auto/modules/entity_share_auto_instant/src/Service/EntityShareAutoInstantExport.php
modules/contrib/entity_share_auto/modules/entity_share_auto_server/entity_share_auto_server.module
modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/ChannelsAutoHtmlRouteProvider.php
modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/ChannelsAutoListBuilder.php
modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Entity/ChannelsAuto.php
modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Entity/ChannelsAutoInterface.php
modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Form/ChannelsAutoDeleteForm.php
modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Form/ChannelsAutoForm.php
modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Form/EntityShareAutoServerConfig.php
modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Plugin/QueueWorker/EntityShareAutoExportWorker.php
modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Service/EntityShareAutoExportQueueHelper.php
modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Service/EntityShareAutoQueueExportHelperInterface.php
modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Service/EntityShareAutoServer.php
modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Service/EntityShareAutoServerInterface.php
modules/contrib/entity_share_auto/src/Event/EntityShareAutoEvent.php
modules/contrib/entity_share_auto/src/Exception/EntityShareAutoSkipExportException.php
modules/contrib/entity_share_auto/src/Exception/EntityShareAutoSkipImportException.php

18 files with changes
=====================

1) modules/contrib/entity_share_auto/src/Event/EntityShareAutoEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_auto\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class EntityShareAutoEvent definition.
@@ @@
   /**
    * Node entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Constructs a node insertion demo event object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to be import.
    * @param string $channel_id
    *   Channel id.
@@ @@
   /**
    * Get the inserted entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Return entity object.
    */
   public function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Service/EntityShareAutoServerInterface.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Enqueue node for export process.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity needs to export.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Service/EntityShareAutoServer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_auto_server\Service;

+use Drupal\Core\State\State;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\entity_share_auto_instant\Service\EntityShareAutoInstantExport;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * EntityShareAutoQueueHelperInterface definition.
    *
-   * @var \Drupal\entity_share_auto_server\Service\EntityShareAutoQueueExportHelperInterface
+   * @var EntityShareAutoQueueExportHelperInterface
    */
   protected $entityShareAutoServerQueueHelper;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Guzzle\Client instance.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The channel manipulator.
    *
-   * @var \Drupal\entity_share_server\Service\ChannelManipulatorInterface
+   * @var ChannelManipulatorInterface
    */
   protected $channelManipulator;

@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Client config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $serverConfig;

@@ @@
   /**
    * Enqueue entity for export.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity for enqueue.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function enqueue(EntityInterface $entity) {
     $channels = $this->loadChannelWithBundle($entity);
     foreach ($channels as $channel) {
       try {
-        $this->eventDispatcher->dispatch(EntityShareAutoEvent::ENTITY_SHARE_AUTO_ENTITY_ENQUEUE, new EntityShareAutoEvent($entity, $channel->get('channel_type')));
+        $this->eventDispatcher->dispatch(new EntityShareAutoEvent($entity, $channel->get('channel_type')), EntityShareAutoEvent::ENTITY_SHARE_AUTO_ENTITY_ENQUEUE);
         // Check if instant export is enabled.
         if ($this->moduleHandler->moduleExists('entity_share_auto_instant') && $this->serverConfig->get('instant_export')) {
-          /** @var \Drupal\entity_share_auto_instant\Service\EntityShareAutoInstantExport $instant_export_service */
+          /** @var EntityShareAutoInstantExport $instant_export_service */
           $instant_export_service = \Drupal::service('entity_share_auto_instant.export');
           $instant_export_service->exportEntity($channel, $entity);
         }
@@ @@
   /**
    * Load channel entity according to auto share channel entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    *
    * @return array
    *   Return entity share auto channel config entity array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadChannelWithBundle(EntityInterface $entity) {
     $channels = $this->entityTypeManager->getStorage('channel')
@@ @@
   /**
    * Helper function to check the presence of entities on a specific channel.
    *
-   * @param \Drupal\entity_share_server\Entity\ChannelInterface $channel
+   * @param ChannelInterface $channel
    *   The channel id on which to check the entities.
    * @param string $entity_uuid
    *   The entity UUID to check for.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Service/EntityShareAutoExportQueueHelper.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The queue factory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * QueueHelper constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Plugin/QueueWorker/EntityShareAutoExportWorker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_auto_server\Plugin\QueueWorker;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Guzzle\Client instance.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelFactoryInterface definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The state storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   private $stateStorage;

@@ @@
   /**
    * Client config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $serverConfig;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Form/EntityShareAutoServerConfig.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_auto_server\Form;

+use Drupal\Core\State\State;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StateInterface $state, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_share_auto/modules/entity_share_auto_server/src/Form/ChannelsAutoForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Guzzle\Client instance.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * Constructs a ChannelForm object.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   Http client.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_share_auto/modules/entity_share_auto_server/entity_share_auto_server.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entity_share_auto_server\Service\EntityShareAutoServer;
 /**
  * @file
  * Contains entity_share_auto_server.module.
@@ @@
 /**
  * Add entity to export queue.
  *
- * @param Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Entity object.
  */
 function __entity_share_auto_server_enqueue_entity(EntityInterface $entity) {
-  /** @var \Drupal\entity_share_auto_server\Service\EntityShareAutoServer $entity_server */
+  /** @var EntityShareAutoServer $entity_server */
   if ($entity instanceof FieldableEntityInterface) {
     $entity_server = \Drupal::service('entity_share_auto_server.default');
     $server_config = \Drupal::config('entity_share_auto.entity_share_auto_server.config');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/entity_share_auto/modules/entity_share_auto_instant/src/Service/EntityShareAutoInstantExport.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_auto_instant\Service;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * GuzzleHttp\ClientInterface definition.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * Client config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $serverConfig;

@@ @@
   /**
    * Logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Export entity.
    *
-   * @param \Drupal\entity_share_auto_server\Entity\ChannelsAutoInterface $channelsAuto
+   * @param ChannelsAutoInterface $channelsAuto
    *   Channel auto config entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Export entity.
    */
   public function exportEntity(ChannelsAutoInterface $channelsAuto, EntityInterface $entity) {
@@ @@
   /**
    * Create/update stub log entry. Using custom content entity.
    *
-   * @param \Drupal\entity_share_auto_server\Entity\ChannelsAutoInterface $channelsAuto
+   * @param ChannelsAutoInterface $channelsAuto
    *   Channel auto entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    * @param string $status
    *   Status to be updated.
@@ @@
   /**
    * Set failed status for sync entity.
    *
-   * @param \Drupal\entity_share_auto_server\Entity\ChannelsAutoInterface $channelsAuto
+   * @param ChannelsAutoInterface $channelsAuto
    *   Channel auto.
    * @param array $data
    *   Item data.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/entity_share_auto/modules/entity_share_auto_instant/src/EntitySyncStatusListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_auto_instant;

+use Drupal\entity_share_auto_instant\Entity\EntitySyncStatus;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\entity_share_auto_instant\Entity\EntitySyncStatus $entity */
+    /** @var EntitySyncStatus $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_share_auto/modules/entity_share_auto_instant/src/EntitySyncStatusAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_auto_instant;

+use Drupal\entity_share_auto_instant\Entity\EntitySyncStatusInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\entity_share_auto_instant\Entity\EntitySyncStatusInterface $entity */
-
+    /** @var EntitySyncStatusInterface $entity */
     switch ($operation) {

       case 'view':
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_share_auto/modules/entity_share_auto_instant/src/Controller/EntityShareAutoInstantController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_auto_instant\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Psr\Log\LoggerInterface;
 use Drush\Log\LogLevel;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Client config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $serverConfig;

@@ @@
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Update log.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Return .
    */
   public function updateLog(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Service/EntityShareImportQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_auto_client\Service;

+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Queue\QueueWorkerManager;
@@ @@
   /**
    * Subscriber Import Queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * The Queue Worker.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManager
+   * @var QueueWorkerManager
    */
   protected $queueManager;

@@ @@
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Service/EntityShareAutoImportQueueHelper.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The queue factory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * QueueHelper constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Plugin/QueueWorker/EntityShareAutoImportWorker.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The import service.
    *
-   * @var \Drupal\entity_share_client\Service\ImportServiceInterface
+   * @var ImportServiceInterface
    */
   private $importService;

@@ @@
   /**
    * The state storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   private $stateStorage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Controller/EntityShareAutoClientController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_auto_client\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\entity_share_auto_client\Service\EntityShareAutoQueueImportHelperInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Import queue helper.
    *
-   * @var \Drupal\entity_share_auto_client\Service\EntityShareAutoQueueImportHelperInterface
+   * @var EntityShareAutoQueueImportHelperInterface
    */
   protected $importQueueHelper;

@@ @@
   /**
    * Client config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $clientConfig;

@@ @@
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Get remote and import config.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Return .
    */
   public function getRemoteAndImportConfig() {
@@ @@
   /**
    * Add import to queue.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Return response for client.
    */
   public function addImport(Request $request) {
@@ @@
   /**
    * Add import to queue.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Return response for client.
    */
   public function instantImport(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity_share_auto/modules/entity_share_auto_client/src/Commands/ImportCommand.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelFactoryInterface definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * Drupal\entity_share_auto_client\Service\EntityShareImportQueue definition.
    *
-   * @var \Drupal\entity_share_auto_client\Service\EntityShareImportQueue
+   * @var EntityShareImportQueue
    */
   protected $entityShareImportQueue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/entity_share_auto/modules/entity_share_auto_client/entity_share_auto_client.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entity_share_client\Service\ImportServiceInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\entity_share_client\Entity\Remote;
+use GuzzleHttp\ClientInterface;
 /**
  * @file
  * Contains entity_share_auto_client.module.
@@ @@
 function entity_share_auto_client_instant_import_entity(array $data) {
   try {
     $import_context = new ImportContext($data['remote_id'], $data['channel_id'], $data['import_config_id']);
-    /** @var \Drupal\entity_share_client\Service\ImportServiceInterface $import_service */
+    /** @var ImportServiceInterface $import_service */
     $import_service = \Drupal::service('entity_share_client.import_service');
     $ids = $import_service->importEntities($import_context, [$data['uuid']], FALSE);
     if (!empty($ids)) {
@@ @@
  *   Item data.
  */
 function entity_share_auto_client_instant_server_log(array $logs, array $data) {
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+  /** @var EntityTypeManagerInterface $entity_type_manager */
   $entity_type_manager = \Drupal::service('entity_type.manager');
-  /** @var \Drupal\entity_share_client\Entity\Remote $remote_entity */
+  /** @var Remote $remote_entity */
   $remote_entity = $entity_type_manager->getStorage('remote')->load($data['remote_id']);
   $remote_url = $remote_entity->get('url');
   $post_url = $remote_url . '/entity_share_auto_instant/updateLog';
@@ @@
         $entity->save();
       }
     }
-    /** @var \GuzzleHttp\ClientInterface $http_client */
+    /** @var ClientInterface $http_client */
     $http_client = \Drupal::service('http_client');
     $http_client->post($post_url, [
       'json' => $logs,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 18 files have been changed by Rector                                      

