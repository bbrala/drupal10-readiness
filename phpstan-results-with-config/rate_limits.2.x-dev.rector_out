modules/contrib/rate_limits/rate_limits.api.php
modules/contrib/rate_limits/src/Entity/RateLimitConfig.php
modules/contrib/rate_limits/src/Entity/RateLimitConfigInterface.php
modules/contrib/rate_limits/src/EventSubscriber/RequestSubscriberCheckLimits.php
modules/contrib/rate_limits/src/Form/RateLimitConfigDeleteForm.php
modules/contrib/rate_limits/src/Form/RateLimitConfigForm.php
modules/contrib/rate_limits/src/RateLimitConfigHtmlRouteProvider.php
modules/contrib/rate_limits/src/RateLimitConfigListBuilder.php
modules/contrib/rate_limits/tests/modules/rate_limits_test/src/RateLimitsTestController.php
modules/contrib/rate_limits/tests/src/Functional/RateLimitsApiFunctionalTest.php

2 files with changes
====================

1) modules/contrib/rate_limits/tests/src/Functional/RateLimitsApiFunctionalTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\rate_limits\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\rate_limits\Entity\JsonapiResourceConfig;
 use Drupal\rate_limits\Entity\RateLimitConfig;
 use Drupal\Tests\BrowserTestBase;
@@ @@
 class RateLimitsApiFunctionalTest extends BrowserTestBase {

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminAccount;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $config = RateLimitConfig::create([
       'label' => $this->randomGenerator->name(),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/rate_limits/src/EventSubscriber/RequestSubscriberCheckLimits.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rate_limits\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Exception\HttpException;
+use Drupal\rate_limits\Entity\RateLimitConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Flood\FloodInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ @@
 use Symfony\Cmf\Component\Routing\RouteObjectInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\Routing\Route;
 use Symfony\Component\Routing\RouterInterface;
@@ @@
 class RequestSubscriberCheckLimits implements EventSubscriberInterface {

   /**
-   * @var \Symfony\Component\Routing\RouterInterface
+   * @var RouterInterface
    */
   protected $router;

   /**
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Check the limits on the request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The request event.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   When the system is flooded.
    * @throws \Exception
    *   When the flood table does not exist.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();
     try {
       $route_data = $this->router->matchRequest($request);
@@ @@
       return;
     }

-    /** @var \Symfony\Component\Routing\Route $route */
+    /** @var Route $route */
     $route = $route_data[RouteObjectInterface::ROUTE_OBJECT];
     $config = $this->loadConfig($route);
     if (!$config) {
@@ @@
   /**
    * Loads the rate limit configuration based on the tags.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to be rate limited.
    *
-   * @return \Drupal\rate_limits\Entity\RateLimitConfig|NULL
+   * @return RateLimitConfig|NULL
    *   The rate limit.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadConfig(Route $route) {
     $route_tags = $route->getOption('tags');
@@ @@
     if (empty($ids)) {
       return NULL;
     }
-    /** @var \Drupal\rate_limits\Entity\RateLimitConfig[] $configs */
+    /** @var RateLimitConfig[] $configs */
     $configs = $storage->loadMultiple($ids);
     // Find the config that has all tags.
     foreach ($configs as $config) {
@@ @@
    *   The event name.
    * @param array $flood_config
    *   The configuration with the limits.
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The request event.
    *
    * @return bool
@@ @@
    * @throws \Exception
    *   When the flood table is not created.
    */
-  protected function checkIp($event_name, $flood_config, GetResponseEvent $event) {
+  protected function checkIp($event_name, $flood_config, RequestEvent $event) {
     $allowed = $this->flood->isAllowed(
       $event_name,
       $flood_config['ip_limit'],
@@ @@
    *   The event name.
    * @param array $flood_config
    *   The configuration with the limits.
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The request event.
    *
    * @return bool
@@ @@
    * @throws \Exception
    *   When the flood table is not created.
    */
-  protected function checkUser($event_name, $flood_config, GetResponseEvent $event) {
+  protected function checkUser($event_name, $flood_config, RequestEvent $event) {
     if ($this->currentUser->isAnonymous()) {
       // The user check does not apply to anonymous.
       return TRUE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 2 files have been changed by Rector                                       

