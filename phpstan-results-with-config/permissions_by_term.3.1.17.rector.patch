diff --git a/modules/permissions_by_entity/permissions_by_entity.module b/modules/permissions_by_entity/permissions_by_entity.module
index 451f255..289159a 100644
--- a/modules/permissions_by_entity/permissions_by_entity.module
+++ b/modules/permissions_by_entity/permissions_by_entity.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\permissions_by_term\Cache\AccessResultCache;
+use Drupal\permissions_by_entity\Service\AccessChecker;
 /**
  * @file
  * Module file for Permission by Entity.
@@ -15,13 +17,13 @@ use Drupal\Core\Session\AccountInterface;
  */
 function permissions_by_entity_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
   /**
-   * @var \Drupal\permissions_by_term\Cache\AccessResultCache $cache
+   * @var AccessResultCache $cache
    */
   $cache = \Drupal::service('permissions_by_term.access_result_cache');
 
   $accessResult = AccessResult::neutral();
 
-  /** @var \Drupal\permissions_by_entity\Service\AccessChecker $accessChecker */
+  /** @var AccessChecker $accessChecker */
   if ($operation === 'view' && $entity instanceof FieldableEntityInterface && !$entity->isNew()) {
     if ($cache->hasAccessResultsCache($account->id(), $entity->id())) {
       return $cache->getAccessResultsCache($account->id(), $entity->id());
diff --git a/modules/permissions_by_entity/src/Event/EntityFieldValueAccessDeniedEvent.php b/modules/permissions_by_entity/src/Event/EntityFieldValueAccessDeniedEvent.php
index db43b14..2ed8052 100644
--- a/modules/permissions_by_entity/src/Event/EntityFieldValueAccessDeniedEvent.php
+++ b/modules/permissions_by_entity/src/Event/EntityFieldValueAccessDeniedEvent.php
@@ -16,14 +16,14 @@ class EntityFieldValueAccessDeniedEvent extends Event {
   /**
    * The field that contains the fieldable entity.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   private $field;
 
   /**
    * A fieldable entity.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   private $entity;
 
@@ -44,7 +44,7 @@ class EntityFieldValueAccessDeniedEvent extends Event {
   /**
    * Sets the field.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field that contains the fieldable entity.
    */
   public function setField(FieldItemListInterface $field): void {
@@ -54,7 +54,7 @@ class EntityFieldValueAccessDeniedEvent extends Event {
   /**
    * Returns the field.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface
+   * @return FieldItemListInterface
    *   The field that contains the fieldable entity.
    */
   public function getField(): FieldItemListInterface {
@@ -64,7 +64,7 @@ class EntityFieldValueAccessDeniedEvent extends Event {
   /**
    * Sets the fieldable entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A fieldable entity.
    */
   public function setEntity(FieldableEntityInterface $entity): void {
@@ -74,7 +74,7 @@ class EntityFieldValueAccessDeniedEvent extends Event {
   /**
    * Returns the entity.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface
+   * @return FieldableEntityInterface
    *   A fieldable entity.
    */
   public function getEntity(): FieldableEntityInterface {
diff --git a/modules/permissions_by_entity/src/EventSubscriber/PermissionsByEntityKernelEventSubscriber.php b/modules/permissions_by_entity/src/EventSubscriber/PermissionsByEntityKernelEventSubscriber.php
index 2779c44..25b23ed 100644
--- a/modules/permissions_by_entity/src/EventSubscriber/PermissionsByEntityKernelEventSubscriber.php
+++ b/modules/permissions_by_entity/src/EventSubscriber/PermissionsByEntityKernelEventSubscriber.php
@@ -22,32 +22,32 @@ class PermissionsByEntityKernelEventSubscriber implements EventSubscriberInterfa
   /**
    * The access checker.
    *
-   * @var \Drupal\permissions_by_entity\Service\AccessCheckerInterface
+   * @var AccessCheckerInterface
    */
   private $accessChecker;
 
   /**
    * The core string translator.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   private $translation;
 
   /**
    * The cache for checked entities.
    *
-   * @var \Drupal\permissions_by_entity\Service\CheckedEntityCache
+   * @var CheckedEntityCache
    */
   private $checkedEntityCache;
 
   /**
    * PermissionsByEntityKernelEventSubscriber constructor.
    *
-   * @param \Drupal\permissions_by_entity\Service\AccessCheckerInterface $access_checker
+   * @param AccessCheckerInterface $access_checker
    *   The service to check if the current user is allowed to access an entity.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The core string translator.
-   * @param \Drupal\permissions_by_entity\Service\CheckedEntityCache $checked_entity_cache
+   * @param CheckedEntityCache $checked_entity_cache
    *   The cache for checked entities.
    */
   public function __construct(
@@ -77,7 +77,7 @@ class PermissionsByEntityKernelEventSubscriber implements EventSubscriberInterfa
   /**
    * Callback method for the KernelEvents::REQUEST event.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The event instance.
    */
   public function onKernelRequest(RequestEvent $event) {
@@ -90,7 +90,7 @@ class PermissionsByEntityKernelEventSubscriber implements EventSubscriberInterfa
     $request = $event->getRequest();
 
     // Get the entity.
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $entity = NULL;
     if ($request->attributes->has('node')) {
       $entity = $request->attributes->get('node');
diff --git a/modules/permissions_by_entity/src/EventSubscriber/RemoveEntityFromViewEventSubscriber.php b/modules/permissions_by_entity/src/EventSubscriber/RemoveEntityFromViewEventSubscriber.php
index c17a2e4..87c90f8 100644
--- a/modules/permissions_by_entity/src/EventSubscriber/RemoveEntityFromViewEventSubscriber.php
+++ b/modules/permissions_by_entity/src/EventSubscriber/RemoveEntityFromViewEventSubscriber.php
@@ -31,7 +31,7 @@ class RemoveEntityFromViewEventSubscriber implements EventSubscriberInterface {
    * Callback method that will be called when the
    * ENTITY_FIELD_VALUE_ACCESS_DENIED_EVENT has been triggered.
    *
-   * @param \Drupal\permissions_by_entity\Event\EntityFieldValueAccessDeniedEvent $event
+   * @param EntityFieldValueAccessDeniedEvent $event
    *   The event.
    */
   public function onEntityFieldAccessDenied(EntityFieldValueAccessDeniedEvent $event) {
diff --git a/modules/permissions_by_entity/src/Service/AccessChecker.php b/modules/permissions_by_entity/src/Service/AccessChecker.php
index 0f2dc7c..3bbe9ff 100644
--- a/modules/permissions_by_entity/src/Service/AccessChecker.php
+++ b/modules/permissions_by_entity/src/Service/AccessChecker.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\permissions_by_entity\Service;
 
+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -21,21 +22,21 @@ class AccessChecker extends AccessCheck implements AccessCheckerInterface {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;
 
   /**
    * The cache for checked entities.
    *
-   * @var \Drupal\permissions_by_entity\Service\CheckedEntityCache
+   * @var CheckedEntityCache
    */
   private $checkedEntityCache;
 
   /**
    * The entity field value access denied event.
    *
-   * @var \Drupal\permissions_by_entity\Event\EntityFieldValueAccessDeniedEvent
+   * @var EntityFieldValueAccessDeniedEvent
    */
   private $event;
 
@@ -67,7 +68,7 @@ class AccessChecker extends AccessCheck implements AccessCheckerInterface {
       ) {
 
         // Iterate over each referenced taxonomy term.
-        /** @var \Drupal\Core\Field\FieldItemInterface $item */
+        /** @var FieldItemInterface $item */
         foreach ($field->getValue() as $item) {
           // Let "Permissions By Term" do the actual check.
           if (
@@ -168,7 +169,7 @@ class AccessChecker extends AccessCheck implements AccessCheckerInterface {
         $field->getFieldDefinition()->getSetting('target_type') == 'taxonomy_term'
       ) {
         // Iterate over each referenced taxonomy term.
-        /** @var \Drupal\Core\Field\FieldItemInterface $item */
+        /** @var FieldItemInterface $item */
         foreach ($field->getValue() as $item) {
           if(!empty($item['target_id']) && $this->isAnyPermissionSetForTerm($item['target_id'], $entity->language()->getId())) {
             return TRUE;
diff --git a/modules/permissions_by_entity/src/Service/AccessCheckerInterface.php b/modules/permissions_by_entity/src/Service/AccessCheckerInterface.php
index 250a0dd..6292aad 100644
--- a/modules/permissions_by_entity/src/Service/AccessCheckerInterface.php
+++ b/modules/permissions_by_entity/src/Service/AccessCheckerInterface.php
@@ -14,7 +14,7 @@ interface AccessCheckerInterface {
   /**
    * Checks if a user is allowed to access a fieldable entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A fieldable entity.
    * @param bool|int $uid
    *   (Optional) Defaults to the uid of the current user.
@@ -27,7 +27,7 @@ interface AccessCheckerInterface {
   /**
    * Checks if the given entity uses terms with access restrictions.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A fieldable entity.
    *
    * @return bool
diff --git a/modules/permissions_by_entity/src/Service/CheckedEntityCache.php b/modules/permissions_by_entity/src/Service/CheckedEntityCache.php
index 5e4a93e..d9c10c1 100644
--- a/modules/permissions_by_entity/src/Service/CheckedEntityCache.php
+++ b/modules/permissions_by_entity/src/Service/CheckedEntityCache.php
@@ -14,14 +14,14 @@ class CheckedEntityCache {
   /**
    * The checked entities.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface[]
+   * @var FieldableEntityInterface[]
    */
   private $entities = [];
 
   /**
    * Returns if an entity has already been checked.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A fieldable entity.
    *
    * @return bool
@@ -36,7 +36,7 @@ class CheckedEntityCache {
    *
    * If the entity has already been added to the cache, nothing will be done.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A fieldable entity.
    */
   public function add(FieldableEntityInterface $entity) {
diff --git a/modules/permissions_by_entity/tests/src/Kernel/EntityAccessCheckTest.php b/modules/permissions_by_entity/tests/src/Kernel/EntityAccessCheckTest.php
index 7d3574f..1b79b1e 100644
--- a/modules/permissions_by_entity/tests/src/Kernel/EntityAccessCheckTest.php
+++ b/modules/permissions_by_entity/tests/src/Kernel/EntityAccessCheckTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\permissions_by_entity\Kernel;
 
+use Drupal\permissions_by_term\Service\AccessStorage;
+use Drupal\permissions_by_entity\Service\AccessChecker;
+use Drupal\node\Entity\Node;
 use Drupal\Core\Cache\CacheableResponse;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\pbt_entity_test\Entity\TestEntity;
@@ -42,14 +45,14 @@ class EntityAccessCheckTest extends KernelTestBase {
   /**
    * The access storage.
    *
-   * @var \Drupal\permissions_by_term\Service\AccessStorage
+   * @var AccessStorage
    */
   private $accessStorage;
 
   /**
    * The access checker.
    *
-   * @var \Drupal\permissions_by_entity\Service\AccessChecker
+   * @var AccessChecker
    */
   private $accessChecker;
 
@@ -63,14 +66,14 @@ class EntityAccessCheckTest extends KernelTestBase {
   /**
    * The nodes.
    *
-   * @var \Drupal\node\Entity\Node[]
+   * @var Node[]
    */
   private $nodes;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installSchema('system', ['key_value_expire', 'sequences']);
@@ -105,17 +108,18 @@ class EntityAccessCheckTest extends KernelTestBase {
     $dispatcher = $this->getPopulatedDispatcher();
 
     $this->expectException(AccessDeniedHttpException::class);
-    $dispatcher->dispatch(KernelEvents::REQUEST, $this->getRequestEvent());
+    $dispatcher->dispatch($this->getRequestEvent(), KernelEvents::REQUEST);
   }
 
   /**
    * Tests even listener based access control.
+   * @doesNotPerformAssertions
    */
   public function testAuthenticatedAccessUsingKernel(): void {
     $dispatcher = $this->getPopulatedDispatcher();
 
     $this->container->get('current_user')->setAccount($this->terms['term_user_a']['user']);
-    $dispatcher->dispatch(KernelEvents::REQUEST, $this->getRequestEvent());
+    $dispatcher->dispatch($this->getRequestEvent(), KernelEvents::REQUEST);
   }
 
   /**
@@ -126,8 +130,8 @@ class EntityAccessCheckTest extends KernelTestBase {
 
     // Execute first request for allowed user.
     $this->container->get('current_user')->setAccount($this->terms['term_user_a']['user']);
-    $dispatcher->dispatch(KernelEvents::REQUEST, $this->getRequestEvent());
-    $dispatcher->dispatch(KernelEvents::RESPONSE, $this->getCacheableResponseEvent());
+    $dispatcher->dispatch($this->getRequestEvent(), KernelEvents::REQUEST);
+    $dispatcher->dispatch($this->getCacheableResponseEvent(), KernelEvents::RESPONSE);
 
     // Reset the cache to emulate a new request.
     $this->container->get('permissions_by_entity.checked_entity_cache')->clear();
@@ -135,7 +139,7 @@ class EntityAccessCheckTest extends KernelTestBase {
     // Execute second request for disallowed user.
     $this->container->get('current_user')->setAccount($this->terms['term_user_b']['user']);
     $this->expectException(AccessDeniedHttpException::class);
-    $dispatcher->dispatch(KernelEvents::REQUEST, $this->getRequestEvent());
+    $dispatcher->dispatch($this->getRequestEvent(), KernelEvents::REQUEST);
   }
 
   /**
@@ -204,7 +208,7 @@ class EntityAccessCheckTest extends KernelTestBase {
   /**
    * Gets a populated dispatcher.
    *
-   * @return \Symfony\Component\EventDispatcher\EventDispatcher
+   * @return EventDispatcher
    */
   private function getPopulatedDispatcher(): EventDispatcher {
     $dispatcher = new EventDispatcher();
@@ -219,7 +223,7 @@ class EntityAccessCheckTest extends KernelTestBase {
   /**
    * Gets a request response event for term A.
    *
-   * @return \Symfony\Component\HttpKernel\Event\RequestEvent
+   * @return RequestEvent
    */
   private function getRequestEvent(): RequestEvent {
     $request = new Request();
@@ -232,7 +236,7 @@ class EntityAccessCheckTest extends KernelTestBase {
   /**
    * Gets a cacheable filter response for term "a".
    *
-   * @return \Symfony\Component\HttpKernel\Event\ResponseEvent
+   * @return ResponseEvent
    */
   private function getCacheableResponseEvent(): ResponseEvent {
     $response = new CacheableResponse();
diff --git a/modules/permissions_by_entity/tests/src/Kernel/EntityPublicationTest.php b/modules/permissions_by_entity/tests/src/Kernel/EntityPublicationTest.php
index 3cb7f7e..dea1855 100644
--- a/modules/permissions_by_entity/tests/src/Kernel/EntityPublicationTest.php
+++ b/modules/permissions_by_entity/tests/src/Kernel/EntityPublicationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\permissions_by_entity\Kernel;
 
+use Drupal\node\Entity\Node;
 use Drupal\Core\Access\AccessResult;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\pbt_entity_test\Entity\TestEntity;
@@ -31,21 +32,21 @@ class EntityPublicationTest extends KernelTestBase {
   /**
    * Nodes we will test against.
    *
-   * @var \Drupal\node\Entity\Node[]
+   * @var Node[]
    */
   private $nodes;
 
   /**
    * An anonymous user to run our tests as.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $anonymousUser;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('test_entity');
     $this->installEntitySchema('user');
@@ -74,7 +75,7 @@ class EntityPublicationTest extends KernelTestBase {
   public function testAnonymousCanViewPublishedNodesWithoutTermPermissions(): void {
     $this->assertTrue($this->nodes['node_published']->isPublished());
     $this->assertEquals(AccessResult::neutral(), permissions_by_entity_entity_access($this->nodes['node_published'], 'view', $this->anonymousUser));
-    $this->assertNotEqual(AccessResult::forbidden(), $this->nodes['node_published']->access('view', $this->anonymousUser, TRUE));
+    $this->assertNotEquals(AccessResult::forbidden(), $this->nodes['node_published']->access('view', $this->anonymousUser, TRUE));
   }
 
   /**
diff --git a/permissions_by_term.module b/permissions_by_term.module
index 6597a7a..cc935dd 100644
--- a/permissions_by_term.module
+++ b/permissions_by_term.module
@@ -1,5 +1,11 @@
 <?php
 
+use Drupal\permissions_by_term\Service\NodeAccess;
+use Drupal\permissions_by_term\Cache\CacheInvalidator;
+use Drupal\user\Entity\User;
+use Drupal\user\UserInterface;
+use Drupal\permissions_by_term\Service\NodeEntityBundleInfo;
+use Drupal\permissions_by_term\Service\TermHandler;
 /**
  * @file
  * Allows access to terms in a vocabulary to be limited by user or role.
@@ -110,12 +116,12 @@ function permissions_by_term_submit($form, FormState $formState) {
   // Do we need to flush the cache and the node access records?
   if($rebuild_cache_and_node_access === true) {
     /**
-     * @var \Drupal\permissions_by_term\Service\NodeAccess $nodeAccess
+     * @var NodeAccess $nodeAccess
      */
     $nodeAccess = \Drupal::service('permissions_by_term.node_access');
     $nodeAccess->rebuildAccess();
     /**
-     * @var \Drupal\permissions_by_term\Cache\CacheInvalidator $cacheInvalidator
+     * @var CacheInvalidator $cacheInvalidator
      */
     $cacheInvalidator = \Drupal::service('permissions_by_term.cache_invalidator');
     $cacheInvalidator->invalidate();
@@ -165,7 +171,7 @@ function permissions_by_term_form_taxonomy_term_form_alter(&$form, FormStateInte
 
     $aAllowedUsers = $access_storage->getAllowedUserIds($termId, $langcode);
     if (!empty($aAllowedUsers)) {
-      $aAllowedUsers = \Drupal\user\Entity\User::loadMultiple($aAllowedUsers);
+      $aAllowedUsers = User::loadMultiple($aAllowedUsers);
       $sUserFormValue = $access_storage->getUserFormValue($aAllowedUsers);
     }
     else {
@@ -263,10 +269,10 @@ function permissions_by_term_form_user_form_alter(&$form, FormStateInterface $fo
     '#description' => t('Choose a list of taxonomy terms. The access to the content, related to chosen taxonomy terms will be granted to this user.'),
   ];
 
-  /** @var \Drupal\permissions_by_term\Service\AccessStorage $access_storage */
+  /** @var AccessStorage $access_storage */
   $access_storage = \Drupal::service('permissions_by_term.access_storage');
 
-  /** @var \Drupal\user\UserInterface $user */
+  /** @var UserInterface $user */
   $user = $form_state->getFormObject()->getEntity();
 
   if (!$user->isNew() && ($permitted_tids = $access_storage->getPermittedTids($user->id(), $user->getRoles()))) {
@@ -281,14 +287,14 @@ function permissions_by_term_form_user_form_alter(&$form, FormStateInterface $fo
  *
  * @param array $form
  *   The complete form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function permissions_by_term_user_form_submit(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\permissions_by_term\Service\AccessStorage $access_storage */
+  /** @var AccessStorage $access_storage */
   $access_storage = \Drupal::service('permissions_by_term.access_storage');
 
-  /** @var \Drupal\user\UserInterface $user */
+  /** @var UserInterface $user */
   $user = $form_state->getFormObject()->getEntity();
 
   // First, we delete existing values from the db.
@@ -341,9 +347,9 @@ function permissions_by_term_form_alter(&$form, FormStateInterface $formState, $
       }
     }
 
-    $viewFilePath = drupal_get_path('module', 'permissions_by_term') . '/src/View/node-details.html.twig';
+    $viewFilePath = \Drupal::service('extension.list.module')->getPath('permissions_by_term') . '/src/View/node-details.html.twig';
     /**
-     * @var \Drupal\permissions_by_term\Service\NodeEntityBundleInfo $nodeEntityBundleInfo
+     * @var NodeEntityBundleInfo $nodeEntityBundleInfo
      */
     $nodeEntityBundleInfo = \Drupal::service('permissions_by_term.node_entity_bundle_info');
 
@@ -373,7 +379,7 @@ function permissions_by_term_node_grants(AccountInterface $account, $op) {
 
   if ($op == 'view' && !\Drupal::configFactory()->getEditable('permissions_by_term.settings')->get('disable_node_access_records')) {
     /**
-     * @var \Drupal\permissions_by_term\Service\AccessStorage $accessStorage
+     * @var AccessStorage $accessStorage
      */
     $accessStorage = \Drupal::service('permissions_by_term.access_storage');
     $grants = $accessStorage->getGids($account);
@@ -418,7 +424,7 @@ function permissions_by_term_node_access_records(NodeInterface $node) {
   }
 
   /**
-   * @var \Drupal\permissions_by_term\Service\TermHandler $termHandler
+   * @var TermHandler $termHandler
    */
   $termHandler = \Drupal::service('permissions_by_term.term_handler');
 
@@ -451,7 +457,7 @@ function permissions_by_term_node_access_records(NodeInterface $node) {
   }
 
   /**
-   * @var \Drupal\permissions_by_term\Service\NodeAccess $nodeAccess
+   * @var NodeAccess $nodeAccess
    */
   $nodeAccess = \Drupal::service('permissions_by_term.node_access');
   $grantObject = $nodeAccess->createGrant($node->id(), $node->id());
@@ -473,7 +479,7 @@ function permissions_by_term_node_access_records(NodeInterface $node) {
  */
 function permissions_by_term_user_insert($user) {
   /**
-   * @var \Drupal\permissions_by_term\Cache\CacheInvalidator $cacheInvalidator
+   * @var CacheInvalidator $cacheInvalidator
    */
   $cacheInvalidator = \Drupal::service('permissions_by_term.cache_invalidator');
   $cacheInvalidator->invalidate();
@@ -485,7 +491,7 @@ function permissions_by_term_user_insert($user) {
 function permissions_by_term_user_update($user) {
   if (\Drupal::currentUser()->hasPermission('administer permissions')) {
     /**
-     * @var \Drupal\permissions_by_term\Cache\CacheInvalidator $cacheInvalidator
+     * @var CacheInvalidator $cacheInvalidator
      */
     $cacheInvalidator = \Drupal::service('permissions_by_term.cache_invalidator');
     $cacheInvalidator->invalidate();
@@ -497,7 +503,7 @@ function permissions_by_term_user_update($user) {
  */
 function permissions_by_term_node_insert($node) {
   /**
-   * @var \Drupal\permissions_by_term\Cache\CacheInvalidator $cacheInvalidator
+   * @var CacheInvalidator $cacheInvalidator
    */
   $cacheInvalidator = \Drupal::service('permissions_by_term.cache_invalidator');
   $cacheInvalidator->invalidate();
@@ -544,7 +550,7 @@ function permissions_by_term_user_cancel($edit, $account, $method) {
   $access_storage = \Drupal::service('permissions_by_term.access_storage');
   $access_storage->deleteAllTermPermissionsByUserId($deleted_user_id);
   /**
-   * @var \Drupal\permissions_by_term\Cache\CacheInvalidator $cacheInvalidator
+   * @var CacheInvalidator $cacheInvalidator
    */
   $cacheInvalidator = \Drupal::service('permissions_by_term.cache_invalidator');
   $cacheInvalidator->invalidate();
@@ -560,7 +566,7 @@ function permissions_by_term_taxonomy_term_delete(EntityInterface $entity) {
   $access_storage = \Drupal::service('permissions_by_term.access_storage');
   $access_storage->deleteAllTermPermissionsByTid($entity->id());
   /**
-   * @var \Drupal\permissions_by_term\Cache\CacheInvalidator $cacheInvalidator
+   * @var CacheInvalidator $cacheInvalidator
    */
   $cacheInvalidator = \Drupal::service('permissions_by_term.cache_invalidator');
   $cacheInvalidator->invalidate();
diff --git a/src/Cache/AccessResultCache.php b/src/Cache/AccessResultCache.php
index ad31bdb..c8337e3 100644
--- a/src/Cache/AccessResultCache.php
+++ b/src/Cache/AccessResultCache.php
@@ -11,7 +11,7 @@ class AccessResultCache {
   /**
    * The default cache bin.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
diff --git a/src/Cache/KeyValueCache.php b/src/Cache/KeyValueCache.php
index 7513f8f..787ec3b 100644
--- a/src/Cache/KeyValueCache.php
+++ b/src/Cache/KeyValueCache.php
@@ -12,7 +12,7 @@ class KeyValueCache {
   /**
    * The default cache bin.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
diff --git a/src/Commands/CreateFixtureNodesForTestingCommands.php b/src/Commands/CreateFixtureNodesForTestingCommands.php
index c2750dd..a1f0116 100644
--- a/src/Commands/CreateFixtureNodesForTestingCommands.php
+++ b/src/Commands/CreateFixtureNodesForTestingCommands.php
@@ -15,12 +15,12 @@ use Drush\Commands\DrushCommands;
 class CreateFixtureNodesForTestingCommands extends DrushCommands {
 
   /**
-   * @var \Drupal\permissions_by_term\Service\AccessStorage
+   * @var AccessStorage
    */
   private $accessStorage;
 
   /**
-   * @var \Drupal\Component\Utility\Random
+   * @var Random
    */
   private $random;
 
diff --git a/src/Commands/PermissionsByTermRebuildCommands.php b/src/Commands/PermissionsByTermRebuildCommands.php
index f4a6237..ea8115f 100644
--- a/src/Commands/PermissionsByTermRebuildCommands.php
+++ b/src/Commands/PermissionsByTermRebuildCommands.php
@@ -11,7 +11,7 @@ use Drush\Commands\DrushCommands;
 class PermissionsByTermRebuildCommands extends DrushCommands {
 
   /**
-   * @var \Drupal\permissions_by_term\Service\NodeAccess
+   * @var NodeAccess
    */
   private $nodeAccess;
 
diff --git a/src/Controller/NodeEntityBundleController.php b/src/Controller/NodeEntityBundleController.php
index b864f38..35fed71 100644
--- a/src/Controller/NodeEntityBundleController.php
+++ b/src/Controller/NodeEntityBundleController.php
@@ -31,7 +31,7 @@ class NodeEntityBundleController extends ControllerBase {
   /**
    * Path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $pathAliasManager;
 
diff --git a/src/Event/PermissionsByTermDeniedEvent.php b/src/Event/PermissionsByTermDeniedEvent.php
index ad9ae58..aa6735c 100644
--- a/src/Event/PermissionsByTermDeniedEvent.php
+++ b/src/Event/PermissionsByTermDeniedEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\permissions_by_term\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class PermissionsByTermDeniedEvent
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 0f2c5a2..644f6d8 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\permissions_by_term\Form;
 
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -12,7 +13,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
diff --git a/src/Listener/KernelEventListener.php b/src/Listener/KernelEventListener.php
index 520a70d..260a7bb 100644
--- a/src/Listener/KernelEventListener.php
+++ b/src/Listener/KernelEventListener.php
@@ -164,7 +164,7 @@ class KernelEventListener implements EventSubscriberInterface
       $node = $event->getRequest()->attributes->get('node');
       if (!$this->accessCheckService->canUserAccessByNode($node, false, $this->accessStorageService->getLangCode($node->id()))) {
         $accessDeniedEvent = new PermissionsByTermDeniedEvent($node->id());
-        $this->eventDispatcher->dispatch(PermissionsByTermDeniedEvent::NAME, $accessDeniedEvent);
+        $this->eventDispatcher->dispatch($accessDeniedEvent, PermissionsByTermDeniedEvent::NAME);
 
         if ($this->disabledNodeAccessRecords) {
           $this->pageCacheKillSwitch->trigger();
diff --git a/src/Service/AccessCheck.php b/src/Service/AccessCheck.php
index 4474444..3ee997d 100644
--- a/src/Service/AccessCheck.php
+++ b/src/Service/AccessCheck.php
@@ -18,11 +18,11 @@ use Drupal\node\Entity\Node;
 class AccessCheck {
 
   /**
-   * The database connection.
-   *
-   * @var \Drupal\Core\Database\Connection
-   */
-  protected $database;
+		 * The database connection.
+		 *
+		 * @var Connection
+		 */
+		protected $database;
 
   /**
    * @var ContainerAwareEventDispatcher
@@ -235,7 +235,7 @@ class AccessCheck {
 
   private function dispatchDeniedEvent($nodeId): void {
     $accessDeniedEvent = new PermissionsByTermDeniedEvent($nodeId);
-    $this->eventDispatcher->dispatch(PermissionsByTermDeniedEvent::NAME, $accessDeniedEvent);
+    $this->eventDispatcher->dispatch($accessDeniedEvent, PermissionsByTermDeniedEvent::NAME);
   }
 
   public function isAnyTaxonomyTermFieldDefinedInNodeType(string $nodeType) {
diff --git a/src/Service/NodeAccess.php b/src/Service/NodeAccess.php
index ca2f22e..92279af 100644
--- a/src/Service/NodeAccess.php
+++ b/src/Service/NodeAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\permissions_by_term\Service;
 
+use Drupal\permissions_by_term\Cache\CacheInvalidator;
 use Drupal\Component\Utility\Environment;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -323,7 +324,7 @@ class NodeAccess {
    */
   public static function rebuildComplete() {
     /**
-     * @var \Drupal\permissions_by_term\Cache\CacheInvalidator $cacheInvalidator
+     * @var CacheInvalidator $cacheInvalidator
      */
     $cacheInvalidator = \Drupal::service('permissions_by_term.cache_invalidator');
     $cacheInvalidator->invalidate();
diff --git a/src/Service/TermHandler.php b/src/Service/TermHandler.php
index aa44186..7beaae8 100644
--- a/src/Service/TermHandler.php
+++ b/src/Service/TermHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\permissions_by_term\Service;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -30,7 +31,7 @@ class TermHandler {
   private $entityFieldManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $termStorage;
 
