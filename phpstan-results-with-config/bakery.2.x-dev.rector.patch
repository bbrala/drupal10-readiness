diff --git a/bakery.info.yml b/bakery.info.yml
index bface5c..59579ae 100644
--- a/bakery.info.yml
+++ b/bakery.info.yml
@@ -3,4 +3,4 @@ description: 'Provides single-sign-on support across second-level domains.'
 package: Single sign on
 configure: bakery.admin_settings
 type: module
-core_version_requirement: '^8.7.7 || ^9'
+core_version_requirement: ^9.1 || ^10
diff --git a/bakery.module b/bakery.module
index 6247468..2e86420 100644
--- a/bakery.module
+++ b/bakery.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\bakery\BakeryService;
 /**
  * @file
  * For implementing different hooks for bakery SSO functionality.
@@ -56,7 +57,7 @@ function bakery_form_alter(&$form, FormStateInterface $form_state, $form_id) {
     case 'user_profile_form':
     case 'user_form':
       $config = \Drupal::config('bakery.settings');
-      /** @var \Drupal\bakery\BakeryService $bakery */
+      /** @var BakeryService $bakery */
       $bakery = \Drupal::service('bakery.bakery_service');
       if (!\Drupal::currentUser()->hasPermission('administer users') && $bakery->isChild()) {
         $master_uri = $config->get('bakery_master');
@@ -184,7 +185,7 @@ function _bakery_login_redirect($form, FormStateInterface $form_state) {
  * Implements hook_form_FORM_ID_alter() for 'user_register_form'.
  */
 function bakery_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\bakery\BakeryService $bakery */
+  /** @var BakeryService $bakery */
   $bakery = \Drupal::service('bakery.bakery_service');
   // Provide register ability on the slave sites.
   if ($bakery->isChild()) {
@@ -226,7 +227,7 @@ function bakery_form_user_register_form_alter(&$form, FormStateInterface $form_s
  * Implements hook_form_FORM_ID_alter() for 'user_pass'.
  */
 function bakery_form_user_pass_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\bakery\BakeryService $bakery */
+  /** @var BakeryService $bakery */
   $bakery = \Drupal::service('bakery.bakery_service');
   // Child sites need to make sure the local account exists, if the master
   // account exists.
diff --git a/src/BakeryService.php b/src/BakeryService.php
index cc4c17d..48842a6 100644
--- a/src/BakeryService.php
+++ b/src/BakeryService.php
@@ -29,7 +29,7 @@ class BakeryService {
   protected $isMain;
 
   /**
-   * @var \Drupal\bakery\Kitchen
+   * @var Kitchen
    */
   protected $kitchen;
 
@@ -70,7 +70,7 @@ class BakeryService {
    * updates the login timestamp in the database, invokes hook_user('login'),
    * and regenerates the session.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   An authenticated user object to be set as the currently logged in user.
    *
    * @return bool
@@ -116,7 +116,7 @@ class BakeryService {
     $account = User::create([
       'name' => $name,
       // 'mail' => 'email',
-      'pass' => user_password(),
+      'pass' => \Drupal::service('password_generator')->generate(),
       // This username must be unique and accept only a-Z,0-9, - _ @ .
       'init' => 'bakery_temp/' . mt_rand(),
       'langcode', $language,
@@ -182,7 +182,7 @@ class BakeryService {
   /**
    * Update a user account with fields from a cookie.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account being updated.
    * @param array $cookie
    *   Cookie data. From either stroopwafel or gingerbread.
diff --git a/src/BakeryUserHooks.php b/src/BakeryUserHooks.php
index 6dbca2e..eab7052 100644
--- a/src/BakeryUserHooks.php
+++ b/src/BakeryUserHooks.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bakery;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\bakery\Cookies\Stroopwafel;
 use Drupal\bakery\Exception\MissingKeyException;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -14,17 +16,17 @@ use Drupal\user\UserInterface;
 class BakeryUserHooks {
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\bakery\Kitchen
+   * @var Kitchen
    */
   protected $kitchen;
 
@@ -69,7 +71,7 @@ class BakeryUserHooks {
       // anything else until the changes are saved locally.
 
       foreach ($this->config->get('bakery_supported_fields') as $type => $enabled) {
-        /** @var \Drupal\user\UserInterface $original */
+        /** @var UserInterface $original */
         $original = $account->original;
         if ($enabled) {
           switch ($type) {
diff --git a/src/Controller/ChildController.php b/src/Controller/ChildController.php
index 1905274..e02d80f 100644
--- a/src/Controller/ChildController.php
+++ b/src/Controller/ChildController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bakery\Controller;
 
+use Drupal\user\UserInterface;
 use Drupal\bakery\BakeryService;
 use Drupal\bakery\Cookies\Stroopwafel;
 use Drupal\bakery\Kitchen;
@@ -14,21 +15,21 @@ use Symfony\Component\HttpFoundation\Response;
 class ChildController extends ControllerBase {
 
   /**
-   * @var \Drupal\bakery\BakeryService
+   * @var BakeryService
    */
   protected $bakeryService;
 
   /**
-   * @var \Drupal\bakery\Kitchen
+   * @var Kitchen
    */
   protected $kitchen;
 
   /**
    * Initialize bakery service.
    *
-   * @param \Drupal\bakery\BakeryService $bakeryService
+   * @param BakeryService $bakeryService
    *   For bakery service.
-   * @param \Drupal\bakery\Kitchen $kitchen
+   * @param Kitchen $kitchen
    *   Kitchen service to work on all those cookies.
    */
   public function __construct(BakeryService $bakeryService, Kitchen $kitchen) {
@@ -39,7 +40,7 @@ class ChildController extends ControllerBase {
   /**
    * When this controller is created, it will get the bakery.bakery_service.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   For getting Bakery service.
    *
    * @return static
@@ -78,7 +79,7 @@ class ChildController extends ControllerBase {
 
     $response = new Response();
     // Check if the user exists.
-    /** @var \Drupal\user\UserInterface[] $account */
+    /** @var UserInterface[] $account */
     $account = $this->entityTypeManager()
       ->getStorage('user')
       ->loadByProperties(['init' => $this->kitchen->generateInitField($stroopwafel->getUid())]);
diff --git a/src/Controller/ChildDeprecatedController.php b/src/Controller/ChildDeprecatedController.php
index f9f60cb..4a6ca44 100644
--- a/src/Controller/ChildDeprecatedController.php
+++ b/src/Controller/ChildDeprecatedController.php
@@ -12,14 +12,14 @@ use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 class ChildDeprecatedController extends ControllerBase {
 
   /**
-   * @var \Drupal\bakery\Kitchen
+   * @var Kitchen
    */
   protected $kitchen;
 
   /**
    * Initialize bakery service.
    *
-   * @param \Drupal\bakery\Kitchen $kitchen
+   * @param Kitchen $kitchen
    *   Kitchen service.
    */
   public function __construct(Kitchen $kitchen) {
@@ -29,7 +29,7 @@ class ChildDeprecatedController extends ControllerBase {
   /**
    * When this controller is created, it will get the bakery.bakery_service.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   For getting Bakery service.
    *
    * @return static
@@ -88,7 +88,7 @@ class ChildDeprecatedController extends ControllerBase {
           $language = $this->languageManager()->getCurrentLanguage()->getId();
           $account = User::create();
           // Mandatory settings.
-          $account->setPassword(user_password());
+          $account->setPassword(\Drupal::service('password_generator')->generate());
           $account->enforceIsNew();
           $account->setEmail($cookie['data']['mail']);
           // This username must be unique and accept only a-Z,0-9, - _ @ .
diff --git a/src/Controller/MainController.php b/src/Controller/MainController.php
index ad3b765..13860ec 100644
--- a/src/Controller/MainController.php
+++ b/src/Controller/MainController.php
@@ -6,7 +6,7 @@ namespace Drupal\bakery\Controller;
  * @file
  * Router call back functions for bakery SSO functions.
  */
-
+use Drupal\user\UserInterface;
 use Drupal\bakery\Cookies\Gingerbread;
 use Drupal\bakery\Cookies\GingerbreadReturn;
 use Drupal\bakery\Kitchen;
@@ -23,21 +23,21 @@ use Symfony\Component\HttpFoundation\Response;
 class MainController extends ControllerBase {
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
-   * @var \Drupal\bakery\Kitchen
+   * @var Kitchen
    */
   protected $kitchen;
 
   /**
    * Initialize bakery service.
    *
-   * @param \Drupal\bakery\Kitchen $kitchen
+   * @param Kitchen $kitchen
    *   For bakery service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database connection for saving mapping storage.
    */
   public function __construct(Kitchen $kitchen, Connection $connection) {
@@ -48,7 +48,7 @@ class MainController extends ControllerBase {
   /**
    * When this controller is created, it will get the bakery.bakery_service.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   For getting Bakery service.
    *
    * @return static
@@ -72,7 +72,7 @@ class MainController extends ControllerBase {
     if (!$account && $ginger_bread->getOrEmail()) {
       $account = user_load_by_mail($ginger_bread->getAccountName());
     }
-    /** @var \Drupal\user\UserInterface|false $account */
+    /** @var UserInterface|false $account */
     if ($account) {
       $this->saveChildUid($account, $ginger_bread->getChild(), $ginger_bread->getChildUid());
 
diff --git a/src/Controller/MainDeprecatedController.php b/src/Controller/MainDeprecatedController.php
index 642a8e8..b9736f1 100644
--- a/src/Controller/MainDeprecatedController.php
+++ b/src/Controller/MainDeprecatedController.php
@@ -20,21 +20,21 @@ use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 class MainDeprecatedController extends ControllerBase {
 
   /**
-   * @var \Drupal\bakery\BakeryService
+   * @var BakeryService
    */
   protected $bakeryService;
 
   /**
-   * @var \Drupal\bakery\Kitchen
+   * @var Kitchen
    */
   protected $kitchen;
 
   /**
    * Initialize bakery service.
    *
-   * @param \Drupal\bakery\BakeryService $bakery_service
+   * @param BakeryService $bakery_service
    *   For bakery service.
-   * @param \Drupal\bakery\Kitchen $kitchen
+   * @param Kitchen $kitchen
    *   For bakery service.
    */
   public function __construct(BakeryService $bakery_service, Kitchen $kitchen) {
@@ -45,7 +45,7 @@ class MainDeprecatedController extends ControllerBase {
   /**
    * When this controller is created, it will get the bakery.bakery_service.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   For getting Bakery service.
    *
    * @return static
@@ -86,7 +86,7 @@ class MainDeprecatedController extends ControllerBase {
         else {
           // Create user.
           if (!$cookie['data']['pass']) {
-            $pass = user_password();
+            $pass = \Drupal::service('password_generator')->generate();
           }
           else {
             $pass = $cookie['data']['pass'];
@@ -196,7 +196,7 @@ class MainDeprecatedController extends ControllerBase {
 
         if (empty($errors)) {
           // Check if account credentials are correct.
-          /** @var \Drupal\user\UserInterface|false $account */
+          /** @var UserInterface|false $account */
           $account = user_load_by_name($name);
           if ($account && $account->id()) {
             // Check if the mail is denied.
diff --git a/src/EventSubscriber/BootSubscriber.php b/src/EventSubscriber/BootSubscriber.php
index f8aa7c5..05aa6c9 100644
--- a/src/EventSubscriber/BootSubscriber.php
+++ b/src/EventSubscriber/BootSubscriber.php
@@ -6,7 +6,9 @@ namespace Drupal\bakery\EventSubscriber;
  * @file
  * For Boot event subscribe.
  */
-
+use Drupal\Core\Entity\EntityStorageInterface;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Drupal\user\UserInterface;
 use Drupal\bakery\BakeryService;
 use Drupal\bakery\Cookies\ChocolateChip;
 use Drupal\bakery\Exception\MissingKeyException;
@@ -20,7 +22,6 @@ use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -33,22 +34,22 @@ class BootSubscriber implements EventSubscriberInterface {
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\bakery\BakeryService
+   * @var BakeryService
    */
   protected $bakeryService;
 
   /**
-   * @var \Drupal\bakery\Kitchen
+   * @var Kitchen
    */
   protected $kitchen;
 
   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;
 
@@ -57,13 +58,13 @@ class BootSubscriber implements EventSubscriberInterface {
   /**
    * Initialize bakeryService.
    *
-   * @param \Drupal\bakery\BakeryService $bakeryService
+   * @param BakeryService $bakeryService
    *   Bakery service used.
-   * @param \Drupal\bakery\Kitchen $kitchen
+   * @param Kitchen $kitchen
    *   Bakery kitchen service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Type manager for retrieving user storage.
    */
   public function __construct(BakeryService $bakeryService, Kitchen $kitchen, AccountProxyInterface $currentUser, EntityTypeManagerInterface $entityTypeManager) {
@@ -84,7 +85,7 @@ class BootSubscriber implements EventSubscriberInterface {
   /**
    * On boot event we need to test the cookie.
    */
-  public function onEvent(GetResponseEvent $event) {
+  public function onEvent(RequestEvent $event) {
     try {
       $cookie = $this->kitchen->taste(Kitchen::CHOCOLATE_CHIP);
     }
@@ -133,11 +134,11 @@ class BootSubscriber implements EventSubscriberInterface {
     }
   }
 
-  private function somethingAnonymous(GetResponseEvent $event, array $cookie) {
+  private function somethingAnonymous(RequestEvent $event, array $cookie) {
     // User is anonymous. If they do not have an account we'll create one by
     // requesting their information from the master site. If they do have an
     // account we may need to correct some disparant information.
-    /** @var \Drupal\user\UserInterface[] $account */
+    /** @var UserInterface[] $account */
     $account = $this->userStorage->loadByProperties([
       'name' => $cookie['name'],
       'mail' => $cookie['mail'],
@@ -214,7 +215,7 @@ class BootSubscriber implements EventSubscriberInterface {
       );
     }
     if ($count == 1) {
-      /** @var \Drupal\user\UserInterface[] $account */
+      /** @var UserInterface[] $account */
       $account = $this->userStorage->loadByProperties(['init' => $cookie['init']]);
       if (is_array($account)) {
         $account = reset($account);
@@ -234,7 +235,7 @@ class BootSubscriber implements EventSubscriberInterface {
         $account->setUsername($cookie['name']);
         $account->save();
         // Reload.
-        /** @var \Drupal\user\UserInterface[] $account */
+        /** @var UserInterface[] $account */
         $account = $this->userStorage->loadByProperties(
           [
             'name' => $cookie['name'],
@@ -247,7 +248,7 @@ class BootSubscriber implements EventSubscriberInterface {
     return FALSE;
   }
 
-  private function bootstrapAccount(GetResponseEvent $event, array $cookie) {
+  private function bootstrapAccount(RequestEvent $event, array $cookie) {
     $checks = TRUE;
     /** @var int $mail_count */
     $mail_count = $this->userStorage->getQuery()
diff --git a/src/EventSubscriber/CookieMonster.php b/src/EventSubscriber/CookieMonster.php
index 1c34d1b..00857f4 100644
--- a/src/EventSubscriber/CookieMonster.php
+++ b/src/EventSubscriber/CookieMonster.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bakery\EventSubscriber;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ -21,21 +22,21 @@ class CookieMonster implements EventSubscriberInterface {
   /**
    * Time services.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Bakery settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Local storage for collecting cookie changes.
    *
-   * @var \Symfony\Component\HttpFoundation\ParameterBag
+   * @var ParameterBag
    */
   protected $cookieJar;
 
@@ -76,7 +77,7 @@ class CookieMonster implements EventSubscriberInterface {
   /**
    * Adds a query parameter to check successful log in redirect URL.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The Event to process.
    */
   public function meWantCookie(ResponseEvent $event) {
diff --git a/src/Forms/BakeryPullForm.php b/src/Forms/BakeryPullForm.php
index a498a74..84d34f0 100644
--- a/src/Forms/BakeryPullForm.php
+++ b/src/Forms/BakeryPullForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bakery\Forms;
 
+use Drupal\user\UserInterface;
 use Drupal\bakery\BakeryService;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormBase;
@@ -14,7 +15,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class BakeryPullForm extends FormBase implements ContainerInjectionInterface {
 
   /**
-   * @var \Drupal\bakery\BakeryService
+   * @var BakeryService
    */
   private $service;
 
@@ -63,10 +64,10 @@ class BakeryPullForm extends FormBase implements ContainerInjectionInterface {
    * Make sure we are not trying to request an existing user.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\user\UserInterface|false $existing_account */
+    /** @var UserInterface|false $existing_account */
     $existing_account = user_load_by_name($form_state->getValue('name'));
     if (!$existing_account && $form_state->getValue('or_email')) {
-      /** @var \Drupal\user\UserInterface|false $existing_account */
+      /** @var UserInterface|false $existing_account */
       $existing_account = user_load_by_mail($form_state->getValue('name'));
     }
     // Raise an error in case the account already exists locally.
diff --git a/src/Forms/BakeryUncrumbleForm.php b/src/Forms/BakeryUncrumbleForm.php
index 6be8451..bab7828 100644
--- a/src/Forms/BakeryUncrumbleForm.php
+++ b/src/Forms/BakeryUncrumbleForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bakery\Forms;
 
+use Drupal\user\UserInterface;
 use Drupal\bakery\Kitchen;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Database\Connection;
@@ -20,17 +21,17 @@ class BakeryUncrumbleForm extends FormBase implements ContainerInjectionInterfac
   /**
    * For generating hashed password we check with database.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   private $passwordHasher;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;
 
   /**
-   * @var \Drupal\bakery\Kitchen
+   * @var Kitchen
    */
   private $kitchen;
 
@@ -163,7 +164,7 @@ class BakeryUncrumbleForm extends FormBase implements ContainerInjectionInterfac
      * We are ignoring blocked status on purpose.
      * The user is being repaired, not logged in.
      */
-    /** @var \Drupal\user\UserInterface|false $account */
+    /** @var UserInterface|false $account */
     $account = user_load_by_name($form_state->getValue('name'));
     if (!($account && $account->id()) || $this->passwordHasher->check($form_state->getValue('pass'), $account->getPassword())) {
       $this->logger('bakery')
diff --git a/src/Kitchen.php b/src/Kitchen.php
index b0b8307..239a95f 100644
--- a/src/Kitchen.php
+++ b/src/Kitchen.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bakery;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Psr\Http\Message\ResponseInterface;
 use Drupal\bakery\Cookies\ChocolateChip;
 use Drupal\bakery\Cookies\CookieInterface;
 use Drupal\bakery\Cookies\RemoteCookieInterface;
@@ -32,22 +34,22 @@ class Kitchen {
   const OATMEAL = 'OATMEAL';
 
   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\ParameterBag
+   * @var ParameterBag
    */
   protected $cookieJar;
 
@@ -66,10 +68,10 @@ class Kitchen {
   /**
    * Set a cookie.
    *
-   * @param \Drupal\bakery\Cookies\CookieInterface $cookie
+   * @param CookieInterface $cookie
    *   The cookie data.
    *
-   * @throws \Drupal\bakery\Exception\MissingKeyException
+   * @throws MissingKeyException
    *   Thrown if the site key isn't configured yet.
    */
   public function bake(CookieInterface $cookie) {
@@ -82,7 +84,7 @@ class Kitchen {
   /**
    * Encrypt and sign data for Bakery transfer.
    *
-   * @param \Drupal\bakery\Cookies\CookieInterface $cookie
+   * @param CookieInterface $cookie
    *   The cookie data.
    *
    * @return string
@@ -104,7 +106,7 @@ class Kitchen {
   /**
    * Re-bake a chocolate chip cookie.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    */
   public function reBakeChocolateChipCookie(AccountInterface $account) {
     try {
@@ -135,7 +137,7 @@ class Kitchen {
    *
    * @param string $type
    *   Optional string defining the type of data this is.
-   * @param \Symfony\Component\HttpFoundation\ParameterBag|null $cookies
+   * @param ParameterBag|null $cookies
    *   Optional list of cookies from the request.
    *
    * @return array|bool
@@ -165,7 +167,7 @@ class Kitchen {
    * @return array|bool
    *   Unserialized data or FALSE if invalid.
    *
-   * @throws \Drupal\bakery\Exception\MissingKeyException
+   * @throws MissingKeyException
    *   Thrown if the site key isn't configured yet.
    */
   public function tasteData(string $data, string $type = NULL) {
@@ -207,10 +209,10 @@ class Kitchen {
   /**
    * Ship a cookie to child sites.
    *
-   * @param \Drupal\bakery\Cookies\RemoteCookieInterface $cookie
+   * @param RemoteCookieInterface $cookie
    *   The cookie data.
    *
-   * @return \Psr\Http\Message\ResponseInterface|bool
+   * @return ResponseInterface|bool
    */
   public function ship(RemoteCookieInterface $cookie) {
     $path = $cookie->getPath();
@@ -252,7 +254,7 @@ class Kitchen {
    * @param string $data
    *   The encrypted cookie data.
    *
-   * @return false|\Psr\Http\Message\ResponseInterface
+   * @return false|ResponseInterface
    */
   protected function shipItGood(string $uri, string $cookie_name, string $data) {
     // @phpstan-ignore-next-line
diff --git a/src/RedirectDestination.php b/src/RedirectDestination.php
index df8a988..209e38e 100644
--- a/src/RedirectDestination.php
+++ b/src/RedirectDestination.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bakery;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\RedirectDestinationInterface;
@@ -14,48 +15,48 @@ class RedirectDestination implements RedirectDestinationInterface {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Bakery settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * The destination used by the current request.
    *
-   * @var \Drupal\Core\Url|string
+   * @var Url|string
    */
   protected $destination;
 
   /**
    * Constructs a new RedirectDestination instance.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL generator.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Configuration factory.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface|null $destination
+   * @param RedirectDestinationInterface|null $destination
    *   Core destination redirect destination service.
    */
   public function __construct(
@@ -92,7 +93,7 @@ class RedirectDestination implements RedirectDestinationInterface {
   /**
    * Get link to destination on current site for parent.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   private function getParentDestination() {
     $query = $this->requestStack->getCurrentRequest()->query;
@@ -105,7 +106,7 @@ class RedirectDestination implements RedirectDestinationInterface {
   /**
    * Get link to destination on referring child.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   private function getChildDestination() {
     $query = $this->requestStack->getCurrentRequest()->query;
diff --git a/src/Routing/BakeryRoutes.php b/src/Routing/BakeryRoutes.php
index feb849f..5eedd21 100644
--- a/src/Routing/BakeryRoutes.php
+++ b/src/Routing/BakeryRoutes.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bakery\Routing;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Routing\RouteCompiler;
@@ -15,7 +16,7 @@ use Symfony\Component\Routing\RouteCollection;
 class BakeryRoutes implements ContainerInjectionInterface {
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
diff --git a/tests/src/Functional/BakerySiteTestBase.php b/tests/src/Functional/BakerySiteTestBase.php
index 9f91d3d..c93db20 100644
--- a/tests/src/Functional/BakerySiteTestBase.php
+++ b/tests/src/Functional/BakerySiteTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\bakery\Functional;
 
+use Symfony\Component\BrowserKit\AbstractBrowser;
 use Drupal\bakery\Cookies\CookieInterface;
 use Drupal\Tests\BrowserTestBase;
 use Symfony\Component\BrowserKit\Cookie;
@@ -12,7 +13,7 @@ class BakerySiteTestBase extends BrowserTestBase {
 
   private $domain;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->domain = preg_replace('/^[^.]+/', '', rtrim($this->baseUrl, '/'));
     $this->config('bakery.settings')
@@ -26,7 +27,7 @@ class BakerySiteTestBase extends BrowserTestBase {
   /**
    * Helper method to bake a cookie on to the "browser" session.
    *
-   * @param \Drupal\bakery\Cookies\CookieInterface $cookie
+   * @param CookieInterface $cookie
    */
   protected function bakeCookie(CookieInterface $cookie) {
     $this->setCookie($cookie::getName(), $this->container->get('bakery.kitchen')->bakeData($cookie));
@@ -50,7 +51,7 @@ class BakerySiteTestBase extends BrowserTestBase {
   }
 
   /**
-   * @return \Symfony\Component\BrowserKit\AbstractBrowser
+   * @return AbstractBrowser
    */
   private function getClient() {
     return $this->getSession()->getDriver()->getClient();
diff --git a/tests/src/Functional/ChildLoginTest.php b/tests/src/Functional/ChildLoginTest.php
index b862b92..7747c18 100644
--- a/tests/src/Functional/ChildLoginTest.php
+++ b/tests/src/Functional/ChildLoginTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\bakery\Functional;
 
+use Drupal\user\UserStorageInterface;
 use Drupal\bakery\Cookies\ChocolateChip;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Url;
@@ -73,7 +74,7 @@ class ChildLoginTest extends ChildSiteTestBase {
     $this->drupalGet('');
     $this->drupalGet('');
     $assert_session->responseContains('Tester');
-    /** @var \Drupal\user\UserStorageInterface $user_storage */
+    /** @var UserStorageInterface $user_storage */
     $user_storage = $this->container->get('entity_type.manager')->getStorage('user');
     $user = $user_storage->loadByProperties(['name' => 'tester']);
     $this->assertEquals('test@example.com', $user[0]->getEamil());
diff --git a/tests/src/Functional/ChildSiteTestBase.php b/tests/src/Functional/ChildSiteTestBase.php
index 3bb2955..f945e67 100644
--- a/tests/src/Functional/ChildSiteTestBase.php
+++ b/tests/src/Functional/ChildSiteTestBase.php
@@ -7,7 +7,7 @@ use Drupal\Core\Url;
 
 class ChildSiteTestBase extends BakerySiteTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->config('bakery.settings')
       ->set('bakery_is_master', 0)
diff --git a/tests/src/Functional/DynamicRoutingTest.php b/tests/src/Functional/DynamicRoutingTest.php
index d16f917..3f7a7c0 100644
--- a/tests/src/Functional/DynamicRoutingTest.php
+++ b/tests/src/Functional/DynamicRoutingTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\bakery\Functional;
 
+use Drupal\Core\Routing\RouteProvider;
 use Symfony\Component\Routing\Exception\RouteNotFoundException;
 use Symfony\Component\Routing\Route;
 
@@ -10,11 +11,11 @@ class DynamicRoutingTest extends BakerySiteTestBase {
   protected $defaultTheme = 'stark';
 
   /**
-   * @var \Drupal\Core\Routing\RouteProvider|object|null
+   * @var RouteProvider|object|null
    */
   private $routeProvider;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->routeProvider = $this->container->get('router.route_provider');
   }
diff --git a/tests/src/Functional/MainSiteCookiesTest.php b/tests/src/Functional/MainSiteCookiesTest.php
index afa9c99..120a7e5 100644
--- a/tests/src/Functional/MainSiteCookiesTest.php
+++ b/tests/src/Functional/MainSiteCookiesTest.php
@@ -51,7 +51,7 @@ class MainSiteCookiesTest extends MainSiteTestBase {
     ], 'Log in');
     $account->sessionId = $this->getSession()->getCookie(\Drupal::service('session_configuration')->getOptions(\Drupal::request())['name']);
     $this->assertFalse($this->drupalUserIsLoggedIn($account), new FormattableMarkup('User %name successfully logged in.', ['%name' => $account->getAccountName()]));
-    $assert_session->assert($this->getSession()->getCookie($cookie_name) === null, 'Cookie is set but should not be.');
+    $this->assertTrue($this->getSession()->getCookie($cookie_name) === null, 'Cookie is set but should not be.');
 
     $this->drupalLogin($account);
     $assert_session->cookieExists($cookie_name);
@@ -71,7 +71,7 @@ class MainSiteCookiesTest extends MainSiteTestBase {
     ], 'Log in');
     $account->sessionId = $this->getSession()->getCookie(\Drupal::service('session_configuration')->getOptions(\Drupal::request())['name']);
     $this->assertFalse($this->drupalUserIsLoggedIn($account), new FormattableMarkup('User %name successfully logged in.', ['%name' => $account->getAccountName()]));
-    $assert_session->assert($this->getSession()->getCookie($cookie_name) === null, 'Cookie is set but should not be.');
+    $this->assertTrue($this->getSession()->getCookie($cookie_name) === null, 'Cookie is set but should not be.');
 
     $this->drupalGet(Url::fromRoute('user.login', [], ['query' => ['bd' => urlencode('https://www.google.org/')]]));
     $this->submitForm([
diff --git a/tests/src/Functional/MainSitePagesTest.php b/tests/src/Functional/MainSitePagesTest.php
index afbd73f..5dc50d1 100644
--- a/tests/src/Functional/MainSitePagesTest.php
+++ b/tests/src/Functional/MainSitePagesTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\bakery\Functional;
 
+use Drupal\bakery\Kitchen;
 use Drupal\bakery\Cookies\Gingerbread;
 use Drupal\Core\Url;
 use Symfony\Component\HttpFoundation\Response;
@@ -13,7 +14,7 @@ class MainSitePagesTest extends MainSiteTestBase {
   public function testCreate() {
     $account = $this->createUser();
     $client = $this->getHttpClient();
-    /** @var \Drupal\bakery\Kitchen $kitchen */
+    /** @var Kitchen $kitchen */
     $kitchen = $this->container->get('bakery.kitchen');
     $options = ['http_errors' => FALSE];
     $cookie = new Gingerbread($account->getAccountName(), 0, 'child.example.com', '123');
diff --git a/tests/src/Functional/MainSiteTestBase.php b/tests/src/Functional/MainSiteTestBase.php
index a7ca24e..a7d2fdd 100644
--- a/tests/src/Functional/MainSiteTestBase.php
+++ b/tests/src/Functional/MainSiteTestBase.php
@@ -4,7 +4,7 @@ namespace Drupal\Tests\bakery\Functional;
 
 class MainSiteTestBase extends BakerySiteTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->config('bakery.settings')->set('bakery_is_master', 1)->save();
     $this->container->get('router.builder')->rebuild();
diff --git a/tests/src/Traits/CookieTestTrait.php b/tests/src/Traits/CookieTestTrait.php
index e36ea81..3e01ca6 100644
--- a/tests/src/Traits/CookieTestTrait.php
+++ b/tests/src/Traits/CookieTestTrait.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests\bakery\Traits;
 
 
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\bakery\BakeryService;
 use Drupal\bakery\Kitchen;
 use Drupal\Core\DependencyInjection\Container;
@@ -23,12 +24,12 @@ trait CookieTestTrait {
   protected $dataExtra = [];
 
   /**
-   * @var \Drupal\bakery\Kitchen|\Prophecy\Prophecy\ObjectProphecy
+   * @var Kitchen|ObjectProphecy
    */
   protected $kitchenService;
 
   /**
-   * @var \Drupal\bakery\BakeryService|\Prophecy\Prophecy\ObjectProphecy
+   * @var BakeryService|ObjectProphecy
    */
   protected $bakeryService;
 
diff --git a/tests/src/Unit/BakeryServiceTest.php b/tests/src/Unit/BakeryServiceTest.php
index 8439caf..25106c4 100644
--- a/tests/src/Unit/BakeryServiceTest.php
+++ b/tests/src/Unit/BakeryServiceTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\bakery\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Config;
 use Drupal\Tests\UnitTestCase;
 
@@ -10,7 +11,8 @@ use Drupal\Tests\UnitTestCase;
  */
 class BakeryServiceTest extends UnitTestCase {
 
-  public function setUp() {
+  use ProphecyTrait;
+  public function setUp(): void {
     parent::setUp();
     $this->config = $this->prophesize(Config::class);
     $this->getConfigFactoryStub();
diff --git a/tests/src/Unit/Cookies/BrowserCookieTraitTest.php b/tests/src/Unit/Cookies/BrowserCookieTraitTest.php
index 983637b..395254f 100644
--- a/tests/src/Unit/Cookies/BrowserCookieTraitTest.php
+++ b/tests/src/Unit/Cookies/BrowserCookieTraitTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\bakery\Unit\Cookies;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\bakery\BakeryService;
 use Drupal\bakery\Cookies\BrowserCookieTrait;
 use Drupal\bakery\Kitchen;
@@ -13,17 +15,18 @@ use Drupal\Tests\UnitTestCase;
  */
 class BrowserCookieTraitTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\bakery\Kitchen|\Prophecy\Prophecy\ObjectProphecy
+   * @var Kitchen|ObjectProphecy
    */
   protected $kitchenService;
 
   /**
-   * @var \Drupal\bakery\BakeryService|\Prophecy\Prophecy\ObjectProphecy
+   * @var BakeryService|ObjectProphecy
    */
   protected $bakeryService;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $container = new Container();
     $this->kitchenService = $this->prophesize(Kitchen::class);
@@ -42,6 +45,9 @@ class BrowserCookieTraitTest extends UnitTestCase {
     $this->assertTrue((new class {
       use BrowserCookieTrait;
 
+      /**
+       * @doesNotPerformAssertions
+       */
       public function test() {
         return $this->getIsMain();
       }
@@ -58,6 +64,9 @@ class BrowserCookieTraitTest extends UnitTestCase {
     $this->assertEquals('jibberish', (new class {
       use BrowserCookieTrait;
 
+      /**
+       * @doesNotPerformAssertions
+       */
       public function test() {
         return $this->cookieName('test');
       }
diff --git a/tests/src/Unit/Cookies/ChocolateChipTest.php b/tests/src/Unit/Cookies/ChocolateChipTest.php
index 84ab6aa..5dae8e8 100644
--- a/tests/src/Unit/Cookies/ChocolateChipTest.php
+++ b/tests/src/Unit/Cookies/ChocolateChipTest.php
@@ -17,7 +17,7 @@ class ChocolateChipTest extends UnitTestCase {
     testGetName as traitGetNameTest;
   }
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cookie = ChocolateChip::class;
     $this->cookieName = 'CHOCOLATECHIP';
@@ -36,6 +36,7 @@ class ChocolateChipTest extends UnitTestCase {
    * @covers ::toData
    * @covers ::fromData
    * @dataProvider provideTestData
+   * @doesNotPerformAssertions
    */
   public function testFromData($data) {
     // Mock reasonable function calls based on if cookie is from main site or child.
diff --git a/tests/src/Unit/Cookies/GingerbreadReturnTest.php b/tests/src/Unit/Cookies/GingerbreadReturnTest.php
index 16dec74..cd94727 100644
--- a/tests/src/Unit/Cookies/GingerbreadReturnTest.php
+++ b/tests/src/Unit/Cookies/GingerbreadReturnTest.php
@@ -13,7 +13,7 @@ class GingerbreadReturnTest extends UnitTestCase {
 
   use CookieTestTrait;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cookie = GingerbreadReturn::class;
     $this->cookieName = 'gingerbread';
diff --git a/tests/src/Unit/Cookies/GingerbreadTest.php b/tests/src/Unit/Cookies/GingerbreadTest.php
index ba5fa4d..1ed0089 100644
--- a/tests/src/Unit/Cookies/GingerbreadTest.php
+++ b/tests/src/Unit/Cookies/GingerbreadTest.php
@@ -13,7 +13,7 @@ class GingerbreadTest extends UnitTestCase {
 
   use RemoteCookieTestTrait;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cookie = Gingerbread::class;
     $this->cookieName = 'gingerbread';
diff --git a/tests/src/Unit/Cookies/OatmealCookieTest.php b/tests/src/Unit/Cookies/OatmealCookieTest.php
index 1979f36..d232207 100644
--- a/tests/src/Unit/Cookies/OatmealCookieTest.php
+++ b/tests/src/Unit/Cookies/OatmealCookieTest.php
@@ -16,7 +16,7 @@ class OatmealCookieTest extends UnitTestCase {
     testGetName as traitGetNameTest;
   }
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cookie = OatmealCookie::class;
     $this->cookieName = 'OATMEALCOOKIE';
@@ -36,6 +36,7 @@ class OatmealCookieTest extends UnitTestCase {
    * @covers ::toData
    * @covers ::fromData
    * @dataProvider provideTestData
+   * @doesNotPerformAssertions
    */
   public function testFromData($data) {
     // Mock reasonable function calls based on if cookie is from main site or child.
diff --git a/tests/src/Unit/Cookies/StroopwafelTest.php b/tests/src/Unit/Cookies/StroopwafelTest.php
index e9ee44d..38d2427 100644
--- a/tests/src/Unit/Cookies/StroopwafelTest.php
+++ b/tests/src/Unit/Cookies/StroopwafelTest.php
@@ -14,7 +14,7 @@ use Drupal\Tests\UnitTestCase;
 class StroopwafelTest extends UnitTestCase {
   use RemoteCookieTestTrait;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cookie = Stroopwafel::class;
     $this->cookieName = 'stroopwafel';
diff --git a/tests/src/Unit/EventSubscriber/CookieMonsterTest.php b/tests/src/Unit/EventSubscriber/CookieMonsterTest.php
index 387d586..e45a1a5 100644
--- a/tests/src/Unit/EventSubscriber/CookieMonsterTest.php
+++ b/tests/src/Unit/EventSubscriber/CookieMonsterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\bakery\Unit\EventSubscriber;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\bakery\EventSubscriber\CookieMonster;
 use Drupal\Component\Datetime\Time;
 use Drupal\Core\Config\Config;
@@ -23,27 +24,28 @@ use Symfony\Component\HttpKernel\HttpKernelInterface;
  */
 class CookieMonsterTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\bakery\EventSubscriber\CookieMonster
+   * @var CookieMonster
    */
   private $sot;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\ParameterBag
+   * @var ParameterBag
    */
   private $cookieJar;
 
   /**
-   * @var \Drupal\Core\Http\RequestStack
+   * @var RequestStack
    */
   private $request;
 
   /**
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   private $time;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->request = new RequestStack();
     $this->request->push(new Request());
@@ -90,8 +92,8 @@ class CookieMonsterTest extends UnitTestCase {
       Cookie::create('cookie1', 'foo', $expire, '/', '.example.com', $secure),
       Cookie::create('cookie2', 'bar', $expire, '/', '.example.com', $secure),
       // This might cause problems with Symfony 5?
-      new Cookie('cookie3', NULL, 1, '/', '.example.com', $secure, TRUE, FALSE, NULL),
-      new Cookie('cookie3', NULL, 1, '/', '', $secure, TRUE, FALSE, NULL),
+      Cookie::create('cookie3', NULL, 1, '/', '.example.com', $secure, TRUE, FALSE, NULL),
+      Cookie::create('cookie3', NULL, 1, '/', '', $secure, TRUE, FALSE, NULL),
     ], $response->headers->getCookies());
   }
 
diff --git a/tests/src/Unit/KitchenTest.php b/tests/src/Unit/KitchenTest.php
index 36c2d24..f478443 100644
--- a/tests/src/Unit/KitchenTest.php
+++ b/tests/src/Unit/KitchenTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\bakery\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\bakery\Cookies\ChocolateChip;
 use Drupal\bakery\Cookies\Gingerbread;
 use Drupal\bakery\Cookies\Stroopwafel;
@@ -42,23 +43,24 @@ use Symfony\Component\HttpFoundation\Session\Flash\FlashBag;
  */
 class KitchenTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\Core\Http\RequestStack
+   * @var RequestStack
    */
   protected $request;
 
   /**
-   * @var \GuzzleHttp\Handler\MockHandler
+   * @var MockHandler
    */
   protected $mockHandler;
 
   /**
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\Session\Flash\FlashBag
+   * @var FlashBag
    */
   protected $messageBag;
 
@@ -68,31 +70,31 @@ class KitchenTest extends UnitTestCase {
   protected $requestHistory;
 
   /**
-   * @var \Psr\Log\Test\TestLogger
+   * @var TestLogger
    */
   protected $testLogger;
 
   /**
-   * @var \Drupal\bakery\Kitchen
+   * @var Kitchen
    */
   private $kitchen;
 
   /**
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   private $time;
 
   /**
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $config;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\ParameterBag
+   * @var ParameterBag
    */
   private $cookieJar;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->request = new RequestStack();
     $this->request->push(new Request());
