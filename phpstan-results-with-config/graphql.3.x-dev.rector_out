modules/contrib/graphql/graphql.install
modules/contrib/graphql/graphql.module
modules/contrib/graphql/modules/graphql_core/src/GraphQL/EntityCrudOutputWrapper.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/EntityFieldDeriverBase.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/EntityTypeDeriverBase.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Enums/DisplayModeIdDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/ContextDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityByIdDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityFieldDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityFieldItemDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityFieldPropertyDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityQueryDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityReferenceQueryDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityReferenceReverseDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityRenderedDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityRevisionByIdDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Interfaces/EntityTypeDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Scalars/TypedDataPrimitiveFallback.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Types/EntityBundleDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Types/EntityFieldTypeDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Types/EntityTypeDeriver.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Enums/Common/QueryConjunction.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Enums/Common/QueryOperator.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Enums/Common/SortOrder.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Enums/DisplayModes/DisplayModeId.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Enums/EntityQuery/EntityQueryBundleMode.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Enums/EntityQuery/EntityQueryRevisionMode.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Enums/Images/ImageStyleId.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Enums/Languages/LanguageId.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Blocks/BlocksByRegion.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Breadcrumbs/Breadcrumbs.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Context/Context.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityAccess.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityBundle.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityById.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityChanged.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityCreated.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityDescription.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityField.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityFieldItem.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityId.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityLabel.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityLanguage.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityOwner.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityPublished.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityQueryExclusive.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRendered.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRevisionById.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRevisions.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityTranslation.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityTranslations.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityType.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityUrl.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityUuid.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageDerivative.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageHeight.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageUrl.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageWidth.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Link/LinkAttribute.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Link/LinkUrl.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityFieldBase.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQuery.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQueryCount.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQueryEntities.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityReference/EntityReferenceQuery.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityReference/EntityReferenceReverse.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/File/FileUrl.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Images/ImageResourceHeight.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Images/ImageResourceUrl.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Images/ImageResourceWidth.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkActive.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkLanguage.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkTitle.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkUrl.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinks.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/AvailableLanguages.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/LanguageArgument.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/LanguageDirection.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/LanguageId.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/LanguageIsDefault.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/LanguageIsLocked.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/LanguageName.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/LanguageWeight.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Link/LinkLabel.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Link/LinkUrl.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuByName.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuDescription.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuLinks.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuName.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/MenuLink/MenuLinkAttribute.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/MenuLink/MenuLinkDescription.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/MenuLink/MenuLinkExpanded.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/MenuLink/MenuLinkLabel.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/MenuLink/MenuLinkLinks.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/MenuLink/MenuLinkUrl.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Mutations/ConstraintViolationCode.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Mutations/ConstraintViolationMessage.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Mutations/ConstraintViolationPath.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Mutations/EntityCrudOutputEntity.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Mutations/EntityCrudOutputErrors.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Mutations/EntityCrudOutputViolations.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/ExternalUrl/ExternalRequest.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/Alias.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/InternalPath.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/InternalRequest.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Path.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/RedirectUrl/Code.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/RedirectUrl/Target.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Response/ResponseCode.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Response/ResponseContent.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Response/ResponseHeader.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Route.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/RouteEntity.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Routed.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Translate.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/InputTypes/EntityQuery/EntityQueryFilterConditionInput.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/InputTypes/EntityQuery/EntityQueryFilterInput.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/InputTypes/EntityQuery/EntityQuerySortInput.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Interfaces/Entity/Entity.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Interfaces/Entity/EntityDescribable.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Interfaces/Entity/EntityOwnable.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Interfaces/Entity/EntityPublishable.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Interfaces/Entity/EntityRevisionable.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Interfaces/Entity/EntityType.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Interfaces/Routing/InternalUrl.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Interfaces/Routing/Url.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/CreateEntityBase.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/DeleteEntityBase.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/UpdateEntityBase.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Scalars/TypedData/Any.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Scalars/TypedData/DateTimeIso8601.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Scalars/TypedData/DurationIso8601.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Scalars/TypedData/Email.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Scalars/TypedData/FilterFormat.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Scalars/TypedData/Map.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Scalars/TypedData/Uri.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Schemas/DefaultSchema.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Entity/EntityBundle.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Entity/EntityCanonicalUrl.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Entity/EntityFieldType.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Entity/EntityType.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Entity/UnexposedEntity.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/EntityQuery/EntityQueryResult.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Images/ImageResource.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Languages/Language.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Menu/Menu.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Menu/MenuLink.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Mutations/ConstraintViolation.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Mutations/EntityCrudOutput.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Routing/DefaultInternalUrl.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Routing/ExternalResponse.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Routing/ExternalUrl.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Routing/InternalResponse.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Routing/LanguageSwitchLink.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Routing/Link.php
modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Types/Routing/RedirectUrl.php
modules/contrib/graphql/modules/graphql_core/tests/modules/graphql_breadcrumbs_test/src/Controller/TestController.php
modules/contrib/graphql/modules/graphql_core/tests/modules/graphql_context_test/src/ContextProvider/RouteNameContext.php
modules/contrib/graphql/modules/graphql_core/tests/modules/graphql_requests_test/src/RequestTestController.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Blocks/BlockTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Breadcrumbs/BreadcrumbsTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Context/ContextTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Context/NodeContextTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Entity/BundleLessEntityTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Entity/EntityBasicFieldsTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Entity/EntityByIdTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Entity/EntityFieldValueTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Entity/EntityPropertyConflict.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Entity/EntityRevisionsTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/EntityMutation/EntityMutationTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/EntityQuery/EntityQueryTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/GraphQLContentTestBase.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/GraphQLCoreTestBase.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Images/ImageFieldTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Languages/LanguageTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Menu/MenuTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Routing/ExternalRequestTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Routing/InternalRequestTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Routing/RouteEntityTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Routing/RouteTest.php
modules/contrib/graphql/modules/graphql_core/tests/src/Traits/RevisionsTestTrait.php
modules/contrib/graphql/src/Access/QueryAccessCheck.php
modules/contrib/graphql/src/Annotation/GraphQLAnnotationBase.php
modules/contrib/graphql/src/Annotation/GraphQLEnum.php
modules/contrib/graphql/src/Annotation/GraphQLField.php
modules/contrib/graphql/src/Annotation/GraphQLInputType.php
modules/contrib/graphql/src/Annotation/GraphQLInterface.php
modules/contrib/graphql/src/Annotation/GraphQLMutation.php
modules/contrib/graphql/src/Annotation/GraphQLScalar.php
modules/contrib/graphql/src/Annotation/GraphQLSchema.php
modules/contrib/graphql/src/Annotation/GraphQLSubscription.php
modules/contrib/graphql/src/Annotation/GraphQLType.php
modules/contrib/graphql/src/Annotation/GraphQLUnionType.php
modules/contrib/graphql/src/Cache/RequestPolicy/DenyQuery.php
modules/contrib/graphql/src/Config/GraphQLConfigOverrides.php
modules/contrib/graphql/src/Controller/ExplorerController.php
modules/contrib/graphql/src/Controller/QueryMapListBuilder.php
modules/contrib/graphql/src/Controller/RequestController.php
modules/contrib/graphql/src/Controller/SchemaOverviewController.php
modules/contrib/graphql/src/Controller/SubrequestExtractionController.php
modules/contrib/graphql/src/Controller/VoyagerController.php
modules/contrib/graphql/src/Entity/QueryMap.php
modules/contrib/graphql/src/Entity/QueryMapInterface.php
modules/contrib/graphql/src/EventSubscriber/ExplorerPageDisplayVariantSubscriber.php
modules/contrib/graphql/src/EventSubscriber/SubrequestSubscriber.php
modules/contrib/graphql/src/EventSubscriber/VoyagerPageDisplayVariantSubscriber.php
modules/contrib/graphql/src/FixedLanguageNegotiator.php
modules/contrib/graphql/src/Form/EntityQueryMapForm.php
modules/contrib/graphql/src/Form/EntityQueryMapImportForm.php
modules/contrib/graphql/src/Form/JsonQueryMapConfigForm.php
modules/contrib/graphql/src/GraphQL/Buffers/BufferBase.php
modules/contrib/graphql/src/GraphQL/Buffers/EntityBuffer.php
modules/contrib/graphql/src/GraphQL/Buffers/SubRequestBuffer.php
modules/contrib/graphql/src/GraphQL/Buffers/SubRequestResponse.php
modules/contrib/graphql/src/GraphQL/Cache/CacheableRequestError.php
modules/contrib/graphql/src/GraphQL/Cache/CacheableValue.php
modules/contrib/graphql/src/GraphQL/Cache/UncacheableValue.php
modules/contrib/graphql/src/GraphQL/Context/ContextRepository.php
modules/contrib/graphql/src/GraphQL/Execution/QueryProcessor.php
modules/contrib/graphql/src/GraphQL/Execution/QueryResult.php
modules/contrib/graphql/src/GraphQL/Execution/ResolveContext.php
modules/contrib/graphql/src/GraphQL/QueryProvider/EntityQueryMapQueryProvider.php
modules/contrib/graphql/src/GraphQL/QueryProvider/JsonQueryMapQueryProvider.php
modules/contrib/graphql/src/GraphQL/QueryProvider/QueryProvider.php
modules/contrib/graphql/src/GraphQL/QueryProvider/QueryProviderInterface.php
modules/contrib/graphql/src/GraphQL/Utility/Introspection.php
modules/contrib/graphql/src/GraphQL/ValueWrapperInterface.php
modules/contrib/graphql/src/GraphQLLanguageContext.php
modules/contrib/graphql/src/GraphqlServiceProvider.php
modules/contrib/graphql/src/Plugin/Deriver/PluggableSchemaDeriver.php
modules/contrib/graphql/src/Plugin/FieldPluginInterface.php
modules/contrib/graphql/src/Plugin/FieldPluginManager.php
modules/contrib/graphql/src/Plugin/GraphQL/Enums/EnumPluginBase.php
modules/contrib/graphql/src/Plugin/GraphQL/Fields/FieldPluginBase.php
modules/contrib/graphql/src/Plugin/GraphQL/InputTypes/InputTypePluginBase.php
modules/contrib/graphql/src/Plugin/GraphQL/Interfaces/InterfacePluginBase.php
modules/contrib/graphql/src/Plugin/GraphQL/Mutations/MutationPluginBase.php
modules/contrib/graphql/src/Plugin/GraphQL/Scalars/Internal/BooleanScalar.php
modules/contrib/graphql/src/Plugin/GraphQL/Scalars/Internal/DateScalar.php
modules/contrib/graphql/src/Plugin/GraphQL/Scalars/Internal/DateTimeScalar.php
modules/contrib/graphql/src/Plugin/GraphQL/Scalars/Internal/DateTimeTzScalar.php
modules/contrib/graphql/src/Plugin/GraphQL/Scalars/Internal/FloatScalar.php
modules/contrib/graphql/src/Plugin/GraphQL/Scalars/Internal/IdScalar.php
modules/contrib/graphql/src/Plugin/GraphQL/Scalars/Internal/IntegerScalar.php
modules/contrib/graphql/src/Plugin/GraphQL/Scalars/Internal/StringScalar.php
modules/contrib/graphql/src/Plugin/GraphQL/Scalars/Internal/TimestampScalar.php
modules/contrib/graphql/src/Plugin/GraphQL/Scalars/ScalarPluginBase.php
modules/contrib/graphql/src/Plugin/GraphQL/Scalars/Upload/Upload.php
modules/contrib/graphql/src/Plugin/GraphQL/Schemas/SchemaPluginBase.php
modules/contrib/graphql/src/Plugin/GraphQL/Subscriptions/SubscriptionPluginBase.php
modules/contrib/graphql/src/Plugin/GraphQL/Traits/ArgumentAwarePluginTrait.php
modules/contrib/graphql/src/Plugin/GraphQL/Traits/CacheablePluginTrait.php
modules/contrib/graphql/src/Plugin/GraphQL/Traits/DeprecatablePluginTrait.php
modules/contrib/graphql/src/Plugin/GraphQL/Traits/DescribablePluginTrait.php
modules/contrib/graphql/src/Plugin/GraphQL/Traits/TypedPluginTrait.php
modules/contrib/graphql/src/Plugin/GraphQL/Types/TypePluginBase.php
modules/contrib/graphql/src/Plugin/GraphQL/Unions/UnionTypePluginBase.php
modules/contrib/graphql/src/Plugin/LanguageNegotiation/LanguageNegotiationGraphQL.php
modules/contrib/graphql/src/Plugin/MenuLink/Deriver/ExplorerMenuLinkDeriver.php
modules/contrib/graphql/src/Plugin/MenuLink/Deriver/VoyagerMenuLinkDeriver.php
modules/contrib/graphql/src/Plugin/MutationPluginInterface.php
modules/contrib/graphql/src/Plugin/MutationPluginManager.php
modules/contrib/graphql/src/Plugin/SchemaBuilderInterface.php
modules/contrib/graphql/src/Plugin/SchemaPluginInterface.php
modules/contrib/graphql/src/Plugin/SchemaPluginManager.php
modules/contrib/graphql/src/Plugin/SubscriptionPluginInterface.php
modules/contrib/graphql/src/Plugin/SubscriptionPluginManager.php
modules/contrib/graphql/src/Plugin/TypePluginInterface.php
modules/contrib/graphql/src/Plugin/TypePluginManager.php
modules/contrib/graphql/src/Plugin/TypePluginManagerAggregator.php
modules/contrib/graphql/src/Plugin/TypePluginManagerInterface.php
modules/contrib/graphql/src/Routing/ConfigurationRoutes.php
modules/contrib/graphql/src/Routing/ExplorerRoutes.php
modules/contrib/graphql/src/Routing/QueryRouteEnhancer.php
modules/contrib/graphql/src/Routing/QueryRoutes.php
modules/contrib/graphql/src/Routing/VoyagerRoutes.php
modules/contrib/graphql/src/Utility/JsonHelper.php
modules/contrib/graphql/src/Utility/StringHelper.php
modules/contrib/graphql/tests/modules/graphql_enum_test/src/Plugin/GraphQL/Enums/Numbers.php
modules/contrib/graphql/tests/modules/graphql_enum_test/src/Plugin/GraphQL/Fields/Number.php
modules/contrib/graphql/tests/modules/graphql_enum_test/src/Plugin/GraphQL/Fields/Numbers.php
modules/contrib/graphql/tests/modules/graphql_override_test/src/Plugin/GraphQL/Fields/Gadgets.php
modules/contrib/graphql/tests/modules/graphql_override_test/src/Plugin/GraphQL/Fields/LoudEchoChamber.php
modules/contrib/graphql/tests/modules/graphql_override_test/src/Plugin/GraphQL/Fields/MoreWheels.php
modules/contrib/graphql/tests/modules/graphql_override_test/src/Plugin/GraphQL/Types/FancyBike.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Garage.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/GarageInterface.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Fields/BackupCar.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Fields/EchoChamber.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Fields/Engine.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Fields/Garage.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Fields/Gears.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Fields/Type.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Fields/Wheels.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/InputTypes/CarInput.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Interfaces/MotorizedVehicle.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Interfaces/Vehicle.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Mutations/BuyCar.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Types/Bike.php
modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Types/Car.php
modules/contrib/graphql/tests/modules/graphql_test/src/Plugin/GraphQL/Schemas/TestSchema.php
modules/contrib/graphql/tests/src/Kernel/Extension/EnumTest.php
modules/contrib/graphql/tests/src/Kernel/Extension/FieldTest.php
modules/contrib/graphql/tests/src/Kernel/Extension/MutationTest.php
modules/contrib/graphql/tests/src/Kernel/Extension/OverrideFieldTest.php
modules/contrib/graphql/tests/src/Kernel/Extension/OverrideTypeTest.php
modules/contrib/graphql/tests/src/Kernel/Extension/RecursiveTypeTest.php
modules/contrib/graphql/tests/src/Kernel/Extension/ResolveContextTest.php
modules/contrib/graphql/tests/src/Kernel/Extension/TypeTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/BufferedFieldTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/DisabledResultCacheTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/DisabledSchemaCacheTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/InvalidPayloadTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/LanguageContextTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/PermissionsTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/ResultCacheTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/ResultTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/SchemaCacheTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/SecureFieldTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/TestFrameworkTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/UploadMutationTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/UserPermissionsContextTest.php
modules/contrib/graphql/tests/src/Kernel/GraphQLFileTestBase.php
modules/contrib/graphql/tests/src/Kernel/GraphQLTestBase.php
modules/contrib/graphql/tests/src/Traits/EnableCliCacheTrait.php
modules/contrib/graphql/tests/src/Traits/GraphQLFileTestTrait.php
modules/contrib/graphql/tests/src/Traits/HttpRequestTrait.php
modules/contrib/graphql/tests/src/Traits/IntrospectionTestTrait.php
modules/contrib/graphql/tests/src/Traits/MockGraphQLPluginTrait.php
modules/contrib/graphql/tests/src/Traits/ProphesizePermissionsTrait.php
modules/contrib/graphql/tests/src/Traits/QueryFileTrait.php
modules/contrib/graphql/tests/src/Traits/QueryResultAssertionTrait.php
modules/contrib/graphql/tests/src/Unit/StringFormattingTest.php

140 files with changes
======================

1) modules/contrib/graphql/tests/src/Unit/StringFormattingTest.php:11

    ---------- begin diff ----------
@@ @@
  */
 class StringFormattingTest extends UnitTestCase {

-  /**
-   * @expectedException \InvalidArgumentException
-   * @expectedExceptionMessageRegExp /Failed to create a specification compliant string representation for '.+'\./
-   */
   public function testFailureOnInvalidInput() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessageRegExp('/Failed to create a specification compliant string representation for \'.+\'\./');
     StringHelper::camelCase('^%!@#&');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/graphql/tests/src/Traits/QueryResultAssertionTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Traits;

+use Drupal\graphql\GraphQL\Execution\QueryProcessor;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\graphql\GraphQL\Execution\QueryResult;
 use GraphQL\Error\Error;
@@ @@
   /**
    * Retrieve the graphql processor.
    *
-   * @return \Drupal\graphql\GraphQL\Execution\QueryProcessor
+   * @return QueryProcessor
    *   The graphql processor service.
    */
   protected function graphQlProcessor() {
@@ @@
   /**
    * The default cache metadata object.
    *
-   * @return \Drupal\Core\Cache\CacheableMetadata
+   * @return CacheableMetadata
    *   The cache metadata object.
    */
   protected function defaultCacheMetaData() {
@@ @@
   /**
    * The default mutation cache metadata object.
    *
-   * @return \Drupal\Core\Cache\CacheableMetadata
+   * @return CacheableMetadata
    *   The cache metadata object.
    */
   protected function defaultMutationCacheMetaData() {
@@ @@
    *   The query variables.
    * @param array $expected
    *   The expected result.
-   * @param \Drupal\Core\Cache\CacheableMetadata $metadata
+   * @param CacheableMetadata $metadata
    *   The expected cache metadata object.
    */
   protected function assertResults($query, $variables, $expected, CacheableMetadata $metadata) {
@@ @@
    *   The query variables.
    * @param mixed $expected
    *   The expected error messages.
-   * @param \Drupal\Core\Cache\CacheableMetadata $metadata
+   * @param CacheableMetadata $metadata
    *   The expected cache metadata object.
    */
   protected function assertErrors($query, $variables, $expected, CacheableMetadata $metadata) {
@@ @@
   /**
    * Assert a certain result data set on a query result.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\QueryResult $result
+   * @param QueryResult $result
    *   The query result object.
    * @param mixed $expected
    *   The expected result data set.
@@ @@
   /**
    * Assert that the result contains contains a certain set of errors.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\QueryResult $result
+   * @param QueryResult $result
    *   The query result object.
    * @param array $expected
    *   The list of expected error messages. Also allows regular expressions.
@@ @@
   /**
    * Assert a certain set of result metadata on a query result.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\QueryResult $result
+   * @param QueryResult $result
    *   The query result object.
-   * @param \Drupal\Core\Cache\CacheableMetadata $expected
+   * @param CacheableMetadata $expected
    *   The expected metadata object.
    *
    * @internal
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/graphql/tests/src/Traits/QueryFileTrait.php:13

    ---------- begin diff ----------
@@ @@
    *   The path to the collection of test query files.
    */
   protected function getQueriesDirectory() {
-    return drupal_get_path('module', explode('\\', get_class($this))[2]) . '/tests/queries';
+    return \Drupal::service('extension.list.module')->getPath(explode('\\', get_class($this))[2]) . '/tests/queries';
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/graphql/tests/src/Traits/MockGraphQLPluginTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Traits;

+use PHPUnit\Framework\MockObject\Stub\ReturnCallback;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Plugin\Discovery\DerivativeDiscoveryDecorator;
 use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
 use Drupal\Component\Plugin\Factory\FactoryInterface;
@@ @@
    * Injects the mocked schema managers into the drupal container. Has to be
    * invoked during the KernelTest's register callback.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The container instance.
    *
    * @throws \Exception
@@ @@
   protected function injectTypeSystemPluginManagers(ContainerBuilder $container) {
     foreach ($this->graphQLPluginClassMap as $id => $class) {
       $this->graphQLPlugins[$class] = [];
-      /** @var \Drupal\Core\Plugin\DefaultPluginManager $manager */
+      /** @var DefaultPluginManager $manager */
       $manager = $container->get($id);

       $this->graphQLPluginManagers[$id] = $manager;
@@ @@
   /**
    * Add a new plugin to the GraphQL type system.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $plugin
+   * @param PluginInspectionInterface $plugin
    *   The plugin to add.
    *
    * @internal
@@ @@
    * @param mixed $value
    *   The return value. Can also be a value callback.
    *
-   * @return \PHPUnit_Framework_MockObject_Stub_ReturnCallback
+   * @return ReturnCallback
    *   The return callback promise.
    */
   protected function toPromise($value) {
@@ @@
    * @param mixed $scope
    *   The resolver's bound object and class scope.
    *
-   * @return \PHPUnit_Framework_MockObject_Stub_ReturnCallback
+   * @return ReturnCallback
    *   The return callback promise.
    */
   protected function toBoundPromise($value, $scope) {
@@ @@
    * @param mixed|null $applies
    *   A result for the types "applies" method. Defaults to `TRUE`.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The type mock object.
    */
   protected function mockType($id, array $definition, $applies = TRUE, $builder = NULL) {
@@ @@
    *   A result for this mutation. Can be a value or a callback. If omitted, no
    *   resolve method mock will be attached.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The mutation mock object.
    */
   protected function mockMutation($id, array $definition, $result = NULL, $builder = NULL) {
@@ @@
    * @param array $definition
    *   The plugin definition. Will be merged with the interface defaults.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The interface mock object.
    */
   protected function mockInterface($id, array $definition, $builder = NULL) {
@@ @@
    * @param array $definition
    *   The plugin definition. Will be merged with the union defaults.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The union mock object.
    */
   protected function mockUnion($id, array $definition, $builder = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector


5) modules/contrib/graphql/tests/src/Traits/HttpRequestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Traits;

+use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpFoundation\Request;

 /**
@@ @@
    * @param array $variables
    *   Query variables.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response object.
    */
   protected function query($query, array $variables = []) {
@@ @@
    * @param array $variables
    *   Query variables.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response object.
    */
   protected function persistedQuery($id, array $variables = []) {
@@ @@
    * @param string[] $queries
    *   A set of queries to be executed in one go.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response object.
    */
   protected function batchedQueries($queries) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/graphql/tests/src/Traits/GraphQLFileTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Traits;

+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Symfony\Component\HttpFoundation\Request;

 /**
@@ @@
    *   The path to the collection of test query files.
    */
   protected function getQueriesDirectory() {
-    return drupal_get_path('module', explode('\\', get_class($this))[2]) . '/tests/queries';
+    return \Drupal::service('extension.list.module')->getPath(explode('\\', get_class($this))[2]) . '/tests/queries';
   }

   /**
@@ @@
       'variables' => $variables,
     ];

-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $httpKernel */
+    /** @var HttpKernelInterface $httpKernel */
     $httpKernel = \Drupal::service('http_kernel');
     $response = $httpKernel->handle(Request::create('/graphql', 'POST', [], [], [], [], json_encode($content)));
     $data = json_decode($response->getContent(), TRUE);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/graphql/tests/src/Kernel/GraphQLTestBase.php:95

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->injectTypeSystemPluginManagers($this->container);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/graphql/tests/src/Kernel/GraphQLFileTestBase.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->installConfig('graphql');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/graphql/tests/src/Kernel/Framework/UploadMutationTest.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\Tests\graphql\Kernel\Framework;


+use Symfony\Component\HttpFoundation\File\UploadedFile;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 use Symfony\Component\HttpFoundation\Request;

@@ @@
       'arguments' => ['file' => 'Upload!'],
       'type' => 'String',
     ], function ($value, $args) {
-      /** @var \Symfony\Component\HttpFoundation\File\UploadedFile $file */
+      /** @var UploadedFile $file */
       $file = $args['file'];
       return $file->getClientOriginalName();
     });
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/graphql/tests/src/Kernel/Framework/SecureFieldTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->mockField('secure', [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/graphql/tests/src/Kernel/Framework/ResultTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\Framework;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 use GraphQL\Server\OperationParams;
@@ @@
  */
 class ResultTest extends GraphQLTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->mockField('root', [
       'name' => 'root',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/graphql/tests/src/Kernel/Framework/ResultCacheTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\Framework;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\MethodProphecy;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Cache\Context\ContextCacheKeys;
 use Drupal\graphql\GraphQL\Cache\CacheableValue;
@@ @@
  */
 class ResultCacheTest extends GraphQLTestBase {

+  use ProphecyTrait;
   /**
    * Check basic result caching.
+   * @doesNotPerformAssertions
    */
   public function testCacheableResult() {
     $this->mockField('root', [
@@ @@

   /**
    * Verify that uncacheable results are not cached.
+   * @doesNotPerformAssertions
    */
   public function testUncacheableResult() {
     $this->mockField('root', [
@@ @@

   /**
    * Verify that fields with uncacheable annotations are not cached.
+   * @doesNotPerformAssertions
    */
   public function testUncacheableResultAnnotation() {
     $this->mockField('root', [
@@ @@

   /**
    * Test if caching properly handles variabels.
+   * @doesNotPerformAssertions
    */
   public function testVariables() {
     $this->mockField('root', [
@@ @@
       ->willReturn(new ContextCacheKeys([]));

     // Store the method prophecy so we can replace the result on the fly.
-    /** @var \Prophecy\Prophecy\MethodProphecy $contextKeys */
+    /** @var MethodProphecy $contextKeys */
     $contextKeys = $contextManager->convertTokensToKeys($hasContext);

     $this->mockField('root', [
@@ @@

   /**
    * Test if results cache properly acts on cache tag clears.
+   * @doesNotPerformAssertions
    */
   public function testTags() {
     $this->mockField('root', [
@@ @@
    */
   public function testLeakingCacheMetadata() {

-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');

     $this->mockField('leakA', [
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/graphql/tests/src/Kernel/Framework/PermissionsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\Framework;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 use PhpParser\Node\Arg;
@@ @@
  */
 class PermissionsTest extends GraphQLTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->mockField('root', [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/graphql/tests/src/Kernel/Framework/LanguageContextTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->mockType('node', ['name' => 'Node']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/graphql/tests/src/Kernel/Framework/InvalidPayloadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\Framework;

+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 use Symfony\Component\HttpFoundation\Request;

@@ @@
 class InvalidPayloadTest extends GraphQLTestBase {

   public function testEmptyPayload() {
-    /** @var \Symfony\Component\HttpFoundation\Response $result */
+    /** @var Response $result */
     $result = $this->container->get('http_kernel')
       ->handle(Request::create('/graphql', 'POST', [], [], [], [], '{ invalid'));
     $this->assertJson($result->getContent(), json_encode([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/graphql/tests/src/Kernel/Framework/DisabledResultCacheTest.php:25

    ---------- begin diff ----------
@@ @@

   /**
    * Test if disabling the result cache has the desired effect.
+   * @doesNotPerformAssertions
    */
   public function testDisabledCache() {
     $this->mockField('root', [
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/graphql/tests/src/Kernel/Extension/TypeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\Extension;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\graphql_plugin_test\GarageInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;

@@ @@
  * @group graphql
  */
 class TypeTest extends GraphQLTestBase {
+  use ProphecyTrait;
   public static $modules = [
     'graphql_plugin_test',
   ];
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/graphql/tests/src/Kernel/Extension/RecursiveTypeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\Extension;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\graphql_plugin_test\GarageInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;

@@ @@
  * @group graphql
  */
 class RecursiveTypeTest extends GraphQLTestBase {
+  use ProphecyTrait;
   public static $modules = [
     'graphql_plugin_test',
   ];
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/graphql/tests/src/Kernel/Extension/OverrideTypeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\Extension;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\graphql_plugin_test\GarageInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;

@@ @@
  * @group graphql
  */
 class OverrideTypeTest extends GraphQLTestBase {
+  use ProphecyTrait;
   public static $modules = [
     'graphql_plugin_test',
     'graphql_override_test',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/graphql/tests/src/Kernel/Extension/MutationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\Extension;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\graphql_plugin_test\GarageInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;

@@ @@
  * @group graphql
  */
 class MutationTest extends GraphQLTestBase {
+  use ProphecyTrait;
   public static $modules = [
     'graphql_plugin_test',
   ];
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Mutations/BuyCar.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The garage.
    *
-   * @var \Drupal\graphql_plugin_test\GarageInterface
+   * @var GarageInterface
    */
   protected $garage;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\graphql_plugin_test\GarageInterface $garage
+   * @param GarageInterface $garage
    *   The garage service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, GarageInterface $garage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/graphql/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Fields/Garage.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The garage instance.
    *
-   * @var \Drupal\graphql_plugin_test\GarageInterface
+   * @var GarageInterface
    */
   protected $garage;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\graphql_plugin_test\GarageInterface $garage
+   * @param GarageInterface $garage
    *   The garaga service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, GarageInterface $garage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/graphql/src/Routing/VoyagerRoutes.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The graphql schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;

@@ @@
   /**
    * VoyagerRoutes constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The graphql schema plugin manager.
    */
   public function __construct(SchemaPluginManager $schemaManager) {
@@ @@
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/graphql/src/Routing/QueryRoutes.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The graphql schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;

@@ @@
   /**
    * The authentication collector.
    *
-   * @var \Drupal\Core\Authentication\AuthenticationCollectorInterface
+   * @var AuthenticationCollectorInterface
    */
   protected $authenticationCollector;

@@ @@
   /**
    * QueryRoutes constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The graphql schema plugin manager.
-   * @param \Drupal\Core\Authentication\AuthenticationCollectorInterface $authenticationCollector
+   * @param AuthenticationCollectorInterface $authenticationCollector
    *   The authentication collector.
    */
   public function __construct(SchemaPluginManager $schemaManager, AuthenticationCollectorInterface $authenticationCollector) {
@@ @@
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/graphql/src/Routing/QueryRouteEnhancer.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * Extracts the query parameters from a request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The http request object.
    *
    * @return array
@@ @@
   /**
    * Extracts the body parameters from a request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The http request object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/graphql/src/Routing/ExplorerRoutes.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The graphql schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;

@@ @@
   /**
    * ExplorerRoutes constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The graphql schema plugin manager.
    */
   public function __construct(SchemaPluginManager $schemaManager) {
@@ @@
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/graphql/src/Routing/ConfigurationRoutes.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The graphql schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;

@@ @@
   /**
    * ConfigurationRoutes constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The graphql schema plugin manager.
    */
   public function __construct(SchemaPluginManager $schemaManager) {
@@ @@
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/graphql/src/Plugin/TypePluginManagerAggregator.php:6

    ---------- begin diff ----------
@@ @@
   /**
    * List of registered plugin managers.
    *
-   * @var \Drupal\graphql\Plugin\TypePluginManagerInterface[]
+   * @var TypePluginManagerInterface[]
    */
   protected $pluginManagers = [];

@@ @@
   /**
    * Registers a plugin manager.
    *
-   * @param \Drupal\graphql\Plugin\TypePluginManagerInterface $pluginManager
+   * @param TypePluginManagerInterface $pluginManager
    *   The plugin manager to register.
    * @param $id
    *   The id of the service.
@@ @@
    * @param string $type
    *   The plugin type.
    *
-   * @return \Drupal\graphql\Plugin\TypePluginManagerInterface
+   * @return TypePluginManagerInterface
    *   The plugin managers for the given plugin type.
    */
   public function getTypeManager($type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/graphql/src/Plugin/TypePluginManager.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Static cache of plugin instances.
    *
-   * @var \Drupal\graphql\Plugin\TypePluginInterface[]
+   * @var TypePluginInterface[]
    */
   protected $instances;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/graphql/src/Plugin/TypePluginInterface.php:10

    ---------- begin diff ----------
@@ @@
 interface TypePluginInterface extends PluginInspectionInterface, DerivativeInspectionInterface {

   /**
-   * @param \Drupal\graphql\Plugin\SchemaBuilderInterface $builder
-   * @param \Drupal\graphql\Plugin\TypePluginManager $manager
+   * @param SchemaBuilderInterface $builder
+   * @param TypePluginManager $manager
    * @param $definition
    * @param $id
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/graphql/src/Plugin/SubscriptionPluginManager.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Static cache of plugin instances.
    *
-   * @var \Drupal\graphql\Plugin\SubscriptionPluginInterface[]
+   * @var SubscriptionPluginInterface[]
    */
   protected $instances;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/graphql/src/Plugin/SubscriptionPluginInterface.php:7

    ---------- begin diff ----------
@@ @@
 interface SubscriptionPluginInterface extends PluginInspectionInterface, DerivativeInspectionInterface {

   /**
-   * @param \Drupal\graphql\Plugin\SchemaBuilderInterface $builder
-   * @param \Drupal\graphql\Plugin\SubscriptionPluginManager $manager
+   * @param SchemaBuilderInterface $builder
+   * @param SubscriptionPluginManager $manager
    * @param $definition
    * @param $id
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/graphql/src/Plugin/SchemaPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/graphql/src/Plugin/SchemaPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin;

+use GraphQL\Type\Schema;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;

@@ @@
   /**
    * Retrieves the schema.
    *
-   * @return \GraphQL\Type\Schema
+   * @return Schema
    *   The schema.
    */
   public function getSchema();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


35) modules/contrib/graphql/src/Plugin/SchemaBuilderInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin;

+use Drupal\graphql\Plugin\GraphQL\Types\TypePluginBase;
+use GraphQL\Type\Definition\Type;
 use Drupal\graphql\GraphQL\Execution\ResolveContext;
 use GraphQL\Type\Definition\ResolveInfo;

@@ @@
    *   The name of the interface or union type.
    * @param mixed $value
    *   The value to resolve the concrete type for.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context object.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
-   * @return \Drupal\graphql\Plugin\GraphQL\Types\TypePluginBase|null
+   * @return TypePluginBase|null
    *   The object type that applies to the given value.
    */
   public function resolveType($name, $value, ResolveContext $context, ResolveInfo $info);
@@ @@
    * @param string $name
    *   The name of the type to retrieve the type instance for.
    *
-   * @return \GraphQL\Type\Definition\Type
+   * @return Type
    *   The type instance corresponding to the given type name.
    */
   public function getType($name);
@@ @@
    *   the type and the second array element representing the list of decorators
    *   to apply to the type.
    *
-   * @return \GraphQL\Type\Definition\Type
+   * @return Type
    *   The decorated type instance corresponding to the given type definition.
    */
   public function processType(array $type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


36) modules/contrib/graphql/src/Plugin/MutationPluginManager.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Static cache of plugin instances.
    *
-   * @var \Drupal\graphql\Plugin\MutationPluginInterface[]
+   * @var MutationPluginInterface[]
    */
   protected $instances;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/graphql/src/Plugin/MutationPluginInterface.php:7

    ---------- begin diff ----------
@@ @@
 interface MutationPluginInterface extends PluginInspectionInterface, DerivativeInspectionInterface {

   /**
-   * @param \Drupal\graphql\Plugin\SchemaBuilderInterface $builder
-   * @param \Drupal\graphql\Plugin\MutationPluginManager $manager
+   * @param SchemaBuilderInterface $builder
+   * @param MutationPluginManager $manager
    * @param $definition
    * @param $id
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


38) modules/contrib/graphql/src/Plugin/MenuLink/Deriver/VoyagerMenuLinkDeriver.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The schema plugin manager service.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;

@@ @@
   /**
    * VoyagerMenuLinkDeriver constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The schema plugin manager service.
    */
   public function __construct(SchemaPluginManager $schemaManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/graphql/src/Plugin/MenuLink/Deriver/ExplorerMenuLinkDeriver.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The schema plugin manager service.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;

@@ @@
   /**
    * ExplorerMenuLinkDeriver constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The schema plugin manager service.
    */
   public function __construct(SchemaPluginManager $schemaManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/graphql/src/Plugin/LanguageNegotiation/LanguageNegotiationGraphQL.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The graphql language context.
    *
-   * @var \Drupal\graphql\GraphQLLanguageContext
+   * @var GraphQLLanguageContext
    */
   protected $languageContext;

@@ @@
   /**
    * LanguageNegotiationGraphQL constructor.
    *
-   * @param \Drupal\graphql\GraphQLLanguageContext $languageContext
+   * @param GraphQLLanguageContext $languageContext
    *   Instance of the GraphQL language context.
    */
   public function __construct(GraphQLLanguageContext $languageContext) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/graphql/src/Plugin/GraphQL/Types/TypePluginBase.php:99

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $object
    *   The object to check against.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return null|bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/graphql/src/Plugin/GraphQL/Schemas/SchemaPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\Schemas;

+use GraphQL\Error\Error;
+use GraphQL\Type\Definition\Type;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * The field plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\FieldPluginManager
+   * @var FieldPluginManager
    */
   protected $fieldManager;

@@ @@
   /**
    * The mutation plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\MutationPluginManager
+   * @var MutationPluginManager
    */
   protected $mutationManager;

@@ @@
   /**
    * The subscription plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SubscriptionPluginManager
+   * @var SubscriptionPluginManager
    */
   protected $subscriptionManager;

@@ @@
   /**
    * The type manager aggregator service.
    *
-   * @var \Drupal\graphql\Plugin\TypePluginManagerAggregator
+   * @var TypePluginManagerAggregator
    */
   protected $typeManagers;

@@ @@
   /**
    * The query provider service.
    *
-   * @var \Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface
+   * @var QueryProviderInterface
    */
   protected $queryProvider;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\graphql\Plugin\FieldPluginManager $fieldManager
+   * @param FieldPluginManager $fieldManager
    *   The field plugin manager.
-   * @param \Drupal\graphql\Plugin\MutationPluginManager $mutationManager
+   * @param MutationPluginManager $mutationManager
    *   The mutation plugin manager.
-   * @param \Drupal\graphql\Plugin\SubscriptionPluginManager $subscriptionManager
+   * @param SubscriptionPluginManager $subscriptionManager
    *   The subscription plugin manager.
-   * @param \Drupal\graphql\Plugin\TypePluginManagerAggregator $typeManagers
+   * @param TypePluginManagerAggregator $typeManagers
    *   The type manager aggregator service.
-   * @param \Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface $queryProvider
+   * @param QueryProviderInterface $queryProvider
    *   The query provider service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    * @param array $parameters
    *   The service parameters.
@@ @@

     // Always log the errors.
     $config->setErrorsHandler(function (array $errors, callable $formatter) {
-      /** @var \GraphQL\Error\Error $error */
+      /** @var Error $error */
       foreach ($errors as $error) {
         $this->logger->error($error->getMessage());
       }
@@ @@
    * @param array $type
    *   The type reference.
    *
-   * @return \GraphQL\Type\Definition\Type
+   * @return Type
    *   The type instance.
    */
   protected function buildType($type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/graphql/src/Plugin/GraphQL/Fields/FieldPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\Fields;

+use Drupal\graphql\GraphQLLanguageContext;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
   /**
    * The language context service.
    *
-   * @var \Drupal\graphql\GraphQLLanguageContext
+   * @var GraphQLLanguageContext
    */
   protected $languageContext;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Get the language context instance.
    *
-   * @return \Drupal\graphql\GraphQLLanguageContext
+   * @return GraphQLLanguageContext
    *   The language context service.
    */
   protected function getLanguageContext() {
@@ @@
   /**
    * Get the renderer service.
    *
-   * @return \Drupal\Core\Render\RendererInterface
+   * @return RendererInterface
    */
   protected function getRenderer() {
     if (!isset($this->renderer)) {
@@ @@
    *
    * @param array $result
    *   The resolved values.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return mixed
@@ @@
    *   The parent value.
    * @param array $args
    *   The arguments passed to the field.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return array
@@ @@
    *   Field arguments.
    * @param $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Generator
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/graphql/src/Plugin/FieldPluginManager.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Static cache of plugin instances.
    *
-   * @var \Drupal\graphql\Plugin\FieldPluginInterface[]
+   * @var FieldPluginInterface[]
    */
   protected $instances;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/graphql/src/Plugin/FieldPluginInterface.php:7

    ---------- begin diff ----------
@@ @@
 interface FieldPluginInterface extends PluginInspectionInterface, DerivativeInspectionInterface {

   /**
-   * @param \Drupal\graphql\Plugin\SchemaBuilderInterface $builder
-   * @param \Drupal\graphql\Plugin\FieldPluginManager $manager
+   * @param SchemaBuilderInterface $builder
+   * @param FieldPluginManager $manager
    * @param $definition
    * @param $id
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


46) modules/contrib/graphql/src/Plugin/Deriver/PluggableSchemaDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\Deriver;

+use Drupal\graphql\Plugin\TypePluginInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Utility\SortArray;
@@ @@
   /**
    * The field manager service.
    *
-   * @var \Drupal\graphql\Plugin\FieldPluginManager
+   * @var FieldPluginManager
    */
   protected $fieldManager;

@@ @@
   /**
    * The mutation manager service.
    *
-   * @var \Drupal\graphql\Plugin\MutationPluginManager
+   * @var MutationPluginManager
    */
   protected $mutationManager;

@@ @@
   /**
    * The subscription manager service.
    *
-   * @var \Drupal\graphql\Plugin\SubscriptionPluginManager
+   * @var SubscriptionPluginManager
    */
   protected $subscriptionManager;

@@ @@
   /**
    * The type manager aggregator service.
    *
-   * @var \Drupal\graphql\Plugin\TypePluginManagerAggregator
+   * @var TypePluginManagerAggregator
    */
   protected $typeManagers;

@@ @@
    *
    * @param $basePluginId
    *   The base plugin id.
-   * @param \Drupal\graphql\Plugin\FieldPluginManager $fieldManager
+   * @param FieldPluginManager $fieldManager
    *   The field plugin manager.
-   * @param \Drupal\graphql\Plugin\MutationPluginManager $mutationManager
+   * @param MutationPluginManager $mutationManager
    *   The mutation plugin manager.
-   * @param \Drupal\graphql\Plugin\SubscriptionPluginManager $subscriptionManager
+   * @param SubscriptionPluginManager $subscriptionManager
    *   The mutation plugin manager.
-   * @param \Drupal\graphql\Plugin\TypePluginManagerAggregator $typeManagers
+   * @param TypePluginManagerAggregator $typeManagers
    *   The type manager aggregator service.
    */
   public function __construct(
@@ @@
     // instantiate their plugin instances during schema composition.
     return array_map(function ($type) use ($managers) {
       $manager = $managers[$type['type']];
-      /** @var \Drupal\graphql\Plugin\TypePluginInterface $instance */
+      /** @var TypePluginInterface $instance */
       $instance = $manager->getInstance(['id' => $type['id']]);

       return $type + [
@@ @@
   /**
    * Builds an optimized representation of fields keyed by their parent types.
    *
-   * @param \Drupal\graphql\Plugin\FieldPluginManager $manager
+   * @param FieldPluginManager $manager
    *   The field plugin manager.
    * @param $types
    *   The optimized list of types.
@@ @@
   /**
    * Builds an optimization representation of all registered fields.
    *
-   * @param \Drupal\graphql\Plugin\FieldPluginManager $manager
+   * @param FieldPluginManager $manager
    *   The field plugin manager.
    * @param $association
    *   The type/field association map.
@@ @@
   /**
    * Builds an optimized representation of all registered mutations.
    *
-   * @param \Drupal\graphql\Plugin\MutationPluginManager $manager
+   * @param MutationPluginManager $manager
    *   The mutation plugin manager.
    *
    * @return array
@@ @@
   /**
    * Builds an optimized representation of all registered subscriptions.
    *
-   * @param \Drupal\graphql\Plugin\SubscriptionPluginManager $manager
+   * @param SubscriptionPluginManager $manager
    *   The subscription plugin manager.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/graphql/src/GraphQLLanguageContext.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The string translation service
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $translationManager;

@@ @@
   /**
    * GraphQLLanguageContext constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    */
   public function __construct(LanguageManagerInterface $languageManager, TranslationManager $translationManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


48) modules/contrib/graphql/src/GraphQL/Utility/Introspection.php:8

    ---------- begin diff ----------
@@ @@
 class Introspection {

   /**
-   * @var \Drupal\graphql\GraphQL\Execution\QueryProcessor
+   * @var QueryProcessor
    */
   protected $queryProcessor;

@@ @@
   /**
    * Constructs an Introspection object.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\QueryProcessor $queryProcessor
+   * @param QueryProcessor $queryProcessor
    *   The query processor srevice.
    */
   public function __construct(QueryProcessor $queryProcessor) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


49) modules/contrib/graphql/src/GraphQL/QueryProvider/QueryProviderInterface.php:14

    ---------- begin diff ----------
@@ @@
    *
    * @param string $id
    *   The query id.
-   * @param \GraphQL\Server\OperationParams $operation
+   * @param OperationParams $operation
    *   The operation parameters.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


50) modules/contrib/graphql/src/GraphQL/QueryProvider/QueryProvider.php:8

    ---------- begin diff ----------
@@ @@
   /**
    * Unsorted list of query providers nested and keyed by priority.
    *
-   * @var \Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface[]
+   * @var QueryProviderInterface[]
    */
   protected $providers = [];

@@ @@
   /**
    * Sorted list of query providers.
    *
-   * @var \Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface[]
+   * @var QueryProviderInterface[]
    */
   protected $sortedProviders;

@@ @@
   /**
    * Adds a query provider.
    *
-   * @param \Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface $provider
+   * @param QueryProviderInterface $provider
    *   The query provider to add.
    * @param int $priority
    *   Priority of the query provider.
@@ @@
   /**
    * Returns the sorted array of query providers.
    *
-   * @return \Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface[]
+   * @return QueryProviderInterface[]
    *   An array of query provider objects.
    */
   protected function getSortedProviders() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


51) modules/contrib/graphql/src/GraphQL/QueryProvider/JsonQueryMapQueryProvider.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend for storing query map file paths.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * QueryProvider constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend for storing query map file paths.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
    */
   public function __construct(CacheBackendInterface $cacheBackend, ConfigFactoryInterface $configFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


52) modules/contrib/graphql/src/GraphQL/QueryProvider/EntityQueryMapQueryProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\GraphQL\QueryProvider;

+use Drupal\graphql\Entity\QueryMapInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use GraphQL\Server\OperationParams;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * QueryProvider constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
     }

     $storage = $this->entityTypeManager->getStorage('graphql_query_map');
-    /** @var \Drupal\graphql\Entity\QueryMapInterface $map */
+    /** @var QueryMapInterface $map */
     if ($map = $storage->load($version)) {
       return $map->getQuery($id);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


53) modules/contrib/graphql/src/GraphQL/Execution/ResolveContext.php:49

    ---------- begin diff ----------
@@ @@
    *
    * @param string $name
    *   The name of the context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    * @param mixed $default
    *   An arbitrary default value in case the context is not set.
@@ @@
    *   The name of the context.
    * @param $value
    *   The value of the context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


54) modules/contrib/graphql/src/GraphQL/Execution/QueryResult.php:18

    ---------- begin diff ----------
@@ @@
    *   Errors collected during execution.
    * @param array $extensions
    *   User specified array of extensions.
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $metadata
+   * @param CacheableDependencyInterface $metadata
    *   The cache metadata collected during query execution.
    */
   public function __construct(array $data = null, array $errors = [], array $extensions = [], CacheableDependencyInterface $metadata = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/graphql/src/GraphQL/Execution/QueryProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\GraphQL\Execution;

+use Drupal\Component\Plugin\Exception\PluginException;
+use GraphQL\Executor\Promise\Promise;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The cache backend for caching query results.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The cache contexts manager service.
    *
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager
+   * @var CacheContextsManager
    */
   protected $contextsManager;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Processor constructor.
    *
-   * @param \Drupal\Core\Cache\Context\CacheContextsManager $contextsManager
+   * @param CacheContextsManager $contextsManager
    *   The cache contexts manager service.
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $pluginManager
+   * @param SchemaPluginManager $pluginManager
    *   The schema plugin manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend for caching query results.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(
@@ @@
    *
    * @param string $schema
    *   The plugin id of the schema to use.
-   * @param \GraphQL\Server\OperationParams|\GraphQL\Server\OperationParams[] $params
+   * @param OperationParams|OperationParams[] $params
    *   The graphql operation(s) to execute.
    *
-   * @return \Drupal\graphql\GraphQL\Execution\QueryResult|\Drupal\graphql\GraphQL\Execution\QueryResult[]
+   * @return QueryResult|QueryResult[]
    *   The query result.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function processQuery($schema, $params) {
     // Load the plugin from the schema manager.
@@ @@
   }

   /**
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
+   * @param ServerConfig $config
+   * @param OperationParams $params
    *
    * @return mixed
    */
@@ @@
   }

   /**
-   * @param \GraphQL\Server\ServerConfig $config
+   * @param ServerConfig $config
    * @param array $params
    *
    * @return mixed
@@ @@
   }

   /**
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
+   * @param PromiseAdapter $adapter
+   * @param ServerConfig $config
+   * @param OperationParams $params
    * @param bool $batching
    *
-   * @return \GraphQL\Executor\Promise\Promise
+   * @return Promise
    */
   protected function executeOperationWithReporting(PromiseAdapter $adapter, ServerConfig $config, OperationParams $params, $batching = FALSE) {
     $result = $this->executeOperation($adapter, $config, $params, $batching);
@@ @@
   }

   /**
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
+   * @param PromiseAdapter $adapter
+   * @param ServerConfig $config
+   * @param OperationParams $params
    * @param bool $batching
    *
-   * @return \GraphQL\Executor\Promise\Promise
+   * @return Promise
    */
   protected function executeOperation(PromiseAdapter $adapter, ServerConfig $config, OperationParams $params, $batching = FALSE) {
     try {
@@ @@
   }

   /**
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param PromiseAdapter $adapter
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param bool $validate
    *
-   * @return \GraphQL\Executor\Promise\Promise|mixed
+   * @return Promise|mixed
    */
   protected function executeCacheableOperation(PromiseAdapter $adapter, ServerConfig $config, OperationParams $params, DocumentNode $document, $validate = TRUE) {
     $contextCacheId = 'ccid:' . $this->cacheIdentifier($params, $document);
@@ @@
   }

   /**
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param PromiseAdapter $adapter
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param bool $validate
    *
-   * @return \GraphQL\Executor\Promise\Promise
+   * @return Promise
    */
   protected function executeUncachableOperation(PromiseAdapter $adapter, ServerConfig $config, OperationParams $params, DocumentNode $document, $validate = TRUE) {
     $result = $this->doExecuteOperation($adapter, $config, $params, $document, $validate);
@@ @@
   }

   /**
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param PromiseAdapter $adapter
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param bool $validate
    *
-   * @return \GraphQL\Executor\Promise\Promise
+   * @return Promise
    */
   protected function doExecuteOperation(PromiseAdapter $adapter, ServerConfig $config, OperationParams $params, DocumentNode $document, $validate = TRUE) {
     // If one of the validation rules found any problems, do not resolve the
@@ @@
   }

   /**
-   * @param \GraphQL\Server\OperationParams $params
+   * @param OperationParams $params
    *
    * @return array
    */
@@ @@
   }

   /**
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    *
-   * @return \GraphQL\Error\Error[]
+   * @return Error[]
    * @throws \Exception
    */
   protected function validateOperation(ServerConfig $config, OperationParams $params, DocumentNode $document) {
@@ @@
   }

   /**
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param $operation
    *
    * @return mixed
@@ @@
   }

   /**
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param $operation
    *
    * @return mixed
@@ @@
   }

   /**
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param $operation
    *
    * @return array
-   * @throws \GraphQL\Server\RequestError
+   * @throws RequestError
    */
   protected function resolveValidationRules(ServerConfig $config, OperationParams $params, DocumentNode $document, $operation) {
     // Allow customizing validation rules per operation:
@@ @@
   }

   /**
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
+   * @param ServerConfig $config
+   * @param OperationParams $params
    *
    * @return mixed
-   * @throws \GraphQL\Server\RequestError
+   * @throws RequestError
    */
   protected function loadPersistedQuery(ServerConfig $config, OperationParams $params) {
     if (!$loader = $config->getPersistentQueryLoader()) {
@@ @@
   }

   /**
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param DocumentNode $document
    *
    * @return array
    */
@@ @@
   }

   /**
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param array $contexts
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


56) modules/contrib/graphql/src/GraphQL/Context/ContextRepository.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The list of content providers.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextProviderInterface[]
+   * @var ContextProviderInterface[]
    */
   protected $contextProviders = [];

@@ @@
   /**
    * Add a context provider.
    *
-   * @param \Drupal\Core\Plugin\Context\ContextProviderInterface $contextProvider
+   * @param ContextProviderInterface $contextProvider
    *   The context provider to add.
    */
   public function addContextProvider(ContextProviderInterface $contextProvider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


57) modules/contrib/graphql/src/GraphQL/Buffers/SubRequestBuffer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\GraphQL\Buffers;

+use Drupal\Core\GeneratedUrl;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Routing\LocalRedirectResponse;
@@ @@
   /**
    * The http kernel service.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * The request stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * SubrequestBuffer constructor.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $httpKernel
+   * @param HttpKernelInterface $httpKernel
    *   The http kernel service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack service.
    */
   public function __construct(HttpKernelInterface $httpKernel, RequestStack $requestStack) {
@@ @@
   /**
    * Add an item to the buffer.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url object to run the subrequest on.
    * @param callable $extract
    *   The callback to run within the sub-request.
@@ @@
    * {@inheritdoc}
    */
   protected function getBufferId($item) {
-    /** @var \Drupal\Core\GeneratedUrl $url */
+    /** @var GeneratedUrl $url */
     $url = $item['url']->toString(TRUE);

     return hash('sha256', json_encode([
@@ @@
   /**
    * Create a sub-request for the given url.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $current
+   * @param Request $current
    *   The current main request.
    * @param string $url
    *   The url to run the subrequest on.
@@ @@
    * @param array $buffer
    *   The buffer.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The request object.
    */
   protected function createRequest(Request $current, array $buffer, $url) {
@@ @@
    * {@inheritdoc}
    */
   public function resolveBufferArray(array $buffer) {
-    /** @var \Drupal\Core\GeneratedUrl $url */
+    /** @var GeneratedUrl $url */
     $url = reset($buffer)['url']->toString(TRUE);

     $current = $this->requestStack->getCurrentRequest();
@@ @@
     $target = $url->getGeneratedUrl();
     $request = $this->createRequest($current, $buffer, $target);
     
-    /** @var \Drupal\graphql\GraphQL\Buffers\SubRequestResponse $response */
+    /** @var SubRequestResponse $response */
     $response = $this->httpKernel->handle($request, HttpKernelInterface::SUB_REQUEST);
     while ($response instanceof LocalRedirectResponse) {
       $target = $response->getTargetUrl();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/graphql/src/GraphQL/Buffers/EntityBuffer.php:8

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EntityBuffer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/graphql/src/Form/JsonQueryMapConfigForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The default cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * QueryMapConfigForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The default cache backend.
    */
   public function __construct(ConfigFactoryInterface $configFactory, CacheBackendInterface $cacheBackend) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/graphql/src/Form/EntityQueryMapImportForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Form;

+use Drupal\graphql\Entity\QueryMapInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\file\FileInterface;
@@ @@
       'file_validate_extensions' => ['json'], // Validate extensions.
     ]);

-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     if (empty($files) || !($file = reset($files)) || !($file instanceof FileInterface)) {
       $formState->setError($form['query_map_json'], $this->t('No file was uploaded.'));
     }
@@ @@
     $file = $formState->get('file');
     $json = file_get_contents($file->getFileUri());

-    /** @var \Drupal\graphql\Entity\QueryMapInterface $entity */
+    /** @var QueryMapInterface $entity */
     $entity = $this->entity;
     $entity->set('version', sha1($json));
     $entity->set('map', array_flip((array) json_decode($json)));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/graphql/src/Form/EntityQueryMapForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Form;

+use Drupal\graphql\Entity\QueryMapInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
     $form = parent::buildForm($form, $formState);
     $form['#title'] = $this->t('Query map version %version', ['%version' => $this->entity->id()]);

-    /** @var \Drupal\graphql\Entity\QueryMapInterface $entity */
+    /** @var QueryMapInterface $entity */
     $entity = $this->entity;

     foreach ($entity->get('map') as $id => $query) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/graphql/src/EventSubscriber/VoyagerPageDisplayVariantSubscriber.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Disables any display variant on the voyager page.
    *
-   * @param \Drupal\Core\Render\PageDisplayVariantSelectionEvent $event
+   * @param PageDisplayVariantSelectionEvent $event
    *   The event to process.
    */
   public function onSelectPageDisplayVariant(PageDisplayVariantSelectionEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


63) modules/contrib/graphql/src/EventSubscriber/SubrequestSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Handle kernel request events.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The kernel event object.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     $request = $event->getRequest();
     if ($request->attributes->has('_graphql_subrequest')) {
       $request->attributes->set('_graphql_controller', $request->attributes->get('_controller'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


64) modules/contrib/graphql/src/EventSubscriber/ExplorerPageDisplayVariantSubscriber.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Disables any display variant on the explorer page.
    *
-   * @param \Drupal\Core\Render\PageDisplayVariantSelectionEvent $event
+   * @param PageDisplayVariantSelectionEvent $event
    *   The event to process.
    */
   public function onSelectPageDisplayVariant(PageDisplayVariantSelectionEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


65) modules/contrib/graphql/src/Controller/VoyagerController.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The introspection service.
    *
-   * @var \Drupal\graphql\GraphQL\Utility\Introspection
+   * @var Introspection
    */
   protected $introspection;

@@ @@
   /**
    * VoyagerController constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Utility\Introspection $introspection
+   * @param Introspection $introspection
    *   The GraphQL introspection service.
    */
   public function __construct(Introspection $introspection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


66) modules/contrib/graphql/src/Controller/SubrequestExtractionController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The symfony request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * SubrequestExtractionController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The rewnderer service.
    */
   public function __construct(RequestStack $requestStack, LanguageManagerInterface $languageManager, RendererInterface $renderer) {
@@ @@
   /**
    * Extracts the sub-request callback response.
    *
-   * @return \Drupal\graphql\GraphQL\Buffers\SubRequestResponse
+   * @return SubRequestResponse
    *   The sub-request response object.
    */
   public function extract() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/graphql/src/Controller/SchemaOverviewController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The schema plugin manager service.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * SchemaOverviewController constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler srevice.
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The schema plugin manager service.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, SchemaPluginManager $schemaManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


68) modules/contrib/graphql/src/Controller/RequestController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Controller;

+use GraphQL\Server\OperationParams;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\graphql\GraphQL\Execution\QueryProcessor;
@@ @@
   /**
    * The query processor.
    *
-   * @var \Drupal\graphql\GraphQL\Execution\QueryProcessor
+   * @var QueryProcessor
    */
   protected $processor;

@@ @@
   /**
    * RequestController constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\QueryProcessor $processor
+   * @param QueryProcessor $processor
    *   The query processor.
    * @param array $parameters
    *   The service configuration parameters.
@@ @@
    *
    * @param string $schema
    *   The name of the schema.
-   * @param \GraphQL\Server\OperationParams|\GraphQL\Server\OperationParams[] $operations
+   * @param OperationParams|OperationParams[] $operations
    *   The graphql operation(s) to execute.
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
+   * @return CacheableJsonResponse
    *   The JSON formatted response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function handleRequest($schema, $operations) {
     if (is_array($operations)) {
@@ @@
    * @param $operations
    * @param array $globals
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @return CacheableJsonResponse
+   * @throws PluginException
    */
   protected function handleSingle($schema, $operations) {
     $result = $this->processor->processQuery($schema, $operations);
@@ @@
    * @param $operations
    * @param array $globals
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @return CacheableJsonResponse
+   * @throws PluginException
    */
   protected function handleBatch($schema, $operations) {
     $result = $this->processor->processQuery($schema, $operations);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


69) modules/contrib/graphql/src/Controller/QueryMapListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Controller;

+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\field\FieldConfigInterface $entity */
+    /** @var FieldConfigInterface $entity */
     $operations = parent::getDefaultOperations($entity);

     $operations['inspect'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/graphql/src/Controller/ExplorerController.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The URL generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * The introspection service.
    *
-   * @var \Drupal\graphql\GraphQL\Utility\Introspection
+   * @var Introspection
    */
   protected $introspection;

@@ @@
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * ExplorerController constructor.
    *
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $urlGenerator
+   * @param UrlGeneratorInterface $urlGenerator
    *   The url generator service.
-   * @param \Drupal\graphql\GraphQL\Utility\Introspection $introspection
+   * @param Introspection $introspection
    *   The introspection service.
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $pluginManager
+   * @param SchemaPluginManager $pluginManager
    *   The schema plugin manager.
    */
   public function __construct(UrlGeneratorInterface $urlGenerator, Introspection $introspection, SchemaPluginManager $pluginManager) {
@@ @@
    *
    * @param string $schema
    *   The name of the schema.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return array The render array.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


71) modules/contrib/graphql/src/Config/GraphQLConfigOverrides.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The config storage service.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $baseStorage;

@@ @@
   /**
    * The negotiator manager service.
    *
-   * @var \Drupal\language\LanguageNegotiationMethodManager|null
+   * @var LanguageNegotiationMethodManager|null
    */
   protected $negotiatorManager;

@@ @@
   /**
    * GraphQLConfigOverrides constructor.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The config storage service.
-   * @param \Drupal\language\LanguageNegotiationMethodManager|null $negotiatorManager
+   * @param LanguageNegotiationMethodManager|null $negotiatorManager
    */
   public function __construct(StorageInterface $storage, LanguageNegotiationMethodManager $negotiatorManager = NULL) {
     $this->baseStorage = $storage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


72) modules/contrib/graphql/src/Annotation/GraphQLSchema.php:40

    ---------- begin diff ----------
@@ @@
    * @param mixed $values
    *   The plugin annotation values.
    *
-   * @throws \Doctrine\Common\Annotations\AnnotationException
+   * @throws AnnotationException
    *   In case of missing required values.
    */
   public function __construct($values) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


73) modules/contrib/graphql/src/Annotation/GraphQLAnnotationBase.php:95

    ---------- begin diff ----------
@@ @@
    * @param $values
    *   The plugin annotation values.
    *
-   * @throws \Doctrine\Common\Annotations\AnnotationException
+   * @throws AnnotationException
    *   In case of missing required annotation values.
    */
   public function __construct($values) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


74) modules/contrib/graphql/src/Access/QueryAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Access;

+use Drupal\Core\Access\AccessResultInterface;
+use GraphQL\Server\OperationParams;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * QueryAccessCheck constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(RequestStack $requestStack) {
@@ @@
   /**
    * Checks access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account) {
@@ @@
     }

     $request = $this->requestStack->getCurrentRequest();
-    /** @var \GraphQL\Server\OperationParams[] $operations */
+    /** @var OperationParams[] $operations */
     if (!$operations = $request->attributes->get('operations', [])) {
       return AccessResult::forbidden();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


75) modules/contrib/graphql/modules/graphql_core/tests/src/Traits/RevisionsTestTrait.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a new, unpublished draft of given node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    */
   protected function getNewDraft(NodeInterface $node) {
     $node->setNewRevision();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


76) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Routing/RouteTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql_core\Kernel\Routing;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\GeneratedUrl;
 use Drupal\path_alias\AliasManagerInterface;
 use Drupal\Core\Routing\UrlGeneratorInterface;
@@ @@
  */
 class RouteTest extends GraphQLCoreTestBase {

+  use ProphecyTrait;
   public static $modules = [
     'graphql_context_test',
   ];
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $aliasManager = $this->prophesize(AliasManagerInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Routing/InternalRequestTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Routing/ExternalRequestTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql_core\Kernel\Routing;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\graphql_core\Kernel\GraphQLCoreTestBase;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Psr7\Response;
@@ @@
  */
 class ExternalRequestTest extends GraphQLCoreTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Menu/MenuTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql_core\Kernel\Menu;

+use Drupal\Core\Menu\MenuLinkManagerInterface;
+use Drupal\Core\Menu\MenuTreeStorageInterface;
+use Drupal\Core\Menu\MenuLinkTreeInterface;
+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Drupal\Core\Menu\MenuTreeParameters;
 use Drupal\menu_link_content\Entity\MenuLinkContent;
 use Drupal\Tests\graphql_core\Kernel\GraphQLCoreTestBase;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('menu_link_content');
     $this->installConfig('menu_link_content');
@@ @@

     $externalLink->save();

-    /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menuLinkManager */
+    /** @var MenuLinkManagerInterface $menuLinkManager */
     $menuLinkManager = $this->container->get('plugin.manager.menu.link');
     $menuLinkManager->rebuild();
   }
@@ @@
    * Test if the test setup itself is successful.
    */
   public function testTestSetup() {
-    /** @var \Drupal\Core\Menu\MenuTreeStorageInterface $menuStorage */
+    /** @var MenuTreeStorageInterface $menuStorage */
     $menuStorage = $this->container->get('entity_type.manager')->getStorage('menu');
     $menu = $menuStorage->load('test');
     $this->assertIsObject($menu);

-    /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menuTree */
+    /** @var MenuLinkTreeInterface $menuTree */
     $menuTree = $this->container->get('menu.link_tree');
     $this->assertEquals(count($menuTree->load('test', new MenuTreeParameters())), 3);

-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $httpKernel */
+    /** @var HttpKernelInterface $httpKernel */
     $httpKernel = $this->container->get('http_kernel');

     $this->assertEquals($httpKernel->handle(Request::create('/graphql/test/accessible'))->getStatusCode(), 200);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Languages/LanguageTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['language']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Images/ImageFieldTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('image');
     $this->installSchema('file', 'file_usage');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/GraphQLCoreTestBase.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // User entity schema is required for the currentUserContext field.
     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/GraphQLContentTestBase.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['node', 'filter', 'text']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/EntityQuery/EntityQueryTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->createContentType(['type' => 'a']);
     $this->createContentType(['type' => 'b']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


85) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/EntityMutation/EntityMutationTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->mockInputType('node_input', [
       'name' => 'NodeInput',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


86) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Entity/EntityRevisionsTest.php:15

    ---------- begin diff ----------
@@ @@
    * Regression test for unhandled logic exceptions.
    *
    * Leaking cache metadata.
+   * @doesNotPerformAssertions
    */
   public function testNodeContext() {
     $node = Node::create([
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


87) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Entity/EntityFieldValueTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }

@@ @@
     $node = $this->createNode($values + $actualFieldValues);

     // Workaround for public file urls.
-    $expectedFieldValues['fieldFile'][0]['entity']['url'] = file_create_url($this->testFile->getFileUri());
-    $expectedFieldValues['fieldFile'][1]['entity']['url'] = file_create_url($this->testImage->getFileUri());
-    $expectedFieldValues['fieldImage'][0]['entity']['url'] = file_create_url($this->testFile->getFileUri());
-    $expectedFieldValues['fieldImage'][1]['entity']['url'] = file_create_url($this->testImage->getFileUri());
+    $expectedFieldValues['fieldFile'][0]['entity']['url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($this->testFile->getFileUri());
+    $expectedFieldValues['fieldFile'][1]['entity']['url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($this->testImage->getFileUri());
+    $expectedFieldValues['fieldImage'][0]['entity']['url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($this->testFile->getFileUri());
+    $expectedFieldValues['fieldImage'][1]['entity']['url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($this->testImage->getFileUri());

     $metadata = $this->defaultCacheMetaData();
     $metadata->addCacheTags([
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


88) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Entity/EntityByIdTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql_core\Kernel\Entity;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Tests\graphql_core\Kernel\GraphQLContentTestBase;

 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $languageStorage */
+    /** @var ConfigEntityStorageInterface $languageStorage */
     $languageStorage = $this->container->get('entity_type.manager')->getStorage('configurable_language');

     $language = $languageStorage->create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


89) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Entity/BundleLessEntityTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     FieldStorageConfig::create([
       'field_name' => 'field_test',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


90) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Context/NodeContextTest.php:15

    ---------- begin diff ----------
@@ @@
    * Regression test for unhandled logic exceptions.
    *
    * Leaking cache metadata.
+   * @doesNotPerformAssertions
    */
   public function testNodeContext() {
     $nodeId = Node::create([
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


91) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Breadcrumbs/BreadcrumbsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql_core\Kernel\Breadcrumbs;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Routing\RouteMatch;
 use Drupal\Core\Breadcrumb\Breadcrumb;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
@@ @@
  */
 class BreadcrumbsTest extends GraphQLCoreTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $breadcrumbManager = $this->prophesize('Drupal\Core\Breadcrumb\BreadcrumbManager');
     $breadcrumbManager->build(Argument::any())
       ->will(function ($args) {
-        /** @var \Drupal\Core\Routing\RouteMatch $routeMatch */
+        /** @var RouteMatch $routeMatch */
         $routeMatch = $args[0];
         $breadcrumb = new Breadcrumb();
         if ($routeMatch->getRouteName() == 'graphql_breadcrumbs_test.test') {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


92) modules/contrib/graphql/modules/graphql_core/tests/src/Kernel/Blocks/BlockTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql_core\Kernel\Blocks;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Extension\ThemeInstallerInterface;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
@@ @@
  * @group graphql_core
  */
 class BlockTest extends GraphQLCoreTestBase {
+  use ProphecyTrait;
   use BlockCreationTrait;

   /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\Core\Extension\ThemeInstallerInterface $themeInstaller */
+    /** @var ThemeInstallerInterface $themeInstaller */
     $themeInstaller = $this->container->get('theme_installer');
     $themeInstaller->install(['stark']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


93) modules/contrib/graphql/modules/graphql_core/tests/modules/graphql_context_test/src/ContextProvider/RouteNameContext.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The context definition.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextDefinition
+   * @var ContextDefinition
    */
   protected $contextDefinition;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


94) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/UpdateEntityBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\GraphQL\Mutations\Entity;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer) {
@@ @@
       $bundleName = $this->pluginDefinition['entity_bundle'];
       $storage = $this->entityTypeManager->getStorage($entityTypeId);

-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if (!$entity = $storage->load($args['id'])) {
         return new EntityCrudOutputWrapper(NULL, NULL, [
           $this->t('The requested @bundle could not be loaded.', ['@bundle' => $bundleName]),
@@ @@
    *   The parent value.
    * @param array $args
    *   The entity values provided through the resolver args.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


95) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/DeleteEntityBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\GraphQL\Mutations\Entity;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer) {
@@ @@
       $entityTypeId = $this->pluginDefinition['entity_type'];
       $storage = $this->entityTypeManager->getStorage($entityTypeId);

-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if (!$entity = $storage->load($args['id'])) {
         return new EntityCrudOutputWrapper(NULL, NULL, [
           $this->t('The requested entity could not be loaded.'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


96) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/CreateEntityBase.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer) {
@@ @@
    *   The parent value.
    * @param array $args
    *   The entity values provided through the resolver args.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return array
@@ @@
    * transport possible error messages and constraint violations after applying
    * some access checks and input validation.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The created entity.
    * @param array $args
    *   The arguments array.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


97) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Translate.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


98) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/RouteEntity.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    */
   public function __construct(
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to resolve.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url of the entity to resolve.
    * @param array $args
    *   The field arguments array.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Generator
@@ @@
   /**
    * Resolves the entity translation from the given url context.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to resolve.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url of the entity to resolve.
    * @param array $args
    *   The field arguments array.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Iterator
@@ @@
   /**
    * m
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url of the entity to resolve.
    * @param array $args
    *   The field arguments array.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Generator
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


99) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Route.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\Routing;

+use Drupal\language\LanguageNegotiator;
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Path\PathValidatorInterface;
 use Drupal\Core\PathProcessor\InboundPathProcessorInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The path validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
   /**
    * The language negotiator service.
    *
-   * @var \Drupal\language\LanguageNegotiator
+   * @var LanguageNegotiator
    */
   protected $languageNegotiator;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Path\PathValidatorInterface $pathValidator
+   * @param PathValidatorInterface $pathValidator
    *   The path validator service.
-   * @param \Drupal\language\LanguageNegotiator|null $languageNegotiator
+   * @param LanguageNegotiator|null $languageNegotiator
    *   The language negotiator.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    * @param \Drupal\redirect\RedirectRepository $redirectRepository
    *   The redirect repository, if redirect module is active.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


100) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/InternalRequest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The http kernel service.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The subrequest buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer
+   * @var SubRequestBuffer
    */
   protected $subRequestBuffer;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer $subRequestBuffer
+   * @param SubRequestBuffer $subRequestBuffer
    *   The sub-request buffer service.
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $httpKernel
+   * @param HttpKernelInterface $httpKernel
    *   The http kernel.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(
@@ @@
       });

       return function ($value, array $args, ResolveContext $context, ResolveInfo $info) use ($resolve) {
-        /** @var \Drupal\graphql\GraphQL\Cache\CacheableValue $response */
+        /** @var CacheableValue $response */
         $response = $resolve();
         yield new CacheableValue($response->getValue(), [$response]);
       };
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


101) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/Alias.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Instance of an alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\path_alias\AliasManagerInterface $aliasManager
+   * @param AliasManagerInterface $aliasManager
    *   The alias manager service
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


102) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/ExternalUrl/ExternalRequest.php:24

    ---------- begin diff ----------
@@ @@
   use DependencySerializationTrait;

   /**
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   The http client service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


103) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuLinks.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The menu link tree.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuLinkTree;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menuLinkTree
+   * @param MenuLinkTreeInterface $menuLinkTree
    *   The menu link tree service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, MenuLinkTreeInterface $menuLinkTree) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


104) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuByName.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


105) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/AvailableLanguages.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, LanguageManagerInterface $languageManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


106) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinks.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The subrequest buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer
+   * @var SubRequestBuffer
    */
   protected $subRequestBuffer;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


107) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkUrl.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\LanguageSwitch;

+use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Url;
 use Drupal\graphql\GraphQL\Execution\ResolveContext;
 use Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase;
@@ @@
    * {@inheritdoc}
    */
   protected function resolveValues($value, array $args, ResolveContext $context, ResolveInfo $info) {
-    /** @var \Drupal\Core\Language\LanguageInterface $language */
+    /** @var LanguageInterface $language */
     $language = $value['link']['language'];

-    /** @var \Drupal\Core\Url $url */
+    /** @var Url $url */
     $url = $value['link']['url'];
     $url = Url::fromRoute($url->getRouteName(), $url->getRouteParameters(), [
       'language' => $language,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


108) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkLanguage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\LanguageSwitch;

+use Drupal\Core\Language\LanguageInterface;
 use Drupal\graphql\GraphQL\Execution\ResolveContext;
 use Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase;
 use GraphQL\Type\Definition\ResolveInfo;
@@ @@
    * {@inheritdoc}
    */
   protected function resolveValues($value, array $args, ResolveContext $context, ResolveInfo $info) {
-    /** @var \Drupal\Core\Language\LanguageInterface $language */
+    /** @var LanguageInterface $language */
     $language = $value['link']['language'];
     yield $language;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


109) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkActive.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\LanguageSwitch;

+use Drupal\Core\Language\LanguageInterface;
 use Drupal\graphql\GraphQL\Execution\ResolveContext;
 use Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase;
 use GraphQL\Type\Definition\ResolveInfo;
@@ @@
    * {@inheritdoc}
    */
   protected function resolveValues($value, array $args, ResolveContext $context, ResolveInfo $info) {
-    /** @var \Drupal\Core\Language\LanguageInterface $context */
+    /** @var LanguageInterface $context */
     $context = $value['context'];
-    /** @var \Drupal\Core\Language\LanguageInterface $language */
+    /** @var LanguageInterface $language */
     $language = $value['link']['language'];

     // Check if the link's language code matches the language from the current
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


110) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/File/FileUrl.php:24

    ---------- begin diff ----------
@@ @@
    */
   public function resolveValues($value, array $args, ResolveContext $context, ResolveInfo $info) {
     if ($value instanceof FileInterface) {
-      yield file_create_url($value->getFileUri());
+      yield \Drupal::service('file_url_generator')->generateAbsoluteString($value->getFileUri());
     }
   }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


111) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQueryEntities.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    */
   public function __construct(
@@ @@
    *   The query context.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Closure
@@ @@
    *   The query context.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Generator
@@ @@
    *   The query context.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Generator
@@ @@
   protected function resolveEntities(array $entities, $metadata, array $args, ResolveContext $context, ResolveInfo $info) {
     $language = $this->negotiateLanguage($metadata, $args, $context, $info);

-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     foreach ($entities as $entity) {
       // Translate the entity if it is translatable and a language was given.
       if ($language && $entity instanceof TranslatableInterface && $entity->isTranslatable()) {
@@ @@
    *   The query context.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


112) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQuery.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\EntityQuery;

+use Drupal\Core\Entity\Query\ConditionInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    *   The parent value.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return null|string
@@ @@
    *   The parent entity type.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface|null
+   * @return QueryInterface|null
    *   The entity query object.
    */
   protected function getQuery($value, array $args, ResolveContext $context, ResolveInfo $info) {
@@ @@
    *   The parent entity type.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface|null
+   * @return QueryInterface|null
    *   The entity query object.
    */
   protected function getBaseQuery($value, array $args, ResolveContext $context, ResolveInfo $info) {
@@ @@
    *   The parent value.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return mixed
@@ @@
   /**
    * Apply the specified revision filtering mode to the query.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The entity query object.
    * @param mixed $mode
    *   The revision query mode.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The entity query object.
    */
   protected function applyRevisionsMode(QueryInterface $query, $mode) {
@@ @@
   /**
    * Apply the specified sort directives to the query.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The entity query object.
    * @param mixed $sort
    *   The sort definitions from the field arguments.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The entity query object.
    */
   protected function applySort(QueryInterface $query, $sort) {
@@ @@
    * Recursively picks up all filters and aggregates them into condition groups
    * according to the nested structure of the filter argument.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The entity query object.
    * @param mixed $filter
    *   The filter definitions from the field arguments.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The entity query object.
    */
   protected function applyFilter(QueryInterface $query, $filter) {
@@ @@
   /**
    * Recursively builds the filter condition groups.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The entity query object.
    * @param array $filter
    *   The filter definitions from the field arguments.
    *
-   * @return \Drupal\Core\Entity\Query\ConditionInterface
+   * @return ConditionInterface
    *   The generated condition group according to the given filter definitions.
    *
-   * @throws \GraphQL\Error\Error
+   * @throws Error
    *   If the given operator and value for a filter are invalid.
    */
   protected function buildFilterConditions(QueryInterface $query, array $filter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


113) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageUrl.php:26

    ---------- begin diff ----------
@@ @@
    */
   protected function resolveValues($value, array $args, ResolveContext $context, ResolveInfo $info) {
     if ($value instanceof ImageItem && $value->entity && $value->entity->access('view')) {
-      yield file_create_url($value->entity->getFileUri());
+      yield \Drupal::service('file_url_generator')->generateAbsoluteString($value->entity->getFileUri());
     }
   }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


114) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageDerivative.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Image\ImageFactory $imageFactory
+   * @param ImageFactory $imageFactory
    *   The image factory service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, ImageFactory $imageFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


115) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityTranslations.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


116) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityTranslation.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityRepositoryInterface $entityRepository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


117) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRevisionById.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\Entity;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


118) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRendered.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\Entity;

+use GraphQL\Executor\ExecutionResult;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(
@@ @@
       $view = $builder->view($value, $mode, $language);

       $context = new RenderContext();
-      /** @var \GraphQL\Executor\ExecutionResult|\GraphQL\Executor\ExecutionResult[] $result */
+      /** @var ExecutionResult|ExecutionResult[] $result */
       $result = $this->renderer->executeInRenderContext($context, function() use ($view) {
         return $this->renderer->render($view);
       });
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


119) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityQueryExclusive.php:62

    ---------- begin diff ----------
@@ @@
   }

   /**
-   * Apply the specified bundle filtering mode to the query.
-   *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
-   *   The entity query object.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $value
-   *   The parent entity object.
-   * @param mixed $mode
-   *   The revision query mode.
-   *
-   * @return \Drupal\Core\Entity\Query\QueryInterface The entity query object.
-   * The entity query object.
-   */
+  * Apply the specified bundle filtering mode to the query.
+  *
+   * @param QueryInterface $query
+  *   The entity query object.
+   * @param ContentEntityInterface $value
+  *   The parent entity object.
+  * @param mixed $mode
+  *   The revision query mode.
+  *
+   * @return QueryInterface The entity query object.
+  The entity query object.
+  */
   protected function applyBundleMode(QueryInterface $query, ContentEntityInterface $value, $mode) {
     if ($mode === 'same') {
       $type = $value->getEntityType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


120) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\Entity;

+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\graphql\GraphQL\Cache\CacheableValue;
 use Drupal\graphql\GraphQL\Execution\ResolveContext;
@@ @@
       $name = $definition['field'];

       if ($value->hasField($name)) {
-        /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+        /** @var FieldItemListInterface $items */
         $items = $value->get($name);
         $access = $items->access('view', NULL, TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


121) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityById.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\Entity;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    */
   public function __construct(
@@ @@
         yield (new CacheableValue(NULL))->addCacheTags($entityType->getListCacheTags());
       }
       else {
-        /** @var \Drupal\Core\Entity\EntityInterface $entity */
+        /** @var EntityInterface $entity */
         $access = $entity->access('view', NULL, TRUE);

         if ($access->isAllowed()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


122) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Context/Context.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The subrequest buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer
+   * @var SubRequestBuffer
    */
   protected $subRequestBuffer;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer $subRequestBuffer
+   * @param SubRequestBuffer $subRequestBuffer
    *   The sub-request buffer service.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $contextRepository
+   * @param ContextRepositoryInterface $contextRepository
    *   The context repository service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


123) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Breadcrumbs/Breadcrumbs.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\Breadcrumbs;

+use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
 use Drupal\Core\Breadcrumb\BreadcrumbManager;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
   /**
    * The subrequest buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer
+   * @var SubRequestBuffer
    */
   protected $subRequestBuffer;

@@ @@
   /**
    * The breadcrumb manager service.
    *
-   * @var \Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface
+   * @var BreadcrumbBuilderInterface
    */
   protected $breadcrumbManager;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer $subRequestBuffer
+   * @param SubRequestBuffer $subRequestBuffer
    *   The sub-request buffer service.
-   * @param \Drupal\Core\Breadcrumb\BreadcrumbManager $breadcrumbManager
+   * @param BreadcrumbManager $breadcrumbManager
    *   The breadcrumb manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The current route match.
    */
   public function __construct(
@@ @@
       });

       return function ($value, array $args, ResolveContext $context, ResolveInfo $info) use ($resolve) {
-        /** @var \Drupal\graphql\GraphQL\Cache\CacheableValue $response */
+        /** @var CacheableValue $response */
         $response = $resolve();
         $links = $response->getValue();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


124) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Fields/Blocks/BlocksByRegion.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The subrequest buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer
+   * @var SubRequestBuffer
    */
   protected $subRequestBuffer;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer $subRequestBuffer
+   * @param SubRequestBuffer $subRequestBuffer
    *   The sub-request buffer service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   The theme manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
    */
   public function __construct(
@@ @@
       });

       return function ($value, array $args, ResolveContext $context, ResolveInfo $info) use ($resolve) {
-        /** @var \Drupal\graphql\GraphQL\Cache\CacheableValue $response */
+        /** @var CacheableValue $response */
         $response = $resolve();
         $blocks = array_map(function (Block $block) {
           $plugin = $block->getPlugin();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


125) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Enums/Languages/LanguageId.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, LanguageManagerInterface $languageManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


126) modules/contrib/graphql/modules/graphql_core/src/Plugin/GraphQL/Enums/Images/ImageStyleId.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


127) modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Scalars/TypedDataPrimitiveFallback.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * TypedDataPrimitiveFallback constructor.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager.
    */
   public function __construct(TypedDataManagerInterface $typedDataManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


128) modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityRevisionByIdDeriver.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EntityRevisionByIdDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


129) modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityRenderedDeriver.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * EntityRenderedDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepository
+   * @param EntityDisplayRepositoryInterface $entityDisplayRepository
    *   The entity display repository service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityDisplayRepositoryInterface $entityDisplayRepository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


130) modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityReferenceReverseDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\Deriver\Fields;

+use Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * RawValueFieldItemDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager service.
    */
   public function __construct(
@@ @@
           'schema_cache_max_age' => $maxAge,
         ] + $basePluginDefinition;

-        /** @var \Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface $definition */
+        /** @var EntityDataDefinitionInterface $definition */
         $this->derivatives["$entityTypeId-$fieldName"] = $derivative;
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


131) modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityReferenceQueryDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_core\Plugin\Deriver\Fields;

+use Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * RawValueFieldItemDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager service.
    */
   public function __construct(
@@ @@
           'schema_cache_max_age' => $maxAge,
         ] + $basePluginDefinition;

-        /** @var \Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface $definition */
+        /** @var EntityDataDefinitionInterface $definition */
         $this->derivatives["$entityTypeId-$fieldName"] = $derivative;
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


132) modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityQueryDeriver.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManager
+   * @var TypedDataManager
    */
   protected $typedDataManager;

@@ @@
   /**
    * EntityQueryDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\TypedData\TypedDataManager $typedDataManager
+   * @param TypedDataManager $typedDataManager
    *   The typed data manager service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


133) modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityFieldItemDeriver.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * Extracts the data type of a property's data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $propertyDefinition
+   * @param DataDefinitionInterface $propertyDefinition
    *   The property's data definition.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


134) modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/EntityByIdDeriver.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EntityByIdDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


135) modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Fields/ContextDeriver.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * ContextDeriver constructor.
    *
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $contextRepository
+   * @param ContextRepositoryInterface $contextRepository
    *   The context repository service.
    */
   public function __construct(ContextRepositoryInterface $contextRepository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


136) modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/Enums/DisplayModeIdDeriver.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * DisplayModeIdDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


137) modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/EntityTypeDeriverBase.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Bundle info manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * EntityTypeDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Instance of an entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   Instance of the entity bundle info service.
    */
   public function __construct(
@@ @@
   /**
    * Retrieve the interfaces that the entity type should implement.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $type
+   * @param EntityTypeInterface $type
    *   The entity type to retrieve the interfaces for.
    * @param array $basePluginDefinition
    *   The base plugin definition array.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


138) modules/contrib/graphql/modules/graphql_core/src/Plugin/Deriver/EntityFieldDeriverBase.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Provides plugin definition values from fields.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   Field definition object.
    * @param array $basePluginDefinition
    *   Base definition array.
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;

@@ @@
   /**
    * RawValueFieldItemDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The bundle info service.
    * @param string $basePluginId
    *   The base plugin id.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


139) modules/contrib/graphql/modules/graphql_core/src/GraphQL/EntityCrudOutputWrapper.php:8

    ---------- begin diff ----------
@@ @@
   /**
    * The create entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $entity;

@@ @@
   /**
    * The constraint validation list.
    *
-   * @var \Symfony\Component\Validator\ConstraintViolationListInterface|null
+   * @var ConstraintViolationListInterface|null
    */
   protected $violations;

@@ @@
   /**
    * CreateEntityOutputWrapper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity object that has been created or NULL if creation failed.
-   * @param \Symfony\Component\Validator\ConstraintViolationListInterface|null $violations
+   * @param ConstraintViolationListInterface|null $violations
    *   The validation errors that occurred during creation or NULL if validation
    *   succeeded.
    * @param array|null $errors
@@ @@
   /**
    * Returns the entity that was created.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The created entity object or NULL if creation failed.
    */
   public function getEntity() {
@@ @@
   /**
    * Returns the constraint violations.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationListInterface|null
+   * @return ConstraintViolationListInterface|null
    *   The constraint validations or NULL if validation passed.
    */
   public function getViolations() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


140) modules/contrib/graphql/graphql.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ConfigFactoryInterface;
 /**
  * Implements hook_requirements().
  */
@@ @@
  */
 function graphql_uninstall() {
   // Remove the config keys set in GraphQLConfigOverrides::loadOverrides().
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+  /** @var ConfigFactoryInterface $configFactory */
   $configFactory = \Drupal::getContainer()->get('config.factory');
   $languageTypes = $configFactory->getEditable('language.types');
   $negotiation = $languageTypes->get('negotiation');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 140 files have been changed by Rector                                     

