modules/contrib/subgroup/src/Access/InheritedGroupPermissionCalculator.php
modules/contrib/subgroup/src/Entity/GroupSubgroupHandler.php
modules/contrib/subgroup/src/Entity/GroupTypeSubgroupHandler.php
modules/contrib/subgroup/src/Entity/RoleInheritance.php
modules/contrib/subgroup/src/Entity/RoleInheritanceAccessControlHandler.php
modules/contrib/subgroup/src/Entity/RoleInheritanceInterface.php
modules/contrib/subgroup/src/Entity/RoleInheritanceStorage.php
modules/contrib/subgroup/src/Entity/RoleInheritanceStorageInterface.php
modules/contrib/subgroup/src/Entity/SubgroupHandlerBase.php
modules/contrib/subgroup/src/Entity/SubgroupHandlerInterface.php
modules/contrib/subgroup/src/Event/GroupLeafEvent.php
modules/contrib/subgroup/src/Event/GroupTypeLeafEvent.php
modules/contrib/subgroup/src/Event/LeafEvents.php
modules/contrib/subgroup/src/EventSubscriber/GroupTypeLeafSubscriber.php
modules/contrib/subgroup/src/EventSubscriber/TreeCacheTagInvalidator.php
modules/contrib/subgroup/src/Form/SubgroupSettingsForm.php
modules/contrib/subgroup/src/GroupLeaf.php
modules/contrib/subgroup/src/GroupTypeLeaf.php
modules/contrib/subgroup/src/InvalidInheritanceException.php
modules/contrib/subgroup/src/InvalidLeafException.php
modules/contrib/subgroup/src/InvalidParentException.php
modules/contrib/subgroup/src/InvalidRootException.php
modules/contrib/subgroup/src/LeafInterface.php
modules/contrib/subgroup/src/MalformedLeafException.php
modules/contrib/subgroup/src/Plugin/GroupContentEnabler/Subgroup.php
modules/contrib/subgroup/src/Plugin/GroupContentEnabler/SubgroupDeriver.php
modules/contrib/subgroup/src/Plugin/SubgroupAccessControlHandler.php
modules/contrib/subgroup/src/Plugin/SubgroupPermissionProvider.php
modules/contrib/subgroup/src/SubgroupFieldManager.php
modules/contrib/subgroup/src/SubgroupFieldManagerInterface.php
modules/contrib/subgroup/subgroup.module
modules/contrib/subgroup/tests/modules/subgroup_test_events/src/EventSubscriber/LeafEventsSubscriber.php
modules/contrib/subgroup/tests/src/Kernel/GroupContentDeleteTest.php
modules/contrib/subgroup/tests/src/Kernel/GroupContentInsertTest.php
modules/contrib/subgroup/tests/src/Kernel/GroupCreateTest.php
modules/contrib/subgroup/tests/src/Kernel/GroupDeleteTest.php
modules/contrib/subgroup/tests/src/Kernel/GroupLeafTest.php
modules/contrib/subgroup/tests/src/Kernel/GroupSubgroupHandlerTest.php
modules/contrib/subgroup/tests/src/Kernel/GroupTypeDeleteTest.php
modules/contrib/subgroup/tests/src/Kernel/GroupTypeLeafImportTest.php
modules/contrib/subgroup/tests/src/Kernel/GroupTypeLeafTest.php
modules/contrib/subgroup/tests/src/Kernel/GroupTypeSubgroupHandlerTest.php
modules/contrib/subgroup/tests/src/Kernel/GroupViewTest.php
modules/contrib/subgroup/tests/src/Kernel/InheritedGroupPermissionCalculatorTest.php
modules/contrib/subgroup/tests/src/Kernel/LeafEventsTest.php
modules/contrib/subgroup/tests/src/Kernel/RoleInheritanceAccessControlHandlerTest.php
modules/contrib/subgroup/tests/src/Kernel/RoleInheritanceStorageTest.php
modules/contrib/subgroup/tests/src/Kernel/RoleInheritanceTest.php
modules/contrib/subgroup/tests/src/Kernel/SubgroupAccessControlHandlerTest.php
modules/contrib/subgroup/tests/src/Kernel/SubgroupEntityTypeAlterTest.php
modules/contrib/subgroup/tests/src/Kernel/SubgroupFieldManagerTest.php
modules/contrib/subgroup/tests/src/Kernel/SubgroupKernelTestBase.php
modules/contrib/subgroup/tests/src/Kernel/SubgroupPermissionProviderTest.php
modules/contrib/subgroup/tests/src/Unit/GroupTypeLeafSubscriberTest.php
modules/contrib/subgroup/tests/src/Unit/SubgroupHandlerBaseTest.php
modules/contrib/subgroup/tests/src/Unit/TreeCacheTagInvalidatorTest.php

44 files with changes
=====================

1) modules/contrib/subgroup/tests/src/Unit/TreeCacheTagInvalidatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\group\Entity\GroupInterface;
@@ @@
  */
 class TreeCacheTagInvalidatorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The event subscriber to test.
    *
-   * @var \Drupal\subgroup\EventSubscriber\TreeCacheTagInvalidator
+   * @var TreeCacheTagInvalidator
    */
   protected $eventSubscriber;

@@ @@
   /**
    * The entity type manager to use in testing.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityTypeManagerInterface|ProphecyInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The group subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var SubgroupHandlerInterface|ProphecyInterface
    */
   protected $groupSubgroupHandler;

@@ @@
   /**
    * The group type subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var SubgroupHandlerInterface|ProphecyInterface
    */
   protected $groupTypeSubgroupHandler;

@@ @@
   /**
    * The cache tags invalidator to use in testing.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var CacheTagsInvalidatorInterface|ProphecyInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->groupSubgroupHandler = $this->prophesize(SubgroupHandlerInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/subgroup/tests/src/Unit/SubgroupHandlerBaseTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
  */
 class SubgroupHandlerBaseTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The base subgroup handler.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerBase
+   * @var SubgroupHandlerBase
    */
   protected $subgroupHandler;

@@ @@
   /**
    * The entity to run tests on.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityInterface|ProphecyInterface
    */
   protected $entity;

@@ @@
   /**
    * The entity type to run tests on.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityTypeInterface|ProphecyInterface
    */
   protected $entityType;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entity = $this->prophesize(EntityInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/subgroup/tests/src/Unit/GroupTypeLeafSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\group\Entity\GroupContentTypeInterface;
 use Drupal\group\Entity\GroupTypeInterface;
@@ @@
  */
 class GroupTypeLeafSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The event subscriber to test.
    *
-   * @var \Drupal\subgroup\EventSubscriber\GroupTypeLeafSubscriber
+   * @var GroupTypeLeafSubscriber
    */
   protected $eventSubscriber;

@@ @@
   /**
    * The entity type manager to run tests on.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityTypeManagerInterface|ProphecyInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The subgroup handler for group types to run tests on.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var SubgroupHandlerInterface|ProphecyInterface
    */
   protected $subgroupHandler;

@@ @@
   /**
    * The group content enabler plugin manager to run tests on.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var GroupContentEnablerManagerInterface|ProphecyInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * The subgroup field manager to run tests on.
    *
-   * @var \Drupal\subgroup\SubgroupFieldManagerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var SubgroupFieldManagerInterface|ProphecyInterface
    */
   protected $fieldManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->subgroupHandler = $this->prophesize(SubgroupHandlerInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/subgroup/tests/src/Kernel/SubgroupPermissionProviderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\group\Plugin\GroupContentPermissionProvider;

 /**
@@ @@
     $group_type_1 = $this->createGroupType();
     $group_type_2 = $this->createGroupType();

-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($group_type_1);
     $group_type_handler->addLeaf($group_type_1, $group_type_2);

-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager */
+    /** @var GroupContentEnablerManagerInterface $plugin_manager */
     $plugin_manager = $this->container->get('plugin.manager.group_content_enabler');
     $plugin_id = 'subgroup:' . $group_type_2->id();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/subgroup/tests/src/Kernel/SubgroupKernelTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\group\Entity\Group;
+use Drupal\group\Entity\GroupType;
 use Drupal\group\Entity\GroupInterface;
 use Drupal\group\Entity\GroupTypeInterface;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
@@ @@
   /**
    * The group storage to use in testing.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $groupStorage;

@@ @@
   /**
    * The group type storage to use in testing.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $groupTypeStorage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('group');
@@ @@
   /**
    * Gets the current user so you can run some checks against them.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The current user.
    */
   protected function getCurrentUser() {
@@ @@
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\Group
+   * @return Group
    *   The created group entity.
    */
   protected function createGroup(array $values = []) {
@@ @@
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\GroupType
+   * @return GroupType
    *   The created group type entity.
    */
   protected function createGroupType(array $values = []) {
@@ @@
   /**
    * Writes the provided leaf data onto the group.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to write the data onto.
    * @param int $depth
    *   The depth.
@@ @@
   /**
    * Writes the provided leaf data onto the group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group type to write the data onto.
    * @param int $depth
    *   The depth.
@@ @@
   /**
    * Clears the leaf data from the group.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to clear the data from.
    */
   protected function clearGroupLeafData(GroupInterface $group) {
@@ @@
   /**
    * Clears the leaf data from the group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group type to clear the data from.
    */
   protected function clearGroupTypeLeafData(GroupTypeInterface $group_type) {
@@ @@
   /**
    * Toggles the tree leaf status of the group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group type to toggle the status for.
    * @param bool $is_tree
    *   Whether the group type acts as a tree leaf or not.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/subgroup/tests/src/Kernel/SubgroupFieldManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\SubgroupFieldManagerInterface;
+use Drupal\group\Entity\GroupTypeInterface;
 /**
  * Tests the Subgroup field manager.
  *
@@ @@
   /**
    * The subgroup field manager to test.
    *
-   * @var \Drupal\subgroup\SubgroupFieldManagerInterface
+   * @var SubgroupFieldManagerInterface
    */
   protected $fieldManager;

@@ @@
   /**
    * The group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupType;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->fieldManager = $this->container->get('subgroup.field_manager');
     $this->groupType = $this->createGroupType();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/subgroup/tests/src/Kernel/SubgroupAccessControlHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\group\Plugin\GroupContentAccessControlHandler;

 /**
@@ @@
     $group_type_1 = $this->createGroupType(['creator_membership' => FALSE]);
     $group_type_2 = $this->createGroupType(['creator_membership' => FALSE]);

-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($group_type_1);
     $group_type_handler->addLeaf($group_type_1, $group_type_2);

-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager */
+    /** @var GroupContentEnablerManagerInterface $plugin_manager */
     $plugin_manager = $this->container->get('plugin.manager.group_content_enabler');
     $plugin_id = 'subgroup:' . $group_type_2->id();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/subgroup/tests/src/Kernel/RoleInheritanceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\Entity\RoleInheritanceInterface;
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
 use Drupal\Core\Cache\Cache;

 /**
@@ @@
   /**
    * The role inheritance entity to run tests on.
    *
-   * @var \Drupal\subgroup\Entity\RoleInheritanceInterface
+   * @var RoleInheritanceInterface
    */
   protected $roleInheritance;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Set up two group types to form a tree.
@@ @@
     $foo = $this->createGroupType(['id' => 'foo']);
     $bar = $this->createGroupType(['id' => 'bar']);

-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($foo);
     $group_type_handler->addLeaf($foo, $bar);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/subgroup/tests/src/Kernel/RoleInheritanceStorageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\Entity\RoleInheritanceStorageInterface;
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\subgroup\Entity\RoleInheritanceInterface;
@@ @@
   /**
    * The role inheritance storage to run tests on.
    *
-   * @var \Drupal\subgroup\Entity\RoleInheritanceStorageInterface
+   * @var RoleInheritanceStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The root group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeRoot;

@@ @@
   /**
    * The leaf group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeLeaf;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Set up two group types to form a tree.
@@ @@
     $this->groupTypeRoot = $this->createGroupType(['id' => 'foo']);
     $this->groupTypeLeaf = $this->createGroupType(['id' => 'bar']);

-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($this->groupTypeRoot);
     $group_type_handler->addLeaf($this->groupTypeRoot, $this->groupTypeLeaf);
@@ @@
   public function testDifferentTreeException() {
     $baz = $this->createGroupType(['id' => 'baz']);

-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($baz);

@@ @@
   public function testNotVerticallyRelatedException() {
     $baz = $this->createGroupType(['id' => 'baz']);

-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->addLeaf($this->groupTypeRoot, $baz);

@@ @@
     $this->assertCount(1, $this->storage->loadMultiple());
     $this->assertInstanceOf(RoleInheritanceInterface::class, $this->storage->load('test'));

-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->removeLeaf($this->groupTypeLeaf);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/subgroup/tests/src/Kernel/RoleInheritanceAccessControlHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
+use Drupal\subgroup\Entity\RoleInheritanceInterface;
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
 use Drupal\Core\Access\AccessResultForbidden;

 /**
@@ @@
   /**
    * The access control handler to use in testing.
    *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $accessControlHandler;

@@ @@
   /**
    * The role inheritance entity to run tests on.
    *
-   * @var \Drupal\subgroup\Entity\RoleInheritanceInterface
+   * @var RoleInheritanceInterface
    */
   protected $roleInheritance;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->accessControlHandler = $this->entityTypeManager->getAccessControlHandler('subgroup_role_inheritance');
@@ @@
     $foo = $this->createGroupType(['id' => 'foo']);
     $bar = $this->createGroupType(['id' => 'bar']);

-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($foo);
     $group_type_handler->addLeaf($foo, $bar);
@@ @@
    * @covers ::access
    */
   public function testUpdateAccess() {
-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $access = $this->accessControlHandler->access($this->roleInheritance, 'update', NULL, TRUE);
     $this->assertInstanceOf(AccessResultForbidden::class, $access, 'Group create access check returned an AccessResultForbidden.');
     $this->assertEquals('Role inheritance entities may not be updated after creation.', $access->getReason());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/subgroup/tests/src/Kernel/LeafEventsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
 use Drupal\subgroup\Event\LeafEvents;

 /**
@@ @@
   public function testGroupUpdateEvents() {
     $group_type = $this->createGroupType();

-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $subgroup_handler->initTree($group_type);

     $group = $this->createGroup(['type' => $group_type->id()]);

-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group', 'subgroup');

     $GLOBALS['group_leaf_events'] = [];
@@ @@
   public function testGroupTypeUpdateEvents() {
     $group_type = $this->createGroupType();

-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');

     $GLOBALS['group_type_leaf_events'] = [];
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/subgroup/tests/src/Kernel/InheritedGroupPermissionCalculatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
+use Drupal\subgroup\Entity\GroupSubgroupHandler;
 /**
  * Tests that Subgroup properly hands out group permissions.
  *
@@ @@
   /**
    * The account to use in testing.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Set up some group types to form a tree.
@@ @@
     $gt2->getMemberRole()->grantPermission('view group')->save();
     $gt3->getMemberRole()->grantPermission('view group')->save();

-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($gt1);
     $group_type_handler->addLeaf($gt1, $gt2);
@@ @@
     $group_gt2 = $this->createGroup(['type' => 'gt2']);
     $group_gt1->addMember($this->account);

-    /** @var \Drupal\subgroup\Entity\GroupSubgroupHandler $group_handler */
+    /** @var GroupSubgroupHandler $group_handler */
     $group_handler = $this->entityTypeManager->getHandler('group', 'subgroup');
     $group_handler->initTree($group_gt1);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/subgroup/tests/src/Kernel/GroupViewTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
 use Drupal\views\Tests\ViewResultAssertionTrait;
 use Drupal\views\Views;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig('subgroup_test_views');
@@ @@
     $foo->getMemberRole()->grantPermission('view group')->save();
     $bar->getMemberRole()->grantPermission('view group')->save();

-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($foo);
     $group_type_handler->addLeaf($foo, $bar);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/subgroup/tests/src/Kernel/GroupTypeSubgroupHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
+use Drupal\group\Entity\Storage\GroupContentTypeStorageInterface;
 use Drupal\subgroup\InvalidLeafException;

 /**
@@ @@
   /**
    * The subgroup handler to run tests on.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;

@@ @@
   /**
    * The root group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeRoot;

@@ @@
   /**
    * The left child group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeChildLeft;

@@ @@
   /**
    * The middle child group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeChildMiddle;

@@ @@
   /**
    * The right child group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeChildRight;

@@ @@
   /**
    * The left grandchild group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeGrandchildLeft;

@@ @@
   /**
    * The right grandchild group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeGrandchildRight;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->subgroupHandler = $this->entityTypeManager->getHandler('group_type', 'subgroup');

@@ @@
    * @covers ::addLeaf
    */
   public function testAddLeafInstallsPlugin() {
-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager */
+    /** @var GroupContentEnablerManagerInterface $plugin_manager */
     $plugin_manager = $this->container->get('plugin.manager.group_content_enabler');

-    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+    /** @var GroupContentTypeStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('group_content_type');

     $this->assertNull($plugin_manager->getDefinition('subgroup:grandchild_middle', FALSE), 'No plugin exists yet before adding the group type as a leaf.');
@@ @@
     $this->subgroupHandler->addLeaf($this->groupTypeChildMiddle, $group_type);
     $this->subgroupHandler->removeLeaf($group_type);

-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager */
+    /** @var GroupContentEnablerManagerInterface $plugin_manager */
     $plugin_manager = $this->container->get('plugin.manager.group_content_enabler');

-    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+    /** @var GroupContentTypeStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('group_content_type');

     $this->assertNull($plugin_manager->getDefinition('subgroup:grandchild_middle', FALSE), 'No plugin exists any more after removing the group type as a leaf.');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/subgroup/tests/src/Kernel/GroupTypeLeafTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The group type leaf to run tests on.
    *
-   * @var \Drupal\subgroup\GroupTypeLeaf
+   * @var GroupTypeLeaf
    */
   protected $groupTypeLeaf;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $group_type = $this->createGroupType([
       'third_party_settings' => [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/subgroup/tests/src/Kernel/GroupTypeLeafImportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\Core\Site\Settings;

 /**
@@ @@
   /**
    * The content enabler plugin manager.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface
+   * @var GroupContentEnablerManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // The system.site key is required for import validation.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/subgroup/tests/src/Kernel/GroupTypeDeleteTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
 use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Entity\EntityStorageException;

@@ @@
   /**
    * The subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->subgroupHandler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
@@ @@
     $this->subgroupHandler->initTree($parent);
     $this->subgroupHandler->addLeaf($parent, $child);

-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $access = $parent->access('delete', NULL, TRUE);
     $this->assertInstanceOf(AccessResultForbidden::class, $access, 'Group type delete access check returned an AccessResultForbidden.');
     $this->assertEquals('Cannot delete a leaf that still has descendants.', $access->getReason());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/subgroup/tests/src/Kernel/GroupSubgroupHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group\Entity\GroupInterface;
 use Drupal\subgroup\InvalidLeafException;
 use Drupal\subgroup\InvalidParentException;
 use Drupal\subgroup\InvalidRootException;
@@ @@
   /**
    * The subgroup handler to run tests on.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;

@@ @@
   /**
    * The root group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeRoot;

@@ @@
   /**
    * The child group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeChild;

@@ @@
   /**
    * The grandchild group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeGrandchild;

@@ @@
   /**
    * The root group to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupRoot;

@@ @@
   /**
    * The left child group to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupChildLeft;

@@ @@
   /**
    * The middle child group to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupChildMiddle;

@@ @@
   /**
    * The right child group to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupChildRight;

@@ @@
   /**
    * The left grandchild group to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupGrandchildLeft;

@@ @@
   /**
    * The right grandchild group to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupGrandchildRight;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->subgroupHandler = $this->entityTypeManager->getHandler('group', 'subgroup');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/subgroup/tests/src/Kernel/GroupLeafTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The group leaf to run tests on.
    *
-   * @var \Drupal\subgroup\GroupLeaf
+   * @var GroupLeaf
    */
   protected $groupLeaf;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $group_type = $this->createGroupType();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/subgroup/tests/src/Kernel/GroupDeleteTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
 use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Entity\EntityStorageException;

@@ @@
   /**
    * The subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->subgroupHandler = $this->entityTypeManager->getHandler('group', 'subgroup');
@@ @@
     $foo->getMemberRole()->grantPermission('delete group')->save();
     $bar->getMemberRole()->grantPermission('delete group')->save();

-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($foo);
     $group_type_handler->addLeaf($foo, $bar);
@@ @@
     // Reload the parent from cache so that it knows it's a leaf.
     $access = $this->groupStorage->load($parent->id())->access('delete', NULL, TRUE);
     $this->assertInstanceOf(AccessResultForbidden::class, $access, 'Group delete access check returned an AccessResultForbidden.');
-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $this->assertEquals('Cannot delete a leaf that still has descendants.', $access->getReason());
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/subgroup/tests/src/Kernel/GroupCreateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
 use Drupal\Core\Access\AccessResultForbidden;

 /**
@@ @@
   /**
    * The access control handler to use in testing.
    *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $accessControlHandler;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->accessControlHandler = $this->entityTypeManager->getAccessControlHandler('group');
@@ @@
     // Grant create access for the current user.
     $this->setCurrentUser($this->createUser([], ['create foo group', 'create bar group']));

-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($foo);
     $group_type_handler->addLeaf($foo, $bar);
@@ @@
   public function testLeafCreateAccess() {
     $access = $this->accessControlHandler->createAccess('bar', NULL, [], TRUE);
     $this->assertInstanceOf(AccessResultForbidden::class, $access, 'Group create access check returned an AccessResultForbidden.');
-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $this->assertEquals('Cannot create a group globally if its group type is a non-root leaf of a tree.', $access->getReason());
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/subgroup/tests/src/Kernel/GroupContentInsertTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\group\Entity\Storage\GroupContentStorageInterface;
 /**
  * Tests that adding subgroup group content triggers leaf creation.
  *
@@ @@
   /**
    * The group subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $groupSubgroupHandler;

@@ @@
   /**
    * The group type subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $groupTypeSubgroupHandler;

@@ @@
   /**
    * The group content storage to use in testing.
    *
-   * @var \Drupal\group\Entity\Storage\GroupContentStorageInterface
+   * @var GroupContentStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->groupSubgroupHandler = $this->entityTypeManager->getHandler('group', 'subgroup');
     $this->groupTypeSubgroupHandler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/subgroup/tests/src/Kernel/GroupContentDeleteTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\subgroup\Kernel;

+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\group\Entity\Storage\GroupContentStorageInterface;
 use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Entity\EntityStorageException;

@@ @@
   /**
    * The subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;

@@ @@
   /**
    * The group content storage to use in testing.
    *
-   * @var \Drupal\group\Entity\Storage\GroupContentStorageInterface
+   * @var GroupContentStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->subgroupHandler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $this->storage = $this->entityTypeManager->getStorage('group_content');
@@ @@
     $group_content = $this->storage->createForEntityInGroup($group_child, $group_parent, 'subgroup:' . $group_type_child->id(), []);
     $this->storage->save($group_content);

-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $access = $group_content->access('delete', NULL, TRUE);
     $this->assertInstanceOf(AccessResultForbidden::class, $access, 'Group content delete access check returned an AccessResultForbidden.');
     $this->assertEquals('Cannot delete a subgroup group content entity directly.', $access->getReason());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/subgroup/tests/modules/subgroup_test_events/src/EventSubscriber/LeafEventsSubscriber.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Handles the group add leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupLeafEvent $event
+   * @param GroupLeafEvent $event
    *   The add group leaf event.
    */
   public function onAddGroupLeaf(GroupLeafEvent $event) {
@@ @@
   /**
    * Handles the group remove leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupLeafEvent $event
+   * @param GroupLeafEvent $event
    *   The remove group leaf event.
    */
   public function onRemoveGroupLeaf(GroupLeafEvent $event) {
@@ @@
   /**
    * Handles the group type add leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The add group type leaf event.
    */
   public function onAddGroupTypeLeaf(GroupTypeLeafEvent $event) {
@@ @@
   /**
    * Handles the group type remove leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The remove group type leaf event.
    */
   public function onRemoveGroupTypeLeaf(GroupTypeLeafEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/subgroup/subgroup.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
+use Drupal\group\Entity\GroupContentInterface;
 /**
  * @file
  * Hook implementations for the Subgroup module.
@@ @@
  * Implements hook_entity_type_alter().
  */
 function subgroup_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['group']->setHandlerClass('subgroup', GroupSubgroupHandler::class);
   $entity_types['group']->set('subgroup_wrapper', GroupLeaf::class);
   $entity_types['group_type']->setHandlerClass('subgroup', GroupTypeSubgroupHandler::class);
@@ @@
  * Implements hook_ENTITY_TYPE_update().
  */
 function subgroup_group_update(GroupInterface $group) {
-  /** @var \Drupal\group\Entity\GroupInterface $original */
+  /** @var GroupInterface $original */
   $original = $group->original;

-  /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+  /** @var SubgroupHandlerInterface $subgroup_handler */
   $subgroup_handler = \Drupal::entityTypeManager()->getHandler('group', 'subgroup');
   $original_is_leaf = $subgroup_handler->isLeaf($original);
   $current_is_leaf = $subgroup_handler->isLeaf($group);
@@ @@
   // Find out whether the group was added to or removed from a tree and dispatch
   // the appropriate event.
   if ($current_is_leaf !== $original_is_leaf) {
-    /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher */
+    /** @var ContainerAwareEventDispatcher $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event = new GroupLeafEvent($group);
     if ($current_is_leaf) {
-      $event_dispatcher->dispatch(LeafEvents::GROUP_LEAF_ADD, $event);
+      $event_dispatcher->dispatch($event, LeafEvents::GROUP_LEAF_ADD);
     }
     else {
-      $event_dispatcher->dispatch(LeafEvents::GROUP_LEAF_REMOVE, $event);
+      $event_dispatcher->dispatch($event, LeafEvents::GROUP_LEAF_REMOVE);
     }
   }
 }
@@ @@
  * Implements hook_ENTITY_TYPE_insert().
  */
 function subgroup_group_type_insert(GroupTypeInterface $group_type) {
-  /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+  /** @var SubgroupHandlerInterface $subgroup_handler */
   $subgroup_handler = \Drupal::entityTypeManager()->getHandler('group_type', 'subgroup');

   // If the newly added group type was created during a config import and has
@@ @@
   // Subgroup metadata, we need to fire the import event so we can, for example,
   // clear the plugin definitions cache.
   if ($subgroup_handler->isLeaf($group_type) && $group_type->isSyncing()) {
-    /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher */
+    /** @var ContainerAwareEventDispatcher $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event = new GroupTypeLeafEvent($group_type);
-    $event_dispatcher->dispatch(LeafEvents::GROUP_TYPE_LEAF_IMPORT, $event);
+    $event_dispatcher->dispatch($event, LeafEvents::GROUP_TYPE_LEAF_IMPORT);
   }
 }

@@ @@
  * Implements hook_ENTITY_TYPE_update().
  */
 function subgroup_group_type_update(GroupTypeInterface $group_type) {
-  /** @var \Drupal\group\Entity\GroupTypeInterface $original */
+  /** @var GroupTypeInterface $original */
   $original = $group_type->original;

-  /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+  /** @var SubgroupHandlerInterface $subgroup_handler */
   $subgroup_handler = \Drupal::entityTypeManager()->getHandler('group_type', 'subgroup');
   $original_is_leaf = $subgroup_handler->isLeaf($original);
   $current_is_leaf = $subgroup_handler->isLeaf($group_type);
@@ @@
   // Find out whether the group type was added to or removed from a tree and
   // dispatch the appropriate event.
   if ($current_is_leaf !== $original_is_leaf) {
-    /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher */
+    /** @var ContainerAwareEventDispatcher $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event = new GroupTypeLeafEvent($group_type);
     if ($group_type->isSyncing()) {
-      $event_dispatcher->dispatch(LeafEvents::GROUP_TYPE_LEAF_IMPORT, $event);
+      $event_dispatcher->dispatch($event, LeafEvents::GROUP_TYPE_LEAF_IMPORT);
     }
     elseif ($current_is_leaf) {
-      $event_dispatcher->dispatch(LeafEvents::GROUP_TYPE_LEAF_ADD, $event);
+      $event_dispatcher->dispatch($event, LeafEvents::GROUP_TYPE_LEAF_ADD);
     }
     else {
-      $event_dispatcher->dispatch(LeafEvents::GROUP_TYPE_LEAF_REMOVE, $event);
+      $event_dispatcher->dispatch($event, LeafEvents::GROUP_TYPE_LEAF_REMOVE);
     }
   }
 }
@@ @@
  * Implements hook_ENTITY_TYPE_create_access().
  */
 function subgroup_group_create_access(AccountInterface $account, array $context, $entity_bundle) {
-  /** @var \Drupal\group\Entity\GroupInterface $entity */
+  /** @var GroupInterface $entity */
   $group_type = \Drupal::entityTypeManager()->getStorage('group_type')->load($entity_bundle);

-  /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $group_type_handler */
+  /** @var SubgroupHandlerInterface $group_type_handler */
   $group_type_handler = \Drupal::entityTypeManager()->getHandler('group_type', 'subgroup');

   if ($group_type_handler->isLeaf($group_type) && !$group_type_handler->isRoot($group_type)) {
@@ @@
 function subgroup_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
   $entity_type_id = $entity->getEntityTypeId();
   if ($operation === 'delete' && in_array($entity_type_id, ['group', 'group_type'], TRUE)) {
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $handler */
+    /** @var SubgroupHandlerInterface $handler */
     $handler = \Drupal::entityTypeManager()->getHandler($entity_type_id, 'subgroup');
     if ($handler->isLeaf($entity) && $handler->hasDescendants($entity)) {
       $access = AccessResult::forbidden('Cannot delete a leaf that still has descendants.');
@@ @@
 function subgroup_entity_predelete(EntityInterface $entity) {
   $entity_type_id = $entity->getEntityTypeId();
   if (in_array($entity_type_id, ['group', 'group_type'], TRUE)) {
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $handler */
+    /** @var SubgroupHandlerInterface $handler */
     $handler = \Drupal::entityTypeManager()->getHandler($entity_type_id, 'subgroup');
     if ($handler->isLeaf($entity) && $handler->hasDescendants($entity)) {
       throw new EntityStorageException('Cannot delete a leaf that still has descendants.');
@@ @@
 function subgroup_entity_delete(EntityInterface $entity) {
   $entity_type_id = $entity->getEntityTypeId();
   if (in_array($entity_type_id, ['group', 'group_type'], TRUE)) {
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $handler */
+    /** @var SubgroupHandlerInterface $handler */
     $handler = \Drupal::entityTypeManager()->getHandler($entity_type_id, 'subgroup');
     if ($handler->isLeaf($entity)) {
       $handler->removeLeaf($entity, FALSE);
@@ @@
  * Implements hook_ENTITY_TYPE_access().
  */
 function subgroup_group_content_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\group\Entity\GroupContentInterface $entity */
+  /** @var GroupContentInterface $entity */
   if ($operation === 'delete' && $entity->getContentPlugin()->getBaseId() === 'subgroup') {
     return AccessResult::forbidden('Cannot delete a subgroup group content entity directly.')->setCacheMaxAge(Cache::PERMANENT);
   }
@@ @@
  * Implements hook_ENTITY_TYPE_insert().
  */
 function subgroup_group_content_insert(EntityInterface $entity) {
-  /** @var \Drupal\group\Entity\GroupContentInterface $entity */
+  /** @var GroupContentInterface $entity */
   if ($entity->getContentPlugin()->getBaseId() === 'subgroup') {
     $parent = $entity->getGroup();
     $child = $entity->getEntity();

-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $handler */
+    /** @var SubgroupHandlerInterface $handler */
     $handler = \Drupal::entityTypeManager()->getHandler('group', 'subgroup');
     if (!$handler->isLeaf($parent)) {
       $handler->initTree($parent);
@@ @@
  * Implements hook_ENTITY_TYPE_predelete().
  */
 function subgroup_group_content_predelete(EntityInterface $entity) {
-  /** @var \Drupal\group\Entity\GroupContentInterface $entity */
+  /** @var GroupContentInterface $entity */
   if ($entity->getContentPlugin()->getBaseId() === 'subgroup') {
     if ($entity->getEntity()) {
       throw new EntityStorageException('Cannot delete a subgroup group content entity if its group still exists.');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector


26) modules/contrib/subgroup/src/SubgroupFieldManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * Keys are field names, values are field labels.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @var TranslatableMarkup[]
    */
   protected $fields;

@@ @@
   /**
    * Constructs a new SubgroupFieldManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/subgroup/src/Plugin/GroupContentEnabler/SubgroupDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup\Plugin\GroupContentEnabler;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * The group type storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The group type subgroup handler.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;

@@ @@
    *
    * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
    *   The group type storage.
-   * @param \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler
+   * @param SubgroupHandlerInterface $subgroup_handler
    *   The group type subgroup handler.
    */
   public function __construct(ConfigEntityStorageInterface $storage, SubgroupHandlerInterface $subgroup_handler) {
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, $base_plugin_id) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
     return new static(
       $entity_type_manager->getStorage('group_type'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/subgroup/src/Plugin/GroupContentEnabler/Subgroup.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup\Plugin\GroupContentEnabler;

+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\group\Entity\GroupInterface;
 use Drupal\group\Plugin\GroupContentEnablerBase;
 use Drupal\Core\Url;
@@ @@
     $group_type_id = $this->getEntityBundle();
     $group_type = \Drupal::entityTypeManager()->getStorage('group_type')->load($group_type_id);

-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $manager */
+    /** @var GroupContentEnablerManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.group_content_enabler');
     $create_permission = $manager->getPermissionProvider($plugin_id)->getEntityCreatePermission();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/subgroup/src/GroupTypeLeaf.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The group entity to wrap.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupType;

@@ @@
   /**
    * Constructs a new GroupLeaf.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group entity to wrap the leaf around.
    */
   public function __construct(GroupTypeInterface $group_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/subgroup/src/GroupLeaf.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The group entity to wrap.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $group;

@@ @@
   /**
    * Constructs a new GroupLeaf.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group entity to wrap the leaf around.
    */
   public function __construct(GroupInterface $group) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/subgroup/src/Form/SubgroupSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup\Form;

+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new SubgroupSettingsForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateCreateTree(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitCreateTree(array &$form, FormStateInterface $form_state) {
@@ @@
     $parent = $storage->load($form_state->getValue($parents_parent));
     $child = $storage->load($form_state->getValue($parents_child));

-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $subgroup_handler->initTree($parent);
     $subgroup_handler->addLeaf($parent, $child);
@@ @@
   /**
    * Builds the tree overview form.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The root group type.
    *
    * @return array
@@ @@
     ];
     $form['table'][$root_id]['ancestry']['#markup'] = $this->t('<strong>@group_type</strong>', ['@group_type' => $root_label]);

-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');

     $current_parents = $parent_options = [$root_id => $root_label];
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateRemoveLeaf(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitRemoveLeaf(array &$form, FormStateInterface $form_state) {
@@ @@
     $parents = array_slice($form_state->getTriggeringElement()['#parents'], 0, -1);
     $group_type = $this->entityTypeManager->getStorage('group_type')->load(end($parents));

-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $subgroup_handler->removeLeaf($group_type);
   }
@@ @@
   /**
    * Builds the add leaf form.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup[] $parent_options
+   * @param TranslatableMarkup[] $parent_options
    *   A list of options for the parent selector.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateAddLeaf(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitAddLeaf(array &$form, FormStateInterface $form_state) {
@@ @@
     $parent = $storage->load($form_state->getValue($parents_parent));
     $child = $storage->load($form_state->getValue($parents_child));

-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $subgroup_handler->addLeaf($parent, $child);
   }
@@ @@
   /**
    * Builds the inheritance overview form.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The root group type.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitRemoveInheritance(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Builds the add inheritance form.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The root group type.
    *
    * @return array
@@ @@
       '#process' => ['::processSubform'],
     ];

-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_ids = array_merge([$group_type->id()], array_keys($subgroup_handler->getDescendants($group_type)));

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateCreateInheritance(array &$form, FormStateInterface $form_state) {
@@ @@
     $source_group_role = $storage->load($source);
     $target_group_role = $storage->load($target);

-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     if (!$subgroup_handler->areVerticallyRelated($source_group_role->getGroupType(), $target_group_role->getGroupType())) {
       $form_state->setErrorByName(implode('][', $parents), $this->t('Source and target are not ancestors or descendants of one another.'));
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitCreateInheritance(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/subgroup/src/EventSubscriber/TreeCacheTagInvalidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup\EventSubscriber;

+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\group\Entity\GroupInterface;
+use Drupal\group\Entity\GroupTypeInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\subgroup\Event\GroupLeafEvent;
@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The subgroup handler for groups.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $groupSubgroupHandler;

@@ @@
   /**
    * The subgroup handler for group types.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $groupTypeSubgroupHandler;

@@ @@
   /**
    * Constructs a TreeCacheTagInvalidator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
@@ @@
   /**
    * Invalidates the group tree cache tag when adding a leaf.
    *
-   * @param \Drupal\subgroup\Event\GroupLeafEvent $event
+   * @param GroupLeafEvent $event
    *   The add group leaf event.
    */
   public function onAddGroupLeaf(GroupLeafEvent $event) {
@@ @@
   /**
    * Invalidates the group tree cache tag when removing a leaf.
    *
-   * @param \Drupal\subgroup\Event\GroupLeafEvent $event
+   * @param GroupLeafEvent $event
    *   The remove group leaf event.
    */
   public function onRemoveGroupLeaf(GroupLeafEvent $event) {
     $group = $event->getGroup();

-    /** @var \Drupal\group\Entity\GroupInterface $original */
+    /** @var GroupInterface $original */
     $original = $group->original;
     $this->cacheTagsInvalidator->invalidateTags($this->groupSubgroupHandler->getTreeCacheTags($original));

@@ @@
   /**
    * Invalidates the group type tree cache tag when adding a leaf.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The add group type leaf event.
    */
   public function onAddGroupTypeLeaf(GroupTypeLeafEvent $event) {
@@ @@
   /**
    * Invalidates the group type tree cache tag when removing a leaf.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The remove group type leaf event.
    */
   public function onRemoveGroupTypeLeaf(GroupTypeLeafEvent $event) {
     $group_type = $event->getGroupType();

-    /** @var \Drupal\group\Entity\GroupTypeInterface $original */
+    /** @var GroupTypeInterface $original */
     $original = $group_type->original;
     $this->cacheTagsInvalidator->invalidateTags($this->groupTypeSubgroupHandler->getTreeCacheTags($original));
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/subgroup/src/EventSubscriber/GroupTypeLeafSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup\EventSubscriber;

+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group\Entity\Storage\GroupContentTypeStorageInterface;
+use Drupal\subgroup\Entity\RoleInheritanceStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\subgroup\Event\GroupTypeLeafEvent;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The subgroup handler for group types.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;

@@ @@
   /**
    * The group content enabler plugin manager.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface
+   * @var GroupContentEnablerManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * The subgroup field manager.
    *
-   * @var \Drupal\subgroup\SubgroupFieldManagerInterface
+   * @var SubgroupFieldManagerInterface
    */
   protected $fieldManager;

@@ @@
   /**
    * Constructs a new GroupTypeLeafSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager
+   * @param GroupContentEnablerManagerInterface $plugin_manager
    *   The group content enabler plugin manager.
-   * @param \Drupal\subgroup\SubgroupFieldManagerInterface $field_manager
+   * @param SubgroupFieldManagerInterface $field_manager
    *   The subgroup field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, GroupContentEnablerManagerInterface $plugin_manager, SubgroupFieldManagerInterface $field_manager) {
@@ @@
   /**
    * Handles the add leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The add leaf event.
    */
   public function onAddLeaf(GroupTypeLeafEvent $event) {
@@ @@
     $this->pluginManager->clearCachedDefinitions();

     if (!$this->subgroupHandler->isRoot($group_type)) {
-      /** @var \Drupal\group\Entity\GroupTypeInterface $parent */
+      /** @var GroupTypeInterface $parent */
       $parent = $this->subgroupHandler->getParent($group_type);

-      /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+      /** @var GroupContentTypeStorageInterface $storage */
       $storage = $this->entityTypeManager->getStorage('group_content_type');
       $storage->save($storage->createFromPlugin($parent, 'subgroup:' . $group_type->id()));
     }
@@ @@
   /**
    * Handles the import leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The import leaf event.
    */
   public function onImportLeaf(GroupTypeLeafEvent $event) {
@@ @@
   /**
    * Handles the remove leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The remove leaf event.
    */
   public function onRemoveLeaf(GroupTypeLeafEvent $event) {
     $group_type = $event->getGroupType();

-    /** @var \Drupal\group\Entity\GroupTypeInterface $original */
+    /** @var GroupTypeInterface $original */
     $original = $group_type->original;

-    /** @var \Drupal\subgroup\Entity\RoleInheritanceStorageInterface $role_inheritance_storage */
+    /** @var RoleInheritanceStorageInterface $role_inheritance_storage */
     $role_inheritance_storage = $this->entityTypeManager->getStorage('subgroup_role_inheritance');
     $role_inheritance_storage->deleteForGroupType($group_type, $this->subgroupHandler->wrapLeaf($original)->getTree());

-    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+    /** @var GroupContentTypeStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('group_content_type');
     $storage->delete($storage->loadByContentPluginId('subgroup:' . $group_type->id()));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/subgroup/src/Event/GroupTypeLeafEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\group\Entity\GroupTypeInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the event for group type leaf status changes.
@@ @@
   /**
    * The group type that was manipulated.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupType;

@@ @@
   /**
    * Constructs a new GroupTypeLeafEvent object.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group type that was manipulated. Must have the original property set
    *   and pointing to the group type before it was manipulated.
    */
@@ @@
   /**
    * Gets the group type that was manipulated.
    *
-   * @return \Drupal\group\Entity\GroupTypeInterface
+   * @return GroupTypeInterface
    *   The group type that was manipulated.
    */
   public function getGroupType() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/subgroup/src/Event/GroupLeafEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\group\Entity\GroupInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the event for group leaf status changes.
@@ @@
   /**
    * The group that was manipulated.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $group;

@@ @@
   /**
    * Constructs a new GroupLeafEvent object.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group that was manipulated. Must have the original property set and
    *   pointing to the group before it was manipulated.
    */
@@ @@
   /**
    * Gets the group that was manipulated.
    *
-   * @return \Drupal\group\Entity\GroupInterface
+   * @return GroupInterface
    *   The group that was manipulated.
    */
   public function getGroup() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/subgroup/src/Entity/SubgroupHandlerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup\Entity;

+use Drupal\subgroup\LeafInterface;
 use Drupal\Core\Entity\EntityHandlerInterface;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
   /**
    * Wraps an entity in a LeafInterface.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to wrap.
    *
-   * @return \Drupal\subgroup\LeafInterface
+   * @return LeafInterface
    *   The wrapped entity.
    */
   public function wrapLeaf(EntityInterface $entity);
@@ @@
   /**
    * Checks whether an entity is part of a tree.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    *
    * @return bool
@@ @@
   /**
    * Checks whether an entity is the root of a tree.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    *
    * @return bool
@@ @@
   /**
    * Checks whether one entity is an ancestor or descendant of another.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $a
+   * @param EntityInterface $a
    *   The first entity to check.
-   * @param \Drupal\Core\Entity\EntityInterface $b
+   * @param EntityInterface $b
    *   The second entity to check.
    *
    * @return bool
@@ @@
   /**
    * Initializes a tree with the provided entity as the root.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to use as the root.
    */
   public function initTree(EntityInterface $entity);
@@ @@
   /**
    * Adds a leaf to a tree.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $parent
+   * @param EntityInterface $parent
    *   The entity to use as the parent.
-   * @param \Drupal\Core\Entity\EntityInterface $child
+   * @param EntityInterface $child
    *   The entity to use as the new leaf.
    */
   public function addLeaf(EntityInterface $parent, EntityInterface $child);
@@ @@
   /**
    * Removes a leaf from a tree.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to remove from the tree.
    * @param bool $save
    *   (optional) Whether the entity should be saved. Defaults to TRUE. Set this
@@ @@
   /**
    * Gets the parent of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to retrieve the parent for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity that represents the leaf's parent in the tree.
    */
   public function getParent(EntityInterface $entity);
@@ @@
   /**
    * Gets the ancestors of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to retrieve the ancestors for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities that represent the leaf's ancestors in the tree.
    */
   public function getAncestors(EntityInterface $entity);
@@ @@
   /**
    * Gets the children of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to retrieve the children for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities that represent the leaf's children in the tree.
    */
   public function getChildren(EntityInterface $entity);
@@ @@
   /**
    * Gets the descendants of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to retrieve the descendants for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities that represent the leaf's descendants in the tree.
    */
   public function getDescendants(EntityInterface $entity);
@@ @@
    * little useful information that can be derived from simply knowing the
    * number of descendants.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to count the descendants of.
    *
    * @return int
@@ @@
    * safety checks throughout the codebase that forbid the removal or other
    * manipulation of leaves that have descendants.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to retrieve the children for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities that represent the leaf's children in the tree.
    */
   public function hasDescendants(EntityInterface $entity);
@@ @@
   /**
    * Gets the tree cache tags for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get the tree cache tags for.
    *
    * @return string[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/subgroup/src/Entity/SubgroupHandlerBase.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * Information about the entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;

@@ @@
   /**
    * Constructs a new SubgroupHandlerBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage handler.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage) {
@@ @@
   /**
    * Checks whether an entity is of the entity type this handler represents.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check the class for.
    *
    * @throws \InvalidArgumentException
@@ @@
   /**
    * Writes the provided leaf data onto the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to write the data onto.
    * @param int $depth
    *   The depth.
@@ @@
   /**
    * Clears the leaf data from the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to clear the data from.
    * @param bool $save
    *   Whether the entity should be saved.
@@ @@
    * This is called after a few sanity checks and can be easily overwritten by
    * the extending classes.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to use as the root.
    */
   protected function doInitTree(EntityInterface $entity) {
@@ @@
    * This is called after a few sanity checks and can be easily overwritten by
    * the extending classes.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $parent
+   * @param EntityInterface $parent
    *   The entity to use as the parent.
-   * @param \Drupal\Core\Entity\EntityInterface $child
+   * @param EntityInterface $child
    *   The entity to use as the new leaf.
    */
   protected function doAddLeaf(EntityInterface $parent, EntityInterface $child) {
@@ @@
    * This is called after a few sanity checks and can be easily overwritten by
    * the extending classes.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to remove from the tree.
    * @param bool $save
    *   Whether the entity should be saved.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/subgroup/src/Entity/RoleInheritanceStorageInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Deletes all role inheritance entities for a given group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group type to delete the entities for.
    * @param string $tree
    *   The ID of the tree the group type belonged to. This must be provided
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/subgroup/src/Entity/RoleInheritanceStorage.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The subgroup handler for group types.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;

@@ @@
       throw new EntityStorageException('Role inheritance entities may not be updated after creation.');
     }

-    /** @var \Drupal\subgroup\Entity\RoleInheritanceInterface $entity */
+    /** @var RoleInheritanceInterface $entity */
     if (empty($entity->getSourceId())) {
       throw new EntityMalformedException('Source property is required for a RoleInheritance entity.');
     }
@@ @@
     $to_delete = [];
     $group_type_id = $group_type->id();
     foreach ($this->loadByProperties(['tree' => $original_tree]) as $role_inheritance) {
-      /** @var \Drupal\subgroup\Entity\RoleInheritanceInterface $role_inheritance */
+      /** @var RoleInheritanceInterface $role_inheritance */
       $source_group_type_id = $role_inheritance->getSource()->getGroupTypeId();
       $target_group_type_id = $role_inheritance->getTarget()->getGroupTypeId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/subgroup/src/Entity/RoleInheritanceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup\Entity;

+use Drupal\group\Entity\GroupRoleInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Returns the source group role.
    *
-   * @return \Drupal\group\Entity\GroupRoleInterface
+   * @return GroupRoleInterface
    *   The source group role.
    */
   public function getSource();
@@ @@
   /**
    * Returns the target group role.
    *
-   * @return \Drupal\group\Entity\GroupRoleInterface
+   * @return GroupRoleInterface
    *   The target group role.
    */
   public function getTarget();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


41) modules/contrib/subgroup/src/Entity/RoleInheritance.php:125

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function preSave(EntityStorageInterface $storage) {
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $handler */
+    /** @var SubgroupHandlerInterface $handler */
     $handler = $this->entityTypeManager()->getHandler('group_type', 'subgroup');
     $this->tree = $handler->wrapLeaf($this->getSource()->getGroupType())->getTree();
     parent::preSave($storage);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/subgroup/src/Entity/GroupTypeSubgroupHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup\Entity;

+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\group\Entity\GroupTypeInterface;
@@ @@
   /**
    * The Group storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $groupStorage;

@@ @@
   /**
    * Checks whether there are groups of a given group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group type to run the check for.
    *
    * @return bool
@@ @@
    * {@inheritdoc}
    */
   protected function writeLeafData(EntityInterface $entity, $depth, $left, $right, $tree) {
-    /** @var \Drupal\group\Entity\GroupTypeInterface $entity */
+    /** @var GroupTypeInterface $entity */
     $entity
       ->setThirdPartySetting('subgroup', SUBGROUP_DEPTH_SETTING, $depth)
       ->setThirdPartySetting('subgroup', SUBGROUP_LEFT_SETTING, $left)
@@ @@
    * {@inheritdoc}
    */
   protected function clearLeafData(EntityInterface $entity, $save) {
-    /** @var \Drupal\group\Entity\GroupTypeInterface $entity */
+    /** @var GroupTypeInterface $entity */
     $entity
       ->unsetThirdPartySetting('subgroup', SUBGROUP_DEPTH_SETTING)
       ->unsetThirdPartySetting('subgroup', SUBGROUP_LEFT_SETTING)
@@ @@
    * {@inheritdoc}
    */
   protected function doAddLeaf(EntityInterface $parent, EntityInterface $child) {
-    /** @var \Drupal\group\Entity\GroupTypeInterface $child */
+    /** @var GroupTypeInterface $child */
     if ($this->groupTypeHasGroups($child)) {
       throw new InvalidLeafException('Cannot use a group type that already has groups as a leaf.');
     }
@@ @@
    * {@inheritdoc}
    */
   protected function doRemoveLeaf(EntityInterface $entity, $save) {
-    /** @var \Drupal\group\Entity\GroupTypeInterface $entity */
+    /** @var GroupTypeInterface $entity */
     if (!$this->isRoot($entity) && $this->groupTypeHasGroups($entity)) {
       throw new InvalidLeafException('Cannot remove leaf status from a group type that still has groups.');
     }
@@ @@
    * @param string[] $entity_ids
    *   Group type IDs to load and sort by left property.
    *
-   * @return \Drupal\group\Entity\GroupTypeInterface[]
+   * @return GroupTypeInterface[]
    *   A list of sorted group types.
    *
    * @todo Remove this along with ::getAncestors(), ::getChildren() and
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/subgroup/src/Entity/GroupSubgroupHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup\Entity;

+use Drupal\Component\Datetime\TimeInterface;
+use Drupal\group\Entity\GroupInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\subgroup\InvalidParentException;
@@ @@
   /**
    * The GroupType subgroup handler.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $groupTypeHandler;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
    * {@inheritdoc}
    */
   protected function writeLeafData(EntityInterface $entity, $depth, $left, $right, $tree) {
-    /** @var \Drupal\group\Entity\GroupInterface $entity */
+    /** @var GroupInterface $entity */
     $entity
       ->set(SUBGROUP_DEPTH_FIELD, $depth)
       ->set(SUBGROUP_LEFT_FIELD, $left)
@@ @@
    * {@inheritdoc}
    */
   protected function clearLeafData(EntityInterface $entity, $save) {
-    /** @var \Drupal\group\Entity\GroupInterface $entity */
+    /** @var GroupInterface $entity */
     $entity
       ->set(SUBGROUP_DEPTH_FIELD, NULL)
       ->set(SUBGROUP_LEFT_FIELD, NULL)
@@ @@
    * {@inheritdoc}
    */
   protected function doInitTree(EntityInterface $entity) {
-    /** @var \Drupal\group\Entity\GroupInterface $entity */
+    /** @var GroupInterface $entity */
     $group_type = $entity->getGroupType();

     if (!$this->groupTypeHandler->isLeaf($group_type)) {
@@ @@
     // leafs as you should only be able to create subgroups, not add existing
     // groups as subgroups. 60 seconds seems plenty for a request that created
     // the group to get to this point of adding it as a subgroup.
-    /** @var \Drupal\group\Entity\GroupInterface $child */
+    /** @var GroupInterface $child */
     $leaf_lifetime = $this->time->getCurrentTime() - $child->getCreatedTime();
     assert($leaf_lifetime <= 60);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/subgroup/src/Access/InheritedGroupPermissionCalculator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subgroup\Access;

+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\subgroup\Entity\RoleInheritanceStorageInterface;
+use Drupal\subgroup\Entity\RoleInheritanceInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\group\Access\CalculatedGroupPermissionsItem;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The membership loader service.
    *
-   * @var \Drupal\group\GroupMembershipLoaderInterface
+   * @var GroupMembershipLoaderInterface
    */
   protected $membershipLoader;

@@ @@
   /**
    * Constructs a InheritedGroupPermissionCalculator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\group\GroupMembershipLoaderInterface $membership_loader
+   * @param GroupMembershipLoaderInterface $membership_loader
    *   The group membership loader service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, GroupMembershipLoaderInterface $membership_loader) {
@@ @@
     // added to or removed from a group.
     $calculated_permissions->addCacheTags(['group_content_list:plugin:group_membership:entity:' . $account->id()]);

-    /** @var \Drupal\group\Entity\GroupTypeInterface[] $group_types */
+    /** @var GroupTypeInterface[] $group_types */
     $group_types = $this->entityTypeManager->getStorage('group_type')->loadMultiple();

-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $group_handler */
+    /** @var SubgroupHandlerInterface $group_handler */
     $group_handler = $this->entityTypeManager->getHandler('group', 'subgroup');

-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $group_type_handler */
+    /** @var SubgroupHandlerInterface $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');

-    /** @var \Drupal\subgroup\Entity\RoleInheritanceStorageInterface $inheritance_storage */
+    /** @var RoleInheritanceStorageInterface $inheritance_storage */
     $inheritance_storage = $this->entityTypeManager->getStorage('subgroup_role_inheritance');

     // Performance boost: Keep track of which tree a group type belongs to.
@@ @@
       //   group and are of the target role's group type.
       $group_permission_sets = $group_ids = [];

-      /** @var \Drupal\subgroup\Entity\RoleInheritanceInterface $inheritance */
+      /** @var RoleInheritanceInterface $inheritance */
       foreach ($inheritances as $inheritance) {
         // Inheritance entities cannot be updated, so no need to add them as
         // dependencies because adding or removing them already triggers the
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 44 files have been changed by Rector                                      

