modules/contrib/file_version/file_version.api.php
modules/contrib/file_version/file_version.install
modules/contrib/file_version/file_version.module
modules/contrib/file_version/src/FileVersion.php
modules/contrib/file_version/src/FileVersionInterface.php
modules/contrib/file_version/src/Form/SettingsForm.php
modules/contrib/file_version/tests/src/Kernel/FileTest.php
modules/contrib/file_version/tests/src/Kernel/FileVersionTestBase.php
modules/contrib/file_version/tests/src/Kernel/ImageStyleTest.php

4 files with changes
====================

1) modules/contrib/file_version/tests/src/Kernel/ImageStyleTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\file_version\Kernel;

+use Drupal\image\ImageStyleInterface;
 use Drupal\image\Entity\ImageStyle;

 /**
@@ @@
   /**
    * Image Style to use in tests.
    *
-   * @var \Drupal\image\ImageStyleInterface
+   * @var ImageStyleInterface
    */
   private $imageStyle;

@@ @@

     $this->config('file_version.settings')->set('extensions_whitelist', 'doc')->save();
     $image_url = $this->imageStyle->buildUrl($image_uri);
-    $doc_url = file_create_url($doc_uri);
-    $pdf_url = file_create_url($pdf_uri);
+    $doc_url = \Drupal::service('file_url_generator')->generateAbsoluteString($doc_uri);
+    $pdf_url = \Drupal::service('file_url_generator')->generateAbsoluteString($pdf_uri);

     $this->assertTrue($this->urlHasQueryParam($image_url), 'Image style has File Version when extensions whitelist is set: single value.');
     $this->assertTrue($this->urlHasQueryParam($image_url, 'itok'), 'Image style has itok when extensions whitelist is set: single value.');
@@ @@

     $this->config('file_version.settings')->set('extensions_whitelist', 'doc, xml')->save();
     $image_url = $this->imageStyle->buildUrl($image_uri);
-    $doc_url = file_create_url($doc_uri);
-    $pdf_url = file_create_url($pdf_uri);
+    $doc_url = \Drupal::service('file_url_generator')->generateAbsoluteString($doc_uri);
+    $pdf_url = \Drupal::service('file_url_generator')->generateAbsoluteString($pdf_uri);

     $this->assertTrue($this->urlHasQueryParam($image_url), 'Image style has File Version when extensions whitelist is set: list.');
     $this->assertTrue($this->urlHasQueryParam($image_url, 'itok'), 'Image style has itok when extensions whitelist is set: list.');
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_version/tests/src/Kernel/FileTest.php:31

    ---------- begin diff ----------
@@ @@
     $token = \Drupal::service('file_version')->getFileVersionToken($uri);
     $uri .= '?fv=' . $token;

-    $url = file_create_url($uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);

     $query = parse_url($url, PHP_URL_QUERY);
     $fv_count = substr_count($query, 'fv=');
@@ @@
    */
   public function testAbsoluteUrl() {
     $uri = 'http://example.com/myfile.doc';
-    $url = file_create_url($uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
     $this->assertTrue($this->isUrlAbsolute($url), 'Absolute URL keeps absolute.');
     $this->assertTrue($this->urlHasQueryParam($url), 'Absolute URL has File Version');
   }
@@ @@
    */
   public function testSchemeUri() {
     $scheme_uri = 'public://myfile.doc';
-    $url = file_create_url($scheme_uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($scheme_uri);
     $this->assertTrue($this->isUrlAbsolute($url), 'Scheme URI is converted to absolute URL.');
     $this->assertTrue($this->urlHasQueryParam($url), 'Scheme URI has File Version');
   }
@@ @@
    */
   public function testRelativeUrl() {
     $relative_uri = 'modules/custom/mymodule/myfile.doc';
-    $url = file_create_url($relative_uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($relative_uri);
     $this->assertTrue($this->isUrlAbsolute($url), 'Relative URL is converted to absolute URL.');
     $this->assertTrue($this->urlHasQueryParam($url), 'Relative URL has File Version');
   }
@@ @@
    */
   public function testRootRelativeUrl() {
     $root_relative_uri = '/modules/custom/mymodule/myfile.doc';
-    $url = file_create_url($root_relative_uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($root_relative_uri);
     $this->assertTrue(strpos($url, $root_relative_uri) === 0, 'Root relative URL keeps root relative.');
     $this->assertTrue($this->urlHasQueryParam($url), 'Root relative URL has File Version');
   }
@@ @@
     $custom_query_parameter = 'jv';
     $this->config('file_version.settings')->set('get_parameter_name', $custom_query_parameter)->save();
     $uri = 'http://example.com/myfile.doc';
-    $url = file_create_url($uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
     $this->assertTrue($this->urlHasQueryParam($url, $custom_query_parameter), 'URL works with custom query parameter.');
   }

@@ @@
     $pdf_uri = 'http://example.com/myfile.pdf';

     $this->config('file_version.settings')->set('extensions_blacklist', 'doc')->save();
-    $doc_url = file_create_url($doc_uri);
-    $pdf_url = file_create_url($pdf_uri);
+    $doc_url = \Drupal::service('file_url_generator')->generateAbsoluteString($doc_uri);
+    $pdf_url = \Drupal::service('file_url_generator')->generateAbsoluteString($pdf_uri);
     $this->assertFalse($this->urlHasQueryParam($doc_url), "Blacklisted extension doesn't have File Version: single value.");
     $this->assertTrue($this->urlHasQueryParam($pdf_url), 'Other extensions have File Version: single value.');

     $this->config('file_version.settings')->set('extensions_blacklist', 'doc, xml')->save();
-    $doc_url = file_create_url($doc_uri);
-    $pdf_url = file_create_url($pdf_uri);
+    $doc_url = \Drupal::service('file_url_generator')->generateAbsoluteString($doc_uri);
+    $pdf_url = \Drupal::service('file_url_generator')->generateAbsoluteString($pdf_uri);
     $this->assertFalse($this->urlHasQueryParam($doc_url), "Blacklisted extension doesn't have File Version: list.");
     $this->assertTrue($this->urlHasQueryParam($pdf_url), 'Other extensions have File Version: list.');
   }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/file_version/src/Form/SettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * File Version Service.
    *
-   * @var \Drupal\file_version\FileVersionInterface
+   * @var FileVersionInterface
    */
   private $fileVersion;

@@ @@
   /**
    * Class constructor method.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config Factory Service.
-   * @param \Drupal\file_version\FileVersionInterface $file_version
+   * @param FileVersionInterface $file_version
    *   File Version Service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, FileVersionInterface $file_version) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/file_version/src/FileVersion.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * PrivateKey Service.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   private $privateKey;

@@ @@
   /**
    * ConfigFactory Service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * Module Handler Service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

@@ @@
   /**
    * Constructor method of FileVersion Service.
    *
-   * @param \Drupal\Core\PrivateKey $private_key
+   * @param PrivateKey $private_key
    *   PrivateKey Service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   ConfigFactory Service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   ModuleHandler Service.
    */
   public function __construct(PrivateKey $private_key, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 4 files have been changed by Rector                                       

