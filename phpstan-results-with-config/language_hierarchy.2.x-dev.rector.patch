diff --git a/language_hierarchy.info.yml b/language_hierarchy.info.yml
index d18bcab..ea695a2 100644
--- a/language_hierarchy.info.yml
+++ b/language_hierarchy.info.yml
@@ -2,7 +2,6 @@ name: Language Hierarchy
 type: module
 description: 'Allows users to configure inheritance between languages.'
 package: Multilingual
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 dependencies:
   - drupal:language
diff --git a/language_hierarchy.module b/language_hierarchy.module
index 18afd25..17a1726 100644
--- a/language_hierarchy.module
+++ b/language_hierarchy.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\taxonomy\TermInterface;
+use Drupal\node\NodeInterface;
 /**
  * @file
  * Add sublanguage handling functionality to Drupal.
@@ -31,7 +33,7 @@ function language_hierarchy_language_fallback_candidates_alter(array &$candidate
   // Record which languages have been iterated over, so loops can be avoided.
   $iterated = [];
 
-  /** @var Drupal\language\Entity\ConfigurableLanguage $language */
+  /** @var ConfigurableLanguage $language */
   $language = ConfigurableLanguage::load($attempted_langcode);
   while (!empty($language) && !in_array($language->getId(), $iterated, TRUE)) {
     $iterated[] = $language->getId();
@@ -86,7 +88,7 @@ function language_hierarchy_query_path_alias_language_fallback_alter(AlterableIn
  * Implements hook_form_FORM_ID_alter().
  */
 function language_hierarchy_form_language_admin_edit_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var Drupal\language\Entity\ConfigurableLanguage $this_language */
+  /** @var ConfigurableLanguage $this_language */
   $this_language = $form_state->getFormObject()->getEntity();
 
   $languages = Drupal::languageManager()->getLanguages();
@@ -126,7 +128,7 @@ function language_hierarchy_form_language_admin_edit_form_builder($entity_type,
  * Implements hook_form_FORM_ID_alter() for language_admin_overview_form().
  */
 function language_hierarchy_form_language_admin_overview_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\language\ConfigurableLanguageInterface[] $languages */
+  /** @var ConfigurableLanguageInterface[] $languages */
   $languages = $form['languages']['#languages'];
   $hierarchy = [];
   foreach ($languages as $langcode => $language) {
@@ -232,7 +234,7 @@ function language_hierarchy_get_sorted_flattened_hierarchy($element) {
 /**
  * Get the depth of a language inside hierarchy.
  *
- * @param \Drupal\language\ConfigurableLanguageInterface $language
+ * @param ConfigurableLanguageInterface $language
  *   The language to calculate depth for.
  *
  * @return int
@@ -246,7 +248,7 @@ function language_hierarchy_calculate_depth(ConfigurableLanguageInterface $langu
 /**
  * Returns ancestors language code of the provided language.
  *
- * @param \Drupal\language\ConfigurableLanguageInterface $language
+ * @param ConfigurableLanguageInterface $language
  *   The language to get ancestors for.
  *
  * @return array
@@ -275,7 +277,7 @@ function language_hierarchy_get_ancestors(ConfigurableLanguageInterface $languag
  * Store information about hidden languages.
  */
 function language_hierarchy_language_admin_overview_form_submit($form, FormStateInterface $form_state) {
-  /** @var \Drupal\language\ConfigurableLanguageInterface[] $languages */
+  /** @var ConfigurableLanguageInterface[] $languages */
   $languages = $form['languages']['#languages'];
 
   foreach ($form_state->getValue('languages') as $langcode => $language_values) {
@@ -435,7 +437,7 @@ function language_hierarchy_query_language_hierarchy_limit_alter(AlterableInterf
     // specify "SELECT 1". Tiresome - yes, but we want to follow the API to
     // guarantee cross-backend support. Hopefully the database engine is smart
     // enough to optimise this. We use our own table because we know it exists.
-    /** @var \Drupal\Core\Database\Query\SelectInterface $join_flag_subquery */
+    /** @var SelectInterface $join_flag_subquery */
     $join_flag_subquery = $database->select('language_hierarchy_priority')
       ->range(0, 1);
     $join_flag_subquery->addExpression('1', 'is_highest');
@@ -458,7 +460,7 @@ function language_hierarchy_query_language_hierarchy_limit_alter(AlterableInterf
  * Replaces the URL language if it is just a fallback translation.
  */
 function language_hierarchy_fix_url_from_fallback(Url $url, TranslatableInterface $translatable) {
-  /** @var \Drupal\Core\Language\LanguageInterface $url_language */
+  /** @var LanguageInterface $url_language */
   $url_language = $url->getOption('language');
 
   // Respect a 'language_hierarchy_fallback' option, which flags that the URL
@@ -504,7 +506,7 @@ function language_hierarchy_fix_url_from_fallback(Url $url, TranslatableInterfac
  */
 function language_hierarchy_preprocess_taxonomy_term(&$variables) {
   if (!empty($variables['url'])) {
-    /** @var \Drupal\taxonomy\TermInterface $term */
+    /** @var TermInterface $term */
     $term = $variables['term'];
     $url = $variables['url'];
     if (is_string($url)) {
@@ -526,7 +528,7 @@ function language_hierarchy_preprocess_taxonomy_term(&$variables) {
  */
 function language_hierarchy_preprocess_node(&$variables) {
   if (!empty($variables['url'])) {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $variables['node'];
     $url = $variables['url'];
     if (is_string($url)) {
diff --git a/src/Config/LanguageHierarchyConfigFactoryOverride.php b/src/Config/LanguageHierarchyConfigFactoryOverride.php
index c112bf5..8919465 100644
--- a/src/Config/LanguageHierarchyConfigFactoryOverride.php
+++ b/src/Config/LanguageHierarchyConfigFactoryOverride.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\language_hierarchy\Config;
 
+use Drupal\language\ConfigurableLanguageInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\language\Config\LanguageConfigFactoryOverride;
 
@@ -137,7 +138,7 @@ class LanguageHierarchyConfigFactoryOverride extends LanguageConfigFactoryOverri
    * @see \Drupal\language\EventSubscriber\LanguageRequestSubscriber::getSubscribedEvents()
    */
   protected function getFallbackChainFromConfigEntities($langcode) {
-    /** @var \Drupal\language\ConfigurableLanguageInterface $language_config */
+    /** @var ConfigurableLanguageInterface $language_config */
     $language_config = \Drupal::entityTypeManager()
       ->getStorage('configurable_language')
       ->load($langcode);
diff --git a/src/Config/LanguageHierarchyConfigOverride.php b/src/Config/LanguageHierarchyConfigOverride.php
index 17731fc..fe47699 100644
--- a/src/Config/LanguageHierarchyConfigOverride.php
+++ b/src/Config/LanguageHierarchyConfigOverride.php
@@ -24,7 +24,7 @@ class LanguageHierarchyConfigOverride extends LanguageConfigOverride {
   /**
    * The storage used to save this configuration object.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $target_storage;
 
@@ -37,15 +37,15 @@ class LanguageHierarchyConfigOverride extends LanguageConfigOverride {
    *   The name of the language the override is intended for (i.e. the more
    *   specific language, whereas the config override may actually have come
    *   from the source storage for a fallback language).
-   * @param \Drupal\Core\Config\StorageInterface $source_storage
+   * @param StorageInterface $source_storage
    *   A storage controller object to use for reading the configuration
    *   override.
-   * @param \Drupal\Core\Config\StorageInterface $target_storage
+   * @param StorageInterface $target_storage
    *   A storage controller object to use for writing the configuration
    *   override.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
+   * @param TypedConfigManagerInterface $typed_config
    *   The typed configuration manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct($name, $langcode, StorageInterface $source_storage, StorageInterface $target_storage, TypedConfigManagerInterface $typed_config, EventDispatcherInterface $event_dispatcher) {
diff --git a/src/Controller/ConfigTranslationController.php b/src/Controller/ConfigTranslationController.php
index 1024259..eeb87df 100644
--- a/src/Controller/ConfigTranslationController.php
+++ b/src/Controller/ConfigTranslationController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\language_hierarchy\Controller;
 
+use Drupal\config_translation\ConfigMapperInterface;
+use Drupal\language\Config\LanguageConfigOverride;
 use Drupal\config_translation\ConfigMapperManagerInterface;
 use Drupal\config_translation\Controller\ConfigTranslationController as CoreConfigTranslationController;
 use Drupal\config_translation\Exception\ConfigMapperLanguageException;
@@ -28,28 +30,28 @@ class ConfigTranslationController extends CoreConfigTranslationController {
   /**
    * The language configuration override service.
    *
-   * @var \Drupal\language\Config\LanguageConfigFactoryOverrideInterface
+   * @var LanguageConfigFactoryOverrideInterface
    */
   protected $configFactoryOverride;
 
   /**
    * Constructs this ConfigTranslationController override.
    *
-   * @param \Drupal\config_translation\ConfigMapperManagerInterface $config_mapper_manager
+   * @param ConfigMapperManagerInterface $config_mapper_manager
    *   The configuration mapper manager.
-   * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The menu link access service.
-   * @param \Symfony\Component\Routing\Matcher\RequestMatcherInterface $router
+   * @param RequestMatcherInterface $router
    *   The dynamic router service.
-   * @param \Drupal\Core\PathProcessor\InboundPathProcessorInterface $path_processor
+   * @param InboundPathProcessorInterface $path_processor
    *   The inbound path processor.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\language\Config\LanguageConfigFactoryOverrideInterface $config_override
+   * @param LanguageConfigFactoryOverrideInterface $config_override
    *   The language configuration override service.
    */
   public function __construct(ConfigMapperManagerInterface $config_mapper_manager, AccessManagerInterface $access_manager, RequestMatcherInterface $router, InboundPathProcessorInterface $path_processor, AccountInterface $account, LanguageManagerInterface $language_manager, RendererInterface $renderer, LanguageConfigFactoryOverrideInterface $config_override) {
@@ -76,9 +78,9 @@ class ConfigTranslationController extends CoreConfigTranslationController {
   /**
    * Language translations overview page for a configuration name.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Page request object.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    * @param string $plugin_id
    *   The plugin ID of the mapper.
@@ -87,7 +89,7 @@ class ConfigTranslationController extends CoreConfigTranslationController {
    *   Page render array.
    */
   public function itemPage(Request $request, RouteMatchInterface $route_match, $plugin_id) {
-    /** @var \Drupal\config_translation\ConfigMapperInterface $mapper */
+    /** @var ConfigMapperInterface $mapper */
     $mapper = $this->configMapperManager->createInstance($plugin_id);
     $mapper->populateFromRouteMatch($route_match);
 
@@ -110,7 +112,7 @@ class ConfigTranslationController extends CoreConfigTranslationController {
         // Check this translation really does exist directly in the language.
         $exists_directly = FALSE;
         foreach ($mapper->getConfigNames() as $config_name) {
-          /** @var \Drupal\language\Config\LanguageConfigOverride $override */
+          /** @var LanguageConfigOverride $override */
           $override = $this->configFactoryOverride->getOverride($langcode, $config_name);
           if ($override->getLangcode() === $langcode) {
             $exists_directly = TRUE;
diff --git a/src/EventSubscriber/LanguageHierarchyConfigEventSubscriber.php b/src/EventSubscriber/LanguageHierarchyConfigEventSubscriber.php
index 787538a..45ce72b 100644
--- a/src/EventSubscriber/LanguageHierarchyConfigEventSubscriber.php
+++ b/src/EventSubscriber/LanguageHierarchyConfigEventSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\language_hierarchy\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\ConfigEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class LanguageHierarchyConfigEventSubscriber.
@@ -16,7 +16,7 @@ class LanguageHierarchyConfigEventSubscriber implements EventSubscriberInterface
   /**
    * This method is called when the config.importer.import event is dispatched.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The config import event.
    */
   public function onConfigImport(Event $event) {
diff --git a/src/Plugin/views/filter/ContentLanguageFallbackLimitedFilter.php b/src/Plugin/views/filter/ContentLanguageFallbackLimitedFilter.php
index 09aa088..6fe7744 100644
--- a/src/Plugin/views/filter/ContentLanguageFallbackLimitedFilter.php
+++ b/src/Plugin/views/filter/ContentLanguageFallbackLimitedFilter.php
@@ -21,7 +21,7 @@ class ContentLanguageFallbackLimitedFilter extends FilterPluginBase {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -34,7 +34,7 @@ class ContentLanguageFallbackLimitedFilter extends FilterPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct($configuration, $plugin_id, $plugin_definition, LanguageManagerInterface $language_manager) {
@@ -89,7 +89,7 @@ class ContentLanguageFallbackLimitedFilter extends FilterPluginBase {
         $this->value = array_merge([$langcode], $this->value);
       }
 
-      /** @var \Drupal\views\Plugin\views\query\Sql $query */
+      /** @var Sql $query */
       $query = $this->query;
       $qualified_field = "$this->tableAlias.$this->realField";
       if (count($this->value) === 1) {
diff --git a/src/Plugin/views/sort/LanguageHierarchySort.php b/src/Plugin/views/sort/LanguageHierarchySort.php
index 9caca5b..d66d2e6 100644
--- a/src/Plugin/views/sort/LanguageHierarchySort.php
+++ b/src/Plugin/views/sort/LanguageHierarchySort.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\language_hierarchy\Plugin\views\sort;
 
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\views\Plugin\views\sort\SortPluginBase;
@@ -17,7 +18,7 @@ class LanguageHierarchySort extends SortPluginBase {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -30,7 +31,7 @@ class LanguageHierarchySort extends SortPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LanguageManagerInterface $language_manager) {
@@ -78,7 +79,7 @@ class LanguageHierarchySort extends SortPluginBase {
       $fallback_langcodes = array_merge([$langcode], $fallback_langcodes);
     }
 
-    /** @var \Drupal\views\Plugin\views\query\Sql $query */
+    /** @var Sql $query */
     $query = $this->query;
     $qualified_field = "$this->tableAlias.$this->realField";
 
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index fc42c83..b7eac42 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -15,14 +15,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The mapper plugin discovery service.
    *
-   * @var \Drupal\config_translation\ConfigMapperManagerInterface
+   * @var ConfigMapperManagerInterface
    */
   protected $mapperManager;
 
   /**
    * Constructs a new RouteSubscriber.
    *
-   * @param \Drupal\config_translation\ConfigMapperManagerInterface $mapper_manager
+   * @param ConfigMapperManagerInterface $mapper_manager
    *   The mapper plugin discovery service.
    */
   public function __construct(ConfigMapperManagerInterface $mapper_manager) {
diff --git a/src/StringDatabaseStorageDecorator.php b/src/StringDatabaseStorageDecorator.php
index d6bcf61..458fee8 100644
--- a/src/StringDatabaseStorageDecorator.php
+++ b/src/StringDatabaseStorageDecorator.php
@@ -18,25 +18,25 @@ class StringDatabaseStorageDecorator extends StringDatabaseStorage {
   /**
    * Core string storage service.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $stringStorage;
 
   /**
    * Language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new StringDatabaseStorage class.
    *
-   * @param \Drupal\locale\StringStorageInterface $string_storage
+   * @param StringStorageInterface $string_storage
    *   Core string storage service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   A Database connection to use for reading and writing configuration data.
    * @param array $options
    *   (optional) Any additional database connection options to use in queries.
