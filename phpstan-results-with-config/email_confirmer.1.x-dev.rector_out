modules/contrib/email_confirmer/email_confirmer.api.php
modules/contrib/email_confirmer/email_confirmer.module
modules/contrib/email_confirmer/email_confirmer.tokens.inc
modules/contrib/email_confirmer/email_confirmer_user/email_confirmer_user.module
modules/contrib/email_confirmer/email_confirmer_user/src/Access/UserEmailPendingChangeAccess.php
modules/contrib/email_confirmer/email_confirmer_user/src/Form/EmailConfirmerUserSettingsForm.php
modules/contrib/email_confirmer/email_confirmer_user/src/Form/UserEmailChangeCancelForm.php
modules/contrib/email_confirmer/src/Controller/EmailConfirmerController.php
modules/contrib/email_confirmer/src/EmailConfirmationAccessControlHandler.php
modules/contrib/email_confirmer/src/EmailConfirmationInterface.php
modules/contrib/email_confirmer/src/EmailConfirmerManager.php
modules/contrib/email_confirmer/src/EmailConfirmerManagerInterface.php
modules/contrib/email_confirmer/src/Entity/EmailConfirmation.php
modules/contrib/email_confirmer/src/Form/EmailConfirmerResponseForm.php
modules/contrib/email_confirmer/src/Form/EmailConfirmerSettingsForm.php
modules/contrib/email_confirmer/src/InvalidConfirmationStateException.php
modules/contrib/email_confirmer/src/ParamConverter/UuidConverter.php
modules/contrib/email_confirmer/src/Plugin/QueueWorker/DelayedRequestDispatcher.php

16 files with changes
=====================

1) modules/contrib/email_confirmer/src/Plugin/QueueWorker/DelayedRequestDispatcher.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\email_confirmer\Plugin\QueueWorker;

+use Drupal\email_confirmer\EmailConfirmationInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\Core\Queue\RequeueException;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates a new DelayedRequestDispatcher object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
     }

     // Delivery pendings requests.
-    /** @var \Drupal\email_confirmer\EmailConfirmationInterface $confirmation */
+    /** @var EmailConfirmationInterface $confirmation */
     $confirmation = $this->entityTypeManager->getStorage('email_confirmer_confirmation')->load($data);
     if (!$confirmation) {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/email_confirmer/src/ParamConverter/UuidConverter.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/email_confirmer/src/Form/EmailConfirmerSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\email_confirmer\Form;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Path\PathValidatorInterface;
@@ @@
   /**
    * The path validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(PathValidatorInterface $path_validator, ModuleHandlerInterface $module_handler) {
@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);

-    /** @var \Drupal\Core\Config\ImmutableConfig $config */
+    /** @var ImmutableConfig $config */
     $config = $this->config('email_confirmer.settings');

     // Confirmation process expiration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/email_confirmer/src/Form/EmailConfirmerResponseForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\email_confirmer\Form;

+use Drupal\email_confirmer\EmailConfirmationInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Entity\EntityConfirmFormBase;
@@ @@
    * {@inheritdoc}
    */
   public function getConfirmText() {
-    /** @var \Drupal\email_confirmer\EmailConfirmationInterface $confirmation */
+    /** @var EmailConfirmationInterface $confirmation */
     $confirmation = $this->getEntity();
     return $confirmation->isPending() ? $this->t('Send') : $this->t('OK');
   }
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    /** @var \Drupal\email_confirmer\EmailConfirmationInterface $confirmation */
+    /** @var EmailConfirmationInterface $confirmation */
     $confirmation = $this->getEntity();
     $question = '';

@@ @@
   /**
    * Cancels the email confirmation.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @throws \Drupal\email_confirmer\InvalidConfirmationStateException
+   * @throws InvalidConfirmationStateException
    *   If confirmation is expired, confirmed or already cancelled.
    */
   protected function cancelConfirmation(FormStateInterface $form_state) {
-    /** @var \Drupal\email_confirmer\EmailConfirmationInterface $confirmation */
+    /** @var EmailConfirmationInterface $confirmation */
     $confirmation = $this->getEntity();
     $confirmation->cancel();
     $this->messenger()->addStatus($this->t('Email confirmation cancelled.'));
@@ @@
   /**
    * Confirms the email confirmation.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @throws \Drupal\email_confirmer\InvalidConfirmationStateException
+   * @throws InvalidConfirmationStateException
    *   If confirmation is cancelled, expired or already confirmed.
    */
   protected function confirmConfirmation(FormStateInterface $form_state) {
-    /** @var \Drupal\email_confirmer\EmailConfirmationInterface $confirmation */
+    /** @var EmailConfirmationInterface $confirmation */
     $confirmation = $this->getEntity();
     if (!$confirmation->confirm($this->getRouteMatch()->getParameter('hash'))) {
       $this->confirmationError($form_state);
@@ @@
   /**
    * Common behaviour when there ware errors in confirmation.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function confirmationError(FormStateInterface $form_state) {
@@ @@
    *   - error
    *   Defines the page that will be redirected to.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The url to redirect to.
    */
   protected function getRedirectUrl($operation) {
-    /** @var \Drupal\email_confirmer\EmailConfirmationInterface $confirmation */
+    /** @var EmailConfirmationInterface $confirmation */
     $confirmation = $this->getEntity();
     // Go to confirmation response URL, response path from settings or front.
     if (!$url = $confirmation->getResponseUrl($operation)) {
@@ @@
   /**
    * Skip the response form and positively confirm the confirmation.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirection response according to the confirmation result.
    */
   protected function skipConfirmationForm(FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/email_confirmer/src/Entity/EmailConfirmation.php:52

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
+    /** @var BaseFieldDefinition[] $fields */
     $fields = parent::baseFieldDefinitions($entity_type);

     $fields['cid'] = BaseFieldDefinition::create('integer')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/email_confirmer/src/EmailConfirmerManagerInterface.php:20

    ---------- begin diff ----------
@@ @@
    * @param string $realm
    *   A realm to which this confirmation belongs. Tipically, a module name.
    *
-   * @return \Drupal\email_confirmer\EmailConfirmationInterface
+   * @return EmailConfirmationInterface
    *   The email confirmation entity.
    */
   public function confirm($email, array $data = [], $realm = '');
@@ @@
    * @param string $realm
    *   A realm to filter by.
    *
-   * @return \Drupal\email_confirmer\EmailConfirmationInterface[]
+   * @return EmailConfirmationInterface[]
    *   Array of confirmations found, most recent first. Empty array if none
    *   found.
    */
@@ @@
    * @param string $realm
    *   A realm to filter by.
    *
-   * @return \Drupal\email_confirmer\EmailConfirmationInterface
+   * @return EmailConfirmationInterface
    *   The email confirmation entity. NULL if not found.
    */
   public function getConfirmation($email, $status = FALSE, $realm = '');
@@ @@
    * @param string $email
    *   The email address to confirm.
    *
-   * @return \Drupal\email_confirmer\EmailConfirmationInterface
+   * @return EmailConfirmationInterface
    *   The new email confirmation entity.
    */
   public function createConfirmation($email);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/email_confirmer/src/EmailConfirmerManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\email_confirmer;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Component\Datetime\TimeInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The email_confirmer config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Construct an EmailConfirmerManager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, TimeInterface $time) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/email_confirmer/src/EmailConfirmationInterface.php:137

    ---------- begin diff ----------
@@ @@
    * @return bool
    *   TRUE if request was successfully sent, FALSE on sending error.
    *
-   * @throws \Drupal\email_confirmer\InvalidConfirmationStateException
+   * @throws InvalidConfirmationStateException
    *   If confirmation is cancelled, expired or already confirmed.
    */
   public function sendRequest();
@@ @@
    *   TRUE if confirmation was successfully processed, FALSE on mistmach
    *   hash.
    *
-   * @throws \Drupal\email_confirmer\InvalidConfirmationStateException
+   * @throws InvalidConfirmationStateException
    *   If confirmation is cancelled, expired or already confirmed.
    */
   public function confirm($hash);
@@ @@
   /**
    * Cancel the email confirmation.
    *
-   * @throws \Drupal\email_confirmer\InvalidConfirmationStateException
+   * @throws InvalidConfirmationStateException
    *   If confirmation is expired, confirmed or already cancelled.
    */
   public function cancel();
@@ @@
   /**
    * Set a URL to go on confirmation response.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL to go.
    * @param string $operation
    *   One of 'confirm', 'cancel' or 'error'. Empty to set for all operations.
@@ @@
    * @param string $operation
    *   One of 'confirm', 'cancel' or 'error'.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL. NULL if not set.
    */
   public function getResponseUrl($operation);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/email_confirmer/src/EmailConfirmationAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\email_confirmer;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The email confirmer config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $confirmerConfig;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Creates a new EmailConfirmationAccessControlHandler.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(EntityTypeInterface $entity_type, ConfigFactoryInterface $config_factory, RequestStack $request_stack) {
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\email_confirmer\EmailConfirmationInterface $entity */
+    /** @var EmailConfirmationInterface $entity */
     if ($account->hasPermission('administer email confirmations')) {
       return AccessResult::allowed()->cachePerPermissions();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/email_confirmer/src/Controller/EmailConfirmerController.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Resend confirmation email.
    *
-   * @param \Drupal\email_confirmer\EmailConfirmationInterface $confirmation
+   * @param EmailConfirmationInterface $confirmation
    *   The confirmation entity.
    */
   public function resendConfirmation(EmailConfirmationInterface $confirmation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/email_confirmer/email_confirmer_user/src/Form/UserEmailChangeCancelForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\email_confirmer_user\Form;

+use Drupal\email_confirmer\EmailConfirmationInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\user\UserDataInterface;
@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * The email confirmer.
    *
-   * @var \Drupal\email_confirmer\EmailConfirmerManagerInterface
+   * @var EmailConfirmerManagerInterface
    */
   protected $emailConfirmer;

@@ @@
   /**
    * Constructs a UserEmailChangeCancelForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
-   * @param \Drupal\email_confirmer\EmailConfirmerManagerInterface $email_confirmer
+   * @param EmailConfirmerManagerInterface $email_confirmer
    *   The email confirmer.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, UserDataInterface $user_data, EmailConfirmerManagerInterface $email_confirmer) {
@@ @@
     $cancel_url = NULL;

     // Cancel any pending address confirmation for the requested new email.
-    /** @var \Drupal\email_confirmer\EmailConfirmationInterface $confirmation */
+    /** @var EmailConfirmationInterface $confirmation */
     foreach ($this->emailConfirmer->getConfirmations($new_email, 'pending', 0, 'email_confirmer_user') as $confirmation) {
       $confirmation->cancel();
       $confirmation->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/email_confirmer/email_confirmer_user/src/Form/EmailConfirmerUserSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\email_confirmer_user\Form;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);

-    /** @var \Drupal\Core\Config\ImmutableConfig $config */
+    /** @var ImmutableConfig $config */
     $config = $this->config('email_confirmer_user.settings');

     // User email address confirmation on change options.
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\ImmutableConfig $config */
+    /** @var ImmutableConfig $config */
     $config = $this->config('email_confirmer_user.settings');

     $config->set('user_email_change', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/email_confirmer/email_confirmer_user/src/Access/UserEmailPendingChangeAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\email_confirmer_user\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Constructs a UserEmailChangeAccess instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, UserDataInterface $user_data) {
@@ @@
   /**
    * Checks access to the given user's pending email change.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user whose email address is pending confirmation of change.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(UserInterface $user, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/email_confirmer/email_confirmer_user/email_confirmer_user.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\UserInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Users related email confirmation module.
@@ @@
  * Implements hook_ENTITY_TYPE_presave().
  */
 function email_confirmer_user_user_presave(EntityInterface $entity) {
-  /** @var \Drupal\user\UserInterface $entity */
+  /** @var UserInterface $entity */
   // Do nothing if no user email update, currently in a confirmer operation or
   // email change confirmation is disabled.
   if (!isset($entity->original)
@@ @@
   if ($config['consider_existent']
     && !empty($confirmations = \Drupal::service('email_confirmer')->getConfirmations($new_email, 'confirmed', 0, $config['limit_user_realm'] ? 'email_confirmer_user' : ''))) {
     // Limit to user's own confirmations.
-    /** @var \Drupal\email_confirmer\EmailConfirmationInterface $confirmation */
+    /** @var EmailConfirmationInterface $confirmation */
     foreach ($confirmations as $confirmation) {
       if ($confirmation->uid->target_id == $entity->id()) {
         return;
@@ @@
  * Implements hook_email_confirmer().
  */
 function email_confirmer_user_email_confirmer($op, EmailConfirmationInterface $confirmation) {
-  /** @var \Drupal\user\UserInterface $user */
+  /** @var UserInterface $user */
   if ($confirmation->getRealm() == 'email_confirmer_user'
     && ($config = \Drupal::config('email_confirmer_user.settings')->get('user_email_change'))
     && $config['enabled']
@@ @@
  */
 function email_confirmer_user_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $config = \Drupal::config('email_confirmer_user.settings')->get('user_email_change');
-  /** @var \Drupal\user\UserInterface $user */
+  /** @var UserInterface $user */
   $user = $form_state->getFormObject()->getEntity();

   // Nothing to do with new accounts.
@@ @@
   }

   // Tell the user about email changes pending confirmation.
-  /** @var \Drupal\email_confirmer\EmailConfirmationInterface $confirmation */
+  /** @var EmailConfirmationInterface $confirmation */
   if ($config['enabled']
     && ($new_email = \Drupal::service('user.data')->get('email_confirmer_user', $user->id(), 'email_change_new_address'))
     && !empty($confirmations = \Drupal::service('email_confirmer')->getConfirmations($new_email, 'pending', 0, 'email_confirmer_user'))) {
@@ @@

   // Register a confirmed email confirmation for new created accounts on their
   // first access or when a user logins through a one time login link.
-  /** @var \Drupal\Core\Session\AccountInterface $account */
+  /** @var AccountInterface $account */
   if (((!$account->getLastAccessedTime() && $config['sync_core_confirmation'])
       || (\Drupal::routeMatch()->getRouteName() == 'user.reset.login' && $config['sync_core_onetimeloginlinks']))
     && !\Drupal::service('email_confirmer')->getConfirmation($account->getEmail(), 'confirmed')) {
@@ @@
  * Implements hook_entity_type_alter().
  */
 function email_confirmer_user_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['user']->setFormClass('cancel_email_change', '\Drupal\email_confirmer_user\Form\UserEmailChangeCancelForm');
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


15) modules/contrib/email_confirmer/email_confirmer.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\email_confirmer\EmailConfirmationInterface;
 /**
  * @file
  * Token related hook implementations.
@@ @@

   $replacements = [];

-  /** @var \Drupal\email_confirmer\EmailConfirmationInterface $confirmation */
+  /** @var EmailConfirmationInterface $confirmation */
   $confirmation = $data['email_confirmer_confirmation'];

   foreach ($tokens as $name => $original) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


16) modules/contrib/email_confirmer/email_confirmer.api.php:14

    ---------- begin diff ----------
@@ @@
  *
  * @param string $op
  *   Either "confirm" or "cancel".
- * @param \Drupal\email_confirmer\EmailConfirmationInterface $confirmation
+ * @param EmailConfirmationInterface $confirmation
  *   The confirmation process.
  */
 function hook_email_confirmer($op, EmailConfirmationInterface $confirmation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 16 files have been changed by Rector                                      

