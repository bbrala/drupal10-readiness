modules/contrib/scheduled_message/scheduled_message.install
modules/contrib/scheduled_message/scheduled_message.module
modules/contrib/scheduled_message/scheduled_message_easy_email/scheduled_message_easy_email.module
modules/contrib/scheduled_message/scheduled_message_easy_email/src/EventSubscriber/ScheduledMessageEasyEmailSubscriber.php
modules/contrib/scheduled_message/scheduled_message_message/scheduled_message_message.module
modules/contrib/scheduled_message/scheduled_message_message/src/EventSubscriber/ScheduledMessageMessageSubscriber.php
modules/contrib/scheduled_message/src/Annotation/ScheduledMessage.php
modules/contrib/scheduled_message/src/Entity/ScheduledMessage.php
modules/contrib/scheduled_message/src/Entity/ScheduledMessageInterface.php
modules/contrib/scheduled_message/src/Entity/ScheduledMessageType.php
modules/contrib/scheduled_message/src/Entity/ScheduledMessageTypeInterface.php
modules/contrib/scheduled_message/src/Event/ScheduledMessageEvent.php
modules/contrib/scheduled_message/src/Event/ScheduledMessageEvents.php
modules/contrib/scheduled_message/src/Form/EntityTypesForm.php
modules/contrib/scheduled_message/src/Form/ScheduledMessageAddForm.php
modules/contrib/scheduled_message/src/Form/ScheduledMessageDeleteForm.php
modules/contrib/scheduled_message/src/Form/ScheduledMessageEditForm.php
modules/contrib/scheduled_message/src/Form/ScheduledMessageForm.php
modules/contrib/scheduled_message/src/Form/ScheduledMessageFormBase.php
modules/contrib/scheduled_message/src/Form/ScheduledMessageTypeForm.php
modules/contrib/scheduled_message/src/Plugin/QueueWorker/EntityQueue.php
modules/contrib/scheduled_message/src/Plugin/QueueWorker/ScheduledMessageCronWorker.php
modules/contrib/scheduled_message/src/Plugin/QueueWorker/ScheduledMessageWorkerBase.php
modules/contrib/scheduled_message/src/QueueManager.php
modules/contrib/scheduled_message/src/ScheduledMessageAccessControlHandler.php
modules/contrib/scheduled_message/src/ScheduledMessageListBuilder.php
modules/contrib/scheduled_message/src/ScheduledMessageTypeListBuilder.php

16 files with changes
=====================

1) modules/contrib/scheduled_message/src/ScheduledMessageListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new ScheduledMessageListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/scheduled_message/src/QueueManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_message;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The QueueFactory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * Module Handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    * Checks for this message in the queue, and adds if it does not exist, or
    * updates if it does exist. If no longer relevant, delete.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $trigger
+   * @param ContentEntityInterface $trigger
    *   The entity to schedule/reschedule.
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ScheduledMessageTypeInterface $schedule
    *   The Scheduled Message config
    */
   public function queueTriggerEntity(ContentEntityInterface $trigger, ScheduledMessageTypeInterface $schedule) {
@@ @@
   /**
    * Queue individual messages to send.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $recipient
+   * @param ContentEntityInterface $recipient
    *   Recipient entity.
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ScheduledMessageTypeInterface $schedule
    *   The schedule.
    */
   public function queueRecipientEntity(ContentEntityInterface $recipient, ScheduledMessageTypeInterface $schedule) {
@@ @@
   /**
    * Create a Scheduled Message entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $trigger
-   * @param \Drupal\Core\Entity\ContentEntityInterface $recipient
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ContentEntityInterface $trigger
+   * @param ContentEntityInterface $recipient
+   * @param ScheduledMessageTypeInterface $schedule
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   function createMessage(ContentEntityInterface $trigger, ContentEntityInterface $recipient, ScheduledMessageTypeInterface $schedule) {
     if ($recipient->hasField('uid')) {
@@ @@
   /**
    * Get the trigger entity, given the recipient and the schedule.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $recipient
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ContentEntityInterface $recipient
+   * @param ScheduledMessageTypeInterface $schedule
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   function getTrigger(ContentEntityInterface $recipient, ScheduledMessageTypeInterface $schedule) {
     $trigger_type = $schedule->getTriggerEntityType();
@@ @@
   /**
    * Get recipients for schedule based on trigger.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $trigger
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ContentEntityInterface $trigger
+   * @param ScheduledMessageTypeInterface $schedule
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ContentEntityInterface[]
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   function getRecipients(ContentEntityInterface $trigger, ScheduledMessageTypeInterface $schedule) {
     $recipient_type = $schedule->getRecipientEntityType();
@@ @@
   /**
    * Whether there should be a message for this schedule, trigger, and recipient combination.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $trigger
-   * @param \Drupal\Core\Entity\ContentEntityInterface $recipient
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ContentEntityInterface $trigger
+   * @param ContentEntityInterface $recipient
+   * @param ScheduledMessageTypeInterface $schedule
    *
    * @return bool
    */
@@ @@
    *   The entities to add.
    * @param string $config_type
    *   The entity bundle.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entityType
+   * @param ConfigEntityInterface $entityType
    *   The entity type config entity.
    */
   public function queueEntities(array $entities, $config_type, ConfigEntityInterface $entityType) {
@@ @@
   /**
    * Generate all messages listed on Type, according to plugin settings.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Content entity to generate scheduled messages.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $type
+   * @param ConfigEntityInterface $type
    *   Entity Type to find schedule.
    */
   public function generateScheduledMessages(ContentEntityInterface $entity, ConfigEntityInterface $type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/scheduled_message/src/Plugin/QueueWorker/ScheduledMessageWorkerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_message\Plugin\QueueWorker;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\scheduled_message\Entity\ScheduledMessage;
@@ @@
   /**
    * EntityStorage for message entity.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $messageStorage;

@@ @@
   /**
    * Event Dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $eventDispatcher) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
     $schedule = $message->get('bundle')->entity;

     $event = new ScheduledMessageEvent($message, $schedule);
-    $this->eventDispatcher->dispatch(ScheduledMessageEvents::SEND_MESSAGE, $event);
+    $this->eventDispatcher->dispatch($event, ScheduledMessageEvents::SEND_MESSAGE);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/scheduled_message/src/Plugin/QueueWorker/EntityQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_message\Plugin\QueueWorker;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Logger\LoggerChannelTrait;
@@ @@
   use LoggerChannelTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\scheduled_message\QueueManager
+   * @var QueueManager
    */
   protected $queueManager;

@@ @@
    * @inheritDoc
    */
   public function processItem($data) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = isset($data->entity) ?
       $data->entity :
       $this->entityTypeManager
         ->getStorage($data->trigger_entity_type)->load($data->trigger_id);

-    /** @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule */
+    /** @var ScheduledMessageTypeInterface $schedule */
     $schedule = $this->entityTypeManager
       ->getStorage('scheduled_message_type')->load($data->schedule_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/scheduled_message/src/Form/ScheduledMessageTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_message\Form;

+use Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $entity_type */
+    /** @var ScheduledMessageTypeInterface $entity_type */
     $entity_type = $this->entity;
     if ($this->operation == 'add') {
       $form['#title'] = $this->t('Add scheduled message type');
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $entity_type */
+    /** @var ScheduledMessageTypeInterface $entity_type */
     $entity_type = $this->entity;

     $entity_type->set('id', trim($entity_type->id()));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/scheduled_message/src/Form/ScheduledMessageFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_message\Form;

+use Drupal\Core\Config\Entity\ConfigEntityBase;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ @@
   /**
    * The parent entity containing the scheduled message to be deleted.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityBase
+   * @var ConfigEntityBase
    */
   protected $baseEntity;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, $entity_type = NULL, $entity_id = NULL, $scheduled_message = NULL) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
+    /** @var ConfigEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($entity_type);
     $this->baseEntity = $storage->load($entity_id);
     $this->scheduledMessage = $this->getMessagePlugin($scheduled_message);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/scheduled_message/src/Form/ScheduledMessageForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New scheduled message %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/scheduled_message/src/Form/ScheduledMessageDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_message\Form;

+use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
   /**
    * The parent entity containing the scheduled message to be deleted.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityBase
+   * @var ConfigEntityBase
    */
   protected $baseEntity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/scheduled_message/src/Form/EntityTypesForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/scheduled_message/src/Event/ScheduledMessageEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_message\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\scheduled_message\Entity\ScheduledMessageInterface;
 use Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Scheduled Message event.
@@ @@
   /**
    * The Scheduled Message.
    *
-   * @var \Drupal\scheduled_message\Entity\ScheduledMessageInterface
+   * @var ScheduledMessageInterface
    */
   protected $message;

@@ @@
   /**
    * The message schedule.
    *
-   * @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface
+   * @var ScheduledMessageTypeInterface
    */
   protected $schedule;

@@ @@
   /**
    * ScheduledMessageEvent constructor.
    *
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageInterface $message
+   * @param ScheduledMessageInterface $message
    *   The message.
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ScheduledMessageTypeInterface $schedule
    *   The schedule.
    */
   public function __construct(ScheduledMessageInterface $message, ScheduledMessageTypeInterface $schedule) {
@@ @@
   /**
    * Get the message.
    *
-   * @return \Drupal\scheduled_message\Entity\ScheduledMessageInterface
+   * @return ScheduledMessageInterface
    *   The message.
    */
   public function getMessage() {
@@ @@
   /**
    * Get the schedule.
    *
-   * @return \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface
+   * @return ScheduledMessageTypeInterface
    */
   public function getSchedule() {
     return $this->schedule;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/scheduled_message/src/Entity/ScheduledMessage.php:286

    ---------- begin diff ----------
@@ @@

   public static function bundleFieldDefinitions(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
     $fields = parent::bundleFieldDefinitions($entity_type, $bundle, $base_field_definitions); // TODO: Change the autogenerated stub
-
-    /** @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $sm_type */
+    /** @var ScheduledMessageTypeInterface $sm_type */
     $sm_type = ScheduledMessageType::load($bundle);

     $trigger = clone $base_field_definitions['trigger'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/scheduled_message/src/Annotation/ScheduledMessage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_message\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


13) modules/contrib/scheduled_message/scheduled_message_message/src/EventSubscriber/ScheduledMessageMessageSubscriber.php:8

    ---------- begin diff ----------
@@ @@
 use Drupal\scheduled_message\Event\ScheduledMessageEvent;
 use Drupal\scheduled_message\Event\ScheduledMessageEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * EntityType Manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Scheduled Message event handler.
    *
-   * @param \Drupal\scheduled_message\Event\ScheduledMessageEvent $event
+   * @param ScheduledMessageEvent $event
    *   Response event.
    */
   public function onSendMessage(ScheduledMessageEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/scheduled_message/scheduled_message_easy_email/src/EventSubscriber/ScheduledMessageEasyEmailSubscriber.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Email Validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;

@@ @@
    *
    * @param \Drupal\easy_email\Service\EmailHandlerInterface $easy_email_handler
    *   Easy Email handler.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   Email Validator.
    */
   public function __construct(EmailHandlerInterface $easy_email_handler, EmailValidatorInterface $email_validator) {
@@ @@
   /**
    * Scheduled Message event handler.
    *
-   * @param \Drupal\scheduled_message\Event\ScheduledMessageEvent $event
+   * @param ScheduledMessageEvent $event
    *   Response event.
    */
   public function onSendMessage(ScheduledMessageEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/scheduled_message/scheduled_message.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\scheduled_message\QueueManager;
+use Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface;
 /**
  * @file
  * Provides a scheduled message entity type.
@@ @@
       'trigger_entity_bundle' => $bundle,
     ]);
     if (count($schedules)) {
-      /** @var \Drupal\scheduled_message\QueueManager $queueManager */
+      /** @var QueueManager $queueManager */
       $queueManager = \Drupal::service('scheduled_message.queue_manager');
-      /** @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule */
+      /** @var ScheduledMessageTypeInterface $schedule */
       foreach ($schedules as $schedule) {
         $queueManager->queueTriggerEntity($entity, $schedule);
       }
@@ @@
       'recipient_entity_bundle' => $bundle,
     ]);
     if (count($schedules)) {
-      /** @var \Drupal\scheduled_message\QueueManager $queueManager */
+      /** @var QueueManager $queueManager */
       $queueManager = \Drupal::service('scheduled_message.queue_manager');
-      /** @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule */
+      /** @var ScheduledMessageTypeInterface $schedule */
       foreach ($schedules as $schedule) {
         $queueManager->queueRecipientEntity($entity, $schedule);
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


16) modules/contrib/scheduled_message/scheduled_message.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\scheduled_message\Entity\ScheduledMessage;
 /**
  * Update entity field definitions to match schema.
  */
@@ @@
 function scheduled_message_update_8001(&$sandbox) {
   $dm = \Drupal::entityDefinitionUpdateManager();
   $entity_def = $dm->getEntityType('scheduled_message');
-  $base_fields = \Drupal\scheduled_message\Entity\ScheduledMessage::baseFieldDefinitions($entity_def);
+  $base_fields = ScheduledMessage::baseFieldDefinitions($entity_def);

   $remove = ['message_module', 'message_template', 'send_at', 'sent'];
   foreach ($remove as $field) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 16 files have been changed by Rector                                      

