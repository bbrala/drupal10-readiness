modules/contrib/oh/modules/date_recur_oh_field/date_recur_oh_field.module
modules/contrib/oh/modules/date_recur_oh_field/src/Plugin/Field/FieldType/DateRecurOHItem.php
modules/contrib/oh/modules/date_recur_oh_field/src/Plugin/Validation/Constraint/DateRecurOhStatusConstraint.php
modules/contrib/oh/modules/date_recur_oh_field/src/Plugin/Validation/Constraint/DateRecurOhStatusConstraintValidator.php
modules/contrib/oh/modules/oh_regular/src/Access/IsOhBundleAccessCheck.php
modules/contrib/oh/modules/oh_regular/src/Entity/Form/OhRegularMapDeleteForm.php
modules/contrib/oh/modules/oh_regular/src/Entity/Form/OhRegularMapForm.php
modules/contrib/oh/modules/oh_regular/src/Entity/OhRegularMap.php
modules/contrib/oh/modules/oh_regular/src/Entity/Routing/OhRegularMapRouteProvider.php
modules/contrib/oh/modules/oh_regular/src/OhRegular.php
modules/contrib/oh/modules/oh_regular/src/OhRegularInterface.php
modules/contrib/oh/modules/oh_regular/src/OhRegularMapInterface.php
modules/contrib/oh/modules/oh_regular/src/OhRegularMapListBuilder.php
modules/contrib/oh/modules/oh_regular/src/OhRegularSubscriber.php
modules/contrib/oh/modules/oh_regular/tests/src/Kernel/OhRegularHoursTest.php
modules/contrib/oh/modules/oh_review/oh_review.module
modules/contrib/oh/modules/oh_review/src/Controller/OhReviewReport.php
modules/contrib/oh/modules/oh_review/src/Form/OhReviewSidebarForm.php
modules/contrib/oh/modules/oh_review/src/OhReviewUtility.php
modules/contrib/oh/modules/oh_review/src/Plugin/Derivative/OhReviewContextualLinks.php
modules/contrib/oh/modules/oh_review/src/Routing/OhReviewRouteSubscriber.php
modules/contrib/oh/modules/oh_review/src/tests/src/Unit/OhReviewUtilityTest.php
modules/contrib/oh/src/Event/OhEvents.php
modules/contrib/oh/src/Event/OhExceptionEvent.php
modules/contrib/oh/src/Event/OhProcessEvent.php
modules/contrib/oh/src/Event/OhRegularEvent.php
modules/contrib/oh/src/EventSubscriber/OhEventSubscriber.php
modules/contrib/oh/src/OhDateRange.php
modules/contrib/oh/src/OhOccurrence.php
modules/contrib/oh/src/OhOpeningHours.php
modules/contrib/oh/src/OhOpeningHoursInterface.php
modules/contrib/oh/src/OhUtility.php
modules/contrib/oh/tests/modules/oh_test/src/OhTestExceptionSubscriber.php
modules/contrib/oh/tests/modules/oh_test/src/OhTestRegularSubscriber.php
modules/contrib/oh/tests/src/Kernel/OhOpeningHoursServiceTest.php
modules/contrib/oh/tests/src/Kernel/OhProcessTest.php
modules/contrib/oh/tests/src/Kernel/OhTestTrait.php
modules/contrib/oh/tests/src/Unit/OhDateRangeTest.php
modules/contrib/oh/tests/src/Unit/OhFlattenTest.php
modules/contrib/oh/tests/src/Unit/OhOccurrenceTest.php

29 files with changes
=====================

1) modules/contrib/oh/tests/src/Unit/OhOccurrenceTest.php:76

    ---------- begin diff ----------
@@ @@
    * @covers ::getCacheMaxAge
    */
   public function testCachability(): void {
-    $cacheContextsManager = $this->getMockBuilder(CacheContextsManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cacheContextsManager = $this->createMock(CacheContextsManager::class);
     $cacheContextsManager->method('assertValidTokens')->willReturn(TRUE);
     $container = new ContainerBuilder();
     $container->set('cache_contexts_manager', $cacheContextsManager);
@@ @@
   /**
    * Create a new occurrence.
    *
-   * @return \Drupal\oh\OhOccurrence
+   * @return OhOccurrence
    *   New occurrence object.
    */
   protected function createOccurrence() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/oh/tests/src/Unit/OhFlattenTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Tests occurrences are flattened.
    *
-   * @param \Drupal\oh\OhOccurrence[] $occurrences
+   * @param OhOccurrence[] $occurrences
    *   A series of occurrences to flatten.
-   * @param \Drupal\oh\OhOccurrence[] $expected
+   * @param OhOccurrence[] $expected
    *   Expected flattened occurrences.
    *
    * @dataProvider providerCompute
@@ @@
    * Tests occurrences are flattened and cacheability is retained.
    */
   public function testCacheability(): void {
-    $cache_contexts_manager = $this->getMockBuilder(CacheContextsManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cache_contexts_manager = $this->createMock(CacheContextsManager::class);
     $cache_contexts_manager->method('assertValidTokens')->willReturn(TRUE);
     $container = new Container();
     $container->set('cache_contexts_manager', $cache_contexts_manager);
@@ @@
   /**
    * Compares two arrays of occurrences.
    *
-   * @param \Drupal\oh\OhOccurrence[] $expected
+   * @param OhOccurrence[] $expected
    *   Expected array of occurrences.
-   * @param \Drupal\oh\OhOccurrence[] $actual
+   * @param OhOccurrence[] $actual
    *   Actual array of occurrences.
    */
   public function assertCompare(array $expected, array $actual) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/oh/tests/src/Unit/OhDateRangeTest.php:88

    ---------- begin diff ----------
@@ @@
    * @covers ::sort
    */
   public function testSort() {
-    /** @var \Drupal\oh\OhDateRange[] $ranges */
+    /** @var OhDateRange[] $ranges */
     $ranges = [];

     $start1 = new \DateTime('1 Jan 2016 12:00:00');
@@ @@
    * @param array $args
    *   Arguments to pass to constructor.
    *
-   * @return \Drupal\oh\OhDateRange
+   * @return OhDateRange
    *   New range object.
    */
   protected function createDateRange(...$args) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/oh/tests/src/Kernel/OhProcessTest.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * Opening hours service.
    *
-   * @return \Drupal\oh\OhOpeningHoursInterface
+   * @return OhOpeningHoursInterface
    *   The opening hours service.
    */
   protected function openingHoursService(): OhOpeningHoursInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/oh/tests/src/Kernel/OhOpeningHoursServiceTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\oh\Kernel;

+use Drupal\oh\OhOccurrence;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\oh\OhDateRange;
@@ @@
   /**
    * Opening hours service.
    *
-   * @return \Drupal\oh\OhOpeningHoursInterface
+   * @return OhOpeningHoursInterface
    *   The opening hours service.
    */
   protected function openingHoursService(): OhOpeningHoursInterface {
@@ @@
   /**
    * Utility to group occurrences by day.
    *
-   * @param iterable|\Drupal\oh\OhOccurrence[] $occurrences
+   * @param iterable|OhOccurrence[] $occurrences
    *   A list of occurrences.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/oh/tests/modules/oh_test/src/OhTestRegularSubscriber.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Test regular hours.
    *
-   * @param \Drupal\oh\Event\OhRegularEvent $event
+   * @param OhRegularEvent $event
    *   Regular hours event.
    */
   public function regularHours(OhRegularEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/oh/tests/modules/oh_test/src/OhTestExceptionSubscriber.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Test exceptions.
    *
-   * @param \Drupal\oh\Event\OhExceptionEvent $event
+   * @param OhExceptionEvent $event
    *   Exception event.
    */
   public function exceptions(OhExceptionEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/oh/src/OhUtility.php:21

    ---------- begin diff ----------
@@ @@
    * If occurrences have messages, they will be broken up too. Handle
    * appropriately, such as deduplication, on the front end.
    *
-   * @param \Drupal\oh\OhOccurrence[] $occurrences
+   * @param OhOccurrence[] $occurrences
    *   An array of occurrences to flatten.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   An array of occurrences whose ranges do not overlap.
    */
   public static function flattenOccurrences(array $occurrences) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/oh/src/OhOpeningHoursInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Get hours for a location between a range.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   Get occurrences between a range of dates.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   An chronologically ordered array of occurrences, where occurrences
    *   do not overlap/intersect. E.g you may receive occurrences:
    *     For:
@@ @@
    * Its recommended to use ::getOccurrences instead as this function flattens
    * opening and closures for easier handling.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   Get occurrences between a range of dates.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   An unordered array of occurrences. Closures time periods will overlap
    *   regular-openings and exception-openings. E.g you may receive occurrences:
    *     For:
@@ @@
   /**
    * Get regular hours for a location between a range.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   Get regular hours between a range of dates.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   An unordered array of occurrences.
    */
   public function getRegularHours(EntityInterface $entity, OhDateRange $range): array;
@@ @@
   /**
    * Get exceptions for a location between a range.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   Get exceptions between a range of dates.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   An unordered array of occurrences.
    */
   public function getExceptions(EntityInterface $entity, OhDateRange $range): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/oh/src/OhOpeningHours.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs the opening hours service.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   An event dispatcher instance to use for configuration events.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ @@
   public function getOccurrences(EntityInterface $entity, OhDateRange $range): array {
     $occurrences = $this->getDimensionalOccurrences($entity, $range);
     $event = new OhProcessEvent($entity, $range, $occurrences);
-    $this->eventDispatcher->dispatch(OhEvents::PROCESS, $event);
+    $this->eventDispatcher->dispatch($event, OhEvents::PROCESS);
     return $event->getOccurrences();
   }

@@ @@
    */
   public function getRegularHours(EntityInterface $entity, OhDateRange $range): array {
     $event = new OhRegularEvent($entity, $range);
-    $this->eventDispatcher->dispatch(OhEvents::REGULAR, $event);
+    $this->eventDispatcher->dispatch($event, OhEvents::REGULAR);
     return $event->getRegularHours();
   }

@@ @@
    */
   public function getExceptions(EntityInterface $entity, OhDateRange $range): array {
     $event = new OhExceptionEvent($entity, $range);
-    $this->eventDispatcher->dispatch(OhEvents::EXCEPTIONS, $event);
+    $this->eventDispatcher->dispatch($event, OhEvents::EXCEPTIONS);
     return $event->getExceptions();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/oh/src/OhOccurrence.php:148

    ---------- begin diff ----------
@@ @@
   /**
    * Modifies start and end date so they are within a range.
    *
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   A range to modify the range of this occurrence to.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/oh/src/EventSubscriber/OhEventSubscriber.php:35

    ---------- begin diff ----------
@@ @@
    * Records full day occurrences, so partial occurrence messages can be
    * removed.
    *
-   * @param \Drupal\oh\Event\OhProcessEvent $event
+   * @param OhProcessEvent $event
    *   Process event.
    */
   public function gatherFullDay(OhProcessEvent $event): void {
@@ @@
   /**
    * Flattens occurrences.
    *
-   * @param \Drupal\oh\Event\OhProcessEvent $event
+   * @param OhProcessEvent $event
    *   Process event.
    */
   public function flattenOccurrences(OhProcessEvent $event): void {
@@ @@
    *
    * Removes any messages acquired from partial day.
    *
-   * @param \Drupal\oh\Event\OhProcessEvent $event
+   * @param OhProcessEvent $event
    *   Process event.
    */
   public function reapplyMessages(OhProcessEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/oh/src/Event/OhRegularEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oh\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\oh\OhDateRange;
 use Drupal\oh\OhOccurrence;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Used to add regular hours between a date range.
@@ @@
   /**
    * The location.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * The regular hours for a location.
    *
-   * @var \Drupal\oh\OhOccurrence[]
+   * @var OhOccurrence[]
    */
   protected $regularHours = [];

@@ @@
   /**
    * The date range to get regular hours between.
    *
-   * @var \Drupal\oh\OhDateRange
+   * @var OhDateRange
    */
   protected $range;

@@ @@
   /**
    * Construct a new OhRegularEvent.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   Get regular hours between a range of dates.
    */
   public function __construct(EntityInterface $entity, OhDateRange $range) {
@@ @@
   /**
    * Get the location.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The location.
    */
   public function getEntity(): EntityInterface {
@@ @@
   /**
    * Get the date range to get regular hours between.
    *
-   * @return \Drupal\oh\OhDateRange
+   * @return OhDateRange
    *   The date range to get regular hours between.
    */
   public function getRange(): OhDateRange {
@@ @@
   /**
    * Add regular hours for a location.
    *
-   * @param \Drupal\oh\OhOccurrence $occurrence
+   * @param OhOccurrence $occurrence
    *   Regular hours for a location.
    *
    * @return $this
@@ @@
   /**
    * Get the regular hours for a location.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   The regular hours for a location.
    */
   public function getRegularHours(): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/oh/src/Event/OhProcessEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oh\Event;

+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\oh\OhOccurrence;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\oh\OhDateRange;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Used to process opening hours after they have been computed.
@@ @@
   /**
    * The location.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * The date range of hours.
    *
-   * @var \Drupal\oh\OhDateRange
+   * @var OhDateRange
    */
   protected $range;

@@ @@
   /**
    * Occurrences to process.
    *
-   * @var \Drupal\oh\OhOccurrence[]
+   * @var OhOccurrence[]
    */
   protected $occurrences;

@@ @@
   /**
    * Construct a new OhProcessEvent.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   The date range of hours.
-   * @param \Drupal\oh\OhOccurrence[] $occurrences
+   * @param OhOccurrence[] $occurrences
    *   An array of occurrences.
    */
   public function __construct(EntityInterface $entity, OhDateRange $range, array $occurrences) {
@@ @@
   /**
    * Get the location.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The location.
    */
   public function getEntity(): EntityInterface {
@@ @@
   /**
    * Get the date range of hours.
    *
-   * @return \Drupal\oh\OhDateRange
+   * @return OhDateRange
    *   The date range of hours.
    */
   public function getRange(): OhDateRange {
@@ @@
   /**
    * Get occurrences.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   Occurrences to process.
    */
   public function getOccurrences(): array {
@@ @@
   /**
    * Set occurrences.
    *
-   * @param \Drupal\oh\OhOccurrence[] $occurrences
+   * @param OhOccurrence[] $occurrences
    *   Occurrences to process.
    */
   public function setOccurrences(array $occurrences): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/oh/src/Event/OhExceptionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oh\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\oh\OhDateRange;
 use Drupal\oh\OhOccurrence;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Used to add exceptions between a date range.
@@ @@
   /**
    * The location.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * The exceptions for a location.
    *
-   * @var \Drupal\oh\OhOccurrence[]
+   * @var OhOccurrence[]
    */
   protected $exceptions = [];

@@ @@
   /**
    * The date range to get exceptions between.
    *
-   * @var \Drupal\oh\OhDateRange
+   * @var OhDateRange
    */
   protected $range;

@@ @@
   /**
    * Construct a new OhExceptionEvent.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   Get exceptions between a range of dates.
    */
   public function __construct(EntityInterface $entity, OhDateRange $range) {
@@ @@
   /**
    * Get the location.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The location.
    */
   public function getEntity(): EntityInterface {
@@ @@
   /**
    * Get the date range to get exceptions between.
    *
-   * @return \Drupal\oh\OhDateRange
+   * @return OhDateRange
    *   The date range to get exceptions between.
    */
   public function getRange(): OhDateRange {
@@ @@
   /**
    * Add an exception for a location.
    *
-   * @param \Drupal\oh\OhOccurrence $occurrence
+   * @param OhOccurrence $occurrence
    *   An exception for a location.
    *
    * @return $this
@@ @@
   /**
    * Get the exceptions for a location.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   The exceptions for a location.
    */
   public function getExceptions(): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/oh/modules/oh_review/src/Routing/OhReviewRouteSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * OH regular service.
    *
-   * @var \Drupal\oh_regular\OhRegularInterface
+   * @var OhRegularInterface
    */
   protected $ohRegular;

@@ @@
   /**
    * Construct OhRegularSubscriber service.
    *
-   * @param \Drupal\oh_regular\OhRegularInterface $ohRegular
+   * @param OhRegularInterface $ohRegular
    *   OH regular service.
    */
   public function __construct(OhRegularInterface $ohRegular) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/oh/modules/oh_review/src/Plugin/Derivative/OhReviewContextualLinks.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * OH regular service.
    *
-   * @var \Drupal\oh_regular\OhRegularInterface
+   * @var OhRegularInterface
    */
   protected $ohRegular;

@@ @@
   /**
    * Construct OhRegularSubscriber service.
    *
-   * @param \Drupal\oh_regular\OhRegularInterface $ohRegular
+   * @param OhRegularInterface $ohRegular
    *   OH regular service.
    */
   public function __construct(OhRegularInterface $ohRegular) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/oh/modules/oh_review/src/OhReviewUtility.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Groups occurrences into days and weeks.
    *
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   The full occurrence range.
    * @param array $occurrences
    *   An array of occurrences.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/oh/modules/oh_review/src/Form/OhReviewSidebarForm.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The opening hours service.
    *
-   * @var \Drupal\oh\OhOpeningHoursInterface
+   * @var OhOpeningHoursInterface
    */
   protected $openingHours;

@@ @@
   /**
    * Constructs a new OhReviewController.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   A config factory for retrieving required config objects.
-   * @param \Drupal\oh\OhOpeningHoursInterface $openingHours
+   * @param OhOpeningHoursInterface $openingHours
    *   Opening hours service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, OhOpeningHoursInterface $openingHours) {
@@ @@
   /**
    * Generate the opening hours preview.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get opening hours.
    * @param string $mode
    *   The preview mode. See static::PREVIEW_MODE* constants.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/oh/modules/oh_review/src/Controller/OhReviewReport.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The opening hours service.
    *
-   * @var \Drupal\oh\OhOpeningHoursInterface
+   * @var OhOpeningHoursInterface
    */
   protected $openingHours;

@@ @@
   /**
    * OH regular service.
    *
-   * @var \Drupal\oh_regular\OhRegularInterface
+   * @var OhRegularInterface
    */
   protected $ohRegular;

@@ @@
   /**
    * Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Construct a new OhReviewReport.
    *
-   * @param \Drupal\oh\OhOpeningHoursInterface $openingHours
+   * @param OhOpeningHoursInterface $openingHours
    *   Opening hours service.
-   * @param \Drupal\oh_regular\OhRegularInterface $ohRegular
+   * @param OhRegularInterface $ohRegular
    *   OH regular service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer.
    */
   public function __construct(OhOpeningHoursInterface $openingHours, OhRegularInterface $ohRegular, RendererInterface $renderer) {
@@ @@
   /**
    * Loads entities progressively.
    *
-   * @return \Generator|\Drupal\Core\Entity\EntityInterface[]
+   * @return \Generator|EntityInterface[]
    *   Generates entities.
    */
   protected function loadEntities() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/oh/modules/oh_review/oh_review.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\oh\OhDateRange;
 /**
  * @file
  * Hooks for OH Review module.
@@ @@
     return $end >= $startPlusFullDay;
   };

-  /** @var \Drupal\oh\OhOccurrence[] $occurrences */
+  /** @var OhOccurrence[] $occurrences */
   $occurrences = $variables['occurrences'];
-  /** @var \Drupal\oh\OhDateRange $range */
+  /** @var OhDateRange $range */
   $range = $variables['range'];

   uasort($occurrences, [OhOccurrence::class, 'sort']);
@@ @@
 function template_preprocess_oh_review_report_list(array &$variables): void {
   $variables['#attached']['library'][] = 'oh_review/report_list';

-  /** @var \Drupal\oh\OhOccurrence[] $occurrences */
+  /** @var OhOccurrence[] $occurrences */
   $occurrences = $variables['occurrences'];

-  /** @var \Drupal\oh\OhDateRange $range */
+  /** @var OhDateRange $range */
   $range = $variables['range'];

   $dayFormat = 'Y-m-d';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


22) modules/contrib/oh/modules/oh_regular/tests/src/Kernel/OhRegularHoursTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $fieldName = 'testfield';
     $fieldStorage = FieldStorageConfig::create([
@@ @@
     ]);
     $fieldInstance->save();

-    /** @var \Drupal\oh_regular\Entity\OhRegularMap $map */
+    /** @var OhRegularMap $map */
     $map = OhRegularMap::create([
       'entity_type' => 'entity_test',
       'bundle' => 'entity_test',
@@ @@
   /**
    * Opening hours service.
    *
-   * @return \Drupal\oh\OhOpeningHoursInterface
+   * @return OhOpeningHoursInterface
    *   The opening hours service.
    */
   protected function openingHoursService(): OhOpeningHoursInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/oh/modules/oh_regular/src/OhRegularSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oh_regular;

+use Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem;
 use Drupal\oh\Event\OhEvents;
 use Drupal\oh\Event\OhRegularEvent;
 use Drupal\oh\OhOccurrence;
@@ @@
   /**
    * OH regular service.
    *
-   * @var \Drupal\oh_regular\OhRegularInterface
+   * @var OhRegularInterface
    */
   protected $ohRegular;

@@ @@
   /**
    * Construct OhRegularSubscriber service.
    *
-   * @param \Drupal\oh_regular\OhRegularInterface $ohRegular
+   * @param OhRegularInterface $ohRegular
    *   OH regular service.
    */
   public function __construct(OhRegularInterface $ohRegular) {
@@ @@
   /**
    * Generates regular hours from field mapping.
    *
-   * @param \Drupal\oh\Event\OhRegularEvent $event
+   * @param OhRegularEvent $event
    *   Regular hours event.
    */
   public function regularHoursField(OhRegularEvent $event): void {
@@ @@

     foreach ($mapping as $fieldName) {
       foreach ($entity->{$fieldName} as $item) {
-        /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item */
+        /** @var DateRecurItem $item */
         if ($item->isEmpty()) {
           continue;
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/oh/modules/oh_regular/src/OhRegularMapListBuilder.php:21

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\oh_regular\OhRegularMapInterface $entity */
+    /** @var OhRegularMapInterface $entity */
     $row['type'] = $entity->toLink(NULL, 'edit-form');
     return $row + parent::buildRow($entity);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/oh/modules/oh_regular/src/OhRegularInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Determines whether an entity uses opening hours.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Whether the entity uses opening hours.
    */
   public function hasOpeningHours(EntityInterface $entity): AccessResultInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/oh/modules/oh_regular/src/OhRegular.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oh_regular;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\Cache;
@@ @@
   /**
    * Regular map storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $regularMapStorage;

@@ @@
   /**
    * Cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * Construct OhRegularSubscriber service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache backend.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, CacheBackendInterface $cache) {
@@ @@
   public function getAllMapping(): array {
     $mapping = $this->cache->get(static::REGULAR_MAPPING_CID);
     if (FALSE === $mapping) {
-      /** @var \Drupal\oh_regular\OhRegularMapInterface[] $maps */
+      /** @var OhRegularMapInterface[] $maps */
       $maps = $this->regularMapStorage->loadMultiple();
       $mapping = [];
       foreach ($maps as $map) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/oh/modules/oh_regular/src/Entity/Form/OhRegularMapForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oh_regular\Entity\Form;

+use Drupal\oh_regular\OhRegularMapInterface;
+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
 /**
  * Add/edit form for Oh Map entities.
  *
- * @method \Drupal\oh_regular\OhRegularMapInterface getEntity()
+ * @method OhRegularMapInterface getEntity()
  */
 class OhRegularMapForm extends EntityForm {

@@ @@
   /**
    * The entity type repository.
    *
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface
+   * @var EntityTypeRepositoryInterface
    */
   protected $entityTypeRepository;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Field config storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fieldConfigStorage;

@@ @@
   /**
    * Regular map storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $regularMapStorage;

@@ @@
   /**
    * Create new OhRegularMapForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entityTypeRepository
+   * @param EntityTypeRepositoryInterface $entityTypeRepository
    *   The entity type repository.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $fieldConfigStorage
+   * @param EntityStorageInterface $fieldConfigStorage
    *   Field config storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $regularMapStorage
+   * @param EntityStorageInterface $regularMapStorage
    *   Regular map storage.
    */
   public function __construct(EntityTypeRepositoryInterface $entityTypeRepository, EntityTypeBundleInfoInterface $entityTypeBundleInfo, EntityFieldManagerInterface $entityFieldManager, EntityStorageInterface $fieldConfigStorage, EntityStorageInterface $regularMapStorage) {
@@ @@
         array_map(
           function (string $fieldName) {
             $fieldConfigId = sprintf('%s.%s.%s', $this->getEntity()->getMapEntityType(), $this->getEntity()->getMapBundle(), $fieldName);
-            /** @var \Drupal\field\FieldConfigInterface $fieldConfig */
+            /** @var FieldConfigInterface $fieldConfig */
             $fieldConfig = $this->fieldConfigStorage->load($fieldConfigId);
             $row['field_name']['data'] = [
               '#plain_text' => $fieldConfig->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/oh/modules/oh_regular/src/Entity/Form/OhRegularMapDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oh_regular\Entity\Form;

+use Drupal\oh_regular\OhRegularMapInterface;
 use Drupal\Core\Entity\EntityDeleteForm;

 /**
  * Delete form for Oh Map entities.
  *
- * @method \Drupal\oh_regular\OhRegularMapInterface getEntity()
+ * @method OhRegularMapInterface getEntity()
  */
 class OhRegularMapDeleteForm extends EntityDeleteForm {
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


29) modules/contrib/oh/modules/oh_regular/src/Access/IsOhBundleAccessCheck.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * OH regular service.
    *
-   * @var \Drupal\oh_regular\OhRegularInterface
+   * @var OhRegularInterface
    */
   protected $ohRegular;

@@ @@
   /**
    * Construct OhRegularSubscriber service.
    *
-   * @param \Drupal\oh_regular\OhRegularInterface $ohRegular
+   * @param OhRegularInterface $ohRegular
    *   OH regular service.
    */
   public function __construct(OhRegularInterface $ohRegular) {
@@ @@
   /**
    * Checks access.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The currently logged in account.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The current route.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, AccountInterface $currentUser, RouteMatchInterface $routeMatch): AccessResultInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 3 nodes were removed                                                 

 [OK] 29 files have been changed by Rector                                      

