modules/contrib/entity_inherit/entity_inherit.install
modules/contrib/entity_inherit/entity_inherit.module
modules/contrib/entity_inherit/phpunit-autoload.php
modules/contrib/entity_inherit/phpunit-bootstrap.php
modules/contrib/entity_inherit/scripts/lib/phpstan-drupal/dummy-classes.php
modules/contrib/entity_inherit/src/Annotation/EntityInheritPluginAnnotation.php
modules/contrib/entity_inherit/src/EntityInherit.php
modules/contrib/entity_inherit/src/EntityInheritDev/EntityInheritDev.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritEntity.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritEntityFactory.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritEntityRevision.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritEntityRevisionInterface.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritEntitySingleInterface.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritExistingEntity.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritExistingEntityCollection.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritExistingEntityCollectionInterface.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritExistingEntityInterface.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritExistingMultipleEntitiesInterface.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritNewEntity.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritOriginalEntity.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritReadableEntityInterface.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritSingleExistingEntityInterface.php
modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritUpdatableEntityInterface.php
modules/contrib/entity_inherit/src/EntityInheritField/EntityInheritField.php
modules/contrib/entity_inherit/src/EntityInheritField/EntityInheritFieldFactory.php
modules/contrib/entity_inherit/src/EntityInheritField/EntityInheritFieldId.php
modules/contrib/entity_inherit/src/EntityInheritField/EntityInheritFieldInterface.php
modules/contrib/entity_inherit/src/EntityInheritField/EntityInheritFieldList.php
modules/contrib/entity_inherit/src/EntityInheritField/EntityInheritFieldListInterface.php
modules/contrib/entity_inherit/src/EntityInheritFieldValue/EntityInheritFieldValue.php
modules/contrib/entity_inherit/src/EntityInheritFieldValue/EntityInheritFieldValueCollection.php
modules/contrib/entity_inherit/src/EntityInheritFieldValue/EntityInheritFieldValueCollectionInterface.php
modules/contrib/entity_inherit/src/EntityInheritFieldValue/EntityInheritFieldValueFactory.php
modules/contrib/entity_inherit/src/EntityInheritFieldValue/EntityInheritFieldValueInterface.php
modules/contrib/entity_inherit/src/EntityInheritFieldValue/EntityInheritSingleFieldValueInterface.php
modules/contrib/entity_inherit/src/EntityInheritPlugin/EntityInheritPluginBase.php
modules/contrib/entity_inherit/src/EntityInheritPlugin/EntityInheritPluginCollection.php
modules/contrib/entity_inherit/src/EntityInheritPlugin/EntityInheritPluginInterface.php
modules/contrib/entity_inherit/src/EntityInheritPlugin/EntityInheritPluginManager.php
modules/contrib/entity_inherit/src/EntityInheritQueue/EntityInheritQueue.php
modules/contrib/entity_inherit/src/EntityInheritQueue/EntityInheritQueueProcessor.php
modules/contrib/entity_inherit/src/EntityInheritQueue/EntityInheritQueueProcessorBatch.php
modules/contrib/entity_inherit/src/EntityInheritQueue/EntityInheritQueueProcessorFactory.php
modules/contrib/entity_inherit/src/EntityInheritQueue/EntityInheritQueueProcessorInterface.php
modules/contrib/entity_inherit/src/EntityInheritQueue/EntityInheritQueueProcessorNoBatch.php
modules/contrib/entity_inherit/src/EntityInheritStorage/EntityInheritStorage.php
modules/contrib/entity_inherit/src/EntityInheritStorage/EntityInheritStorageInterface.php
modules/contrib/entity_inherit/src/Form/EntityInheritAdminForm.php
modules/contrib/entity_inherit/src/Plugin/EntityInheritPlugin/EntityInheritAlterFieldsLegacyFormat.php
modules/contrib/entity_inherit/src/Plugin/EntityInheritPlugin/EntityInheritProcessQueue.php
modules/contrib/entity_inherit/src/Plugin/EntityInheritPlugin/EntityInheritRemoveSystemFields.php
modules/contrib/entity_inherit/src/Utilities/EntityInheritanceAntiInfiniteLoop.php
modules/contrib/entity_inherit/src/Utilities/EntityInheritanceAntiInfiniteLoopInterface.php
modules/contrib/entity_inherit/src/Utilities/FriendTrait.php
modules/contrib/entity_inherit/tests/src/Unit/Annotation/EntityInheritPluginAnnotationTest.php
modules/contrib/entity_inherit/tests/src/Unit/EntityInheritDev/EntityInheritDevTest.php
modules/contrib/entity_inherit/tests/src/Unit/EntityInheritEntity/EntityInheritEntityFactoryTest.php
modules/contrib/entity_inherit/tests/src/Unit/EntityInheritPlugin/EntityInheritPluginBaseTest.php
modules/contrib/entity_inherit/tests/src/Unit/EntityInheritPlugin/EntityInheritPluginCollectionTest.php
modules/contrib/entity_inherit/tests/src/Unit/EntityInheritPlugin/EntityInheritPluginManagerTest.php
modules/contrib/entity_inherit/tests/src/Unit/EntityInheritTest.php
modules/contrib/entity_inherit/tests/src/Unit/EntityInheritTestBase.php
modules/contrib/entity_inherit/tests/src/Unit/Plugin/EntityInheritPlugin/EntityInheritRemoveSystemFieldsTest.php

36 files with changes
=====================

1) modules/contrib/entity_inherit/tests/src/Unit/EntityInheritTestBase.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Get dummy (mock) app.
    *
-   * @return \Drupal\entity_inherit\EntityInherit
+   * @return EntityInherit
    *   A dummy (mock) app.
    */
   public function mockApp() : EntityInherit {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_inherit/src/Form/EntityInheritAdminForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The EntityInherit singleton (service).
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The EntityInherit singleton (service).
    */
   final public function __construct(EntityInherit $app) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_inherit/src/EntityInheritStorage/EntityInheritStorageInterface.php:16

    ---------- begin diff ----------
@@ @@
    * @param string $id
    *   The parent entity id.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritExistingMultipleEntitiesInterface
+   * @return EntityInheritExistingMultipleEntitiesInterface
    *   The child entities.
    */
   public function getChildrenOf(string $type, string $id) : EntityInheritExistingMultipleEntitiesInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/entity_inherit/src/EntityInheritStorage/EntityInheritStorage.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The app singleton.
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The app singleton.
    */
   public function __construct(EntityInherit $app) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/entity_inherit/src/EntityInheritQueue/EntityInheritQueueProcessorFactory.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The EntityInherit singleton (service).
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The application singleton.
    */
   public function __construct(EntityInherit $app) {
@@ @@
   /**
    * Obtain an appropriate processor.
    *
-   * @param \Drupal\entity_inherit\EntityInheritQueue\EntityInheritQueue $queue
+   * @param EntityInheritQueue $queue
    *   The queue.
    *
-   * @return \Drupal\entity_inherit\EntityInheritQueue\EntityInheritQueueProcessorInterface
+   * @return EntityInheritQueueProcessorInterface
    *   A processor.
    */
   public function processor(EntityInheritQueue $queue) : EntityInheritQueueProcessorInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/entity_inherit/src/EntityInheritQueue/EntityInheritQueueProcessor.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * The queue.
    *
-   * @var \Drupal\entity_inherit\EntityInheritQueue\EntityInheritQueue
+   * @var EntityInheritQueue
    */
   protected $queue;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInheritQueue\EntityInheritQueue $queue
+   * @param EntityInheritQueue $queue
    *   The queue.
    */
   public function __construct(EntityInheritQueue $queue) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/entity_inherit/src/EntityInheritQueue/EntityInheritQueue.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The EntityInherit singleton (service).
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The application singleton.
    */
   public function __construct(EntityInherit $app) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/entity_inherit/src/EntityInheritPlugin/EntityInheritPluginManager.php:14

    ---------- begin diff ----------
@@ @@
 // @phpstan-ignore-next-line
 class EntityInheritPluginManager extends DefaultPluginManager {
 // @codingStandardsIgnoreEnd
-
   /**
    * Creates the discovery object.
    *
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   // See https://github.com/mglaman/phpstan-drupal/issues/112
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_inherit/src/EntityInheritPlugin/EntityInheritPluginInterface.php:15

    ---------- begin diff ----------
@@ @@
    * @param array $field_names
    *   An array of field names which can be modified. The values are field names
    *   such as node.field_x or node.body or paragraph.field_x.
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The app singleton.
    */
   public function alterFields(array &$field_names, EntityInherit $app);
@@ @@
    * @param string $category
    *   Arbitrary category which is then managed by plugins. "inheritable" and
    *   "parent" can be used.
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The app singleton.
    */
   public function filterFields(array &$field_names, array $original, string $category, EntityInherit $app);
@@ @@
   /**
    * Act on an entity being saved.
    *
-   * @param \Drupal\entity_inherit\EntityInheritEntity\EntityInheritEntitySingleInterface $entity
+   * @param EntityInheritEntitySingleInterface $entity
    *   An entity being presaved.
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The app singleton.
    */
   public function presave(EntityInheritEntitySingleInterface $entity, EntityInherit $app);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/entity_inherit/src/EntityInheritPlugin/EntityInheritPluginCollection.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The global app.
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * Constructs a new WWatchdogPluginCollection object.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The injected global app.
    */
   public function __construct(EntityInherit $app) {
@@ @@
   /**
    * Get the injected global app.
    *
-   * @return \Drupal\entity_inherit\EntityInherit
+   * @return EntityInherit
    *   The global app.
    */
   public function getApp() : EntityInherit {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/entity_inherit/src/EntityInheritFieldValue/EntityInheritSingleFieldValueInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Get the field name.
    *
-   * @return \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId
+   * @return EntityInheritFieldId
    *   The field id.
    */
   public function fieldName() : EntityInheritFieldId;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/entity_inherit/src/EntityInheritFieldValue/EntityInheritFieldValueFactory.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The EntityInherit singleton (service).
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The application singleton.
    */
   public function __construct(EntityInherit $app) {
@@ @@
   /**
    * Get a new collection.
    *
-   * @return \Drupal\entity_inherit\EntityInheritFieldValue\EntityInheritFieldValueCollectionInterface
+   * @return EntityInheritFieldValueCollectionInterface
    *   A new collection.
    */
   public function newCollection() : EntityInheritFieldValueCollectionInterface {
@@ @@
   /**
    * Get a new field value.
    *
-   * @param \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId $field_name
+   * @param EntityInheritFieldId $field_name
    *   The field name.
    * @param array $value
    *   The new value.
@@ @@
    * @param array $previous
    *   The previous value.
    *
-   * @return \Drupal\entity_inherit\EntityInheritFieldValue\EntityInheritFieldValueInterface
+   * @return EntityInheritFieldValueInterface
    *   A new field value object.
    */
   public function newFieldValue(EntityInheritFieldId $field_name, array $value, array $previous) : EntityInheritFieldValueInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/entity_inherit/src/EntityInheritFieldValue/EntityInheritFieldValueCollectionInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Add items to the collection.
    *
-   * @param \Drupal\entity_inherit\EntityInheritFieldValue\EntityInheritFieldValueInterface $items
+   * @param EntityInheritFieldValueInterface $items
    *   Items to add.
    */
   public function add(EntityInheritFieldValueInterface $items);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/entity_inherit/src/EntityInheritFieldValue/EntityInheritFieldValueCollection.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The app singleton.
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The app singleton.
    */
   public function __construct(EntityInherit $app) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/entity_inherit/src/EntityInheritFieldValue/EntityInheritFieldValue.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The app singleton.
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * The field name.
    *
-   * @var \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId
+   * @var EntityInheritFieldId
    */
   protected $fieldName;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The app singleton.
-   * @param \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId $field_name
+   * @param EntityInheritFieldId $field_name
    *   The field name.
    * @param array $value
    *   The new value.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/entity_inherit/src/EntityInheritField/EntityInheritFieldListInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Add a field to the array.
    *
-   * @param \Drupal\entity_inherit\EntityInheritField\EntityInheritField $field
+   * @param EntityInheritField $field
    *   A field to add.
    */
   public function add(EntityInheritField $field);
@@ @@
    * @param string $id
    *   An id such as node.field_x.
    *
-   * @return \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldInterface
+   * @return EntityInheritFieldInterface
    *   A field.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/entity_inherit/src/EntityInheritField/EntityInheritFieldInterface.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Get the field name.
    *
-   * @return \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId
+   * @return EntityInheritFieldId
    *   The field name.
    */
   public function fieldName() : EntityInheritFieldId;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/entity_inherit/src/EntityInheritField/EntityInheritFieldId.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_inherit\EntityInheritField;

+use Drupal\Core\Entity\FieldableEntityInterface;
 /**
  * Reprensents a Drupal field ID.
  */
@@ @@
   /**
    * Get the field name.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
+   * @param FieldableEntityInterface|null $entity
    *   A Drupal entity. Used to confirm that the field is compatible with that
    *   entity. If NULL, then we don't check.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/entity_inherit/src/EntityInheritField/EntityInheritFieldFactory.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The EntityInherit singleton (service).
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The application singleton.
    */
   public function __construct(EntityInherit $app) {
@@ @@
   /**
    * Get a field from a field id, if possible.
    *
-   * @param \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId $id
+   * @param EntityInheritFieldId $id
    *   An id such.
    *
-   * @return \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldInterface
+   * @return EntityInheritFieldInterface
    *   A field.
    *
    * @throws \Exception
@@ @@
    *   A field map as retrieved from the Drupal entityFieldManager's
    *   getFieldMap() method.
    *
-   * @return \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldListInterface
+   * @return EntityInheritFieldListInterface
    *   A field list.
    */
   public function fromMap(array $map) : EntityInheritFieldListInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/entity_inherit/src/EntityInheritField/EntityInheritField.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The EntityInherit singleton (service).
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * The field name.
    *
-   * @var \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId
+   * @var EntityInheritFieldId
    */
   protected $fieldName;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The global app singleton.
    * @param string $entity_type
    *   Each field can only exist on a single entity type such as 'node'.
-   * @param \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId $field_name
+   * @param EntityInheritFieldId $field_name
    *   A field name.
    * @param array $field_info
    *   A field info array from Drupal's field map.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritReadableEntityInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Update this entity based on its parents.
    *
-   * @return \Drupal\entity_inherit\EntityInheritFieldValue\EntityInheritFieldValueCollectionInterface
+   * @return EntityInheritFieldValueCollectionInterface
    *   Field values.
    */
   public function fieldValues() : EntityInheritFieldValueCollectionInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritOriginalEntity.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A Drupal entity.
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The global app.
    */
   public function __construct(FieldableEntityInterface $entity, EntityInherit $app) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritNewEntity.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A Drupal entity.
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The global app.
    */
   public function __construct(FieldableEntityInterface $entity, EntityInherit $app) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritExistingMultipleEntitiesInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Add items to the collection.
    *
-   * @param \Drupal\entity_inherit\EntityInheritEntity\EntityInheritExistingEntityInterface $items
+   * @param EntityInheritExistingEntityInterface $items
    *   Items to add.
    */
   public function add(EntityInheritExistingEntityInterface $items);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritExistingEntityInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Get all field values along with their previous values.
    *
-   * @return \Drupal\entity_inherit\EntityInheritFieldValue\EntityInheritFieldValueCollectionInterface
+   * @return EntityInheritFieldValueCollectionInterface
    *   Field values.
    */
   public function fieldValues() : EntityInheritFieldValueCollectionInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritExistingEntityCollection.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The app singleton.
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The app singleton.
    */
   public function __construct(EntityInherit $app) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritExistingEntity.php:30

    ---------- begin diff ----------
@@ @@
    *   The Drupal entity type such as "node".
    * @param string $id
    *   The Drupal entity id such as 1.
-   * @param null|\Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param null|FieldableEntityInterface $entity
    *   The Drupal entity object, or NULL if we don't have it.
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The global app.
    */
   public function __construct(string $type, string $id, $entity, EntityInherit $app) {
@@ @@
   /**
    * Get all children of this entity.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritExistingMultipleEntitiesInterface
+   * @return EntityInheritExistingMultipleEntitiesInterface
    *   This entity's children.
    */
   public function children() : EntityInheritExistingMultipleEntitiesInterface {
@@ @@
   /**
    * Get the original entity before it was modified on save.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritEntityRevisionInterface
+   * @return EntityInheritEntityRevisionInterface
    *   The original entity.
    */
   public function original() : EntityInheritEntityRevisionInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritEntitySingleInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Check if we have a field.
    *
-   * @param \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId $field
+   * @param EntityInheritFieldId $field
    *   A field name.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritEntityRevisionInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Get all the entity's parents.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritExistingMultipleEntitiesInterface
+   * @return EntityInheritExistingMultipleEntitiesInterface
    *   All parents.
    */
   public function getMergedParents() : EntityInheritExistingMultipleEntitiesInterface;
@@ @@
   /**
    * Get all our fields which are candidates to be inherited.
    *
-   * @return \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldListInterface
+   * @return EntityInheritFieldListInterface
    *   All inheritable fields for a type and bundle.
    */
   public function inheritableFields() : EntityInheritFieldListInterface;
@@ @@
   /**
    * Get a field value as an array.
    *
-   * @param \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId $field_name
+   * @param EntityInheritFieldId $field_name
    *   A field name.
    *
    * @return array
@@ @@
   /**
    * Get referenced entities.
    *
-   * @param \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldListInterface $fields
+   * @param EntityInheritFieldListInterface $fields
    *   A field name.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritExistingMultipleEntitiesInterface
+   * @return EntityInheritExistingMultipleEntitiesInterface
    *   The referenced entities.
    */
   public function referencedEntities(EntityInheritFieldListInterface $fields) : EntityInheritExistingMultipleEntitiesInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


30) modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritEntityRevision.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_inherit\EntityInheritEntity;

+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\entity_inherit\EntityInherit;
 use Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId;
@@ @@
   /**
    * The injected app singleton.
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * The Drupal entity.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   protected $drupalEntity;

@@ @@
    *
    * @param string $type
    *   The Drupal entity type such as "node".
-   * @param null|\Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param null|FieldableEntityInterface $entity
    *   The Drupal entity object, or NULL if we don't have it.
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The global app.
    */
   public function __construct(string $type, $entity, EntityInherit $app) {
@@ @@
   /**
    * Get the Drupal entity.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface|null
+   * @return FieldableEntityInterface|null
    *   This Drupal entity.
    */
   abstract public function getDrupalEntity();
@@ @@
   /**
    * Retrieve a field object linked to a Drupal entity.
    *
-   * @param \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId $field_name
+   * @param EntityInheritFieldId $field_name
    *   A field name.
    *
    * @return mixed
@@ @@
   /**
    * Get the original value of a field.
    *
-   * @param \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId $field_name
+   * @param EntityInheritFieldId $field_name
    *   A field.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritEntityFactory.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The EntityInherit singleton (service).
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The application singleton.
    */
   public function __construct(EntityInherit $app) {
@@ @@
    *   A type, for example "node".
    * @param string $id
    *   An id, for example "1".
-   * @param null|\Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param null|FieldableEntityInterface $entity
    *   The Drupal entity object, or NULL if we don't have it.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritEntitySingleInterface
+   * @return EntityInheritEntitySingleInterface
    *   An entity.
    */
   public function fromTypeIdEntity(string $type, string $id, $entity) : EntityInheritEntitySingleInterface {
@@ @@
   /**
    * Get an entity from an entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A Drupal entity.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritEntitySingleInterface
+   * @return EntityInheritEntitySingleInterface
    *   An entity.
    */
   public function fromEntity(FieldableEntityInterface $entity) : EntityInheritEntitySingleInterface {
@@ @@
   /**
    * Get an entity from an existing entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A Drupal entity.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritSingleExistingEntityInterface
+   * @return EntityInheritSingleExistingEntityInterface
    *   An entity.
    */
   public function fromExistingEntity(FieldableEntityInterface $entity) : EntityInheritSingleExistingEntityInterface {
@@ @@
    * @param array $item
    *   A queueable item.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritSingleExistingEntityInterface
+   * @return EntityInheritSingleExistingEntityInterface
    *   An entity if possible.
    *
    * @throws \Exception
@@ @@
    * @param array $drupal_entities
    *   An array of Drupal entities.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritExistingMultipleEntitiesInterface
+   * @return EntityInheritExistingMultipleEntitiesInterface
    *   A new collection.
    */
   public function newCollection(array $drupal_entities = []) : EntityInheritExistingMultipleEntitiesInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


32) modules/contrib/entity_inherit/src/EntityInheritEntity/EntityInheritEntity.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Check if a field should be applied.
    *
-   * @param \Drupal\entity_inherit\EntityInheritFieldValue\EntityInheritSingleFieldValueInterface $field_value
+   * @param EntityInheritSingleFieldValueInterface $field_value
    *   A field value.
    *
    * @return bool
@@ @@
   /**
    * Set a field value.
    *
-   * @param \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId $field_id
+   * @param EntityInheritFieldId $field_id
    *   A field id.
    * @param array $value
    *   A field value.
@@ @@
   /**
    * Update a field based on field values.
    *
-   * @param \Drupal\entity_inherit\EntityInheritFieldValue\EntityInheritSingleFieldValueInterface $field_value
+   * @param EntityInheritSingleFieldValueInterface $field_value
    *   A field value.
    */
   public function updateField(EntityInheritSingleFieldValueInterface $field_value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/entity_inherit/src/EntityInheritDev/EntityInheritDev.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The EntityInherit singleton (service).
    *
-   * @var \Drupal\entity_inherit\EntityInherit
+   * @var EntityInherit
    */
   protected $app;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_inherit\EntityInherit $app
+   * @param EntityInherit $app
    *   The application singleton.
    */
   public function __construct(EntityInherit $app) {
@@ @@
   /**
    * Make sure a node's body value is as expected.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $node
+   * @param FieldableEntityInterface $node
    *   A Drupal node.
    * @param string $value
    *   An expected value.
@@ @@
    * @param array $other
    *   Other information to add to the new node.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface
+   * @return FieldableEntityInterface
    *   A resulting entity.
    */
   public function createNode(string $title, string $type, array $parents = [], array $other = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


34) modules/contrib/entity_inherit/src/EntityInherit.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * The config service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The plugin manager service.
    *
-   * @var \Drupal\entity_inherit\EntityInheritPlugin\EntityInheritPluginManager
+   * @var EntityInheritPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * Injected entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The injected logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $loggerFactory;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The injected config service.
-   * @param \Drupal\entity_inherit\EntityInheritPlugin\EntityInheritPluginManager $plugin_manager
+   * @param EntityInheritPluginManager $plugin_manager
    *   The injected plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The injected entity type manager.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The injected messenger service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The injected entity field manager.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   The state service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $loggerFactory
+   * @param LoggerChannelFactory $loggerFactory
    *   The logger service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityInheritPluginManager $plugin_manager, EntityTypeManager $entity_type_manager, Messenger $messenger, EntityFieldManager $entity_field_manager, State $state, LoggerChannelFactory $loggerFactory) {
@@ @@
   /**
    * Get all field names as an array of strings.
    *
-   * @return \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldListInterface
+   * @return EntityInheritFieldListInterface
    *   All field names.
    */
   public function allFields() : EntityInheritFieldListInterface {
@@ @@
   /**
    * Get the Development singleton.
    *
-   * @return \Drupal\entity_inherit\EntityInheritDev\EntityInheritDev
+   * @return EntityInheritDev
    *   The entity factory singleton.
    */
   public function dev() : EntityInheritDev {
@@ @@
   /**
    * Get the Entity factory.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritEntityFactory
+   * @return EntityInheritEntityFactory
    *   The entity factory singleton.
    */
   public function getEntityFactory() : EntityInheritEntityFactory {
@@ @@
   /**
    * Get the Entity field manager.
    *
-   * @return \Drupal\Core\Entity\EntityFieldManager
+   * @return EntityFieldManager
    *   The entity field manager.
    */
   public function getEntityFieldManager() : EntityFieldManager {
@@ @@
   /**
    * Get the Entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManager
+   * @return EntityTypeManager
    *   The entity type manager.
    */
   public function getEntityTypeManager() : EntityTypeManager {
@@ @@
   /**
    * Get the field value factory.
    *
-   * @return \Drupal\entity_inherit\EntityInheritFieldValue\EntityInheritFieldValueFactory
+   * @return EntityInheritFieldValueFactory
    *   The field value factory singleton.
    */
   public function getFieldValueFactory() : EntityInheritFieldValueFactory {
@@ @@
   /**
    * Get the Queue singleton.
    *
-   * @return \Drupal\entity_inherit\EntityInheritQueue\EntityInheritQueue
+   * @return EntityInheritQueue
    *   The Queue singleton.
    */
   public function getQueue() : EntityInheritQueue {
@@ @@
   /**
    * Get the storage manager class.
    *
-   * @return \Drupal\entity_inherit\EntityInheritStorage\EntityInheritStorageInterface
+   * @return EntityInheritStorageInterface
    *   The storage singleton.
    */
   public function getStorage() : EntityInheritStorageInterface {
@@ @@
    * @param string $bundle
    *   An entity bundle.
    *
-   * @return \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldListInterface
+   * @return EntityInheritFieldListInterface
    *   All inheritable fields for a type and bundle.
    */
   public function inheritableFields($type, $bundle) : EntityInheritFieldListInterface {
@@ @@
   /**
    * Get the EntityInheritFieldFactory singleton.
    *
-   * @return \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldFactory
+   * @return EntityInheritFieldFactory
    *   A factory for a list of fields.
    */
   public function fieldFactory() : EntityInheritFieldFactory {
@@ @@
   /**
    * Get the messenger service.
    *
-   * @return \Drupal\Core\Messenger\Messenger
+   * @return Messenger
    *   The messenger.
    */
   public function getMessenger() : Messenger {
@@ @@
   /**
    * Get the fields where parents are stored.
    *
-   * @return \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldListInterface
+   * @return EntityInheritFieldListInterface
    *   A list of fields where the parent entities are stored.
    */
   public function getParentEntityFields() : EntityInheritFieldListInterface {
@@ @@
   /**
    * Get the plugin manager service.
    *
-   * @return \Drupal\entity_inherit\EntityInheritPlugin\EntityInheritPluginManager
+   * @return EntityInheritPluginManager
    *   The plugin manager.
    */
   public function getPluginManager() : EntityInheritPluginManager {
@@ @@
    * See the modules included in the ./modules directory for an example on how
    * to create a plugin.
    *
-   * @return \Drupal\entity_inherit\EntityInheritPlugin\EntityInheritPluginCollection
+   * @return EntityInheritPluginCollection
    *   All plugins.
    *
    * @throws \Exception
@@ @@
   /**
    * Whether or not a field name is a valid parent field.
    *
-   * @param \Drupal\entity_inherit\EntityInheritField\EntityInheritFieldId $field_name
+   * @param EntityInheritFieldId $field_name
    *   A field name.
    * @param string $category
    *   Arbitrary category which is then managed by plugins. "inheritable" and
@@ @@
    * This entity can be in the process of creation, i.e. not have an id and
    * not exist in the database.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A Drupal entity.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritEntitySingleInterface
+   * @return EntityInheritEntitySingleInterface
    *   Our wrapper around a Drupal entity.
    */
   public function wrap(FieldableEntityInterface $entity) : EntityInheritEntitySingleInterface {
@@ @@
    *
    * This entity must exist in the database.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   A Drupal entity.
    *
-   * @return \Drupal\entity_inherit\EntityInheritEntity\EntityInheritSingleExistingEntityInterface
+   * @return EntityInheritSingleExistingEntityInterface
    *   Our wrapper around a Drupal entity.
    */
   public function wrapExisting(FieldableEntityInterface $entity) : EntityInheritSingleExistingEntityInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


35) modules/contrib/entity_inherit/src/Annotation/EntityInheritPluginAnnotation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_inherit\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * A brief, human readable, description of the modifier.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


36) modules/contrib/entity_inherit/entity_inherit.module:10

    ---------- begin diff ----------
@@ @@
 /**
  * Quick access to the entity_inherit service, useful for debugging.
  *
- * @return \Drupal\entity_inherit\EntityInherit
+ * @return EntityInherit
  *   The EntityInherit service.
  */
 function entity_inherit() : EntityInherit {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 36 files have been changed by Rector                                      

