modules/contrib/entity_access_password/entity_access_password.module
modules/contrib/entity_access_password/entity_access_password.tokens.inc
modules/contrib/entity_access_password/modules/entity_access_password_session_backend/src/Service/SessionBackend.php
modules/contrib/entity_access_password/modules/entity_access_password_session_backend/tests/src/Functional/SessionBackendTest.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/entity_access_password_user_data_backend.install
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/entity_access_password_user_data_backend.module
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Form/BundleUserDataEditForm.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Form/EntityUserDataEditForm.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Form/GlobalUserDataEditForm.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Form/UserDataEditFormBase.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Form/UserUserDataEditForm.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/HookHandler/EntityDelete.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/HookHandler/EntityTypeInfo.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendBundleLocalTask.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendBundleMenuLink.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendDeriverBase.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendEntityLocalTask.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Routing/BundleFormRoutes.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Routing/EntityFormRoutes.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Service/UserDataBackend.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Service/UserDataBackendInterface.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/tests/src/Functional/UserDataBackendFormsTest.php
modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/tests/src/Functional/UserDataBackendTest.php
modules/contrib/entity_access_password/src/Cache/Context/EntityIsProtectedCacheContext.php
modules/contrib/entity_access_password/src/Event/FileUsageEntityListEvent.php
modules/contrib/entity_access_password/src/EventSubscriber/WebformSubmissionFileUsageSubscriber.php
modules/contrib/entity_access_password/src/Form/PasswordForm.php
modules/contrib/entity_access_password/src/Form/PasswordFormInterface.php
modules/contrib/entity_access_password/src/Form/SettingsForm.php
modules/contrib/entity_access_password/src/HookHandler/FileDownload.php
modules/contrib/entity_access_password/src/HookHandler/LabelReplacer.php
modules/contrib/entity_access_password/src/HookHandler/Token.php
modules/contrib/entity_access_password/src/Plugin/Field/FieldFormatter/EntityAccessPasswordBooleanFormatter.php
modules/contrib/entity_access_password/src/Plugin/Field/FieldFormatter/EntityAccessPasswordFormFormatter.php
modules/contrib/entity_access_password/src/Plugin/Field/FieldType/EntityAccessPasswordItem.php
modules/contrib/entity_access_password/src/Plugin/Field/FieldWidget/EntityAccessPasswordWidget.php
modules/contrib/entity_access_password/src/Service/AccessCheckerInterface.php
modules/contrib/entity_access_password/src/Service/AccessCheckerManager.php
modules/contrib/entity_access_password/src/Service/AccessStorageInterface.php
modules/contrib/entity_access_password/src/Service/AccessStorageManager.php
modules/contrib/entity_access_password/src/Service/BypassPermissionAccessChecker.php
modules/contrib/entity_access_password/src/Service/ChainAccessCheckerInterface.php
modules/contrib/entity_access_password/src/Service/ChainAccessStorageInterface.php
modules/contrib/entity_access_password/src/Service/ChainPasswordValidatorInterface.php
modules/contrib/entity_access_password/src/Service/EntityTypePasswordBundleInfo.php
modules/contrib/entity_access_password/src/Service/EntityTypePasswordBundleInfoInterface.php
modules/contrib/entity_access_password/src/Service/PasswordAccessManager.php
modules/contrib/entity_access_password/src/Service/PasswordAccessManagerInterface.php
modules/contrib/entity_access_password/src/Service/PasswordFormBuilder.php
modules/contrib/entity_access_password/src/Service/PasswordFormBuilderInterface.php
modules/contrib/entity_access_password/src/Service/PasswordValidator.php
modules/contrib/entity_access_password/src/Service/PasswordValidatorInterface.php
modules/contrib/entity_access_password/src/Service/PasswordValidatorManager.php
modules/contrib/entity_access_password/src/Service/RouteParser.php
modules/contrib/entity_access_password/src/Service/RouteParserInterface.php
modules/contrib/entity_access_password/tests/modules/entity_access_password_migration_examples/modules/entity_access_password_migration_examples_lesson/src/Plugin/migrate/process/ProcessProtectedNode.php
modules/contrib/entity_access_password/tests/modules/entity_access_password_migration_examples/modules/entity_access_password_migration_examples_lesson/src/Plugin/migrate/source/ProtectedNode.php
modules/contrib/entity_access_password/tests/modules/entity_access_password_migration_examples/src/Plugin/migrate/source/d7/ProtectedNode.php
modules/contrib/entity_access_password/tests/modules/entity_access_password_tests/src/Controller/TestController.php
modules/contrib/entity_access_password/tests/src/Functional/BackendTestBase.php
modules/contrib/entity_access_password/tests/src/Functional/EntityAccessPasswordFunctionalTestBase.php
modules/contrib/entity_access_password/tests/src/Functional/GlobalBehaviorsTest.php
modules/contrib/entity_access_password/tests/src/Functional/PrivateFilesTest.php

52 files with changes
=====================

1) modules/contrib/entity_access_password/tests/src/Functional/PrivateFilesTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_access_password\Functional;

+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
+use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The private file.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected FileInterface $privateFile;

@@ @@
    */
   protected function preparePrivateFile(): void {
     // Create the physical file.
-    /** @var \Drupal\Core\StreamWrapper\StreamWrapperInterface $stream_wrapper */
+    /** @var StreamWrapperInterface $stream_wrapper */
     $stream_wrapper = $this->streamWrapperManager->getViaUri($this->privateFileUri);
     $directory_uri = $stream_wrapper->dirname($this->privateFileUri);
     $this->fileSystem->prepareDirectory($directory_uri, FileSystemInterface::CREATE_DIRECTORY);
@@ @@
     \file_put_contents($this->privateFileUri, $this->privateFileContent);

     // Create the file entity.
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $this->entityTypeManager->getStorage('file')->create([
       'filename' => 'test_private.txt',
       'filemime' => 'text/plain',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_access_password/tests/src/Functional/GlobalBehaviorsTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_access_password/tests/src/Functional/EntityAccessPasswordFunctionalTestBase.php:64

    ---------- begin diff ----------
@@ @@
   /**
    * The admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $adminUser;

@@ @@
   /**
    * The test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $user;

@@ @@
   /**
    * The bypass password test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $bypassPasswordUser;

@@ @@
   /**
    * The test nodes.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected array $protectedNodes;

@@ @@
   /**
    * The password hashing service.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected PasswordInterface $password;

@@ @@
   /**
    * The display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected EntityDisplayRepositoryInterface $displayRepository;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_access_password/src/Service/RouteParserInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password\Service;

+use Drupal\Core\Entity\FieldableEntityInterface;
 /**
  * Route parser interface methods.
  */
@@ @@
   /**
    * Get an entity from the current route.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface|null
+   * @return FieldableEntityInterface|null
    *   The entity if present. NULL otherwise.
    */
   public function getEntityFromCurrentRoute();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/entity_access_password/src/Service/RouteParser.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected RouteMatchInterface $routeMatch;

@@ @@
   /**
    * The entity if present. NULL otherwise.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface|null
+   * @var FieldableEntityInterface|null
    */
   protected $foundEntity;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Routing\StackedRouteMatchInterface $routeMatch
+   * @param StackedRouteMatchInterface $routeMatch
    *   The current route match.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/entity_access_password/src/Service/PasswordValidatorManager.php:22

    ---------- begin diff ----------
@@ @@
    *
    * Set to NULL if the array needs to be re-calculated.
    *
-   * @var \Drupal\entity_access_password\Service\PasswordValidatorInterface[]|null
+   * @var PasswordValidatorInterface[]|null
    */
   protected $sortedValidators;

@@ @@
   /**
    * Returns the sorted array of validators.
    *
-   * @return \Drupal\entity_access_password\Service\PasswordValidatorInterface[]
+   * @return PasswordValidatorInterface[]
    *   An array of validator objects.
    */
   protected function getSortedValidators() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/entity_access_password/src/Service/PasswordValidatorInterface.php:21

    ---------- begin diff ----------
@@ @@
    *
    * @param string $password
    *   The password to validate.
-   * @param \Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem $fieldItem
+   * @param EntityAccessPasswordItem $fieldItem
    *   The field item.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/entity_access_password/src/Service/PasswordValidator.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
   /**
    * The password hashing service object.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected PasswordInterface $password;

@@ @@
   /**
    * The access storage service.
    *
-   * @var \Drupal\entity_access_password\Service\AccessStorageInterface
+   * @var AccessStorageInterface
    */
   protected AccessStorageInterface $accessStorage;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
-   * @param \Drupal\Core\Password\PasswordInterface $password
+   * @param PasswordInterface $password
    *   The password service.
-   * @param \Drupal\entity_access_password\Service\AccessStorageInterface $accessStorage
+   * @param AccessStorageInterface $accessStorage
    *   The access storage service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/entity_access_password/src/Service/PasswordFormBuilder.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password\Service;

+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected FormBuilderInterface $formBuilder;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The password form.
    *
-   * @var \Drupal\entity_access_password\Form\PasswordFormInterface
+   * @var PasswordFormInterface
    */
   protected PasswordFormInterface $passwordForm;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\entity_access_password\Form\PasswordFormInterface $passwordForm
+   * @param PasswordFormInterface $passwordForm
    *   The password form.
    */
   public function __construct(
@@ @@
    * {@inheritdoc}
    */
   public function build(string $helpText, string $hint, int $entityId, string $entityTypeId, string $fieldName): array {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $entity = $this->entityTypeManager->getStorage($entityTypeId)
       ->load($entityId);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/entity_access_password/src/Service/PasswordAccessManagerInterface.php:20

    ---------- begin diff ----------
@@ @@
    *
    * @param string $view_mode
    *   The view mode to check for.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check access for.
    *
    * @return bool
@@ @@
   /**
    * Check if an entity label is protected.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check access for.
    *
    * @return bool
@@ @@
   /**
    * Check if the current user has access to the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check access for.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/entity_access_password/src/Service/PasswordAccessManager.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password\Service;

+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;

@@ @@
   /**
    * The access checker service.
    *
-   * @var \Drupal\entity_access_password\Service\AccessCheckerInterface
+   * @var AccessCheckerInterface
    */
   protected AccessCheckerInterface $accessChecker;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_access_password\Service\AccessCheckerInterface $accessChecker
+   * @param AccessCheckerInterface $accessChecker
    *   The access checker service.
    */
   public function __construct(
@@ @@
   /**
    * Get the password fields.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to get fields.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface[]
+   * @return FieldItemListInterface[]
    *   The list of non-empty password fields.
    */
   protected function getPasswordFields(FieldableEntityInterface $entity): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/entity_access_password/src/Service/EntityTypePasswordBundleInfo.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected EntityTypeBundleInfoInterface $entityTypeBundleInfo;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected EntityFieldManagerInterface $entityFieldManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/entity_access_password/src/Service/ChainPasswordValidatorInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Adds another access validator.
    *
-   * @param \Drupal\entity_access_password\Service\PasswordValidatorInterface $accessValidator
+   * @param PasswordValidatorInterface $accessValidator
    *   The access validator to add.
    * @param int $priority
    *   Priority of the access validator.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/entity_access_password/src/Service/ChainAccessStorageInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Adds another access storage.
    *
-   * @param \Drupal\entity_access_password\Service\AccessStorageInterface $accessStorage
+   * @param AccessStorageInterface $accessStorage
    *   The access storage to add.
    * @param int $priority
    *   Priority of the access storage.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/entity_access_password/src/Service/ChainAccessCheckerInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Adds another access checker.
    *
-   * @param \Drupal\entity_access_password\Service\AccessCheckerInterface $accessChecker
+   * @param AccessCheckerInterface $accessChecker
    *   The access checker to add.
    * @param int $priority
    *   Priority of the access checker.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/entity_access_password/src/Service/BypassPermissionAccessChecker.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected AccountProxyInterface $currentUser;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
    */
   public function __construct(AccountProxyInterface $currentUser) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/entity_access_password/src/Service/AccessStorageManager.php:22

    ---------- begin diff ----------
@@ @@
    *
    * Set to NULL if the array needs to be re-calculated.
    *
-   * @var \Drupal\entity_access_password\Service\AccessStorageInterface[]|null
+   * @var AccessStorageInterface[]|null
    */
   protected $sortedStorages;

@@ @@
   /**
    * Returns the sorted array of storages.
    *
-   * @return \Drupal\entity_access_password\Service\AccessStorageInterface[]
+   * @return AccessStorageInterface[]
    *   An array of storage objects.
    */
   protected function getSortedStorages() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/entity_access_password/src/Service/AccessStorageInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Stores that the user has access to this entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity the access is stored.
    */
   public function storeEntityAccess(FieldableEntityInterface $entity): void;
@@ @@
   /**
    * Stores that the user has access to the entity's bundle.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity the access is stored for the bundle.
    */
   public function storeEntityBundleAccess(FieldableEntityInterface $entity): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/entity_access_password/src/Service/AccessCheckerManager.php:22

    ---------- begin diff ----------
@@ @@
    *
    * Set to NULL if the array needs to be re-calculated.
    *
-   * @var \Drupal\entity_access_password\Service\AccessCheckerInterface[]|null
+   * @var AccessCheckerInterface[]|null
    */
   protected $sortedCheckers;

@@ @@
   /**
    * Returns the sorted array of checkers.
    *
-   * @return \Drupal\entity_access_password\Service\AccessCheckerInterface[]
+   * @return AccessCheckerInterface[]
    *   An array of checker objects.
    */
   protected function getSortedCheckers() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/entity_access_password/src/Service/AccessCheckerInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Check if the current user has access to the entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to check access for.
    *
    * @return bool
@@ @@
   /**
    * Check if the current user has access to the entity's bundle.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to check bundle access for.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/entity_access_password/src/Plugin/Field/FieldWidget/EntityAccessPasswordWidget.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password\Plugin\Field\FieldWidget;

+use Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\Random;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The password hashing service object.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected PasswordInterface $password;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
    * {@inheritdoc}
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state): array {
-    /** @var \Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem $item */
+    /** @var EntityAccessPasswordItem $item */
     $item = $items[$delta];

     $states_selector = $this->getStatesSelector($element);
@@ @@
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/entity_access_password/src/Plugin/Field/FieldType/EntityAccessPasswordItem.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password\Plugin\Field\FieldType;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Utility\Random;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemBase;
@@ @@
     }

     // If no new password, re-inject saved password if existing.
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $original */
+    /** @var ContentEntityInterface $original */
     // @phpstan-ignore-next-line
     $original = $entity->original;
     // New entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/entity_access_password/src/Plugin/Field/FieldFormatter/EntityAccessPasswordFormFormatter.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password\Plugin\Field\FieldFormatter;

+use Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
       return $elements;
     }

-    /** @var \Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem $itemsData */
+    /** @var EntityAccessPasswordItem $itemsData */
     $itemsData = $items->get(0);
     /** @var array $values */
     $values = $itemsData->getValue();
@@ @@
     /** @var string $help_text */
     $help_text = $this->getSetting('help_text');

-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $entity = $itemsData->getEntity();

     $elements[] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/entity_access_password/src/Plugin/Field/FieldFormatter/EntityAccessPasswordBooleanFormatter.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password\Plugin\Field\FieldFormatter;

+use Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\Plugin\Field\FieldFormatter\BooleanFormatter;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode): array {
-    /** @var \Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem[] $items */
+    /** @var EntityAccessPasswordItem[] $items */
     $elements = [];

     $formats = $this->getOutputFormats();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/entity_access_password/src/HookHandler/Token.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password\HookHandler;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The password access manager.
    *
-   * @var \Drupal\entity_access_password\Service\PasswordAccessManagerInterface
+   * @var PasswordAccessManagerInterface
    */
   protected PasswordAccessManagerInterface $passwordAccessManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\entity_access_password\Service\PasswordAccessManagerInterface $passwordAccessManager
+   * @param PasswordAccessManagerInterface $passwordAccessManager
    *   The password access manager.
    */
   public function __construct(
@@ @@
    *   An associative array of data objects.
    * @param array $options
    *   An associative array of options for token replacement.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metadata.
    *
    * @return array
@@ @@
       foreach ($tokens as $name => $original) {
         switch ($name) {
           case 'protected-label':
-            /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+            /** @var ContentEntityInterface $entity */
             $entity = $data['entity'];
             $replacements[$original] = $entity->label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/entity_access_password/src/HookHandler/LabelReplacer.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password\HookHandler;

+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;

@@ @@
   /**
    * The route parser.
    *
-   * @var \Drupal\entity_access_password\Service\RouteParserInterface
+   * @var RouteParserInterface
    */
   protected RouteParserInterface $routeParser;

@@ @@
   /**
    * The password access manager.
    *
-   * @var \Drupal\entity_access_password\Service\PasswordAccessManagerInterface
+   * @var PasswordAccessManagerInterface
    */
   protected PasswordAccessManagerInterface $passwordAccessManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\entity_access_password\Service\RouteParserInterface $routeParser
+   * @param RouteParserInterface $routeParser
    *   The route parser.
-   * @param \Drupal\entity_access_password\Service\PasswordAccessManagerInterface $passwordAccessManager
+   * @param PasswordAccessManagerInterface $passwordAccessManager
    *   The password access manager.
    */
   public function __construct(
@@ @@
       return;
     }

-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $variables['node'];

     $cacheableMetadata = new CacheableMetadata();
@@ @@
       return;
     }

-    /** @var \Drupal\taxonomy\TermInterface $term */
+    /** @var TermInterface $term */
     $term = $variables['term'];

     $cacheableMetadata = new CacheableMetadata();
@@ @@
   /**
    * Get the replacement if the entity label should be masked.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheableMetadata
+   * @param CacheableMetadata $cacheableMetadata
    *   Cacheable metadata.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity if precised. NULL to use an entity from route context.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|null
+   * @return TranslatableMarkup|null
    *   The replacement markup. NULL if nothing to change.
    */
   protected function getReplacement(CacheableMetadata $cacheableMetadata, ?EntityInterface $entity = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/entity_access_password/src/HookHandler/FileDownload.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password\HookHandler;

+use Drupal\file\FileInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\entity_access_password\Event\FileUsageEntityListEvent;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The file usage service.
    *
-   * @var \Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected FileUsageInterface $fileUsage;

@@ @@
   /**
    * The password access manager.
    *
-   * @var \Drupal\entity_access_password\Service\PasswordAccessManagerInterface
+   * @var PasswordAccessManagerInterface
    */
   protected PasswordAccessManagerInterface $passwordAccessManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\file\FileUsage\FileUsageInterface $fileUsage
+   * @param FileUsageInterface $fileUsage
    *   The file usage service.
-   * @param \Drupal\entity_access_password\Service\PasswordAccessManagerInterface $passwordAccessManager
+   * @param PasswordAccessManagerInterface $passwordAccessManager
    *   The password access manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(
@@ @@
    * @see \hook_file_download()
    */
   public function fileDownload(string $uri) {
-    /** @var \Drupal\file\FileInterface[] $files */
+    /** @var FileInterface[] $files */
     $files = $this->entityTypeManager->getStorage('file')->loadByProperties([
       'uri' => $uri,
     ]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/entity_access_password/src/Form/SettingsForm.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The password hashing service.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected PasswordInterface $password;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/entity_access_password/src/Form/PasswordForm.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected FloodInterface $flood;

@@ @@
   /**
    * The password validator.
    *
-   * @var \Drupal\entity_access_password\Service\PasswordValidatorInterface
+   * @var PasswordValidatorInterface
    */
   protected PasswordValidatorInterface $passwordValidator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/entity_access_password/src/EventSubscriber/WebformSubmissionFileUsageSubscriber.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Get the webform submission parent entity if it exists.
    *
-   * @param \Drupal\entity_access_password\Event\FileUsageEntityListEvent $event
+   * @param FileUsageEntityListEvent $event
    *   The event containing the entities.
    */
   public function getWebformSubmissionParentEntities(FileUsageEntityListEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/entity_access_password/src/Event/FileUsageEntityListEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password\Event;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\EventDispatcher\Event;
 use Drupal\file\FileInterface;

@@ @@
   /**
    * The file being downloaded.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected FileInterface $file;

@@ @@
   /**
    * The list of entities the access will be checked.
    *
-   * @var array|\Drupal\Core\Entity\EntityInterface[]
+   * @var array|EntityInterface[]
    */
   protected array $entities;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file being downloaded.
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The list of entities the access will be checked.
    */
   public function __construct(FileInterface $file, array $entities) {
@@ @@
   /**
    * Returns the file entity.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file being manipulated.
    */
   public function getFile(): FileInterface {
@@ @@
   /**
    * Returns the list of entities to check.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The list of entities the access will be checked.
    */
   public function getEntities(): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/entity_access_password/src/Cache/Context/EntityIsProtectedCacheContext.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The password access manager.
    *
-   * @var \Drupal\entity_access_password\Service\PasswordAccessManagerInterface
+   * @var PasswordAccessManagerInterface
    */
   protected PasswordAccessManagerInterface $passwordAccessManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\entity_access_password\Service\PasswordAccessManagerInterface $passwordAccessManager
+   * @param PasswordAccessManagerInterface $passwordAccessManager
    *   The password access manager.
    */
   public function __construct(
@@ @@
    * @param string $entity_id
    *   The entity ID.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface|null
+   * @return FieldableEntityInterface|null
    *   The fieldable entity if found. NULL otherwise.
    */
   protected function loadEntity(string $entity_type_id, string $entity_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/tests/src/Functional/UserDataBackendTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;

@@ @@
   /**
    * The user data backend.
    *
-   * @var \Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface
+   * @var UserDataBackendInterface
    */
   protected UserDataBackendInterface $userDataBackend;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/tests/src/Functional/UserDataBackendFormsTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;

@@ @@
   /**
    * The user data backend.
    *
-   * @var \Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface
+   * @var UserDataBackendInterface
    */
   protected UserDataBackendInterface $userDataBackend;

@@ @@
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected AccountSwitcherInterface $accountSwitcher;

@@ @@
   /**
    * Another test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $user2;

@@ @@
    *
    * @param string $accessLevel
    *   The level of access to check.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
+   * @param FieldableEntityInterface|null $entity
    *   The entity to check access against. NULL if global access.
    */
   protected function checkAccessLevelForm(string $accessLevel, ?FieldableEntityInterface $entity = NULL): void {
@@ @@
   /**
    * Test the user form.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to check access for.
    */
   protected function checkUserForm(UserInterface $user): void {
@@ @@
    *
    * @param string $accessLevel
    *   The level of access to check.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to check access for.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
+   * @param FieldableEntityInterface|null $entity
    *   The entity to check access against. NULL if global access.
    */
   protected function userHasAccess(string $accessLevel, UserInterface $user, ?FieldableEntityInterface $entity = NULL): void {
@@ @@
    *
    * @param string $accessType
    *   The type of access to check.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to check access for.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
+   * @param FieldableEntityInterface|null $entity
    *   The entity to check access against.
    */
   protected function userDoesNotHaveAccess(string $accessType, UserInterface $user, ?FieldableEntityInterface $entity): void {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Service/UserDataBackendInterface.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Get the user data name for an entity level access.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to get entity level access name.
    *
    * @return string
@@ @@
   /**
    * Get the user data name for a bundle level access.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to get bundle level access name.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


36) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Service/UserDataBackend.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected AccountProxyInterface $currentUser;

@@ @@
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Routing/EntityFormRoutes.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type password bundle info.
    *
-   * @var \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface
+   * @var EntityTypePasswordBundleInfoInterface
    */
   protected EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo
+   * @param EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo
    *   The entity type password bundle info.
    */
   public function __construct(
@@ @@
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes(): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


38) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Routing/BundleFormRoutes.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type password bundle info.
    *
-   * @var \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface
+   * @var EntityTypePasswordBundleInfoInterface
    */
   protected EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo
+   * @param EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo
    *   The entity type password bundle info.
    */
   public function __construct(
@@ @@
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes(): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendEntityLocalTask.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password_user_data_backend\Plugin\Derivative;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\entity_access_password_user_data_backend\Routing\EntityFormRoutes;

 /**
@@ @@

     $password_infos = $this->entityTypePasswordBundleInfo->getAllPasswordBundleInfo();
     foreach ($password_infos as $entity_type_id => $entity_infos) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+      /** @var EntityTypeInterface $entity_type */
       $entity_type = $entity_infos['entity_type'];
       $has_canonical_path = $entity_type->hasLinkTemplate('canonical');
       $has_edit_path = $entity_type->hasLinkTemplate('edit');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendDeriverBase.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type password bundle info.
    *
-   * @var \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface
+   * @var EntityTypePasswordBundleInfoInterface
    */
   protected EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo
+   * @param EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo
    *   The entity type password bundle info.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendBundleMenuLink.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password_user_data_backend\Plugin\Derivative;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\entity_access_password_user_data_backend\Routing\BundleFormRoutes;

 /**
@@ @@

     $password_infos = $this->entityTypePasswordBundleInfo->getAllPasswordBundleInfo();
     foreach ($password_infos as $entity_type_id => $entity_infos) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+      /** @var EntityTypeInterface $entity_type */
       $entity_type = $entity_infos['entity_type'];
       foreach ($entity_infos['bundles'] as $bundle_id => $bundle_infos) {
         $route_name = \sprintf(BundleFormRoutes::ROUTE_NAME, $entity_type_id, $bundle_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendBundleLocalTask.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password_user_data_backend\Plugin\Derivative;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\entity_access_password_user_data_backend\Routing\BundleFormRoutes;

 /**
@@ @@

     $password_infos = $this->entityTypePasswordBundleInfo->getAllPasswordBundleInfo();
     foreach ($password_infos as $entity_type_id => $entity_infos) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+      /** @var EntityTypeInterface $entity_type */
       $entity_type = $entity_infos['entity_type'];
       foreach ($entity_infos['bundles'] as $bundle_id => $bundle_infos) {
         $route_name = \sprintf(BundleFormRoutes::ROUTE_NAME, $entity_type_id, $bundle_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/HookHandler/EntityTypeInfo.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected AccountProxyInterface $currentUser;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
    */
   public function __construct(
@@ @@
   /**
    * Adds operations on entity that supports it.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity on which to define an operation.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


44) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/HookHandler/EntityDelete.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;

@@ @@
   /**
    * The user data backend.
    *
-   * @var \Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface
+   * @var UserDataBackendInterface
    */
   protected UserDataBackendInterface $userDataBackend;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data.
-   * @param \Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface $userDataBackend
+   * @param UserDataBackendInterface $userDataBackend
    *   The user data backend.
    */
   public function __construct(
@@ @@
   /**
    * Purge user data on entity deletion.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity on which to purge user data.
    */
   public function entityDelete(EntityInterface $entity): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


45) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Form/UserUserDataEditForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password_user_data_backend\Form;

+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The user data backend.
    *
-   * @var \Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface
+   * @var UserDataBackendInterface
    */
   protected UserDataBackendInterface $userDataBackend;

@@ @@
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected AccountSwitcherInterface $accountSwitcher;

@@ @@
   /**
    * The entity type password bundle info.
    *
-   * @var \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface
+   * @var EntityTypePasswordBundleInfoInterface
    */
   protected EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo;

@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
     $storage = $form_state->getStorage();
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $storage['user'];
     $this->accountSwitcher->switchTo($user);

@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to alter access.
    */
   protected function buildEntityLevelSection(array &$form, FormStateInterface $form_state, UserInterface $user): void {
@@ @@
   /**
    * Get the options.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to get entity access list.
    *
    * @return array
@@ @@
         ->condition('uuid', $entity_uuids, 'IN')
         ->execute();

-      /** @var \Drupal\Core\Entity\FieldableEntityInterface[] $entities */
+      /** @var FieldableEntityInterface[] $entities */
       $entities = $entity_storage->loadMultiple($entity_ids);
       foreach ($entities as $entity) {
         $options[$this->userDataBackend->getEntityName($entity)] = $this->t('@entity_bundle: @entity_label', [
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to alter access.
    */
   protected function entityAccessSubmit(array $form, FormStateInterface $form_state, UserInterface $user): void {
@@ @@
       $entity_id = $parsed_entity_grant[1];
       $entity_storage = $this->entityTypeManager->getStorage($entity_type_id);

-      /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+      /** @var FieldableEntityInterface $entity */
       $entity = $entity_storage->load($entity_id);
       if ($entity == NULL) {
         $this->messenger()->addWarning($this->t('No entities found for the type @entity_type_id and the ID @entity_id.', [
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to alter access.
    */
   protected function buildBundleLevelSection(array &$form, FormStateInterface $form_state, UserInterface $user): void {
@@ @@
     $bundle_default_value = [];
     $password_infos = $this->entityTypePasswordBundleInfo->getAllPasswordBundleInfo();
     foreach ($password_infos as $entity_type_id => $entity_infos) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+      /** @var EntityTypeInterface $entity_type */
       $entity_type = $entity_infos['entity_type'];
       foreach ($entity_infos['bundles'] as $bundle_id => $bundle_infos) {
         $bundle_user_data_name = $this->userDataBackend->getBundleName($entity_type_id, $bundle_id);
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to alter access.
    */
   protected function bundleAccessSubmit(array $form, FormStateInterface $form_state, UserInterface $user): void {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   protected function buildGlobalLevelSection(array &$form, FormStateInterface $form_state): void {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to alter access.
    */
   protected function globalAccessSubmit(array $form, FormStateInterface $form_state, UserInterface $user): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Form/UserDataEditFormBase.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The user data backend.
    *
-   * @var \Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface
+   * @var UserDataBackendInterface
    */
   protected UserDataBackendInterface $userDataBackend;

@@ @@
   /**
    * Retrieve the form title.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The form title. To have it translatable.
    */
   abstract protected function getFormTitle(): TranslatableMarkup;
@@ @@

     $uids = \array_keys($entity_access);

-    /** @var \Drupal\user\UserInterface[] $users */
+    /** @var UserInterface[] $users */
     $users = $this->entityTypeManager->getStorage('user')->loadMultiple($uids);
     $options = [];
     foreach ($users as $user) {
@@ @@
   /**
    * Format a user option.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to format.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/src/Form/EntityUserDataEditForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_access_password_user_data_backend\Form;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
   /**
    * Retrieves entity from route match.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity object as determined from the passed-in route match.
    */
   protected function getEntityFromRouteMatch(RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/entity_access_password_user_data_backend.module:14

    ---------- begin diff ----------
@@ @@
  * Implements hook_entity_operation().
  */
 function entity_access_password_user_data_backend_entity_operation(EntityInterface $entity): array {
-  /** @var \Drupal\entity_access_password_user_data_backend\HookHandler\EntityTypeInfo $instance */
+  /** @var EntityTypeInfo $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(EntityTypeInfo::class);
   return $instance->entityOperation($entity);
@@ @@
  * Implements hook_entity_delete().
  */
 function entity_access_password_user_data_backend_entity_delete(EntityInterface $entity): void {
-  /** @var \Drupal\entity_access_password_user_data_backend\HookHandler\EntityDelete $instance */
+  /** @var EntityDelete $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(EntityDelete::class);
   $instance->entityDelete($entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


49) modules/contrib/entity_access_password/modules/entity_access_password_user_data_backend/entity_access_password_user_data_backend.install:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\user\UserDataInterface;

 use Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface;

@@ @@
  * Implements hook_uninstall().
  */
 function entity_access_password_user_data_backend_uninstall(bool $is_syncing) : void {
-  /** @var \Drupal\user\UserDataInterface $user_data */
+  /** @var UserDataInterface $user_data */
   $user_data = \Drupal::service('user.data');
   $user_data->delete(UserDataBackendInterface::MODULE_NAME);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


50) modules/contrib/entity_access_password/modules/entity_access_password_session_backend/src/Service/SessionBackend.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected SessionInterface $session;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
    */
   public function __construct(SessionInterface $session) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


51) modules/contrib/entity_access_password/entity_access_password.tokens.inc:13

    ---------- begin diff ----------
@@ @@
  * Implements hook_token_info().
  */
 function entity_access_password_token_info(): array {
-  /** @var \Drupal\entity_access_password\HookHandler\Token $instance */
+  /** @var Token $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(Token::class);
   return $instance->tokenInfo();
@@ @@
  * Implements hook_tokens().
  */
 function entity_access_password_tokens(string $type, array $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata): array {
-  /** @var \Drupal\entity_access_password\HookHandler\Token $instance */
+  /** @var Token $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(Token::class);
   return $instance->tokens($type, $tokens, $data, $options, $bubbleable_metadata);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


52) modules/contrib/entity_access_password/entity_access_password.module:36

    ---------- begin diff ----------
@@ @@
     return;
   }

-  /** @var \Drupal\entity_access_password\Service\PasswordAccessManagerInterface $password_access_manager */
+  /** @var PasswordAccessManagerInterface $password_access_manager */
   $password_access_manager = \Drupal::service('entity_access_password.password_access_manager');
   if ($password_access_manager->isEntityViewModeProtected($view_mode, $entity)) {
     $entity->addCacheContexts([EntityIsProtectedCacheContext::CONTEXT_ID . ':' . $entity->getEntityTypeId() . '||' . $entity->id() . '||' . $view_mode]);
@@ @@
  * @phpstan-ignore-next-line
  */
 function entity_access_password_file_download(string $uri) {
-  /** @var \Drupal\entity_access_password\HookHandler\FileDownload $instance */
+  /** @var FileDownload $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(FileDownload::class);
   return $instance->fileDownload($uri);
@@ @@
  * Implements hook_preprocess_HOOK() for 'html'.
  */
 function entity_access_password_preprocess_html(array &$variables): void {
-  /** @var \Drupal\entity_access_password\HookHandler\LabelReplacer $instance */
+  /** @var LabelReplacer $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(LabelReplacer::class);
   $instance->preprocessHtml($variables);
@@ @@
  * Implements hook_preprocess_HOOK() for 'page_title'.
  */
 function entity_access_password_preprocess_page_title(array &$variables): void {
-  /** @var \Drupal\entity_access_password\HookHandler\LabelReplacer $instance */
+  /** @var LabelReplacer $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(LabelReplacer::class);
   $instance->preprocessPageTitle($variables);
@@ @@
  * Implements hook_preprocess_HOOK() for 'node'.
  */
 function entity_access_password_preprocess_node(array &$variables): void {
-  /** @var \Drupal\entity_access_password\HookHandler\LabelReplacer $instance */
+  /** @var LabelReplacer $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(LabelReplacer::class);
   $instance->preprocessNode($variables);
@@ @@
  * Implements hook_preprocess_HOOK() for 'taxonomy_term'.
  */
 function entity_access_password_preprocess_taxonomy_term(array &$variables): void {
-  /** @var \Drupal\entity_access_password\HookHandler\LabelReplacer $instance */
+  /** @var LabelReplacer $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(LabelReplacer::class);
   $instance->preprocessTaxonomyTerm($variables);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 52 files have been changed by Rector                                      

