diff --git a/apigee_api_catalog.info.yml b/apigee_api_catalog.info.yml
index 37e13b6..a10bd08 100644
--- a/apigee_api_catalog.info.yml
+++ b/apigee_api_catalog.info.yml
@@ -1,7 +1,7 @@
 name: 'Apigee API Catalog'
 type: module
 description: 'Display OpenAPI documentation of your APIs to your developers.'
-core_version_requirement: ^8.8.0 || ^9
+core_version_requirement: ^9.3 || ^10
 package: 'Apigee'
 dependencies:
 - drupal:text
diff --git a/apigee_api_catalog.install b/apigee_api_catalog.install
index 314053f..13bd440 100644
--- a/apigee_api_catalog.install
+++ b/apigee_api_catalog.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 /**
  * @file
  * Copyright 2019 Google Inc.
@@ -53,7 +54,7 @@ function apigee_api_catalog_update_8701() {
   $entity_type = $definition_update_manager->getEntityType($entity_type_id);
 
   // Update the field storage definition.
-  /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storage_definitions */
+  /** @var FieldStorageDefinitionInterface[] $field_storage_definitions */
   $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);
   $field_storage_definitions[$field_name]->setSetting('max_length', $field_length);
   $definition_update_manager->updateFieldableEntityType($entity_type, $field_storage_definitions, $sandbox);
diff --git a/apigee_api_catalog.module b/apigee_api_catalog.module
index ce91fa7..0e30352 100644
--- a/apigee_api_catalog.module
+++ b/apigee_api_catalog.module
@@ -186,7 +186,7 @@ function apigee_api_catalog_form_node_form_alter(&$form, FormStateInterface $for
  *
  * @param array $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function _apigee_api_catalog_form_node_form_validate(&$form, FormStateInterface $form_state) {
diff --git a/src/Entity/Access/ApiDocAccessControlHandler.php b/src/Entity/Access/ApiDocAccessControlHandler.php
index f88c4e2..995d74c 100755
--- a/src/Entity/Access/ApiDocAccessControlHandler.php
+++ b/src/Entity/Access/ApiDocAccessControlHandler.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_api_catalog\Entity\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\apigee_api_catalog\Entity\ApiDocInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityHandlerInterface;
@@ -43,16 +45,16 @@ class ApiDocAccessControlHandler extends EntityAccessControlHandler implements E
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an access control handler instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entityTypeManager) {
@@ -74,7 +76,7 @@ class ApiDocAccessControlHandler extends EntityAccessControlHandler implements E
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\apigee_api_catalog\Entity\ApiDocInterface $entity */
+    /** @var ApiDocInterface $entity */
     $access = parent::checkAccess($entity, $operation, $account);
 
     // Access control for revisions.
@@ -107,18 +109,18 @@ class ApiDocAccessControlHandler extends EntityAccessControlHandler implements E
   /**
    * Additional access control for revisions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to check access.
    * @param string $operation
    *   The entity operation.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function checkAccessRevisions(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
+    /** @var EntityStorageInterface $entity_storage */
     $entity_storage = $this->entityTypeManager->getStorage($this->entityTypeId);
 
     // Must have access to the same operation on the default revision.
diff --git a/src/Entity/Form/ApiDocReimportSpecForm.php b/src/Entity/Form/ApiDocReimportSpecForm.php
index 6c2a3de..347e00e 100644
--- a/src/Entity/Form/ApiDocReimportSpecForm.php
+++ b/src/Entity/Form/ApiDocReimportSpecForm.php
@@ -19,6 +19,8 @@
 
 namespace Drupal\apigee_api_catalog\Entity\Form;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\node\NodeInterface;
 use Drupal\apigee_api_catalog\SpecFetcherInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Access\AccessResult;
@@ -40,14 +42,14 @@ class ApiDocReimportSpecForm extends ContentEntityConfirmFormBase {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The ApiDoc spec fetcher service.
    *
-   * @var \Drupal\apigee_api_catalog\SpecFetcherInterface
+   * @var SpecFetcherInterface
    */
   protected $specFetcher;
 
@@ -59,15 +61,15 @@ class ApiDocReimportSpecForm extends ContentEntityConfirmFormBase {
   /**
    * Constructs a ApiDocReimportSpecForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\apigee_api_catalog\SpecFetcherInterface $spec_fetcher
+   * @param SpecFetcherInterface $spec_fetcher
    *   The ApiDoc spec fetcher service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, MessengerInterface $messenger, SpecFetcherInterface $spec_fetcher) {
@@ -92,16 +94,16 @@ class ApiDocReimportSpecForm extends ContentEntityConfirmFormBase {
   /**
    * Checks access for the form page.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function checkAccess(RouteMatchInterface $route_match, AccountInterface $account) {
-    /** @var \Drupal\node\NodeInterface $entity */
+    /** @var NodeInterface $entity */
     $entity = $route_match->getParameter('node');
 
     return AccessResult::allowedIf($entity->bundle() == 'apidoc' && $entity->access('update', $account));
diff --git a/src/Entity/Routing/ApiDocHtmlRouteProvider.php b/src/Entity/Routing/ApiDocHtmlRouteProvider.php
index 92ae2ca..c73d47f 100644
--- a/src/Entity/Routing/ApiDocHtmlRouteProvider.php
+++ b/src/Entity/Routing/ApiDocHtmlRouteProvider.php
@@ -61,10 +61,10 @@ class ApiDocHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
@@ -85,10 +85,10 @@ class ApiDocHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the reimport-spec-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getReimportSpecFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/EventSubscriber/PageNotFoundEventSubscriber.php b/src/EventSubscriber/PageNotFoundEventSubscriber.php
index 6d9e9eb..f23da79 100644
--- a/src/EventSubscriber/PageNotFoundEventSubscriber.php
+++ b/src/EventSubscriber/PageNotFoundEventSubscriber.php
@@ -20,11 +20,11 @@
 
 namespace Drupal\apigee_api_catalog\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Path\PathMatcherInterface;
 use Drupal\Core\Path\PathValidatorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
 
@@ -38,23 +38,23 @@ class PageNotFoundEventSubscriber implements EventSubscriberInterface {
   /**
    * The path validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * The patch matcher service.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * PageNotFoundEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The patch matcher service.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator service.
    */
   public function __construct(PathMatcherInterface $path_matcher, PathValidatorInterface $path_validator) {
@@ -65,13 +65,13 @@ class PageNotFoundEventSubscriber implements EventSubscriberInterface {
   /**
    * Redirects to the apidoc canonical route if we have a not found exception.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The exception event.
    */
-  public function onNotFoundException(GetResponseForExceptionEvent $event) {
+  public function onNotFoundException(ExceptionEvent $event) {
     // Check if the request uri matches an apidoc canonical route.
     // Also check for apidoc valid path.
-    if ($event->getException() instanceof NotFoundHttpException
+    if ($event->getThrowable() instanceof NotFoundHttpException
       && ($uri = $event->getRequest()->getRequestUri())
       && $this->pathMatcher->matchPath($uri, '/api/*/*')
       && (list(,, $id) = explode('/', $uri))
diff --git a/src/Plugin/Field/FieldFormatter/SmartDocsFormatter.php b/src/Plugin/Field/FieldFormatter/SmartDocsFormatter.php
index 7e2dac3..a0bf58e 100644
--- a/src/Plugin/Field/FieldFormatter/SmartDocsFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/SmartDocsFormatter.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_api_catalog\Plugin\Field\FieldFormatter;
 
+use Drupal\file\Entity\File;
 use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -46,7 +47,7 @@ class SmartDocsFormatter extends FileFormatterBase implements ContainerFactoryPl
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
@@ -57,7 +58,7 @@ class SmartDocsFormatter extends FileFormatterBase implements ContainerFactoryPl
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -67,7 +68,7 @@ class SmartDocsFormatter extends FileFormatterBase implements ContainerFactoryPl
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   The logger factory.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, LoggerChannelFactoryInterface $loggerFactory) {
@@ -120,7 +121,7 @@ class SmartDocsFormatter extends FileFormatterBase implements ContainerFactoryPl
     // The list of OpenAPI specs to pass to SmartDocs Angular app.
     $openapi_files = [];
 
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     foreach ($this->getEntitiesToView($items, $langcode) as $delta => $file) {
       $openapi_files[] = [
         // Get the URL of the file on server.
diff --git a/src/Plugin/Validation/Constraint/ApiDocFileLinkConstraintValidator.php b/src/Plugin/Validation/Constraint/ApiDocFileLinkConstraintValidator.php
index bf34c03..8d3fb6a 100644
--- a/src/Plugin/Validation/Constraint/ApiDocFileLinkConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/ApiDocFileLinkConstraintValidator.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_api_catalog\Plugin\Validation\Constraint;
 
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Url;
 use GuzzleHttp\ClientInterface;
@@ -36,14 +37,14 @@ class ApiDocFileLinkConstraintValidator extends ConstraintValidator implements C
   /**
    * The HTTP client to fetch the files with.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * ApiDocFileLinkConstraintValidator constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   A Guzzle client object.
    */
   public function __construct(ClientInterface $http_client) {
@@ -61,7 +62,7 @@ class ApiDocFileLinkConstraintValidator extends ConstraintValidator implements C
    * {@inheritdoc}
    */
   public function validate($items, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+    /** @var FieldItemListInterface $items */
     if (!isset($items)) {
       return;
     }
diff --git a/src/SpecFetcher.php b/src/SpecFetcher.php
index 6adbfd1..f26d661 100644
--- a/src/SpecFetcher.php
+++ b/src/SpecFetcher.php
@@ -46,45 +46,45 @@ class SpecFetcher implements SpecFetcherInterface {
   /**
    * Drupal\Core\File\FileSystemInterface definition.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * GuzzleHttp\ClientInterface definition.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * Constructs a new SpecFetcher.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file_system service.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The http_client service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger service.
    */
   public function __construct(FileSystemInterface $file_system, ClientInterface $http_client, EntityTypeManagerInterface $entityTypeManager, TranslationInterface $translation, MessengerInterface $messenger, LoggerInterface $logger) {
@@ -172,7 +172,7 @@ class SpecFetcher implements SpecFetcherInterface {
 
         try {
           $this->checkRequirements($destination);
-          $file = file_save_data($data, $destination . $filename, FileSystemInterface::EXISTS_RENAME);
+          $file = \Drupal::service('file.repository')->writeData($data, $destination . $filename, FileSystemInterface::EXISTS_RENAME);
 
           if (empty($file)) {
             throw new \Exception('Could not save API Doc specification file.');
diff --git a/src/SpecFetcherInterface.php b/src/SpecFetcherInterface.php
index c32e56b..28fb380 100644
--- a/src/SpecFetcherInterface.php
+++ b/src/SpecFetcherInterface.php
@@ -82,7 +82,7 @@ interface SpecFetcherInterface {
    * it returns STATUS_UPDATED or STATUS_UNCHANGED), it does not save
    * the ApiDoc entity.
    *
-   * @param \Drupal\node\NodeInterface $apidoc
+   * @param NodeInterface $apidoc
    *   The ApiDoc entity.
    *
    * @return string
diff --git a/src/UpdateService.php b/src/UpdateService.php
index b20825c..476c6c2 100644
--- a/src/UpdateService.php
+++ b/src/UpdateService.php
@@ -39,42 +39,42 @@ class UpdateService {
   /**
    * Drupal\Component\Uuid\UuidInterface definition.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;
 
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Core\Entity\EntityFieldManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface
+   * @var EntityLastInstalledSchemaRepositoryInterface
    */
   protected $lastInstalledSchemaRepository;
 
@@ -103,7 +103,7 @@ class UpdateService {
    */
   public function update8802() {
     $module = 'apigee_api_catalog';
-    $configPath = drupal_get_path('module', $module) . '/config';
+    $configPath = \Drupal::service('extension.list.module')->getPath($module) . '/config';
     $configToImport['install'] = [
       'node.type.apidoc',
       'core.base_field_override.node.apidoc.title',
diff --git a/tests/src/Functional/ApiDocsAdminTest.php b/tests/src/Functional/ApiDocsAdminTest.php
index 5726e83..8d0a33e 100755
--- a/tests/src/Functional/ApiDocsAdminTest.php
+++ b/tests/src/Functional/ApiDocsAdminTest.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\Tests\apigee_api_catalog\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Url;
 use Drupal\file\Entity\File;
@@ -50,7 +51,7 @@ class ApiDocsAdminTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -68,7 +69,7 @@ class ApiDocsAdminTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Add the system menu blocks to appropriate regions.
diff --git a/tests/src/Functional/ApiDocsJsonApi.php b/tests/src/Functional/ApiDocsJsonApi.php
index 13fdc80..ebd2241 100644
--- a/tests/src/Functional/ApiDocsJsonApi.php
+++ b/tests/src/Functional/ApiDocsJsonApi.php
@@ -19,6 +19,8 @@
 
 namespace Drupal\Tests\apigee_api_catalog\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Session\AccountInterface;
@@ -52,21 +54,21 @@ class ApiDocsJsonApi extends BrowserTestBase {
   /**
    * A published API Doc.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $apidocPublished;
 
   /**
    * An unpublished API Doc.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $apidocUnpublished;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $nodeStorage = $this->container->get('entity_type.manager')->getStorage('node');
@@ -121,7 +123,7 @@ class ApiDocsJsonApi extends BrowserTestBase {
   /**
    * Make sure admin can filter and get results back.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testFilterAdminAccess() {
     $account = $this->drupalCreateUser([
@@ -141,7 +143,7 @@ class ApiDocsJsonApi extends BrowserTestBase {
   /**
    * View published permission can filter published docs.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testFilterViewAccessViewPublished() {
     $account = $this->drupalCreateUser([
@@ -174,7 +176,7 @@ class ApiDocsJsonApi extends BrowserTestBase {
   /**
    * Verify the account has access when making JSON:API call.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to send the call.
    * @param array $apidocs_expected
    *   An array of the expected API Docs.
@@ -213,7 +215,7 @@ class ApiDocsJsonApi extends BrowserTestBase {
       return strcmp($a['attributes']['title'], $b['attributes']['title']);
     });
     for ($i = 0; $i < count($apidocs_response); $i++) {
-      $this->assertEqual($apidocs_expected[$i]->label(), $apidocs_response[$i]['attributes']['title']);
+      $this->assertEquals($apidocs_expected[$i]->label(), $apidocs_response[$i]['attributes']['title']);
     }
     // Make sure the count is the same.
     $this->assertCount(count($apidocs_expected), $apidocs_response, 'Count of API Docs returned does not match count of expected.');
diff --git a/tests/src/Functional/SmartdocRoutingTest.php b/tests/src/Functional/SmartdocRoutingTest.php
index bcacd6d..5517341 100755
--- a/tests/src/Functional/SmartdocRoutingTest.php
+++ b/tests/src/Functional/SmartdocRoutingTest.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\Tests\apigee_api_catalog\Functional;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -47,14 +48,14 @@ class SmartdocRoutingTest extends BrowserTestBase {
   /**
    * A test doc.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $apidoc;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->apidoc = $this->container->get('entity_type.manager')
@@ -79,12 +80,12 @@ class SmartdocRoutingTest extends BrowserTestBase {
    * Tests the route subscriber will redirect from smartdoc routes.
    */
   public function testNotFoundSubscriber() {
-    $this->assertEqual($this->apidoc->id(), 1);
+    $this->assertEquals($this->apidoc->id(), 1);
 
     // This needs to run before the alias can be picked up?
     $this->apidoc->toUrl()->toString();
     $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/1', $this->apidoc->language()->getId());
-    $this->assertEqual($alias, '/api/1');
+    $this->assertEquals($alias, '/api/1');
 
     $assert = $this->assertSession();
 
@@ -95,7 +96,7 @@ class SmartdocRoutingTest extends BrowserTestBase {
     static::assertEmpty($this->getSession()->getResponseHeader('location'));
 
     // Test the canonical route uses the /api/* path alias.
-    $this->assertEqual(parse_url($this->getSession()->getCurrentUrl(), PHP_URL_PATH), '/api/1');
+    $this->assertEquals(parse_url($this->getSession()->getCurrentUrl(), PHP_URL_PATH), '/api/1');
 
     // Tests the node alias response.
     $this->drupalGet('/api/1');
@@ -107,8 +108,8 @@ class SmartdocRoutingTest extends BrowserTestBase {
     $response = $this->getHttpClient()->request('GET', $url->toString(), [
       'allow_redirects' => FALSE,
     ]);
-    $this->assertEqual($response->getStatusCode(), 302);
-    $this->assertEqual($response->getHeader('location')[0], '/api/1');
+    $this->assertEquals($response->getStatusCode(), 302);
+    $this->assertEquals($response->getHeader('location')[0], '/api/1');
   }
 
 }
diff --git a/tests/src/Kernel/ApidocEntityTest.php b/tests/src/Kernel/ApidocEntityTest.php
index e59661d..df93711 100755
--- a/tests/src/Kernel/ApidocEntityTest.php
+++ b/tests/src/Kernel/ApidocEntityTest.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\Tests\apigee_api_catalog\Kernel;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -32,14 +34,14 @@ class ApidocEntityTest extends KernelTestBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;
 
@@ -63,7 +65,7 @@ class ApidocEntityTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('user', ['users_data']);
@@ -102,7 +104,7 @@ class ApidocEntityTest extends KernelTestBase {
     // This needs to run before the alias can be picked up?
     $entity->toUrl()->toString();
     $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $entity->id(), $entity->language()->getId());
-    $this->assertEqual($alias, '/api/' . $entity->id());
+    $this->assertEquals($alias, '/api/' . $entity->id());
 
     $entity->delete();
     $this->assertNull($this->nodeStorage->load($entity_id));
