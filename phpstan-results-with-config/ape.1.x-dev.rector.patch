diff --git a/src/EventSubscriber/ApeSubscriber.php b/src/EventSubscriber/ApeSubscriber.php
index 08bed5c..ceb859c 100644
--- a/src/EventSubscriber/ApeSubscriber.php
+++ b/src/EventSubscriber/ApeSubscriber.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\ape\EventSubscriber;
 
+use Drupal\Core\Config\Config;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Plugin\Factory\FactoryInterface;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\PageCache\RequestPolicyInterface;
@@ -22,35 +23,35 @@ class ApeSubscriber implements EventSubscriberInterface {
   /**
    * A config object for the system performance configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $configApe;
 
   /**
    * A config object for the system performance configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $configSystem;
 
   /**
    * A policy rule determining the cacheability of a request.
    *
-   * @var \Drupal\Core\PageCache\RequestPolicyInterface
+   * @var RequestPolicyInterface
    */
   protected $requestPolicy;
 
   /**
    * A policy rule determining the cacheability of the response.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicyInterface
+   * @var ResponsePolicyInterface
    */
   protected $responsePolicy;
 
   /**
    * Condition plugin manager.
    *
-   * @var \Drupal\Component\Plugin\Factory\FactoryInterface $plugin_factory
+   * @var FactoryInterface $plugin_factory
    *   Factory for condition plugin manager.
    */
   protected $conditionManager;
@@ -66,10 +67,10 @@ class ApeSubscriber implements EventSubscriberInterface {
   /**
    * Sets extra headers on successful responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
 
     if (!$event->isMasterRequest()) {
       return;
@@ -134,7 +135,7 @@ class ApeSubscriber implements EventSubscriberInterface {
   /**
    * Final cache check to respect defined cache policies and max age.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    *
    * @param int $maxAge
@@ -144,7 +145,7 @@ class ApeSubscriber implements EventSubscriberInterface {
    *   True if caching policies allow caching and max age is greater than 0,
    *   false if not.
    */
-  private function checkCacheable(FilterResponseEvent $event, $maxAge) {
+  private function checkCacheable(ResponseEvent $event, $maxAge) {
     $request = $event->getRequest();
     $response = $event->getResponse();
 
@@ -156,13 +157,13 @@ class ApeSubscriber implements EventSubscriberInterface {
   /**
    * Sets the cache control header.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    *
    * @param int $maxAge
    *   The cache expiration age, in seconds.
    */
-  private function setCacheHeader(FilterResponseEvent $event, $maxAge) {
+  private function setCacheHeader(ResponseEvent $event, $maxAge) {
     $response = $event->getResponse();
 
     $value = 'no-cache, must-revalidate';
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 13e027b..57bdb73 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ape\Form;
 
+use Drupal\system\Plugin\Condition\RequestPath;
 use Drupal\Component\Plugin\Factory\FactoryInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -14,32 +15,32 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Alternatives Condition
    *
-   * @var \Drupal\system\Plugin\Condition\RequestPath
+   * @var RequestPath
    */
   protected $alternatives;
 
   /**
    * Excluded Condition
    *
-   * @var \Drupal\system\Plugin\Condition\RequestPath
+   * @var RequestPath
    */
   protected $excluded;
 
   /**
    * Constructs a PerformanceForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Plugin\Factory\FactoryInterface $plugin_factory
+   * @param FactoryInterface $plugin_factory
    *   Factory for condition plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, DateFormatterInterface $date_formatter, FactoryInterface $plugin_factory) {
diff --git a/src/PageCache/ExcludePages.php b/src/PageCache/ExcludePages.php
index 76e3185..63c15bc 100644
--- a/src/PageCache/ExcludePages.php
+++ b/src/PageCache/ExcludePages.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ape\PageCache;
 
+use Drupal\Core\Config\Config;
 use Drupal\Component\Plugin\Factory\FactoryInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\PageCache\ResponsePolicyInterface;
@@ -19,14 +20,14 @@ class ExcludePages implements ResponsePolicyInterface {
   /**
    * A config object for the system performance configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * Condition plugin manager.
    *
-   * @var \Drupal\Component\Plugin\Factory\FactoryInterface $plugin_factory
+   * @var FactoryInterface $plugin_factory
    *   Factory for condition plugin manager.
    */
   protected $conditionManager;
diff --git a/src/Tests/ApeMinTest.php b/src/Tests/ApeMinTest.php
index db2ba1d..d5defb8 100644
--- a/src/Tests/ApeMinTest.php
+++ b/src/Tests/ApeMinTest.php
@@ -56,7 +56,7 @@ class ApeMinTest extends BrowserTestBase {
   public function testApeHeaders() {
     // Check user registration page has global age.
     $this->drupalGet('user/register');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'max-age=2592000, public', 'Global Cache-Control header set.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'max-age=2592000, public', 'Global Cache-Control header set.');
 
   }
 
diff --git a/src/Tests/ApeTest.php b/src/Tests/ApeTest.php
index 1884eab..680e833 100644
--- a/src/Tests/ApeTest.php
+++ b/src/Tests/ApeTest.php
@@ -56,31 +56,31 @@ class ApeTest extends BrowserTestBase {
   public function testApeHeaders() {
     // Check user registration page has global age.
     $this->drupalGet('user/register');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'max-age=2592000, public', 'Global Cache-Control header set.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'max-age=2592000, public', 'Global Cache-Control header set.');
 
     // Check homepage has alternative age.
     $this->drupalGet('/ape_alternative');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'max-age=60, public', 'Alternative Cache-Control header set.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'max-age=60, public', 'Alternative Cache-Control header set.');
 
     // Check login page is excluded from caching.
     $this->drupalGet('/ape_exclude');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Page successfully excluded from caching.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Page successfully excluded from caching.');
 
     // Check that authenticated users bypass the cache.
     $user = $this->drupalCreateUser();
     $this->drupalLogin($user);
     $this->drupalGet('user');
     $this->assertNull($this->drupalGetHeader('X-Drupal-Cache'), 'Caching was bypassed.');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Cache-Control header was sent.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Cache-Control header was sent.');
     $this->drupalLogout();
 
     // Check that 403 responses have configured age.
     $this->drupalGet('admin/structure');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Forbidden page was not cached.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Forbidden page was not cached.');
 
     // Check that 404 responses have configured age.
     $this->drupalGet('notfindingthat');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'max-age=3600, public', '404 Page Not Found Cache-Control header set.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'max-age=3600, public', '404 Page Not Found Cache-Control header set.');
 
     // TODO: Figure out why these tests aren't working. The browser output shows
     // that are they are working as expected. Drupal 8 returned an array of
