diff --git a/connectors/l10n_drupal/src/Plugin/l10n_server/Connector/Drupal.php b/connectors/l10n_drupal/src/Plugin/l10n_server/Connector/Drupal.php
index cabb93f..7a4f89a 100644
--- a/connectors/l10n_drupal/src/Plugin/l10n_server/Connector/Drupal.php
+++ b/connectors/l10n_drupal/src/Plugin/l10n_server/Connector/Drupal.php
@@ -31,7 +31,7 @@ class Drupal extends ConfigurableConnectorPluginBase implements ConnectorScanHan
   /**
    * The Release.
    *
-   * @var \Drupal\l10n_server\Entity\L10nServerRelease
+   * @var L10nServerRelease
    */
   protected L10nServerRelease $release;
 
diff --git a/connectors/l10n_drupal_rest/src/ParserService.php b/connectors/l10n_drupal_rest/src/ParserService.php
index 8341164..05649de 100644
--- a/connectors/l10n_drupal_rest/src/ParserService.php
+++ b/connectors/l10n_drupal_rest/src/ParserService.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_drupal_rest;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -28,63 +29,63 @@ class ParserService {
   /**
    * The config object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $config;
 
   /**
    * A state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected StateInterface $state;
 
   /**
    * An HTTP client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected ClientInterface $httpClient;
 
   /**
    * A file repository service.
    *
-   * @var \Drupal\file\FileRepositoryInterface
+   * @var FileRepositoryInterface
    */
   protected FileRepositoryInterface $fileRepository;
 
   /**
    * A file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private FileSystemInterface $fileSystem;
 
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected LoggerChannelInterface $logger;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The connector instance.
    *
-   * @var \Drupal\l10n_server\ConnectorInterface
+   * @var ConnectorInterface
    */
   private ConnectorInterface $connector;
 
   /**
    * The release.
    *
-   * @var \Drupal\l10n_server\Entity\L10nServerReleaseInterface
+   * @var L10nServerReleaseInterface
    */
   private L10nServerReleaseInterface $release;
 
@@ -151,19 +152,19 @@ class ParserService {
   /**
    * Constructs a DrupalRestService object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
-   * @param \Drupal\file\FileRepositoryInterface $file_repository
+   * @param FileRepositoryInterface $file_repository
    *   The file repository.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
@@ -195,7 +196,7 @@ class ParserService {
   /**
    * Sets connector.
    *
-   * @param \Drupal\l10n_server\ConnectorInterface $connector
+   * @param ConnectorInterface $connector
    *   The connector instance.
    *
    * @return $this
@@ -208,7 +209,7 @@ class ParserService {
   /**
    * Gets release.
    *
-   * @return \Drupal\l10n_server\Entity\L10nServerReleaseInterface
+   * @return L10nServerReleaseInterface
    *   The release object.
    */
   public function getRelease(): L10nServerReleaseInterface {
@@ -218,7 +219,7 @@ class ParserService {
   /**
    * Sets release.
    *
-   * @param \Drupal\l10n_server\Entity\L10nServerReleaseInterface $release
+   * @param L10nServerReleaseInterface $release
    *   The release object.
    *
    * @return $this
@@ -365,7 +366,7 @@ class ParserService {
   /**
    * Processes a release.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function processRelease(): void {
     $release = clone $this->release;
diff --git a/connectors/l10n_drupal_rest/src/Plugin/l10n_server/Connector/DrupalRest.php b/connectors/l10n_drupal_rest/src/Plugin/l10n_server/Connector/DrupalRest.php
index 674be81..3426f68 100644
--- a/connectors/l10n_drupal_rest/src/Plugin/l10n_server/Connector/DrupalRest.php
+++ b/connectors/l10n_drupal_rest/src/Plugin/l10n_server/Connector/DrupalRest.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_drupal_rest\Plugin\l10n_server\Connector;
 
+use Drupal\l10n_server\Entity\Storage\L10nServerReleaseStorage;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\l10n_drupal_rest\ParserService;
 use Drupal\l10n_drupal_rest\ScannerService;
@@ -34,35 +35,35 @@ class DrupalRest extends ConnectorPluginBase implements ConnectorScanHandlerInte
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;
 
   /**
    * HTTP Client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected ClientInterface $httpClient;
 
   /**
    * Scanner service.
    *
-   * @var \Drupal\l10n_drupal_rest\ScannerService
+   * @var ScannerService
    */
   protected ScannerService $scanner;
 
   /**
    * Parser service.
    *
-   * @var \Drupal\l10n_drupal_rest\ParserService
+   * @var ParserService
    */
   protected ParserService $parser;
 
   /**
    * The release.
    *
-   * @var \Drupal\l10n_server\Entity\L10nServerRelease
+   * @var L10nServerRelease
    */
   protected L10nServerRelease $release;
 
@@ -83,7 +84,7 @@ class DrupalRest extends ConnectorPluginBase implements ConnectorScanHandlerInte
    */
   public function parseHandler(): ConnectorParseHandlerResultInterface|FALSE {
     if (!$this->release) {
-      /** @var \Drupal\l10n_server\Entity\Storage\L10nServerReleaseStorage $release_storage */
+      /** @var L10nServerReleaseStorage $release_storage */
       $release_storage = \Drupal::entityTypeManager()->getStorage('l10n_server_release');
       $release_ids = $release_storage->getIdsToRefresh();
       if ($release_ids) {
diff --git a/connectors/l10n_drupal_rest/src/ScannerService.php b/connectors/l10n_drupal_rest/src/ScannerService.php
index fcb069f..5f4296f 100644
--- a/connectors/l10n_drupal_rest/src/ScannerService.php
+++ b/connectors/l10n_drupal_rest/src/ScannerService.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_drupal_rest;
 
+use Drupal\l10n_server\Entity\L10nServerProject;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -34,56 +35,56 @@ class ScannerService {
   /**
    * The config object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $config;
 
   /**
    * A state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected StateInterface $state;
 
   /**
    * An HTTP client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected ClientInterface $httpClient;
 
   /**
    * A file repository service.
    *
-   * @var \Drupal\file\FileRepositoryInterface
+   * @var FileRepositoryInterface
    */
   protected FileRepositoryInterface $fileRepository;
 
   /**
    * A file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private FileSystemInterface $fileSystem;
 
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected LoggerChannelInterface $logger;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The connector instance.
    *
-   * @var \Drupal\l10n_server\ConnectorInterface
+   * @var ConnectorInterface
    */
   private ConnectorInterface $connector;
 
@@ -139,19 +140,19 @@ class ScannerService {
   /**
    * Constructs a DrupalRestService object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
-   * @param \Drupal\file\FileRepositoryInterface $file_repository
+   * @param FileRepositoryInterface $file_repository
    *   The file repository.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
@@ -182,7 +183,7 @@ class ScannerService {
   /**
    * Sets connector.
    *
-   * @param \Drupal\l10n_server\ConnectorInterface $connector
+   * @param ConnectorInterface $connector
    *   The connector instance.
    *
    * @return $this
@@ -289,7 +290,7 @@ class ScannerService {
     $response = $this->httpClient->get($url, ['connect_timeout' => 30]);
 
     // Save as temporary file.
-    /** @var \Drupal\file\FileRepositoryInterface $fileRepository */
+    /** @var FileRepositoryInterface $fileRepository */
     $file_repository = \Drupal::service('file.repository');
     $file_repository->writeData(
       $response->getBody()->getContents(),
@@ -359,7 +360,7 @@ class ScannerService {
         ->execute();
 
       if ($existing_projects) {
-        /** @var \Drupal\l10n_server\Entity\L10nServerProject $existing_project */
+        /** @var L10nServerProject $existing_project */
         $existing_project = $project_storage->load(reset($existing_projects));
 
         // Check that the title is correct, if not update it.
diff --git a/connectors/l10n_gettext/src/Plugin/l10n_server/Connector/Gettext.php b/connectors/l10n_gettext/src/Plugin/l10n_server/Connector/Gettext.php
index 7c02685..dce5f20 100644
--- a/connectors/l10n_gettext/src/Plugin/l10n_server/Connector/Gettext.php
+++ b/connectors/l10n_gettext/src/Plugin/l10n_server/Connector/Gettext.php
@@ -25,7 +25,7 @@ class Gettext extends ConnectorPluginBase implements ConnectorParseHandlerInterf
   /**
    * The release.
    *
-   * @var \Drupal\l10n_server\Entity\L10nServerRelease
+   * @var L10nServerRelease
    */
   private L10nServerRelease $release;
 
diff --git a/l10n_packager/src/Commands/L10nPackagerCommands.php b/l10n_packager/src/Commands/L10nPackagerCommands.php
index 93b31db..6195f05 100644
--- a/l10n_packager/src/Commands/L10nPackagerCommands.php
+++ b/l10n_packager/src/Commands/L10nPackagerCommands.php
@@ -3,6 +3,9 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_packager\Commands;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\l10n_server\Entity\L10nServerRelease;
 use Drupal\l10n_server\L10nHelper;
 use Drush\Commands\DrushCommands;
@@ -36,9 +39,9 @@ class L10nPackagerCommands extends DrushCommands {
    *
    * @aliases lpq
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function queue(array $options = ['force' => NULL]): void {
 
diff --git a/l10n_packager/src/Entity/ListBuilder/L10nPackagerFileListBuilder.php b/l10n_packager/src/Entity/ListBuilder/L10nPackagerFileListBuilder.php
index c99d9ea..5ed4098 100644
--- a/l10n_packager/src/Entity/ListBuilder/L10nPackagerFileListBuilder.php
+++ b/l10n_packager/src/Entity/ListBuilder/L10nPackagerFileListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\l10n_packager\Entity\ListBuilder;
 
+use Drupal\l10n_packager\L10nPackagerFileInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ -17,18 +18,18 @@ class L10nPackagerFileListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new L10nPackagerFileListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter) {
@@ -78,7 +79,7 @@ class L10nPackagerFileListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\l10n_packager\L10nPackagerFileInterface $entity */
+    /** @var L10nPackagerFileInterface $entity */
     $row['id'] = $entity->id();
     $row['label'] = $entity->label();
     $row['created'] = $this->dateFormatter->format($entity->get('created')->value);
diff --git a/l10n_packager/src/Entity/ListBuilder/L10nPackagerReleaseListBuilder.php b/l10n_packager/src/Entity/ListBuilder/L10nPackagerReleaseListBuilder.php
index 2975461..3c47fad 100644
--- a/l10n_packager/src/Entity/ListBuilder/L10nPackagerReleaseListBuilder.php
+++ b/l10n_packager/src/Entity/ListBuilder/L10nPackagerReleaseListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\l10n_packager\Entity\ListBuilder;
 
+use Drupal\l10n_packager\L10nPackagerReleaseInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ -17,18 +18,18 @@ class L10nPackagerReleaseListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;
 
   /**
    * Constructs a new L10nPackagerReleaseListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(
@@ -84,7 +85,7 @@ class L10nPackagerReleaseListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\l10n_packager\L10nPackagerReleaseInterface $entity */
+    /** @var L10nPackagerReleaseInterface $entity */
     $row['id'] = $entity->id();
     $row['label'] = $entity->label();
     $row['status'] = $entity->get('status')->value ? $this->t('Enabled') : $this->t('Disabled');
diff --git a/l10n_packager/src/L10nExporter.php b/l10n_packager/src/L10nExporter.php
index 1bd1eae..f821708 100644
--- a/l10n_packager/src/L10nExporter.php
+++ b/l10n_packager/src/L10nExporter.php
@@ -12,14 +12,14 @@ class L10nExporter {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * Constructs a L10nExporter object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(
@@ -51,7 +51,9 @@ class L10nExporter {
   function export($uri, $release = NULL, $language = NULL, $template = TRUE, $compact = FALSE, $installer = FALSE, $suggestions = FALSE) {
     $project = $this->getProjects(array('uri' => $uri));
 
-    $query = db_select('l10n_server_file', 'f');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $query = \Drupal::database()->select('l10n_server_file', 'f');
     $query->innerJoin('l10n_server_line', 'l', 'f.fid = l.fid');
     $query->innerJoin('l10n_server_string', 's', 'l.sid = s.sid');
     $query
@@ -154,14 +156,14 @@ class L10nExporter {
         $message = t('There are no strings in any releases of %project to export.', array('%project' => $project->title));
       }
       // Message to the user.
-      drupal_set_message($message);
+      \Drupal::messenger()->addStatus($message);
       // Message to watchdog for possible automated packaging.
       watchdog('l10n_community', $message);
       return NULL;
     }
 
     // Generate a 'unique' temporary filename for this package.
-    $tempfile = tempnam(file_directory_temp(), 'l10n_community-' . $uri);
+    $tempfile = tempnam(\Drupal::service('file_system')->getTempDirectory(), 'l10n_community-' . $uri);
 
     if (!$compact) {
       if (count($po_data['revisions']) == 1) {
@@ -243,7 +245,9 @@ class L10nExporter {
   function getProjects($options = array()) {
     static $projects = array();
 
-    $select = db_select('l10n_server_project', 'p')->fields('p');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $select = \Drupal::database()->select('l10n_server_project', 'p')->fields('p');
 
     // Consider returning all projects or just published ones.
     if (empty($options['all'])) {
@@ -281,7 +285,9 @@ class L10nExporter {
         return $projects[$options['uri']];
       }
       // Not found in cache, so query and cache before returning.
-      $result = db_query("SELECT * FROM {l10n_server_project} WHERE uri = :uri", array(':uri' => $options['uri']));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $result = \Drupal::database()->query("SELECT * FROM {l10n_server_project} WHERE uri = :uri", array(':uri' => $options['uri']));
       if ($project = $result->fetchObject()) {
         $projects[$options['uri']] = $project;
         return $project;
@@ -315,7 +321,9 @@ class L10nExporter {
     if ($parsed_only) {
       $query .= 'AND r.last_parsed > 0 ';
     }
-    $result = db_query($query, array(':uri' => $uri));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->query($query, array(':uri' => $uri));
     $releases = $result->fetchAllAssoc('rid');
     uasort($releases, '_l10n_server_version_compare');
     return $releases;
@@ -446,7 +454,9 @@ class L10nExporter {
    */
   function getProjectInitials() {
     // Grab the unique initials of all active projects
-    $result = db_query('SELECT DISTINCT(SUBSTR(title, 1, 1)) AS initial FROM {l10n_server_project} WHERE status = :status ORDER BY initial ASC', array(':status' => 1));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->query('SELECT DISTINCT(SUBSTR(title, 1, 1)) AS initial FROM {l10n_server_project} WHERE status = :status ORDER BY initial ASC', array(':status' => 1));
 
     // Create an array of elements, all non-letters are grouped in '#'.
     $initials = array();
diff --git a/l10n_packager/src/L10nPackager.php b/l10n_packager/src/L10nPackager.php
index 447d684..5e77b2f 100644
--- a/l10n_packager/src/L10nPackager.php
+++ b/l10n_packager/src/L10nPackager.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_packager;
 
+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\File\FileSystemInterface;
@@ -46,30 +47,30 @@ class L10nPackager {
   /**
    * Tha database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected Connection $database;
 
   /**
    * The config manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected ConfigManagerInterface $configManager;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;
 
   /**
    * Constructs a L10nPackager object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The config manager.
    */
   public function __construct(
@@ -237,13 +238,13 @@ class L10nPackager {
    * @param int|null $timestamp
    *   Timestamp to mark the files, for it to be consistent across tables.
    *
-   * @return \Drupal\file\Entity\File|false
+   * @return File|false
    *   Drupal file object or FALSE on error.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function releasePackage($release, Language $language, L10nPackagerFileInterface $packager_file = NULL, int $timestamp = NULL): bool|File {
-    /** @var \Drupal\l10n_packager\L10nExporter $packager */
+    /** @var L10nExporter $packager */
     $exporter = \Drupal::service('l10n_packager.exporter');
 
     $timestamp = $timestamp ?: \Drupal::time()->getRequestTime();
@@ -316,19 +317,19 @@ class L10nPackager {
    * for this release, so we can keep track of releases and files and package a
    * few languages on every cron.
    *
-   * @param \Drupal\l10n_server\Entity\L10nServerReleaseInterface $release
+   * @param L10nServerReleaseInterface $release
    *   Release object.
    * @param bool $force
    *   Force repackage even when strings not updated.
    * @param int $limit
    *   Maximum number of files to create.
-   * @param \Drupal\Core\Language\Language|null $language
+   * @param Language|null $language
    *   Optional language object to check only this one.
    * @param bool $cron
    *   In a cron run, a release may be packaged partially, for some languages.
    *
    * @return array
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function check(L10nServerReleaseInterface $release, bool $force = FALSE, int $limit = 0, Language $language = NULL, bool $cron = FALSE) {
     $check_languages = isset($language) ? [$language->language => $language] : \Drupal::languageManager()->getLanguages();
@@ -404,7 +405,7 @@ class L10nPackager {
    */
   public function package($release, $language, $file = NULL, $timestamp = NULL) {
 
-    $timestamp = $timestamp ? $timestamp : REQUEST_TIME;
+    $timestamp = $timestamp ? $timestamp : \Drupal::time()->getRequestTime();
     $variables = array(
       '%release' => l10n_packager_release_name($release),
       '%language' => $language->name,
@@ -440,8 +441,8 @@ class L10nPackager {
       $file->filename = basename($file_path);
       $file->filemime = $mime_type;
       $file->uri = $file_path;
-      file_unmanaged_move($export_name, $file->uri, FILE_EXISTS_REPLACE);
-      $file->filesize = filesize(drupal_realpath($file->uri));
+      file_unmanaged_move($export_name, $file->uri, FileSystemInterface::EXISTS_REPLACE);
+      $file->filesize = filesize(\Drupal::service('file_system')->realpath($file->uri));
       $file->sid_count = $sid_count;
       // Create actual symlink to latest
       l10n_packager_create_latest_symlink($file_path, $release, $language);
@@ -467,9 +468,9 @@ class L10nPackager {
     $basepath = $currentpath = l10n_packager_directory();
     $finalpath = $basepath . '/' . $directory;
     $parts = explode('/', $directory);
-    $htaccess_path = drupal_realpath($basepath) . '/.htaccess';
+    $htaccess_path = \Drupal::service('file_system')->realpath($basepath) . '/.htaccess';
     if (!is_dir($basepath)) {
-      file_prepare_directory($basepath, FILE_CREATE_DIRECTORY);
+      \Drupal::service('file_system')->prepareDirectory($basepath, FileSystemInterface::CREATE_DIRECTORY);
     }
     if (!file_exists($htaccess_path)) {
       $htaccess_lines = "\n\n<FilesMatch \"\.(po)$\">\n\tForceType \"text/plain; charset=utf-8\"\n\tAllow from ALL\n</FilesMatch>\n";
@@ -480,7 +481,7 @@ class L10nPackager {
     }
     while (is_dir($currentpath) && !is_dir($finalpath) && ($more = array_shift($parts))) {
       $currentpath .= '/' . $more;
-      file_prepare_directory($currentpath, FILE_CREATE_DIRECTORY);
+      \Drupal::service('file_system')->prepareDirectory($currentpath, FileSystemInterface::CREATE_DIRECTORY);
     }
     return $basepath . '/' . $path;
   }
diff --git a/l10n_server/l10n_server.module b/l10n_server/l10n_server.module
index fb32d25..eb8fd1a 100644
--- a/l10n_server/l10n_server.module
+++ b/l10n_server/l10n_server.module
@@ -1,5 +1,8 @@
 <?php
 declare(strict_types=1);
+use Drupal\l10n_server\ConnectorManager;
+use Drupal\l10n_server\ConnectorInterface;
+use Drupal\l10n_server\ConnectorScanHandlerResultInterface;
 
 /**
  * @file
@@ -90,7 +93,7 @@ function l10n_server_cron(): void {
     }
   }
 
-  /** @var \Drupal\l10n_server\ConnectorManager $connectorManager */
+  /** @var ConnectorManager $connectorManager */
   $connectorManager = \Drupal::service('plugin.manager.l10n_server.connector');
   $connectors = \Drupal::config('l10n_server.settings')
     ->get('enabled_connectors');
@@ -99,7 +102,7 @@ function l10n_server_cron(): void {
 
   $connector_count = $project_count = $release_count = 0;
   foreach ($connectors as $connector_id) {
-    /** @var \Drupal\l10n_server\ConnectorInterface $connector */
+    /** @var ConnectorInterface $connector */
     $connector = $connectorManager->createInstance($connector_id);
 
     if ($connector->isScannable()
@@ -110,7 +113,7 @@ function l10n_server_cron(): void {
         '@source_label' => $connector->getSourceInstance()->getLabel(),
       ]);
 
-      /** @var \Drupal\l10n_server\ConnectorScanHandlerResultInterface $result */
+      /** @var ConnectorScanHandlerResultInterface $result */
       $result = $connector->scanHandler();
       $project_count = $project_count + $result->getProjectCount();
       $release_count = $release_count + $result->getReleaseCount();
diff --git a/l10n_server/src/Annotation/Connector.php b/l10n_server/src/Annotation/Connector.php
index f7fc9c9..d785eea 100644
--- a/l10n_server/src/Annotation/Connector.php
+++ b/l10n_server/src/Annotation/Connector.php
@@ -30,7 +30,7 @@ class Connector extends Plugin {
   /**
    * The human-readable name of the connector.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public Translation $label;
 
diff --git a/l10n_server/src/Annotation/Source.php b/l10n_server/src/Annotation/Source.php
index 33c9841..d4b3eab 100644
--- a/l10n_server/src/Annotation/Source.php
+++ b/l10n_server/src/Annotation/Source.php
@@ -30,7 +30,7 @@ class Source extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/l10n_server/src/Commands/L10nServerCommands.php b/l10n_server/src/Commands/L10nServerCommands.php
index 5520440..69ff93f 100644
--- a/l10n_server/src/Commands/L10nServerCommands.php
+++ b/l10n_server/src/Commands/L10nServerCommands.php
@@ -3,6 +3,15 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Commands;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\l10n_server\ConnectorManager;
+use Drupal\l10n_server\ConnectorInterface;
+use Drupal\l10n_server\ConnectorScanHandlerResultInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\l10n_server\ConnectorParseHandlerInterface;
+use Drupal\l10n_server\ConnectorParseHandlerResultInterface;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\l10n_server\ConnectorManagerInterface;
@@ -18,14 +27,14 @@ class L10nServerCommands extends DrushCommands {
   /**
    * Configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $configuration;
 
   /**
    * Connector manager.
    *
-   * @var \Drupal\l10n_server\ConnectorManagerInterface
+   * @var ConnectorManagerInterface
    */
   protected ConnectorManagerInterface $connectorManager;
 
@@ -62,11 +71,11 @@ class L10nServerCommands extends DrushCommands {
    *
    * @aliases lss
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   // phpcs:ignore
   public function scan(string $connector = 'drupal_rest:restapi', array $options = ['all' => FALSE]): void {
-    /** @var \Drupal\l10n_server\ConnectorManager $connectorManager */
+    /** @var ConnectorManager $connectorManager */
     $connectorManager = \Drupal::service('plugin.manager.l10n_server.connector');
 
     $connectors = [$connector];
@@ -78,7 +87,7 @@ class L10nServerCommands extends DrushCommands {
     $results = [];
     $project_count = $release_count = $connector_count = 0;
     foreach ($connectors as $connector_id) {
-      /** @var \Drupal\l10n_server\ConnectorInterface $connector */
+      /** @var ConnectorInterface $connector */
       $connector = $connectorManager->createInstance($connector_id);
       $source = $connector->getSourceInstance();
 
@@ -97,7 +106,7 @@ class L10nServerCommands extends DrushCommands {
           '@source_label' => $source->getLabel(),
         ]));
 
-        /** @var \Drupal\l10n_server\ConnectorScanHandlerResultInterface $result */
+        /** @var ConnectorScanHandlerResultInterface $result */
         $result = $connector->scanHandler();
         $results[$connector->getPluginId()][] = $result;
         $project_count = $project_count + $result->getProjectCount();
@@ -139,9 +148,9 @@ class L10nServerCommands extends DrushCommands {
    *
    * @aliases lsq
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function queue(array $options = ['force' => NULL]): void {
 
@@ -194,12 +203,12 @@ class L10nServerCommands extends DrushCommands {
    *
    * @aliases lsp
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws PluginException
+   * @throws EntityStorageException
    */
   // phpcs:ignore
   public function parse(string $project = '', array $options = ['release' => NULL, 'limit' => 1, 'only-unparsed' => FALSE, 'only-unqueued' => FALSE]): void {
-    /** @var \Drupal\l10n_server\ConnectorManager $connectorManager */
+    /** @var ConnectorManager $connectorManager */
     $connectorManager = \Drupal::service('plugin.manager.l10n_server.connector');
 
     $query = \Drupal::database()
@@ -237,7 +246,7 @@ class L10nServerCommands extends DrushCommands {
       $project = L10nServerProject::load($row->pid);
       $release = L10nServerRelease::load($row->rid);
 
-      /** @var \Drupal\l10n_server\ConnectorInterface $connector */
+      /** @var ConnectorInterface $connector */
       $connector = $connectorManager->createInstance($project->getConnectorModule());
       $source = $connector->getSourceInstance();
 
@@ -256,9 +265,9 @@ class L10nServerCommands extends DrushCommands {
           '@source_label' => $source->getLabel(),
         ]));
 
-        /** @var \Drupal\l10n_server\ConnectorParseHandlerInterface $connector */
+        /** @var ConnectorParseHandlerInterface $connector */
         $connector->setRelease($release);
-        /** @var \Drupal\l10n_server\ConnectorParseHandlerResultInterface $result */
+        /** @var ConnectorParseHandlerResultInterface $result */
         if ($result = $connector->parseHandler()) {
           $release = $connector->getRelease();
           $release
diff --git a/l10n_server/src/ConfigurableConnectorPluginBase.php b/l10n_server/src/ConfigurableConnectorPluginBase.php
index 188df4f..cbacfa6 100644
--- a/l10n_server/src/ConfigurableConnectorPluginBase.php
+++ b/l10n_server/src/ConfigurableConnectorPluginBase.php
@@ -20,21 +20,21 @@ abstract class ConfigurableConnectorPluginBase extends ConnectorPluginBase imple
   /**
    * The connector manager service.
    *
-   * @var \Drupal\l10n_server\ConnectorManager
+   * @var ConnectorManager
    */
   protected ConnectorManager $connectorManager;
 
   /**
    * The connector object.
    *
-   * @var \Drupal\l10n_server\ConnectorInterface
+   * @var ConnectorInterface
    */
   protected ConnectorInterface $connector;
 
   /**
    * Sets a config factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory): void {
diff --git a/l10n_server/src/ConnectorInterface.php b/l10n_server/src/ConnectorInterface.php
index dbd42cf..34c7cdd 100644
--- a/l10n_server/src/ConnectorInterface.php
+++ b/l10n_server/src/ConnectorInterface.php
@@ -35,7 +35,7 @@ interface ConnectorInterface extends PluginInspectionInterface, DerivativeInspec
   /**
    * Gets a source instance.
    *
-   * @return \Drupal\l10n_server\SourceInterface
+   * @return SourceInterface
    *   The source object.
    */
   public function getSourceInstance(): SourceInterface;
diff --git a/l10n_server/src/ConnectorManager.php b/l10n_server/src/ConnectorManager.php
index 1bdcf55..7c2cbce 100644
--- a/l10n_server/src/ConnectorManager.php
+++ b/l10n_server/src/ConnectorManager.php
@@ -18,7 +18,7 @@ final class ConnectorManager extends DefaultPluginManager implements ConnectorMa
   /**
    * Config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected Config $editableConfig;
 
@@ -48,7 +48,7 @@ final class ConnectorManager extends DefaultPluginManager implements ConnectorMa
   public function getOptionsList(): array {
     $options = [];
     foreach ($this->getDefinitions() as $id => $definition) {
-      /** @var \Drupal\l10n_server\ConnectorInterface $plugin */
+      /** @var ConnectorInterface $plugin */
       $plugin = $this->createInstance($id);
       if ($plugin->isEnabled()) {
         $options[$plugin->getPluginId()] = $plugin->getLabel();
@@ -64,7 +64,7 @@ final class ConnectorManager extends DefaultPluginManager implements ConnectorMa
     $enabled_connectors = (array) $this->editableConfig->get('enabled_connectors');
 
     foreach ($this->getDefinitions() as $id => $definition) {
-      /** @var \Drupal\l10n_server\ConnectorInterface $plugin */
+      /** @var ConnectorInterface $plugin */
       $plugin = $this->createInstance($id);
       $provider = $plugin->getPluginDefinition()['provider'];
       if ($module === $provider) {
diff --git a/l10n_server/src/ConnectorParseHandlerInterface.php b/l10n_server/src/ConnectorParseHandlerInterface.php
index 0ceea1a..c099f02 100644
--- a/l10n_server/src/ConnectorParseHandlerInterface.php
+++ b/l10n_server/src/ConnectorParseHandlerInterface.php
@@ -13,7 +13,7 @@ interface ConnectorParseHandlerInterface {
   /**
    * Sets the release.
    *
-   * @param \Drupal\l10n_server\Entity\L10nServerRelease $release
+   * @param L10nServerRelease $release
    *   The release object to set.
    *
    * @return $this
@@ -23,7 +23,7 @@ interface ConnectorParseHandlerInterface {
   /**
    * Gets the release.
    *
-   * @return \Drupal\l10n_server\Entity\L10nServerRelease
+   * @return L10nServerRelease
    *   The release object.
    */
   public function getRelease(): L10nServerRelease;
@@ -31,7 +31,7 @@ interface ConnectorParseHandlerInterface {
   /**
    * Parse handler.
    *
-   * @return \Drupal\l10n_server\ConnectorParseHandlerResultInterface|false
+   * @return ConnectorParseHandlerResultInterface|false
    *   The parsing results object or false in case of error.
    */
   public function parseHandler(): ConnectorParseHandlerResultInterface|FALSE;
diff --git a/l10n_server/src/ConnectorPluginBase.php b/l10n_server/src/ConnectorPluginBase.php
index 310081d..9c8f4f0 100644
--- a/l10n_server/src/ConnectorPluginBase.php
+++ b/l10n_server/src/ConnectorPluginBase.php
@@ -19,35 +19,35 @@ abstract class ConnectorPluginBase extends PluginBase implements ConnectorInterf
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * Logger channel factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected LoggerChannelFactoryInterface $loggerFactory;
 
   /**
    * Logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected LoggerChannelInterface $logger;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * Source manager.
    *
-   * @var \Drupal\l10n_server\SourceManager
+   * @var SourceManager
    */
   protected SourceManager $sourceManager;
 
@@ -85,7 +85,7 @@ abstract class ConnectorPluginBase extends PluginBase implements ConnectorInterf
     $settings = $this->configFactory->get('l10n_server.settings');
     $source_plugin_id = $this->pluginDefinition['source_plugin_id'];
     $source_config = $settings->get("connectors.{$this->pluginId}.source.$source_plugin_id") ?? [];
-    /** @var \Drupal\l10n_server\SourceInterface $instance */
+    /** @var SourceInterface $instance */
     $instance = $this->sourceManager->createInstance($source_plugin_id, $source_config);
     return $instance;
   }
diff --git a/l10n_server/src/ConnectorScanHandlerInterface.php b/l10n_server/src/ConnectorScanHandlerInterface.php
index 4284cb3..b212456 100644
--- a/l10n_server/src/ConnectorScanHandlerInterface.php
+++ b/l10n_server/src/ConnectorScanHandlerInterface.php
@@ -11,7 +11,7 @@ interface ConnectorScanHandlerInterface {
   /**
    * Scan handler.
    *
-   * @return \Drupal\l10n_server\ConnectorScanHandlerResultInterface
+   * @return ConnectorScanHandlerResultInterface
    *   The scan handler result object.
    */
   public function scanHandler(): ConnectorScanHandlerResultInterface;
diff --git a/l10n_server/src/ConnectorUploadHandlerInterface.php b/l10n_server/src/ConnectorUploadHandlerInterface.php
index d26fe24..24c3a77 100644
--- a/l10n_server/src/ConnectorUploadHandlerInterface.php
+++ b/l10n_server/src/ConnectorUploadHandlerInterface.php
@@ -13,7 +13,7 @@ interface ConnectorUploadHandlerInterface {
   /**
    * Upload handler.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file.
    */
   public static function uploadHandler(FileInterface $file): void;
diff --git a/l10n_server/src/Entity/L10nServerProject.php b/l10n_server/src/Entity/L10nServerProject.php
index ac56e46..86c1289 100644
--- a/l10n_server/src/Entity/L10nServerProject.php
+++ b/l10n_server/src/Entity/L10nServerProject.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Entity;
 
+use Drupal\l10n_server\ConnectorManagerInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -190,9 +191,9 @@ class L10nServerProject extends ContentEntityBase implements L10nServerProjectIn
    * {@inheritdoc}
    */
   public function getConnector(): ?ConnectorInterface {
-    /** @var \Drupal\l10n_server\ConnectorManagerInterface $connectorManager */
+    /** @var ConnectorManagerInterface $connectorManager */
     $connectorManager = \Drupal::service('plugin.manager.l10n_server.connector');
-    /** @var \Drupal\l10n_server\ConnectorInterface $connector */
+    /** @var ConnectorInterface $connector */
     $connector = $connectorManager->createInstance($this->getConnectorModule());
     return $connector;
   }
diff --git a/l10n_server/src/Entity/L10nServerProjectInterface.php b/l10n_server/src/Entity/L10nServerProjectInterface.php
index 4dfbb51..17599c7 100644
--- a/l10n_server/src/Entity/L10nServerProjectInterface.php
+++ b/l10n_server/src/Entity/L10nServerProjectInterface.php
@@ -40,7 +40,7 @@ interface L10nServerProjectInterface extends ContentEntityInterface {
   /**
    * Get connector.
    *
-   * @return \Drupal\l10n_server\ConnectorInterface|null
+   * @return ConnectorInterface|null
    *   A connector or null.
    */
   public function getConnector(): ?ConnectorInterface;
diff --git a/l10n_server/src/Entity/L10nServerReleaseInterface.php b/l10n_server/src/Entity/L10nServerReleaseInterface.php
index 4710c90..cbd3d43 100644
--- a/l10n_server/src/Entity/L10nServerReleaseInterface.php
+++ b/l10n_server/src/Entity/L10nServerReleaseInterface.php
@@ -21,7 +21,7 @@ interface L10nServerReleaseInterface extends ContentEntityInterface {
   /**
    * Get referenced project.
    *
-   * @return \Drupal\l10n_server\Entity\L10nServerProjectInterface
+   * @return L10nServerProjectInterface
    *   A project entity.
    */
   public function getProject(): L10nServerProjectInterface;
@@ -29,7 +29,7 @@ interface L10nServerReleaseInterface extends ContentEntityInterface {
   /**
    * Set referenced project.
    *
-   * @param \Drupal\l10n_server\Entity\L10nServerProjectInterface $project
+   * @param L10nServerProjectInterface $project
    *   A project entity.
    *
    * @return $this
diff --git a/l10n_server/src/Entity/ListBuilder/L10nServerErrorListBuilder.php b/l10n_server/src/Entity/ListBuilder/L10nServerErrorListBuilder.php
index cd6cbac..6900a4a 100644
--- a/l10n_server/src/Entity/ListBuilder/L10nServerErrorListBuilder.php
+++ b/l10n_server/src/Entity/ListBuilder/L10nServerErrorListBuilder.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Entity\ListBuilder;
 
+use Drupal\l10n_server\Entity\L10nServerErrorInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -41,7 +42,7 @@ class L10nServerErrorListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerErrorInterface $entity */
+    /** @var L10nServerErrorInterface $entity */
     $row['id'] = $entity->id();
     $row['rid'] = $entity->get('rid')->first()->getValue()['target_id'];
     $row['value'] = $entity->get('value')->first()->getValue()['value'];
diff --git a/l10n_server/src/Entity/ListBuilder/L10nServerFileListBuilder.php b/l10n_server/src/Entity/ListBuilder/L10nServerFileListBuilder.php
index a73e114..71ba647 100644
--- a/l10n_server/src/Entity/ListBuilder/L10nServerFileListBuilder.php
+++ b/l10n_server/src/Entity/ListBuilder/L10nServerFileListBuilder.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Entity\ListBuilder;
 
+use Drupal\l10n_server\Entity\L10nServerFileInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -43,7 +44,7 @@ class L10nServerFileListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerFileInterface $entity */
+    /** @var L10nServerFileInterface $entity */
     $row['id'] = $entity->id();
     $row['pid'] = $entity->get('pid')->first()->getValue()['target_id'];
     $row['rid'] = $entity->get('rid')->first()->getValue()['target_id'];
diff --git a/l10n_server/src/Entity/ListBuilder/L10nServerLineListBuilder.php b/l10n_server/src/Entity/ListBuilder/L10nServerLineListBuilder.php
index cb2958f..4199487 100644
--- a/l10n_server/src/Entity/ListBuilder/L10nServerLineListBuilder.php
+++ b/l10n_server/src/Entity/ListBuilder/L10nServerLineListBuilder.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Entity\ListBuilder;
 
+use Drupal\l10n_server\Entity\L10nServerLineInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -45,7 +46,7 @@ class L10nServerLineListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerLineInterface $entity */
+    /** @var L10nServerLineInterface $entity */
     $row['id'] = $entity->id();
     $row['pid'] = $entity->get('pid')->first()->getValue()['target_id'];
     $row['rid'] = $entity->get('rid')->first()->getValue()['target_id'];
diff --git a/l10n_server/src/Entity/ListBuilder/L10nServerProjectListBuilder.php b/l10n_server/src/Entity/ListBuilder/L10nServerProjectListBuilder.php
index 98b4241..e083017 100644
--- a/l10n_server/src/Entity/ListBuilder/L10nServerProjectListBuilder.php
+++ b/l10n_server/src/Entity/ListBuilder/L10nServerProjectListBuilder.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Entity\ListBuilder;
 
+use Drupal\l10n_server\Entity\L10nServerProjectInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ -20,7 +21,7 @@ class L10nServerProjectListBuilder extends EntityListBuilder {
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;
 
@@ -67,7 +68,7 @@ class L10nServerProjectListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerProjectInterface $entity */
+    /** @var L10nServerProjectInterface $entity */
     $row['label'] = $entity->toLink();
     $row['uri'] = $entity->get('uri')->first()->getValue()['value'];
     $row['connector'] = $entity->get('connector_module')->first()->getValue()['value'];
diff --git a/l10n_server/src/Entity/ListBuilder/L10nServerReleaseListBuilder.php b/l10n_server/src/Entity/ListBuilder/L10nServerReleaseListBuilder.php
index f0d4c40..2bb2320 100644
--- a/l10n_server/src/Entity/ListBuilder/L10nServerReleaseListBuilder.php
+++ b/l10n_server/src/Entity/ListBuilder/L10nServerReleaseListBuilder.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Entity\ListBuilder;
 
+use Drupal\l10n_server\Entity\L10nServerReleaseInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ -21,7 +22,7 @@ class L10nServerReleaseListBuilder extends EntityListBuilder {
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;
 
@@ -95,7 +96,7 @@ class L10nServerReleaseListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerReleaseInterface $entity */
+    /** @var L10nServerReleaseInterface $entity */
     $row = [];
     $row['pid'] = $entity->get('pid')->first()->getValue()['target_id'];
     $row['label'] = $entity->toLink();
diff --git a/l10n_server/src/Entity/ListBuilder/L10nServerStatusFlagListBuilder.php b/l10n_server/src/Entity/ListBuilder/L10nServerStatusFlagListBuilder.php
index 05e5210..cc916d2 100644
--- a/l10n_server/src/Entity/ListBuilder/L10nServerStatusFlagListBuilder.php
+++ b/l10n_server/src/Entity/ListBuilder/L10nServerStatusFlagListBuilder.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Entity\ListBuilder;
 
+use Drupal\l10n_server\Entity\L10nServerStatusFlagInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -42,7 +43,7 @@ class L10nServerStatusFlagListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerStatusFlagInterface $entity */
+    /** @var L10nServerStatusFlagInterface $entity */
     $row['id'] = $entity->id();
     $row['language'] = $entity->get('language')->first()->getValue()['value'];
     $row['has_suggestion'] = $entity->get('has_suggestion')->first()->getValue()['value'];
diff --git a/l10n_server/src/Entity/ListBuilder/L10nServerStringListBuilder.php b/l10n_server/src/Entity/ListBuilder/L10nServerStringListBuilder.php
index 62dd589..ea6a4b5 100644
--- a/l10n_server/src/Entity/ListBuilder/L10nServerStringListBuilder.php
+++ b/l10n_server/src/Entity/ListBuilder/L10nServerStringListBuilder.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Entity\ListBuilder;
 
+use Drupal\l10n_server\Entity\L10nServerStringInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -42,7 +43,7 @@ class L10nServerStringListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerStringInterface $entity */
+    /** @var L10nServerStringInterface $entity */
     $row['id'] = $entity->id();
     $row['value'] = $entity->get('value')->first()->getValue()['value'];
     // $row['context'] = $entity->get('context')->first()->getValue()['value'];
diff --git a/l10n_server/src/Entity/ListBuilder/L10nServerTranslationHistoryListBuilder.php b/l10n_server/src/Entity/ListBuilder/L10nServerTranslationHistoryListBuilder.php
index 5d8a6ae..b2ab206 100644
--- a/l10n_server/src/Entity/ListBuilder/L10nServerTranslationHistoryListBuilder.php
+++ b/l10n_server/src/Entity/ListBuilder/L10nServerTranslationHistoryListBuilder.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Entity\ListBuilder;
 
+use Drupal\l10n_server\Entity\L10nServerTranslationHistoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -40,7 +41,7 @@ class L10nServerTranslationHistoryListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\l10n_server\Entity\L10nServerTranslationHistoryInterface $entity */
+    /** @var L10nServerTranslationHistoryInterface $entity */
     $row['id'] = $entity->id();
     $row['label'] = $entity->label();
     return $row + parent::buildRow($entity);
diff --git a/l10n_server/src/Entity/ListBuilder/L10nServerTranslationListBuilder.php b/l10n_server/src/Entity/ListBuilder/L10nServerTranslationListBuilder.php
index 8ee4e56..b4333b2 100644
--- a/l10n_server/src/Entity/ListBuilder/L10nServerTranslationListBuilder.php
+++ b/l10n_server/src/Entity/ListBuilder/L10nServerTranslationListBuilder.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Entity\ListBuilder;
 
+use Drupal\l10n_server\Entity\L10nServerTranslationInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ -18,18 +19,18 @@ class L10nServerTranslationListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;
 
   /**
    * Constructs a new L10nServerTranslationListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter) {
@@ -80,7 +81,7 @@ class L10nServerTranslationListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerTranslationInterface $entity */
+    /** @var L10nServerTranslationInterface $entity */
     $row['id'] = $entity->id();
     $row['label'] = $entity->label();
     $row['uid']['data'] = [
diff --git a/l10n_server/src/Form/ConnectorBatchConfirmParseForm.php b/l10n_server/src/Form/ConnectorBatchConfirmParseForm.php
index 2ef91a3..78b7dd1 100644
--- a/l10n_server/src/Form/ConnectorBatchConfirmParseForm.php
+++ b/l10n_server/src/Form/ConnectorBatchConfirmParseForm.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Form;
 
+use Drupal\l10n_server\ConnectorParseHandlerResult;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -32,7 +33,7 @@ class ConnectorBatchConfirmParseForm extends ConnectorBatchConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
-    /** @var \Drupal\l10n_server\ConnectorInterface $connector */
+    /** @var ConnectorInterface $connector */
     $connector = $form_state->getTemporaryValue('connector');
     $batch = [
       'title' => t('Parsing'),
@@ -59,7 +60,7 @@ class ConnectorBatchConfirmParseForm extends ConnectorBatchConfirmFormBase {
   /**
    * Batch operation callback.
    *
-   * @param \Drupal\l10n_server\ConnectorInterface $connector
+   * @param ConnectorInterface $connector
    *   A connector.
    * @param array $context
    *   The batch context.
@@ -69,7 +70,7 @@ class ConnectorBatchConfirmParseForm extends ConnectorBatchConfirmFormBase {
       return;
     }
 
-    /** @var \Drupal\l10n_server\ConnectorParseHandlerResult $result */
+    /** @var ConnectorParseHandlerResult $result */
     $result = $connector->parseHandler();
 
     if ($result->getFileCount()) {
diff --git a/l10n_server/src/Form/ConnectorBatchConfirmScanForm.php b/l10n_server/src/Form/ConnectorBatchConfirmScanForm.php
index 5e8ae3c..47aa30a 100644
--- a/l10n_server/src/Form/ConnectorBatchConfirmScanForm.php
+++ b/l10n_server/src/Form/ConnectorBatchConfirmScanForm.php
@@ -3,6 +3,7 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Form;
 
+use Drupal\l10n_server\ConnectorScanHandlerResult;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -32,7 +33,7 @@ class ConnectorBatchConfirmScanForm extends ConnectorBatchConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
-    /** @var \Drupal\l10n_server\ConnectorInterface $connector */
+    /** @var ConnectorInterface $connector */
     $connector = $form_state->getTemporaryValue('connector');
     $batch = [
       'title' => t('Scanning'),
@@ -55,7 +56,7 @@ class ConnectorBatchConfirmScanForm extends ConnectorBatchConfirmFormBase {
   /**
    * Batch operation callback.
    *
-   * @param \Drupal\l10n_server\ConnectorInterface $connector
+   * @param ConnectorInterface $connector
    *   A connector.
    * @param array $context
    *   The batch context.
@@ -65,7 +66,7 @@ class ConnectorBatchConfirmScanForm extends ConnectorBatchConfirmFormBase {
       return;
     }
 
-    /** @var \Drupal\l10n_server\ConnectorScanHandlerResult $result */
+    /** @var ConnectorScanHandlerResult $result */
     $result = $connector->scanHandler();
 
     for ($i = 0; $i < $result->getProjectCount(); $i++) {
diff --git a/l10n_server/src/Form/ConnectorConfiguration.php b/l10n_server/src/Form/ConnectorConfiguration.php
index 53a3a1e..c9fcb5a 100644
--- a/l10n_server/src/Form/ConnectorConfiguration.php
+++ b/l10n_server/src/Form/ConnectorConfiguration.php
@@ -3,6 +3,8 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server\Form;
 
+use Drupal\l10n_server\ConfigurableConnectorInterface;
+use Drupal\l10n_server\ConfigurableSourceInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ -19,7 +21,7 @@ class ConnectorConfiguration extends ConfigFormBase {
   /**
    * The plugin form factory.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected PluginFormFactoryInterface $pluginFormFactory;
 
@@ -66,7 +68,7 @@ class ConnectorConfiguration extends ConfigFormBase {
         '#open' => TRUE,
       ];
       $subform_state = SubformState::createForSubform($form['connector'], $form, $form_state);
-      /** @var \Drupal\l10n_server\ConfigurableConnectorInterface $instance */
+      /** @var ConfigurableConnectorInterface $instance */
       $instance = $this->pluginFormFactory->createInstance($connector, 'configure');
       $form['connector'] = $instance->buildConfigurationForm($form['connector'], $subform_state);
     }
@@ -81,7 +83,7 @@ class ConnectorConfiguration extends ConfigFormBase {
         '#open' => TRUE,
       ];
       $subform_state = SubformState::createForSubform($form['source'], $form, $form_state);
-      /** @var \Drupal\l10n_server\ConfigurableSourceInterface $instance */
+      /** @var ConfigurableSourceInterface $instance */
       $instance = $this->pluginFormFactory->createInstance($source, 'configure');
       $form['source'] = $instance->buildConfigurationForm($form['source'], $subform_state);
     }
@@ -97,7 +99,7 @@ class ConnectorConfiguration extends ConfigFormBase {
 
     if ($connector->isConfigurable()) {
       $subform_state = SubformState::createForSubform($form['connector'], $form, $form_state);
-      /** @var \Drupal\l10n_server\ConfigurableConnectorInterface $instance */
+      /** @var ConfigurableConnectorInterface $instance */
       $instance = $this->pluginFormFactory->createInstance($connector, 'configure');
       $instance->validateConfigurationForm($form['connector'], $subform_state);
     }
@@ -105,7 +107,7 @@ class ConnectorConfiguration extends ConfigFormBase {
     $source = $connector->getSourceInstance();
     if ($source->isConfigurable()) {
       $subform_state = SubformState::createForSubform($form['source'], $form, $form_state);
-      /** @var \Drupal\l10n_server\ConfigurableSourceInterface $instance */
+      /** @var ConfigurableSourceInterface $instance */
       $instance = $this->pluginFormFactory->createInstance($source, 'configure');
       $instance->validateConfigurationForm($form['source'], $subform_state);
     }
@@ -124,7 +126,7 @@ class ConnectorConfiguration extends ConfigFormBase {
 
     if ($connector->isConfigurable()) {
       $subform_state = SubformState::createForSubform($form['connector'], $form, $form_state);
-      /** @var \Drupal\l10n_server\ConfigurableConnectorInterface $instance */
+      /** @var ConfigurableConnectorInterface $instance */
       $instance = $this->pluginFormFactory->createInstance($connector, 'configure');
       $instance->submitConfigurationForm($form['connector'], $subform_state);
       $connector_config['connector'][$connector->getBaseId()] = $instance->getConfiguration();
@@ -133,7 +135,7 @@ class ConnectorConfiguration extends ConfigFormBase {
     $source = $connector->getSourceInstance();
     if ($source->isConfigurable()) {
       $subform_state = SubformState::createForSubform($form['source'], $form, $form_state);
-      /** @var \Drupal\l10n_server\ConfigurableSourceInterface $instance */
+      /** @var ConfigurableSourceInterface $instance */
       $instance = $this->pluginFormFactory->createInstance($source, 'configure');
       $instance->submitConfigurationForm($form['source'], $subform_state);
       $connector_config['source'][$connector->getDerivativeId()] = $instance->getConfiguration();
diff --git a/l10n_server/src/Form/L10nServerSettingsForm.php b/l10n_server/src/Form/L10nServerSettingsForm.php
index f71d916..9c10165 100644
--- a/l10n_server/src/Form/L10nServerSettingsForm.php
+++ b/l10n_server/src/Form/L10nServerSettingsForm.php
@@ -24,21 +24,21 @@ final class L10nServerSettingsForm extends ConfigFormBase {
   /**
    * Connector manager.
    *
-   * @var \Drupal\l10n_server\ConnectorManager
+   * @var ConnectorManager
    */
   protected ConnectorManager $connectorManager;
 
   /**
    * Source manager.
    *
-   * @var \Drupal\l10n_server\SourceManager
+   * @var SourceManager
    */
   protected SourceManager $sourceManager;
 
   /**
    * Sets connector manager.
    *
-   * @param \Drupal\l10n_server\ConnectorManager $connectorManager
+   * @param ConnectorManager $connectorManager
    *   The connector manager.
    */
   public function setConnectorManager(ConnectorManager $connectorManager): void {
@@ -48,7 +48,7 @@ final class L10nServerSettingsForm extends ConfigFormBase {
   /**
    * Sets source manager.
    *
-   * @param \Drupal\l10n_server\SourceManager $sourceManager
+   * @param SourceManager $sourceManager
    *   The source manager.
    */
   public function setSourceManager(SourceManager $sourceManager): void {
diff --git a/l10n_server/src/L10nHelper.php b/l10n_server/src/L10nHelper.php
index fbf04d2..7b4907f 100644
--- a/l10n_server/src/L10nHelper.php
+++ b/l10n_server/src/L10nHelper.php
@@ -3,6 +3,8 @@ declare(strict_types=1);
 
 namespace Drupal\l10n_server;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\l10n_server\Entity\L10nServerFileInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\l10n_server\Entity\L10nServerFile;
 use Drupal\l10n_server\Entity\L10nServerLine;
@@ -17,7 +19,7 @@ class L10nHelper {
   /**
    * Determine the branch for a release.
    *
-   * @param \Drupal\l10n_server\Entity\L10nServerReleaseInterface $release
+   * @param L10nServerReleaseInterface $release
    *   The release object.
    */
   public static function releaseSetBranch(L10nServerReleaseInterface &$release): void {
@@ -73,7 +75,7 @@ class L10nHelper {
    * @return array|null
    *   An array of data for a specific file or NULL.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function saveFile($revision = NULL, $file = NULL) {
     static $pid = 0;
@@ -99,7 +101,7 @@ class L10nHelper {
       if ($existing_file) {
         if ($existing_file->revision != $revision) {
           // Changed revision on a file.
-          /** @var \Drupal\l10n_server\Entity\L10nServerFileInterface $entity */
+          /** @var L10nServerFileInterface $entity */
           $entity = L10nServerFile::load($existing_file->fid);
           $entity->set('revision', $revision)->save();
         }
@@ -110,7 +112,7 @@ class L10nHelper {
           return;
         }
         // New file in this release.
-        /** @var \Drupal\l10n_server\Entity\L10nServerFileInterface $entity */
+        /** @var L10nServerFileInterface $entity */
         $entity = L10nServerFile::create([
           'pid' => $pid,
           'rid' => $rid,
@@ -165,7 +167,7 @@ class L10nHelper {
    *   String type: POTX_STRING_INSTALLER, POTX_STRING_RUNTIME
    *   or POTX_STRING_BOTH.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @todo More elegant plural handling.
    * @todo Find a way to properly use POTX constants before potx.inc is loaded.
diff --git a/l10n_server/src/ParamConverter/L10nServerConnectorParamConverter.php b/l10n_server/src/ParamConverter/L10nServerConnectorParamConverter.php
index fee0e3d..9d27398 100644
--- a/l10n_server/src/ParamConverter/L10nServerConnectorParamConverter.php
+++ b/l10n_server/src/ParamConverter/L10nServerConnectorParamConverter.php
@@ -27,14 +27,14 @@ class L10nServerConnectorParamConverter implements ParamConverterInterface {
   /**
    * Connector plugin manager.
    *
-   * @var \Drupal\l10n_server\ConnectorManager
+   * @var ConnectorManager
    */
   protected ConnectorManager $connectorPluginManager;
 
   /**
    * Class constructor.
    *
-   * @param \Drupal\l10n_server\ConnectorManager $connector_plugin_manager
+   * @param ConnectorManager $connector_plugin_manager
    *   Connector plugin manager.
    */
   public function __construct(
diff --git a/l10n_server/src/Plugin/Derivative/ConnectorSources.php b/l10n_server/src/Plugin/Derivative/ConnectorSources.php
index 3b86543..b553596 100644
--- a/l10n_server/src/Plugin/Derivative/ConnectorSources.php
+++ b/l10n_server/src/Plugin/Derivative/ConnectorSources.php
@@ -17,14 +17,14 @@ class ConnectorSources extends DeriverBase implements ContainerDeriverInterface
   /**
    * Source manager.
    *
-   * @var \Drupal\l10n_server\SourceManager
+   * @var SourceManager
    */
   protected SourceManager $sourceManager;
 
   /**
    * Class constructor.
    *
-   * @param \Drupal\l10n_server\SourceManager $sourceManager
+   * @param SourceManager $sourceManager
    *   A source manager.
    */
   public function __construct(SourceManager $sourceManager) {
diff --git a/l10n_server/src/Plugin/QueueWorker/ParserQueue.php b/l10n_server/src/Plugin/QueueWorker/ParserQueue.php
index 59889d1..e9603d6 100644
--- a/l10n_server/src/Plugin/QueueWorker/ParserQueue.php
+++ b/l10n_server/src/Plugin/QueueWorker/ParserQueue.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\l10n_server\Plugin\QueueWorker;
 
+use Drupal\l10n_server\ConnectorParseHandlerInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\l10n_server\Entity\L10nServerProject;
 use Drupal\l10n_server\Entity\L10nServerRelease;
@@ -43,7 +44,7 @@ class ParserQueue extends QueueWorkerBase {
         && $connector->isParsable()) {
 
         // Parse the release.
-        /** @var \Drupal\l10n_server\ConnectorParseHandlerInterface $connector */
+        /** @var ConnectorParseHandlerInterface $connector */
         $connector->setRelease($release);
         if ($result = $connector->parseHandler()) {
           $release = $connector->getRelease();
