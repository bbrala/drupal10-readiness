modules/contrib/editor_note/editor_note.api.php
modules/contrib/editor_note/editor_note.module
modules/contrib/editor_note/src/Controller/EditorNoteController.php
modules/contrib/editor_note/src/EditorNoteHelperService.php
modules/contrib/editor_note/src/Entity/EditorNote.php
modules/contrib/editor_note/src/Form/ConfirmDeleteEditorNoteForm.php
modules/contrib/editor_note/src/Form/ModalForm.php
modules/contrib/editor_note/src/Hook/EntityHook.php
modules/contrib/editor_note/src/Plugin/Field/FieldFormatter/EditorNoteTableFormatter.php
modules/contrib/editor_note/src/Plugin/Field/FieldType/EditorNoteItem.php
modules/contrib/editor_note/src/Plugin/Field/FieldWidget/EditorNoteWidget.php

7 files with changes
====================

1) modules/contrib/editor_note/src/Plugin/Field/FieldWidget/EditorNoteWidget.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The editor note helper.
    *
-   * @var \Drupal\editor_note\EditorNoteHelperService
+   * @var EditorNoteHelperService
    */
   protected $editorNoteHelper;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\editor_note\EditorNoteHelperService $editorNoteHelper
+   * @param EditorNoteHelperService $editorNoteHelper
    *   Editor note helpers.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EditorNoteHelperService $editorNoteHelper) {
@@ @@
    * @param array $form
    *   The form structure where widgets are being attached to. This might be a
    *   full form structure, or a sub-element of a larger form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $element
    *   Element array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form State object.
    */
   public function validate(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/editor_note/src/Plugin/Field/FieldFormatter/EditorNoteTableFormatter.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The editor note helper.
    *
-   * @var \Drupal\editor_note\EditorNoteHelperService
+   * @var EditorNoteHelperService
    */
   protected $editorNoteHelper;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\editor_note\EditorNoteHelperService $editorNoteHelper
+   * @param EditorNoteHelperService $editorNoteHelper
    *   Editor note helpers.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EditorNoteHelperService $editorNoteHelper) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/editor_note/src/Hook/EntityHook.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Editor Note helper service.
    *
-   * @var \Drupal\editor_note\EditorNoteHelperService
+   * @var EditorNoteHelperService
    */
   protected $editorNoteHelper;

@@ @@
   /**
    * The entity reference selection handler plugin manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\editor_note\EditorNoteHelperService $editor_note_helper
+   * @param EditorNoteHelperService $editor_note_helper
    *   Helper service object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   EntityTypeManager object.
    */
   public function __construct(
@@ @@
   /**
    * Save Editor Note on entity insert.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    *
    * @see editor_note_entity_insert
@@ @@
   /**
    * Delete Editor Note on entity delete.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    *
    * @see editor_note_entity_delete
@@ @@
   /**
    * Delete Editor Note on user deletion.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    *
    * @see editor_note_entity_user_delete
@@ @@
   /**
    * Reassign Editor Note on user cancel.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User object.
    *
    * @see editor_note_user_cancel
@@ @@
   /**
    * Delete on Editor Note revisions on entity revision delete.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    *
    * @see editor_note_entity_revision_delete
@@ @@
   /**
    * Delete Editor Note on field delete.
    *
-   * @param \Drupal\field\Entity\FieldConfig $field
+   * @param FieldConfig $field
    *   The field being purged.
    *
    * @see editor_note_field_purge_field
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/editor_note/src/Form/ModalForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editor_note\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The editor note helper.
    *
-   * @var \Drupal\editor_note\EditorNoteHelperService
+   * @var EditorNoteHelperService
    */
   protected $editorNoteHelper;

@@ @@
   /**
    * Current user object.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * Form constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\editor_note\EditorNoteHelperService $editorNoteHelper
+   * @param EditorNoteHelperService $editorNoteHelper
    *   Editor note helpers.
-   *  @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   Current user object.
    */
   public function __construct(MessengerInterface $messenger, EditorNoteHelperService $editorNoteHelper, AccountProxy $current_user) {
@@ @@
   /**
    * Returns current EditorNote entity.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\editor_note\Entity\EditorNote|null
+   * @return EditorNote|null
    *   Editor note entity.
    */
   protected function getEditorNoteEntity(FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Render array representing from.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Array of AJAX commands to execute on submit of the modal form.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function ajaxSubmitForm(array &$form, FormStateInterface $form_state) {
     // We begin building a new ajax response.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/editor_note/src/Form/ConfirmDeleteEditorNoteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editor_note\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\editor_note\EditorNoteHelperService;
 use Drupal\editor_note\Entity\EditorNote;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   /**
    * Editor Note entity.
    *
-   * @var \Drupal\editor_note\Entity\EditorNote
+   * @var EditorNote
    */
   protected $editorNote;

@@ @@
   /**
    * The editor note helper.
    *
-   * @var \Drupal\editor_note\EditorNoteHelperService
+   * @var EditorNoteHelperService
    */
   protected $editorNoteHelper;

@@ @@
   /**
    * Form constructor.
    *
-   * @param \Drupal\editor_note\EditorNoteHelperService $editorNoteHelper
+   * @param EditorNoteHelperService $editorNoteHelper
    *   Editor note helpers.
    */
   public function __construct(EditorNoteHelperService $editorNoteHelper) {
@@ @@
    *
    * @param array $form
    *   The Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function submitModalFormAjax(array $form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
@@ @@
    *
    * @param array $form
    *   The Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response.
    */
   public function closeModalForm(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/editor_note/src/EditorNoteHelperService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editor_note;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\user\UserInterface;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Current user object.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * The module handler to invoke the alter hook with.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new OnboardStationEntityHelper object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   Date format service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   Current user object.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(
@@ @@
   /**
    * Create 'Editor Node' entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $host_entity
+   * @param ContentEntityInterface $host_entity
    *   Host entity to attach editor note.
    * @param string $field_machine_name
    *   Host entity editor note field machine name.
@@ @@
    *
    * @return mixed
    *   A single field from the next record, or FALSE if there is no next record.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getNotesByEntityAndField($host_entity_id, $field_machine_name, $settings = []) {
     $query = $this->connection->select('editor_note', 'en');
@@ @@
   /**
    * Returns field definition for a note.
    *
-   * @param \Drupal\editor_note\Entity\EditorNote $editorNote
+   * @param EditorNote $editorNote
    *   Editor note entity.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   Returns field definition object.
    */
   public function getNoteFieldDefinition(EditorNote $editorNote) {
@@ @@
   /**
    * Returns editor note field widget settings.
    *
-   * @param \Drupal\editor_note\Entity\EditorNote $editorNote
+   * @param EditorNote $editorNote
    * @param $field_machine_name
    *
    * @return mixed
@@ @@
   /**
    * Returns ajax replace command for refreshing field widget.
    *
-   * @param \Drupal\editor_note\Entity\EditorNote $editorNote
+   * @param EditorNote $editorNote
    *
-   * @return \Drupal\Core\Ajax\ReplaceCommand
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ReplaceCommand
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getWidgetAjaxReplaceCommand(EditorNote $editorNote) {
     $field_config = $this->getNoteFieldDefinition($editorNote);
@@ @@
   /**
    * Returns formatted notes table.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   Field definition object.
    * @param array $notes
    *   Array of notes data returned by editor_note_get_notes().
@@ @@
             'data' => $settings,
             'type' => 'setting',
           ];
-          $formatted_notes['notes_table']['#attached']['js'][] = drupal_get_path('module', 'editor_note') . '/js/editor_note.js';
+          $formatted_notes['notes_table']['#attached']['js'][] = \Drupal::service('extension.list.module')->getPath('editor_note') . '/js/editor_note.js';
         }

         $page_element++;
@@ @@
   /**
    * Generates one Editor Notes table row.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $item
+   * @param ContentEntityInterface $item
    *   Host entity to attach editor note.
    * @param bool $widget
    *   Determines whether to use function in widget along with controls or
@@ @@
    *   Row data.
    */
   protected function generateRow(ContentEntityInterface $item, $widget, $field_name, $note_id) {
-    /** @var \Drupal\user\UserInterface $author */
+    /** @var UserInterface $author */
     $author = $item->uid->entity;
     $author_name = $author->label();

@@ @@
         ],
       ];

-      $basic_items[] = render($edit_link);
-      $basic_items[] = render($delete_link);
+      $basic_items[] = \Drupal::service('renderer')->render($edit_link);
+      $basic_items[] = \Drupal::service('renderer')->render($delete_link);

       $row['data']['operations']['data'] = [
         '#theme' => 'item_list',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/editor_note/src/Controller/EditorNoteController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editor_note\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\editor_note\Entity\EditorNote;
@@ @@
   /**
    * Checks access to editor note.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Current user.
-   * @param \Drupal\editor_note\Entity\EditorNote $editor_note
+   * @param EditorNote $editor_note
    *   Editor note entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function accessEditorNote(AccountInterface $account, EditorNote $editor_note = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 7 files have been changed by Rector                                       

