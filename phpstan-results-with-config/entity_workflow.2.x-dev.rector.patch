diff --git a/entity_workflow.api.php b/entity_workflow.api.php
index dca18a7..6fa4d93 100644
--- a/entity_workflow.api.php
+++ b/entity_workflow.api.php
@@ -1,10 +1,13 @@
 <?php
 
+use Drupal\workflows\WorkflowInterface;
+use Drupal\workflows\Transition;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Entity Workflow API documentation.
  */
-
 /**
  * @defgroup workflow_transition_hooks Workflow Transition Hooks
  * @{
@@ -13,22 +16,20 @@
  * allowing modules to react before and after the transition has been performed.
  * @}
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Acts before a workflow transition is performed.
  *
  * This hook is invoked before the new state is written to the storage.
  *
- * @param \Drupal\workflows\WorkflowInterface $workflow
+ * @param WorkflowInterface $workflow
  *   The workflow.
- * @param \Drupal\workflows\Transition $transition
+ * @param Transition $transition
  *   The transition.
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   The entity for which a workflow state is changed.
  * @param string $field_name
  *   THe name of the field to which the workflow is attached.
@@ -36,7 +37,7 @@
  *   An array containing additional information about the transition, as
  *   defined by the initiator of the transition.
  */
-function hook_workflows_pre_transition(\Drupal\workflows\WorkflowInterface $workflow, \Drupal\workflows\Transition $transition, \Drupal\Core\Entity\FieldableEntityInterface $entity, $field_name, $context = []) {
+function hook_workflows_pre_transition(WorkflowInterface $workflow, Transition $transition, FieldableEntityInterface $entity, $field_name, $context = []) {
   // @todo
 }
 
@@ -45,11 +46,11 @@ function hook_workflows_pre_transition(\Drupal\workflows\WorkflowInterface $work
  *
  * This hook is invoked after the new state is written to the storage.
  *
- * @param \Drupal\workflows\WorkflowInterface $workflow
+ * @param WorkflowInterface $workflow
  *   The workflow.
- * @param \Drupal\workflows\Transition $transition
+ * @param Transition $transition
  *   The transition.
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   The entity for which a workflow state is changed.
  * @param string $field_name
  *   THe name of the field to which the workflow is attached.
@@ -57,7 +58,7 @@ function hook_workflows_pre_transition(\Drupal\workflows\WorkflowInterface $work
  *   An array containing additional information about the transition, as
  *   defined by the initiator of the transition.
  */
-function hook_workflows_post_transition(\Drupal\workflows\WorkflowInterface $workflow, \Drupal\workflows\Transition $transition, \Drupal\Core\Entity\FieldableEntityInterface $entity, $field_name, $context = []) {
+function hook_workflows_post_transition(WorkflowInterface $workflow, Transition $transition, FieldableEntityInterface $entity, $field_name, $context = []) {
   // @todo
 }
 
@@ -97,28 +98,28 @@ function hook_entity_workflow_state_label_alter(&$label, array $context) {
  * @param bool $access
  *   Whether or not to provide access. Will be FALSE by default unless changed
  *   by an alter.
- * @param \Drupal\workflows\WorkflowInterface $workflow
+ * @param WorkflowInterface $workflow
  *   The workflow configuration entity.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  */
-function hook_entity_workflow_has_bulk_workflow_alter(&$access, \Drupal\workflows\WorkflowInterface $workflow, \Drupal\Core\Entity\EntityInterface $entity) {
+function hook_entity_workflow_has_bulk_workflow_alter(&$access, WorkflowInterface $workflow, EntityInterface $entity) {
   $access = TRUE;
 }
 
 /**
  * Returns a list of entities that should be presented on the bulk workflow tab.
  *
- * @param \Drupal\workflows\WorkflowInterface $workflow
+ * @param WorkflowInterface $workflow
  *   The workflow configuration entity.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  *
  * @return array
  *   An array of entities. The key for each entity MUST be $entity_type . '--' .
  *   $entity_id.
  */
-function hook_entity_workflow_bulk_workflow_entities(\Drupal\workflows\WorkflowInterface $workflow, \Drupal\Core\Entity\EntityInterface $entity) {
+function hook_entity_workflow_bulk_workflow_entities(WorkflowInterface $workflow, EntityInterface $entity) {
   return [];
 }
 
diff --git a/entity_workflow.module b/entity_workflow.module
index bd94b75..a8b04cc 100644
--- a/entity_workflow.module
+++ b/entity_workflow.module
@@ -1,5 +1,12 @@
 <?php
 
+use Drupal\entity_workflow\EntityWorkflowInfo;
+use Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface;
+use Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface;
+use Drupal\Core\Entity\RevisionableInterface;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\entity_workflow\Plugin\Field\FieldType\EntityWorkflowStateItem;
+use Drupal\entity_workflow\WorkflowTransitionLogInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -63,11 +70,11 @@ function entity_workflow_entity_bundle_field_info(EntityTypeInterface $entity_ty
  * Implements hook_entity_bundle_info_alter().
  */
 function entity_workflow_entity_bundle_info_alter(&$bundles) {
-  /** @var \Drupal\entity_workflow\EntityWorkflowInfo $entity_workflow_info */
+  /** @var EntityWorkflowInfo $entity_workflow_info */
   $entity_workflow_info = \Drupal::service('entity_workflow.info');
 
   foreach ($entity_workflow_info->getWorkflowEntities() as $workflow_id => $workflow) {
-    /** @var \Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface $workflow_plugin */
+    /** @var EntityWorkflowTypeInterface $workflow_plugin */
     $workflow_plugin = $workflow->getTypePlugin();
 
     foreach ($workflow_plugin->getEntityTypes() as $entity_type_id) {
@@ -99,11 +106,11 @@ function entity_workflow_workflow_presave(WorkflowInterface $workflow) {
  * Installs the workflow state base field when a new workflow is created.
  */
 function entity_workflow_workflow_insert(WorkflowInterface $workflow) {
-  /** @var \Drupal\entity_workflow\EntityWorkflowInfo $entity_workflow_info */
+  /** @var EntityWorkflowInfo $entity_workflow_info */
   $entity_workflow_info = \Drupal::service('entity_workflow.info');
 
   if ($entity_workflow_info->isEntityWorkflow($workflow)) {
-    /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entity_definition_manager */
+    /** @var EntityDefinitionUpdateManagerInterface $entity_definition_manager */
     $entity_definition_manager = \Drupal::service('entity.definition_update_manager');
     $storage_definition = BaseFieldDefinition::create('entity_workflow_state')
       ->setLabel(t('Entity workflow: @label', ['@label' => $workflow->label()]))
@@ -131,11 +138,11 @@ function entity_workflow_workflow_insert(WorkflowInterface $workflow) {
  * Uninstalls the workflow_state base field when a workflow is deleted.
  */
 function entity_workflow_workflow_delete(WorkflowInterface $workflow) {
-  /** @var \Drupal\entity_workflow\EntityWorkflowInfo $entity_workflow_info */
+  /** @var EntityWorkflowInfo $entity_workflow_info */
   $entity_workflow_info = \Drupal::service('entity_workflow.info');
 
   if ($entity_workflow_info->isEntityWorkflow($workflow)) {
-    /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entity_definition_manager */
+    /** @var EntityDefinitionUpdateManagerInterface $entity_definition_manager */
     $entity_definition_manager = \Drupal::service('entity.definition_update_manager');
 
     foreach ($workflow->getTypePlugin()->getEntityTypes() as $entity_type_id) {
@@ -177,7 +184,7 @@ function entity_workflow_entity_delete(EntityInterface $entity) {
  * Implements hook_entity_revision_delete().
  */
 function entity_workflow_entity_revision_delete(EntityInterface $entity) {
-  /** @var \Drupal\Core\Entity\RevisionableInterface $entity */
+  /** @var RevisionableInterface $entity */
   if (!\Drupal::service('entity_workflow.info')->isEntityTypeSupported($entity->getEntityTypeId())) {
     return;
   }
@@ -196,7 +203,7 @@ function entity_workflow_entity_revision_delete(EntityInterface $entity) {
 /**
  * Implements hook_form_FORM_ID_alter() for 'workflow_edit_form'.
  */
-function entity_workflow_form_workflow_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function entity_workflow_form_workflow_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // Entity workflows are not configurable from the UI.
   $form['states_container']['states']['#tabledrag'] = NULL;
   unset($form['states_container']['states']['#header']['weight']);
@@ -216,7 +223,7 @@ function entity_workflow_form_workflow_edit_form_alter(&$form, \Drupal\Core\Form
   }
   $form['transitions_container']['transition_add']['#access'] = FALSE;
 
-  /** @var \Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface $workflow_plugin */
+  /** @var EntityWorkflowTypeInterface $workflow_plugin */
   $workflow = $form_state->getFormObject()->getEntity();
   $workflow_plugin = $workflow->getTypePlugin();
 
@@ -276,7 +283,7 @@ function entity_workflow_module_implements_alter(&$implementations, $hook) {
  * Implements hook_entity_presave().
  */
 function entity_workflow_entity_presave(EntityInterface $entity) {
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   // Ensure that only changing the workflow state of an entity does not create
   // a new revision.
   if (isset($entity->_entityWorkflowEnforceNoNewRevision)) {
@@ -289,7 +296,7 @@ function entity_workflow_entity_presave(EntityInterface $entity) {
  */
 function entity_workflow_workspace_view_alter(array &$build, EntityInterface $workspace, EntityViewDisplayInterface $display) {
   if ($build['#view_mode'] == 'full') {
-    /** @var \Drupal\entity_workflow\EntityWorkflowInfo $entity_workflow_info */
+    /** @var EntityWorkflowInfo $entity_workflow_info */
     $entity_workflow_info = \Drupal::service('entity_workflow.info');
 
     $header = &$build['changes']['list']['#header'];
@@ -318,7 +325,7 @@ function entity_workflow_workspace_view_alter(array &$build, EntityInterface $wo
       foreach ($entity_ids as $entity_id) {
         $render = &$build['changes']['list'][$entity_type_id . ':' . $entity_id];
 
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $tracked_entity */
+        /** @var ContentEntityInterface $tracked_entity */
         $tracked_entity = $render['#entity'];
 
         foreach ($entity_workflow_info->getWorkflowsInfoForEntityType($entity_type_id) as $workflow_id => $workflow_label) {
@@ -451,12 +458,12 @@ function entity_workflow_get_field_name($workflow_id) {
 /**
  * Gets the field item for a specific entity workflow.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   A content entity object.
  * @param string $workflow_id
  *   The workflow ID.
  *
- * @return \Drupal\entity_workflow\Plugin\Field\FieldType\EntityWorkflowStateItem|null
+ * @return EntityWorkflowStateItem|null
  */
 function entity_workflow_get_field(ContentEntityInterface $entity, $workflow_id) {
   $field_name = entity_workflow_get_field_name($workflow_id);
@@ -466,7 +473,7 @@ function entity_workflow_get_field(ContentEntityInterface $entity, $workflow_id)
 /**
  * Determine the current state of an entity revision for a certain workflow.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   A content entity object.
  * @param string $workflow_id
  *   The ID of the workflow to retrieve the state for.
@@ -504,7 +511,7 @@ function entity_workflow_get_entity_state(ContentEntityInterface $entity, $workf
  *   (optional) Whether to return only the latest transaction log for each
  *   entity. Defaults to FALSE.
  *
- * @return \Drupal\entity_workflow\WorkflowTransitionLogInterface[]
+ * @return WorkflowTransitionLogInterface[]
  *   An array of transition log entities. When the $latest argument is set to
  *   TRUE, the array is keyed by the source entity ID.
  */
@@ -527,7 +534,7 @@ function entity_workflow_get_history($entity_type_id, array $entity_ids, $workfl
     ->accessCheck(FALSE)
     ->execute();
 
-  /** @var \Drupal\entity_workflow\WorkflowTransitionLogInterface[] $transition_logs */
+  /** @var WorkflowTransitionLogInterface[] $transition_logs */
   $transition_logs = $workflow_transition_log_storage->loadMultiple($result);
 
   if ($latest) {
diff --git a/modules/entity_workflow_content/entity_workflow_content.module b/modules/entity_workflow_content/entity_workflow_content.module
index 446c5fd..fdacaa8 100644
--- a/modules/entity_workflow_content/entity_workflow_content.module
+++ b/modules/entity_workflow_content/entity_workflow_content.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -83,7 +84,7 @@ function entity_workflow_content_transition_access(EntityInterface $entity, Work
 /**
  * Deny the "approve_immediately" transition if "approve" is available.
  *
- * @return \Drupal\Core\Access\AccessResult
+ * @return AccessResult
  */
 function entity_workflow_content_can_not_approve(EntityInterface $entity, WorkflowInterface $workflow, $transition_id, AccountInterface $account, WorkspaceInterface $workspace) {
   $can_approve = \Drupal::service('entity_workflow.state_transition_validation')->isTransitionValid($entity, $workflow, 'approve', $account, $workspace);
@@ -124,10 +125,10 @@ function entity_workflow_content_workflows_post_transition(WorkflowInterface $wo
 /**
  * Helper function for multiplexing transition access results.
  *
- * @param \Drupal\Core\Access\AccessResultInterface[] $access
+ * @param AccessResultInterface[] $access
  *   An array of access results of the fired access hook.
  *
- * @return \Drupal\Core\Access\AccessResultInterface
+ * @return AccessResultInterface
  *   The combined result of the various access checks' results. All their
  *   cacheability metadata is merged as well.
  *
@@ -139,7 +140,7 @@ function _entity_workflow_content_process_access_hook_results(array $access) {
     return AccessResult::neutral();
   }
 
-  /** @var \Drupal\Core\Access\AccessResultInterface $result */
+  /** @var AccessResultInterface $result */
   $result = array_shift($access);
   foreach ($access as $other) {
     $result = $result->orIf($other);
diff --git a/modules/entity_workflow_workspace/entity_workflow_workspace.module b/modules/entity_workflow_workspace/entity_workflow_workspace.module
index a256b5e..3943e79 100644
--- a/modules/entity_workflow_workspace/entity_workflow_workspace.module
+++ b/modules/entity_workflow_workspace/entity_workflow_workspace.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\workflows\Entity\Workflow;
+use Drupal\workspaces\WorkspaceAssociationInterface;
+use Drupal\entity_workflow\EntityWorkflowInfo;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ -70,7 +73,7 @@ function entity_workflow_workspace_workspace_access(EntityInterface $entity, $op
   // Don't alter access for standard ops (like view, create, edit, delete)
   // where this module doesn't define any state transition permissions; see
   // \Drupal\entity_workflow_workspace\Plugin\WorkflowType\EntityWorkflowWorkspace::getPermissions().
-  $workspace_workflow = \Drupal\workflows\Entity\Workflow::load('workspace')->getTypePlugin();
+  $workspace_workflow = Workflow::load('workspace')->getTypePlugin();
   if (!in_array($operation, array_keys($workspace_workflow->getConfiguration()['transitions']), TRUE)) {
     return AccessResult::neutral();
   }
@@ -81,7 +84,7 @@ function entity_workflow_workspace_workspace_access(EntityInterface $entity, $op
     return AccessResult::forbidden();
   }
 
-  /** @var \Drupal\workspaces\WorkspaceAssociationInterface $workspace_association */
+  /** @var WorkspaceAssociationInterface $workspace_association */
   $workspace_association = \Drupal::service('workspaces.association');
   $tracked_entities = $workspace_association->getTrackedEntities($entity->id());
 
@@ -93,7 +96,7 @@ function entity_workflow_workspace_workspace_access(EntityInterface $entity, $op
   // Publish op only allowed if all entities in the workspace are in approved
   // state.
   if ($operation === 'publish') {
-    /** @var \Drupal\entity_workflow\EntityWorkflowInfo $entity_workflow_info */
+    /** @var EntityWorkflowInfo $entity_workflow_info */
     $entity_workflow_info = \Drupal::service('entity_workflow.info');
 
     foreach ($tracked_entities as $entity_type_id => $entities) {
diff --git a/modules/entity_workflow_workspace/src/EntityWorkflowWorkspaceListBuilder.php b/modules/entity_workflow_workspace/src/EntityWorkflowWorkspaceListBuilder.php
index e0b8be4..1749081 100644
--- a/modules/entity_workflow_workspace/src/EntityWorkflowWorkspaceListBuilder.php
+++ b/modules/entity_workflow_workspace/src/EntityWorkflowWorkspaceListBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_workflow_workspace;
 
+use Drupal\entity_workflow\StateTransitionValidatorInterface;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Url;
@@ -18,14 +20,14 @@ class EntityWorkflowWorkspaceListBuilder extends WseWorkspaceListBuilder {
   /**
    * The state transition validation service.
    *
-   * @var \Drupal\entity_workflow\StateTransitionValidatorInterface
+   * @var StateTransitionValidatorInterface
    */
   protected $stateTransitionValidator;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -90,7 +92,7 @@ class EntityWorkflowWorkspaceListBuilder extends WseWorkspaceListBuilder {
   /**
    * Returns the available workflow transitions for a workspace.
    *
-   * @param \Drupal\workspaces\WorkspaceInterface $workspace
+   * @param WorkspaceInterface $workspace
    *   A workspace entity.
    *
    * @return array
diff --git a/modules/entity_workflow_workspace/src/EventSubscriber/EntityWorkflowWorkspaceEventSubscriber.php b/modules/entity_workflow_workspace/src/EventSubscriber/EntityWorkflowWorkspaceEventSubscriber.php
index c9d6560..3d7ded7 100644
--- a/modules/entity_workflow_workspace/src/EventSubscriber/EntityWorkflowWorkspaceEventSubscriber.php
+++ b/modules/entity_workflow_workspace/src/EventSubscriber/EntityWorkflowWorkspaceEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_workflow_workspace\EventSubscriber;
 
+use Drupal\workspaces\WorkspaceInterface;
 use Drupal\entity_workflow\Event\EntityWorkflowEvents;
 use Drupal\entity_workflow\Event\InitiateTransitionEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ -25,12 +26,12 @@ class EntityWorkflowWorkspaceEventSubscriber implements EventSubscriberInterface
   /**
    * Applies the workflow transition
    *
-   * @param \Drupal\entity_workflow\Event\InitiateTransitionEvent $event
+   * @param InitiateTransitionEvent $event
    *   The initiate transition event.
    */
   public function onInitiateTransaction(InitiateTransitionEvent $event) {
     if ($event->getWorkflowId() === 'workspace') {
-      /** @var \Drupal\workspaces\WorkspaceInterface $workspace */
+      /** @var WorkspaceInterface $workspace */
       $workspace = $event->getEntity();
 
       if ($event->getTransitionId() === 'publish') {
diff --git a/src/Controller/EntityWorkflowController.php b/src/Controller/EntityWorkflowController.php
index 738ebbe..5340f5d 100644
--- a/src/Controller/EntityWorkflowController.php
+++ b/src/Controller/EntityWorkflowController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_workflow\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\workspaces\WorkspaceInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -21,32 +25,32 @@ class EntityWorkflowController extends ControllerBase {
   /**
    * The workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
    * The workspace association service.
    *
-   * @var \Drupal\workspaces\WorkspaceAssociationInterface
+   * @var WorkspaceAssociationInterface
    */
   protected $workspaceAssociation;
 
   /**
    * The entity workflow information service.
    *
-   * @var \Drupal\entity_workflow\EntityWorkflowInfo
+   * @var EntityWorkflowInfo
    */
   protected $entityWorkflowInfo;
 
   /**
    * Constructs a new EntityWorkflowController instance.
    *
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager service.
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspace_association
+   * @param WorkspaceAssociationInterface $workspace_association
    *   The workspace association service.
-   * @param \Drupal\entity_workflow\EntityWorkflowInfo $entity_workflow_info
+   * @param EntityWorkflowInfo $entity_workflow_info
    *   The entity workflow information service.
    */
   public function __construct(WorkspaceManagerInterface $workspace_manager, WorkspaceAssociationInterface $workspace_association, EntityWorkflowInfo $entity_workflow_info) {
@@ -69,10 +73,10 @@ class EntityWorkflowController extends ControllerBase {
   /**
    * Builds and processes the workflow form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   The workflow form.
    */
   public function workflow(RouteMatchInterface $route_match) {
@@ -103,14 +107,14 @@ class EntityWorkflowController extends ControllerBase {
   /**
    * Builds and processes the bulk workflow form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   The bulk workflow form.
    */
   public function bulkWorkflow(RouteMatchInterface $route_match) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $route_match->getParameter($route_match->getParameter('entity_type_id'));
     $workflow = $route_match->getParameter('workflow');
 
@@ -136,7 +140,7 @@ class EntityWorkflowController extends ControllerBase {
   /**
    * Checks access for the bulk workflow form.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function checkBulkWorkflowAccess(RouteMatchInterface $route_match) {
@@ -155,10 +159,10 @@ class EntityWorkflowController extends ControllerBase {
   /**
    * Builds and processes the bulk workflow form for a workspace.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   The bulk workflow workspace form.
    */
   public function bulkWorkflowWorkspace(RouteMatchInterface $route_match) {
@@ -179,11 +183,11 @@ class EntityWorkflowController extends ControllerBase {
   /**
    * Checks access for the bulk workflow workspace form.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function checkBulkWorkflowWorkspaceAccess(RouteMatchInterface $route_match) {
-    /** @var \Drupal\workspaces\WorkspaceInterface $workspace */
+    /** @var WorkspaceInterface $workspace */
     $workspace = $route_match->getParameter('workspace');
 
     return $workspace->access('update', NULL, TRUE);
diff --git a/src/EntityWorkflowInfo.php b/src/EntityWorkflowInfo.php
index 6a719a6..7264b4d 100644
--- a/src/EntityWorkflowInfo.php
+++ b/src/EntityWorkflowInfo.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_workflow;
 
+use Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -15,32 +16,32 @@ class EntityWorkflowInfo {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle information manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;
 
   /**
    * The workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
    * Creates a EntityWorkflowInfo object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_bundle_info, WorkspaceManagerInterface $workspace_manager) {
@@ -55,11 +56,11 @@ class EntityWorkflowInfo {
    * This is only true if the entity is part of the workspace and thus has a
    * state.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $workflow_id
    *   The workflow to check.
-   * @param \Drupal\workspaces\WorkspaceInterface|null $workspace
+   * @param WorkspaceInterface|null $workspace
    *   (optional) The workspace to check, or the current workspace if not
    *   specified.
    *
@@ -134,7 +135,7 @@ class EntityWorkflowInfo {
    * @param string $entity_type_id
    *   The entity type ID.
    *
-   * @return \Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface[]
+   * @return EntityWorkflowTypeInterface[]
    *   An array of entity workflow plugins, keyed by their workflow entity ID.
    */
   public function getWorkflowPluginsForEntityType($entity_type_id) {
@@ -152,7 +153,7 @@ class EntityWorkflowInfo {
    * @param string $bundle_id
    *   The bundle ID.
    *
-   * @return \Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface[]
+   * @return EntityWorkflowTypeInterface[]
    *   An array of entity workflow plugins, keyed by their workflow entity ID.
    */
   public function getWorkflowPluginsForEntityTypeAndBundle($entity_type_id, $bundle_id) {
@@ -165,7 +166,7 @@ class EntityWorkflowInfo {
   }
 
   /**
-   * @param \Drupal\workflows\WorkflowInterface $workflow
+   * @param WorkflowInterface $workflow
    *   A workflow entity.
    *
    * @return bool
@@ -175,7 +176,7 @@ class EntityWorkflowInfo {
   }
 
   /**
-   * @return \Drupal\workflows\WorkflowInterface[]
+   * @return WorkflowInterface[]
    *   An array of workflow entities.
    */
   public function getWorkflowEntities() {
diff --git a/src/EntityWorkflowStateFieldItemList.php b/src/EntityWorkflowStateFieldItemList.php
index abe83fd..9ae9976 100644
--- a/src/EntityWorkflowStateFieldItemList.php
+++ b/src/EntityWorkflowStateFieldItemList.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_workflow;
 
+use Drupal\Core\Entity\RevisionableInterface;
+use Drupal\entity_workflow\Plugin\Field\FieldType\EntityWorkflowStateItem;
+use Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface;
+use Drupal\workflows\WorkflowInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemList;
@@ -17,7 +21,7 @@ class EntityWorkflowStateFieldItemList extends FieldItemList {
    * {@inheritdoc}
    */
   public function preSave() {
-    /** @var \Drupal\Core\Entity\RevisionableInterface $entity */
+    /** @var RevisionableInterface $entity */
     $entity = $this->getEntity();
 
     // Ensure that workflow states are removed when saving an entity in the
@@ -40,9 +44,9 @@ class EntityWorkflowStateFieldItemList extends FieldItemList {
       return;
     }
 
-    /** @var \Drupal\entity_workflow\Plugin\Field\FieldType\EntityWorkflowStateItem $item */
+    /** @var EntityWorkflowStateItem $item */
     $item = $this->appendItem();
-    /** @var \Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface $workflow */
+    /** @var EntityWorkflowTypeInterface $workflow */
     $workflow = $item->getWorkflow()->getTypePlugin();
 
     // If there is no default transition to write, or the current state on the
@@ -74,7 +78,7 @@ class EntityWorkflowStateFieldItemList extends FieldItemList {
       $workflow_id = $storage_definition->getSetting('workflow');
     }
 
-    /** @var \Drupal\workflows\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     $workflow = Workflow::load($workflow_id);
     return [$workflow->getTypePlugin()->getInitialState($entity)->id()];
   }
diff --git a/src/EntityWorkflowStateItemInterface.php b/src/EntityWorkflowStateItemInterface.php
index 8671b6e..13b4295 100644
--- a/src/EntityWorkflowStateItemInterface.php
+++ b/src/EntityWorkflowStateItemInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_workflow;
 
+use Drupal\workflows\WorkflowInterface;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\workflows\TransitionInterface;
 
@@ -13,7 +14,7 @@ interface EntityWorkflowStateItemInterface extends FieldItemInterface {
   /**
    * Gets the workflow used by the field.
    *
-   * @return \Drupal\workflows\WorkflowInterface
+   * @return WorkflowInterface
    *   The workflow entity.
    */
   public function getWorkflow();
@@ -50,7 +51,7 @@ interface EntityWorkflowStateItemInterface extends FieldItemInterface {
   /**
    * Gets the allowed transitions for the current state.
    *
-   * @return \Drupal\workflows\TransitionInterface[]
+   * @return TransitionInterface[]
    *   The allowed transitions, keyed by transition ID.
    */
   public function getTransitions();
@@ -58,7 +59,7 @@ interface EntityWorkflowStateItemInterface extends FieldItemInterface {
   /**
    * Applies the given transition, changing the current state.
    *
-   * @param \Drupal\workflows\TransitionInterface $transition
+   * @param TransitionInterface $transition
    *   The transition to apply.
    */
   public function applyTransition(TransitionInterface $transition);
diff --git a/src/Event/InitiateTransitionEvent.php b/src/Event/InitiateTransitionEvent.php
index a3e8a8e..2649552 100644
--- a/src/Event/InitiateTransitionEvent.php
+++ b/src/Event/InitiateTransitionEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_workflow\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the initiate transition event.
@@ -13,7 +13,7 @@ use Symfony\Component\EventDispatcher\Event;
 class InitiateTransitionEvent extends Event {
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
@@ -49,7 +49,7 @@ class InitiateTransitionEvent extends Event {
   }
 
   /**
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    */
   public function getEntity() {
     return $this->entity;
diff --git a/src/EventSubscriber/EntityWorkflowEventSubscriber.php b/src/EventSubscriber/EntityWorkflowEventSubscriber.php
index 43200cc..5dbe846 100644
--- a/src/EventSubscriber/EntityWorkflowEventSubscriber.php
+++ b/src/EventSubscriber/EntityWorkflowEventSubscriber.php
@@ -22,7 +22,7 @@ class EntityWorkflowEventSubscriber implements EventSubscriberInterface {
   /**
    * Applies the workflow transition
    *
-   * @param \Drupal\entity_workflow\Event\InitiateTransitionEvent $event
+   * @param InitiateTransitionEvent $event
    *   The initiate transition event.
    */
   public function onInitiateTransaction(InitiateTransitionEvent $event) {
diff --git a/src/Form/EntityWorkflowBulkTransitionForm.php b/src/Form/EntityWorkflowBulkTransitionForm.php
index c160b05..0849452 100644
--- a/src/Form/EntityWorkflowBulkTransitionForm.php
+++ b/src/Form/EntityWorkflowBulkTransitionForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_workflow\Form;
 
+use Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ -18,60 +19,60 @@ class EntityWorkflowBulkTransitionForm extends FormBase {
   /**
    * The entity workflow information service.
    *
-   * @var \Drupal\entity_workflow\EntityWorkflowInfo
+   * @var EntityWorkflowInfo
    */
   protected $entityWorkflowInfo;
 
   /**
    * The state transition validation service.
    *
-   * @var \Drupal\entity_workflow\StateTransitionValidatorInterface
+   * @var StateTransitionValidatorInterface
    */
   protected $stateTransitionValidator;
 
   /**
    * The workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
-   * @var \Drupal\workflows\WorkflowInterface
+   * @var WorkflowInterface
    */
   protected $workflow;
 
   /**
-   * @var \Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface
+   * @var EntityWorkflowTypeInterface
    */
   protected $workflowPlugin;
 
   /**
    * Creates a EntityWorkflowForm object.
    *
-   * @param \Drupal\entity_workflow\EntityWorkflowInfo $entity_workflow_info
+   * @param EntityWorkflowInfo $entity_workflow_info
    *   The entity workflow information service.
-   * @param \Drupal\entity_workflow\StateTransitionValidatorInterface $state_transition_validation
+   * @param StateTransitionValidatorInterface $state_transition_validation
    *   The state transition validation service.
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function __construct(EntityWorkflowInfo $entity_workflow_info, StateTransitionValidatorInterface $state_transition_validation, WorkspaceManagerInterface $workspace_manager, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Form/EntityWorkflowForm.php b/src/Form/EntityWorkflowForm.php
index 246c98e..ab3f2d2 100644
--- a/src/Form/EntityWorkflowForm.php
+++ b/src/Form/EntityWorkflowForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_workflow\Form;
 
+use Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,47 +18,47 @@ class EntityWorkflowForm extends FormBase {
   /**
    * The entity workflow information service.
    *
-   * @var \Drupal\entity_workflow\EntityWorkflowInfo
+   * @var EntityWorkflowInfo
    */
   protected $entityWorkflowInfo;
 
   /**
    * The state transition validation service.
    *
-   * @var \Drupal\entity_workflow\StateTransitionValidatorInterface
+   * @var StateTransitionValidatorInterface
    */
   protected $stateTransitionValidator;
 
   /**
    * The workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
   /**
-   * @var \Drupal\workflows\WorkflowInterface
+   * @var WorkflowInterface
    */
   protected $workflow;
 
   /**
-   * @var \Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface
+   * @var EntityWorkflowTypeInterface
    */
   protected $workflowPlugin;
 
   /**
    * Creates a EntityWorkflowForm object.
    *
-   * @param \Drupal\entity_workflow\EntityWorkflowInfo $entity_workflow_info
+   * @param EntityWorkflowInfo $entity_workflow_info
    *   The entity workflow information service.
-   * @param \Drupal\entity_workflow\StateTransitionValidatorInterface $state_transition_validation
+   * @param StateTransitionValidatorInterface $state_transition_validation
    *   The state transition validation service.
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager.
    */
   public function __construct(EntityWorkflowInfo $entity_workflow_info, StateTransitionValidatorInterface $state_transition_validation, WorkspaceManagerInterface $workspace_manager) {
diff --git a/src/Form/EntityWorkflowSimpleTransitionForm.php b/src/Form/EntityWorkflowSimpleTransitionForm.php
index 400a1f0..8a85d4b 100644
--- a/src/Form/EntityWorkflowSimpleTransitionForm.php
+++ b/src/Form/EntityWorkflowSimpleTransitionForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_workflow\Form;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\workflows\WorkflowInterface;
+use Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface;
+use Drupal\entity_workflow\EntityWorkflowTransition;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -15,43 +20,43 @@ class EntityWorkflowSimpleTransitionForm extends ConfirmFormBase {
   /**
    * The entity workflow information service.
    *
-   * @var \Drupal\entity_workflow\EntityWorkflowInfo
+   * @var EntityWorkflowInfo
    */
   protected $entityWorkflowInfo;
 
   /**
    * The state transition validation service.
    *
-   * @var \Drupal\entity_workflow\StateTransitionValidatorInterface
+   * @var StateTransitionValidatorInterface
    */
   protected $stateTransitionValidator;
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
   /**
-   * @var \Drupal\workflows\WorkflowInterface
+   * @var WorkflowInterface
    */
   protected $workflow;
 
   /**
-   * @var \Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface
+   * @var EntityWorkflowTypeInterface
    */
   protected $workflowPlugin;
 
   /**
-   * @var \Drupal\entity_workflow\EntityWorkflowTransition
+   * @var EntityWorkflowTransition
    */
   protected $transition;
 
   /**
    * Creates a EntityWorkflowForm object.
    *
-   * @param \Drupal\entity_workflow\EntityWorkflowInfo $entity_workflow_info
+   * @param EntityWorkflowInfo $entity_workflow_info
    *   The entity workflow information service.
-   * @param \Drupal\entity_workflow\StateTransitionValidatorInterface $state_transition_validation
+   * @param StateTransitionValidatorInterface $state_transition_validation
    *   The state transition validation service.
    */
   public function __construct(EntityWorkflowInfo $entity_workflow_info, StateTransitionValidatorInterface $state_transition_validation) {
@@ -150,7 +155,7 @@ class EntityWorkflowSimpleTransitionForm extends ConfirmFormBase {
   /**
    * Checks access for the entity workflow simple transition form.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function checkAccess(RouteMatchInterface $route_match = NULL) {
diff --git a/src/Plugin/Derivative/EntityWorkflowLocalActions.php b/src/Plugin/Derivative/EntityWorkflowLocalActions.php
index 8a1d580..2acfbd5 100644
--- a/src/Plugin/Derivative/EntityWorkflowLocalActions.php
+++ b/src/Plugin/Derivative/EntityWorkflowLocalActions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_workflow\Plugin\Derivative;
 
+use Drupal\entity_workflow\EntityWorkflowTransition;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -20,25 +21,25 @@ class EntityWorkflowLocalActions extends DeriverBase implements ContainerDeriver
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity workflow information service.
    *
-   * @var \Drupal\entity_workflow\EntityWorkflowInfo
+   * @var EntityWorkflowInfo
    */
   protected $entityWorkflowInfo;
 
   /**
    * Creates a EntityWorkflowLocalTasks object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_workflow\EntityWorkflowInfo $entity_workflow_info
+   * @param EntityWorkflowInfo $entity_workflow_info
    *   The entity workflow information service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityWorkflowInfo $entity_workflow_info, TranslationInterface $string_translation) {
@@ -67,7 +68,7 @@ class EntityWorkflowLocalActions extends DeriverBase implements ContainerDeriver
     foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
       foreach ($this->entityWorkflowInfo->getWorkflowPluginsForEntityType($entity_type_id) as $workflow_id => $workflow_type) {
         foreach ($workflow_type->getTransitions() as $transition_id => $transition) {
-          /** @var \Drupal\entity_workflow\EntityWorkflowTransition $transition */
+          /** @var EntityWorkflowTransition $transition */
           if ($transition->hasActionLink()) {
             $this->derivatives["$entity_type_id.{$workflow_id}_workflow_{$transition_id}_transition"] = [
               'route_name' => "entity.$entity_type_id.workflow_transition",
diff --git a/src/Plugin/Derivative/EntityWorkflowLocalTasks.php b/src/Plugin/Derivative/EntityWorkflowLocalTasks.php
index c63231d..a68f629 100644
--- a/src/Plugin/Derivative/EntityWorkflowLocalTasks.php
+++ b/src/Plugin/Derivative/EntityWorkflowLocalTasks.php
@@ -20,25 +20,25 @@ class EntityWorkflowLocalTasks extends DeriverBase implements ContainerDeriverIn
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity workflow information service.
    *
-   * @var \Drupal\entity_workflow\EntityWorkflowInfo
+   * @var EntityWorkflowInfo
    */
   protected $entityWorkflowInfo;
 
   /**
    * Creates a EntityWorkflowLocalTasks object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_workflow\EntityWorkflowInfo $entity_workflow_info
+   * @param EntityWorkflowInfo $entity_workflow_info
    *   The entity workflow information service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityWorkflowInfo $entity_workflow_info, TranslationInterface $string_translation) {
diff --git a/src/Plugin/Field/FieldType/EntityWorkflowStateItem.php b/src/Plugin/Field/FieldType/EntityWorkflowStateItem.php
index 323e044..dac5b35 100644
--- a/src/Plugin/Field/FieldType/EntityWorkflowStateItem.php
+++ b/src/Plugin/Field/FieldType/EntityWorkflowStateItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_workflow\Plugin\Field\FieldType;
 
+use Drupal\workspaces\WorkspaceManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ -154,7 +155,7 @@ class EntityWorkflowStateItem extends FieldItemBase implements EntityWorkflowSta
    * {@inheritdoc}
    */
   public function getPossibleOptions(AccountInterface $account = NULL) {
-    /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager */
+    /** @var WorkspaceManagerInterface $workspace_manager */
     $workspace_manager = \Drupal::service('workspaces.manager');
 
     $workflow = $this->getWorkflow();
@@ -176,7 +177,7 @@ class EntityWorkflowStateItem extends FieldItemBase implements EntityWorkflowSta
    * {@inheritdoc}
    */
   public function getSettableOptions(AccountInterface $account = NULL) {
-    /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager */
+    /** @var WorkspaceManagerInterface $workspace_manager */
     $workspace_manager = \Drupal::service('workspaces.manager');
 
     $allowed_states = $this->getAllowedStates($this->value);
@@ -198,7 +199,7 @@ class EntityWorkflowStateItem extends FieldItemBase implements EntityWorkflowSta
    * @param string $value
    *   The field value, representing the state ID.
    *
-   * @return \Drupal\workflows\StateInterface[]
+   * @return StateInterface[]
    *   The allowed states.
    */
   protected function getAllowedStates($value) {
@@ -248,7 +249,7 @@ class EntityWorkflowStateItem extends FieldItemBase implements EntityWorkflowSta
       return $this->t('N/A');
     }
 
-    /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager */
+    /** @var WorkspaceManagerInterface $workspace_manager */
     $workspace_manager = \Drupal::service('workspaces.manager');
     if (!$workspace && $workspace_manager->hasActiveWorkspace()) {
       $workspace = $workspace_manager->getActiveWorkspace();
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 8195b51..abec0e7 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -18,21 +18,21 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity workflow information service.
    *
-   * @var \Drupal\entity_workflow\EntityWorkflowInfo
+   * @var EntityWorkflowInfo
    */
   protected $entityWorkflowInfo;
 
   /**
    * Constructs a RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityWorkflowInfo $entity_workflow_info) {
@@ -149,9 +149,9 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Disables various entity forms in the Live workspace.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    */
   protected function disableEntityForms(RouteCollection $collection, EntityTypeInterface $entity_type) {
diff --git a/src/StateTransitionValidator.php b/src/StateTransitionValidator.php
index 34330b5..748e2ed 100644
--- a/src/StateTransitionValidator.php
+++ b/src/StateTransitionValidator.php
@@ -16,14 +16,14 @@ class StateTransitionValidator implements StateTransitionValidatorInterface {
   /**
    * The workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
    * Constructs a new StateTransitionValidator.
    *
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager.
    */
   public function __construct(WorkspaceManagerInterface $workspace_manager) {
diff --git a/src/StateTransitionValidatorInterface.php b/src/StateTransitionValidatorInterface.php
index 00de288..ec09590 100644
--- a/src/StateTransitionValidatorInterface.php
+++ b/src/StateTransitionValidatorInterface.php
@@ -15,14 +15,14 @@ interface StateTransitionValidatorInterface {
   /**
    * Gets a list of transitions that are legal for this user on this entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to be transitioned.
-   * @param \Drupal\workflows\WorkflowInterface $workflow
+   * @param WorkflowInterface $workflow
    *   The workflow entity.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The account that wants to perform a transition.
    *
-   * @return \Drupal\entity_workflow\EntityWorkflowTransition[]
+   * @return EntityWorkflowTransition[]
    *   The list of transitions that are legal for this user on this entity.
    */
   public function getValidTransitions(ContentEntityInterface $entity, WorkflowInterface $workflow, AccountInterface $user, WorkspaceInterface $workspace = NULL);
@@ -30,15 +30,15 @@ interface StateTransitionValidatorInterface {
   /**
    * Checks if a transition between two states if valid for the given user.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to be transitioned.
-   * @param \Drupal\workflows\WorkflowInterface $workflow
+   * @param WorkflowInterface $workflow
    *   The workflow entity.
    * @param string $transition_id
    *   The ID of the transition to be performed.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to validate.
-   * @param \Drupal\workspaces\WorkspaceInterface|null $workspace
+   * @param WorkspaceInterface|null $workspace
    *   The workspace entity.
    *
    * @return bool
diff --git a/src/WorkflowTransitionLogInterface.php b/src/WorkflowTransitionLogInterface.php
index 890c7cb..26673dc 100644
--- a/src/WorkflowTransitionLogInterface.php
+++ b/src/WorkflowTransitionLogInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_workflow;
 
+use Drupal\workflows\WorkflowInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -20,7 +22,7 @@ interface WorkflowTransitionLogInterface extends ContentEntityInterface {
   /**
    * Gets the workflow.
    *
-   * @return \Drupal\workflows\WorkflowInterface
+   * @return WorkflowInterface
    *   The workflow entity.
    */
   public function getWorkflow();
@@ -44,7 +46,7 @@ interface WorkflowTransitionLogInterface extends ContentEntityInterface {
   /**
    * Gets the source entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The source entity.
    */
   public function getSourceEntity();
@@ -60,7 +62,7 @@ interface WorkflowTransitionLogInterface extends ContentEntityInterface {
   /**
    * Gets the user.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity.
    */
   public function getUser();
diff --git a/src/WorkflowTransitionLogStorage.php b/src/WorkflowTransitionLogStorage.php
index cc490a4..8cc1522 100644
--- a/src/WorkflowTransitionLogStorage.php
+++ b/src/WorkflowTransitionLogStorage.php
@@ -14,7 +14,7 @@ class WorkflowTransitionLogStorage extends SqlContentEntityStorage {
   /**
    * Writes a log entry directly in the base table.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param $workflow_id
    * @param $previous_state
    * @param $new_state
diff --git a/src/WorkflowType/EntityWorkflowTypeBase.php b/src/WorkflowType/EntityWorkflowTypeBase.php
index 80b4cb5..1515ebf 100644
--- a/src/WorkflowType/EntityWorkflowTypeBase.php
+++ b/src/WorkflowType/EntityWorkflowTypeBase.php
@@ -25,21 +25,21 @@ abstract class EntityWorkflowTypeBase extends WorkflowTypeBase implements Entity
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The workspaces manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -52,11 +52,11 @@ abstract class EntityWorkflowTypeBase extends WorkflowTypeBase implements Entity
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, WorkspaceManagerInterface $workspace_manager, ModuleHandlerInterface $module_handler) {
@@ -195,7 +195,7 @@ abstract class EntityWorkflowTypeBase extends WorkflowTypeBase implements Entity
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\entity_workflow\EntityWorkflowState
+   * @return EntityWorkflowState
    */
   public function getState($state_id) {
     if (!isset($this->configuration['states'][$state_id])) {
@@ -212,7 +212,7 @@ abstract class EntityWorkflowTypeBase extends WorkflowTypeBase implements Entity
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\entity_workflow\EntityWorkflowTransition
+   * @return EntityWorkflowTransition
    */
   public function getTransition($transition_id) {
     if (!isset($this->configuration['transitions'][$transition_id])) {
diff --git a/src/WorkflowType/EntityWorkflowTypeInterface.php b/src/WorkflowType/EntityWorkflowTypeInterface.php
index aa11e0e..32e2888 100644
--- a/src/WorkflowType/EntityWorkflowTypeInterface.php
+++ b/src/WorkflowType/EntityWorkflowTypeInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_workflow\WorkflowType;
 
+use Drupal\entity_workflow\EntityWorkflowState;
+use Drupal\entity_workflow\EntityWorkflowTransition;
 use Drupal\workflows\WorkflowTypeInterface;
 
 /**
@@ -86,28 +88,28 @@ interface EntityWorkflowTypeInterface extends WorkflowTypeInterface {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\entity_workflow\EntityWorkflowState[]
+   * @return EntityWorkflowState[]
    */
   public function getStates($state_ids = NULL);
 
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\entity_workflow\EntityWorkflowState
+   * @return EntityWorkflowState
    */
   public function getState($state_id);
 
   /**
-  * {@inheritdoc}
+   * {@inheritdoc}
    *
-   * @return \Drupal\entity_workflow\EntityWorkflowTransition[]
+   * @return EntityWorkflowTransition[]
    */
   public function getTransitions(array $transition_ids = NULL);
 
   /**
-  * {@inheritdoc}
+   * {@inheritdoc}
    *
-   * @return \Drupal\entity_workflow\EntityWorkflowTransition
+   * @return EntityWorkflowTransition
    */
   public function getTransition($transition_id);
 
diff --git a/src/WorkflowType/Permissions.php b/src/WorkflowType/Permissions.php
index 55fc4ce..3145a85 100644
--- a/src/WorkflowType/Permissions.php
+++ b/src/WorkflowType/Permissions.php
@@ -17,14 +17,14 @@ class Permissions implements ContainerInjectionInterface {
   /**
    * The entity workflow information service.
    *
-   * @var \Drupal\entity_workflow\EntityWorkflowInfo
+   * @var EntityWorkflowInfo
    */
   protected $entityWorkflowInfo;
 
   /**
    * Constructs a new Permissions instance.
    *
-   * @param \Drupal\entity_workflow\EntityWorkflowInfo $entity_workflow_info
+   * @param EntityWorkflowInfo $entity_workflow_info
    *   The entity workflow information service.
    */
   public function __construct(EntityWorkflowInfo $entity_workflow_info) {
@@ -51,7 +51,7 @@ class Permissions implements ContainerInjectionInterface {
     $perms = [];
     // Generate permissions for all entity workflows that provide them.
     foreach ($this->entityWorkflowInfo->getWorkflowEntities() as $workflow_id => $workflow) {
-      /** @var \Drupal\entity_workflow\WorkflowType\EntityWorkflowTypeInterface $workflow_type */
+      /** @var EntityWorkflowTypeInterface $workflow_type */
       $workflow_type = $workflow->getTypePlugin();
 
       if ($permissions = $workflow_type->getPermissions()) {
diff --git a/tests/modules/entity_workflow_test/entity_workflow_test.module b/tests/modules/entity_workflow_test/entity_workflow_test.module
index 4d87e68..927617a 100644
--- a/tests/modules/entity_workflow_test/entity_workflow_test.module
+++ b/tests/modules/entity_workflow_test/entity_workflow_test.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\workflows\WorkflowInterface;
 
@@ -7,7 +8,7 @@ use Drupal\workflows\WorkflowInterface;
  * Implements hook_entity_workflow_bulk_workflow_entities().
  */
 function entity_workflow_test_entity_workflow_bulk_workflow_entities(WorkflowInterface $workflow, EntityInterface $entity) {
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+  /** @var EntityTypeManagerInterface $entity_type_manager */
   $entity_type_manager = \Drupal::service('entity_type.manager');
 
   $entities = [];
