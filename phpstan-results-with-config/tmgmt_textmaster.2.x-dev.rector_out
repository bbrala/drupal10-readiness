modules/contrib/tmgmt_textmaster/src/Controller/TextmasterProjectController.php
modules/contrib/tmgmt_textmaster/src/Controller/WebHookController.php
modules/contrib/tmgmt_textmaster/src/Plugin/tmgmt/Translator/TextmasterTranslator.php
modules/contrib/tmgmt_textmaster/src/Plugin/views/field/TextMasterProjectPrice.php
modules/contrib/tmgmt_textmaster/src/TextmasterTranslatorUi.php
modules/contrib/tmgmt_textmaster/tests/src/FunctionalJavascript/TmgmtTextmasterJobCreationTest.php
modules/contrib/tmgmt_textmaster/tests/src/FunctionalJavascript/TmgmtTextmasterPluginSettingsTest.php
modules/contrib/tmgmt_textmaster/tests/src/FunctionalJavascript/TmgmtTextmasterTestBase.php
modules/contrib/tmgmt_textmaster/tmgmt_textmaster.install
modules/contrib/tmgmt_textmaster/tmgmt_textmaster.module

8 files with changes
====================

1) modules/contrib/tmgmt_textmaster/tmgmt_textmaster.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\tmgmt\Entity\JobItem;
+use Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator;
 /**
  * @file
  * A description of what your module does.
@@ @@
  */
 function tmgmt_textmaster_entity_operation(EntityInterface $entity) {

-  /** @var Drupal\tmgmt\Entity\Job $entity */
+  /** @var Job $entity */
   if ($entity->bundle() == 'tmgmt_job'
     && $entity->hasTranslator()
     && $entity->getTranslatorId() == 'textmaster'
@@ @@
     }
     return $operations;
   }
-  /** @var Drupal\tmgmt\Entity\JobItem $entity */
+  /** @var JobItem $entity */
   if ($entity->bundle() == 'tmgmt_job_item'
     && $entity->getJob()->getTranslatorId() == 'textmaster') {
     $remote = tmgmt_textmaster_get_job_item_remote($entity);
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function tmgmt_textmaster_form_tmgmt_job_abort_form_alter(&$form) {
-  /** @var Drupal\tmgmt\Entity\Job $job */
+  /** @var Job $job */
   $job = \Drupal::routeMatch()->getParameter('tmgmt_job');
   if (empty($job) ||
     !$job->hasTranslator() ||
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function tmgmt_textmaster_form_tmgmt_job_item_edit_form_alter(&$form, $form_state) {
-  /** @var Drupal\tmgmt\Entity\JobItem $job_item */
+  /** @var JobItem $job_item */
   $job_item = $form_state->getFormObject()->getEntity();
-  /** @var Drupal\tmgmt\Entity\Job $job */
+  /** @var Job $job */
   $job = $job_item->getJob();
   if (!$job->hasTranslator()
     || $job->getTranslatorId() != 'textmaster'
@@ @@
     return;
   }
   // Check for TextMaster Document status.
-  /** @var \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator $plugin */
+  /** @var TextmasterTranslator $plugin */
   $plugin = $job_item->getTranslatorPlugin();
   $plugin->setTranslator($job_item->getTranslator());
   $remote = tmgmt_textmaster_get_job_item_remote($job_item);
@@ @@
 /**
  * Get data with 'module_name', 'project_id', 'document_id' for Job Item.
  *
- * @param \Drupal\tmgmt\JobItemInterface $job_item
+ * @param JobItemInterface $job_item
  *   Job Item.
  *
  * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/tmgmt_textmaster/tests/src/FunctionalJavascript/TmgmtTextmasterTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt_textmaster\FunctionalJavascript;

+use Drupal\node\NodeInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Determine whether screenshots should be created.
@@ @@
    * @param string $title
    *   Node title.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   Newly created node object.
    */
   protected function createTranslatableNode($bundle, $sourcelang = 'en', $title = '') {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/tmgmt_textmaster/tests/src/FunctionalJavascript/TmgmtTextmasterJobCreationTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->createNodeType('textmaster_page', 'TextMaster Test Page', TRUE);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/tmgmt_textmaster/src/TextmasterTranslatorUi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_textmaster;

+use Drupal\tmgmt\Entity\Job;
 use Drupal\Core\Ajax\RemoveCommand;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);

-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $form_state->getFormObject()->getEntity();
     $app_url = $this->getApplicationUrl($translator);
     $tm_api_key_url = Url::fromUri($app_url . '/clients/api_info')->toString();
@@ @@
     if ($form_state->hasAnyErrors()) {
       return;
     }
-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $form_state->getFormObject()->getEntity();
-    /** @var \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator $plugin */
+    /** @var TextmasterTranslator $plugin */
     $plugin = $translator->getPlugin();
     $plugin->setTranslator($translator);
     $result = $plugin->checkTextmasterAuthentication();
@@ @@
       $this->messenger()->addWarning(t('Please note that Drupal word count may differ from TextMaster.'));
     }

-    /** @var \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator $translator_plugin */
+    /** @var TextmasterTranslator $translator_plugin */
     $translator_plugin = $this->getTranslatorPluginForJob($job);
     $app_url = $this->getApplicationUrl($job->getTranslator());

@@ @@
       // Allow 'Save' action for job item.
       return;
     }
-    /** @var \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator $plugin */
+    /** @var TextmasterTranslator $plugin */
     $plugin = $translator->getPlugin();
     $plugin->setTranslator($translator);
     $remote = tmgmt_textmaster_get_job_item_remote($item);
@@ @@
    * {@inheritdoc}
    */
   public function reviewFormSubmit(array $form, FormStateInterface $form_state, JobItemInterface $item) {
-    /** @var \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator $plugin */
+    /** @var TextmasterTranslator $plugin */
     $translator = $item->getTranslator();
     if ($translator->getPluginId() != 'textmaster') {
       return;
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   FormState.
    */
   public function submitPullTranslations(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt\Entity\Job $job */
+    /** @var Job $job */
     $job = $form_state->getFormObject()->getEntity();

-    /** @var \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator $translator_plugin */
+    /** @var TextmasterTranslator $translator_plugin */
     $translator_plugin = $job->getTranslator()->getPlugin();
     $translator_plugin->fetchTranslatedFiles($job);
   }
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   FormState.
    */
   public function updateTemplatesValidate(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   FormState.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   FormState.
    */
   public static function askForRevisionValidate(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   FormState.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax Response.
    */
   public static function askForRevisionCallback(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   FormState.
    */
   public static function sendRevisionRequestValidate(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   FormState.
    */
   public static function sendRevisionRequestSubmit(array &$form, FormStateInterface $form_state) {
     // Validation passed. Send revision request.
-    /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+    /** @var JobItemInterface $job_item */
     $job_item = $form_state->getFormObject()->getEntity();
-    /** @var \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator $plugin */
+    /** @var TextmasterTranslator $plugin */
     $plugin = $job_item->getTranslatorPlugin();
     $plugin->setTranslator($job_item->getTranslator());
     $remote = tmgmt_textmaster_get_job_item_remote($job_item);
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   FormState.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax Response.
    */
   public static function sendRevisionRequestCallback(array $form, FormStateInterface $form_state) {
@@ @@
   /**
    * Get Translator plufin for job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   TMGMT Job Entity.
    *
-   * @return \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator
+   * @return TextmasterTranslator
    *   TextMaster Translator plugin.
    */
   public function getTranslatorPluginForJob(JobInterface $job) {
-    /** @var \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator $translator_plugin */
+    /** @var TextmasterTranslator $translator_plugin */
     $translator_plugin = $job->getTranslator()->getPlugin();
     $translator_plugin->setTranslator($job->getTranslator());
     return $translator_plugin;
@@ @@
   /**
    * Get TextMaster templates list filtered by Job source and target language.
    *
-   * @param \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator $translator_plugin
+   * @param TextmasterTranslator $translator_plugin
    *   TextMaster Translator plugin.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   TMGMT Job Entity.
    *
    * @return array
@@ @@
   /**
    * Get TextMaster Application URL.
    *
-   * @param \Drupal\tmgmt\TranslatorInterface $translator
+   * @param TranslatorInterface $translator
    *   TMGMT Translator.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tmgmt_textmaster/src/Plugin/views/field/TextMasterProjectPrice.php:19

    ---------- begin diff ----------
@@ @@
    */
   public function render(ResultRow $values) {

-    /** @var \Drupal\tmgmt\JobInterface $entity */
+    /** @var JobInterface $entity */
     if (empty($entity = $values->_entity)
       || !$entity instanceof JobInterface
       || empty($price = $entity->getSetting('project_price'))
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tmgmt_textmaster/src/Plugin/tmgmt/Translator/TextmasterTranslator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator;

+use Drupal\tmgmt\Entity\JobItem;
+use Drupal\tmgmt_file\Format\FormatInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Url;
 use Drupal\tmgmt\ContinuousTranslatorInterface;
@@ @@
   /**
    * The translator.
    *
-   * @var \Drupal\tmgmt\TranslatorInterface
+   * @var TranslatorInterface
    */
   private $translator;

@@ @@
   /**
    * Guzzle HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $client;

@@ @@
   /**
    * Constructs a TextmasterTranslator object.
    *
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The Guzzle HTTP client.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \GuzzleHttp\ClientInterface $client */
+    /** @var ClientInterface $client */
     $client = $container->get('http_client');
     return new static(
       $client,
@@ @@
   /**
    * Sets a Translator.
    *
-   * @param \Drupal\tmgmt\TranslatorInterface $translator
+   * @param TranslatorInterface $translator
    *   The translator to set.
    */
   public function setTranslator(TranslatorInterface $translator) {
@@ @@
    * {@inheritdoc}
    */
   public function requestJobItemsTranslation(array $job_items) {
-    /** @var \Drupal\tmgmt\Entity\Job $job */
+    /** @var Job $job */
     $job = reset($job_items)->getJob();
     if ($job->isRejected()) {
       // Change the status to Unprocessed to allow submit again.
@@ @@
       $project_id = $this->createTmProject($job);
       $job->addMessage('Created a new Project in TextMaster with the id: @id', ['@id' => $project_id], 'debug');

-      /** @var \Drupal\tmgmt\Entity\JobItem $job_item */
+      /** @var JobItem $job_item */
       foreach ($job_items as $job_item) {
         $operations[] = [
           [static::class, 'createDocumentForJobItemBatchProcess'],
@@ @@
   /**
    * Batch callback for Document creation process.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   Job Item.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Drupal tmgmt Job.
    * @param string $project_id
    *   Project in TextMaster for this job.
@@ @@
       $translator_plugin->setTranslator($job->getTranslator());
       $document_id = $translator_plugin->sendFiles($job_item, $project_id);

-      /** @var \Drupal\tmgmt\Entity\RemoteMapping $remote_mapping */
+      /** @var RemoteMapping $remote_mapping */
       $remote_mapping = RemoteMapping::create([
         'tjid' => $job->id(),
         'tjiid' => $job_item->id(),
@@ @@
    * @param array $operations
    *   Operations.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|false
+   * @return RedirectResponse|false
    *   Redirects to jobs overview page if success.
    */
   public static function createDocumentForJobItemBatchFinish($success, array $results, array $operations) {
@@ @@
    * @return array|int|null
    *   Result of the API request.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   public function sendApiRequest($path, $method = 'GET', array $params = [], $download = FALSE, $code = FALSE, $body = NULL) {
     $result = NULL;
@@ @@
    * @return array|int
    *   Response array or status code.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   public function request($path, $method = 'GET', array $params = [], $download = FALSE, $code = FALSE, $body = NULL) {
     $options = [];
@@ @@
   /**
    * Creates new translation project at TextMaster.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job.
    *
    * @return int
    *   TextMaster Project ID.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   public function createTmProject(JobInterface $job) {
     // Prepare parameters for Project API.
@@ @@
    *
    * @param string $project_id
    *   TextMaster project id.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   TMGMT Job.
    *
    * @return array|int|null|false
@@ @@
   /**
    * Send files to TextMaster.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The Job.
    * @param int $project_id
    *   TextMaster Project id.
@@ @@
    *   TextMaster Document Id.
    */
   public function sendFiles(JobItemInterface $job_item, $project_id) {
-    /** @var \Drupal\tmgmt_file\Format\FormatInterface $xliff_converter */
+    /** @var FormatInterface $xliff_converter */
     $xliff_converter = \Drupal::service('plugin.manager.tmgmt_file.format')
       ->createInstance('xlf');

@@ @@
    * @return string
    *   The URL of uploaded file.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   public function createTmRemoteFile($xliff, $name) {
     $file_name = $name . '.xliff';
@@ @@
    *   Unflatted data.
    */
   protected function parseTranslationData($data) {
-    /** @var \Drupal\tmgmt_file\Format\FormatInterface $xliff_converter */
+    /** @var FormatInterface $xliff_converter */
     $xliff_converter = \Drupal::service('plugin.manager.tmgmt_file.format')
       ->createInstance('xlf');
     // Import given data using XLIFF converter. Specify that passed content is
@@ @@
   /**
    * Fetches translations for job items of a given job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   A job containing job items that translations will be fetched for.
    */
   public function fetchTranslatedFiles(JobInterface $job) {
@@ @@
   /**
    * Batch callback for pull Job translations process.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   Job Item.
    * @param array $context
    *   An array that will contain information about the
@@ @@
     $is_item_translated = FALSE;
     // Get all existing mappings for this Job Item.
     $mappings = RemoteMapping::loadByLocalData($job->id(), $job_item->id());
-    /** @var \Drupal\tmgmt\Entity\RemoteMapping $mapping */
+    /** @var RemoteMapping $mapping */
     foreach ($mappings as $mapping) {
       // Prepare parameters for Job API (to get the job status).
       $document_id = $mapping->getRemoteIdentifier3();
@@ @@
    *   The project id.
    * @param string $file_id
    *   The file id to update.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The Job.
    * @param string $required_by
    *   The date by when the translation is required.
@@ @@
    *   (Optional) Set to TRUE if also want to send the confirmation message
    *   of this error. Otherwise will not send it.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   If there is a problem with the request.
    */
   public function sendFileError($state, $project_id, $file_id, JobInterface $job, $required_by, $message = '', $confirm = FALSE) {
@@ @@
   /**
    * Retrieve the data of a file in a state.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The Job to which will be added the data.
    * @param string $document_state
    *   The state of the file.
@@ @@
    * @param string $remote_file_url
    *   Translated file url.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   public function addTranslationToJob(JobInterface $job, $document_state, $project_id, $document_id, $remote_file_url) {
     $translated_file_response = $this->client->request('GET', $remote_file_url);
@@ @@
     }
     $job->addTranslatedData($file_data, [], $status);
     $mappings = RemoteMapping::loadByRemoteIdentifier('tmgmt_textmaster', $project_id, $document_id);
-    /** @var \Drupal\tmgmt\Entity\RemoteMapping $mapping */
+    /** @var RemoteMapping $mapping */
     $mapping = reset($mappings);
     $mapping->removeRemoteData('TMState');
     $mapping->addRemoteData('TMState', $status);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/tmgmt_textmaster/src/Controller/WebHookController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_textmaster\Controller;

+use Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\tmgmt\JobInterface;
@@ @@
   /**
    * Handles the change of TextMaster document state to "in_review".
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request to handle.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response to return.
    */
   public function inReviewCallback(Request $request) {
@@ @@
         return new Response('Could not get TextMaster project id, document id, status or translated file url from request.');
       }

-      /** @var \Drupal\tmgmt\Entity\RemoteMapping $remote */
+      /** @var RemoteMapping $remote */
       $remote = $this->getJobItemRemoteByTmData($project_id, $document_id);
       if (empty($remote)) {
         // Didn't find JobItem with this Document ID. Probably it was deleted.
@@ @@
       }

       $job = $remote->getJob();
-      /** @var \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator $translator_plugin */
+      /** @var TextmasterTranslator $translator_plugin */
       $translator_plugin = $job->getTranslator()->getPlugin();
       $translator_plugin->setTranslator($job->getTranslator());
       if (!$translator_plugin->isRemoteTranslationCompleted($status)) {
@@ @@
   /**
    * Handles the finalization of documents word count to finalize the project.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request to handle.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response to return.
    */
   public function wordCountFinishedCallback(Request $request) {
@@ @@
         return new Response('Could not find TextMaster project id, document id or word count in callback request.');
       }

-      /** @var \Drupal\tmgmt\Entity\RemoteMapping $remote */
+      /** @var RemoteMapping $remote */
       $remote = $this->getJobItemRemoteByTmData($project_id, $document_id);
       if (empty($remote)) {
         // Didn't find JobItem with this Document ID. Probably it was deleted.
@@ @@
       if ($this->isWordCountFinishedForJob($job)) {

         // Finalize the project.
-        /** @var \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator $translator_plugin */
+        /** @var TextmasterTranslator $translator_plugin */
         $translator_plugin = $job->getTranslator()->getPlugin();
         $translator_plugin->setTranslator($job->getTranslator());
         $translator_plugin->finalizeTmProject($project_id, $job);
@@ @@
   /**
    * Handles the finalization of TextMaster Project to set the correct price.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request to handle.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response to return.
    */
   public function projectFinalizedCallback(Request $request) {
@@ @@
         return new Response(new FormattableMarkup('Project @id not found.', ['@id' => $project_id]), 404);
       }

-      /** @var \Drupal\tmgmt\Entity\RemoteMapping $remote */
+      /** @var RemoteMapping $remote */
       $remote = reset($remotes);
       $job = $remote->getJob();
       $cost_in_currency = reset($total_costs);
@@ @@
   /**
    * Set TextMaster Project price for job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   TMGMT Job.
    * @param string $price
    *   TextMaster Project price.
@@ @@
    * @param string $document_id
    *   TextMaster document id.
    *
-   * @return array|\Drupal\tmgmt\Entity\RemoteMapping
+   * @return array|RemoteMapping
    *   Remote mapping.
    */
   public function getJobItemRemoteByTmData($project_id, $document_id) {
@@ @@
   /**
    * Check if word count was finished for all Job Items of this Job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   TMGMT Job.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/tmgmt_textmaster/src/Controller/TextmasterProjectController.php:20

    ---------- begin diff ----------
@@ @@
    * @param string $tm_project_id
    *   The TextMaster Project to launch.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect response.
    */
   public function launchProject(string $tm_job_id, string $tm_project_id) {
     $job = Job::load($tm_job_id);
-    /** @var \Drupal\tmgmt_textmaster\Plugin\tmgmt\Translator\TextmasterTranslator $translator_plugin */
+    /** @var TextmasterTranslator $translator_plugin */
     $translator_plugin = $job->getTranslator()->getPlugin();
     if (!$translator_plugin instanceof TextmasterTranslator) {
       $message = $this->t('Could not launch the job with Translation plugin different from TextMaster');
@@ @@
    * @param string $type
    *   The message type for log.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect response.
    */
   public function redirectToJobsList($message = '', $type = 'status') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 8 files have been changed by Rector                                       

