modules/contrib/braintree_api/braintree_api.module
modules/contrib/braintree_api/modules/braintree_api_test/src/Form/WebhookNotificationTestForm.php
modules/contrib/braintree_api/src/BraintreeApiService.php
modules/contrib/braintree_api/src/BraintreeApiServiceInterface.php
modules/contrib/braintree_api/src/Controller/BraintreeApiWebhook.php
modules/contrib/braintree_api/src/Event/BraintreeApiEvents.php
modules/contrib/braintree_api/src/Event/BraintreeApiWebhookEvent.php
modules/contrib/braintree_api/src/EventSubscriber/BraintreeApiSubscriber.php
modules/contrib/braintree_api/src/Form/BraintreeApiAdminForm.php

6 files with changes
====================

1) modules/contrib/braintree_api/src/Form/BraintreeApiAdminForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\braintree_api\Form;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Entity\EntityTypeManager;
 use Braintree\Exception\Authentication;
 use Braintree\Exception\Configuration;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Drupal\braintree_api\BraintreeApiService definition.
    *
-   * @var \Drupal\braintree_api\BraintreeApiService
+   * @var BraintreeApiService
    */
   protected $braintreeApi;

@@ @@
   /**
    * The Braintree API Logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/braintree_api/src/EventSubscriber/BraintreeApiSubscriber.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The Braintree API logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * BraintreeApiSubscriber constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The Braintree API logger channel.
    */
   public function __construct(LoggerInterface $logger) {
@@ @@
   /**
    * Process the "Check URL" webhook from Braintree.
    *
-   * @param \Drupal\braintree_api\Event\BraintreeApiWebhookEvent $event
+   * @param BraintreeApiWebhookEvent $event
    *   The event to process.
    */
   public function processWebhook(BraintreeApiWebhookEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/braintree_api/src/Event/BraintreeApiWebhookEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\braintree_api\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Braintree\WebhookNotification;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event dispatched when a webhook is received from Braintree.
@@ @@
    *
    * Object properties depend on the kind of webhook.
    *
-   * @var \Braintree\WebhookNotification
+   * @var WebhookNotification
    *
    * @see https://developers.braintreepayments.com/reference/general/webhooks/overview#notification-kinds
    */
@@ @@
    *
    * @param string $kind
    *   A string representing the kind of Braintree Webhook.
-   * @param \Braintree\WebhookNotification $webhook_notification
+   * @param WebhookNotification $webhook_notification
    *   The Braintree Webhook notification object.
    */
   public function __construct($kind, WebhookNotification $webhook_notification) {
@@ @@
   /**
    * Gets the Braintree Webhook notification object.
    *
-   * @return \Braintree\WebhookNotification
+   * @return WebhookNotification
    *   The Braintree Webhook notification object.
    */
   public function getWebhookNotification() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/braintree_api/src/Controller/BraintreeApiWebhook.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\braintree_api\Controller;

+use Psr\Log\LoggerInterface;
 use Drupal\braintree_api\Event\BraintreeApiEvents;
 use Drupal\braintree_api\Event\BraintreeApiWebhookEvent;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * Drupal\braintree_api\BraintreeApiService definition.
    *
-   * @var \Drupal\braintree_api\BraintreeApiService
+   * @var BraintreeApiService
    */
   protected $braintreeApi;

@@ @@
   /**
    * The Braintree API Logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@

       // Dispatch the webhook event.
       $event = new BraintreeApiWebhookEvent($webhook_notification->kind, $webhook_notification);
-      $this->eventDispatcher->dispatch(BraintreeApiEvents::WEBHOOK, $event);
+      $this->eventDispatcher->dispatch($event, BraintreeApiEvents::WEBHOOK);

       return new Response('Thanks!', Response::HTTP_OK);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/braintree_api/src/BraintreeApiServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\braintree_api;

+use Braintree\Gateway;
 /**
  * Enables use of the Braintree API library as a Symfony service.
  */
@@ @@
   /**
    * Get the Braintree gateway.
    *
-   * @return \Braintree\Gateway
+   * @return Gateway
    *   The Braintree gateway object, which is used to interact with Braintree.
    */
   public function getGateway();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/braintree_api/src/BraintreeApiService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\braintree_api;

+use Drupal\Core\Config\ImmutableConfig;
 use Braintree\Gateway;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\key\KeyRepository;
@@ @@
   /**
    * Drupal\Core\Config\ImmutableConfig definition.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    *  The Braintree API Configuration settings.
    */
   protected $config;
@@ @@
   /**
    * Drupal\key\KeyRepository definition.
    *
-   * @var \Drupal\key\KeyRepository
+   * @var KeyRepository
    */
   protected $keyRepository;

@@ @@
   /**
    * The Braintree Gateway.
    *
-   * @var \Braintree\Gateway
+   * @var Gateway
    */
   protected $gateway;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 6 files have been changed by Rector                                       

