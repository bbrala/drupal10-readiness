modules/contrib/field_defaults/field_defaults.install
modules/contrib/field_defaults/field_defaults.module
modules/contrib/field_defaults/src/Commands/FieldDefaultsBulkCommands.php
modules/contrib/field_defaults/src/Form/SettingsForm.php
modules/contrib/field_defaults/src/Tests/BooleanTest.php
modules/contrib/field_defaults/src/Tests/FieldDefaultsTestBase.php
modules/contrib/field_defaults/src/Tests/StringTest.php

6 files with changes
====================

1) modules/contrib/field_defaults/src/Tests/StringTest.php:19

    ---------- begin diff ----------
@@ @@
     $this->drupalGet('node/' . rand(1, 20) . '/edit');

     $field_setup = $this->setupFieldByType('string');
-    $this->assertFieldByName('field_' . $fieldName . $field_setup['structure'], $field_setup['value']);
+    $this->assertSession()->fieldValueEquals('field_' . $fieldName . $field_setup['structure'], $field_setup['value']);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_defaults/src/Tests/FieldDefaultsTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_defaults\Tests;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The administrator account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $administratorAccount;

@@ @@
    *
    * Once installed, a content type with the desired field is created.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Install Drupal.
     parent::setUp();

@@ @@
       'field_name' => $field_name,
       'label' => $field_name,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save and continue'));
+    $this->submitForm($edit, t('Save and continue'));

     // Fill out the $cardinality form as if we're not using an unlimited values.
     $edit = [
@@ @@
     }

     // And now we save the cardinality settings.
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
-    $this->assertText(t('Updated field @name field settings.', ['@name' => $field_name]));
+    $this->submitForm($edit, t('Save field settings'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Updated field @name field settings.', ['@name' => $field_name]));

     // Save.
-    $this->drupalPostForm(NULL, [], t('Save settings'));
-    $this->assertText(t('Saved @name configuration.', ['@name' => $field_name]));
+    $this->submitForm([], t('Save settings'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Saved @name configuration.', ['@name' => $field_name]));

     return $field_name;
   }
@@ @@
     ];

     // Run batch.
-    $this->drupalPostForm(NULL, $edit, t('Save settings'));
-    $this->assertNoRaw('&amp;nbsp;', 'Initial progress message is not double escaped.');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->responseNotContains('&amp;nbsp;');
     // Now also go to the next step.
     $this->maximumMetaRefreshCount = 1;
-    $this->assertRaw('<li class="messages__item">Default values were updated for 20 entities.</li>');
+    $this->assertSession()->responseContains('<li class="messages__item">Default values were updated for 20 entities.</li>');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoRawRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/field_defaults/src/Tests/BooleanTest.php:17

    ---------- begin diff ----------
@@ @@

     // Ensure value is checked on any random node.
     $this->drupalGet('node/' . rand(1, 20) . '/edit');
-    $this->assertFieldChecked('edit-field-' . $fieldName . '-value');
+    $this->assertSession()->checkboxChecked('edit-field-' . $fieldName . '-value');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/field_defaults/src/Form/SettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Config Factory.
    *
-   * @var Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Messenger Service.
    *
-   * @var Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/field_defaults/src/Commands/FieldDefaultsBulkCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_defaults\Commands;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drush\Commands\DrushCommands;
@@ @@
   /**
    * Entity type service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * Logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private $loggerChannelFactory;

@@ @@
   /**
    * Construct for field defaults drush commands.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Logger service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LoggerChannelFactoryInterface $loggerChannelFactory) {
@@ @@
    * @param bool $no_overwrite
    *   Whether to overwrite existing data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws UserAbortException
    */
   public function fieldDefaultsBulkUpdate($entity_type, $entity_bundle, $field_name, $lang = '', $no_overwrite = TRUE) {
     $no_overwrite = filter_var($no_overwrite, FILTER_VALIDATE_BOOLEAN);
@@ @@
       'title' => dt('Processing default values'),
       'operations' => $operations,
       'finished' => 'field_defaults_batch_finished',
-      'file' => drupal_get_path('module', 'field_defaults') . '/field_defaults.module',
+      'file' => \Drupal::service('extension.list.module')->getPath('field_defaults') . '/field_defaults.module',
     ];

     batch_set($batch);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/field_defaults/field_defaults.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\FieldConfigInterface;
+use Drupal\Core\Entity\ContentEntityBase;
 /**
  * @file
  * Allows updating existing content with default values.
@@ @@
   if (\Drupal::currentUser()->hasPermission('administer field defaults')) {
     if (isset($form['default_value'])) {

-      /** @var \Drupal\field\FieldConfigInterface $field */
+      /** @var FieldConfigInterface $field */
       $field = $form_state->getFormObject()->getEntity();
       $field_language = $field->language();

@@ @@
 function _field_defaults_ui_submit(&$form, FormStateInterface $form_state) {
   $values = $form_state->getValue(['default_value_input', 'field_defaults'], FALSE);
   if (!empty($values['update_defaults'])) {
-    /** @var \Drupal\field\FieldConfigInterface $entity */
+    /** @var FieldConfigInterface $entity */
     $entity = $form_state->getFormObject()->getEntity();
     $field_name = $entity->getName();

@@ @@
 function field_defaults_update_default($type, $id, $field_name, $field_value, $languages, $no_overwrite, &$context) {
   $has_changed = FALSE;

-  /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+  /** @var ContentEntityBase $entity */
   $entity = \Drupal::entityTypeManager()->getStorage($type)->load($id);

   // First set the default on the current language.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

