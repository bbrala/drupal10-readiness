diff --git a/lunr.api.php b/lunr.api.php
index b831d03..efad273 100644
--- a/lunr.api.php
+++ b/lunr.api.php
@@ -11,13 +11,12 @@ use Drupal\lunr\LunrSearchInterface;
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alters a Lunr search page.
  *
  * @param array $build
  *   The Lunr search page build.
- * @param \Drupal\lunr\LunrSearchInterface $lunr_search
+ * @param LunrSearchInterface $lunr_search
  *   The Lunr search entity.
  */
 function hook_lunr_search_page_alter(array &$build, LunrSearchInterface $lunr_search) {
diff --git a/src/Controller/LunrSearchController.php b/src/Controller/LunrSearchController.php
index 3ce0ac5..1acffed 100644
--- a/src/Controller/LunrSearchController.php
+++ b/src/Controller/LunrSearchController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lunr\Controller;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -17,7 +18,7 @@ class LunrSearchController extends ControllerBase {
   /**
    * Title callback for the search form.
    *
-   * @param \Drupal\lunr\LunrSearchInterface $lunr_search
+   * @param LunrSearchInterface $lunr_search
    *   The Lunr search entity.
    *
    * @return array
@@ -77,15 +78,15 @@ class LunrSearchController extends ControllerBase {
 
     $build['#attached']['library'][] = 'lunr/search';
     $build['#attached']['drupalSettings']['lunr']['searchSettings'][$lunr_search->id()] = [
-      'indexPath' => file_url_transform_relative(file_create_url($lunr_search->getIndexPath()) . '?v=' . $lunr_search->getLastIndexTime()),
-      'documentPathPattern' => file_url_transform_relative(file_create_url($lunr_search->getDocumentPathPattern()) . '?v=' . $lunr_search->getLastIndexTime()),
+      'indexPath' => \Drupal::service('file_url_generator')->transformRelative(\Drupal::service('file_url_generator')->generateAbsoluteString($lunr_search->getIndexPath()) . '?v=' . $lunr_search->getLastIndexTime()),
+      'documentPathPattern' => \Drupal::service('file_url_generator')->transformRelative(\Drupal::service('file_url_generator')->generateAbsoluteString($lunr_search->getDocumentPathPattern()) . '?v=' . $lunr_search->getLastIndexTime()),
       'displayField' => $lunr_search->getDisplayField(),
       'resultsPerPage' => $lunr_search->getResultsPerPage(),
       'id' => $lunr_search->id(),
     ];
     $suffix = '?' . \Drupal::state()->get('system.css_js_query_string', '0');
-    $build['#attached']['drupalSettings']['lunr']['workerPath'] = base_path() . drupal_get_path('module', 'lunr') . '/js/search.worker.js' . $suffix;
-    $build['#attached']['drupalSettings']['lunr']['lunrPath'] = base_path() . drupal_get_path('module', 'lunr') . '/js/vendor/lunr/lunr.min.js' . $suffix;
+    $build['#attached']['drupalSettings']['lunr']['workerPath'] = base_path() . \Drupal::service('extension.list.module')->getPath('lunr') . '/js/search.worker.js' . $suffix;
+    $build['#attached']['drupalSettings']['lunr']['lunrPath'] = base_path() . \Drupal::service('extension.list.module')->getPath('lunr') . '/js/vendor/lunr/lunr.min.js' . $suffix;
 
     CacheableMetadata::createFromObject($lunr_search)->applyTo($build);
 
@@ -99,7 +100,7 @@ class LunrSearchController extends ControllerBase {
   /**
    * Title callback for the search form.
    *
-   * @param \Drupal\lunr\LunrSearchInterface $lunr_search
+   * @param LunrSearchInterface $lunr_search
    *   The Lunr search entity.
    *
    * @return string
@@ -112,10 +113,10 @@ class LunrSearchController extends ControllerBase {
   /**
    * Determines access for the search page.
    *
-   * @param \Drupal\lunr\LunrSearchInterface $lunr_search
+   * @param LunrSearchInterface $lunr_search
    *   The Lunr search entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(LunrSearchInterface $lunr_search) {
diff --git a/src/Controller/LunrSearchIndexController.php b/src/Controller/LunrSearchIndexController.php
index f4e4c9d..8e92f29 100644
--- a/src/Controller/LunrSearchIndexController.php
+++ b/src/Controller/LunrSearchIndexController.php
@@ -19,14 +19,14 @@ class LunrSearchIndexController extends ControllerBase {
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Constructs a LunrSearchIndexController object.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system.
    */
   public function __construct(FileSystemInterface $fileSystem) {
@@ -45,7 +45,7 @@ class LunrSearchIndexController extends ControllerBase {
   /**
    * Provides a page to trigger the indexing process.
    *
-   * @param \Drupal\lunr\LunrSearchInterface $lunr_search
+   * @param LunrSearchInterface $lunr_search
    *   The Lunr search entity.
    *
    * @return array
@@ -106,14 +106,14 @@ class LunrSearchIndexController extends ControllerBase {
   /**
    * Provides an upload route for index pages.
    *
-   * @param \Drupal\lunr\LunrSearchInterface $lunr_search
+   * @param LunrSearchInterface $lunr_search
    *   The Lunr search entity.
    * @param string $page
    *   The page number.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response.
    */
   public function uploadPage(LunrSearchInterface $lunr_search, $page, Request $request) {
@@ -127,12 +127,12 @@ class LunrSearchIndexController extends ControllerBase {
   /**
    * Provides an upload route for when the index is complete.
    *
-   * @param \Drupal\lunr\LunrSearchInterface $lunr_search
+   * @param LunrSearchInterface $lunr_search
    *   The Lunr search entity.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response.
    */
   public function upload(LunrSearchInterface $lunr_search, Request $request) {
diff --git a/src/Entity/LunrSearch.php b/src/Entity/LunrSearch.php
index 9859a14..92c8792 100644
--- a/src/Entity/LunrSearch.php
+++ b/src/Entity/LunrSearch.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lunr\Entity;
 
+use Drupal\views\ViewEntityInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Url;
@@ -214,7 +216,7 @@ class LunrSearch extends ConfigEntityBase implements LunrSearchInterface {
    * {@inheritdoc}
    */
   public function getView() {
-    /** @var \Drupal\views\ViewEntityInterface $view */
+    /** @var ViewEntityInterface $view */
     if ($this->getViewId() && $this->getViewDisplayId() && $view = $this->viewStorage()->load($this->getViewId())) {
       $executable = $view->getExecutable();
       if (!$executable->setDisplay($this->getViewDisplayId())) {
@@ -263,7 +265,7 @@ class LunrSearch extends ConfigEntityBase implements LunrSearchInterface {
   /**
    * Wraps the view storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The view storage.
    */
   protected function viewStorage() {
diff --git a/src/EventSubscriber/RouteSubscriber.php b/src/EventSubscriber/RouteSubscriber.php
index af7660d..82944b0 100644
--- a/src/EventSubscriber/RouteSubscriber.php
+++ b/src/EventSubscriber/RouteSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lunr\EventSubscriber;
 
+use Drupal\lunr\LunrSearchInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteBuildEvent;
 use Drupal\Core\Routing\RoutingEvents;
@@ -16,14 +17,14 @@ class RouteSubscriber implements EventSubscriberInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * RouteSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -33,7 +34,7 @@ class RouteSubscriber implements EventSubscriberInterface {
   /**
    * Provides routes for Lunr searches.
    *
-   * @param \Drupal\Core\Routing\RouteBuildEvent $event
+   * @param RouteBuildEvent $event
    *   The route build event.
    */
   public function onDynamicRoutes(RouteBuildEvent $event) {
@@ -46,7 +47,7 @@ class RouteSubscriber implements EventSubscriberInterface {
       '_permission' => 'access content',
       '_custom_access' => 'Drupal\lunr\Controller\LunrSearchController::access',
     ];
-    /** @var \Drupal\lunr\LunrSearchInterface $lunr_search */
+    /** @var LunrSearchInterface $lunr_search */
     foreach ($this->entityTypeManager->getStorage('lunr_search')->loadMultiple() as $lunr_search) {
       $collection->add('lunr_search.' . $lunr_search->id(), new Route($lunr_search->getPath(), [
         'lunr_search' => $lunr_search->id(),
diff --git a/src/EventSubscriber/TomePathSubscriber.php b/src/EventSubscriber/TomePathSubscriber.php
index 7f84d5a..c283d4a 100644
--- a/src/EventSubscriber/TomePathSubscriber.php
+++ b/src/EventSubscriber/TomePathSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lunr\EventSubscriber;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\lunr\LunrSearchInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\tome_static\Event\CollectPathsEvent;
@@ -16,23 +18,23 @@ class TomePathSubscriber implements EventSubscriberInterface {
   /**
    * The Lunr search entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $lunrSearchStorage;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Constructs the EntityPathSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system) {
@@ -47,7 +49,7 @@ class TomePathSubscriber implements EventSubscriberInterface {
    *   The collect paths event.
    */
   public function collectPaths(CollectPathsEvent $event) {
-    /** @var \Drupal\lunr\LunrSearchInterface $search */
+    /** @var LunrSearchInterface $search */
     foreach ($this->lunrSearchStorage->loadMultiple() as $search) {
       $directory = dirname($search->getBaseIndexPath());
       if (!file_exists($directory)) {
@@ -57,8 +59,8 @@ class TomePathSubscriber implements EventSubscriberInterface {
         $event->addPath(file_create_url($filename), ['language_processed' => 'language_processed']);
       }
     }
-    $event->addPath(drupal_get_path('module', 'lunr') . '/js/search.worker.js', ['language_processed' => 'language_processed']);
-    $event->addPath(drupal_get_path('module', 'lunr') . '/js/vendor/lunr/lunr.min.js', ['language_processed' => 'language_processed']);
+    $event->addPath(\Drupal::service('extension.list.module')->getPath('lunr') . '/js/search.worker.js', ['language_processed' => 'language_processed']);
+    $event->addPath(\Drupal::service('extension.list.module')->getPath('lunr') . '/js/vendor/lunr/lunr.min.js', ['language_processed' => 'language_processed']);
   }
 
   /**
diff --git a/src/Form/LunrSearchEditForm.php b/src/Form/LunrSearchEditForm.php
index e0aea87..5071c2e 100644
--- a/src/Form/LunrSearchEditForm.php
+++ b/src/Form/LunrSearchEditForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lunr\Form;
 
+use Drupal\lunr\LunrSearchInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -19,30 +20,30 @@ class LunrSearchEditForm extends EntityForm {
   /**
    * The Lunr search being edited/created.
    *
-   * @var \Drupal\lunr\LunrSearchInterface
+   * @var LunrSearchInterface
    */
   protected $entity;
 
   /**
    * The route builder.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;
 
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * LunrSearchEditForm constructor.
    *
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route builder.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator.
    */
   public function __construct(RouteBuilderInterface $route_builder, PathValidatorInterface $path_validator) {
diff --git a/src/LunrSearchInterface.php b/src/LunrSearchInterface.php
index 4cb325a..47df002 100644
--- a/src/LunrSearchInterface.php
+++ b/src/LunrSearchInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lunr;
 
+use Drupal\views\ViewExecutable;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -60,7 +61,7 @@ interface LunrSearchInterface extends ConfigEntityInterface {
   /**
    * Gets the view used by this search, using the correct display.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The view.
    */
   public function getView();
diff --git a/src/LunrSearchListBuilder.php b/src/LunrSearchListBuilder.php
index 0c4da26..c8ea204 100644
--- a/src/LunrSearchListBuilder.php
+++ b/src/LunrSearchListBuilder.php
@@ -21,14 +21,14 @@ class LunrSearchListBuilder extends ConfigEntityListBuilder {
   /**
    * The view entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $viewStorage;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -47,13 +47,13 @@ class LunrSearchListBuilder extends ConfigEntityListBuilder {
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $view_storage
+   * @param EntityStorageInterface $view_storage
    *   The view entity storage.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, EntityStorageInterface $view_storage, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Block/LunrSearchBlock.php b/src/Plugin/Block/LunrSearchBlock.php
index 562183b..22ceff7 100644
--- a/src/Plugin/Block/LunrSearchBlock.php
+++ b/src/Plugin/Block/LunrSearchBlock.php
@@ -27,7 +27,7 @@ class LunrSearchBlock extends BlockBase implements ContainerFactoryPluginInterfa
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -40,7 +40,7 @@ class LunrSearchBlock extends BlockBase implements ContainerFactoryPluginInterfa
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/views/display/LunrSearchIndex.php b/src/Plugin/views/display/LunrSearchIndex.php
index 82bc012..61f4833 100644
--- a/src/Plugin/views/display/LunrSearchIndex.php
+++ b/src/Plugin/views/display/LunrSearchIndex.php
@@ -60,7 +60,7 @@ class LunrSearchIndex extends PathPluginBase implements ResponseDisplayPluginInt
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -73,11 +73,11 @@ class LunrSearchIndex extends PathPluginBase implements ResponseDisplayPluginInt
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteProviderInterface $route_provider, StateInterface $state, RendererInterface $renderer) {
@@ -211,7 +211,7 @@ class LunrSearchIndex extends PathPluginBase implements ResponseDisplayPluginInt
     $response = new CacheableResponse('', 200);
     $build['#response'] = $response;
 
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
 
     $output = (string) $renderer->renderRoot($build);
diff --git a/src/Plugin/views/style/LunrSearchIndexJson.php b/src/Plugin/views/style/LunrSearchIndexJson.php
index b925a0d..41d44c2 100644
--- a/src/Plugin/views/style/LunrSearchIndexJson.php
+++ b/src/Plugin/views/style/LunrSearchIndexJson.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lunr\Plugin\views\style;
 
+use Symfony\Component\Serializer\Serializer;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\views\Plugin\views\style\StylePluginBase;
@@ -37,7 +38,7 @@ class LunrSearchIndexJson extends StylePluginBase implements CacheableDependency
   /**
    * The serializer which serializes the views result.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
diff --git a/tests/src/FunctionalJavascript/LunrSearchTest.php b/tests/src/FunctionalJavascript/LunrSearchTest.php
index 23c1320..be908cf 100644
--- a/tests/src/FunctionalJavascript/LunrSearchTest.php
+++ b/tests/src/FunctionalJavascript/LunrSearchTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lunr\FunctionalJavascript;
 
+use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ -33,7 +34,7 @@ class LunrSearchTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $user = $this->drupalCreateUser(['administer lunr search']);
     $this->drupalLogin($user);
@@ -46,7 +47,7 @@ class LunrSearchTest extends WebDriverTestBase {
       'fr' => 'french',
     ])->save();
 
-    /** @var \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager */
+    /** @var ContentTranslationManagerInterface $content_translation_manager */
     $content_translation_manager = $this->container->get('content_translation.manager');
     $content_translation_manager->setEnabled('node', 'article', TRUE);
     drupal_flush_all_caches();
