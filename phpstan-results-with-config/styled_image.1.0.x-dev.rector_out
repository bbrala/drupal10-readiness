modules/contrib/styled_image/src/Plugin/Field/FieldFormatter/StyledImageFormatter.php
modules/contrib/styled_image/src/Plugin/Field/FieldType/StyledImageItem.php
modules/contrib/styled_image/src/Plugin/Field/FieldWidget/StyledImageWidget.php
modules/contrib/styled_image/styled_image.module

3 files with changes
====================

1) modules/contrib/styled_image/styled_image.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
  *
  * Transforms default image of image field from array into single value at save.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function styled_image_entity_presave(EntityInterface $entity) {
   // Get the default image settings, return if not saving an image field storage
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_update() for 'field_storage_config'.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function styled_image_field_storage_config_update(FieldStorageConfigInterface $field_storage) {
   if ($field_storage->getType() != 'styled_image') {
@@ @@
   $uuid_new = $field_storage->getSetting('default_image')['uuid'];
   $uuid_old = $prior_field_storage->getSetting('default_image')['uuid'];

-  /** @var \Drupal\file\FileInterface $file_new */
+  /** @var FileInterface $file_new */
   $file_new = $uuid_new ? $file = \Drupal::service('entity.repository')->loadEntityByUuid('file', $uuid_new) : FALSE;

   if ($uuid_new !== $uuid_old) {
@@ @@
     }

     // Is there an old file?
-    /** @var \Drupal\file\FileInterface $file_old */
+    /** @var FileInterface $file_old */
     if ($uuid_old && ($file_old = \Drupal::service('entity.repository')->loadEntityByUuid('file', $uuid_old))) {
       \Drupal::service('file.usage')->delete($file_old, 'styled_image', 'default_image', $field_storage->uuid());
     }
@@ @@
   if ($file_new && (StreamWrapperManager::getScheme(($file_new->getFileUri())) !== $field_storage->getSetting('uri_scheme'))) {
     $directory = $field_storage->getSetting('uri_scheme') . '://default_images/';
     \Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
-    file_move($file_new, $directory . $file_new->filename);
+    \Drupal::service('file.repository')->move($file_new, $directory . $file_new->filename);
   }
 }

@@ @@
 /**
  * Implements hook_ENTITY_TYPE_update() for 'field_config'.
  *
- * @param \Drupal\Core\Field\FieldConfigInterface $field
+ * @param FieldConfigInterface $field
  *   The field config interface.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function styled_image_field_config_update(FieldConfigInterface $field) {
   $field_storage = $field->getFieldStorageDefinition();
@@ @@
   $uuid_old = $prior_instance->getSetting('default_image')['uuid'];

   // If the old and new files do not match, update the default accordingly.
-  /** @var \Drupal\file\FileInterface $file_new */
+  /** @var FileInterface $file_new */
   $file_new = $uuid_new ? \Drupal::service('entity.repository')->loadEntityByUuid('file', $uuid_new) : FALSE;
   if ($uuid_new != $uuid_old) {
     // Save the new file, if present.
@@ @@
       \Drupal::service('file.usage')->add($file_new, 'styled_image', 'default_image', $field->uuid());
     }
     // Delete the old file, if present.
-    /** @var \Drupal\file\FileInterface $file_old */
+    /** @var FileInterface $file_old */
     if ($uuid_old && ($file_old = \Drupal::service('entity.repository')->loadEntityByUuid('file', $uuid_old))) {
       \Drupal::service('file.usage')->delete($file_old, 'styled_image', 'default_image', $field->uuid());
     }
@@ @@
   if ($file_new && (StreamWrapperManager::getScheme($file_new->getFileUri()) !== $field_storage->getSetting('uri_scheme'))) {
     $directory = $field_storage->getSetting('uri_scheme') . '://default_images/';
     \Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
-    file_move($file_new, $directory . $file_new->filename);
+    \Drupal::service('file.repository')->move($file_new, $directory . $file_new->filename);
   }
 }

@@ @@
 /**
  * Implements hook_ENTITY_TYPE_delete() for 'field_storage_config'.
  *
- * @param \Drupal\field\FieldStorageConfigInterface $field
+ * @param FieldStorageConfigInterface $field
  *   The field config storage interface.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function styled_image_field_storage_config_delete(FieldStorageConfigInterface $field) {
   if ($field->getType() !== 'styled_image') {
@@ @@
   $uuid = $field->getSetting('default_image')['uuid'];

   // Remove the default image when the instance is deleted.
-  /** @var \Drupal\file\FileInterface $file */
+  /** @var FileInterface $file */
   if ($uuid && ($file = \Drupal::service('entity.repository')->loadEntityByUuid('file', $uuid))) {
     \Drupal::service('file.usage')->delete($file, 'styled_image', 'default_image', $field->uuid());
   }
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ArgumentRemoverRector


2) modules/contrib/styled_image/src/Plugin/Field/FieldType/StyledImageItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\styled_image\Plugin\Field\FieldType;

+use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\image\Plugin\Field\FieldType\ImageItem;
@@ @@
 class StyledImageItem extends ImageItem {

   /**
-   * @return \Drupal\Core\TypedData\ComplexDataDefinitionInterface
+   * @return ComplexDataDefinitionInterface
    */
   public static function propertyDefinitions(FieldStorageDefinitionInterface $field_definition) {
     $properties = parent::propertyDefinitions($field_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/styled_image/src/Plugin/Field/FieldFormatter/StyledImageFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\styled_image\Plugin\Field\FieldFormatter;

+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Builds a renderable array for a field value.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field values to be rendered.
    * @param string $langcode
    *   The language that should be used to render the field.
@@ @@
    *   A renderable array for $items, as an array of child elements keyed by
    *   consecutive numeric indexes starting from 0.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = array();
@@ @@
         // context to ensure different file URLs are generated for different
         // sites in a multisite setup, including HTTP and HTTPS versions of the
         // same site. Fix in https://www.drupal.org/node/2646744.
-        $url = Url::fromUri(file_create_url($image_uri));
+        $url = \Drupal::service('file_url_generator')->generate($image_uri);
         $cache_contexts[] = 'url.site';
       }
       $cache_tags = Cache::mergeTags($base_cache_tags, $file->getCacheTags());
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

