diff --git a/menu_per_role.install b/menu_per_role.install
index 2cb390c..ceb50a3 100644
--- a/menu_per_role.install
+++ b/menu_per_role.install
@@ -17,7 +17,7 @@ function menu_per_role_update_8101() : void {
   $admin_see_all = !is_null($config->get('admin_see_all')) ? $config->get('admin_see_all') : FALSE;
 
   if ($admin_see_all) {
-    /** @var \Drupal\user\Entity\Role[] $roles */
+    /** @var Role[] $roles */
     $roles = Role::loadMultiple();
     foreach ($roles as $role) {
       if ($role->hasPermission('administer menu_per_role')) {
@@ -42,7 +42,7 @@ function menu_per_role_update_8102() : void {
  * Have distinct permissions for front and admin access bypass.
  */
 function menu_per_role_update_8103() : void {
-  /** @var \Drupal\user\Entity\Role[] $roles */
+  /** @var Role[] $roles */
   $roles = Role::loadMultiple();
   foreach ($roles as $role) {
     if ($role->hasPermission('bypass menu_per_role access')) {
diff --git a/menu_per_role.module b/menu_per_role.module
index 30c456d..3690665 100644
--- a/menu_per_role.module
+++ b/menu_per_role.module
@@ -6,6 +6,8 @@
  */
 
 declare(strict_types=1);
+use Drupal\menu_link_content\Form\MenuLinkContentForm;
+use Drupal\menu_link_content\MenuLinkContentInterface;
 
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -86,9 +88,9 @@ function menu_per_role_form_menu_link_content_form_alter(array &$form, FormState
   // Check if content mode setting applies, and if fields should be hidden.
   $is_content = FALSE;
   if ($hide_on_content_mode != MenuPerRoleAdminSettings::MODE_DISPLAY_ON_CONTENT_ALWAYS) {
-    /** @var \Drupal\menu_link_content\Form\MenuLinkContentForm $form_obj */
+    /** @var MenuLinkContentForm $form_obj */
     $form_obj = $form_state->getFormObject();
-    /** @var \Drupal\menu_link_content\MenuLinkContentInterface $menu_link */
+    /** @var MenuLinkContentInterface $menu_link */
     $menu_link = $form_obj->getEntity();
     if (!$menu_link->isNew()) {
       $link_url = $menu_link->getUrlObject();
diff --git a/src/Cache/Context/RouteIsAdminCacheContext.php b/src/Cache/Context/RouteIsAdminCacheContext.php
index 5282792..4a3179d 100644
--- a/src/Cache/Context/RouteIsAdminCacheContext.php
+++ b/src/Cache/Context/RouteIsAdminCacheContext.php
@@ -23,14 +23,14 @@ class RouteIsAdminCacheContext implements CacheContextInterface {
   /**
    * The router admin context service.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;
 
   /**
    * RouteIsAdminCacheContext constructor.
    *
-   * @param \Drupal\Core\Routing\AdminContext $adminContext
+   * @param AdminContext $adminContext
    *   The router admin context service.
    */
   public function __construct(
diff --git a/src/Form/MenuPerRoleAdminSettings.php b/src/Form/MenuPerRoleAdminSettings.php
index 4d953a8..2b976b5 100644
--- a/src/Form/MenuPerRoleAdminSettings.php
+++ b/src/Form/MenuPerRoleAdminSettings.php
@@ -49,16 +49,16 @@ class MenuPerRoleAdminSettings extends ConfigFormBase implements ContainerInject
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/MenuPerRoleLinkTreeManipulator.php b/src/MenuPerRoleLinkTreeManipulator.php
index 720a209..a99ec2f 100644
--- a/src/MenuPerRoleLinkTreeManipulator.php
+++ b/src/MenuPerRoleLinkTreeManipulator.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\menu_per_role;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\user\RoleStorageInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Menu\DefaultMenuLinkTreeManipulators;
@@ -19,14 +22,14 @@ class MenuPerRoleLinkTreeManipulator extends DefaultMenuLinkTreeManipulators {
   /**
    * The router admin context service.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;
 
   /**
    * The config service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
@@ -40,7 +43,7 @@ class MenuPerRoleLinkTreeManipulator extends DefaultMenuLinkTreeManipulators {
   /**
    * Sets the admin context.
    *
-   * @param \Drupal\Core\Routing\AdminContext $adminContext
+   * @param AdminContext $adminContext
    *   The router admin context service.
    */
   public function setAdminContext(AdminContext $adminContext): void {
@@ -50,7 +53,7 @@ class MenuPerRoleLinkTreeManipulator extends DefaultMenuLinkTreeManipulators {
   /**
    * Sets the config service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config service.
    */
   public function setConfigFactory(ConfigFactoryInterface $config): void {
@@ -108,8 +111,8 @@ class MenuPerRoleLinkTreeManipulator extends DefaultMenuLinkTreeManipulators {
   /**
    * Check if the user can bypass the access check.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @return bool
    *   TRUE if the Menu Per Role access check should be bypassed.
@@ -147,8 +150,8 @@ class MenuPerRoleLinkTreeManipulator extends DefaultMenuLinkTreeManipulators {
   /**
    * Check if the current user is admin. Either due to uid 1 or admin roles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @return bool
    *   TRUE if the user admin. FALSE otherwise.
@@ -160,7 +163,7 @@ class MenuPerRoleLinkTreeManipulator extends DefaultMenuLinkTreeManipulators {
 
     // Get admin roles only one time.
     if (!$this->adminRoles) {
-      /** @var \Drupal\user\RoleStorageInterface $role_storage */
+      /** @var RoleStorageInterface $role_storage */
       $role_storage = $this->entityTypeManager->getStorage('user_role');
       /** @var string[] $admin_roles */
       $admin_roles = $role_storage->getQuery()
diff --git a/tests/src/Functional/MenuPerRoleAccessTest.php b/tests/src/Functional/MenuPerRoleAccessTest.php
index b485e0f..1f13c09 100644
--- a/tests/src/Functional/MenuPerRoleAccessTest.php
+++ b/tests/src/Functional/MenuPerRoleAccessTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\menu_per_role\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Session\AccountInterface;
 
 /**
@@ -16,35 +19,35 @@ class MenuPerRoleAccessTest extends MenuPerRoleFunctionalTestBase {
   /**
    * User 1.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;
 
   /**
    * User 2.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user2;
 
   /**
    * User 3.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user3;
 
   /**
    * User 4.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user4;
 
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;
 
@@ -155,7 +158,7 @@ class MenuPerRoleAccessTest extends MenuPerRoleFunctionalTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ -194,8 +197,9 @@ class MenuPerRoleAccessTest extends MenuPerRoleFunctionalTestBase {
   /**
    * Check if users have access to menu links.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws EntityStorageException
+   * @throws ExpectationException
+   * @doesNotPerformAssertions
    */
   public function testRoleAccess(): void {
     // Test "Show roles" by role.
@@ -435,8 +439,9 @@ class MenuPerRoleAccessTest extends MenuPerRoleFunctionalTestBase {
   /**
    * Check the admin bypass feature in front.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws EntityStorageException
+   * @throws ExpectationException
+   * @doesNotPerformAssertions
    */
   public function testAdminBypass(): void {
     // No bypass.
@@ -510,7 +515,7 @@ class MenuPerRoleAccessTest extends MenuPerRoleFunctionalTestBase {
    * @param array $expectationsPerUser
    *   The list of expectations for this menu link. Keyed by user property.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function prepareMenuLinkAndExpectations(string $menuLinkTitle, array $showMenuRoles, array $hideMenuRoles, array $expectationsPerUser): void {
     $this->createOrUpdateMenuLink($menuLinkTitle, $showMenuRoles, $hideMenuRoles);
@@ -523,7 +528,7 @@ class MenuPerRoleAccessTest extends MenuPerRoleFunctionalTestBase {
   /**
    * Test if the users can see the expected links.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   protected function linksAccessTest(): void {
     foreach ($this->expectations as $userProperty => $expectations) {
diff --git a/tests/src/Functional/MenuPerRoleAdminAccessTest.php b/tests/src/Functional/MenuPerRoleAdminAccessTest.php
index f0fc7a1..5ea9149 100644
--- a/tests/src/Functional/MenuPerRoleAdminAccessTest.php
+++ b/tests/src/Functional/MenuPerRoleAdminAccessTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\menu_per_role\Functional;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Session\AccountInterface;
 
 /**
@@ -43,8 +45,9 @@ class MenuPerRoleAdminAccessTest extends MenuPerRoleAccessTest {
   /**
    * Check if users have access to menu links.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws EntityStorageException
+   * @throws ExpectationException
+   * @doesNotPerformAssertions
    */
   public function testRoleAccess(): void {
     // Test "Show roles" by role.
diff --git a/tests/src/Functional/MenuPerRoleFunctionalTestBase.php b/tests/src/Functional/MenuPerRoleFunctionalTestBase.php
index 121ac6a..cd6efc3 100644
--- a/tests/src/Functional/MenuPerRoleFunctionalTestBase.php
+++ b/tests/src/Functional/MenuPerRoleFunctionalTestBase.php
@@ -4,6 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\menu_per_role\Functional;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\menu_link_content\MenuLinkContentInterface;
 use Drupal\system\Entity\Menu;
 use Drupal\Tests\BrowserTestBase;
 
@@ -32,21 +36,21 @@ abstract class MenuPerRoleFunctionalTestBase extends BrowserTestBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ -64,7 +68,7 @@ abstract class MenuPerRoleFunctionalTestBase extends BrowserTestBase {
    * @param string $menuId
    *   The menu machine name.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createMenu(string $menuId): void {
     $menu = Menu::create([
@@ -84,12 +88,12 @@ abstract class MenuPerRoleFunctionalTestBase extends BrowserTestBase {
    * @param array $hideMenuRoles
    *   The roles which can't see menu link.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createOrUpdateMenuLink(string $menuLinkTitle, array $showMenuRoles, array $hideMenuRoles): void {
     $menu_link_storage = $this->entityTypeManager->getStorage('menu_link_content');
 
-    /** @var \Drupal\menu_link_content\MenuLinkContentInterface[] $existing_menu_links */
+    /** @var MenuLinkContentInterface[] $existing_menu_links */
     $existing_menu_links = $menu_link_storage->loadByProperties(['title' => $menuLinkTitle]);
 
     if (empty($existing_menu_links)) {
