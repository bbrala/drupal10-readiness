modules/contrib/static_suite/modules/static_build/modules/static_builder_codebuild/src/Form/SettingsForm.php
modules/contrib/static_suite/modules/static_build/modules/static_builder_codebuild/src/Plugin/static_build/StaticBuilder/CodeBuildStaticBuilder.php
modules/contrib/static_suite/modules/static_build/modules/static_builder_gatsby/src/Form/SettingsForm.php
modules/contrib/static_suite/modules/static_build/modules/static_builder_gatsby/src/Plugin/static_build/StaticBuilder/GatsbyStaticBuilder.php
modules/contrib/static_suite/modules/static_build/modules/static_builder_gatsby/static_builder_gatsby.module
modules/contrib/static_suite/modules/static_build/modules/static_builder_hugo/src/Form/SettingsForm.php
modules/contrib/static_suite/modules/static_build/modules/static_builder_hugo/src/Plugin/static_build/StaticBuilder/HugoStaticBuilder.php
modules/contrib/static_suite/modules/static_build/modules/static_builder_hugo/static_builder_hugo.module
modules/contrib/static_suite/modules/static_build/src/Annotation/StaticBuilder.php
modules/contrib/static_suite/modules/static_build/src/Commands/StaticBuildCommands.php
modules/contrib/static_suite/modules/static_build/src/Config/ConfigOverrider.php
modules/contrib/static_suite/modules/static_build/src/Controller/BuilderController.php
modules/contrib/static_suite/modules/static_build/src/Controller/LogViewerController.php
modules/contrib/static_suite/modules/static_build/src/Controller/ReleaseController.php
modules/contrib/static_suite/modules/static_build/src/Event/StaticBuildEvent.php
modules/contrib/static_suite/modules/static_build/src/Event/StaticBuildEvents.php
modules/contrib/static_suite/modules/static_build/src/EventSubscriber/EventSubscriber.php
modules/contrib/static_suite/modules/static_build/src/Form/SettingsForm.php
modules/contrib/static_suite/modules/static_build/src/Plugin/Derivative/ReleasesListTasks.php
modules/contrib/static_suite/modules/static_build/src/Plugin/StaticBuilderHelper.php
modules/contrib/static_suite/modules/static_build/src/Plugin/StaticBuilderHelperInterface.php
modules/contrib/static_suite/modules/static_build/src/Plugin/StaticBuilderPluginBase.php
modules/contrib/static_suite/modules/static_build/src/Plugin/StaticBuilderPluginInterface.php
modules/contrib/static_suite/modules/static_build/src/Plugin/StaticBuilderPluginManager.php
modules/contrib/static_suite/modules/static_build/src/Plugin/StaticBuilderPluginManagerInterface.php
modules/contrib/static_suite/modules/static_build/src/Release/Release.php
modules/contrib/static_suite/modules/static_build/src/Release/ReleaseFactory.php
modules/contrib/static_suite/modules/static_build/src/Release/ReleaseFactoryInterface.php
modules/contrib/static_suite/modules/static_build/src/Release/ReleaseInterface.php
modules/contrib/static_suite/modules/static_build/src/Release/ReleaseManager.php
modules/contrib/static_suite/modules/static_build/src/Release/ReleaseManagerInterface.php
modules/contrib/static_suite/modules/static_build/src/Release/Task/Task.php
modules/contrib/static_suite/modules/static_build/src/Release/Task/TaskFactory.php
modules/contrib/static_suite/modules/static_build/src/Release/Task/TaskFactoryInterface.php
modules/contrib/static_suite/modules/static_build/src/Release/Task/TaskInterface.php
modules/contrib/static_suite/modules/static_build/src/Release/Task/TaskSupervisor.php
modules/contrib/static_suite/modules/static_build/src/Release/Task/TaskSupervisorInterface.php
modules/contrib/static_suite/modules/static_build/src/Routing/RouteSubscriber.php
modules/contrib/static_suite/modules/static_build/static_build.install
modules/contrib/static_suite/modules/static_build/static_build.module
modules/contrib/static_suite/modules/static_deploy/modules/static_deployer_azureblob/src/Form/SettingsForm.php
modules/contrib/static_suite/modules/static_deploy/modules/static_deployer_azureblob/src/Plugin/static_deploy/StaticDeployer/StaticDeployerAzureBlob.php
modules/contrib/static_suite/modules/static_deploy/modules/static_deployer_s3/src/Form/SettingsForm.php
modules/contrib/static_suite/modules/static_deploy/modules/static_deployer_s3/src/Plugin/static_deploy/StaticDeployer/StaticDeployerS3.php
modules/contrib/static_suite/modules/static_deploy/modules/static_deployer_s3/static_deployer_s3.install
modules/contrib/static_suite/modules/static_deploy/modules/static_deployer_s3/static_deployer_s3.module
modules/contrib/static_suite/modules/static_deploy/src/Annotation/StaticDeployer.php
modules/contrib/static_suite/modules/static_deploy/src/Commands/StaticDeployCommands.php
modules/contrib/static_suite/modules/static_deploy/src/Controller/DeployerController.php
modules/contrib/static_suite/modules/static_deploy/src/Controller/LogViewerController.php
modules/contrib/static_suite/modules/static_deploy/src/Controller/ReleaseController.php
modules/contrib/static_suite/modules/static_deploy/src/Event/StaticDeployEvent.php
modules/contrib/static_suite/modules/static_deploy/src/Event/StaticDeployEvents.php
modules/contrib/static_suite/modules/static_deploy/src/EventSubscriber/EventSubscriber.php
modules/contrib/static_suite/modules/static_deploy/src/Form/SettingsForm.php
modules/contrib/static_suite/modules/static_deploy/src/Plugin/Derivative/ReleasesListMenu.php
modules/contrib/static_suite/modules/static_deploy/src/Plugin/Derivative/ReleasesListTasks.php
modules/contrib/static_suite/modules/static_deploy/src/Plugin/StaticDeployerHelper.php
modules/contrib/static_suite/modules/static_deploy/src/Plugin/StaticDeployerHelperInterface.php
modules/contrib/static_suite/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php
modules/contrib/static_suite/modules/static_deploy/src/Plugin/StaticDeployerPluginInterface.php
modules/contrib/static_suite/modules/static_deploy/src/Plugin/StaticDeployerPluginManager.php
modules/contrib/static_suite/modules/static_deploy/src/Plugin/StaticDeployerPluginManagerInterface.php
modules/contrib/static_suite/modules/static_deploy/src/Routing/RouteSubscriber.php
modules/contrib/static_suite/modules/static_deploy/static_deploy.module
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/Config/ConfigOverrider.php
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/EventSubscriber/ExportableEntityListEventSubscriber.php
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/Form/SettingsForm.php
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/GraphqlQueryHandler.php
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/GraphqlQueryHandlerInterface.php
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/Plugin/GraphQL/Fields/Entity/ConfigInclude.php
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/Plugin/GraphQL/Fields/Entity/CustomInclude.php
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/Plugin/GraphQL/Fields/Entity/EntityInclude.php
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/Plugin/GraphQL/Fields/Entity/LocaleInclude.php
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/Plugin/static_export/Data/IncludeLoader/JsonGraphqlDataIncludeLoader.php
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/Plugin/static_export/Data/IncludeLoader/XmlGraphqlDataIncludeLoader.php
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/Plugin/static_export/Data/Resolver/GraphqlDataResolver.php
modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/static_export_graphql_data_resolver.module
modules/contrib/static_suite/modules/static_export/modules/static_export_jsonapi_data_resolver/src/Form/SettingsForm.php
modules/contrib/static_suite/modules/static_export/modules/static_export_jsonapi_data_resolver/src/JsonapiRequestHandler.php
modules/contrib/static_suite/modules/static_export/modules/static_export_jsonapi_data_resolver/src/JsonapiRequestHandlerInterface.php
modules/contrib/static_suite/modules/static_export/modules/static_export_jsonapi_data_resolver/src/Plugin/static_export/Data/Resolver/JsonapiDataResolver.php
modules/contrib/static_suite/modules/static_export/modules/static_export_jsonapi_data_resolver/static_export_jsonapi_data_resolver.module
modules/contrib/static_suite/modules/static_export/src/Annotation/StaticConfigExporter.php
modules/contrib/static_suite/modules/static_export/src/Annotation/StaticCustomExporter.php
modules/contrib/static_suite/modules/static_export/src/Annotation/StaticDataIncludeLoader.php
modules/contrib/static_suite/modules/static_export/src/Annotation/StaticDataResolver.php
modules/contrib/static_suite/modules/static_export/src/Annotation/StaticEntityExporter.php
modules/contrib/static_suite/modules/static_export/src/Annotation/StaticExporterAnnotationBase.php
modules/contrib/static_suite/modules/static_export/src/Annotation/StaticLocaleExporter.php
modules/contrib/static_suite/modules/static_export/src/Annotation/StaticOutputFormatter.php
modules/contrib/static_suite/modules/static_export/src/Annotation/StaticPagePathUriResolver.php
modules/contrib/static_suite/modules/static_export/src/Commands/ConfigCommands.php
modules/contrib/static_suite/modules/static_export/src/Commands/CopyDataCommands.php
modules/contrib/static_suite/modules/static_export/src/Commands/CustomCommands.php
modules/contrib/static_suite/modules/static_export/src/Commands/EntityCommands.php
modules/contrib/static_suite/modules/static_export/src/Commands/LocaleCommands.php
modules/contrib/static_suite/modules/static_export/src/Commands/StreamWrapperCommands.php
modules/contrib/static_suite/modules/static_export/src/Config/ConfigOverrider.php
modules/contrib/static_suite/modules/static_export/src/Controller/CustomExporterList.php
modules/contrib/static_suite/modules/static_export/src/Controller/DataResolversList.php
modules/contrib/static_suite/modules/static_export/src/Controller/ExportableConfigList.php
modules/contrib/static_suite/modules/static_export/src/Controller/ExportableEntityListBuilder.php
modules/contrib/static_suite/modules/static_export/src/Controller/ExportableLocaleList.php
modules/contrib/static_suite/modules/static_export/src/Controller/ExportedUriResolverController.php
modules/contrib/static_suite/modules/static_export/src/Controller/FileViewerController.php
modules/contrib/static_suite/modules/static_export/src/Controller/LogViewerController.php
modules/contrib/static_suite/modules/static_export/src/Controller/OutputFormattersList.php
modules/contrib/static_suite/modules/static_export/src/Entity/ExportableEntity.php
modules/contrib/static_suite/modules/static_export/src/Entity/ExportableEntityInterface.php
modules/contrib/static_suite/modules/static_export/src/Entity/ExportableEntityManager.php
modules/contrib/static_suite/modules/static_export/src/Entity/ExportableEntityManagerInterface.php
modules/contrib/static_suite/modules/static_export/src/Event/ExportableEntityListEvent.php
modules/contrib/static_suite/modules/static_export/src/Event/ExportableEntityListEvents.php
modules/contrib/static_suite/modules/static_export/src/Event/StaticExportEvent.php
modules/contrib/static_suite/modules/static_export/src/Event/StaticExportEvents.php
modules/contrib/static_suite/modules/static_export/src/EventSubscriber/ConfigEventSubscriber.php
modules/contrib/static_suite/modules/static_export/src/EventSubscriber/EntityReferenceEventSubscriber.php
modules/contrib/static_suite/modules/static_export/src/EventSubscriber/LanguageConfigEventSubscriber.php
modules/contrib/static_suite/modules/static_export/src/EventSubscriber/LocaleEventSubscriber.php
modules/contrib/static_suite/modules/static_export/src/Exporter/ConstrainedExporterPluginManagerBase.php
modules/contrib/static_suite/modules/static_export/src/Exporter/ConstrainedExporterPluginManagerInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoader.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginBase.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginManager.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginManagerInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginBase.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginManager.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginManagerInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/ExporterPluginBase.php
modules/contrib/static_suite/modules/static_export/src/Exporter/ExporterPluginInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/ExporterReporter.php
modules/contrib/static_suite/modules/static_export/src/Exporter/ExporterReporterInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/Definition/ExporterOutputConfigDefinition.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/Definition/ExporterOutputConfigDefinitionInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/Definition/Path/ExporterOutputConfigDefinitionPath.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/Definition/Path/ExporterOutputConfigDefinitionPathInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfig.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigFactory.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigFactoryInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginManager.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginManagerInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/ExporterUriResolverBase.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/ExporterUriResolverInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolver.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginManager.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginManagerInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Uri.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/UriFactory.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/UriFactoryInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/UriInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginBase.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginManager.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginManagerInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Config/Output/Uri/Resolver/ConfigExporterUriResolver.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Config/Output/Uri/Resolver/ConfigExporterUriResolverInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginBase.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginManager.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginManagerInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginBase.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginManager.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginManagerInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Entity/Output/Uri/Resolver/EntityExporterUriResolver.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Entity/Output/Uri/Resolver/EntityExporterUriResolverInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginBase.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginManager.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginManagerInterface.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Locale/Output/Uri/Resolver/LocaleExporterUriResolver.php
modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Locale/Output/Uri/Resolver/LocaleExporterUriResolverInterface.php
modules/contrib/static_suite/modules/static_export/src/File/FileCollection.php
modules/contrib/static_suite/modules/static_export/src/File/FileCollectionFormatter.php
modules/contrib/static_suite/modules/static_export/src/File/FileCollectionGroup.php
modules/contrib/static_suite/modules/static_export/src/File/FileCollectionWriter.php
modules/contrib/static_suite/modules/static_export/src/File/FileItem.php
modules/contrib/static_suite/modules/static_export/src/File/MimeType/ContentMimeTypeGuesser.php
modules/contrib/static_suite/modules/static_export/src/File/MimeType/MimeTypeGuesser.php
modules/contrib/static_suite/modules/static_export/src/File/MimeType/OutputFormatterMimeTypeGuesser.php
modules/contrib/static_suite/modules/static_export/src/Form/ConstrainedExporterSettingsFormBase.php
modules/contrib/static_suite/modules/static_export/src/Form/ExportableConfigAddForm.php
modules/contrib/static_suite/modules/static_export/src/Form/ExportableConfigDeleteForm.php
modules/contrib/static_suite/modules/static_export/src/Form/ExportableConfigSettingsForm.php
modules/contrib/static_suite/modules/static_export/src/Form/ExportableEntityDeleteForm.php
modules/contrib/static_suite/modules/static_export/src/Form/ExportableEntityDisableForm.php
modules/contrib/static_suite/modules/static_export/src/Form/ExportableEntityEnableForm.php
modules/contrib/static_suite/modules/static_export/src/Form/ExportableEntityForm.php
modules/contrib/static_suite/modules/static_export/src/Form/ExportableEntitySettingsForm.php
modules/contrib/static_suite/modules/static_export/src/Form/ExportableLocaleSettingsForm.php
modules/contrib/static_suite/modules/static_export/src/Form/SettingsForm.php
modules/contrib/static_suite/modules/static_export/src/Messenger/Messenger.php
modules/contrib/static_suite/modules/static_export/src/Messenger/MessengerInterface.php
modules/contrib/static_suite/modules/static_export/src/PathProcessor/PathProcessorFiles.php
modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Data/Resolver/JsonSerializerDataResolver.php
modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Exporter/Config/ConfigExporter.php
modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Exporter/Custom/LanguageConfigExporter.php
modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Exporter/Entity/EntityExporter.php
modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Exporter/Locale/LocaleExporter.php
modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Output/Formatter/JsonOutputFormatter.php
modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Output/Formatter/XmlOutputFormatter.php
modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Output/Formatter/YamlOutputFormatter.php
modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Output/Uri/Resolver/PagePath/CustomPagePathUriResolver.php
modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Output/Uri/Resolver/PagePath/EntityPagePathUriResolver.php
modules/contrib/static_suite/modules/static_export/src/StreamWrapper/StaticStream.php
modules/contrib/static_suite/modules/static_export/static_export.module
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/NodePreviewController.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/PageDataResolverController.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/PageHtmlCustomUrlResolverController.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/EventSubscriber.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/PreviewControllerWrapperSubscriber.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/Form/SettingsForm.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/GraphQL/Data/Resolver/GraphqlNodePreviewDataResolver.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/GraphQL/Data/Resolver/GraphqlNodePreviewDataResolverInterface.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/Mocker/GatsbyMocker.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/Mocker/GatsbyMockerInterface.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/PathProcessor/PageDataPathProcessor.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/PathProcessor/PageHtmlCustomUrlProcessor.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/Routing/RouteSubscriber.php
modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/static_preview_gatsby_instant.module
modules/contrib/static_suite/modules/static_preview/src/Event/StaticPreviewEvent.php
modules/contrib/static_suite/modules/static_preview/src/Event/StaticPreviewEvents.php
modules/contrib/static_suite/src/Entity/EntityReferenceFinder.php
modules/contrib/static_suite/src/Entity/EntityReferenceFinderInterface.php
modules/contrib/static_suite/src/Entity/EntityUtils.php
modules/contrib/static_suite/src/Entity/EntityUtilsInterface.php
modules/contrib/static_suite/src/Form/SettingsForm.php
modules/contrib/static_suite/src/Language/LanguageContext.php
modules/contrib/static_suite/src/Language/LanguageContextInterface.php
modules/contrib/static_suite/src/Language/LanguageNegotiator.php
modules/contrib/static_suite/src/Language/OverridableLanguageNegotiatorInterface.php
modules/contrib/static_suite/src/Lock/DatabaseLockBackend.php
modules/contrib/static_suite/src/Lock/LockBackendInterface.php
modules/contrib/static_suite/src/Plugin/CacheablePluginManager.php
modules/contrib/static_suite/src/ProxyClass/Lock/DatabaseLockBackend.php
modules/contrib/static_suite/src/Security/FilePathSanitizer.php
modules/contrib/static_suite/src/Security/FilePathSanitizerBase.php
modules/contrib/static_suite/src/Security/FilePathSanitizerInterface.php
modules/contrib/static_suite/src/Security/UriSanitizerBase.php
modules/contrib/static_suite/src/Security/UriSanitizerInterface.php
modules/contrib/static_suite/src/StaticSuiteException.php
modules/contrib/static_suite/src/StaticSuiteUserException.php
modules/contrib/static_suite/src/Utility/SignalHandler.php
modules/contrib/static_suite/src/Utility/StaticSuiteUtils.php
modules/contrib/static_suite/src/Utility/StaticSuiteUtilsInterface.php
modules/contrib/static_suite/src/Utility/UniqueIdHelper.php
modules/contrib/static_suite/src/Utility/UniqueIdHelperInterface.php
modules/contrib/static_suite/static_suite.module
modules/contrib/static_suite/tests/src/Unit/SignalHandlerTest.php

171 files with changes
======================

1) modules/contrib/static_suite/src/Utility/UniqueIdHelperInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_suite\Utility;

+use Drupal\static_suite\StaticSuiteException;
 use DateTime;

 /**
@@ @@
    * @return \DateTime
    *   A DateTime object.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function getDateFromUniqueId(string $uniqueId): DateTime;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/static_suite/src/Utility/UniqueIdHelper.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Static Export misc utilities.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * UniqueIdHelper constructor.
    *
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export misc utilities.
    */
   public function __construct(StaticSuiteUtilsInterface $static_suite_utils) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/static_suite/src/Security/UriSanitizerBase.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The transliteration service.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliteration;

@@ @@
   /**
    * UriSanitizerBase constructor.
    *
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliteration
+   * @param TransliterationInterface $transliteration
    *   The transliteration service.
    */
   public function __construct(TransliterationInterface $transliteration) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/static_suite/src/Plugin/CacheablePluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_suite\Plugin;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Plugin\DefaultPluginManager;

 /**
@@ @@
    *   - plugin_id: (string) The plugin id
    *   - configuration: (array) the configuration for the plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getInstance(array $options) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/static_suite/src/Language/LanguageContext.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Externally overridable language negotiator.
    *
-   * @var \Drupal\static_suite\Language\OverridableLanguageNegotiatorInterface
+   * @var OverridableLanguageNegotiatorInterface
    */
   protected $languageNegotiator;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * GraphQLLanguageContext constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
-   * @param \Drupal\static_suite\Language\OverridableLanguageNegotiatorInterface $languageNegotiator
+   * @param OverridableLanguageNegotiatorInterface $languageNegotiator
    *   Externally overridable language negotiator.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   Current user.
    */
   public function __construct(LanguageManagerInterface $languageManager, OverridableLanguageNegotiatorInterface $languageNegotiator, AccountProxyInterface $currentUser) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/static_suite/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_suite\Form;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/static_suite/src/Entity/EntityUtilsInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_suite\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EditorialContentEntityBase;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * @param string|null $langcode
    *   Optional language code of the entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Loaded entity.
    */
   public function loadEntity(string $entityTypeId, string $entityId, string $langcode = NULL): ?EntityInterface;
@@ @@
    * @return array
    *   Entity ids
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
    */
   public function getEntityIds(string $entityTypeId, $options = []): array;
@@ @@
   /**
    * Returns the languages the config entity is translated to.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $configEntity
+   * @param ConfigEntityInterface $configEntity
    *   The config entity.
    * @param bool $include_default
    *   (optional) Whether the default language should be included. Defaults to
    *   TRUE.
    *
-   * @return \Drupal\Core\Language\LanguageInterface[]
+   * @return LanguageInterface[]
    *   An associative array of language objects, keyed by language codes.
    */
   public function getConfigEntityTranslationLanguages(ConfigEntityInterface $configEntity, bool $include_default = TRUE): array;
@@ @@
   /**
    * Check if entity status has changed.
    *
-   * @param \Drupal\Core\Entity\EditorialContentEntityBase $entity
+   * @param EditorialContentEntityBase $entity
    *   The Entity to be checked.
    *
    * @return bool
@@ @@
    * LanguageInterface::LANGCODE_DEFAULT, etc). In such cases, we filter out
    * those languages and use the default one.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to get its language.
    *
    * @param bool $useLockedLanguages
@@ @@
    *   If true, and a locked language if found, it returns that language.
    *   If false, and a locked language if found, it returns the default one.
    *
-   * @return \Drupal\Core\Language\LanguageInterface
+   * @return LanguageInterface
    *   Normalized language
    */
   public function getNormalizedEntityLanguage(EntityInterface $entity, bool $useLockedLanguages = TRUE): LanguageInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/static_suite/src/Entity/EntityUtils.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * The locale config manager.
    *
-   * @var \Drupal\locale\LocaleConfigManager|object|null
+   * @var LocaleConfigManager|object|null
    */
   protected $localeConfigManager;

@@ @@
   /**
    * Constructs the entity utils.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
-   * @param \Drupal\path_alias\AliasManagerInterface $aliasManager
+   * @param AliasManagerInterface $aliasManager
    *   The alias manager.
-   * @param \Drupal\locale\LocaleConfigManager $localeConfigManager
+   * @param LocaleConfigManager $localeConfigManager
    *   The locale config manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager, AliasManagerInterface $aliasManager, LocaleConfigManager $localeConfigManager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function getConfigEntityTranslationLanguages(ConfigEntityInterface $configEntity, bool $include_default = TRUE): array {
     $translationLanguages = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/static_suite/src/Entity/EntityReferenceFinderInterface.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Find references to an entity in nodes or paragraphs.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to be found.
    * @param int $maxRecursionLevel
    *   Optional, defaults to 1. 0 for infinite recursion.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Empty array or ids of the related nodes.
    */
   public function findReferences(EntityInterface $entity, int $maxRecursionLevel = 1): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/static_suite/src/Entity/EntityReferenceFinder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_suite\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityFieldManager $entityFieldManager, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to search.
    * @param int $maxRecursionLevel
    *   Maximum level of recursion. Defaults to 1.
@@ @@
    *
    * @return array
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function findReferences(EntityInterface $entity, int $maxRecursionLevel = 1, int $currentRecursionLevel = 1, array $referencingEntities = []): array {
     // Find the entity id string inside "entity_reference" fields.
@@ @@
    * @param string $entityId
    *   Id of the entity to be searched.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entity_reference fields by entity type that contain the entity
    *   id string.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function findEntitiesContainingAnotherEntityIdInsideItsFields(string $entityId): array {
     $entitiesContainingEntityIdInsideItsFields = [];
@@ @@
    *
    * @param array $entitiesContainingEntityIdStringInsideItsFields
    *   Array of entities that contain the entity id inside its fields.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity we are searching for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entities referencing our entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntitiesPointingToAnotherEntity(array $entitiesContainingEntityIdStringInsideItsFields, EntityInterface $entity): array {
     $referencingEntities = [];
@@ @@
    * @param \Drupal\paragraphs\ParagraphInterface $paragraph
    *   Paragraph.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   Parent Entity.
    */
   protected function getParagraphParentEntity(ParagraphInterface $paragraph): ?ContentEntityInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/static_suite/modules/static_preview/src/Event/StaticPreviewEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_preview\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;


 /**
@@ @@
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * StaticPreviewEvent constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function __construct(EntityInterface $entity) {
@@ @@
   /**
    * Get the entity being previewed.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity(): EntityInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/PathProcessor/PageHtmlCustomUrlProcessor.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The URI resolver for page paths.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverInterface
+   * @var PagePathUriResolverInterface
    */
   protected $pagePathUriResolver;

@@ @@
    *
    * @param \Drupal\Core\Language\LanguageManagerInterface languageManager
    *   Language manager.
-   * @param \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverInterface $pagePathUriResolver
+   * @param PagePathUriResolverInterface $pagePathUriResolver
    *   The URI resolver for page paths.
    */
   public function __construct(LanguageManagerInterface $languageManager, PagePathUriResolverInterface $pagePathUriResolver) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/PathProcessor/PageDataPathProcessor.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/Mocker/GatsbyMocker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_preview_gatsby_instant\Mocker;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * Drupal config.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The URI resolver for page paths.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverInterface
+   * @var PagePathUriResolverInterface
    */
   protected $pagePathUriResolver;

@@ @@
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * Release manager.
    *
-   * @var \Drupal\static_build\Release\ReleaseManagerInterface
+   * @var ReleaseManagerInterface
    */
   protected $releaseManager;

@@ @@
   /**
    * The static builder helper.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderHelperInterface
+   * @var StaticBuilderHelperInterface
    */
   protected $staticBuilderHelper;

@@ @@
   /**
    * The data include loader.
    *
-   * @var \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderInterface
+   * @var DataIncludeLoaderInterface
    */
   protected $dataIncludeLoader;

@@ @@
   /**
    * The GraphQL preview data resolver.
    *
-   * @var \Drupal\static_preview_gatsby_instant\GraphQL\Data\Resolver\GraphqlNodePreviewDataResolverInterface
+   * @var GraphqlNodePreviewDataResolverInterface
    */
   protected $graphqlNodePreviewDataResolver;

@@ @@
   /**
    * GatsbyMocker service constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
-   * @param \Drupal\static_build\Plugin\StaticBuilderHelperInterface $staticBuilderHelper
+   * @param StaticBuilderHelperInterface $staticBuilderHelper
    *   The static builder helper.
-   * @param \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverInterface $pagePathUriResolver
+   * @param PagePathUriResolverInterface $pagePathUriResolver
    *   The URI resolver for page paths.
-   * @param \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderInterface $dataIncludeLoader
+   * @param DataIncludeLoaderInterface $dataIncludeLoader
    *   The data include loader.
-   * @param \Drupal\static_preview_gatsby_instant\GraphQL\Data\Resolver\GraphqlNodePreviewDataResolverInterface $graphqlNodePreviewDataResolver
+   * @param GraphqlNodePreviewDataResolverInterface $graphqlNodePreviewDataResolver
    *   The GraphQL preview data resolver.
    */
   public function __construct(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    * @throws \JsonException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function getMockedPageData(string $pagePath): ?array {
     // EntityExporterUriResolverInterface ($this->entityExporterUriResolver)
@@ @@
    * @return array|null
    *   The page data in array format.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    * @throws \JsonException
    */
   protected function getPreviewComponentPageData(): ?array {
@@ @@
    * @return string|null
    *   Component's html.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   protected function getPreviewComponentHtml(): ?string {
     $currentRelease = $this->releaseManager()->getCurrentRelease();
@@ @@
   /**
    * Get release manager from plugin.
    *
-   * @return \Drupal\static_build\Release\ReleaseManagerInterface
+   * @return ReleaseManagerInterface
    *   The plugin's release manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   protected function releaseManager(): ReleaseManagerInterface {
     if (!$this->releaseManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/GraphQL/Data/Resolver/GraphqlNodePreviewDataResolverInterface.php:15

    ---------- begin diff ----------
@@ @@
    * That query works only with nodes, hence this method allows only nodes
    * instead of entities.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node to get preview data for.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/GraphQL/Data/Resolver/GraphqlNodePreviewDataResolver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_preview_gatsby_instant\GraphQL\Data\Resolver;

+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\static_suite\StaticSuiteUserException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\node\NodeInterface;
 use Drupal\static_export_graphql_data_resolver\GraphqlQueryHandlerInterface;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;

@@ @@
   /**
    * Handler for querying GraphQL.
    *
-   * @var \Drupal\static_export_graphql_data_resolver\GraphqlQueryHandlerInterface
+   * @var GraphqlQueryHandlerInterface
    */
   protected $graphqlQueryHandler;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Entity utils service.
-   * @param \Drupal\static_export_graphql_data_resolver\GraphqlQueryHandlerInterface $graphqlQueryHandler
+   * @param GraphqlQueryHandlerInterface $graphqlQueryHandler
    *   Service for querying GraphQL.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityUtils $entityUtils, GraphqlQueryHandlerInterface $graphqlQueryHandler) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public function resolve(NodeInterface $node): array {
     $query = $this->graphqlQueryHandler->getQueryFileContents($node);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_preview_gatsby_instant\Form;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Release manager.
    *
-   * @var \Drupal\static_build\Release\ReleaseManagerInterface
+   * @var ReleaseManagerInterface
    */
   protected $releaseManager;

@@ @@
   /**
    * Static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static builder manager.
-   * @param \Drupal\static_build\Release\ReleaseManagerInterface $releaseManager
+   * @param ReleaseManagerInterface $releaseManager
    *   Release manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticBuilderPluginManagerInterface $staticBuilderPluginManager, ReleaseManagerInterface $releaseManager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $builder = $this->staticBuilderPluginManager->getInstance([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/PreviewControllerWrapperSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_preview_gatsby_instant\EventSubscriber;

+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Symfony\Component\HttpKernel\Event\ControllerEvent;
 use Drupal\Core\Controller\ControllerResolverInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The controller resolver.
    *
-   * @var \Drupal\Core\Controller\ControllerResolverInterface
+   * @var ControllerResolverInterface
    */
   protected $controllerResolver;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The exportable entity manager.
    *
-   * @var \Drupal\static_export\Entity\ExportableEntityManagerInterface
+   * @var ExportableEntityManagerInterface
    */
   protected $exportableEntityManager;

@@ @@
   /**
    * Gatsby mocker service.
    *
-   * @var \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker
+   * @var GatsbyMocker
    */
   protected $gatsbyMocker;

@@ @@
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * Constructs a new ControllerWrapperSubscriber instance.
    *
-   * @param \Drupal\Core\Controller\ControllerResolverInterface $controller_resolver
+   * @param ControllerResolverInterface $controller_resolver
    *   The controller resolver.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker $gatsbyMocker
+   * @param GatsbyMocker $gatsbyMocker
    *   Gatsby mocker service.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_export\Entity\ExportableEntityManagerInterface $exportableEntityManager
+   * @param ExportableEntityManagerInterface $exportableEntityManager
    *   The exportable entity manager.
    */
   public function __construct(
@@ @@
   /**
    * Wraps a controller execution in a preview handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterControllerEvent $event
+   * @param ControllerEvent $event
    *   The controller event.
    */
-  public function onController(FilterControllerEvent $event): void {
+  public function onController(ControllerEvent $event): void {
     $controller = $event->getController();

     // See \Symfony\Component\HttpKernel\HttpKernel::handleRaw().
@@ @@
    *   The controller to execute.
    * @param array $arguments
    *   The arguments to pass to the controller.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return mixed
@@ @@
                 $isStatifiedPage = $exportableEntity->getIsStatifiedPage();
                 // Check if this exportable entity can be previewed.
                 $event = new StaticPreviewEvent($argument);
-                $this->eventDispatcher->dispatch(StaticPreviewEvents::PRE_RENDER, $event);
+                $this->eventDispatcher->dispatch($event, StaticPreviewEvents::PRE_RENDER);
                 $isPreviewable = $event->isPreviewable();
               }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/EventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_preview_gatsby_instant\EventSubscriber;

+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\static_build\Plugin\StaticBuilderPluginInterface;
 use Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Static Builder Manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;

@@ @@
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder Manager.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Utils for working with entities.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticBuilderPluginManagerInterface $staticBuilderPluginManager, EntityUtils $entityUtils, StaticSuiteUtilsInterface $static_suite_utils) {
@@ @@
   /**
    * Reacts to a StaticExportEvents::CHECK_PARAMS_ENDS event.
    *
-   * @param \Drupal\static_export\Event\StaticExportEvent $event
+   * @param StaticExportEvent $event
    *   The Static Export event.
    *
-   * @return \Drupal\static_export\Event\StaticExportEvent
+   * @return StaticExportEvent
    *   The processed event.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function triggerPreviewBuild(StaticExportEvent $event) {
     $exporter = $event->getExporter();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/PageHtmlCustomUrlResolverController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_preview_gatsby_instant\Controller;

+use Symfony\Component\HttpFoundation\JsonResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The Gatsby mocker service.
    *
-   * @var \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker
+   * @var GatsbyMocker
    */
   protected $gatsbyMocker;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker $gatsby_mocker
+   * @param GatsbyMocker $gatsby_mocker
    *   Gatsby mocker service.
    */
   public function __construct(GatsbyMocker $gatsby_mocker) {
@@ @@
    * @param string $pagePath
    *   Page path with leading slash.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse|\Symfony\Component\HttpFoundation\Response
+   * @return JsonResponse|Response
    *   JSON response on success, or Response with 404 code on error.
    */
   public function pageHtmlResolver(string $pagePath) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/PageDataResolverController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_preview_gatsby_instant\Controller;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The Gatsby mocker service.
    *
-   * @var \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker
+   * @var GatsbyMocker
    */
   protected $gatsbyMocker;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker $gatsbyMocker
+   * @param GatsbyMocker $gatsbyMocker
    *   Gatsby mocker service.
    */
   public function __construct(GatsbyMocker $gatsbyMocker) {
@@ @@
    * @param string $pagePath
    *   Page path with leading slash.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse|\Symfony\Component\HttpFoundation\Response
+   * @return JsonResponse|Response
    *   JSON response on success, or Response with 404 code on error.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    * @throws \JsonException
    */
   public function pageDataResolver(string $pagePath) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/static_suite/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/NodePreviewController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_preview_gatsby_instant\Controller;

+use Symfony\Component\EventDispatcher\EventDispatcher;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $pathAliasManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The exportable entity manager.
    *
-   * @var \Drupal\static_export\Entity\ExportableEntityManagerInterface
+   * @var ExportableEntityManagerInterface
    */
   protected $exportableEntityManager;

@@ @@
   /**
    * The Gatsby mocker service.
    *
-   * @var \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMockerInterface
+   * @var GatsbyMockerInterface
    */
   protected $gatsbyMocker;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The current path for the current request.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * Creates an NodeViewController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.º.
-   * @param \Drupal\path_alias\AliasManagerInterface $pathAliasManager
+   * @param AliasManagerInterface $pathAliasManager
    *   The path alias manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\static_export\Entity\ExportableEntityManagerInterface $exportableEntityManager
+   * @param ExportableEntityManagerInterface $exportableEntityManager
    *   The exportable entity manager.
-   * @param \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMockerInterface $gatsbyMocker
+   * @param GatsbyMockerInterface $gatsbyMocker
    *   The Gatsby mocker service.
    */
   public function __construct(
@@ @@
     if ($exportableEntity) {
       $isStatifiedPage = $exportableEntity->getIsStatifiedPage();
       $event = new StaticPreviewEvent($node_preview);
-      $this->eventDispatcher->dispatch(StaticPreviewEvents::PRE_RENDER, $event);
+      $this->eventDispatcher->dispatch($event, StaticPreviewEvents::PRE_RENDER);
       $isPreviewable = $event->isPreviewable();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/static_suite/modules/static_export/static_export.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Routing\RouteMatchInterface;
 /**
  * @file
  * Exports entities to files in different formats (MarkDown, JSON, etc).
@@ @@
 /**
  * Save entity data in disk for the configured format.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginException
+ * @throws PluginException
  */
 function static_export_do_entity_write(EntityInterface $entity) {
   /* @var $entityExporterPluginManager \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface */
@@ @@
 /**
  * Get a Menu Entity from MenuLinkContent.
  *
- * @param \Drupal\Core\Entity\EntityInterface $menuLink
+ * @param EntityInterface $menuLink
  *   A MenuLinkContent object
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   An Exportable Entity
  */
 function _static_export_getMenuFromMenuLink(EntityInterface $menuLink) {
@@ @@
  * So we need to fix the first case, detecting it to manually return menu
  * and not MenuLinkContent.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An Entity
  *
  * @return bool
- *
  */
 function _static_export_isMenuLink(EntityInterface $entity) {
   if ($entity instanceof MenuLinkContent) {
@@ @@
             '#title' => str_replace('/', '/​', $exportedUriTarget),
             '#type' => 'link',
             '#attributes' => ['target' => '_blank'],
-            '#url' => Url::fromUri(file_create_url($uri)),
+            '#url' => \Drupal::service('file_url_generator')->generate($uri),
           ],
         ];
       }
@@ @@
   $buildInfo = $form_state->getBuildInfo();
   if (!empty($buildInfo['args'][0])) {
     $languageManager = \Drupal::service('language_manager');
-    /** @var \Drupal\Core\Routing\RouteMatchInterface $routeMatch */
+    /** @var RouteMatchInterface $routeMatch */
     $routeMatch = $buildInfo['args'][0];
     $pluginId = $routeMatch->getParameter('plugin_id');
     if ($pluginId) {
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector


24) modules/contrib/static_suite/modules/static_export/src/StreamWrapper/StaticStream.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\StreamWrapper;

+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\StreamWrapper\LocalStream;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Output/Uri/Resolver/PagePath/EntityPagePathUriResolver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Plugin\static_export\Output\Uri\Resolver\PagePath;

+use Drupal\static_suite\Entity\EntityUtils;
+use Drupal\static_export\Exporter\Type\Entity\Output\Uri\Resolver\EntityExporterUriResolver;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverPluginInterface;
 use Drupal\static_export\Exporter\Output\Uri\UriInterface;
@@ @@
   /**
    * Entity utils from Static Suite.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;

@@ @@
   /**
    * The entity exporter URI resolver.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\Output\Uri\Resolver\EntityExporterUriResolver
+   * @var EntityExporterUriResolver
    */
   protected $entityExporterUriResolver;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Output/Uri/Resolver/PagePath/CustomPagePathUriResolver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Plugin\static_export\Output\Uri\Resolver\PagePath;

+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface;
+use Drupal\static_export\Exporter\Output\Uri\UriFactory;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverPluginInterface;
@@ @@
   /**
    * Drupal cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The entity exporter URI resolver.
    *
-   * @var \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface
+   * @var CustomExporterPluginManagerInterface
    */
   protected $customExporterManager;

@@ @@
   /**
    * The URI factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriFactory|object|null
+   * @var UriFactory|object|null
    */
   protected $uriFactory;

@@ @@
   /**
    * A simple cache to avoid running the resolver twice for the same resource.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriInterface[]
+   * @var UriInterface[]
    */
   protected $localUriCache;

@@ @@
    * @param string $pagePath
    *   Page path to serach for inside $supportedPagePaths.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface|null
+   * @return UriInterface|null
    *   An URI if something found, or NULL otherwise.
    * @see CustomExporterPluginInterface::getSupportedPagePaths()
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Output/Formatter/XmlOutputFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Plugin\static_export\Output\Formatter;

+use Symfony\Component\Serializer\Serializer;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginInterface;
@@ @@
   /**
    * Serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   Serializer.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Exporter/Locale/LocaleExporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Plugin\static_export\Exporter\Locale;

+use Drupal\locale\StringStorageInterface;
+use Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface;
+use Drupal\locale\StringInterface;
 use Drupal\static_export\Exporter\ExporterPluginInterface;
 use Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface;
 use Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginBase;
@@ @@
   /**
    * Locale storage.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $localeStorage;

@@ @@
   /**
    * The locale exporter plugin manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterPluginManager;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\locale\StringInterface[]
+   * @return StringInterface[]
    *   Array of StringInterface
    */
   public function getExporterItem() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Exporter/Entity/EntityExporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Plugin\static_export\Exporter\Entity;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\locale\LocaleConfigManager;
+use Drupal\Core\Routing\CurrentRouteMatch;
+use Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface;
+use Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface;
+use Drupal\static_export\Entity\ExportableEntityManagerInterface;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\ContentEntityBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager|object|null
+   * @var EntityTypeManager|object|null
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The locale config manager.
    *
-   * @var \Drupal\locale\LocaleConfigManager|object|null
+   * @var LocaleConfigManager|object|null
    */
   protected $localeConfigManager;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * Entity exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface
+   * @var EntityExporterPluginManagerInterface
    */
   protected $entityExporterPluginManager;

@@ @@
   /**
    * Data resolver manager.
    *
-   * @var \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface
+   * @var DataResolverPluginManagerInterface
    */
   protected $dataResolverManager;

@@ @@
   /**
    * Exportable entity manager.
    *
-   * @var \Drupal\static_export\Entity\ExportableEntityManagerInterface
+   * @var ExportableEntityManagerInterface
    */
   protected $exportableEntityManager;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Item being exported (an entity)
    */
   public function getExporterItem() {
@@ @@
    * Being a completely different translation strategy, we split this method out
    * into two different ones.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    * @throws \Exception
    */
   protected function exportTranslations(): FileCollection {
@@ @@
   /**
    * Export translations for entities implementing TranslatableInterface.
    *
-   * @param \Drupal\Core\TypedData\TranslatableInterface $translatableEntity
+   * @param TranslatableInterface $translatableEntity
    *   A translatable entity implementing TranslatableInterface.
    *
-   * @return \Drupal\static_export\File\FileCollection
+   * @return FileCollection
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   protected function exportTranslatableEntityTranslations(TranslatableInterface $translatableEntity): FileCollection {
     $fileCollection = new FileCollection($this->uniqueId());
@@ @@
   /**
    * Export translations for entities instance of ConfigEntityInterface.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $configEntity
+   * @param ConfigEntityInterface $configEntity
    *   An entity implementing ConfigEntityInterface.
    *
-   * @return \Drupal\static_export\File\FileCollection
+   * @return FileCollection
    *
    * @throws \Exception
    */
@@ @@
     // object being edited, and this responds to an action triggered by a user,
     // avoid executing this code while on CLI.
     if (!$this->staticSuiteUtils->isRunningOnCli()) {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entityBeingExported */
+      /** @var ConfigEntityInterface $entityBeingExported */
       $entityBeingExported = $this->getExporterItem();
       $translationLanguages = $this->entityUtils->getConfigEntityTranslationLanguages($entityBeingExported, TRUE);
-      /** @var \Drupal\Core\Routing\RouteMatchInterface $currentRouteMatch */
+      /** @var RouteMatchInterface $currentRouteMatch */
       $langcodeBeingEdited = $this->currentRouteMatch->getParameter('langcode');
       $languageBeingEdited = $this->languageManager->getLanguage($langcodeBeingEdited);
       if ($languageBeingEdited && empty($translationLanguages[$langcodeBeingEdited])) {
@@ @@
   /**
    * Get the data resolver plugin being used by this entity exporter.
    *
-   * @return \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginInterface
+   * @return DataResolverPluginInterface
    *   Data resolver plugin
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   protected function getDataResolver(): ?DataResolverPluginInterface {
     $entity = $this->options[self::PARAM_ENTITY];
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   protected function getVariantKeyDefinitions(): array {
     $dataResolver = $this->getDataResolver();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Exporter/Custom/LanguageConfigExporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Plugin\static_export\Exporter\Custom;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface;
 use Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginBase;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getOutputDefinition(): ?ExporterOutputConfigInterface {
     $format = $this->configFactory->get('static_export.settings')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


31) modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Exporter/Config/ConfigExporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Plugin\static_export\Exporter\Config;

+use Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface;
+use Drupal\Core\Config\Config;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\static_export\Exporter\ExporterPluginInterface;
 use Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface;
 use Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginBase;
@@ @@
   /**
    * The config exporter plugin manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterPluginManager;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   Drupal configuration object.
    */
   public function getExporterItem() {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function checkParams(array $options): bool {
     if (!isset($options[self::PARAM_NAME])) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @throws \Exception
    */
   public function exportTranslations(): FileCollection {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/static_suite/modules/static_export/src/Plugin/static_export/Data/Resolver/JsonSerializerDataResolver.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Serializer service.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   Serializer service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/static_suite/modules/static_export/src/Messenger/MessengerInterface.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Shows a message coming from an array of FileCollection.
    *
-   * @param \Drupal\static_export\File\FileCollectionGroup $fileCollectionGroup
+   * @param FileCollectionGroup $fileCollectionGroup
    *   A FileCollectionGroup.
    *
    * @return MessengerInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/static_suite/modules/static_export/src/Messenger/Messenger.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Messenger;

+use Drupal\Core\Session\AccountProxy;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Render\MarkupTrait;
 use Drupal\Core\Messenger\Messenger as BaseMessenger;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * The File Collection Formatter.
    *
-   * @var \Drupal\static_export\File\FileCollectionFormatter
+   * @var FileCollectionFormatter
    */
   protected $fileCollectionFormatter;

@@ @@
   /**
    * Messenger constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface $flash_bag
+   * @param FlashBagInterface $flash_bag
    *   The flash bag.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $killSwitch
+   * @param KillSwitch $killSwitch
    *   The kill switch.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\static_export\File\FileCollectionFormatter $fileCollectionFormatter
+   * @param FileCollectionFormatter $fileCollectionFormatter
    *   The File Collection Formatter.
    */
   public function __construct(FlashBagInterface $flash_bag, KillSwitch $killSwitch, AccountProxyInterface $currentUser, FileCollectionFormatter $fileCollectionFormatter) {
@@ @@
   /**
    * Shows a message coming from a FileCollection.
    *
-   * @param \Drupal\static_export\File\FileCollection $fileCollection
+   * @param FileCollection $fileCollection
    *   A FileCollection.
    */
   protected function addFileCollection(FileCollection $fileCollection): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/static_suite/modules/static_export/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Form;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/static_suite/modules/static_export/src/Form/ExportableLocaleSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The locale exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterManager;

@@ @@
   /**
    * The static output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;

@@ @@
   /**
    * The locale output configuration factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface
+   * @var ExporterOutputConfigFactoryInterface
    */
   protected $localeExporterOutputConfigFactory;

@@ @@
    *
    * @param \Drupal\Core\Config\ConfigFactoryInterface
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   The locale exporter manager.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The static output formatter manager.
-   * @param \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface $localeExporterOutputConfigFactory
+   * @param ExporterOutputConfigFactoryInterface $localeExporterOutputConfigFactory
    *   The locale output configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteProviderInterface $route_provider, LocaleExporterPluginManagerInterface $localeExporterManager, OutputFormatterPluginManagerInterface $outputFormatterManager, ExporterOutputConfigFactoryInterface $localeExporterOutputConfigFactory) {
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('static_export.settings');
     $config
       ->set('exportable_locale.exporter', $form_state->getValue('exporter'))
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/static_suite/modules/static_export/src/Form/ExportableEntitySettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The entity exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface
+   * @var EntityExporterPluginManagerInterface
    */
   protected $entityExporterPluginManager;

@@ @@
    *
    * @param \Drupal\Core\Config\ConfigFactoryInterface
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface $entityExporterPluginManager
+   * @param EntityExporterPluginManagerInterface $entityExporterPluginManager
    *   The entity exporter manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteProviderInterface $route_provider, EntityExporterPluginManagerInterface $entityExporterPluginManager) {
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('static_export.settings');
     $config
       ->set('exportable_entity.exporter', $form_state->getValue('exporter'))
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/static_suite/modules/static_export/src/Form/ExportableEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Form;

+use Drupal\static_export\Entity\ExportableEntityInterface;
+use Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\static_export\Entity\ExportableEntityInterface
+   * @var ExportableEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface
+   * @var EntityExporterPluginManagerInterface
    */
   protected $entityExporterPluginManager;

@@ @@
   /**
    * The static data resolver manager.
    *
-   * @var \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface
+   * @var DataResolverPluginManagerInterface
    */
   protected $dataResolverManager;

@@ @@
   /**
    * The static output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;

@@ @@
   /**
    * Constructs an StaticExportEntityForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The Entity Type Manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   Entity type bundle info service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The Config Factory.
-   * @param \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface $dataResolverManager
+   * @param DataResolverPluginManagerInterface $dataResolverManager
    *   The static data resolver manager.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The static output formatter manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $entityTypeBundleInfo, ConfigFactoryInterface $configFactory, DataResolverPluginManagerInterface $dataResolverManager, OutputFormatterPluginManagerInterface $outputFormatterManager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/static_suite/modules/static_export/src/Form/ExportableConfigSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Form;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The config exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterManager;

@@ @@
   /**
    * The static output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;

@@ @@
   /**
    * The config output configuration factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface
+   * @var ExporterOutputConfigFactoryInterface
    */
   protected $configExporterOutputConfigFactory;

@@ @@
    *
    * @param \Drupal\Core\Config\ConfigFactoryInterface
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface $configExporterManager
+   * @param ConfigExporterPluginManagerInterface $configExporterManager
    *   The config exporter manager.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The static output formatter manager.
-   * @param \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface $configExporterOutputConfigFactory
+   * @param ExporterOutputConfigFactoryInterface $configExporterOutputConfigFactory
    *   The config output configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteProviderInterface $route_provider, ConfigExporterPluginManagerInterface $configExporterManager, OutputFormatterPluginManagerInterface $outputFormatterManager, ExporterOutputConfigFactoryInterface $configExporterOutputConfigFactory) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $config = $this->config('static_export.settings');
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('static_export.settings');
     $config
       ->set('exportable_config.exporter', $form_state->getValue('exporter'))
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/static_suite/modules/static_export/src/Form/ExportableConfigDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Form;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
   /**
    * The config exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterManager;

@@ @@
   /**
    * The static exporter messenger.
    *
-   * @var \Drupal\static_export\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $staticExportMessenger;

@@ @@
   /**
    * The config exporter path resolver.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\Output\Uri\Resolver\ConfigExporterUriResolverInterface
+   * @var ConfigExporterUriResolverInterface
    */
   protected $configExporterUriResolver;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface $configExporterManager
+   * @param ConfigExporterPluginManagerInterface $configExporterManager
    *   The config exporter manager.
-   * @param \Drupal\static_export\Messenger\MessengerInterface $staticExportMessenger
+   * @param MessengerInterface $staticExportMessenger
    *   The static exporter messenger.
-   * @param \Drupal\static_export\Exporter\Type\Config\Output\Uri\Resolver\ConfigExporterUriResolverInterface $configExporterUriResolver
+   * @param ConfigExporterUriResolverInterface $configExporterUriResolver
    *   The config exporter path resolver.
    */
   public function __construct(ConfigExporterPluginManagerInterface $configExporterManager, MessengerInterface $staticExportMessenger, ConfigExporterUriResolverInterface $configExporterUriResolver) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $config = $this->configFactory()->getEditable('static_export.settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/static_suite/modules/static_export/src/Form/ExportableConfigAddForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Form;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The config exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterManager;

@@ @@
   /**
    * The static exporter messenger.
    *
-   * @var \Drupal\static_export\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $staticExportMessenger;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface $configExporterManager
+   * @param ConfigExporterPluginManagerInterface $configExporterManager
    *   The config exporter manager.
-   * @param \Drupal\static_export\Messenger\MessengerInterface $staticExportMessenger
+   * @param MessengerInterface $staticExportMessenger
    *   The static exporter messenger.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ConfigExporterPluginManagerInterface $configExporterManager, MessengerInterface $staticExportMessenger) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $config = $this->config('static_export.settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/static_suite/modules/static_export/src/Form/ConstrainedExporterSettingsFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Form;

+use Drupal\Core\Routing\RouteProviderInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Url;

@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/static_suite/modules/static_export/src/File/MimeType/OutputFormatterMimeTypeGuesser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\File\MimeType;

+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * Guess the MIME type of a file using StaticOutputFormatter annotation.
  */
-class OutputFormatterMimeTypeGuesser implements MimeTypeGuesserInterface {
+class OutputFormatterMimeTypeGuesser implements MimeTypesInterface {

   /**
    * The output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;

@@ @@
   /**
    * Constructs a new OutputFormatterMimeTypeGuesser.
    *
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The output formatter manager.
    */
   public function __construct(OutputFormatterPluginManagerInterface $outputFormatterManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


44) modules/contrib/static_suite/modules/static_export/src/File/MimeType/MimeTypeGuesser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\File\MimeType;

+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\File\MimeType\MimeTypeGuesser as BaseMimeTypeGuesser;
 use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * Defines a MIME type guesser for Static Export.
@@ @@
   /**
    * The default mimeType guesser from Drupal's core.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $defaultMimeTypeGuesser;

@@ @@
   /**
    * Constructs a MimeTypeGuesser object.
    *
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $defaultMimeTypeGuesser
+   * @param MimeTypesInterface $defaultMimeTypeGuesser
    *   The default mimeType guesser from Drupal's core.
    */
-  public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager, MimeTypeGuesserInterface $defaultMimeTypeGuesser) {
+  public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager, MimeTypesInterface $defaultMimeTypeGuesser) {
     $this->defaultMimeTypeGuesser = $defaultMimeTypeGuesser;
     parent::__construct($stream_wrapper_manager);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/static_suite/modules/static_export/src/File/MimeType/ContentMimeTypeGuesser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\File\MimeType;

-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
+use Symfony\Component\Mime\MimeTypesInterface;

 /**
  * Guess the MIME type of a file by reading its contents.
@@ @@
  *
  * It supports the tree formats offered by Static Export: JSON, XML and YAML.
  */
-class ContentMimeTypeGuesser implements MimeTypeGuesserInterface {
+class ContentMimeTypeGuesser implements MimeTypesInterface {

   /**
    * {@inheritdoc}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


46) modules/contrib/static_suite/modules/static_export/src/File/FileCollectionWriter.php:116

    ---------- begin diff ----------
@@ @@
   /**
    * The exporter that controls this writer.
    *
-   * @var \Drupal\static_export\Exporter\ExporterPluginInterface
+   * @var ExporterPluginInterface
    */
   protected $exporter;

@@ @@
   /**
    * A FileCollectionGroup.
    *
-   * @var \Drupal\static_export\File\FileCollectionGroup
+   * @var FileCollectionGroup
    */
   protected $fileCollectionGroup;

@@ @@
   /**
    * Config Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * Unique ID helper.
    *
-   * @var \Drupal\static_suite\Utility\UniqueIdHelperInterface
+   * @var UniqueIdHelperInterface
    */
   protected $uniqueIdHelper;

@@ @@
   /**
    * FileCollectionWriter constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config Factory.
-   * @param \Drupal\static_suite\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock system from Static Suite.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
-   * @param \Drupal\static_suite\Utility\UniqueIdHelperInterface $unique_id_helper
+   * @param UniqueIdHelperInterface $unique_id_helper
    *   Static Export utils.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LockBackendInterface $lock, StaticSuiteUtilsInterface $static_suite_utils, UniqueIdHelperInterface $unique_id_helper) {
@@ @@
   /**
    * Set exporter.
    *
-   * @param \Drupal\static_export\Exporter\ExporterPluginInterface $exporter
+   * @param ExporterPluginInterface $exporter
    *   The exporter that controls this writer.
    */
   public function setExporter(ExporterPluginInterface $exporter) {
@@ @@
    * @return FileCollectionGroup
    *   A FileCollectionGroup with stats.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function save(FileCollection $fileCollection) {
     // We assign it to a property to easily pass it to events.
@@ @@
    * @return FileCollectionGroup
    *   A FileCollectionGroup.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function processQueue() {
     $this->exporter->dispatchEvent(StaticExportEvents::WRITE_QUEUE_PROCESSING_STARTS);
@@ @@
    * @return array
    *   The committed queue item.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function commitQueueItem(array $item) {
     $item['file-collection'] = $this->commitFileCollection($item['file-collection']);
@@ @@
    * @return FileCollection
    *   The processed FileCollection.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function commitFileCollection(FileCollection $fileCollection) {
     $fileItems = $fileCollection->getFileItems();
@@ @@
    * @return bool
    *   True on success, false otherwise
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function saveLockExecutedLog(FileCollection $fileCollection) {
     $fileItems = $fileCollection->getFileItems();
@@ @@
    * @return bool
    *   TRUE on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function deleteFileItem(string $filePath) {
     // Do nothing if $filePath does not exist.
@@ @@
    * @return bool
    *   TRUE on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function saveFileItem(string $filePath, string $fileContents) {
     // Do nothing if contents are the same.
@@ @@
    * @return bool
    *   TRUE on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function writeFile(string $filePath, string $fileContents, bool $overwrite = FALSE, bool $createDirs = FALSE) {
     // Ensure proper paths.
@@ @@
    * @return bool
    *   TRUE on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function deleteFile(string $filePath) {
     // Ensure proper paths.
@@ @@
    * @return bool
    *   True if it's stale.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function isQueueItemStale(array $item) {
     $lastCommittedUniqueIdDate = $this->getLastLockCommittedUniqueIdDate();
@@ @@
    * @return \DateTime
    *   A DateTime representing a unique id timestamp.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function getLastLockCommittedUniqueIdDate() {
     $filePath = $this->getWorkDir() . "/" . self::LAST_LOCK_COMMITTED_UNIQUE_ID_FILE;
@@ @@
    * @return array|bool
    *   A queue item, or false if queue is empty
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function pullItemFromQueue() {
     $pattern = $this->getWorkDir() . '/' . self::QUEUE_DIR . '/*';
@@ @@
    * @return bool
    *   True if locked.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function finishQueueInsertion(FileCollection $fileCollection) {
     $this->exporter->logMessage("[writer] Queue insertion finishing...");
@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function startQueueInsertion() {
     // Honor the value defined in self::QUEUE_INSERTION_MAX_SECONDS.
@@ @@
    * @param string $uniqueId
    *   The unique id to save.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function saveLastLockCommittedUniqueId(string $uniqueId) {
     $filePath = $this->getWorkDir() . "/" . self::LAST_LOCK_COMMITTED_UNIQUE_ID_FILE;
@@ @@
    * @param FileCollection $fileCollection
    *   The FileCollection to get the unique id to save.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function saveLastLockExecutedUniqueId(FileCollection $fileCollection) {
     $filePath = $this->getWorkDir() . "/" . self::LAST_LOCK_EXECUTED_LIVE_UNIQUE_ID_FILE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


47) modules/contrib/static_suite/modules/static_export/src/File/FileCollectionGroup.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * An array of FileCollection.
    *
-   * @var \Drupal\static_export\File\FileCollection[]
+   * @var FileCollection[]
    */
   protected $fileCollections = [];

@@ @@
   /**
    * Get all FileCollections.
    *
-   * @return \Drupal\static_export\File\FileCollection[]
+   * @return FileCollection[]
    *   An array of FileCollection.
    */
   public function getFileCollections(): array {
@@ @@
   /**
    * Set all FileCollections.
    *
-   * @param \Drupal\static_export\File\FileCollection[] $fileCollections
+   * @param FileCollection[] $fileCollections
    *   An array of FileCollection.
    */
   public function setFileCollections(array $fileCollections) {
@@ @@
   /**
    * Add an individual FileCollection.
    *
-   * @param \Drupal\static_export\File\FileCollection $fileCollection
+   * @param FileCollection $fileCollection
    *   An individual FileCollection.
    */
   public function addFileCollection(FileCollection $fileCollection) {
@@ @@
   /**
    * Adds multiple FileCollections.
    *
-   * @param \Drupal\static_export\File\FileCollection[] $fileCollections
+   * @param FileCollection[] $fileCollections
    *   An array of FileCollection.
    */
   public function addFileCollections(array $fileCollections) {
@@ @@
   /**
    * Get first FileCollection.
    *
-   * @return \Drupal\static_export\File\FileCollection|null
+   * @return FileCollection|null
    *   First FileCollection.
    */
   public function getFirstFileCollection(): ?FileCollection {
@@ @@
   /**
    * Get executed items from all file collections.
    *
-   * @return \Drupal\static_export\File\FileItem[]
+   * @return FileItem[]
    *   Array of FileItem
    */
   public function getExecutedFileItemsFromAllFileCollections() {
@@ @@
   /**
    * Get file paths from all file collections.
    *
-   * @return \Drupal\static_export\File\FileItem[]
+   * @return FileItem[]
    *   Array of FileItem
    */
   public function getExecutedFilePathsFromAllFileCollections() {
@@ @@
   /**
    * Get FileCollections newest item.
    *
-   * @return \Drupal\static_export\File\FileCollection|null
+   * @return FileCollection|null
    *   A FileCollection or NULL if nothing found.
    */
   public function getNewestFileCollection() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


48) modules/contrib/static_suite/modules/static_export/src/File/FileCollectionFormatter.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * A FileCollection to format.
    *
-   * @var \Drupal\static_export\File\FileCollection
+   * @var FileCollection
    */
   protected $fileCollection;

@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Static Suite utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * FileCollectionFormatter constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The base config provider.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $staticSuiteUtils
+   * @param StaticSuiteUtilsInterface $staticSuiteUtils
    *   Static Suite utils.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticSuiteUtilsInterface $staticSuiteUtils) {
@@ @@
   /**
    * Set a FileCollection.
    *
-   * @param \Drupal\static_export\File\FileCollection $fileCollection
+   * @param FileCollection $fileCollection
    *   A FileCollection to format.
    */
   public function setFileCollection(FileCollection $fileCollection) {
@@ @@
   /**
    * Formats a FileCollection using html format and returns an array.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $user
+   * @param AccountProxyInterface $user
    *   The user to get the html for.
    * @param int $delta
    *   Batch delta.
@@ @@

       // Parse file link.
       if ($user->hasPermission("view static export files") && $index !== 0 && preg_match("/ (\S+)$/", $line, $matches)) {
-        $htmlForFilePath = '<a href="' . file_create_url($scheme . '://' . $matches[1]) . '" target="_blank">' . $matches[1] . '</a>';
+        $htmlForFilePath = '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($scheme . '://' . $matches[1]) . '" target="_blank">' . $matches[1] . '</a>';
         $lines[$index] = str_replace($matches[1], $htmlForFilePath, $lines[$index]);
       }
     }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


49) modules/contrib/static_suite/modules/static_export/src/File/FileCollection.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * Get all FileItems.
    *
-   * @return \Drupal\static_export\File\FileItem[]
+   * @return FileItem[]
    *   An array of FileItem.
    */
   public function getFileItems(): array {
@@ @@
   /**
    * Get all executed FileItems.
    *
-   * @return \Drupal\static_export\File\FileItem[]
+   * @return FileItem[]
    *   An array of FileItem.
    */
   public function getExecutedFileItems(): array {
@@ @@
   /**
    * Set all FileItems.
    *
-   * @param \Drupal\static_export\File\FileItem[] $fileItems
+   * @param FileItem[] $fileItems
    *   An array of FileItem.
    */
   public function setFileItems(array $fileItems) {
@@ @@
   /**
    * Get first FileItem.
    *
-   * @return \Drupal\static_export\File\FileItem|null
+   * @return FileItem|null
    *   First FileItem.
    */
   public function getFirstFileItem(): ?FileItem {
@@ @@
   /**
    * Set an individual FileItem.
    *
-   * @param \Drupal\static_export\File\FileItem $fileItem
+   * @param FileItem $fileItem
    *   An individual FileItem.
    */
   public function addFileItem(FileItem $fileItem) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


50) modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Locale/Output/Uri/Resolver/LocaleExporterUriResolver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Type\Locale\Output\Uri\Resolver;

+use Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\static_export\Exporter\Output\Uri\Resolver\ExporterUriResolverBase;
 use Drupal\static_export\Exporter\Output\Uri\UriInterface;
@@ @@
   /**
    * Locale exporter Manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterManager;

@@ @@
   /**
    * Locale exporter instance.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginInterface
+   * @var LocaleExporterPluginInterface
    */
   protected $localeExporter;

@@ @@
   /**
    * URI Resolver service constructor.
    *
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   Locale exporter Manager.
    */
   public function __construct(LocaleExporterPluginManagerInterface $localeExporterManager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function setLanguage(string $langcode): LocaleExporterUriResolverInterface {
     $this->langcode = $langcode;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getMainUri(): ?UriInterface {
     return $this->localeExporter->setOptions(['language' => $this->langcode])
@@ @@
    * @param string $langcode
    *   Optional language id.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getVariantUris(LanguageInterface $language = NULL): array {
     $uris = [];
@@ @@
    * $localeExporter->getTranslationLanguages() returns something, which is a
    * method that can be easily overridden.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getTranslationUris(): array {
     $uris = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Type\Locale;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
    * @return LocaleExporterPluginInterface
    *   Default locale exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function createDefaultInstance(): LocaleExporterPluginInterface;

@@ @@
    * @return LocaleExporterPluginInterface
    *   Default locale exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getDefaultInstance(): LocaleExporterPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


52) modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginManager.php:20

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Entity/Output/Uri/Resolver/EntityExporterUriResolverInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Set entity to work with.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to work with.
    *
    * @return EntityExporterUriResolverInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


54) modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Entity/Output/Uri/Resolver/EntityExporterUriResolver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Type\Entity\Output\Uri\Resolver;

+use Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Entity exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface
+   * @var EntityExporterPluginManagerInterface
    */
   protected $entityExporterPluginManager;

@@ @@
   /**
    * Entity exporter instance.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginInterface
+   * @var EntityExporterPluginInterface
    */
   protected $entityExporter;

@@ @@
   /**
    * Custom exporter Manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface
+   * @var CustomExporterPluginManagerInterface
    */
   protected $customExporterManager;

@@ @@
   /**
    * The entity utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtilsInterface
+   * @var EntityUtilsInterface
    */
   protected $entityUtils;

@@ @@
   /**
    * Entity to work with.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * An internal cache for custom exported URIs.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriInterface[]
+   * @var UriInterface[]
    */
   protected $customExportedUriCache;

@@ @@
   /**
    * URI Resolver service constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
-   * @param \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface $entityExporterPluginManager
+   * @param EntityExporterPluginManagerInterface $entityExporterPluginManager
    *   Entity exporter Manager.
-   * @param \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface $customExporterManager
+   * @param CustomExporterPluginManagerInterface $customExporterManager
    *   Custom exporter Manager.
-   * @param \Drupal\static_suite\Entity\EntityUtilsInterface $entityUtils
+   * @param EntityUtilsInterface $entityUtils
    *   Entity utils.
    */
   public function __construct(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function setEntity(EntityInterface $entity): EntityExporterUriResolverInterface {
     $this->entity = $entity;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getMainUri(): ?UriInterface {
     return $this->entityExporter
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public function getVariantUris(LanguageInterface $language = NULL): array {
     $uris = [];
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public function getTranslationUris(): array {
     $uris = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Type\Entity;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
    * @return EntityExporterPluginInterface
    *   Default entity exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function createDefaultInstance(): EntityExporterPluginInterface;

@@ @@
    * @return EntityExporterPluginInterface
    *   Default entity exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getDefaultInstance(): EntityExporterPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


56) modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginManager.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Type\Custom;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginInterface
+   * @return CustomExporterPluginInterface
    *   A newly created exporter object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): CustomExporterPluginInterface;
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginInterface
+   * @return CustomExporterPluginInterface
    *   A newly created custom exporter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getInstance(array $options): CustomExporterPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


58) modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Config/Output/Uri/Resolver/ConfigExporterUriResolver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Type\Config\Output\Uri\Resolver;

+use Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\static_export\Exporter\Output\Uri\Resolver\ExporterUriResolverBase;
@@ @@
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Config exporter instance.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginInterface
+   * @var ConfigExporterPluginInterface
    */
   protected $configExporter;

@@ @@
   /**
    * Config exporter Manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterManager;

@@ @@
   /**
    * Language context.
    *
-   * @var \Drupal\static_suite\Language\LanguageContextInterface
+   * @var LanguageContextInterface
    */
   protected $languageContext;

@@ @@
   /**
    * The entity utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtilsInterface
+   * @var EntityUtilsInterface
    */
   protected $entityUtils;

@@ @@
   /**
    * Uri Resolver service constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
-   * @param \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface $configExporterManager
+   * @param ConfigExporterPluginManagerInterface $configExporterManager
    *   Config exporter Manager.
-   * @param \Drupal\static_suite\Language\LanguageContextInterface $languageContext
+   * @param LanguageContextInterface $languageContext
    *   Language context.
-   * @param \Drupal\static_suite\Entity\EntityUtilsInterface $entityUtils
+   * @param EntityUtilsInterface $entityUtils
    *   Entity utils.
    */
   public function __construct(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function setConfigName(string $configName): ConfigExporterUriResolverInterface {
     $this->configName = $configName;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getMainUri(): ?UriInterface {
     return $this->configExporter->setOptions(['name' => $this->configName])
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    * @throws \Exception
    */
   public function getVariantUris(LanguageInterface $language = NULL): array {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    * @throws \Exception
    */
   public function getTranslationUris(): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Type\Config;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
    * @return ConfigExporterPluginInterface
    *   Default config exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function createDefaultInstance(): ConfigExporterPluginInterface;

@@ @@
    * @return ConfigExporterPluginInterface
    *   Default config exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getDefaultInstance(): ConfigExporterPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


61) modules/contrib/static_suite/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginManager.php:20

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/UriFactory.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The file path sanitizer.
    *
-   * @var \Drupal\static_suite\Security\FilePathSanitizerInterface
+   * @var FilePathSanitizerInterface
    */
   protected $filePathSanitizer;

@@ @@
   /**
    * UriFactory constructor.
    *
-   * @param \Drupal\static_suite\Security\FilePathSanitizerInterface $filePathSanitizer
+   * @param FilePathSanitizerInterface $filePathSanitizer
    *   The file path sanitizer.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
    */
   public function __construct(FilePathSanitizerInterface $filePathSanitizer, ConfigFactoryInterface $configFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


63) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
    *   A newly created converter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getInstance(array $options): PagePathUriResolverPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


64) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\static_export\Exporter\Output\Uri\UriInterface;
@@ @@
    * @param string|null $langcode
    *   Optional language id.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface|null
+   * @return UriInterface|null
    *   Exported URI.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function resolve(string $pagePath, string $langcode = NULL): ?UriInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


66) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverInterface.php:46

    ---------- begin diff ----------
@@ @@
    * @param string|null $langcode
    *   Optional language id.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface|null
+   * @return UriInterface|null
    *   Exported URI.
    */
   public function resolve(string $pagePath, string $langcode = NULL): ?UriInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


67) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolver.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The URI resolver for page paths.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverPluginManagerInterface
+   * @var PagePathUriResolverPluginManagerInterface
    */
   protected $pagePathUriResolverPluginManager;

@@ @@
   /**
    * PagePathUriResolver constructor.
    *
-   * @param \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverPluginManagerInterface $pagePathUriResolverPluginManager
+   * @param PagePathUriResolverPluginManagerInterface $pagePathUriResolverPluginManager
    *   The URI resolver for page paths.
    */
   public function __construct(PagePathUriResolverPluginManagerInterface $pagePathUriResolverPluginManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


68) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Uri/Resolver/ExporterUriResolverInterface.php:17

    ---------- begin diff ----------
@@ @@
    *
    * It returns the main URI and its variants and translations.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface[]
+   * @return UriInterface[]
    *   Array of URIs.
    */
   public function getUris(): array;
@@ @@
   /**
    * Get a exported item (entity/config/locale) main URI.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface|null
+   * @return UriInterface|null
    *   The main URI or null if nothing found.
    */
   public function getMainUri(): ?UriInterface;
@@ @@
   /**
    * Get a exported item (entity/config/locale) variant URIs.
    *
-   * @param \Drupal\Core\Language\LanguageInterface|null $language
+   * @param LanguageInterface|null $language
    *   Optional language.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface[]
+   * @return UriInterface[]
    *   Array of URIs.
    */
   public function getVariantUris(LanguageInterface $language = NULL): array;
@@ @@
   /**
    * Get a exported item (entity/config) translation URIs.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface[]
+   * @return UriInterface[]
    *   Array of URIs.
    */
   public function getTranslationUris(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


69) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Output\Formatter;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginInterface
+   * @return OutputFormatterPluginInterface
    *   A newly created formatter object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): OutputFormatterPluginInterface;
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginInterface
+   * @return OutputFormatterPluginInterface
    *   A newly created formatter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getInstance(array $options): OutputFormatterPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


70) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


71) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigInterface.php:14

    ---------- begin diff ----------
@@ @@
    *
    * This is where the structure of the output of exporters must be defined.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface
+   * @return UriInterface
    *   The URI representing this configuration.
    */
   public function uri(): UriInterface;
@@ @@
   /**
    * Get the definition used in this configuration.
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\Definition\ExporterOutputConfigDefinitionInterface
+   * @return ExporterOutputConfigDefinitionInterface
    *   The configuration definition.
    */
   public function getDefinition(): ExporterOutputConfigDefinitionInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


72) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigFactoryInterface.php:78

    ---------- begin diff ----------
@@ @@
    * @param string|null $extension
    *   Export extension.
    *   Optional, it can be null or an empty string.
-   * @param \Drupal\Core\Language\LanguageInterface|null $language
+   * @param LanguageInterface|null $language
    *   Optional export language.
    *   If not defined, it uses a non-linguistic language
    *   (LanguageInterface::LANGCODE_NOT_APPLICABLE), which makes the language
@@ @@
    *   This argument is rarely used, so it's the last one of this method's
    *   signature, instead of being next to $extension.
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface
+   * @return ExporterOutputConfigInterface
    *   A exporter output config.
    */
   public function create(string $dir, string $filename, string $extension = NULL, LanguageInterface $language = NULL, string $format = NULL): ExporterOutputConfigInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


73) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Output\Config;

+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\static_export\Exporter\Output\Config\Definition\ExporterOutputConfigDefinition;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The file path sanitizer.
    *
-   * @var \Drupal\static_suite\Security\FilePathSanitizerInterface
+   * @var FilePathSanitizerInterface
    */
   protected $filePathSanitizer;

@@ @@
   /**
    * The URI factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface
+   * @var UriFactoryInterface
    */
   protected $uriFactory;

@@ @@
   /**
    * ExporterOutputConfigFactory constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\static_suite\Security\FilePathSanitizerInterface $filePathSanitizer
+   * @param FilePathSanitizerInterface $filePathSanitizer
    *   The file path sanitizer.
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface $uriFactory
+   * @param UriFactoryInterface $uriFactory
    *   The URI factory.
    * @param string $defaultBaseDir
    *   The default base dir for exported files.
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function create(string $dir, string $filename, string $extension = NULL, LanguageInterface $language = NULL, string $format = NULL): ExporterOutputConfigInterface {
     // First, create a path.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


74) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfig.php:13

    ---------- begin diff ----------
@@ @@
 class ExporterOutputConfig implements ExporterOutputConfigInterface {

   /**
-   * @var \Drupal\static_suite\Security\FilePathSanitizerInterface
+   * @var FilePathSanitizerInterface
    */
   protected $filePathSanitizer;

@@ @@
   /**
    * The URI factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface
+   * @var UriFactoryInterface
    */
   protected $uriFactory;

@@ @@
   /**
    * The configuration definition.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\Definition\ExporterOutputConfigDefinitionInterface
+   * @var ExporterOutputConfigDefinitionInterface
    */
   protected $definition;

@@ @@
    * This class is used by all exporters, so it's quite permissive in its
    * parameters and only requires a.
    *
-   * @param \Drupal\static_suite\Security\FilePathSanitizerInterface $filePathSanitizer
+   * @param FilePathSanitizerInterface $filePathSanitizer
    *   The file path sanitizer.
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface $uriFactory
+   * @param UriFactoryInterface $uriFactory
    *   The URI factory.
    * @param string $baseDir
    *   Base directory (entity, config, etc)
-   * @param \Drupal\static_export\Exporter\Output\Config\Definition\ExporterOutputConfigDefinitionInterface $definition
+   * @param ExporterOutputConfigDefinitionInterface $definition
    *   The configuration definition.
    */
   public function __construct(FilePathSanitizerInterface $filePathSanitizer, UriFactoryInterface $uriFactory, string $baseDir, ExporterOutputConfigDefinitionInterface $definition) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\Definition\ExporterOutputConfigDefinitionInterface
+   * @return ExporterOutputConfigDefinitionInterface
    *   The configuration definition.
    */
   public function getDefinition(): ExporterOutputConfigDefinitionInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


75) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/Definition/Path/ExporterOutputConfigDefinitionPathInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Output\Config\Definition\Path;

+use Drupal\static_suite\StaticSuiteUserException;
 /**
  * An interface for paths used in the definition of output configurations.
  */
@@ @@
    * @return ExporterOutputConfigDefinitionPathInterface
    *   This instance, to make this method chainable.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function setFilename(string $filename): ExporterOutputConfigDefinitionPathInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


76) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/Definition/Path/ExporterOutputConfigDefinitionPath.php:10

    ---------- begin diff ----------
@@ @@
 class ExporterOutputConfigDefinitionPath implements ExporterOutputConfigDefinitionPathInterface {

   /**
-   * @var \Drupal\static_suite\Security\FilePathSanitizerInterface
+   * @var FilePathSanitizerInterface
    */
   protected $filePathSanitizer;

@@ @@
    * ExporterOutputConfigFactoryInterface::create() method and shouldn't be
    * manually instantiated.
    *
-   * @param \Drupal\static_suite\Security\FilePathSanitizerInterface $filePathSanitizer
+   * @param FilePathSanitizerInterface $filePathSanitizer
    *   The file path sanitizer.
    * @param string $dir
    *   The export directory, relative to base dir inside data dir. It can
@@ @@
    * @param string|null $extension
    *   Export extension. Optional, it can be null or an empty string.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    * @see ExporterOutputConfigDefinitionPathInterface::setExtension();
    *
    * @see ExporterOutputConfigDefinitionPathInterface::setFilename();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


77) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/Definition/ExporterOutputConfigDefinitionInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Get the path object to use in a configuration definition.
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\Definition\Path\ExporterOutputConfigDefinitionPathInterface
+   * @return ExporterOutputConfigDefinitionPathInterface
    *   The path object.
    */
   public function getPath(): ExporterOutputConfigDefinitionPathInterface;
@@ @@
   /**
    * Get export language.
    *
-   * @return \Drupal\Core\Language\LanguageInterface
+   * @return LanguageInterface
    *   The export language.
    */
   public function getLanguage(): LanguageInterface;
@@ @@
    * depending on the language of the UI that triggered the operation, which is
    * an error.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   Export language.
    *
    * @return ExporterOutputConfigDefinitionInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


78) modules/contrib/static_suite/modules/static_export/src/Exporter/Output/Config/Definition/ExporterOutputConfigDefinition.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The path object to use in a configuration definition.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\Definition\Path\ExporterOutputConfigDefinitionPathInterface
+   * @var ExporterOutputConfigDefinitionPathInterface
    */
   protected $path;

@@ @@
   /**
    * Export language.
    *
-   * @var \Drupal\Core\Language\LanguageInterface
+   * @var LanguageInterface
    */
   protected $language;

@@ @@
   /**
    * Exporter output config definition constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\static_export\Exporter\Output\Config\Definition\Path\ExporterOutputConfigDefinitionPathInterface $path
+   * @param ExporterOutputConfigDefinitionPathInterface $path
    *   The path object to use in a configuration definition.
-   * @param \Drupal\Core\Language\LanguageInterface|null $language
+   * @param LanguageInterface|null $language
    *   Optional export language.
    * @param string|null $format
    *   Optional export format.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


79) modules/contrib/static_suite/modules/static_export/src/Exporter/ExporterReporter.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Resolver service constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


80) modules/contrib/static_suite/modules/static_export/src/Exporter/ExporterPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter;

+use Drupal\static_suite\StaticSuiteUserException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\static_export\Exporter\Output\Uri\UriInterface;
@@ @@
    * @return bool
    *   True if params are ok.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    * @see \Drupal\static_export\Exporter\ExporterPluginInterface::setOptions()
    */
   public function checkParams(array $options): bool;
@@ @@
    * @return ExporterPluginInterface
    *   The exporter's instance.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function setOptions(array $options): ExporterPluginInterface;

@@ @@
    * @param bool $lock
    *   Whether it should enable locking for disk operations.
    *
-   * @return \Drupal\static_export\File\FileCollectionGroup
+   * @return FileCollectionGroup
    *   A FileCollectionGroup of FileCollections with FileItems.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException *
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException *
    */
   public function write(array $options = [], bool $isStandalone = FALSE, bool $logToFile = TRUE, bool $lock = TRUE);

@@ @@
    * @param bool $lock
    *   Whether it should enable locking for disk operations.
    *
-   * @return \Drupal\static_export\File\FileCollectionGroup
+   * @return FileCollectionGroup
    *   A FileCollectionGroup of FileCollections with FileItems.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException *
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException *
    * @todo rename to write
-   *
    */
   public function export(array $options = [], bool $isStandalone = FALSE, bool $logToFile = TRUE, bool $lock = TRUE);

@@ @@
    * @param bool $lock
    *   Whether it should enable locking for disk operations.
    *
-   * @return \Drupal\static_export\File\FileCollectionGroup
+   * @return FileCollectionGroup
    *   A FileCollectionGroup of FileCollection with FileItems.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   public function delete(array $options = [], bool $isStandalone = FALSE, bool $logToFile = TRUE, bool $lock = TRUE);

@@ @@
    *
    * It can be obtained without actually running the exporter.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface|null
+   * @return UriInterface|null
    *   URI where data is stored
    */
   public function getUri(): ?UriInterface;
@@ @@
   /**
    * Get the resulting FileCollectionGroup.
    *
-   * @return \Drupal\static_export\File\FileCollectionGroup
+   * @return FileCollectionGroup
    *   The resulting FileCollectionGroup.
    */
   public function getResultingFileCollectionGroup(): FileCollectionGroup;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


81) modules/contrib/static_suite/modules/static_export/src/Exporter/ExporterPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter;

+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface;
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;

@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Disk writer.
    *
-   * @var \Drupal\static_export\File\FileCollectionWriter
+   * @var FileCollectionWriter
    */
   protected $fileCollectionWriter;

@@ @@
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtilsInterface
+   * @var EntityUtilsInterface
    */
   protected $entityUtils;

@@ @@
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * The language context service.
    *
-   * @var \Drupal\static_suite\Language\LanguageContextInterface
+   * @var LanguageContextInterface
    */
   protected $languageContext;

@@ @@
   /**
    * Unique ID helper.
    *
-   * @var \Drupal\static_suite\Utility\UniqueIdHelperInterface
+   * @var UniqueIdHelperInterface
    */
   protected $uniqueIdHelper;

@@ @@
    * It must be previously configured for each exported type, and instantiated
    * in the base abstract exporter of each type (entity, config, etc)
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface
+   * @var ExporterOutputConfigFactoryInterface
    */
   protected $exporterOutputConfigFactory;

@@ @@
   /**
    * Final FileCollectionGroup the exporter returns after doing all its work.
    *
-   * @var \Drupal\static_export\File\FileCollectionGroup
+   * @var FileCollectionGroup
    */
   protected $resultingFileCollectionGroup;

@@ @@
   /**
    * Output config data.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface
+   * @var ExporterOutputConfigInterface
    */
   protected $outputConfig;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   Output formatter manager.
-   * @param \Drupal\static_suite\Entity\EntityUtilsInterface $entity_utils
+   * @param EntityUtilsInterface $entity_utils
    *   Entity utils service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
-   * @param \Drupal\static_suite\Language\LanguageContextInterface $languageContext
+   * @param LanguageContextInterface $languageContext
    *   The language context service.
-   * @param \Drupal\static_export\File\FileCollectionWriter $file_collection_writer
+   * @param FileCollectionWriter $file_collection_writer
    *   Disk Writer.
-   * @param \Drupal\static_suite\Utility\UniqueIdHelperInterface $unique_id_helper
+   * @param UniqueIdHelperInterface $unique_id_helper
    *   Unique ID helper.
    */
   public function __construct(
@@ @@
    *
    * A helper method for exporter plugins to define their own dependencies.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    */
   protected function setExtraDependencies(ContainerInterface $container): void {
@@ @@
    *
    * Variants are not defined here but in calculateOutputConfig().
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface|null
+   * @return ExporterOutputConfigInterface|null
    *   Output config data.
    */
   abstract protected function getOutputDefinition(): ?ExporterOutputConfigInterface;
@@ @@
    * @return array|string
    *   Exported data.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   abstract protected function calculateDataFromResolver();

@@ @@
   /**
    * Calculate output config.
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface|null
+   * @return ExporterOutputConfigInterface|null
    *   Output config data.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   protected function calculateOutputConfig(): ?ExporterOutputConfigInterface {
     $outputConfig = $this->dispatchEvent(StaticExportEvents::CONFIG_STARTS)
@@ @@
    * @return array|string
    *   Data to be exported.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   protected function handleResolver() {
     $this->logMessage("Handling resolver.");
@@ @@
    * @return string
    *   Formatted entity data.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   protected function handleFormatter(array $data) {
     $this->logMessage("Handling formatter.");
@@ @@
    * @param string $formattedData
    *   The data to be saved.
    *
-   * @return \Drupal\static_export\File\FileCollectionGroup
+   * @return FileCollectionGroup
    *   A FileCollectionGroup. It could be more than one FileCollection because
    *   the fileCollectionWriter manages a queue.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteException
+   * @throws PluginException
    */
   protected function handleOutput(string $formattedData = "") {
     $this->logMessage("Handling output.");
@@ @@
    *
    * Always export variants unless this is already a variant export.
    *
-   * @return \Drupal\static_export\File\FileCollection
+   * @return FileCollection
    *   A file collection.
    */
   protected function exportVariants(): FileCollection {
@@ @@
    * For example, entityExporter and configExporter does export translations,
    * while localeExporter does not.
    *
-   * @return \Drupal\static_export\File\FileCollection
+   * @return FileCollection
    *   A file collection.
    */
   protected function exportTranslations(): FileCollection {
@@ @@
   /**
    * Get logger object.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   A logger object
    */
   public function logger(): LoggerInterface {
@@ @@
   /**
    * Returns output config.
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface
+   * @return ExporterOutputConfigInterface
    *   Config data.
    */
   public function getOutputConfig(): ExporterOutputConfigInterface {
@@ @@
    * @param array $data
    *   Data for the event.
    *
-   * @return \Drupal\static_export\Event\StaticExportEvent
+   * @return StaticExportEvent
    *   The event.
    */
   public function dispatchEvent(string $eventName, array $data = []): StaticExportEvent {
@@ @@

     // Dispatch the event.
     $this->logMessage("EVENT DISPATCH '$eventName' TRIGGERED");
-    $this->eventDispatcher->dispatch($eventName, $event);
+    $this->eventDispatcher->dispatch($event, $eventName);
     $this->logMessage("EVENT DISPATCH '$eventName' DONE");

     // Return the event.
@@ @@
    * It's a protected method wrapped in getTranslationLanguages(), which is in
    * charge of getting these definitions and dispatching events.
    *
-   * @return \Drupal\Core\Language\LanguageInterface[]
+   * @return LanguageInterface[]
    *   Array of languages
    */
   protected function getTranslationLanguageDefinitions(): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Data\Resolver;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginInterface
+   * @return DataResolverPluginInterface
    *   A newly created data resolver object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): DataResolverPluginInterface;
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginInterface
+   * @return DataResolverPluginInterface
    *   A newly created formatter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getInstance(array $options): DataResolverPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


83) modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginManager.php:26

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginInterface
+   * @return DataResolverPluginInterface
    *   A newly created resolver object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): DataResolverPluginInterface {
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginInterface
+   * @return DataResolverPluginInterface
    *   A newly created resolver object instance, or a previously
    *   instantiated one if available.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the data for an entity, using an specific resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The Entity to export.
    * @param string|null $variant
    *   Variant key, optional.
@@ @@
   /**
    * Get variant keys of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The Entity to search for variants.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


85) modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Data\Includes\Loader;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
    *   A newly created data include loader object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getInstance(array $options): DataIncludeLoaderPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


86) modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginManager.php:26

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderPluginInterface
+   * @return DataIncludeLoaderPluginInterface
    *   A newly created data include loader object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): DataIncludeLoaderPluginInterface {
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderPluginInterface
+   * @return DataIncludeLoaderPluginInterface
    *   A newly created data include loader object instance, or a previously
    *   instantiated one if available.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


87) modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginBase.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The URI factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface
+   * @var UriFactoryInterface
    */
   protected $uriFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface $uriFactory
+   * @param UriFactoryInterface $uriFactory
    *   The URI factory.
    */
   public function __construct(array $configuration,
@@ @@
    *
    * Internally it uses isIncludeAlreadyLoaded() and markIncludeAsLoaded().
    *
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriInterface $uri
+   * @param UriInterface $uri
    *   Th inclde to be loaded.
    *
    * @return string|null
@@ @@
    *
    * GraphQL fragments can not be repeated.
    *
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriInterface $uri
+   * @param UriInterface $uri
    *   The file to check.
    *
    * @return bool
@@ @@
   /**
    * Marks a fragment as already loaded.
    *
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriInterface $uri
+   * @param UriInterface $uri
    *   The file to be marked as already loaded.
    */
   protected function markIncludeAsLoaded(UriInterface $uri): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


88) modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderInterface.php:13

    ---------- begin diff ----------
@@ @@
    *
    * Find all includes in a URI's content and replace them.
    *
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriInterface $uri
+   * @param UriInterface $uri
    *   URI to be parsed.
    * @param string|null $mimeType
    *   Optional content mime type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


89) modules/contrib/static_suite/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoader.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter\Data\Includes\Loader;

+use Symfony\Component\Mime\MimeTypesInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\static_export\Exporter\Output\Uri\UriInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * The data include loader.
@@ @@
   /**
    * The mime type guesser.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;

@@ @@
   /**
    * The data include loader plugin manager.
    *
-   * @var \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderPluginManagerInterface
+   * @var DataIncludeLoaderPluginManagerInterface
    */
   protected $dataIncludeLoaderPluginManager;

@@ @@
    *
    * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface; $mimeTypeGuesser
    *   The mime type guesser.
-   * @param \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderPluginManagerInterface $dataIncludeLoaderPluginManager
+   * @param DataIncludeLoaderPluginManagerInterface $dataIncludeLoaderPluginManager
    *   The data include loader plugin manager.
    */
-  public function __construct(MimeTypeGuesserInterface $mimeTypeGuesser, DataIncludeLoaderPluginManagerInterface $dataIncludeLoaderPluginManager) {
+  public function __construct(MimeTypesInterface $mimeTypeGuesser, DataIncludeLoaderPluginManagerInterface $dataIncludeLoaderPluginManager) {
     $this->mimeTypeGuesser = $mimeTypeGuesser;
     $this->dataIncludeLoaderPluginManager = $dataIncludeLoaderPluginManager;
   }
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function loadUri(UriInterface $uri, string $mimeType = NULL): string {
     if (!$mimeType) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function loadString(string $contents, string $mimeType = NULL): string {
     if (!$mimeType) {
@@ @@
    * @return string
    *   The processed string.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function load(string $contents, string $mimeType): string {
     $definitionsByMimetype = $this->dataIncludeLoaderPluginManager->getDefinitionsByMimeType($mimeType);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


90) modules/contrib/static_suite/modules/static_export/src/Exporter/ConstrainedExporterPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
    * @return ExporterPluginInterface
    *   Default exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @todo Define ExporterInterface as the return type when minimum requirements
    *   are upgraded to PHP 7.4
@@ @@
    * @return ExporterPluginInterface
    *   Default exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @todo Define ExporterInterface as the return type when minimum requirements
    *   are upgraded to PHP 7.4
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


91) modules/contrib/static_suite/modules/static_export/src/Exporter/ConstrainedExporterPluginManagerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Exporter;

+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\static_suite\Plugin\CacheablePluginManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


92) modules/contrib/static_suite/modules/static_export/src/EventSubscriber/LocaleEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\EventSubscriber;

+use Drupal\static_export\Exporter\ExporterPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\locale\LocaleEvent;
@@ @@
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Locale exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterManager;

@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\static_export\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Static Suite Utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * The exporter that will handle the event.
    *
-   * @var \Drupal\static_export\Exporter\ExporterPluginInterface
+   * @var ExporterPluginInterface
    */
   protected $exporter;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal config factory.
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   Exporter Manager.
-   * @param \Drupal\static_export\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   Messenger service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Suite Utils.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LocaleExporterPluginManagerInterface $localeExporterManager, Messenger $messenger, StaticSuiteUtilsInterface $static_suite_utils) {
@@ @@
   /**
    * Reacts to a save event.
    *
-   * @param \Drupal\locale\LocaleEvent $event
+   * @param LocaleEvent $event
    *   A locale save event.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


93) modules/contrib/static_suite/modules/static_export/src/EventSubscriber/LanguageConfigEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\EventSubscriber;

+use Drupal\static_export\Exporter\ExporterPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
@@ @@
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Custom exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface
+   * @var CustomExporterPluginManagerInterface
    */
   protected $customExporterPluginManager;

@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\static_export\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Static Suite Utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * The exporter that will handle the event.
    *
-   * @var \Drupal\static_export\Exporter\ExporterPluginInterface
+   * @var ExporterPluginInterface
    */
   protected $exporter;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config factory.
-   * @param \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface $customExporterPluginManager
+   * @param CustomExporterPluginManagerInterface $customExporterPluginManager
    *   Custom exporter manager.
-   * @param \Drupal\static_export\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   Messenger service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $staticSuiteUtils
+   * @param StaticSuiteUtilsInterface $staticSuiteUtils
    *   Static Suite Utils.
    */
   public function __construct(ConfigFactoryInterface $configFactory, CustomExporterPluginManagerInterface $customExporterPluginManager, Messenger $messenger, StaticSuiteUtilsInterface $staticSuiteUtils) {
@@ @@
   /**
    * Reacts to a CRUD event on language.negotiation.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    *
    * @return bool
@@ @@
   /**
    * Reacts to a CRUD override event on language.negotiation.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   The configuration event.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


94) modules/contrib/static_suite/modules/static_export/src/EventSubscriber/EntityReferenceEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\EventSubscriber;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\node\Entity\Node;
 use Drupal\static_export\Entity\ExportableEntityManagerInterface;
 use Drupal\static_export\Event\StaticExportEvent;
@@ @@
   /**
    * Entity exporter Manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface
+   * @var EntityExporterPluginManagerInterface
    */
   protected $entityExporterPluginManager;

@@ @@
   /**
    * Entity reference finder.
    *
-   * @var \Drupal\static_suite\Entity\EntityReferenceFinderInterface
+   * @var EntityReferenceFinderInterface
    */
   protected $entityReferenceFinder;

@@ @@
   /**
    * Exportable entity manager.
    *
-   * @var \Drupal\static_export\Entity\ExportableEntityManagerInterface
+   * @var ExportableEntityManagerInterface
    */
   protected $exportableEntityManager;

@@ @@
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;

@@ @@
   /**
    * Constructs the EntityEventSubscriber object.
    *
-   * @param \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface $entityExporterPluginManager
+   * @param EntityExporterPluginManagerInterface $entityExporterPluginManager
    *   Exporter Manager.
-   * @param \Drupal\static_suite\Entity\EntityReferenceFinderInterface $entityReferenceFinder
+   * @param EntityReferenceFinderInterface $entityReferenceFinder
    *   Entity reference finder.
-   * @param \Drupal\static_export\Entity\ExportableEntityManagerInterface $exportableEntityManager
+   * @param ExportableEntityManagerInterface $exportableEntityManager
    *   Exportable entity manager.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entity_utils
+   * @param EntityUtils $entity_utils
    *   Utils for working with entities.
    */
   public function __construct(EntityExporterPluginManagerInterface $entityExporterPluginManager, EntityReferenceFinderInterface $entityReferenceFinder, ExportableEntityManagerInterface $exportableEntityManager, EntityUtils $entity_utils) {
@@ @@
   /**
    * Reacts to a StaticExportEvents::WRITE_STARTS event.
    *
-   * @param \Drupal\static_export\Event\StaticExportEvent $event
+   * @param StaticExportEvent $event
    *   The Static Export event.
    *
-   * @return \Drupal\static_export\Event\StaticExportEvent
+   * @return StaticExportEvent
    *   The processed event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
+   * @throws StaticSuiteException
    */
   public function onWriteStarts(StaticExportEvent $event): StaticExportEvent {
     $eventExporter = $event->getExporter();
@@ @@
   /**
    * Exports entities referenced by the original one.
    *
-   * @param \Drupal\static_export\Exporter\ExporterPluginInterface $entityExporter
+   * @param ExporterPluginInterface $entityExporter
    *   The event entity exporter.
    *
-   * @return \Drupal\static_export\File\FileCollection
+   * @return FileCollection
    *   A file collection.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
+   * @throws StaticSuiteException
    */
   protected function exportReferencedEntities(ExporterPluginInterface $entityExporter): FileCollection {
     $fileCollection = new FileCollection($entityExporter->uniqueId());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


95) modules/contrib/static_suite/modules/static_export/src/EventSubscriber/ConfigEventSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Config exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterManager;

@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\static_export\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Static Suite Utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * The exporter that will handle the event.
    *
-   * @var \Drupal\static_export\Exporter\ExporterPluginInterface
+   * @var ExporterPluginInterface
    */
   protected $exporter;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config factory.
-   * @param \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface $configExporterManager
+   * @param ConfigExporterPluginManagerInterface $configExporterManager
    *   Config exporter manager.
-   * @param \Drupal\static_export\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   Messenger service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $staticSuiteUtils
+   * @param StaticSuiteUtilsInterface $staticSuiteUtils
    *   Static Suite Utils.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ConfigExporterPluginManagerInterface $configExporterManager, Messenger $messenger, StaticSuiteUtilsInterface $staticSuiteUtils) {
@@ @@
   /**
    * Reacts to a save event.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    *
    * @return bool
@@ @@
   /**
    * Reacts to a save override event.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   The configuration event.
    *
    * @return bool
@@ @@
    * ExporterPluginInterface::OPERATION_DELETE operation on the exporter, since
    * the whole configuration object is being deleted, not only a translation.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    *
    * @return bool
@@ @@
    * configuration translation is deleted, the configuration object still exists
    * and needs to be re-exported.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   The configuration event.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


96) modules/contrib/static_suite/modules/static_export/src/Event/StaticExportEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Event;

+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\static_export\Exporter\ExporterPluginInterface;
 use Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface;
 use Drupal\static_export\File\FileCollection;
 use Drupal\static_export\File\FileCollectionGroup;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Generic static export event to be fired.
@@ @@
   /**
    * The exporter that triggers the event.
    *
-   * @var \Drupal\static_export\Exporter\ExporterPluginInterface
+   * @var ExporterPluginInterface
    */
   protected $exporter;

@@ @@
   /**
    * An ExporterOutputConfig object.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface
+   * @var ExporterOutputConfigInterface
    */
   protected $outputConfig;

@@ @@
   /**
    * Array of translation languages.
    *
-   * @var \Drupal\Core\Language\LanguageInterface[]
+   * @var LanguageInterface[]
    */
   protected $translationLanguages;

@@ @@
   /**
    * A FileCollection with processed files.
    *
-   * @var \Drupal\static_export\File\FileCollection
+   * @var FileCollection
    */
   protected $fileCollection;

@@ @@
   /**
    * A FileCollectionGroup with processed files.
    *
-   * @var \Drupal\static_export\File\FileCollectionGroup
+   * @var FileCollectionGroup
    */
   protected $fileCollectionGroup;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\static_export\Exporter\ExporterPluginInterface $exporter
+   * @param ExporterPluginInterface $exporter
    *   The exporter.
    */
   public function __construct(ExporterPluginInterface $exporter) {
@@ @@
   /**
    * Get the exporter.
    *
-   * @return \Drupal\static_export\Exporter\ExporterPluginInterface
+   * @return ExporterPluginInterface
    *   The exporter.
    */
   public function getExporter(): ExporterPluginInterface {
@@ @@
   /**
    * Get config data.
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface|null
+   * @return ExporterOutputConfigInterface|null
    *   Config data.
    */
   public function getOutputConfig(): ?ExporterOutputConfigInterface {
@@ @@
   /**
    * Sets config data.
    *
-   * @param \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface $outputConfig
+   * @param ExporterOutputConfigInterface $outputConfig
    *   Output config.
    */
   public function setOutputConfig(ExporterOutputConfigInterface $outputConfig): void {
@@ @@
   /**
    * Get translation languages.
    *
-   * @return \Drupal\Core\Language\LanguageInterface[]|null
+   * @return LanguageInterface[]|null
    *   Array of translation languages.
    */
   public function getTranslationLanguages(): ?array {
@@ @@
   /**
    * Set translation languages.
    *
-   * @param \Drupal\Core\Language\LanguageInterface[] $translationLanguages
+   * @param LanguageInterface[] $translationLanguages
    *   Array of translation languages.
    */
   public function setTranslationLanguages(array $translationLanguages): void {
@@ @@
   /**
    * Get FileCollection.
    *
-   * @return \Drupal\static_export\File\FileCollection|null
+   * @return FileCollection|null
    *   Exporter's FileCollection.
    */
   public function getFileCollection(): ?FileCollection {
@@ @@
   /**
    * Set exporter's FileCollection.
    *
-   * @param \Drupal\static_export\File\FileCollection $fileCollection
+   * @param FileCollection $fileCollection
    *   A FileCollection.
    */
   public function setFileCollection(FileCollection $fileCollection): void {
@@ @@
   /**
    * Get FileCollectionGroup.
    *
-   * @return \Drupal\static_export\File\FileCollectionGroup|null
+   * @return FileCollectionGroup|null
    *   A FileCollectionGroup.
    */
   public function getFileCollectionGroup(): ?FileCollectionGroup {
@@ @@
   /**
    * Set exporter's FileCollectionGroup.
    *
-   * @param \Drupal\static_export\File\FileCollectionGroup $fileCollectionGroup
+   * @param FileCollectionGroup $fileCollectionGroup
    *   A FileCollectionGroup.
    */
   public function setFileCollectionGroup(FileCollectionGroup $fileCollectionGroup): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


97) modules/contrib/static_suite/modules/static_export/src/Event/ExportableEntityListEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event for Exportable Entity List.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


98) modules/contrib/static_suite/modules/static_export/src/Entity/ExportableEntityManagerInterface.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Given an entity, get its ExportableEntity with its export config.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
-   * @return \Drupal\static_export\Entity\ExportableEntityInterface|null
+   * @return ExportableEntityInterface|null
    *   The ExportableEntity for the $entity param
    */
   public function getExportableEntity(EntityInterface $entity): ?ExportableEntityInterface;
@@ @@
   /**
    * Tells whether an entity is exportable (exists and it's enabled).
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to be checked.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


99) modules/contrib/static_suite/modules/static_export/src/Entity/ExportableEntityManager.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Entity utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtilsInterface
+   * @var EntityUtilsInterface
    */
   protected $entityUtils;

@@ @@
   /**
    * ExportableEntityManager constructor.
    *
-   * @param \Drupal\static_suite\Entity\EntityUtilsInterface $entityUtils
+   * @param EntityUtilsInterface $entityUtils
    *   Entity utils.
    */
   public function __construct(EntityUtilsInterface $entityUtils) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getAllExportableEntities(): array {
     $allExportableEntities = [];
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getExportableEntitiesThatAreStatifiedPages(): array {
     $exportableEntitiesThatAreStatifiedPages = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


100) modules/contrib/static_suite/modules/static_export/src/Entity/ExportableEntityInterface.php:75

    ---------- begin diff ----------
@@ @@
   /**
    * Get export extension.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to get extension from.
    *
    * @return string
@@ @@
    * Injection. Drupal Core uses a different strategy for such cases, where
    * dependencies are returned by a wrapper method like this one.
    *
-   * @return \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @return OutputFormatterPluginManagerInterface
    */
   public function outputFormatterManager(): OutputFormatterPluginManagerInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


101) modules/contrib/static_suite/modules/static_export/src/Controller/OutputFormattersList.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The output formatter manager.
    */
   public function __construct(RouteProviderInterface $route_provider, OutputFormatterPluginManagerInterface $outputFormatterManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


102) modules/contrib/static_suite/modules/static_export/src/Controller/LogViewerController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
    * @param string $uniqueId
    *   A unique id from a export operation.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
+   * @return RedirectResponse|Response
    *   The response.
    */
   public function viewExportLog(string $uniqueId) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


103) modules/contrib/static_suite/modules/static_export/src/Controller/FileViewerController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Controller;

+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderInterface;
@@ @@
 use Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface;
 use Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The mime type guesser.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;

@@ @@
   /**
    * The URI factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $uriFactory;

@@ @@
   /**
    * The output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;

@@ @@
   /**
    * The data include loader.
    *
-   * @var \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderInterface
+   * @var DataIncludeLoaderInterface
    */
   protected $dataIncludeLoader;

@@ @@
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mimeTypeGuesser
+   * @param MimeTypesInterface $mimeTypeGuesser
    *   The mime type guesser.
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface $uriFactory
+   * @param UriFactoryInterface $uriFactory
    *   The URI factory.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The output formatter manager.
-   * @param \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderInterface $dataIncludeLoader
+   * @param DataIncludeLoaderInterface $dataIncludeLoader
    *   The data include loader.
    */
   public function __construct(
     AccountProxyInterface $current_user,
-    MimeTypeGuesserInterface $mimeTypeGuesser,
+    MimeTypesInterface $mimeTypeGuesser,
     UriFactoryInterface $uriFactory,
     OutputFormatterPluginManagerInterface $outputFormatterManager,
     DataIncludeLoaderInterface $dataIncludeLoader
@@ @@
   /**
    * Controller to return a POST or a GET parameter.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response.
    */
   public function viewPath(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


104) modules/contrib/static_suite/modules/static_export/src/Controller/ExportedUriResolverController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Entity utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtilsInterface
+   * @var EntityUtilsInterface
    */
   protected $entityUtils;

@@ @@
   /**
    * Entity exporter path resolver.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\Output\Uri\Resolver\EntityExporterUriResolverInterface
+   * @var EntityExporterUriResolverInterface
    */
   protected $entityExporterUriResolver;

@@ @@
   /**
    * The URI resolver for page paths.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverInterface
+   * @var PagePathUriResolverInterface
    */
   protected $pagePathUriResolver;

@@ @@
   /**
    * Resolver controller constructor.
    *
-   * @param \Drupal\static_suite\Entity\EntityUtilsInterface $entityUtils
+   * @param EntityUtilsInterface $entityUtils
    *   Entity utils.
-   * @param \Drupal\static_export\Exporter\Type\Entity\Output\Uri\Resolver\EntityExporterUriResolverInterface $entityExporterUriResolver
+   * @param EntityExporterUriResolverInterface $entityExporterUriResolver
    *   Exported URI resolver.
-   * @param \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverInterface $pagePathUriResolver
+   * @param PagePathUriResolverInterface $pagePathUriResolver
    *   The URI resolver for page paths.
    */
   public function __construct(
@@ @@
    * @param string|null $langcode
    *   Optional language id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    */
   public function getExportedUriByEntityData(string $entityTypeId, string $entityId, string $langcode = NULL): JsonResponse {
@@ @@
    * meant to be accessed from outside Drupal, so we make the scheme visible
    * to make it usable.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    */
   public function getExportedUriByPagePath(Request $request): JsonResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


105) modules/contrib/static_suite/modules/static_export/src/Controller/ExportableLocaleList.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Controller;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The locale exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterManager;

@@ @@
   /**
    * The exported locale file resolver.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\Output\Uri\Resolver\LocaleExporterUriResolverInterface
+   * @var LocaleExporterUriResolverInterface
    */
   protected $localeExporterUriResolver;

@@ @@
   /**
    * The locale output configuration factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface
+   * @var ExporterOutputConfigFactoryInterface
    */
   protected $localeExporterOutputConfigFactory;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   The locale exporter manager.
-   * @param \Drupal\static_export\Exporter\Type\Locale\Output\Uri\Resolver\LocaleExporterUriResolverInterface $localeExporterUriResolver
+   * @param LocaleExporterUriResolverInterface $localeExporterUriResolver
    *   Locale exporter path resolver.
-   * @param \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface $localeExporterOutputConfigFactory
+   * @param ExporterOutputConfigFactoryInterface $localeExporterOutputConfigFactory
    *   The locale output configuration factory.
    */
   public function __construct(LanguageManagerInterface $languageManager, LocaleExporterPluginManagerInterface $localeExporterManager, LocaleExporterUriResolverInterface $localeExporterUriResolver, ExporterOutputConfigFactoryInterface $localeExporterOutputConfigFactory) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function listExportableLocales() {
     $config = $this->config('static_export.settings');
@@ @@
                 'view' => [
                   'title' => $this->t('View'),
                   'weight' => 10,
-                  'url' => Url::fromUri(file_create_url($exportUri)),
+                  'url' => \Drupal::service('file_url_generator')->generate($exportUri),
                   'attributes' => [
                     'target' => '_blank',
                   ],
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


106) modules/contrib/static_suite/modules/static_export/src/Controller/ExportableEntityListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Controller;

+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;

@@ @@
   /**
    * The resolver manager.
    *
-   * @var \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface
+   * @var DataResolverPluginManagerInterface
    */
   protected $dataResolverManager;

@@ @@
   /**
    * The output configuration factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface
+   * @var ExporterOutputConfigFactoryInterface
    */
   protected $exporterOutputConfigFactory;

@@ @@
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The output formatter manager.
-   * @param \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface $dataResolverManager
+   * @param DataResolverPluginManagerInterface $dataResolverManager
    *   The data resolver manager.
-   * @param \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface $exporterOutputConfigFactory
+   * @param ExporterOutputConfigFactoryInterface $exporterOutputConfigFactory
    *   The output configuration factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ConfigFactoryInterface $config_factory, EventDispatcherInterface $event_dispatcher, LanguageManagerInterface $languageManager, OutputFormatterPluginManagerInterface $outputFormatterManager, DataResolverPluginManagerInterface $dataResolverManager, ExporterOutputConfigFactoryInterface $exporterOutputConfigFactory) {
@@ @@
     // alter this table's output.
     $event = new ExportableEntityListEvent();
     $event->setData(['header' => $finalHeader]);
-    $processedEvent = $this->eventDispatcher->dispatch(ExportableEntityListEvents::HEADER_BUILT, $event);
+    $processedEvent = $this->eventDispatcher->dispatch($event, ExportableEntityListEvents::HEADER_BUILT);
     return $processedEvent->getData()['header'];
   }

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function buildRow(EntityInterface $entity) {
     $row['label'] = $entity->label();
@@ @@
       // alter this table's output.
       $event = new ExportableEntityListEvent();
       $event->setData(['row' => $finalRow, 'entity' => $entity]);
-      $processedEvent = $this->eventDispatcher->dispatch(ExportableEntityListEvents::ROW_BUILT, $event);
+      $processedEvent = $this->eventDispatcher->dispatch($event, ExportableEntityListEvents::ROW_BUILT);
       return $processedEvent->getData()['row'];
     }
     return $row;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


107) modules/contrib/static_suite/modules/static_export/src/Controller/ExportableConfigList.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The config exporter path resolver.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\Output\Uri\Resolver\ConfigExporterUriResolverInterface
+   * @var ConfigExporterUriResolverInterface
    */
   protected $configExporterUriResolver;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\static_export\Exporter\Type\Config\Output\Uri\Resolver\ConfigExporterUriResolverInterface $configExporterUriResolver
+   * @param ConfigExporterUriResolverInterface $configExporterUriResolver
    *   The config exporter path resolver.
    */
   public function __construct(ConfigExporterUriResolverInterface $configExporterUriResolver) {
@@ @@
             'view' => [
               'title' => $this->t('View'),
               'weight' => 10,
-              'url' => Url::fromUri(file_create_url($exportUri)),
+              'url' => \Drupal::service('file_url_generator')->generate($exportUri),
               'attributes' => [
                 'target' => '_blank',
               ],
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


108) modules/contrib/static_suite/modules/static_export/src/Controller/DataResolversList.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The data resolver manager.
    *
-   * @var \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface
+   * @var DataResolverPluginManagerInterface
    */
   protected $dataResolverManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface $dataResolverManager
+   * @param DataResolverPluginManagerInterface $dataResolverManager
    *   The resolver manager.
    */
   public function __construct(RouteProviderInterface $route_provider, DataResolverPluginManagerInterface $dataResolverManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


109) modules/contrib/static_suite/modules/static_export/src/Controller/CustomExporterList.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Controller;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Render\Markup;
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The custom exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface
+   * @var CustomExporterPluginManagerInterface
    */
   protected $customExporterManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $routeProvider
+   * @param RouteProviderInterface $routeProvider
    *   The route provider.
-   * @param \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface $customExporterManager
+   * @param CustomExporterPluginManagerInterface $customExporterManager
    *   The custom exporter manager.
    */
   public function __construct(LanguageManagerInterface $languageManager, RouteProviderInterface $routeProvider, CustomExporterPluginManagerInterface $customExporterManager) {
@@ @@
   /**
    * Get a list of custom exporters.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function listCustomExporters(): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


110) modules/contrib/static_suite/modules/static_export/src/Config/ConfigOverrider.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

   /**
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
    */
   public function __construct(ConfigFactoryInterface $configFactory, StaticSuiteUtilsInterface $static_suite_utils) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


111) modules/contrib/static_suite/modules/static_export/src/Commands/StreamWrapperCommands.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The URI factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface
+   * @var UriFactoryInterface
    */
   protected $uriFactory;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * StaticExportCommands constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system service.
    *
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface $uriFactory
+   * @param UriFactoryInterface $uriFactory
    *   The URI factory.
    */
   public function __construct(FileSystemInterface $fileSystem, UriFactoryInterface $uriFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


112) modules/contrib/static_suite/modules/static_export/src/Commands/LocaleCommands.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Locale exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterManager;

@@ @@
   /**
    * File collection formatter.
    *
-   * @var \Drupal\static_export\File\FileCollectionFormatter
+   * @var FileCollectionFormatter
    */
   protected $fileCollectionFormatter;

@@ @@
   /**
    * StaticExportCommands constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager.
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   Locale exporter manager.
-   * @param \Drupal\static_export\File\FileCollectionFormatter $file_collection_formatter
+   * @param FileCollectionFormatter $file_collection_formatter
    *   File collection formatter.
    */
   public function __construct(LanguageManagerInterface $language_manager, LocaleExporterPluginManagerInterface $localeExporterManager, FileCollectionFormatter $file_collection_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


113) modules/contrib/static_suite/modules/static_export/src/Commands/EntityCommands.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;

@@ @@
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_export\File\FileCollectionFormatter
+   * @var FileCollectionFormatter
    */
   protected $fileCollectionFormatter;

@@ @@
   /**
    * Entity Exporter Manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface
+   * @var EntityExporterPluginManagerInterface
    */
   protected $entityExporterPluginManager;

@@ @@
   /**
    * StaticExportCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface $entityExporterPluginManager
+   * @param EntityExporterPluginManagerInterface $entityExporterPluginManager
    *   Entity Exporter Manager.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Utils for working with entities.
-   * @param \Drupal\static_export\File\FileCollectionFormatter $fileCollectionFormatter
+   * @param FileCollectionFormatter $fileCollectionFormatter
    *   File collection formatter.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


114) modules/contrib/static_suite/modules/static_export/src/Commands/CustomCommands.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Custom exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface
+   * @var CustomExporterPluginManagerInterface
    */
   protected $customExporterPluginManager;

@@ @@
   /**
    * File collection formatter.
    *
-   * @var \Drupal\static_export\File\FileCollectionFormatter
+   * @var FileCollectionFormatter
    */
   protected $fileCollectionFormatter;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface $customExporterPluginManager
+   * @param CustomExporterPluginManagerInterface $customExporterPluginManager
    *   Custom exporter manager.
-   * @param \Drupal\static_export\File\FileCollectionFormatter $file_collection_formatter
+   * @param FileCollectionFormatter $file_collection_formatter
    *   File collection formatter.
    */
   public function __construct(CustomExporterPluginManagerInterface $customExporterPluginManager, FileCollectionFormatter $file_collection_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


115) modules/contrib/static_suite/modules/static_export/src/Commands/CopyDataCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Commands;

+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\static_export\Exporter\ExporterPluginInterface;
 use Drupal\static_suite\Lock\LockBackendInterface;
@@ @@
   /**
    * Drupal's config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * StaticExportCopyDataCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal's config factory.
-   * @param \Drupal\static_suite\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock system from Static Suite.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LockBackendInterface $lock) {
@@ @@
    *   An associative array of options whose values come
    *   from cli, aliases, config, etc.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    * @command static-export:copy-data-dir
    *
    * @option tar target tar file
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


116) modules/contrib/static_suite/modules/static_export/src/Commands/ConfigCommands.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal's config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Config exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterManager;

@@ @@
   /**
    * File collection formatter.
    *
-   * @var \Drupal\static_export\File\FileCollectionFormatter
+   * @var FileCollectionFormatter
    */
   protected $fileCollectionFormatter;

@@ @@
   /**
    * StaticExportCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal's config factory.
-   * @param \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface $configExporterManager
+   * @param ConfigExporterPluginManagerInterface $configExporterManager
    *   Config exporter manager.
-   * @param \Drupal\static_export\File\FileCollectionFormatter $file_collection_formatter
+   * @param FileCollectionFormatter $file_collection_formatter
    *   File collection formatter.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConfigExporterPluginManagerInterface $configExporterManager, FileCollectionFormatter $file_collection_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


117) modules/contrib/static_suite/modules/static_export/src/Annotation/StaticPagePathUriResolver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


118) modules/contrib/static_suite/modules/static_export/src/Annotation/StaticOutputFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


119) modules/contrib/static_suite/modules/static_export/src/Annotation/StaticExporterAnnotationBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


120) modules/contrib/static_suite/modules/static_export/src/Annotation/StaticDataResolver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


121) modules/contrib/static_suite/modules/static_export/src/Annotation/StaticDataIncludeLoader.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


122) modules/contrib/static_suite/modules/static_export/modules/static_export_jsonapi_data_resolver/static_export_jsonapi_data_resolver.module:67

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   Form array
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state
  */
 function _static_export_jsonapi_data_resolver_form_validate($form, FormStateInterface $form_state) {
@@ @@
  *
  * @param array $form
  *   Form array
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state
  */
 function _static_export_jsonapi_data_resolver_form_submit($form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


123) modules/contrib/static_suite/modules/static_export/modules/static_export_jsonapi_data_resolver/src/Plugin/static_export/Data/Resolver/JsonapiDataResolver.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Handler for requesting data from JSON:API.
    *
-   * @var \Drupal\static_export_jsonapi_data_resolver\JsonapiRequestHandlerInterface
+   * @var JsonapiRequestHandlerInterface
    */
   protected $jsonApiRequestHandler;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_export_jsonapi_data_resolver\JsonapiRequestHandlerInterface $jsonApiRequestHandler
+   * @param JsonapiRequestHandlerInterface $jsonApiRequestHandler
    *   Handler for requesting data from JSON:API.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


124) modules/contrib/static_suite/modules/static_export/modules/static_export_jsonapi_data_resolver/src/JsonapiRequestHandler.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Symfony\Component\HttpKernel\HttpKernelInterface definition.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   Http kernel service.
    */
   public function __construct(HttpKernelInterface $http_kernel) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


125) modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/Plugin/static_export/Data/Resolver/GraphqlDataResolver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export_graphql_data_resolver\Plugin\static_export\Data\Resolver;

+use Drupal\static_suite\StaticSuiteUserException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginBase;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;

@@ @@
   /**
    * Handler for querying GraphQL.
    *
-   * @var \Drupal\static_export_graphql_data_resolver\GraphqlQueryHandlerInterface
+   * @var GraphqlQueryHandlerInterface
    */
   protected $graphqlQueryHandler;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Entity utils service.
-   * @param \Drupal\static_export_graphql_data_resolver\GraphqlQueryHandlerInterface $graphqlQueryHandler
+   * @param GraphqlQueryHandlerInterface $graphqlQueryHandler
    *   Service for querying GraphQL.
    */
   public function __construct(array $configuration,
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public function resolve(EntityInterface $entity, string $variant = NULL, string $langcode = NULL): array {
     $query = $this->graphqlQueryHandler->getQueryFileContents($entity, $variant);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


126) modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/GraphqlQueryHandlerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_export_graphql_data_resolver;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
    * @return array
    *   The query result.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
    */
   public function query(string $graphqlQuery, array $variables = []): array;

@@ @@
   /**
    * Get the contents of a GraphQL query file for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the GraphQL file contents are obtained.
    * @param string|null $variant
    *   Variant key, optional.
@@ @@
    * @return string|null
    *   The contents of a GraphQL query file.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
    */
   public function getQueryFileContents(EntityInterface $entity, string $variant = NULL): ?string;

@@ @@
   /**
    * Get an array of possible variables to be used in a GraphQL query.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the GraphQL query variables are obtained.
    * @param string|null $langcode
    *   Optional language.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


127) modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/GraphqlQueryHandler.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;

@@ @@
   /**
    * The static suite utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtils
+   * @var StaticSuiteUtils
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $accountSwitcher
+   * @param AccountSwitcherInterface $accountSwitcher
    *   The account switcher.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
    * @param \Drupal\graphql\GraphQL\Execution\QueryProcessor $queryProcessor
    *   GraphQL query processor.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Entity utils service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtils $staticSuiteUtils
+   * @param StaticSuiteUtils $staticSuiteUtils
    *   The static suite utils.
    */
   public function __construct(AccountSwitcherInterface $accountSwitcher,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


128) modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/EventSubscriber/ExportableEntityListEventSubscriber.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Reacts to a ExportableEntityListEvents::ROW_BUILT event.
    *
-   * @param \Drupal\static_export\Event\ExportableEntityListEvent $event
+   * @param ExportableEntityListEvent $event
    *   The Exportable Entity List event.
    *
-   * @return \Drupal\static_export\Event\ExportableEntityListEvent
+   * @return ExportableEntityListEvent
    *   The processed event.
    */
   public function onRowBuilt(ExportableEntityListEvent $event): ExportableEntityListEvent {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


129) modules/contrib/static_suite/modules/static_export/modules/static_export_graphql_data_resolver/src/Config/ConfigOverrider.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
    */
   public function __construct(ConfigFactoryInterface $configFactory, StaticSuiteUtilsInterface $static_suite_utils) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


130) modules/contrib/static_suite/modules/static_deploy/src/Routing/RouteSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Static Builder Manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * Static Deployer Manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;

@@ @@
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder Manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   Static Deployer Manager.
    */
   public function __construct(StaticBuilderPluginManagerInterface $staticBuilderPluginManager, StaticDeployerPluginManagerInterface $staticDeployerPluginManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


131) modules/contrib/static_suite/modules/static_deploy/src/Plugin/StaticDeployerPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_deploy\Plugin;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_deploy\Plugin\StaticDeployerPluginInterface
+   * @return StaticDeployerPluginInterface
    *   A newly created exporter object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): StaticDeployerPluginInterface;
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_deploy\Plugin\StaticDeployerPluginInterface
+   * @return StaticDeployerPluginInterface
    *   A newly created exporter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getInstance(array $options): StaticDeployerPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


132) modules/contrib/static_suite/modules/static_deploy/src/Plugin/StaticDeployerPluginManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    *
    * Wraps original createInstance() to add typing.
    *
-   * @return \Drupal\static_deploy\Plugin\StaticDeployerPluginInterface
+   * @return StaticDeployerPluginInterface
    *   A newly created static deployer object instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []): StaticDeployerPluginInterface {
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_deploy\Plugin\StaticDeployerPluginInterface
+   * @return StaticDeployerPluginInterface
    *   A newly created static builder object instance, or a previously
    *   instantiated one if available.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


133) modules/contrib/static_suite/modules/static_deploy/src/Plugin/StaticDeployerPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_deploy\Plugin;

+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ @@
    * It forks a new process if process is asynchronous, or calls run()
    * otherwise.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function init();

@@ @@
    *
    * Internally, it calls deploy() or rollback() if needed.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function run();

@@ @@
    *
    * This method should be over ridden by plugins to reflect each use case.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deploy(): void;

@@ @@
    *
    * This method should be over ridden by plugins to reflect each use case.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function rollback(): void;

@@ @@
   /**
    * Get the configured release manager.
    *
-   * @return \Drupal\static_build\Release\ReleaseManagerInterface
+   * @return ReleaseManagerInterface
    *   The current release manager.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function getReleaseManager(): ReleaseManagerInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


134) modules/contrib/static_suite/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_deploy\Plugin;

+use Drupal\static_build\Release\ReleaseInterface;
+use Drupal\static_build\Release\Task\Task;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Drupal file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Release Manager.
    *
-   * @var \Drupal\static_build\Release\ReleaseManagerInterface
+   * @var ReleaseManagerInterface
    */
   protected $releaseManager;

@@ @@
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * Current release.
    *
-   * @var \Drupal\static_build\Release\ReleaseInterface
+   * @var ReleaseInterface
    */
   protected $currentRelease;

@@ @@
   /**
    * Current release task.
    *
-   * @var \Drupal\static_build\Release\Task\Task
+   * @var Task
    */
   protected $releaseTask;

@@ @@
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * The static builder that this deployer is using.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @var StaticBuilderPluginInterface
    */
   protected $staticBuilder;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   Drupal file system service.
-   * @param \Drupal\static_suite\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock system from Static Suite.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $static_builder_manager
+   * @param StaticBuilderPluginManagerInterface $static_builder_manager
    *   The static builder plugin manager.
-   * @param \Drupal\static_build\Release\ReleaseManager $releaseManager
+   * @param ReleaseManager $releaseManager
    *   The release manager service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public function __construct(
     array $configuration,
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public static function create(ContainerInterface $container,
                                 array $configuration,
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
    */
   public function setConfiguration(array $configuration) {
     // Check that builder-id option is present.
@@ @@
    * @return array
    *   An associative array with the default configuration.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
    */
   protected function baseConfigurationDefaults(string $builderId): array {
     $config = $this->configFactory->get('static_deploy.settings');
@@ @@
    * @param array $data
    *   Data for the event.
    *
-   * @return \Drupal\static_deploy\Event\StaticDeployEvent
+   * @return StaticDeployEvent
    *   The event.
    */
   protected function dispatchEvent(string $eventName, array $data = []): StaticDeployEvent {
@@ @@

     // Dispatch the event.
     $this->logMessage("EVENT DISPATCH '$eventName' TRIGGERED");
-    $this->eventDispatcher->dispatch($eventName, $event);
+    $this->eventDispatcher->dispatch($event, $eventName);
     $this->logMessage("EVENT DISPATCH '$eventName' DONE");

     // Return the event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


135) modules/contrib/static_suite/modules/static_deploy/src/Plugin/Derivative/ReleasesListTasks.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * The static deployer manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;

@@ @@
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


136) modules/contrib/static_suite/modules/static_deploy/src/Plugin/Derivative/ReleasesListMenu.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * The static deployer manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;

@@ @@
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


137) modules/contrib/static_suite/modules/static_deploy/src/Form/SettingsForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The static deployer plugin manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $static_deployer_manager
+   * @param StaticDeployerPluginManagerInterface $static_deployer_manager
    *   The static deployer plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager, MessengerInterface $messenger, RouteProviderInterface $route_provider, StaticDeployerPluginManagerInterface $static_deployer_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


138) modules/contrib/static_suite/modules/static_deploy/src/EventSubscriber/EventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_deploy\EventSubscriber;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\static_build\Event\StaticBuildEvent;
 use Drupal\static_build\Event\StaticBuildEvents;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Static Deployer Manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;

@@ @@
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;

@@ @@
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   Static Deployer Manager.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Utils for working with entities.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticDeployerPluginManagerInterface $staticDeployerPluginManager, EntityUtils $entityUtils) {
@@ @@
   /**
    * Reacts to a StaticBuildEvents::ENDS event.
    *
-   * @param \Drupal\static_build\Event\StaticBuildEvent $event
+   * @param StaticBuildEvent $event
    *   The Static Build event.
    *
-   * @return \Drupal\static_build\Event\StaticBuildEvent
+   * @return StaticBuildEvent
    *   The processed event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   public function requestDeploy(StaticBuildEvent $event): StaticBuildEvent {
     // Check if received event is requesting a deploy.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


139) modules/contrib/static_suite/modules/static_deploy/src/Event/StaticDeployEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_deploy\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\static_deploy\Plugin\StaticDeployerPluginInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Generic static deploy event to be fired.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


140) modules/contrib/static_suite/modules/static_deploy/src/Controller/ReleaseController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_deploy\Controller;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
   /**
    * Drupal Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * The static deployer plugin manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;

@@ @@
   /**
    * The static deployer helper.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerHelperInterface
+   * @var StaticDeployerHelperInterface
    */
   protected $staticDeployerHelper;

@@ @@
   /**
    * StaticBuilderReleasesController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Drupal language manager.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer plugin manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerHelperInterface $staticDeployerHelper
+   * @param StaticDeployerHelperInterface $staticDeployerHelper
    *   The static deployer helper.
    */
   public function __construct(
@@ @@
    * @param string $builderId
    *   Static Builder Id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   JSON response.
    */
   public function getRunningReleaseData(string $deployerId, string $builderId): JsonResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


141) modules/contrib/static_suite/modules/static_deploy/src/Controller/LogViewerController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_deploy\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;

@@ @@
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer manager.
    */
   public function __construct(
@@ @@
    * @param string $uniqueId
    *   Release's unique id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
+   * @return RedirectResponse|Response
    *   The response.
    */
   public function viewDeployLog(string $builderId, string $deployerId, string $uniqueId) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


142) modules/contrib/static_suite/modules/static_deploy/src/Controller/DeployerController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_deploy\Controller;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface;
@@ @@
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Static deployer manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;

@@ @@
   /**
    * BuilderController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
    */
   public function __construct(
@@ @@
    * @param string $builderId
    *   Static Builder Id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect to previous page.
    */
   public function runDeploy(string $deployerId, string $builderId): RedirectResponse {
@@ @@
    * @param string $builderId
    *   Static Builder Id.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   protected function executeDeploy(string $deployerId, string $builderId): void {
     $plugin = $this->staticDeployerPluginManager->getInstance([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


143) modules/contrib/static_suite/modules/static_deploy/src/Commands/StaticDeployCommands.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Static deployer manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;

@@ @@
   /**
    * StaticDeployCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal config factory.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $static_deployer_manager
+   * @param StaticDeployerPluginManagerInterface $static_deployer_manager
    *   Static deployer manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticDeployerPluginManagerInterface $static_deployer_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


144) modules/contrib/static_suite/modules/static_deploy/src/Annotation/StaticDeployer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_deploy\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


145) modules/contrib/static_suite/modules/static_build/src/Routing/RouteSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Static Builder Manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder Manager.
    */
   public function __construct(StaticBuilderPluginManagerInterface $staticBuilderPluginManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


146) modules/contrib/static_suite/modules/static_build/src/Release/Task/TaskSupervisorInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Set the release manager.
    *
-   * @param \Drupal\static_build\Release\ReleaseManagerInterface $releaseManager
+   * @param ReleaseManagerInterface $releaseManager
    *   The release manager.
    */
   public function setReleaseManager(ReleaseManagerInterface $releaseManager): void;
@@ @@
    * @param string $taskId
    *   Task id to check.
    *
-   * @return \Drupal\static_build\Release\Release|null
+   * @return Release|null
    *   Last done release or null if nothing found
    */
   public function getLastDoneRelease(string $taskId): ?Release;
@@ @@
    * @param string $taskId
    *   Task id to check.
    *
-   * @return \Drupal\static_build\Release\Release|null
+   * @return Release|null
    *   The release with a running task or null if nothing found.
    */
   public function getOngoingRelease(string $taskId): ?Release;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


147) modules/contrib/static_suite/modules/static_build/src/Release/Task/TaskSupervisor.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Unique ID helper.
    *
-   * @var \Drupal\static_suite\Utility\UniqueIdHelperInterface
+   * @var UniqueIdHelperInterface
    */
   protected $uniqueIdHelper;

@@ @@
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The release manager.
    *
-   * @var \Drupal\static_build\Release\ReleaseManagerInterface
+   * @var ReleaseManagerInterface
    */
   protected $releaseManager;

@@ @@
    * different plugins with different base directories (a Work In Progress not
    * already finished).
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal config factory.
-   * @param \Drupal\static_suite\Utility\UniqueIdHelperInterface $unique_id_helper
+   * @param UniqueIdHelperInterface $unique_id_helper
    *   Static Export utils.
    */
   public function __construct(
@@ @@
   /**
    * Set the release manager.
    *
-   * @param \Drupal\static_build\Release\ReleaseManagerInterface $releaseManager
+   * @param ReleaseManagerInterface $releaseManager
    *   The release manager.
    */
   public function setReleaseManager(ReleaseManagerInterface $releaseManager): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


148) modules/contrib/static_suite/modules/static_build/src/Release/Task/TaskInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\Release\Task;

+use Drupal\static_suite\StaticSuiteException;
 /**
  * An interface for tasks.
  */
@@ @@
    * @param bool $value
    *   TRUE to set flag, and FALSE to unset it.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function setFlag(string $name, bool $value): void;

@@ @@
   /**
    * Set this release has started a task.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function setStarted(): void;

@@ @@
   /**
    * Set this release has finished a task.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function setDone(): void;

@@ @@
   /**
    * Set this release has failed finishing a task.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function setFailed(): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


149) modules/contrib/static_suite/modules/static_build/src/Release/Task/TaskFactoryInterface.php:14

    ---------- begin diff ----------
@@ @@
    * @param string $id
    *   Task id.
    *
-   * @return \Drupal\static_build\Release\Task\TaskInterface
+   * @return TaskInterface
    *   A task object.
    */
   public function create(string $dir, string $id): TaskInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


150) modules/contrib/static_suite/modules/static_build/src/Release/ReleaseManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\Release;

+use Drupal\static_suite\StaticSuiteException;
 use Drupal\static_build\Release\Task\TaskSupervisorInterface;

 /**
@@ @@
    * @param string $baseDir
    *   An absolute path where "current" symlink and "releases" folder exists.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function init(string $baseDir): void;

@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function createReleasesDir(): bool;

@@ @@
   /**
    * Get current release instance.
    *
-   * @return \Drupal\static_build\Release\ReleaseInterface|null
+   * @return ReleaseInterface|null
    *   The current release.
    */
   public function getCurrentRelease(): ?ReleaseInterface;
@@ @@
    * @param string $uniqueId
    *   A unique Id identifying a release.
    *
-   * @return \Drupal\static_build\Release\ReleaseInterface
+   * @return ReleaseInterface
    *   A new release instance.
    * @todo consider renaming this to bootstrap()
-   *
    */
   public function create(string $uniqueId): ReleaseInterface;

@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function delete(string $uniqueId): bool;

@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function publish(string $uniqueId, string $taskId): bool;

@@ @@
   /**
    * Get a list of all releases.
    *
-   * @return \Drupal\static_build\Release\Release[]
+   * @return Release[]
    *   An array of Releases.
    */
   public function getAllReleases(): array;
@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteOldReleases(): bool;

@@ @@
   /**
    * Get task supervisor.
    *
-   * @return \Drupal\static_build\Release\Task\TaskSupervisorInterface
+   * @return TaskSupervisorInterface
    *   The task supervisor
    */
   public function getTaskSupervisor(): TaskSupervisorInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


151) modules/contrib/static_suite/modules/static_build/src/Release/ReleaseManager.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Release factory.
    *
-   * @var \Drupal\static_build\Release\ReleaseFactoryInterface
+   * @var ReleaseFactoryInterface
    */
   protected $releaseFactory;

@@ @@
   /**
    * Task factory.
    *
-   * @var \Drupal\static_build\Release\Task\TaskFactoryInterface
+   * @var TaskFactoryInterface
    */
   protected $taskFactory;

@@ @@
   /**
    * Task supervisor.
    *
-   * @var \Drupal\static_build\Release\Task\TaskSupervisorInterface
+   * @var TaskSupervisorInterface
    */
   protected $taskSupervisor;

@@ @@
   /**
    * Unique ID helper.
    *
-   * @var \Drupal\static_suite\Utility\UniqueIdHelperInterface
+   * @var UniqueIdHelperInterface
    */
   protected $uniqueIdHelper;

@@ @@
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    * configuration. This is also essential to allow different plugins with
    * different base directories (a Work In Progress not already finished).
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal config factory.
-   * @param \Drupal\static_build\Release\ReleaseFactoryInterface $release_factory
+   * @param ReleaseFactoryInterface $release_factory
    *   Release factory.
-   * @param \Drupal\static_build\Release\Task\TaskFactoryInterface $task_factory
+   * @param TaskFactoryInterface $task_factory
    *   Task factory.
-   * @param \Drupal\static_build\Release\Task\TaskSupervisorInterface $task_supervisor
+   * @param TaskSupervisorInterface $task_supervisor
    *   Task supervisor.
-   * @param \Drupal\static_suite\Utility\UniqueIdHelperInterface $unique_id_helper
+   * @param UniqueIdHelperInterface $unique_id_helper
    *   Static Export utils.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


152) modules/contrib/static_suite/modules/static_build/src/Release/ReleaseInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\Release;

+use Drupal\static_suite\StaticSuiteException;
 use Drupal\static_build\Release\Task\TaskInterface;

 /**
@@ @@
    * @param string $id
    *   Task id.
    *
-   * @return \Drupal\static_build\Release\Task\TaskInterface
+   * @return TaskInterface
    *   A newly created task or a previous one.
    */
   public function task(string $id): TaskInterface;
@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function createReleaseDir(): bool;

@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteReleaseDir(): bool;

@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function copyToDir(string $source, string $localDestination = '', array $excludedPaths = [], bool $delete = FALSE): bool;

@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function moveToDir(string $source, string $localDestination = ""): bool;

@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteFiles(string $localPath, array $excludes = []): bool;

@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteDirs(string $localPath, array $excludes = []): bool;

@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteDirsAndFiles(string $localPath): bool;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


153) modules/contrib/static_suite/modules/static_build/src/Release/ReleaseFactoryInterface.php:15

    ---------- begin diff ----------
@@ @@
    *   Dir where releases are stored.
    * @param string $uniqueId
    *   A unique id identifying this release.
-   * @param \Drupal\static_build\Release\Task\TaskFactoryInterface $taskFactory
+   * @param TaskFactoryInterface $taskFactory
    *   A task factory for Release.
    *
-   * @return \Drupal\static_build\Release\ReleaseInterface
+   * @return ReleaseInterface
    *   A release object.
    */
   public function create(string $allReleasesDir, string $uniqueId, TaskFactoryInterface $taskFactory): ReleaseInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


154) modules/contrib/static_suite/modules/static_build/src/Release/ReleaseFactory.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Release cache to avoid creating different instances of the same release.
    *
-   * @var \Drupal\static_build\Release\ReleaseInterface[]
+   * @var ReleaseInterface[]
    */
   protected $releaseCache;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


155) modules/contrib/static_suite/modules/static_build/src/Release/Release.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Task factory.
    *
-   * @var \Drupal\static_build\Release\Task\TaskFactoryInterface
+   * @var TaskFactoryInterface
    */
   protected $taskFactory;

@@ @@
   /**
    * Array of added tasks.
    *
-   * @var \Drupal\static_build\Release\Task\TaskInterface[]
+   * @var TaskInterface[]
    */
   protected $tasks = [];

@@ @@
    *   Dir where releases are stored.
    * @param string $uniqueId
    *   A unique id identifying this release.
-   * @param \Drupal\static_build\Release\Task\TaskFactoryInterface $taskFactory
+   * @param TaskFactoryInterface $taskFactory
    *   A task factory.
    */
   public function __construct(string $allReleasesDir, string $uniqueId, TaskFactoryInterface $taskFactory) {
@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function createMetadataDir(): bool {
     $metadataDir = $this->getMetadataDir();
@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function initializeMetadataDir(): bool {
     $uniqueIdFile = $this->dir . '/' . self::UNIQUE_ID_FILE;
@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function createTasksDir(): bool {
     $mkdirResult = @mkdir($this->getTasksDir());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


156) modules/contrib/static_suite/modules/static_build/src/Plugin/StaticBuilderPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\Plugin;

+use Drupal\static_suite\StaticSuiteUserException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   A newly created exporter object instance.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function createInstance($plugin_id, array $configuration = []): StaticBuilderPluginInterface;

@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   A newly created exporter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getInstance(array $options): StaticBuilderPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


157) modules/contrib/static_suite/modules/static_build/src/Plugin/StaticBuilderPluginManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    *
    * Wraps original createInstance() to add typing.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   A newly created static builder object instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []): StaticBuilderPluginInterface {
@@ @@
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   A newly created static builder object instance, or a previously
    *   instantiated one if available.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


158) modules/contrib/static_suite/modules/static_build/src/Plugin/StaticBuilderPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\Plugin;

+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ @@
    * Should typically decide whether to fork an async process or run the build
    * synchronously.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function init(): bool;

@@ @@
   /**
    * Runs the build task.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function runBuildLoop(): bool;

@@ @@
    *
    * This method should be over ridden by plugins to reflect each use case.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function build(): void;

@@ @@
   /**
    * Get the configured release manager.
    *
-   * @return \Drupal\static_build\Release\ReleaseManagerInterface
+   * @return ReleaseManagerInterface
    *   The current release manager.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function getReleaseManager(): ReleaseManagerInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


159) modules/contrib/static_suite/modules/static_build/src/Plugin/StaticBuilderPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\Plugin;

+use Drupal\static_build\Release\Task\Task;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Drupal file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Release Manager.
    *
-   * @var \Drupal\static_build\Release\ReleaseManagerInterface
+   * @var ReleaseManagerInterface
    */
   protected $releaseManager;

@@ @@
   /**
    * Exporter service.
    *
-   * @var \Drupal\static_export\Exporter\ExporterReporterInterface
+   * @var ExporterReporterInterface
    */
   protected $exporterReporter;

@@ @@
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * Unique ID helper.
    *
-   * @var \Drupal\static_suite\Utility\UniqueIdHelperInterface
+   * @var UniqueIdHelperInterface
    */
   protected $uniqueIdHelper;

@@ @@
   /**
    * Release being built.
    *
-   * @var \Drupal\static_build\Release\Release
+   * @var Release
    */
   protected $release;

@@ @@
   /**
    * Release task.
    *
-   * @var \Drupal\static_build\Release\Task\Task
+   * @var Task
    */
   protected $releaseTask;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   Drupal file system service.
-   * @param \Drupal\static_suite\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock system from Static Suite.
-   * @param \Drupal\static_build\Release\ReleaseManagerInterface $releaseManager
+   * @param ReleaseManagerInterface $releaseManager
    *   The release manager.
-   * @param \Drupal\static_export\Exporter\ExporterReporterInterface $exporterReporter
+   * @param ExporterReporterInterface $exporterReporter
    *   The exporter reporter service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
-   * @param \Drupal\static_suite\Utility\UniqueIdHelperInterface $unique_id_helper
+   * @param UniqueIdHelperInterface $unique_id_helper
    *   Unique ID helper.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function __construct(
     array $configuration,
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public static function create(ContainerInterface $container,
                                 array $configuration,
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function init(): bool {
     // Fork an async process only if not in a cli and async option is true.
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function runBuildLoop(): bool {
     $this->dispatchEvent(StaticBuildEvents::START);
@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function setCurrentSymlink(): bool {
     // Get current id in case we need to execute a rollback.
@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function createLogDir(): bool {
     if (!is_dir($this->getConf('log-dir'))) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function setConfiguration(array $configuration) {
     // Check for a proper run-mode.
@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteInsideBuildDir(string $localPath): bool {
     $pathToDelete = $this->getConf('build-dir') . '/' . $localPath;
@@ @@
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function copyDataToBuildDir(string $source, string $localDestination, array $excludedPaths, bool $createTar = FALSE): bool {
     clearstatcache(TRUE);
@@ @@
   /**
    * Get release.
    *
-   * @return \Drupal\static_build\Release\Release
+   * @return Release
    *   The release we are working with.
    */
   public function getRelease(): Release {
@@ @@
    * @param array $data
    *   Data for the event.
    *
-   * @return \Drupal\static_build\Event\StaticBuildEvent
+   * @return StaticBuildEvent
    *   The event.
    */
   public function dispatchEvent(string $eventName, array $data = []): StaticBuildEvent {
@@ @@

     // Dispatch the event.
     $this->logMessage("EVENT DISPATCH '$eventName' TRIGGERED");
-    $this->eventDispatcher->dispatch($eventName, $event);
+    $this->eventDispatcher->dispatch($event, $eventName);
     $this->logMessage("EVENT DISPATCH '$eventName' DONE");

     // Return the event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


160) modules/contrib/static_suite/modules/static_build/src/Plugin/StaticBuilderHelper.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * StaticBuilderHelper constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
    */
   public function __construct(StaticBuilderPluginManagerInterface $staticBuilderPluginManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


161) modules/contrib/static_suite/modules/static_build/src/Plugin/Derivative/ReleasesListTasks.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


162) modules/contrib/static_suite/modules/static_build/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\Form;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $static_builder_manager
+   * @param StaticBuilderPluginManagerInterface $static_builder_manager
    *   The static builder plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, RouteProviderInterface $route_provider, StaticBuilderPluginManagerInterface $static_builder_manager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


163) modules/contrib/static_suite/modules/static_build/src/EventSubscriber/EventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\EventSubscriber;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EditorialContentEntityBase;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Static Builder Manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;

@@ @@
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder Manager.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Utils for working with entities.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticBuilderPluginManagerInterface $staticBuilderPluginManager, EntityUtils $entityUtils, StaticSuiteUtilsInterface $static_suite_utils) {
@@ @@
   /**
    * Reacts to a StaticExportEvents::WRITE_QUEUE_PROCESSING_ENDS event.
    *
-   * @param \Drupal\static_export\Event\StaticExportEvent $event
+   * @param StaticExportEvent $event
    *   The Static Export event.
    *
-   * @return \Drupal\static_export\Event\StaticExportEvent
+   * @return StaticExportEvent
    *   The processed event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   public function requestLiveBuild(StaticExportEvent $event): StaticExportEvent {
     // Check if received event should request a build.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


164) modules/contrib/static_suite/modules/static_build/src/Event/StaticBuildEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\static_build\Plugin\StaticBuilderPluginInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Generic static build event to be fired.
@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginInterface $builder
+   * @param StaticBuilderPluginInterface $builder
    *   The static builder.
    */
   public function __construct(StaticBuilderPluginInterface $builder) {
@@ @@
   /**
    * Get the static builder.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   The static builder.
    */
   public function getBuilder(): StaticBuilderPluginInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


165) modules/contrib/static_suite/modules/static_build/src/Controller/ReleaseController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\Controller;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\LocalRedirectResponse;
@@ @@
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * The static builder helper.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderHelperInterface
+   * @var StaticBuilderHelperInterface
    */
   protected $staticBuilderHelper;

@@ @@
   /**
    * The static builder plugin.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @var StaticBuilderPluginInterface
    */
   protected $builder;

@@ @@
   /**
    * Static Builder Releases Controller constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_build\Plugin\StaticBuilderHelperInterface $staticBuilderHelper
+   * @param StaticBuilderHelperInterface $staticBuilderHelper
    *   The static builder helper.
    */
   public function __construct(
@@ @@
    * @param string $runMode
    *   A run mode. Usually live or preview.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   JSON response.
    */
   public function getRunningReleaseData(string $builderId, string $runMode): JsonResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


166) modules/contrib/static_suite/modules/static_build/src/Controller/LogViewerController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface;
@@ @@
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
    */
   public function __construct(
@@ @@
    * @param string $uniqueId
    *   Release's unique id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
+   * @return RedirectResponse|Response
    *   The response.
    */
   public function viewBuildLog(string $builderId, string $runMode, string $uniqueId) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


167) modules/contrib/static_suite/modules/static_build/src/Controller/BuilderController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\Controller;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\static_build\Plugin\StaticBuilderPluginInterface;
@@ @@
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * Locale exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterManager;

@@ @@
   /**
    * BuilderController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   Locale exporter manager.
    */
   public function __construct(
@@ @@
    * @param string $runMode
    *   Build mode: live or preview.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect to previous page.
    */
   public function runBuild(string $builderId, string $runMode): RedirectResponse {
@@ @@
    * @param $runMode
    *   Build mode: live or preview.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   protected function executeBuild($builderId, $runMode): void {
     $plugin = $this->staticBuilderPluginManager->getInstance([
@@ @@
   /**
    * Exports locale data to be able to run a new build.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
+   * @throws StaticSuiteException
    */
   protected function exportLocale(): void {
     $localeExporter = $this->localeExporterManager->getDefaultInstance();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


168) modules/contrib/static_suite/modules/static_build/src/Config/ConfigOverrider.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
    */
   public function __construct(ConfigFactoryInterface $configFactory, StaticSuiteUtilsInterface $static_suite_utils) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


169) modules/contrib/static_suite/modules/static_build/src/Commands/StaticBuildCommands.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Static builder.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;

@@ @@
   /**
    * StaticBuildCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticBuilderPluginManagerInterface $staticBuilderPluginManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


170) modules/contrib/static_suite/modules/static_build/src/Annotation/StaticBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\static_build\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


171) modules/contrib/static_suite/modules/static_build/modules/static_builder_gatsby/src/Plugin/static_build/StaticBuilder/GatsbyStaticBuilder.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function preBuild(): void {
     $this->deleteTempDirs();
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function postBuild(): void {
     // Move or copy public dir contents to release dir.
@@ @@
   /**
    * Deletes .cache and public dir.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function deleteTempDirs(): void {
     $config = $this->configFactory->get('static_builder_gatsby.settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/static_suite/modules/static_export/modules/static_export
         _graphql_data_resolver/src/Plugin/GraphQL/Fields/Entity/LocaleInclude.php
         " file, due to:                                                        
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/static_suite/modules/static_export/modules/static_export
         _graphql_data_resolver/src/Plugin/GraphQL/Fields/Entity/EntityInclude.php
         " file, due to:                                                        
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/static_suite/modules/static_export/modules/static_export
         _graphql_data_resolver/src/Plugin/GraphQL/Fields/Entity/CustomInclude.php
         " file, due to:                                                        
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/static_suite/modules/static_export/modules/static_export
         _graphql_data_resolver/src/Plugin/GraphQL/Fields/Entity/ConfigInclude.php
         " file, due to:                                                        
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 5 nodes were removed                                                 

