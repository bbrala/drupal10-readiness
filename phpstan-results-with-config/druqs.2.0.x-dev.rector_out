modules/contrib/druqs/druqs.api.php
modules/contrib/druqs/druqs.module
modules/contrib/druqs/src/Controller/DruqsController.php
modules/contrib/druqs/src/Event/DruqsSearchEvent.php
modules/contrib/druqs/src/EventSubscriber/DruqsMenuSubscriber.php
modules/contrib/druqs/src/EventSubscriber/DruqsNodeSubscriber.php
modules/contrib/druqs/src/EventSubscriber/DruqsSubscriber.php
modules/contrib/druqs/src/EventSubscriber/DruqsTaxonomySubscriber.php
modules/contrib/druqs/src/EventSubscriber/DruqsUserSubscriber.php
modules/contrib/druqs/src/EventSubscriber/DruqsUuidSubscriber.php
modules/contrib/druqs/src/Form/DruqsConfigurationForm.php
modules/contrib/druqs/src/Plugin/Block/DruqsBlock.php

9 files with changes
====================

1) modules/contrib/druqs/src/Form/DruqsConfigurationForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The menu storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $menuStorage;

@@ @@
   /**
    * Constructs a DruqsConfigurationForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $menu_storage
+   * @param ConfigEntityStorageInterface $menu_storage
    *   The module handler.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/druqs/src/EventSubscriber/DruqsUuidSubscriber.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs a DruqsUuidSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(
@@ @@

     // Attempt to load the entity.
     try {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $this->entityTypeManager->getStorage($entity_type->id())
         ->load($id);
     }
@@ @@
    *
    * @param array $entity_types
    *   The entity types.
-   * @param \Drupal\druqs\Event\DruqsSearchEvent $search
+   * @param DruqsSearchEvent $search
    *   The search event.
    *
    * @return array
@@ @@
   /**
    * Attempts to get the url for a template from the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The respective entity type.
    * @param string $template
    *   The requested url template.
@@ @@
   /**
    * Attempts to fetch a title from the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The respective entity type.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/druqs/src/EventSubscriber/DruqsUserSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\druqs\EventSubscriber;

+use Drupal\user\UserStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\druqs\Event\DruqsSearchEvent;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * Constructs a DruqsUserSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->userStorage = $entity_type_manager->getStorage('user');
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function lookUp(DruqsSearchEvent $search) {

@@ @@

     // Format the results.
     $results = [];
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     foreach ($users as $user) {
       $results[] = [
         'type' => 'User',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/druqs/src/EventSubscriber/DruqsTaxonomySubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\druqs\EventSubscriber;

+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\druqs\Event\DruqsSearchEvent;

@@ @@
   /**
    * The taxonomy term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;

@@ @@
   /**
    * Constructs a DruqsTaxonomySubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->termStorage = $entity_type_manager
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function lookUp(DruqsSearchEvent $search) {

@@ @@

     // Format the results.
     $results = [];
-    /** @var \Drupal\taxonomy\TermInterface $term */
+    /** @var TermInterface $term */
     foreach ($terms as $term) {
       $results[] = [
         'type' => 'Taxonomy (' . $term->bundle() . ')',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/druqs/src/EventSubscriber/DruqsSubscriber.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Handles a druqs search event.
    *
-   * @param \Drupal\druqs\Event\DruqsSearchEvent $search
+   * @param DruqsSearchEvent $search
    *   The search event.
    */
   abstract protected function lookUp(DruqsSearchEvent $search);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/druqs/src/EventSubscriber/DruqsNodeSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\druqs\EventSubscriber;

+use Drupal\node\NodeStorageInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\druqs\Event\DruqsSearchEvent;

@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\node\NodeStorageInterface
+   * @var NodeStorageInterface
    */
   protected $nodeStorage;

@@ @@
   /**
    * Constructs a DruqsNodeSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->nodeStorage = $entity_type_manager->getStorage('node');
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function lookUp(DruqsSearchEvent $search) {

@@ @@

     // Format results.
     $results = [];
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     foreach ($nodes as $node) {
       $results[] = [
         'type' => 'Content (' . $node->getType() . ')',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/druqs/src/EventSubscriber/DruqsMenuSubscriber.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The menu tree.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuTree;

@@ @@
   /**
    * Constructs a DruqsMenuHandler object.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_tree
+   * @param MenuLinkTreeInterface $menu_tree
    *   The menu tree.
    */
   public function __construct(MenuLinkTreeInterface $menu_tree) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/druqs/src/Event/DruqsSearchEvent.php:49

    ---------- begin diff ----------
@@ @@
    *
    * @param string $input
    *   The search term.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The druqs configuration.
    */
   public function __construct(string $input, Config $config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/druqs/src/Controller/DruqsController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a DruqsController object.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   final public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * Returns search results as JSON for an input provided by a query parameter.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The output with search results.
    */
   public function search(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

