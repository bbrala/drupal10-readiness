diff --git a/flag.api.php b/flag.api.php
index ffd5ed3..d876000 100644
--- a/flag.api.php
+++ b/flag.api.php
@@ -39,7 +39,7 @@ function hook_flag_type_info_alter(array &$definitions) {
  * @param array $options
  *   The array of default options for the flag type, with the options for the
  *   flag's link type merged in.
- * @param \Drupal\flag\FlagInterface $flag
+ * @param FlagInterface $flag
  *   The flag object.
  */
 function hook_flag_options_alter(array &$options, FlagInterface $flag) {
@@ -65,14 +65,14 @@ function hook_flag_link_type_info_alter(array &$link_types) {
  *
  * @param string $action
  *   The action about to be carried out. Either 'flag' or 'unflag'.
- * @param \Drupal\flag\FlagInterface $flag
+ * @param FlagInterface $flag
  *   The flag object.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The user account performing the action.
- * @param \Drupal\Core\Entity\EntityInterface $flaggable
+ * @param EntityInterface $flaggable
  *   The flaggable entity.
  *
- * @return \Drupal\Core\Access\AccessResult
+ * @return AccessResult
  *   An AccessResult object.
  */
 function hook_flag_action_access($action, FlagInterface $flag, AccountInterface $account, EntityInterface $flaggable = NULL) {
diff --git a/flag.install b/flag.install
index 4c2e16a..4656e4c 100644
--- a/flag.install
+++ b/flag.install
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Core\Database\Schema;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
 /**
  * @file
  * Flag module install/schema/update hooks.
@@ -104,12 +108,12 @@ function flag_update_8401() {
   $bundle_schema = [
     'description' => 'The Flag ID.',
     'type' => 'varchar_ascii',
-    'length' => \Drupal\Core\Entity\EntityTypeInterface::BUNDLE_MAX_LENGTH,
+    'length' => EntityTypeInterface::BUNDLE_MAX_LENGTH,
     // 'binary' => FALSE,
     'not null' => TRUE,
   ];
 
-  /** @var \Drupal\Core\Database\Schema $schema */
+  /** @var Schema $schema */
   $schema = \Drupal::database()->schema();
   $schema->changeField('flagging', 'flag_id', 'flag_id', $bundle_schema);
   $schema->dropIndex('flagging', 'flag_id');
@@ -117,11 +121,11 @@ function flag_update_8401() {
   $schema->addIndex('flagging', 'flagging_field__flag_id__target_id', ['flag_id'], ['fields' => ['flag_id' => $bundle_schema]]);
 
   // Update the field storage repository.
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $efm */
+  /** @var EntityFieldManagerInterface $efm */
   $efm = \Drupal::service('entity_field.manager');
-  /** @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface $kv */
+  /** @var KeyValueStoreInterface $kv */
   $kv = \Drupal::service('keyvalue');
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $repo */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $repo */
   $repo = \Drupal::service('entity.last_installed_schema.repository');
 
   $efm->clearCachedFieldDefinitions();
diff --git a/flag.module b/flag.module
index 8dd6181..4d47cb1 100644
--- a/flag.module
+++ b/flag.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\flag\FlagService;
+use Drupal\Core\Action\ActionManager;
 /**
  * @file
  * The Flag module.
@@ -204,7 +206,7 @@ function flag_form_submit($form, FormStateInterface $form_state) {
 /**
  * Performs flagging/unflagging for the entity edit form.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity being saved.
  * @param $values
  *   The flag entity form values.
@@ -388,7 +390,7 @@ function flag_entity_view(array &$build, EntityInterface $entity, EntityViewDisp
  * Implements hook_entity_build_defaults_alter().
  */
 function flag_entity_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode = 'full', $langcode = NULL) {
-  /** @var \Drupal\flag\FlagService $flag_service */
+  /** @var FlagService $flag_service */
   $flag_service = \Drupal::service('flag');
 
   // Get all possible flags for this entity type.
@@ -428,7 +430,7 @@ function flag_entity_build_defaults_alter(array &$build, EntityInterface $entity
 function flag_entity_view_alter(&$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   $entity_type = $entity->getEntityTypeId();
   if (isset($build['#contextual_links'][$entity_type])) {
-    /** @var \Drupal\flag\FlagService $flag_service */
+    /** @var FlagService $flag_service */
     $flag_service = \Drupal::service('flag');
 
     // Get all possible flags for this entity type.
@@ -481,13 +483,13 @@ function flag_contextual_links_alter(array &$links, $group, array $route_paramet
   $flags = $flag_service->getAllFlags($entity->getEntityTypeID(), $entity->bundle());
 
   foreach ($flags as $flag) {
-    /** @var \Drupal\flag\FlagInterface $flag */
+    /** @var FlagInterface $flag */
     // Do not display the flag if disabled.
     if (!$flag->status()){
       continue;
     }
 
-    /** @var \Drupal\flag\Plugin\Flag\EntityFlagType $flag_type_plugin */
+    /** @var EntityFlagType $flag_type_plugin */
     $flag_type_plugin = $flag->getFlagTypePlugin();
 
     // Make sure we're dealing with an entity flag type.
@@ -544,10 +546,10 @@ function flag_user_predelete(UserInterface $account) {
 /**
  * Implements hook_entity_operation().
  */
-function flag_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
+function flag_entity_operation(EntityInterface $entity) {
   $operations = [];
 
-  if ($entity instanceof \Drupal\flag\FlagInterface) {
+  if ($entity instanceof FlagInterface) {
     if (!$entity->status()) {
       $operations['enable'] = [
         'title' => t('Enable'),
@@ -600,7 +602,7 @@ function flag_flag_insert(FlagInterface $flag) {
     return;
   }
   // The action plugin cache needs to detect the new flag.
-  /** @var \Drupal\Core\Action\ActionManager $action_manager */
+  /** @var ActionManager $action_manager */
   $action_manager = \Drupal::service('plugin.manager.action');
   $action_manager->clearCachedDefinitions();
 
diff --git a/flag.post_update.php b/flag.post_update.php
index ec2ae68..14d27f9 100644
--- a/flag.post_update.php
+++ b/flag.post_update.php
@@ -37,14 +37,14 @@ function flag_post_update_flag_relationship_dependencies(&$sandbox) {
  * Update the flag and unflag actions for existing flags.
  */
 function flag_post_update_flag_actions() {
-  /** @var \Drupal\system\Entity\Action[] $actions */
+  /** @var Action[] $actions */
   $flags = \Drupal::entityTypeManager()->getStorage('flag')->loadMultiple();
   $action_names = [];
   foreach ($flags as $flag) {
     $action_names[] = 'flag_action.' . $flag->id() . '.flag';
     $action_names[] = 'flag_action.' . $flag->id() . '.unflag';
   }
-  $actions = Drupal\system\Entity\Action::loadMultiple($action_names);
+  $actions = Action::loadMultiple($action_names);
   foreach ($actions as $old_id => $action) {
     if (preg_match('/\.(un)?flag$/', $old_id)) {
       // Update the plugin ID and the action ID.
diff --git a/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php b/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
index 4fb9b27..557a8ac 100644
--- a/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
+++ b/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
@@ -30,7 +30,7 @@ class FlagBookmarkUITest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
   }
diff --git a/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php b/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
index 7197d80..a1c50bb 100644
--- a/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
+++ b/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\flag_follower\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Node\NodeInterface;
 use Drupal\Tests\BrowserTestBase;
 /**
  * UI Test for flag_follower.
@@ -31,56 +33,56 @@ class FlagFollowerUITest extends BrowserTestBase {
   /**
    * Administrator user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
   /**
    * User A.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $userA;
 
   /**
    * User B.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $userB;
 
   /**
    * User C.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $userC;
 
   /**
    * Node A created by User A.
    *
-   * @var \Drupal\Node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodeA;
 
   /**
    * Node B created by User B.
    *
-   * @var \Drupal\Node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodeB;
 
   /**
    * Node C created by User C.
    *
-   * @var \Drupal\Node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodeC;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ -169,21 +171,48 @@ class FlagFollowerUITest extends BrowserTestBase {
   public function doFollowerView() {
     $this->drupalLogin($this->userA);
     $this->drupalGet('flag-followers');
-    $this->assertNoText($this->userB->getAccountName());
-    $this->assertText($this->userC->getAccountName());
-    $this->assertText('2', 'A sees C has two followers.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->userB->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->userC->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('2');
 
     $this->drupalLogin($this->userB);
     $this->drupalGet('flag-followers');
-    $this->assertText($this->userA->getAccountName());
-    $this->assertText($this->userC->getAccountName());
-    $this->assertText('2', 'B sees C has two followers.');
-    $this->assertText('1', 'B sees A has one follower.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->userA->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->userC->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('2');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1');
 
     $this->drupalLogin($this->userC);
     $this->drupalGet('flag-followers');
-    $this->assertNoText($this->userA->getAccountName());
-    $this->assertNoText($this->userB->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->userA->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->userB->getAccountName());
   }
 
   /**
@@ -192,18 +221,36 @@ class FlagFollowerUITest extends BrowserTestBase {
   public function doContentView() {
     $this->drupalLogin($this->userA);
     $this->drupalGet('flag-followers/content');
-    $this->assertText($this->nodeC->label());
-    $this->assertNoText($this->nodeB->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodeC->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodeB->label());
 
     $this->drupalLogin($this->userB);
     $this->drupalGet('flag-followers/content');
-    $this->assertText($this->nodeA->label());
-    $this->assertText($this->nodeC->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodeA->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodeC->label());
 
     $this->drupalLogin($this->userC);
     $this->drupalGet('flag-followers/content');
-    $this->assertNoText($this->nodeA->label());
-    $this->assertNoText($this->nodeB->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodeA->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodeB->label());
   }
 
 }
diff --git a/src/Access/CsrfAccessCheck.php b/src/Access/CsrfAccessCheck.php
index 45e50e3..3ff5518 100644
--- a/src/Access/CsrfAccessCheck.php
+++ b/src/Access/CsrfAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\CsrfAccessCheck as OrignalCsrfAccessCheck;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -23,7 +24,7 @@ class CsrfAccessCheck implements AccessInterface {
   protected $original;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
@@ -40,14 +41,14 @@ class CsrfAccessCheck implements AccessInterface {
   /**
    * Checks access based on a CSRF token for the request for auth users.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result, always allowed for anonymous users.
    */
   public function access(Route $route, Request $request, RouteMatchInterface $route_match) {
diff --git a/src/Access/FlagAccessCheck.php b/src/Access/FlagAccessCheck.php
index 6b90105..7382eb8 100644
--- a/src/Access/FlagAccessCheck.php
+++ b/src/Access/FlagAccessCheck.php
@@ -18,14 +18,14 @@ class FlagAccessCheck implements AccessInterface {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
@@ -35,11 +35,11 @@ class FlagAccessCheck implements AccessInterface {
   /**
    * Checks access to the 'flag' action.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return string
diff --git a/src/Access/UnFlagAccessCheck.php b/src/Access/UnFlagAccessCheck.php
index 35c9a1d..134a2bc 100644
--- a/src/Access/UnFlagAccessCheck.php
+++ b/src/Access/UnFlagAccessCheck.php
@@ -18,14 +18,14 @@ class UnFlagAccessCheck implements AccessInterface {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
@@ -35,11 +35,11 @@ class UnFlagAccessCheck implements AccessInterface {
   /**
    * Checks access to the 'unflag' action.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return string
diff --git a/src/ActionLink/ActionLinkTypeBase.php b/src/ActionLink/ActionLinkTypeBase.php
index a14e37e..f0fdc2c 100644
--- a/src/ActionLink/ActionLinkTypeBase.php
+++ b/src/ActionLink/ActionLinkTypeBase.php
@@ -27,7 +27,7 @@ abstract class ActionLinkTypeBase extends PluginBase implements ActionLinkTypePl
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -43,7 +43,7 @@ abstract class ActionLinkTypeBase extends PluginBase implements ActionLinkTypePl
    *   The ID with which to initialize this plugin.
    * @param array $plugin_definition
    *   The plugin definition array.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, AccountInterface $current_user) {
@@ -69,9 +69,9 @@ abstract class ActionLinkTypeBase extends PluginBase implements ActionLinkTypePl
    *
    * @param string $action
    *   The action, flag or unflag.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity.
    *
    * @return Url
@@ -138,7 +138,7 @@ abstract class ActionLinkTypeBase extends PluginBase implements ActionLinkTypePl
    *
    * @param string $action
    *   The action, flag or unflag.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    *
    * @return string
@@ -188,7 +188,7 @@ abstract class ActionLinkTypeBase extends PluginBase implements ActionLinkTypePl
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ -202,7 +202,7 @@ abstract class ActionLinkTypeBase extends PluginBase implements ActionLinkTypePl
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/ActionLink/ActionLinkTypePluginInterface.php b/src/ActionLink/ActionLinkTypePluginInterface.php
index 2c77aa8..2045bbf 100644
--- a/src/ActionLink/ActionLinkTypePluginInterface.php
+++ b/src/ActionLink/ActionLinkTypePluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag\ActionLink;
 
+use Drupal\Core\Link;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\flag\FlagInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ -15,9 +16,9 @@ interface ActionLinkTypePluginInterface extends PluginFormInterface, Configurabl
   /**
    * Get the action link formatted for use in entity links.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity.
    *
    * @return array
@@ -28,12 +29,12 @@ interface ActionLinkTypePluginInterface extends PluginFormInterface, Configurabl
   /**
    * Get the action link as a Link object.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity.
    *
-   * @return \Drupal\Core\Link
+   * @return Link
    *   The action Link.
    */
   public function getAsLink(FlagInterface $flag, EntityInterface $entity);
diff --git a/src/Annotation/ActionLinkType.php b/src/Annotation/ActionLinkType.php
index b9b2b53..52e0532 100644
--- a/src/Annotation/ActionLinkType.php
+++ b/src/Annotation/ActionLinkType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -13,7 +14,7 @@ class ActionLinkType extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/FlagType.php b/src/Annotation/FlagType.php
index b3b66cb..b33d532 100644
--- a/src/Annotation/FlagType.php
+++ b/src/Annotation/FlagType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -13,7 +14,7 @@ class FlagType extends Plugin {
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/ActionLinkController.php b/src/Controller/ActionLinkController.php
index 7d4be8e..b7e3c63 100644
--- a/src/Controller/ActionLinkController.php
+++ b/src/Controller/ActionLinkController.php
@@ -23,23 +23,23 @@ class ActionLinkController implements ContainerInjectionInterface {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag
+   * @param FlagServiceInterface $flag
    *   The flag service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(FlagServiceInterface $flag, RendererInterface $renderer) {
@@ -60,12 +60,12 @@ class ActionLinkController implements ContainerInjectionInterface {
   /**
    * Performs a flagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|null
+   * @return AjaxResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
@@ -88,12 +88,12 @@ class ActionLinkController implements ContainerInjectionInterface {
   /**
    * Performs a unflagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|null
+   * @return AjaxResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
@@ -116,14 +116,14 @@ class ActionLinkController implements ContainerInjectionInterface {
   /**
    * Generates a response after the flag has been updated.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $message
    *   (optional) The message to flash.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   private function generateResponse(FlagInterface $flag, EntityInterface $entity, $message) {
diff --git a/src/Controller/ActionLinkNoJsController.php b/src/Controller/ActionLinkNoJsController.php
index dfc6d5e..3779fce 100644
--- a/src/Controller/ActionLinkNoJsController.php
+++ b/src/Controller/ActionLinkNoJsController.php
@@ -24,23 +24,23 @@ class ActionLinkNoJsController implements ContainerInjectionInterface {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag
+   * @param FlagServiceInterface $flag
    *   The flag service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(FlagServiceInterface $flag, MessengerInterface $messenger) {
@@ -61,12 +61,12 @@ class ActionLinkNoJsController implements ContainerInjectionInterface {
   /**
    * Performs a flagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
@@ -89,12 +89,12 @@ class ActionLinkNoJsController implements ContainerInjectionInterface {
   /**
    * Performs a unflagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
@@ -117,12 +117,12 @@ class ActionLinkNoJsController implements ContainerInjectionInterface {
   /**
    * Generates a response after the flag has been updated.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $message
    *   The message to display.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response object.
    */
   private function generateResponse(EntityInterface $entity, $message) {
diff --git a/src/Controller/FieldEntryFormController.php b/src/Controller/FieldEntryFormController.php
index 3be53ff..fc75d2e 100644
--- a/src/Controller/FieldEntryFormController.php
+++ b/src/Controller/FieldEntryFormController.php
@@ -18,23 +18,23 @@ class FieldEntryFormController extends ControllerBase {
   /**
    * The flag service.
    *
-   * @var \Drupal\Flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * The session manager.
    *
-   * @var \Drupal\Core\Session\SessionManagerInterface
+   * @var SessionManagerInterface
    */
   protected $sessionManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\SessionManagerInterface $session_manager
+   * @param SessionManagerInterface $session_manager
    *   The session manager.
-   * @param \Drupal\Flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(SessionManagerInterface $session_manager, FlagServiceInterface $flag_service) {
@@ -55,7 +55,7 @@ class FieldEntryFormController extends ControllerBase {
   /**
    * Performs a flagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable ID.
@@ -86,12 +86,12 @@ class FieldEntryFormController extends ControllerBase {
   /**
    * Return the flagging edit form.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param mixed $entity_id
    *   The entity ID.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown if the flagging could not be found.
    *
    * @return array
@@ -119,7 +119,7 @@ class FieldEntryFormController extends ControllerBase {
   /**
    * Performs an unflagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The entity ID to unflag.
@@ -129,7 +129,7 @@ class FieldEntryFormController extends ControllerBase {
    *
    * @see \Drupal\flag\Plugin\ActionLink\AJAXactionLink
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown if the flagging could not be found.
    */
   public function unflag(FlagInterface $flag, $entity_id) {
@@ -152,7 +152,7 @@ class FieldEntryFormController extends ControllerBase {
   /**
    * Title callback when creating a new flagging.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The entity ID to unflag.
@@ -168,7 +168,7 @@ class FieldEntryFormController extends ControllerBase {
   /**
    * Title callback when editing an existing flagging.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The entity ID to unflag.
@@ -184,7 +184,7 @@ class FieldEntryFormController extends ControllerBase {
   /**
    * Get the flag's field entry form.
    *
-   * @param \Drupal\flag\FlaggingInterface $flagging
+   * @param FlaggingInterface $flagging
    *   The flagging from which to get the form.
    * @param string|null $operation
    *   (optional) The operation identifying the form variant to return.
diff --git a/src/Controller/FlagListBuilder.php b/src/Controller/FlagListBuilder.php
index af30153..031d6d9 100644
--- a/src/Controller/FlagListBuilder.php
+++ b/src/Controller/FlagListBuilder.php
@@ -40,7 +40,7 @@ class FlagListBuilder extends DraggableListBuilder {
   /**
    * Creates a render array of roles that may use the flag.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    *
    * @return array
@@ -74,7 +74,7 @@ class FlagListBuilder extends DraggableListBuilder {
   /**
    * Gets the flag type label for the given flag.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    *
    * @return array
@@ -93,7 +93,7 @@ class FlagListBuilder extends DraggableListBuilder {
   /**
    * Generates a render array of the applicable bundles for the flag..
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    *
    * @return array
diff --git a/src/Entity/Flag.php b/src/Entity/Flag.php
index 454058c..0d681e6 100644
--- a/src/Entity/Flag.php
+++ b/src/Entity/Flag.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag\Entity;
 
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -154,7 +155,7 @@ class Flag extends ConfigEntityBundleBase implements FlagInterface {
   /**
    * A collection to store the FlagType plugin.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $flagTypeCollection;
 
@@ -176,7 +177,7 @@ class Flag extends ConfigEntityBundleBase implements FlagInterface {
   /**
    * A collection to store the ActionLink plugin.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $linkTypeCollection;
 
@@ -231,7 +232,7 @@ class Flag extends ConfigEntityBundleBase implements FlagInterface {
     if (empty($bundles)) {
       // If the setting is empty, return all bundle names for the flag's entity
       // type.
-      /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info_service */
+      /** @var EntityTypeBundleInfoInterface $bundle_info_service */
       $bundle_info_service = \Drupal::service('entity_type.bundle.info');
       $bundle_info = $bundle_info_service->getBundleInfo($this->entity_type);
       $bundles = array_keys($bundle_info);
diff --git a/src/Entity/Storage/FlaggingStorage.php b/src/Entity/Storage/FlaggingStorage.php
index e4e9391..0c7a4a6 100644
--- a/src/Entity/Storage/FlaggingStorage.php
+++ b/src/Entity/Storage/FlaggingStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag\Entity\Storage;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drupal\Core\Session\AccountInterface;
@@ -165,7 +166,7 @@ class FlaggingStorage extends SqlContentEntityStorage implements FlaggingStorage
 
     parent::doDelete($entities);
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface[] $entities */
+    /** @var ContentEntityInterface[] $entities */
     foreach ($entities as $entity) {
       // After deleting a flagging, remove it from the cached flagging by entity if already in static cache.
       if ($entity->get('global')->value) {
diff --git a/src/Entity/Storage/FlaggingStorageInterface.php b/src/Entity/Storage/FlaggingStorageInterface.php
index b8cd0b5..c466db5 100644
--- a/src/Entity/Storage/FlaggingStorageInterface.php
+++ b/src/Entity/Storage/FlaggingStorageInterface.php
@@ -14,9 +14,9 @@ interface FlaggingStorageInterface extends ContentEntityStorageInterface {
   /**
    * Loads a list of flags the entity is flagged with for the given account.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account to check for.
    * @param string $session_id
    *   (optional) The session ID. This must be supplied if $account is the
@@ -35,9 +35,9 @@ interface FlaggingStorageInterface extends ContentEntityStorageInterface {
   /**
    * Loads a list of flags the entities are flagged with for the given account.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entities to check. All entities must be of the same type.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account to check for.
    * @param string $session_id
    *   (optional) The session ID. This must be supplied if $account is the
diff --git a/src/Event/FlagEventBase.php b/src/Event/FlagEventBase.php
index ca2bda6..3e67dbc 100644
--- a/src/Event/FlagEventBase.php
+++ b/src/Event/FlagEventBase.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\flag\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\flag\FlagInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Base Event from which other flag event are defined.
@@ -14,14 +14,14 @@ abstract class FlagEventBase extends Event {
   /**
    * The Flag in question.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * Build the flag event class.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag to be acted upon.
    */
   public function __construct(FlagInterface $flag) {
@@ -31,7 +31,7 @@ abstract class FlagEventBase extends Event {
   /**
    * Get the flag entity related to the event.
    *
-   * @return \Drupal\flag\FlagInterface
+   * @return FlagInterface
    *   The flag related to the event.
    */
   public function getFlag() {
diff --git a/src/Event/FlaggingEvent.php b/src/Event/FlaggingEvent.php
index 5e437a3..ccb4c08 100644
--- a/src/Event/FlaggingEvent.php
+++ b/src/Event/FlaggingEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\flag\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\flag\FlaggingInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event for when a flagging is created.
@@ -13,14 +13,14 @@ class FlaggingEvent extends Event {
   /**
    * The flagging in question.
    *
-   * @var \Drupal\flag\FlaggingInterface
+   * @var FlaggingInterface
    */
   protected $flagging;
 
   /**
    * Builds a new FlaggingEvent.
    *
-   * @param \Drupal\flag\FlaggingInterface $flagging
+   * @param FlaggingInterface $flagging
    *   The flaging.
    */
   public function __construct(FlaggingInterface $flagging) {
@@ -30,7 +30,7 @@ class FlaggingEvent extends Event {
   /**
    * Returns the flagging associated with the Event.
    *
-   * @return \Drupal\flag\FlaggingInterface
+   * @return FlaggingInterface
    *   The flagging.
    */
   public function getFlagging() {
diff --git a/src/Event/UnflaggingEvent.php b/src/Event/UnflaggingEvent.php
index 8ad086f..fdc2f0a 100644
--- a/src/Event/UnflaggingEvent.php
+++ b/src/Event/UnflaggingEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\flag\Event;
 
-use Symfony\Component\EventDispatcher\Event;
-
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\flag\FlaggingInterface;
 /**
  * Event for when a flagging is deleted.
  */
@@ -12,14 +12,14 @@ class UnflaggingEvent extends Event {
   /**
    * An array of flaggings.
    *
-   * @var \Drupal\flag\FlaggingInterface[]
+   * @var FlaggingInterface[]
    */
   protected $flaggings = [];
 
   /**
    * Builds a new UnflaggingEvent.
    *
-   * @param \Drupal\flag\FlaggingInterface[] $flaggings
+   * @param FlaggingInterface[] $flaggings
    *   The flaggings.
    */
   public function __construct(array $flaggings) {
@@ -29,7 +29,7 @@ class UnflaggingEvent extends Event {
   /**
    * Returns the flagging associated with the Event.
    *
-   * @return \Drupal\flag\FlaggingInterface[]
+   * @return FlaggingInterface[]
    *   The flaggings.
    */
   public function getFlaggings() {
diff --git a/src/FlagCountManager.php b/src/FlagCountManager.php
index 08ce766..5e5ab4a 100644
--- a/src/FlagCountManager.php
+++ b/src/FlagCountManager.php
@@ -47,14 +47,14 @@ class FlagCountManager implements FlagCountManagerInterface, EventSubscriberInte
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The date time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $dateTime;
 
@@ -188,7 +188,7 @@ class FlagCountManager implements FlagCountManagerInterface, EventSubscriberInte
   /**
    * Increments count of flagged entities.
    *
-   * @param \Drupal\flag\Event\FlaggingEvent $event
+   * @param FlaggingEvent $event
    *   The flagging event.
    */
   public function incrementFlagCounts(FlaggingEvent $event) {
@@ -215,7 +215,7 @@ class FlagCountManager implements FlagCountManagerInterface, EventSubscriberInte
   /**
    * Decrements count of flagged entities.
    *
-   * @param \Drupal\flag\Event\UnflaggingEvent $event
+   * @param UnflaggingEvent $event
    *   The unflagging event.
    */
   public function decrementFlagCounts(UnflaggingEvent $event) {
@@ -305,9 +305,9 @@ class FlagCountManager implements FlagCountManagerInterface, EventSubscriberInte
   /**
    * Resets loaded flag counts.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flagged entity.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag.
    */
   protected function resetLoadedCounts(EntityInterface $entity, FlagInterface $flag) {
diff --git a/src/FlagCountManagerInterface.php b/src/FlagCountManagerInterface.php
index f220f17..5990b64 100644
--- a/src/FlagCountManagerInterface.php
+++ b/src/FlagCountManagerInterface.php
@@ -24,7 +24,7 @@ interface FlagCountManagerInterface {
    * );
    * @endcode
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
@@ -41,7 +41,7 @@ interface FlagCountManagerInterface {
    * many endorsements have been made, rather than how many things have been
    * endorsed.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag.
    *
    * @return int
@@ -57,7 +57,7 @@ interface FlagCountManagerInterface {
    * words, an entity that has been reported multiple times will only be counted
    * once.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag for which to retrieve a flag count.
    *
    * @return int
@@ -71,9 +71,9 @@ interface FlagCountManagerInterface {
    * For example, with a 'bookmarks' flag, this returns the number of bookmarks
    * a user has created.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The account.
    * @param string $session_id
    *   (optional) The session ID used to specify a unique anonymous user.
diff --git a/src/FlagInterface.php b/src/FlagInterface.php
index b01c3b3..1e7fad6 100644
--- a/src/FlagInterface.php
+++ b/src/FlagInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\flag;
 
+use Drupal\flag\FlagType\FlagTypePluginInterface;
+use Drupal\flag\ActionLink\ActionLinkTypePluginInterface;
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ -84,7 +87,7 @@ interface FlagInterface extends ConfigEntityInterface, EntityWithPluginCollectio
   /**
    * Get the flag type plugin.
    *
-   * @return \Drupal\flag\FlagType\FlagTypePluginInterface
+   * @return FlagTypePluginInterface
    *   The flag type plugin for the flag.
    */
   public function getFlagTypePlugin();
@@ -100,7 +103,7 @@ interface FlagInterface extends ConfigEntityInterface, EntityWithPluginCollectio
   /**
    * Get the link type plugin for this flag.
    *
-   * @return \Drupal\flag\ActionLink\ActionLinkTypePluginInterface
+   * @return ActionLinkTypePluginInterface
    *   The link type plugin for the flag.
    */
   public function getLinkTypePlugin();
@@ -271,10 +274,10 @@ interface FlagInterface extends ConfigEntityInterface, EntityWithPluginCollectio
    *   The action for which to check permissions, either 'flag' or 'unflag'.
    * @param AccountInterface $account
    *   (optional) An AccountInterface object.
-   * @param \Drupal\Core\Entity\EntityInterface $flaggable
+   * @param EntityInterface $flaggable
    *   (optional) The flaggable entity.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   An AccessResult object.
    */
   public function actionAccess($action, AccountInterface $account = NULL, EntityInterface $flaggable = NULL);
diff --git a/src/FlagLinkBuilder.php b/src/FlagLinkBuilder.php
index 88b1387..4bbb253 100644
--- a/src/FlagLinkBuilder.php
+++ b/src/FlagLinkBuilder.php
@@ -13,23 +13,23 @@ class FlagLinkBuilder implements FlagLinkBuilderInterface, TrustedCallbackInterf
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FlagServiceInterface $flag_service) {
diff --git a/src/FlagService.php b/src/FlagService.php
index 2f9c015..0341200 100644
--- a/src/FlagService.php
+++ b/src/FlagService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag;
 
+use Symfony\Component\HttpFoundation\Session\SessionInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -20,7 +21,7 @@ class FlagService implements FlagServiceInterface {
   /**
    * The current user injected into the service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -32,7 +33,7 @@ class FlagService implements FlagServiceInterface {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
@@ -50,7 +51,7 @@ class FlagService implements FlagServiceInterface {
    *   The current user.
    * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   Te request stack.
    */
   public function __construct(AccountInterface $current_user,
@@ -137,7 +138,7 @@ class FlagService implements FlagServiceInterface {
     // @todo when https://www.drupal.org/node/2865991 is resolved,
     // use force start session API.
     if (!$request->hasSession()) {
-      /** @var \Symfony\Component\HttpFoundation\Session\SessionInterface $session */
+      /** @var SessionInterface $session */
       $session = \Drupal::service('session');
       $request->setSession($session);
       $session->start();
@@ -413,7 +414,7 @@ class FlagService implements FlagServiceInterface {
    * @param int[] $ids
    *   The flag IDs.
    *
-   * @return \Drupal\flag\FlagInterface[]
+   * @return FlagInterface[]
    *   An array of flags.
    */
   protected function getFlagsByIds(array $ids) {
@@ -426,7 +427,7 @@ class FlagService implements FlagServiceInterface {
    * @param int[] $ids
    *   The flagging IDs.
    *
-   * @return \Drupal\flag\FlaggingInterface[]
+   * @return FlaggingInterface[]
    *   An array of flaggings.
    */
   protected function getFlaggingsByIds(array $ids) {
diff --git a/src/FlagServiceInterface.php b/src/FlagServiceInterface.php
index 92efe52..7d381ca 100644
--- a/src/FlagServiceInterface.php
+++ b/src/FlagServiceInterface.php
@@ -29,7 +29,7 @@ interface FlagServiceInterface {
    * @param string $bundle
    *   (optional) The bundle for which to load the flags.
    *
-   * @return \Drupal\flag\FlagInterface[]
+   * @return FlagInterface[]
    *   An array of flag entities, keyed by the entity IDs.
    */
   public function getAllFlags($entity_type = NULL, $bundle = NULL);
@@ -47,11 +47,11 @@ interface FlagServiceInterface {
    *   $flagging = \Drupal::service('flag')->getFlagging($flag, $node);
    * @endcode
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account of the flagging user. If omitted, the flagging for
    *   the current user will be returned.
    * @param string $session_id
@@ -59,7 +59,7 @@ interface FlagServiceInterface {
    *    the current session id will be used to uniquely identify the anonymous
    *    user.
    *
-   * @return \Drupal\flag\FlaggingInterface|null
+   * @return FlaggingInterface|null
    *   The flagging or NULL if the flagging is not found.
    *
    * @throws \LogicException
@@ -94,11 +94,11 @@ interface FlagServiceInterface {
    *   }
    * @endcode
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account of the flagging user. If NULL, flaggings for any
    *   user will be returned.
    * @param string $session_id
@@ -117,9 +117,9 @@ interface FlagServiceInterface {
   /**
    * Get all flaggings for the given entity, and optionally, user.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account of the flagging user. If NULL, flaggings for any
    *   user will be returned.
    * @param string $session_id
@@ -145,7 +145,7 @@ interface FlagServiceInterface {
    * @param string $flag_id
    *   The identifier of the flag to load.
    *
-   * @return \Drupal\flag\FlagInterface|null
+   * @return FlagInterface|null
    *   The flag entity.
    */
   public function getFlagById($flag_id);
@@ -158,12 +158,12 @@ interface FlagServiceInterface {
    *   $flaggable = \Drupal::service('flag')->getFlaggableById($flag, $entity_id);
    * @endcode
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The ID of the flaggable entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The flaggable entity object.
    */
   public function getFlaggableById(FlagInterface $flag, $entity_id);
@@ -181,9 +181,9 @@ interface FlagServiceInterface {
    *   }
    * @endcode
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   (optional) The flag entity to which to restrict results.
    *
    * @return array
@@ -203,11 +203,11 @@ interface FlagServiceInterface {
    *   $flag_service->flag($flag, $node);
    * @endcode
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to flag.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account of the user flagging the entity. If not given,
    *   the current user is used.
    * @param string $session_id
@@ -215,7 +215,7 @@ interface FlagServiceInterface {
    *   anonymous, then this can also be omitted to use the current session.
    *   to identify an anonymous user.
    *
-   * @return \Drupal\flag\FlagInterface|null
+   * @return FlagInterface|null
    *   The flagging.
    *
    * @throws \LogicException
@@ -238,11 +238,11 @@ interface FlagServiceInterface {
    *   $flag_service->unflag($flag, $node);
    * @endcode
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag being unflagged.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to unflag.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account of the user that created the flagging. Defaults
    *   to the current user.
    * @param string $session_id
@@ -272,7 +272,7 @@ interface FlagServiceInterface {
   /**
    * Remove all flaggings from an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    */
   public function unflagAllByEntity(EntityInterface $entity);
@@ -280,7 +280,7 @@ interface FlagServiceInterface {
   /**
    * Remove all of a user's flaggings.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user object.
    * @param string $session_id
    *   (optional) The session ID. This must be specified if $account is the
@@ -299,7 +299,7 @@ interface FlagServiceInterface {
    *   All flags by the user.
    *   All flaggings of the user.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The account of the user being cancelled or deleted.
    */
   public function userFlagRemoval(UserInterface $account);
@@ -317,7 +317,7 @@ interface FlagServiceInterface {
    *   \Drupal::service('flag')->populateFlaggerDefaults($account, $session_id);
    * @endcode
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   A user account, or a variable set to NULL (rather than the constant NULL)
    *   to get the current user assigned to it.
    * @param string $session_id
diff --git a/src/FlagType/FlagTypeBase.php b/src/FlagType/FlagTypeBase.php
index 59a0a8f..7bdac16 100644
--- a/src/FlagType/FlagTypeBase.php
+++ b/src/FlagType/FlagTypeBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag\FlagType;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Component\Plugin\PluginBase;
@@ -24,7 +25,7 @@ abstract class FlagTypeBase extends PluginBase implements FlagTypePluginInterfac
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -182,7 +183,7 @@ abstract class FlagTypeBase extends PluginBase implements FlagTypePluginInterfac
     // Add default access check.
     $results[] = AccessResult::allowedIfHasPermission($account, $action . ' ' . $flag->id());
 
-    /** @var \Drupal\Core\Access\AccessResultInterface $return */
+    /** @var AccessResultInterface $return */
     $return = array_shift($results);
     foreach ($results as $next) {
       $return = $return->orIf($next);
diff --git a/src/FlagType/FlagTypePluginInterface.php b/src/FlagType/FlagTypePluginInterface.php
index 8e272c6..39280a7 100644
--- a/src/FlagType/FlagTypePluginInterface.php
+++ b/src/FlagType/FlagTypePluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag\FlagType;
 
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -17,7 +18,7 @@ interface FlagTypePluginInterface extends PluginFormInterface, ConfigurableInter
   /**
    * Returns the permissions available to this flag type.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag object.
    *
    * @return array
@@ -30,14 +31,14 @@ interface FlagTypePluginInterface extends PluginFormInterface, ConfigurableInter
    *
    * @param string $action
    *   The action for which to check permissions, either 'flag' or 'unflag'.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag object.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   An AccountInterface object.
-   * @param \Drupal\Core\Entity\EntityInterface $flaggable
+   * @param EntityInterface $flaggable
    *   (optional) The flaggable entity.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   An AccessResult object.
    */
   public function actionAccess($action, FlagInterface $flag, AccountInterface $account, EntityInterface $flaggable = NULL);
diff --git a/src/FlagType/FlagTypePluginManager.php b/src/FlagType/FlagTypePluginManager.php
index d34f19c..a467c11 100644
--- a/src/FlagType/FlagTypePluginManager.php
+++ b/src/FlagType/FlagTypePluginManager.php
@@ -17,9 +17,9 @@ class FlagTypePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/FlaggingInterface.php b/src/FlaggingInterface.php
index a22b09d..e096df3 100644
--- a/src/FlaggingInterface.php
+++ b/src/FlaggingInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\user\EntityOwnerInterface;
 
@@ -21,7 +22,7 @@ interface FlaggingInterface extends ContentEntityInterface, EntityOwnerInterface
   /**
    * Returns the parent flag entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\flag\FlagInterface
+   * @return EntityInterface|FlagInterface
    *   The flag related to this flagging.
    */
   public function getFlag();
@@ -29,7 +30,7 @@ interface FlaggingInterface extends ContentEntityInterface, EntityOwnerInterface
   /**
    * Returns the flaggable entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity object.
    */
   public function getFlaggable();
diff --git a/src/Form/FlagAddPageForm.php b/src/Form/FlagAddPageForm.php
index ebfe1c9..88b3107 100644
--- a/src/Form/FlagAddPageForm.php
+++ b/src/Form/FlagAddPageForm.php
@@ -25,23 +25,23 @@ class FlagAddPageForm extends FormBase {
   /**
    * The flag type plugin manager.
    *
-   * @var Drupal\flag\FlagType\FlagTypePluginManager
+   * @var FlagTypePluginManager
    */
   protected $flagTypeManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new form.
    *
-   * @param \Drupal\flag\FlagType\FlagTypePluginManager $flag_type_manager
+   * @param FlagTypePluginManager $flag_type_manager
    *   The link type plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(FlagTypePluginManager $flag_type_manager, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Form/FlagConfirmFormBase.php b/src/Form/FlagConfirmFormBase.php
index 6845a1a..38f7139 100644
--- a/src/Form/FlagConfirmFormBase.php
+++ b/src/Form/FlagConfirmFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag\Form;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\flag\FlagInterface;
@@ -16,14 +17,14 @@ abstract class FlagConfirmFormBase extends ConfirmFormBase {
   /**
    * The flaggable entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * The flag entity.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
diff --git a/src/Form/FlagDisableConfirmForm.php b/src/Form/FlagDisableConfirmForm.php
index 67ddf52..b2b20f9 100644
--- a/src/Form/FlagDisableConfirmForm.php
+++ b/src/Form/FlagDisableConfirmForm.php
@@ -14,7 +14,7 @@ class FlagDisableConfirmForm extends ConfirmFormBase {
   /**
    * The flag to be enabled or disabled.
    *
-   * @var Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
diff --git a/src/Form/FlagFormBase.php b/src/Form/FlagFormBase.php
index cdc2538..adc5713 100644
--- a/src/Form/FlagFormBase.php
+++ b/src/Form/FlagFormBase.php
@@ -21,32 +21,32 @@ abstract class FlagFormBase extends EntityForm {
   /**
    * The action link plugin manager.
    *
-   * @var Drupal\flag\ActionLink\ActionLinkPluginManager
+   * @var ActionLinkPluginManager
    */
   protected $actionLinkManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfoService;
 
   /**
    * The link generator.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $linkGenerator;
 
   /**
    * Constructs a new form.
    *
-   * @param \Drupal\flag\ActionLink\ActionLinkPluginManager $action_link_manager
+   * @param ActionLinkPluginManager $action_link_manager
    *   The link type plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info_service
+   * @param EntityTypeBundleInfoInterface $bundle_info_service
    *   The bundle info service.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator service.
    */
   public function __construct(ActionLinkPluginManager $action_link_manager, EntityTypeBundleInfoInterface $bundle_info_service, LinkGeneratorInterface $link_generator) {
diff --git a/src/Form/FlagResetForm.php b/src/Form/FlagResetForm.php
index 7dda151..8ba22e2 100644
--- a/src/Form/FlagResetForm.php
+++ b/src/Form/FlagResetForm.php
@@ -16,21 +16,21 @@ class FlagResetForm extends ConfirmFormBase {
   /**
    * The Flag Service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * The flag to reset.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * Class constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The Flag Service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
diff --git a/src/Form/FlaggingForm.php b/src/Form/FlaggingForm.php
index b76342d..6c84c0d 100644
--- a/src/Form/FlaggingForm.php
+++ b/src/Form/FlaggingForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag\Form;
 
+use Drupal\flag\FlaggingInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -26,7 +27,7 @@ class FlaggingForm extends ContentEntityForm {
    */
   public function actions(array $form, FormStateInterface $form_state) {
     $actions = parent::actions($form, $form_state);
-    /** @var \Drupal\flag\FlaggingInterface $flagging */
+    /** @var FlaggingInterface $flagging */
     $flagging = $this->getEntity();
     $flag = $flagging->getFlag();
     $action_link = $flag->getLinkTypePlugin();
diff --git a/src/Form/UnflaggingForm.php b/src/Form/UnflaggingForm.php
index 045efa4..e956240 100644
--- a/src/Form/UnflaggingForm.php
+++ b/src/Form/UnflaggingForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\flag\Form;
 
+use Drupal\flag\FlaggingInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\flag\FlagInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\flag\Plugin\ActionLink\FormEntryInterface;
 
@@ -15,21 +18,21 @@ class UnflaggingForm extends FlagConfirmFormBase {
   /**
    * The flagging entity.
    *
-   * @var \Drupal\flag\FlaggingInterface
+   * @var FlaggingInterface
    */
   protected $flagging;
 
   /**
    * The flaggable entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * The flag entity.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
diff --git a/src/Permissions/FlagPermissions.php b/src/Permissions/FlagPermissions.php
index c203ea8..cc167d3 100644
--- a/src/Permissions/FlagPermissions.php
+++ b/src/Permissions/FlagPermissions.php
@@ -14,7 +14,7 @@ class FlagPermissions implements ContainerInjectionInterface {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
diff --git a/src/Plugin/Action/DeleteFlaggingAction.php b/src/Plugin/Action/DeleteFlaggingAction.php
index a3f6990..e75326f 100644
--- a/src/Plugin/Action/DeleteFlaggingAction.php
+++ b/src/Plugin/Action/DeleteFlaggingAction.php
@@ -21,7 +21,7 @@ class DeleteFlaggingAction extends ActionBase {
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\flag\FlaggingInterface $object */
+    /** @var FlaggingInterface $object */
     return $object->access('delete', $account, $return_as_object);
   }
 
diff --git a/src/Plugin/Action/FlagAction.php b/src/Plugin/Action/FlagAction.php
index fc00f7b..11d9258 100644
--- a/src/Plugin/Action/FlagAction.php
+++ b/src/Plugin/Action/FlagAction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag\Plugin\Action;
 
+use Drupal\flag\FlagInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Entity\DependencyTrait;
@@ -33,14 +34,14 @@ class FlagAction extends ActionBase implements ContainerFactoryPluginInterface,
   /**
    * The flag.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
@@ -53,7 +54,7 @@ class FlagAction extends ActionBase implements ContainerFactoryPluginInterface,
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FlagServiceInterface $flag_service) {
diff --git a/src/Plugin/ActionLink/AJAXactionLink.php b/src/Plugin/ActionLink/AJAXactionLink.php
index 16b0f2e..a1e15b4 100644
--- a/src/Plugin/ActionLink/AJAXactionLink.php
+++ b/src/Plugin/ActionLink/AJAXactionLink.php
@@ -25,7 +25,7 @@ class AJAXactionLink extends Reload {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
@@ -38,9 +38,9 @@ class AJAXactionLink extends Reload {
    *   The ID with which to initialize this plugin.
    * @param array $plugin_definition
    *   The plugin definition array.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request from the request stack.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, AccountInterface $current_user, Request $request) {
diff --git a/src/Plugin/Derivative/EntityFlagActionDeriver.php b/src/Plugin/Derivative/EntityFlagActionDeriver.php
index ff86697..bc4e7b1 100644
--- a/src/Plugin/Derivative/EntityFlagActionDeriver.php
+++ b/src/Plugin/Derivative/EntityFlagActionDeriver.php
@@ -18,14 +18,14 @@ class EntityFlagActionDeriver extends DeriverBase implements ContainerDeriverInt
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * Constructs the flag action deriver.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
diff --git a/src/Plugin/Flag/EntityFlagType.php b/src/Plugin/Flag/EntityFlagType.php
index 0dd75a0..edd70d1 100644
--- a/src/Plugin/Flag/EntityFlagType.php
+++ b/src/Plugin/Flag/EntityFlagType.php
@@ -33,7 +33,7 @@ class EntityFlagType extends FlagTypeBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -274,7 +274,7 @@ class EntityFlagType extends FlagTypeBase {
   /**
    * Defines permissions for the 'owner' set of additional action permissions.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag object.
    *
    * @return array
diff --git a/src/Plugin/views/field/FlagViewsLinkField.php b/src/Plugin/views/field/FlagViewsLinkField.php
index a9e378a..3c44d8e 100644
--- a/src/Plugin/views/field/FlagViewsLinkField.php
+++ b/src/Plugin/views/field/FlagViewsLinkField.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\flag\Plugin\views\field;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\flag\FlagInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\flag\FlaggingInterface;
 use Drupal\flag\FlagLinkBuilderInterface;
@@ -24,21 +26,21 @@ class FlagViewsLinkField extends FieldPluginBase implements ContainerFactoryPlug
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The flag for this row.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * The builder for flag links.
    *
-   * @var \Drupal\flag\FlagLinkBuilderInterface
+   * @var FlagLinkBuilderInterface
    */
   protected $flagLinkBuilder;
 
@@ -65,7 +67,7 @@ class FlagViewsLinkField extends FieldPluginBase implements ContainerFactoryPlug
   /**
    * A helper method to retrieve the flag entity from the views relationship.
    *
-   * @return \Drupal\flag\FlagInterface|null
+   * @return FlagInterface|null
    *   The flag selected by the views relationship.
    */
   public function getFlag() {
@@ -145,7 +147,7 @@ class FlagViewsLinkField extends FieldPluginBase implements ContainerFactoryPlug
    * @param ResultRow $values
    *   The current result row.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The parent entity.
    */
   protected function getParentRelationshipEntity(ResultRow $values) {
@@ -188,7 +190,7 @@ class FlagViewsLinkField extends FieldPluginBase implements ContainerFactoryPlug
   /**
    * Returns the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   protected function getEntityTypeManager() {
diff --git a/src/Plugin/views/relationship/FlagViewsRelationship.php b/src/Plugin/views/relationship/FlagViewsRelationship.php
index 13817df..5202b61 100644
--- a/src/Plugin/views/relationship/FlagViewsRelationship.php
+++ b/src/Plugin/views/relationship/FlagViewsRelationship.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag\Plugin\views\relationship;
 
+use Drupal\flag\FlagInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\PageCache\ResponsePolicy\KillSwitch;
 use Drupal\Core\Session\AccountProxyInterface;
@@ -21,21 +22,21 @@ class FlagViewsRelationship extends RelationshipPluginBase {
   /**
    * The Page Cache Kill switch.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $pageCacheKillSwitch;
 
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -48,11 +49,11 @@ class FlagViewsRelationship extends RelationshipPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $page_cache_kill_switch
+   * @param KillSwitch $page_cache_kill_switch
    *   The kill switch.
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, KillSwitch $page_cache_kill_switch, FlagServiceInterface $flag_service, AccountProxyInterface $current_user) {
@@ -174,7 +175,7 @@ class FlagViewsRelationship extends RelationshipPluginBase {
   /**
    * Get the flag of the relationship.
    *
-   * @return \Drupal\flag\FlagInterface|null
+   * @return FlagInterface|null
    *   The flag being selected by in the view.
    */
   public function getFlag() {
diff --git a/src/TwigExtension/FlagCount.php b/src/TwigExtension/FlagCount.php
index 0b4986d..b2ae64a 100644
--- a/src/TwigExtension/FlagCount.php
+++ b/src/TwigExtension/FlagCount.php
@@ -14,14 +14,14 @@ class FlagCount extends \Twig_Extension {
   /**
    * The flag count.
    *
-   * @var \Drupal\flag\FlagCountManagerInterface
+   * @var FlagCountManagerInterface
    */
   protected $flagCount;
 
   /**
    * Constructs \Drupal\flag\TwigExtension\FlagCount.
    *
-   * @param \Drupal\flag\FlagCountManagerInterface $flag_count
+   * @param FlagCountManagerInterface $flag_count
    *   The flag count service.
    */
   public function __construct($flag_count) {
@@ -53,9 +53,9 @@ class FlagCount extends \Twig_Extension {
   /**
    * Gets the number of flaggings for the given flag and flaggable.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $flaggable
+   * @param EntityInterface $flaggable
    *   The flaggable entity.
    *
    * @return string
diff --git a/tests/modules/flag_event_test/src/EventSubscriber/FlagEvents.php b/tests/modules/flag_event_test/src/EventSubscriber/FlagEvents.php
index 02baf9a..30ca639 100644
--- a/tests/modules/flag_event_test/src/EventSubscriber/FlagEvents.php
+++ b/tests/modules/flag_event_test/src/EventSubscriber/FlagEvents.php
@@ -17,23 +17,23 @@ class FlagEvents implements EventSubscriberInterface {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(FlagServiceInterface $flag_service, StateInterface $state) {
@@ -53,7 +53,7 @@ class FlagEvents implements EventSubscriberInterface {
   /**
    * React to flagging event.
    *
-   * @param \Drupal\flag\Event\FlaggingEvent $event
+   * @param FlaggingEvent $event
    *   The flagging event.
    */
   public function onFlag(FlaggingEvent $event) {
@@ -67,7 +67,7 @@ class FlagEvents implements EventSubscriberInterface {
   /**
    * React to unflagging event.
    *
-   * @param \Drupal\flag\Event\UnflaggingEvent $event
+   * @param UnflaggingEvent $event
    *   The unflagging event.
    */
   public function onUnflag(UnflaggingEvent $event) {
diff --git a/tests/src/Functional/AdminUITest.php b/tests/src/Functional/AdminUITest.php
index 6e20240..48bdc94 100644
--- a/tests/src/Functional/AdminUITest.php
+++ b/tests/src/Functional/AdminUITest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\flag\Functional;
 
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\flag\FlagInterface;
+use Drupal\node\Entity\Node;
 /**
  * Tests the Flag admin UI.
  *
@@ -13,7 +16,7 @@ class AdminUITest extends FlagTestBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -34,14 +37,14 @@ class AdminUITest extends FlagTestBase {
   /**
    * The flag used for the test.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * The node for test flagging.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
@@ -69,7 +72,7 @@ class AdminUITest extends FlagTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ -106,9 +109,18 @@ class AdminUITest extends FlagTestBase {
     $this->drupalGet('admin/structure/flags/add');
     $this->submitForm([], 'Continue');
     // Check for fieldset titles.
-    $this->assertText(t('Messages'));
-    $this->assertText(t('Flag access'));
-    $this->assertText(t('Display options'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Messages'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Flag access'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Display options'));
 
     $edit = [
       'label' => $this->label,
@@ -119,7 +131,10 @@ class AdminUITest extends FlagTestBase {
     ];
     $this->submitForm($edit, 'Create Flag');
 
-    $this->assertText(t('Flag @this_label has been added.', ['@this_label' => $this->label]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Flag @this_label has been added.', ['@this_label' => $this->label]));
 
     $this->flag = $this->flagService->getFlagById($this->flagId);
 
@@ -142,17 +157,26 @@ class AdminUITest extends FlagTestBase {
    */
   public function doFlagDisable() {
     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Enabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Enabled'));
 
     $this->drupalGet('admin/structure/flags/manage/' . $this->flagId . '/disable');
     $this->submitForm([], 'Disable');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Disabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Disabled'));
 
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertNoText($this->flagShortText);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->flagShortText);
   }
 
   /**
@@ -160,17 +184,26 @@ class AdminUITest extends FlagTestBase {
    */
   public function doFlagEnable() {
     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Disabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Disabled'));
 
     $this->drupalGet('admin/structure/flags/manage/' . $this->flagId . '/enable');
     $this->submitForm([], 'Enable');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Enabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Enabled'));
 
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertText($this->flagShortText);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->flagShortText);
   }
 
   /**
@@ -186,12 +219,15 @@ class AdminUITest extends FlagTestBase {
       ->condition('entity_id', $this->node->id());
     $ids_before = $query_before->execute();
 
-    $this->assertEqual(count($ids_before), 1, "The flag has one flagging.");
+    $this->assertEquals(count($ids_before), 1, "The flag has one flagging.");
 
     // Go to the reset form for the flag.
     $this->drupalGet('admin/structure/flags/manage/' . $this->flag->id() . '/reset');
 
-    $this->assertText($this->t('Are you sure you want to reset the Flag'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reset the Flag'));
 
     $this->submitForm([], 'Reset');
 
@@ -201,7 +237,7 @@ class AdminUITest extends FlagTestBase {
       ->condition('entity_id', $this->node->id());
     $ids_after = $query_after->execute();
 
-    $this->assertEqual(count($ids_after), 0, "The flag has no flaggings after being reset.");
+    $this->assertEquals(count($ids_after), 0, "The flag has no flaggings after being reset.");
   }
 
   /**
@@ -235,7 +271,7 @@ class AdminUITest extends FlagTestBase {
 
     // Check that the weights for each flag are saved in the database correctly.
     foreach ($all_flags as $id => $flag) {
-      $this->assertEqual($all_flags[$id]->get('weight'), $flag_weights_to_set[$id], 'The flag weight was changed.');
+      $this->assertEquals($all_flags[$id]->get('weight'), $flag_weights_to_set[$id], 'The flag weight was changed.');
     }
   }
 
@@ -245,11 +281,14 @@ class AdminUITest extends FlagTestBase {
   public function doFlagDelete() {
     // Flag node.
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertLink($this->flagShortText);
+    $this->assertSession()->linkExists($this->flagShortText);
     // Go to the delete form for the flag.
     $this->drupalGet('admin/structure/flags/manage/' . $this->flag->id() . '/delete');
 
-    $this->assertText($this->t('Are you sure you want to delete the flag @this_label?', ['@this_label' => $this->label]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to delete the flag @this_label?', ['@this_label' => $this->label]));
 
     $this->submitForm([], 'Delete');
 
@@ -258,8 +297,11 @@ class AdminUITest extends FlagTestBase {
 
     $this->assertNull($result, 'The flag was deleted.');
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertText($this->node->label());
-    $this->assertNoLink($this->flagShortText);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->node->label());
+    $this->assertSession()->linkNotExists($this->flagShortText);
   }
 
 }
diff --git a/tests/src/Functional/AjaxLinkNoJsTest.php b/tests/src/Functional/AjaxLinkNoJsTest.php
index 9ff224d..3b9bbb8 100644
--- a/tests/src/Functional/AjaxLinkNoJsTest.php
+++ b/tests/src/Functional/AjaxLinkNoJsTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\flag\Functional;
 
+use Drupal\flag\FlagInterface;
+use Drupal\flag\FlagServiceInterface;
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;
 use Drupal\Tests\flag\Traits\FlagPermissionsTrait;
@@ -32,42 +36,42 @@ class AjaxLinkNoJsTest extends BrowserTestBase {
   /**
    * Flag to test with.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * Test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;
 
   /**
    * Normal user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // A article to test with.
diff --git a/tests/src/Functional/AnonymousFlagTest.php b/tests/src/Functional/AnonymousFlagTest.php
index 0e10e8a..d4947ec 100644
--- a/tests/src/Functional/AnonymousFlagTest.php
+++ b/tests/src/Functional/AnonymousFlagTest.php
@@ -27,19 +27,19 @@ class AnonymousFlagTest extends BrowserTestBase {
   public static $modules = ['system', 'user', 'node', 'flag'];
 
   /**
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
   /**
-   * @var \Drupal\flag\Entity\Flag
+   * @var Flag
    */
   protected $flag;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     NodeType::create(['type' => 'page', 'name' => 'page'])->save();
diff --git a/tests/src/Functional/FlagPermissionsTest.php b/tests/src/Functional/FlagPermissionsTest.php
index 7ce61f3..0fa8ba1 100644
--- a/tests/src/Functional/FlagPermissionsTest.php
+++ b/tests/src/Functional/FlagPermissionsTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\flag\Functional;
 
+use Drupal\flag\Entity\Flag;
+use Drupal\node\Entity\Node;
+use Drupal\user\Entity\User;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;
 
@@ -24,35 +27,35 @@ class FlagPermissionsTest extends BrowserTestBase {
   /**
    * The flag under test.
    *
-   * @var \Drupal\flag\Entity\Flag
+   * @var Flag
    */
   protected $flag;
 
   /**
    * The node to flag.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
   /**
    * A user who can flag and unflag.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $fullFlagUser;
 
   /**
    * A user who can only flag.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $flagOnlyUser;
 
   /**
    * A user with no flag permissions.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $authUser;
 
@@ -66,7 +69,7 @@ class FlagPermissionsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create content type.
diff --git a/tests/src/Functional/FlagTestBase.php b/tests/src/Functional/FlagTestBase.php
index 7e8c534..25f0726 100644
--- a/tests/src/Functional/FlagTestBase.php
+++ b/tests/src/Functional/FlagTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\flag\Functional;
 
+use Drupal\flag\FlagServiceInterface;
+use Drupal\flag\FlagInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\flag\Entity\Flag;
 use Drupal\Tests\flag\Traits\FlagPermissionsTrait;
@@ -25,7 +27,7 @@ abstract class FlagTestBase extends BrowserTestBase {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
@@ -46,7 +48,7 @@ abstract class FlagTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Get the Flag Service.
@@ -106,7 +108,7 @@ abstract class FlagTestBase extends BrowserTestBase {
    *   (optional) A string containing the link type ID. Is omitted, assumes
    *   'reload'.
    *
-   * @return \Drupal\flag\FlagInterface|null
+   * @return FlagInterface|null
    *   The created flag entity.
    */
   protected function createFlagWithForm($entity_type = 'node', $edit = [], $link_type = 'reload') {
diff --git a/tests/src/Functional/LinkHtmlTest.php b/tests/src/Functional/LinkHtmlTest.php
index bcd888e..c3fbf32 100644
--- a/tests/src/Functional/LinkHtmlTest.php
+++ b/tests/src/Functional/LinkHtmlTest.php
@@ -67,7 +67,7 @@ class LinkHtmlTest extends FlagTestBase {
     // Click the flag link.
     $this->drupalGet('node/' . $node_id);
     // Find the marked-up flag short text in the raw HTML.
-    $this->assertRaw(Xss::filterAdmin($this->flag->getShortText('flag')));
+    $this->assertSession()->responseContains(Xss::filterAdmin($this->flag->getShortText('flag')));
     // Xss::filter() is used to strip all HTML tags from the short text
     // because clickLink() looks for text as it appears in the brower, and that
     // does not include the unescaped HTML tags. Note that the stripped tags
@@ -78,7 +78,7 @@ class LinkHtmlTest extends FlagTestBase {
 
     // Check that the node is flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertRaw(Xss::filterAdmin($this->flag->getShortText('unflag')));
+    $this->assertSession()->responseContains(Xss::filterAdmin($this->flag->getShortText('unflag')));
 
     // Unflag the node.
     $this->drupalGet('node/' . $node_id);
@@ -86,7 +86,7 @@ class LinkHtmlTest extends FlagTestBase {
 
     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertRaw(Xss::filterAdmin($this->flag->getShortText('flag')));
+    $this->assertSession()->responseContains(Xss::filterAdmin($this->flag->getShortText('flag')));
   }
 
 }
diff --git a/tests/src/Functional/LinkOutputLocationTest.php b/tests/src/Functional/LinkOutputLocationTest.php
index 704a062..fc00cca 100644
--- a/tests/src/Functional/LinkOutputLocationTest.php
+++ b/tests/src/Functional/LinkOutputLocationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flag\Functional;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\Template\Attribute;
 use Drupal\node\Entity\Node;
 use Drupal\flag\FlagInterface;
@@ -30,21 +31,21 @@ class LinkOutputLocationTest extends FlagTestBase {
   /**
    * The flag.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * The node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a flag.
@@ -119,7 +120,10 @@ class LinkOutputLocationTest extends FlagTestBase {
     $this->drupalGet('admin/structure/types/manage/article/display/teaser');
     $this->submitForm($edit, 'Save');
     // Check the form was saved successfully.
-    $this->assertText('Your settings have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your settings have been saved.');
 
     // Check the full node still shows the flag link as a field.
     $this->drupalGet('node/' . $this->node->id());
@@ -161,16 +165,18 @@ class LinkOutputLocationTest extends FlagTestBase {
     // TODO: check no entity field link.
 
     $this->drupalGet('node/' . $this->node->id() . '/edit');
-    $this->assertNoField('flag[' . $this->flag->id() . ']');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists('flag[' . $this->flag->id() . ']');
     $this->assertNoContextualLinkPlaceholder($contextual_links_id);
   }
 
   /**
    * Pass if the flag link is shown as a field on the page.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag to look for.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity the flag is on.
    * @param string $message
    *   (Optional) Message to display.
@@ -182,9 +188,9 @@ class LinkOutputLocationTest extends FlagTestBase {
   /**
    * Pass if the flag link is not shown as a field on the page.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag to look for.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity the flag is on.
    * @param string $message
    *   (Optional) Message to display.
@@ -198,9 +204,9 @@ class LinkOutputLocationTest extends FlagTestBase {
    *
    * It is not recommended to call this function directly.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag to look for.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity the flag is on.
    * @param string $message
    *   Message to display.
@@ -211,7 +217,7 @@ class LinkOutputLocationTest extends FlagTestBase {
     $xpath = $this->xpath("//*[contains(@class, 'node__content')]//div[contains(@class, :id)]", [
       ':id' => 'flag-' . $flag->id() . '-' . $entity->id(),
     ]);
-    $this->assert(count($xpath) == ($exists ? 1 : 0), $message);
+    $this->assertTrue(count($xpath) == ($exists ? 1 : 0), $message);
   }
 
   /**
diff --git a/tests/src/Functional/LinkOwnershipAccessTest.php b/tests/src/Functional/LinkOwnershipAccessTest.php
index fd826b6..dc4d0f9 100644
--- a/tests/src/Functional/LinkOwnershipAccessTest.php
+++ b/tests/src/Functional/LinkOwnershipAccessTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flag\Functional;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Tests the current user sees links for their own flaggings, or global ones.
  *
@@ -12,14 +13,14 @@ class LinkOwnershipAccessTest extends FlagTestBase {
   /**
    * The flaggable entity to test.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $node;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ -51,14 +52,14 @@ class LinkOwnershipAccessTest extends FlagTestBase {
     // Flag the node with user 1.
     $this->drupalGet($this->node->toUrl());
     $this->clickLink($flag->getShortText('flag'));
-    $this->assertResponse(200);
-    $this->assertLink($flag->getShortText('unflag'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkExists($flag->getShortText('unflag'));
 
     // Switch to user 2. They should see the link to flag.
     $user_2 = $this->drupalCreateUser();
     $this->drupalLogin($user_2);
     $this->drupalGet($this->node->toUrl());
-    $this->assertLink($flag->getShortText('flag'), 0, "A flag link is found on the page for user 2.");
+    $this->assertSession()->linkExists($flag->getShortText('flag'), 0, "A flag link is found on the page for user 2.");
 
   }
 
@@ -77,14 +78,14 @@ class LinkOwnershipAccessTest extends FlagTestBase {
     // Flag the node with user 1.
     $this->drupalGet($this->node->toUrl());
     $this->clickLink($flag->getShortText('flag'));
-    $this->assertResponse(200);
-    $this->assertLink($flag->getShortText('unflag'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkExists($flag->getShortText('unflag'));
 
     // Switch to user 2. They should see the unflag link too.
     $user_2 = $this->drupalCreateUser();
     $this->drupalLogin($user_2);
     $this->drupalGet($this->node->toUrl());
-    $this->assertLink($flag->getShortText('unflag'), 0, "The unflag link is found on the page for user 2.");
+    $this->assertSession()->linkExists($flag->getShortText('unflag'), 0, "The unflag link is found on the page for user 2.");
   }
 
 }
diff --git a/tests/src/Functional/LinkTypeAjaxTest.php b/tests/src/Functional/LinkTypeAjaxTest.php
index 920bac2..ea27417 100644
--- a/tests/src/Functional/LinkTypeAjaxTest.php
+++ b/tests/src/Functional/LinkTypeAjaxTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\flag\Functional;
 
+use Drupal\flag\FlagInterface;
+use Drupal\node\NodeInterface;
 /**
  * Tests the AJAX link type.
  *
@@ -17,21 +19,21 @@ class LinkTypeAjaxTest extends FlagTestBase {
   /**
    * The flag under test.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * The node to be flagged and unflagged.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a node to flag.
@@ -61,18 +63,18 @@ class LinkTypeAjaxTest extends FlagTestBase {
     $this->drupalGet($node_url);
 
     // Confirm the flag link exists.
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
 
     // Click the flag link. This ensures that the non-JS fallback works we are
     // redirected to back to the page and the node is flagged.
     $this->clickLink($this->flag->getShortText('flag'));
-    $this->assertUrl($node_url);
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->addressEquals($node_url);
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));
 
     // Click the unflag link, repeat the check.
     $this->clickLink($this->flag->getShortText('unflag'));
-    $this->assertUrl($node_url);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->addressEquals($node_url);
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
   }
 
 }
diff --git a/tests/src/Functional/LinkTypeConfirmFormTest.php b/tests/src/Functional/LinkTypeConfirmFormTest.php
index b59ee2b..2eee6be 100644
--- a/tests/src/Functional/LinkTypeConfirmFormTest.php
+++ b/tests/src/Functional/LinkTypeConfirmFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flag\Functional;
 
+use Drupal\flag\FlagInterface;
 /**
  * Tests the confirm form link type.
  *
@@ -17,7 +18,7 @@ class LinkTypeConfirmFormTest extends FlagTestBase {
   /**
    * The flag object.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
@@ -84,7 +85,7 @@ class LinkTypeConfirmFormTest extends FlagTestBase {
 
     // Check that the node is flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));
 
     // Check the flag count was incremented.
     $flag_count_flagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ -93,7 +94,7 @@ class LinkTypeConfirmFormTest extends FlagTestBase {
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");
+    $this->assertEquals($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");
 
     // Unflag the node.
     $this->clickLink($this->flag->getShortText('unflag'));
@@ -106,7 +107,7 @@ class LinkTypeConfirmFormTest extends FlagTestBase {
 
     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
 
     // Check the flag count was decremented.
     $flag_count_unflagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ -115,7 +116,7 @@ class LinkTypeConfirmFormTest extends FlagTestBase {
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
+    $this->assertEquals($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
   }
 
 }
diff --git a/tests/src/Functional/LinkTypeFieldEntryTest.php b/tests/src/Functional/LinkTypeFieldEntryTest.php
index bc2d885..daff3cd 100644
--- a/tests/src/Functional/LinkTypeFieldEntryTest.php
+++ b/tests/src/Functional/LinkTypeFieldEntryTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flag\Functional;
 
+use Drupal\flag\FlagInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\field_ui\Traits\FieldUiTestTrait;
 
@@ -30,14 +31,14 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
   /**
    * The flag object.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // The breadcrumb block is needed for FieldUiTestTrait's tests.
@@ -73,9 +74,18 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
     $this->drupalPostAjaxForm(NULL, $edit, 'link_type');
 
     // Check confirm form field entry.
-    $this->assertText(t('Flag confirmation message'));
-    $this->assertText(t('Enter flagging details message'));
-    $this->assertText(t('Unflag confirmation message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Flag confirmation message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Enter flagging details message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Unflag confirmation message'));
   }
 
   /**
@@ -105,7 +115,10 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
 
     // Check the Field UI tabs appear on the flag edit page.
     $this->drupalGet('admin/structure/flags/manage/' . $flag_id);
-    $this->assertText(t("Manage fields"), "The Field UI tabs appear on the flag edit form page.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t("Manage fields"));
 
     $this->fieldUIAddNewField('admin/structure/flags/manage/' . $flag_id, $this->flagFieldId, $this->flagFieldLabel, 'text');
   }
@@ -130,7 +143,10 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
     $this->clickLink($this->flag->getShortText('flag'));
 
     // Check if we have the confirm form message displayed.
-    $this->assertText($this->flagConfirmMessage);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->flagConfirmMessage);
 
     // Enter the field value and submit it.
     $this->flagFieldValue = $this->randomString();
@@ -140,7 +156,7 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
     $this->submitForm($edit, $this->createButtonText);
 
     // Check that the node is flagged.
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));
   }
 
   /**
@@ -155,17 +171,20 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
     $this->clickLink($this->flag->getShortText('unflag'));
 
     $node_url = Url::fromRoute('entity.node.canonical', ['node' => $this->nodeId]);
-    $this->assertUrl('flag/details/edit/' . $flag_id . '/' . $this->nodeId, [
+    $this->assertSession()->addressEquals('flag/details/edit/' . $flag_id . '/' . $this->nodeId, [
       'query' => [
         'destination' => $node_url->toString(),
       ],
     ]);
 
     // See if the details message is displayed.
-    $this->assertText($this->flagDetailsMessage);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->flagDetailsMessage);
 
     // See if the field value was preserved.
-    $this->assertFieldByName('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
+    $this->assertSession()->fieldValueEquals('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
 
     // Update the field value.
     $this->flagFieldValue = $this->randomString();
@@ -178,7 +197,7 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
     $this->drupalGet('flag/details/edit/' . $flag_id . '/' . $this->nodeId);
 
     // See if the field value was preserved.
-    $this->assertFieldByName('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
+    $this->assertSession()->fieldValueEquals('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
   }
 
   /**
@@ -189,16 +208,16 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
 
     // Test a good flag ID param, but a bad flaggable ID param.
     $this->drupalGet('flag/details/edit/' . $flag_id . '/-9999');
-    $this->assertResponse('404', 'Editing an invalid flagging path: good flag, bad entity.');
+    $this->assertSession()->statusCodeEquals('404', 'Editing an invalid flagging path: good flag, bad entity.');
 
     // Test a bad flag ID param, but a good flaggable ID param.
     $this->drupalGet('flag/details/edit/jibberish/' . $this->nodeId);
-    $this->assertResponse('404', 'Editing an invalid flagging path: bad flag, good entity');
+    $this->assertSession()->statusCodeEquals('404', 'Editing an invalid flagging path: bad flag, good entity');
 
     // Test editing a unflagged entity.
     $unlinked_node = $this->drupalCreateNode(['type' => $this->nodeType]);
     $this->drupalGet('flag/details/edit/' . $flag_id . '/' . $unlinked_node->id());
-    $this->assertResponse('404', 'Editing an invalid flagging path: good flag, good entity, but not flagged');
+    $this->assertSession()->statusCodeEquals('404', 'Editing an invalid flagging path: good flag, good entity, but not flagged');
   }
 
   /**
@@ -216,15 +235,18 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
     $this->clickLink($this->deleteButtonText);
 
     // Check if we have the confirm form message displayed.
-    $this->assertText($this->unflagConfirmMessage);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->unflagConfirmMessage);
 
     // Submit the confirm form.
     $this->submitForm([], $this->deleteButtonText);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
   }
 
 }
diff --git a/tests/src/Functional/LinkTypeReloadTest.php b/tests/src/Functional/LinkTypeReloadTest.php
index 994ceee..9223362 100644
--- a/tests/src/Functional/LinkTypeReloadTest.php
+++ b/tests/src/Functional/LinkTypeReloadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flag\Functional;
 
+use Drupal\flag\FlagInterface;
 /**
  * Tests the reload link type.
  *
@@ -12,7 +13,7 @@ class LinkTypeReloadTest extends FlagTestBase {
   /**
    * The flag object.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
@@ -66,7 +67,7 @@ class LinkTypeReloadTest extends FlagTestBase {
     // We (probably) can't obtain the URL from the route rather than hardcoding
     // it, as that would probably give us the token too.
     $this->drupalGet("flag/flag/$flag_id/$node_id");
-    $this->assertResponse(403, "Access to the flag reload link is denied when no token is supplied.");
+    $this->assertSession()->statusCodeEquals(403, "Access to the flag reload link is denied when no token is supplied.");
 
     // Click the flag link.
     $this->drupalGet('node/' . $node_id);
@@ -74,7 +75,7 @@ class LinkTypeReloadTest extends FlagTestBase {
 
     // Check that the node is flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));
 
     // Check the flag count was incremented.
     $flag_count_flagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ -83,11 +84,11 @@ class LinkTypeReloadTest extends FlagTestBase {
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");
+    $this->assertEquals($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");
 
     // Attempt to load the reload link URL without the token.
     $this->drupalGet("flag/unflag/$flag_id/$node_id");
-    $this->assertResponse(403, "Access to the unflag reload link is denied when no token is supplied.");
+    $this->assertSession()->statusCodeEquals(403, "Access to the unflag reload link is denied when no token is supplied.");
 
     // Unflag the node.
     $this->drupalGet('node/' . $node_id);
@@ -95,7 +96,7 @@ class LinkTypeReloadTest extends FlagTestBase {
 
     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
 
     // Check the flag count was decremented.
     $flag_count_unflagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ -104,7 +105,7 @@ class LinkTypeReloadTest extends FlagTestBase {
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
+    $this->assertEquals($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
   }
 
 }
diff --git a/tests/src/Functional/OutputLocationEntityFormAccessTest.php b/tests/src/Functional/OutputLocationEntityFormAccessTest.php
index 9fb86c4..3e22fae 100644
--- a/tests/src/Functional/OutputLocationEntityFormAccessTest.php
+++ b/tests/src/Functional/OutputLocationEntityFormAccessTest.php
@@ -33,28 +33,28 @@ class OutputLocationEntityFormAccessTest extends BrowserTestBase {
   /**
    * The node whose edit form is shown.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
   /**
    * A flag that grants access.
    *
-   * @var \Drupal\flag\Entity\Flag
+   * @var Flag
    */
   protected $flag_granted;
 
   /**
    * A flag that denies access.
    *
-   * @var \Drupal\flag\Entity\Flag
+   * @var Flag
    */
   protected $flag_denied;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     NodeType::create(['type' => 'page', 'name' => 'page'])->save();
diff --git a/tests/src/Functional/ShowOnEntityFormTest.php b/tests/src/Functional/ShowOnEntityFormTest.php
index c3edf04..f0878f4 100644
--- a/tests/src/Functional/ShowOnEntityFormTest.php
+++ b/tests/src/Functional/ShowOnEntityFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flag\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;
 use Drupal\Tests\flag\Traits\FlagPermissionsTrait;
 use Drupal\Tests\BrowserTestBase;
@@ -41,7 +42,7 @@ class ShowOnEntityFormTest extends BrowserTestBase {
   /**
    * A user with Flag admin rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -55,7 +56,7 @@ class ShowOnEntityFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create content type.
@@ -121,7 +122,7 @@ class ShowOnEntityFormTest extends BrowserTestBase {
 
     // Go back to the node edit page and check if the flag checkbox is updated.
     $this->drupalGet($node_edit_path);
-    $this->assertNoFieldChecked($flag_checkbox_id, 'The flag checkbox is unchecked on the entity form.');
+    $this->assertSession()->checkboxNotChecked($flag_checkbox_id, 'The flag checkbox is unchecked on the entity form.');
 
     // Verify link is on the add form.
     $this->drupalGet('node/add/' . $this->nodeType);
@@ -149,7 +150,9 @@ class ShowOnEntityFormTest extends BrowserTestBase {
 
     // Form element should not appear on the delete form.
     $this->drupalGet($node->toUrl('delete-form'));
-    $this->assertNoField($flag_checkbox_id);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists($flag_checkbox_id);
   }
 
 }
diff --git a/tests/src/Functional/UserFlagTypeTest.php b/tests/src/Functional/UserFlagTypeTest.php
index 27c69ae..06044dd 100644
--- a/tests/src/Functional/UserFlagTypeTest.php
+++ b/tests/src/Functional/UserFlagTypeTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flag\Functional;
 
+use Drupal\flag\FlagInterface;
 /**
  * Tests user flag type integrations.
  *
@@ -12,7 +13,7 @@ class UserFlagTypeTest extends FlagTestBase {
   /**
    * The flag to be added.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
@@ -28,9 +29,15 @@ class UserFlagTypeTest extends FlagTestBase {
       'flag_entity_type' => 'entity:user',
     ], $this->t('Continue'));
 
-    $this->assertText($this->t('Permissions for users to flag themselves.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Permissions for users to flag themselves.'));
 
-    $this->assertText($this->t('Display link on user profile page'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Display link on user profile page'));
   }
 
   /**
@@ -65,11 +72,11 @@ class UserFlagTypeTest extends FlagTestBase {
 
     // Check the state of the extra permssions checkbox.
     $this->drupalGet('admin/structure/flags/manage/' . $flag->id());
-    $this->assertFieldChecked('edit-extra-permissions-owner');
+    $this->assertSession()->checkboxChecked('edit-extra-permissions-owner');
 
     // Assert flag appears on the profile page.
     $this->drupalGet('user/' . $user->id());
-    $this->assertLink($flag->getShortText('flag'));
+    $this->assertSession()->linkExists($flag->getShortText('flag'));
 
     // Uncheck extra permssions.
     $edit = [
@@ -80,11 +87,11 @@ class UserFlagTypeTest extends FlagTestBase {
 
     // Confirm extra permissions is unchecked.
     $this->drupalGet('admin/structure/flags/manage/' . $flag->id());
-    $this->assertNoFieldChecked('edit-extra-permissions-owner');
+    $this->assertSession()->checkboxNotChecked('edit-extra-permissions-owner');
 
     // Assert the flag disapears from the profile page.
     $this->drupalGet('user/' . $user->id());
-    $this->assertNoLink($flag->getShortText('flag'));
+    $this->assertSession()->linkNotExists($flag->getShortText('flag'));
   }
 
 }
diff --git a/tests/src/FunctionalJavascript/AjaxLinkTest.php b/tests/src/FunctionalJavascript/AjaxLinkTest.php
index c72ec3a..0f71104 100644
--- a/tests/src/FunctionalJavascript/AjaxLinkTest.php
+++ b/tests/src/FunctionalJavascript/AjaxLinkTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\flag\FunctionalJavascript;
 
+use Drupal\flag\FlagInterface;
+use Drupal\flag\FlagServiceInterface;
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;
 use Drupal\Tests\flag\Traits\FlagPermissionsTrait;
@@ -34,35 +38,35 @@ class AjaxLinkTest extends WebDriverTestBase {
   /**
    * Flag to test with.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * Test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;
 
   /**
    * Normal user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;
 
@@ -74,7 +78,7 @@ class AjaxLinkTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // A article to test with.
diff --git a/tests/src/FunctionalJavascript/FlagContextualLinksTest.php b/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
index f3214e3..78f5ac0 100755
--- a/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
+++ b/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\flag\FunctionalJavascript;
 
+use Drupal\flag\Flaginterface;
+use Drupal\user\Entity\User;
+use Drupal\flag\FlagServiceInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\flag\Entity\Flag;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ -44,7 +47,7 @@ class FlagContextualLinksTest extends WebDriverTestBase {
   /**
    * The flag.
    *
-   * @var \Drupal\flag\Flaginterface
+   * @var Flaginterface
    */
   protected $flag;
 
@@ -58,7 +61,7 @@ class FlagContextualLinksTest extends WebDriverTestBase {
   /**
    * An authenticated user to test flagging.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $alice;
 
@@ -67,7 +70,7 @@ class FlagContextualLinksTest extends WebDriverTestBase {
    *
    * Used to test cache contexts.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $bob;
 
@@ -81,14 +84,14 @@ class FlagContextualLinksTest extends WebDriverTestBase {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Get the Flag Service.
diff --git a/tests/src/FunctionalJavascript/FlagCountExtensionTest.php b/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
index 7092c71..662e3c4 100644
--- a/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
+++ b/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
@@ -33,7 +33,7 @@ class FlagCountExtensionTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
     // Set the linkTypePlugin of the flag to count_link for running the tests.
diff --git a/tests/src/FunctionalJavascript/FlagJsTestBase.php b/tests/src/FunctionalJavascript/FlagJsTestBase.php
index 5eab0cf..2cb7860 100644
--- a/tests/src/FunctionalJavascript/FlagJsTestBase.php
+++ b/tests/src/FunctionalJavascript/FlagJsTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flag\FunctionalJavascript;
 
+use Drupal\flag\FlagServiceInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;
@@ -24,7 +25,7 @@ abstract class FlagJsTestBase extends WebDriverTestBase {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
@@ -45,7 +46,7 @@ abstract class FlagJsTestBase extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Get the Flag Service.
diff --git a/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php b/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
index 8b96ecf..e2eb6e1 100644
--- a/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
+++ b/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\flag\FunctionalJavascript;
 
+use Drupal\flag\FlagServiceInterface;
+use Drupal\user\UserInterface;
+use Drupal\flag\FlagInterface;
+use Drupal\node\NodeInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;
 
@@ -22,14 +26,14 @@ class LinkTypeAjaxTest extends WebDriverTestBase {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * A user with Flag admin rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -43,14 +47,14 @@ class LinkTypeAjaxTest extends WebDriverTestBase {
   /**
    * The flag under test.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * The node to be flagged and unflagged.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -62,7 +66,7 @@ class LinkTypeAjaxTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Get the Flag Service.
diff --git a/tests/src/FunctionalJavascript/ModalFormTest.php b/tests/src/FunctionalJavascript/ModalFormTest.php
index 45dd782..63efa69 100644
--- a/tests/src/FunctionalJavascript/ModalFormTest.php
+++ b/tests/src/FunctionalJavascript/ModalFormTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\flag\FunctionalJavascript;
 
+use Drupal\flag\FlagInterface;
+use Drupal\flag\FlagServiceInterface;
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;
@@ -28,42 +32,42 @@ class ModalFormTest extends WebDriverTestBase {
   /**
    * Flag to test with.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * Test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;
 
   /**
    * Normal user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // A test flag.
diff --git a/tests/src/Kernel/AccessTest.php b/tests/src/Kernel/AccessTest.php
index 3ea79fe..f4c9c04 100644
--- a/tests/src/Kernel/AccessTest.php
+++ b/tests/src/Kernel/AccessTest.php
@@ -20,7 +20,7 @@ class AccessTest extends FlagKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('user', 'users_data', 'flag');
diff --git a/tests/src/Kernel/FlagActionTest.php b/tests/src/Kernel/FlagActionTest.php
index 173ecc3..9047f45 100644
--- a/tests/src/Kernel/FlagActionTest.php
+++ b/tests/src/Kernel/FlagActionTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\flag\Kernel;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\flag\FlagInterface;
+use Drupal\system\ActionConfigEntityInterface;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\flag\Entity\Flag;
 use Drupal\flag\Plugin\Action\DeleteFlaggingAction;
@@ -16,21 +21,21 @@ class FlagActionTest extends FlagKernelTestBase {
   /**
    * Test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;
 
   /**
    * Test admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -42,7 +47,7 @@ class FlagActionTest extends FlagKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('entity_test');
@@ -51,7 +56,7 @@ class FlagActionTest extends FlagKernelTestBase {
     // Fake a logged in user (non-admin).
     $this->admin = $this->createUser();
     $this->account = $this->createUser();
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $switcher */
+    /** @var AccountSwitcherInterface $switcher */
     $switcher = $this->container->get('account_switcher');
     $switcher->switchTo($this->account);
   }
@@ -86,7 +91,7 @@ class FlagActionTest extends FlagKernelTestBase {
    * Tests direct use of the action plugins.
    */
   public function testFlagActions() {
-    /** @var \Drupal\flag\FlagInterface $entity_flag */
+    /** @var FlagInterface $entity_flag */
     $entity_flag = Flag::create([
       'id' => strtolower($this->randomMachineName()),
       'label' => $this->randomString(),
@@ -100,7 +105,7 @@ class FlagActionTest extends FlagKernelTestBase {
 
     $test_entity = EntityTest::create();
     $test_entity->save();
-    /** @var \Drupal\system\ActionConfigEntityInterface $action */
+    /** @var ActionConfigEntityInterface $action */
     $action = $this->container->get('entity_type.manager')->getStorage('action')->load('flag_action.' . $entity_flag->id() . '_flag');
     $plugin = $action->getPlugin();
     $plugin->execute($test_entity);
@@ -133,12 +138,12 @@ class FlagActionTest extends FlagKernelTestBase {
    */
   public function testFlaggingDeleteAction() {
     // Action should be available upon install.
-    /** @var \Drupal\system\ActionConfigEntityInterface $action */
+    /** @var ActionConfigEntityInterface $action */
     $action = $this->container->get('entity_type.manager')->getStorage('action')->load('flag_delete_flagging');
     $plugin = $action->getPlugin();
     $this->assertInstanceOf(DeleteFlaggingAction::class, $plugin);
 
-    /** @var \Drupal\flag\FlagInterface $entity_flag */
+    /** @var FlagInterface $entity_flag */
     $entity_flag = Flag::create([
       'id' => strtolower($this->randomMachineName()),
       'label' => $this->randomString(),
diff --git a/tests/src/Kernel/FlagCountsTest.php b/tests/src/Kernel/FlagCountsTest.php
index d24c49a..31c230d6 100644
--- a/tests/src/Kernel/FlagCountsTest.php
+++ b/tests/src/Kernel/FlagCountsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\flag\Kernel;
 
+use Drupal\flag\FlagInterface;
+use Drupal\flag\FlagCountManagerInterface;
 use Drupal\flag\Entity\Flag;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -18,63 +20,63 @@ class FlagCountsTest extends FlagKernelTestBase {
   /**
    * The flag.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * The other flag.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $otherFlag;
 
   /**
    * The node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
   /**
    * The other node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $otherNode;
 
   /**
    * The flag count service.
    *
-   * @var \Drupal\flag\FlagCountManagerInterface
+   * @var FlagCountManagerInterface
    */
   protected $flagCountService;
 
   /**
    * User object.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $adminUser;
 
   /**
    * User object.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $otherAdminUser;
 
   /**
    * Anonymous user object.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $anonymousUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('user', 'users_data');
@@ -166,23 +168,23 @@ class FlagCountsTest extends FlagKernelTestBase {
     // Get the count of flaggings for the flag. The other flag also has
     // flaggings, which should not be included in the count.
     $flag_get_entity_flag_counts = $this->flagCountService->getFlagFlaggingCount($this->flag);
-    $this->assertEqual($flag_get_entity_flag_counts, 3, "getFlagFlaggingCount() returns the expected count.");
+    $this->assertEquals($flag_get_entity_flag_counts, 3, "getFlagFlaggingCount() returns the expected count.");
 
     // Get the counts of all flaggings on the entity. The other node is also
     // flagged, but should not be included in the count.
     $flag_get_counts = $this->flagCountService->getEntityFlagCounts($this->node);
-    $this->assertEqual($flag_get_counts[$this->flag->id()], 2, "getEntityFlagCounts() returns the expected count.");
-    $this->assertEqual($flag_get_counts[$this->otherFlag->id()], 1, "getEntityFlagCounts() returns the expected count.");
+    $this->assertEquals($flag_get_counts[$this->flag->id()], 2, "getEntityFlagCounts() returns the expected count.");
+    $this->assertEquals($flag_get_counts[$this->otherFlag->id()], 1, "getEntityFlagCounts() returns the expected count.");
 
     // Get the number of entities for the flag. Two users have flagged one node
     // with the flag, but that should count only once.
     $flag_get_flag_counts = $this->flagCountService->getFlagEntityCount($this->flag);
-    $this->assertEqual($flag_get_flag_counts, 2, "getFlagEntityCount() returns the expected count.");
+    $this->assertEquals($flag_get_flag_counts, 2, "getFlagEntityCount() returns the expected count.");
 
     // Unflag everything with the main flag.
     $this->flagService->unflagAllByFlag($this->flag);
     $flag_get_flag_counts = $this->flagCountService->getFlagEntityCount($this->flag);
-    $this->assertEqual($flag_get_flag_counts, 0, "getFlagEntityCount() on reset flag returns the expected count.");
+    $this->assertEquals($flag_get_flag_counts, 0, "getFlagEntityCount() on reset flag returns the expected count.");
   }
 
   /**
@@ -203,9 +205,9 @@ class FlagCountsTest extends FlagKernelTestBase {
     // For non-global flags anonymous users can uniquely identified by
     // session_id.
     $anon1_count = $this->flagCountService->getUserFlagFlaggingCount($this->flag, $this->anonymousUser, $anon1_session_id);
-    $this->assertEqual($anon1_count, 1, "getUserFlagFlaggingCount() counts only the first user.");
+    $this->assertEquals($anon1_count, 1, "getUserFlagFlaggingCount() counts only the first user.");
     $anon2_count = $this->flagCountService->getUserFlagFlaggingCount($this->flag, $this->anonymousUser, $anon2_session_id);
-    $this->assertEqual($anon2_count, 1, "getUserFlagFlaggingCount() counts only the second user.");
+    $this->assertEquals($anon2_count, 1, "getUserFlagFlaggingCount() counts only the second user.");
 
     // Switch to a global flag, the accounting rules.
     $this->flag->setGlobal(TRUE);
@@ -214,7 +216,7 @@ class FlagCountsTest extends FlagKernelTestBase {
     // Despite being a global flag, queries about specific anonymous users can
     // still be made.
     $rejected_count = $this->flagCountService->getUserFlagFlaggingCount($this->flag, $this->anonymousUser, $anon1_session_id);
-    $this->assertEqual($rejected_count, 1, "getUserFlagFlaggingCount() ignores the session id.");
+    $this->assertEquals($rejected_count, 1, "getUserFlagFlaggingCount() ignores the session id.");
   }
 
   /**
@@ -241,13 +243,13 @@ class FlagCountsTest extends FlagKernelTestBase {
 
     // Confirm the counts have been incremented.
     $article1_count_before = $this->flagCountService->getEntityFlagCounts($article1);
-    $this->assertEqual($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
+    $this->assertEquals($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
     $article2_count_before = $this->flagCountService->getEntityFlagCounts($article2);
-    $this->assertEqual($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');
+    $this->assertEquals($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');
 
     // Confirm the flagging have been created.
     $flaggings_before = $this->getFlagFlaggings($this->flag);
-    $this->assertEqual(count($flaggings_before), 2, 'There are two flaggings associated with the flag');
+    $this->assertEquals(count($flaggings_before), 2, 'There are two flaggings associated with the flag');
 
     // Delete the flag.
     $this->flag->delete();
@@ -288,13 +290,13 @@ class FlagCountsTest extends FlagKernelTestBase {
 
     // Confirm the counts have been incremented.
     $article1_count_before = $this->flagCountService->getEntityFlagCounts($article1);
-    $this->assertEqual($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
+    $this->assertEquals($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
     $article2_count_before = $this->flagCountService->getEntityFlagCounts($article2);
-    $this->assertEqual($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');
+    $this->assertEquals($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');
 
     // Confirm the flagging have been created.
     $flaggings_before = $this->getFlagFlaggings($this->flag);
-    $this->assertEqual(count($flaggings_before), 2, 'There are two flaggings associated with the flag');
+    $this->assertEquals(count($flaggings_before), 2, 'There are two flaggings associated with the flag');
 
     // Delete the entities.
     $article1->delete();
@@ -302,7 +304,7 @@ class FlagCountsTest extends FlagKernelTestBase {
 
     // The list of all flaggings MUST now be empty.
     $flaggings_after = $this->getFlagFlaggings($this->flag);
-    $this->assert(empty($flaggings_after), 'The flaggings were removed, when the flag was deleted');
+    $this->assertTrue(empty($flaggings_after), 'The flaggings were removed, when the flag was deleted');
 
     // Confirm the counts have been removed.
     $article1_count_after = $this->flagCountService->getEntityFlagCounts($article1);
@@ -339,10 +341,10 @@ class FlagCountsTest extends FlagKernelTestBase {
     $this->flagService->flag($this->flag, $article, $auth_user);
 
     $user_before_count = $this->flagCountService->getEntityFlagCounts($auth_user);
-    $this->assertEqual($user_before_count[$user_flag->id()], 1, 'The user has been flagged.');
+    $this->assertEquals($user_before_count[$user_flag->id()], 1, 'The user has been flagged.');
 
     $article_count_before = $this->flagCountService->getEntityFlagCounts($article);
-    $this->assertEqual($article_count_before[$this->flag->id()], 1, 'The article has been flagged by the user.');
+    $this->assertEquals($article_count_before[$this->flag->id()], 1, 'The article has been flagged by the user.');
 
     $auth_user->delete();
 
@@ -350,7 +352,7 @@ class FlagCountsTest extends FlagKernelTestBase {
     $this->assertEmpty($flaggings_after, 'The user flaggings were removed when the user was deleted.');
 
     $flaggings_after = $this->getFlagFlaggings($this->flag);
-    $this->assert(empty($flaggings_after), 'The node flaggings were removed when the user was deleted');
+    $this->assertTrue(empty($flaggings_after), 'The node flaggings were removed when the user was deleted');
   }
 
 }
diff --git a/tests/src/Kernel/FlagKernelTestBase.php b/tests/src/Kernel/FlagKernelTestBase.php
index 397b033..42102eb 100644
--- a/tests/src/Kernel/FlagKernelTestBase.php
+++ b/tests/src/Kernel/FlagKernelTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\flag\Kernel;
 
+use Drupal\flag\FlagServiceInterface;
+use Drupal\flag\FlaggingInterface;
 use Drupal\flag\FlagInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
@@ -18,7 +20,7 @@ abstract class FlagKernelTestBase extends KernelTestBase {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
@@ -40,7 +42,7 @@ abstract class FlagKernelTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('user');
@@ -57,10 +59,10 @@ abstract class FlagKernelTestBase extends KernelTestBase {
   /**
    * Get all flaggings for the given flag.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    *
-   * @return \Drupal\flag\FlaggingInterface[]
+   * @return FlaggingInterface[]
    *   An array of flaggings.
    */
   protected function getFlagFlaggings(FlagInterface $flag) {
diff --git a/tests/src/Kernel/FlagServiceTest.php b/tests/src/Kernel/FlagServiceTest.php
index 894ee58..0b191ba 100644
--- a/tests/src/Kernel/FlagServiceTest.php
+++ b/tests/src/Kernel/FlagServiceTest.php
@@ -33,12 +33,13 @@ class FlagServiceTest extends FlagKernelTestBase {
     // Search for flag.
     $user_with_access = $this->createUser(['flag ' . $flag->id()]);
     $result = $this->flagService->getAllFlags('node', 'article');
-    $this->assertIdentical(count($result), 1, 'Found flag type');
+    $this->assertSame(count($result), 1, 'Found flag type');
     $this->assertEquals([$flag->id()], array_keys($result));
   }
 
   /**
    * Test exceptions are thrown when flagging and unflagging.
+   * @doesNotPerformAssertions
    */
   public function testFlagServiceFlagExceptions() {
     $not_article = NodeType::create(['type' => 'not_article']);
@@ -72,7 +73,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when the flag does not apply to the entity type of the flaggable entity.");
     }
 
     // Try flagging a node of the wrong bundle.
@@ -87,7 +87,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when the flag does not apply to the bundle of the flaggable entity.");
     }
 
     // Flag the node, then try to flag it again.
@@ -104,7 +103,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when the flaggable entity is already flagged by the user with the flag.");
     }
 
     try {
@@ -112,7 +110,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when a non-global flag is associated with a poorly specified anonymous user.");
     }
 
     // Test unflagging.
@@ -122,7 +119,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when the flag does not apply to the entity type of the flaggable entity.");
     }
 
     // Try unflagging a node of the wrong bundle.
@@ -131,7 +127,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when the flag does not apply to the bundle of the flaggable entity.");
     }
 
     // Create a new node that's not flagged, and try to unflag it.
@@ -146,7 +141,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when the flaggable entity is not flagged by the user with the flag.");
     }
 
     try {
@@ -154,14 +148,12 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when a non-global flag is associated with a poorly specified anonymous user.");
     }
 
     // Demonstrate a valid combination can be unflagged without throwing an
     // exception.
     try {
       $this->flagService->unflag($flag, $flaggable_node, $account, $session_id);
-      $this->pass('The unflag() method throws no exception when the flaggable entity and user is correct');
     }
     catch (\LogicException $e) {
       $this->fail('The unfag() method threw an exception where processing a valid unflag request.');
diff --git a/tests/src/Kernel/FlaggingStorageTest.php b/tests/src/Kernel/FlaggingStorageTest.php
index ebf25f8..7c41c01 100644
--- a/tests/src/Kernel/FlaggingStorageTest.php
+++ b/tests/src/Kernel/FlaggingStorageTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\flag\Kernel;
 
+use Drupal\user\UserInterface;
+use Drupal\flag\FlagInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
 
@@ -18,28 +21,28 @@ class FlaggingStorageTest extends FlagKernelTestBase {
   /**
    * User to test with.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;
 
   /**
    * Test flag.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * Test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->account = $this->createUser();
diff --git a/tests/src/Traits/FlagCreateTrait.php b/tests/src/Traits/FlagCreateTrait.php
index c2285a7..52f3bfd 100644
--- a/tests/src/Traits/FlagCreateTrait.php
+++ b/tests/src/Traits/FlagCreateTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flag\Traits;
 
+use Drupal\flag\FlagInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\Xss;
 use Drupal\flag\Entity\Flag;
@@ -27,7 +28,7 @@ trait FlagCreateTrait {
    * @param string|null $link_type
    *   (optional) The ID of the link type to use. If omitted, assumes 'reload'.
    *
-   * @return \Drupal\flag\FlagInterface
+   * @return FlagInterface
    *   A new flag entity with the given criteria.
    */
   protected function createFlag($entity_type = 'node', array $bundles = [], $link_type = 'reload') {
@@ -55,7 +56,7 @@ trait FlagCreateTrait {
    * @param string|null $link_type
    *   (optional) The ID of the link type to use. If omitted, assumes 'reload'.
    *
-   * @return \Drupal\flag\FlagInterface
+   * @return FlagInterface
    *   A new flag entity with the given criteria.
    */
   protected function createGlobalFlag($entity_type = 'node', array $bundles = [], $link_type = 'reload') {
@@ -76,7 +77,7 @@ trait FlagCreateTrait {
    * @param array $edit
    *   The edit array to pass to Flag::create().
    *
-   * @return \Drupal\flag\FlagInterface
+   * @return FlagInterface
    *   A new flag entity with the given criteria.
    */
   protected function createFlagFromArray(array $edit) {
diff --git a/tests/src/Traits/FlagPermissionsTrait.php b/tests/src/Traits/FlagPermissionsTrait.php
index a8206e7..361221f 100644
--- a/tests/src/Traits/FlagPermissionsTrait.php
+++ b/tests/src/Traits/FlagPermissionsTrait.php
@@ -14,7 +14,7 @@ trait FlagPermissionsTrait {
   /**
    * Grants flag and unflag permission to the given flag.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag on which to grant permissions.
    * @param array|string $role_id
    *   (optional) The ID of the role to grant permissions. If omitted, the
diff --git a/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php b/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
index dde3215..b861aff 100644
--- a/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
+++ b/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flag\Unit\Ajax;
 
+use Drupal\Component\Utility\Random;
 use Drupal\flag\Ajax\ActionLinkFlashCommand;
 use Drupal\Tests\UnitTestCase;
 
@@ -14,14 +15,14 @@ class ActionLinkFlashCommandTest extends UnitTestCase {
   /**
    * The Random Utility.
    *
-   * @var \Drupal\Component\Utility\Random
+   * @var Random
    */
   protected $random;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->random = $this->getRandomGenerator();
   }
diff --git a/tests/src/Unit/Plugin/Action/FlagActionTest.php b/tests/src/Unit/Plugin/Action/FlagActionTest.php
index 4624454..365d2bc 100644
--- a/tests/src/Unit/Plugin/Action/FlagActionTest.php
+++ b/tests/src/Unit/Plugin/Action/FlagActionTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flag\Unit\Plugin\Action;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Entity\EntityInterface;
@@ -20,17 +21,18 @@ use Drupal\user\UserInterface;
  */
 class FlagActionTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Mock flag.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $flag = $this->prophesize(FlagInterface::class);
