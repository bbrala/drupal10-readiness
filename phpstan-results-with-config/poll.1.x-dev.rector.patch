diff --git a/poll.tokens.inc b/poll.tokens.inc
index 95f6dc48b..711f4f7bd 100644
--- a/poll.tokens.inc
+++ b/poll.tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\poll\Entity\Poll;
 /**
  * @file
  * Builds placeholder replacement tokens for values specific to Poll nodes.
@@ -44,7 +45,7 @@ function poll_tokens($type, $tokens, array $data, array $options, BubbleableMeta
   $replacements = array();
 
   if ($type == 'poll' && !empty($data['poll'])) {
-    /** @var \Drupal\poll\Entity\Poll $poll */
+    /** @var Poll $poll */
     $poll = $data['poll'];
 
     $total_votes = 0;
diff --git a/src/Controller/PollController.php b/src/Controller/PollController.php
index 16a61ff93..6fba08a6e 100644
--- a/src/Controller/PollController.php
+++ b/src/Controller/PollController.php
@@ -13,7 +13,7 @@ class PollController extends ControllerBase {
   /**
    * Route title callback.
    *
-   * @param \Drupal\poll\PollInterface $poll
+   * @param PollInterface $poll
    *   The poll entity.
    *
    * @return string
diff --git a/src/Entity/Poll.php b/src/Entity/Poll.php
index 0fae5f155..ba67b4d7b 100644
--- a/src/Entity/Poll.php
+++ b/src/Entity/Poll.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\poll\Entity;
 
+use Drupal\poll\PollVoteStorage;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -382,7 +383,7 @@ class Poll extends ContentEntityBase implements PollInterface {
    * @return mixed
    */
   public function hasUserVoted() {
-    /** @var \Drupal\poll\PollVoteStorage $vote_storage */
+    /** @var PollVoteStorage $vote_storage */
     $vote_storage = \Drupal::service('poll_vote.storage');
     return $vote_storage->getUserVote($this);
   }
@@ -471,7 +472,7 @@ class Poll extends ContentEntityBase implements PollInterface {
    * {@inheritdoc}
    */
   public function getVotes() {
-    /** @var \Drupal\poll\PollVoteStorage $vote_storage */
+    /** @var PollVoteStorage $vote_storage */
     $vote_storage = \Drupal::service('poll_vote.storage');
     return $vote_storage->getVotes($this);
   }
diff --git a/src/Form/PollViewForm.php b/src/Form/PollViewForm.php
index 54f246c3f..912429186 100644
--- a/src/Form/PollViewForm.php
+++ b/src/Form/PollViewForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\poll\Form;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\poll\PollVoteStorageInterface;
+use Drupal\poll\PollVoteStorage;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Form\BaseFormIdInterface;
@@ -19,7 +22,7 @@ class PollViewForm extends FormBase implements BaseFormIdInterface {
   /**
    * The Poll of the form.
    *
-   * @var \Drupal\poll\PollInterface
+   * @var PollInterface
    */
   protected $poll;
 
@@ -40,7 +43,7 @@ class PollViewForm extends FormBase implements BaseFormIdInterface {
   /**
    * Set the Poll of this form.
    *
-   * @param \Drupal\poll\PollInterface $poll
+   * @param PollInterface $poll
    *   The poll that will be set in the form.
    */
   public function setPoll(PollInterface $poll) {
@@ -121,7 +124,7 @@ class PollViewForm extends FormBase implements BaseFormIdInterface {
   public function ajaxReplaceForm(array $form, FormStateInterface $form_state) {
     // Embed status message into the form.
     $form = ['messages' => ['#type' => 'status_messages']] + $form;
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
     // Render the form.
     $output = $renderer->renderRoot($form);
@@ -224,7 +227,7 @@ class PollViewForm extends FormBase implements BaseFormIdInterface {
   /**
    * Display a themed poll results.
    *
-   * @param \Drupal\poll\PollInterface $poll
+   * @param PollInterface $poll
    *   The poll entity.
    * @param bool $block
    *   (optional) TRUE if a poll should be displayed in a block. Defaults to
@@ -262,7 +265,7 @@ class PollViewForm extends FormBase implements BaseFormIdInterface {
       );
     }
 
-    /** @var \Drupal\poll\PollVoteStorageInterface $vote_storage */
+    /** @var PollVoteStorageInterface $vote_storage */
     $vote_storage = \Drupal::service('poll_vote.storage');
     $user_vote = $vote_storage->getUserVote($poll);
 
@@ -288,11 +291,11 @@ class PollViewForm extends FormBase implements BaseFormIdInterface {
    *
    * @param array $form
    *   The previous form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function cancel(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\poll\PollVoteStorageInterface $vote_storage */
+    /** @var PollVoteStorageInterface $vote_storage */
     $vote_storage = \Drupal::service('poll_vote.storage');
     $vote_storage->cancelVote($this->poll, $this->currentUser());
     \Drupal::logger('poll')->notice('%user\'s vote in Poll #%poll deleted.', array(
@@ -312,7 +315,7 @@ class PollViewForm extends FormBase implements BaseFormIdInterface {
    * View vote results submit function.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function result(array $form, FormStateInterface $form_state) {
     $form_state->set('show_results', TRUE);
@@ -323,7 +326,7 @@ class PollViewForm extends FormBase implements BaseFormIdInterface {
    * Back to poll view submit function.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function back(array $form, FormStateInterface $form_state) {
     $form_state->set('show_results', FALSE);
@@ -334,7 +337,7 @@ class PollViewForm extends FormBase implements BaseFormIdInterface {
    * Save a user's vote submit function.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function save(array $form, FormStateInterface $form_state) {
     $options = array();
@@ -344,7 +347,7 @@ class PollViewForm extends FormBase implements BaseFormIdInterface {
     $options['hostname'] = \Drupal::request()->getClientIp();
     $options['timestamp'] = \Drupal::time()->getRequestTime();
     // Save vote.
-    /** @var \Drupal\poll\PollVoteStorage $vote_storage */
+    /** @var PollVoteStorage $vote_storage */
     $vote_storage = \Drupal::service('poll_vote.storage');
     $vote_storage->saveVote($options);
     $this->messenger()->addMessage($this->t('Your vote has been recorded.'));
@@ -373,7 +376,7 @@ class PollViewForm extends FormBase implements BaseFormIdInterface {
    * Validates the vote action.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function validateVote(array &$form, FormStateInterface $form_state) {
     if (!$form_state->hasValue('choice')) {
@@ -384,7 +387,7 @@ class PollViewForm extends FormBase implements BaseFormIdInterface {
   /**
    * Checks if the current user is allowed to cancel on the given poll.
    *
-   * @param \Drupal\poll\PollInterface $poll
+   * @param PollInterface $poll
    *
    * @return bool
    *   TRUE if the user can cancel.
diff --git a/src/Form/PollVoteDeleteForm.php b/src/Form/PollVoteDeleteForm.php
index abe9c10c9..b7813f5bf 100644
--- a/src/Form/PollVoteDeleteForm.php
+++ b/src/Form/PollVoteDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\poll\Form;
 
+use Drupal\poll\PollVoteStorage;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\user\Entity\User;
@@ -41,7 +42,7 @@ class PollVoteDeleteForm extends ContentEntityConfirmFormBase implements Contain
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $uid = $this->container->get('request_stack')->getCurrentRequest()->attributes->get('user');
     $account = User::load($uid);
-    /** @var \Drupal\poll\PollVoteStorage $vote_storage */
+    /** @var PollVoteStorage $vote_storage */
     $vote_storage = \Drupal::service('poll_vote.storage');
     $vote_storage->cancelVote($this->entity, $account);
     \Drupal::logger('poll')->notice('%user\'s vote in Poll #%poll deleted.', array(
diff --git a/src/Plugin/Block/PollRecentBlock.php b/src/Plugin/Block/PollRecentBlock.php
index 3dfae86e9..42b42a745 100644
--- a/src/Plugin/Block/PollRecentBlock.php
+++ b/src/Plugin/Block/PollRecentBlock.php
@@ -23,7 +23,7 @@ class PollRecentBlock extends BlockBase implements ContainerFactoryPluginInterfa
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -39,7 +39,7 @@ class PollRecentBlock extends BlockBase implements ContainerFactoryPluginInterfa
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/Field/FieldWidget/PollChoiceDefaultWidget.php b/src/Plugin/Field/FieldWidget/PollChoiceDefaultWidget.php
index 803668226..fc30d0b28 100644
--- a/src/Plugin/Field/FieldWidget/PollChoiceDefaultWidget.php
+++ b/src/Plugin/Field/FieldWidget/PollChoiceDefaultWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\poll\Plugin\Field\FieldWidget;
 
+use Drupal\poll\PollChoiceInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
@@ -73,9 +74,9 @@ class PollChoiceDefaultWidget extends WidgetBase {
    * code is set to the source language. The intended translation language
    * is only accessibly through the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field items object.
    *
    * @return string
@@ -107,7 +108,7 @@ class PollChoiceDefaultWidget extends WidgetBase {
         continue;
       }
 
-      /** @var \Drupal\poll\PollChoiceInterface $choice */
+      /** @var PollChoiceInterface $choice */
       $choice = !empty($item_values['target_id']) ? $storage->load($item_values['target_id']) : $storage->create(['langcode' => $langcode]);
 
       // If target translation is not yet available, populate it with data from the original choice.
diff --git a/src/Plugin/views/field/PollStatus.php b/src/Plugin/views/field/PollStatus.php
index 9495d3956..c9341b5de 100644
--- a/src/Plugin/views/field/PollStatus.php
+++ b/src/Plugin/views/field/PollStatus.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\poll\Plugin\views\field;
 
+use Drupal\poll\PollInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;
 
@@ -15,11 +16,11 @@ use Drupal\views\ResultRow;
 class PollStatus extends FieldPluginBase {
 
   /**
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    * @return mixed
    */
   function render(ResultRow $values) {
-    /** @var \Drupal\poll\PollInterface $entity */
+    /** @var PollInterface $entity */
     $entity = $values->_entity;
 
     if ($entity->isOpen() && $entity->getRuntime() != 0) {
diff --git a/src/Plugin/views/field/PollTotalVotes.php b/src/Plugin/views/field/PollTotalVotes.php
index 69b9bc566..16e715bce 100644
--- a/src/Plugin/views/field/PollTotalVotes.php
+++ b/src/Plugin/views/field/PollTotalVotes.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\poll\Plugin\views\field;
 
+use Drupal\poll\PollVoteStorage;
 use Drupal\poll\Entity\Poll;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;
@@ -15,11 +16,11 @@ use Drupal\views\ResultRow;
 class PollTotalVotes extends FieldPluginBase {
 
   /**
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    * @return mixed
    */
   function render(ResultRow $values) {
-    /** @var \Drupal\poll\PollVoteStorage $vote_storage */
+    /** @var PollVoteStorage $vote_storage */
     $vote_storage = \Drupal::service('poll_vote.storage');
     $entity = Poll::load($this->getValue($values));
     $build['#markup'] = $vote_storage->getTotalVotes($entity);
diff --git a/src/PollListBuilder.php b/src/PollListBuilder.php
index 5979ff665..e696a0cc1 100644
--- a/src/PollListBuilder.php
+++ b/src/PollListBuilder.php
@@ -54,7 +54,7 @@ class PollListBuilder extends DraggableListBuilder {
    * Overrides Drupal\Core\Entity\EntityListController::buildRow().
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\poll\PollVoteStorage $vote_storage */
+    /** @var PollVoteStorage $vote_storage */
     $vote_storage = \Drupal::service('poll_vote.storage');
 
     $row['question'] = $entity->toLink()->toString();
diff --git a/src/PollPostRenderCache.php b/src/PollPostRenderCache.php
index 5c085372c..5d6a04ef0 100644
--- a/src/PollPostRenderCache.php
+++ b/src/PollPostRenderCache.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\poll;
 
+use Drupal\poll\Form\PollViewForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Security\TrustedCallbackInterface;
 
@@ -13,14 +14,14 @@ class PollPostRenderCache implements TrustedCallbackInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new PollPostRenderCache object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -48,14 +49,14 @@ class PollPostRenderCache implements TrustedCallbackInterface {
    *   A renderable array containing the poll form.
    */
   public function renderViewForm($id, $view_mode, $langcode = NULL) {
-    /** @var \Drupal\poll\PollInterface $poll */
+    /** @var PollInterface $poll */
     $poll = $this->entityTypeManager->getStorage('poll')->load($id);
 
     if ($poll) {
       if ($langcode && $poll->hasTranslation($langcode)) {
         $poll = $poll->getTranslation($langcode);
       }
-      /** @var \Drupal\poll\Form\PollViewForm $form_object */
+      /** @var PollViewForm $form_object */
       $form_object = \Drupal::service('class_resolver')->getInstanceFromDefinition('Drupal\poll\Form\PollViewForm');
       $form_object->setPoll($poll);
       return \Drupal::formBuilder()->getForm($form_object, \Drupal::request(), $view_mode);
diff --git a/src/PollStorageInterface.php b/src/PollStorageInterface.php
index 6007fc338..5fd3f8539 100644
--- a/src/PollStorageInterface.php
+++ b/src/PollStorageInterface.php
@@ -114,8 +114,7 @@ interface PollStorageInterface extends EntityStorageInterface {
   /**
    * Returns all expired polls.
    *
-   * @return \Drupal\poll\PollInterface[]
-   *
+   * @return PollInterface[]
    */
   public function getExpiredPolls();
 
diff --git a/src/PollVoteStorage.php b/src/PollVoteStorage.php
index ae8dc10a4..3c7e88a7b 100644
--- a/src/PollVoteStorage.php
+++ b/src/PollVoteStorage.php
@@ -14,14 +14,14 @@ class PollVoteStorage implements PollVoteStorageInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
@@ -35,9 +35,9 @@ class PollVoteStorage implements PollVoteStorageInterface {
   /**
    * Constructs a new PollVoteStorage.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   A Database connection to use for reading and writing database data.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(Connection $connection, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
