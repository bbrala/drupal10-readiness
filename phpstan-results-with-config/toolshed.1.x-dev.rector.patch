diff --git a/modules/toolshed_media/src/Form/MediaEmbedStylesForm.php b/modules/toolshed_media/src/Form/MediaEmbedStylesForm.php
index 4c902b7..c91512d 100644
--- a/modules/toolshed_media/src/Form/MediaEmbedStylesForm.php
+++ b/modules/toolshed_media/src/Form/MediaEmbedStylesForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\toolshed_media\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,16 +17,16 @@ class MediaEmbedStylesForm extends ConfigFormBase {
   /**
    * Entity storage handler for image styles.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $imageStyleStorage;
 
   /**
    * Create a new instance of the MediaEmbedStylesForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/toolshed_media/src/Plugin/Field/FieldFormatter/FileInfoFormatter.php b/modules/toolshed_media/src/Plugin/Field/FieldFormatter/FileInfoFormatter.php
index 24f15a2..2cb8bdc 100644
--- a/modules/toolshed_media/src/Plugin/Field/FieldFormatter/FileInfoFormatter.php
+++ b/modules/toolshed_media/src/Plugin/Field/FieldFormatter/FileInfoFormatter.php
@@ -38,7 +38,7 @@ class FileInfoFormatter extends EntityReferenceFormatterBase {
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\toolshed_media\Utility\MimeHelperInterface $mime_helper
+   * @param MimeHelperInterface $mime_helper
    *   Toolshed media mime manager. Maintains a map of file extensions to
    *   configured mime display settings.
    */
@@ -167,7 +167,7 @@ class FileInfoFormatter extends EntityReferenceFormatterBase {
 
         if (!empty($linkTo)) {
           $itemUrl = $fileHelper && ($linkTo == 'file' || $entity instanceof File)
-            ? Url::fromUri(file_create_url($fileHelper->getUri()))
+            ? \Drupal::service('file_url_generator')->generate($fileHelper->getUri())
             : $entity->toUrl('canonical');
         }
 
diff --git a/modules/toolshed_media/src/Plugin/Field/FieldFormatter/MediaImageStyleFormatter.php b/modules/toolshed_media/src/Plugin/Field/FieldFormatter/MediaImageStyleFormatter.php
index 179870a..6a3f988 100644
--- a/modules/toolshed_media/src/Plugin/Field/FieldFormatter/MediaImageStyleFormatter.php
+++ b/modules/toolshed_media/src/Plugin/Field/FieldFormatter/MediaImageStyleFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\toolshed_media\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Entity\EntityDisplayRepository;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -32,21 +33,21 @@ class MediaImageStyleFormatter extends EntityReferenceFormatterBase implements C
   /**
    * Service which retrieves and maintains Drupal system configurations.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Service which manages various entity types and their handlers.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Service for managing the various entity view modes.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepository
+   * @var EntityDisplayRepository
    */
   protected $entityDisplayRepo;
 
@@ -66,11 +67,11 @@ class MediaImageStyleFormatter extends EntityReferenceFormatterBase implements C
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Service for retrieving and maintain Drupal system configurations.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity manager service, for getting entity definitions and handlers.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   Manage entity view mode configurations and displays.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository) {
diff --git a/modules/toolshed_media/src/Plugin/Toolshed/ThirdPartyConfig/MediaThirdPartyConfig.php b/modules/toolshed_media/src/Plugin/Toolshed/ThirdPartyConfig/MediaThirdPartyConfig.php
index aea59db..a95fa83 100644
--- a/modules/toolshed_media/src/Plugin/Toolshed/ThirdPartyConfig/MediaThirdPartyConfig.php
+++ b/modules/toolshed_media/src/Plugin/Toolshed/ThirdPartyConfig/MediaThirdPartyConfig.php
@@ -39,7 +39,7 @@ class MediaThirdPartyConfig extends ThirdPartyConfigBase implements ContainerFac
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory) {
diff --git a/modules/toolshed_media/src/Routing/MediaRedirectRequestSubscriber.php b/modules/toolshed_media/src/Routing/MediaRedirectRequestSubscriber.php
index 43994d4..6db6bd2 100644
--- a/modules/toolshed_media/src/Routing/MediaRedirectRequestSubscriber.php
+++ b/modules/toolshed_media/src/Routing/MediaRedirectRequestSubscriber.php
@@ -25,34 +25,34 @@ class MediaRedirectRequestSubscriber implements EventSubscriberInterface {
   /**
    * Route used to determine how the request needs to be handled.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The account to use when determining if the request should redirect.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Generate a new MediaRedirectRequestSubscriber event listener.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The routing match interface to determine what route the request is
    *   acting on, and if it matches a media entity request.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   An account / session proxy representing the current user to evaluate
    *   the permissions and handling of the account retrieval.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(RouteMatchInterface $route_match, AccountInterface $account, EntityTypeManagerInterface $entity_type_manager) {
@@ -77,7 +77,7 @@ class MediaRedirectRequestSubscriber implements EventSubscriberInterface {
    * decide if the page needs to get redirected to the media source file
    * if the user access and media type settings call for it.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The event information. This will contain the current kernel object and
    *   information about the request, since the event is responding to a
    *   KernelEvents::REQUEST event.
diff --git a/modules/toolshed_media/src/Utility/FileHelper.php b/modules/toolshed_media/src/Utility/FileHelper.php
index f45bc3d..21abf17 100644
--- a/modules/toolshed_media/src/Utility/FileHelper.php
+++ b/modules/toolshed_media/src/Utility/FileHelper.php
@@ -24,7 +24,7 @@ class FileHelper {
    * Every media entity type can utilize a different field for its file, this
    * method helps to determine which field was used.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity being to test for the field information. We don't
    *   use the \Drupal\media_entity\Entity\Media class directly because it
    *   may not exists if the media entity module is not install (allowes it
@@ -53,7 +53,7 @@ class FileHelper {
    * entity field. The method is able to resolve the nested file entity from
    * fields referencing a Media or file entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   A fieldable entity containing the file to get the URL for as a field.
    * @param string $field_name
    *   Name of the field to try to extract the File object from.
@@ -127,7 +127,7 @@ class FileHelper {
   /**
    * Create a file helper from either a File or Media entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The file or media entity to create a new instance of the FileHelper
    *   from. The instance (if it can be created) will be for the real file.
    * @param string $view_mode
@@ -155,7 +155,7 @@ class FileHelper {
   /**
    * The file to generate the URL for.
    *
-   * @var \Drupal\file\Entity\File
+   * @var File
    */
   protected $file;
 
@@ -179,7 +179,7 @@ class FileHelper {
   /**
    * Create a new instance of the FileHelper with the provided file.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   File entity to track and create the URL for.
    * @param array $display
    *   Display settings for this file entity. Mostly we will be looking
@@ -286,7 +286,7 @@ class FileHelper {
    */
   public function buildRawUrl($absolute = TRUE) {
     $urlOpts = ['absolute' => $absolute];
-    $uri = file_create_url($this->getUri());
+    $uri = \Drupal::service('file_url_generator')->generateAbsoluteString($this->getUri());
 
     // Get the URL directly to this file.
     return Url::fromUri($uri, $urlOpts)->toString();
diff --git a/modules/toolshed_media/src/Utility/MimeHelper.php b/modules/toolshed_media/src/Utility/MimeHelper.php
index 57f4562..266a612 100644
--- a/modules/toolshed_media/src/Utility/MimeHelper.php
+++ b/modules/toolshed_media/src/Utility/MimeHelper.php
@@ -19,7 +19,7 @@ class MimeHelper implements MimeHelperInterface {
   /**
    * Create a new instance of the Toolshed MimeHelper class.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The plugin factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/modules/toolshed_search/src/Form/ToolshedSearchFilterForm.php b/modules/toolshed_search/src/Form/ToolshedSearchFilterForm.php
index 793cb9c..1de3054 100644
--- a/modules/toolshed_search/src/Form/ToolshedSearchFilterForm.php
+++ b/modules/toolshed_search/src/Form/ToolshedSearchFilterForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\toolshed_search\Form;
 
+use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Form\FormBase;
@@ -17,14 +18,14 @@ class ToolshedSearchFilterForm extends FormBase {
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Create a new instance of the ToolshedSearchFilterForm.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack which include the current request.
    */
   public function __construct(RequestStack $request_stack) {
diff --git a/modules/toolshed_search/src/Plugin/Block/ToolshedSearchBlock.php b/modules/toolshed_search/src/Plugin/Block/ToolshedSearchBlock.php
index ee0a266..2170908 100644
--- a/modules/toolshed_search/src/Plugin/Block/ToolshedSearchBlock.php
+++ b/modules/toolshed_search/src/Plugin/Block/ToolshedSearchBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\toolshed_search\Plugin\Block;
 
+use Drupal\views\ViewExecutable;
+use Drupal\views\Entity\View;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -31,7 +33,7 @@ class ToolshedSearchBlock extends BlockBase implements ContainerFactoryPluginInt
   /**
    * The loaded view or FALSE if the view is no longer available.
    *
-   * @var \Drupal\views\ViewExecutable|false
+   * @var ViewExecutable|false
    */
   protected $loadedView = NULL;
 
@@ -45,21 +47,21 @@ class ToolshedSearchBlock extends BlockBase implements ContainerFactoryPluginInt
   /**
    * Drupal form builder interface for generating form structures.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates executatable views from views entity config instances.
    *
-   * @var \Drupal\views\ViewExecutableFactory
+   * @var ViewExecutableFactory
    */
   protected $viewFactory;
 
@@ -72,11 +74,11 @@ class ToolshedSearchBlock extends BlockBase implements ContainerFactoryPluginInt
    *   The unique ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition from the plugin discovery.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The Drupal form builder service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\views\ViewExecutableFactory $view_executable_factory
+   * @param ViewExecutableFactory $view_executable_factory
    *   Creates executatable views from views entity config instances.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FormBuilderInterface $form_builder, EntityTypeManagerInterface $entity_type_manager, ViewExecutableFactory $view_executable_factory) {
@@ -104,7 +106,7 @@ class ToolshedSearchBlock extends BlockBase implements ContainerFactoryPluginInt
   /**
    * Retrieve a view and display settings based a view and display ID.
    *
-   * @return \Drupal\views\ViewExecutable|false
+   * @return ViewExecutable|false
    *   The view entity loaded, with the proper display configured. Will return
    *   NULL if the view or the display are no longer available.
    */
@@ -128,7 +130,7 @@ class ToolshedSearchBlock extends BlockBase implements ContainerFactoryPluginInt
   /**
    * Retrieve the view configured to work with this block.
    *
-   * @return \Drupal\views\Entity\View|false
+   * @return View|false
    *   The view entity loaded, with the proper display configured. Will return
    *   NULL if the view or the display are no longer available.
    */
@@ -380,7 +382,7 @@ class ToolshedSearchBlock extends BlockBase implements ContainerFactoryPluginInt
    *
    * @param array $form
    *   Structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form and build information.
    *
    * @return array
