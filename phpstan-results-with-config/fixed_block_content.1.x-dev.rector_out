modules/contrib/fixed_block_content/fixed_block_content.install
modules/contrib/fixed_block_content/fixed_block_content.module
modules/contrib/fixed_block_content/fixed_block_content.post_update.php
modules/contrib/fixed_block_content/src/DefaultContentHandler.php
modules/contrib/fixed_block_content/src/DefaultContentHandlerInterface.php
modules/contrib/fixed_block_content/src/Entity/FixedBlockContent.php
modules/contrib/fixed_block_content/src/EventSubscriber/ConfigEventSubscriber.php
modules/contrib/fixed_block_content/src/EventSubscriber/SetFixedBlockDependency.php
modules/contrib/fixed_block_content/src/FixedBlockContentAccessControlHandler.php
modules/contrib/fixed_block_content/src/FixedBlockContentInterface.php
modules/contrib/fixed_block_content/src/FixedBlockContentListBuilder.php
modules/contrib/fixed_block_content/src/FixedToContentMappingHandler.php
modules/contrib/fixed_block_content/src/FixedToContentMappingHandlerInterface.php
modules/contrib/fixed_block_content/src/Form/ExportConfirmForm.php
modules/contrib/fixed_block_content/src/Form/FixedBlockContentDeleteForm.php
modules/contrib/fixed_block_content/src/Form/FixedBlockContentForm.php
modules/contrib/fixed_block_content/src/Form/ImportConfirmForm.php
modules/contrib/fixed_block_content/src/Normalizer/BlockContentNormalizer.php
modules/contrib/fixed_block_content/src/Plugin/Block/FixedBlockContentBlock.php
modules/contrib/fixed_block_content/src/Plugin/Derivative/FixedBlockContent.php
modules/contrib/fixed_block_content/tests/src/Functional/BasicFixedBlockTest.php
modules/contrib/fixed_block_content/tests/src/Functional/FixedBlockAdminTest.php
modules/contrib/fixed_block_content/tests/src/Functional/FunctionalFixedBlockTestBase.php
modules/contrib/fixed_block_content/tests/src/Kernel/AutoExportTest.php
modules/contrib/fixed_block_content/tests/src/Kernel/DefaultContentTest.php
modules/contrib/fixed_block_content/tests/src/Kernel/FixedBlockContentKernelTestBase.php
modules/contrib/fixed_block_content/tests/src/Kernel/FixedToContentMappingTest.php
modules/contrib/fixed_block_content/tests/src/Kernel/ProtectedFixedBlockTest.php

23 files with changes
=====================

1) modules/contrib/fixed_block_content/tests/src/Kernel/ProtectedFixedBlockTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fixed_block_content\Kernel;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Database\Database;

 /**
@@ @@
     // Test if the non-reusable custom block is deleted when the protected
     // fixed block too.
     $this->fixedBlock->delete();
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $this->container->get('entity_type.manager');
     $block_content = $entity_type_manager->getStorage('block_content')->load($block_content->id());
     $this->assertNull($block_content);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/fixed_block_content/tests/src/Kernel/FixedToContentMappingTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fixed_block_content\Kernel;

+use Drupal\fixed_block_content\FixedToContentMappingHandlerInterface;
+use Drupal\block_content\BlockContentInterface;
 /**
  * Tests the fixed block content mapping handler.
  *
@@ @@
   /**
    * The fixed block content mapping handler.
    *
-   * @var \Drupal\fixed_block_content\FixedToContentMappingHandlerInterface
+   * @var FixedToContentMappingHandlerInterface
    */
   protected $mappingHandler;

@@ @@
   /**
    * Block content to work with.
    *
-   * @var \Drupal\block_content\BlockContentInterface
+   * @var BlockContentInterface
    */
   protected $blockContent;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->mappingHandler = $this->entityTypeManager->getHandler('fixed_block_content', 'mapping_handler');
     // Create a simple block content to work with it.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/fixed_block_content/tests/src/Kernel/FixedBlockContentKernelTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fixed_block_content\Kernel;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\fixed_block_content\FixedBlockContentInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Lock\PersistentDatabaseLockBackend;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The fixed block to work with.
    *
-   * @var \Drupal\fixed_block_content\FixedBlockContentInterface
+   * @var FixedBlockContentInterface
    */
   protected $fixedBlock;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/fixed_block_content/tests/src/Kernel/DefaultContentTest.php:25

    ---------- begin diff ----------
@@ @@
     $block_content = $this->fixedBlock->getBlockContent(FALSE);
     $this->assertNotNull($block_content);
     // Test that it is a new block content.
-    $this->assertEqual($block_content->id(), 1);
+    $this->assertEquals($block_content->id(), 1);

     // Tests that the default content export updates existing block content.
     $block_content->get('body')->setValue('To be overridden.');
@@ @@
     $this->fixedBlock->exportDefaultContent(TRUE);
     $block_content = $this->fixedBlock->getBlockContent(FALSE);
     // Must be the same block content.
-    $this->assertEqual($block_content->id(), 1);
+    $this->assertEquals($block_content->id(), 1);
     // The body must be empty, as it is in the default content.
     $this->assertTrue($block_content->get('body')->isEmpty());

@@ @@
     $this->fixedBlock->exportDefaultContent();
     $block_content = $this->fixedBlock->getBlockContent(FALSE);
     // It must be a new block content.
-    $this->assertEqual($block_content->id(), 2);
+    $this->assertEquals($block_content->id(), 2);
     // Tests that the default content was correctly exported.
-    $this->assertEqual($block_content->get('body')->getString(), $test_content);
+    $this->assertEquals($block_content->get('body')->getString(), $test_content);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/fixed_block_content/tests/src/Kernel/AutoExportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fixed_block_content\Kernel;

+use Drupal\fixed_block_content\FixedBlockContentInterface;
+use Drupal\block_content\BlockContentInterface;
 /**
  * Tests the auto-create option of fixed blocks.
  *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Export the initial config, including fixed blocks from the test module.
@@ @@
     // Clean up default content in the test fixed blocks.
     $entity_storage = $this->entityTypeManager->getStorage('fixed_block_content');
     foreach ($entity_storage->loadMultiple($this->testBlocksId) as $fixed_block) {
-      /** @var \Drupal\fixed_block_content\FixedBlockContentInterface $fixed_block */
+      /** @var FixedBlockContentInterface $fixed_block */
       $fixed_block->set('default_content', '');
       $fixed_block->save();
     }
@@ @@

     // Check that there is no block content for the fixed block with
     // the auto-export option disabled.
-    /** @var \Drupal\fixed_block_content\FixedBlockContentInterface $fixed_block */
+    /** @var FixedBlockContentInterface $fixed_block */
     $entity_storage = $this->entityTypeManager->getStorage('fixed_block_content');
     $fixed_block = $entity_storage->load('test_auto_export_disabled');
     $this->assertNull($fixed_block->getBlockContent(FALSE));
@@ @@
   public function testAutoExportOnNonEmpty() {
     // Check that there is no block content for the fixed block with
     // the auto-export option disabled.
-    /** @var \Drupal\fixed_block_content\FixedBlockContentInterface[] $fixed_blocks */
+    /** @var FixedBlockContentInterface[] $fixed_blocks */
     $fixed_blocks = [];
-    /** @var \Drupal\block_content\BlockContentInterface[] $block_contents */
+    /** @var BlockContentInterface[] $block_contents */
     $block_contents = [];
     $entity_storage = $this->entityTypeManager->getStorage('fixed_block_content');
     foreach ($this->testBlocksId as $block_id) {
@@ @@

     // Check that there is no changes in the block content linked to the test
     // fixed block with the auto-export option disabled.
-    $this->assertEqual($fixed_blocks['test_auto_export_disabled']->getBlockContent(FALSE), $block_contents['test_auto_export_disabled']);
+    $this->assertEquals($fixed_blocks['test_auto_export_disabled']->getBlockContent(FALSE), $block_contents['test_auto_export_disabled']);

     // Check that the fixed block with the auto-export on empty option
     // has no changes.
-    $this->assertEqual($fixed_blocks['auto_export_on_empty']->getBlockContent(FALSE), $block_contents['auto_export_on_empty']);
+    $this->assertEquals($fixed_blocks['auto_export_on_empty']->getBlockContent(FALSE), $block_contents['auto_export_on_empty']);

     // Check that the fixed block with the auto-export always option
     // has a block content linked.
-    $this->assertNotEqual($fixed_blocks['auto_export_always']->getBlockContent(FALSE), $block_contents['auto_export_always']);
+    $this->assertNotEquals($fixed_blocks['auto_export_always']->getBlockContent(FALSE), $block_contents['auto_export_always']);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/fixed_block_content/tests/src/Functional/FunctionalFixedBlockTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fixed_block_content\Functional;

+use Drupal\fixed_block_content\FixedBlockContentInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The fixed block to work with.
    *
-   * @var \Drupal\fixed_block_content\FixedBlockContentInterface
+   * @var FixedBlockContentInterface
    */
   protected $fixedBlock;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a content block type.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/fixed_block_content/tests/src/Functional/FixedBlockAdminTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fixed_block_content\Functional;

+use Drupal\user\UserInterface;
 /**
  * Tests the fixed block content admin.
  *
@@ @@
   /**
    * A test user with permission to administer blocks.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create and log in an administrative user.
@@ @@
     $this->clickLink('Custom block library');
     $this->clickLink('Fixed blocks');
     $this->clickLink('Restore default content');
-    $this->assertText('Are you sure you want to restore the Basic fixed to its default content?');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Are you sure you want to restore the Basic fixed to its default content?');
     // Confirm the form.
-    $this->drupalPostForm(NULL, [], 'Confirm');
+    $this->submitForm([], 'Confirm');
     $block_content = $this->fixedBlock->getBlockContent(FALSE);
     // The block content must be created.
     $this->assertNotNull($block_content);
@@ @@
     $this->clickLink('Custom block library');
     $this->clickLink('Fixed blocks');
     $this->clickLink('Set contents as default');
-    $this->assertText('Are you sure you want to set the Basic fixed current content as the default?');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Are you sure you want to set the Basic fixed current content as the default?');
     // Confirm the form.
-    $this->drupalPostForm(NULL, [], 'Confirm');
+    $this->submitForm([], 'Confirm');
     // Update the fixed block content object.
     $this->fixedBlock = $this->container->get('entity_type.manager')
       ->getStorage('fixed_block_content')->load('basic_fixed');
@@ @@

     // Go to export (restore) block with the default content page.
     $this->drupalGet('admin/structure/block/block-content/fixed-block-content/manage/basic_fixed/export');
-    $this->assertText('Are you sure you want to restore the Basic fixed to its default content?');
-    $this->drupalPostForm(NULL, [], 'Confirm');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Are you sure you want to restore the Basic fixed to its default content?');
+    $this->submitForm([], 'Confirm');

     // A new block must has been created.
     $block_content = $this->fixedBlock->getBlockContent(FALSE);
@@ @@
     // Go to export (restore) block with the default content page.
     $this->drupalGet('admin/structure/block/block-content/fixed-block-content/manage/basic_fixed/export');
     // The update existing option must be present.
-    $this->assertText('Update the existing block content');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Update the existing block content');
     // Proceed enabling the update existing option.
-    $this->drupalPostForm(NULL, ['update_existing' => TRUE], 'Confirm');
+    $this->submitForm(['update_existing' => TRUE], 'Confirm');

     // The block content must be the same as the previously existing.
     $new_block_content = $this->fixedBlock->getBlockContent(FALSE);
@@ @@
     $this->drupalGet('admin/structure/block/block-content/fixed-block-content');
     $this->clickLink('Delete');
     // The "Delete the linked custom block as well" must be present in the form.
-    $this->assertText('Delete the linked custom block as well');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Delete the linked custom block as well');
     // Enable it.
     $edit = ['delete_linked_block' => TRUE];
     // Confirm the form.
-    $this->drupalPostForm(NULL, $edit, 'Delete');
-    $this->assertText('The fixed block content Basic fixed has been deleted.');
+    $this->submitForm($edit, 'Delete');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The fixed block content Basic fixed has been deleted.');

     // Test that the fixed block content was deleted.
     $this->fixedBlock = $this->container->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/fixed_block_content/src/Plugin/Derivative/FixedBlockContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fixed_block_content\Plugin\Derivative;

+use Drupal\fixed_block_content\FixedBlockContentInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * The custom config block storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $blockConfigStorage;

@@ @@
   /**
    * Constructs a BlockContent object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $block_content_storage
+   * @param EntityStorageInterface $block_content_storage
    *   The custom block storage.
    */
   public function __construct(EntityStorageInterface $block_content_storage) {
@@ @@
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    /** @var \Drupal\fixed_block_content\FixedBlockContentInterface $fixed_block */
+    /** @var FixedBlockContentInterface $fixed_block */
     foreach ($this->blockConfigStorage->loadMultiple() as $fixed_block) {
       $this->derivatives[$fixed_block->id()] = $base_plugin_definition;
       $this->derivatives[$fixed_block->id()]['admin_label'] = $fixed_block->label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/fixed_block_content/src/Plugin/Block/FixedBlockContentBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fixed_block_content\Plugin\Block;

+use Drupal\fixed_block_content\FixedBlockContentInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository) {
@@ @@
    */
   public function getCacheTags() {
     $cache_tags = parent::getCacheTags();
-    /** @var \Drupal\fixed_block_content\FixedBlockContentInterface $fixed_block */
+    /** @var FixedBlockContentInterface $fixed_block */
     if ($fixed_block = FixedBlockContent::load($this->getDerivativeId())) {
       $cache_tags = Cache::mergeTags($cache_tags, $fixed_block->getCacheTags());
       $cache_tags = Cache::mergeTags($cache_tags, $fixed_block->getBlockContent()->getCacheTags());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/fixed_block_content/src/Form/ImportConfirmForm.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Implements getCancelUrl().
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Cancel URL.
    */
   public function getCancelUrl() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/fixed_block_content/src/Form/FixedBlockContentForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fixed_block_content\Form;

+use Drupal\block_content\Entity\BlockContentType;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@

     $form = parent::form($form, $form_state);

-    /** @var \Drupal\fixed_block_content\FixedBlockContentInterface $fixed_block */
+    /** @var FixedBlockContentInterface $fixed_block */
     $fixed_block = $this->entity;

     $form['title'] = [
@@ @@
       ],
     ];

-    /** @var \Drupal\block_content\Entity\BlockContentType $block_content_type */
+    /** @var BlockContentType $block_content_type */
     foreach ($types as $key => $block_content_type) {
       $form['block_content_bundle']['#options'][$key] = $block_content_type->label();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/fixed_block_content/src/Form/FixedBlockContentDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fixed_block_content\Form;

+use Drupal\fixed_block_content\FixedBlockContentInterface;
 use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Entity\EntityDeleteFormTrait;
@@ @@
   /**
    * The config manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * FixedBlockContentDeleteForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The config manager.
    */
   public function __construct(ConfigManagerInterface $config_manager) {
@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
-    /** @var \Drupal\fixed_block_content\FixedBlockContentInterface $entity */
+    /** @var FixedBlockContentInterface $entity */
     $entity = $this->getEntity();
     $this->addDependencyListsToForm($form, $entity->getConfigDependencyKey(), [$entity->getConfigDependencyName()], $this->configManager, $this->entityTypeManager);

@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\fixed_block_content\FixedBlockContentInterface $entity */
+    /** @var FixedBlockContentInterface $entity */
     $entity = $this->getEntity();
     // Delete the linked reusable block content as requested.
     if (!$entity->isProtected()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/fixed_block_content/src/Form/ExportConfirmForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fixed_block_content\Form;

+use Drupal\fixed_block_content\FixedBlockContentInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
@@ @@
   /**
    * Implements getCancelUrl().
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Cancel URL.
    */
   public function getCancelUrl() {
@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);

-    /** @var \Drupal\fixed_block_content\FixedBlockContentInterface $entity */
+    /** @var FixedBlockContentInterface $entity */
     $entity = $this->getEntity();
     if ($block_content = $entity->getBlockContent(FALSE)) {
       $form['update_existing'] = [
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/fixed_block_content/src/FixedToContentMappingHandlerInterface.php:16

    ---------- begin diff ----------
@@ @@
    *
    * Existing block content will be released if present.
    *
-   * @param \Drupal\fixed_block_content\FixedBlockContentInterface $fixed_block
+   * @param FixedBlockContentInterface $fixed_block
    *   The fixed block.
-   * @param \Drupal\block_content\BlockContentInterface $block_content
+   * @param BlockContentInterface $block_content
    *   The block content.
    */
   public function setBlockContent(FixedBlockContentInterface $fixed_block, BlockContentInterface $block_content);
@@ @@
    * @param string $fixed_block_id
    *   The ID of the fixed block.
    *
-   * @return \Drupal\block_content\BlockContentInterface|null
+   * @return BlockContentInterface|null
    *   The block content, NULL if none found.
    */
   public function getBlockContent($fixed_block_id);
@@ @@
   /**
    * Breaks the link between a fixed block and a block content.
    *
-   * @param \Drupal\fixed_block_content\FixedBlockContentInterface $fixed_block
+   * @param FixedBlockContentInterface $fixed_block
    *   The fixed block whose block content to be released.
    */
   public function releaseBlockContent(FixedBlockContentInterface $fixed_block);
@@ @@
   /**
    * Gets the fixed block linked to the given block content.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block_content
+   * @param BlockContentInterface $block_content
    *   The block content.
    *
-   * @return \Drupal\fixed_block_content\FixedBlockContentInterface|null
+   * @return FixedBlockContentInterface|null
    *   The fixed block, NULL if none found.
    */
   public function getFixedBlock(BlockContentInterface $block_content);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/fixed_block_content/src/FixedToContentMappingHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fixed_block_content;

+use Drupal\Core\Database\StatementInterface;
 use Drupal\block_content\BlockContentInterface;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The memory cache.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   protected $memoryCache;

@@ @@
   /**
    * MappingHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $database, MemoryCacheInterface $memory_cache) {
@@ @@
    * {@inheritdoc}
    */
   public function getBlockContent($fixed_block_id) {
-    /** @var \Drupal\Core\Database\StatementInterface $bids */
+    /** @var StatementInterface $bids */
     $bids = $this->database->select('fixed_block_content', 'fbc')
       ->fields('fbc', ['bid'])
       ->range(0, 1)
@@ @@
       return NULL;
     }

-    /** @var \Drupal\Core\Database\StatementInterface $bids */
+    /** @var StatementInterface $bids */
     $bids = $this->database->select('fixed_block_content', 'fbc')
       ->fields('fbc', ['fbid'])
       ->range(0, 1)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/fixed_block_content/src/FixedBlockContentListBuilder.php:28

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\fixed_block_content\FixedBlockContentInterface $entity */
+    /** @var FixedBlockContentInterface $entity */
     $block_content = $entity->getBlockContent(FALSE);

     $row = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/fixed_block_content/src/FixedBlockContentInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fixed_block_content;

+use Drupal\block_content\BlockContentInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
    *   (optional) Creates a new block content and links it to this fixed block
    *   if there is no block content currently linked. Defaults to TRUE.
    *
-   * @return null|\Drupal\block_content\BlockContentInterface
+   * @return null|BlockContentInterface
    *   The custom block linked to this fixed block content, NULL if not found
    *   and the create argument is FALSE.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/fixed_block_content/src/EventSubscriber/SetFixedBlockDependency.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fixed_block_content\EventSubscriber;

+use Drupal\fixed_block_content\Entity\FixedBlockContent;
 use Drupal\block_content\BlockContentEvents;
 use Drupal\block_content\BlockContentInterface;
 use Drupal\block_content\Event\BlockContentGetDependencyEvent;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The primary database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Constructs SetFixedBlockDependency object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The primary database connection.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $database) {
@@ @@
   /**
    * Handles the BlockContentEvents::INLINE_BLOCK_GET_DEPENDENCY event.
    *
-   * @param \Drupal\block_content\Event\BlockContentGetDependencyEvent $event
+   * @param BlockContentGetDependencyEvent $event
    *   The event.
    */
   public function onGetDependency(BlockContentGetDependencyEvent $event) {
@@ @@
   /**
    * Gets the access dependent fixed block for a given custom block content.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block_content
+   * @param BlockContentInterface $block_content
    *   The custom block.
    *
-   * @return \Drupal\fixed_block_content\Entity\FixedBlockContent|null
+   * @return FixedBlockContent|null
    *   The fixed block content to which the block content belongs, NULL if none
    *   found.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/fixed_block_content/src/EventSubscriber/ConfigEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fixed_block_content\EventSubscriber;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
 use Drupal\Core\Config\ConfigImporter;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The used lock backend instance.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * Constructs SetFixedBlockDependency object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock backend to check if a config import is ongoing.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LockBackendInterface $lock) {
@@ @@
   /**
    * Do the automatic default content export if default content has changed.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The config event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onConfigSave(ConfigCrudEvent $event) {
     $config = $event->getConfig();
@@ @@
       return;
     }

-    /** @var \Drupal\fixed_block_content\FixedBlockContentInterface $fixed_block */
+    /** @var FixedBlockContentInterface $fixed_block */
     $fixed_block = $this->entityTypeManager
       ->getStorage('fixed_block_content')
       ->load($config->get('id'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/fixed_block_content/src/Entity/FixedBlockContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fixed_block_content\Entity;

+use Drupal\fixed_block_content\FixedToContentMappingHandler;
+use Drupal\fixed_block_content\DefaultContentHandlerInterface;
+use Drupal\fixed_block_content\FixedToContentMappingHandlerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\fixed_block_content\FixedBlockContentInterface;
 use Drupal\block_content\BlockContentInterface;
@@ @@
   /**
    * The current block content linked to this fixed block.
    *
-   * @var \Drupal\block_content\BlockContentInterface
+   * @var BlockContentInterface
    *
    * @deprecated in fixed_block_content:8.x-1.0 and is removed from
    *   fixed_block_content:8.x-2.0. Use the mapping handler instead to get
@@ @@
    * Any existing block content is not deleted, unless on protected fixed
    * blocks. If the given block is new, it will be saved to reference it.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block_content
+   * @param BlockContentInterface $block_content
    *   (optional) The new block content to link to this fixed block. New
    *    empty block is created if none given.
    *
@@ @@
   /**
    * Creates a new block content.
    *
-   * @return \Drupal\block_content\BlockContentInterface
+   * @return BlockContentInterface
    *   The new block content.
    */
   protected function newBlockContent() {
-    /** @var \Drupal\block_content\BlockContentInterface $block_content */
+    /** @var BlockContentInterface $block_content */
     $block_content = $this->getBlockContentStorage()->create([
       'type' => $this->block_content_bundle,
       'info' => $this->title,
@@ @@
     parent::postDelete($storage, $entities);
     static::invalidateBlockPluginCache();

-    /** @var \Drupal\fixed_block_content\FixedToContentMappingHandler $mapping_handler */
+    /** @var FixedToContentMappingHandler $mapping_handler */
     $mapping_handler = \Drupal::entityTypeManager()
       ->getHandler('fixed_block_content', 'mapping_handler');
     foreach ($entities as $entity) {
@@ @@
   /**
    * Gets the default content handler.
    *
-   * @return \Drupal\fixed_block_content\DefaultContentHandlerInterface
+   * @return DefaultContentHandlerInterface
    *   The default content handler.
    */
   protected function getDefaultContentHandler() {
@@ @@
   /**
    * Gets the mapping handler.
    *
-   * @return \Drupal\fixed_block_content\FixedToContentMappingHandlerInterface
+   * @return FixedToContentMappingHandlerInterface
    *   The fixed block content mapping handler.
    */
   protected function getMappingHandler() {
@@ @@
   /**
    * Gets the block content entity type storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The block content entity storage.
    */
   protected function getBlockContentStorage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/fixed_block_content/src/DefaultContentHandlerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fixed_block_content;

+use Drupal\block_content\BlockContentInterface;
 use Drupal\Core\Entity\EntityHandlerInterface;

 /**
@@ @@
   /**
    * Export the default content stored in config to a new custom block.
    *
-   * @param \Drupal\fixed_block_content\FixedBlockContentInterface $fixed_block
+   * @param FixedBlockContentInterface $fixed_block
    *   The fixed block to work with.
    *
-   * @return \Drupal\block_content\BlockContentInterface
+   * @return BlockContentInterface
    *   The new custom block content (unsaved), NULL if no default content or
    *   there ware errors.
    */
@@ @@
   /**
    * Sets the current content of the custom block as the fixed default content.
    *
-   * @param \Drupal\fixed_block_content\FixedBlockContentInterface $fixed_block
+   * @param FixedBlockContentInterface $fixed_block
    *   The fixed block to work with.
    */
   public function importDefaultContent(FixedBlockContentInterface $fixed_block);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/fixed_block_content/src/DefaultContentHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fixed_block_content;

+use Drupal\block_content\BlockContentInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\Serializer\Serializer;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

@@ @@
   /**
    * Injected cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The HAL link manager.
    *
-   * @var \Drupal\hal\LinkManager\LinkManager
+   * @var LinkManager
    */
   protected $linkManager;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Creates a new DefaultContentHandler object.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
-   * @param \Drupal\hal\LinkManager\LinkManager $link_manager
+   * @param LinkManager $link_manager
    *   The HAL link manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(Serializer $serializer, CacheBackendInterface $cache, LinkManager $link_manager, LoggerInterface $logger) {
@@ @@
       // Invalidates type links cache.
       // @todo remove when #2928882 is solved
       $this->cache->invalidate('hal:links:types');
-      /** @var \Drupal\block_content\BlockContentInterface $new_block_content */
+      /** @var BlockContentInterface $new_block_content */
       $new_block_content = $this->serializer->deserialize($fixed_block->get('default_content'), BlockContent::class, 'hal_json', ['fixed_block_content' => $fixed_block]);
     }
     catch (\Exception $e) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/fixed_block_content/fixed_block_content.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\fixed_block_content\FixedToContentMappingHandlerInterface;
 /**
  * @file
  * Provides permanent custom content blocks.
@@ @@
  * {@inheritdoc}
  */
 function fixed_block_content_block_content_delete(EntityInterface $entity) {
-  /** @var \Drupal\fixed_block_content\FixedToContentMappingHandlerInterface $mapping_handler */
+  /** @var FixedToContentMappingHandlerInterface $mapping_handler */
   $mapping_handler = \Drupal::entityTypeManager()
     ->getHandler('fixed_block_content', 'mapping_handler');
   // Search the linked fixed block for the deleted block content.
@@ @@
     && ($block_content = $form_object->getEntity())
     && $block_content instanceof BlockContentInterface) {

-    /** @var \Drupal\fixed_block_content\FixedToContentMappingHandlerInterface $mapping_handler */
+    /** @var FixedToContentMappingHandlerInterface $mapping_handler */
     $mapping_handler = \Drupal::entityTypeManager()->getHandler('fixed_block_content', 'mapping_handler');

     // Search the fixed block of the edited custom block.
@@ @@
  *
  * @param $form
  *   The submitted form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function _fixed_block_content_update_on_save(&$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 23 files have been changed by Rector                                      

