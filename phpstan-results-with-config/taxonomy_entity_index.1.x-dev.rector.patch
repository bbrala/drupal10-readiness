diff --git a/src/Commands/TaxonomyEntityIndexCommands.php b/src/Commands/TaxonomyEntityIndexCommands.php
index eacbc2b..510d41c 100644
--- a/src/Commands/TaxonomyEntityIndexCommands.php
+++ b/src/Commands/TaxonomyEntityIndexCommands.php
@@ -15,32 +15,32 @@ class TaxonomyEntityIndexCommands extends DrushCommands {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * A logger instance.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;
 
   /**
    * Constructs a drush command object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, LoggerChannelFactoryInterface $logger_factory) {
diff --git a/src/Form/TaxonomyEntityIndexAdminForm.php b/src/Form/TaxonomyEntityIndexAdminForm.php
index 7a56aa3..ec9bf1a 100644
--- a/src/Form/TaxonomyEntityIndexAdminForm.php
+++ b/src/Form/TaxonomyEntityIndexAdminForm.php
@@ -16,16 +16,16 @@ class TaxonomyEntityIndexAdminForm extends ConfigFormBase {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Creates a TaxonomyEntityIndexAdminForm form.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
diff --git a/src/Form/TaxonomyEntityIndexAdminReindexForm.php b/src/Form/TaxonomyEntityIndexAdminReindexForm.php
index d254faa..dd088d4 100644
--- a/src/Form/TaxonomyEntityIndexAdminReindexForm.php
+++ b/src/Form/TaxonomyEntityIndexAdminReindexForm.php
@@ -16,23 +16,23 @@ class TaxonomyEntityIndexAdminReindexForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Creates a TaxonomyEntityIndexAdminReindexForm form.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
diff --git a/src/Plugin/views/argument/TaxonomyEntityIndexDepth.php b/src/Plugin/views/argument/TaxonomyEntityIndexDepth.php
index 3cdda72..f16bb50 100644
--- a/src/Plugin/views/argument/TaxonomyEntityIndexDepth.php
+++ b/src/Plugin/views/argument/TaxonomyEntityIndexDepth.php
@@ -20,7 +20,7 @@ abstract class TaxonomyEntityIndexDepth extends IndexTidDepth {
   /**
    * Entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $termStorage;
 
@@ -34,7 +34,7 @@ abstract class TaxonomyEntityIndexDepth extends IndexTidDepth {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
diff --git a/src/Plugin/views/argument/TaxonomyEntityIndexUuidDepth.php b/src/Plugin/views/argument/TaxonomyEntityIndexUuidDepth.php
index 4cb275c..cbc0d3d 100644
--- a/src/Plugin/views/argument/TaxonomyEntityIndexUuidDepth.php
+++ b/src/Plugin/views/argument/TaxonomyEntityIndexUuidDepth.php
@@ -20,7 +20,7 @@ class TaxonomyEntityIndexUuidDepth extends TaxonomyEntityIndexDepth {
   /**
    * A repository that allows us to load entities by their UUIDs.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
diff --git a/src/Plugin/views/field/TaxonomyEntityIndexTid.php b/src/Plugin/views/field/TaxonomyEntityIndexTid.php
index b26eb4f..ec8c35b 100644
--- a/src/Plugin/views/field/TaxonomyEntityIndexTid.php
+++ b/src/Plugin/views/field/TaxonomyEntityIndexTid.php
@@ -35,14 +35,14 @@ class TaxonomyEntityIndexTid extends TaxonomyIndexTid {
   /**
    * The vocabulary storage.
    *
-   * @var \Drupal\taxonomy\VocabularyStorageInterface
+   * @var VocabularyStorageInterface
    */
   protected $vocabularyStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
diff --git a/src/Plugin/views/filter/TaxonomyEntityIndexTidDepth.php b/src/Plugin/views/filter/TaxonomyEntityIndexTidDepth.php
index 971e9c3..9ef5116 100644
--- a/src/Plugin/views/filter/TaxonomyEntityIndexTidDepth.php
+++ b/src/Plugin/views/filter/TaxonomyEntityIndexTidDepth.php
@@ -25,14 +25,14 @@ class TaxonomyEntityIndexTidDepth extends TaxonomyIndexTidDepth implements Conta
   /**
    * The vocabulary storage.
    *
-   * @var \Drupal\taxonomy\VocabularyStorageInterface
+   * @var VocabularyStorageInterface
    */
   protected $vocabularyStorage;
 
   /**
    * The term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
@@ -46,7 +46,7 @@ class TaxonomyEntityIndexTidDepth extends TaxonomyIndexTidDepth implements Conta
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
diff --git a/taxonomy_entity_index.info.yml b/taxonomy_entity_index.info.yml
index 3488fba..92707f5 100644
--- a/taxonomy_entity_index.info.yml
+++ b/taxonomy_entity_index.info.yml
@@ -1,7 +1,6 @@
 name: 'Taxonomy Entity Index'
 description: 'Provides an actual entity to term index table for lookups.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 dependencies:
   - taxonomy
 type: module
diff --git a/taxonomy_entity_index.module b/taxonomy_entity_index.module
index 60a2cc2..24993be 100644
--- a/taxonomy_entity_index.module
+++ b/taxonomy_entity_index.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Module file for taxonomy_entity_index.
@@ -289,7 +290,7 @@ function taxonomy_entity_index_reindex_finished($success, $results, $operations)
  * Therefore both the entity type has to be fieldable and the base table
  * has already a views integration.
  *
- * @return \Drupal\Core\Entity\EntityTypeInterface[]
+ * @return EntityTypeInterface[]
  *   An array of entity types.
  */
 function taxonomy_entity_index_entity_views_integrable() {
diff --git a/tests/src/Functional/Views/TaxonomyEntityIndexTermArgumentDepthTest.php b/tests/src/Functional/Views/TaxonomyEntityIndexTermArgumentDepthTest.php
index d590a3b..145b34e 100644
--- a/tests/src/Functional/Views/TaxonomyEntityIndexTermArgumentDepthTest.php
+++ b/tests/src/Functional/Views/TaxonomyEntityIndexTermArgumentDepthTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\taxonomy_entity_index\Functional\Views;
 
+use Drupal\taxonomy\TermInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\file\Entity\File;
 use Drupal\media\Entity\Media;
@@ -38,21 +40,21 @@ class TaxonomyEntityIndexTermArgumentDepthTest extends TaxonomyEntityIndexTestBa
   /**
    * An array of taxonomy term objects.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $terms = [];
 
   /**
    * The loaded View object.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     // Enable indexing for node and media.
@@ -110,12 +112,18 @@ class TaxonomyEntityIndexTermArgumentDepthTest extends TaxonomyEntityIndexTestBa
   public function testTermWithDepthArgument() {
     $this->drupalGet('test_argument_taxonomy_entity_index_index_tid_depth/' . $this->terms[0]->id());
     // "Node with Term" should be present on the page.
-    $this->assertText($this->nodes[2]->getTitle());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodes[2]->getTitle());
 
     // Media with the same numeric ID that is referencing the term should not
     // affect the results, thus ensuring that "Node without Term" should not be
     // present on the page.
-    $this->assertNoText($this->nodes[3]->getTitle());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodes[3]->getTitle());
   }
 
   /**
diff --git a/tests/src/Functional/Views/TaxonomyEntityIndexTermFilterDepthTest.php b/tests/src/Functional/Views/TaxonomyEntityIndexTermFilterDepthTest.php
index 2f22acb..75c34e4 100644
--- a/tests/src/Functional/Views/TaxonomyEntityIndexTermFilterDepthTest.php
+++ b/tests/src/Functional/Views/TaxonomyEntityIndexTermFilterDepthTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\taxonomy_entity_index\Functional\Views;
 
+use Drupal\taxonomy\TermInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\node\NodeInterface;
 use Drupal\views\Views;
 
@@ -36,21 +38,21 @@ class TaxonomyEntityIndexTermFilterDepthTest extends TaxonomyEntityIndexTestBase
   /**
    * An array of taxonomy term objects.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $terms = [];
 
   /**
    * The loaded View object.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     // Create a hierarchy 3 deep. Note the parent setup function creates two
diff --git a/tests/src/Functional/Views/TaxonomyEntityIndexTestBase.php b/tests/src/Functional/Views/TaxonomyEntityIndexTestBase.php
index b3cad06..db6ad96 100644
--- a/tests/src/Functional/Views/TaxonomyEntityIndexTestBase.php
+++ b/tests/src/Functional/Views/TaxonomyEntityIndexTestBase.php
@@ -24,7 +24,7 @@ abstract class TaxonomyEntityIndexTestBase extends TaxonomyTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     if ($import_test_views) {
diff --git a/tests/src/Functional/Views/TaxonomyEntityIndexUuidArgumentTest.php b/tests/src/Functional/Views/TaxonomyEntityIndexUuidArgumentTest.php
index ddcb3ec..70ff9e4 100644
--- a/tests/src/Functional/Views/TaxonomyEntityIndexUuidArgumentTest.php
+++ b/tests/src/Functional/Views/TaxonomyEntityIndexUuidArgumentTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\taxonomy_entity_index\Functional\Views;
 
+use Drupal\taxonomy\TermInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\node\NodeInterface;
 use Drupal\views\Views;
 
@@ -51,14 +53,14 @@ class TaxonomyEntityIndexUuidArgumentTest extends TaxonomyEntityIndexTestBase {
   /**
    * An array of taxonomy term objects.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $terms = [];
 
   /**
    * The loaded View object.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;
 
@@ -72,7 +74,7 @@ class TaxonomyEntityIndexUuidArgumentTest extends TaxonomyEntityIndexTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     // Configure the eponymous Taxonomy Entity Index.
diff --git a/tests/src/Kernel/TaxonomyEntityIndexEntityTest.php b/tests/src/Kernel/TaxonomyEntityIndexEntityTest.php
index 3cb5b4f..0c7df95 100644
--- a/tests/src/Kernel/TaxonomyEntityIndexEntityTest.php
+++ b/tests/src/Kernel/TaxonomyEntityIndexEntityTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\taxonomy_entity_index\Kernel;
 
+use Drupal\Core\Database\Connection;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\taxonomy\TermInterface;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
@@ -27,7 +28,7 @@ class TaxonomyEntityIndexEntityTest extends TaxonomyEntityIndexKernelTestBase {
   /**
    * DB Connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -39,7 +40,7 @@ class TaxonomyEntityIndexEntityTest extends TaxonomyEntityIndexKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['node', 'filter']);
     $this->installEntitySchema('node');
@@ -82,7 +83,7 @@ class TaxonomyEntityIndexEntityTest extends TaxonomyEntityIndexKernelTestBase {
   /**
    * Test that disabled entity types don't write to the index.
    *
-   * @param \Drupal\taxonomy\TermInterface[] $terms
+   * @param TermInterface[] $terms
    *   Terms to reference.
    */
   protected function assertThatDisabledEntityTypesDoNotWriteToTheIndex(array $terms) {
@@ -102,10 +103,10 @@ class TaxonomyEntityIndexEntityTest extends TaxonomyEntityIndexKernelTestBase {
   /**
    * Test that entity creation writes to the index.
    *
-   * @param \Drupal\taxonomy\TermInterface[] $terms
+   * @param TermInterface[] $terms
    *   Terms to reference.
    *
-   * @return \Drupal\entity_test\Entity\EntityTest
+   * @return EntityTest
    *   Test entity.
    */
   protected function assertThatEntityInsertWritesToTheIndex(array $terms) {
@@ -128,12 +129,12 @@ class TaxonomyEntityIndexEntityTest extends TaxonomyEntityIndexKernelTestBase {
   /**
    * Test that updates to entities modify the index.
    *
-   * @param \Drupal\entity_test\Entity\EntityTest $entity
+   * @param EntityTest $entity
    *   Entity to update.
-   * @param \Drupal\taxonomy\TermInterface[] $terms
+   * @param TermInterface[] $terms
    *   Terms to reference.
    *
-   * @return \Drupal\entity_test\Entity\EntityTest
+   * @return EntityTest
    *   Test entity.
    */
   protected function assertThatEntityUpdatesModifyTheIndex(EntityTest $entity, array $terms) {
@@ -167,7 +168,7 @@ class TaxonomyEntityIndexEntityTest extends TaxonomyEntityIndexKernelTestBase {
   /**
    * Assert that deleting a term deletes the item from the index.
    *
-   * @param \Drupal\entity_test\Entity\EntityTest $entity
+   * @param EntityTest $entity
    *   Test entity.
    * @param array $expected_terms
    *   Expected terms.
@@ -202,7 +203,7 @@ class TaxonomyEntityIndexEntityTest extends TaxonomyEntityIndexKernelTestBase {
   /**
    * Test that deleting an entity updates the index.
    *
-   * @param \Drupal\entity_test\Entity\EntityTest $entity
+   * @param EntityTest $entity
    *   Entity to update.
    */
   protected function assertThatEntityDeletionUpdatesTheIndex(EntityTest $entity) {
diff --git a/tests/src/Kernel/TaxonomyEntityIndexKernelTestBase.php b/tests/src/Kernel/TaxonomyEntityIndexKernelTestBase.php
index 063251e..47ebf1c 100644
--- a/tests/src/Kernel/TaxonomyEntityIndexKernelTestBase.php
+++ b/tests/src/Kernel/TaxonomyEntityIndexKernelTestBase.php
@@ -40,7 +40,7 @@ abstract class TaxonomyEntityIndexKernelTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     foreach (array_merge($this->entityTypes, ['taxonomy_term', 'user']) as $entity_type_id) {
       $this->installEntitySchema($entity_type_id);
