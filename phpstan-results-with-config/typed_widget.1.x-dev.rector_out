modules/contrib/typed_widget/src/ElementBuilderInterface.php
modules/contrib/typed_widget/src/Form/PrimitiveElementBuilder.php
modules/contrib/typed_widget/src/Form/TypedElementBuilder.php
modules/contrib/typed_widget/tests/src/Unit/ComplexDataTestDefinition.php
modules/contrib/typed_widget/tests/src/Unit/ComplexElementTest.php
modules/contrib/typed_widget/tests/src/Unit/ListElementTest.php
modules/contrib/typed_widget/tests/src/Unit/PrimitiveElementTest.php
modules/contrib/typed_widget/tests/src/Unit/TypedElementBuilderTest.php
modules/contrib/typed_widget/tests/src/Unit/TypedElementTestBase.php
modules/contrib/typed_widget/typed_widget.module

4 files with changes
====================

1) modules/contrib/typed_widget/tests/src/Unit/TypedElementTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_widget\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ @@
  */
 abstract class TypedElementTestBase extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Set the container. Required in all child tests.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   Set the Drupal container with some useful services.
    */
   protected function setContainer(TypedDataManagerInterface $typedDataManager) {
@@ @@
   /**
    * Get a dummy entity type manager mock.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   protected function getEntityTypeManagerMock() {
@@ @@
   /**
    * Get a dummy logger channel mock.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @return LoggerChannelFactoryInterface
    *   The logger channel object.
    */
   protected function getLogger() {
@@ @@
   /**
    * Get a dummy module handler mock.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module_handler service.
    */
   protected function getModuleHandlerMock() {
@@ @@
    * It is not necessary to mock the createInstance methods at this time, but
    * maybe in the future?
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition to create.
    * @param array $constraints
    *   An array of constraint definitions keyed by constraint name.
    *
-   * @return \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @return TypedDataManagerInterface
    *   Typed Data Manager.
    */
   protected function getTypedDataMock(DataDefinitionInterface $definition, array $constraints = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/typed_widget/tests/src/Unit/TypedElementBuilderTest.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\Tests\typed_widget\Unit;


+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\TypedData\TypedDataManagerInterface;
 use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ @@
  */
 class TypedElementBuilderTest extends TypedElementTestBase {

+  use ProphecyTrait;
   protected $definition;
   protected $typedDataManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $requiredDefinition = DataDefinition::create('string')
       ->setRequired(TRUE)
       ->setClass('\Drupal\Core\TypedData\Plugin\DataType\StringData')
@@ @@
    * It is not necessary to mock the createInstance methods at this time, but
    * maybe in the future?
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition to create.
    * @param array $constraints
    *   An array of constraint definitions keyed by constraint name.
    *
-   * @return \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @return TypedDataManagerInterface
    *   Typed Data Manager.
    */
   protected function getTypedDataMock(DataDefinitionInterface $definition, array $constraints = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/typed_widget/src/Form/TypedElementBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_widget\Form;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityStorageException;
@@ @@
   /**
    * Typed Data Manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    *   The typed data manager.
    */
   protected $typedDataManager;
@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    *   The entity type manager.
    */
   protected $entityTypeManager;
@@ @@
   /**
    * Logger Channel for Typed Widget.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    *   The logger channel object.
    */
   protected $logger;
@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    *   The module handler.
    */
   protected $moduleHandler;
@@ @@
   /**
    * Initialize method.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   The logger channel factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler service.
    */
   public function __construct(TypedDataManagerInterface $typedDataManager, EntityTypeManagerInterface $entityTypeManager, LoggerChannelFactoryInterface $loggerFactory, ModuleHandlerInterface $moduleHandler) {
@@ @@
   /**
    * Get the method for the appropriate typed data element builder.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The Typed Data definition.
    *
    * @return string
@@ @@
   /**
    * Create a render element for the given data type.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The typed data to generate a render element for.
    *
    * @return array
@@ @@
   /**
    * Get a single element from a data definition for a primitive type.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The typed data definition.
    *
    * @return array
@@ @@
   /**
    * Get the form element mapped to a complex data type.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataDefinitionInterface $parent_definition
+   * @param ComplexDataDefinitionInterface $parent_definition
    *   The complex data definition to render.
    * @param string $property_name
    *   (Optional) The property name to fetch from the complex data type.
@@ @@
    */
   public function getComplexElement(ComplexDataDefinitionInterface $parent_definition, $property_name = '') {
     if ($property_name) {
-      /** @var \Drupal\Core\TypedData\DataDefinitionInterface $definition */
+      /** @var DataDefinitionInterface $definition */
       $definition = $parent_definition->getPropertyDefinition($property_name);
       $method = $this->getMethod($definition);
       return $this->{$method}($definition);
@@ @@
       $element = $this->getParentContainer($parent_definition, 'fieldset');
     }

-    /** @var \Drupal\Core\TypedData\DataDefinitionInterface $definition */
+    /** @var DataDefinitionInterface $definition */
     foreach ($definitions as $name => $definition) {
       if ($this->shouldDisplay($definition)) {
         $method = $this->getMethod($definition);
@@ @@
   /**
    * Get an element for a field definition.
    *
-   * @param \Drupal\Core\Field\TypedData\FieldItemDataDefinition $field_definition
+   * @param FieldItemDataDefinition $field_definition
    *   The field item data definition.
    * @param string $property_name
    *   (Optional) A property name to restrict the form element return value.
@@ @@
    */
   public function getFieldElement(FieldItemDataDefinition $field_definition, $property_name = '') {
     if ($property_name) {
-      /** @var \Drupal\Core\TypedData\DataDefinitionInterface $definition */
+      /** @var DataDefinitionInterface $definition */
       $definition = $field_definition->getPropertyDefinition($property_name);
       $method = $this->getMethod($definition);
       return $this->{$method}($definition);
@@ @@
       $element = $this->getParentContainer($field_definition);
     }

-    /** @var \Drupal\Core\TypedData\DataDefinitionInterface $definition */
+    /** @var DataDefinitionInterface $definition */
     foreach ($definitions as $name => $definition) {
       if ($this->shouldDisplay($definition)) {
         $method = $this->getMethod($definition);
@@ @@
   /**
    * Get a form elemetn for a base field definition.
    *
-   * @param \Drupal\Core\Field\BaseFieldDefinition $definition
+   * @param BaseFieldDefinition $definition
    *   The base field definition.
    *
    * @return array
@@ @@
   /**
    * Get an element for an entity type.
    *
-   * @param \Drupal\Core\Entity\TypedData\EntityDataDefinition $entity_definition
+   * @param EntityDataDefinition $entity_definition
    *   The entity data definition.
    * @param string $property_name
    *   (Optional) an optional property name to restrict to.
@@ @@
   /**
    * Get an element container for a complex data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The data definition to generate a parent element for.
    * @param string $type
    *   The type of parent element to use such as fieldset or container.
@@ @@
   /**
    * Get an element container for a list of items.
    *
-   * @param \Drupal\Core\TypedData\ListDataDefinitionInterface $definition
+   * @param ListDataDefinitionInterface $definition
    *   The list data definition.
    *
    * @return array
@@ @@
   /**
    * Check whether or not to include the property in the returned element.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The data definition to check whether or not to display.
    *
    * @return bool
@@ @@
    *
    * @param string $type
    *   The form element type property.
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The data definition.
    * @param string $parent_type
    *   (Optional) The parent data type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/typed_widget/src/ElementBuilderInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Get the element type from the data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The data definition.
    *
    * @return string
@@ @@
    *
    * @param string $type
    *   The element type.
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The data definition.
    * @param string $parent_type
    *   An optional parent element type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 4 files have been changed by Rector                                       

