modules/contrib/migrate_plus/migrate_example/migrate_example_setup/migrate_example_setup.install
modules/contrib/migrate_plus/migrate_example/src/Plugin/migrate/source/BeerComment.php
modules/contrib/migrate_plus/migrate_example/src/Plugin/migrate/source/BeerNode.php
modules/contrib/migrate_plus/migrate_example/src/Plugin/migrate/source/BeerTerm.php
modules/contrib/migrate_plus/migrate_example/src/Plugin/migrate/source/BeerUser.php
modules/contrib/migrate_plus/migrate_example/tests/src/Kernel/MigrateExampleTest.php
modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced.install
modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/migrate_example_advanced_setup.install
modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/src/Plugin/rest/resource/PositionResource.php
modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/src/Plugin/rest/resource/VarietyItems.php
modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/src/Plugin/rest/resource/VarietyList.php
modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/src/Plugin/rest/resource/VarietyMultiFiles.php
modules/contrib/migrate_plus/migrate_example_advanced/src/Plugin/migrate/source/WineTerm.php
modules/contrib/migrate_plus/migrate_example_advanced/tests/src/Functional/MigrateExampleAdvancedTest.php
modules/contrib/migrate_plus/migrate_json_example/migrate_json_example.install
modules/contrib/migrate_plus/migrate_json_example/tests/src/Kernel/MigrateJsonExampleTest.php
modules/contrib/migrate_plus/migrate_plus.install
modules/contrib/migrate_plus/migrate_plus.module
modules/contrib/migrate_plus/src/Annotation/Authentication.php
modules/contrib/migrate_plus/src/Annotation/DataFetcher.php
modules/contrib/migrate_plus/src/Annotation/DataParser.php
modules/contrib/migrate_plus/src/AuthenticationPluginBase.php
modules/contrib/migrate_plus/src/AuthenticationPluginInterface.php
modules/contrib/migrate_plus/src/AuthenticationPluginManager.php
modules/contrib/migrate_plus/src/DataFetcherPluginBase.php
modules/contrib/migrate_plus/src/DataFetcherPluginInterface.php
modules/contrib/migrate_plus/src/DataFetcherPluginManager.php
modules/contrib/migrate_plus/src/DataParserPluginBase.php
modules/contrib/migrate_plus/src/DataParserPluginInterface.php
modules/contrib/migrate_plus/src/DataParserPluginManager.php
modules/contrib/migrate_plus/src/Entity/Migration.php
modules/contrib/migrate_plus/src/Entity/MigrationGroup.php
modules/contrib/migrate_plus/src/Entity/MigrationGroupInterface.php
modules/contrib/migrate_plus/src/Entity/MigrationInterface.php
modules/contrib/migrate_plus/src/Event/MigrateEvents.php
modules/contrib/migrate_plus/src/Event/MigratePrepareRowEvent.php
modules/contrib/migrate_plus/src/Plugin/MigrationConfigDeriver.php
modules/contrib/migrate_plus/src/Plugin/migrate/destination/Table.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/ArrayPop.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/ArrayShift.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DefaultEntityValue.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/Dom.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DomApplyStyles.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DomMigrationLookup.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DomProcessBase.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DomRemove.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DomSelect.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DomStrReplace.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/EntityGenerate.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/EntityLookup.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/EntityValue.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/FileBlob.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/Gate.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/Merge.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/MultipleValues.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/Service.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/SingleValue.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/SkipOnValue.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/StrReplace.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/Transliteration.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/Transpose.php
modules/contrib/migrate_plus/src/Plugin/migrate/source/SourcePluginExtension.php
modules/contrib/migrate_plus/src/Plugin/migrate/source/Table.php
modules/contrib/migrate_plus/src/Plugin/migrate/source/Url.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/authentication/Basic.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/authentication/Digest.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/authentication/Ntlm.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/authentication/OAuth2.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_fetcher/File.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_fetcher/Http.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/Json.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/SimpleXml.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/Soap.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/Xml.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/XmlTrait.php
modules/contrib/migrate_plus/tests/src/Functional/LoadTest.php
modules/contrib/migrate_plus/tests/src/Kernel/EntityLookupAccessTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableBatchTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableEvenBatchTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableIncrementBatchTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableIncrementEvenBatchTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableIncrementTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrationConfigEntityTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrationGroupTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/DefaultEntityValueTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/EntityGenerateTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/EntityLookupTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/EntityValueTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/FileBlobTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/ServiceTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/source/TableTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_fetcher/HttpTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_parser/BaseXmlTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_parser/JsonTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_parser/SimpleXmlTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_parser/XmlTest.php
modules/contrib/migrate_plus/tests/src/Unit/DataParserPluginBaseTest.php
modules/contrib/migrate_plus/tests/src/Unit/data_fetcher/FileTest.php
modules/contrib/migrate_plus/tests/src/Unit/data_fetcher/HttpTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/ArrayPopTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/ArrayShiftTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/DomApplyStylesTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/DomMigrationLookupTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/DomRemoveTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/DomSelectTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/DomStrReplaceTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/DomTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/GateTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/MultipleValuesTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/SingleValueTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/SkipOnValueTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/StrReplaceTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/TransliterationTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/TransposeTest.php

53 files with changes
=====================

1) modules/contrib/migrate_plus/tests/src/Unit/process/TransliterationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Unit\process;

+use Drupal\Component\Transliteration\TransliterationInterface;
 use Drupal\Component\Transliteration\PhpTransliteration;
 use Drupal\migrate\MigrateExecutableInterface;
 use Drupal\migrate\Row;
@@ @@
   /**
    * A transliteration instance.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliteration;

@@ @@
    */
   protected function setUp(): void {
     $this->transliteration = new PhpTransliteration();
-    $this->row = $this->getMockBuilder(Row::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->migrateExecutable = $this->getMockBuilder(MigrateExecutableInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->row = $this->createMock(Row::class);
+    $this->migrateExecutable = $this->createMock(MigrateExecutableInterface::class);
     parent::setUp();
   }

@@ @@
    * Tests deprecation notice of Transliteration process plugin.
    *
    * @group legacy
+   * @doesNotPerformAssertions
    */
   public function testDeprecationMessage() {
     $this->expectDeprecation("Drupal\migrate_plus\Plugin\migrate\process\Transliteration is deprecated in migrate_plus:8.x-5.3 and is removed from migrate_plus:6.0.0. Use Drupal\migrate_plus\Plugin\migrate\process\Service process plugin instead. See https://www.drupal.org/node/3255994");
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/migrate_plus/tests/src/Unit/process/DomMigrationLookupTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Unit\process;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\migrate\Plugin\MigratePluginManagerInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Utility\Html;
 use Drupal\migrate\MigrateSkipRowException;
@@ @@
  */
 class DomMigrationLookupTest extends MigrateProcessTestCase {

+  use ProphecyTrait;
   /**
    * Example configuration for the dom_migration_lookup process plugin.
    *
@@ @@
   /**
    * Mock a migration.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
   /**
    * Mock a process plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigratePluginManagerInterface
+   * @var MigratePluginManagerInterface
    */
   protected $processPluginManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/migrate_plus/tests/src/Unit/process/DomApplyStylesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Unit\process;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\ConfigFactory;
@@ @@
  */
 class DomApplyStylesTest extends MigrateProcessTestCase {

+  use ProphecyTrait;
   /**
    * Example configuration for the dom_apply_styles process plugin.
    *
@@ @@
   /**
    * Mock a config factory object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory = NULL;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/migrate_plus/tests/src/Unit/data_fetcher/HttpTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Unit\data_fetcher;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\migrate\MigrateException;
 use Drupal\migrate_plus\DataFetcherPluginBase;
 use Drupal\migrate_plus\Plugin\migrate_plus\authentication\Basic;
@@ @@
   /**
    * Mocked up Basic authentication plugin.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   private $basicAuthenticator = NULL;

@@ @@
    */
   public function setUp(): void {
     // Mock up a Basic authentication plugin that will be used in requests.
-    $basic_authenticator = $this->getMockBuilder(Basic::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $basic_authenticator = $this->createMock(Basic::class);

     $basic_authenticator->method('getAuthenticationOptions')
       ->will($this->returnValue([
@@ @@
   /**
    * Mocked authenticator plugin.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   public $authenticator = NULL;

@@ @@
    *
    * So we can mock the authentication plugin.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    *   A mocked authentication plugin.
    */
   public function getAuthenticationPlugin() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/migrate_plus/tests/src/Unit/data_fetcher/FileTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Unit\data_fetcher;

+use org\bovigo\vfs\vfsStreamDirectory;
 use Drupal\migrate\MigrateException;
 use Drupal\migrate_plus\Plugin\migrate_plus\data_fetcher\File;
 use Drupal\Tests\migrate\Unit\MigrateTestCase;
@@ @@
   /**
    * Define virtual dir where we'll be creating files in/fetching files from.
    *
-   * @var \org\bovigo\vfs\vfsStreamDirectory
+   * @var vfsStreamDirectory
    */
   private $baseDir;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/migrate_plus/tests/src/Unit/DataParserPluginBaseTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\migrate_plus\DataParserPluginBase;
 use Drupal\Tests\migrate\Unit\MigrateTestCase;

@@ @@
    * @param array $configuration
    *   The configuration to pass to the data parser.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject|\Drupal\Tests\migrate_plus\Unit\DataParserPluginBaseMock
+   * @return MockObject|\Drupal\Tests\migrate_plus\Unit\DataParserPluginBaseMock
    *   An mock instance of DataParserPluginBase.
    */
   protected function getMockedDataParser(array $configuration = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_parser/JsonTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate_plus\data_parser;

+use Drupal\migrate_plus\DataParserPluginManager;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\migrate_plus\DataParserPluginManager
+   * @var DataParserPluginManager
    */
   protected $pluginManager;

@@ @@
    *
    * @dataProvider providerTestMissingProperties
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @throws \Exception
    */
   public function testMissingProperties($file, array $ids, array $fields, array $expected): void {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_parser/BaseXmlTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate_plus\data_parser;

+use Drupal\migrate_plus\DataParserPluginManager;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate_plus\DataParserPluginInterface;

@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\migrate_plus\DataParserPluginManager
+   * @var DataParserPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * Returns a parse object with active configuration.
    *
-   * @return \Drupal\migrate_plus\DataParserPluginInterface
+   * @return DataParserPluginInterface
    *   Data parser object.
    */
   abstract protected function getParser(): DataParserPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/source/TableTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\source;

+use Drupal\migrate\Plugin\MigrationPluginManager;
 use Drupal\migrate\Exception\RequirementsException;
 use Drupal\Tests\migrate_drupal\Kernel\d7\MigrateDrupal7TestBase;

@@ @@
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $migrationPluginManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/ServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\process;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\migrate\Plugin\MigratePluginManagerInterface;
+use Drupal\migrate_plus\Plugin\migrate\process\Service;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate\MigrateExecutableInterface;
 use Drupal\migrate\Row;
@@ @@
  */
 class ServiceTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * The process plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigratePluginManagerInterface
+   * @var MigratePluginManagerInterface
    */
   protected $pluginManager;

@@ @@
    * @covers ::create
    */
   public function testValidConfig(): void {
-    /** @var \Drupal\migrate\MigrateExecutableInterface $executable */
+    /** @var MigrateExecutableInterface $executable */
     $executable = $this->prophesize(MigrateExecutableInterface::class)->reveal();
     $row = new Row([], []);
     $configuration = [
@@ @@
       'service' => 'email.validator',
       'method' => 'isValid',
     ];
-    /** @var \Drupal\migrate_plus\Plugin\migrate\process\Service $service */
+    /** @var Service $service */
     $service = $this->pluginManager->createInstance('service', $configuration);

     // Test a valid email address.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/FileBlobTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\process;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\migrate\Plugin\MigratePluginManagerInterface;
+use Drupal\migrate_plus\Plugin\migrate\process\FileBlob;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate\MigrateExecutableInterface;
@@ @@
  */
 class FileBlobTest extends KernelTestBase {

+  use ProphecyTrait;
   use UserCreationTrait;

   /**
@@ @@
   /**
    * The process plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigratePluginManagerInterface
+   * @var MigratePluginManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * The filesystem interface.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $filesystem;

@@ @@
    * @covers ::transform
    */
   public function testFileCreation(): void {
-    /** @var \Drupal\migrate\MigrateExecutableInterface $executable */
+    /** @var MigrateExecutableInterface $executable */
     $executable = $this->prophesize(MigrateExecutableInterface::class)->reveal();
     $row = new Row([], []);
     $value = ['public://cat.jpeg', base64_decode($this->blob, TRUE)];
-    /** @var \Drupal\migrate_plus\Plugin\migrate\process\FileBlob $file_blob */
+    /** @var FileBlob $file_blob */
     $file_blob = $this->pluginManager->createInstance('file_blob');
     $file = $file_blob->transform($value, $executable, $row, 'destination_property');
     $this->assertEquals('public://cat.jpeg', $file);
@@ @@
     $configuration = [
       'reuse' => FileSystemInterface::EXISTS_ERROR,
     ];
-    /** @var \Drupal\migrate_plus\Plugin\migrate\process\FileBlob $file_blob */
+    /** @var FileBlob $file_blob */
     $file_blob = $this->pluginManager->createInstance('file_blob', $configuration);
-    /** @var \Drupal\migrate\MigrateExecutableInterface $executable */
+    /** @var MigrateExecutableInterface $executable */
     $file = $file_blob->transform($value, $executable, $row, 'destination_property');
     $this->assertEquals('public://cat.jpeg', $file);
     $this->assertEquals($this->sha1sum, sha1_file($file));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/EntityValueTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\process;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\migrate_plus\Plugin\migrate\process\EntityValue;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate\MigrateException;
 use Drupal\migrate\MigrateExecutableInterface;
@@ @@
  */
 class EntityValueTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * The generated title.
    *
@@ @@
   /**
    * The plugin to test.
    *
-   * @var \Drupal\migrate_plus\Plugin\migrate\process\EntityValue
+   * @var EntityValue
    */
   protected $plugin;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/EntityLookupTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\process;

+use Drupal\migrate\MigrateExecutable;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate\Row;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
@@ @@
   /**
    * The migrate executable mock object.
    *
-   * @var \Drupal\migrate\MigrateExecutable|\PHPUnit\Framework\MockObject\MockObject
+   * @var MigrateExecutable|MockObject
    */
   protected $migrateExecutable;

@@ @@
     $this->installEntitySchema('node');
     $this->installConfig(['filter']);

-    $this->migrateExecutable = $this->getMockBuilder('Drupal\migrate\MigrateExecutable')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->migrateExecutable = $this->createMock('Drupal\migrate\MigrateExecutable');

     $test_nodes = [
       ['title' => 'foo 1'],
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/EntityGenerateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\process;

+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\migrate\Plugin\Migration;
+use Drupal\Core\Entity\EntityStorageBase;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $migrationPluginManager;

@@ @@
       }
     }

-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->migrationPluginManager->createStubMigration($definition);
     $reflector = new \ReflectionObject($migration->getDestinationPlugin());
     $attribute = $reflector->getProperty('storage');
     $attribute->setAccessible(true);
-    /** @var \Drupal\Core\Entity\EntityStorageBase $storage */
+    /** @var EntityStorageBase $storage */
     $storage = $attribute->getValue($migration->getDestinationPlugin());
     $migrationExecutable = (new MigrateExecutable($migration, $this));
     $migrationExecutable->import();
@@ @@
         'plugin' => 'entity:node',
       ],
     ];
-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->migrationPluginManager->createStubMigration($definition);
     $migrationExecutable = (new MigrateExecutable($migration, $this));
     $migrationExecutable->import();
@@ @@
         'plugin' => 'entity:node',
       ],
     ];
-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->migrationPluginManager->createStubMigration($definition);
     $migrationExecutable = (new MigrateExecutable($migration, $this));
     $migrationExecutable->import();
@@ @@
    *   The entity identifier.
    */
   private function createTestData($storageName, array $values) {
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->container
       ->get('entity_type.manager')
       ->getStorage($storageName);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/DefaultEntityValueTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\process;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate\MigrateExecutableInterface;
 use Drupal\migrate\Plugin\MigrateDestinationInterface;
@@ @@
  */
 class DefaultEntityValueTest extends KernelTestBase {

+  use ProphecyTrait;
   use UserCreationTrait;

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/migrate_plus/tests/src/Kernel/MigrationGroupTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel;

+use Drupal\migrate_plus\Entity\MigrationGroupInterface;
+use Drupal\migrate_plus\Entity\MigrationInterface;
+use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate_plus\Entity\Migration;
 use Drupal\migrate_plus\Entity\MigrationGroup;
@@ @@
   public function testConfigurationMerge(): void {
     $group_id = 'test_group';

-    /** @var \Drupal\migrate_plus\Entity\MigrationGroupInterface $migration_group */
+    /** @var MigrationGroupInterface $migration_group */
     $group_configuration = [
       'id' => $group_id,
       'shared_configuration' => [
@@ @@
     $this->container->get('entity_type.manager')->getStorage('migration_group')
       ->create($group_configuration)->save();

-    /** @var \Drupal\migrate_plus\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->container->get('entity_type.manager')
       ->getStorage('migration')->create([
         'id' => 'specific_migration',
@@ @@
    * Test that deleting a group deletes its migrations.
    */
   public function testDelete(): void {
-    /** @var \Drupal\migrate_plus\Entity\MigrationGroupInterface $migration_group */
+    /** @var MigrationGroupInterface $migration_group */
     $group_configuration = [
       'id' => 'test_group',
     ];
@@ @@
       ->getStorage('migration_group')->create($group_configuration);
     $migration_group->save();

-    /** @var \Drupal\migrate_plus\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->container->get('entity_type.manager')
       ->getStorage('migration')->create([
         'id' => 'specific_migration',
@@ @@
       ]);
     $migration->save();

-    /** @var \Drupal\migrate_plus\Entity\MigrationGroupInterface $loaded_migration_group */
+    /** @var MigrationGroupInterface $loaded_migration_group */
     $loaded_migration_group = MigrationGroup::load('test_group');
     $loaded_migration_group->delete();

-    /** @var \Drupal\migrate_plus\Entity\MigrationInterface $loaded_migration */
+    /** @var MigrationInterface $loaded_migration */
     $loaded_migration = Migration::load('specific_migration');
     $this->assertNull($loaded_migration);
   }
@@ @@
   public function testDefaultGroup(): void {
     $this->installConfig('migrate_plus_test');

-    /** @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface $pluginManager */
+    /** @var MigrationPluginManagerInterface $pluginManager */
     $pluginManager = \Drupal::service('plugin.manager.migration');
     $migration = $pluginManager->getDefinition('dummy');
     $this->assertEquals($migration['migration_group'], 'default', 'Migrations without an explicit group are assigned the default group.');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/migrate_plus/tests/src/Kernel/MigrationConfigEntityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel;

+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\migrate\MigrateExecutable;
 use Drupal\migrate_plus\Entity\Migration;
@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $pluginManager;

@@ @@
    */
   public function testImport(): void {
     $this->installConfig('migrate_plus_test');
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->pluginManager->createInstance('fruit_terms');
     $id_map = $migration->getIdMap();
     $executable = new MigrateExecutable($migration, $this);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel;

+use Drupal\Core\Database\Connection;
+use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\migrate\MigrateExecutable;
 use Drupal\migrate\Plugin\MigrateIdMapInterface;
 use Drupal\migrate\Row;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    * Tests table update.
    *
    * @dataProvider tableDestinationMigration
+   * @doesNotPerformAssertions
    */
   public function testTableUpdate(array $definition): void {
     // Make sure migration overwrites the original data for the first row.
@@ @@
       ->fields($original_values)
       ->execute();

-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = \Drupal::service('plugin.manager.migration')
       ->createStubMigration($definition);
     $migration->getIdMap()->saveIdMapping(new Row($original_values,
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableIncrementTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel;

+use Drupal\Core\Database\Connection;
+use Drupal\migrate\MigrateException;
 use Drupal\migrate\MigrateExecutable;
 use Drupal\Tests\migrate\Kernel\MigrateTestBase;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    *
    * @dataProvider tableDestinationMigration
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   public function testTableDestination(array $definition) {
     $migration = \Drupal::service('plugin.manager.migration')->createStubMigration($definition);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/migrate_plus/tests/src/Kernel/EntityLookupAccessTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * A user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * A test entity.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/migrate_plus/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/Xml.php:139

    ---------- begin diff ----------
@@ @@
    *   A \SimpleXmlElement when the document is parseable, or false if a
    *   parsing error occurred.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   protected function getSimpleXml() {
     $node = $this->reader->expand();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/Soap.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\migrate\Exception\RequirementsException
+   * @throws RequirementsException
    *   If PHP SOAP extension is not installed.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition) {
@@ @@
    *
    * @throws \SoapFault
    *   If there's an error in a SOAP call.
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    *   If we can't resolve the SOAP function or its response property.
    */
   protected function openSourceUrl($url) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/Json.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Plugin\migrate_plus\data_parser;

+use GuzzleHttp\Exception\RequestException;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\migrate_plus\DataParserPluginBase;

@@ @@
    * @return array
    *   The selected data to be iterated.
    *
-   * @throws \GuzzleHttp\Exception\RequestException
+   * @throws RequestException
    */
   protected function getSourceData($url) {
     $response = $this->getDataFetcherPlugin()->getResponseContent($url);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_fetcher/Http.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Plugin\migrate_plus\data_fetcher;

+use GuzzleHttp\Client;
+use Drupal\migrate_plus\AuthenticationPluginInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\migrate\MigrateException;
 use Drupal\migrate_plus\DataFetcherPluginBase;
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * The data retrieval client.
    *
-   * @var \Drupal\migrate_plus\AuthenticationPluginInterface
+   * @var AuthenticationPluginInterface
    */
   protected $authenticationPlugin;

@@ @@
   /**
    * Returns the initialized authentication plugin.
    *
-   * @return \Drupal\migrate_plus\AuthenticationPluginInterface
+   * @return AuthenticationPluginInterface
    *   The authentication plugin.
    */
   public function getAuthenticationPlugin() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/migrate_plus/src/Plugin/migrate/source/Url.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Plugin\migrate\source;

+use Drupal\migrate_plus\DataParserPluginInterface;
 use Drupal\migrate\Plugin\MigrationInterface;

 /**
@@ @@
   /**
    * The data parser plugin.
    *
-   * @var \Drupal\migrate_plus\DataParserPluginInterface
+   * @var DataParserPluginInterface
    */
   protected $dataParserPlugin;

@@ @@
   /**
    * Returns the initialized data parser plugin.
    *
-   * @return \Drupal\migrate_plus\DataParserPluginInterface
+   * @return DataParserPluginInterface
    *   The data parser plugin.
    */
   public function getDataParserPlugin() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/migrate_plus/src/Plugin/migrate/process/Transliteration.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * The transliteration service.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliteration;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliteration
+   * @param TransliterationInterface $transliteration
    *   The transliteration service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TransliterationInterface $transliteration) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/migrate_plus/src/Plugin/migrate/process/SkipOnValue.php:77

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $value
    *   The input value.
-   * @param \Drupal\migrate\MigrateExecutableInterface $migrate_executable
+   * @param MigrateExecutableInterface $migrate_executable
    *   The migration in which this process is being executed.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row from the source to process.
    * @param string $destination_property
    *   The destination property currently worked on. This is only used together
@@ @@
    * @return mixed
    *   The input value, $value, if it doesn't evaluate to a configured value.
    *
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateSkipRowException
    *   Thrown if the source property evaluates to a configured value and the
    *   row should be skipped, records with STATUS_IGNORED status in the map.
    */
@@ @@
    *
    * @param mixed $value
    *   The input value.
-   * @param \Drupal\migrate\MigrateExecutableInterface $migrate_executable
+   * @param MigrateExecutableInterface $migrate_executable
    *   The migration in which this process is being executed.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row from the source to process.
    * @param string $destination_property
    *   The destination property currently worked on. This is only used together
@@ @@
    * @return mixed
    *   The input value, $value, if it doesn't evaluate to a configured value.
    *
-   * @throws \Drupal\migrate\MigrateSkipProcessException
+   * @throws MigrateSkipProcessException
    *   Thrown if the source property evaluates to a configured value and rest
    *   of the process should be skipped.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/migrate_plus/src/Plugin/migrate/process/FileBlob.php:75

    ---------- begin diff ----------
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FileSystemInterface $file_system) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/migrate_plus/src/Plugin/migrate/process/EntityValue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Plugin\migrate\process;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\RevisionableStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The storage for the configured entity type.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\Drupal\Core\Entity\RevisionableStorageInterface
+   * @var EntityStorageInterface|RevisionableStorageInterface
    */
   protected $entityStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \InvalidArgumentException
    */
   public function __construct(
@@ @@
    * @param array $ids
    *   The entity IDs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities.
    */
   protected function loadEntities(array $ids) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/migrate_plus/src/Plugin/migrate/process/EntityLookup.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Plugin\migrate\process;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\migrate\MigrateException;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The migration.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
   /**
    * The selection plugin.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface
+   * @var SelectionPluginManagerInterface
    */
   protected $selectionPluginManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/migrate_plus/src/Plugin/migrate/process/EntityGenerate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Plugin\migrate\process;

+use Drupal\migrate\Plugin\MigratePluginManagerInterface;
+use Drupal\migrate\Plugin\migrate\process\Get;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\migrate\MigrateExecutableInterface;
 use Drupal\migrate\Plugin\MigrationInterface;
@@ @@
   /**
    * The row from the source to process.
    *
-   * @var \Drupal\migrate\Row
+   * @var Row
    */
   protected $row;

@@ @@
   /**
    * The migrate executable.
    *
-   * @var \Drupal\migrate\MigrateExecutableInterface
+   * @var MigrateExecutableInterface
    */
   protected $migrateExecutable;

@@ @@
   /**
    * The MigratePluginManager instance.
    *
-   * @var \Drupal\migrate\Plugin\MigratePluginManagerInterface
+   * @var MigratePluginManagerInterface
    */
   protected $processPluginManager;

@@ @@
   /**
    * The get process plugin instance.
    *
-   * @var \Drupal\migrate\Plugin\migrate\process\Get
+   * @var Get
    */
   protected $getProcessPlugin;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/migrate_plus/src/Plugin/migrate/process/DomProcessBase.php:36

    ---------- begin diff ----------
@@ @@
    *   The name of the destination being processed. Used to generate an error
    *   message.
    *
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateSkipRowException
    *   If $value is not a \DOMDocument object.
    */
   protected function init($value, $destination_property) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/migrate_plus/src/Plugin/migrate/process/DomMigrationLookup.php:69

    ---------- begin diff ----------
@@ @@
   /**
    * The migration to be executed.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
   /**
    * The process plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigratePluginManagerInterface
+   * @var MigratePluginManagerInterface
    */
   protected $processPluginManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/migrate_plus/src/Plugin/migrate/process/DomApplyStyles.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
    * @param string $format
    *   The text format from which to get configured styles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function setStyles($format) {
     if (empty($format) || !is_string($format)) {
@@ @@
   /**
    * Validate the configured rules.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function validateRules() {
     if (!array_key_exists('rules', $this->configuration) || !is_array($this->configuration['rules'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/migrate_plus/src/Plugin/migrate/process/Dom.php:136

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $value
    *   The string to be imported.
-   * @param \Drupal\migrate\MigrateExecutableInterface $migrate_executable
+   * @param MigrateExecutableInterface $migrate_executable
    *   The migration in which this process is being executed.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row from the source to process. Normally, just transforming the value
    *   is adequate but very rarely you might need to change two columns at the
    *   same time or something like that.
@@ @@
    * @return \DOMDocument
    *   The document object based on the provided string.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    *   When the received $value is not a string.
    */
   public function import($value, MigrateExecutableInterface $migrate_executable, Row $row, $destination_property) {
@@ @@
    *
    * @param mixed $value
    *   The document to be exported.
-   * @param \Drupal\migrate\MigrateExecutableInterface $migrate_executable
+   * @param MigrateExecutableInterface $migrate_executable
    *   The migration in which this process is being executed.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row from the source to process. Normally, just transforming the value
    *   is adequate but very rarely you might need to change two columns at the
    *   same time or something like that.
@@ @@
    * @return string
    *   The HTML string corresponding to the provided document object.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    *   When the received $value is not a \DOMDocument.
    */
   public function export($value, MigrateExecutableInterface $migrate_executable, Row $row, $destination_property) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/migrate_plus/src/Plugin/migrate/destination/Table.php:95

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $dbConnection;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/migrate_plus/src/Plugin/MigrationConfigDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Plugin;

+use Drupal\migrate_plus\Entity\MigrationInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\migrate_plus\Entity\Migration;

@@ @@
     // clearing our internal cache.
     $this->derivatives = [];
     $migrations = Migration::loadMultiple();
-    /** @var \Drupal\migrate_plus\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     foreach ($migrations as $id => $migration) {
       if (!$migration->status()) {
         continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/migrate_plus/src/Event/MigratePrepareRowEvent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Row object.
    *
-   * @var \Drupal\migrate\Row
+   * @var Row
    */
   protected $row;

@@ @@
   /**
    * Migration source plugin.
    *
-   * @var \Drupal\migrate\Plugin\MigrateSourceInterface
+   * @var MigrateSourceInterface
    */
   protected $source;

@@ @@
   /**
    * Migration plugin.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
   /**
    * Constructs a prepare-row event object.
    *
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   Row of source data to be analyzed/manipulated.
-   * @param \Drupal\migrate\Plugin\MigrateSourceInterface $source
+   * @param MigrateSourceInterface $source
    *   Source plugin that is the source of the event.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   Migration entity.
    */
   public function __construct(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
@@ @@
   /**
    * Gets the row object.
    *
-   * @return \Drupal\migrate\Row
+   * @return Row
    *   The row object about to be imported.
    */
   public function getRow() {
@@ @@
   /**
    * Gets the source plugin.
    *
-   * @return \Drupal\migrate\Plugin\MigrateSourceInterface
+   * @return MigrateSourceInterface
    *   The source plugin firing the event.
    */
   public function getSource() {
@@ @@
   /**
    * Gets the migration plugin.
    *
-   * @return \Drupal\migrate\Plugin\MigrationInterface
+   * @return MigrationInterface
    *   The migration entity being imported.
    */
   public function getMigration() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/migrate_plus/src/Entity/Migration.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Entity;

+use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
    * @param string $new_plugin_id
    *   ID to use for the new configuration entity.
    *
-   * @return \Drupal\migrate_plus\Entity\MigrationInterface
+   * @return MigrationInterface
    *   A Migration configuration entity (not saved to persistent storage).
    */
   public static function createEntityFromPlugin($plugin_id, $new_plugin_id) {
-    /** @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface $plugin_manager */
+    /** @var MigrationPluginManagerInterface $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.migration');
     /** @var \Drupal\migrate\Plugin\Migration $migration_plugin */
     $migration_plugin = $plugin_manager->createInstance($plugin_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/migrate_plus/src/DataParserPluginManager.php:21

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/migrate_plus/src/DataParserPluginBase.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * The data retrieval client.
    *
-   * @var \Drupal\migrate_plus\DataFetcherPluginInterface
+   * @var DataFetcherPluginInterface
    */
   protected $dataFetcher;

@@ @@
   /**
    * Returns the initialized data fetcher plugin.
    *
-   * @return \Drupal\migrate_plus\DataFetcherPluginInterface
+   * @return DataFetcherPluginInterface
    *   The data fetcher plugin.
    */
   public function getDataFetcherPlugin() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/migrate_plus/src/DataFetcherPluginManager.php:21

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/migrate_plus/src/DataFetcherPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus;

+use Psr\Http\Message\ResponseInterface;
 /**
  * Defines an interface for data fetchers.
  *
@@ @@
    * @param string $url
    *   URL to retrieve from.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   The HTTP response message.
    */
   public function getResponse($url);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


45) modules/contrib/migrate_plus/src/AuthenticationPluginManager.php:21

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/migrate_plus/src/Annotation/DataParser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


47) modules/contrib/migrate_plus/src/Annotation/DataFetcher.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


48) modules/contrib/migrate_plus/src/Annotation/Authentication.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


49) modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/src/Plugin/rest/resource/VarietyMultiFiles.php:23

    ---------- begin diff ----------
@@ @@
    * @param string $type
    *   'red', 'white', or NULL to return all varieties.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing the requested variety data.
    */
   public function get($type = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/src/Plugin/rest/resource/VarietyList.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Responds to GET requests.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing the requested variety data.
    */
   public function get() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


51) modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/src/Plugin/rest/resource/VarietyItems.php:23

    ---------- begin diff ----------
@@ @@
    * @param string $variety
    *   Machine name of the variety to retrieve.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing the requested variety data.
    */
   public function get($variety = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/src/Plugin/rest/resource/PositionResource.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Responds to GET requests.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing the position data.
    */
   public function get() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


53) modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\migrate_plus\Entity\MigrationInterface;
 /**
  * @file
  * Install, update and uninstall functions for migrate_example_advanced module.
@@ @@
  * site root and here rewrite them to fully-qualified paths.
  */
 function migrate_example_advanced_install() {
-  /** @var \Drupal\migrate_plus\Entity\MigrationInterface $wine_role_xml_migration */
+  /** @var MigrationInterface $wine_role_xml_migration */
   $wine_role_xml_migration = Migration::load('wine_role_xml');
   if ($wine_role_xml_migration) {
     $source = $wine_role_xml_migration->get('source');
@@ @@
     $wine_role_xml_migration->set('source', $source);
     $wine_role_xml_migration->save();
   }
-  /** @var \Drupal\migrate_plus\Entity\MigrationInterface $wine_role_json_migration */
+  /** @var MigrationInterface $wine_role_json_migration */
   $wine_role_json_migration = Migration::load('wine_role_json');
   if ($wine_role_json_migration) {
     $source = $wine_role_json_migration->get('source');
@@ @@
     $wine_role_json_migration->set('source', $source);
     $wine_role_json_migration->save();
   }
-  /** @var \Drupal\migrate_plus\Entity\MigrationInterface $wine_variety_multi_xml_migration */
+  /** @var MigrationInterface $wine_variety_multi_xml_migration */
   $wine_variety_multi_xml_migration = Migration::load('wine_variety_multi_xml');
   if ($wine_variety_multi_xml_migration) {
     $source = $wine_variety_multi_xml_migration->get('source');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 53 files have been changed by Rector                                      

