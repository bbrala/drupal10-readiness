modules/contrib/hierarchical_taxonomy_menu/hierarchical_taxonomy_menu.install
modules/contrib/hierarchical_taxonomy_menu/hierarchical_taxonomy_menu.module
modules/contrib/hierarchical_taxonomy_menu/hierarchical_taxonomy_menu.post_update.php
modules/contrib/hierarchical_taxonomy_menu/src/Plugin/Block/HierarchicalTaxonomyMenuBlock.php
modules/contrib/hierarchical_taxonomy_menu/tests/src/Functional/HierarchicalTaxonomyMenuCacheTest.php
modules/contrib/hierarchical_taxonomy_menu/tests/src/Functional/HierarchicalTaxonomyMenuImageTest.php
modules/contrib/hierarchical_taxonomy_menu/tests/src/Functional/HierarchicalTaxonomyMenuTest.php
modules/contrib/hierarchical_taxonomy_menu/tests/src/Functional/HierarchicalTaxonomyMenuTranslationTest.php
modules/contrib/hierarchical_taxonomy_menu/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuAdvancedTest.php
modules/contrib/hierarchical_taxonomy_menu/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuBasicTest.php
modules/contrib/hierarchical_taxonomy_menu/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuDynamicTest.php

8 files with changes
====================

1) modules/contrib/hierarchical_taxonomy_menu/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuDynamicTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\hierarchical_taxonomy_menu\FunctionalJavascript;

+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\block\Entity\Block;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
@@ @@
   /**
    * The vocabulary.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;

@@ @@
   /**
    * The placed Hierarchical Taxonomy Menu block.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $admin_user = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/hierarchical_taxonomy_menu/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuBasicTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\hierarchical_taxonomy_menu\FunctionalJavascript;

+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\block\Entity\Block;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
@@ @@
   /**
    * The vocabulary.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;

@@ @@
   /**
    * The placed Hierarchical Taxonomy Menu block.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $admin_user = $this->drupalCreateUser([
@@ @@

     $this->drupalGet('taxonomy/term/1');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Parent term 1');
+    $this->assertEquals($block_title_element->getText(), 'Parent term 1');
   }

   /**
@@ @@

     $this->drupalGet('taxonomy/term/1');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Hierarchical Taxonomy Menu');
+    $this->assertEquals($block_title_element->getText(), 'Hierarchical Taxonomy Menu');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/hierarchical_taxonomy_menu/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuAdvancedTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\hierarchical_taxonomy_menu\FunctionalJavascript;

+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\block\Entity\Block;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\taxonomy\Entity\Term;
@@ @@
   /**
    * The vocabulary.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;

@@ @@
   /**
    * The placed Hierarchical Taxonomy Menu block.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $admin_user = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/hierarchical_taxonomy_menu/tests/src/Functional/HierarchicalTaxonomyMenuTranslationTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $language = ConfigurableLanguage::createFromLangcode('sr');
@@ @@
   public function testDynamicBlockTitle() {
     $this->drupalGet('taxonomy/term/1');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Parent');
+    $this->assertEquals($block_title_element->getText(), 'Parent');

     $this->drupalGet('sr/taxonomy/term/1');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Roditelj');
+    $this->assertEquals($block_title_element->getText(), 'Roditelj');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/hierarchical_taxonomy_menu/tests/src/Functional/HierarchicalTaxonomyMenuTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $admin_user = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/hierarchical_taxonomy_menu/tests/src/Functional/HierarchicalTaxonomyMenuImageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\hierarchical_taxonomy_menu\Functional;

+use Drupal\block\Entity\Block;
+use Drupal\taxonomy\VocabularyInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\file\Entity\File;
@@ @@
   /**
    * The block.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;

@@ @@
   /**
    * The vocabulary.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $vocabulary = $this->createVocabulary();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/hierarchical_taxonomy_menu/tests/src/Functional/HierarchicalTaxonomyMenuCacheTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\hierarchical_taxonomy_menu\Functional;

+use Drupal\block\Entity\Block;
+use Drupal\user\Entity\User;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The block.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;

@@ @@
   /**
    * The user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $vocabulary = $this->createVocabulary();
@@ @@
     $this->drupalGet('taxonomy/term/1');
     $this->assertCacheContext('url.path');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Term 1');
+    $this->assertEquals($block_title_element->getText(), 'Term 1');

     $this->drupalGet('taxonomy/term/2');
     $this->assertCacheContext('url.path');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Term 2');
+    $this->assertEquals($block_title_element->getText(), 'Term 2');
   }

   /**
@@ @@
     $this->drupalGet('taxonomy/term/1');
     $this->assertCacheContext('url.path');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Term 1');
+    $this->assertEquals($block_title_element->getText(), 'Term 1');

     $this->drupalGet('taxonomy/term/2');
     $this->assertCacheContext('url.path');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Term 2');
+    $this->assertEquals($block_title_element->getText(), 'Term 2');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/hierarchical_taxonomy_menu/src/Plugin/Block/HierarchicalTaxonomyMenuBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\hierarchical_taxonomy_menu\Plugin\Block;

+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\Core\Routing\CurrentRouteMatch;
+use Drupal\taxonomy\TermInterface;
+use Drupal\image\Entity\ImageStyle;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The current route match service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * The the current primary database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Routing\ResettableStackedRouteMatchInterface $current_route_match
+   * @param ResettableStackedRouteMatchInterface $current_route_match
    *   The current route match service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The the current primary database.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
    */
   public function __construct(
@@ @@
   /**
    * Whether a field is media type of image.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   A field to check.
    *
    * @return bool
@@ @@
     $translation_languages = $term->getTranslationLanguages();

     if (isset($translation_languages[$language])) {
-      /** @var \Drupal\taxonomy\TermInterface $term_translated */
+      /** @var TermInterface $term_translated */
       $term_translated = $term->getTranslation($language);
       return $term_translated->toUrl();
     }
@@ @@
           $path = $style->buildUrl($file->getFileUri());
         }
         else {
-          $path = Url::fromUri(file_create_url($file->getFileUri()));
+          $path = \Drupal::service('file_url_generator')->generate($file->getFileUri());
         }
       }
       else {
-        $path = Url::fromUri(file_create_url($file->getFileUri()));
+        $path = \Drupal::service('file_url_generator')->generate($file->getFileUri());
       }
       return $path;
     }
@@ @@
     $styles = $this->entityTypeManager->getStorage('image_style')->loadMultiple();

     foreach ($styles as $style) {
-      /** @var \Drupal\image\Entity\ImageStyle $style */
+      /** @var ImageStyle $style */
       $style_name = $style->getName();
       $options[$style_name] = $style->label();
     }
@@ @@
       $fields = $this->entityFieldManager
         ->getFieldDefinitions('commerce_product', $bundle);

-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+      /** @var FieldDefinitionInterface $field */
       foreach ($fields as $field) {
         if ($field->getType() == 'entity_reference' && $field->getSetting('target_type') == 'taxonomy_term') {
           $referencing_fields[$field->getName()] = $field->getLabel();
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 8 files have been changed by Rector                                       

