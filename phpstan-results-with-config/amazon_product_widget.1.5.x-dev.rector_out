modules/contrib/amazon_product_widget/amazon_product_widget.api.php
modules/contrib/amazon_product_widget/amazon_product_widget.install
modules/contrib/amazon_product_widget/amazon_product_widget.module
modules/contrib/amazon_product_widget/amazon_product_widget.post_update.php
modules/contrib/amazon_product_widget/amazon_product_widget.views.inc
modules/contrib/amazon_product_widget/src/BatchDealImportService.php
modules/contrib/amazon_product_widget/src/BatchProductMapUpdateService.php
modules/contrib/amazon_product_widget/src/Commands/AmazonProductWidgetCommands.php
modules/contrib/amazon_product_widget/src/ConfigSettingsTrait.php
modules/contrib/amazon_product_widget/src/Controller/AmazonProductController.php
modules/contrib/amazon_product_widget/src/DealFeedService.php
modules/contrib/amazon_product_widget/src/DealFeedServiceTrait.php
modules/contrib/amazon_product_widget/src/DealImportState.php
modules/contrib/amazon_product_widget/src/DealStore.php
modules/contrib/amazon_product_widget/src/EventSubscriber/AmazonApiSubscriber.php
modules/contrib/amazon_product_widget/src/Exception/AmazonApiDisabledException.php
modules/contrib/amazon_product_widget/src/Exception/AmazonDealApiDisabledException.php
modules/contrib/amazon_product_widget/src/Exception/AmazonRequestLimitReachedException.php
modules/contrib/amazon_product_widget/src/Exception/AmazonServiceException.php
modules/contrib/amazon_product_widget/src/Form/DealFeedCheckForm.php
modules/contrib/amazon_product_widget/src/Form/DealFeedSettingsForm.php
modules/contrib/amazon_product_widget/src/Form/ProductRenewalForm.php
modules/contrib/amazon_product_widget/src/Form/SettingsForm.php
modules/contrib/amazon_product_widget/src/Plugin/Field/FieldFormatter/AmazonProductFieldFormatter.php
modules/contrib/amazon_product_widget/src/Plugin/Field/FieldType/AmazonProductField.php
modules/contrib/amazon_product_widget/src/Plugin/Field/FieldWidget/AmazonProductWidget.php
modules/contrib/amazon_product_widget/src/Plugin/QueueWorker/ProductDataUpdate.php
modules/contrib/amazon_product_widget/src/Plugin/views/field/DealStatus.php
modules/contrib/amazon_product_widget/src/Plugin/views/field/EntityUrl.php
modules/contrib/amazon_product_widget/src/Plugin/views/field/MoreLink.php
modules/contrib/amazon_product_widget/src/Plugin/views/field/ProductAvailable.php
modules/contrib/amazon_product_widget/src/Plugin/views/field/ProductHasData.php
modules/contrib/amazon_product_widget/src/Plugin/views/field/UnavailableAsins.php
modules/contrib/amazon_product_widget/src/Plugin/views/filter/DealStatusFilter.php
modules/contrib/amazon_product_widget/src/ProductService.php
modules/contrib/amazon_product_widget/src/ProductServiceTrait.php
modules/contrib/amazon_product_widget/src/ProductStore.php
modules/contrib/amazon_product_widget/src/ProductStoreFactory.php
modules/contrib/amazon_product_widget/src/ProductUsageService.php

26 files with changes
=====================

1) modules/contrib/amazon_product_widget/src/ProductUsageService.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * EntityFieldManager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;

@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * ProductUsageService constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $fieldManager
+   * @param EntityFieldManagerInterface $fieldManager
    *   EntityFieldManager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Module handler.
    */
   public function __construct(Connection $database, EntityFieldManagerInterface $fieldManager, ModuleHandlerInterface $moduleHandler) {
@@ @@
   /**
    * Updates ASIN mapping for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to update the mapping for.
    */
   public function update(EntityInterface $entity) {
@@ @@

       if ($definition->getType() === 'amazon_product_widget_field_type') {
         try {
-          /** @var \Drupal\amazon_product_widget\Plugin\Field\FieldType\AmazonProductField $productField */
+          /** @var AmazonProductField $productField */
           $productField = $entity->get($fieldName)->first();
           if (!$productField instanceof AmazonProductField) {
             continue;
@@ @@
         }
       }
       elseif ($definition->getType() === 'entity_reference_revisions' || $definition->getType() === 'entity_reference') {
-        /** @var \Drupal\Core\Entity\EntityInterface $referenceField */
+        /** @var EntityInterface $referenceField */
         $referenceField = $entity->get($fieldName);
         if (!$referenceField) {
           continue;
@@ @@
         }
         $referencedEntities = $referenceField->referencedEntities();

-        /** @var \Drupal\Core\Entity\FieldableEntityInterface $referencedEntity */
+        /** @var FieldableEntityInterface $referencedEntity */
         foreach ($referencedEntities as $referencedEntity) {
           if (!$referencedEntity instanceof FieldableEntityInterface) {
             continue;
@@ @@
           foreach ($fields as $field) {
             if ($field->getType() === 'amazon_product_widget_field_type') {
               try {
-                /** @var \Drupal\amazon_product_widget\Plugin\Field\FieldType\AmazonProductField $productField */
+                /** @var AmazonProductField $productField */
                 $productField = $referencedEntity->get($field->getName())->first();
                 if (!$productField instanceof AmazonProductField) {
                   continue;
@@ @@
   /**
    * Returns the unavailable ASINs in the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return array
@@ @@
   /**
    * Returns the ASINs contained within the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to search.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/amazon_product_widget/src/ProductStoreFactory.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * TimeInterface.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs this factory object.
    *
-   * @param \Drupal\Component\Serialization\SerializationInterface $serializer
+   * @param SerializationInterface $serializer
    *   The serialization class to use.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The Connection object containing the key-value tables.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The TimeInterface object that keeps time.
    */
   public function __construct(SerializationInterface $serializer, Connection $connection, TimeInterface $time) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\amazon_product_widget\ProductStore
+   * @return ProductStore
    */
   public function get($collection) {
     return new ProductStore($collection, $this->serializer, $this->connection, $this->time);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/amazon_product_widget/src/ProductStore.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * TimeInterface.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
    *
    * @param string $collection
    *   The name of the collection holding key and value pairs.
-   * @param \Drupal\Component\Serialization\SerializationInterface $serializer
+   * @param SerializationInterface $serializer
    *   The serialization class to use.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The TimeInterface object.
    */
   public function __construct($collection, SerializationInterface $serializer, Connection $connection, TimeInterface $time) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/amazon_product_widget/src/ProductServiceTrait.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Product service.
    *
-   * @var \Drupal\amazon_product_widget\ProductService
+   * @var ProductService
    */
   protected $productService;

@@ @@
   /**
    * Returns an instance of ProductService.
    *
-   * @return \Drupal\amazon_product_widget\ProductService
+   * @return ProductService
    */
   public function getProductService() {
     if (!$this->productService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/amazon_product_widget/src/ProductService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_product_widget;

+use Drupal\Core\Config\ImmutableConfig;
+use Amazon\ProductAdvertisingAPI\v1\ApiException;
 use Amazon\ProductAdvertisingAPI\v1\com\amazon\paapi5\v1\GetItemsRequest;
 use Amazon\ProductAdvertisingAPI\v1\com\amazon\paapi5\v1\GetItemsResource;
 use Amazon\ProductAdvertisingAPI\v1\com\amazon\paapi5\v1\PartnerType;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Amazon product widget settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;

@@ @@
    * Key value store with ASIN-number as keys and serialized product data as
    * data.
    *
-   * @var \Drupal\amazon_product_widget\productStore
+   * @var productStore
    */
   protected $productStore;

@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    * Key value store with a hashed search term string as key and a list of
    * ASINs which were returned from amazon search as data.
    *
-   * @var \Drupal\amazon_product_widget\productStore
+   * @var productStore
    */
   protected $searchResultStore;

@@ @@
   /**
    * State.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Lock backend.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * Queue for fetching product data.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * The deal feed service.
    *
-   * @var \Drupal\amazon_product_widget\DealFeedService
+   * @var DealFeedService
    */
   protected $dealService;

@@ @@
   /**
    * ProductService constructor.
    *
-   * @param \Drupal\amazon_product_widget\ProductStoreFactory $store_factory
+   * @param ProductStoreFactory $store_factory
    *   Product store.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   Lock backend.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Config factory.
-   * @param \Drupal\Core\Queue\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The queue.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\amazon_product_widget\DealFeedService $dealService
+   * @param DealFeedService $dealService
    *   Deal feed service.
    */
   public function __construct(ProductStoreFactory $store_factory, StateInterface $state, LockBackendInterface $lock, ConfigFactoryInterface $config, QueueInterface $queue, EntityTypeManager $entityTypeManager, ModuleHandlerInterface $moduleHandler, DealFeedService $dealService) {
@@ @@
   /**
    * Gets the product store.
    *
-   * @return \Drupal\amazon_product_widget\productStore
+   * @return productStore
    */
   public function getProductStore() {
     return $this->productStore;
@@ @@
   /**
    * Gets the search result store.
    *
-   * @return \Drupal\amazon_product_widget\productStore
+   * @return productStore
    */
   public function getSearchResultStore() {
     return $this->searchResultStore;
@@ @@
    *   Associative array with ASIN-number as key, and product data as values.
    *   If no data was retrieved for an ASIN, then the value is FALSE.
    *
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonApiDisabledException
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonRequestLimitReachedException
+   * @throws AmazonApiDisabledException
+   * @throws AmazonRequestLimitReachedException
    */
   public function getProductData(array $asins, bool $renew = FALSE) : array {
     $asins = array_unique($asins);
@@ @@
    *   An array of ASIN-numbers which are the top result for that search, with
    *   the first item in the array being the top result.
    *
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonApiDisabledException
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonRequestLimitReachedException
+   * @throws AmazonApiDisabledException
+   * @throws AmazonRequestLimitReachedException
    */
   public function getSearchResults($search_terms, $category = ProductService::AMAZON_CATEGORY_DEFAULT, $renew = FALSE) {
     if (empty($search_terms)) {
@@ @@
    *   Associative array with ASIN-number as key, and product data as values.
    *   If no data was retrieved for an ASIN, then the value is FALSE.
    *
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonApiDisabledException
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonRequestLimitReachedException
+   * @throws AmazonApiDisabledException
+   * @throws AmazonRequestLimitReachedException
    */
   protected function fetchAmazonProducts(array $asins) {
     if ($this->amazonApiDisabled) {
@@ @@
    *   Associative array with ASIN-number as key, and product data as values.
    *   If no data was retrieved for an ASIN, then the value is FALSE.
    *
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonApiDisabledException
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonRequestLimitReachedException
-   * @throws \Amazon\ProductAdvertisingAPI\v1\ApiException
+   * @throws AmazonApiDisabledException
+   * @throws AmazonRequestLimitReachedException
+   * @throws ApiException
    */
   protected function fetchItemData(array $asins) {
     if (empty($asins)) {
@@ @@
    * @return string[]
    *   An array of ASIN-numbers which are the top result for that search.
    *
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonApiDisabledException
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonRequestLimitReachedException
+   * @throws AmazonApiDisabledException
+   * @throws AmazonRequestLimitReachedException
    */
   public function fetchAmazonSearchResults($search_terms, $category = ProductService::AMAZON_CATEGORY_DEFAULT) {
     if ($this->amazonApiDisabled) {
@@ @@
   /**
    * Builds products for theming with fallback.
    *
-   * @param \Drupal\amazon_product_widget\Plugin\Field\FieldType\AmazonProductField $product_field
+   * @param AmazonProductField $product_field
    *   Product field.
-   * @param \Drupal\node\NodeInterface|null $node
+   * @param NodeInterface|null $node
    *   Node the product field is on.
    *
    * @return mixed[]
@@ @@
   /**
    * Gets the raw product data with fallback.
    *
-   * @param \Drupal\amazon_product_widget\Plugin\Field\FieldType\AmazonProductField $product_field
+   * @param AmazonProductField $product_field
    *   Product field.
-   * @param \Drupal\node\NodeInterface|null $node
+   * @param NodeInterface|null $node
    *   The node the product field is attached to.
    *
    * @return mixed[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/amazon_product_widget/src/Plugin/views/field/UnavailableAsins.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\amazon_product_widget\ProductUsageService
+   * @var ProductUsageService
    */
   protected $usageService;

@@ @@
   /**
    * Product usage service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/amazon_product_widget/src/Plugin/views/field/EntityUrl.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/amazon_product_widget/src/Plugin/views/field/DealStatus.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Deal feed service.
    *
-   * @var \Drupal\amazon_product_widget\DealFeedService
+   * @var DealFeedService
    */
   protected $dealFeedService;

@@ @@
    *   Plugin id.
    * @param $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\amazon_product_widget\DealFeedService $dealFeedService
+   * @param DealFeedService $dealFeedService
    *   Deal feed service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DealFeedService $dealFeedService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/amazon_product_widget/src/Plugin/QueueWorker/ProductDataUpdate.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Product service.
    *
-   * @var \Drupal\amazon_product_widget\ProductService
+   * @var ProductService
    */
   protected $productService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\amazon_product_widget\ProductService $product_service
+   * @param ProductService $product_service
    *   Product service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ProductService $product_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/amazon_product_widget/src/Plugin/Field/FieldWidget/AmazonProductWidget.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Product service.
    *
-   * @var \Drupal\amazon_product_widget\ProductService
+   * @var ProductService
    */
   protected $productService;

@@ @@
    *
    * @param array $element
    *   Form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function validateAsins(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/amazon_product_widget/src/Plugin/Field/FieldFormatter/AmazonProductFieldFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_product_widget\Plugin\Field\FieldFormatter;

+use Drupal\amazon_product_widget\Plugin\Field\FieldType\AmazonProductField;
 use Drupal\amazon_product_widget\ProductServiceTrait;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
@@ @@
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
-    /** @var \Drupal\amazon_product_widget\Plugin\Field\FieldType\AmazonProductField $field */
+    /** @var AmazonProductField $field */
     $field = $items->first();

     if (empty($field)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/amazon_product_widget/src/Form/ProductRenewalForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Product service.
    *
-   * @var \Drupal\amazon_product_widget\ProductService
+   * @var ProductService
    */
   protected $productService;

@@ @@
   /**
    * ProductRenewalForm constructor.
    *
-   * @param \Drupal\amazon_product_widget\ProductService $product_service
+   * @param ProductService $product_service
    *   Product service.
    */
   public function __construct(ProductService $product_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/amazon_product_widget/src/Form/DealFeedSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_product_widget\Form;

+use Drupal\file\FileInterface;
 use Drupal\amazon_product_widget\ConfigSettingsTrait;
 use Drupal\amazon_product_widget\DealFeedService;
 use Drupal\amazon_product_widget\Exception\AmazonDealApiDisabledException;
@@ @@
   /**
    * The Deal Feed service.
    *
-   * @var \Drupal\amazon_product_widget\DealFeedService
+   * @var DealFeedService
    */
   protected $dealService;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * State.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * DealFeedSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\amazon_product_widget\DealFeedService $dealService
+   * @param DealFeedService $dealService
    *   Deal feed service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State.
    */
   public function __construct(ConfigFactoryInterface $config_factory, DealFeedService $dealService, EntityTypeManagerInterface $entityTypeManager, StateInterface $state) {
@@ @@
       try {
         if ($triggering === 'source_csv') {
           $fileId = $form_state->getValue('source_csv_file')[0];
-          /** @var \Drupal\file\FileInterface $managedFile */
+          /** @var FileInterface $managedFile */
           $managedFile = $this->entityTypeManager->getStorage('file')->load($fileId);

           if ($managedFile) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/amazon_product_widget/src/Form/DealFeedCheckForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The deal feed service.
    *
-   * @var \Drupal\amazon_product_widget\DealFeedService
+   * @var DealFeedService
    */
   protected $dealFeedService;

@@ @@
   /**
    * DealFeedCheckForm constructor.
    *
-   * @param \Drupal\amazon_product_widget\DealFeedService $dealFeedService
+   * @param DealFeedService $dealFeedService
    *   The deal feed service.
    */
   public function __construct(DealFeedService $dealFeedService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/amazon_product_widget/src/EventSubscriber/AmazonApiSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_product_widget\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
+use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Amazon product widget settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;

@@ @@
   /**
    * Constructs the AmazonApiSubscriber.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Config\ImmutableConfig $settings
+   * @param ImmutableConfig $settings
    *   Amazon product widget settings.
    */
   public function __construct(RouteMatchInterface $route_match, ImmutableConfig $settings) {
@@ @@
   /**
    * Unset cookie so the whole request acts as anonymous for everybody.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    *
    * @see \Drupal\Core\EventSubscriber\FinishResponseSubscriber::onRespond()
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ @@
   /**
    * Sets proper cache control header.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    *
    * @see \Drupal\Core\EventSubscriber\FinishResponseSubscriber::onRespond()
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
     if ($this->routeMatch->getRouteName() == 'amazon_product_widget.product_api') {
-      /** @var \Drupal\Core\Cache\CacheableJsonResponse $response */
+      /** @var CacheableJsonResponse $response */
       $response = $event->getResponse();
       // Adjust cache control headers.
       $response->headers->removeCacheControlDirective('must-revalidate');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/amazon_product_widget/src/DealStore.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_product_widget;

+use Drupal\Core\Database\StatementInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Time interface.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * DealStore constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database connection.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time interface.
    */
   public function __construct(Connection $connection, TimeInterface $time) {
@@ @@
    * @param array $deal
    *   The deal to insert or update.
    *
-   * @return \Drupal\Core\Database\StatementInterface|int|null
+   * @return StatementInterface|int|null
    *   Returns STATUS_INSERT, STATUS_UPDATE or NULL
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/amazon_product_widget/src/DealFeedServiceTrait.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Deal service.
    *
-   * @var \Drupal\amazon_product_widget\DealFeedService
+   * @var DealFeedService
    */
   protected $dealService;

@@ @@
   /**
    * Returns an instance of DealFeedService.
    *
-   * @return \Drupal\amazon_product_widget\DealFeedService
+   * @return DealFeedService
    */
   public function getDealService() {
     if (!$this->dealService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/amazon_product_widget/src/DealFeedService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_product_widget;

+use Drupal\Core\Config\ImmutableConfig;
+use GuzzleHttp\Exception\GuzzleException;
 use DateTime;
 use Drupal\amazon_product_widget\Exception\AmazonDealApiDisabledException;
 use Drupal\amazon_product_widget\Exception\AmazonServiceException;
@@ @@
   /**
    * Amazon product widget deal feed settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;

@@ @@
   /**
    * File system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Deal store.
    *
-   * @var \Drupal\amazon_product_widget\DealStore
+   * @var DealStore
    */
   protected $dealStore;

@@ @@
   /**
    * Lock.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * DealFeedService constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Config factory.
    * @param \GuzzleHttp\Client $httpClient
    *   Guzzle client.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   File system.
-   * @param \Drupal\amazon_product_widget\DealStore $dealStore
+   * @param DealStore $dealStore
    *   Deal store.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   Lock.
    */
   public function __construct(ConfigFactoryInterface $config, GuzzleClient $httpClient, FileSystemInterface $fileSystem, DealStore $dealStore, LockBackendInterface $lock) {
@@ @@
    * @param int $entries
    *   How many entries to import. (default is all)
    *
-   * @return \Drupal\amazon_product_widget\DealImportState|NULL
+   * @return DealImportState|NULL
    *   The deal import state, or NULL if the file could not be opened.
    */
   public function import(string $path, int $start = 0, int $entries = -1) {
@@ @@
    * @return string
    *   The path to the file where the CSV was stored.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonServiceException
+   * @throws GuzzleException
+   * @throws AmazonServiceException
    */
   public function downloadDealsCsv($destination = NULL) {
     $username = $this->settings->get(DealFeedSettingsForm::SETTINGS_DEAL_FEED_USERNAME);
@@ @@
    * @param string $path
    *   The path to the CSV file. (optional)
    *
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonDealApiDisabledException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \Drupal\amazon_product_widget\Exception\AmazonServiceException
+   * @throws AmazonDealApiDisabledException
+   * @throws GuzzleException
+   * @throws AmazonServiceException
    */
   public function update(string $path = NULL) {
     if (!$this->isActivated()) {
@@ @@
   /**
    * Returns the deal store.
    *
-   * @return \Drupal\amazon_product_widget\DealStore
+   * @return DealStore
    *   Deal store.
    */
   public function getDealStore() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/amazon_product_widget/src/Controller/AmazonProductController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_product_widget\Controller;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\amazon_product_widget\DealFeedServiceTrait;
 use Drupal\amazon_product_widget\Plugin\Field\FieldType\AmazonProductField;
 use Drupal\amazon_product_widget\ProductServiceTrait;
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Lock backend.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * Amazon product widget settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Product usage service.
    *
-   * @var \Drupal\amazon_product_widget\ProductUsageService
+   * @var ProductUsageService
    */
   protected $productUsage;

@@ @@
   /**
    * AmazonProductController constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   Lock backend.
-   * @param \Drupal\Core\Config\ImmutableConfig $settings
+   * @param ImmutableConfig $settings
    *   Amazon product widget settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\amazon_product_widget\ProductUsageService $productUsage
+   * @param ProductUsageService $productUsage
    *   Product usage service.
    */
   public function __construct(RendererInterface $renderer, LockBackendInterface $lock, ImmutableConfig $settings, EntityTypeManagerInterface $entityTypeManager, ProductUsageService $productUsage) {
@@ @@
       $node = $this->entityTypeManager->getStorage('node')->load($node_id);
     }

-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = $this->entityTypeManager()->getStorage($entity_type);
     if ($entity = $storage->load($entity_id)) {
       if ($entity->hasField($fieldname)) {
-        /** @var \Drupal\amazon_product_widget\Plugin\Field\FieldType\AmazonProductField $field */
+        /** @var AmazonProductField $field */
         $product_field = $entity->get($fieldname)->first();
         if ($product_field instanceof AmazonProductField) {
           $cacheability = CacheableMetadata::createFromObject($entity)->merge($cacheability);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/amazon_product_widget/src/Commands/AmazonProductWidgetCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_product_widget\Commands;

+use Drupal\Core\Queue\QueueInterface;
+use Drupal\amazon_product_widget\Plugin\QueueWorker\ProductDataUpdate;
 use Drupal\amazon_product_widget\BatchProductMapUpdateService;
 use Drupal\amazon_product_widget\DealFeedService;
 use Drupal\amazon_product_widget\Exception\AmazonApiDisabledException;
@@ @@
   /**
    * ProductService.
    *
-   * @var \Drupal\amazon_product_widget\ProductService
+   * @var ProductService
    */
   protected $productService;

@@ @@
   /**
    * Queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * QueueWorkerManagerInterface.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorker;

@@ @@
   /**
    * DealFeedService.
    *
-   * @var \Drupal\amazon_product_widget\DealFeedService
+   * @var DealFeedService
    */
   protected $dealFeedService;

@@ @@
   /**
    * ProductUsageService.
    *
-   * @var \Drupal\amazon_product_widget\ProductUsageService
+   * @var ProductUsageService
    */
   protected $productUsage;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * AmazonProductWidgetCommands constructor.
    *
-   * @param \Drupal\amazon_product_widget\ProductService $productService
+   * @param ProductService $productService
    *   ProductService.
-   * @param \Drupal\Core\Queue\QueueFactory $queue
+   * @param QueueFactory $queue
    *   QueueFactory.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queueWorker
+   * @param QueueWorkerManagerInterface $queueWorker
    *   QueueWorkerManagerInterface.
-   * @param \Drupal\amazon_product_widget\DealFeedService $dealFeedService
+   * @param DealFeedService $dealFeedService
    *   Deal feed service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(ProductService $productService, QueueFactory $queue, QueueWorkerManagerInterface $queueWorker, DealFeedService $dealFeedService, ProductUsageService $productUsage, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
     if ($this->productService->getProductStore()->hasStaleData()) {
       $this->productService->queueProductRenewal();

-      /** @var \Drupal\amazon_product_widget\Plugin\QueueWorker\ProductDataUpdate $queueWorker */
+      /** @var ProductDataUpdate $queueWorker */
       $queueWorker = $this->queueWorker->createInstance('amazon_product_widget.product_data_update');
       while ($item = $queue->claimItem()) {
         try {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/amazon_product_widget/src/BatchProductMapUpdateService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_product_widget;

+use Drupal\Core\Messenger\MessengerInterface;
 /**
  * Handles batch update of product usage table.
  *
@@ @@
    */
   public static function update(array $nodeIds, int $total, &$context) {
     $entityTypeManager = \Drupal::entityTypeManager();
-    /** @var \Drupal\amazon_product_widget\ProductUsageService $usageService */
+    /** @var ProductUsageService $usageService */
     $usageService = \Drupal::service('amazon_product_widget.usage');

     try {
@@ @@
    *   Operations.
    */
   public static function finish(bool $success, array $results, array $operations) {
-    /** @var \Drupal\Core\Messenger\MessengerInterface $messenger */
+    /** @var MessengerInterface $messenger */
     $messenger = \Drupal::messenger();
     if ($success) {
       $messenger->addMessage(t('Successfully processed @count items.', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/amazon_product_widget/src/BatchDealImportService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_product_widget;

+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Site\Settings;

 /**
@@ @@
    *   The context.
    */
   public static function importChunked(string $filename, int $total, &$context) {
-    /** @var \Drupal\amazon_product_widget\DealFeedService $dealFeedService */
+    /** @var DealFeedService $dealFeedService */
     $dealFeedService = \Drupal::service('amazon_product_widget.deal_feed_service');
     $maxProcessingTime = $dealFeedService->getMaxProcessingTime();

@@ @@
    *   The operations array.
    */
   public static function finishImport(bool $success, array $results, array $operations) {
-    /** @var \Drupal\amazon_product_widget\DealFeedService $dealFeedService */
+    /** @var DealFeedService $dealFeedService */
     $dealFeedService = \Drupal::service('amazon_product_widget.deal_feed_service');
-    /** @var \Drupal\Core\Messenger\MessengerInterface $messenger */
+    /** @var MessengerInterface $messenger */
     $messenger = \Drupal::messenger();

     if ($results['errors'] >= $dealFeedService->getMaxDealImportErrors()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/amazon_product_widget/amazon_product_widget.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\StorageInterface;
 /**
  * @file
  * Post update hooks.
@@ @@
  */
 function amazon_product_widget_post_update_install_view(&$sandbox) {
   // Import the product overview view.
-  $configPath = drupal_get_path('module', 'amazon_product_widget') . '/config/install';
+  $configPath = \Drupal::service('extension.list.module')->getPath('amazon_product_widget') . '/config/install';
   $source = new FileStorage($configPath);
-  /** @var \Drupal\Core\Config\StorageInterface $configStorage */
+  /** @var StorageInterface $configStorage */
   $configStorage = \Drupal::service('config.storage');
   if (!$configStorage->exists('views.view.amazon_product_widget_product_overview')) {
     $configStorage->write('views.view.amazon_product_widget_product_overview', $source->read('views.view.amazon_product_widget_product_overview'));
@@ @@
  */
 function amazon_product_widget_post_update_install_unavailable_products_view(&$sandbox) {
   // Import the product overview view.
-  $configPath = drupal_get_path('module', 'amazon_product_widget') . '/config/install';
+  $configPath = \Drupal::service('extension.list.module')->getPath('amazon_product_widget') . '/config/install';
   $source = new FileStorage($configPath);
-  /** @var \Drupal\Core\Config\StorageInterface $configStorage */
+  /** @var StorageInterface $configStorage */
   $configStorage = \Drupal::service('config.storage');
   if (!$configStorage->exists('views.view.amazon_product_widget_unavailable_products')) {
     $configStorage->write('views.view.amazon_product_widget_unavailable_products', $source->read('views.view.amazon_product_widget_unavailable_products'));
@@ @@
   $module = \Drupal::moduleHandler()->getModule('amazon_product_widget');
   $configPath = $module->getPath() . '/config/install';
   $source = new FileStorage($configPath);
-  /** @var \Drupal\Core\Config\StorageInterface $configStorage */
+  /** @var StorageInterface $configStorage */
   $configStorage = \Drupal::service('config.storage');
   if ($configStorage->exists('views.view.amazon_product_widget_unavailable_products')) {
     $configStorage->write('views.view.amazon_product_widget_unavailable_products', $source->read('views.view.amazon_product_widget_unavailable_products'));
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


24) modules/contrib/amazon_product_widget/amazon_product_widget.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\amazon_product_widget\ProductService;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\State\StateInterface;
+use Drupal\amazon_product_widget\DealFeedService;
+use Drupal\amazon_product_widget\ProductUsageService;
 /**
  * @file
  * Module file.
@@ @@
  * Implements hook_cron().
  */
 function amazon_product_widget_cron() {
-  /** @var \Drupal\amazon_product_widget\ProductService $product_service */
+  /** @var ProductService $product_service */
   $product_service = \Drupal::service('amazon_product_widget.product_service');
   try {
     $product_service->queueSearchResults();
@@ @@
  * Get all ASINS which are stored in product widgets.
  */
 function amazon_product_widget_get_all_asins() {
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+  /** @var EntityFieldManagerInterface $field_manager */
   $field_manager = \Drupal::service('entity_field.manager');
   $fields_map = $field_manager->getFieldMapByFieldType('amazon_product_widget_field_type');
   $asins = [];
@@ @@
  * Called when cron is run.
  */
 function _amazon_product_widget_deals_cron_update() {
-  /** @var \Drupal\Core\State\StateInterface $state */
+  /** @var StateInterface $state */
   $state = \Drupal::state();
-  /** @var \Drupal\amazon_product_widget\DealFeedService $dealFeedService */
+  /** @var DealFeedService $dealFeedService */
   $dealFeedService = \Drupal::service('amazon_product_widget.deal_feed_service');

   if (!$dealFeedService->isActivated()) {
@@ @@
 /**
  * Implements hook_entity_presave().
  */
-function amazon_product_widget_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
-  /** @var \Drupal\amazon_product_widget\ProductUsageService $productUsage */
+function amazon_product_widget_entity_presave(EntityInterface $entity) {
+  /** @var ProductUsageService $productUsage */
   $productUsage = \Drupal::service('amazon_product_widget.usage');
   $productUsage->update($entity);
 }
@@ @@
  */
 function _amazon_product_widget_asin_map_cron_optimize() {
   $state = \Drupal::state();
-  /** @var \Drupal\amazon_product_widget\ProductUsageService $usageService */
+  /** @var ProductUsageService $usageService */
   $usageService = \Drupal::service('amazon_product_widget.usage');
   $currentTime = time();
   $lastRunTime = $state->get('amazon_product_widget.asin_map_last_optimize', 0);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


25) modules/contrib/amazon_product_widget/amazon_product_widget.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\StorageInterface;
 /**
  * @file
  * Install file.
@@ @@
     $menuLink->delete();
   }

-  /** @var \Drupal\Core\Config\StorageInterface $configStorage */
+  /** @var StorageInterface $configStorage */
   $configStorage = \Drupal::service('config.storage');
   if ($configStorage->exists('views.view.amazon_product_widget_product_overview')) {
     $configStorage->delete('views.view.amazon_product_widget_product_overview');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


26) modules/contrib/amazon_product_widget/amazon_product_widget.api.php:13

    ---------- begin diff ----------
@@ @@
  *
  * @param array $products_container
  *   The products container.
- * @param \Drupal\amazon_product_widget\Plugin\Field\FieldType\AmazonProductField $product_field
+ * @param AmazonProductField $product_field
  *   The field the product widget is attached to.
- * @param \Drupal\node\NodeInterface|null $node
+ * @param NodeInterface|null $node
  *   The node the product field is bound to. Can be NULL.
  */
 function hook_amazon_product_widget_alter_product_data(array &$products_container, AmazonProductField $product_field, ?NodeInterface $node = NULL) {
@@ @@
 /**
  * Alters the validation of product data.
  *
- * @param \Drupal\amazon_product_widget\Plugin\Field\FieldType\AmazonProductField $product_field
+ * @param AmazonProductField $product_field
  *   The product field.
  * @param array $product_data
  *   The product data.
@@ @@
  * Allows you to alter the ASINs returned for the entity. This could be useful
  * if they are stored in a different place than the AmazonProductField.
  *
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   The entity that is being searched.
  *
  * @return array
    ----------- end diff -----------

 [OK] 26 files have been changed by Rector                                      

