modules/contrib/eu_cookie_compliance/eu_cookie_compliance.api.php
modules/contrib/eu_cookie_compliance/eu_cookie_compliance.install
modules/contrib/eu_cookie_compliance/eu_cookie_compliance.module
modules/contrib/eu_cookie_compliance/eu_cookie_compliance.post_update.php
modules/contrib/eu_cookie_compliance/eu_cookie_compliance.views.inc
modules/contrib/eu_cookie_compliance/src/Annotation/ConsentStorage.php
modules/contrib/eu_cookie_compliance/src/CategoryStorageManager.php
modules/contrib/eu_cookie_compliance/src/Controller/AdminController.php
modules/contrib/eu_cookie_compliance/src/Controller/CheckIfEuCountryJsController.php
modules/contrib/eu_cookie_compliance/src/Controller/StoreConsent.php
modules/contrib/eu_cookie_compliance/src/CookieCategoryListBuilder.php
modules/contrib/eu_cookie_compliance/src/Entity/CookieCategory.php
modules/contrib/eu_cookie_compliance/src/Entity/CookieCategoryInterface.php
modules/contrib/eu_cookie_compliance/src/EventSubscriber/EuCookieComplianceConfigEventsSubscriber.php
modules/contrib/eu_cookie_compliance/src/Form/CookieCategoryDeleteForm.php
modules/contrib/eu_cookie_compliance/src/Form/CookieCategoryForm.php
modules/contrib/eu_cookie_compliance/src/Form/EuCookieComplianceConfigForm.php
modules/contrib/eu_cookie_compliance/src/PersonalInformationFormInterface.php
modules/contrib/eu_cookie_compliance/src/PersonalInformationFormTrait.php
modules/contrib/eu_cookie_compliance/src/Plugin/Block/CookieSettingsButtonBlock.php
modules/contrib/eu_cookie_compliance/src/Plugin/ConsentStorage/BasicConsentStorage.php
modules/contrib/eu_cookie_compliance/src/Plugin/ConsentStorageBase.php
modules/contrib/eu_cookie_compliance/src/Plugin/ConsentStorageInterface.php
modules/contrib/eu_cookie_compliance/src/Plugin/ConsentStorageManager.php
modules/contrib/eu_cookie_compliance/src/Plugin/ConsentStorageManagerInterface.php
modules/contrib/eu_cookie_compliance/src/Plugin/EuCcClearCache.php
modules/contrib/eu_cookie_compliance/src/Plugin/migrate/process/EuCookieComplianceExcludePaths.php
modules/contrib/eu_cookie_compliance/src/Plugin/migrate/source/EuCookieCategory.php
modules/contrib/eu_cookie_compliance/src/Plugin/migrate/source/EuCookieComplianceSettings.php
modules/contrib/eu_cookie_compliance/src/Routing/CheckIfEuCountryJs.php
modules/contrib/eu_cookie_compliance/tests/fixtures/drupal7.php
modules/contrib/eu_cookie_compliance/tests/src/Kernel/EuCookieComplianceMigrateTest.php

19 files with changes
=====================

1) modules/contrib/eu_cookie_compliance/src/Plugin/EuCcClearCache.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eu_cookie_compliance\Plugin;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandler;
@@ @@
   /**
    * The MIME type guesser.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The theme extension list.
    *
-   * @var \Drupal\Core\Extension\ThemeExtensionList
+   * @var ThemeExtensionList
    */
   protected $themeExtensionList;

@@ @@
   /**
    * The render cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheRender;

@@ @@
   /**
    * Creates a new VendorFileDownloadController instance.
    *
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The Module handler.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $domain_storage
+   * @param EntityTypeManagerInterface $domain_storage
    *   The domain storage.
-   * @param \Drupal\Core\Extension\ThemeExtensionList $theme_extension_list
+   * @param ThemeExtensionList $theme_extension_list
    *   The theme extension list.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_render
+   * @param CacheBackendInterface $cache_render
    *   The cache interface.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(ModuleHandler $module_handler, LanguageManagerInterface $language_manager, EntityTypeManagerInterface $domain_storage, ThemeExtensionList $theme_extension_list, CacheBackendInterface $cache_render) {
     $this->moduleHandler = $module_handler;
@@ @@
   /**
    * Clear cache.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function clearCache() {
     $languages = $this->languageManager->getLanguages();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/eu_cookie_compliance/src/Plugin/ConsentStorageManagerInterface.php:14

    ---------- begin diff ----------
@@ @@
    * @param array $configuration
    *   Export configuration (aka export options).
    *
-   * @return \Drupal\eu_cookie_compliance\Plugin\ConsentStorageInterface[]
+   * @return ConsentStorageInterface[]
    *   An array of all available eu_cookie_compliance consent plugin instances.
    */
   public function getInstances(array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/eu_cookie_compliance/src/Plugin/ConsentStorageManager.php:21

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/eu_cookie_compliance/src/Plugin/ConsentStorageBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eu_cookie_compliance\Plugin;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\node\Entity\Node;
 use Drupal\Core\Plugin\PluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
    * directly. See \Drupal\Core\Form\ConfigFormBase::config() for an example of
    * this.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory) {
@@ @@
    *   Returns the latest revision ID of the curreny privacy policy node, or
    *   FALSE if no priacy policy exists.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getCurrentPolicyNodeRevision() {
     $config = $this->configFactory->get('eu_cookie_compliance.settings');
@@ @@
     $cookie_policy_drupal_path = \Drupal::service('path_alias.manager')->getPathByAlias($cookie_policy_link, \Drupal::languageManager()->getCurrentLanguage()->getId());
     if (substr($cookie_policy_drupal_path, 0, 6) === '/node/') {
       $node_id = explode('/', $cookie_policy_drupal_path)[2];
-      /** @var \Drupal\node\Entity\Node $node */
+      /** @var Node $node */
       $node = \Drupal::entityTypeManager()->getStorage('node')->load($node_id);

       // Ensure the node has been loaded before accessing any properties.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/eu_cookie_compliance/src/Plugin/ConsentStorage/BasicConsentStorage.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, TimeInterface $time) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/eu_cookie_compliance/src/PersonalInformationFormTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eu_cookie_compliance;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\eu_cookie_compliance\Plugin\ConsentStorageManagerInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\eu_cookie_compliance\Plugin\ConsentStorageBase;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Consent storage manager service.
    *
-   * @var \Drupal\eu_cookie_compliance\Plugin\ConsentStorageManagerInterface
+   * @var ConsentStorageManagerInterface
    */
   protected $consentStorageManager;

@@ @@
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state that accompanies the form.
    */
   public function formInjectGdprCheckbox(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state with the submitted values.
    */
   public function formSubmitGdprCheckbox(array $form, FormStateInterface $form_state) {
@@ @@
    * @param string $config_name
    *   Name of the config to get.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   Config object.
    */
   protected function getConfig($config_name) {
@@ @@
   /**
    * Get active consent storage.
    *
-   * @return null|\Drupal\eu_cookie_compliance\Plugin\ConsentStorageBase
+   * @return null|ConsentStorageBase
    *   Consent storage object or NULL if one is not configured/available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getConsentStorage() {
     $storage_manager = $this->consentStorageManager ? $this->consentStorageManager : \Drupal::service('plugin.manager.eu_cookie_compliance.consent_storage');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/eu_cookie_compliance/src/PersonalInformationFormInterface.php:13

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state that accompanies the form.
    */
   public function formInjectGdprCheckbox(array &$form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state with the submitted values.
    */
   public function formSubmitGdprCheckbox(array $form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/eu_cookie_compliance/src/Form/EuCookieComplianceConfigForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eu_cookie_compliance\Form;

+use Drupal\eu_cookie_compliance\Plugin\ConsentStorageManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\user\Entity\Role;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
   /**
    * The request context.
    *
-   * @var \Drupal\Core\Routing\RequestContext
+   * @var RequestContext
    */
   protected $requestContext;

@@ @@
   /**
    * The role storage.
    *
-   * @var \Drupal\user\RoleStorageInterface
+   * @var RoleStorageInterface
    */
   protected $roleStorage;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The filter format storage.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $filterFormatStorage;

@@ @@
   /**
    * The consent storage.
    *
-   * @var \Drupal\eu_cookie_compliance\Plugin\ConsentStorageManagerInterface
+   * @var ConsentStorageManagerInterface
    */
   protected $consentStorage;

@@ @@
   /**
    * The page cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cachePage;

@@ @@
   /**
    * The bootstraph cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBootstrap;

@@ @@
   /**
    * Constructs an EuCookieComplianceConfigForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator.
-   * @param \Drupal\Core\Routing\RequestContext $request_context
+   * @param RequestContext $request_context
    *   The request context.
-   * @param \Drupal\user\RoleStorageInterface $role_storage
+   * @param RoleStorageInterface $role_storage
    *   The role storage.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The filter format storage.
-   * @param \Drupal\eu_cookie_compliance\Plugin\ConsentStorageManager $consent_storage
+   * @param ConsentStorageManager $consent_storage
    *   The Consent storage.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_bootstrap
+   * @param CacheBackendInterface $cache_bootstrap
    *   The bootstrap cache.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_page
+   * @param CacheBackendInterface $cache_page
    *   The page cache.
    */
   public function __construct(ConfigFactoryInterface $config_factory, PathValidatorInterface $path_validator, RequestContext $request_context, RoleStorageInterface $role_storage, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, ConsentStorageManager $consent_storage, CacheBackendInterface $cache_bootstrap, CacheBackendInterface $cache_page) {
@@ @@
   /**
    * Gets the roles to display in this form.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of role objects.
    */
   protected function getRoles() {
@@ @@
     $consent_storage_options = [];
     $consent_storage_options['do_not_store'] = $this->t('Do not store');
     foreach ($plugin_definitions as $plugin_name => $plugin_definition) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $plugin_definition_name */
+      /** @var TranslatableMarkup $plugin_definition_name */
       $plugin_definition_name = $plugin_definition['name'];
       $consent_storage_options[$plugin_name] = $plugin_definition_name->render();
     }
@@ @@

     foreach ($this->getRoles() as $role_name => $role) {
       // Exclude Admin roles.
-      /** @var \Drupal\user\Entity\Role $role */
+      /** @var Role $role */
       if (!$role->isAdmin()) {
         $role_names[$role_name] = $role->label();
         // Fetch permissions for the roles.
@@ @@
     $allowlist_patterns = Settings::get('config_readonly_whitelist_patterns');

     foreach ($this->getRoles() as $role_name => $role) {
-      /** @var \Drupal\user\Entity\Role $role */
+      /** @var Role $role */
       if (!$role->isAdmin()) {
         $user_settings_allowlisted = !empty($allowlist_patterns) && in_array('user.role.' . $role_name, $allowlist_patterns);
         if (!$readonly_enabled || ($readonly_enabled && $user_settings_allowlisted)) {
@@ @@
    *
    * @param array $element
    *   Element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function validatePopupLink(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/eu_cookie_compliance/src/Form/CookieCategoryForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eu_cookie_compliance\Form;

+use Drupal\eu_cookie_compliance\CategoryStorageManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The Cookie Category Storage Manager.
    *
-   * @var \Drupal\eu_cookie_compliance\CategoryStorageManager
+   * @var CategoryStorageManager
    */
   protected $categoryStorageManager;

@@ @@
   /**
    * EUCC Clear Cache Service.
    *
-   * @var \Drupal\eu_cookie_compliance\Plugin\EuCcClearCache
+   * @var EuCcClearCache
    */
   protected $euccClearCache;

@@ @@
   /**
    * Constructs a CookieCategoryForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
-   * @param \Drupal\eu_cookie_compliance\Plugin\EuCcClearCache $eucc_clear_cache
+   * @param EuCcClearCache $eucc_clear_cache
    *   The EU CC Clear Cache service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EuCcClearCache $eucc_clear_cache) {
     $this->entityTypeManager = $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/eu_cookie_compliance/src/EventSubscriber/EuCookieComplianceConfigEventsSubscriber.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * React to a config object being saved.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   Config crud event.
    */
   public function configSave(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/eu_cookie_compliance/src/CookieCategoryListBuilder.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The entity storage class.
    *
-   * @var \Drupal\eu_cookie_compliance\CategoryStorageManager
+   * @var CategoryStorageManager
    */
   protected $storage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/eu_cookie_compliance/src/Controller/StoreConsent.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Consent Storage.
    *
-   * @var \Drupal\eu_cookie_compliance\Plugin\ConsentStorageManager
+   * @var ConsentStorageManager
    */
   protected $consentStorage;

@@ @@
   /**
    * Constructs the SchemaListenerController object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\eu_cookie_compliance\Plugin\ConsentStorageManager $consent_storage
+   * @param ConsentStorageManager $consent_storage
    *   The consent storage.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConsentStorageManager $consent_storage) {
@@ @@
    * @param string $target
    *   The target.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Result of action.
    */
   public function store($target) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/eu_cookie_compliance/src/Controller/CheckIfEuCountryJsController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * Creates a new VendorFileDownloadController instance.
    *
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The Module handler.
    */
   public function __construct(ModuleHandler $module_handler) {
@@ @@
   /**
    * Check if visitor is in the EU.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Whether the user is in EU.
    */
   public function content() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/eu_cookie_compliance/src/Controller/AdminController.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Whether the user has access.
    */
   public function access(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/eu_cookie_compliance/src/CategoryStorageManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eu_cookie_compliance;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\eu_cookie_compliance\Entity\CookieCategoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;

 /**
@@ @@
   /**
    * Load and return all active cookie categories.
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
+   * @return array|EntityInterface[]
    *   The loaded cookie categories.
    */
   public function getCookieCategories() {
     $categories = [];
-    /** @var \Drupal\eu_cookie_compliance\Entity\CookieCategoryInterface[] $category_entities */
+    /** @var CookieCategoryInterface[] $category_entities */
     $category_entities = $this->loadMultiple();
     foreach ($category_entities as $category_entity) {
       // Added this check to allow people to use domain access to change
@@ @@
    *   The next highest weight.
    */
   public function getCookieCategoryNextWeight() {
-    /** @var \Drupal\eu_cookie_compliance\Entity\CookieCategoryInterface[] $cookies */
+    /** @var CookieCategoryInterface[] $cookies */
     $cookies = $this->loadMultiple();
     $weight = -10;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/eu_cookie_compliance/src/Annotation/ConsentStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eu_cookie_compliance\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the consent storage.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
    *
    * This will be shown when adding or configuring this consent storage.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


17) modules/contrib/eu_cookie_compliance/eu_cookie_compliance.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\RoleInterface;
 /**
  * @file
  * Post update functions for Eu Cookie Compliance.
@@ @@
  * Update permissions keys to standardize permission machine name.
  */
 function eu_cookie_compliance_post_update_permission_keys_to_lowercase() {
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   foreach (Role::loadMultiple() as $role) {
     if ($role->hasPermission('administer EU Cookie Compliance popup')) {
       $role->revokePermission('administer EU Cookie Compliance popup');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


18) modules/contrib/eu_cookie_compliance/eu_cookie_compliance.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Template\TwigEnvironment;
 /**
  * @file
  * The main file for the EU Cookie Compliance module.
@@ @@
   if (!empty($config->get('disabled_javascripts'))) {
     if (is_readable($uri)) {
       if ((float) \Drupal::VERSION < 9.3) {
-        $url = file_url_transform_relative(file_create_url($uri));
+        $url = \Drupal::service('file_url_generator')->generateString($uri);
       }
       else {
         $url = \Drupal::service('file_url_generator')->generateString($uri);
@@ @@
  * @return array
  *   The data needed for the cookie banner.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function eu_cookie_compliance_build_data() {
   $language = Drupal::languageManager()->getCurrentLanguage();
@@ @@
   $was_debugging = FALSE;

   /**
-   * @var Drupal\Core\Template\TwigEnvironment $twig_service
+   * @var TwigEnvironment $twig_service
    */
   $twig_service = Drupal::service('twig');

@@ @@
  */
 function eu_cookie_compliance_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   if ($form_state->getFormObject() instanceof PersonalInformationFormInterface) {
-    /** @var \Drupal\eu_cookie_compliance\PersonalInformationFormInterface $form_object */
+    /** @var PersonalInformationFormInterface $form_object */
     $form_object = $form_state->getFormObject();

     $form_object->formInjectGdprCheckbox($form, $form_state);
@@ @@
  *
  * @param array $element
  *   Element.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form State Interface.
  */
 function eu_cookie_compliance_validate_hex(array $element, FormStateInterface $form_state) {
@@ @@
  */
 function _eu_cookie_compliance_convert_relative_uri(&$element) {
   if ((float) \Drupal::VERSION < 9.3) {
-    $element = preg_replace('/^\//', '', file_url_transform_relative(file_create_url($element)));
+    $element = preg_replace('/^\//', '', \Drupal::service('file_url_generator')->generateString($element));
   }
   else {
     $url = \Drupal::service('file_url_generator')->generateString($element);
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector


19) modules/contrib/eu_cookie_compliance/eu_cookie_compliance.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\eu_cookie_compliance\CategoryStorageManager;
 /**
  * @file
  * Update scripts for the EU Cookie Compliance module.
@@ @@
   $fix_first_cookie_category = $config->get('fix_first_cookie_category');
   $select_all_categories_by_default = $config->get('select_all_categories_by_default');
   $languages = Drupal::languageManager()->getLanguages();
-  /** @var \Drupal\eu_cookie_compliance\CategoryStorageManager $storage */
+  /** @var CategoryStorageManager $storage */
   $storage = Drupal::entityTypeManager()->getStorage('cookie_category');

   $i = 0;
@@ @@
         ->getLanguageConfigOverride($langcode, 'eu_cookie_compliance.settings');
       $cookie_categories = $config_translation->get('cookie_categories');
       $cookie_categories = _eu_cookie_compliance_extract_category_key_label_description($cookie_categories);
-      /** @var \Drupal\eu_cookie_compliance\CategoryStorageManager $storage */
+      /** @var CategoryStorageManager $storage */
       $storage = Drupal::entityTypeManager()->getStorage('cookie_category');

       foreach ($cookie_categories as $machine_name => $category) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 19 files have been changed by Rector                                      

