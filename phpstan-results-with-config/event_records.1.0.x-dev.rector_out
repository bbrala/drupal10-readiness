modules/contrib/event_records/event_records.api.php
modules/contrib/event_records/event_records.module
modules/contrib/event_records/event_records.tokens.inc
modules/contrib/event_records/modules/event_records_custom_data/event_records_custom_data.module
modules/contrib/event_records/modules/event_records_entity/event_records_entity.module
modules/contrib/event_records/modules/event_records_entity/src/EventRecordsEntity.php
modules/contrib/event_records/modules/event_records_field_bundle/event_records_field_bundle.module
modules/contrib/event_records/modules/event_records_node/event_records_node.module
modules/contrib/event_records/modules/event_records_storage/event_records_storage.module
modules/contrib/event_records/modules/event_records_taxonomy/event_records_taxonomy.module
modules/contrib/event_records/src/Entity/EventRecord.php
modules/contrib/event_records/src/Entity/EventRecordType.php
modules/contrib/event_records/src/EventRecordInterface.php
modules/contrib/event_records/src/EventRecordListBuilder.php
modules/contrib/event_records/src/EventRecordTypeInterface.php
modules/contrib/event_records/src/EventRecordTypeListBuilder.php
modules/contrib/event_records/src/EventRecords.php
modules/contrib/event_records/src/Form/EventRecordForm.php
modules/contrib/event_records/src/Form/EventRecordTypeForm.php

15 files with changes
=====================

1) modules/contrib/event_records/src/Form/EventRecordTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\event_records\Form;

+use Drupal\event_records\EventRecordTypeInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\event_records\EventRecordTypeInterface $event_record_type */
+    /** @var EventRecordTypeInterface $event_record_type */
     $event_record_type = $this->entity;
     if ($this->operation == 'add') {
       $form['#title'] = $this->t('Add event record type');
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\event_records\EventRecordTypeInterface $event_record_type */
+    /** @var EventRecordTypeInterface $event_record_type */
     $event_record_type = $this->entity;

     $event_record_type->set('id', trim($event_record_type->id()));
@@ @@
    *   Array of options ready to be used in #options.
    */
   protected function getWorkflowOptions() {
-    /** @var \Drupal\event_records\EventRecordTypeInterface $event_record_type */
+    /** @var EventRecordTypeInterface $event_record_type */
     $event_record_type = $this->entity;
     $workflow_options = [
       'status' => $event_record_type->status(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/event_records/src/Form/EventRecordForm.php:26

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\event_records\EventRecordInterface $entity */
+    /** @var EventRecordInterface $entity */
     $entity = $this->getEntity();
     $entity->get('source')->setValue('form:' . $this->getFormId());
     $result = $entity->save();
@@ @@
    *
    * @param string $entity_type_id
    *   The entity type identifier.
-   * @param \Drupal\event_records\EventRecordInterface $entity
+   * @param EventRecordInterface $entity
    *   The entity updated with the submitted values.
    * @param array $form
    *   The complete form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function applyLabelPattern($entity_type_id, EventRecordInterface $entity, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/event_records/src/EventRecords.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of allowed event categories for a category field.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
+   * @param FieldStorageDefinitionInterface $definition
    *   The according field storage definition.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/event_records/src/EventRecordListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new EventRecordListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\event_records\EventRecordInterface $entity  */
+    /** @var EventRecordInterface $entity  */
     $row['id'] = $entity->id();
     $row['label'] = $entity->toLink();
     $row['uid']['data'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/event_records/src/EventRecordInterface.php:81

    ---------- begin diff ----------
@@ @@
   /**
    * Get the according event record type (i.e. the bundle as object).
    *
-   * @return \Drupal\event_records\EventRecordTypeInterface
+   * @return EventRecordTypeInterface
    *   The event record type as object.
    */
   public function getType(): EventRecordTypeInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/event_records/src/Entity/EventRecord.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\event_records\Entity;

+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@

     uasort($components, 'Drupal\Component\Utility\SortArray::sortByWeightElement');

-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date_formatter = \Drupal::service('date.formatter');
     $time = $this->getCreatedTime() ?: \Drupal::time()->getCurrentTime();
     $description = t('@type on @time by @user', [
@@ @@
       $label_pattern = $this->hasField('label_pattern') ? $this->get('label_pattern')->getString() : $this->label_pattern;
     }
     elseif ($type_id = $this->bundle()) {
-      /** @var \Drupal\event_records\EventRecordTypeInterface $type */
+      /** @var EventRecordTypeInterface $type */
       if ($type = \Drupal::entityTypeManager()->getStorage('event_record_type')->load($type_id)) {
         $label_pattern = $type->getLabelPattern();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/event_records/modules/event_records_taxonomy/event_records_taxonomy.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\event_records\EventRecordTypeInterface;
+use Drupal\event_records\EventRecordInterface;
 /**
  * @file
  * Event Records: Taxonomy operations module file.
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_taxonomy_term'))) {
     return;
   }
@@ @@
     'entity_values' => EventRecordsEntity::toJson($taxonomy_term),
     'entity_taxonomy_term' => [$taxonomy_term],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['term' => $taxonomy_term, 'user' => $user]);
   $event_record->save();
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_taxonomy_term'))) {
     return;
   }
@@ @@
     'entity_original_values' => EventRecordsEntity::toJson($taxonomy_term->original),
     'entity_taxonomy_term' => [$taxonomy_term],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['term' => $taxonomy_term, 'user' => $user]);
   $event_record->save();
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_deleted_taxonomy_term'))) {
     return;
   }
@@ @@
     'entity_langcode' => $taxonomy_term->language()->getId(),
     'entity_values' => EventRecordsEntity::toJson($taxonomy_term),
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['term' => $taxonomy_term, 'user' => $user]);
   $event_record->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


8) modules/contrib/event_records/modules/event_records_storage/event_records_storage.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\event_records\EventRecordTypeInterface;
+use Drupal\event_records\EventRecordInterface;
 /**
  * @file
  * Event Records: Storage Entities module file.
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_storage'))) {
     return;
   }
@@ @@
     'entity_values' => EventRecordsEntity::toJson($storage),
     'entity_storage' => [$storage],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['storage' => $storage, 'user' => $user]);
   $event_record->save();
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_storage'))) {
     return;
   }
@@ @@
     'entity_original_values' => EventRecordsEntity::toJson($storage->original),
     'entity_storage' => [$storage],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['storage' => $storage, 'user' => $user]);
   $event_record->save();
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_deleted_storage'))) {
     return;
   }
@@ @@
     'entity_langcode' => $storage->language()->getId(),
     'entity_values' => EventRecordsEntity::toJson($storage),
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['storage' => $storage, 'user' => $user]);
   $event_record->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/event_records/modules/event_records_node/event_records_node.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\event_records\EventRecordTypeInterface;
+use Drupal\event_records\EventRecordInterface;
 /**
  * @file
  * Event Records: Node operations module file.
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_node'))) {
     return;
   }
@@ @@
     'entity_values' => EventRecordsEntity::toJson($node),
     'entity_node' => [$node],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['node' => $node, 'user' => $user]);
   $event_record->save();
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_node'))) {
     return;
   }
@@ @@
     'entity_original_values' => EventRecordsEntity::toJson($node->original),
     'entity_node' => [$node],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['node' => $node, 'user' => $user]);
   $event_record->save();
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_deleted_node'))) {
     return;
   }
@@ @@
     'entity_langcode' => $node->language()->getId(),
     'entity_values' => EventRecordsEntity::toJson($node),
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['node' => $node, 'user' => $user]);
   $event_record->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


10) modules/contrib/event_records/modules/event_records_field_bundle/event_records_field_bundle.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\event_records\EventRecordTypeInterface;
+use Drupal\event_records\EventRecordInterface;
 /**
  * @file
  * Event Records: Field Bundle operations module file.
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_field_bundle'))) {
     return;
   }
@@ @@
     'entity_values' => EventRecordsEntity::toJson($field_bundle),
     'entity_field_bundle' => [$field_bundle],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['bundle' => $field_bundle, 'user' => $user]);
   $event_record->save();
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_field_bundle'))) {
     return;
   }
@@ @@
     'entity_original_values' => EventRecordsEntity::toJson($field_bundle->original),
     'entity_field_bundle' => [$field_bundle],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['bundle' => $field_bundle, 'user' => $user]);
   $event_record->save();
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_deleted_field_bundle'))) {
     return;
   }
@@ @@
     'entity_langcode' => $field_bundle->language()->getId(),
     'entity_values' => EventRecordsEntity::toJson($field_bundle),
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['bundle' => $field_bundle, 'user' => $user]);
   $event_record->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


11) modules/contrib/event_records/modules/event_records_entity/src/EventRecordsEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\event_records_entity;

+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Symfony\Component\Serializer\Serializer;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\event_records\EventRecordInterface;
@@ @@
   /**
    * Returns a list of entity types for an entity type field.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
+   * @param FieldStorageDefinitionInterface $definition
    *   The according field storage definition.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The according entity, if available.
    *
    * @return array
@@ @@
   /**
    * Returns a list of entity types for an entity type field.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
+   * @param FieldStorageDefinitionInterface $definition
    *   The according field storage definition.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The according entity, if available.
    *
    * @return array
@@ @@
    */
   public static function bundles(FieldStorageDefinitionInterface $definition, ?EntityInterface $entity = NULL): array {
     $etm = \Drupal::entityTypeManager();
-    /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info */
+    /** @var EntityTypeBundleInfoInterface $bundle_info */
     $bundle_info = \Drupal::service('entity_type.bundle.info');
     if ($entity instanceof EventRecordInterface) {
       $type_id = $entity->bundle();
@@ @@
    *   The JSON string.
    */
   public static function toJson(EntityInterface $entity): string {
-    /** @var \Symfony\Component\Serializer\Serializer $serializer */
+    /** @var Serializer $serializer */
     $serializer = \Drupal::service('serializer');
     return $serializer->serialize($entity, 'json', ['json_encode_options' => JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES]);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/event_records/modules/event_records_custom_data/event_records_custom_data.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\event_records\EventRecordTypeInterface;
+use Drupal\event_records\EventRecordInterface;
 /**
  * @file
  * Event Records: Custom Data operations module file.
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_custom_data'))) {
     return;
   }
@@ @@
     'entity_values' => EventRecordsEntity::toJson($custom_data),
     'entity_custom_data' => [$custom_data],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['custom_data' => $custom_data, 'user' => $user]);
   $event_record->save();
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_custom_data'))) {
     return;
   }
@@ @@
     'entity_original_values' => EventRecordsEntity::toJson($custom_data->original),
     'entity_custom_data' => [$custom_data],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['custom_data' => $custom_data, 'user' => $user]);
   $event_record->save();
@@ @@
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());

-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_deleted_custom_data'))) {
     return;
   }
@@ @@
     'entity_langcode' => $custom_data->language()->getId(),
     'entity_values' => EventRecordsEntity::toJson($custom_data),
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['custom_data' => $custom_data, 'user' => $user]);
   $event_record->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


13) modules/contrib/event_records/event_records.tokens.inc:66

    ---------- begin diff ----------
@@ @@

   $token_service = \Drupal::token();

-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $data['event_record'];

   if (isset($options['langcode'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/event_records/event_records.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\event_records\EventRecordInterface;
 /**
  * @file
  * Provides an event record entity type.
@@ @@
  */
 function event_records_theme_suggestions_event_record(array $variables) {
   $suggestions = [];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $variables['elements']['#event_record'];
   $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

@@ @@
  */
 function event_records_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
   if (isset($entity_form['#entity_type']) && $entity_form['#entity_type'] === 'event_record') {
-    /** @var \Drupal\event_records\EventRecordInterface $event_record */
+    /** @var EventRecordInterface $event_record */
     $event_record = $entity_form['#entity'];
     $form_class = $event_record->getEntityType()->getFormClass('default');
     $entity_form['#entity_builders']['apply_label_pattern'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


15) modules/contrib/event_records/event_records.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\event_records\EventRecordInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 /**
  * @file
  * Hooks specific to the Event Records module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Define a string representation for the given event record.
  *
@@ @@
  * In case the hook implementation returns an empty string, a fallback value
  * will be generated, or another module might generate the value.
  *
- * @param \Drupal\event_records\EventRecordInterface $event_record
+ * @param EventRecordInterface $event_record
  *   The event record.
  * @param string $string
  *   The current value of the string representation.
@@ @@
  *
  * @see \Drupal\event_records\EventRecordInterface::getStringRepresentation()
  */
-function hook_event_record_get_string_representation(\Drupal\event_records\EventRecordInterface $event_record, $string) {
+function hook_event_record_get_string_representation(EventRecordInterface $event_record, $string) {
   if ($event_record->isNew()) {
     return 'NEW - ' . $event_record->get('my_custom_field')->value;
   }
@@ @@
  * @param array &$categories
  *   The current list of categories. Keyed by machine name, values are
  *   human-readable and translatable labels.
- * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
+ * @param FieldStorageDefinitionInterface $definition
  *   The according field storage definition.
  */
-function hook_event_record_categories_alter(array &$categories, \Drupal\Core\Field\FieldStorageDefinitionInterface $definition) {
+function hook_event_record_categories_alter(array &$categories, FieldStorageDefinitionInterface $definition) {
   // Add a "bubble" category.
   $categories['bubble'] = t('Bubble');
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 15 files have been changed by Rector                                      

