diff --git a/src/Controller/LingotekEntityController.php b/src/Controller/LingotekEntityController.php
index 0f12119..1d4bdbb 100644
--- a/src/Controller/LingotekEntityController.php
+++ b/src/Controller/LingotekEntityController.php
@@ -17,34 +17,34 @@ class LingotekEntityController extends ControllerBase {
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $contentTranslationService;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs a LingotekControllerBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $content_translation_service
+   * @param LingotekContentTranslationServiceInterface $content_translation_service
    *   The Lingotek content translation service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LingotekContentTranslationServiceInterface $content_translation_service, LanguageLocaleMapperInterface $language_locale_mapper, LoggerInterface $logger) {
diff --git a/src/Controller/LingotekNotificationController.php b/src/Controller/LingotekNotificationController.php
index 01c5158..3da1bd9 100644
--- a/src/Controller/LingotekNotificationController.php
+++ b/src/Controller/LingotekNotificationController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek_copy_source\Controller;
 
+use Drupal\lingotek_copy_source\ProfileService;
+use Drupal\lingotek\Entity\LingotekProfile;
 use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -24,7 +26,7 @@ class LingotekNotificationController extends OriginalLingotekNotificationControl
       return parent::endpoint($request);
     }
 
-    /** @var \Drupal\lingotek_copy_source\ProfileService $profileService */
+    /** @var ProfileService $profileService */
     $profileService = \Drupal::service('lingotek_copy_source.profile_service');
     $translation_service = $this->lingotekContentTranslation;
 
@@ -40,7 +42,7 @@ class LingotekNotificationController extends OriginalLingotekNotificationControl
       // a document has uploaded and imported successfully for document_id
       case 'document_uploaded':
         $entity = $this->getEntity($request->query->get('document_id'));
-        /** @var \Drupal\lingotek\Entity\LingotekProfile $profile */
+        /** @var LingotekProfile $profile */
         $profile = $this->getProfile($entity);
         if ($entity) {
           if ($entity instanceof ConfigEntityInterface) {
@@ -87,7 +89,7 @@ class LingotekNotificationController extends OriginalLingotekNotificationControl
 
       case 'document_updated':
         $entity = $this->getEntity($request->query->get('document_id'));
-        /** @var \Drupal\lingotek\Entity\LingotekProfile $profile */
+        /** @var LingotekProfile $profile */
         $profile = $this->getProfile($entity);
         if ($entity) {
           if ($entity instanceof ConfigEntityInterface) {
diff --git a/src/Form/LingotekManagementFormBulkActions.php b/src/Form/LingotekManagementFormBulkActions.php
index 45c2445..edb79bd 100644
--- a/src/Form/LingotekManagementFormBulkActions.php
+++ b/src/Form/LingotekManagementFormBulkActions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_copy_source\Form;
 
+use Drupal\lingotek_copy_source\ProfileService;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ -15,13 +16,13 @@ class LingotekManagementFormBulkActions {
   /**
    * Request translations for a given content in a given language.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $langcode
    *   The language to download.
    */
   public static function requestTranslation(ContentEntityInterface $entity, $langcode, $job_id, &$context) {
-    /** @var \Drupal\lingotek_copy_source\ProfileService $profileService */
+    /** @var ProfileService $profileService */
     $profileService = \Drupal::service('lingotek_copy_source.profile_service');
     $lingotekConfiguration = \Drupal::service('lingotek.configuration');
     $languageLocaleMapper = \Drupal::service('lingotek.language_locale_mapper');
@@ -85,11 +86,11 @@ class LingotekManagementFormBulkActions {
   /**
    * Request all translations for a given content.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    */
   public static function requestTranslations(ContentEntityInterface $entity, $language, $job_id, &$context) {
-    /** @var \Drupal\lingotek_copy_source\ProfileService $profileService */
+    /** @var ProfileService $profileService */
     $profileService = \Drupal::service('lingotek_copy_source.profile_service');
     $lingotekConfiguration = \Drupal::service('lingotek.configuration');
     $languageLocaleMapper = \Drupal::service('lingotek.language_locale_mapper');
diff --git a/src/Form/LingotekProfileForm.php b/src/Form/LingotekProfileForm.php
index ee541cc..37a2d06 100644
--- a/src/Form/LingotekProfileForm.php
+++ b/src/Form/LingotekProfileForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_copy_source\Form;
 
+use Drupal\lingotek\LingotekProfileInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element;
@@ -16,7 +17,7 @@ class LingotekProfileForm implements ContainerInjectionInterface {
   /**
    * The profile service.
    *
-   * @var \Drupal\lingotek_copy_source\ProfileService
+   * @var ProfileService
    */
   protected $profileService;
 
@@ -37,7 +38,7 @@ class LingotekProfileForm implements ContainerInjectionInterface {
    * Implements hook_form_FORM_ID_alter().
    */
   public function formAlter(&$form, FormStateInterface $form_state, $form_id) {
-    /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
+    /** @var LingotekProfileInterface $profile */
     $profile = $form_state->getFormObject()->getEntity();
     foreach (Element::children($form['language_overrides']) as $langcode) {
       $form['language_overrides'][$langcode]['overrides']['#options']['copy_source'] = $this->t('Copy source');
diff --git a/src/Form/LingotekTranslationForm.php b/src/Form/LingotekTranslationForm.php
index 474a882..42f0d28 100644
--- a/src/Form/LingotekTranslationForm.php
+++ b/src/Form/LingotekTranslationForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_copy_source\Form;
 
+use Drupal\lingotek\LingotekProfileInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -17,14 +18,14 @@ class LingotekTranslationForm implements ContainerInjectionInterface {
   /**
    * The profile service.
    *
-   * @var \Drupal\lingotek_copy_source\ProfileService
+   * @var ProfileService
    */
   protected $profileService;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -49,13 +50,13 @@ class LingotekTranslationForm implements ContainerInjectionInterface {
   public function formAlter(&$form, FormStateInterface $form_state, $form_id) {
     $formStorage = $form_state->getStorage();
     $entity = $formStorage['entity'];
-    /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
+    /** @var LingotekProfileInterface $profile */
     $profile = $this->lingotekConfiguration->getEntityProfile($entity, TRUE);
     foreach ($form['languages']['#options'] as $langcode => $rowData) {
       if ($this->profileService->checkIfCopySource($profile, $langcode)) {
         $links = $rowData[3]['data']['#links'];
         if (isset($links['request translation'])) {
-          /** @var \Drupal\Core\Url $url */
+          /** @var Url $url */
           $url = $form['languages']['#options'][$langcode][3]['data']['#links']['request translation']['url'];
           if ($url) {
             $routeParameters = $url->getRouteParameters();
diff --git a/src/Plugin/Action/RequestAllTranslationsOrCopyLingotekAction.php b/src/Plugin/Action/RequestAllTranslationsOrCopyLingotekAction.php
index 64ad52b..11aa15b 100644
--- a/src/Plugin/Action/RequestAllTranslationsOrCopyLingotekAction.php
+++ b/src/Plugin/Action/RequestAllTranslationsOrCopyLingotekAction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_copy_source\Plugin\Action;
 
+use Drupal\lingotek_copy_source\ProfileService;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ -25,7 +26,7 @@ class RequestAllTranslationsOrCopyLingotekAction extends LingotekContentEntityAc
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -38,11 +39,11 @@ class RequestAllTranslationsOrCopyLingotekAction extends LingotekContentEntityAc
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageLocaleMapperInterface $language_locale_mapper, LingotekContentTranslationServiceInterface $translation_service, LingotekConfigurationServiceInterface $lingotek_configuration) {
@@ -68,7 +69,7 @@ class RequestAllTranslationsOrCopyLingotekAction extends LingotekContentEntityAc
   public function execute($entity = NULL) {
     $result = FALSE;
     $profile = $this->lingotekConfiguration->getEntityProfile($entity, FALSE);
-    /** @var \Drupal\lingotek_copy_source\ProfileService $profileService */
+    /** @var ProfileService $profileService */
     $profileService = \Drupal::service('lingotek_copy_source.profile_service');
     $languageLocaleMapper = \Drupal::service('lingotek.language_locale_mapper');
     $target_languages = \Drupal::languageManager()->getLanguages();
diff --git a/src/Plugin/Action/RequestTranslationOrCopyLingotekAction.php b/src/Plugin/Action/RequestTranslationOrCopyLingotekAction.php
index 42b55e3..9f1d54b 100644
--- a/src/Plugin/Action/RequestTranslationOrCopyLingotekAction.php
+++ b/src/Plugin/Action/RequestTranslationOrCopyLingotekAction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_copy_source\Plugin\Action;
 
+use Drupal\lingotek_copy_source\ProfileService;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Exception\LingotekDocumentArchivedException;
@@ -22,7 +23,7 @@ class RequestTranslationOrCopyLingotekAction extends LingotekContentEntityConfig
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -35,11 +36,11 @@ class RequestTranslationOrCopyLingotekAction extends LingotekContentEntityConfig
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageLocaleMapperInterface $language_locale_mapper, LingotekContentTranslationServiceInterface $translation_service, LingotekConfigurationServiceInterface $lingotek_configuration) {
@@ -64,7 +65,7 @@ class RequestTranslationOrCopyLingotekAction extends LingotekContentEntityConfig
    */
   public function execute($entity = NULL) {
     $result = FALSE;
-    /** @var \Drupal\lingotek_copy_source\ProfileService $profileService */
+    /** @var ProfileService $profileService */
     $profileService = \Drupal::service('lingotek_copy_source.profile_service');
 
     $configuration = $this->getConfiguration();
diff --git a/src/ThemePreprocess.php b/src/ThemePreprocess.php
index c12982b..b2845f2 100644
--- a/src/ThemePreprocess.php
+++ b/src/ThemePreprocess.php
@@ -12,14 +12,14 @@ class ThemePreprocess implements ContainerInjectionInterface {
   /**
    * The profile service.
    *
-   * @var \Drupal\lingotek_copy_source\ProfileService
+   * @var ProfileService
    */
   protected $profileService;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -46,7 +46,7 @@ class ThemePreprocess implements ContainerInjectionInterface {
       $statuses = &$variables['statuses'];
       foreach ($statuses as $langcode => $status) {
         if ($this->profileService->checkIfCopySource($profile, $langcode)) {
-          /** @var \Drupal\Core\Url $url */
+          /** @var Url $url */
           $url = &$statuses[$langcode]['url'];
           if ($url) {
             $routeParameters = $url->getRouteParameters();
diff --git a/tests/src/Functional/Form/LingotekProfileFormTest.php b/tests/src/Functional/Form/LingotekProfileFormTest.php
index 041405d..e259dc2 100644
--- a/tests/src/Functional/Form/LingotekProfileFormTest.php
+++ b/tests/src/Functional/Form/LingotekProfileFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lingotek_copy_source\Functional\Form;
 
+use Drupal\lingotek\LingotekProfileInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\lingotek\Entity\LingotekProfile;
 use Drupal\Tests\lingotek\Functional\Form\IntelligenceMetadataFormTestTrait;
@@ -64,12 +65,15 @@ class LingotekProfileFormTest extends LingotekTestBase {
       'language_overrides[es][custom][workflow]' => 'test_workflow',
       'language_overrides[it][overrides]' => 'copy_source',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
-    $this->assertText(t('The Lingotek profile has been successfully saved.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The Lingotek profile has been successfully saved.'));
 
     // We can edit them.
-    $this->assertLinkByHref("/admin/lingotek/settings/profile/$profile_id/edit");
+    $this->assertSession()->linkByHrefExists("/admin/lingotek/settings/profile/$profile_id/edit");
     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/edit");
 
     $assert_session->optionExists('edit-language-overrides-es-overrides', 'custom');
@@ -87,7 +91,7 @@ class LingotekProfileFormTest extends LingotekTestBase {
     ConfigurableLanguage::createFromLangcode('es')->setThirdPartySetting('lingotek', 'locale', 'es_MX')->save();
     ConfigurableLanguage::createFromLangcode('it')->setThirdPartySetting('lingotek', 'locale', 'it_IT')->save();
 
-    /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
+    /** @var LingotekProfileInterface $profile */
     $profile = LingotekProfile::create([
       'id' => strtolower($this->randomMachineName()),
       'label' => $this->randomString(),
@@ -111,11 +115,11 @@ class LingotekProfileFormTest extends LingotekTestBase {
       'language_overrides[es][custom][workflow]' => 'test_workflow',
       'language_overrides[it][overrides]' => 'copy_source',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/edit");
-    $this->assertNoFieldChecked("edit-auto-upload");
-    $this->assertFieldChecked("edit-auto-download");
+    $this->assertSession()->checkboxNotChecked("edit-auto-upload");
+    $this->assertSession()->checkboxChecked("edit-auto-download");
     $assert_session->optionExists('edit-project', 'default');
     $assert_session->optionExists('edit-vault', 'default');
     $assert_session->optionExists('edit-workflow', 'test_workflow2');
diff --git a/tests/src/Functional/LingotekInterfaceTranslationTest.php b/tests/src/Functional/LingotekInterfaceTranslationTest.php
index 1203e2a..303dd0b 100644
--- a/tests/src/Functional/LingotekInterfaceTranslationTest.php
+++ b/tests/src/Functional/LingotekInterfaceTranslationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lingotek_copy_source\Functional;
 
+use Drupal\lingotek\LingotekInterfaceTranslationServiceInterface;
 use Drupal\Core\Url;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\lingotek\Lingotek;
@@ -75,13 +76,13 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
 
     // Post the form uninstalling the lingotek module.
     $edit = ['uninstall[potx]' => '1'];
-    $this->drupalPostForm(NULL, $edit, 'Uninstall');
+    $this->submitForm($edit, 'Uninstall');
 
     // We get an advice and we can confirm.
     $assert_session->responseContains('The following modules will be completely uninstalled from your site, and <em>all data from these modules will be lost</em>!');
     $assert_session->responseContains('Translation template extractor');
 
-    $this->drupalPostForm(NULL, [], 'Uninstall');
+    $this->submitForm([], 'Uninstall');
 
     $this->goToInterfaceTranslationManagementForm();
 
@@ -95,7 +96,7 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 3;
     $assert_session = $this->assertSession();
@@ -187,7 +188,7 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     $this->assertLingotekInterfaceTranslationRequestTranslationLink($component, 'es_MX');
     $this->clickLink('ES');
     $assert_session->responseContains('Locale \'es_MX\' was added as a translation target for <em class="placeholder">' . $component . '</em>.');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));
 
     // Check status of the Spanish translation.
@@ -231,8 +232,8 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path1 = drupal_get_path('module', 'lingotek_interface_translation_test');
-    $path2 = drupal_get_path('module', 'lingotek_test');
+    $path1 = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
+    $path2 = \Drupal::service('extension.list.module')->getPath('lingotek_test');
     $component1 = $path1;
     $component2 = $path2;
     $indexOfModuleLink1 = 3;
@@ -275,10 +276,10 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     $this->clickLink('ES');
     $assert_session->responseContains('Locale \'es_MX\' was added as a translation target for <em class="placeholder">' . $component1 . '</em>.');
 
-    $this->drupalPostForm(NULL, [], 'Clear Lingotek interface translation metadata');
+    $this->submitForm([], 'Clear Lingotek interface translation metadata');
     $assert_session->responseContains('This will remove the metadata stored about your Lingotek interface translations, so you will need to re-upload those in case you want to translate them.');
 
-    $this->drupalPostForm(NULL, [], 'Clear metadata');
+    $this->submitForm([], 'Clear metadata');
     $assert_session->responseContains('You have cleared the Lingotek metadata for interface translations.');
 
     // Download the Spanish translation.
@@ -308,7 +309,7 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
 
     $this->assertLingotekInterfaceTranslationRequestTranslationLink($component, 'ca_ES');
@@ -344,7 +345,7 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 3;
     $assert_session = $this->assertSession();
@@ -364,10 +365,10 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
 
-    /** @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $translation_service */
+    /** @var LingotekInterfaceTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.interface_translation');
     $source_status = $translation_service->getSourceStatus($component);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The source upload has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The source upload has been marked as error.');
     $this->assertEmpty($translation_service->getLastUploaded($component));
 
     // I can still re-try the upload.
@@ -389,7 +390,7 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 3;
     $assert_session = $this->assertSession();
@@ -412,10 +413,10 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
 
-    /** @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $translation_service */
+    /** @var LingotekInterfaceTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.interface_translation');
     $source_status = $translation_service->getSourceStatus($component);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The source upload has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The source upload has been marked as error.');
 
     // I can still re-try the upload.
     \Drupal::state()
@@ -433,7 +434,7 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 3;
     $assert_session = $this->assertSession();
@@ -475,7 +476,7 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 3;
     $assert_session = $this->assertSession();
@@ -514,7 +515,7 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 3;
     $assert_session = $this->assertSession();
@@ -558,7 +559,7 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 3;
     $assert_session = $this->assertSession();
@@ -592,7 +593,7 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 3;
     $assert_session = $this->assertSession();
@@ -631,7 +632,7 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 3;
     $assert_session = $this->assertSession();
@@ -674,7 +675,7 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 3;
     $assert_session = $this->assertSession();
@@ -688,10 +689,10 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     $this->assertLingotekInterfaceTranslationUploadLink($component);
     $this->clickLink('EN', $indexOfModuleLink);
 
-    /** @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $translation_service */
+    /** @var LingotekInterfaceTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.interface_translation');
     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $translation_service->getSourceStatus($component));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $translation_service->getSourceStatus($component));
 
     $this->goToInterfaceTranslationManagementForm();
 
@@ -715,20 +716,20 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical([], $response['result']['request_translations'], 'No translations have been requested after notification automatically.');
+    $this->assertSame([], $response['result']['request_translations'], 'No translations have been requested after notification automatically.');
 
     $this->goToInterfaceTranslationManagementForm();
 
     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $translation_service->getSourceStatus($component));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $translation_service->getSourceStatus($component));
     // Assert the target is ready for requesting.
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $translation_service->getTargetStatus($component, 'es'));
 
     // Request Spanish manually.
     $this->clickLink('ES');
     // Assert the target is pending.
     $this->goToInterfaceTranslationManagementForm();
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $translation_service->getTargetStatus($component, 'es'));
 
     // Simulate the notification of content successfully translated.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ -755,14 +756,14 @@ class LingotekInterfaceTranslationTest extends LingotekTestBase {
     $this->assertFalse($response['result']['download'], 'No targets have been downloaded after notification automatically.');
 
     $this->goToInterfaceTranslationManagementForm();
-    $this->assertIdentical(Lingotek::STATUS_READY, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_READY, $translation_service->getTargetStatus($component, 'es'));
 
     // Download Spanish manually.
     $this->clickLink('ES');
 
     // Assert the target is downloaded.
     $this->goToInterfaceTranslationManagementForm();
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $translation_service->getTargetStatus($component, 'es'));
   }
 
 }
diff --git a/tests/src/Functional/LingotekNodeBulkTranslationTest.php b/tests/src/Functional/LingotekNodeBulkTranslationTest.php
index 59a1a1b..6b52ed9 100644
--- a/tests/src/Functional/LingotekNodeBulkTranslationTest.php
+++ b/tests/src/Functional/LingotekNodeBulkTranslationTest.php
@@ -104,8 +104,11 @@ class LingotekNodeBulkTranslationTest extends LingotekTestBase {
     $this->assertNoLingotekRequestCopyTranslationLink('it_IT');
 
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));
 
     // There is a link for checking status.
@@ -119,28 +122,40 @@ class LingotekNodeBulkTranslationTest extends LingotekTestBase {
     $this->assertLingotekRequestCopyTranslationLink('it_IT');
 
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');
 
     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));
 
     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');
 
     // Request the Italian translation copy.
     $this->assertLingotekRequestCopyTranslationLink('it_IT');
     $this->clickLink('IT');
-    $this->assertText("Locale 'it_IT' data was copied from source for node Llamas are cool.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Locale 'it_IT' data was copied from source for node Llamas are cool.");
     // Nothing was requested.
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));
 
     // No link for Check status of the Italian translation.
@@ -151,8 +166,11 @@ class LingotekNodeBulkTranslationTest extends LingotekTestBase {
     // We can download the Spanish translation as a regular one.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));
   }
 
@@ -183,8 +201,8 @@ class LingotekNodeBulkTranslationTest extends LingotekTestBase {
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));
 
     // I can check current status.
@@ -194,7 +212,7 @@ class LingotekNodeBulkTranslationTest extends LingotekTestBase {
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
 
     // Request the Italian translation.
     $this->assertNoLingotekRequestTranslationLink('it_IT');
@@ -204,8 +222,8 @@ class LingotekNodeBulkTranslationTest extends LingotekTestBase {
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('it', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.added_target_locale'));
 
     // Check status of the Italian translation is no.
@@ -240,8 +258,8 @@ class LingotekNodeBulkTranslationTest extends LingotekTestBase {
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));
 
     // I can check current status.
@@ -251,7 +269,7 @@ class LingotekNodeBulkTranslationTest extends LingotekTestBase {
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
 
     // Request all translations.
     $this->assertNoLingotekRequestTranslationLink('it_IT');
@@ -263,8 +281,8 @@ class LingotekNodeBulkTranslationTest extends LingotekTestBase {
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));
 
     // Check all statuses.
@@ -294,7 +312,7 @@ class LingotekNodeBulkTranslationTest extends LingotekTestBase {
     if ($destination = $this->getDestination($destination_entity_type_id, $prefix)) {
       $href .= $destination;
     }
-    $this->assertLinkByHref($href);
+    $this->assertSession()->linkByHrefExists($href);
   }
 
   /**
@@ -317,7 +335,7 @@ class LingotekNodeBulkTranslationTest extends LingotekTestBase {
     if ($destination = $this->getDestination($destination_entity_type_id, $prefix)) {
       $href .= $destination;
     }
-    $this->assertNoLinkByHref($href);
+    $this->assertSession()->linkByHrefNotExists($href);
   }
 
   /**
@@ -341,7 +359,7 @@ class LingotekNodeBulkTranslationTest extends LingotekTestBase {
     if ($destination = $this->getDestination($destination_entity_type_id, $prefix)) {
       $href .= $destination;
     }
-    $this->assertNoLinkByHref($href);
+    $this->assertSession()->linkByHrefNotExists($href);
   }
 
 }
diff --git a/tests/src/Functional/LingotekNodeBulkViewsTranslationTest.php b/tests/src/Functional/LingotekNodeBulkViewsTranslationTest.php
index 7d27f56..6d9120a 100644
--- a/tests/src/Functional/LingotekNodeBulkViewsTranslationTest.php
+++ b/tests/src/Functional/LingotekNodeBulkViewsTranslationTest.php
@@ -44,16 +44,16 @@ class LingotekNodeBulkViewsTranslationTest extends LingotekNodeBulkTranslationTe
       $status_target = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and ./a[contains(text(), '" . strtoupper($language) . "')]]");
       // If not found, maybe it didn't have a link.
       if (count($status_target) === 1) {
-        $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+        $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
       }
       else {
         $status_target = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
         if (count($status_target) === 1) {
-          $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+          $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
         }
         else {
           $status_target = $this->xpath("//span[contains(@class,'language-icon')]");
-          $this->assertEqual(count($status_target), 0, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+          $this->assertEquals(count($status_target), 0, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
         }
       }
     }
@@ -61,11 +61,11 @@ class LingotekNodeBulkViewsTranslationTest extends LingotekNodeBulkTranslationTe
       $status_target = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and ./a[contains(text(), '" . strtoupper($language) . "')]]");
       // If not found, maybe it didn't have a link.
       if (count($status_target) === 1) {
-        $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+        $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
       }
       else {
         $status_target = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
-        $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+        $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
       }
     }
   }
diff --git a/tests/src/Functional/LingotekNodeNotificationCallbackTest.php b/tests/src/Functional/LingotekNodeNotificationCallbackTest.php
index 2409a2c..1241125 100644
--- a/tests/src/Functional/LingotekNodeNotificationCallbackTest.php
+++ b/tests/src/Functional/LingotekNodeNotificationCallbackTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\lingotek_copy_source\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
+use Drupal\node\NodeStorageInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Url;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\language\Entity\ContentLanguageSettings;
@@ -25,7 +29,7 @@ class LingotekNodeNotificationCallbackTest extends LingotekTestBase {
   public static $modules = ['block', 'node', 'lingotek_copy_source'];
 
   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -96,13 +100,13 @@ class LingotekNodeNotificationCallbackTest extends LingotekTestBase {
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'custom_profile';
     $this->saveAndPublishNodeForm($edit);
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::load(1);
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $content_translation_service */
+    /** @var LingotekContentTranslationServiceInterface $content_translation_service */
     $content_translation_service = \Drupal::service('lingotek.content_translation');
 
     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
 
     $this->goToContentBulkManagementForm();
 
@@ -126,19 +130,19 @@ class LingotekNodeNotificationCallbackTest extends LingotekTestBase {
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
-    $this->assertIdentical(['it'], $response['result']['copy_source_translations'], 'Italian language has been copied after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['it'], $response['result']['copy_source_translations'], 'Italian language has been copied after notification automatically.');
 
     $this->goToContentBulkManagementForm();
 
     $node = $this->resetStorageCachesAndReloadNode();
 
     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
     // But italian was already copied.
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getTargetStatus($node, 'it'));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getTargetStatus($node, 'it'));
 
     $this->goToContentBulkManagementForm();
 
@@ -171,19 +175,19 @@ class LingotekNodeNotificationCallbackTest extends LingotekTestBase {
     $node = $this->resetStorageCachesAndReloadNode();
 
     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'es'));
   }
 
   /**
    * Resets node and metadata storage caches and reloads the node.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The node.
    */
   protected function resetStorageCachesAndReloadNode() {
-    /** @var \Drupal\node\NodeStorageInterface $node_storage */
+    /** @var NodeStorageInterface $node_storage */
     $node_storage = $this->container->get('entity_type.manager')->getStorage('node');
-    /** @var \Drupal\Core\Entity\EntityStorageInterface; $metadata_storage */
+    /** @var EntityStorageInterface ; $metadata_storage */
     $metadata_storage = $this->container->get('entity_type.manager')
       ->getStorage('lingotek_content_metadata');
 
@@ -191,7 +195,7 @@ class LingotekNodeNotificationCallbackTest extends LingotekTestBase {
     $metadata_storage->resetCache([1]);
     $node_storage->resetCache([1]);
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $node_storage->load(1);
     return $node;
   }
diff --git a/tests/src/Functional/LingotekNodeTranslationTest.php b/tests/src/Functional/LingotekNodeTranslationTest.php
index 73144c4..2d859b3 100644
--- a/tests/src/Functional/LingotekNodeTranslationTest.php
+++ b/tests/src/Functional/LingotekNodeTranslationTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\lingotek_copy_source\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\language\Entity\ContentLanguageSettings;
 use Drupal\lingotek\Entity\LingotekProfile;
@@ -22,7 +24,7 @@ class LingotekNodeTranslationTest extends LingotekTestBase {
   public static $modules = ['block', 'node', 'lingotek_copy_source'];
 
   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -112,34 +114,46 @@ class LingotekNodeTranslationTest extends LingotekTestBase {
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));
 
     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('custom_profile', $used_profile, 'The custom profile was used.');
+    $this->assertSame('custom_profile', $used_profile, 'The custom profile was used.');
 
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status, 'The node has been marked as importing.');
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status, 'The node has been marked as importing.');
 
     // The document should have been uploaded, so let's check the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');
 
     // Request translation but it won't happen.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'it_IT' data was copied from source for node Llamas are cool.");
-    $this->assertIdentical(NULL, \Drupal::state()
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Locale 'it_IT' data was copied from source for node Llamas are cool.");
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.added_target_locale'));
 
     // The content is translated and published.
     $this->clickLink('Llamas are cool', 1);
-    $this->assertText('Llamas are cool');
-    $this->assertText('Llamas are very cool');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Llamas are very cool');
   }
 
   protected function getDestination($entity_type_id = 'node', $prefix = NULL) {
