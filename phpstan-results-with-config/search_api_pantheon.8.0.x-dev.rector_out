modules/contrib/search_api_pantheon/RoboFile.php
modules/contrib/search_api_pantheon/modules/search_api_pantheon_admin/src/Access/AdminAccessCheck.php
modules/contrib/search_api_pantheon/modules/search_api_pantheon_admin/src/Form/PantheonSolrAdminForm.php
modules/contrib/search_api_pantheon/modules/search_api_pantheon_admin/src/Form/PostSolrSchema.php
modules/contrib/search_api_pantheon/modules/search_api_pantheon_examples/search_api_pantheon_examples.module
modules/contrib/search_api_pantheon/search_api_pantheon.install
modules/contrib/search_api_pantheon/search_api_pantheon.module
modules/contrib/search_api_pantheon/src/Commands/Diagnose.php
modules/contrib/search_api_pantheon/src/Commands/Query.php
modules/contrib/search_api_pantheon/src/Commands/Schema.php
modules/contrib/search_api_pantheon/src/Exceptions/PantheonSearchApiException.php
modules/contrib/search_api_pantheon/src/Plugin/SolrConnector/PantheonSolrConnector.php
modules/contrib/search_api_pantheon/src/Services/Endpoint.php
modules/contrib/search_api_pantheon/src/Services/PantheonGuzzle.php
modules/contrib/search_api_pantheon/src/Services/SchemaPoster.php
modules/contrib/search_api_pantheon/src/Services/SolariumClient.php
modules/contrib/search_api_pantheon/src/Solarium/EventDispatcher/EventProxy.php
modules/contrib/search_api_pantheon/src/Solarium/EventDispatcher/Psr14Bridge.php
modules/contrib/search_api_pantheon/src/Traits/EndpointAwareTrait.php
modules/contrib/search_api_pantheon/tests/Unit/EndpointServiceTest.php
modules/contrib/search_api_pantheon/tests/Unit/GuzzleClassTest.php
modules/contrib/search_api_pantheon/tests/Unit/SchemaPosterTest.php
modules/contrib/search_api_pantheon/tests/bootstrap.php

17 files with changes
=====================

1) modules/contrib/search_api_pantheon/tests/Unit/SchemaPosterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_pantheon\tests\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use PHPCouchDB\Server;
 use GuzzleHttp\Client;
 use GuzzleHttp\HandlerStack;
@@ @@
   /**
    * The Logger Factory service mock.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface|mixed|\PHPUnit\Framework\MockObject\MockObject
+   * @var LoggerChannelFactoryInterface|mixed|MockObject
    */
   protected LoggerChannelFactoryInterface $loggerFactory;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);

-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);

     $this->loggerFactory
       ->expects($this->any())
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/search_api_pantheon/tests/Unit/GuzzleClassTest.php:23

    ---------- begin diff ----------
@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);

-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);

     $this->loggerFactory
       ->expects($this->any())
@@ @@
    * Test the Pantheon Guzzle Client.
    *
    * @test
+   * @doesNotPerformAssertions
    */
   public function testGuzzleClient() {
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/search_api_pantheon/src/Traits/EndpointAwareTrait.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The endpoint in question.
    *
-   * @var \Drupal\search_api_pantheon\Services\Endpoint
+   * @var Endpoint
    */
   protected Endpoint $endpoint;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/search_api_pantheon/src/Solarium/EventDispatcher/Psr14Bridge.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_pantheon\Solarium\EventDispatcher;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Psr\EventDispatcher\EventDispatcherInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * A helper to decorate the legacy EventDispatcherInterface::dispatch().
@@ @@
 final class Psr14Bridge extends ContainerAwareEventDispatcher implements EventDispatcherInterface {

   /**
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $dispatcher;

@@ @@

   public function dispatch($event, Event $null = NULL) {
     if (\is_object($event)) {
-      return $this->dispatcher->dispatch(\get_class($event), new EventProxy($event));
+      return $this->dispatcher->dispatch(new EventProxy($event), \get_class($event));
     }
     return $this->dispatcher->dispatch($event, $null);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/search_api_pantheon/src/Solarium/EventDispatcher/EventProxy.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_pantheon\Solarium\EventDispatcher;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * A proxy for events defined by symfony contracts to be used with older Drupal.
@@ @@
  */
 class EventProxy extends Event {
   /**
-   * @var \Symfony\Contracts\EventDispatcher\Event
+   * @var Event
    */
   protected $event;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/search_api_pantheon/src/Services/SolariumClient.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * Always use the default endpoint.
    *
-   * @param \Solarium\Core\Query\QueryInterface $query
+   * @param QueryInterface $query
    * @param \Solarium\Core\Client\Endpoint|string|null $endpoint
    *
-   * @return \Solarium\Core\Query\Result\ResultInterface
+   * @return ResultInterface
    */
   public function execute(QueryInterface $query, $endpoint = NULL): ResultInterface {
     return parent::execute($query, $this->defaultEndpoint);
@@ @@
   /**
    * Always use the default endpoint.
    *
-   * @param \Solarium\Core\Client\Request $request
+   * @param Request $request
    * @param \Solarium\Core\Client\Endpoint|string|null $endpoint
    *
-   * @return \Solarium\Core\Client\Response
+   * @return Response
    */
   public function executeRequest(Request $request, $endpoint = NULL): Response {
     return parent::executeRequest($request, $this->defaultEndpoint);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/search_api_pantheon/src/Services/SchemaPoster.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_pantheon\Services;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api_solr\SearchApiSolrException;
+use Drupal\search_api\ServerInterface;
 use Drupal\Component\FileSystem\FileSystem;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
    * @return array
    *   Array of response messages.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\search_api\SearchApiException
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws SearchApiException
+   * @throws SearchApiSolrException
    */
   public function postSchema(string $server_id): array {
     // PANTHEON Environment.
@@ @@
    * @param array $schemaFiles
    *   A key => value paired array of filenames => file_contents.
    *
-   * @return \Psr\Http\Message\ResponseInterface|null
+   * @return ResponseInterface|null
    *   A PSR-7 response object from the API call.
    */
   public function uploadSchemaFiles(array $schemaFiles): ?ResponseInterface {
@@ @@
    * @throws \Drupal\search_api\SearchApiException
    * @throws \Drupal\search_api_solr\SearchApiSolrException
    */
-    // @codingStandardsIgnoreLine
-
+  // @codingStandardsIgnoreLine
   /**
    * Get the schema and config files for posting on the solr server.
    *
@@ @@
    * @return array
    *   Array of key-value pairs: 'filename' => 'file contents'.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\search_api\SearchApiException
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws PluginNotFoundException
+   * @throws SearchApiException
+   * @throws SearchApiSolrException
    * @throws \Exception
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function getSolrFiles(string $server_id = 'pantheon_solr8') {
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->entityTypeManager
       ->getStorage('search_api_server')
       ->load($server_id);
@@ @@
   /**
    * Get Logger Instance.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   Drupal's Logger Interface.
    */
   public function getLogger() {
@@ @@
   /**
    * Set Logger Instance.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Drupal's Logger Interface.
    */
   public function setLogger(LoggerInterface $logger): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/search_api_pantheon/src/Services/PantheonGuzzle.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_pantheon\Services;

+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\search_api_pantheon\Traits\EndpointAwareTrait;
 use GuzzleHttp\Client;
 use GuzzleHttp\Handler\CurlHandler;
@@ @@
   /**
    * Send a guzzle request.
    *
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *   A PSR 7 request.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   Response from the guzzle send.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function sendRequest(RequestInterface $request): ResponseInterface {
     return $this->send($request);
@@ @@
   /**
    * Get a PSR adapter interface based on this class.
    *
-   * @return \Solarium\Core\Client\Adapter\AdapterInterface
+   * @return AdapterInterface
    *   The interface in question.
    */
   public function getPsr18Adapter(): AdapterInterface {
@@ @@
   /**
    * Request Middleware Callback.
    *
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *
-   * @return \Psr\Http\Message\RequestInterface
+   * @return RequestInterface
    */
   public function requestUriAlterForPantheonEnvironment(RequestInterface $request) {
     $toAdd = '';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/search_api_pantheon/src/Services/Endpoint.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_pantheon\Services;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\search_api\ServerInterface;
+use Solarium\Exception\UnexpectedValueException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\search_api_pantheon\Plugin\SolrConnector\PantheonSolrConnector;
 use Drupal\search_api_solr\SolrConnectorInterface;
@@ @@
    * @param array $options
    *   Array of options for the endpoint. Currently,
    *   they are used by other functions of the endpoint.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $options, EntityTypeManagerInterface $entityTypeManager) {
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $entityTypeManager->getStorage('search_api_server')->load(self::DEFAULT_NAME);
     $timeout_config = [];
     if ($server) {
@@ @@
    * @return string
    *   Get the base URI for the Endpoint plus plath and the core vars.
    *
-   * @throws \Solarium\Exception\UnexpectedValueException
+   * @throws UnexpectedValueException
    */
   public function getCoreBaseUri(): string {
     return vsprintf(
@@ @@
    * @return string
    *   Base v1 URi for the endpoint.
    *
-   * @throws \Solarium\Exception\UnexpectedValueException
+   * @throws UnexpectedValueException
    */
   public function getV1BaseUri(): string {
     return isset($_ENV['PANTHEON_ENVIRONMENT'])
@@ @@
    * @return string
    *   V2 base URI for the endpoint.
    *
-   * @throws \Solarium\Exception\UnexpectedValueException
+   * @throws UnexpectedValueException
    */
   public function getV2BaseUri(): string {
     return $this->getBaseUri() . '/api/';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/search_api_pantheon/src/Plugin/SolrConnector/PantheonSolrConnector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_pantheon\Plugin\SolrConnector;

+use Drupal\search_api\Plugin\ConfigurablePluginBase;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\search_api_solr\SearchApiSolrException;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ @@
   /**
    * The PantheonGuzzle service.
    *
-   * @var \Drupal\search_api_pantheon\Services\PantheonGuzzle
+   * @var PantheonGuzzle
    */
   protected PantheonGuzzle $pantheonGuzzle;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    *
-   * @return \Drupal\search_api\Plugin\ConfigurablePluginBase|\Drupal\search_api_pantheon\Plugin\SolrConnector\PantheonSolrConnector|static
+   * @return ConfigurablePluginBase|\Drupal\search_api_pantheon\Plugin\SolrConnector\PantheonSolrConnector|static
    * @throws \Exception
    */
   public static function create(
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function validateConfigurationForm(
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function submitConfigurationForm(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function adjustTimeout(int $seconds, string $timeout = self::QUERY_TIMEOUT, ?Endpoint &$endpoint = NULL): int {
     $this->connect();
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws SearchApiSolrException
    */
   public function viewSettings() {
     $view_settings = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/search_api_pantheon/src/Commands/Schema.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_pantheon\Commands;

+use Psr\Http\Client\ClientExceptionInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelTrait;
 use Drupal\search_api_pantheon\Plugin\SolrConnector\PantheonSolrConnector;
@@ @@
   /**
    * Configured pantheon-solr-specific guzzle client.
    *
-   * @var \Drupal\search_api_pantheon\Services\PantheonGuzzle
+   * @var PantheonGuzzle
    */
   private PantheonGuzzle $pantheonGuzzle;

@@ @@
   /**
    * Configured pantheon-solr-specific schema poster class.
    *
-   * @var \Drupal\search_api_pantheon\Services\SchemaPoster
+   * @var SchemaPoster
    */
   private SchemaPoster $schemaPoster;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\PantheonGuzzle $pantheonGuzzle
+   * @param PantheonGuzzle $pantheonGuzzle
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\SchemaPoster $schemaPoster
+   * @param SchemaPoster $schemaPoster
    *   Injected by Container.
    */
   public function __construct(
@@ @@
    * @usage search-api-pantheon:view-schema elevate.xml
    *
    * @throws \Exception
-   * @throws \Psr\Http\Client\ClientExceptionInterface
+   * @throws ClientExceptionInterface
    */
   public function viewSchema(string $filename = 'schema.xml') {
     $currentSchema = $this->schemaPoster->viewSchema($filename);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/search_api_pantheon/src/Commands/Query.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_pantheon\Commands;

+use Drupal\search_api_solr\SearchApiSolrException;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\search_api_pantheon\Services\Endpoint;
 use Drupal\search_api_pantheon\Services\PantheonGuzzle;
@@ @@
   /**
    * Class Constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\PantheonGuzzle $pantheonGuzzle
+   * @param PantheonGuzzle $pantheonGuzzle
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\Endpoint $endpoint
+   * @param Endpoint $endpoint
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\SolariumClient $solariumClient
+   * @param SolariumClient $solariumClient
    *   Injected by container.
    */
   public function __construct(
@@ @@
    *
    * @aliases saps
    *
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws SearchApiSolrException
    * @throws \JsonException
    * @throws \Exception
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/search_api_pantheon/src/Commands/Diagnose.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_pantheon\Commands;

+use Drupal\search_api_solr\SearchApiSolrException;
+use Solarium\QueryType\Ping\Result;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\search_api_pantheon\Services\Endpoint;
 use Drupal\search_api_pantheon\Services\PantheonGuzzle;
@@ @@
   /**
    * Class Constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\PantheonGuzzle $pantheonGuzzle
+   * @param PantheonGuzzle $pantheonGuzzle
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\Endpoint $endpoint
+   * @param Endpoint $endpoint
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\SolariumClient $solariumClient
+   * @param SolariumClient $solariumClient
    *   Injected by container.
    */
   public function __construct(
@@ @@
    * @command search-api-pantheon:diagnose
    * @aliases sapd
    *
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws SearchApiSolrException
    * @throws \JsonException
    * @throws \Exception
    */
@@ @@
    * @command search-api-pantheon:ping
    * @aliases sapp
    *
-   * @return \Solarium\Core\Query\Result\ResultInterface|\Solarium\QueryType\Ping\Result|void
+   * @return ResultInterface|Result|void
    *   The result.
    */
   public function pingSolrHost() {
@@ @@
   /**
    * Indexes a single item.
    *
-   * @return \Solarium\Core\Query\Result\ResultInterface|\Solarium\QueryType\Update\Result
+   * @return ResultInterface|\Solarium\QueryType\Update\Result
    *   The result.
    */
   protected function indexSingleItem() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/search_api_pantheon/modules/search_api_pantheon_admin/src/Form/PostSolrSchema.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The PantheonGuzzle service.
    *
-   * @var \Drupal\search_api_pantheon\Services\SchemaPoster
+   * @var SchemaPoster
    */
   protected SchemaPoster $schemaPoster;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/search_api_pantheon/modules/search_api_pantheon_admin/src/Form/PantheonSolrAdminForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The PantheonGuzzle service.
    *
-   * @var \Drupal\search_api_pantheon\Services\PantheonGuzzle
+   * @var PantheonGuzzle
    */
   protected PantheonGuzzle $pantheonGuzzle;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/search_api_pantheon/modules/search_api_pantheon_admin/src/Access/AdminAccessCheck.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * A custom access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
-   * @param \Drupal\search_api\ServerInterface|null $search_api_server
+   * @param ServerInterface|null $search_api_server
    *   (optional) The Search API server entity.
    */
   public function access(AccountInterface $account, ServerInterface $search_api_server = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/search_api_pantheon/RoboFile.php:171

    ---------- begin diff ----------
@@ @@
    * @param string $site_name
    *  The machine name of the site to create.
    *
-   * @return \Robo\Result
+   * @return Result
    */
   public function testCreateSite(string $site_name, array $options = ['org' => NULL]) {
     $site_info = $this->siteInfo($site_name);
@@ @@
    * @param string $site_name
    *   The machine name of the site to clone.
    *
-   * @return \Robo\Result
+   * @return Result
    */
   public function testCloneSite(string $site_name) {
     if (!is_dir($this->getSiteFolder($site_name))) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 17 files have been changed by Rector                                      

