modules/contrib/twitter_profile_widget/src/Authorization.php
modules/contrib/twitter_profile_widget/src/EventSubscriber/TwitterWidgetSubscriber.php
modules/contrib/twitter_profile_widget/src/Form/SettingsForm.php
modules/contrib/twitter_profile_widget/src/Plugin/Field/FieldFormatter/TwitterWidgetFormatter.php
modules/contrib/twitter_profile_widget/src/Plugin/Field/FieldType/TwitterWidgetItem.php
modules/contrib/twitter_profile_widget/src/Plugin/Field/FieldWidget/TwitterWidgetWidget.php
modules/contrib/twitter_profile_widget/src/TwitterProfile.php
modules/contrib/twitter_profile_widget/src/TwitterProfileInterface.php
modules/contrib/twitter_profile_widget/tests/src/Unit/TwitterProfileTest.php
modules/contrib/twitter_profile_widget/twitter_profile_widget.install
modules/contrib/twitter_profile_widget/twitter_profile_widget.module

3 files with changes
====================

1) modules/contrib/twitter_profile_widget/src/Plugin/Field/FieldWidget/TwitterWidgetWidget.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Configuration Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config_factory service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, MessengerInterface $messenger, ConfigFactory $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/twitter_profile_widget/src/EventSubscriber/TwitterWidgetSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\twitter_profile_widget\EventSubscriber;

+use Drupal\Core\Config\Config;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
 use Drupal\Core\PageCache\RequestPolicyInterface;
 use Drupal\Core\PageCache\ResponsePolicyInterface;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

@@ @@
   /**
    * The language manager object for retrieving the correct language code.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * A config object for the system performance configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * A policy rule determining the cacheability of a request.
    *
-   * @var \Drupal\Core\PageCache\RequestPolicyInterface
+   * @var RequestPolicyInterface
    */
   protected $requestPolicy;

@@ @@
   /**
    * A policy rule determining the cacheability of the response.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicyInterface
+   * @var ResponsePolicyInterface
    */
   protected $responsePolicy;

@@ @@
   /**
    * The cache contexts manager service.
    *
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager
+   * @var CacheContextsManager
    */
   protected $cacheContexts;

@@ @@
   /**
    * Constructs a TwitterWidgetSubscriber object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager object for retrieving the correct language code.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
-   * @param \Drupal\Core\PageCache\RequestPolicyInterface $request_policy
+   * @param RequestPolicyInterface $request_policy
    *   A policy rule determining the cacheability of a request.
-   * @param \Drupal\Core\PageCache\ResponsePolicyInterface $response_policy
+   * @param ResponsePolicyInterface $response_policy
    *   A policy rule determining the cacheability of a response.
-   * @param \Drupal\Core\Cache\Context\CacheContextsManager $cache_contexts_manager
+   * @param CacheContextsManager $cache_contexts_manager
    *   The cache contexts manager service.
    * @param bool $http_response_debug_cacheability_headers
    *   (optional) Whether to send cacheability headers for debugging purposes.
@@ @@
   /**
    * Sets extra headers on successful responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {

     $request = $event->getRequest();
     $response = $event->getResponse();
@@ @@
    *
    * This overrides the default logic provided by Internal Page Cache.
    *
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   A response object.
    */
   protected function setExpiresCacheLifetime(Response $response) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/twitter_profile_widget/src/Authorization.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\twitter_profile_widget;

+use function GuzzleHttp\Psr7\str;
 use Drupal\Core\Cache\Cache;
 use GuzzleHttp\Client;
 use GuzzleHttp\Psr7;
@@ @@
       if ($e->hasResponse()) {
         $messenger = \Drupal::messenger();
         $messenger->addMessage($e->getResponse()->getBody()->getContents(), 'error');
-        \Drupal::logger('twitter_profile_widget')->error(Psr7\str($e->getResponse()));
+        \Drupal::logger('twitter_profile_widget')->error(str($e->getResponse()));
         return FALSE;
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 3 files have been changed by Rector                                       

