diff --git a/ipless.api.php b/ipless.api.php
index 1b649a7..b8f5e64 100644
--- a/ipless.api.php
+++ b/ipless.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Asset\AttachedAssetsInterface;
 /**
  * @file
  * Hooks for the ipless module.
@@ -16,7 +17,7 @@
  * @param array $less
  *   Less information.
  */
-function hook_less_alter(array $less, \Drupal\Core\Asset\AttachedAssetsInterface $assets){
+function hook_less_alter(array $less, AttachedAssetsInterface $assets){
 
 }
 
diff --git a/ipless.module b/ipless.module
index bb387ee..4b47995 100644
--- a/ipless.module
+++ b/ipless.module
@@ -74,7 +74,7 @@ function ipless_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  * Implements hook_page_attachments().
  */
 function ipless_page_attachments(array &$attachments) {
-  /** @var \Drupal\ipless\Ipless $ipless */
+  /** @var Ipless $ipless */
   $ipless = \Drupal::service('ipless.base');
   if ($ipless->isWatchModeEnable()) {
     $attachments['#attached']['library'][] = 'ipless/ipless.watching';
diff --git a/src/Asset/AssetRenderer.php b/src/Asset/AssetRenderer.php
index 9cd58e7..dc86aa6 100644
--- a/src/Asset/AssetRenderer.php
+++ b/src/Asset/AssetRenderer.php
@@ -35,77 +35,77 @@ class AssetRenderer implements AssetRendererInterface {
   /**
    * Theme Handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * Library Discovery
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;
 
   /**
    * Theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * Config Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Less Asset Resolver.
    *
-   * @var \Drupal\ipless\Asset\AssetResolverInterface
+   * @var AssetResolverInterface
    */
   protected $assetResolver;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The current User.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * AssetRenderer constructor.
    *
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   Theme Handler service.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   Library discover service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   Theme manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\ipless\Asset\AssetResolverInterface $asset_resolver
+   * @param AssetResolverInterface $asset_resolver
    *   Asset resolver service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system service.
    */
   public function __construct(ThemeHandlerInterface $theme_handler, LibraryDiscoveryInterface $library_discovery, ThemeManagerInterface $theme_manager, ConfigFactoryInterface $config_factory, AssetResolverInterface $asset_resolver, EventDispatcherInterface $event_dispatcher, AccountProxyInterface $currentUser, FileSystemInterface $fileSystem) {
@@ -185,7 +185,7 @@ class AssetRenderer implements AssetRendererInterface {
       $less->parseFile($file, $path);
 
       $event = new IplessCompilationEvent($this);
-      $this->eventDispatcher->dispatch(IplessEvents::LESS_FILE_COMPILED, $event);
+      $this->eventDispatcher->dispatch($event, IplessEvents::LESS_FILE_COMPILED);
 
       $this->preparePath($output);
       file_put_contents($output, $less->getCss());
diff --git a/src/Asset/AssetResolver.php b/src/Asset/AssetResolver.php
index 642ff40..de08dd1 100644
--- a/src/Asset/AssetResolver.php
+++ b/src/Asset/AssetResolver.php
@@ -55,7 +55,9 @@ class AssetResolver extends AssetResolverDefault implements AssetResolverInterfa
             $extension_type = 'theme';
           }
 
-          $path = drupal_get_path($extension_type, $extension);
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+          $path = \Drupal::service('extension.path.resolver')->getPath($extension_type, $extension);
           $pathinfo = pathinfo($file);
 
           $options['data'] = $path . '/' . $file;
diff --git a/src/Asset/AssetResolverInterface.php b/src/Asset/AssetResolverInterface.php
index d41a494..4ff691f 100644
--- a/src/Asset/AssetResolverInterface.php
+++ b/src/Asset/AssetResolverInterface.php
@@ -12,7 +12,7 @@ interface AssetResolverInterface {
   /**
    * Returns the CSS assets for the current response's libraries.
    *
-   * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets
+   * @param AttachedAssetsInterface $assets
    *   The assets containing less declaration.
    */
   public function getLessAssets(AttachedAssetsInterface $assets);
diff --git a/src/Commands/IplessCommands.php b/src/Commands/IplessCommands.php
index b5fefc7..7343522 100644
--- a/src/Commands/IplessCommands.php
+++ b/src/Commands/IplessCommands.php
@@ -13,14 +13,14 @@ class IplessCommands extends DrushCommands {
   /**
    * Ipless service.
    *
-   * @var \Drupal\ipless\Ipless
+   * @var Ipless
    */
   protected $ipless;
 
   /**
    * IplessCommands constructor.
    *
-   * @param \Drupal\ipless\Ipless $ipless
+   * @param Ipless $ipless
    *   Ipless service.
    */
   public function __construct(Ipless $ipless) {
diff --git a/src/Controller/IplessController.php b/src/Controller/IplessController.php
index ae1f601..5ec2770 100644
--- a/src/Controller/IplessController.php
+++ b/src/Controller/IplessController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ipless\Controller;
 
+use Drupal\ipless\Ipless;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Controller\ControllerBase;
@@ -17,14 +18,14 @@ use Symfony\Component\HttpFoundation\Request;
 class IplessController extends ControllerBase {
 
   /**
-   * @var \Drupal\ipless\Ipless
+   * @var Ipless
    */
   protected $ipless;
 
   /**
    * IplessController constructor.
    *
-   * @param \Drupal\ipless\IplessInterface $ipless
+   * @param IplessInterface $ipless
    */
   public function __construct(IplessInterface $ipless) {
     $this->ipless = $ipless;
@@ -50,9 +51,9 @@ class IplessController extends ControllerBase {
   /**
    * Route callback. This route is used by the watch mode script.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function watching(Request $request) {
 
diff --git a/src/Event/IplessCompilationEvent.php b/src/Event/IplessCompilationEvent.php
index 30017f3..2cb2930 100644
--- a/src/Event/IplessCompilationEvent.php
+++ b/src/Event/IplessCompilationEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\ipless\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\ipless\Asset\AssetRenderer;
 
 /**
@@ -15,14 +15,14 @@ class IplessCompilationEvent extends Event {
   /**
    * Less AssetRenderer.
    *
-   * @var \Drupal\ipless\Asset\AssetRenderer
+   * @var AssetRenderer
    */
   protected $assetRender;
 
   /**
    * The constructor.
    *
-   * @param \Drupal\ipless\Asset\AssetRenderer $asset_renderer
+   * @param AssetRenderer $asset_renderer
    *   Less AssetRenderer.
    */
   public function __construct(AssetRenderer $asset_renderer) {
diff --git a/src/Event/IplessEvents.php b/src/Event/IplessEvents.php
index b4e5bce..6a00877 100644
--- a/src/Event/IplessEvents.php
+++ b/src/Event/IplessEvents.php
@@ -2,14 +2,12 @@
 
 namespace Drupal\ipless\Event;
 
-use Symfony\Component\EventDispatcher\Event;
-
 /**
  * Class event IplessEvent
  *
  * @author Damien LAGUERRE
  */
-final class IplessEvents extends Event {
+final class IplessEvents extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Name of the event fired when a less file is compiled.
diff --git a/src/EventSubscriber/HtmlResponseIplessSubscriber.php b/src/EventSubscriber/HtmlResponseIplessSubscriber.php
index 176bc96..16dc891 100644
--- a/src/EventSubscriber/HtmlResponseIplessSubscriber.php
+++ b/src/EventSubscriber/HtmlResponseIplessSubscriber.php
@@ -3,10 +3,10 @@
 
 namespace Drupal\ipless\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\ipless\Asset\AssetResolverInterface;
 use Drupal\ipless\IplessInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
@@ -19,19 +19,19 @@ use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 class HtmlResponseIplessSubscriber implements EventSubscriberInterface {
 
   /**
-   * @var \Drupal\ipless\IplessInterface
+   * @var IplessInterface
    */
   protected $ipless;
 
   /**
-   * @var \Drupal\ipless\Asset\AssetResolverInterface
+   * @var AssetResolverInterface
    */
   protected $assetResolver;
 
   /**
    * HtmlResponseIplessSubscriber constructor.
    *
-   * @param \Drupal\ipless\IplessInterface $ipless
+   * @param IplessInterface $ipless
    */
   public function __construct(IplessInterface $ipless, AssetResolverInterface $assetResolver) {
     $this->ipless        = $ipless;
@@ -51,10 +51,10 @@ class HtmlResponseIplessSubscriber implements EventSubscriberInterface {
   /**
    * Generate Less files.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     $response = $event->getResponse();
 
     if (!$response instanceof HtmlResponse || !$this->ipless->isEnabled()) {
diff --git a/src/Form/IpLessSettingForm.php b/src/Form/IpLessSettingForm.php
index d6634ad..3868bf4 100644
--- a/src/Form/IpLessSettingForm.php
+++ b/src/Form/IpLessSettingForm.php
@@ -19,7 +19,7 @@ class IpLessSettingForm {
    * Form Callback : Check settings.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public static function checkSettings(array &$form, FormStateInterface $form_state) {
     $config = \Drupal::service('config.factory')
diff --git a/src/Ipless.php b/src/Ipless.php
index 46cebe8..f80032a 100644
--- a/src/Ipless.php
+++ b/src/Ipless.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ipless;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Asset\AttachedAssets;
 use Drupal\Core\Asset\LibraryDiscoveryInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -23,51 +24,51 @@ class Ipless implements IplessInterface {
   use MessengerTrait;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
-   * @var \Drupal\ipless\Asset\AssetRendererInterface
+   * @var AssetRendererInterface
    */
   protected $assetRenderer;
 
   /**
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Ipless constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\ipless\Asset\AssetRendererInterface $assetRenderer
+   * @param ConfigFactoryInterface $configFactory
+   * @param MessengerInterface $messenger
+   * @param AssetRendererInterface $assetRenderer
    */
   public function __construct(ConfigFactoryInterface $configFactory, MessengerInterface $messenger, AssetRendererInterface $assetRenderer, LibraryDiscoveryInterface $libraryDiscovery, ModuleHandlerInterface $moduleHandler, ThemeHandlerInterface $themeHandler, FileSystemInterface $fileSystem, StateInterface $state) {
     $this->configFactory    = $configFactory;
