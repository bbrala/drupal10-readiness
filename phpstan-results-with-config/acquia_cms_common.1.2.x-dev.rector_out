modules/contrib/acquia_cms_common/acquia_cms_common.module
modules/contrib/acquia_cms_common/src/AcmsModulesUninstallValidator.php
modules/contrib/acquia_cms_common/src/AcquiaCmsCommonServiceProvider.php
modules/contrib/acquia_cms_common/src/Commands/AcmsCommands.php
modules/contrib/acquia_cms_common/src/Commands/AcmsConfigImportCommands.php
modules/contrib/acquia_cms_common/src/Commands/Hooks.php
modules/contrib/acquia_cms_common/src/Commands/ToggleModules.php
modules/contrib/acquia_cms_common/src/Controller/CustomHttp4xxController.php
modules/contrib/acquia_cms_common/src/EventSubscriber/ConfigEventsSubscriber.php
modules/contrib/acquia_cms_common/src/Facade/MetatagFacade.php
modules/contrib/acquia_cms_common/src/Facade/SitemapFacade.php
modules/contrib/acquia_cms_common/src/Facade/WorkbenchEmailFacade.php
modules/contrib/acquia_cms_common/src/Facade/WorkflowFacade.php
modules/contrib/acquia_cms_common/src/Plugin/views/area/MainListingPagesView.php
modules/contrib/acquia_cms_common/src/ProxyClass/AcmsModulesUninstallValidator.php
modules/contrib/acquia_cms_common/src/Routing/RouteSubscriber.php
modules/contrib/acquia_cms_common/src/Services/AcmsUtilityService.php
modules/contrib/acquia_cms_common/src/Services/ToggleModulesService.php
modules/contrib/acquia_cms_common/src/SubtypeBreadcrumb.php
modules/contrib/acquia_cms_common/tests/src/ExistingSite/ContentTypeListTestBase.php
modules/contrib/acquia_cms_common/tests/src/Functional/BasicPermissionsTest.php
modules/contrib/acquia_cms_common/tests/src/Functional/ContentModelTestBase.php
modules/contrib/acquia_cms_common/tests/src/Functional/ContentTypeTestBase.php
modules/contrib/acquia_cms_common/tests/src/Functional/MediaTypeTestBase.php
modules/contrib/acquia_cms_common/tests/src/FunctionalJavascript/CkeditorConfigurationTest.php
modules/contrib/acquia_cms_common/tests/src/FunctionalJavascript/MediaEmbedTestBase.php
modules/contrib/acquia_cms_common/tests/src/Traits/AssertLinksTrait.php
modules/contrib/acquia_cms_common/tests/src/Traits/MediaTestTrait.php
modules/contrib/acquia_cms_common/tests/src/Traits/SetBackendAvailabilityTrait.php

20 files with changes
=====================

1) modules/contrib/acquia_cms_common/tests/src/Traits/SetBackendAvailabilityTrait.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the view entity for the listing page.
    *
-   * @return \Drupal\views\Entity\View
+   * @return View
    *   The listing page's view.
    */
   abstract protected function getView() : View;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/acquia_cms_common/tests/src/Traits/MediaTestTrait.php:18

    ---------- begin diff ----------
@@ @@
    *   provided for the media entity's source field, a randomly generated one
    *   will be used.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The new, saved media item.
    */
   protected function createMedia(array $values = []) : MediaInterface {
@@ @@
   /**
    * Generates a random source field value for a media type.
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type.
    * @param bool $normalize
    *   (optional) Whether to return only the normalized value, i.e., the value
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/acquia_cms_common/tests/src/FunctionalJavascript/MediaEmbedTestBase.php:121

    ---------- begin diff ----------
@@ @@
   /**
    * Asserts required fields of a media item being created in the media library.
    *
-   * @param \Behat\Mink\Element\ElementInterface $added_media
+   * @param ElementInterface $added_media
    *   The element containing the required fields of the media item being
    *   created.
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/acquia_cms_common/tests/src/Functional/ContentTypeTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_cms_common\Functional;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Test\AssertMailTrait;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\file\Entity\File;
@@ @@
    * Tests the access restrictions and add/edit form of the content type.
    */
   public function testContentType() {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $field_storage */
+    /** @var EntityStorageInterface $field_storage */
     $field_storage = $this->container->get('entity_type.manager')
       ->getStorage('field_config');

@@ @@
       'bundle' => $this->nodeType,
       'required' => TRUE,
     ]);
-    /** @var \Drupal\field\Entity\FieldConfig $required_field */
+    /** @var FieldConfig $required_field */
     foreach ($required_fields as $required_field) {
       $required_field->setRequired(FALSE);
       $field_storage->save($required_field);
@@ @@
     $uri = uniqid('public://') . '.png';
     $uri = $this->getRandomGenerator()->image($uri, '16x16', '16x16');

-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = File::create([
       'uri' => $uri,
     ]);
@@ @@

     $field->setDefaultValue($media->id())->save();

-    return file_create_url($file->getFileUri());
+    return \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
   }

   /**
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/acquia_cms_common/tests/src/Functional/ContentModelTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_cms_common\Functional;

+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\SortArray;
 use Drupal\taxonomy\Entity\Vocabulary;
@@ @@
   protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\taxonomy\VocabularyInterface $categories */
+    /** @var VocabularyInterface $categories */
     $categories = Vocabulary::load('categories');
     $this->createTerm($categories, ['name' => 'Music']);
     $this->createTerm($categories, ['name' => 'Food']);
@@ @@
         'bundle' => $bundle,
       ]);

-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+    /** @var FieldDefinitionInterface $field_definition */
     foreach ($field_definitions as $id => $field_definition) {
       $this->assertTrue($field_definition->isTranslatable(), "$id is not translatable, but it should be.");
       $this->assertTrue($field_definition->getFieldStorageDefinition()->isTranslatable(), "$id storage is not translatable, but it should be.");
@@ @@
         'vid' => 'categories',
       ]);

-    /** @var \Drupal\taxonomy\TermInterface $term */
+    /** @var TermInterface $term */
     foreach ($terms as $term) {
       $assert_session->optionExists('Categories', $term->label(), $group);
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/acquia_cms_common/tests/src/ExistingSite/ContentTypeListTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_cms_common\ExistingSite;

+use Drupal\views\Entity\View;
+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityStorageException;
 use Behat\Mink\Element\ElementInterface;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\Core\Entity\Query\QueryInterface;
@@ @@
   /**
    * Returns the view entity for the listing page.
    *
-   * @return \Drupal\views\Entity\View
+   * @return View
    *   The listing page's view.
    */
   abstract protected function getView();
@@ @@
    *   (optional) A set of permissions with which to run this test. If omitted,
    *   the test is run as the anonymous user.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
+   * @throws EntityStorageException
    *
    * @dataProvider permissionProvider
    */
@@ @@
    *   (optional) A set of permissions with which to run this test. If omitted,
    *   the test is run as the anonymous user.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws EntityStorageException
    *
    * @dataProvider permissionProvider
    */
@@ @@
   protected function getExpectedLinks() : array {
     $ids = $this->getQuery()->execute();

-    /** @var \Drupal\node\NodeInterface[] $content */
+    /** @var NodeInterface[] $content */
     $content = $this->container->get('entity_type.manager')
       ->getStorage('node')
       ->loadMultiple($ids);
@@ @@
   /**
    * Builds a query for all published content of the type under test.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   An entity query object to find all published content of the type under
    *   test.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/acquia_cms_common/src/SubtypeBreadcrumb.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_cms_common;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Breadcrumb\Breadcrumb;
 use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
@@ @@
   /**
    * The facet entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $facetStorage;

@@ @@
   /**
    * The Facets URL processor plugin manager service.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   private $urlProcessorManager;

@@ @@
   /**
    * SubtypeBreadcrumb constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $url_processor_manager
+   * @param PluginManagerInterface $url_processor_manager
    *   The Facets URL processor plugin manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, PluginManagerInterface $url_processor_manager) {
@@ @@
    * This implementation will pull these settings from the 'acquia_cms.subtype'
    * third-party settings of the type of node being viewed.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    *
    * @return array
@@ @@
    */
   private function getSettings(RouteMatchInterface $route_match) : array {
     if ($route_match->getRouteName() === 'entity.node.canonical') {
-      /** @var \Drupal\node\NodeInterface $node */
+      /** @var NodeInterface $node */
       $node = $route_match->getParameter('node');
       return $node->type->entity->getThirdPartySetting('acquia_cms_common', 'subtype', []);
     }
@@ @@
     $breadcrumb->addCacheContexts(['route']);

     $settings = $this->getSettings($route_match);
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $route_match->getParameter('node');
     $breadcrumb->addCacheableDependency($node);

@@ @@
   /**
    * Builds a link to the content type list page.
    *
-   * @param \Drupal\node\NodeTypeInterface $node_type
+   * @param NodeTypeInterface $node_type
    *   The type of node being viewed.
    * @param \Drupal\facets\FacetInterface $facet
    *   The sub-type facet.
    *
-   * @return \Drupal\Core\Link
+   * @return Link
    *   A link to the content type's list page, without any sub-type facet
    *   applied.
    */
@@ @@
   /**
    * Builds a link to the content type list page, with a sub-type facet applied.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   The sub-type taxonomy term.
    * @param \Drupal\facets\FacetInterface $facet
    *   The sub-type facet.
    *
-   * @return \Drupal\Core\Link
+   * @return Link
    *   A link to the content type's list page, with the sub-type facet applied.
    */
   private function getSubTypeLink(TermInterface $term, FacetInterface $facet) : Link {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/acquia_cms_common/src/Services/AcmsUtilityService.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new AcmsService object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The ModuleHandlerInterface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/acquia_cms_common/src/ProxyClass/AcmsModulesUninstallValidator.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

@@ @@
   /**
    * Constructs a ProxyClass Drupal proxy object.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    * @param string $drupal_proxy_service_id
    *   The service ID of the proxy service.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/acquia_cms_common/src/Facade/WorkflowFacade.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_cms_common\Facade;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\workflows\WorkflowInterface;
 use Drupal\content_moderation\Plugin\WorkflowType\ContentModerationInterface;
 use Drupal\Core\Config\ConfigInstallerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
@@ @@
   /**
    * The config installer service.
    *
-   * @var \Drupal\Core\Config\ConfigInstallerInterface
+   * @var ConfigInstallerInterface
    */
   private $configInstaller;

@@ @@
   /**
    * The workflow entity storage handler.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   private $workflowStorage;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
   /**
    * WorkflowFacade constructor.
    *
-   * @param \Drupal\Core\Config\ConfigInstallerInterface $config_installer
+   * @param ConfigInstallerInterface $config_installer
    *   The config installer service.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $workflow_storage
+   * @param ConfigEntityStorageInterface $workflow_storage
    *   The workflow entity storage handler.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
    */
   public function __construct(ConfigInstallerInterface $config_installer, ConfigEntityStorageInterface $workflow_storage, LoggerChannelInterface $logger) {
@@ @@
    * workflow doesn't exist, or does exist but doesn't use Content Moderation, a
    * warning is logged.
    *
-   * @param \Drupal\node\NodeTypeInterface $node_type
+   * @param NodeTypeInterface $node_type
    *   The new node type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function addNodeType(NodeTypeInterface $node_type) {
     // We don't want to do any secondary config writes during a config sync,
@@ @@
     ];

     // Ensure the workflow exists, and log a warning if it doesn't.
-    /** @var \Drupal\workflows\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     $workflow = $this->workflowStorage->load($workflow_id);
     if (empty($workflow)) {
       $this->logger->warning('Could not add the %node_type content type to the %workflow workflow because the workflow does not exist.', $variables);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/acquia_cms_common/src/Facade/WorkbenchEmailFacade.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_cms_common\Facade;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\workflows\WorkflowInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ConfigInstallerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
@@ @@
   /**
    * The config installer service.
    *
-   * @var \Drupal\Core\Config\ConfigInstallerInterface
+   * @var ConfigInstallerInterface
    */
   private $configInstaller;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * The workflow entity storage handler.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   private $workflowStorage;

@@ @@
   /**
    * The node type entity storage handler.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   private $nodeTypeStorage;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
   /**
    * WorkbenchEmailFacade constructor.
    *
-   * @param \Drupal\Core\Config\ConfigInstallerInterface $config_installer
+   * @param ConfigInstallerInterface $config_installer
    *   The config installer service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $workflow_storage
+   * @param ConfigEntityStorageInterface $workflow_storage
    *   The workflow entity storage handler.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $node_type_storage
+   * @param ConfigEntityStorageInterface $node_type_storage
    *   The node type entity storage handler.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
    */
   public function __construct(
@@ @@
    * type that mentions the incoming template in its
    * acquia_cms.workbench_email_templates third-party setting.
    *
-   * @param \Drupal\workbench_email\TemplateInterface $template
+   * @param TemplateInterface $template
    *   The new workbench email template.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function addTemplate(TemplateInterface $template) {
     // We don't want to do any secondary config writes during a config sync,
@@ @@
       return;
     }

-    /** @var \Drupal\workflows\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     $workflow = $this->workflowStorage->load($workflow_id);
     if (empty($workflow)) {
       $variables['%workflow'] = $workflow_id;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/acquia_cms_common/src/Facade/SitemapFacade.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The config installer service.
    *
-   * @var \Drupal\Core\Config\ConfigInstallerInterface
+   * @var ConfigInstallerInterface
    */
   private $configInstaller;

@@ @@
   /**
    * The sitemap generator service.
    *
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   private $generator;

@@ @@
   /**
    * The sitemap manager service.
    *
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   private $sitemapManager;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
   /**
    * WorkflowFacade constructor.
    *
-   * @param \Drupal\Core\Config\ConfigInstallerInterface $config_installer
+   * @param ConfigInstallerInterface $config_installer
    *   The config installer service.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
+   * @param Simplesitemap $generator
    *   The sitemap generator service.
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $sitemap_manager
+   * @param SimplesitemapManager $sitemap_manager
    *   The sitemap manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
    */
   public function __construct(ConfigInstallerInterface $config_installer, Simplesitemap $generator, SimplesitemapManager $sitemap_manager, LoggerChannelInterface $logger) {
@@ @@
    * Tries to enable sitemap settings for the new node type by the
    * acquia_cms.sitemap_variant third-party setting.
    *
-   * @param \Drupal\node\NodeTypeInterface $node_type
+   * @param NodeTypeInterface $node_type
    *   The new node type.
    */
   public function enableSitemap(NodeTypeInterface $node_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/acquia_cms_common/src/Facade/MetatagFacade.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The config installer service.
    *
-   * @var \Drupal\Core\Config\ConfigInstallerInterface
+   * @var ConfigInstallerInterface
    */
   private $configInstaller;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * MetatagFacade constructor.
    *
-   * @param \Drupal\Core\Config\ConfigInstallerInterface $config_installer
+   * @param ConfigInstallerInterface $config_installer
    *   The config installer service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(ConfigInstallerInterface $config_installer, ConfigFactoryInterface $config_factory) {
@@ @@
    * Tries to enable specific metatag tag types for the new node type, as
    * specified by the 'acquia_cms.metatag.tag_types' third-party setting.
    *
-   * @param \Drupal\node\NodeTypeInterface $node_type
+   * @param NodeTypeInterface $node_type
    *   The new node type.
    */
   public function addNodeType(NodeTypeInterface $node_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/acquia_cms_common/src/EventSubscriber/ConfigEventsSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_cms_common\EventSubscriber;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new ConfigEventsSubscriber object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The ModuleHandlerInterface.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * React to a config object being saved.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   Config crud event.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function configSave(ConfigCrudEvent $event) {
     $config = $event->getConfig();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/acquia_cms_common/src/Commands/ToggleModules.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Toggle module Service.
    *
-   * @var Drupal\acquia_cms_common\Services\ToggleModulesService
+   * @var ToggleModulesService
    */
   private $toggleModuleServices;

@@ @@
   /**
    * Constructs toggleModuleServices object.
    *
-   * @param \Drupal\acquia_cms_common\Services\ToggleModulesService $toggle_modules_services
+   * @param ToggleModulesService $toggle_modules_services
    *   The toggle module serve.
    */
   public function __construct(ToggleModulesService $toggle_modules_services) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/acquia_cms_common/src/Commands/Hooks.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The The acms utility service.
    *
-   * @var \Drupal\acquia_cms_common\Services\AcmsUtilityService
+   * @var AcmsUtilityService
    */
   protected $acmsUtilityService;

@@ @@
   /**
    * Constructs a WebformSubmissionLogRouteSubscriber object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\acquia_cms_common\Services\AcmsUtilityService $acms_utility_service
+   * @param AcmsUtilityService $acms_utility_service
    *   The acms utility service.
    */
   public function __construct(ModuleHandlerInterface $module_handler, AcmsUtilityService $acms_utility_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/acquia_cms_common/src/Commands/AcmsConfigImportCommands.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * The config manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * The StorageInterface object.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;

@@ @@
   /**
    * The standard drush config import commands.
    *
-   * @var \Drush\Drupal\Commands\config\ConfigImportCommands
+   * @var ConfigImportCommands
    */
   protected $configImportCommands;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The string translation interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $stringTranslation;

@@ @@
   /**
    * The ClassResolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolver
+   * @var ClassResolver
    */
   protected $cohesionFacade;

@@ @@
   /**
    * The acquia cms utility service.
    *
-   * @var \Drupal\acquia_cms_common\Services\AcmsUtilityService
+   * @var AcmsUtilityService
    */
   protected $acmsUtilityService;

@@ @@
   /**
    * Get configuration manager.
    *
-   * @return \Drupal\Core\Config\ConfigManagerInterface
+   * @return ConfigManagerInterface
    *   The ConfigManagerInterface.
    */
   public function getConfigManager() {
@@ @@
   /**
    * Get config storage object.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The StorageInterface.
    */
   public function getConfigStorage() {
@@ @@
   /**
    * Get string translation object.
    *
-   * @return \Drupal\Core\StringTranslation\TranslationInterface
+   * @return TranslationInterface
    *   The TranslationInterface.
    */
   public function getStringTranslation() {
@@ @@
   /**
    * Get module handler object.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The ModuleHandlerInterface.
    */
   public function getModuleHandler() {
@@ @@
   /**
    * The class constructor.
    *
-   * @param \Drupal\Core\Config\ConfigManagerInterface $configManager
+   * @param ConfigManagerInterface $configManager
    *   The ConfigManagerInterface.
-   * @param \Drupal\Core\Config\StorageInterface $configStorage
+   * @param StorageInterface $configStorage
    *   The StorageInterface.
-   * @param \Drush\Drupal\Commands\config\ConfigImportCommands $configImportCommands
+   * @param ConfigImportCommands $configImportCommands
    *   The config importer class.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   * @param TranslationInterface $stringTranslation
    *   The TranslationInterface.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The ModuleHandlerInterface.
-   * @param \Drupal\Core\DependencyInjection\ClassResolver $classResolver
+   * @param ClassResolver $classResolver
    *   The class resolver.
-   * @param \Drupal\acquia_cms_common\Services\AcmsUtilityService $acmsUtilityService
+   * @param AcmsUtilityService $acmsUtilityService
    *   The acquia cms service.
    */
   public function __construct(
@@ @@
    * --delete-list=search_api.index.acquia_search_index
    *   Reset the configuration to the default.
    *
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    */
   public function resetConfigurations(array $package, array $options = [
     'scope' => NULL,
@@ @@
    * @return array
    *   The package from user input.
    *
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    */
   private function getPackagesFromUserInput(): array {
     // Lets get input from user if not provided package with command.
@@ @@
     $acms_modules = $this->getAcmsModules();
     $acms_filtered_modules = [];
     foreach ($acms_modules as $module) {
-      $dir = drupal_get_path('module', $module);
+      $dir = \Drupal::service('extension.list.module')->getPath($module);
       $install = "$dir/config/install";
       $optional = "$dir/config/optional";
       if (is_dir($install) || is_dir($optional)) {
@@ @@
    * @param int|null $default
    *   The default option in multi-choice.
    *
-   * @return \Symfony\Component\Console\Question\ChoiceQuestion
+   * @return ChoiceQuestion
    *   The ChoiceQuestion
    */
   private function createMultipleChoiceOptions(string $question_string, array $choice_options, $default = NULL): ChoiceQuestion {
@@ @@
    * @param array $delete_list
    *   The list of config files to be deleted during import.
    *
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    * @throws \Exception
    */
   private function doImport(array $package, string $scope, array $delete_list) {
@@ @@
    */
   private function getConfigFiles(string $module): array {
     $config_files = [];
-    $source_install = drupal_get_path('module', $module) . '/config/install';
-    $source_optional = drupal_get_path('module', $module) . '/config/optional';
+    $source_install = \Drupal::service('extension.list.module')->getPath($module) . '/config/install';
+    $source_optional = \Drupal::service('extension.list.module')->getPath($module) . '/config/optional';

     // Get optional configuration list for specified module.
     $source_storage_dir = ConfigCommands::getDirectory(NULL, $source_optional);
@@ @@
    *   The array of site studio package.
    */
   private function getSiteStudioPackage(string $module): array {
-    $dir = drupal_get_path('module', $module);
+    $dir = \Drupal::service('extension.list.module')->getPath($module);
     $list = "$dir/config/dx8/packages.yml";
     if (file_exists($list)) {
       $list = file_get_contents($list);
@@ @@
    * @param array $delete_list
    *   The list of configurations to be deleted before import.
    *
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    * @throws \Exception
    */
   private function importPartialConfig(array $config_files, array $delete_list) {
@@ @@
    *
    * @hook validate acms:config-reset
    *
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    */
   public function validateConfigResetCommand(CommandData $commandData) {
     // Since we are running config import with partial option
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/acquia_cms_common/src/Commands/AcmsCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_cms_common\Commands;

+use Drupal\Core\Logger\LoggerChannelFactory;
 use Consolidation\AnnotatedCommand\CommandData;
 use Consolidation\AnnotatedCommand\CommandError;
 use Consolidation\SiteAlias\SiteAliasManagerAwareInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Logger Factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $loggerFactory;

@@ @@
   /**
    * Constructs a ModuleHandlerInterface object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   The logger factory.
    */
   public function __construct(ModuleHandlerInterface $module_handler, LoggerChannelFactoryInterface $loggerFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/acquia_cms_common/src/AcmsModulesUninstallValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_cms_common;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new AcmsModulesUninstallValidator.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
@@ @@
    * @return bool
    *   The status of data available for certain node type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function hasContent(string $node_type): bool {
     if ($node_type) {
@@ @@
    * @return bool
    *   The status of data available for certain node type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function hasMedia(string $media_type): bool {
     if ($media_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/acquia_cms_common/acquia_cms_common.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\views\ViewEntityInterface;
 /**
  * @file
  * Contains hook implementations for common, shared Acquia CMS functionality.
@@ @@
         $wysiwyg_cache_token = \Drupal::keyValue('cohesion.wysiwyg_cache_token');
         $wysiwyg_cache_buster = $wysiwyg_cache_token->get('cache_token') ? '?_t=' . $wysiwyg_cache_token->get('cache_token') : '';
         // Reset and ckeditor specific styles.
-        $css[] = drupal_get_path('module', 'cohesion') . '/css/reset.css' . $wysiwyg_cache_buster;
-        $css[] = drupal_get_path('module', 'cohesion') . '/css/plugin-styles.css' . $wysiwyg_cache_buster;
+        $css[] = \Drupal::service('extension.list.module')->getPath('cohesion') . '/css/reset.css' . $wysiwyg_cache_buster;
+        $css[] = \Drupal::service('extension.list.module')->getPath('cohesion') . '/css/plugin-styles.css' . $wysiwyg_cache_buster;

         $default_theme_id = \Drupal::service('theme_handler')->getDefault();

@@ @@
           $css_theme_filename = \Drupal::service('cohesion.local_files_manager')
             ->getStyleSheetFilename('theme', $default_theme_id, TRUE);
           // Generated stylsheets.
-          $css[] = file_create_url($css_base_filename) . $wysiwyg_cache_buster;
-          $css[] = file_create_url($css_theme_filename) . $wysiwyg_cache_buster;
+          $css[] = \Drupal::service('file_url_generator')->generateAbsoluteString($css_base_filename) . $wysiwyg_cache_buster;
+          $css[] = \Drupal::service('file_url_generator')->generateAbsoluteString($css_theme_filename) . $wysiwyg_cache_buster;

         }
         // Add the body reset stylesheet.
-        $css[] = drupal_get_path('module', 'cohesion') . '/css/cohesion-body-reset.css' . $wysiwyg_cache_buster;
+        $css[] = \Drupal::service('extension.list.module')->getPath('cohesion') . '/css/cohesion-body-reset.css' . $wysiwyg_cache_buster;
       }
     }
     catch (\Exception $e) {
@@ @@
 /**
  * Helper function to update views display_options's style.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function _acquia_cms_common_update_view_display_options_style($view_name, $display_id = 'default', $views_template = NULL) {
-  /** @var \Drupal\views\ViewEntityInterface $view */
+  /** @var ViewEntityInterface $view */
   $view_storage = \Drupal::entityTypeManager()->getStorage('view');
   $view = $view_storage->load($view_name);
   if (empty($view)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector


 [OK] 20 files have been changed by Rector                                      

