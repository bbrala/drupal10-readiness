diff --git a/src/Access/StoryChiefAccessCheck.php b/src/Access/StoryChiefAccessCheck.php
index 7984f6f..f7b7789 100644
--- a/src/Access/StoryChiefAccessCheck.php
+++ b/src/Access/StoryChiefAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\storychief\Access;
 
+use Drupal\Core\Config\Config;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactory;
@@ -18,23 +19,23 @@ class StoryChiefAccessCheck implements AccessInterface {
   /**
    * The json serializer service.
    *
-   * @var \Drupal\Component\Serialization\Json
+   * @var Json
    */
   protected $jsonSerializer;
 
   /**
    * A configuration object containing story chief's config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * StorychiefAccessCheck constructor.
    *
-   * @param \Drupal\Component\Serialization\Json $json
+   * @param Json $json
    *   The json serializer service.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory service.
    */
   public function __construct(Json $json, ConfigFactory $config_factory) {
@@ -45,10 +46,10 @@ class StoryChiefAccessCheck implements AccessInterface {
   /**
    * Allows access only if the the sent hmac matches the calculated one.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request object.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Whether or not the access is granted.
    */
   public function access(Request $request) {
diff --git a/src/Annotation/StoryChiefFieldHandler.php b/src/Annotation/StoryChiefFieldHandler.php
index 0338557..916253d 100644
--- a/src/Annotation/StoryChiefFieldHandler.php
+++ b/src/Annotation/StoryChiefFieldHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\storychief\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class StoryChiefFieldHandler extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/StoryChiefWebhookController.php b/src/Controller/StoryChiefWebhookController.php
index b2f9f39..7ed1c5a 100644
--- a/src/Controller/StoryChiefWebhookController.php
+++ b/src/Controller/StoryChiefWebhookController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\storychief\Controller;
 
+use Symfony\Component\HttpFoundation\RequestStack;
+use Drupal\Component\Serialization\Json;
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\storychief\Event\StoryChiefRemoteCallEvent;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -19,21 +22,21 @@ class StoryChiefWebhookController extends ControllerBase {
   /**
    * The request stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The Json serializer service.
    *
-   * @var \Drupal\Component\Serialization\Json
+   * @var Json
    */
   protected $jsonSerializer;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;
 
@@ -52,7 +55,7 @@ class StoryChiefWebhookController extends ControllerBase {
   /**
    * StoryChief endpoint controller method.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A Json response containing the success payload or an error message.
    */
   public function handle() {
diff --git a/src/Event/StoryChiefRemoteCallEvent.php b/src/Event/StoryChiefRemoteCallEvent.php
index 6f7c252..d7295b3 100644
--- a/src/Event/StoryChiefRemoteCallEvent.php
+++ b/src/Event/StoryChiefRemoteCallEvent.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\storychief\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\Component\Serialization\Json;
+use Drupal\Core\Config\Config;
 use Symfony\Component\HttpFoundation\JsonResponse;
 
 /**
@@ -24,21 +26,21 @@ class StoryChiefRemoteCallEvent extends Event {
   /**
    * The response to return to StoryChief.
    *
-   * @var \Symfony\Component\HttpFoundation\JsonResponse
+   * @var JsonResponse
    */
   protected $response;
 
   /**
    * The json serializer service.
    *
-   * @var \Drupal\Component\Serialization\Json
+   * @var Json
    */
   protected $jsonSerializer;
 
   /**
    * A configuration object containing StoryChief's configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
@@ -57,7 +59,7 @@ class StoryChiefRemoteCallEvent extends Event {
   /**
    * Gets the response needed by StoryChief.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response object.
    */
   public function getResponse() {
diff --git a/src/EventSubscribers/StoryChiefRemoteCallDeleteEventSubscriber.php b/src/EventSubscribers/StoryChiefRemoteCallDeleteEventSubscriber.php
index e629fd6..df3ecfc 100644
--- a/src/EventSubscribers/StoryChiefRemoteCallDeleteEventSubscriber.php
+++ b/src/EventSubscribers/StoryChiefRemoteCallDeleteEventSubscriber.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\storychief\EventSubscribers;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\node\NodeStorage;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Database\Database;
 use Drupal\storychief\Event\StoryChiefEvents;
 use Drupal\storychief\Event\StoryChiefRemoteCallEvent;
@@ -25,12 +30,12 @@ class StoryChiefRemoteCallDeleteEventSubscriber extends StoryChiefRemoteCallEven
   /**
    * Delete an entity or a translation.
    *
-   * @param \Drupal\storychief\Event\StoryChiefRemoteCallEvent $event
+   * @param StoryChiefRemoteCallEvent $event
    *   The event being dispatched.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function onDelete(StoryChiefRemoteCallEvent $event) {
     // Filter out empty values.
@@ -40,10 +45,10 @@ class StoryChiefRemoteCallDeleteEventSubscriber extends StoryChiefRemoteCallEven
       ? $this->getPayload()['external_id']
       : $this->getPayload()['source']['data']['external_id'];
 
-    /** @var \Drupal\node\NodeStorage $storage */
+    /** @var NodeStorage $storage */
     $storage = $this->entityTypeManager->getStorage('node');
 
-    /** @var \Drupal\node\NodeInterface $entity */
+    /** @var NodeInterface $entity */
     $entity = $storage->load($nid);
     if (!$entity) {
       $event->setResponse(['message' => 'Story not found. It may already have been deleted, or was never imported.'],
diff --git a/src/EventSubscribers/StoryChiefRemoteCallEventSubscriberBase.php b/src/EventSubscribers/StoryChiefRemoteCallEventSubscriberBase.php
index 2f0f9ca..9debee2 100644
--- a/src/EventSubscribers/StoryChiefRemoteCallEventSubscriberBase.php
+++ b/src/EventSubscribers/StoryChiefRemoteCallEventSubscriberBase.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\storychief\EventSubscribers;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\node\NodeInterface;
@@ -22,28 +27,28 @@ abstract class StoryChiefRemoteCallEventSubscriberBase implements EventSubscribe
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Configuration object for the StoryChief module.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $config;
 
   /**
    * The StoryChief field handler plugin manager.
    *
-   * @var \Drupal\storychief\Plugin\StorychiefFieldHandlerManager
+   * @var StorychiefFieldHandlerManager
    */
   protected $storychiefManager;
 
   /**
    * The entity being processed.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $entity;
 
@@ -57,11 +62,11 @@ abstract class StoryChiefRemoteCallEventSubscriberBase implements EventSubscribe
   /**
    * StoryChiefEventSubscriberBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory.
-   * @param \Drupal\storychief\Plugin\StorychiefFieldHandlerManager $field_handler_manager
+   * @param StorychiefFieldHandlerManager $field_handler_manager
    *   The StoryChief field handler plugin manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactory $config_factory, StorychiefFieldHandlerManager $field_handler_manager) {
@@ -73,19 +78,18 @@ abstract class StoryChiefRemoteCallEventSubscriberBase implements EventSubscribe
   /**
    * Process the creation or update of a story.
    *
-   * @param \Drupal\storychief\Event\StoryChiefRemoteCallEvent $event
+   * @param StoryChiefRemoteCallEvent $event
    *   The event being dispatched.
    *
    * @return int|void
    *   0, SAVED_NEW or SAVED_UPDATED, depending on the operation performed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws PluginException
+   * @throws EntityStorageException
+   * @throws EntityMalformedException
    */
   protected function processStory(StoryChiefRemoteCallEvent $event) {
-    /** @var \Drupal\storychief\Plugin\FieldHandlerType\BaseFieldHandlerType $field_instance */
-
+    /** @var BaseFieldHandlerType $field_instance */
     $entity = $this->getEntity();
 
     $configuration = [
@@ -157,7 +161,7 @@ abstract class StoryChiefRemoteCallEventSubscriberBase implements EventSubscribe
   /**
    * Get the entity being processed.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   Entity being processed.
    */
   public function getEntity() {
@@ -167,7 +171,7 @@ abstract class StoryChiefRemoteCallEventSubscriberBase implements EventSubscribe
   /**
    * Set the entity to process.
    *
-   * @param \Drupal\node\NodeInterface $entity
+   * @param NodeInterface $entity
    *   The entity to process.
    *
    * @return $this
@@ -200,7 +204,7 @@ abstract class StoryChiefRemoteCallEventSubscriberBase implements EventSubscribe
   /**
    * Set or update the field depending on the entity status.
    *
-   * @param \Drupal\storychief\Plugin\FieldHandlerType\BaseFieldHandlerType $field_instance
+   * @param BaseFieldHandlerType $field_instance
    *   The field instance.
    */
   protected function processField(BaseFieldHandlerType $field_instance) {
diff --git a/src/EventSubscribers/StoryChiefRemoteCallPublishEventSubscriber.php b/src/EventSubscribers/StoryChiefRemoteCallPublishEventSubscriber.php
index 40d9e83..64bded1 100644
--- a/src/EventSubscribers/StoryChiefRemoteCallPublishEventSubscriber.php
+++ b/src/EventSubscribers/StoryChiefRemoteCallPublishEventSubscriber.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\storychief\EventSubscribers;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\node\NodeStorage;
+use Drupal\node\NodeInterface;
 use Drupal\storychief\Event\StoryChiefEvents;
 use Drupal\storychief\Event\StoryChiefRemoteCallEvent;
 
@@ -24,17 +31,17 @@ class StoryChiefRemoteCallPublishEventSubscriber extends StoryChiefRemoteCallEve
   /**
    * Creates an entity or a translation.
    *
-   * @param \Drupal\storychief\Event\StoryChiefRemoteCallEvent $event
+   * @param StoryChiefRemoteCallEvent $event
    *   The entity being dispatched.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
+   * @throws EntityStorageException
+   * @throws PluginException
    */
   public function onPublish(StoryChiefRemoteCallEvent $event) {
-    /** @var \Drupal\node\NodeStorage $storage */
+    /** @var NodeStorage $storage */
     $storage = $this->entityTypeManager->getStorage('node');
 
     // Filter out empty values.
@@ -42,7 +49,7 @@ class StoryChiefRemoteCallPublishEventSubscriber extends StoryChiefRemoteCallEve
 
     // If source is empty, then we are creating a source entity.
     if (empty($this->getPayload()['source'])) {
-      /** @var \Drupal\node\NodeInterface $entity */
+      /** @var NodeInterface $entity */
       $node_type = $this->config->get('node_type');
 
       // Allow modules to alter the node type.
@@ -53,7 +60,7 @@ class StoryChiefRemoteCallPublishEventSubscriber extends StoryChiefRemoteCallEve
 
     // Otherwise, we are creating a translation.
     else {
-      /** @var \Drupal\node\NodeInterface $entity */
+      /** @var NodeInterface $entity */
       $entity = $storage->load($this->getPayload()['source']['data']['external_id']);
       // Make sure a translation do not already exists.
       $entity = $entity->hasTranslation($this->getPayload()['language'])
diff --git a/src/EventSubscribers/StoryChiefRemoteCallTestEventSubscriber.php b/src/EventSubscribers/StoryChiefRemoteCallTestEventSubscriber.php
index ba3bdfd..df7d757 100644
--- a/src/EventSubscribers/StoryChiefRemoteCallTestEventSubscriber.php
+++ b/src/EventSubscribers/StoryChiefRemoteCallTestEventSubscriber.php
@@ -27,7 +27,7 @@ class StoryChiefRemoteCallTestEventSubscriber extends StoryChiefRemoteCallEventS
   /**
    * Respond to the "test" event.
    *
-   * @param \Drupal\storychief\Event\StoryChiefRemoteCallEvent $event
+   * @param StoryChiefRemoteCallEvent $event
    *   The dispatched even.
    */
   public function onTest(StoryChiefRemoteCallEvent $event) {
diff --git a/src/EventSubscribers/StoryChiefRemoteCallUpdateEventSubscriber.php b/src/EventSubscribers/StoryChiefRemoteCallUpdateEventSubscriber.php
index b6f1e82..a872b23 100644
--- a/src/EventSubscribers/StoryChiefRemoteCallUpdateEventSubscriber.php
+++ b/src/EventSubscribers/StoryChiefRemoteCallUpdateEventSubscriber.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\storychief\EventSubscribers;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\node\NodeStorage;
+use Drupal\node\NodeInterface;
 use Drupal\storychief\Event\StoryChiefEvents;
 use Drupal\storychief\Event\StoryChiefRemoteCallEvent;
 
@@ -24,23 +31,23 @@ class StoryChiefRemoteCallUpdateEventSubscriber extends StoryChiefRemoteCallEven
   /**
    * Updates an entity or a translation.
    *
-   * @param \Drupal\storychief\Event\StoryChiefRemoteCallEvent $event
+   * @param StoryChiefRemoteCallEvent $event
    *   The event being dispatched.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
+   * @throws EntityStorageException
+   * @throws PluginException
    */
   public function onUpdate(StoryChiefRemoteCallEvent $event) {
-    /** @var \Drupal\node\NodeStorage $storage */
+    /** @var NodeStorage $storage */
     $storage = $this->entityTypeManager->getStorage('node');
 
     // Filter out empty values.
     $this->setPayload(array_filter($event->payload['data']));
 
-    /** @var \Drupal\node\NodeInterface $entity */
+    /** @var NodeInterface $entity */
     $entity = $storage->load($this->payload['external_id']);
 
     if (!$entity) {
diff --git a/src/Form/StoryChiefSettingsForm.php b/src/Form/StoryChiefSettingsForm.php
index ebe09b8..54e9ba3 100644
--- a/src/Form/StoryChiefSettingsForm.php
+++ b/src/Form/StoryChiefSettingsForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\storychief\Form;
 
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\field\FieldConfigInterface;
@@ -15,14 +20,14 @@ class StoryChiefSettingsForm extends ConfigFormBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
@@ -46,8 +51,8 @@ class StoryChiefSettingsForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
@@ -266,17 +271,17 @@ class StoryChiefSettingsForm extends ConfigFormBase {
    * @param string $entity_type
    *   The entity type string.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entity types.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getEntityBundleDropdown(string $entity_type) {
     $entity_types = $this->entityTypeManager->getStorage($entity_type)
       ->loadMultiple();
     array_walk($entity_types, function (&$entity_type) {
-      /** @var \Drupal\Core\Entity\EntityInterface $entity_type */
+      /** @var EntityInterface $entity_type */
       $entity_type = $entity_type->label();
     });
 
@@ -380,7 +385,7 @@ class StoryChiefSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   Array representation of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return mixed
diff --git a/src/Plugin/FieldHandlerType/BaseFieldHandlerType.php b/src/Plugin/FieldHandlerType/BaseFieldHandlerType.php
index a37f5f3..d40d9b4 100644
--- a/src/Plugin/FieldHandlerType/BaseFieldHandlerType.php
+++ b/src/Plugin/FieldHandlerType/BaseFieldHandlerType.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\storychief\Plugin\FieldHandlerType;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\node\Entity\Node;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\node\NodeInterface;
@@ -18,35 +24,35 @@ class BaseFieldHandlerType extends PluginBase implements StorychiefFieldHandlerI
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The database connection service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Configuration object for the StoryChief module.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $config;
 
   /**
    * The entity being processed.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   private $entity;
 
diff --git a/src/Plugin/FieldHandlerType/ImageFieldHandlerType.php b/src/Plugin/FieldHandlerType/ImageFieldHandlerType.php
index a5fe5d9..f8ff5e1 100644
--- a/src/Plugin/FieldHandlerType/ImageFieldHandlerType.php
+++ b/src/Plugin/FieldHandlerType/ImageFieldHandlerType.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\storychief\Plugin\FieldHandlerType;
 
+use Drupal\Core\File\FileSystem;
+use Drupal\Core\Utility\Token;
+use Drupal\file\FileInterface;
+use Drupal\storychief\Exceptions\ImageStorychiefException;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\storychief\Exceptions\ImageStoryChiefException;
@@ -17,14 +21,14 @@ class ImageFieldHandlerType extends BaseFieldHandlerType {
   /**
    * The FileSystem service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;
 
   /**
    * The token services.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
@@ -42,10 +46,10 @@ class ImageFieldHandlerType extends BaseFieldHandlerType {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\file\FileInterface|null
+   * @return FileInterface|null
    *   The loaded image file.
    *
-   * @throws \Drupal\storychief\Exceptions\ImageStoryChiefException
+   * @throws ImageStoryChiefException
    */
   public function getValue() {
     $value = parent::getValue();
@@ -65,10 +69,10 @@ class ImageFieldHandlerType extends BaseFieldHandlerType {
    * @param string $image_name
    *   Name of the image to download.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   A file entity.
    *
-   * @throws \Drupal\storychief\Exceptions\ImageStorychiefException
+   * @throws ImageStorychiefException
    */
   protected function retrieveFile(string $source_url, string $image_name) {
     // Determine the scheme and destination directory based on the image field's
@@ -86,7 +90,7 @@ class ImageFieldHandlerType extends BaseFieldHandlerType {
     }
 
     // Retrieve the file and make a file entity out of it.
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = system_retrieve_file($source_url, $destination, TRUE, FileSystemInterface::EXISTS_REPLACE);
 
     if (!$file) {
diff --git a/src/Plugin/FieldHandlerType/ParagraphFieldHandlerType.php b/src/Plugin/FieldHandlerType/ParagraphFieldHandlerType.php
index edbe9c2..205ab3a 100644
--- a/src/Plugin/FieldHandlerType/ParagraphFieldHandlerType.php
+++ b/src/Plugin/FieldHandlerType/ParagraphFieldHandlerType.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\storychief\Plugin\FieldHandlerType;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\paragraphs\ParagraphInterface;
 
 /**
@@ -22,13 +26,13 @@ abstract class ParagraphFieldHandlerType extends BaseFieldHandlerType {
    * @return \Drupal\paragraphs\ParagraphInterface
    *   The paragraph to use to map data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getParagraph(string $paragraph_type) {
     $entity = $this->getEntity();
 
-    /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $storage */
+    /** @var SqlContentEntityStorage $storage */
     $storage = $this->entityTypeManager->getStorage('paragraph');
 
     // If there is already a paragraph attached, use it.
@@ -69,7 +73,7 @@ abstract class ParagraphFieldHandlerType extends BaseFieldHandlerType {
    * @param \Drupal\paragraphs\ParagraphInterface $paragraph
    *   The paragraph holding the imported data.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setParagraph(ParagraphInterface $paragraph) {
     $paragraph->save();
@@ -86,7 +90,7 @@ abstract class ParagraphFieldHandlerType extends BaseFieldHandlerType {
    * @param \Drupal\paragraphs\ParagraphInterface $paragraph
    *   The paragraph to delete.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function deleteParagraph(ParagraphInterface $paragraph) {
     // If the main entity is not the source one, delete the paragraph
diff --git a/src/Plugin/FieldHandlerType/TaxonomyTermFieldHandlerType.php b/src/Plugin/FieldHandlerType/TaxonomyTermFieldHandlerType.php
index 05c8cfd..92a8a80 100644
--- a/src/Plugin/FieldHandlerType/TaxonomyTermFieldHandlerType.php
+++ b/src/Plugin/FieldHandlerType/TaxonomyTermFieldHandlerType.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\storychief\Plugin\FieldHandlerType;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Base class to handle taxonomy terms.
  *
@@ -12,9 +16,9 @@ class TaxonomyTermFieldHandlerType extends EntityReferenceFieldHandlerType {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function getValue() {
     $terms = [];
@@ -39,11 +43,11 @@ class TaxonomyTermFieldHandlerType extends EntityReferenceFieldHandlerType {
    * @param string $term_name
    *   The term name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|mixed|null
+   * @return EntityInterface|mixed|null
    *   The taxonomy term or null if none was found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadTaxonomyTerm(string $term_name) {
     $vocabularies = $this->getFieldDefinition()
@@ -71,12 +75,12 @@ class TaxonomyTermFieldHandlerType extends EntityReferenceFieldHandlerType {
    * @param string $term_name
    *   The term name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Newly created taxonomy term.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function createTaxonomyTerm(string $term_name) {
     $vocabularies = $this->getFieldDefinition()
diff --git a/src/Plugin/StoryChiefFieldHandler/AuthorStoryChiefFieldHandler.php b/src/Plugin/StoryChiefFieldHandler/AuthorStoryChiefFieldHandler.php
index 63f8ae1..f89b41e 100644
--- a/src/Plugin/StoryChiefFieldHandler/AuthorStoryChiefFieldHandler.php
+++ b/src/Plugin/StoryChiefFieldHandler/AuthorStoryChiefFieldHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\storychief\Plugin\StoryChiefFieldHandler;
 
+use Drupal\user\Entity\User;
 use Drupal\storychief\Plugin\FieldHandlerType\BaseFieldHandlerType;
 
 /**
@@ -23,7 +24,7 @@ class AuthorStoryChiefFieldHandler extends BaseFieldHandlerType {
   public function getValue() {
     $original_value = parent::getValue();
 
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     if ($user = user_load_by_mail($original_value['data']['email'])) {
       return $user->id();
     }
