modules/contrib/tag1quo/src/Adapter/Cache/Cache.php
modules/contrib/tag1quo/src/Adapter/Cache/Cache8.php
modules/contrib/tag1quo/src/Adapter/Cache/Cache9.php
modules/contrib/tag1quo/src/Adapter/Config/Config.php
modules/contrib/tag1quo/src/Adapter/Config/Config6.php
modules/contrib/tag1quo/src/Adapter/Config/Config7.php
modules/contrib/tag1quo/src/Adapter/Config/Config8.php
modules/contrib/tag1quo/src/Adapter/Config/Config9.php
modules/contrib/tag1quo/src/Adapter/Core/Core.php
modules/contrib/tag1quo/src/Adapter/Core/Core6.php
modules/contrib/tag1quo/src/Adapter/Core/Core7.php
modules/contrib/tag1quo/src/Adapter/Core/Core8.php
modules/contrib/tag1quo/src/Adapter/Core/Core9.php
modules/contrib/tag1quo/src/Adapter/Extension/Extension.php
modules/contrib/tag1quo/src/Adapter/Extension/Extension8.php
modules/contrib/tag1quo/src/Adapter/Extension/Extension9.php
modules/contrib/tag1quo/src/Adapter/Form/FormState.php
modules/contrib/tag1quo/src/Adapter/Form/FormState8.php
modules/contrib/tag1quo/src/Adapter/Form/FormState9.php
modules/contrib/tag1quo/src/Adapter/Http/Client.php
modules/contrib/tag1quo/src/Adapter/Http/Client6.php
modules/contrib/tag1quo/src/Adapter/Http/Client7.php
modules/contrib/tag1quo/src/Adapter/Http/Client8.php
modules/contrib/tag1quo/src/Adapter/Http/Client9.php
modules/contrib/tag1quo/src/Adapter/Http/JsonResponse.php
modules/contrib/tag1quo/src/Adapter/Http/ParameterBag.php
modules/contrib/tag1quo/src/Adapter/Http/Request.php
modules/contrib/tag1quo/src/Adapter/Http/Response.php
modules/contrib/tag1quo/src/Adapter/Logger/Logger.php
modules/contrib/tag1quo/src/Adapter/Logger/Logger8.php
modules/contrib/tag1quo/src/Adapter/Logger/Logger9.php
modules/contrib/tag1quo/src/Adapter/Settings/Settings.php
modules/contrib/tag1quo/src/Adapter/Settings/Settings8.php
modules/contrib/tag1quo/src/Adapter/Settings/Settings9.php
modules/contrib/tag1quo/src/Adapter/State/State.php
modules/contrib/tag1quo/src/Adapter/State/State8.php
modules/contrib/tag1quo/src/Adapter/State/State9.php
modules/contrib/tag1quo/src/Controller/AdminController.php
modules/contrib/tag1quo/src/Form/AdminSettingsForm.php
modules/contrib/tag1quo/src/Form/AdminSettingsForm8.php
modules/contrib/tag1quo/src/Heartbeat.php
modules/contrib/tag1quo/src/VersionedClass.php
modules/contrib/tag1quo/tag1quo.6.install
modules/contrib/tag1quo/tag1quo.7.install
modules/contrib/tag1quo/tag1quo.8.install
modules/contrib/tag1quo/tag1quo.9.install
modules/contrib/tag1quo/tag1quo.drush.inc
modules/contrib/tag1quo/tag1quo.install
modules/contrib/tag1quo/tag1quo.module
modules/contrib/tag1quo/tests/modules/tag1quo_test/src/Controller/Tag1QuoTestController.php
modules/contrib/tag1quo/tests/modules/tag1quo_test/tag1quo_test.module
modules/contrib/tag1quo/tests/src/Functional/UiTest.php

29 files with changes
=====================

1) modules/contrib/tag1quo/tests/src/Functional/UiTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $settings['config']['tag1quo.settings']['api']['server'] = (object) [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/tag1quo/tag1quo.module:98

    ---------- begin diff ----------
@@ @@
  */
 function tag1quo_admin_review() {
   $build = AdminController::create()->review();
-  return drupal_render($build);
+  return \Drupal::service('renderer')->render($build);
 }

 /**
@@ @@
  */
 function tag1quo_admin_status() {
   $build = AdminController::create()->status();
-  return drupal_render($build);
+  return \Drupal::service('renderer')->render($build);
 }

 /**
    ----------- end diff -----------

Applied rules:
 * DrupalRenderRector
 * ArgumentRemoverRector


3) modules/contrib/tag1quo/src/Heartbeat.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo;

+use Drupal\tag1quo\Adapter\Config\Config;
 use Drupal\tag1quo\Adapter\Core\Core;
 use Drupal\tag1quo\Adapter\Http\JsonResponse;

@@ @@
   /**
    * Tag1 Quo settings config.
    *
-   * @var \Drupal\tag1quo\Adapter\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The Core adapter.
    *
-   * @var \Drupal\tag1quo\Adapter\Core\Core
+   * @var Core
    */
   protected $core;

@@ @@
   /**
    * Heartbeat constructor.
    *
-   * @param \Drupal\tag1quo\Adapter\Core\Core $core
+   * @param Core $core
    *   The Core adapter instance.
    */
   public function __construct(Core $core = NULL) {
@@ @@
   /**
    * Creates a new Heartbeat instance.
    *
-   * @param \Drupal\tag1quo\Adapter\Core\Core $core
+   * @param Core $core
    *   The Core adapter instance.
    *
    * @return static
@@ @@
    * @param array $headers
    *   Optional. Additional headers to set on the response.
    *
-   * @return \Drupal\tag1quo\Adapter\Http\JsonResponse
+   * @return JsonResponse
    */
   protected function errorResponse($message, $statusCode = 500, array $headers = array()) {
     return new JsonResponse($this->core->jsonEncode(array(
@@ @@
   /**
    * Sends the Heartbeat to Tag1 Quo.
    **
-   * @return \Drupal\tag1quo\Adapter\Http\JsonResponse
+   * @return JsonResponse
    *   A response from sending the data.
    */
   public function send() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/tag1quo/src/Form/AdminSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Form;

+use Drupal\tag1quo\Adapter\Config\Config;
 use Drupal\tag1quo\Adapter\Core\Core;
 use Drupal\tag1quo\Adapter\Form\FormState;
 use Drupal\tag1quo\Heartbeat;
@@ @@
   /**
    * The Core adapter.
    *
-   * @var \Drupal\tag1quo\Adapter\Core\Core
+   * @var Core
    */
   protected $core;

@@ @@
   /**
    * The Tag1 Quo configuration.
    *
-   * @var \Drupal\tag1quo\Adapter\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\tag1quo\Adapter\Form\FormState $formState
+   * @param FormState $formState
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\tag1quo\Adapter\Form\FormState $formState
+   * @param FormState $formState
    *   The form state.
    */
   public function validate(array $form, FormState $formState) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\tag1quo\Adapter\Form\FormState $formState
+   * @param FormState $formState
    *   The form state.
    */
   public function submit(array $form, FormState $formState) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tag1quo/src/Controller/AdminController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Controller;

+use Drupal\tag1quo\Adapter\Config\Config;
 use Drupal\tag1quo\Adapter\Core\Core;
 use Drupal\tag1quo\Heartbeat;
 use Drupal\tag1quo\VersionedClass;
@@ @@
   /**
    * The Core adapter.
    *
-   * @var \Drupal\tag1quo\Adapter\Core\Core
+   * @var Core
    */
   protected $core;

@@ @@
   /**
    * The Tag1 Quo configuration.
    *
-   * @var \Drupal\tag1quo\Adapter\Config\Config
+   * @var Config
    */
   protected $config;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tag1quo/src/Adapter/State/State9.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\State;

+use Drupal\Core\State\StateInterface;
 /**
  * Class State9.
  *
@@ @@
 class State9 extends State {

   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/tag1quo/src/Adapter/State/State8.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\State;

+use Drupal\Core\State\StateInterface;
 /**
  * Class State8.
  *
@@ @@
 class State8 extends State {

   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/tag1quo/src/Adapter/Logger/Logger9.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\Logger;

+use Psr\Log\LoggerInterface;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\tag1quo\Adapter\Core\Core;

@@ @@
   /**
    * The logger service, if it exists.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/tag1quo/src/Adapter/Logger/Logger8.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\Logger;

+use Psr\Log\LoggerInterface;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\tag1quo\Adapter\Core\Core;

@@ @@
   /**
    * The logger service, if it exists.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/tag1quo/src/Adapter/Logger/Logger.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * The Core adapter.
    *
-   * @var \Drupal\tag1quo\Adapter\Core\Core
+   * @var Core
    */
   protected $core;

@@ @@
   /**
    * Logger constructor.
    *
-   * @param \Drupal\tag1quo\Adapter\Core\Core $core
+   * @param Core $core
    *   A Core adapter instance.
    * @param string $channel
    *   The channel to log to.
@@ @@
   /**
    * Creates a new Logger instance.
    *
-   * @param \Drupal\tag1quo\Adapter\Core\Core $core
+   * @param Core $core
    *   A Core adapter instance.
    * @param string $channel
    *   The channel to log to.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/tag1quo/src/Adapter/Http/Request.php:22

    ---------- begin diff ----------
@@ @@
   const METHOD_CONNECT = 'CONNECT';

   /**
-   * @var \Drupal\tag1quo\Adapter\Http\ParameterBag
+   * @var ParameterBag
    */
   public $cookies;

@@ @@
   /**
    * The headers.
    *
-   * @var \Drupal\tag1quo\Adapter\Http\ParameterBag
+   * @var ParameterBag
    */
   public $headers;

@@ @@
   /**
    * The request options.
    *
-   * @var \Drupal\tag1quo\Adapter\Http\ParameterBag
+   * @var ParameterBag
    */
   public $options;

   /**
-   * @var \Drupal\tag1quo\Adapter\Http\ParameterBag
+   * @var ParameterBag
    */
   public $query;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/tag1quo/src/Adapter/Http/Client.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\Http;

+use Drupal\Core\TypedData\Type\UriInterface;
 use Drupal\tag1quo\Adapter\Core\Core;
 use Drupal\tag1quo\Adapter\Logger\Logger;
 use Drupal\tag1quo\VersionedClass;
@@ @@
  *
  * @internal This class is subject to change.
  *
- * @method Response|JsonResponse get(string|\Drupal\Core\TypedData\Type\UriInterface $uri, array $options = array())
- * @method Response|JsonResponse head(string|\Drupal\Core\TypedData\Type\UriInterface $uri, array $options = array())
- * @method Response|JsonResponse put(string|\Drupal\Core\TypedData\Type\UriInterface $uri, array $options = array())
- * @method Response|JsonResponse post(string|\Drupal\Core\TypedData\Type\UriInterface $uri, array $options = array())
- * @method Response|JsonResponse patch(string|\Drupal\Core\TypedData\Type\UriInterface $uri, array $options = array())
- * @method Response|JsonResponse delete(string|\Drupal\Core\TypedData\Type\UriInterface $uri, array $options = array())
+ * @method Response|JsonResponse get((string | UriInterface) $uri, array $options = [])
+ * @method Response|JsonResponse head((string | UriInterface) $uri, array $options = [])
+ * @method Response|JsonResponse put((string | UriInterface) $uri, array $options = [])
+ * @method Response|JsonResponse post((string | UriInterface) $uri, array $options = [])
+ * @method Response|JsonResponse patch((string | UriInterface) $uri, array $options = [])
+ * @method Response|JsonResponse delete((string | UriInterface) $uri, array $options = [])
  */
 abstract class Client extends VersionedClass {

@@ @@
   protected static $hasGzip;

   /**
-   * @var \Drupal\tag1quo\Adapter\Core\Core
+   * @var Core
    */
   protected $core;

@@ @@
   /**
    * Client constructor.
    *
-   * @param \Drupal\tag1quo\Adapter\Core\Core $core
+   * @param Core $core
    *   A Core adapter instance.
    */
   public function __construct(Core $core) {
@@ @@
   /**
    * Creates a new HTTP Client.
    *
-   * @param \Drupal\tag1quo\Adapter\Core\Core $core
+   * @param Core $core
    *   A Core adapter instance.
    *
    * @return static
@@ @@
    * @param array $headers
    *   The headers returned from the HTTP client.
    *
-   * @return \Drupal\tag1quo\Adapter\Http\JsonResponse|\Drupal\tag1quo\Adapter\Http\Response
+   * @return JsonResponse|Response
    *   A JSON response object (if returned response contained JSON) or a normal
    *   Response object otherwise.
    */
@@ @@
   /**
    * Perform the actual request.
    *
-   * @param \Drupal\tag1quo\Adapter\Http\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\tag1quo\Adapter\Http\Response
+   * @return Response
    *   A response object.
    */
   abstract protected function doRequest(Request $request);
@@ @@
   /**
    * Finalizes the request right before its about to be sent.
    *
-   * @param \Drupal\tag1quo\Adapter\Http\Request $request
+   * @param Request $request
    *   The Request object to finalize.
    */
   protected function finalizeRequest(Request $request) {
@@ @@
   /**
    * Perform the actual request, using cURL.
    *
-   * @param \Drupal\tag1quo\Adapter\Http\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\tag1quo\Adapter\Http\Response
+   * @return Response
    *   A response object.
    */
   protected function doCurlRequest(Request $request) {
@@ @@
    * @param array $options
    *   The options to pass along to the HTTP client.
    *
-   * @return \Drupal\tag1quo\Adapter\Http\Response
+   * @return Response
    *   A Response object.
    */
   public function request($method, $uri, array $options = array()) {
@@ @@
   /**
    * Prepares the request before it's sent.
    *
-   * @param \Drupal\tag1quo\Adapter\Http\Request $request
+   * @param Request $request
    *   The Request object.
    */
   protected function prepareRequest(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/tag1quo/src/Adapter/Form/FormState9.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\Form;

+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Markup;

 /**
@@ @@
  *
  * @internal This class is subject to change.
  *
- * @property \Drupal\Core\Form\FormStateInterface $formState
+ * @property FormStateInterface $formState
  */
 class FormState9 extends FormState {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/tag1quo/src/Adapter/Form/FormState8.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\Form;

+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Markup;

 /**
@@ @@
  *
  * @internal This class is subject to change.
  *
- * @property \Drupal\Core\Form\FormStateInterface $formState
+ * @property FormStateInterface $formState
  */
 class FormState8 extends FormState {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/tag1quo/src/Adapter/Form/FormState.php:12

    ---------- begin diff ----------
@@ @@
 class FormState extends VersionedClass {

   /**
-   * @var \Drupal\tag1quo\Adapter\Core\Core
+   * @var Core
    */
   protected $core;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/tag1quo/src/Adapter/Extension/Extension9.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\Extension;

+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
 /**
  * Class Extension9.
  *
@@ @@
   protected $infoExtension = '.info.yml';

   /**
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected static $schemaStore;

@@ @@
   /**
    * Retrieves the schema store.
    *
-   * @return \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @return KeyValueStoreInterface
    */
   protected function schemaStore() {
     if (static::$schemaStore === NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/tag1quo/src/Adapter/Extension/Extension8.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\Extension;

+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
 /**
  * Class Extension8.
  *
@@ @@
   protected $infoExtension = '.info.yml';

   /**
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected static $schemaStore;

@@ @@
   /**
    * Retrieves the schema store.
    *
-   * @return \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @return KeyValueStoreInterface
    */
   protected function schemaStore() {
     if (static::$schemaStore === NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/tag1quo/src/Adapter/Extension/Extension.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The Core adapter.
    *
-   * @var \Drupal\tag1quo\Adapter\Core\Core
+   * @var Core
    */
   protected static $core;

@@ @@
   /**
    * Retrieves the Core adapter.
    *
-   * @return \Drupal\tag1quo\Adapter\Core\Core
+   * @return Core
    */
   protected function core() {
     if (static::$core === NULL) {
@@ @@
    *   not.
    */
   public function exists() {
-    return (bool) drupal_get_path($this->getType(), $this->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+    return (bool) \Drupal::service('extension.path.resolver')->getPath($this->getType(), $this->getName());
   }

   public function getInfoFilename() {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/tag1quo/src/Adapter/Core/Core9.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\Core;

+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\Core\Render\ElementInfoManagerInterface;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\Messenger\MessengerInterface;
+use Drupal\Core\StringTranslation\TranslationInterface;
+use Drupal\Core\Routing\UrlGeneratorInterface;
+use Drupal\Core\Extension\ModuleExtensionList;
+use Drupal\Core\Extension\ThemeExtensionList;
+use Drupal\Core\GeneratedUrl;
+use Drupal\Core\Extension\ExtensionList;
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The Element Info service.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;

@@ @@
   /**
    * The File System service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The string translation service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $stringTranslation;

@@ @@
   /**
    * The URL Generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * The module extension list.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;

@@ @@
   /**
    * The theme extension list.
    *
-   * @var \Drupal\Core\Extension\ThemeExtensionList
+   * @var ThemeExtensionList
    */
   private $themeExtensionList;

@@ @@
    * @param string $uri
    *   Absolute or relative URI.
    *
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    *   The absolute URI.
    */
   public function absoluteUri($uri = '') {
@@ @@
   /**
    * Retrieves the DateFormatter service.
    *
-   * @return \Drupal\Core\Datetime\DateFormatterInterface
+   * @return DateFormatterInterface
    *   The DateFormatter service.
    */
   protected function dateFormatter() {
@@ @@
   /**
    * Retrieves the File System service.
    *
-   * @return \Drupal\Core\File\FileSystemInterface
+   * @return FileSystemInterface
    *   FileSystem service.
    */
   protected function fileSystem() {
@@ @@
    * {@inheritdoc}
    */
   public function getPath($type, $name) {
-    /** @var \Drupal\Core\Extension\ExtensionList $extensionList */
+    /** @var ExtensionList $extensionList */
     $extensionList = $this->service('extension.list.' . $type);
     return $extensionList->getPath($name);
   }
@@ @@
   /**
    * Gets the string translation service.
    *
-   * @return \Drupal\Core\StringTranslation\TranslationInterface
+   * @return TranslationInterface
    *   The string translation service.
    */
   protected function getStringTranslation() {
@@ @@
     try {
       /** @var \Drupal\markdown\MarkdownInterface $markdown */
       if (\Drupal::moduleHandler()->moduleExists('markdown') && ($markdown = $this->service('markdown'))) {
-        return $markdown->loadPath($path, drupal_get_path('module', 'tag1quo') . '/README.md');
+        return $markdown->loadPath($path, \Drupal::service('extension.list.module')->getPath('tag1quo') . '/README.md');
       }
     }
     catch (\Exception $e) {
@@ @@
   /**
    * Returns the messenger.
    *
-   * @return \Drupal\Core\Messenger\MessengerInterface
+   * @return MessengerInterface
    *   The messenger.
    */
   protected function messenger() {
@@ @@
   /**
    * Retrieves the module extension list.
    *
-   * @return \Drupal\Core\Extension\ModuleExtensionList
+   * @return ModuleExtensionList
    *   The module extension list.
    */
   protected function moduleExtensionList() {
@@ @@
    */
   public function publicUri() {
     if ($this->publicUri === NULL) {
-      /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */
+      /** @var StreamWrapperManagerInterface $stream_wrapper_manager */
       $stream_wrapper_manager = $this->service('stream_wrapper_manager');
       $stream_wrapper = $stream_wrapper_manager->getViaScheme('public');
       $this->publicUri = rtrim($stream_wrapper->getExternalUrl(), '/');
@@ @@
   /**
    * Provides a list of available themes.
    *
-   * @return \Drupal\Core\Extension\ThemeExtensionList
+   * @return ThemeExtensionList
    *   The theme extension list.
    */
   protected function themeExtensionList() {
@@ @@
   /**
    * Retrieves the URL Generator service.
    *
-   * @return \Drupal\Core\Routing\UrlGeneratorInterface
+   * @return UrlGeneratorInterface
    *   URL Generator service.
    */
   protected function urlGenerator() {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/tag1quo/src/Adapter/Core/Core8.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\Core;

+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\Core\Render\ElementInfoManagerInterface;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\Messenger\MessengerInterface;
+use Drupal\Core\StringTranslation\TranslationInterface;
+use Drupal\Core\Routing\UrlGeneratorInterface;
+use Drupal\Core\Extension\ExtensionList;
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
@@ @@
   protected $compatibility = 8;

   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The Element Info service.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;

@@ @@
   /**
    * The File System service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The string translation service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $stringTranslation;

@@ @@
   /**
    * The URL Generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * Retrieves the DateFormatter service.
    *
-   * @return \Drupal\Core\Datetime\DateFormatterInterface
+   * @return DateFormatterInterface
    */
   protected function dateFormatter() {
     if ($this->dateFormatter === NULL) {
@@ @@
   /**
    * Retrieves the File System service.
    *
-   * @return \Drupal\Core\File\FileSystemInterface
+   * @return FileSystemInterface
    */
   protected function fileSystem() {
     if ($this->fileSystem === NULL) {
@@ @@
    */
   public function getPath($type, $name) {
     // In 8.6.x, there is a dedicated extension list service.
-    /** @var \Drupal\Core\Extension\ExtensionList $extensionList */
+    /** @var ExtensionList $extensionList */
     if ($extensionList = $this->service('extension.list.' . $type)) {
       return $extensionList->getPath($name);
     }
@@ @@
   /**
    * Gets the string translation service.
    *
-   * @return \Drupal\Core\StringTranslation\TranslationInterface
+   * @return TranslationInterface
    *   The string translation service.
    */
   protected function getStringTranslation() {
@@ @@
     try {
       /** @var \Drupal\markdown\MarkdownInterface $markdown */
       if (\Drupal::moduleHandler()->moduleExists('markdown') && ($markdown = $this->service('markdown'))) {
-        return $markdown->loadPath($path, drupal_get_path('module', 'tag1quo') . '/README.md');
+        return $markdown->loadPath($path, \Drupal::service('extension.list.module')->getPath('tag1quo') . '/README.md');
       }
     }
     catch (\Exception $e) {
@@ @@
   /**
    * Retrieves the Messenger service.
    *
-   * @return \Drupal\Core\Messenger\MessengerInterface
+   * @return MessengerInterface
    */
   protected function messenger() {
     if ($this->messenger === NULL) {
@@ @@

   public function publicUri() {
     if ($this->publicUri === NULL) {
-      /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */
+      /** @var StreamWrapperManagerInterface $stream_wrapper_manager */
       $stream_wrapper_manager = $this->service('stream_wrapper_manager');
       $stream_wrapper = $stream_wrapper_manager->getViaScheme('public');
       $this->publicUri = rtrim($stream_wrapper->getExternalUrl(), '/');
@@ @@
   /**
    * Retrieves the URL Generator service.
    *
-   * @return \Drupal\Core\Routing\UrlGeneratorInterface
+   * @return UrlGeneratorInterface
    */
   protected function urlGenerator() {
     if ($this->urlGenerator === NULL) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/tag1quo/src/Adapter/Core/Core7.php:63

    ---------- begin diff ----------
@@ @@
     // We send the entire system table to make it possible to properly match
     // all modules and themes with the proper upstream Drupal projects.
     $extensions = array();
-    $result = \db_query('SELECT * FROM {system}');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->query('SELECT * FROM {system}');
     while ($item = $result->fetchObject()) {
       $extension = Extension::create($item->name, $item);
       if ($extension->exists()) {
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/tag1quo/src/Adapter/Core/Core6.php:74

    ---------- begin diff ----------
@@ @@
     // We send the entire system table to make it possible to properly match
     // all modules and themes with the proper upstream Drupal projects.
     $extensions = array();
-    $result = db_query('SELECT * FROM {system}');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->query('SELECT * FROM {system}');
     while ($item = db_fetch_object($result)) {
       $extension = Extension::create($item->name, $item);
       if ($extension->exists()) {
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/tag1quo/src/Adapter/Core/Core.php:70

    ---------- begin diff ----------
@@ @@
   /**
    * An array of Cache bins.
    *
-   * @var \Drupal\tag1quo\Adapter\Cache\Cache[]
+   * @var Cache[]
    */
   protected $cacheBins;

@@ @@
   /**
    * A collection of Config adapters.
    *
-   * @var \Drupal\tag1quo\Adapter\Config\Config[]
+   * @var Config[]
    */
   protected $config;

@@ @@
   /**
    * An array of Logger adapters.
    *
-   * @var \Drupal\tag1quo\Adapter\Logger\Logger[]
+   * @var Logger[]
    */
   protected $loggers;

@@ @@
   protected $gitBinary;

   /**
-   * @var \Drupal\tag1quo\Adapter\Http\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * The Settings adapter.
    *
-   * @var \Drupal\tag1quo\Adapter\Settings\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * The State adapter.
    *
-   * @var \Drupal\tag1quo\Adapter\State\State
+   * @var State
    */
   protected $state;

@@ @@
    *   The cache bin to use. If not provided, the default bin for the
    *   version of core will be used.
    *
-   * @return \Drupal\tag1quo\Adapter\Cache\Cache
+   * @return Cache
    */
   public function cache($bin = NULL) {
     if ($bin === NULL) {
@@ @@
    * @param string $name
    *   A config collection to retrieve.
    *
-   * @return \Drupal\tag1quo\Adapter\Config\Config
+   * @return Config
    */
   public function config($name) {
     if (!isset($this->config[$name])) {
@@ @@
   }

   public function getPath($type, $name) {
-    return drupal_get_path($type, $name);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+    return \Drupal::service('extension.path.resolver')->getPath($type, $name);
   }

   /**
@@ @@
    * {@inheritdoc}
    */
   public function setMessage($message, $type = 'status', $repeat = TRUE) {
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // This needs to be replaced, but Rector was not yet able to replace this because the type of message was set with a variable. If you need to continue to use a variable, you might consider using a switch statement.
+    // @noRector
     \drupal_set_message($message, $type, $repeat);
     return $this;
   }
@@ @@
   /**
    * The Settings adapter.
    *
-   * @return \Drupal\tag1quo\Adapter\Settings\Settings
+   * @return Settings
    */
   public function settings() {
     if ($this->settings === NULL) {
@@ @@
   /**
    * The State adapter.
    *
-   * @return \Drupal\tag1quo\Adapter\State\State
+   * @return State
    */
   public function state() {
     if (!isset($this->state)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/tag1quo/src/Adapter/Config/Config9.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\Config;

+use Drupal\Core\Config\ImmutableConfig;
 /**
  * Class Config9.
  *
@@ @@
   /**
    * An ImmutableConfig object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/tag1quo/src/Adapter/Config/Config8.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tag1quo\Adapter\Config;

+use Drupal\Core\Config\ImmutableConfig;
 /**
  * Class Config8.
  *
@@ @@
   /**
    * An ImmutableConfig object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/tag1quo/src/Adapter/Config/Config7.php:13

    ---------- begin diff ----------
@@ @@
    */
   public function delete() {
     global $conf;
-    db_delete('variable')->condition('name', $this->name . '_', 'LIKE')->execute();
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->delete('variable')->condition('name', $this->name . '_', 'LIKE')->execute();
     cache_clear_all('variables', 'cache_bootstrap');
     foreach (array_keys($conf) as $name) {
       if (strpos($name, $this->name . '_') === 0) {
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/tag1quo/src/Adapter/Config/Config6.php:51

    ---------- begin diff ----------
@@ @@
    */
   public function delete() {
     global $conf;
-    db_query("DELETE FROM {variable} WHERE name LIKE '%s\_%'", $this->name);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->query("DELETE FROM {variable} WHERE name LIKE '%s\_%'", $this->name);
     cache_clear_all('variables', 'cache');
     foreach (array_keys($conf) as $name) {
       if (strpos($name, $this->name . '_') === 0) {
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/tag1quo/src/Adapter/Cache/Cache9.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The Cache bin.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/tag1quo/src/Adapter/Cache/Cache8.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The Cache bin.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 29 files have been changed by Rector                                      

