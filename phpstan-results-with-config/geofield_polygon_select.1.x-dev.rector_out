modules/contrib/geofield_polygon_select/geofield_polygon_select.module
modules/contrib/geofield_polygon_select/src/Entity/PolygonFeatureCollection.php
modules/contrib/geofield_polygon_select/src/Entity/PolygonFeatureCollectionInterface.php
modules/contrib/geofield_polygon_select/src/FeatureCollectionStore.php
modules/contrib/geofield_polygon_select/src/FeatureCollectionStoreInterface.php
modules/contrib/geofield_polygon_select/src/Form/PolygonFeatureCollectionDeleteForm.php
modules/contrib/geofield_polygon_select/src/Form/PolygonFeatureCollectionForm.php
modules/contrib/geofield_polygon_select/src/Plugin/Field/FieldFormatter/PolygonSelectFieldFormatter.php
modules/contrib/geofield_polygon_select/src/Plugin/Field/FieldType/GeofieldPolygonItem.php
modules/contrib/geofield_polygon_select/src/Plugin/Field/FieldWidget/PolygonSelectFieldWidget.php
modules/contrib/geofield_polygon_select/src/PolygonFeatureCollectionHtmlRouteProvider.php
modules/contrib/geofield_polygon_select/src/PolygonFeatureCollectionListBuilder.php
modules/contrib/geofield_polygon_select/src/PolygonFeatureCollectionWidgetSettingsListBuilder.php
modules/contrib/geofield_polygon_select/src/PolygonSelectFieldSelectedEvent.php

5 files with changes
====================

1) modules/contrib/geofield_polygon_select/src/PolygonSelectFieldSelectedEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geofield_polygon_select;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
   /**
    * The Entity that is storing the polygon.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * PolygonSelectFieldSelectedEvent constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The Entity that is storing the polygon.
    * @param string $field_name
    *   The field name that holds the polygons.
@@ @@
   /**
    * Return entity that is storing the polygon.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Return entity interface.
    */
   public function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/geofield_polygon_select/src/Plugin/Field/FieldWidget/PolygonSelectFieldWidget.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The service to fetch features from the feature collections entities.
    *
-   * @var \Drupal\geofield_polygon_select\FeatureCollectionStore
+   * @var FeatureCollectionStore
    */
   protected $featureCollectionStore;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\geofield\GeoPHP\GeoPHPInterface $geophp_wrapper
+   * @param GeoPHPInterface $geophp_wrapper
    *   The geoPhpWrapper.
-   * @param \Drupal\geofield\WktGeneratorInterface $wkt_generator
+   * @param WktGeneratorInterface $wkt_generator
    *   The WKT format Generator service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The Event dispatcher.
-   * @param \Drupal\geofield_polygon_select\FeatureCollectionStore $feature_collection_store
+   * @param FeatureCollectionStore $feature_collection_store
    *   The service to fetch features from the feature collections entities.
    */
   public function __construct($plugin_id,
@@ @@
   /**
    * Get the options from list of polygon feature collections entities created.
    *
-   * @var \Drupal\geofield_polygon_select\Entity\PolygonFeatureCollectionInterface $collection_entity
+   * @var PolygonFeatureCollectionInterface $collection_entity
    *   The collection entity to extract options.
    */
   private function optionsFromJson(PolygonFeatureCollectionInterface $collection_entity) {
@@ @@
     $entity = $form_state->getBuildInfo()["callback_object"]->getEntity();
     $field = $this->fieldDefinition->getName();
     $event = new PolygonSelectFieldSelectedEvent($entity, $field, $values);
-    $this->eventDispatcher->dispatch(PolygonSelectFieldSelectedEvent::SUBMIT, $event);
+    $this->eventDispatcher->dispatch($event, PolygonSelectFieldSelectedEvent::SUBMIT);
     return $values;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/geofield_polygon_select/src/Plugin/Field/FieldType/GeofieldPolygonItem.php:3

    ---------- begin diff ----------
@@ @@

 // Use Drupal\Core\Field\FieldDefinitionInterface;
 // use Drupal\Core\Field\FieldItemBase;.
+use Drupal\Core\Field\TypedData\FieldItemDataDefinition;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
   public function fieldSettingsForm(array $form, FormStateInterface $form_state) {
     $element = [];
     if ($this->getFieldDefinition()->getType() == "geofield_polygon_item") {
-      /** @var \Drupal\Core\Field\TypedData\FieldItemDataDefinition  **/
+      /** @var FieldItemDataDefinition **/
       $definition = $this->getFieldDefinition();
       // Add geofield_target only if we are not working with geofield fieldtype.
       $entity_fields = \Drupal::service('entity_field.manager')->getFieldDefinitions($this->getEntity()->getEntityTypeId(), $this->getEntity()->bundle());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/geofield_polygon_select/src/Plugin/Field/FieldFormatter/PolygonSelectFieldFormatter.php:63

    ---------- begin diff ----------
@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/geofield_polygon_select/src/FeatureCollectionStore.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 5 files have been changed by Rector                                       

