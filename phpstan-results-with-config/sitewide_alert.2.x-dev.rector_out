modules/contrib/sitewide_alert/modules/sitewide_alert_block/src/Plugin/Block/SitewideAlertBlock.php
modules/contrib/sitewide_alert/sitewide_alert.install
modules/contrib/sitewide_alert/sitewide_alert.module
modules/contrib/sitewide_alert/src/AlertStyleProvider.php
modules/contrib/sitewide_alert/src/Controller/SitewideAlertController.php
modules/contrib/sitewide_alert/src/Controller/SitewideAlertsController.php
modules/contrib/sitewide_alert/src/Entity/SitewideAlert.php
modules/contrib/sitewide_alert/src/Entity/SitewideAlertInterface.php
modules/contrib/sitewide_alert/src/Entity/SitewideAlertViewsData.php
modules/contrib/sitewide_alert/src/Form/SitewideAlertConfigForm.php
modules/contrib/sitewide_alert/src/Form/SitewideAlertDeleteForm.php
modules/contrib/sitewide_alert/src/Form/SitewideAlertForm.php
modules/contrib/sitewide_alert/src/Form/SitewideAlertRevisionDeleteForm.php
modules/contrib/sitewide_alert/src/Form/SitewideAlertRevisionRevertForm.php
modules/contrib/sitewide_alert/src/Form/SitewideAlertRevisionRevertTranslationForm.php
modules/contrib/sitewide_alert/src/Form/SitewideAlertSettingsForm.php
modules/contrib/sitewide_alert/src/Plugin/Validation/Constraint/ScheduledDateProvidedConstraint.php
modules/contrib/sitewide_alert/src/Plugin/Validation/Constraint/ScheduledDateProvidedConstraintValidator.php
modules/contrib/sitewide_alert/src/SitewideAlertAccessControlHandler.php
modules/contrib/sitewide_alert/src/SitewideAlertHtmlRouteProvider.php
modules/contrib/sitewide_alert/src/SitewideAlertListBuilder.php
modules/contrib/sitewide_alert/src/SitewideAlertManager.php
modules/contrib/sitewide_alert/src/SitewideAlertRenderer.php
modules/contrib/sitewide_alert/src/SitewideAlertRendererInterface.php
modules/contrib/sitewide_alert/src/SitewideAlertStorageInterface.php
modules/contrib/sitewide_alert/src/SitewideAlertTranslationHandler.php
modules/contrib/sitewide_alert/tests/src/Functional/LoadTest.php
modules/contrib/sitewide_alert/tests/src/Functional/SitewideAlertControllerTest.php
modules/contrib/sitewide_alert/tests/src/Functional/SitewideAlertLimitTest.php
modules/contrib/sitewide_alert/tests/src/Functional/SitewideAlertTest.php
modules/contrib/sitewide_alert/tests/src/Kernel/SitewideAlertEntityTest.php
modules/contrib/sitewide_alert/tests/src/Kernel/SitewideAlertKernelTestBase.php
modules/contrib/sitewide_alert/tests/src/Traits/SitewideAlertTestTrait.php

22 files with changes
=====================

1) modules/contrib/sitewide_alert/tests/src/Traits/SitewideAlertTestTrait.php:18

    ---------- begin diff ----------
@@ @@
    * @param array $values
    *   Field values.
    *
-   * @return \Drupal\sitewide_alert\Entity\SitewideAlertInterface
+   * @return SitewideAlertInterface
    *   Created alert.
    */
   protected function createSiteWideAlert(array $values = []): SitewideAlertInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/sitewide_alert/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sitewide_alert\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/sitewide_alert/src/SitewideAlertStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Sitewide Alert revision IDs for a specific Sitewide Alert.
    *
-   * @param \Drupal\sitewide_alert\Entity\SitewideAlertInterface $entity
+   * @param SitewideAlertInterface $entity
    *   The Sitewide Alert entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Sitewide Alert author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\sitewide_alert\Entity\SitewideAlertInterface $entity
+   * @param SitewideAlertInterface $entity
    *   The Sitewide Alert entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Sitewide Alert with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/sitewide_alert/src/SitewideAlertRenderer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sitewide_alert;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\AdminContext;
 use Drupal\Core\Cache\CacheableMetadata;
@@ @@
   /**
    * Module configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The admin context service.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;

@@ @@
   /**
    * The current active user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   private AccountProxyInterface $currentUser;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory service.
-   * @param \Drupal\Core\Routing\AdminContext $adminContext
+   * @param AdminContext $adminContext
    *   Admin context service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
    */
   public function __construct(ConfigFactoryInterface $configFactory, AdminContext $adminContext, AccountProxyInterface $currentUser) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/sitewide_alert/src/SitewideAlertManager.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sitewide_alert;

+use Drupal\sitewide_alert\Entity\SitewideAlertInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, TimeInterface $time) {
@@ @@
   /**
    * Returns all active sitewide alerts.
    *
-   * @return \Drupal\sitewide_alert\Entity\SitewideAlertInterface[]
+   * @return SitewideAlertInterface[]
    *   Array of active sitewide alerts indexed by their ids.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function activeSitewideAlerts(): array {
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface[] $sitewideAlerts */
+    /** @var SitewideAlertInterface[] $sitewideAlerts */
     $sitewideAlerts = $this->entityTypeManager
       ->getStorage('sitewide_alert')
       ->loadByProperties(['status' => 1]);
@@ @@
   /**
    * Returns all active and currently visible sitewide alerts.
    *
-   * @return \Drupal\sitewide_alert\Entity\SitewideAlertInterface[]
+   * @return SitewideAlertInterface[]
    *   Array of active sitewide alerts indexed by their ids.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function activeVisibleSitewideAlerts(): array {
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface[] $activeVisibleSitewideAlerts */
+    /** @var SitewideAlertInterface[] $activeVisibleSitewideAlerts */
     $activeVisibleSitewideAlerts = $this->activeSitewideAlerts();

     // Remove any sitewide alerts that are scheduled and it is not time to show them.
@@ @@
   /**
    * The time of the next scheduled change of alerts.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   Time of next scheduled change of alerts; null if nothing is scheduled to change.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function nextScheduledChange(): ?DrupalDateTime {
     $nextExpiring = $this->soonestExpiringVisibleScheduledAlertDateTime();
@@ @@
   /**
    * Determines the datetime of the soonest expiring visible scheduled alert.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   The datetime of the soonest expiring scheduled alert; null if none of the alerts are scheduled to expire.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function soonestExpiringVisibleScheduledAlertDateTime(): ?DrupalDateTime {
     /** @var \Drupal\Core\Datetime\DrupalDateTime||null $soonestScheduledEndDate */
@@ @@
   /**
    * Determines the datetime of the soonest expiring scheduled alert.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   The datetime of the soonest expiring scheduled alert; null if none of the alerts are scheduled to expire.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function soonestAppearingScheduledAlertDateTime(): ?DrupalDateTime {
-    /** @var \Drupal\Core\Datetime\DrupalDateTime|null $soonestScheduledEndDate */
+    /** @var DrupalDateTime|null $soonestScheduledEndDate */
     $soonestScheduledStartDate = NULL;

     foreach ($this->activeSitewideAlerts() as $sitewideAlert) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/sitewide_alert/src/SitewideAlertListBuilder.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sitewide_alert;

+use Drupal\sitewide_alert\Entity\SitewideAlert;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlert $entity */
+    /** @var SitewideAlert $entity */
     $row['name'] = Link::createFromRoute(
       $entity->label(),
       'entity.sitewide_alert.canonical',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/sitewide_alert/src/SitewideAlertHtmlRouteProvider.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type): ?Route {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type): ?Route {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type): ?Route {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type): ?Route {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type): ?Route {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type): ?Route {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/sitewide_alert/src/SitewideAlertAccessControlHandler.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sitewide_alert;

+use Drupal\sitewide_alert\Entity\SitewideAlertInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $entity */
+    /** @var SitewideAlertInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/sitewide_alert/src/Plugin/Validation/Constraint/ScheduledDateProvidedConstraintValidator.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sitewide_alert\Plugin\Validation\Constraint;

+use Symfony\Component\Validator\Context\ExecutionContextInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;

@@ @@
   /**
    * Validator 2.5 and upwards compatible execution context.
    *
-   * @var \Symfony\Component\Validator\Context\ExecutionContextInterface
+   * @var ExecutionContextInterface
    */
   protected $context;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/sitewide_alert/src/Form/SitewideAlertSettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/sitewide_alert/src/Form/SitewideAlertRevisionRevertTranslationForm.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new SitewideAlertRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Sitewide Alert storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager, TimeInterface $time) {
@@ @@
   protected function prepareRevertedRevision(SitewideAlertInterface $revision, FormStateInterface $form_state): SitewideAlertInterface {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $latest_revision */
+    /** @var SitewideAlertInterface $latest_revision */
     $latest_revision = $this->sitewideAlertStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/sitewide_alert/src/Form/SitewideAlertRevisionRevertForm.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The Sitewide Alert revision.
    *
-   * @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface
+   * @var SitewideAlertInterface
    */
   protected $revision;

@@ @@
   /**
    * The Sitewide Alert storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $sitewideAlertStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new SitewideAlertRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Sitewide Alert storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, TimeInterface $time) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\sitewide_alert\Entity\SitewideAlertInterface $revision
+   * @param SitewideAlertInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\sitewide_alert\Entity\SitewideAlertInterface
+   * @return SitewideAlertInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(SitewideAlertInterface $revision, FormStateInterface $form_state): SitewideAlertInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/sitewide_alert/src/Form/SitewideAlertRevisionDeleteForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sitewide_alert\Form;

+use Drupal\sitewide_alert\Entity\SitewideAlertInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The Sitewide Alert revision.
    *
-   * @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface
+   * @var SitewideAlertInterface
    */
   protected $revision;

@@ @@
   /**
    * The Sitewide Alert storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $sitewideAlertStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new SitewideAlertRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   Drupal's date formatter.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection, DateFormatterInterface $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/sitewide_alert/src/Form/SitewideAlertForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sitewide_alert\Form;

+use Drupal\sitewide_alert\Entity\SitewideAlertInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
   /**
    * Constructs a new SitewideAlertForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user account.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, AccountProxyInterface $account) {
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state): array {
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $entity */
+    /** @var SitewideAlertInterface $entity */
     $entity = $this->entity;
     $form = parent::buildForm($form, $form_state);

@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $entity */
+    /** @var SitewideAlertInterface $entity */
     $entity = $this->entity;

     // Set the dismissal timestamp.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/sitewide_alert/src/Form/SitewideAlertConfigForm.php:16

    ---------- begin diff ----------
@@ @@
 class SitewideAlertConfigForm extends ConfigFormBase {

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private ModuleHandlerInterface $moduleHandler;

@@ @@
   /**
    * SitewideAlertConfigForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler for determining which modules are installed.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $moduleHandler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/sitewide_alert/src/Entity/SitewideAlertInterface.php:81

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the start date of this Sitewide Alert.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   The date when this alert is scheduled to start, null otherwise;
    */
   public function getScheduledStartDateTime(): ?DrupalDateTime;
@@ @@
   /**
    * Gets the end date of this Sitewide Alert.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   The date when this alert is scheduled to end, null otherwise;
    */
   public function getScheduledEndDateTime(): ?DrupalDateTime;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/sitewide_alert/src/Controller/SitewideAlertsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sitewide_alert\Controller;

+use Symfony\Component\HttpFoundation\JsonResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

   /**
-   * @var \Drupal\sitewide_alert\SitewideAlertManager
+   * @var SitewideAlertManager
    */
   private $sitewideAlertManager;

@@ @@
   /**
    * Constructs a new SitewideAlertsController.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\sitewide_alert\SitewideAlertManager $sitewideAlertManager
+   * @param SitewideAlertManager $sitewideAlertManager
    *   The sitewide alert manager.
    */
   public function __construct(RendererInterface $renderer, SitewideAlertManager $sitewideAlertManager) {
@@ @@
   /**
    * Load.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Return Hello string.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function load() {
     $response = new CacheableJsonResponse([]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/sitewide_alert/src/Controller/SitewideAlertController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sitewide_alert\Controller;

+use Drupal\Core\Render\Renderer;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a new SitewideAlertController.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer) {
@@ @@
    * @return array
    *   An array suitable for drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow(int $sitewide_alert_revision): array {
     $sitewide_alert = $this->entityTypeManager()->getStorage('sitewide_alert')
@@ @@
    * @param int $sitewide_alert_revision
    *   The Sitewide Alert revision ID.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle(int $sitewide_alert_revision): TranslatableMarkup {
     $sitewide_alert = $this->entityTypeManager()->getStorage('sitewide_alert')
@@ @@
   /**
    * Generates an overview table of older revisions of a Sitewide Alert.
    *
-   * @param \Drupal\sitewide_alert\Entity\SitewideAlertInterface $sitewide_alert
+   * @param SitewideAlertInterface $sitewide_alert
    *   A Sitewide Alert object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(SitewideAlertInterface $sitewide_alert): array {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $revision */
+      /** @var SitewideAlertInterface $revision */
       $revision = $sitewide_alert_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/sitewide_alert/src/AlertStyleProvider.php:45

    ---------- begin diff ----------
@@ @@
    * @param string $class
    *   Class name to look up.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Renderable label for class.
    */
   public static function alertStyleName(string $class): TranslatableMarkup {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/sitewide_alert/sitewide_alert.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\sitewide_alert\Entity\SitewideAlertInterface;
 /**
  * @file
  * Contains sitewide_alert.module.
@@ @@
  * Prepares sitewide alert variables for twig template.
  */
 function template_preprocess_sitewide_alert(&$variables) {
-  /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $sitewideAlert */
+  /** @var SitewideAlertInterface $sitewideAlert */
   $sitewideAlert = $variables['elements']['#sitewide_alert'];
   $variables['sitewide_alert'] = $sitewideAlert;

@@ @@
  */
 function sitewide_alert_theme_suggestions_sitewide_alert(array $variables) {
   $suggestions = [];
-  /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $sitewideAlert */
+  /** @var SitewideAlertInterface $sitewideAlert */
   $sitewideAlert = $variables['elements']['#sitewide_alert'];

   $suggestions[] = 'sitewide_alert__' . $sitewideAlert->getStyle();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


21) modules/contrib/sitewide_alert/sitewide_alert.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\ContentEntityType;
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
+use Drupal\Core\Field\BaseFieldDefinition;
 /**
  * @file
  * Install, update and uninstall functions for the sitewide_alert module.
@@ @@
  */
 function _sitewide_alert_rename_metadata_key(string $entity_type_id, string $target_field_name): void {
   // Change the Revision metadata key in the entity type.
-  /** @var \Drupal\Core\Entity\ContentEntityType $entity_type */
+  /** @var ContentEntityType $entity_type */
   $entity_type = \Drupal::entityDefinitionUpdateManager()->getEntityType($entity_type_id);
   $metadata_key = 'revision_log_message';
   $metadata_key_value = $entity_type->getRevisionMetadataKey($metadata_key);
@@ @@
   }
   // Set the metadata key value.
   $entity_type->setRevisionMetadataKey($metadata_key, $target_field_name);
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $schema_repository */
   $schema_repository = \Drupal::service('entity.last_installed_schema.repository');
   // Store the changes in the last installed definition.
   $schema_repository->setLastInstalledDefinition($entity_type);
@@ @@
  *   The target field name.
  */
 function _sitewide_alert_rename_field_storage_definition(string $entity_type_id, string $current_field_name, string $target_field_name): void {
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $schema_repository */
   $schema_repository = \Drupal::service('entity.last_installed_schema.repository');
   $field_storage_definitions = $schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);
   $field_definition_changed = FALSE;
-  /** @var \Drupal\Core\Field\BaseFieldDefinition $target_field_definition */
+  /** @var BaseFieldDefinition $target_field_definition */
   $target_field_definition = NULL;
   if (isset($field_storage_definitions[$current_field_name])) {
     $target_field_definition = $field_storage_definitions[$current_field_name];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


22) modules/contrib/sitewide_alert/modules/sitewide_alert_block/src/Plugin/Block/SitewideAlertBlock.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The alert placeholder rendering service.
    *
-   * @var \Drupal\sitewide_alert\SitewideAlertRendererInterface
+   * @var SitewideAlertRendererInterface
    */
   protected $renderer;

@@ @@
    *   Block plugin id.
    * @param mixed $plugin_definition
    *   Block plugin configuration.
-   * @param \Drupal\sitewide_alert\SitewideAlertRendererInterface $renderer
+   * @param SitewideAlertRendererInterface $renderer
    *   Alert placeholder rendering service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, SitewideAlertRendererInterface $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 22 files have been changed by Rector                                      

