modules/contrib/paragraphs_grid/paragraphs_grid.install
modules/contrib/paragraphs_grid/paragraphs_grid.module
modules/contrib/paragraphs_grid/src/Entity/GridEntity.php
modules/contrib/paragraphs_grid/src/Entity/GridEntityInterface.php
modules/contrib/paragraphs_grid/src/Form/ParagraphsGridConfigForm.php
modules/contrib/paragraphs_grid/src/Plugin/Field/FieldFormatter/GridFieldFormatter.php
modules/contrib/paragraphs_grid/src/Plugin/Field/FieldFormatter/ParagraphsGridFormatter.php
modules/contrib/paragraphs_grid/src/Plugin/Field/FieldType/GridFieldType.php
modules/contrib/paragraphs_grid/src/Plugin/Field/FieldWidget/GridWidget.php

5 files with changes
====================

1) modules/contrib/paragraphs_grid/src/Plugin/Field/FieldWidget/GridWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_grid\Plugin\Field\FieldWidget;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Entity\EntityDisplayRepository;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   /**
    * The paragraphs_grid settings from config form used for the site.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $moduleConfig;

@@ @@
   /**
    * The grid config entity used for the site.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $gridConfig;

@@ @@
   /**
    * The current users account proxy.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity display repository from drupal.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepository
+   * @var EntityDisplayRepository
    */
   protected $entityDisplayRepository;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   Drupal config factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Current Drupal user.
-   * @param \Drupal\Core\Entity\EntityDisplayRepository $entity_display_repository
+   * @param EntityDisplayRepository $entity_display_repository
    *   Entity display repository, to get view modes by bundle.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/paragraphs_grid/src/Plugin/Field/FieldType/GridFieldType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_grid\Plugin\Field\FieldType;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\Random;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemBase;
@@ @@
   /**
    * The module config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $moduleConfig;

@@ @@
   /**
    * The configured grid_entity.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $gridConfig;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/paragraphs_grid/src/Plugin/Field/FieldFormatter/ParagraphsGridFormatter.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The entity display repository.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, LoggerChannelFactoryInterface $logger_factory, EntityDisplayRepositoryInterface $entity_display_repository, ConfigFactory $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/paragraphs_grid/src/Form/ParagraphsGridConfigForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_grid\Form;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\paragraphs_grid\Entity\GridEntity;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The great and only Entity-Type-Manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The great and only EntityType Manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ @@
   /**
    * Returns grid entities as an array.
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
+   * @return array|EntityInterface[]
    *   Grid entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getGrids() {
     if (!$this->grids) {
@@ @@
    * @return array
    *   The grids as select options.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getGridTypeOptions() {
     $options = [];
     foreach ($this->getGrids() as $grid) {
-      /** @var \Drupal\paragraphs_grid\Entity\GridEntity $grid */
+      /** @var GridEntity $grid */
       $options['paragraphs_grid.grid_entity.' . $grid->id()] = $grid->label();
     }
     return $options;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $field_map = $this->entityFieldManager->getFieldMapByFieldType('grid_field_type');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/paragraphs_grid/paragraphs_grid.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\paragraphs\Entity\Paragraph;
+use Drupal\Core\Field\FieldItemListInterface;
 /**
  * @file
  * Contains paragraphs_grid.module.
@@ @@
 function paragraphs_grid_theme_registry_alter(&$theme_registry) {
   $theme_registry['field__entity_reference_revisions'] = $theme_registry['field'];
   $theme_registry['field__entity_reference_revisions']['template'] = 'field--paragraphs-grid-formatter';
-  $theme_registry['field__entity_reference_revisions']['path'] = drupal_get_path('module', 'paragraphs_grid') . '/templates';
+  $theme_registry['field__entity_reference_revisions']['path'] = \Drupal::service('extension.list.module')->getPath('paragraphs_grid') . '/templates';
 }

 /**
@@ @@
  */
 function paragraphs_grid_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
   if ($entity->getEntityTypeId() == 'paragraph' && $view_mode != 'preview') {
-    /** @var \Drupal\paragraphs\Entity\Paragraph $entity */
+    /** @var Paragraph $entity */
     // Find grid_field_type field, get set view mode and change the view mode.
     $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity->getEntityTypeId(), $entity->bundle());
     foreach ($fields as $field_name => $field) {
@@ @@
 /**
  * Get active page field.
  *
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   The Entity which should be checked.
  *
- * @return \Drupal\Core\Field\FieldItemListInterface|null
+ * @return FieldItemListInterface|null
  *   Return the field or null.
  */
 function _paragraphs_grid_get_field_by_type(FieldableEntityInterface $entity, $type) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

