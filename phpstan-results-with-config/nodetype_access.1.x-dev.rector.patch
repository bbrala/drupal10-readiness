diff --git a/nodetype_access.info.yml b/nodetype_access.info.yml
index f89793c..9ddaac3 100644
--- a/nodetype_access.info.yml
+++ b/nodetype_access.info.yml
@@ -1,6 +1,6 @@
 name: 'Nodetype Access'
 type: module
-core_version_requirement: '^8.8 || ^9'
+core_version_requirement: ^8.8 || ^9 || ^10
 description: 'Provides view permissions per nodetype.'
 package: 'Access control'
 dependencies:
diff --git a/nodetype_access.module b/nodetype_access.module
index 7522bef..b4892c5 100644
--- a/nodetype_access.module
+++ b/nodetype_access.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\nodetype_access\NodeTypeAccessService;
 /**
  * @file
  *   Node access module file.
@@ -13,7 +14,7 @@ use Drupal\node\NodeInterface;
  * Implement hook_node_access().
  */
 function nodetype_access_node_access(NodeInterface $node, $op, AccountInterface $account) {
-  /** @var \Drupal\nodetype_access\NodeTypeAccessService $service */
+  /** @var NodeTypeAccessService $service */
   $service = \Drupal::service('nodetype_access.service');
   $accessResult = $service->hookNodeAccess($node, $op, $account);
   return $accessResult;
@@ -23,13 +24,13 @@ function nodetype_access_node_access(NodeInterface $node, $op, AccountInterface
  * Implement hook_query_TAG_alter().
  */
 function nodetype_access_query_node_access_alter(AlterableInterface $query) {
-  /** @var \Drupal\nodetype_access\NodeTypeAccessService $service */
+  /** @var NodeTypeAccessService $service */
   $service = \Drupal::service('nodetype_access.service');
   $service->hookQueryNodeAccessAlter($query);
 }
 
 function nodetype_access_permissions_callback() {
-  /** @var \Drupal\nodetype_access\NodeTypeAccessService $service */
+  /** @var NodeTypeAccessService $service */
   $service = \Drupal::service('nodetype_access.service');
   return $service->permissions();
 }
diff --git a/src/NodeTypeAccessService.php b/src/NodeTypeAccessService.php
index 23aa7e1..ae957d0 100644
--- a/src/NodeTypeAccessService.php
+++ b/src/NodeTypeAccessService.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\nodetype_access;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Drupal\Core\Database\Query\SelectInterface;
@@ -12,14 +16,14 @@ use Drupal\node\NodeInterface;
 class NodeTypeAccessService {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * NodetypeAccessService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    */
   public function __construct(EntityTypeBundleInfoInterface $entityTypeBundleInfo) {
     $this->entityTypeBundleInfo = $entityTypeBundleInfo;
@@ -72,11 +76,11 @@ class NodeTypeAccessService {
    * @see \Drupal\node\NodeAccessControlHandler::checkAccess
    * @see \Drupal\node\NodeGrantDatabaseStorage::access
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    * @param string $op
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   public function hookNodeAccess(NodeInterface $node, $op, AccountInterface $account) {
     if ($op === 'view') {
@@ -108,11 +112,11 @@ class NodeTypeAccessService {
   /**
    * Extract base table alias.
    *
-   * @param \Drupal\Core\Database\Query\AlterableInterface $query
+   * @param AlterableInterface $query
    *
    * @return string|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Exception
    */
   private function extractBaseTableAlias(AlterableInterface $query) {
@@ -121,7 +125,7 @@ class NodeTypeAccessService {
     $base_table = $query->getMetaData('base_table');
     // If the base table is not given, default to one of the node base tables.
     if (!$base_table) {
-      /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+      /** @var DefaultTableMapping $table_mapping */
       $table_mapping = \Drupal::entityTypeManager()->getStorage('node')->getTableMapping();
       $node_base_tables = $table_mapping->getTableNames();
 
diff --git a/tests/src/Functional/AdminPageTest.php b/tests/src/Functional/AdminPageTest.php
index 7d23442..5b5ec9b 100644
--- a/tests/src/Functional/AdminPageTest.php
+++ b/tests/src/Functional/AdminPageTest.php
@@ -33,7 +33,7 @@ class AdminPageTest extends BrowserTestBase {
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
