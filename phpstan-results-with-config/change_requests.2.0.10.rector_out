modules/contrib/change_requests/change_requests.install
modules/contrib/change_requests/change_requests.module
modules/contrib/change_requests/patch.page.inc
modules/contrib/change_requests/src/Access/PatchApplyAccessCheck.php
modules/contrib/change_requests/src/AccessService.php
modules/contrib/change_requests/src/Annotation/FieldPatchPlugin.php
modules/contrib/change_requests/src/AttachService.php
modules/contrib/change_requests/src/Controller/PatchAjaxController.php
modules/contrib/change_requests/src/Controller/PatchApplyController.php
modules/contrib/change_requests/src/Controller/PatchesOverview.php
modules/contrib/change_requests/src/DiffService.php
modules/contrib/change_requests/src/Entity/Patch.php
modules/contrib/change_requests/src/Entity/PatchViewsData.php
modules/contrib/change_requests/src/Events/ChangeRequests.php
modules/contrib/change_requests/src/Form/ChangeRequestsConfig.php
modules/contrib/change_requests/src/Form/PatchApplyForm.php
modules/contrib/change_requests/src/Form/PatchDeleteForm.php
modules/contrib/change_requests/src/Form/PatchForm.php
modules/contrib/change_requests/src/NodeObserver.php
modules/contrib/change_requests/src/PatchAccessControlHandler.php
modules/contrib/change_requests/src/PatchBreadcrumbBuilder.php
modules/contrib/change_requests/src/PatchHtmlRouteProvider.php
modules/contrib/change_requests/src/PatchViewBuilder.php
modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchBoolean.php
modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchData.php
modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchDateTime.php
modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchDaterange.php
modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchFile.php
modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchImage.php
modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchLink.php
modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchList.php
modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchReference.php
modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchText.php
modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchTextSummary.php
modules/contrib/change_requests/src/Plugin/FieldPatchPluginBase.php
modules/contrib/change_requests/src/Plugin/FieldPatchPluginInterface.php
modules/contrib/change_requests/src/Plugin/FieldPatchPluginManager.php
modules/contrib/change_requests/tests/src/Functional/LoadTest.php
modules/contrib/change_requests/tests/src/Unit/DiffServiceTest.php

28 files with changes
=====================

1) modules/contrib/change_requests/tests/src/Unit/DiffServiceTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The class under test.
    *
-   * @var \Drupal\change_requests\DiffService
+   * @var DiffService
    */
   protected $diffService;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->diffService = new DiffService();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/change_requests/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\change_requests\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     # $this->user = $this->drupalCreateUser(['administer site configuration']);
     # $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/change_requests/src/Plugin/FieldPatchPluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Plugin;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The Drupal entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   private $entityFieldManager;

@@ @@
   /**
    * The module config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    * @param bool $bypass_explicit
    *   Bypass explicit check i.e. when form for explicit exclusion is build.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]|mixed
+   * @return FieldDefinitionInterface[]|mixed
    *   List of field definitions.
    */
   public function getPatchableFields($node_type_id, $bypass_explicit = FALSE) {
@@ @@
    * @param array $config
    *   The plugin configuration.
    *
-   * @return \Drupal\change_requests\Plugin\FieldPatchPluginBase|false
+   * @return FieldPatchPluginBase|false
    *   The FieldPatchPlugin belongs to FieldType.
    */
   public function getPluginFromFieldType($field_type, array $config = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/change_requests/src/Plugin/FieldPatchPluginInterface.php:80

    ---------- begin diff ----------
@@ @@
    *
    * @param array $patch_value
    *   The patch for this field.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   FieldItemList .
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/change_requests/src/Plugin/FieldPatchPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Plugin;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Datetime\DateFormatter;
@@ @@
   /**
    * Contains the conflict message.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup|null
+   * @var TranslatableMarkup|null
    */
   protected $mergeConflictMessage;

@@ @@
   /**
    * The std. Drupal entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The std. Drupal entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The config.factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The change_requests.diff service what is a diff_match_patch adapter.
    *
-   * @var \Drupal\change_requests\DiffService
+   * @var DiffService
    */
   protected $diff;

@@ @@
   /**
    * A date formatter.
    *
-   * @var \Drupal\change_requests\DiffService
+   * @var DiffService
    */
   protected $dateFormatter;

@@ @@
   /**
    * The drupal messenger.
    *
-   * @var \Drupal\change_requests\DiffService
+   * @var DiffService
    */
   protected $messenger;

@@ @@
   /**
    * Get the conflict message.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Returns a translated conflict message.
    */
   protected function getMergeConflictMessage() {
@@ @@
   /**
    * Get the conflict message.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Returns a translated success message.
    */
   protected function getMergeSuccessMessage($percent) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchReference.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Plugin\FieldPatchPlugin;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\GeneratedLink;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\change_requests\Plugin\FieldPatchPluginBase;

 /**
@@ @@
   /**
    * The store of the referred entity.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * Returns the storage interface.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface|false
+   * @return EntityStorageInterface|false
    *   The storage.
    */
   protected function getEntityStorage() {
@@ @@
    *
    * @throws \Exception
    *
-   * @return \Drupal\Core\GeneratedLink|\Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return GeneratedLink|TranslatableMarkup|string
    *   The label used for patch view.
    */
   protected function getFormattedTargetId($entity_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchImage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Plugin\FieldPatchPlugin;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\file\Entity\File;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
@@ @@
   /**
    * The file storage used for image fields.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * Returns the storage interface.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface|false
+   * @return EntityStorageInterface|false
    *   The storage.
    */
   protected function getEntityStorage() {
@@ @@
         'content' => ['#markup' => $this->t('No image')],
       ];
     }
-    /** @var \Drupal\file\Entity\File $entity */
+    /** @var File $entity */
     $entity = $this->getEntityStorage()->load((int) $entity_id);
     if (!$entity) {
       return $this->t('ID: @id was not found.', ['@id' => $entity_id]);
@@ @@

     $uri = $entity->getFileUri();
     $name = $entity->getFileName();
-    $url = Url::fromUri(file_create_url($entity->getFileUri()));
+    $url = \Drupal::service('file_url_generator')->generate($entity->getFileUri());
     $link = Link::fromTextAndUrl($name, $url)->toRenderable();
     if ($uri) {
       $style = $this->getModuleConfig('image_style', 'thumbnail');
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/change_requests/src/Plugin/FieldPatchPlugin/FieldPatchFile.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Plugin\FieldPatchPlugin;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\GeneratedLink;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\file\Entity\File;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Drupal\change_requests\Plugin\FieldPatchPluginBase;
@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * Returns the storage interface.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface|false
+   * @return EntityStorageInterface|false
    *   The storage.
    */
   protected function getEntityStorage() {
@@ @@
    * @param int $entity_id
    *   The entity id.
    *
-   * @return \Drupal\Core\GeneratedLink|\Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return GeneratedLink|TranslatableMarkup|string
    *   The label used for patch view.
    */
   protected function getTargetId($entity_id) {
@@ @@
     if (!$entity_id) {
       return $this->t('none');
     }
-    /** @var \Drupal\file\Entity\File $entity */
+    /** @var File $entity */
     $entity = $this->getEntityStorage()->load((int) $entity_id);
     if (!$entity) {
       return $this->t('ID: @id was not found.', ['@id' => $entity_id]);
     }
     $name = $entity->getFileName();
-    $url = Url::fromUri(file_create_url($entity->getFileUri()));
+    $url = \Drupal::service('file_url_generator')->generate($entity->getFileUri());
     $link = Link::fromTextAndUrl($name, $url)->toString();
     return $link;
   }
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/change_requests/src/PatchViewBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\change_requests\Entity\Patch;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityViewBuilder;
 use Drupal\Core\Template\Attribute;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function view(EntityInterface $entity, $view_mode = 'full', $langcode = NULL) {
-    /** @var \Drupal\change_requests\Entity\Patch $entity */
+    /** @var Patch $entity */
     $view = parent::view($entity, $view_mode, $langcode);
     $original_entity = $entity->originalEntityRevision('origin');

@@ @@
     ];

     // Build field patches views.
-    /** @var \Drupal\node\NodeInterface[] $patches */
+    /** @var NodeInterface[] $patches */
     $patch = $entity->getPatchField();
     foreach ($patch as $field_name => $value) {
       $field_type = $entity->getEntityFieldType($field_name);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/change_requests/src/PatchHtmlRouteProvider.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/change_requests/src/PatchBreadcrumbBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests;

+use Drupal\change_requests\Entity\Patch;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Breadcrumb\Breadcrumb;
 use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
     $breadcrumb = new Breadcrumb();
     $breadcrumb->addCacheContexts(['route', 'url.query_args']);
     $breadcrumb->addLink(Link::createFromRoute(t('Home'), '<front>'));
-    /** @var \Drupal\change_requests\Entity\Patch $patch_entity */
+    /** @var Patch $patch_entity */
     $patch_entity = $route_match->getParameter('patch');

-    /** @var \Drupal\node\NodeInterface $orig_entity */
+    /** @var NodeInterface $orig_entity */
     $orig_entity = $patch_entity->originalEntity();
     if ($orig_entity) {
       // Orig node link.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/change_requests/src/PatchAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests;

+use Drupal\change_requests\Entity\Patch;
 use Drupal\change_requests\Events\ChangeRequests;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\change_requests\Entity\Patch $entity */
+    /** @var Patch $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view patch entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/change_requests/src/NodeObserver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests;

+use Drupal\change_requests\Entity\Patch;
+use Drupal\core\Entity\EntityInterface;
 use Drupal\changed_fields\EntitySubject;
 use Drupal\changed_fields\ObserverInterface;
 use Drupal\Core\Config\ImmutableConfig;
@@ @@
   /**
    * The Drupal entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager|null
+   * @var EntityTypeManager|null
    */
   private $entityTypeManager;

@@ @@
   /**
    * The change_requests plugin manager.
    *
-   * @var \Drupal\change_requests\Plugin\FieldPatchPluginManager|null
+   * @var FieldPatchPluginManager|null
    */
   private $pluginManager;

@@ @@
   /**
    * The Drupal config manager.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig|null
+   * @var ImmutableConfig|null
    */
   private $config;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxy|null
+   * @var AccountProxy|null
    */
   private $currentUser;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    * {@inheritdoc}
    */
   public function update(SplSubject $nodeSubject) {
-    /** @var \Drupal\changed_fields\EntitySubject $nodeSubject */
+    /** @var EntitySubject $nodeSubject */
     $node = $nodeSubject->getEntity();
     if ($node->isNewRevision()) {
       $diff = $this->getNodeDiff($nodeSubject);
-      /** @var \Drupal\change_requests\Entity\Patch $patch */
+      /** @var Patch $patch */
       $patch = $this->getPatch($node->id(), $node->getEntityTypeId(), $node->bundle());

       $patch
@@ @@
   /**
    * Get the revision diff value.
    *
-   * @param \Drupal\changed_fields\EntitySubject $nodeSubject
+   * @param EntitySubject $nodeSubject
    *   The changed field api output.
    *
    * @return array
@@ @@
    * @param string $bundle
    *   Bundle ID if exists.
    *
-   * @return \Drupal\core\Entity\EntityInterface
+   * @return EntityInterface
    *   Patch entity prepared with node and version IDs.
    */
   protected function getPatch($nid, $type, $bundle = '') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/change_requests/src/Form/PatchForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The change_requests environment variables.
    *
-   * @var \Drupal\change_requests\Events\ChangeRequests
+   * @var ChangeRequests
    */
   protected $constants;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a ContentEntityForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_manager
+   * @param EntityRepositoryInterface $entity_manager
    *   The entity manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/change_requests/src/Form/PatchDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Form;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     $nid = $entity->get('rid')->getString();
     $redirect = Url::fromRoute('change_requests.patches_overview', ['node' => $nid]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/change_requests/src/Form/PatchApplyForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Form;

+use Drupal\change_requests\Entity\Patch;
+use Drupal\Core\Config\ConfigFactory;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityFieldManager;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\change_requests\Entity\Patch
+   * @var Patch
    */
   protected $entity;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * DiffService.
    *
-   * @var \Drupal\change_requests\DiffService
+   * @var DiffService
    */
   protected $diffService;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
+   * @throws EntityStorageException
    *   There are things don't understand.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
     }

     // APPLY SUCCEEDED.
-    /** @var \Drupal\field\Entity\FieldConfig[] $field_defs */
+    /** @var FieldConfig[] $field_defs */
     $field_defs = $orig_entity->getFieldDefinitions();
     foreach ($this->entity->getPatchField() as $name => $patch) {
       if (isset($field_defs[$name])) {
@@ @@
     }
     // Set revision information.
     $orig_entity->setNewRevision(TRUE);
-    /** @var \Drupal\user\UserInterface|FALSE $patch_creator */
+    /** @var UserInterface|FALSE $patch_creator */
     $users = $this->entity->get('uid')->referencedEntities();
     $patch_creator = reset($users);
     $message = $this->t('Applied change request with id "@id" of user "@user" with message "@message".', [
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
     $form['#theme'] = 'cr_apply_form';
     $form['#parents'] = [];

-    /** @var \Drupal\node\NodeInterface $orig_entity */
+    /** @var NodeInterface $orig_entity */
     $orig_entity = $this->entity->originalEntityRevision('latest');
-    /** @var \Drupal\node\NodeInterface $orig_entity_old */
+    /** @var NodeInterface $orig_entity_old */
     $orig_entity_old = $this->entity->originalEntityRevisionOld();

     $header_data = $this->entity->getViewHeaderData();
@@ @@
       $orig_entity->bundle(),
       'default',
     ]);
-    /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $entity_form_display */
+    /** @var EntityFormDisplay $entity_form_display */
     $entity_form_display = $this->entityTypeManager->getStorage('entity_form_display')->load($form_id);

     $patch = $this->entity->getPatchField();
@@ @@
    * Returns the action form element for the current entity form.
    * @param array $form
    *   This form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   This form state object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/change_requests/src/Form/ChangeRequestsConfig.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * FieldPatchPluginManager.
    *
-   * @var \Drupal\change_requests\Plugin\FieldPatchPluginManager
+   * @var FieldPatchPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * FieldPatchPluginManager.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheInvalidator;

@@ @@
   /**
    * Returns additional form elements after selecting the desired bundle.
    *
-   * @param \Drupal\node\NodeTypeInterface $node_type
+   * @param NodeTypeInterface $node_type
    *   The form in it's current state.
    * @param bool $disabled
    *   Form Element disabled.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/change_requests/src/Events/ChangeRequests.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Events;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

 /**
@@ @@
    * @param int $status
    *   The status id.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   A translatable string for status.
    */
   public function getStatusLiteral($status) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/change_requests/src/Entity/Patch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Entity;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\change_requests\DiffService;
+use Drupal\change_requests\Plugin\FieldPatchPluginManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\node\NodeInterface;
 use Drupal\change_requests\Events\ChangeRequests;
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The original entity the patch is abstracted from.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $originalEntity;

@@ @@
   /**
    * The user who created the patch.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $creator;

@@ @@
   /**
    * The Drupal entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The change_requests.diff service as adapter to diff_match_patch.
    *
-   * @var \Drupal\change_requests\DiffService
+   * @var DiffService
    */
   public $diffService;

@@ @@
   /**
    * The change_requests field patch manager.
    *
-   * @var \Drupal\change_requests\Plugin\FieldPatchPluginManager
+   * @var FieldPatchPluginManager
    */
   private $pluginManager;

@@ @@
   /**
    * Class managing the status of change requests.
    *
-   * @var \Drupal\change_requests\Events\ChangeRequests
+   * @var ChangeRequests
    */
   public $statusConstants;

@@ @@
    * @param bool $literal
    *   Return a literal translatable value or if false just the string id.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   Returns the current status of the entity.
    */
   public function getStatus($literal = FALSE) {
@@ @@
   /**
    * Returns lazy instance of field patch plugin manager.
    *
-   * @return \Drupal\change_requests\Plugin\FieldPatchPluginManager
+   * @return FieldPatchPluginManager
    *   The field patch plugin manager.
    */
   public function getPluginManager() {
@@ @@
   /**
    * Returns the Diff entity.
    *
-   * @return \Drupal\change_requests\DiffService
+   * @return DiffService
    *   Returns lazy instance of the change_requests.diff service.
    */
   public function getDiffService() {
@@ @@
   /**
    * Returns lazy Entity field manager.
    *
-   * @return \Drupal\Core\Entity\EntityFieldManager
+   * @return EntityFieldManager
    *   Returns lazy instance of entity field manager.
    */
   protected function getEntityFieldManager() {
@@ @@
    * @return array
    *   Returns complete array of revision ids.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getOrigRevisionIds() {
     if (!$this->origRevisionIds) {
@@ @@
    *   If method returns current or the latest (possibly unpublished) revision.
    *   Accepted values are 'current', 'latest' or a revision_id as '123'.
    *
-   * @return \Drupal\node\NodeInterface|false
+   * @return NodeInterface|false
    *   Returns the original entity.
    */
   public function originalEntity() {
     if (!isset($this->originalEntity)) {
-      /** @var \Drupal\node\NodeInterface[] $orig_entity */
+      /** @var NodeInterface[] $orig_entity */
       $orig_entity = $this->get('rid')->referencedEntities();
       $this->originalEntity = reset($orig_entity);
     }
@@ @@
    *   If method returns current or the latest (possibly unpublished) revision.
    *   Accepted values are 'current', 'latest', 'origin' or a rid as '123'.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|false
+   * @return EntityInterface|false
    *   Returns a original node revision.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function originalEntityRevision($revision = 'current') {
     $entity = $this->originalEntity();
@@ @@
   /**
    * Returns a revision referred entity or FALSE if none exists.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|false
+   * @return EntityInterface|false
    *   Returns the original entity in that revision the patch was created from.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function originalEntityRevisionOld() {
     return $this->originalEntityRevision('origin');
@@ @@
   /**
    * Returns the Creator user.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   Returns the creator user.
    */
   public function getCreator() {
     if (!isset($this->creator)) {
-      /** @var \Drupal\user\Entity\User[] $creator */
+      /** @var User[] $creator */
       $creators = $this->get('uid')->referencedEntities();
       $this->creator = reset($creators) ?: '';
     }
@@ @@
   /**
    * Returns the label belongs to the field type.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   Returns the label belongs to the field type.
    */
   public function getOrigFieldLabel($field_name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/change_requests/src/DiffService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests;

+use Drupal\change_requests\Plugin\FieldPatchPluginManager;
 use DiffMatchPatch\DiffMatchPatch;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * DiffMatchPatch instance.
    *
-   * @var \Drupal\change_requests\Plugin\FieldPatchPluginManager
+   * @var FieldPatchPluginManager
    */
   protected $dmp;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * MyModuleService constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/change_requests/src/Controller/PatchesOverview.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Controller;

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\user\Entity\User;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The original node itself.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   private $node;

@@ @@
   /**
    * Information about the entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityStorage;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * DateFormatterInterface definition.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * DateFormatterInterface definition.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Display list of existing patches.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node for which to display patches.
    *
    * @return array
@@ @@
   /**
    * Load the original entity.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The original node, the patch is created from.
    */
   protected function load() {
@@ @@
   public function buildRow(Patch $entity) {
     /* @var $entity \Drupal\change_requests\Entity\Patch */
     $row['created']['data'] = $this->getDate($entity);
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $row['user'] = $this->getUser($entity);
     $row['message']['data'] = $entity->get('message')->getString();
     $row['status']['data'] = $entity->getRenderedStatus();
@@ @@
       ],
     ];
     foreach ($this->load() as $entity) {
-      /** @var \Drupal\change_requests\Entity\Patch $entity */
+      /** @var Patch $entity */
       if ($row = $this->buildRow($entity)) {
         $build['table']['#rows'][$entity->id()] = $row;
       }
@@ @@
   /**
    * Gets this list's default operations.
    *
-   * @param \Drupal\change_requests\Entity\Patch $entity
+   * @param Patch $entity
    *   The entity the operations are for.
    *
    * @return array
@@ @@
   /**
    * Builds a renderable list of operation links for the entity.
    *
-   * @param \Drupal\change_requests\Entity\Patch $entity
+   * @param Patch $entity
    *   The entity on which the linked operations will be performed.
    *
    * @return array
@@ @@
   /**
    * Get the creation or recent change date.
    *
-   * @param \Drupal\change_requests\Entity\Patch $entity
+   * @param Patch $entity
    *   The patch entity.
    * @param string $mode
    *   Created or changed time.
@@ @@
   /**
    * Get the creation or recent change date.
    *
-   * @param \Drupal\change_requests\Entity\Patch $entity
+   * @param Patch $entity
    *   The patch entity.
    *
-   * @return \Drupal\Core\Link|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return Link|TranslatableMarkup
    *   A formatted date string or translatable "n/a".
    */
   protected function getUser(Patch $entity) {
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     if($user = $entity->get('uid')->entity) {
       return Link::createFromRoute(
         $user->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/change_requests/src/Controller/PatchApplyController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Controller;

+use Drupal\node\NodeInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\change_requests\DiffService definition.
    *
-   * @var \Drupal\change_requests\DiffService
+   * @var DiffService
    */
   protected $changeRequestsDiff;

@@ @@
   /**
    * Drupal\change_requests\Plugin\FieldPatchPluginManager definition.
    *
-   * @var \Drupal\change_requests\Plugin\FieldPatchPluginManager
+   * @var FieldPatchPluginManager
    */
   protected $pluginManagerFieldPatchPlugin;

@@ @@
   /**
    * Drupal\change_requests\Entity\Patch definition.
    *
-   * @var \Drupal\change_requests\Entity\Patch|false
+   * @var Patch|false
    */
   protected $patch;

@@ @@
   /**
    * Drupal\node\NodeInterface definition.
    *
-   * @var \Drupal\node\NodeInterface|false
+   * @var NodeInterface|false
    */
   protected $node;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    * @return array
    *   Rendered .
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function apply($patch) {
     // Set patch or die.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/change_requests/src/Controller/PatchAjaxController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * @return array
    *   The rendered patch entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getRenderedPatch($patch, $view_mode) {
     $entity = $this->entityTypeManager->getStorage('patch')->load($patch);
@@ @@
    * @return AjaxResponse
    *   Return Hello string.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getPatchAjax($patch, $view_mode = 'full') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/change_requests/src/AttachService.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Session\AccountProxyInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/change_requests/src/Annotation/FieldPatchPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


26) modules/contrib/change_requests/src/AccessService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\change_requests;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Session\AccountProxy;
 use Drupal\node\NodeInterface;
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   private $moduleConfig;

@@ @@
   /**
    * Drupal\Core\Session\AccountProxy definition.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Symfony\Component\HttpFoundation\Request definition.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;

@@ @@
   /**
    * Symfony\Component\HttpFoundation\Request definition.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentNodeTypeEnabled;

@@ @@
   /**
    * \Drupal\node\NodeInterface definition.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $currentNode;

@@ @@
   }

   /**
-   * @return \Drupal\node\NodeInterface|NULL
+   * @return NodeInterface|NULL
    */
   protected function getCurrentNode() {
     if (!$this->currentNode) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/change_requests/src/Access/PatchApplyAccessCheck.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\change_requests\Access;


+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\change_requests\Entity\Patch;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Checks access to the node preview page.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\change_requests\Entity\Patch $patch
+   * @param Patch $patch
    *   The patch that is going to be applied.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, Patch $patch) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/change_requests/change_requests.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\change_requests\AccessService;
 /**
  * @file
  * Contains change_requests.module.
@@ @@
  * Start patch creation with changed fields api.
  */
 function change_requests_node_presave(NodeInterface $node) {
-  /** @var \Drupal\change_requests\AccessService $access_service */
+  /** @var AccessService $access_service */
   $access_service = \Drupal::service('change_requests.access_service');

   if ($access_service->startPatchCreateProcess()) {
@@ @@
  * Implements hook_form_BASE_FORM_ID_alter().
  */
 function change_requests_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\change_requests\AccessService $access_service */
+  /** @var AccessService $access_service */
   $access_service = \Drupal::service('change_requests.access_service');

   if ($access_service->disableCreateNewRevision()) {
@@ @@
   }

   // Insert checkbox create patch to node form.
-  /** @var \Drupal\node\NodeInterface $node */
+  /** @var NodeInterface $node */
   if ($access_service->displayCheckboxCreatePatch()) {
     $form['create_patch'] = [
       '#type' => 'checkbox',
@@ @@
  *   configed in change_requests.links.task.yml).
  */
 function change_requests_menu_local_tasks_alter(array &$data, $route_name) {
-  /** @var \Drupal\change_requests\AccessService $access_service */
+  /** @var AccessService $access_service */
   $access_service = \Drupal::service('change_requests.access_service');

   if (isset($data['tabs'][0]) && array_key_exists('patch.overview_page', $data['tabs'][0])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 28 files have been changed by Rector                                      

