diff --git a/plugin.module b/plugin.module
index 18dc374..aa579d5 100644
--- a/plugin.module
+++ b/plugin.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\plugin\ViewsData;
+use Drupal\Component\Plugin\PluginManagerInterface;
 /**
  * @file
  * Contains hook implementations.
@@ -37,7 +39,7 @@ function plugin_field_widget_info_alter(array &$field_widget_definitions) {
  * Implements hook_views_data_alter().
  */
 function plugin_views_data_alter(array &$data) {
-  /** @var \Drupal\plugin\ViewsData $views_data */
+  /** @var ViewsData $views_data */
   $views_data = \Drupal::service('plugin.views_data');
   $views_data->alterViewsData($data);
 }
@@ -46,7 +48,7 @@ function plugin_views_data_alter(array &$data) {
  * Implements hook_field_views_data_alter().
  */
 function plugin_field_views_data_alter(array &$data, FieldStorageConfigInterface $field_storage) {
-  /** @var \Drupal\plugin\ViewsData $views_data */
+  /** @var ViewsData $views_data */
   $views_data = \Drupal::service('plugin.views_data');
   $views_data->alterFieldViewsData($data, $field_storage);
 }
@@ -58,7 +60,7 @@ function plugin_field_views_data_alter(array &$data, FieldStorageConfigInterface
  */
 function _plugin_collection_field_type_ids() {
   $supported_field_type_ids = [];
-  /** @var \Drupal\Component\Plugin\PluginManagerInterface $field_type_manager */
+  /** @var PluginManagerInterface $field_type_manager */
   $field_type_manager = \Drupal::service('plugin.manager.field.field_type');
   foreach ($field_type_manager->getDefinitions() as $plugin_id => $plugin_definition) {
     if (is_subclass_of($plugin_definition['class'], PluginCollectionItemInterface::class)) {
diff --git a/src/Commands/PluginCommands.php b/src/Commands/PluginCommands.php
index b14a24a..1a9d3cb 100644
--- a/src/Commands/PluginCommands.php
+++ b/src/Commands/PluginCommands.php
@@ -14,14 +14,14 @@ class PluginCommands extends DrushCommands {
   /**
    * The Plugin type manager service.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeManagerInterface
+   * @var PluginTypeManagerInterface
    */
   protected $pluginTypeManager;
 
   /**
    * Creates a PluginCommands instance.
    *
-   * @param \Drupal\plugin\PluginType\PluginTypeManagerInterface $plugin_type_manager
+   * @param PluginTypeManagerInterface $plugin_type_manager
    *   The Plugin type manager service.
    */
   public function __construct(
diff --git a/src/Controller/ListBase.php b/src/Controller/ListBase.php
index 24ed006..83a4709 100644
--- a/src/Controller/ListBase.php
+++ b/src/Controller/ListBase.php
@@ -18,16 +18,16 @@ abstract class ListBase implements ContainerInjectionInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translator.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(TranslationInterface $string_translation, ModuleHandlerInterface $module_handler) {
diff --git a/src/Controller/ListPluginTypes.php b/src/Controller/ListPluginTypes.php
index 08bc550..2f4f5f4 100644
--- a/src/Controller/ListPluginTypes.php
+++ b/src/Controller/ListPluginTypes.php
@@ -16,16 +16,16 @@ class ListPluginTypes extends ListBase {
   /**
    * The plugin type manager.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeManagerInterface
+   * @var PluginTypeManagerInterface
    */
   protected $pluginTypeManager;
 
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translator.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    * @param \Drupal\plugin\PluginType\PluginTypeManagerInterface
    *   The plugin type manager.
diff --git a/src/Controller/ListPlugins.php b/src/Controller/ListPlugins.php
index 788f4b4..4bc4f31 100644
--- a/src/Controller/ListPlugins.php
+++ b/src/Controller/ListPlugins.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\plugin\Controller;
 
+use Symfony\Component\HttpFoundation\Response;
+use Drupal\plugin\PluginDefinition\PluginDefinitionInterface;
+use Drupal\plugin\PluginOperationsProviderInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ -20,18 +23,18 @@ class ListPlugins extends ListBase {
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translator.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
    */
   public function __construct(TranslationInterface $string_translation, ModuleHandlerInterface $module_handler, ClassResolverInterface $class_resolver) {
@@ -49,7 +52,7 @@ class ListPlugins extends ListBase {
   /**
    * Returns the route's title.
    *
-   * @param \Drupal\plugin\PluginType\PluginTypeInterface $plugin_type
+   * @param PluginTypeInterface $plugin_type
    *   The plugin type.
    *
    * @return string
@@ -63,10 +66,10 @@ class ListPlugins extends ListBase {
   /**
    * Handles the route.
    *
-   * @param \Drupal\plugin\PluginType\PluginTypeInterface $plugin_type
+   * @param PluginTypeInterface $plugin_type
    *   The plugin type.
    *
-   * @return mixed[]|\Symfony\Component\HttpFoundation\Response
+   * @return mixed[]|Response
    *   A render array or a Symfony response.
    */
   public function execute(PluginTypeInterface $plugin_type) {
@@ -77,7 +80,7 @@ class ListPlugins extends ListBase {
       '#type' => 'table',
     ];
     $plugin_discovery = new TypedDefinitionEnsuringPluginDiscoveryDecorator($plugin_type);
-    /** @var \Drupal\plugin\PluginDefinition\PluginDefinitionInterface[] $plugin_definitions */
+    /** @var PluginDefinitionInterface[] $plugin_definitions */
     $plugin_definitions = $plugin_discovery->getDefinitions();
     ksort($plugin_definitions);
     foreach ($plugin_definitions as $plugin_definition) {
@@ -85,7 +88,7 @@ class ListPlugins extends ListBase {
       if ($plugin_definition instanceof PluginOperationsProviderDefinitionInterface) {
         $operations_provider_class = $plugin_definition->getOperationsProviderClass();
         if ($operations_provider_class) {
-          /** @var \Drupal\plugin\PluginOperationsProviderInterface $operations_provider */
+          /** @var PluginOperationsProviderInterface $operations_provider */
           $operations_provider = $this->classResolver->getInstanceFromDefinition($operations_provider_class);
           $operations = $operations_provider->getOperations($plugin_definition->getId());
         }
diff --git a/src/DefaultPluginResolver/DefaultPluginResolverInterface.php b/src/DefaultPluginResolver/DefaultPluginResolverInterface.php
index 397991e..19b86e8 100644
--- a/src/DefaultPluginResolver/DefaultPluginResolverInterface.php
+++ b/src/DefaultPluginResolver/DefaultPluginResolverInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\plugin\DefaultPluginResolver;
 
+use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\plugin\PluginType\PluginTypeInterface;
 
 /**
@@ -14,7 +15,7 @@ interface DefaultPluginResolverInterface {
    *
    * @param \Drupal\plugin\PluginType\PluginTypeInterface
    *
-   * @return \Drupal\Component\Plugin\PluginInspectionInterface|null
+   * @return PluginInspectionInterface|null
    *   A plugin instance or NULL of no default could be created.
    */
   public function createDefaultPluginInstance(PluginTypeInterface $plugin_type);
diff --git a/src/DefaultPluginResolver/EventBasedDefaultPluginResolver.php b/src/DefaultPluginResolver/EventBasedDefaultPluginResolver.php
index 80d37cd..14fffc2 100644
--- a/src/DefaultPluginResolver/EventBasedDefaultPluginResolver.php
+++ b/src/DefaultPluginResolver/EventBasedDefaultPluginResolver.php
@@ -15,14 +15,14 @@ class EventBasedDefaultPluginResolver implements DefaultPluginResolverInterface
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Creates a new instance.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
     $this->eventDispatcher = $event_dispatcher;
@@ -33,7 +33,7 @@ class EventBasedDefaultPluginResolver implements DefaultPluginResolverInterface
    */
   public function createDefaultPluginInstance(PluginTypeInterface $plugin_type) {
     $event = new ResolveDefaultPlugin($plugin_type);
-    $this->eventDispatcher->dispatch(PluginEvents::RESOLVE_DEFAULT_PLUGIN, $event);
+    $this->eventDispatcher->dispatch($event, PluginEvents::RESOLVE_DEFAULT_PLUGIN);
 
     return $event->getDefaultPluginInstance();
   }
diff --git a/src/Event/ResolveDefaultPlugin.php b/src/Event/ResolveDefaultPlugin.php
index dfbaf90..fad2b6c 100644
--- a/src/Event/ResolveDefaultPlugin.php
+++ b/src/Event/ResolveDefaultPlugin.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\plugin\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\plugin\PluginType\PluginTypeInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Provides an event that is dispatched when the a default plugin instance is
@@ -17,14 +17,14 @@ class ResolveDefaultPlugin extends Event {
   /**
    * The plugin type.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeInterface
+   * @var PluginTypeInterface
    */
   protected $pluginType;
 
   /**
    * The default plugin instance.
    *
-   * @var \Drupal\Component\Plugin\PluginInspectionInterface|null
+   * @var PluginInspectionInterface|null
    *   The default plugin instance or NULL if there is no default instance.
    */
   protected $defaultPluginInstance;
@@ -41,7 +41,7 @@ class ResolveDefaultPlugin extends Event {
   /**
    * Gets the plugin type for which a default plugin instance is resolved.
    *
-   * @return \Drupal\plugin\PluginType\PluginTypeInterface
+   * @return PluginTypeInterface
    */
   public function getPluginType() {
     return $this->pluginType;
@@ -50,7 +50,7 @@ class ResolveDefaultPlugin extends Event {
   /**
    * Gets the default plugin instance.
    *
-   * @return \Drupal\Component\Plugin\PluginInspectionInterface|null
+   * @return PluginInspectionInterface|null
    *   The default plugin instance or NULL if there is no default instance.
    */
   public function getDefaultPluginInstance() {
@@ -60,7 +60,7 @@ class ResolveDefaultPlugin extends Event {
   /**
    * Sets an the default plugin instance.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $default_plugin_instance
+   * @param PluginInspectionInterface $default_plugin_instance
    *
    * @return $this
    */
diff --git a/src/ParamConverter/PluginTypeBasedConverterTrait.php b/src/ParamConverter/PluginTypeBasedConverterTrait.php
index 325fc82..1efbd8a 100644
--- a/src/ParamConverter/PluginTypeBasedConverterTrait.php
+++ b/src/ParamConverter/PluginTypeBasedConverterTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\plugin\ParamConverter;
 
+use Symfony\Component\Validator\Constraint;
 use Drupal\Core\Utility\Error;
 use Drupal\plugin\PluginType\PluginTypeManagerInterface;
 use Symfony\Component\Routing\Route;
@@ -18,14 +19,14 @@ trait PluginTypeBasedConverterTrait {
   /**
    * The plugin type manager.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeManagerInterface
+   * @var PluginTypeManagerInterface
    */
   protected $pluginTypeManager;
 
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\plugin\PluginType\PluginTypeManagerInterface $plugin_type_manager
+   * @param PluginTypeManagerInterface $plugin_type_manager
    */
   public function __construct(PluginTypeManagerInterface $plugin_type_manager) {
     $this->pluginTypeManager = $plugin_type_manager;
@@ -149,7 +150,7 @@ trait PluginTypeBasedConverterTrait {
   /**
    * Gets the parameter's converter definition validation constraint.
    *
-   * @return \Symfony\Component\Validator\Constraint
+   * @return Constraint
    */
   abstract protected function getConverterDefinitionConstraint();
 
diff --git a/src/Plugin/DataType/PluginConfiguration.php b/src/Plugin/DataType/PluginConfiguration.php
index da15a24..6bd5f35 100644
--- a/src/Plugin/DataType/PluginConfiguration.php
+++ b/src/Plugin/DataType/PluginConfiguration.php
@@ -21,7 +21,7 @@ class PluginConfiguration extends TypedData {
   /**
    * The parent typed data object.
    *
-   * @var \Drupal\plugin\Plugin\Field\FieldType\PluginCollectionItemInterface
+   * @var PluginCollectionItemInterface
    */
   protected $parent;
 
@@ -35,11 +35,11 @@ class PluginConfiguration extends TypedData {
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The data definition.
    * @param string $name
    *   The name of the created property.
-   * @param \Drupal\plugin\Plugin\Field\FieldType\PluginCollectionItemInterface $parent
+   * @param PluginCollectionItemInterface $parent
    *   The parent object of the data property.
    */
   public function __construct(DataDefinitionInterface $definition, $name, PluginCollectionItemInterface $parent) {
diff --git a/src/Plugin/DataType/PluginId.php b/src/Plugin/DataType/PluginId.php
index 3da97db..52b03bb 100644
--- a/src/Plugin/DataType/PluginId.php
+++ b/src/Plugin/DataType/PluginId.php
@@ -19,18 +19,18 @@ class PluginId extends StringData {
   /**
    * The parent typed data object.
    *
-   * @var \Drupal\plugin\Plugin\Field\FieldType\PluginCollectionItemInterface
+   * @var PluginCollectionItemInterface
    */
   protected $parent;
 
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The data definition.
    * @param string $name
    *   The name of the created property.
-   * @param \Drupal\plugin\Plugin\Field\FieldType\PluginCollectionItemInterface $parent
+   * @param PluginCollectionItemInterface $parent
    *   The parent object of the data property.
    */
   public function __construct(DataDefinitionInterface $definition, $name, PluginCollectionItemInterface $parent) {
diff --git a/src/Plugin/DataType/PluginInstance.php b/src/Plugin/DataType/PluginInstance.php
index 29cff69..d14cf79 100644
--- a/src/Plugin/DataType/PluginInstance.php
+++ b/src/Plugin/DataType/PluginInstance.php
@@ -18,7 +18,7 @@ class PluginInstance extends TypedData {
   /**
    * The plugin instance.
    *
-   * @var \Drupal\Component\Plugin\PluginInspectionInterface
+   * @var PluginInspectionInterface
    */
   protected $value;
 
diff --git a/src/Plugin/Field/FieldFormatter/BuiltBlock.php b/src/Plugin/Field/FieldFormatter/BuiltBlock.php
index c7fd96a..3174a6a 100644
--- a/src/Plugin/Field/FieldFormatter/BuiltBlock.php
+++ b/src/Plugin/Field/FieldFormatter/BuiltBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\plugin\Plugin\Field\FieldFormatter;
 
+use Drupal\plugin\Plugin\Field\FieldType\PluginCollectionItemInterface;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
 
@@ -23,9 +25,9 @@ class BuiltBlock extends FormatterBase {
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $build = [];
-    /** @var \Drupal\plugin\Plugin\Field\FieldType\PluginCollectionItemInterface $item */
+    /** @var PluginCollectionItemInterface $item */
     foreach ($items as $delta => $item) {
-      /** @var \Drupal\Core\Block\BlockPluginInterface $block */
+      /** @var BlockPluginInterface $block */
       $block = $item->getContainedPluginInstance();
       $build[$delta] = $block->build();
     }
diff --git a/src/Plugin/Field/FieldFormatter/PluginLabel.php b/src/Plugin/Field/FieldFormatter/PluginLabel.php
index 889bf12..be614aa 100644
--- a/src/Plugin/Field/FieldFormatter/PluginLabel.php
+++ b/src/Plugin/Field/FieldFormatter/PluginLabel.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\plugin\Plugin\Field\FieldFormatter;
 
+use Drupal\plugin\Plugin\Field\FieldType\PluginCollectionItemInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\plugin\PluginDefinition\PluginLabelDefinitionInterface;
@@ -23,7 +24,7 @@ class PluginLabel extends FormatterBase {
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $build = [];
-    /** @var \Drupal\plugin\Plugin\Field\FieldType\PluginCollectionItemInterface $item */
+    /** @var PluginCollectionItemInterface $item */
     foreach ($items as $delta => $item) {
       $plugin_definition = $item->getPluginType()->ensureTypedPluginDefinition($item->getContainedPluginInstance()->getPluginDefinition());
       $build[$delta] = [
diff --git a/src/Plugin/Field/FieldType/PluginCollectionItem.php b/src/Plugin/Field/FieldType/PluginCollectionItem.php
index 0f17deb..eba35de 100644
--- a/src/Plugin/Field/FieldType/PluginCollectionItem.php
+++ b/src/Plugin/Field/FieldType/PluginCollectionItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\plugin\Plugin\Field\FieldType;
 
+use Drupal\plugin\PluginType\PluginTypeManagerInterface;
 /**
  * Provides a plugin collection field.
  *
@@ -21,7 +22,7 @@ class PluginCollectionItem extends PluginCollectionItemBase {
    * {@inheritdoc}
    */
   public function getPluginType() {
-    /** @var \Drupal\plugin\PluginType\PluginTypeManagerInterface $plugin_type_manager */
+    /** @var PluginTypeManagerInterface $plugin_type_manager */
     $plugin_type_manager = \Drupal::service('plugin.plugin_type_manager');
 
     return $plugin_type_manager->getPluginType($this->getPluginDefinition()['plugin_type_id']);
diff --git a/src/Plugin/Field/FieldType/PluginCollectionItemDeriver.php b/src/Plugin/Field/FieldType/PluginCollectionItemDeriver.php
index 784097e..3d6f375 100644
--- a/src/Plugin/Field/FieldType/PluginCollectionItemDeriver.php
+++ b/src/Plugin/Field/FieldType/PluginCollectionItemDeriver.php
@@ -15,7 +15,7 @@ class PluginCollectionItemDeriver extends DeriverBase implements ContainerDerive
   /**
    * The plugin type manager.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeManagerInterface
+   * @var PluginTypeManagerInterface
    */
   protected $pluginTypeManager;
 
diff --git a/src/Plugin/Field/FieldType/PluginCollectionItemInterface.php b/src/Plugin/Field/FieldType/PluginCollectionItemInterface.php
index 26c1ddc..5b6943e 100644
--- a/src/Plugin/Field/FieldType/PluginCollectionItemInterface.php
+++ b/src/Plugin/Field/FieldType/PluginCollectionItemInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\plugin\Plugin\Field\FieldType;
 
+use Drupal\plugin\PluginType\PluginTypeInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Field\FieldItemInterface;
 
@@ -13,14 +15,14 @@ interface PluginCollectionItemInterface extends FieldItemInterface {
   /**
    * Returns the type of the plugins contained by this item.
    *
-   * @return \Drupal\plugin\PluginType\PluginTypeInterface
+   * @return PluginTypeInterface
    */
   public function getPluginType();
 
   /**
    * Validates a plugin instance.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $plugin_instance
+   * @param PluginInspectionInterface $plugin_instance
    *
    * @throws \Exception
    *
@@ -36,7 +38,7 @@ interface PluginCollectionItemInterface extends FieldItemInterface {
    * @param string $plugin_id
    * @param mixed[] $plugin_configuration
    *
-   * @return \Drupal\Component\Plugin\PluginInspectionInterface|null
+   * @return PluginInspectionInterface|null
    *   A plugin instance or NULL if there was no plugin ID.
    *
    * @deprecated Deprecated as of 8.x-2.0 and scheduled for removal before
@@ -48,7 +50,7 @@ interface PluginCollectionItemInterface extends FieldItemInterface {
   /**
    * Gets the instantiated plugin.
    *
-   * @return \Drupal\Component\Plugin\PluginInspectionInterface|null
+   * @return PluginInspectionInterface|null
    *   The plugin or NULL if no plugin was set yet.
    */
   public function getContainedPluginInstance();
@@ -56,11 +58,11 @@ interface PluginCollectionItemInterface extends FieldItemInterface {
   /**
    * Sets the instantiated plugin.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $plugin_instance
+   * @param PluginInspectionInterface $plugin_instance
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the given plugin instance does not exist for the type of plugin
    *   this container contains.
    */
diff --git a/src/Plugin/Field/FieldWidget/PluginSelector.php b/src/Plugin/Field/FieldWidget/PluginSelector.php
index 12f753b..6594042 100644
--- a/src/Plugin/Field/FieldWidget/PluginSelector.php
+++ b/src/Plugin/Field/FieldWidget/PluginSelector.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\plugin\Plugin\Field\FieldWidget;
 
+use Drupal\plugin\Plugin\Field\FieldType\PluginCollectionItemInterface;
+use Drupal\plugin\PluginType\PluginTypeInterface;
+use Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\plugin\PluginType\PluginTypeManagerInterface;
+use Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorManagerInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
@@ -24,9 +30,9 @@ class PluginSelector extends WidgetBase {
    * {@inheritdoc}
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\plugin\Plugin\Field\FieldType\PluginCollectionItemInterface $item */
+    /** @var PluginCollectionItemInterface $item */
     $item = $items[$delta];
-    /** @var \Drupal\plugin\PluginType\PluginTypeInterface $plugin_type */
+    /** @var PluginTypeInterface $plugin_type */
     $plugin_type = $item->getPluginType();
 
     $element = [
@@ -86,24 +92,24 @@ class PluginSelector extends WidgetBase {
   /**
    * Gets the plugin selector for a field item's elements.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param mixed[] $element
    *   The field widget's form elements.
    *
-   * @return \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorInterface
+   * @return PluginSelectorInterface
    */
   protected static function getPluginSelector(FormStateInterface $form_state, array $element) {
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+    /** @var FieldDefinitionInterface $field_definition */
     $field_definition = $element['#field_definition'];
     $form_state_key = sprintf('plugin_selector:%s:%d', $field_definition->getName(), $element['#delta']);
     if ($form_state->has($form_state_key)) {
       $plugin_selector = $form_state->get($form_state_key);
     }
     else {
-      /** @var \Drupal\plugin\PluginType\PluginTypeManagerInterface $plugin_type_manager */
+      /** @var PluginTypeManagerInterface $plugin_type_manager */
       $plugin_type_manager = \Drupal::service('plugin.plugin_type_manager');
 
-      /** @var \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorManagerInterface $plugin_selector_manager */
+      /** @var PluginSelectorManagerInterface $plugin_selector_manager */
       $plugin_selector_manager = \Drupal::service('plugin.manager.plugin.plugin_selector');
 
       $plugin_type = $plugin_type_manager->getPluginType($element['#plugin_type_id']);
diff --git a/src/Plugin/Field/FieldWidget/PluginSelectorDeriver.php b/src/Plugin/Field/FieldWidget/PluginSelectorDeriver.php
index 8c845e2..fdb657a 100644
--- a/src/Plugin/Field/FieldWidget/PluginSelectorDeriver.php
+++ b/src/Plugin/Field/FieldWidget/PluginSelectorDeriver.php
@@ -15,7 +15,7 @@ class PluginSelectorDeriver extends DeriverBase implements ContainerDeriverInter
   /**
    * The plugin selector manager.
    *
-   * @var \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorManagerInterface
+   * @var PluginSelectorManagerInterface
    */
   protected $pluginSelectorManager;
 
diff --git a/src/Plugin/Plugin/PluginSelector/AdvancedPluginSelectorBase.php b/src/Plugin/Plugin/PluginSelector/AdvancedPluginSelectorBase.php
index cbc8dc0..09a8aed 100644
--- a/src/Plugin/Plugin/PluginSelector/AdvancedPluginSelectorBase.php
+++ b/src/Plugin/Plugin/PluginSelector/AdvancedPluginSelectorBase.php
@@ -30,9 +30,9 @@ abstract class AdvancedPluginSelectorBase extends PluginSelectorBase implements
    * @param array $configuration
    * @param string $plugin_id
    * @param array $plugin_definition
-   * @param \Drupal\plugin\DefaultPluginResolver\DefaultPluginResolverInterface $default_plugin_resolver
+   * @param DefaultPluginResolverInterface $default_plugin_resolver
    *   The default plugin resolver.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, DefaultPluginResolverInterface $default_plugin_resolver, TranslationInterface $string_translation) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $default_plugin_resolver);
@@ -111,11 +111,11 @@ abstract class AdvancedPluginSelectorBase extends PluginSelectorBase implements
   /**
    * Gets a plugin selector from the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param string[] $form_state_key
    *   The key under which the plugin selector is stored.
    *
-   * @return \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorInterface
+   * @return PluginSelectorInterface
    */
   protected static function getPluginSelector(FormStateInterface $form_state, array $form_state_key) {
     return $form_state->get($form_state_key);
@@ -205,7 +205,7 @@ abstract class AdvancedPluginSelectorBase extends PluginSelectorBase implements
   /**
    * Builds the plugin configuration form elements.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -290,9 +290,9 @@ abstract class AdvancedPluginSelectorBase extends PluginSelectorBase implements
    *
    * @param array $root_element
    *   The plugin's root element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form's state.
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface[] $plugins
+   * @param PluginInspectionInterface[] $plugins
    *   The available plugins.
    *
    * @return array
diff --git a/src/Plugin/Plugin/PluginSelector/PluginSelectorBase.php b/src/Plugin/Plugin/PluginSelector/PluginSelectorBase.php
index ed0ec01..470b116 100644
--- a/src/Plugin/Plugin/PluginSelector/PluginSelectorBase.php
+++ b/src/Plugin/Plugin/PluginSelector/PluginSelectorBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\plugin\Plugin\Plugin\PluginSelector;
 
+use Drupal\plugin\PluginDiscovery\TypedDiscoveryInterface;
 use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
 use Drupal\Component\Plugin\Factory\FactoryInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -25,42 +26,42 @@ abstract class PluginSelectorBase extends PluginBase implements PluginSelectorIn
   /**
    * The default plugin resolver.
    *
-   * @var \Drupal\plugin\DefaultPluginResolver\DefaultPluginResolverInterface
+   * @var DefaultPluginResolverInterface
    */
   protected $defaultPluginResolver;
 
   /**
    * The previously selected plugins.
    *
-   * @var \Drupal\Component\Plugin\PluginInspectionInterface[]
+   * @var PluginInspectionInterface[]
    */
   protected $previouslySelectedPlugins = [];
 
   /**
    * The plugin discovery of selectable plugins.
    *
-   * @var \Drupal\plugin\PluginDiscovery\TypedDiscoveryInterface
+   * @var TypedDiscoveryInterface
    */
   protected $selectablePluginDiscovery;
 
   /**
    * The selectable plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\FactoryInterface
+   * @var FactoryInterface
    */
   protected $selectablePluginFactory;
 
   /**
    * The plugin type of which to select plugins.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeInterface
+   * @var PluginTypeInterface
    */
   protected $selectablePluginType;
 
   /**
    * The selected plugin.
    *
-   * @var \Drupal\Component\Plugin\PluginInspectionInterface
+   * @var PluginInspectionInterface
    */
   protected $selectedPlugin;
 
@@ -73,7 +74,7 @@ abstract class PluginSelectorBase extends PluginBase implements PluginSelectorIn
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\plugin\DefaultPluginResolver\DefaultPluginResolverInterface $default_plugin_resolver
+   * @param DefaultPluginResolverInterface $default_plugin_resolver
    *   The default plugin resolver.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DefaultPluginResolverInterface $default_plugin_resolver) {
diff --git a/src/Plugin/Plugin/PluginSelector/PluginSelectorInterface.php b/src/Plugin/Plugin/PluginSelector/PluginSelectorInterface.php
index 82efeca..42e10c0 100644
--- a/src/Plugin/Plugin/PluginSelector/PluginSelectorInterface.php
+++ b/src/Plugin/Plugin/PluginSelector/PluginSelectorInterface.php
@@ -99,7 +99,7 @@ interface PluginSelectorInterface extends PluginInspectionInterface, Configurabl
   /**
    * Sets previously selected plugins.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface[] $plugins
+   * @param PluginInspectionInterface[] $plugins
    *
    * @return $this
    *
@@ -111,7 +111,7 @@ interface PluginSelectorInterface extends PluginInspectionInterface, Configurabl
   /**
    * Gets previously selected plugins.
    *
-   * @return \Drupal\Component\Plugin\PluginInspectionInterface[]
+   * @return PluginInspectionInterface[]
    *
    * @see self::setKeepPreviouslySelectedPlugins
    */
@@ -120,14 +120,14 @@ interface PluginSelectorInterface extends PluginInspectionInterface, Configurabl
   /**
    * Gets the selected plugin.
    *
-   * @return \Drupal\Component\Plugin\PluginInspectionInterface
+   * @return PluginInspectionInterface
    */
   public function getSelectedPlugin();
 
   /**
    * Sets the selected plugin.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $plugin
+   * @param PluginInspectionInterface $plugin
    *
    * @return $this
    */
@@ -145,7 +145,7 @@ interface PluginSelectorInterface extends PluginInspectionInterface, Configurabl
   /**
    * Sets the selectable plugin type.
    *
-   * @param \Drupal\plugin\PluginType\PluginTypeInterface $plugin_type
+   * @param PluginTypeInterface $plugin_type
    *   The type of which to select plugins.
    *
    * @return $this
@@ -168,7 +168,7 @@ interface PluginSelectorInterface extends PluginInspectionInterface, Configurabl
   /**
    * Overrides the plugin type's factory.
    *
-   * @param \Drupal\Component\Plugin\Factory\FactoryInterface $plugin_factory
+   * @param FactoryInterface $plugin_factory
    *
    * @return $this
    *
@@ -183,7 +183,7 @@ interface PluginSelectorInterface extends PluginInspectionInterface, Configurabl
    *
    * @param mixed[] $form
    *   Any suggested form elements to build upon. May be ignored.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for $form and the return value. This often is not the
    *   complete (global) form state.
    *
@@ -201,7 +201,7 @@ interface PluginSelectorInterface extends PluginInspectionInterface, Configurabl
    *
    * @param mixed[] $form
    *   The selector form as built by static::buildSelectorForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for $form. This often is not the complete (global) form
    *   state.
    */
@@ -212,7 +212,7 @@ interface PluginSelectorInterface extends PluginInspectionInterface, Configurabl
    *
    * @param mixed[] $form
    *   The selector form as built by static::buildSelectorForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for $form. This often is not the complete (global) form
    *   state.
    */
diff --git a/src/Plugin/Plugin/PluginSelector/PluginSelectorManager.php b/src/Plugin/Plugin/PluginSelector/PluginSelectorManager.php
index 2b8a485..77d5092 100644
--- a/src/Plugin/Plugin/PluginSelector/PluginSelectorManager.php
+++ b/src/Plugin/Plugin/PluginSelector/PluginSelectorManager.php
@@ -21,9 +21,9 @@ class PluginSelectorManager extends DefaultPluginManager implements PluginSelect
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Plugin/PluginSelector/PluginSelectorManagerInterface.php b/src/Plugin/Plugin/PluginSelector/PluginSelectorManagerInterface.php
index 03267e2..af4e0bf 100644
--- a/src/Plugin/Plugin/PluginSelector/PluginSelectorManagerInterface.php
+++ b/src/Plugin/Plugin/PluginSelector/PluginSelectorManagerInterface.php
@@ -17,7 +17,7 @@ interface PluginSelectorManagerInterface extends PluginManagerInterface {
    * @param array $configuration
    *   An array of configuration relevant to the plugin instance.
    *
-   * @return \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorInterface
+   * @return PluginSelectorInterface
    */
   public function createInstance($plugin_id, array $configuration = []);
 
diff --git a/src/Plugin/Plugin/PluginSelector/Radios.php b/src/Plugin/Plugin/PluginSelector/Radios.php
index f02c8f8..4a70288 100644
--- a/src/Plugin/Plugin/PluginSelector/Radios.php
+++ b/src/Plugin/Plugin/PluginSelector/Radios.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\plugin\Plugin\Plugin\PluginSelector;
 
+use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\plugin\PluginDefinition\PluginLabelDefinitionInterface;
 
@@ -32,7 +33,7 @@ class Radios extends AdvancedPluginSelectorBase {
    */
   protected function buildSelector(array $root_element, FormStateInterface $form_state, array $plugins) {
     $element = parent::buildSelector($root_element, $form_state, $plugins);
-    /** @var \Drupal\Component\Plugin\PluginInspectionInterface[] $plugins */
+    /** @var PluginInspectionInterface[] $plugins */
     $plugin_options = [];
     foreach ($plugins as $plugin) {
       $plugin_definition = $this->selectablePluginType->ensureTypedPluginDefinition($plugin->getPluginDefinition());
diff --git a/src/Plugin/Plugin/PluginSelector/SelectList.php b/src/Plugin/Plugin/PluginSelector/SelectList.php
index e43f9dd..2d1b3ae 100644
--- a/src/Plugin/Plugin/PluginSelector/SelectList.php
+++ b/src/Plugin/Plugin/PluginSelector/SelectList.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\plugin\Plugin\Plugin\PluginSelector;
 
+use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\plugin\PluginDefinition\PluginLabelDefinitionInterface;
 use Drupal\plugin\PluginHierarchyTrait;
@@ -23,8 +24,7 @@ class SelectList extends AdvancedPluginSelectorBase {
    */
   protected function buildSelector(array $root_element, FormStateInterface $form_state, array $plugins) {
     $element = parent::buildSelector($root_element, $form_state, $plugins);
-    /** @var \Drupal\Component\Plugin\PluginInspectionInterface[] $plugins */
-
+    /** @var PluginInspectionInterface[] $plugins */
     $element['container']['plugin_id'] = [
       '#ajax' => [
         'callback' => [get_class(), 'ajaxRebuildForm'],
diff --git a/src/Plugin/PluginOperationsProviderPluginManagerTrait.php b/src/Plugin/PluginOperationsProviderPluginManagerTrait.php
index 97d3b49..0fae8e0 100644
--- a/src/Plugin/PluginOperationsProviderPluginManagerTrait.php
+++ b/src/Plugin/PluginOperationsProviderPluginManagerTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\plugin\Plugin;
 
+use Drupal\Core\DependencyInjection\ClassResolverInterface;
+use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
 /**
  * Implements \Drupal\plugin\PluginOperationsProviderProviderInterface for plugin managers.
  *
@@ -27,7 +29,7 @@ trait PluginOperationsProviderPluginManagerTrait {
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
@@ -35,7 +37,7 @@ trait PluginOperationsProviderPluginManagerTrait {
    * {@inheritdoc}
    */
   public function getOperationsProvider($plugin_id) {
-    /** @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\Drupal\plugin\Plugin\PluginOperationsProviderPluginManagerTrait $this */
+    /** @var DiscoveryInterface|\Drupal\plugin\Plugin\PluginOperationsProviderPluginManagerTrait $this */
     $definition = $this->getDefinition($plugin_id);
     if (isset($definition['operations_provider'])) {
       return $this->classResolver->getInstanceFromDefinition($definition['operations_provider']);
diff --git a/src/Plugin/views/filter/PluginId.php b/src/Plugin/views/filter/PluginId.php
index 12d8107..dda1afc 100644
--- a/src/Plugin/views/filter/PluginId.php
+++ b/src/Plugin/views/filter/PluginId.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\plugin\Plugin\views\filter;
 
+use Drupal\plugin\PluginType\PluginTypeManagerInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -22,7 +23,7 @@ class PluginId extends InOperator implements ContainerFactoryPluginInterface {
   /**
    * The plugin type.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeInterface
+   * @var PluginTypeInterface
    */
   protected $pluginType;
 
@@ -35,7 +36,7 @@ class PluginId extends InOperator implements ContainerFactoryPluginInterface {
    *   The plugin ID.
    * @param mixed[] $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\plugin\PluginType\PluginTypeInterface $plugin_type
+   * @param PluginTypeInterface $plugin_type
    *   The plugin type.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, PluginTypeInterface $plugin_type) {
@@ -47,7 +48,7 @@ class PluginId extends InOperator implements ContainerFactoryPluginInterface {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Drupal\plugin\PluginType\PluginTypeManagerInterface $plugin_type_manager */
+    /** @var PluginTypeManagerInterface $plugin_type_manager */
     $plugin_type_manager = $container->get('plugin.plugin_type_manager');
 
     return new static($configuration, $plugin_id, $plugin_definition, $plugin_type_manager->getPluginType($configuration['plugin_type_id']));
@@ -86,7 +87,7 @@ class PluginId extends InOperator implements ContainerFactoryPluginInterface {
   /**
    * Gets this instance's cacheable metadata.
    *
-   * @return \Drupal\Core\Cache\CacheableMetadata
+   * @return CacheableMetadata
    */
   protected function getCacheableMetadata() {
     $cacheable_metadata = new CacheableMetadata();
diff --git a/src/PluginDefinition/ArrayPluginDefinitionDecorator.php b/src/PluginDefinition/ArrayPluginDefinitionDecorator.php
index 2ce5829..f30c2f6 100644
--- a/src/PluginDefinition/ArrayPluginDefinitionDecorator.php
+++ b/src/PluginDefinition/ArrayPluginDefinitionDecorator.php
@@ -265,7 +265,7 @@ class ArrayPluginDefinitionDecorator implements ArrayPluginDefinitionInterface,
    * {@inheritdoc}
    */
   public function doMergeDefaultDefinition(PluginDefinitionInterface $other_definition) {
-    /** @var \Drupal\plugin\PluginDefinition\ArrayPluginDefinitionInterface $other_definition */
+    /** @var ArrayPluginDefinitionInterface $other_definition */
     $this->mergeDefaultArrayDefinition($other_definition->getArrayDefinition());
   }
 
@@ -273,7 +273,7 @@ class ArrayPluginDefinitionDecorator implements ArrayPluginDefinitionInterface,
    * {@inheritdoc}
    */
   public function doMergeOverrideDefinition(PluginDefinitionInterface $other_definition) {
-    /** @var \Drupal\plugin\PluginDefinition\ArrayPluginDefinitionInterface $other_definition */
+    /** @var ArrayPluginDefinitionInterface $other_definition */
     $this->mergeOverrideArrayDefinition($other_definition->getArrayDefinition());
   }
 
diff --git a/src/PluginDefinition/PluginContextDefinitionInterface.php b/src/PluginDefinition/PluginContextDefinitionInterface.php
index 26ceb27..bb56e02 100644
--- a/src/PluginDefinition/PluginContextDefinitionInterface.php
+++ b/src/PluginDefinition/PluginContextDefinitionInterface.php
@@ -14,7 +14,7 @@ interface PluginContextDefinitionInterface extends PluginDefinitionInterface {
   /**
    * Sets the context definitions.
    *
-   * @param \Drupal\Component\Plugin\Context\ContextDefinitionInterface[] $context_definitions
+   * @param ContextDefinitionInterface[] $context_definitions
    *   The array of context definitions, keyed by context name.
    *
    * @return $this
@@ -27,7 +27,7 @@ interface PluginContextDefinitionInterface extends PluginDefinitionInterface {
   /**
    * Gets the context definitions.
    *
-   * @return \Drupal\Component\Plugin\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    *   The array of context definitions, keyed by context name.
    */
   public function getContextDefinitions();
@@ -37,7 +37,7 @@ interface PluginContextDefinitionInterface extends PluginDefinitionInterface {
    *
    * @param string $name
    *   The name of the context in the plugin definition.
-   * @param \Drupal\Component\Plugin\Context\ContextDefinitionInterface $context_definition
+   * @param ContextDefinitionInterface $context_definition
    *   The context definition to set.
    *
    * @return $this
@@ -53,7 +53,7 @@ interface PluginContextDefinitionInterface extends PluginDefinitionInterface {
    * @throws \InvalidArgumentException
    *   If the requested context does not exist.
    *
-   * @return \Drupal\Component\Plugin\Context\ContextDefinitionInterface
+   * @return ContextDefinitionInterface
    *
    * @see self::hasContextDefinition()
    */
diff --git a/src/PluginDefinition/PluginContextDefinitionTrait.php b/src/PluginDefinition/PluginContextDefinitionTrait.php
index 8f4b015..472ed74 100644
--- a/src/PluginDefinition/PluginContextDefinitionTrait.php
+++ b/src/PluginDefinition/PluginContextDefinitionTrait.php
@@ -14,7 +14,7 @@ trait PluginContextDefinitionTrait {
   /**
    * The context definitions.
    *
-   * @var \Drupal\Component\Plugin\Context\ContextDefinitionInterface[]
+   * @var ContextDefinitionInterface[]
    */
   protected $contextDefinitions = [];
 
diff --git a/src/PluginDefinition/PluginDefinitionValidator.php b/src/PluginDefinition/PluginDefinitionValidator.php
index 3e34ca2..e3bdaea 100644
--- a/src/PluginDefinition/PluginDefinitionValidator.php
+++ b/src/PluginDefinition/PluginDefinitionValidator.php
@@ -47,7 +47,7 @@ class PluginDefinitionValidator {
   /**
    * Validates plugin context definitions.
    *
-   * @param \Drupal\Component\Plugin\Context\ContextDefinitionInterface[] $context_definitions
+   * @param ContextDefinitionInterface[] $context_definitions
    *   The array of context definitions, keyed by context name.
    *
    * @throws \InvalidArgumentException
diff --git a/src/PluginDefinition/PluginDescriptionDefinitionInterface.php b/src/PluginDefinition/PluginDescriptionDefinitionInterface.php
index 7ae6be5..7545653 100644
--- a/src/PluginDefinition/PluginDescriptionDefinitionInterface.php
+++ b/src/PluginDefinition/PluginDescriptionDefinitionInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\plugin\PluginDefinition;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * Defines a plugin definition that includes a description.
  *
@@ -12,7 +13,7 @@ interface PluginDescriptionDefinitionInterface extends PluginDefinitionInterface
   /**
    * Sets the human-readable plugin description.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|string $description
+   * @param TranslatableMarkup|string $description
    *   The description.
    *
    * @return $this
@@ -22,7 +23,7 @@ interface PluginDescriptionDefinitionInterface extends PluginDefinitionInterface
   /**
    * Gets the human-readable plugin description.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string|null
+   * @return TranslatableMarkup|string|null
    *   The description or NULL if there is none.
    */
   public function getDescription();
diff --git a/src/PluginDiscovery/PluginDiscoveryDecorator.php b/src/PluginDiscovery/PluginDiscoveryDecorator.php
index 08fa4ee..1eae98e 100644
--- a/src/PluginDiscovery/PluginDiscoveryDecorator.php
+++ b/src/PluginDiscovery/PluginDiscoveryDecorator.php
@@ -18,7 +18,7 @@ class PluginDiscoveryDecorator implements DiscoveryInterface, CachedDiscoveryInt
   /**
    * The decorated discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface
+   * @var DiscoveryInterface
    */
   protected $decoratedDiscovery;
 
@@ -43,7 +43,7 @@ class PluginDiscoveryDecorator implements DiscoveryInterface, CachedDiscoveryInt
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\Component\Plugin\Discovery\DiscoveryInterface $decorated_discovery
+   * @param DiscoveryInterface $decorated_discovery
    *   The decorated discovery.
    */
   public function __construct(DiscoveryInterface $decorated_discovery) {
diff --git a/src/PluginDiscovery/TypedDefinitionEnsuringPluginDiscoveryDecorator.php b/src/PluginDiscovery/TypedDefinitionEnsuringPluginDiscoveryDecorator.php
index a87044e..f7c664b 100644
--- a/src/PluginDiscovery/TypedDefinitionEnsuringPluginDiscoveryDecorator.php
+++ b/src/PluginDiscovery/TypedDefinitionEnsuringPluginDiscoveryDecorator.php
@@ -14,16 +14,16 @@ class TypedDefinitionEnsuringPluginDiscoveryDecorator extends PluginDiscoveryDec
   /**
    * The type of the plugin definitions to decorate.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeInterface
+   * @var PluginTypeInterface
    */
   protected $pluginType;
 
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\plugin\PluginType\PluginTypeInterface $plugin_type
+   * @param PluginTypeInterface $plugin_type
    *   The plugin type of which to decorate definitions.
-   * @param \Drupal\Component\Plugin\Discovery\DiscoveryInterface|NULL $decorated_discovery
+   * @param DiscoveryInterface|NULL $decorated_discovery
    *   The decorated discovery, or NULL to use the plugin type's default
    *   discovery.
    */
diff --git a/src/PluginDiscovery/TypedDiscoveryInterface.php b/src/PluginDiscovery/TypedDiscoveryInterface.php
index feec634..957ad5c 100644
--- a/src/PluginDiscovery/TypedDiscoveryInterface.php
+++ b/src/PluginDiscovery/TypedDiscoveryInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\plugin\PluginDiscovery;
 
+use Drupal\plugin\PluginDefinition\PluginDefinitionInterface;
 use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
 
 /**
@@ -15,7 +16,7 @@ interface TypedDiscoveryInterface extends DiscoveryInterface {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\plugin\PluginDefinition\PluginDefinitionInterface|NULL
+   * @return PluginDefinitionInterface|NULL
    *   A plugin definition, or NULL if the plugin ID is invalid and
    *   $exception_on_invalid is FALSE.
    */
@@ -24,7 +25,7 @@ interface TypedDiscoveryInterface extends DiscoveryInterface {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\plugin\PluginDefinition\PluginDefinitionInterface[]
+   * @return PluginDefinitionInterface[]
    *   An array of plugin definitions (empty array if no definitions were
    *   found). Keys are plugin IDs.
    */
diff --git a/src/PluginHierarchyTrait.php b/src/PluginHierarchyTrait.php
index 5b9db0d..115f413 100644
--- a/src/PluginHierarchyTrait.php
+++ b/src/PluginHierarchyTrait.php
@@ -15,7 +15,7 @@ trait PluginHierarchyTrait {
   /**
    * Returns a hierarchical plugin representation.
    *
-   * @param \Drupal\plugin\PluginDiscovery\TypedDiscoveryInterface $plugin_discovery
+   * @param TypedDiscoveryInterface $plugin_discovery
    *   The typed plugin discovery.
    *
    * @return array[]
diff --git a/src/PluginManager/PluginManagerDecorator.php b/src/PluginManager/PluginManagerDecorator.php
index 7bb6171..388848b 100644
--- a/src/PluginManager/PluginManagerDecorator.php
+++ b/src/PluginManager/PluginManagerDecorator.php
@@ -15,16 +15,16 @@ class PluginManagerDecorator extends PluginDiscoveryDecorator implements PluginM
   /**
    * The decorated plugin factory.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $decoratedFactory;
 
   /**
    * Creates a new instance.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager
+   * @param PluginManagerInterface $plugin_manager
    *   The decorated plugin manager.
-   * @param \Drupal\Component\Plugin\Discovery\DiscoveryInterface|null $discovery
+   * @param DiscoveryInterface|null $discovery
    *   A plugin discovery to use instead of the decorated plugin manager, or
    *   NULL to use the decorated plugin manager.
    */
diff --git a/src/PluginOperationsProviderProviderInterface.php b/src/PluginOperationsProviderProviderInterface.php
index e948df4..1b15212 100644
--- a/src/PluginOperationsProviderProviderInterface.php
+++ b/src/PluginOperationsProviderProviderInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\plugin;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * Defines a class that can get operations providers for plugins.
  */
@@ -12,10 +13,10 @@ interface PluginOperationsProviderProviderInterface {
    *
    * @param string $plugin_id
    *
-   * @return \Drupal\plugin\PluginOperationsProviderInterface|null
+   * @return PluginOperationsProviderInterface|null
    *   The operations provider or NULL if none is available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function getOperationsProvider($plugin_id);
 
diff --git a/src/PluginType/DefaultPluginTypeOperationsProvider.php b/src/PluginType/DefaultPluginTypeOperationsProvider.php
index 7705902..769add6 100644
--- a/src/PluginType/DefaultPluginTypeOperationsProvider.php
+++ b/src/PluginType/DefaultPluginTypeOperationsProvider.php
@@ -20,7 +20,7 @@ class DefaultPluginTypeOperationsProvider implements PluginTypeOperationsProvide
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translator.
    */
   public function __construct(TranslationInterface $string_translation) {
diff --git a/src/PluginType/PluginType.php b/src/PluginType/PluginType.php
index e242ed0..e08b855 100644
--- a/src/PluginType/PluginType.php
+++ b/src/PluginType/PluginType.php
@@ -32,7 +32,7 @@ class PluginType implements ConfigurablePluginTypeInterface {
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    *
    * @todo Make this class a real value object in the next major version.
    */
@@ -55,21 +55,21 @@ class PluginType implements ConfigurablePluginTypeInterface {
   /**
    * The human-readable label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @var TranslatableMarkup|string
    */
   protected $label;
 
   /**
    * The human-readable description.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup|string|null
+   * @var TranslatableMarkup|string|null
    */
   protected $description;
 
   /**
    * The operations provider..
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeOperationsProviderInterface
+   * @var PluginTypeOperationsProviderInterface
    */
   protected $operationsProvider;
 
@@ -106,13 +106,13 @@ class PluginType implements ConfigurablePluginTypeInterface {
    *
    * @param mixed[] $definition
    *   The plugin type definition.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translator.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config_manager
+   * @param TypedConfigManagerInterface $typed_config_manager
    *   The typed configuration manager.
    *
    * @param mixed[] $definition
diff --git a/src/PluginType/PluginTypeInterface.php b/src/PluginType/PluginTypeInterface.php
index d724352..1da8072 100644
--- a/src/PluginType/PluginTypeInterface.php
+++ b/src/PluginType/PluginTypeInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\plugin\PluginType;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\plugin\PluginDefinition\PluginDefinitionInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
@@ -12,7 +15,7 @@ interface PluginTypeInterface {
   /**
    * Creates a plugin type based on a definition.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param mixed[] $definition
    *
    * @return static
@@ -29,14 +32,14 @@ interface PluginTypeInterface {
   /**
    * Gets the human-readable label.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    */
   public function getLabel();
 
   /**
    * Gets the human-readable description.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    */
   public function getDescription();
 
@@ -60,17 +63,17 @@ interface PluginTypeInterface {
   /**
    * Gets the plugin manager.
    *
-   * @return \Drupal\Component\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function getPluginManager();
 
   /**
    * Ensures that a plugin definition is typed.
    *
-   * @param \Drupal\plugin\PluginDefinition\PluginDefinitionInterface|mixed $plugin_definition
+   * @param PluginDefinitionInterface|mixed $plugin_definition
    *   An original plugin definition of this type. It may already be typed.
    *
-   * @return \Drupal\plugin\PluginDefinition\PluginDefinitionInterface
+   * @return PluginDefinitionInterface
    *   The typed plugin definition.
    *
    * @throws \InvalidArgumentException
@@ -81,7 +84,7 @@ interface PluginTypeInterface {
   /**
    * Gets the operations provider.
    *
-   * @return \Drupal\plugin\PluginType\PluginTypeOperationsProviderInterface
+   * @return PluginTypeOperationsProviderInterface
    */
   public function getOperationsProvider();
 
diff --git a/src/PluginType/PluginTypeManager.php b/src/PluginType/PluginTypeManager.php
index 1cbbb10..29023a5 100644
--- a/src/PluginType/PluginTypeManager.php
+++ b/src/PluginType/PluginTypeManager.php
@@ -16,21 +16,21 @@ class PluginTypeManager implements PluginTypeManagerInterface {
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The known plugin types.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeInterface[]|null
+   * @var PluginTypeInterface[]|null
    *   An array of plugin types or NULL if plugin type discovery has not been
    *   executed yet.
    */
@@ -39,9 +39,9 @@ class PluginTypeManager implements PluginTypeManagerInterface {
   /**
    * Creates a new instance.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ContainerInterface $container, ModuleHandlerInterface $module_handler) {
@@ -123,7 +123,7 @@ class PluginTypeManager implements PluginTypeManagerInterface {
       // Create plugin types from their definitions.
       $file_plugin_types = [];
       foreach ($plugin_type_definitions as $plugin_type_definition) {
-        /** @var \Drupal\plugin\PluginType\PluginTypeInterface $class */
+        /** @var PluginTypeInterface $class */
         $class = $plugin_type_definition['class'];
         $plugin_type= $class::createFromDefinition($this->container, $plugin_type_definition);
         $file_plugin_types[$plugin_type->getId()] = $plugin_type;
diff --git a/src/PluginType/PluginTypeManagerInterface.php b/src/PluginType/PluginTypeManagerInterface.php
index 0eadef3..a64350f 100644
--- a/src/PluginType/PluginTypeManagerInterface.php
+++ b/src/PluginType/PluginTypeManagerInterface.php
@@ -23,7 +23,7 @@ interface PluginTypeManagerInterface {
    * @param string $id
    *   The plugin type's ID.
    *
-   * @return \Drupal\plugin\PluginType\PluginTypeInterface
+   * @return PluginTypeInterface
    *
    * @throws \InvalidArgumentException
    *   Thrown if the plugin type is unknown.
@@ -33,7 +33,7 @@ interface PluginTypeManagerInterface {
   /**
    * Gets the known plugin types.
    *
-   * @return \Drupal\plugin\PluginType\PluginTypeInterface[]
+   * @return PluginTypeInterface[]
    */
   public function getPluginTypes();
 
diff --git a/src/ViewsData.php b/src/ViewsData.php
index d8f44cc..3b674d0 100644
--- a/src/ViewsData.php
+++ b/src/ViewsData.php
@@ -19,30 +19,30 @@ class ViewsData {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The plugin type manager.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeManagerInterface
+   * @var PluginTypeManagerInterface
    */
   protected $pluginTypeManager;
 
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    * @param \Drupal\plugin\PluginType\PluginTypeManagerInterface
    *   The plugin type manager.
@@ -131,7 +131,7 @@ class ViewsData {
    *
    * @param array[] $data
    *   An array of Views data.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition
+   * @param FieldStorageDefinitionInterface $field_storage_definition
    *   The storage definition of the field to alter the data for.
    * @param string $table_name
    *   The name of the table to alter the data for.
@@ -157,7 +157,7 @@ class ViewsData {
     $plugin_type = $this->pluginTypeManager->getPluginType($plugin_type_id);
 
     // Alter the plugin ID column.
-    /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $plugin_id_old_title */
+    /** @var TranslatableMarkup $plugin_id_old_title */
     $plugin_id_old_title = $data[$table_name][$plugin_id_column_name]['title'];
     $plugin_id_title_arguments = [
       '@type_label' => $plugin_type->getLabel(),
diff --git a/tests/modules/plugin_test_helper/src/AdvancedPluginSelectorBasePluginSelectorForm.php b/tests/modules/plugin_test_helper/src/AdvancedPluginSelectorBasePluginSelectorForm.php
index e262608..27ed713 100644
--- a/tests/modules/plugin_test_helper/src/AdvancedPluginSelectorBasePluginSelectorForm.php
+++ b/tests/modules/plugin_test_helper/src/AdvancedPluginSelectorBasePluginSelectorForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\plugin_test_helper;
 
+use Drupal\plugin\PluginType\PluginTypeManagerInterface;
+use Drupal\plugin\Plugin\Plugin\PluginSelector\AdvancedPluginSelectorBase;
+use Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Form\FormInterface;
@@ -22,14 +25,14 @@ class AdvancedPluginSelectorBasePluginSelectorForm implements ContainerInjection
   /**
    * The plugin selector manager.
    *
-   * @var \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorManagerInterface
+   * @var PluginSelectorManagerInterface
    */
   protected $pluginSelectorManager;
 
   /**
    * A selectable plugin type.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeInterface
+   * @var PluginTypeInterface
    */
   protected $selectablePluginType;
 
@@ -45,7 +48,7 @@ class AdvancedPluginSelectorBasePluginSelectorForm implements ContainerInjection
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\plugin\PluginType\PluginTypeManagerInterface $plugin_type_manager */
+    /** @var PluginTypeManagerInterface $plugin_type_manager */
     $plugin_type_manager = $container->get('plugin.plugin_type_manager');
 
     return new static($plugin_type_manager->getPluginType('plugin_test_helper_mock'), $container->get('plugin.manager.plugin.plugin_selector'));
@@ -69,7 +72,7 @@ class AdvancedPluginSelectorBasePluginSelectorForm implements ContainerInjection
       $selectable_plugin_discovery = new LimitedPluginDiscoveryDecorator($this->selectablePluginType->getPluginManager());
       $selectable_plugin_discovery->setDiscoveryLimit(explode(',', $allowed_selectable_plugin_ids));
       $selectable_plugin_manager = new PluginManagerDecorator($this->selectablePluginType->getPluginManager(), $selectable_plugin_discovery);
-      /** @var \Drupal\plugin\Plugin\Plugin\PluginSelector\AdvancedPluginSelectorBase $plugin_selector */
+      /** @var AdvancedPluginSelectorBase $plugin_selector */
       $plugin_selector = $this->pluginSelectorManager->createInstance($plugin_id);
       $plugin_selector->setSelectablePluginType($this->selectablePluginType);
       $plugin_selector->setSelectablePluginDiscovery($selectable_plugin_manager);
@@ -103,7 +106,7 @@ class AdvancedPluginSelectorBasePluginSelectorForm implements ContainerInjection
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorInterface $plugin_selector */
+    /** @var PluginSelectorInterface $plugin_selector */
     $plugin_selector = $form_state->get('plugin_selector');
     $plugin_form = isset($form['tree']) ? $form['tree']['plugin'] : $form['plugin'];
     $plugin_selector->validateSelectorForm($plugin_form, $form_state);
@@ -113,7 +116,7 @@ class AdvancedPluginSelectorBasePluginSelectorForm implements ContainerInjection
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorInterface $plugin_selector */
+    /** @var PluginSelectorInterface $plugin_selector */
     $plugin_selector = $form_state->get('plugin_selector');
     $plugin_form = isset($form['tree']) ? $form['tree']['plugin'] : $form['plugin'];
     $plugin_selector->submitSelectorForm($plugin_form, $form_state);
diff --git a/tests/modules/plugin_test_helper/src/Controller/PluginDefinitionParamConverter.php b/tests/modules/plugin_test_helper/src/Controller/PluginDefinitionParamConverter.php
index a549ca8..31e0ab5 100644
--- a/tests/modules/plugin_test_helper/src/Controller/PluginDefinitionParamConverter.php
+++ b/tests/modules/plugin_test_helper/src/Controller/PluginDefinitionParamConverter.php
@@ -13,7 +13,7 @@ class PluginDefinitionParamConverter {
   /**
    * Executes the route.
    *
-   * @param \Drupal\Component\Plugin\Definition\PluginDefinitionInterface $plugin_definition
+   * @param PluginDefinitionInterface $plugin_definition
    *
    * @return string
    */
diff --git a/tests/modules/plugin_test_helper/src/Controller/PluginInstanceParamConverter.php b/tests/modules/plugin_test_helper/src/Controller/PluginInstanceParamConverter.php
index cefe6a0..32086f9 100644
--- a/tests/modules/plugin_test_helper/src/Controller/PluginInstanceParamConverter.php
+++ b/tests/modules/plugin_test_helper/src/Controller/PluginInstanceParamConverter.php
@@ -12,7 +12,7 @@ class PluginInstanceParamConverter {
   /**
    * Executes the route.
    *
-   * @param \Drupal\plugin_test_helper\Plugin\PluginTestHelper\MockPluginInterface $plugin
+   * @param MockPluginInterface $plugin
    *
    * @return string
    */
diff --git a/tests/modules/plugin_test_helper/src/Controller/PluginTypeParamConverter.php b/tests/modules/plugin_test_helper/src/Controller/PluginTypeParamConverter.php
index b8364f2..8a7a90d 100644
--- a/tests/modules/plugin_test_helper/src/Controller/PluginTypeParamConverter.php
+++ b/tests/modules/plugin_test_helper/src/Controller/PluginTypeParamConverter.php
@@ -12,7 +12,7 @@ class PluginTypeParamConverter {
   /**
    * Executes the route.
    *
-   * @param \Drupal\plugin\PluginType\PluginTypeInterface $plugin_type
+   * @param PluginTypeInterface $plugin_type
    *
    * @return string
    */
diff --git a/tests/src/Functional/Plugin/PluginSelector/RadiosTest.php b/tests/src/Functional/Plugin/PluginSelector/RadiosTest.php
index 5e1565c..20e8c46 100644
--- a/tests/src/Functional/Plugin/PluginSelector/RadiosTest.php
+++ b/tests/src/Functional/Plugin/PluginSelector/RadiosTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\plugin\Functional\Plugin\PluginSelector;
 
+use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -46,9 +47,12 @@ class RadiosTest extends BrowserTestBase {
     // Test the presence of default elements without available plugins.
     $path = $this->buildFormPath(['none'], $tree);
     $this->drupalGet($path);
-    $this->assertNoFieldByName($name_prefix . '[select][container][container][plugin_id]');
+    $this->assertSession()->fieldValueNotEquals($name_prefix . '[select][container][container][plugin_id]', '');
     $this->assertEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertText(t('There are no available options.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('There are no available options.'));
 
     // Test that the selector can be configured to show even if there is but a
     // single plugin available to choose from.
@@ -58,44 +62,50 @@ class RadiosTest extends BrowserTestBase {
     // Test the presence of default elements with one available plugin.
     $path = $this->buildFormPath(['plugin_test_helper_configurable_plugin'], $tree);
     $this->drupalGet($path);
-    $this->assertNoFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldValueNotEquals($name_prefix . '[select][container][plugin_id]', '');
     $this->assertEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertNoText(t('There are no available options.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('There are no available options.'));
 
     // Test the presence of default elements with multiple available plugins.
     $path = $this->buildFormPath(['plugin_test_helper_plugin', 'plugin_test_helper_configurable_plugin'], $tree);
     $this->drupalGet($path);
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertNoText(t('There are no available options.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('There are no available options.'));
 
     // Choose a plugin.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_plugin',
     ], t('Choose'));
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
 
     // Change the plugin.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_configurable_plugin',
     ], t('Choose'));
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
 
     // Submit the form.
     $foo = $this->randomString();
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_configurable_plugin',
       $name_prefix . '[plugin_form][foo]' => $foo,
 
     ], t('Submit'));
 
     $state = \Drupal::state();
-    /** @var \Drupal\Component\Plugin\PluginInspectionInterface|\Drupal\Component\Plugin\ConfigurablePluginInterface $selected_plugin */
+    /** @var PluginInspectionInterface|\Drupal\Component\Plugin\ConfigurablePluginInterface $selected_plugin */
     $selected_plugin = $state->get('plugin_test_helper_advanced_plugin_selector_base');
-    $this->assertEqual($selected_plugin->getPluginId(), 'plugin_test_helper_configurable_plugin');
-    $this->assertEqual($selected_plugin->getConfiguration(), [
+    $this->assertEquals($selected_plugin->getPluginId(), 'plugin_test_helper_configurable_plugin');
+    $this->assertEquals($selected_plugin->getConfiguration(), [
       'foo' => $foo,
     ]);
   }
diff --git a/tests/src/Functional/Plugin/PluginSelector/SelectListTest.php b/tests/src/Functional/Plugin/PluginSelector/SelectListTest.php
index 2f296b5..fd024f3 100644
--- a/tests/src/Functional/Plugin/PluginSelector/SelectListTest.php
+++ b/tests/src/Functional/Plugin/PluginSelector/SelectListTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\plugin\Functional\Plugin\PluginSelector;
 
+use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -46,51 +47,60 @@ class SelectListTest extends BrowserTestBase {
     // Test the presence of default elements without available plugins.
     $path = $this->buildFormPath(['none'], $tree);
     $this->drupalGet($path);
-    $this->assertNoFieldByName($name_prefix . '[select][container][container][plugin_id]');
+    $this->assertSession()->fieldValueNotEquals($name_prefix . '[select][container][container][plugin_id]', '');
     $this->assertEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertText(t('There are no available options.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('There are no available options.'));
 
     // Test the presence of default elements with one available plugin.
     $path = $this->buildFormPath(['plugin_test_helper_configurable_plugin'], $tree);
     $this->drupalGet($path);
-    $this->assertNoFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldValueNotEquals($name_prefix . '[select][container][plugin_id]', '');
     $this->assertEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertNoText(t('There are no available options.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('There are no available options.'));
 
     // Test the presence of default elements with multiple available plugins.
     $path = $this->buildFormPath(['plugin_test_helper_plugin', 'plugin_test_helper_configurable_plugin'], $tree);
     $this->drupalGet($path);
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertNoText(t('There are no available options.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('There are no available options.'));
 
     // Choose a plugin.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_plugin',
     ], t('Choose'));
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
 
     // Change the plugin.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_configurable_plugin',
     ], t('Choose'));
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
 
     // Submit the form.
     $foo = $this->randomString();
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_configurable_plugin',
       $name_prefix . '[plugin_form][foo]' => $foo,
 
     ], t('Submit'));
 
     $state = \Drupal::state();
-    /** @var \Drupal\Component\Plugin\PluginInspectionInterface|\Drupal\Component\Plugin\ConfigurablePluginInterface $selected_plugin */
+    /** @var PluginInspectionInterface|\Drupal\Component\Plugin\ConfigurablePluginInterface $selected_plugin */
     $selected_plugin = $state->get('plugin_test_helper_advanced_plugin_selector_base');
-    $this->assertEqual($selected_plugin->getPluginId(), 'plugin_test_helper_configurable_plugin');
-    $this->assertEqual($selected_plugin->getConfiguration(), [
+    $this->assertEquals($selected_plugin->getPluginId(), 'plugin_test_helper_configurable_plugin');
+    $this->assertEquals($selected_plugin->getConfiguration(), [
       'foo' => $foo,
     ]);
   }
