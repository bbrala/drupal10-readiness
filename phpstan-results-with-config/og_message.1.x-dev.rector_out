modules/contrib/og_message/modules/og_message_notify/og_message_notify.module
modules/contrib/og_message/modules/og_message_notify/tests/src/Functional/SiteStillWorks.php
modules/contrib/og_message/og_message.module
modules/contrib/og_message/src/Controller/GroupMessageController.php
modules/contrib/og_message/src/Database/CustomQuery.php
modules/contrib/og_message/src/Entity/GroupMessage.php
modules/contrib/og_message/src/Entity/GroupMessageInterface.php
modules/contrib/og_message/src/Entity/GroupMessageViewsData.php
modules/contrib/og_message/src/Entity/OgUnsubscribedAccounts.php
modules/contrib/og_message/src/Entity/OgUnsubscribedAccountsInterface.php
modules/contrib/og_message/src/Entity/OgUnsubscribedAccountsViewsData.php
modules/contrib/og_message/src/GroupMessageAccessControlHandler.php
modules/contrib/og_message/src/GroupMessageListBuilder.php
modules/contrib/og_message/src/GroupMessageTranslationHandler.php
modules/contrib/og_message/src/OgUnsubscribedAccountsAccessControlHandler.php
modules/contrib/og_message/src/OgUnsubscribedAccountsListBuilder.php
modules/contrib/og_message/tests/src/Functional/SiteStillWorks.php

6 files with changes
====================

1) modules/contrib/og_message/tests/src/Functional/SiteStillWorks.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Make sure to complete the normal setup steps first.
     parent::setUp();

@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Confirm that the front page contains the standard text.
-    $this->assertText('Welcome to Drupal');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Welcome to Drupal');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/og_message/src/OgUnsubscribedAccountsAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og_message;

+use Drupal\og_message\Entity\OgUnsubscribedAccountsInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\og_message\Entity\OgUnsubscribedAccountsInterface $entity */
+    /** @var OgUnsubscribedAccountsInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/og_message/src/GroupMessageAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og_message;

+use Drupal\og_message\Entity\GroupMessageInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\og_message\Entity\GroupMessageInterface $entity */
+    /** @var GroupMessageInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/og_message/src/Database/CustomQuery.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og_message\Database;

+use Drupal\Core\Database\Connection;
 /**
  * Defines CustomQuery class.
  */
@@ @@
   /**
    * Standard Drupal database connection, for making queries against.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $connection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/og_message/src/Controller/GroupMessageController.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Subscribe user to group notifications.
    *
-   * @return Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect HTTP_REFERER.
    */
   public function subscribe($group) {
@@ @@
   /**
    * Unsubscribe user to group notifications.
    *
-   * @return Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect HTTP_REFERER.
    */
   public function unsubscribe(int $group) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/og_message/modules/og_message_notify/tests/src/Functional/SiteStillWorks.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Make sure to complete the normal setup steps first.
     parent::setUp();

@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Confirm that the front page contains the standard text.
-    $this->assertText('Welcome to Drupal');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Welcome to Drupal');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

