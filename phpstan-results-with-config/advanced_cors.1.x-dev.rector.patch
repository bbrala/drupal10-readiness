diff --git a/advanced_cors.info.yml b/advanced_cors.info.yml
index 21bdd53..b0e3a2c 100644
--- a/advanced_cors.info.yml
+++ b/advanced_cors.info.yml
@@ -2,7 +2,7 @@ name: Advanced CORS
 type: module
 description: Advanced CORS - Provides possibility to customize settings CORS by path patterns.
 package: Other
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
 configure: entity.route_config.collection
 
 dependencies:
diff --git a/src/EventSubscriber/AdvancedCorsEventSubscriber.php b/src/EventSubscriber/AdvancedCorsEventSubscriber.php
index 82c4017..a129ddd 100644
--- a/src/EventSubscriber/AdvancedCorsEventSubscriber.php
+++ b/src/EventSubscriber/AdvancedCorsEventSubscriber.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\advanced_cors\EventSubscriber;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\advanced_cors\Entity\RouteConfigEntityInterface;
 use Drupal\advanced_cors\PatternsCache;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -9,7 +13,6 @@ use Drupal\Core\Path\PathMatcherInterface;
 use Drupal\path_alias\AliasManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -20,44 +23,44 @@ class AdvancedCorsEventSubscriber implements EventSubscriberInterface {
   /**
    * The entity storage class.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;
 
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * Patterns cache service.
    *
-   * @var \Drupal\advanced_cors\PatternsCache
+   * @var PatternsCache
    */
   protected $patterns;
 
   /**
    * Constructs a new CORS response event subscriber.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The alias manager.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher.
-   * @param \Drupal\advanced_cors\PatternsCache $patterns
+   * @param PatternsCache $patterns
    *   The pattern cache.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException|\Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException|PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, AliasManagerInterface $alias_manager, PathMatcherInterface $path_matcher, PatternsCache $patterns) {
     $this->storage = $entityTypeManager->getStorage('route_config');
@@ -80,7 +83,7 @@ class AdvancedCorsEventSubscriber implements EventSubscriberInterface {
   /**
    * Adds headers to the response.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $request = $event->getRequest();
     $path_info = $request->getPathInfo();
     $current_path = $this->aliasManager->getPathByAlias($path_info);
@@ -102,12 +105,12 @@ class AdvancedCorsEventSubscriber implements EventSubscriberInterface {
   /**
    * Adds CORS headers to the response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event from Drupal core (contains request and response).
-   * @param \Drupal\advanced_cors\Entity\RouteConfigEntityInterface $config
+   * @param RouteConfigEntityInterface $config
    *   The configuration for this module.
    */
-  protected function addCorsHeaders(FilterResponseEvent $event,
+  protected function addCorsHeaders(ResponseEvent $event,
                                     RouteConfigEntityInterface $config) {
     $mapping_headers = [
       'allowed_headers' => 'Access-Control-Allow-Headers',
@@ -155,7 +158,7 @@ class AdvancedCorsEventSubscriber implements EventSubscriberInterface {
    * specify a single origin value. See:
    * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Information about the incoming request.
    * @param string[] $allowed_origins
    *   The array of configured allowed origin values.
diff --git a/src/Form/RouteConfigEntityDeleteForm.php b/src/Form/RouteConfigEntityDeleteForm.php
index 696ec91..834505b 100644
--- a/src/Form/RouteConfigEntityDeleteForm.php
+++ b/src/Form/RouteConfigEntityDeleteForm.php
@@ -16,7 +16,7 @@ class RouteConfigEntityDeleteForm extends EntityConfirmFormBase {
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
diff --git a/src/Form/RouteConfigEntityForm.php b/src/Form/RouteConfigEntityForm.php
index 27fa9b8..ceb37b7 100644
--- a/src/Form/RouteConfigEntityForm.php
+++ b/src/Form/RouteConfigEntityForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\advanced_cors\Form;
 
+use Drupal\advanced_cors\Entity\RouteConfigEntityInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,14 +17,14 @@ class RouteConfigEntityForm extends EntityForm {
   /**
    * Patterns cache object.
    *
-   * @var \Drupal\advanced_cors\PatternsCache
+   * @var PatternsCache
    */
   protected $patterns;
 
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -50,7 +51,7 @@ class RouteConfigEntityForm extends EntityForm {
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\advanced_cors\Entity\RouteConfigEntityInterface $route_config */
+    /** @var RouteConfigEntityInterface $route_config */
     $route_config = $this->entity;
 
     $form['status'] = [
@@ -137,7 +138,7 @@ class RouteConfigEntityForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\advanced_cors\Entity\RouteConfigEntityInterface $route_config */
+    /** @var RouteConfigEntityInterface $route_config */
     $route_config = $this->entity;
     $status = $route_config->save();
     $this->patterns->resetCache();
diff --git a/src/PatternsCache.php b/src/PatternsCache.php
index 9131163..e6c3baa 100644
--- a/src/PatternsCache.php
+++ b/src/PatternsCache.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\advanced_cors;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\advanced_cors\Entity\RouteConfigEntityInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 
@@ -13,26 +17,26 @@ class PatternsCache {
   /**
    * The entity storage class.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * The cache backend that should be used.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * Constructs a Cache using a string storage.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Storage to use when looking for new translations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException|\Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException|PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, CacheBackendInterface $cache) {
     $this->storage = $entityTypeManager->getStorage('route_config');
@@ -70,7 +74,7 @@ class PatternsCache {
       return $cache->data;
     }
 
-    /** @var \Drupal\advanced_cors\Entity\RouteConfigEntityInterface[] $entities */
+    /** @var RouteConfigEntityInterface[] $entities */
     $entities = $this->storage->loadByProperties(['status' => 1]);
     $result = [];
 
