modules/contrib/video_embed_field_migrate/src/Commands/VideoEmbedFieldMigrateCommands.php
modules/contrib/video_embed_field_migrate/src/VideoEmbedFieldMigrate.php

2 files with changes
====================

1) modules/contrib/video_embed_field_migrate/src/VideoEmbedFieldMigrate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\video_embed_field_migrate;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\Core\Entity\EntityStorageException;
+use Symfony\Component\Yaml\Yaml;
+use Drupal\Core\Entity\ContentEntityBase;
+use Drupal\Core\Field\FieldItemList;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityDisplayRepository;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityDisplayRepository
+   * @var EntityDisplayRepository
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * Constructs a VideoEmbedMigrate object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepository $entity_display_repository
+   * @param EntityDisplayRepository $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepository $entity_display_repository) {
@@ @@
   }

   /**
-   * @return \Drupal\media\Entity\MediaType|bool
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return MediaType|bool
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getRemoteVideoMediaType() {
     $types = $this->entityTypeManager->getStorage('media_type')->loadByProperties(['source' => 'oembed:video']);
@@ @@
    * @param array $entityTypes
    *
    * @return bool
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function isFieldNameAvailable(string $fieldName, array $entityTypes) : bool {
     $fieldConfigQuery = $this->entityTypeManager->getStorage('field_config')->getQuery();
@@ @@
    * Find the video_embed_field field to migrate.
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function findFieldsToMigrate() : array {
     $fields = [];
@@ @@
     $result = $fieldConfigQuery->execute();

     foreach($result as $id) {
-      /** @var \Drupal\field\Entity\FieldConfig $fieldConfig */
+      /** @var FieldConfig $fieldConfig */
       $fieldConfig = $fieldConfigStorage->load($id);
       $fields[] = [
         'field_name' => $fieldConfig->getName(),
@@ @@
    * @param string $bundle
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getFieldValues(string $fieldName, string $entityType, string $bundle) : array {
     $values = [];
@@ @@
   }

   /**
-   * @return \Drupal\media\Entity\MediaType
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return MediaType
+   * @throws EntityStorageException
    */
   public function createRemoteVideoMediaType() : MediaType {
     $media_type = MediaType::create([
@@ @@
       ])
       ->save();

-    $standardPath = drupal_get_path('profile', 'standard');
+    $standardPath = \Drupal::service('extension.list.profile')->getPath('standard');
     $configs = [
       'core.entity_form_display.media.remote_video.default' => '/config/optional/core.entity_form_display.media.remote_video.default.yml',
       'core.entity_view_display.media.remote_video.default' => '/config/optional/core.entity_view_display.media.remote_video.default.yml'
@@ @@
       $fileContents = file_get_contents($standardPath . $path);
       $editable = \Drupal::configFactory()->getEditable($name);
       if ($editable->isNew()) {
-        $config = \Symfony\Component\Yaml\Yaml::parse($fileContents);
+        $config = Yaml::parse($fileContents);
         $config['uuid'] = array_pop($uuids);
         $editable->setData($config);
         $editable->save();
@@ @@
    * @param string $fieldName
    * @param array $bundles
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function createReferenceFields(string $fieldName, array $bundles) {
     $uuids = [
@@ @@
   }

   /**
-   * @param \Drupal\media\Entity\MediaType $mediaType
+   * @param MediaType $mediaType
    * @param string $refFieldName
    * @param string $entityType
    * @param int $id
    * @param string $legacyField
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function migrateField(MediaType $mediaType, string $refFieldName, string $entityType, int $id, string $legacyField) {
     $mediaStorage = $this->entityTypeManager->getStorage('media');
@@ @@
     $sourceField = $mediaType->getSource()->getSourceFieldDefinition($mediaType);
     $fieldValues = [];

-    /** @var \Drupal\Core\Entity\ContentEntityBase $targetEntity */
+    /** @var ContentEntityBase $targetEntity */
     $targetEntity = $storage->load($id);
-    /** @var \Drupal\Core\Field\FieldItemList $videoUrlFieldItems */
+    /** @var FieldItemList $videoUrlFieldItems */
     $videoUrlFieldItems = $targetEntity->get($legacyField);
     foreach ($videoUrlFieldItems->getIterator() as $videoUrlFieldItem) {
       $videoUrl = $videoUrlFieldItem->value;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/video_embed_field_migrate/src/Commands/VideoEmbedFieldMigrateCommands.php:10

    ---------- begin diff ----------
@@ @@
 class VideoEmbedFieldMigrateCommands extends DrushCommands {

   /**
-   * @var \Drupal\video_embed_field_migrate\VideoEmbedFieldMigrate
+   * @var VideoEmbedFieldMigrate
    */
   protected $videoEmbedMigrate;

   /**
-   * @param \Drupal\video_embed_field_migrate\VideoEmbedFieldMigrate $videoEmbedMigrate
+   * @param VideoEmbedFieldMigrate $videoEmbedMigrate
    */
   public function __construct(VideoEmbedFieldMigrate $videoEmbedMigrate) {
     parent::__construct();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

