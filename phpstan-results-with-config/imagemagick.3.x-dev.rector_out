modules/contrib/imagemagick/imagemagick.install
modules/contrib/imagemagick/src/Event/ImagemagickExecutionEvent.php
modules/contrib/imagemagick/src/EventSubscriber/ImagemagickEventSubscriber.php
modules/contrib/imagemagick/src/ImagemagickExecArguments.php
modules/contrib/imagemagick/src/ImagemagickExecManager.php
modules/contrib/imagemagick/src/ImagemagickExecManagerInterface.php
modules/contrib/imagemagick/src/ImagemagickFormatMapper.php
modules/contrib/imagemagick/src/ImagemagickFormatMapperInterface.php
modules/contrib/imagemagick/src/Plugin/FileMetadata/ImagemagickIdentify.php
modules/contrib/imagemagick/src/Plugin/ImageToolkit/ImagemagickToolkit.php
modules/contrib/imagemagick/src/Plugin/ImageToolkit/Operation/imagemagick/Convert.php
modules/contrib/imagemagick/src/Plugin/ImageToolkit/Operation/imagemagick/CreateNew.php
modules/contrib/imagemagick/src/Plugin/ImageToolkit/Operation/imagemagick/Crop.php
modules/contrib/imagemagick/src/Plugin/ImageToolkit/Operation/imagemagick/Desaturate.php
modules/contrib/imagemagick/src/Plugin/ImageToolkit/Operation/imagemagick/ImagemagickImageToolkitOperationBase.php
modules/contrib/imagemagick/src/Plugin/ImageToolkit/Operation/imagemagick/Resize.php
modules/contrib/imagemagick/src/Plugin/ImageToolkit/Operation/imagemagick/Rotate.php
modules/contrib/imagemagick/src/Plugin/ImageToolkit/Operation/imagemagick/Scale.php
modules/contrib/imagemagick/src/Plugin/ImageToolkit/Operation/imagemagick/ScaleAndCrop.php
modules/contrib/imagemagick/tests/src/Functional/EventSubscriberTest.php
modules/contrib/imagemagick/tests/src/Functional/ToolkitImagemagickFileMetadataTest.php
modules/contrib/imagemagick/tests/src/Functional/ToolkitImagemagickFormTest.php
modules/contrib/imagemagick/tests/src/Functional/ToolkitImagemagickTest.php
modules/contrib/imagemagick/tests/src/Kernel/ExecArgumentsTest.php
modules/contrib/imagemagick/tests/src/Kernel/ExecManagerTest.php
modules/contrib/imagemagick/tests/src/Kernel/ToolkitOperationsTest.php
modules/contrib/imagemagick/tests/src/Kernel/ToolkitSetupTrait.php

13 files with changes
=====================

1) modules/contrib/imagemagick/tests/src/Kernel/ToolkitSetupTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\imagemagick\Kernel;

+use Drupal\Core\Image\ImageFactory;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Tests\TestFileCreationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The image factory service.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
     // Prepare a copy of test files.
     $this->getTestFiles('image');

-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     $original = \Drupal::root() . '/core/tests/fixtures/files';
     $files = $file_system->scanDirectory($original, '/img-.*/');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/imagemagick/tests/src/Functional/ToolkitImagemagickTest.php:504

    ---------- begin diff ----------
@@ @@
     $this->assertSame('', $image->getToolkit()->arguments()->getDestinationLocalPath());

     // Test retrieval of EXIF information.
-    $this->fileSystem->copy(drupal_get_path('module', 'imagemagick') . '/misc/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('imagemagick') . '/misc/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
     // The image files that will be tested.
     $image_files = [
       [
-        'path' => drupal_get_path('module', 'imagemagick') . '/misc/test-exif.jpeg',
+        'path' => \Drupal::service('extension.list.module')->getPath('imagemagick') . '/misc/test-exif.jpeg',
         'orientation' => 8,
       ],
       [
@@ @@
     // Test multi-frame GIF image.
     $image_files = [
       [
-        'source' => drupal_get_path('module', 'imagemagick') . '/misc/test-multi-frame.gif',
+        'source' => \Drupal::service('extension.list.module')->getPath('imagemagick') . '/misc/test-multi-frame.gif',
         'destination' => $this->testDirectory . '/test-multi-frame.gif',
         'width' => 60,
         'height' => 29,
@@ @@
     // Test multi-frame GIF image.
     $image_files = [
       [
-        'source' => drupal_get_path('module', 'imagemagick') . '/misc/test-multi-frame.gif',
+        'source' => \Drupal::service('extension.list.module')->getPath('imagemagick') . '/misc/test-multi-frame.gif',
         'destination' => $this->testDirectory . '/test-multi-frame.gif',
         'width' => 60,
         'height' => 29,
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/imagemagick/tests/src/Functional/ToolkitImagemagickFileMetadataTest.php:137

    ---------- begin diff ----------
@@ @@
     $fmdm = $this->container->get('file_metadata_manager');

     // Prepare a copy of test files.
-    $this->fileSystem->copy(drupal_get_path('module', 'imagemagick') . '/misc/test-multi-frame.gif', 'public://', FileSystemInterface::EXISTS_REPLACE);
-    $this->fileSystem->copy(drupal_get_path('module', 'imagemagick') . '/misc/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
-    $this->fileSystem->copy(drupal_get_path('module', 'imagemagick') . '/misc/test-exif-icc.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('imagemagick') . '/misc/test-multi-frame.gif', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('imagemagick') . '/misc/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('imagemagick') . '/misc/test-exif-icc.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);

     // Perform tests without caching.
     $config_mdm->set('metadata_cache.enabled', FALSE)->save();
@@ @@
     }

     // Files in temporary:// must not be cached.
-    $this->fileSystem->copy(drupal_get_path('module', 'imagemagick') . '/misc/test-multi-frame.gif', 'temporary://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('imagemagick') . '/misc/test-multi-frame.gif', 'temporary://', FileSystemInterface::EXISTS_REPLACE);
     $source_uri = 'temporary://test-multi-frame.gif';
     $fmdm->release($source_uri);
     $source_image_md = $fmdm->uri($source_uri);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/imagemagick/tests/src/Functional/EventSubscriberTest.php:132

    ---------- begin diff ----------
@@ @@
     $this->setUpToolkit($toolkit_id, $toolkit_config, $toolkit_settings);
     $this->prepareImageFileHandling();

-    $image_uri = drupal_get_path('module', 'imagemagick') . '/misc/test-multi-frame.gif';
+    $image_uri = \Drupal::service('extension.list.module')->getPath('imagemagick') . '/misc/test-multi-frame.gif';

     // By default, no coalesce of animated GIFs.
     $image = $this->imageFactory->get($image_uri);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/imagemagick/src/Plugin/ImageToolkit/Operation/imagemagick/ImagemagickImageToolkitOperationBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\imagemagick\Plugin\ImageToolkit\Operation\imagemagick;

+use Drupal\imagemagick\Plugin\ImageToolkit\ImagemagickToolkit;
 use Drupal\Core\ImageToolkit\ImageToolkitOperationBase;
 use Drupal\imagemagick\ImagemagickExecArguments;

@@ @@
   /**
    * The correctly typed image toolkit for imagemagick operations.
    *
-   * @return \Drupal\imagemagick\Plugin\ImageToolkit\ImagemagickToolkit
+   * @return ImagemagickToolkit
    *   The correctly typed image toolkit for imagemagick operations.
    */
   // @codingStandardsIgnoreStart
@@ @@
     return parent::getToolkit();
   }
   // @codingStandardsIgnoreEnd
-
   /**
    * Helper to add a command line argument.
    *
@@ @@
    *   (optional) An optional array with information about the argument.
    *   Defaults to an empty array.
    *
-   * @return \Drupal\imagemagick\ImagemagickExecArguments
+   * @return ImagemagickExecArguments
    *   The Imagemagick arguments.
    */
   protected function addArgument(string $argument, int $mode = ImagemagickExecArguments::POST_SOURCE, int $index = ImagemagickExecArguments::APPEND, array $info = []): ImagemagickExecArguments {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/imagemagick/src/Plugin/ImageToolkit/ImagemagickToolkit.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The format mapper service.
    *
-   * @var \Drupal\imagemagick\ImagemagickFormatMapperInterface
+   * @var ImagemagickFormatMapperInterface
    */
   protected $formatMapper;

@@ @@
   /**
    * The file metadata manager service.
    *
-   * @var \Drupal\file_mdm\FileMetadataManagerInterface
+   * @var FileMetadataManagerInterface
    */
   protected $fileMetadataManager;

@@ @@
   /**
    * The ImageMagick execution manager service.
    *
-   * @var \Drupal\imagemagick\ImagemagickExecManagerInterface
+   * @var ImagemagickExecManagerInterface
    */
   protected $execManager;

@@ @@
   /**
    * The execution arguments object.
    *
-   * @var \Drupal\imagemagick\ImagemagickExecArguments
+   * @var ImagemagickExecArguments
    */
   protected $arguments;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\ImageToolkit\ImageToolkitOperationManagerInterface $operation_manager
+   * @param ImageToolkitOperationManagerInterface $operation_manager
    *   The toolkit operation manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\imagemagick\ImagemagickFormatMapperInterface $format_mapper
+   * @param ImagemagickFormatMapperInterface $format_mapper
    *   The format mapper service.
-   * @param \Drupal\file_mdm\FileMetadataManagerInterface $file_metadata_manager
+   * @param FileMetadataManagerInterface $file_metadata_manager
    *   The file metadata manager service.
-   * @param \Drupal\imagemagick\ImagemagickExecManagerInterface $exec_manager
+   * @param ImagemagickExecManagerInterface $exec_manager
    *   The ImageMagick execution manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ImageToolkitOperationManagerInterface $operation_manager, LoggerInterface $logger, ConfigFactoryInterface $config_factory, ImagemagickFormatMapperInterface $format_mapper, FileMetadataManagerInterface $file_metadata_manager, ImagemagickExecManagerInterface $exec_manager, EventDispatcherInterface $dispatcher) {
@@ @@
   /**
    * Returns the ImageMagick execution manager service.
    *
-   * @return \Drupal\imagemagick\ImagemagickExecManagerInterface
+   * @return ImagemagickExecManagerInterface
    *   The ImageMagick execution manager service.
    */
   public function getExecManager(): ImagemagickExecManagerInterface {
@@ @@
   /**
    * Returns the current ImagemagickExecArguments object.
    *
-   * @return \Drupal\imagemagick\ImagemagickExecArguments
+   * @return ImagemagickExecArguments
    *   The current ImagemagickExecArguments object.
    */
   public function arguments(): ImagemagickExecArguments {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/imagemagick/src/Plugin/FileMetadata/ImagemagickIdentify.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The ImageMagick execution manager service.
    *
-   * @var \Drupal\imagemagick\ImagemagickExecManagerInterface
+   * @var ImagemagickExecManagerInterface
    */
   protected $execManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_service
+   * @param CacheBackendInterface $cache_service
    *   The cache service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\imagemagick\ImagemagickExecManagerInterface $exec_manager
+   * @param ImagemagickExecManagerInterface $exec_manager
    *   The ImageMagick execution manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, CacheBackendInterface $cache_service, ConfigFactoryInterface $config_factory, ImagemagickExecManagerInterface $exec_manager, EventDispatcherInterface $dispatcher, StreamWrapperManagerInterface $stream_wrapper_manager) {
@@ @@
    * @return bool
    *   TRUE if the key is valid.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   In case the key is invalid.
    */
   protected function validateKey($key, $method) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/imagemagick/src/ImagemagickFormatMapper.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The typed config service.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;

@@ @@
   /**
    * The MIME map manager service.
    *
-   * @var \Drupal\sophron\MimeMapManagerInterface
+   * @var MimeMapManagerInterface
    */
   protected $mimeMapManager;

@@ @@
   /**
    * Constructs an ImagemagickFormatMapper object.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_service
+   * @param CacheBackendInterface $cache_service
    *   The cache service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
+   * @param TypedConfigManagerInterface $typed_config
    *   The typed config service.
-   * @param \Drupal\sophron\MimeMapManagerInterface $mime_map_manager
+   * @param MimeMapManagerInterface $mime_map_manager
    *   The MIME map manager service.
    */
   public function __construct(CacheBackendInterface $cache_service, ConfigFactoryInterface $config_factory, TypedConfigManagerInterface $typed_config, MimeMapManagerInterface $mime_map_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/imagemagick/src/ImagemagickExecManagerInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the format mapper.
    *
-   * @return \Drupal\imagemagick\ImagemagickFormatMapperInterface
+   * @return ImagemagickFormatMapperInterface
    *   The format mapper service.
    */
   public function getFormatMapper(): ImagemagickFormatMapperInterface;
@@ @@
    *
    * @param string $command
    *   The executable to run.
-   * @param \Drupal\imagemagick\ImagemagickExecArguments $arguments
+   * @param ImagemagickExecArguments $arguments
    *   An ImageMagick execution arguments object.
    * @param string &$output
    *   (optional) A variable to assign the shell stdout to, passed by
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/imagemagick/src/ImagemagickExecManager.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The format mapper service.
    *
-   * @var \Drupal\imagemagick\ImagemagickFormatMapperInterface
+   * @var ImagemagickFormatMapperInterface
    */
   protected $formatMapper;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs an ImagemagickExecManager object.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    * @param string $app_root
    *   The app root.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\imagemagick\ImagemagickFormatMapperInterface $format_mapper
+   * @param ImagemagickFormatMapperInterface $format_mapper
    *   The format mapper service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(LoggerInterface $logger, ConfigFactoryInterface $config_factory, string $app_root, AccountProxyInterface $current_user, ImagemagickFormatMapperInterface $format_mapper, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/imagemagick/src/ImagemagickExecArguments.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The ImageMagick execution manager service.
    *
-   * @var \Drupal\imagemagick\ImagemagickExecManagerInterface
+   * @var ImagemagickExecManagerInterface
    */
   protected $execManager;

@@ @@
   /**
    * Constructs an ImagemagickExecArguments object.
    *
-   * @param \Drupal\imagemagick\ImagemagickExecManagerInterface $exec_manager
+   * @param ImagemagickExecManagerInterface $exec_manager
    *   The ImageMagick execution manager service.
    */
   public function __construct(ImagemagickExecManagerInterface $exec_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/imagemagick/src/EventSubscriber/ImagemagickEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\imagemagick\EventSubscriber;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\File\Exception\FileException;
@@ @@
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The mudule configuration settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $imagemagickSettings;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * The file metadata manager service.
    *
-   * @var \Drupal\file_mdm\FileMetadataManagerInterface
+   * @var FileMetadataManagerInterface
    */
   protected $fileMetadataManager;

@@ @@
   /**
    * Constructs an ImagemagickEventSubscriber object.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
-   * @param \Drupal\file_mdm\FileMetadataManagerInterface $file_metadata_manager
+   * @param FileMetadataManagerInterface $file_metadata_manager
    *   The file metadata manager service.
    */
   public function __construct(LoggerInterface $logger, ConfigFactoryInterface $config_factory, FileSystemInterface $file_system, StreamWrapperManagerInterface $stream_wrapper_manager, FileMetadataManagerInterface $file_metadata_manager) {
@@ @@
   /**
    * Ensures source image URI to a local filesystem path.
    *
-   * @param \Drupal\imagemagick\ImagemagickExecArguments $arguments
+   * @param ImagemagickExecArguments $arguments
    *   The ImageMagick/GraphicsMagick execution arguments object.
    */
   protected function doEnsureSourceLocalPath(ImagemagickExecArguments $arguments) {
@@ @@
   /**
    * Ensures destination image URI to a local filesystem path.
    *
-   * @param \Drupal\imagemagick\ImagemagickExecArguments $arguments
+   * @param ImagemagickExecArguments $arguments
    *   The ImageMagick/GraphicsMagick execution arguments object.
    */
   protected function doEnsureDestinationLocalPath(ImagemagickExecArguments $arguments) {
@@ @@
   /**
    * Adds configured arguments at the beginning of the list.
    *
-   * @param \Drupal\imagemagick\ImagemagickExecArguments $arguments
+   * @param ImagemagickExecArguments $arguments
    *   The ImageMagick/GraphicsMagick execution arguments object.
    */
   protected function prependArguments(ImagemagickExecArguments $arguments) {
@@ @@
    * Modules can also decide to move files from remote systems to the local
    * file system to allow processing.
    *
-   * @param \Drupal\imagemagick\Event\ImagemagickExecutionEvent $event
+   * @param ImagemagickExecutionEvent $event
    *   Imagemagick execution event.
    *
    * @see \Drupal\imagemagick\Plugin\ImageToolkit\ImagemagickToolkit::parseFile()
@@ @@
    * to move temporary files from the local file system to remote destination
    * systems.
    *
-   * @param \Drupal\imagemagick\Event\ImagemagickExecutionEvent $event
+   * @param ImagemagickExecutionEvent $event
    *   Imagemagick execution event.
    *
    * @see \Drupal\imagemagick\Plugin\ImageToolkit\ImagemagickToolkit::save()
@@ @@
    * or the event subscribers. You can add/get/find such arguments by specifying
    * ImagemagickExecArguments::INTERNAL as the argument $mode in the methods.
    *
-   * @param \Drupal\imagemagick\Event\ImagemagickExecutionEvent $event
+   * @param ImagemagickExecutionEvent $event
    *   Imagemagick execution event.
    *
    * @see http://www.imagemagick.org/script/command-line-processing.php#output
@@ @@
    * When the destination format is set, it is passed to ImageMagick's convert
    * binary with the syntax "[format]:[destination]".
    *
-   * @param \Drupal\imagemagick\Event\ImagemagickExecutionEvent $event
+   * @param ImagemagickExecutionEvent $event
    *   Imagemagick execution event.
    *
    * @see http://www.imagemagick.org/script/command-line-processing.php#output
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/imagemagick/src/Event/ImagemagickExecutionEvent.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * The ImageMagick/GraphicsMagick execution arguments object.
    *
-   * @var \Drupal\imagemagick\ImagemagickExecArguments
+   * @var ImagemagickExecArguments
    */
   protected $arguments;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\imagemagick\ImagemagickExecArguments $arguments
+   * @param ImagemagickExecArguments $arguments
    *   The ImageMagick/GraphicsMagick execution arguments object.
    */
   public function __construct(ImagemagickExecArguments $arguments) {
@@ @@
   /**
    * Returns the ImagemagickExecArguments object.
    *
-   * @return \Drupal\imagemagick\ImagemagickExecArguments
+   * @return ImagemagickExecArguments
    *   The ImageMagick/GraphicsMagick execution arguments object.
    */
   public function getExecArguments(): ImagemagickExecArguments {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 13 files have been changed by Rector                                      

