diff --git a/src/Access/TaxonomyManagerAccessCheck.php b/src/Access/TaxonomyManagerAccessCheck.php
index 6520404..cb83323 100644
--- a/src/Access/TaxonomyManagerAccessCheck.php
+++ b/src/Access/TaxonomyManagerAccessCheck.php
@@ -19,14 +19,14 @@ class TaxonomyManagerAccessCheck implements AccessInterface {
   /**
    * Check access to the routes.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to check access for.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account): AccessResultInterface {
diff --git a/src/Controller/SubTreeController.php b/src/Controller/SubTreeController.php
index d644d20..c9553db 100644
--- a/src/Controller/SubTreeController.php
+++ b/src/Controller/SubTreeController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\taxonomy_manager\Controller;
 
+use Drupal\taxonomy\TermStorageInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
@@ -18,14 +19,14 @@ class SubTreeController extends ControllerBase {
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Constructs a SubTreeController object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   public function __construct(Request $request) {
@@ -44,7 +45,7 @@ class SubTreeController extends ControllerBase {
   /**
    * JSON callback for subtree.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   JSON object with list of terms.
    */
   public function json() {
@@ -67,7 +68,7 @@ class SubTreeController extends ControllerBase {
    *
    * Used by fancytree.loadKeyPath.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   JSON object with list of terms.
    *
    * @see js/tree.js
@@ -76,7 +77,7 @@ class SubTreeController extends ControllerBase {
   public function jsonChildParentsString() {
     $data = [];
     $childTid = $this->request->get('tid');
-    /** @var \Drupal\taxonomy\TermStorageInterface $storage */
+    /** @var TermStorageInterface $storage */
     $storage = $this->entityTypeManager()->getStorage("taxonomy_term");
     $childTerm = $storage->load($childTid);
     if ($childTerm) {
diff --git a/src/Element/TaxonomyManagerTree.php b/src/Element/TaxonomyManagerTree.php
index cf39901..ae62d78 100644
--- a/src/Element/TaxonomyManagerTree.php
+++ b/src/Element/TaxonomyManagerTree.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\taxonomy_manager\Element;
 
+use Drupal\taxonomy\TermInterface;
+use Drupal\taxonomy\TermStorageInterface;
 use Drupal\Core\Entity\Query\QueryException;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\FormElement;
@@ -277,7 +279,7 @@ class TaxonomyManagerTree extends FormElement {
     static $tids = [];
 
     if (!isset($tids[$tid])) {
-      /** @var \Drupal\taxonomy\TermInterface $term */
+      /** @var TermInterface $term */
       $term = Term::load($tid);
       $tids[$tid] = count(static::getTermStorage()->loadTree($term->bundle(), $tid, 1));
 
@@ -289,7 +291,7 @@ class TaxonomyManagerTree extends FormElement {
   /**
    * Function to get term storage.
    *
-   * @return \Drupal\taxonomy\TermStorageInterface
+   * @return TermStorageInterface
    *   The term storage.
    */
   protected static function getTermStorage() {
diff --git a/src/Form/AddTermsToVocabularyForm.php b/src/Form/AddTermsToVocabularyForm.php
index c79832b..513fdf6 100644
--- a/src/Form/AddTermsToVocabularyForm.php
+++ b/src/Form/AddTermsToVocabularyForm.php
@@ -16,14 +16,14 @@ class AddTermsToVocabularyForm extends FormBase {
   /**
    * The taxonomy messenger helper.
    *
-   * @var \Drupal\taxonomy_manager\TaxonomyManagerHelper
+   * @var TaxonomyManagerHelper
    */
   protected $taxonomyManagerHelper;
 
   /**
    * AddTermsToVocabularyForm constructor.
    *
-   * @param \Drupal\taxonomy_manager\TaxonomyManagerHelper $taxonomy_manager_helper
+   * @param TaxonomyManagerHelper $taxonomy_manager_helper
    *   The taxonomy messenger helper.
    */
   public function __construct(TaxonomyManagerHelper $taxonomy_manager_helper) {
diff --git a/src/Form/DeleteTermsForm.php b/src/Form/DeleteTermsForm.php
index 085c1d7..9d6079e 100644
--- a/src/Form/DeleteTermsForm.php
+++ b/src/Form/DeleteTermsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\taxonomy_manager\Form;
 
+use Drupal\taxonomy\TermStorageInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\taxonomy\TermStorage;
@@ -17,23 +18,23 @@ class DeleteTermsForm extends FormBase {
   /**
    * The current request.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
   /**
    * The taxonomy messenger helper.
    *
-   * @var \Drupal\taxonomy_manager\TaxonomyManagerHelper
+   * @var TaxonomyManagerHelper
    */
   protected $taxonomyManagerHelper;
 
   /**
    * DeleteTermsForm constructor.
    *
-   * @param \Drupal\taxonomy\TermStorage $term_storage
+   * @param TermStorage $term_storage
    *   Object with convenient methods to manage terms.
-   * @param \Drupal\taxonomy_manager\TaxonomyManagerHelper $taxonomy_manager_helper
+   * @param TaxonomyManagerHelper $taxonomy_manager_helper
    *   The taxonomy messenger helper.
    */
   public function __construct(TermStorage $term_storage, TaxonomyManagerHelper $taxonomy_manager_helper) {
diff --git a/src/Form/ExportTermsForm.php b/src/Form/ExportTermsForm.php
index d9db404..c813d18 100644
--- a/src/Form/ExportTermsForm.php
+++ b/src/Form/ExportTermsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\taxonomy_manager\Form;
 
+use Drupal\taxonomy\TermStorageInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Url;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ -20,14 +21,14 @@ class ExportTermsForm extends FormBase {
   /**
    * Term management.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
   /**
    * ExportTermsForm constructor.
    *
-   * @param \Drupal\taxonomy\TermStorage $termStorage
+   * @param TermStorage $termStorage
    *   Object with convenient methods to manage terms.
    */
   public function __construct(TermStorage $termStorage) {
diff --git a/src/Form/ExportTermsMiniForm.php b/src/Form/ExportTermsMiniForm.php
index dfa2167..cd2f906 100644
--- a/src/Form/ExportTermsMiniForm.php
+++ b/src/Form/ExportTermsMiniForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\taxonomy_manager\Form;
 
+use Drupal\taxonomy\TermStorageInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\taxonomy\TermStorage;
@@ -16,14 +17,14 @@ class ExportTermsMiniForm extends FormBase {
   /**
    * Term management.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
   /**
    * ExportTermsForm constructor.
    *
-   * @param \Drupal\taxonomy\TermStorage $termStorage
+   * @param TermStorage $termStorage
    *   Object with convenient methods to manage terms.
    */
   public function __construct(TermStorage $termStorage) {
diff --git a/src/Form/MoveTermsForm.php b/src/Form/MoveTermsForm.php
index e91148f..ec97718 100644
--- a/src/Form/MoveTermsForm.php
+++ b/src/Form/MoveTermsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\taxonomy_manager\Form;
 
+use Drupal\taxonomy\TermStorageInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\taxonomy\TermStorage;
@@ -16,14 +17,14 @@ class MoveTermsForm extends FormBase {
   /**
    * The current request.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
   /**
    * MoveTermsForm constructor.
    *
-   * @param \Drupal\taxonomy\TermStorage $termStorage
+   * @param TermStorage $termStorage
    *   Object with convenient methods to manage terms.
    */
   public function __construct(TermStorage $termStorage) {
diff --git a/src/Form/TaxonomyManagerForm.php b/src/Form/TaxonomyManagerForm.php
index 4b5aeff..453e694 100644
--- a/src/Form/TaxonomyManagerForm.php
+++ b/src/Form/TaxonomyManagerForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\taxonomy_manager\Form;
 
+use Drupal\Core\Form\FormBuilder;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
@@ -28,68 +29,68 @@ class TaxonomyManagerForm extends FormBase {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;
 
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $taxonomyTypeManager;
 
   /**
    * Current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
   /**
    * The url generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * The taxonomy messenger helper.
    *
-   * @var \Drupal\taxonomy_manager\TaxonomyManagerHelper
+   * @var TaxonomyManagerHelper
    */
   protected $taxonomyManagerHelper;
 
   /**
    * Constructs a new TaxonomyManagerForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $form_builder
+   * @param EntityFormBuilderInterface $form_builder
    *   The entity form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator service.
-   * @param \Drupal\taxonomy_manager\TaxonomyManagerHelper $taxonomy_manager_helper
+   * @param TaxonomyManagerHelper $taxonomy_manager_helper
    *   The taxonomy messenger helper.
    */
   public function __construct(ConfigFactoryInterface $config_factory, FormBuilderInterface $form_builder, EntityFormBuilderInterface $entity_form_builder, EntityTypeManagerInterface $entity_type_manager, CurrentPathStack $current_path, UrlGeneratorInterface $url_generator, TaxonomyManagerHelper $taxonomy_manager_helper) {
@@ -145,9 +146,9 @@ class TaxonomyManagerForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\taxonomy\VocabularyInterface $taxonomy_vocabulary
+   * @param VocabularyInterface $taxonomy_vocabulary
    *   The vocabulary being with worked with.
    *
    * @return array
@@ -411,7 +412,7 @@ class TaxonomyManagerForm extends FormBase {
   /**
    * Helper function to generate a modal form within an AJAX callback.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the current (parent) form.
    * @param string $class_name
    *   The class name of the form to embed in the modal.
@@ -420,7 +421,7 @@ class TaxonomyManagerForm extends FormBase {
    * @param string $title
    *   The modal title.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   protected function modalHelper(FormStateInterface $form_state, $class_name, $route_name, $title) {
diff --git a/src/TaxonomyManagerHelper.php b/src/TaxonomyManagerHelper.php
index d7dbb13..a4158cf 100644
--- a/src/TaxonomyManagerHelper.php
+++ b/src/TaxonomyManagerHelper.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\taxonomy_manager;
 
+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -18,41 +21,41 @@ class TaxonomyManagerHelper {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $taxonomyTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The manages modules.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Create an TaxonomyManagerHelper object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The manages modules.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, AccountInterface $current_user, ModuleHandlerInterface $module_handler) {
@@ -84,7 +87,7 @@ class TaxonomyManagerHelper {
    *   True, if terms already exists, else false
    */
   public function vocabularyIsEmpty($vid) {
-    /** @var \Drupal\taxonomy\TermStorageInterface $term_storage */
+    /** @var TermStorageInterface $term_storage */
     $term_storage = $this->taxonomyTypeManager;
     return empty($term_storage->loadTree($vid));
   }
@@ -282,8 +285,8 @@ class TaxonomyManagerHelper {
    * @return int
    *   The max weight.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected static function getMaxWeight($vid, $parents) {
     $taxonomy_entity_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
diff --git a/src/Tests/TaxonomyManagerConfigTest.php b/src/Tests/TaxonomyManagerConfigTest.php
index 0cac890..b7c923b 100644
--- a/src/Tests/TaxonomyManagerConfigTest.php
+++ b/src/Tests/TaxonomyManagerConfigTest.php
@@ -31,9 +31,13 @@ class TaxonomyManagerConfigTest extends BrowserTestBase {
     $edit = [];
     $edit['taxonomy_manager_disable_mouseover'] = '1';
     $edit['taxonomy_manager_pager_tree_page_size'] = '50';
-    $this->drupalPostForm('admin/config/user-interface/taxonomy-manager-settings', $edit, $this->t('Save configuration'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('The configuration options have been saved.'), "Saving configuration options successfully.");
+    $this->drupalGet('admin/config/user-interface/taxonomy-manager-settings');
+    $this->submitForm($edit, $this->t('Save configuration'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('The configuration options have been saved.'));
 
   }
 
diff --git a/src/Tests/TaxonomyManagerPagesTest.php b/src/Tests/TaxonomyManagerPagesTest.php
index 06b66d1..aa960f6 100644
--- a/src/Tests/TaxonomyManagerPagesTest.php
+++ b/src/Tests/TaxonomyManagerPagesTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\taxonomy_manager\Tests;
 
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\user\Entity\User;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\taxonomy\Traits\TaxonomyTestTrait;
 
@@ -16,14 +18,14 @@ class TaxonomyManagerPagesTest extends BrowserTestBase {
   /**
    * Vocabulary object.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   private $vocabulary;
 
   /**
    * Administrator user object.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   private $adminUser;
 
@@ -37,7 +39,7 @@ class TaxonomyManagerPagesTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser(['administer taxonomy']);
@@ -50,8 +52,8 @@ class TaxonomyManagerPagesTest extends BrowserTestBase {
   public function testConfigurationPageIsAccessible() {
     $this->drupalLogin($this->adminUser);
     $this->drupalGet("admin/config");
-    $this->assertResponse(200);
-    $this->assertRaw("Advanced settings for the Taxonomy Manager", "The settings page is accessible.");
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains("Advanced settings for the Taxonomy Manager");
     $this->drupalLogout();
   }
 
@@ -61,12 +63,12 @@ class TaxonomyManagerPagesTest extends BrowserTestBase {
   public function testVocabulariesListIsAccessible() {
     $this->drupalLogin($this->adminUser);
     $this->drupalGet("admin/structure");
-    $this->assertResponse(200);
-    $this->assertRaw("Administer vocabularies with the Taxonomy Manager", "The link to the page listing vocabularies is accessible.");
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains("Administer vocabularies with the Taxonomy Manager");
 
     $this->drupalGet("admin/structure/taxonomy_manager/voc");
-    $this->assertResponse(200);
-    $this->assertRaw("Edit vocabulary settings", "The page listing vocabularies is accessible.");
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains("Edit vocabulary settings");
     $this->drupalLogout();
   }
 
@@ -78,8 +80,8 @@ class TaxonomyManagerPagesTest extends BrowserTestBase {
     $voc_name = $this->vocabulary->label();
     // Check admin/structure/taxonomy_manager/voc/{$new_voc_name}.
     $this->drupalGet("admin/structure/taxonomy_manager/voc/$voc_name");
-    $this->assertResponse(200);
-    $this->assertRaw("Taxonomy Manager - $voc_name", "The taxonomy manager form for editing terms is accessible.");
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains("Taxonomy Manager - $voc_name");
     $this->drupalLogout();
   }
 
