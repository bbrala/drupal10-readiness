modules/contrib/l10n_server/connectors/l10n_drupal/src/Plugin/l10n_server/Connector/Drupal.php
modules/contrib/l10n_server/connectors/l10n_drupal_rest/src/ParserService.php
modules/contrib/l10n_server/connectors/l10n_drupal_rest/src/Plugin/l10n_server/Connector/DrupalRest.php
modules/contrib/l10n_server/connectors/l10n_drupal_rest/src/ScannerService.php
modules/contrib/l10n_server/connectors/l10n_gettext/src/Plugin/l10n_server/Connector/Gettext.php
modules/contrib/l10n_server/l10n_packager/l10n_packager.module
modules/contrib/l10n_server/l10n_packager/src/Commands/L10nPackagerCommands.php
modules/contrib/l10n_server/l10n_packager/src/Entity/L10nPackagerFile.php
modules/contrib/l10n_server/l10n_packager/src/Entity/L10nPackagerRelease.php
modules/contrib/l10n_server/l10n_packager/src/Entity/ListBuilder/L10nPackagerFileListBuilder.php
modules/contrib/l10n_server/l10n_packager/src/Entity/ListBuilder/L10nPackagerReleaseListBuilder.php
modules/contrib/l10n_server/l10n_packager/src/Entity/Schema/L10nPackagerFileStorageSchema.php
modules/contrib/l10n_server/l10n_packager/src/Entity/Storage/L10nPackagerReleaseStorage.php
modules/contrib/l10n_server/l10n_packager/src/Form/L10nPackagerFileForm.php
modules/contrib/l10n_server/l10n_packager/src/Form/L10nPackagerReleaseForm.php
modules/contrib/l10n_server/l10n_packager/src/Form/L10nPackagerSettingsForm.php
modules/contrib/l10n_server/l10n_packager/src/L10nExporter.php
modules/contrib/l10n_server/l10n_packager/src/L10nPackager.php
modules/contrib/l10n_server/l10n_packager/src/L10nPackagerFileInterface.php
modules/contrib/l10n_server/l10n_packager/src/L10nPackagerReleaseInterface.php
modules/contrib/l10n_server/l10n_packager/src/Plugin/QueueWorker/PackagerQueue.php
modules/contrib/l10n_server/l10n_packager/src/Routing/L10nPackagerFileHtmlRouteProvider.php
modules/contrib/l10n_server/l10n_packager/src/Routing/L10nPackagerReleaseHtmlRouteProvider.php
modules/contrib/l10n_server/l10n_server/l10n_server.module
modules/contrib/l10n_server/l10n_server/src/Annotation/Connector.php
modules/contrib/l10n_server/l10n_server/src/Annotation/Source.php
modules/contrib/l10n_server/l10n_server/src/Commands/L10nServerCommands.php
modules/contrib/l10n_server/l10n_server/src/ConfigurableConnectorInterface.php
modules/contrib/l10n_server/l10n_server/src/ConfigurableConnectorPluginBase.php
modules/contrib/l10n_server/l10n_server/src/ConfigurableSourceInterface.php
modules/contrib/l10n_server/l10n_server/src/ConfigurableSourcePluginBase.php
modules/contrib/l10n_server/l10n_server/src/ConnectorInterface.php
modules/contrib/l10n_server/l10n_server/src/ConnectorManager.php
modules/contrib/l10n_server/l10n_server/src/ConnectorManagerInterface.php
modules/contrib/l10n_server/l10n_server/src/ConnectorParseHandlerInterface.php
modules/contrib/l10n_server/l10n_server/src/ConnectorParseHandlerResult.php
modules/contrib/l10n_server/l10n_server/src/ConnectorParseHandlerResultInterface.php
modules/contrib/l10n_server/l10n_server/src/ConnectorPluginBase.php
modules/contrib/l10n_server/l10n_server/src/ConnectorScanHandlerInterface.php
modules/contrib/l10n_server/l10n_server/src/ConnectorScanHandlerResult.php
modules/contrib/l10n_server/l10n_server/src/ConnectorScanHandlerResultInterface.php
modules/contrib/l10n_server/l10n_server/src/ConnectorUploadHandlerInterface.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerError.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerErrorInterface.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerFile.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerFileInterface.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerLine.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerLineInterface.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerProject.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerProjectInterface.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerRelease.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerReleaseInterface.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerStatusFlag.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerStatusFlagInterface.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerString.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerStringInterface.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerTranslation.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerTranslationHistory.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerTranslationHistoryInterface.php
modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerTranslationInterface.php
modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerErrorListBuilder.php
modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerFileListBuilder.php
modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerLineListBuilder.php
modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerProjectListBuilder.php
modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerReleaseListBuilder.php
modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerStatusFlagListBuilder.php
modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerStringListBuilder.php
modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerTranslationHistoryListBuilder.php
modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerTranslationListBuilder.php
modules/contrib/l10n_server/l10n_server/src/Entity/Storage/L10nRefreshStorageInterface.php
modules/contrib/l10n_server/l10n_server/src/Entity/Storage/L10nServerErrorStorageSchema.php
modules/contrib/l10n_server/l10n_server/src/Entity/Storage/L10nServerFileStorageSchema.php
modules/contrib/l10n_server/l10n_server/src/Entity/Storage/L10nServerLineStorageSchema.php
modules/contrib/l10n_server/l10n_server/src/Entity/Storage/L10nServerProjectStorageSchema.php
modules/contrib/l10n_server/l10n_server/src/Entity/Storage/L10nServerReleaseStorage.php
modules/contrib/l10n_server/l10n_server/src/Entity/Storage/L10nServerReleaseStorageSchema.php
modules/contrib/l10n_server/l10n_server/src/Entity/Storage/L10nServerStatusFlagStorageSchema.php
modules/contrib/l10n_server/l10n_server/src/Entity/Storage/L10nServerStringStorageSchema.php
modules/contrib/l10n_server/l10n_server/src/Entity/Storage/L10nServerTranslationHistoryStorageSchema.php
modules/contrib/l10n_server/l10n_server/src/Entity/Storage/L10nServerTranslationStorageSchema.php
modules/contrib/l10n_server/l10n_server/src/Form/ConnectorBatchConfirmFormBase.php
modules/contrib/l10n_server/l10n_server/src/Form/ConnectorBatchConfirmParseForm.php
modules/contrib/l10n_server/l10n_server/src/Form/ConnectorBatchConfirmScanForm.php
modules/contrib/l10n_server/l10n_server/src/Form/ConnectorConfiguration.php
modules/contrib/l10n_server/l10n_server/src/Form/L10nServerErrorForm.php
modules/contrib/l10n_server/l10n_server/src/Form/L10nServerFileForm.php
modules/contrib/l10n_server/l10n_server/src/Form/L10nServerLineForm.php
modules/contrib/l10n_server/l10n_server/src/Form/L10nServerProjectForm.php
modules/contrib/l10n_server/l10n_server/src/Form/L10nServerReleaseForm.php
modules/contrib/l10n_server/l10n_server/src/Form/L10nServerSettingsForm.php
modules/contrib/l10n_server/l10n_server/src/Form/L10nServerStatusFlagForm.php
modules/contrib/l10n_server/l10n_server/src/Form/L10nServerStringForm.php
modules/contrib/l10n_server/l10n_server/src/Form/L10nServerTranslationForm.php
modules/contrib/l10n_server/l10n_server/src/Form/L10nServerTranslationHistoryForm.php
modules/contrib/l10n_server/l10n_server/src/L10nHelper.php
modules/contrib/l10n_server/l10n_server/src/ParamConverter/L10nServerConnectorParamConverter.php
modules/contrib/l10n_server/l10n_server/src/Plugin/Derivative/ConnectorSources.php
modules/contrib/l10n_server/l10n_server/src/Plugin/DevelGenerate/L10nServerDevelGenerateBase.php
modules/contrib/l10n_server/l10n_server/src/Plugin/DevelGenerate/L10nServerStatusFlagDevelGenerate.php
modules/contrib/l10n_server/l10n_server/src/Plugin/DevelGenerate/L10nServerTranslationDevelGenerate.php
modules/contrib/l10n_server/l10n_server/src/Plugin/DevelGenerate/L10nServerTranslationHistoryDevelGenerate.php
modules/contrib/l10n_server/l10n_server/src/Plugin/DevelGenerate/LanguageDevelGenerate.php
modules/contrib/l10n_server/l10n_server/src/Plugin/QueueWorker/ParserQueue.php
modules/contrib/l10n_server/l10n_server/src/Plugin/l10n_server/Source/FileSystem.php
modules/contrib/l10n_server/l10n_server/src/Plugin/l10n_server/Source/RestApi.php
modules/contrib/l10n_server/l10n_server/src/Plugin/l10n_server/Source/Upload.php
modules/contrib/l10n_server/l10n_server/src/Routing/L10nServerErrorHtmlRouteProvider.php
modules/contrib/l10n_server/l10n_server/src/Routing/L10nServerFileHtmlRouteProvider.php
modules/contrib/l10n_server/l10n_server/src/Routing/L10nServerLineHtmlRouteProvider.php
modules/contrib/l10n_server/l10n_server/src/Routing/L10nServerStatusFlagHtmlRouteProvider.php
modules/contrib/l10n_server/l10n_server/src/Routing/L10nServerStringHtmlRouteProvider.php
modules/contrib/l10n_server/l10n_server/src/Routing/L10nServerTranslationHistoryHtmlRouteProvider.php
modules/contrib/l10n_server/l10n_server/src/Routing/L10nServerTranslationHtmlRouteProvider.php
modules/contrib/l10n_server/l10n_server/src/SourceInterface.php
modules/contrib/l10n_server/l10n_server/src/SourceManager.php
modules/contrib/l10n_server/l10n_server/src/SourcePluginBase.php

41 files with changes
=====================

1) modules/contrib/l10n_server/l10n_server/src/Plugin/QueueWorker/ParserQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Plugin\QueueWorker;

+use Drupal\l10n_server\ConnectorParseHandlerInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\l10n_server\Entity\L10nServerProject;
 use Drupal\l10n_server\Entity\L10nServerRelease;
@@ @@
         && $connector->isParsable()) {

         // Parse the release.
-        /** @var \Drupal\l10n_server\ConnectorParseHandlerInterface $connector */
+        /** @var ConnectorParseHandlerInterface $connector */
         $connector->setRelease($release);
         if ($result = $connector->parseHandler()) {
           $release = $connector->getRelease();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/l10n_server/l10n_server/src/Plugin/Derivative/ConnectorSources.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Source manager.
    *
-   * @var \Drupal\l10n_server\SourceManager
+   * @var SourceManager
    */
   protected SourceManager $sourceManager;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\l10n_server\SourceManager $sourceManager
+   * @param SourceManager $sourceManager
    *   A source manager.
    */
   public function __construct(SourceManager $sourceManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/l10n_server/l10n_server/src/ParamConverter/L10nServerConnectorParamConverter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Connector plugin manager.
    *
-   * @var \Drupal\l10n_server\ConnectorManager
+   * @var ConnectorManager
    */
   protected ConnectorManager $connectorPluginManager;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\l10n_server\ConnectorManager $connector_plugin_manager
+   * @param ConnectorManager $connector_plugin_manager
    *   Connector plugin manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/l10n_server/l10n_server/src/L10nHelper.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\l10n_server\Entity\L10nServerFileInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\l10n_server\Entity\L10nServerFile;
 use Drupal\l10n_server\Entity\L10nServerLine;
@@ @@
   /**
    * Determine the branch for a release.
    *
-   * @param \Drupal\l10n_server\Entity\L10nServerReleaseInterface $release
+   * @param L10nServerReleaseInterface $release
    *   The release object.
    */
   public static function releaseSetBranch(L10nServerReleaseInterface &$release): void {
@@ @@
    * @return array|null
    *   An array of data for a specific file or NULL.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function saveFile($revision = NULL, $file = NULL) {
     static $pid = 0;
@@ @@
       if ($existing_file) {
         if ($existing_file->revision != $revision) {
           // Changed revision on a file.
-          /** @var \Drupal\l10n_server\Entity\L10nServerFileInterface $entity */
+          /** @var L10nServerFileInterface $entity */
           $entity = L10nServerFile::load($existing_file->fid);
           $entity->set('revision', $revision)->save();
         }
@@ @@
           return;
         }
         // New file in this release.
-        /** @var \Drupal\l10n_server\Entity\L10nServerFileInterface $entity */
+        /** @var L10nServerFileInterface $entity */
         $entity = L10nServerFile::create([
           'pid' => $pid,
           'rid' => $rid,
@@ @@
    *   String type: POTX_STRING_INSTALLER, POTX_STRING_RUNTIME
    *   or POTX_STRING_BOTH.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @todo More elegant plural handling.
    * @todo Find a way to properly use POTX constants before potx.inc is loaded.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/l10n_server/l10n_server/src/Form/L10nServerSettingsForm.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Connector manager.
    *
-   * @var \Drupal\l10n_server\ConnectorManager
+   * @var ConnectorManager
    */
   protected ConnectorManager $connectorManager;

@@ @@
   /**
    * Source manager.
    *
-   * @var \Drupal\l10n_server\SourceManager
+   * @var SourceManager
    */
   protected SourceManager $sourceManager;

@@ @@
   /**
    * Sets connector manager.
    *
-   * @param \Drupal\l10n_server\ConnectorManager $connectorManager
+   * @param ConnectorManager $connectorManager
    *   The connector manager.
    */
   public function setConnectorManager(ConnectorManager $connectorManager): void {
@@ @@
   /**
    * Sets source manager.
    *
-   * @param \Drupal\l10n_server\SourceManager $sourceManager
+   * @param SourceManager $sourceManager
    *   The source manager.
    */
   public function setSourceManager(SourceManager $sourceManager): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/l10n_server/l10n_server/src/Form/ConnectorConfiguration.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Form;

+use Drupal\l10n_server\ConfigurableConnectorInterface;
+use Drupal\l10n_server\ConfigurableSourceInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ @@
   /**
    * The plugin form factory.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected PluginFormFactoryInterface $pluginFormFactory;

@@ @@
         '#open' => TRUE,
       ];
       $subform_state = SubformState::createForSubform($form['connector'], $form, $form_state);
-      /** @var \Drupal\l10n_server\ConfigurableConnectorInterface $instance */
+      /** @var ConfigurableConnectorInterface $instance */
       $instance = $this->pluginFormFactory->createInstance($connector, 'configure');
       $form['connector'] = $instance->buildConfigurationForm($form['connector'], $subform_state);
     }
@@ @@
         '#open' => TRUE,
       ];
       $subform_state = SubformState::createForSubform($form['source'], $form, $form_state);
-      /** @var \Drupal\l10n_server\ConfigurableSourceInterface $instance */
+      /** @var ConfigurableSourceInterface $instance */
       $instance = $this->pluginFormFactory->createInstance($source, 'configure');
       $form['source'] = $instance->buildConfigurationForm($form['source'], $subform_state);
     }
@@ @@

     if ($connector->isConfigurable()) {
       $subform_state = SubformState::createForSubform($form['connector'], $form, $form_state);
-      /** @var \Drupal\l10n_server\ConfigurableConnectorInterface $instance */
+      /** @var ConfigurableConnectorInterface $instance */
       $instance = $this->pluginFormFactory->createInstance($connector, 'configure');
       $instance->validateConfigurationForm($form['connector'], $subform_state);
     }
@@ @@
     $source = $connector->getSourceInstance();
     if ($source->isConfigurable()) {
       $subform_state = SubformState::createForSubform($form['source'], $form, $form_state);
-      /** @var \Drupal\l10n_server\ConfigurableSourceInterface $instance */
+      /** @var ConfigurableSourceInterface $instance */
       $instance = $this->pluginFormFactory->createInstance($source, 'configure');
       $instance->validateConfigurationForm($form['source'], $subform_state);
     }
@@ @@

     if ($connector->isConfigurable()) {
       $subform_state = SubformState::createForSubform($form['connector'], $form, $form_state);
-      /** @var \Drupal\l10n_server\ConfigurableConnectorInterface $instance */
+      /** @var ConfigurableConnectorInterface $instance */
       $instance = $this->pluginFormFactory->createInstance($connector, 'configure');
       $instance->submitConfigurationForm($form['connector'], $subform_state);
       $connector_config['connector'][$connector->getBaseId()] = $instance->getConfiguration();
@@ @@
     $source = $connector->getSourceInstance();
     if ($source->isConfigurable()) {
       $subform_state = SubformState::createForSubform($form['source'], $form, $form_state);
-      /** @var \Drupal\l10n_server\ConfigurableSourceInterface $instance */
+      /** @var ConfigurableSourceInterface $instance */
       $instance = $this->pluginFormFactory->createInstance($source, 'configure');
       $instance->submitConfigurationForm($form['source'], $subform_state);
       $connector_config['source'][$connector->getDerivativeId()] = $instance->getConfiguration();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/l10n_server/l10n_server/src/Form/ConnectorBatchConfirmScanForm.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Form;

+use Drupal\l10n_server\ConnectorScanHandlerResult;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
-    /** @var \Drupal\l10n_server\ConnectorInterface $connector */
+    /** @var ConnectorInterface $connector */
     $connector = $form_state->getTemporaryValue('connector');
     $batch = [
       'title' => t('Scanning'),
@@ @@
   /**
    * Batch operation callback.
    *
-   * @param \Drupal\l10n_server\ConnectorInterface $connector
+   * @param ConnectorInterface $connector
    *   A connector.
    * @param array $context
    *   The batch context.
@@ @@
       return;
     }

-    /** @var \Drupal\l10n_server\ConnectorScanHandlerResult $result */
+    /** @var ConnectorScanHandlerResult $result */
     $result = $connector->scanHandler();

     for ($i = 0; $i < $result->getProjectCount(); $i++) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/l10n_server/l10n_server/src/Form/ConnectorBatchConfirmParseForm.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Form;

+use Drupal\l10n_server\ConnectorParseHandlerResult;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
-    /** @var \Drupal\l10n_server\ConnectorInterface $connector */
+    /** @var ConnectorInterface $connector */
     $connector = $form_state->getTemporaryValue('connector');
     $batch = [
       'title' => t('Parsing'),
@@ @@
   /**
    * Batch operation callback.
    *
-   * @param \Drupal\l10n_server\ConnectorInterface $connector
+   * @param ConnectorInterface $connector
    *   A connector.
    * @param array $context
    *   The batch context.
@@ @@
       return;
     }

-    /** @var \Drupal\l10n_server\ConnectorParseHandlerResult $result */
+    /** @var ConnectorParseHandlerResult $result */
     $result = $connector->parseHandler();

     if ($result->getFileCount()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerTranslationListBuilder.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Entity\ListBuilder;

+use Drupal\l10n_server\Entity\L10nServerTranslationInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;

@@ @@
   /**
    * Constructs a new L10nServerTranslationListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerTranslationInterface $entity */
+    /** @var L10nServerTranslationInterface $entity */
     $row['id'] = $entity->id();
     $row['label'] = $entity->label();
     $row['uid']['data'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerTranslationHistoryListBuilder.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Entity\ListBuilder;

+use Drupal\l10n_server\Entity\L10nServerTranslationHistoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\l10n_server\Entity\L10nServerTranslationHistoryInterface $entity */
+    /** @var L10nServerTranslationHistoryInterface $entity */
     $row['id'] = $entity->id();
     $row['label'] = $entity->label();
     return $row + parent::buildRow($entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerStringListBuilder.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Entity\ListBuilder;

+use Drupal\l10n_server\Entity\L10nServerStringInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerStringInterface $entity */
+    /** @var L10nServerStringInterface $entity */
     $row['id'] = $entity->id();
     $row['value'] = $entity->get('value')->first()->getValue()['value'];
     // $row['context'] = $entity->get('context')->first()->getValue()['value'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerStatusFlagListBuilder.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Entity\ListBuilder;

+use Drupal\l10n_server\Entity\L10nServerStatusFlagInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerStatusFlagInterface $entity */
+    /** @var L10nServerStatusFlagInterface $entity */
     $row['id'] = $entity->id();
     $row['language'] = $entity->get('language')->first()->getValue()['value'];
     $row['has_suggestion'] = $entity->get('has_suggestion')->first()->getValue()['value'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerReleaseListBuilder.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Entity\ListBuilder;

+use Drupal\l10n_server\Entity\L10nServerReleaseInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ @@
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerReleaseInterface $entity */
+    /** @var L10nServerReleaseInterface $entity */
     $row = [];
     $row['pid'] = $entity->get('pid')->first()->getValue()['target_id'];
     $row['label'] = $entity->toLink();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerProjectListBuilder.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Entity\ListBuilder;

+use Drupal\l10n_server\Entity\L10nServerProjectInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ @@
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerProjectInterface $entity */
+    /** @var L10nServerProjectInterface $entity */
     $row['label'] = $entity->toLink();
     $row['uri'] = $entity->get('uri')->first()->getValue()['value'];
     $row['connector'] = $entity->get('connector_module')->first()->getValue()['value'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerLineListBuilder.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Entity\ListBuilder;

+use Drupal\l10n_server\Entity\L10nServerLineInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerLineInterface $entity */
+    /** @var L10nServerLineInterface $entity */
     $row['id'] = $entity->id();
     $row['pid'] = $entity->get('pid')->first()->getValue()['target_id'];
     $row['rid'] = $entity->get('rid')->first()->getValue()['target_id'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerFileListBuilder.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Entity\ListBuilder;

+use Drupal\l10n_server\Entity\L10nServerFileInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerFileInterface $entity */
+    /** @var L10nServerFileInterface $entity */
     $row['id'] = $entity->id();
     $row['pid'] = $entity->get('pid')->first()->getValue()['target_id'];
     $row['rid'] = $entity->get('rid')->first()->getValue()['target_id'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/l10n_server/l10n_server/src/Entity/ListBuilder/L10nServerErrorListBuilder.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Entity\ListBuilder;

+use Drupal\l10n_server\Entity\L10nServerErrorInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\l10n_server\Entity\L10nServerErrorInterface $entity */
+    /** @var L10nServerErrorInterface $entity */
     $row['id'] = $entity->id();
     $row['rid'] = $entity->get('rid')->first()->getValue()['target_id'];
     $row['value'] = $entity->get('value')->first()->getValue()['value'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerReleaseInterface.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Get referenced project.
    *
-   * @return \Drupal\l10n_server\Entity\L10nServerProjectInterface
+   * @return L10nServerProjectInterface
    *   A project entity.
    */
   public function getProject(): L10nServerProjectInterface;
@@ @@
   /**
    * Set referenced project.
    *
-   * @param \Drupal\l10n_server\Entity\L10nServerProjectInterface $project
+   * @param L10nServerProjectInterface $project
    *   A project entity.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerProjectInterface.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * Get connector.
    *
-   * @return \Drupal\l10n_server\ConnectorInterface|null
+   * @return ConnectorInterface|null
    *   A connector or null.
    */
   public function getConnector(): ?ConnectorInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/l10n_server/l10n_server/src/Entity/L10nServerProject.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Entity;

+use Drupal\l10n_server\ConnectorManagerInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ @@
    * {@inheritdoc}
    */
   public function getConnector(): ?ConnectorInterface {
-    /** @var \Drupal\l10n_server\ConnectorManagerInterface $connectorManager */
+    /** @var ConnectorManagerInterface $connectorManager */
     $connectorManager = \Drupal::service('plugin.manager.l10n_server.connector');
-    /** @var \Drupal\l10n_server\ConnectorInterface $connector */
+    /** @var ConnectorInterface $connector */
     $connector = $connectorManager->createInstance($this->getConnectorModule());
     return $connector;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/l10n_server/l10n_server/src/ConnectorUploadHandlerInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Upload handler.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file.
    */
   public static function uploadHandler(FileInterface $file): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/l10n_server/l10n_server/src/ConnectorScanHandlerInterface.php:10

    ---------- begin diff ----------
@@ @@
   /**
    * Scan handler.
    *
-   * @return \Drupal\l10n_server\ConnectorScanHandlerResultInterface
+   * @return ConnectorScanHandlerResultInterface
    *   The scan handler result object.
    */
   public function scanHandler(): ConnectorScanHandlerResultInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/l10n_server/l10n_server/src/ConnectorPluginBase.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
   /**
    * Logger channel factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected LoggerChannelFactoryInterface $loggerFactory;

@@ @@
   /**
    * Logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected LoggerChannelInterface $logger;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * Source manager.
    *
-   * @var \Drupal\l10n_server\SourceManager
+   * @var SourceManager
    */
   protected SourceManager $sourceManager;

@@ @@
     $settings = $this->configFactory->get('l10n_server.settings');
     $source_plugin_id = $this->pluginDefinition['source_plugin_id'];
     $source_config = $settings->get("connectors.{$this->pluginId}.source.$source_plugin_id") ?? [];
-    /** @var \Drupal\l10n_server\SourceInterface $instance */
+    /** @var SourceInterface $instance */
     $instance = $this->sourceManager->createInstance($source_plugin_id, $source_config);
     return $instance;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/l10n_server/l10n_server/src/ConnectorParseHandlerInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the release.
    *
-   * @param \Drupal\l10n_server\Entity\L10nServerRelease $release
+   * @param L10nServerRelease $release
    *   The release object to set.
    *
    * @return $this
@@ @@
   /**
    * Gets the release.
    *
-   * @return \Drupal\l10n_server\Entity\L10nServerRelease
+   * @return L10nServerRelease
    *   The release object.
    */
   public function getRelease(): L10nServerRelease;
@@ @@
   /**
    * Parse handler.
    *
-   * @return \Drupal\l10n_server\ConnectorParseHandlerResultInterface|false
+   * @return ConnectorParseHandlerResultInterface|false
    *   The parsing results object or false in case of error.
    */
   public function parseHandler(): ConnectorParseHandlerResultInterface|FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/l10n_server/l10n_server/src/ConnectorManager.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected Config $editableConfig;

@@ @@
   public function getOptionsList(): array {
     $options = [];
     foreach ($this->getDefinitions() as $id => $definition) {
-      /** @var \Drupal\l10n_server\ConnectorInterface $plugin */
+      /** @var ConnectorInterface $plugin */
       $plugin = $this->createInstance($id);
       if ($plugin->isEnabled()) {
         $options[$plugin->getPluginId()] = $plugin->getLabel();
@@ @@
     $enabled_connectors = (array) $this->editableConfig->get('enabled_connectors');

     foreach ($this->getDefinitions() as $id => $definition) {
-      /** @var \Drupal\l10n_server\ConnectorInterface $plugin */
+      /** @var ConnectorInterface $plugin */
       $plugin = $this->createInstance($id);
       $provider = $plugin->getPluginDefinition()['provider'];
       if ($module === $provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/l10n_server/l10n_server/src/ConnectorInterface.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a source instance.
    *
-   * @return \Drupal\l10n_server\SourceInterface
+   * @return SourceInterface
    *   The source object.
    */
   public function getSourceInstance(): SourceInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/l10n_server/l10n_server/src/ConfigurableConnectorPluginBase.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The connector manager service.
    *
-   * @var \Drupal\l10n_server\ConnectorManager
+   * @var ConnectorManager
    */
   protected ConnectorManager $connectorManager;

@@ @@
   /**
    * The connector object.
    *
-   * @var \Drupal\l10n_server\ConnectorInterface
+   * @var ConnectorInterface
    */
   protected ConnectorInterface $connector;

@@ @@
   /**
    * Sets a config factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/l10n_server/l10n_server/src/Commands/L10nServerCommands.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_server\Commands;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\l10n_server\ConnectorManager;
+use Drupal\l10n_server\ConnectorInterface;
+use Drupal\l10n_server\ConnectorScanHandlerResultInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\l10n_server\ConnectorParseHandlerInterface;
+use Drupal\l10n_server\ConnectorParseHandlerResultInterface;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\l10n_server\ConnectorManagerInterface;
@@ @@
   /**
    * Configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $configuration;

@@ @@
   /**
    * Connector manager.
    *
-   * @var \Drupal\l10n_server\ConnectorManagerInterface
+   * @var ConnectorManagerInterface
    */
   protected ConnectorManagerInterface $connectorManager;

@@ @@
    *
    * @aliases lss
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   // phpcs:ignore
   public function scan(string $connector = 'drupal_rest:restapi', array $options = ['all' => FALSE]): void {
-    /** @var \Drupal\l10n_server\ConnectorManager $connectorManager */
+    /** @var ConnectorManager $connectorManager */
     $connectorManager = \Drupal::service('plugin.manager.l10n_server.connector');

     $connectors = [$connector];
@@ @@
     $results = [];
     $project_count = $release_count = $connector_count = 0;
     foreach ($connectors as $connector_id) {
-      /** @var \Drupal\l10n_server\ConnectorInterface $connector */
+      /** @var ConnectorInterface $connector */
       $connector = $connectorManager->createInstance($connector_id);
       $source = $connector->getSourceInstance();

@@ @@
           '@source_label' => $source->getLabel(),
         ]));

-        /** @var \Drupal\l10n_server\ConnectorScanHandlerResultInterface $result */
+        /** @var ConnectorScanHandlerResultInterface $result */
         $result = $connector->scanHandler();
         $results[$connector->getPluginId()][] = $result;
         $project_count = $project_count + $result->getProjectCount();
@@ @@
    *
    * @aliases lsq
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function queue(array $options = ['force' => NULL]): void {

@@ @@
    *
    * @aliases lsp
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws PluginException
+   * @throws EntityStorageException
    */
   // phpcs:ignore
   public function parse(string $project = '', array $options = ['release' => NULL, 'limit' => 1, 'only-unparsed' => FALSE, 'only-unqueued' => FALSE]): void {
-    /** @var \Drupal\l10n_server\ConnectorManager $connectorManager */
+    /** @var ConnectorManager $connectorManager */
     $connectorManager = \Drupal::service('plugin.manager.l10n_server.connector');

     $query = \Drupal::database()
@@ @@
       $project = L10nServerProject::load($row->pid);
       $release = L10nServerRelease::load($row->rid);

-      /** @var \Drupal\l10n_server\ConnectorInterface $connector */
+      /** @var ConnectorInterface $connector */
       $connector = $connectorManager->createInstance($project->getConnectorModule());
       $source = $connector->getSourceInstance();

@@ @@
           '@source_label' => $source->getLabel(),
         ]));

-        /** @var \Drupal\l10n_server\ConnectorParseHandlerInterface $connector */
+        /** @var ConnectorParseHandlerInterface $connector */
         $connector->setRelease($release);
-        /** @var \Drupal\l10n_server\ConnectorParseHandlerResultInterface $result */
+        /** @var ConnectorParseHandlerResultInterface $result */
         if ($result = $connector->parseHandler()) {
           $release = $connector->getRelease();
           $release
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/l10n_server/l10n_server/src/Annotation/Source.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


30) modules/contrib/l10n_server/l10n_server/src/Annotation/Connector.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The human-readable name of the connector.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public Translation $label;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


31) modules/contrib/l10n_server/l10n_server/l10n_server.module:0

    ---------- begin diff ----------
@@ @@
 <?php
 declare(strict_types=1);
+use Drupal\l10n_server\ConnectorManager;
+use Drupal\l10n_server\ConnectorInterface;
+use Drupal\l10n_server\ConnectorScanHandlerResultInterface;

 /**
  * @file
@@ @@
     }
   }

-  /** @var \Drupal\l10n_server\ConnectorManager $connectorManager */
+  /** @var ConnectorManager $connectorManager */
   $connectorManager = \Drupal::service('plugin.manager.l10n_server.connector');
   $connectors = \Drupal::config('l10n_server.settings')
     ->get('enabled_connectors');
@@ @@

   $connector_count = $project_count = $release_count = 0;
   foreach ($connectors as $connector_id) {
-    /** @var \Drupal\l10n_server\ConnectorInterface $connector */
+    /** @var ConnectorInterface $connector */
     $connector = $connectorManager->createInstance($connector_id);

     if ($connector->isScannable()
@@ @@
         '@source_label' => $connector->getSourceInstance()->getLabel(),
       ]);

-      /** @var \Drupal\l10n_server\ConnectorScanHandlerResultInterface $result */
+      /** @var ConnectorScanHandlerResultInterface $result */
       $result = $connector->scanHandler();
       $project_count = $project_count + $result->getProjectCount();
       $release_count = $release_count + $result->getReleaseCount();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


32) modules/contrib/l10n_server/l10n_packager/src/L10nPackager.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_packager;

+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
   /**
    * Tha database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected Connection $database;

@@ @@
   /**
    * The config manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected ConfigManagerInterface $configManager;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;

@@ @@
   /**
    * Constructs a L10nPackager object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The config manager.
    */
   public function __construct(
@@ @@
    * @param int|null $timestamp
    *   Timestamp to mark the files, for it to be consistent across tables.
    *
-   * @return \Drupal\file\Entity\File|false
+   * @return File|false
    *   Drupal file object or FALSE on error.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function releasePackage($release, Language $language, L10nPackagerFileInterface $packager_file = NULL, int $timestamp = NULL): bool|File {
-    /** @var \Drupal\l10n_packager\L10nExporter $packager */
+    /** @var L10nExporter $packager */
     $exporter = \Drupal::service('l10n_packager.exporter');

     $timestamp = $timestamp ?: \Drupal::time()->getRequestTime();
@@ @@
    * for this release, so we can keep track of releases and files and package a
    * few languages on every cron.
    *
-   * @param \Drupal\l10n_server\Entity\L10nServerReleaseInterface $release
+   * @param L10nServerReleaseInterface $release
    *   Release object.
    * @param bool $force
    *   Force repackage even when strings not updated.
    * @param int $limit
    *   Maximum number of files to create.
-   * @param \Drupal\Core\Language\Language|null $language
+   * @param Language|null $language
    *   Optional language object to check only this one.
    * @param bool $cron
    *   In a cron run, a release may be packaged partially, for some languages.
    *
    * @return array
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function check(L10nServerReleaseInterface $release, bool $force = FALSE, int $limit = 0, Language $language = NULL, bool $cron = FALSE) {
     $check_languages = isset($language) ? [$language->language => $language] : \Drupal::languageManager()->getLanguages();
@@ @@
    */
   public function package($release, $language, $file = NULL, $timestamp = NULL) {

-    $timestamp = $timestamp ? $timestamp : REQUEST_TIME;
+    $timestamp = $timestamp ? $timestamp : \Drupal::time()->getRequestTime();
     $variables = array(
       '%release' => l10n_packager_release_name($release),
       '%language' => $language->name,
@@ @@
       $file->filename = basename($file_path);
       $file->filemime = $mime_type;
       $file->uri = $file_path;
-      file_unmanaged_move($export_name, $file->uri, FILE_EXISTS_REPLACE);
-      $file->filesize = filesize(drupal_realpath($file->uri));
+      file_unmanaged_move($export_name, $file->uri, FileSystemInterface::EXISTS_REPLACE);
+      $file->filesize = filesize(\Drupal::service('file_system')->realpath($file->uri));
       $file->sid_count = $sid_count;
       // Create actual symlink to latest
       l10n_packager_create_latest_symlink($file_path, $release, $language);
@@ @@
     $basepath = $currentpath = l10n_packager_directory();
     $finalpath = $basepath . '/' . $directory;
     $parts = explode('/', $directory);
-    $htaccess_path = drupal_realpath($basepath) . '/.htaccess';
+    $htaccess_path = \Drupal::service('file_system')->realpath($basepath) . '/.htaccess';
     if (!is_dir($basepath)) {
-      file_prepare_directory($basepath, FILE_CREATE_DIRECTORY);
+      \Drupal::service('file_system')->prepareDirectory($basepath, FileSystemInterface::CREATE_DIRECTORY);
     }
     if (!file_exists($htaccess_path)) {
       $htaccess_lines = "\n\n<FilesMatch \"\.(po)$\">\n\tForceType \"text/plain; charset=utf-8\"\n\tAllow from ALL\n</FilesMatch>\n";
@@ @@
     }
     while (is_dir($currentpath) && !is_dir($finalpath) && ($more = array_shift($parts))) {
       $currentpath .= '/' . $more;
-      file_prepare_directory($currentpath, FILE_CREATE_DIRECTORY);
+      \Drupal::service('file_system')->prepareDirectory($currentpath, FileSystemInterface::CREATE_DIRECTORY);
     }
     return $basepath . '/' . $path;
   }
    ----------- end diff -----------

Applied rules:
 * DrupalRealpathRector
 * FileCreateDirectoryRector
 * FileExistsReplaceRector
 * FilePrepareDirectoryRector
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


33) modules/contrib/l10n_server/l10n_packager/src/L10nExporter.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
   /**
    * Constructs a L10nExporter object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(
@@ @@
   function export($uri, $release = NULL, $language = NULL, $template = TRUE, $compact = FALSE, $installer = FALSE, $suggestions = FALSE) {
     $project = $this->getProjects(array('uri' => $uri));

-    $query = db_select('l10n_server_file', 'f');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $query = \Drupal::database()->select('l10n_server_file', 'f');
     $query->innerJoin('l10n_server_line', 'l', 'f.fid = l.fid');
     $query->innerJoin('l10n_server_string', 's', 'l.sid = s.sid');
     $query
@@ @@
         $message = t('There are no strings in any releases of %project to export.', array('%project' => $project->title));
       }
       // Message to the user.
-      drupal_set_message($message);
+      \Drupal::messenger()->addStatus($message);
       // Message to watchdog for possible automated packaging.
       watchdog('l10n_community', $message);
       return NULL;
@@ @@
     }

     // Generate a 'unique' temporary filename for this package.
-    $tempfile = tempnam(file_directory_temp(), 'l10n_community-' . $uri);
+    $tempfile = tempnam(\Drupal::service('file_system')->getTempDirectory(), 'l10n_community-' . $uri);

     if (!$compact) {
       if (count($po_data['revisions']) == 1) {
@@ @@
   function getProjects($options = array()) {
     static $projects = array();

-    $select = db_select('l10n_server_project', 'p')->fields('p');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $select = \Drupal::database()->select('l10n_server_project', 'p')->fields('p');

     // Consider returning all projects or just published ones.
     if (empty($options['all'])) {
@@ @@
         return $projects[$options['uri']];
       }
       // Not found in cache, so query and cache before returning.
-      $result = db_query("SELECT * FROM {l10n_server_project} WHERE uri = :uri", array(':uri' => $options['uri']));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $result = \Drupal::database()->query("SELECT * FROM {l10n_server_project} WHERE uri = :uri", array(':uri' => $options['uri']));
       if ($project = $result->fetchObject()) {
         $projects[$options['uri']] = $project;
         return $project;
@@ @@
     if ($parsed_only) {
       $query .= 'AND r.last_parsed > 0 ';
     }
-    $result = db_query($query, array(':uri' => $uri));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->query($query, array(':uri' => $uri));
     $releases = $result->fetchAllAssoc('rid');
     uasort($releases, '_l10n_server_version_compare');
     return $releases;
@@ @@
    */
   function getProjectInitials() {
     // Grab the unique initials of all active projects
-    $result = db_query('SELECT DISTINCT(SUBSTR(title, 1, 1)) AS initial FROM {l10n_server_project} WHERE status = :status ORDER BY initial ASC', array(':status' => 1));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->query('SELECT DISTINCT(SUBSTR(title, 1, 1)) AS initial FROM {l10n_server_project} WHERE status = :status ORDER BY initial ASC', array(':status' => 1));

     // Create an array of elements, all non-letters are grouped in '#'.
     $initials = array();
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * DBSelectRector
 * DrupalSetMessageRector
 * FileDirectoryTempRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


34) modules/contrib/l10n_server/l10n_packager/src/Entity/ListBuilder/L10nPackagerReleaseListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_packager\Entity\ListBuilder;

+use Drupal\l10n_packager\L10nPackagerReleaseInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;

@@ @@
   /**
    * Constructs a new L10nPackagerReleaseListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\l10n_packager\L10nPackagerReleaseInterface $entity */
+    /** @var L10nPackagerReleaseInterface $entity */
     $row['id'] = $entity->id();
     $row['label'] = $entity->label();
     $row['status'] = $entity->get('status')->value ? $this->t('Enabled') : $this->t('Disabled');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/l10n_server/l10n_packager/src/Entity/ListBuilder/L10nPackagerFileListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_packager\Entity\ListBuilder;

+use Drupal\l10n_packager\L10nPackagerFileInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new L10nPackagerFileListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\l10n_packager\L10nPackagerFileInterface $entity */
+    /** @var L10nPackagerFileInterface $entity */
     $row['id'] = $entity->id();
     $row['label'] = $entity->label();
     $row['created'] = $this->dateFormatter->format($entity->get('created')->value);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/l10n_server/l10n_packager/src/Commands/L10nPackagerCommands.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_packager\Commands;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\l10n_server\Entity\L10nServerRelease;
 use Drupal\l10n_server\L10nHelper;
 use Drush\Commands\DrushCommands;
@@ @@
    *
    * @aliases lpq
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function queue(array $options = ['force' => NULL]): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/l10n_server/connectors/l10n_gettext/src/Plugin/l10n_server/Connector/Gettext.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The release.
    *
-   * @var \Drupal\l10n_server\Entity\L10nServerRelease
+   * @var L10nServerRelease
    */
   private L10nServerRelease $release;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/l10n_server/connectors/l10n_drupal_rest/src/ScannerService.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_drupal_rest;

+use Drupal\l10n_server\Entity\L10nServerProject;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The config object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $config;

@@ @@
   /**
    * A state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected StateInterface $state;

@@ @@
   /**
    * An HTTP client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected ClientInterface $httpClient;

@@ @@
   /**
    * A file repository service.
    *
-   * @var \Drupal\file\FileRepositoryInterface
+   * @var FileRepositoryInterface
    */
   protected FileRepositoryInterface $fileRepository;

@@ @@
   /**
    * A file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private FileSystemInterface $fileSystem;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected LoggerChannelInterface $logger;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The connector instance.
    *
-   * @var \Drupal\l10n_server\ConnectorInterface
+   * @var ConnectorInterface
    */
   private ConnectorInterface $connector;

@@ @@
   /**
    * Constructs a DrupalRestService object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
-   * @param \Drupal\file\FileRepositoryInterface $file_repository
+   * @param FileRepositoryInterface $file_repository
    *   The file repository.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
@@ @@
   /**
    * Sets connector.
    *
-   * @param \Drupal\l10n_server\ConnectorInterface $connector
+   * @param ConnectorInterface $connector
    *   The connector instance.
    *
    * @return $this
@@ @@
     $response = $this->httpClient->get($url, ['connect_timeout' => 30]);

     // Save as temporary file.
-    /** @var \Drupal\file\FileRepositoryInterface $fileRepository */
+    /** @var FileRepositoryInterface $fileRepository */
     $file_repository = \Drupal::service('file.repository');
     $file_repository->writeData(
       $response->getBody()->getContents(),
@@ @@
         ->execute();

       if ($existing_projects) {
-        /** @var \Drupal\l10n_server\Entity\L10nServerProject $existing_project */
+        /** @var L10nServerProject $existing_project */
         $existing_project = $project_storage->load(reset($existing_projects));

         // Check that the title is correct, if not update it.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


39) modules/contrib/l10n_server/connectors/l10n_drupal_rest/src/Plugin/l10n_server/Connector/DrupalRest.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_drupal_rest\Plugin\l10n_server\Connector;

+use Drupal\l10n_server\Entity\Storage\L10nServerReleaseStorage;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\l10n_drupal_rest\ParserService;
 use Drupal\l10n_drupal_rest\ScannerService;
@@ @@
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;

@@ @@
   /**
    * HTTP Client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected ClientInterface $httpClient;

@@ @@
   /**
    * Scanner service.
    *
-   * @var \Drupal\l10n_drupal_rest\ScannerService
+   * @var ScannerService
    */
   protected ScannerService $scanner;

@@ @@
   /**
    * Parser service.
    *
-   * @var \Drupal\l10n_drupal_rest\ParserService
+   * @var ParserService
    */
   protected ParserService $parser;

@@ @@
   /**
    * The release.
    *
-   * @var \Drupal\l10n_server\Entity\L10nServerRelease
+   * @var L10nServerRelease
    */
   protected L10nServerRelease $release;

@@ @@
    */
   public function parseHandler(): ConnectorParseHandlerResultInterface|FALSE {
     if (!$this->release) {
-      /** @var \Drupal\l10n_server\Entity\Storage\L10nServerReleaseStorage $release_storage */
+      /** @var L10nServerReleaseStorage $release_storage */
       $release_storage = \Drupal::entityTypeManager()->getStorage('l10n_server_release');
       $release_ids = $release_storage->getIdsToRefresh();
       if ($release_ids) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/l10n_server/connectors/l10n_drupal_rest/src/ParserService.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\l10n_drupal_rest;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The config object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $config;

@@ @@
   /**
    * A state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected StateInterface $state;

@@ @@
   /**
    * An HTTP client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected ClientInterface $httpClient;

@@ @@
   /**
    * A file repository service.
    *
-   * @var \Drupal\file\FileRepositoryInterface
+   * @var FileRepositoryInterface
    */
   protected FileRepositoryInterface $fileRepository;

@@ @@
   /**
    * A file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private FileSystemInterface $fileSystem;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected LoggerChannelInterface $logger;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The connector instance.
    *
-   * @var \Drupal\l10n_server\ConnectorInterface
+   * @var ConnectorInterface
    */
   private ConnectorInterface $connector;

@@ @@
   /**
    * The release.
    *
-   * @var \Drupal\l10n_server\Entity\L10nServerReleaseInterface
+   * @var L10nServerReleaseInterface
    */
   private L10nServerReleaseInterface $release;

@@ @@
   /**
    * Constructs a DrupalRestService object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
-   * @param \Drupal\file\FileRepositoryInterface $file_repository
+   * @param FileRepositoryInterface $file_repository
    *   The file repository.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
@@ @@
   /**
    * Sets connector.
    *
-   * @param \Drupal\l10n_server\ConnectorInterface $connector
+   * @param ConnectorInterface $connector
    *   The connector instance.
    *
    * @return $this
@@ @@
   /**
    * Gets release.
    *
-   * @return \Drupal\l10n_server\Entity\L10nServerReleaseInterface
+   * @return L10nServerReleaseInterface
    *   The release object.
    */
   public function getRelease(): L10nServerReleaseInterface {
@@ @@
   /**
    * Sets release.
    *
-   * @param \Drupal\l10n_server\Entity\L10nServerReleaseInterface $release
+   * @param L10nServerReleaseInterface $release
    *   The release object.
    *
    * @return $this
@@ @@
   /**
    * Processes a release.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function processRelease(): void {
     $release = clone $this->release;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


41) modules/contrib/l10n_server/connectors/l10n_drupal/src/Plugin/l10n_server/Connector/Drupal.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The Release.
    *
-   * @var \Drupal\l10n_server\Entity\L10nServerRelease
+   * @var L10nServerRelease
    */
   protected L10nServerRelease $release;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/l10n_server/l10n_server/src/Plugin/DevelGenerate/Languag
         eDevelGenerate.php" file, due to:                                      
         "Analyze error: "Class Drupal\devel_generate\DevelGenerateBase not     
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/l10n_server/l10n_server/src/Plugin/DevelGenerate/L10nSer
         verTranslationHistoryDevelGenerate.php" file, due to:                  
         "Analyze error: "Class Drupal\devel_generate\DevelGenerateBase not     
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/l10n_server/l10n_server/src/Plugin/DevelGenerate/L10nSer
         verTranslationDevelGenerate.php" file, due to:                         
         "Analyze error: "Class Drupal\devel_generate\DevelGenerateBase not     
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/l10n_server/l10n_server/src/Plugin/DevelGenerate/L10nSer
         verStatusFlagDevelGenerate.php" file, due to:                          
         "Analyze error: "Class Drupal\devel_generate\DevelGenerateBase not     
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/l10n_server/l10n_server/src/Plugin/DevelGenerate/L10nSer
         verDevelGenerateBase.php" file, due to:                                
         "Analyze error: "Class Drupal\devel_generate\DevelGenerateBase not     
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

