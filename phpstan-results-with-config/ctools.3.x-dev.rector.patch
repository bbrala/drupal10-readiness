diff --git a/modules/ctools_block/src/Plugin/Block/EntityField.php b/modules/ctools_block/src/Plugin/Block/EntityField.php
index 5318cdee..f9b244a9 100644
--- a/modules/ctools_block/src/Plugin/Block/EntityField.php
+++ b/modules/ctools_block/src/Plugin/Block/EntityField.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\ctools_block\Plugin\Block;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Field\FormatterInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
@@ -30,28 +35,28 @@ class EntityField extends BlockBase implements ContextAwarePluginInterface, Cont
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The field type manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;
 
   /**
    * The formatter manager.
    *
-   * @var \Drupal\Core\Field\FormatterPluginManager
+   * @var FormatterPluginManager
    */
   protected $formatterManager;
 
@@ -72,14 +77,14 @@ class EntityField extends BlockBase implements ContextAwarePluginInterface, Cont
   /**
    * The field definition.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   protected $fieldDefinition;
 
   /**
    * The field storage definition.
    *
-   * @var \Drupal\Core\Field\FieldStorageDefinitionInterface
+   * @var FieldStorageDefinitionInterface
    */
   protected $fieldStorageDefinition;
 
@@ -92,13 +97,13 @@ class EntityField extends BlockBase implements ContextAwarePluginInterface, Cont
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type manager.
-   * @param \Drupal\Core\Field\FormatterPluginManager $formatter_manager
+   * @param FormatterPluginManager $formatter_manager
    *   The formatter manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, FormatterPluginManager $formatter_manager) {
@@ -134,10 +139,10 @@ class EntityField extends BlockBase implements ContextAwarePluginInterface, Cont
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $entity = $this->getContextValue('entity');
     $build = [];
-    /** @var \Drupal\Core\Field\FieldItemListInterface $field */
+    /** @var FieldItemListInterface $field */
     $field = $entity->{$this->fieldName};
     $display_settings = $this->getConfiguration()['formatter'];
     $build['field'] = $field->view($display_settings);
@@ -154,7 +159,7 @@ class EntityField extends BlockBase implements ContextAwarePluginInterface, Cont
    * {@inheritdoc}
    */
   protected function blockAccess(AccountInterface $account) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->getContextValue('entity');
     // Make sure we have access to the entity.
     $access = $entity->access('view', $account, TRUE);
@@ -295,7 +300,7 @@ class EntityField extends BlockBase implements ContextAwarePluginInterface, Cont
   /**
    * Gets the field definition.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   The field definition.
    */
   protected function getFieldDefinition() {
@@ -311,7 +316,7 @@ class EntityField extends BlockBase implements ContextAwarePluginInterface, Cont
   /**
    * Gets the field storage definition.
    *
-   * @return \Drupal\Core\Field\FieldStorageDefinitionInterface
+   * @return FieldStorageDefinitionInterface
    *   The field storage definition.
    */
   protected function getFieldStorageDefinition() {
@@ -359,7 +364,7 @@ class EntityField extends BlockBase implements ContextAwarePluginInterface, Cont
    * @param array $third_party_settings
    *   The formatter third party settings.
    *
-   * @return \Drupal\Core\Field\FormatterInterface
+   * @return FormatterInterface
    *   The formatter object.
    */
   protected function getFormatter($type, $label, array $settings, array $third_party_settings) {
diff --git a/modules/ctools_block/src/Plugin/Deriver/EntityFieldDeriver.php b/modules/ctools_block/src/Plugin/Deriver/EntityFieldDeriver.php
index aecfafce..5e77344b 100644
--- a/modules/ctools_block/src/Plugin/Deriver/EntityFieldDeriver.php
+++ b/modules/ctools_block/src/Plugin/Deriver/EntityFieldDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools_block\Plugin\Deriver;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Plugin\Context\EntityContextDefinition;
 use Drupal\ctools\Plugin\Deriver\EntityDeriverBase;
 
@@ -17,7 +18,7 @@ class EntityFieldDeriver extends EntityDeriverBase {
     $entity_type_labels = $this->entityTypeRepository->getEntityTypeLabels();
     foreach ($this->entityFieldManager->getFieldMap() as $entity_type_id => $entity_field_map) {
       // Some base fields have no storage.
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_storage_definitions */
+      /** @var FieldDefinitionInterface[] $field_storage_definitions */
       $field_storage_definitions = array_merge(
         $this->entityFieldManager->getBaseFieldDefinitions($entity_type_id),
         $this->entityFieldManager->getFieldStorageDefinitions($entity_type_id)
diff --git a/modules/ctools_block/tests/src/Functional/EntityFieldBlockTest.php b/modules/ctools_block/tests/src/Functional/EntityFieldBlockTest.php
index 56baf0da..21cdc1b3 100644
--- a/modules/ctools_block/tests/src/Functional/EntityFieldBlockTest.php
+++ b/modules/ctools_block/tests/src/Functional/EntityFieldBlockTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\ctools_block\Functional;
 
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\file\FileInterface;
+use Drupal\field\FieldConfigInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -52,18 +55,18 @@ class EntityFieldBlockTest extends BrowserTestBase {
     $entityTypeManager = $this->container->get('entity_type.manager');
     $source = $this->container->get('module_handler')->getModule('image')->getPath() . '/sample.png';
 
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = $this->container->get('file_system');
     $file_system->copy($source, 'public://sample.png');
 
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $entityTypeManager->getStorage('file')
       ->create([
         'uri' => 'public://sample.png',
       ]);
     $file->save();
 
-    /** @var \Drupal\field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = $entityTypeManager->getStorage('field_config')
       ->load('node.ctools_block_field_test.field_image');
     $settings = $field->getSettings();
@@ -83,8 +86,8 @@ class EntityFieldBlockTest extends BrowserTestBase {
     $this->drupalGet('node/' . $node->id());
 
     $url = $file->getFileUri();
-    $url = file_create_url($url);
-    $url = file_url_transform_relative($url);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($url);
+    $url = \Drupal::service('file_url_generator')->transformRelative($url);
     $this->assertSession()->responseContains('src="' . $url . '"');
   }
 
diff --git a/modules/ctools_entity_mask/ctools_entity_mask.module b/modules/ctools_entity_mask/ctools_entity_mask.module
index 8da722e3..949282da 100644
--- a/modules/ctools_entity_mask/ctools_entity_mask.module
+++ b/modules/ctools_entity_mask/ctools_entity_mask.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\field\FieldConfigInterface;
+use Drupal\field\FieldStorageConfigInterface;
 /**
  * @file
  * Helps entity type to take the fields, display configuration from entity type.
@@ -49,7 +51,7 @@ function ctools_entity_mask_entity_form_mode_info_alter(&$form_modes) {
  * Implements hook_entity_type_alter().
  */
 function ctools_entity_mask_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   foreach ($entity_types as $entity_type) {
     // Mask entities should use our specialized storage handler, which simulates
     // a save but does not write anything to the database.
@@ -75,7 +77,7 @@ function ctools_entity_mask_entity_type_alter(array &$entity_types) {
  * the given display. If no corresponding display exists for the masked entity
  * type, the default display will be loaded and used.
  *
- * @param \Drupal\Core\Entity\Display\EntityDisplayInterface $display
+ * @param EntityDisplayInterface $display
  *   The display for the mask entity type.
  */
 function ctools_entity_mask_copy_display(EntityDisplayInterface $display) {
@@ -148,7 +150,7 @@ function ctools_entity_mask_entity_bundle_field_info(EntityTypeInterface $entity
 
   $storage_info = ctools_entity_mask_entity_field_storage_info($entity_type);
 
-  /** @var \Drupal\field\FieldConfigInterface[] $fields */
+  /** @var FieldConfigInterface[] $fields */
   $fields = \Drupal::entityTypeManager()
     ->getStorage('field_config')
     ->loadByProperties([
@@ -179,7 +181,7 @@ function ctools_entity_mask_entity_field_storage_info(EntityTypeInterface $entit
     return $info;
   }
 
-  /** @var \Drupal\field\FieldStorageConfigInterface[] $fields */
+  /** @var FieldStorageConfigInterface[] $fields */
   $fields = \Drupal::entityTypeManager()
     ->getStorage('field_storage_config')
     ->loadByProperties([
diff --git a/modules/ctools_entity_mask/tests/src/Functional/DisplayTest.php b/modules/ctools_entity_mask/tests/src/Functional/DisplayTest.php
index b65d66da..a03557ec 100644
--- a/modules/ctools_entity_mask/tests/src/Functional/DisplayTest.php
+++ b/modules/ctools_entity_mask/tests/src/Functional/DisplayTest.php
@@ -39,7 +39,7 @@ class DisplayTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $account = $this->drupalCreateUser(['administer blocks']);
@@ -109,10 +109,10 @@ class DisplayTest extends BrowserTestBase {
     $this->assertNotFalse(strpos($rendered, $block->field_link->uri));
 
     $image_url = $block->field_image->entity->getFileUri();
-    $image_url = file_create_url($image_url);
+    $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($image_url);
     // file_create_url() will include the host and port, but the rendered output
     // won't include those.
-    $image_url = file_url_transform_relative($image_url);
+    $image_url = \Drupal::service('file_url_generator')->transformRelative($image_url);
     // @todo Use assertStringContainsString() when we rely exclusively on
     // PHPUnit 8.
     $this->assertNotFalse(strpos($rendered, $image_url));
diff --git a/modules/ctools_entity_mask/tests/src/Kernel/EntityMaskTest.php b/modules/ctools_entity_mask/tests/src/Kernel/EntityMaskTest.php
index f4d14a39..73035f13 100644
--- a/modules/ctools_entity_mask/tests/src/Kernel/EntityMaskTest.php
+++ b/modules/ctools_entity_mask/tests/src/Kernel/EntityMaskTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\ctools_entity_mask\Kernel;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\Entity\EntityFormMode;
 use Drupal\entity_mask_test\Entity\BlockContent;
 use Drupal\KernelTests\KernelTestBase;
@@ -34,7 +37,7 @@ class EntityMaskTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['block_content', 'entity_mask_test']);
     $this->installEntitySchema('fake_block_content');
@@ -113,7 +116,7 @@ class EntityMaskTest extends KernelTestBase {
    * Tests that mask entity types define no tables.
    */
   public function testNoTables() {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = $this->container
       ->get('entity_type.manager')
       ->getDefinition('fake_block_content');
@@ -128,7 +131,7 @@ class EntityMaskTest extends KernelTestBase {
    * Tests that mask entity types are not exposed to Field UI.
    */
   public function testNotExposedToFieldUI() {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = $this->container
       ->get('entity_type.manager')
       ->getDefinition('fake_block_content');
@@ -145,7 +148,7 @@ class EntityMaskTest extends KernelTestBase {
     $body = $this->getRandomGenerator()->paragraphs(2);
     $link = 'https://www.drupal.org/project/ctools';
 
-    /** @var \Drupal\Core\Entity\EntityInterface $block */
+    /** @var EntityInterface $block */
     $block = BlockContent::create([
       'type' => 'basic',
       'body' => $body,
@@ -188,7 +191,7 @@ class EntityMaskTest extends KernelTestBase {
     $block = BlockContent::create(['type' => 'basic']);
     $block->save();
 
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('fake_block_content');
 
     $id = $block->id();
@@ -220,7 +223,7 @@ class EntityMaskTest extends KernelTestBase {
     $body = $this->getRandomGenerator()->paragraphs(2);
     $link = 'https://www.drupal.org/project/ctools';
 
-    /** @var \Drupal\Core\Entity\EntityInterface $block */
+    /** @var EntityInterface $block */
     $block = BlockContent::create([
       'type' => 'basic',
       'body' => $body,
diff --git a/modules/ctools_views/src/Plugin/Display/Block.php b/modules/ctools_views/src/Plugin/Display/Block.php
index e667cbd6..ef7c91c7 100644
--- a/modules/ctools_views/src/Plugin/Display/Block.php
+++ b/modules/ctools_views/src/Plugin/Display/Block.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\ctools_views\Plugin\Display;
 
+use Drupal\views\Plugin\ViewsHandlerManager;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\views\Plugin\views\filter\FilterPluginBase;
+use Drupal\views\ViewExecutable;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\Block\ViewsBlock;
 use Drupal\views\Plugin\views\display\Block as CoreBlock;
@@ -17,14 +21,14 @@ class Block extends CoreBlock {
   /**
    * The views filter plugin manager.
    *
-   * @var \Drupal\views\Plugin\ViewsHandlerManager
+   * @var ViewsHandlerManager
    */
   protected $filterManager;
 
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
@@ -316,7 +320,7 @@ class Block extends CoreBlock {
     if (!empty($allow_settings['disable_filters'])) {
       if ($filters = $form_state->getValue(['override', 'filters'])) {
         foreach ($filters as $filter_name => $filter) {
-          /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $plugin */
+          /** @var FilterPluginBase $plugin */
           $plugin = $form_state->getValue([
             'override', 'filters', $filter_name, 'plugin',
           ]);
@@ -438,7 +442,7 @@ class Block extends CoreBlock {
    * exposed filters and manually set the #action to the current request uri.
    */
   public function elementPreRender(array $element) {
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $element['#view'];
     if (!empty($view->exposed_widgets['#action']) && !$view->ajaxEnabled()) {
       $view->exposed_widgets['#action'] = $this->request->getRequestUri();
diff --git a/modules/ctools_views/tests/src/Functional/CToolsViewsBasicViewBlockTest.php b/modules/ctools_views/tests/src/Functional/CToolsViewsBasicViewBlockTest.php
index 23ba31cc..85a2942b 100644
--- a/modules/ctools_views/tests/src/Functional/CToolsViewsBasicViewBlockTest.php
+++ b/modules/ctools_views/tests/src/Functional/CToolsViewsBasicViewBlockTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ctools_views\Functional;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Tests\views_ui\Functional\UITestBase;
 use Drupal\views\Tests\ViewTestData;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -33,7 +34,7 @@ class CToolsViewsBasicViewBlockTest extends UITestBase {
   /**
    * The block storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
@@ -45,7 +46,7 @@ class CToolsViewsBasicViewBlockTest extends UITestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     ViewTestData::createTestViews(get_class($this), ['ctools_views_test_views']);
diff --git a/src/Access/TempstoreAccess.php b/src/Access/TempstoreAccess.php
index e18eb95a..cd584862 100644
--- a/src/Access/TempstoreAccess.php
+++ b/src/Access/TempstoreAccess.php
@@ -16,7 +16,7 @@ class TempstoreAccess implements CoreAccessInterface {
   /**
    * The shared tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
diff --git a/src/Annotation/Relationship.php b/src/Annotation/Relationship.php
index edf22e06..b8fa56a0 100644
--- a/src/Annotation/Relationship.php
+++ b/src/Annotation/Relationship.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ctools\Annotation;
 
+use Drupal\Core\Annotation\Translation;
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +26,7 @@ class Relationship extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -47,7 +49,7 @@ class Relationship extends Plugin {
   /**
    * The array of contexts requires or optional for this plugin.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @var ContextInterface[]
    */
   public $context;
 
diff --git a/src/ConstraintConditionInterface.php b/src/ConstraintConditionInterface.php
index 00ec2d1f..f8d1a21e 100644
--- a/src/ConstraintConditionInterface.php
+++ b/src/ConstraintConditionInterface.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\ctools;
 
-
+use Drupal\Core\Plugin\Context\ContextInterface;
 interface ConstraintConditionInterface {
 
   /**
    * Applies relevant constraints for this condition to the injected contexts.
    *
-   * @param \Drupal\Core\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    *
    * @return null
    */
@@ -17,7 +17,7 @@ interface ConstraintConditionInterface {
   /**
    * Removes constraints for this condition from the injected contexts.
    *
-   * @param \Drupal\Core\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    *
    * @return null
    */
diff --git a/src/Context/EntityLazyLoadContext.php b/src/Context/EntityLazyLoadContext.php
index c4408762..a6031760 100644
--- a/src/Context/EntityLazyLoadContext.php
+++ b/src/Context/EntityLazyLoadContext.php
@@ -21,16 +21,16 @@ class EntityLazyLoadContext extends Context {
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * Construct an EntityLazyLoadContext object.
    *
-   * @param \Drupal\Core\Plugin\Context\ContextDefinitionInterface $context_definition
+   * @param ContextDefinitionInterface $context_definition
    *   The context definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    * @param string $uuid
    *   The UUID of the entity.
diff --git a/src/ContextMapper.php b/src/ContextMapper.php
index a9b1f723..27271973 100644
--- a/src/ContextMapper.php
+++ b/src/ContextMapper.php
@@ -16,14 +16,14 @@ class ContextMapper implements ContextMapperInterface {
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * Constructs a new ContextMapper.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(EntityRepositoryInterface $entity_repository) {
diff --git a/src/ContextMapperInterface.php b/src/ContextMapperInterface.php
index b583817e..08547f15 100644
--- a/src/ContextMapperInterface.php
+++ b/src/ContextMapperInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools;
 
+use Drupal\Component\Plugin\Context\ContextInterface;
 /**
  * Provides an interface for mapping context configurations to context objects.
  */
@@ -13,7 +14,7 @@ interface ContextMapperInterface {
    * @param array[] $static_context_configurations
    *   An array of static context configurations.
    *
-   * @return \Drupal\Component\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    *   An array of set context values, keyed by context name.
    */
   public function getContextValues(array $static_context_configurations);
diff --git a/src/Controller/WizardEntityFormController.php b/src/Controller/WizardEntityFormController.php
index 341419fb..c6317f08 100644
--- a/src/Controller/WizardEntityFormController.php
+++ b/src/Controller/WizardEntityFormController.php
@@ -16,18 +16,18 @@ class WizardEntityFormController extends WizardFormController {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @param \Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface $argument_resolver
+   * @param ArgumentResolverInterface $argument_resolver
    *   The argument resolver.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\ctools\Wizard\WizardFactoryInterface $wizard_factory
+   * @param WizardFactoryInterface $wizard_factory
    *   The wizard factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ArgumentResolverInterface $argument_resolver, FormBuilderInterface $form_builder, WizardFactoryInterface $wizard_factory, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Controller/WizardFormController.php b/src/Controller/WizardFormController.php
index 5afc7c66..fe43934b 100644
--- a/src/Controller/WizardFormController.php
+++ b/src/Controller/WizardFormController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\ctools\Controller;
 
+use Drupal\Core\DependencyInjection\ClassResolverInterface;
+use Drupal\Core\TempStore\SharedTempStoreFactory;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Controller\FormController;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -17,30 +20,30 @@ class WizardFormController extends FormController {
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * Tempstore Factory for keeping track of values in each step of the wizard.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
-   * @param \Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface $argument_resolver
+   * @param ArgumentResolverInterface $argument_resolver
    *   The argument resolver.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\ctools\Wizard\WizardFactoryInterface $wizard_factory
+   * @param WizardFactoryInterface $wizard_factory
    *   The wizard factory.
    */
   public function __construct(ArgumentResolverInterface $argument_resolver, FormBuilderInterface $form_builder, WizardFactoryInterface $wizard_factory) {
diff --git a/src/Event/BlockVariantEvent.php b/src/Event/BlockVariantEvent.php
index 35df32dd..b4738619 100644
--- a/src/Event/BlockVariantEvent.php
+++ b/src/Event/BlockVariantEvent.php
@@ -2,32 +2,32 @@
 
 namespace Drupal\ctools\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\ctools\Plugin\BlockVariantInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 class BlockVariantEvent extends Event {
 
   /**
    * The block being acted upon.
    *
-   * @var \Drupal\Core\Block\BlockPluginInterface
+   * @var BlockPluginInterface
    */
   protected $block;
 
   /**
    * The variant acting on the block.
    *
-   * @var \Drupal\ctools\Plugin\BlockVariantInterface
+   * @var BlockVariantInterface
    */
   protected $variant;
 
   /**
    * BlockVariantEvent constructor.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $block
+   * @param BlockPluginInterface $block
    *   The block plugin.
-   * @param \Drupal\ctools\Plugin\BlockVariantInterface $variant
+   * @param BlockVariantInterface $variant
    *   The variant plugin.
    */
   public function __construct(BlockPluginInterface $block, BlockVariantInterface $variant) {
@@ -38,7 +38,7 @@ class BlockVariantEvent extends Event {
   /**
    * Gets the block plugin.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    */
   public function getBlock() {
     return $this->block;
@@ -47,7 +47,7 @@ class BlockVariantEvent extends Event {
   /**
    * Gets the variant plugin.
    *
-   * @return \Drupal\ctools\Plugin\BlockVariantInterface
+   * @return BlockVariantInterface
    */
   public function getVariant() {
     return $this->variant;
diff --git a/src/Event/WizardEvent.php b/src/Event/WizardEvent.php
index 9e28d0d8..4da3d4c8 100644
--- a/src/Event/WizardEvent.php
+++ b/src/Event/WizardEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\ctools\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\ctools\Wizard\FormWizardInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * An event for altering form wizard values.
@@ -11,7 +11,7 @@ use Symfony\Component\EventDispatcher\Event;
 class WizardEvent extends Event {
 
   /**
-   * @var \Drupal\ctools\Wizard\FormWizardInterface
+   * @var FormWizardInterface
    */
   protected $wizard;
 
diff --git a/src/Form/ConditionConfigure.php b/src/Form/ConditionConfigure.php
index 10b8224b..cb08c2be 100644
--- a/src/Form/ConditionConfigure.php
+++ b/src/Form/ConditionConfigure.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ctools\Form;
 
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Uuid\Uuid;
 use Drupal\Core\Ajax\AjaxResponse;
@@ -21,12 +23,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class ConditionConfigure extends FormBase {
 
   /**
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
   /**
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $manager;
 
@@ -178,7 +180,7 @@ abstract class ConditionConfigure extends FormBase {
    *
    * @param $cached_values
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   abstract protected function getContexts($cached_values);
 
diff --git a/src/Form/ConditionDelete.php b/src/Form/ConditionDelete.php
index 7ab90503..9f0b2e83 100644
--- a/src/Form/ConditionDelete.php
+++ b/src/Form/ConditionDelete.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ctools\Form;
 
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\ConfirmFormHelper;
@@ -15,12 +17,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class ConditionDelete extends ConfirmFormBase {
 
   /**
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
   /**
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $manager;
 
@@ -145,7 +147,7 @@ abstract class ConditionDelete extends ConfirmFormBase {
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ -206,7 +208,7 @@ abstract class ConditionDelete extends ConfirmFormBase {
    *
    * @param $cached_values
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   abstract protected function getContexts($cached_values);
 
diff --git a/src/Form/ContextConfigure.php b/src/Form/ContextConfigure.php
index 14377bf5..f6620726 100644
--- a/src/Form/ContextConfigure.php
+++ b/src/Form/ContextConfigure.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Form;
 
+use Drupal\Core\Entity\Plugin\DataType\EntityAdapter;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
 use Drupal\Core\Ajax\RedirectCommand;
@@ -20,14 +21,14 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class ContextConfigure extends FormBase {
 
   /**
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
   /**
    * Object EntityTypeManager.
    *
-   * @var Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -121,7 +122,7 @@ abstract class ContextConfigure extends FormBase {
     ];
     if (strpos($data_type, 'entity:') === 0) {
       list(, $entity_type) = explode(':', $data_type);
-      /** @var \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $entity */
+      /** @var EntityAdapter $entity */
       $entity = $edit ? $context->getContextValue() : NULL;
       $form['context_value'] = [
         '#type' => 'entity_autocomplete',
@@ -231,7 +232,7 @@ abstract class ContextConfigure extends FormBase {
    *
    * @param $cached_values
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   abstract protected function getContexts($cached_values);
 
@@ -242,7 +243,7 @@ abstract class ContextConfigure extends FormBase {
    *   The cached_values currently in use.
    * @param string $context_id
    *   The context identifier.
-   * @param \Drupal\Core\Plugin\Context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context to add or update within the cached values.
    *
    * @return mixed
@@ -257,7 +258,7 @@ abstract class ContextConfigure extends FormBase {
    *   The name of the context.
    * @param $element
    *   The machine_name element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
diff --git a/src/Form/ContextDelete.php b/src/Form/ContextDelete.php
index fde4854d..d34cfad2 100644
--- a/src/Form/ContextDelete.php
+++ b/src/Form/ContextDelete.php
@@ -13,7 +13,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class ContextDelete extends ConfirmFormBase {
 
   /**
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
diff --git a/src/Form/ManageConditions.php b/src/Form/ManageConditions.php
index b1dcdfec..9afac492 100644
--- a/src/Form/ManageConditions.php
+++ b/src/Form/ManageConditions.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\ctools\Form;
 
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\Core\Form\FormBuilder;
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Ajax\AjaxResponse;
@@ -16,14 +19,14 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class ManageConditions extends FormBase {
 
   /**
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $manager;
 
   /**
    * The builder of form.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;
 
@@ -239,7 +242,7 @@ abstract class ManageConditions extends FormBase {
    *
    * @param $cached_values
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   abstract protected function getContexts($cached_values);
 
diff --git a/src/Form/ManageContext.php b/src/Form/ManageContext.php
index d7224bf0..bd7fed2d 100644
--- a/src/Form/ManageContext.php
+++ b/src/Form/ManageContext.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Form;
 
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
@@ -26,21 +27,21 @@ abstract class ManageContext extends FormBase {
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The typed data resolver.
    *
-   * @var \Drupal\ctools\TypedDataResolver
+   * @var TypedDataResolver
    */
   protected $typedDataResolver;
 
@@ -61,11 +62,11 @@ abstract class ManageContext extends FormBase {
   /**
    * ManageContext constructor.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed data manager.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\ctools\TypedDataResolver $ctools_typed_data_resolver
+   * @param TypedDataResolver $ctools_typed_data_resolver
    *   The typed data resolver.
    */
   public function __construct(TypedDataManagerInterface $typed_data_manager, FormBuilderInterface $form_builder, TypedDataResolver $ctools_typed_data_resolver) {
@@ -211,7 +212,7 @@ abstract class ManageContext extends FormBase {
 
 
   protected function getAvailableRelationships($cached_values) {
-    /** @var \Drupal\ctools\TypedDataResolver $resolver */
+    /** @var TypedDataResolver $resolver */
     $resolver = $this->typedDataResolver;
     return $resolver->getTokensForContexts($this->getContexts($cached_values));
   }
@@ -326,7 +327,7 @@ abstract class ManageContext extends FormBase {
    *
    * @param mixed $cached_values
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   abstract protected function getContexts($cached_values);
 
diff --git a/src/Form/ManageResolverRelationships.php b/src/Form/ManageResolverRelationships.php
index 713b7492..d4f429a9 100644
--- a/src/Form/ManageResolverRelationships.php
+++ b/src/Form/ManageResolverRelationships.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ctools\Form;
 
+use Drupal\Core\Form\FormBuilder;
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
@@ -34,23 +36,23 @@ abstract class ManageResolverRelationships extends FormBase {
   /**
    * The typed data resolver.
    *
-   * @var \Drupal\ctools\TypedDataResolver
+   * @var TypedDataResolver
    */
   protected $typedDataResolver;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;
 
   /**
    * Constructs a new ManageResolverRelationships object.
    *
-   * @param \Drupal\ctools\TypedDataResolver $ctools_typed_data_resolver
+   * @param TypedDataResolver $ctools_typed_data_resolver
    *   The typed data resolver.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
    */
   public function __construct(TypedDataResolver $ctools_typed_data_resolver, FormBuilderInterface $form_builder) {
@@ -129,7 +131,7 @@ abstract class ManageResolverRelationships extends FormBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Stores information about the state of a form.
    */
   public function addRelationship(array &$form, FormStateInterface $form_state) {
@@ -158,7 +160,7 @@ abstract class ManageResolverRelationships extends FormBase {
    *   The arbitrary value from temporary storage.
    */
   protected function getAvailableRelationships($cached_values) {
-    /** @var \Drupal\ctools\TypedDataResolver $resolver */
+    /** @var TypedDataResolver $resolver */
     $resolver = $this->typedDataResolver;
     return $resolver->getTokensForContexts($this->getContexts($cached_values));
   }
@@ -277,7 +279,7 @@ abstract class ManageResolverRelationships extends FormBase {
    * @param mixed $cached_values
    *   The arbitrary value from temporary storage.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    *   Context data and definitions for plugins supporting
    *    caching and return docs.
    */
diff --git a/src/Form/RelationshipConfigure.php b/src/Form/RelationshipConfigure.php
index fcda7845..3b86d8d6 100644
--- a/src/Form/RelationshipConfigure.php
+++ b/src/Form/RelationshipConfigure.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Form;
 
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
 use Drupal\Core\Ajax\RedirectCommand;
@@ -16,12 +17,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class RelationshipConfigure extends FormBase {
 
   /**
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
   /**
-   * @var \Drupal\ctools\TypedDataResolver
+   * @var TypedDataResolver
    */
   protected $resolver;
 
@@ -63,7 +64,7 @@ abstract class RelationshipConfigure extends FormBase {
     $this->machine_name = $machine_name;
     $cached_values = $this->tempstore->get($this->tempstore_id)->get($this->machine_name);
 
-    /** @var \Drupal\Core\Plugin\Context\ContextInterface[] $contexts */
+    /** @var ContextInterface[] $contexts */
     $contexts = $this->getContexts($cached_values);
     $context_object = $this->resolver->convertTokenToContext($context_id, $contexts);
     $form['id'] = [
@@ -106,9 +107,9 @@ abstract class RelationshipConfigure extends FormBase {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function ajaxSave(array &$form, FormStateInterface $form_state) {
     $cached_values = $this->tempstore->get($this->tempstore_id)->get($this->machine_name);
@@ -149,7 +150,7 @@ abstract class RelationshipConfigure extends FormBase {
    *
    * @param $cached_values
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   abstract protected function getContexts($cached_values);
 
diff --git a/src/Form/RequiredContext.php b/src/Form/RequiredContext.php
index 336562b6..30c33f42 100644
--- a/src/Form/RequiredContext.php
+++ b/src/Form/RequiredContext.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Form;
 
+use Drupal\Core\TypedData\TypedDataManager;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
@@ -15,14 +16,14 @@ use Drupal\Core\Form\FormBuilderInterface;
 abstract class RequiredContext extends FormBase {
 
   /**
-   * @var \Drupal\Core\TypedData\TypedDataManager
+   * @var TypedDataManager
    */
   protected $typedDataManager;
 
   /**
    * The builder of form.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
@@ -106,9 +107,9 @@ abstract class RequiredContext extends FormBase {
    * Custom ajax form submission handler.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function add(array &$form, FormStateInterface $form_state) {
     $context = $form_state->getValue('contexts');
diff --git a/src/Form/RequiredContextDelete.php b/src/Form/RequiredContextDelete.php
index 95d42220..50ee096c 100644
--- a/src/Form/RequiredContextDelete.php
+++ b/src/Form/RequiredContextDelete.php
@@ -17,7 +17,7 @@ abstract class RequiredContextDelete extends ConfirmFormBase {
   /**
    * Creates a shared temporary storage for a collection.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
@@ -54,7 +54,7 @@ abstract class RequiredContextDelete extends ConfirmFormBase {
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The shared temporary storage.
    */
   public function __construct(SharedTempStoreFactory $tempstore) {
diff --git a/src/Form/ResolverRelationshipConfigure.php b/src/Form/ResolverRelationshipConfigure.php
index 594a899b..f85908ba 100644
--- a/src/Form/ResolverRelationshipConfigure.php
+++ b/src/Form/ResolverRelationshipConfigure.php
@@ -15,7 +15,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class ResolverRelationshipConfigure extends FormBase {
 
   /**
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
diff --git a/src/Form/ResolverRelationshipDelete.php b/src/Form/ResolverRelationshipDelete.php
index 36aec3b0..fb7bed3a 100644
--- a/src/Form/ResolverRelationshipDelete.php
+++ b/src/Form/ResolverRelationshipDelete.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Form;
 
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\ConfirmFormHelper;
 use Drupal\Core\Form\FormStateInterface;
@@ -13,12 +14,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class ResolverRelationshipDelete extends ConfirmFormBase {
 
   /**
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
   /**
-   * @var \Drupal\ctools\TypedDataResolver
+   * @var TypedDataResolver
    */
   protected $resolver;
 
@@ -45,9 +46,9 @@ abstract class ResolverRelationshipDelete extends ConfirmFormBase {
   }
 
   /**
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The shared tempstore.
-   * @param \Drupal\ctools\TypedDataResolver $resolver
+   * @param TypedDataResolver $resolver
    *   The typed data resolver.
    */
   public function __construct(SharedTempStoreFactory $tempstore, TypedDataResolver $resolver) {
@@ -114,7 +115,7 @@ abstract class ResolverRelationshipDelete extends ConfirmFormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    * @param $cached_values
    *   The current wizard cached values.
@@ -143,7 +144,7 @@ abstract class ResolverRelationshipDelete extends ConfirmFormBase {
    * @param array $cached_values
    *   The cached values.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   abstract public function getContexts($cached_values);
 
diff --git a/src/ParamConverter/TempstoreConverter.php b/src/ParamConverter/TempstoreConverter.php
index 67455f11..14f02970 100644
--- a/src/ParamConverter/TempstoreConverter.php
+++ b/src/ParamConverter/TempstoreConverter.php
@@ -82,21 +82,21 @@ class TempstoreConverter implements ParamConverterInterface {
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a TempstoreConverter.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    */
   public function __construct(SharedTempStoreFactory $tempstore, EntityTypeManagerInterface $entity_type_manager) {
     $this->tempstore = $tempstore;
diff --git a/src/Plugin/Block/EntityView.php b/src/Plugin/Block/EntityView.php
index 62411afd..30311587 100644
--- a/src/Plugin/Block/EntityView.php
+++ b/src/Plugin/Block/EntityView.php
@@ -25,14 +25,14 @@ class EntityView extends BlockBase implements ContextAwarePluginInterface, Conta
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
@@ -45,9 +45,9 @@ class EntityView extends BlockBase implements ContextAwarePluginInterface, Conta
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository) {
diff --git a/src/Plugin/BlockPluginCollection.php b/src/Plugin/BlockPluginCollection.php
index 56d51b7c..5cac4c8c 100644
--- a/src/Plugin/BlockPluginCollection.php
+++ b/src/Plugin/BlockPluginCollection.php
@@ -13,7 +13,7 @@ class BlockPluginCollection extends DefaultLazyPluginCollection {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    */
   public function &get($instance_id) {
     return parent::get($instance_id);
diff --git a/src/Plugin/BlockVariantInterface.php b/src/Plugin/BlockVariantInterface.php
index aa2709ac..88e612f8 100644
--- a/src/Plugin/BlockVariantInterface.php
+++ b/src/Plugin/BlockVariantInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Plugin;
 
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Display\VariantInterface;
 
 /**
@@ -66,7 +67,7 @@ interface BlockVariantInterface extends VariantInterface {
    * @param string $block_id
    *   The block ID.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    *   The block plugin.
    */
   public function getBlock($block_id);
diff --git a/src/Plugin/BlockVariantTrait.php b/src/Plugin/BlockVariantTrait.php
index f368f2c7..5815833f 100644
--- a/src/Plugin/BlockVariantTrait.php
+++ b/src/Plugin/BlockVariantTrait.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\ctools\Plugin;
 
+use Drupal\Core\Block\BlockManager;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Block\BlockPluginInterface;
+use Drupal\Component\Uuid\UuidInterface;
 use Drupal\ctools\Event\BlockVariantEvent;
 use Drupal\ctools\Event\BlockVariantEvents;
 
@@ -13,21 +17,21 @@ trait BlockVariantTrait {
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManager
+   * @var BlockManager
    */
   protected $blockManager;
 
   /**
    * The plugin collection that holds the block plugins.
    *
-   * @var \Drupal\ctools\Plugin\BlockPluginCollection
+   * @var BlockPluginCollection
    */
   protected $blockPluginCollection;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -117,7 +121,7 @@ trait BlockVariantTrait {
   /**
    * Gets the block plugin manager.
    *
-   * @return \Drupal\Core\Block\BlockManager
+   * @return BlockManager
    *   The block plugin manager.
    */
   protected function getBlockManager() {
@@ -130,7 +134,7 @@ trait BlockVariantTrait {
   /**
    * Returns the block plugins used for this display variant.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface[]|\Drupal\ctools\Plugin\BlockPluginCollection
+   * @return BlockPluginInterface[]|BlockPluginCollection
    *   An array or collection of configured block plugins.
    */
   protected function getBlockCollection() {
@@ -143,7 +147,7 @@ trait BlockVariantTrait {
   /**
    * Gets the event dispatcher.
    *
-   * @return \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @return EventDispatcherInterface
    */
   protected function eventDispatcher() {
     if (!$this->eventDispatcher) {
@@ -155,7 +159,7 @@ trait BlockVariantTrait {
   /**
    * Returns the UUID generator.
    *
-   * @return \Drupal\Component\Uuid\UuidInterface
+   * @return UuidInterface
    */
   abstract protected function uuidGenerator();
 
diff --git a/src/Plugin/Condition/EntityBundle.php b/src/Plugin/Condition/EntityBundle.php
index e78403cc..9ce7b03d 100644
--- a/src/Plugin/Condition/EntityBundle.php
+++ b/src/Plugin/Condition/EntityBundle.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ctools\Plugin\Condition;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Core\Condition\ConditionPluginBase;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -25,21 +27,21 @@ class EntityBundle extends ConditionPluginBase implements ConstraintConditionInt
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeInterface|null
+   * @var EntityTypeInterface|null
    */
   protected $bundleOf;
 
   /**
    * Creates a new EntityBundle instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    * @param array $configuration
    *   The plugin configuration, i.e. an array with configuration values keyed
@@ -103,7 +105,7 @@ class EntityBundle extends ConditionPluginBase implements ConstraintConditionInt
     if (empty($this->configuration['bundles']) && !$this->isNegated()) {
       return TRUE;
     }
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getContextValue($this->bundleOf->id());
 
     if (!$entity instanceof ContentEntityInterface) {
@@ -137,7 +139,7 @@ class EntityBundle extends ConditionPluginBase implements ConstraintConditionInt
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    */
   public function applyConstraints(array $contexts = []) {
     // Nullify any bundle constraints on contexts we care about.
@@ -152,7 +154,7 @@ class EntityBundle extends ConditionPluginBase implements ConstraintConditionInt
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    */
   public function removeConstraints(array $contexts = []) {
     // Reset the bundle constraint for any context we've mapped.
diff --git a/src/Plugin/Condition/NodeType.php b/src/Plugin/Condition/NodeType.php
index 1d28606b..302dac8c 100644
--- a/src/Plugin/Condition/NodeType.php
+++ b/src/Plugin/Condition/NodeType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Plugin\Condition;
 
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\node\Plugin\Condition\NodeType as CoreNodeType;
 use Drupal\ctools\ConstraintConditionInterface;
 
@@ -11,7 +12,7 @@ class NodeType extends CoreNodeType implements ConstraintConditionInterface {
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    */
   public function applyConstraints(array $contexts = []) {
     // Nullify any bundle constraints on contexts we care about.
@@ -28,7 +29,7 @@ class NodeType extends CoreNodeType implements ConstraintConditionInterface {
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    */
   public function removeConstraints(array $contexts = []) {
     // Reset the bundle constraint for any context we've mapped.
diff --git a/src/Plugin/Deriver/EntityBundle.php b/src/Plugin/Deriver/EntityBundle.php
index f33fe716..057fd0ce 100644
--- a/src/Plugin/Deriver/EntityBundle.php
+++ b/src/Plugin/Deriver/EntityBundle.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ctools\Plugin\Deriver;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Plugin\Context\EntityContextDefinition;
 
 /**
@@ -35,10 +37,10 @@ class EntityBundle extends EntityDeriverBase {
   /**
    * Provides the bundle label with a fallback when not defined.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type we are looking the bundle label for.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The entity bundle label or a fallback label.
    */
   protected function getEntityBundleLabel($entity_type) {
diff --git a/src/Plugin/Deriver/EntityDeriverBase.php b/src/Plugin/Deriver/EntityDeriverBase.php
index 8ef760d8..d9eb5318 100644
--- a/src/Plugin/Deriver/EntityDeriverBase.php
+++ b/src/Plugin/Deriver/EntityDeriverBase.php
@@ -21,34 +21,34 @@ abstract class EntityDeriverBase extends DeriverBase implements ContainerDeriver
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type repository.
    *
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface
+   * @var EntityTypeRepositoryInterface
    */
   protected $entityTypeRepository;
 
   /**
    * Constructs new EntityViewDeriver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation, EntityFieldManagerInterface $entity_field_manager, EntityTypeRepositoryInterface $entity_type_repository) {
diff --git a/src/Plugin/Deriver/TypedDataPropertyDeriverBase.php b/src/Plugin/Deriver/TypedDataPropertyDeriverBase.php
index e4125651..61c95abf 100644
--- a/src/Plugin/Deriver/TypedDataPropertyDeriverBase.php
+++ b/src/Plugin/Deriver/TypedDataPropertyDeriverBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Plugin\Deriver;
 
+use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -21,7 +22,7 @@ abstract class TypedDataPropertyDeriverBase extends DeriverBase implements Conta
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
@@ -35,9 +36,9 @@ abstract class TypedDataPropertyDeriverBase extends DeriverBase implements Conta
   /**
    * TypedDataPropertyDeriverBase constructor.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed data manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(TypedDataManagerInterface $typed_data_manager, TranslationInterface $string_translation) {
@@ -61,7 +62,7 @@ abstract class TypedDataPropertyDeriverBase extends DeriverBase implements Conta
   public function getDerivativeDefinitions($base_plugin_definition) {
     foreach ($this->typedDataManager->getDefinitions() as $data_type_id => $data_type_definition) {
       if (is_subclass_of($data_type_definition['class'], ComplexDataInterface::class, TRUE)) {
-        /** @var \Drupal\Core\TypedData\ComplexDataDefinitionInterface $base_definition */
+        /** @var ComplexDataDefinitionInterface $base_definition */
         $base_definition = $this->typedDataManager->createDataDefinition($data_type_id);
         foreach ($base_definition->getPropertyDefinitions() as $property_name => $property_definition) {
           if ($property_definition instanceof BaseFieldDefinition || $property_definition instanceof FieldConfig) {
@@ -100,11 +101,11 @@ abstract class TypedDataPropertyDeriverBase extends DeriverBase implements Conta
    *   The plugin id of the data type.
    * @param mixed $data_type_definition
    *   The plugin definition of the data type.
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $base_definition
+   * @param DataDefinitionInterface $base_definition
    *   The data type definition of a complex data object.
    * @param string $property_name
    *   The name of the property.
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $property_definition
+   * @param DataDefinitionInterface $property_definition
    *   The property definition.
    */
   abstract protected function generateDerivativeDefinition($base_plugin_definition, $data_type_id, $data_type_definition, DataDefinitionInterface $base_definition, $property_name, DataDefinitionInterface $property_definition);
diff --git a/src/Plugin/Deriver/TypedDataRelationshipDeriver.php b/src/Plugin/Deriver/TypedDataRelationshipDeriver.php
index 174099a5..a9b1ce25 100644
--- a/src/Plugin/Deriver/TypedDataRelationshipDeriver.php
+++ b/src/Plugin/Deriver/TypedDataRelationshipDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Plugin\Deriver;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\Plugin\Context\EntityContextDefinition;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -60,7 +61,7 @@ class TypedDataRelationshipDeriver extends TypedDataPropertyDeriverBase implemen
       // We should only end up in here on entity bundles.
       $derivative = $this->derivatives[$base_data_type . ':' . $property_name];
       // Update label.
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $label */
+      /** @var TranslatableMarkup $label */
       $label = $derivative['label'];
       list(,, $argument_name) = explode(':', $data_type_id);
       $arguments = $label->getArguments();
diff --git a/src/Plugin/DisplayVariant/BlockDisplayVariant.php b/src/Plugin/DisplayVariant/BlockDisplayVariant.php
index 59002b91..bcff1a44 100644
--- a/src/Plugin/DisplayVariant/BlockDisplayVariant.php
+++ b/src/Plugin/DisplayVariant/BlockDisplayVariant.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Plugin\DisplayVariant;
 
+use Drupal\Component\Plugin\Context\ContextInterface;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Condition\ConditionManager;
@@ -27,28 +28,28 @@ abstract class BlockDisplayVariant extends VariantBase implements ContextAwareVa
   /**
    * The context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * The UUID generator.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
@@ -57,7 +58,7 @@ abstract class BlockDisplayVariant extends VariantBase implements ContextAwareVa
    *
    * This is only used on runtime, and is not stored.
    *
-   * @var \Drupal\Component\Plugin\Context\ContextInterface[]
+   * @var ContextInterface[]
    */
   protected $contexts = [];
 
@@ -70,17 +71,17 @@ abstract class BlockDisplayVariant extends VariantBase implements ContextAwareVa
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The context handler.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param UuidInterface $uuid_generator
    *   The UUID generator.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ContextHandlerInterface $context_handler, AccountInterface $account, UuidInterface $uuid_generator, Token $token, BlockManagerInterface $block_manager, ConditionManager $condition_manager) {
@@ -157,7 +158,7 @@ abstract class BlockDisplayVariant extends VariantBase implements ContextAwareVa
   /**
    * Gets the contexts.
    *
-   * @return \Drupal\Component\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    *   An array of set contexts, keyed by context name.
    */
   public function getContexts() {
@@ -167,7 +168,7 @@ abstract class BlockDisplayVariant extends VariantBase implements ContextAwareVa
   /**
    * Sets the contexts.
    *
-   * @param \Drupal\Component\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    *   An array of contexts, keyed by context name.
    *
    * @return $this
diff --git a/src/Plugin/Relationship/TypedDataRelationship.php b/src/Plugin/Relationship/TypedDataRelationship.php
index a117afc7..800ceb50 100644
--- a/src/Plugin/Relationship/TypedDataRelationship.php
+++ b/src/Plugin/Relationship/TypedDataRelationship.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Plugin\Relationship;
 
+use Drupal\Core\TypedData\ComplexDataInterface;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Plugin\Context\Context;
 use Drupal\Core\Plugin\Context\ContextDefinition;
@@ -54,7 +55,7 @@ class TypedDataRelationship extends RelationshipBase {
 
 
   protected function getData(ContextInterface $context) {
-    /** @var \Drupal\Core\TypedData\ComplexDataInterface $base */
+    /** @var ComplexDataInterface $base */
     $base = $context->getContextValue();
     $name = $this->getPluginDefinition()['property_name'];
     $data = $base->get($name);
@@ -76,7 +77,7 @@ class TypedDataRelationship extends RelationshipBase {
 
   public function getRelationshipValue() {
     $property = $this->getMainPropertyName();
-    /** @var \Drupal\Core\TypedData\ComplexDataInterface $data */
+    /** @var ComplexDataInterface $data */
     $data = $this->getRelationship()->getContextData();
     $data->get($property)->getValue();
   }
diff --git a/src/Plugin/RelationshipInterface.php b/src/Plugin/RelationshipInterface.php
index 0372a0ee..242e473b 100644
--- a/src/Plugin/RelationshipInterface.php
+++ b/src/Plugin/RelationshipInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Plugin;
 
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\Core\Plugin\ContextAwarePluginInterface;
 
@@ -13,7 +14,7 @@ interface RelationshipInterface extends ContextAwarePluginInterface, DerivativeI
   /**
    * Generates a context based on this plugin's configuration.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface
+   * @return ContextInterface
    */
   public function getRelationship();
 
diff --git a/src/Plugin/RelationshipManager.php b/src/Plugin/RelationshipManager.php
index b60462f3..60d0ea16 100644
--- a/src/Plugin/RelationshipManager.php
+++ b/src/Plugin/RelationshipManager.php
@@ -20,9 +20,9 @@ class RelationshipManager extends DefaultPluginManager implements RelationshipMa
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/VariantCollectionInterface.php b/src/Plugin/VariantCollectionInterface.php
index 5865e995..96cfc354 100644
--- a/src/Plugin/VariantCollectionInterface.php
+++ b/src/Plugin/VariantCollectionInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Plugin;
 
+use Drupal\Core\Display\VariantInterface;
 /**
  * Provides an interface for objects that have variants e.g. Pages.
  */
@@ -24,7 +25,7 @@ interface VariantCollectionInterface {
    * @param string $variant_id
    *   The variant ID.
    *
-   * @return \Drupal\Core\Display\VariantInterface
+   * @return VariantInterface
    *   The variant object.
    */
   public function getVariant($variant_id);
@@ -42,7 +43,7 @@ interface VariantCollectionInterface {
   /**
    * Returns the variants available for the entity.
    *
-   * @return \Drupal\Core\Display\VariantInterface[]
+   * @return VariantInterface[]
    *   An array of the variants.
    */
   public function getVariants();
diff --git a/src/Plugin/VariantCollectionTrait.php b/src/Plugin/VariantCollectionTrait.php
index 98a6f9a6..4dfc8363 100644
--- a/src/Plugin/VariantCollectionTrait.php
+++ b/src/Plugin/VariantCollectionTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Plugin;
 
+use Drupal\Component\Uuid\UuidInterface;
 /**
  * Provides methods for VariantCollectionInterface.
  */
@@ -10,7 +11,7 @@ trait VariantCollectionTrait {
   /**
    * The plugin collection that holds the variants.
    *
-   * @var \Drupal\ctools\Plugin\VariantPluginCollection
+   * @var VariantPluginCollection
    */
   protected $variantCollection;
 
@@ -60,7 +61,7 @@ trait VariantCollectionTrait {
   /**
    * Returns the UUID generator.
    *
-   * @return \Drupal\Component\Uuid\UuidInterface
+   * @return UuidInterface
    */
   abstract protected function uuidGenerator();
 
diff --git a/src/Plugin/VariantPluginCollection.php b/src/Plugin/VariantPluginCollection.php
index a56693ff..efd03489 100644
--- a/src/Plugin/VariantPluginCollection.php
+++ b/src/Plugin/VariantPluginCollection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Plugin;
 
+use Drupal\Core\Display\VariantInterface;
 use Drupal\Core\Plugin\DefaultLazyPluginCollection;
 
 /**
@@ -12,7 +13,7 @@ class VariantPluginCollection extends DefaultLazyPluginCollection {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Display\VariantInterface
+   * @return VariantInterface
    */
   public function &get($instance_id) {
     return parent::get($instance_id);
diff --git a/src/Routing/Enhancer/WizardEnhancer.php b/src/Routing/Enhancer/WizardEnhancer.php
index e16f6d26..3809ead9 100644
--- a/src/Routing/Enhancer/WizardEnhancer.php
+++ b/src/Routing/Enhancer/WizardEnhancer.php
@@ -34,7 +34,7 @@ class WizardEnhancer implements EnhancerInterface {
   /**
    * Returns if current route use ctools default parameters.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check.
    *
    * @return bool
diff --git a/src/SerializableTempstoreFactory.php b/src/SerializableTempstoreFactory.php
index c3e283b9..87d8aba5 100644
--- a/src/SerializableTempstoreFactory.php
+++ b/src/SerializableTempstoreFactory.php
@@ -16,22 +16,22 @@ class SerializableTempstoreFactory extends SharedTempStoreFactory {
   /**
    * The current logged user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Constructs a Drupal\Core\TempStore\SharedTempStoreFactory object.
    *
-   * @param \Drupal\Core\KeyValueStore\KeyValueExpirableFactoryInterface $storage_factory
+   * @param KeyValueExpirableFactoryInterface $storage_factory
    *   The key/value store factory.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock_backend
+   * @param LockBackendInterface $lock_backend
    *   The lock object used for this data.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    * @param int $expire
    *   The time to live for items, in seconds.
-   * @param \Drupal\Core\Session\AccountProxyInterface|null $current_user
+   * @param AccountProxyInterface|null $current_user
    *   The current logged user.
    */
   public function __construct(KeyValueExpirableFactoryInterface $storage_factory, LockBackendInterface $lock_backend, RequestStack $request_stack, $expire = 604800, AccountProxyInterface $current_user = NULL) {
diff --git a/src/Testing/EntityCreationTrait.php b/src/Testing/EntityCreationTrait.php
index 2f2927bd..75ddf694 100644
--- a/src/Testing/EntityCreationTrait.php
+++ b/src/Testing/EntityCreationTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ctools\Testing;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Render\FormattableMarkup;
 
 
@@ -10,7 +12,7 @@ trait EntityCreationTrait {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -23,7 +25,7 @@ trait EntityCreationTrait {
    *   An array of settings to change from the defaults.
    *   Example: 'type' => 'foo'.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Created entity.
    */
   protected function createEntity($entity_type, array $values = []) {
@@ -32,7 +34,7 @@ trait EntityCreationTrait {
     $status = $entity->save();
     \Drupal::service('router.builder')->rebuild();
 
-    if ($this instanceof \PHPUnit_Framework_TestCase) {
+    if ($this instanceof \PHPUnit\Framework\TestCase) {
       $this->assertSame(SAVED_NEW, $status, (new FormattableMarkup('Created entity %id of type %type.', ['%id' => $entity->id(), '%type' => $entity_type]))->__toString());
     }
     else {
@@ -43,7 +45,7 @@ trait EntityCreationTrait {
   }
 
   /**
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   protected function getEntityTypeManager() {
     if (!isset($this->entityTypeManager)) {
diff --git a/src/TypedDataResolver.php b/src/TypedDataResolver.php
index d8fb9e6e..2f06e1f4 100644
--- a/src/TypedDataResolver.php
+++ b/src/TypedDataResolver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ctools;
 
+use Drupal\Core\TypedData\ComplexDataInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Plugin\Context\Context;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\Plugin\Context\ContextInterface;
@@ -20,21 +22,21 @@ class TypedDataResolver {
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $manager;
 
   /**
    * The string translation service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $translation;
 
   /**
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $manager
+   * @param TypedDataManagerInterface $manager
    *   The typed data manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation service.
    */
   public function __construct(TypedDataManagerInterface $manager, TranslationInterface $translation) {
@@ -51,10 +53,10 @@ class TypedDataResolver {
    *
    * @param string $property_path
    *   The name of the property.
-   * @param \Drupal\Core\Plugin\Context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context from which we will extract values if available.
    *
-   * @return \Drupal\Core\Plugin\Context\Context
+   * @return Context
    *   A context object that represents the definition & value of the property.
    *
    * @throws \Exception
@@ -63,7 +65,7 @@ class TypedDataResolver {
     $value = NULL;
     $data_definition = NULL;
     if ($context->hasContextValue()) {
-      /** @var \Drupal\Core\TypedData\ComplexDataInterface $data */
+      /** @var ComplexDataInterface $data */
       $data = $context->getContextData();
       foreach (explode(':', $property_path) as $name) {
 
@@ -94,7 +96,7 @@ class TypedDataResolver {
       $data_definition = $data instanceof DataReferenceInterface ? $data->getDataDefinition()->getTargetDefinition() : $data->getDataDefinition();
     }
     else {
-      /** @var \Drupal\Core\TypedData\ComplexDataDefinitionInterface $data_definition */
+      /** @var ComplexDataDefinitionInterface $data_definition */
       $data_definition = $context->getContextDefinition()->getDataDefinition();
       foreach (explode(':', $property_path) as $name) {
 
@@ -149,13 +151,13 @@ class TypedDataResolver {
    *
    * @param $token
    *   A ":" delimited set of tokens representing
-   * @param \Drupal\Core\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    *   The array of available contexts.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface
+   * @return ContextInterface
    *   The requested token as a full Context object.
    *
-   * @throws \Drupal\ctools\ContextNotFoundException
+   * @throws ContextNotFoundException
    */
   public function convertTokenToContext($token, $contexts) {
     // If the requested token is already a context, just return it.
@@ -179,10 +181,10 @@ class TypedDataResolver {
    *
    * @param string $token
    *   The token related to a context in the contexts array.
-   * @param \Drupal\Core\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    *   An array of contexts from which to extract our token's label.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The administrative label of $token.
    */
   public function getLabelByToken($token, $contexts) {
@@ -196,7 +198,7 @@ class TypedDataResolver {
   /**
    * Extracts an array of tokens and labels.
    *
-   * @param \Drupal\Core\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    *   The array of contexts with which we are currently dealing.
    *
    * @return array
@@ -218,7 +220,7 @@ class TypedDataResolver {
   /**
    * Returns tokens for a complex data definition.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataDefinitionInterface $complex_data_definition
+   * @param ComplexDataDefinitionInterface $complex_data_definition
    *
    * @return array
    *   An array of token keys and corresponding labels.
diff --git a/src/Wizard/EntityFormWizardBase.php b/src/Wizard/EntityFormWizardBase.php
index 2f47cbe4..bbc58beb 100644
--- a/src/Wizard/EntityFormWizardBase.php
+++ b/src/Wizard/EntityFormWizardBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Wizard;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBuilderInterface;
@@ -19,21 +20,21 @@ abstract class EntityFormWizardBase extends FormWizardBase implements EntityForm
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   Tempstore Factory for keeping track of values in each step of the
    *   wizard.
-   * @param \Drupal\Core\Form\FormBuilderInterface $builder
+   * @param FormBuilderInterface $builder
    *   The Form Builder.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param $tempstore_id
    *   The shared temp store factory collection name.
@@ -85,7 +86,7 @@ abstract class EntityFormWizardBase extends FormWizardBase implements EntityForm
       $values[$this->getEntityType()] = $entity;
     }
     $event = new WizardEvent($this, $values);
-    $this->dispatcher->dispatch(FormWizardInterface::LOAD_VALUES, $event);
+    $this->dispatcher->dispatch($event, FormWizardInterface::LOAD_VALUES);
     return $event->getValues();
   }
 
@@ -94,7 +95,7 @@ abstract class EntityFormWizardBase extends FormWizardBase implements EntityForm
    */
   public function finish(array &$form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $cached_values[$this->getEntityType()];
     $entity->set('id', $cached_values['id']);
     $entity->set('label', $cached_values['label']);
@@ -121,7 +122,7 @@ abstract class EntityFormWizardBase extends FormWizardBase implements EntityForm
    * Helper function for generating label and id form elements.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
diff --git a/src/Wizard/FormWizardBase.php b/src/Wizard/FormWizardBase.php
index 496d2101..73be4376 100644
--- a/src/Wizard/FormWizardBase.php
+++ b/src/Wizard/FormWizardBase.php
@@ -25,28 +25,28 @@ abstract class FormWizardBase extends FormBase implements FormWizardInterface {
   /**
    * Tempstore Factory for keeping track of values in each step of the wizard.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
   /**
    * The Form Builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $builder;
 
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
@@ -72,14 +72,14 @@ abstract class FormWizardBase extends FormBase implements FormWizardInterface {
   protected $step;
 
   /**
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   Tempstore Factory for keeping track of values in each step of the
    *   wizard.
-   * @param \Drupal\Core\Form\FormBuilderInterface $builder
+   * @param FormBuilderInterface $builder
    *   The Form Builder.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    * @param $tempstore_id
    *   The shared temp store factory collection name.
@@ -117,7 +117,7 @@ abstract class FormWizardBase extends FormBase implements FormWizardInterface {
   public function initValues() {
     $values = [];
     $event = new WizardEvent($this, $values);
-    $this->dispatcher->dispatch(FormWizardInterface::LOAD_VALUES, $event);
+    $this->dispatcher->dispatch($event, FormWizardInterface::LOAD_VALUES);
     return $event->getValues();
   }
 
@@ -325,7 +325,7 @@ abstract class FormWizardBase extends FormBase implements FormWizardInterface {
    * Helper function for generating default form elements.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -344,9 +344,9 @@ abstract class FormWizardBase extends FormBase implements FormWizardInterface {
   /**
    * Generates action elements for navigating between the operation steps.
    *
-   * @param \Drupal\Core\Form\FormInterface $form_object
+   * @param FormInterface $form_object
    *   The current operation form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
diff --git a/src/Wizard/FormWizardInterface.php b/src/Wizard/FormWizardInterface.php
index fad81cc4..c43dd57d 100644
--- a/src/Wizard/FormWizardInterface.php
+++ b/src/Wizard/FormWizardInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Wizard;
 
+use Drupal\Core\TempStore\SharedTempStore;
 use Drupal\Core\Form\FormInterface;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -39,7 +40,7 @@ interface FormWizardInterface extends FormInterface {
   /**
    * The active SharedTempStore for this wizard.
    *
-   * @return \Drupal\Core\TempStore\SharedTempStore
+   * @return SharedTempStore
    */
   public function getTempstore();
 
@@ -141,7 +142,7 @@ interface FormWizardInterface extends FormInterface {
    *
    * @param array $form
    *   Drupal form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The initial form state before validation or submission of the steps.
    */
   public function populateCachedValues(array &$form, FormStateInterface $form_state);
@@ -153,7 +154,7 @@ interface FormWizardInterface extends FormInterface {
    *
    * @param array $form
    *   Drupal form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state of the wizard. This will not contain values from
    *   the current step since the previous button does not actually submit
    *   those values.
@@ -168,7 +169,7 @@ interface FormWizardInterface extends FormInterface {
    *
    * @param array $form
    *   Drupal form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The final form state of the wizard.
    */
   public function finish(array &$form, FormStateInterface $form_state);
diff --git a/src/Wizard/WizardFactory.php b/src/Wizard/WizardFactory.php
index 847b1ae9..c0ad7f62 100644
--- a/src/Wizard/WizardFactory.php
+++ b/src/Wizard/WizardFactory.php
@@ -15,32 +15,32 @@ class WizardFactory implements WizardFactoryInterface {
   /**
    * The Form Builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $builder;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * The object renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The construct method.
    *
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The object renderer.
    */
   public function __construct(FormBuilderInterface $form_builder, EventDispatcherInterface $event_dispatcher, RendererInterface $renderer) {
@@ -78,7 +78,7 @@ class WizardFactory implements WizardFactoryInterface {
    * @param array $parameters
    *   The array of parameters specific to this wizard.
    *
-   * @return \Drupal\ctools\Wizard\FormWizardInterface
+   * @return FormWizardInterface
    *   Return form Wizard.
    */
   public function createWizard($class, array $parameters) {
@@ -101,14 +101,14 @@ class WizardFactory implements WizardFactoryInterface {
   /**
    * Get the wizard form state.
    *
-   * @param \Drupal\ctools\Wizard\FormWizardInterface $wizard
+   * @param FormWizardInterface $wizard
    *   The form wizard.
    * @param array $parameters
    *   The array of parameters specific to this wizard.
    * @param bool $ajax
    *   Is ajax or not.
    *
-   * @return \Drupal\Core\Form\FormState
+   * @return FormState
    *   Return the form state.
    */
   public function getFormState(FormWizardInterface $wizard, array $parameters, $ajax = FALSE) {
diff --git a/src/Wizard/WizardFactoryInterface.php b/src/Wizard/WizardFactoryInterface.php
index d44c0936..f4a98adb 100644
--- a/src/Wizard/WizardFactoryInterface.php
+++ b/src/Wizard/WizardFactoryInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools\Wizard;
 
+use Drupal\Core\Form\FormState;
 /**
  * Provide the WizardFactory.
  */
@@ -30,7 +31,7 @@ interface WizardFactoryInterface {
    * @param array $parameters
    *   The array of parameters specific to this wizard.
    *
-   * @return \Drupal\ctools\Wizard\FormWizardInterface
+   * @return FormWizardInterface
    *   Return the wizard interface.
    */
   public function createWizard($class, array $parameters);
@@ -38,14 +39,14 @@ interface WizardFactoryInterface {
   /**
    * Get the wizard form state.
    *
-   * @param \Drupal\ctools\Wizard\FormWizardInterface $wizard
+   * @param FormWizardInterface $wizard
    *   The form wizard.
    * @param array $parameters
    *   The array of parameters specific to this wizard.
    * @param bool $ajax
    *   Use or not ajax.
    *
-   * @return \Drupal\Core\Form\FormState
+   * @return FormState
    *   Return the state form.
    */
   public function getFormState(FormWizardInterface $wizard, array $parameters, $ajax = FALSE);
diff --git a/tests/modules/ctools_wizard_test/src/ExampleConfigEntityListBuilder.php b/tests/modules/ctools_wizard_test/src/ExampleConfigEntityListBuilder.php
index b5b8bce8..fe0c8475 100644
--- a/tests/modules/ctools_wizard_test/src/ExampleConfigEntityListBuilder.php
+++ b/tests/modules/ctools_wizard_test/src/ExampleConfigEntityListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ctools_wizard_test;
 
+use Drupal\Core\Url;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -36,7 +37,7 @@ class ExampleConfigEntityListBuilder extends ConfigEntityListBuilder {
     $operations = parent::getOperations($entity);
 
     if (!empty($operations['edit'])) {
-      /** @var \Drupal\Core\Url $edit */
+      /** @var Url $edit */
       $edit = $operations['edit']['url'];
       $edit->setRouteParameters([
         'machine_name' => $entity->id(),
diff --git a/tests/modules/ctools_wizard_test/src/Form/ExampleConfigEntityExternalForm.php b/tests/modules/ctools_wizard_test/src/Form/ExampleConfigEntityExternalForm.php
index d82b80c4..c37b3554 100644
--- a/tests/modules/ctools_wizard_test/src/Form/ExampleConfigEntityExternalForm.php
+++ b/tests/modules/ctools_wizard_test/src/Form/ExampleConfigEntityExternalForm.php
@@ -15,7 +15,7 @@ class ExampleConfigEntityExternalForm extends FormBase {
   /**
    * Tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
diff --git a/tests/modules/ctools_wizard_test/src/Form/OneForm.php b/tests/modules/ctools_wizard_test/src/Form/OneForm.php
index a85f4594..8aa7f3d0 100644
--- a/tests/modules/ctools_wizard_test/src/Form/OneForm.php
+++ b/tests/modules/ctools_wizard_test/src/Form/OneForm.php
@@ -25,7 +25,7 @@ class OneForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -51,7 +51,7 @@ class OneForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/tests/modules/ctools_wizard_test/src/Form/TwoForm.php b/tests/modules/ctools_wizard_test/src/Form/TwoForm.php
index 2f8f3f55..1e89af03 100644
--- a/tests/modules/ctools_wizard_test/src/Form/TwoForm.php
+++ b/tests/modules/ctools_wizard_test/src/Form/TwoForm.php
@@ -25,7 +25,7 @@ class TwoForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -51,7 +51,7 @@ class TwoForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/tests/src/Kernel/BlockDisplayVariantTest.php b/tests/src/Kernel/BlockDisplayVariantTest.php
index e0f8aab9..734653c0 100644
--- a/tests/src/Kernel/BlockDisplayVariantTest.php
+++ b/tests/src/Kernel/BlockDisplayVariantTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ctools\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\ctools\Event\BlockVariantEvent;
 use Drupal\ctools\Event\BlockVariantEvents;
 use Drupal\ctools_block_display_test\Plugin\DisplayVariant\BlockDisplayVariant;
@@ -15,6 +16,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class BlockDisplayVariantTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -24,7 +26,7 @@ class BlockDisplayVariantTest extends KernelTestBase {
    * Tests that events are fired when manipulating a block variant.
    */
   public function testBlockDisplayVariantEvents() {
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = $this->prophesize(EventDispatcherInterface::class);
     // Swap in a mock event dispatcher so we can spy on method calls.
     $this->container->set('event_dispatcher', $event_dispatcher->reveal());
@@ -38,11 +40,11 @@ class BlockDisplayVariantTest extends KernelTestBase {
     // Set up the expected calls to the event dispatcher.
     $event = Argument::type(BlockVariantEvent::class);
 
-    $event_dispatcher->dispatch(BlockVariantEvents::ADD_BLOCK, $event)
+    $event_dispatcher->dispatch($event, BlockVariantEvents::ADD_BLOCK)
       ->shouldBeCalled();
-    $event_dispatcher->dispatch(BlockVariantEvents::UPDATE_BLOCK, $event)
+    $event_dispatcher->dispatch($event, BlockVariantEvents::UPDATE_BLOCK)
       ->shouldBeCalled();
-    $event_dispatcher->dispatch(BlockVariantEvents::DELETE_BLOCK, $event)
+    $event_dispatcher->dispatch($event, BlockVariantEvents::DELETE_BLOCK)
       ->shouldBeCalled();
 
     $block_id = $variant->addBlock(['id' => 'system_powered_by_block']);
diff --git a/tests/src/Kernel/Plugin/Block/EntityViewTest.php b/tests/src/Kernel/Plugin/Block/EntityViewTest.php
index 9ef8d172..10263360 100644
--- a/tests/src/Kernel/Plugin/Block/EntityViewTest.php
+++ b/tests/src/Kernel/Plugin/Block/EntityViewTest.php
@@ -42,7 +42,7 @@ class EntityViewTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['filter']);
diff --git a/tests/src/Kernel/RelationshipsTestBase.php b/tests/src/Kernel/RelationshipsTestBase.php
index 97191d0f..f6af7d32 100644
--- a/tests/src/Kernel/RelationshipsTestBase.php
+++ b/tests/src/Kernel/RelationshipsTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\ctools\Kernel;
 
+use Drupal\ctools\Plugin\RelationshipManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\ctools\Testing\EntityCreationTrait;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -10,12 +12,12 @@ abstract class RelationshipsTestBase extends KernelTestBase {
   use EntityCreationTrait;
 
   /**
-   * @var \Drupal\ctools\Plugin\RelationshipManagerInterface
+   * @var RelationshipManagerInterface
    */
   protected $relationshipManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities = [];
 
@@ -37,7 +39,7 @@ abstract class RelationshipsTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', ['sequences']);
diff --git a/tests/src/Kernel/SerializableTempstoreTest.php b/tests/src/Kernel/SerializableTempstoreTest.php
index 00090c4f..f1e61b58 100644
--- a/tests/src/Kernel/SerializableTempstoreTest.php
+++ b/tests/src/Kernel/SerializableTempstoreTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ctools\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\ctools\SerializableTempstore;
 use Drupal\KernelTests\KernelTestBase;
 use Symfony\Component\HttpFoundation\Request;
@@ -13,6 +14,7 @@ use Symfony\Component\HttpFoundation\Request;
  */
 class SerializableTempstoreTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -21,7 +23,7 @@ class SerializableTempstoreTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('system', ['key_value_expire']);
   }
@@ -43,8 +45,7 @@ class SerializableTempstoreTest extends KernelTestBase {
     $this->container->get('request_stack')->push($request->reveal());
 
     $this->assertInstanceOf(SerializableTempstore::class, $store);
-    /** @var \Drupal\ctools\SerializableTempstore $store */
-
+    /** @var SerializableTempstore $store */
     $store = serialize($store);
     $this->assertSame('string', gettype($store));
     $this->assertNotEmpty($store, 'The tempstore was serialized.');
diff --git a/tests/src/Kernel/TypedDataEntityRelationshipPluginTest.php b/tests/src/Kernel/TypedDataEntityRelationshipPluginTest.php
index a1724eea..dcf0c069 100644
--- a/tests/src/Kernel/TypedDataEntityRelationshipPluginTest.php
+++ b/tests/src/Kernel/TypedDataEntityRelationshipPluginTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ctools\Kernel;
 
+use Drupal\ctools\Plugin\RelationshipInterface;
 use Drupal\node\Entity\NodeType;
 use Drupal\user\Entity\User;
 
@@ -15,11 +16,11 @@ class TypedDataEntityRelationshipPluginTest extends RelationshipsTestBase {
    * @covers ::getName
    */
   public function testRelationshipName() {
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $nid_plugin */
+    /** @var RelationshipInterface $nid_plugin */
     $type_plugin = $this->relationshipManager->createInstance('typed_data_entity_relationship:entity:node:type');
     $this->assertSame('type', $type_plugin->getName());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $uuid_plugin */
+    /** @var RelationshipInterface $uuid_plugin */
     $uid_plugin = $this->relationshipManager->createInstance('typed_data_entity_relationship:entity:node:uid');
     $this->assertSame('uid', $uid_plugin->getName());
   }
@@ -28,21 +29,21 @@ class TypedDataEntityRelationshipPluginTest extends RelationshipsTestBase {
    * @covers ::getRelationship
    */
   public function testRelationship() {
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $type_plugin */
+    /** @var RelationshipInterface $type_plugin */
     $type_plugin = $this->relationshipManager->createInstance('typed_data_entity_relationship:entity:node:type');
     $type_plugin->setContextValue('base', $this->entities['node1']);
     $relationship = $type_plugin->getRelationship();
     $this->assertTrue($relationship->getContextValue() instanceof NodeType);
     $this->assertSame('entity:node_type', $relationship->getContextDefinition()->getDataType());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $uid_plugin */
+    /** @var RelationshipInterface $uid_plugin */
     $uid_plugin = $this->relationshipManager->createInstance('typed_data_entity_relationship:entity:node:uid');
     $uid_plugin->setContextValue('base', $this->entities['node3']);
     $relationship = $uid_plugin->getRelationship();
     $this->assertTrue($relationship->getContextValue() instanceof User);
     $this->assertSame('entity:user', $relationship->getContextDefinition()->getDataType());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $uid_plugin */
+    /** @var RelationshipInterface $uid_plugin */
     $uid_plugin = $this->relationshipManager->createInstance('typed_data_entity_relationship:entity:node:uid');
     $uid_plugin->setContextValue('base', $this->entities['node4']);
     $relationship = $uid_plugin->getRelationship();
diff --git a/tests/src/Kernel/TypedDataLanguageRelationshipPluginTest.php b/tests/src/Kernel/TypedDataLanguageRelationshipPluginTest.php
index 3e945315..6085a0b5 100644
--- a/tests/src/Kernel/TypedDataLanguageRelationshipPluginTest.php
+++ b/tests/src/Kernel/TypedDataLanguageRelationshipPluginTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ctools\Kernel;
 
+use Drupal\ctools\Plugin\RelationshipInterface;
 use Drupal\Core\Language\LanguageInterface;
 
 /**
@@ -14,7 +15,7 @@ class TypedDataLanguageRelationshipPluginTest extends RelationshipsTestBase {
    * @covers ::getName
    */
   public function testRelationshipName() {
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $langcode_plugin */
+    /** @var RelationshipInterface $langcode_plugin */
     $langcode_plugin = $this->relationshipManager->createInstance('typed_data_language_relationship:entity:node:langcode');
     $this->assertSame('langcode', $langcode_plugin->getName());
   }
@@ -25,7 +26,7 @@ class TypedDataLanguageRelationshipPluginTest extends RelationshipsTestBase {
    * @todo expand to include a new language.
    */
   public function testRelationship() {
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $langcode_plugin */
+    /** @var RelationshipInterface $langcode_plugin */
     $langcode_plugin = $this->relationshipManager->createInstance('typed_data_language_relationship:entity:node:langcode');
     $langcode_plugin->setContextValue('base', $this->entities['node1']);
     $relationship = $langcode_plugin->getRelationship();
diff --git a/tests/src/Kernel/TypedDataRelationshipPluginTest.php b/tests/src/Kernel/TypedDataRelationshipPluginTest.php
index 31fa9b71..7e3b52df 100644
--- a/tests/src/Kernel/TypedDataRelationshipPluginTest.php
+++ b/tests/src/Kernel/TypedDataRelationshipPluginTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ctools\Kernel;
 
+use Drupal\ctools\Plugin\RelationshipInterface;
 use Drupal\Core\Plugin\Context\ContextInterface;
 
 /**
@@ -14,27 +15,27 @@ class TypedDataRelationshipPluginTest extends RelationshipsTestBase {
    * @covers ::getName
    */
   public function testRelationshipName() {
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $nid_plugin */
+    /** @var RelationshipInterface $nid_plugin */
     $nid_plugin = $this->relationshipManager->createInstance('typed_data_relationship:entity:node:nid');
     $this->assertSame('nid', $nid_plugin->getName());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $uuid_plugin */
+    /** @var RelationshipInterface $uuid_plugin */
     $uuid_plugin = $this->relationshipManager->createInstance('typed_data_relationship:entity:node:uuid');
     $this->assertSame('uuid', $uuid_plugin->getName());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $title_plugin */
+    /** @var RelationshipInterface $title_plugin */
     $title_plugin = $this->relationshipManager->createInstance('typed_data_relationship:entity:node:title');
     $this->assertSame('title', $title_plugin->getName());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $body_plugin */
+    /** @var RelationshipInterface $body_plugin */
     $body_plugin = $this->relationshipManager->createInstance('typed_data_relationship:entity:node:body');
     $this->assertSame('body', $body_plugin->getName());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $uid_plugin */
+    /** @var RelationshipInterface $uid_plugin */
     $uid_plugin = $this->relationshipManager->createInstance('typed_data_relationship:entity:node:uid');
     $this->assertSame('uid', $uid_plugin->getName());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $mail_plugin */
+    /** @var RelationshipInterface $mail_plugin */
     $mail_plugin = $this->relationshipManager->createInstance('typed_data_relationship:entity:user:mail');
     $this->assertSame('mail', $mail_plugin->getName());
   }
@@ -43,7 +44,7 @@ class TypedDataRelationshipPluginTest extends RelationshipsTestBase {
    * @covers ::getRelationship
    */
   public function testRelationship() {
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $nid_plugin */
+    /** @var RelationshipInterface $nid_plugin */
     $nid_plugin = $this->relationshipManager->createInstance('typed_data_relationship:entity:node:nid');
     $nid_plugin->setContextValue('base', $this->entities['node1']);
     $relationship = $nid_plugin->getRelationship();
@@ -52,7 +53,7 @@ class TypedDataRelationshipPluginTest extends RelationshipsTestBase {
     $this->assertTrue($relationship->hasContextValue());
     $this->assertEquals($this->entities['node1']->id(), $relationship->getContextValue());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $uuid_plugin */
+    /** @var RelationshipInterface $uuid_plugin */
     $uuid_plugin = $this->relationshipManager->createInstance('typed_data_relationship:entity:node:uuid');
     $uuid_plugin->setContextValue('base', $this->entities['node1']);
     $relationship = $uuid_plugin->getRelationship();
@@ -61,7 +62,7 @@ class TypedDataRelationshipPluginTest extends RelationshipsTestBase {
     $this->assertTrue($relationship->hasContextValue());
     $this->assertEquals($this->entities['node1']->uuid(), $relationship->getContextValue());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $title_plugin */
+    /** @var RelationshipInterface $title_plugin */
     $title_plugin = $this->relationshipManager->createInstance('typed_data_relationship:entity:node:title');
     $title_plugin->setContextValue('base', $this->entities['node1']);
     $relationship = $title_plugin->getRelationship();
@@ -70,7 +71,7 @@ class TypedDataRelationshipPluginTest extends RelationshipsTestBase {
     $this->assertTrue($relationship->hasContextValue());
     $this->assertEquals($this->entities['node1']->label(), $relationship->getContextValue());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $body_plugin */
+    /** @var RelationshipInterface $body_plugin */
     $body_plugin = $this->relationshipManager->createInstance('typed_data_relationship:entity:node:body');
     $body_plugin->setContextValue('base', $this->entities['node1']);
     $relationship = $body_plugin->getRelationship();
@@ -79,7 +80,7 @@ class TypedDataRelationshipPluginTest extends RelationshipsTestBase {
     $this->assertTrue($relationship->hasContextValue());
     $this->assertEquals($this->entities['node1']->get('body')->first()->get('value')->getValue(), $relationship->getContextValue());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $uid_plugin */
+    /** @var RelationshipInterface $uid_plugin */
     $uid_plugin = $this->relationshipManager->createInstance('typed_data_relationship:entity:node:uid');
     $uid_plugin->setContextValue('base', $this->entities['node3']);
     $relationship = $uid_plugin->getRelationship();
@@ -88,7 +89,7 @@ class TypedDataRelationshipPluginTest extends RelationshipsTestBase {
     $this->assertTrue($relationship->hasContextValue());
     $this->assertEquals($this->entities['node3']->getOwnerId(), $relationship->getContextValue());
 
-    /** @var \Drupal\ctools\Plugin\RelationshipInterface $mail_plugin */
+    /** @var RelationshipInterface $mail_plugin */
     $mail_plugin = $this->relationshipManager->createInstance('typed_data_relationship:entity:user:mail');
     $mail_plugin->setContextValue('base', $this->entities['user']);
     $relationship = $mail_plugin->getRelationship();
diff --git a/tests/src/Kernel/TypedDataResolverTest.php b/tests/src/Kernel/TypedDataResolverTest.php
index 0aabf1f4..af3efdf7 100644
--- a/tests/src/Kernel/TypedDataResolverTest.php
+++ b/tests/src/Kernel/TypedDataResolverTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\ctools\Kernel;
 
+use Drupal\ctools\TypedDataResolver;
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Plugin\Context\Context;
 use Drupal\Core\Plugin\Context\ContextDefinition;
@@ -25,14 +27,14 @@ class TypedDataResolverTest extends KernelTestBase {
   protected static $modules = ['user', 'system', 'entity_test', 'ctools'];
 
   /**
-   * @var \Drupal\ctools\TypedDataResolver
+   * @var TypedDataResolver
    */
   protected $typedDataResolver;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', 'sequences');
@@ -75,14 +77,14 @@ class TypedDataResolverTest extends KernelTestBase {
   /**
    * Asserts that a context for the given property path can be derived.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to test with.
    * @param $property_path
    *   The property path to look for.
    * @param $expected_data_type
    *   The expected data type.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface
+   * @return ContextInterface
    *   The context with a value.
    */
   protected function assertPropertyPath(ContentEntityInterface $entity, $property_path, $expected_data_type) {
diff --git a/tests/src/Unit/BlockDisplayVariantTest.php b/tests/src/Unit/BlockDisplayVariantTest.php
index 86f2513e..a3c8a135 100644
--- a/tests/src/Unit/BlockDisplayVariantTest.php
+++ b/tests/src/Unit/BlockDisplayVariantTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ctools\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Block\BlockManager;
 use Drupal\Core\Condition\ConditionManager;
@@ -21,6 +22,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class BlockDisplayVariantTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests the submitConfigurationForm() method.
    *
diff --git a/tests/src/Unit/BlockPluginCollectionTest.php b/tests/src/Unit/BlockPluginCollectionTest.php
index 0dda7752..abcae5fb 100644
--- a/tests/src/Unit/BlockPluginCollectionTest.php
+++ b/tests/src/Unit/BlockPluginCollectionTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ctools\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\ctools\Plugin\BlockPluginCollection;
@@ -16,6 +17,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class BlockPluginCollectionTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests the getAllByRegion() method.
    *
diff --git a/tests/src/Unit/BlockVariantTraitTest.php b/tests/src/Unit/BlockVariantTraitTest.php
index 8a142f10..11a7c388 100644
--- a/tests/src/Unit/BlockVariantTraitTest.php
+++ b/tests/src/Unit/BlockVariantTraitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ctools\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\ctools\Plugin\BlockPluginCollection;
 use Drupal\ctools\Plugin\BlockVariantTrait;
@@ -16,6 +17,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class BlockVariantTraitTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests the getRegionAssignments() method.
    *
@@ -85,12 +87,12 @@ class TestBlockVariantTrait {
   protected $blockConfig = [];
 
   /**
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;
 
   /**
-   * @param \Drupal\ctools\Plugin\BlockPluginCollection $block_plugin_collection
+   * @param BlockPluginCollection $block_plugin_collection
    *
    * @return $this
    */
@@ -100,7 +102,7 @@ class TestBlockVariantTrait {
   }
 
   /**
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param UuidInterface $uuid_generator
    *
    * @return $this
    */
diff --git a/tests/src/Unit/ContextMapperTest.php b/tests/src/Unit/ContextMapperTest.php
index bf413ed2..76567fa7 100644
--- a/tests/src/Unit/ContextMapperTest.php
+++ b/tests/src/Unit/ContextMapperTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\ctools\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Plugin\Context\Context;
@@ -21,15 +23,16 @@ use Drupal\Tests\UnitTestCase;
  */
 class ContextMapperTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManager|\Prophecy\Prophecy\ProphecyInterface
+   * @var TypedDataManager|ProphecyInterface
    */
   protected $typedDataManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityRepositoryInterface|ProphecyInterface
    */
   protected $entityRepository;
 
@@ -41,7 +44,7 @@ class ContextMapperTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->typedDataManager = $this->prophesize(TypedDataManager::class);
diff --git a/tests/src/Unit/VariantCollectionTraitTest.php b/tests/src/Unit/VariantCollectionTraitTest.php
index f2876dea..caaea1aa 100644
--- a/tests/src/Unit/VariantCollectionTraitTest.php
+++ b/tests/src/Unit/VariantCollectionTraitTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\ctools\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -19,15 +21,16 @@ use Drupal\Tests\UnitTestCase;
  */
 class VariantCollectionTraitTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var PluginManagerInterface|MockObject
    */
   protected $manager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $container = new ContainerBuilder();
     $this->manager = $this->prophesize(PluginManagerInterface::class);
@@ -163,12 +166,12 @@ class TestVariantCollectionTrait {
   protected $variantConfig = [];
 
   /**
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;
 
   /**
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param UuidInterface $uuid_generator
    *
    * @return $this
    */
