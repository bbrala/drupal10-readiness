diff --git a/drupalmoduleupgrader.drush.inc b/drupalmoduleupgrader.drush.inc
index 89a2561..134f35d 100644
--- a/drupalmoduleupgrader.drush.inc
+++ b/drupalmoduleupgrader.drush.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\drupalmoduleupgrader\ConverterInterface;
 /**
  * @file
  * Declarations for Drush.
@@ -221,7 +222,7 @@ function _dmu_validate_command($module) {
  * @param string $module
  *   Module name.
  *
- * @return \Drupal\drupalmoduleupgrader\Target
+ * @return Target
  *   The target.
  */
 function _dmu_build_target($module) {
@@ -343,7 +344,7 @@ function drush_drupalmoduleupgrader_dmu_upgrade($module) {
 
   $converters = \Drupal::service('plugin.manager.drupalmoduleupgrader.converter');
   foreach (_dmu_plugin_list('converter') as $id) {
-    /** @var \Drupal\drupalmoduleupgrader\ConverterInterface $converter */
+    /** @var ConverterInterface $converter */
     $converter = $converters->createInstance($id);
 
     if ($converter->isExecutable($target)) {
diff --git a/drupalmoduleupgrader.module b/drupalmoduleupgrader.module
index 103ff06..03be6ac 100644
--- a/drupalmoduleupgrader.module
+++ b/drupalmoduleupgrader.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\drupalmoduleupgrader\IssueInterface;
 /**
  * @file
  * DMU module file.
@@ -122,7 +123,7 @@ function drupalmoduleupgrader_theme() {
 function template_preprocess_dmu_report(array &$variables) {
   $categories = \Drupal::config('drupalmoduleupgrader.tags')->get('category');
 
-  /** @var \Drupal\drupalmoduleupgrader\IssueInterface $issue */
+  /** @var IssueInterface $issue */
   foreach ($variables['report']->getIssues() as $issue) {
     $category = $categories[$issue->hasTag('category') ? $issue->getTag('category')[0] : 'misc'];
 
diff --git a/src/AnalyzerInterface.php b/src/AnalyzerInterface.php
index 0af7f71..9955106 100644
--- a/src/AnalyzerInterface.php
+++ b/src/AnalyzerInterface.php
@@ -14,7 +14,7 @@ interface AnalyzerInterface {
    * @param TargetInterface $target
    *   The target module.
    *
-   * @return \Drupal\drupalmoduleupgrader\IssueInterface[]
+   * @return IssueInterface[]
    */
   public function analyze(TargetInterface $target);
 
diff --git a/src/Commands/DrupalmoduleupgraderCommands.php b/src/Commands/DrupalmoduleupgraderCommands.php
index 154b970..39ba1ee 100644
--- a/src/Commands/DrupalmoduleupgraderCommands.php
+++ b/src/Commands/DrupalmoduleupgraderCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Commands;
 
+use Drupal\drupalmoduleupgrader\ConverterInterface;
 use Drush\Commands\DrushCommands;
 use Drupal\drupalmoduleupgrader\Report;
 use Drupal\drupalmoduleupgrader\Target;
@@ -14,32 +15,32 @@ class DrupalmoduleupgraderCommands extends DrushCommands {
   /**
    * Renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Analyzer plugin manager.
    *
-   * @var \Drupal\Core\Plugin\DefaultPluginManager
+   * @var DefaultPluginManager
    */
   protected $analyzerPluginManager;
 
   /**
    * Converter plugin manager.
    *
-   * @var \Drupal\Core\Plugin\DefaultPluginManager
+   * @var DefaultPluginManager
    */
   protected $converterPluginManager;
 
   /**
    * DrupalmoduleupgraderCommands constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer service.
-   * @param \Drupal\Core\Plugin\DefaultPluginManager $analyzer_plugin_manager
+   * @param DefaultPluginManager $analyzer_plugin_manager
    *   Analyzer plugin manager.
-   * @param \Drupal\Core\Plugin\DefaultPluginManager $converter_plugin_manager
+   * @param DefaultPluginManager $converter_plugin_manager
    *   Converter plugin manager.
    */
   public function __construct(RendererInterface $renderer,
@@ -179,7 +180,7 @@ class DrupalmoduleupgraderCommands extends DrushCommands {
     }
 
     foreach ($this->dmuPluginList('converter', $options) as $id) {
-      /** @var \Drupal\drupalmoduleupgrader\ConverterInterface $converter */
+      /** @var ConverterInterface $converter */
       $converter = $this->converterPluginManager->createInstance($id);
 
       if ($converter->isExecutable($target)) {
@@ -240,7 +241,7 @@ class DrupalmoduleupgraderCommands extends DrushCommands {
    * @param null $path
    *   Path of the module.
    *
-   * @return \Drupal\drupalmoduleupgrader\Target
+   * @return Target
    *   Target module.
    */
   protected function dmuBuildTarget(string $module, $path = NULL) {
diff --git a/src/ConverterBase.php b/src/ConverterBase.php
index 0af7f7c..b3c4e7f 100644
--- a/src/ConverterBase.php
+++ b/src/ConverterBase.php
@@ -89,7 +89,7 @@ abstract class ConverterBase extends PluginBase implements ConverterInterface {
    * @param string $hook
    *   The hook to implement, without the hook_ prefix.
    *
-   * @return \Pharborist\Functions\FunctionDeclarationNode
+   * @return FunctionDeclarationNode
    *   The hook implementation, appended to the main module file.
    */
   protected function implement(TargetInterface $target, $hook) {
@@ -135,7 +135,7 @@ abstract class ConverterBase extends PluginBase implements ConverterInterface {
    *
    * @param TargetInterface $target
    *   The target module.
-   * @param \Pharborist\Objects\ClassNode $class
+   * @param ClassNode $class
    *   The class to write. The path will be determined from the class'
    *   fully qualified name.
    *
@@ -190,7 +190,7 @@ abstract class ConverterBase extends PluginBase implements ConverterInterface {
    * @param string|array $class
    *   The class to parse, either as a string of PHP code or a renderable array.
    *
-   * @return \Pharborist\Objects\ClassNode
+   * @return ClassNode
    */
   protected function parse($class) {
     if (is_array($class)) {
@@ -245,9 +245,9 @@ abstract class ConverterBase extends PluginBase implements ConverterInterface {
   /**
    * Parametrically rewrites a function.
    *
-   * @param \Drupal\drupalmoduleupgrader\RewriterInterface $rewriter
+   * @param RewriterInterface $rewriter
    *   A fully configured parametric rewriter.
-   * @param \Pharborist\Functions\ParameterNode $parameter
+   * @param ParameterNode $parameter
    *   The parameter upon which to base the rewrite.
    * @param TargetInterface $target
    *   The target module.
@@ -269,9 +269,9 @@ abstract class ConverterBase extends PluginBase implements ConverterInterface {
         return $indexer->has($call->getName()->getText());
       });
 
-    /** @var \Pharborist\Functions\FunctionCallNode $call */
+    /** @var FunctionCallNode $call */
     foreach ($next as $call) {
-      /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+      /** @var FunctionDeclarationNode $function */
       $function = $indexer->get($call->getName()->getText());
 
       foreach ($call->getArguments() as $index => $argument) {
diff --git a/src/FixerBase.php b/src/FixerBase.php
index 82ef900..9b78dc5 100644
--- a/src/FixerBase.php
+++ b/src/FixerBase.php
@@ -11,7 +11,7 @@ use Pharborist\NodeInterface;
 abstract class FixerBase extends CorePluginBase implements FixerInterface {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\TargetInterface
+   * @var TargetInterface
    */
   protected $target;
 
@@ -29,7 +29,7 @@ abstract class FixerBase extends CorePluginBase implements FixerInterface {
   /**
    * Returns if a node uses a specific trait anywhere in its lineage.
    *
-   * @param \Pharborist\NodeInterface $node
+   * @param NodeInterface $node
    *
    * @return bool
    */
diff --git a/src/FixerInterface.php b/src/FixerInterface.php
index b156a1a..94a0d66 100644
--- a/src/FixerInterface.php
+++ b/src/FixerInterface.php
@@ -14,7 +14,7 @@ interface FixerInterface extends ExecutableInterface {
   /**
    * Sets the target module to operate on.
    *
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    */
   public function setTarget(TargetInterface $target);
 
diff --git a/src/IndexerBase.php b/src/IndexerBase.php
index c65944b..bdf0f66 100644
--- a/src/IndexerBase.php
+++ b/src/IndexerBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader;
 
+use Symfony\Component\Finder\SplFileInfo;
 use Drupal\Core\Database\Connection as DatabaseConnection;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase as CorePluginBase;
@@ -71,7 +72,7 @@ abstract class IndexerBase extends CorePluginBase implements IndexerInterface, C
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Symfony\Component\Finder\SplFileInfo $file */
+    /** @var SplFileInfo $file */
     foreach ($this->target->getFinder() as $file) {
       $this->addFile($file->getPathname());
     }
diff --git a/src/Issue.php b/src/Issue.php
index 77c41a4..8de0824 100644
--- a/src/Issue.php
+++ b/src/Issue.php
@@ -49,7 +49,7 @@ class Issue implements IssueInterface {
   protected $fixes = [];
 
   /**
-   * @var \cebe\markdown\Markdown
+   * @var Markdown
    */
   protected $parser;
 
diff --git a/src/IssueInterface.php b/src/IssueInterface.php
index d5b2a0b..9c213e2 100644
--- a/src/IssueInterface.php
+++ b/src/IssueInterface.php
@@ -63,7 +63,7 @@ interface IssueInterface {
    *
    * @param string $file
    *   The path of the affected file.
-   * @param \Drupal\drupalmoduleupgrader\AnalyzerInterface $detector
+   * @param AnalyzerInterface $detector
    *   The plugin which detected the problem.
    *
    * @return $this
@@ -73,9 +73,9 @@ interface IssueInterface {
   /**
    * Flags a single violation of this issue in a particular syntax node.
    *
-   * @param \Pharborist\Node $node
+   * @param Node $node
    *   The offending syntax tree node.
-   * @param \Drupal\drupalmoduleupgrader\AnalyzerInterface $detector
+   * @param AnalyzerInterface $detector
    *   The plugin which detected the violation.
    *
    * @return $this
diff --git a/src/Plugin/DMU/Analyzer/HookUninstall.php b/src/Plugin/DMU/Analyzer/HookUninstall.php
index 662ccf7..dc6a65f 100644
--- a/src/Plugin/DMU/Analyzer/HookUninstall.php
+++ b/src/Plugin/DMU/Analyzer/HookUninstall.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Analyzer;
 
+use Pharborist\NodeCollection;
 use Drupal\drupalmoduleupgrader\AnalyzerBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
 use Pharborist\Filter;
@@ -29,7 +30,7 @@ class HookUninstall extends AnalyzerBase {
     $issues = [];
 
     if ($indexer->has('hook_uninstall')) {
-      /** @var \Pharborist\NodeCollection $variable_del */
+      /** @var NodeCollection $variable_del */
       $variable_del = $indexer->get('hook_uninstall')->find(Filter::isFunctionCall('variable_del'));
 
       if (sizeof($variable_del) > 0) {
diff --git a/src/Plugin/DMU/Analyzer/InfoFile.php b/src/Plugin/DMU/Analyzer/InfoFile.php
index 1c8a318..7604ba1 100644
--- a/src/Plugin/DMU/Analyzer/InfoFile.php
+++ b/src/Plugin/DMU/Analyzer/InfoFile.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Analyzer;
 
+use Drupal\drupalmoduleupgrader\IssueInterface;
 use Drupal\drupalmoduleupgrader\Plugin\DMU\Converter\InfoToYAML;
 use Drupal\drupalmoduleupgrader\AnalyzerBase;
 use Drupal\drupalmoduleupgrader\Issue;
@@ -58,7 +59,7 @@ class InfoFile extends AnalyzerBase {
       $issues['configure']->addDocumentation($doc['url'] . '#configure', $doc['title']);
     }
 
-    /** @var \Drupal\drupalmoduleupgrader\IssueInterface $issue */
+    /** @var IssueInterface $issue */
     foreach ($issues as $key => $issue) {
       $issue->setTag('error_level', 'error');
       $issue->setTag('category', ['info']);
diff --git a/src/Plugin/DMU/Converter/Blocks.php b/src/Plugin/DMU/Converter/Blocks.php
index dd897d4..04636fd 100644
--- a/src/Plugin/DMU/Converter/Blocks.php
+++ b/src/Plugin/DMU/Converter/Blocks.php
@@ -80,7 +80,7 @@ class Blocks extends ConverterBase {
   /**
    * Slaps a translated FIXME notice above a block-related hook.
    *
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    *   The target module.
    * @param string $hook
    *   The hook to put the FIXME on. It's up to the calling code to ensure
diff --git a/src/Plugin/DMU/Converter/EntityHooks.php b/src/Plugin/DMU/Converter/EntityHooks.php
index ee8a6f6..603d879 100644
--- a/src/Plugin/DMU/Converter/EntityHooks.php
+++ b/src/Plugin/DMU/Converter/EntityHooks.php
@@ -44,7 +44,7 @@ use Psr\Log\LoggerInterface;
 class EntityHooks extends ConverterBase {
 
   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $rewriters;
 
diff --git a/src/Plugin/DMU/Converter/Functions/CToolsGetPlugins.php b/src/Plugin/DMU/Converter/Functions/CToolsGetPlugins.php
index 929eb7c..1d55054 100644
--- a/src/Plugin/DMU/Converter/Functions/CToolsGetPlugins.php
+++ b/src/Plugin/DMU/Converter/Functions/CToolsGetPlugins.php
@@ -20,9 +20,9 @@ class CToolsGetPlugins extends FunctionCallModifier {
    * only if both arguments are strings, and the first argument is the machine
    * name of the target module.
    *
-   * @param \Pharborist\Functions\FunctionCallNode $call
+   * @param FunctionCallNode $call
    *   The function call to test.
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    *   The target module.
    *
    * @return bool
diff --git a/src/Plugin/DMU/Converter/Functions/FunctionCallModifier.php b/src/Plugin/DMU/Converter/Functions/FunctionCallModifier.php
index 7a67066..46ed084 100644
--- a/src/Plugin/DMU/Converter/Functions/FunctionCallModifier.php
+++ b/src/Plugin/DMU/Converter/Functions/FunctionCallModifier.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter\Functions;
 
+use Pharborist\Node;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
 use Pharborist\Functions\FunctionCallNode;
@@ -14,12 +15,12 @@ abstract class FunctionCallModifier extends ConverterBase {
   /**
    * Tries to rewrite the original function call.
    *
-   * @param \Pharborist\Functions\FunctionCallNode $call
+   * @param FunctionCallNode $call
    *   The original function call.
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    *   The target module.
    *
-   * @return \Pharborist\Node|null
+   * @return Node|null
    *   If the original function call is returned (determined by object identity),
    *   the function call is not replaced. If a different node is returned, it
    *   will replace the original call. And if nothing is returned, the original
diff --git a/src/Plugin/DMU/Converter/Functions/URL.php b/src/Plugin/DMU/Converter/Functions/URL.php
index cfb3f2e..4a65889 100644
--- a/src/Plugin/DMU/Converter/Functions/URL.php
+++ b/src/Plugin/DMU/Converter/Functions/URL.php
@@ -22,7 +22,7 @@ use Psr\Log\LoggerInterface;
 class URL extends FunctionCallModifier implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
diff --git a/src/Plugin/DMU/Converter/Grep.php b/src/Plugin/DMU/Converter/Grep.php
index 7fbf063..c7a004d 100644
--- a/src/Plugin/DMU/Converter/Grep.php
+++ b/src/Plugin/DMU/Converter/Grep.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;
 
+use Symfony\Component\Finder\SplFileInfo;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
@@ -70,7 +71,7 @@ class Grep extends ConverterBase {
       // Load in the entire contents of the module. This is criminally inefficient
       // and wasteful of memory and should eventually be refactored into something
       // a little more...I dunno, sustainable.
-      /** @var \Symfony\Component\Finder\SplFileInfo $file */
+      /** @var SplFileInfo $file */
       $search = array_keys($this->targets);
       $replace = array_values($this->targets);
       file_put_contents($file->getPathname(), str_replace($search, $replace, $file->getContents()));
diff --git a/src/Plugin/DMU/Converter/HookEntityInfo.php b/src/Plugin/DMU/Converter/HookEntityInfo.php
index a142776..0e46eb5 100644
--- a/src/Plugin/DMU/Converter/HookEntityInfo.php
+++ b/src/Plugin/DMU/Converter/HookEntityInfo.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;
 
+use Pharborist\Objects\ClassNode;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
@@ -43,7 +44,7 @@ class HookEntityInfo extends ConverterBase {
       unset($entity_type['entity keys']);
 
       if (isset($entity_type['controller class'])) {
-        /** @var \Pharborist\Objects\ClassNode $controller */
+        /** @var ClassNode $controller */
         $indexer = $target->getIndexer('class');
         if ($indexer->has($entity_type['controller class'])) {
           $controller = $indexer->get($entity_type['controller class']);
diff --git a/src/Plugin/DMU/Converter/HookEntityTypeView.php b/src/Plugin/DMU/Converter/HookEntityTypeView.php
index 8bfb9b3..13bdebd 100644
--- a/src/Plugin/DMU/Converter/HookEntityTypeView.php
+++ b/src/Plugin/DMU/Converter/HookEntityTypeView.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;
 
+use Pharborist\Functions\FunctionDeclarationNode;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
@@ -25,7 +26,7 @@ use Psr\Log\LoggerInterface;
 class HookEntityTypeView extends ConverterBase {
 
   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $rewriters;
 
@@ -39,7 +40,7 @@ class HookEntityTypeView extends ConverterBase {
 
     $hooks = array_filter($this->pluginDefinition['hook'], [$indexer, 'has']);
     foreach ($hooks as $hook) {
-      /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+      /** @var FunctionDeclarationNode $function */
       $function = $indexer->get($hook);
       $function->prependParameter(ParameterNode::create('build')->setTypeHint('array')->setReference(TRUE));
 
diff --git a/src/Plugin/DMU/Converter/HookFormAlter.php b/src/Plugin/DMU/Converter/HookFormAlter.php
index 8da12ce..3b4a40c 100644
--- a/src/Plugin/DMU/Converter/HookFormAlter.php
+++ b/src/Plugin/DMU/Converter/HookFormAlter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;
 
+use Pharborist\Functions\FunctionDeclarationNode;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
@@ -28,7 +29,7 @@ class HookFormAlter extends ConverterBase {
     $alter_hooks = $query->execute();
 
     foreach ($alter_hooks as $alter_hook) {
-      /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+      /** @var FunctionDeclarationNode $function */
       $function = $indexer->get($alter_hook->id);
 
       $parameters = $function->getParameters();
diff --git a/src/Plugin/DMU/Converter/HookNodePrepare.php b/src/Plugin/DMU/Converter/HookNodePrepare.php
index 44a9a53..0b8e9e0 100644
--- a/src/Plugin/DMU/Converter/HookNodePrepare.php
+++ b/src/Plugin/DMU/Converter/HookNodePrepare.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;
 
+use Pharborist\Functions\FunctionDeclarationNode;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
@@ -20,7 +21,7 @@ use Psr\Log\LoggerInterface;
 class HookNodePrepare extends ConverterBase {
 
   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $rewriters;
 
@@ -33,7 +34,7 @@ class HookNodePrepare extends ConverterBase {
    * {@inheritdoc}
    */
   public function convert(TargetInterface $target) {
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+    /** @var FunctionDeclarationNode $function */
     $function = $target->getIndexer('function')->get('hook_node_prepare');
 
     // foo_node_prepare() --> foo_node_prepare_form().
diff --git a/src/Plugin/DMU/Converter/HookUserLogin.php b/src/Plugin/DMU/Converter/HookUserLogin.php
index 70c4782..168107f 100644
--- a/src/Plugin/DMU/Converter/HookUserLogin.php
+++ b/src/Plugin/DMU/Converter/HookUserLogin.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;
 
+use Pharborist\Functions\FunctionDeclarationNode;
+use Pharborist\Functions\ParameterNode;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
@@ -21,7 +23,7 @@ use Psr\Log\LoggerInterface;
 class HookUserLogin extends ConverterBase {
 
   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $rewriters;
 
@@ -34,12 +36,12 @@ class HookUserLogin extends ConverterBase {
    * {@inheritdoc}
    */
   public function convert(TargetInterface $target) {
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+    /** @var FunctionDeclarationNode $function */
     $function = $target->getIndexer('function')->get('hook_user_login');
     // The $edit parameter is defunct in Drupal 8, but we'll leave it in
     // there as an empty array to prevent errors, and move it to the back
     // of the line.
-    /** @var \Pharborist\Functions\ParameterNode $edit */
+    /** @var ParameterNode $edit */
     $edit = $function->getParameterList()->shift()->setReference(FALSE)->setValue(ArrayNode::create([]));
     $function->appendParameter($edit);
 
diff --git a/src/Plugin/DMU/Converter/Links.php b/src/Plugin/DMU/Converter/Links.php
index f6180c6..c7c8826 100644
--- a/src/Plugin/DMU/Converter/Links.php
+++ b/src/Plugin/DMU/Converter/Links.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;
 
+use Pharborist\Functions\FunctionDeclarationNode;
+use Drupal\drupalmoduleupgrader\Routing\LinkBinding\LinkBinding;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
@@ -34,12 +36,12 @@ and linking systems, see https://api.drupal.org/api/drupal/core%21includes%21men
 class Links extends ConverterBase {
 
   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $routeConverters;
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Routing\LinkBinding\LinkBindingFactory
+   * @var LinkBindingFactory
    */
   protected $linkBinding;
 
@@ -52,7 +54,7 @@ class Links extends ConverterBase {
    *   The plugin ID, will be "Links".
    * @param string $plugin_definition
    *   The plugin definition as derived from the annotations.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $route_converters
+   * @param PluginManagerInterface $route_converters
    *   The plugin manager for route converters, used by HookMenu.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $translator, LoggerInterface $log, PluginManagerInterface $route_converters, LinkBindingFactory $link_binding) {
@@ -67,7 +69,7 @@ class Links extends ConverterBase {
   public function convert(TargetInterface $target) {
     // If the hook implementation contains logic, we cannot convert it and
     // that's that. So we'll leave a FIXME and bail out.
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $hook */
+    /** @var FunctionDeclarationNode $hook */
     $hook = $target->getIndexer('function')->get('hook_menu');
     if ($hook->is(new ContainsLogicFilter)) {
       $hook->setDocComment(DocCommentNode::create($this->pluginDefinition['fixme']));
@@ -86,7 +88,7 @@ class Links extends ConverterBase {
 
     $hook_menu = new HookMenu($target, $this->routeConverters);
     foreach ($hook_menu->getSourceRoutes()->getAllLinks() as $path => $source) {
-      /** @var \Drupal\drupalmoduleupgrader\Routing\LinkBinding\LinkBinding $binding */
+      /** @var LinkBinding $binding */
       $binding = $this->linkBinding->create($source, $hook_menu->getDestinationRoute($path));
 
       // Skip if the converter wasn't able to find a destination.
diff --git a/src/Plugin/DMU/Converter/PSR4.php b/src/Plugin/DMU/Converter/PSR4.php
index d2b0936..978d58c 100644
--- a/src/Plugin/DMU/Converter/PSR4.php
+++ b/src/Plugin/DMU/Converter/PSR4.php
@@ -41,7 +41,7 @@ class PSR4 extends ConverterBase {
    * should clone it before calling this function if you want to make a PSR-4
    * *copy* of it.
    *
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    *   The module which will own the class.
    * @param \Pharborist\ClassNode $class
    *   The class to modify.
diff --git a/src/Plugin/DMU/Converter/Routing.php b/src/Plugin/DMU/Converter/Routing.php
index 911a30d..7eb1533 100644
--- a/src/Plugin/DMU/Converter/Routing.php
+++ b/src/Plugin/DMU/Converter/Routing.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;
 
+use Pharborist\Functions\FunctionDeclarationNode;
+use Drupal\drupalmoduleupgrader\Routing\Drupal7\RouteWrapper;
+use Drupal\drupalmoduleupgrader\Routing\RouteConverterInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
@@ -31,7 +34,7 @@ class Routing extends ConverterBase {
   /**
    * The route converters' plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $routeConverters;
 
@@ -45,7 +48,7 @@ class Routing extends ConverterBase {
    * @param mixed $plugin_definition
    *   The plugin definition as derived from the annotations.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $route_converters
+   * @param PluginManagerInterface $route_converters
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $translator, LoggerInterface $log, PluginManagerInterface $route_converters) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $translator, $log);
@@ -58,7 +61,7 @@ class Routing extends ConverterBase {
   public function convert(TargetInterface $target) {
     // If the hook implementation contains logic, we cannot convert it and
     // that's that. So we'll leave a FIXME and bail out.
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $hook */
+    /** @var FunctionDeclarationNode $hook */
     $hook = $target->getIndexer('function')->get('hook_menu');
     if ($hook->is(new ContainsLogicFilter)) {
       $hook->setDocComment(DocCommentNode::create($this->pluginDefinition['fixme']));
@@ -68,10 +71,10 @@ class Routing extends ConverterBase {
 
     $hook_menu = new HookMenu($target, $this->routeConverters);
     foreach ($hook_menu->getSourceRoutes() as $path => $route) {
-      /** @var \Drupal\drupalmoduleupgrader\Routing\Drupal7\RouteWrapper $route */
+      /** @var RouteWrapper $route */
       if ($route->containsKey('page callback')) {
         $plugin_id = $this->routeConverters->hasDefinition($route['page callback']) ? $route['page callback'] : 'default';
-        /** @var \Drupal\drupalmoduleupgrader\Routing\RouteConverterInterface $converter */
+        /** @var RouteConverterInterface $converter */
         $this->routeConverters->createInstance($plugin_id)->buildRoute($target, $route);
       }
     }
diff --git a/src/Plugin/DMU/Converter/Tests.php b/src/Plugin/DMU/Converter/Tests.php
index f8e8e64..2409370 100644
--- a/src/Plugin/DMU/Converter/Tests.php
+++ b/src/Plugin/DMU/Converter/Tests.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;
 
+use Pharborist\Objects\Classnode;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
 use Drupal\drupalmoduleupgrader\Utility\Filter\ContainsLogicFilter;
@@ -50,7 +51,7 @@ class Tests extends ConverterBase {
     foreach ($mapping as $parent_class => $convert_method) {
       $test_files = $target->getIndexer('class')->getQuery(['file'])->condition('parent', $parent_class)->execute()->fetchCol();
       foreach ($test_files as $test_file) {
-        /** @var \Pharborist\Objects\Classnode[] $tests */
+        /** @var Classnode[] $tests */
         $tests = $target->open($test_file)->find(Filter::isInstanceOf('\Pharborist\Objects\SingleInheritanceNode'))->toArray();
         foreach ($tests as $test) {
           if ((string) $test->getExtends() === $parent_class) {
@@ -64,7 +65,7 @@ class Tests extends ConverterBase {
   /**
    * Converts a single web test.
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    */
   public function convertWeb(ClassNode $test) {
     $test->setExtends('\Drupal\simpletest\WebTestBase');
@@ -77,7 +78,7 @@ class Tests extends ConverterBase {
   /**
    * Converts the test's getInfo() method to an annotation.
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    */
   private function convertInfo(ClassNode $test) {
     $info = $this->extractInfo($test);
@@ -107,7 +108,7 @@ class Tests extends ConverterBase {
    * Extracts the return value of the test's getInfo() method, if there's no
    * logic in the method.
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    *
    * @return array|null
    */
@@ -124,7 +125,7 @@ class Tests extends ConverterBase {
   /**
    * Sets the test's $modules property.
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    */
   private function setModules(ClassNode $test) {
     $modules = $this->extractModules($test);
@@ -142,7 +143,7 @@ class Tests extends ConverterBase {
    * Extracts every module required by a web test by scanning its calls
    * to parent::setUp().
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    *
    * @return string[]
    *   Array of modules set up by this module.
@@ -171,7 +172,7 @@ class Tests extends ConverterBase {
   /**
    * Sets the test's $profile property.
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    */
   private function setProfile(ClassNode $test) {
     if (!$test->hasProperty('profile')) {
@@ -190,7 +191,7 @@ class Tests extends ConverterBase {
   /**
    * Converts a single Ajax test.
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    */
   public function convertAjax(ClassNode $test) {
     $test->setExtends('\Drupal\system\Tests\Ajax\AjaxTestBase');
diff --git a/src/Plugin/DMU/Converter/UnitTests.php b/src/Plugin/DMU/Converter/UnitTests.php
index f6e0fb8..d7a7858 100644
--- a/src/Plugin/DMU/Converter/UnitTests.php
+++ b/src/Plugin/DMU/Converter/UnitTests.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;
 
+use Pharborist\Objects\Classnode;
+use Pharborist\Objects\ClassNode;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
 use Pharborist\DocCommentNode;
@@ -30,7 +32,7 @@ class UnitTests extends ConverterBase {
     $unit_tests = [];
     $test_files = $target->getIndexer('class')->getQuery(['file'])->condition('parent', 'DrupalUnitTestCase')->execute()->fetchCol();
     foreach ($test_files as $test_file) {
-      /** @var \Pharborist\Objects\Classnode[] $tests */
+      /** @var Classnode[] $tests */
       $tests = $target->open($test_file)->find(Filter::isInstanceOf('\Pharborist\Objects\SingleInheritanceNode'))->toArray();
       foreach ($tests as $test) {
         if ((string) $test->getExtends() === 'DrupalUnitTestCase') {
@@ -39,7 +41,7 @@ class UnitTests extends ConverterBase {
       }
     }
 
-    /** @var \Pharborist\Objects\ClassNode $unit_test */
+    /** @var ClassNode $unit_test */
     foreach ($unit_tests as $unit_test) {
       $unit_test->setExtends('\Drupal\Tests\UnitTestCase');
 
diff --git a/src/Plugin/DMU/Converter/UserHooks.php b/src/Plugin/DMU/Converter/UserHooks.php
index 98425dd..07f2091 100644
--- a/src/Plugin/DMU/Converter/UserHooks.php
+++ b/src/Plugin/DMU/Converter/UserHooks.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;
 
+use Pharborist\Functions\FunctionDeclarationNode;
+use Pharborist\Functions\ParameterNode;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\RewriterInterface;
@@ -25,7 +27,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class UserHooks extends ConverterBase {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\RewriterInterface
+   * @var RewriterInterface
    */
   protected $rewriter;
 
@@ -56,12 +58,12 @@ class UserHooks extends ConverterBase {
 
     $hooks = array_filter($this->pluginDefinition['hook'], [$indexer, 'has']);
     foreach ($hooks as $hook) {
-      /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+      /** @var FunctionDeclarationNode $function */
       $function = $indexer->get($hook);
       // The $edit parameter is defunct in Drupal 8, but we'll leave it in
       // there as an empty array to prevent errors, and move it to the back
       // of the line.
-      /** @var \Pharborist\Functions\ParameterNode $edit */
+      /** @var ParameterNode $edit */
       $edit = $function->getParameterList()->shift()->setReference(FALSE)->setValue(NullNode::create());
       $function->appendParameter($edit);
 
diff --git a/src/Plugin/DMU/Fixer/CreateClass.php b/src/Plugin/DMU/Fixer/CreateClass.php
index 4e71d64..3c2d316 100644
--- a/src/Plugin/DMU/Fixer/CreateClass.php
+++ b/src/Plugin/DMU/Fixer/CreateClass.php
@@ -18,7 +18,7 @@ use Symfony\Component\Filesystem\Filesystem;
 class CreateClass extends FixerBase {
 
   /**
-   * @var \Symfony\Component\Filesystem\Filesystem
+   * @var Filesystem
    */
   protected $fs;
 
diff --git a/src/Plugin/DMU/Fixer/FormCallbackToMethod.php b/src/Plugin/DMU/Fixer/FormCallbackToMethod.php
index 1e44dde..6792185 100644
--- a/src/Plugin/DMU/Fixer/FormCallbackToMethod.php
+++ b/src/Plugin/DMU/Fixer/FormCallbackToMethod.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer;
 
+use Pharborist\Functions\FunctionDeclarationNode;
+use Pharborist\Objects\ClassNode;
 use Drupal\drupalmoduleupgrader\FixerBase;
 
 /**
@@ -12,14 +14,14 @@ use Drupal\drupalmoduleupgrader\FixerBase;
 class FormCallbackToMethod extends FixerBase {
 
   public function execute() {
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $callback */
+    /** @var FunctionDeclarationNode $callback */
     $callback = $this
       ->target
       ->getIndexer('function')
       ->get($this->configuration['callback']);
 
     list ($class, $method_name) = explode('::', $this->configuration['destination']);
-    /** @var \Pharborist\Objects\ClassNode $class */
+    /** @var ClassNode $class */
     $class = $this
       ->target
       ->getIndexer('class')
diff --git a/src/Plugin/DMU/Fixer/Implement.php b/src/Plugin/DMU/Fixer/Implement.php
index 13bd22a..55fb02f 100644
--- a/src/Plugin/DMU/Fixer/Implement.php
+++ b/src/Plugin/DMU/Fixer/Implement.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer;
 
+use Pharborist\Objects\ClassNode;
 use Drupal\drupalmoduleupgrader\FixerBase;
 use Pharborist\DocCommentNode;
 use Pharborist\Objects\ClassMethodNode;
@@ -14,7 +15,7 @@ use Pharborist\Objects\ClassMethodNode;
 class Implement extends FixerBase {
 
   public function execute() {
-    /** @var \Pharborist\Objects\ClassNode $class */
+    /** @var ClassNode $class */
     $class = $this
       ->target
       ->getIndexer('class')
diff --git a/src/Plugin/DMU/Fixer/NodeCollectorTrait.php b/src/Plugin/DMU/Fixer/NodeCollectorTrait.php
index 5df360d..7d9b008 100644
--- a/src/Plugin/DMU/Fixer/NodeCollectorTrait.php
+++ b/src/Plugin/DMU/Fixer/NodeCollectorTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer;
 
+use Pharborist\NodeCollection;
 /**
  * Trait used by fixers which loop through existing indexer objects and do
  * things with them.
@@ -9,7 +10,7 @@ namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer;
 trait NodeCollectorTrait {
 
   protected function getObjects() {
-    /** @var \Pharborist\NodeCollection $objects */
+    /** @var NodeCollection $objects */
     $objects = $this->target->getIndexer($this->configuration['type'])->get($this->configuration['id']);
 
     if (isset($this->configuration['where'])) {
diff --git a/src/Plugin/DMU/Fixer/Notify.php b/src/Plugin/DMU/Fixer/Notify.php
index b8257d3..8dccdd3 100644
--- a/src/Plugin/DMU/Fixer/Notify.php
+++ b/src/Plugin/DMU/Fixer/Notify.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer;
 
+use Pharborist\DocCommentTrait;
 use Drupal\drupalmoduleupgrader\FixerBase;
 use Pharborist\DocCommentNode;
 use Pharborist\LineCommentBlockNode;
@@ -33,7 +34,7 @@ class Notify extends FixerBase {
 
   protected function getComment(NodeInterface $node) {
     if ($this->supportsDocComments($node)) {
-      /** @var \Pharborist\DocCommentTrait $node */
+      /** @var DocCommentTrait $node */
       $comment = $node->getDocComment() ?: DocCommentNode::create('');
       return $comment->getCommentText();
     }
@@ -44,7 +45,7 @@ class Notify extends FixerBase {
 
   protected function setComment(NodeInterface $node, $comment_text) {
     if ($this->supportsDocComments($node)) {
-      /** @var \Pharborist\DocCommentTrait $node */
+      /** @var DocCommentTrait $node */
       $node->setDocComment(DocCommentNode::create($comment_text));
     }
     else {
@@ -56,7 +57,7 @@ class Notify extends FixerBase {
    * Returns if a node supports doc comments by importing DocCommentTrait
    * anywhere in its lineage.
    *
-   * @param \Pharborist\NodeInterface $node
+   * @param NodeInterface $node
    *
    * @return bool
    */
diff --git a/src/Plugin/DMU/Fixer/PSR4.php b/src/Plugin/DMU/Fixer/PSR4.php
index 97fd7d5..890a3d2 100644
--- a/src/Plugin/DMU/Fixer/PSR4.php
+++ b/src/Plugin/DMU/Fixer/PSR4.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer;
 
+use Pharborist\Objects\ClassNode;
 use Drupal\drupalmoduleupgrader\FixerBase;
 use Pharborist\Namespaces\NameNode;
 use Pharborist\Parser;
@@ -19,7 +20,7 @@ class PSR4 extends FixerBase {
    * {@inheritdoc}
    */
   public function execute() {
-    /** @var \Pharborist\Objects\ClassNode $class */
+    /** @var ClassNode $class */
     $class = $this
       ->target
       ->getIndexer('class')
diff --git a/src/Plugin/DMU/Indexer/FunctionCalls.php b/src/Plugin/DMU/Indexer/FunctionCalls.php
index 86867f7..d155fe8 100644
--- a/src/Plugin/DMU/Indexer/FunctionCalls.php
+++ b/src/Plugin/DMU/Indexer/FunctionCalls.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer;
 
+use Symfony\Component\Finder\SplFileInfo;
 use Drupal\drupalmoduleupgrader\IndexerBase;
 use Pharborist\Filter;
 use Pharborist\Parser;
@@ -21,7 +22,7 @@ class FunctionCalls extends IndexerBase {
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Symfony\Component\Finder\SplFileInfo $file */
+    /** @var SplFileInfo $file */
     foreach ($this->target->getFinder() as $file) {
       $path = $file->getPathname();
 
diff --git a/src/Plugin/DMU/Indexer/Functions.php b/src/Plugin/DMU/Indexer/Functions.php
index edc8aac..ef24ab8 100644
--- a/src/Plugin/DMU/Indexer/Functions.php
+++ b/src/Plugin/DMU/Indexer/Functions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer;
 
+use Pharborist\Functions\FunctionCallNode;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\drupalmoduleupgrader\IndexerBase;
 use Drupal\drupalmoduleupgrader\IndexerExecutionInterface;
@@ -69,7 +70,7 @@ class Functions extends IndexerBase implements IndexerExecutionInterface, Indexe
    * {@inheritdoc}
    */
   public function add(NodeInterface $node) {
-    /** @var \Pharborist\Functions\FunctionDeclarationNode|\Pharborist\Functions\FunctionCallNode $node */
+    /** @var FunctionDeclarationNode|FunctionCallNode $node */
     $fields = [
       'id' => (string) $node->getName(),
       'file' => $node->getFilename(),
diff --git a/src/Plugin/DMU/Rewriter/FormState.php b/src/Plugin/DMU/Rewriter/FormState.php
index 2c79f6a..9d5001a 100644
--- a/src/Plugin/DMU/Rewriter/FormState.php
+++ b/src/Plugin/DMU/Rewriter/FormState.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Rewriter;
 
+use Pharborist\Functions\FunctionCallNode;
+use Pharborist\ArrayLookupNode;
 use Pharborist\ExpressionNode;
 use Pharborist\Filter;
 use Pharborist\Functions\ParameterNode;
@@ -121,7 +123,7 @@ class FormState extends Generic {
     $form_state = Token::variable('$' . $parameter->getName());
 
     $set_errors = $function->find(Filter::isFunctionCall('form_set_error', 'form_error'));
-    /** @var \Pharborist\Functions\FunctionCallNode $set_error */
+    /** @var FunctionCallNode $set_error */
     foreach ($set_errors as $set_error) {
       $arguments = $set_error->getArguments();
       $method = $set_error->getName()->getText() == 'form_set_error' ? 'setErrorByName' : 'setError';
@@ -150,7 +152,7 @@ class FormState extends Generic {
 
     // form_get_error() --> $form_state->getError()
     $get_errors = $function->find(Filter::isFunctionCall('form_get_error'));
-    /** @var \Pharborist\Functions\FunctionCallNode $get_error */
+    /** @var FunctionCallNode $get_error */
     foreach ($get_errors as $get_error) {
       $rewrite = ObjectMethodCallNode::create(clone $form_state, 'getError')
         ->appendArgument($get_error->getArguments()->get(0));
@@ -162,7 +164,7 @@ class FormState extends Generic {
    * {@inheritdoc}
    */
   public function rewriteAsGetter(ExpressionNode $expr, $property) {
-    /** @var \Pharborist\ArrayLookupNode $expr */
+    /** @var ArrayLookupNode $expr */
     $object = clone $expr->getRootArray();
     $keys = $expr->getKeys();
 
@@ -191,7 +193,7 @@ class FormState extends Generic {
    * {@inheritdoc}
    */
   public function rewriteAsSetter(ExpressionNode $expr, $property, AssignNode $assignment) {
-    /** @var \Pharborist\ArrayLookupNode $expr */
+    /** @var ArrayLookupNode $expr */
     $object = clone $expr->getRootArray();
     $keys = $expr->getKeys();
     $value = clone $assignment->getRightOperand();
diff --git a/src/Plugin/DMU/Rewriter/Generic.php b/src/Plugin/DMU/Rewriter/Generic.php
index 4b51887..3b7c27a 100644
--- a/src/Plugin/DMU/Rewriter/Generic.php
+++ b/src/Plugin/DMU/Rewriter/Generic.php
@@ -34,7 +34,7 @@ use Psr\Log\LoggerInterface;
 class Generic extends PluginBase implements RewriterInterface {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Filter\NodeAssignmentFilter
+   * @var NodeAssignmentFilter
    */
   protected $isAssigned;
 
@@ -119,10 +119,10 @@ class Generic extends PluginBase implements RewriterInterface {
   /**
    * Finds every rewritable expression in the function body.
    *
-   * @param \Pharborist\Functions\ParameterNode $parameter
+   * @param ParameterNode $parameter
    *   The parameter on which the rewrite is based.
    *
-   * @return \Pharborist\NodeCollection
+   * @return NodeCollection
    */
   protected function getExpressions(ParameterNode $parameter) {
     $filter = Filter::isInstanceOf('\Pharborist\ArrayLookupNode', '\Pharborist\Objects\ObjectPropertyNode');
@@ -148,7 +148,7 @@ class Generic extends PluginBase implements RewriterInterface {
    * Returns the property used by a rewritable expression, or NULL if the
    * property cannot be determined.
    *
-   * @param \Pharborist\ExpressionNode $expr
+   * @param ExpressionNode $expr
    *   The rewritable expression.
    *
    * @return string|null
@@ -170,12 +170,12 @@ class Generic extends PluginBase implements RewriterInterface {
    * Rewrites the given expression as a property getter. Returns NULL if the
    * expression cannot be rewritten.
    *
-   * @param \Pharborist\ExpressionNode $expr
+   * @param ExpressionNode $expr
    *   The expression to rewrite.
    * @param string $property
    *   The property being used in the expression.
    *
-   * @return \Pharborist\ExpressionNode|null
+   * @return ExpressionNode|null
    */
   public function rewriteAsGetter(ExpressionNode $expr, $property) {
     if ($expr instanceof ObjectPropertyNode) {
@@ -196,14 +196,14 @@ class Generic extends PluginBase implements RewriterInterface {
    * Rewrites an assignment expression as a property setter. Returns NULL if
    * the expression cannot be rewritten.
    *
-   * @param \Pharborist\ExpressionNode $expr
+   * @param ExpressionNode $expr
    *   The expression to rewrite.
    * @param string $property
    *   The property being used in the expression.
-   * @param \Pharborist\Operators\AssignNode $assignment
+   * @param AssignNode $assignment
    *   The entire assignment expression being rewritten.
    *
-   * @return \Pharborist\ExpressionNode|null
+   * @return ExpressionNode|null
    */
   public function rewriteAsSetter(ExpressionNode $expr, $property, AssignNode $assignment) {
     if ($expr instanceof ObjectPropertyNode) {
@@ -224,7 +224,7 @@ class Generic extends PluginBase implements RewriterInterface {
   /**
    * Returns if the parameter is fully reassigned anywhere in the function.
    *
-   * @param \Pharborist\Functions\ParameterNode $parameter
+   * @param ParameterNode $parameter
    *   The parameter to check.
    *
    * @return bool
@@ -246,14 +246,14 @@ class Generic extends PluginBase implements RewriterInterface {
    * $node->body[LANGUAGE_NONE][0]['value'] --> $node->body[0]->value
    * $node->body['fr'][0]['value'] --> $node->getTranslation('fr')->body[0]->value
    *
-   * @param \Pharborist\ArrayLookupNode $node
+   * @param ArrayLookupNode $node
    *   The original field lookup.
    *
-   * @return \Pharborist\ExpressionNode
+   * @return ExpressionNode
    */
   public static function rewriteFieldLookup(ArrayLookupNode $node) {
     $keys = $node->getKeys();
-    /** @var \Pharborist\Objects\ObjectPropertyNode $root */
+    /** @var ObjectPropertyNode $root */
     $root = $node->getRootArray();
     $expr = $root->getObject()->getText();
 
@@ -262,7 +262,7 @@ class Generic extends PluginBase implements RewriterInterface {
     }
     $expr .= '->' . $root->getPropertyName() . '[' . $keys[1] . ']';
 
-    /** @var \Pharborist\Types\StringNode|\Pharborist\Node $column */
+    /** @var StringNode|Node $column */
     foreach (array_slice($keys, 2) as $column) {
       $expr .= '->';
       $expr .= $column instanceof StringNode ? $column->toValue() : $column->getText();
@@ -280,7 +280,7 @@ class Generic extends PluginBase implements RewriterInterface {
    * - The key is the LANGUAGE_NONE constant from Drupal 7.
    * - The key is the string 'und'.
    *
-   * @param \Pharborist\Node $key
+   * @param Node $key
    *   The key to check.
    *
    * @return bool
diff --git a/src/Plugin/DMU/Routing/ContentRoute.php b/src/Plugin/DMU/Routing/ContentRoute.php
index 5aba732..1f12243 100644
--- a/src/Plugin/DMU/Routing/ContentRoute.php
+++ b/src/Plugin/DMU/Routing/ContentRoute.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Routing;
 
+use Pharborist\Functions\FunctionDeclarationNode;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Routing\RouteProviderInterface;
@@ -32,12 +33,12 @@ class ContentRoute extends ConverterBase implements RouteConverterInterface, Con
   use StringTransformTrait;
 
   /**
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $rewriters;
 
@@ -87,7 +88,7 @@ class ContentRoute extends ConverterBase implements RouteConverterInterface, Con
    * Builds a parameter map from the aggregated arguments of the title,
    * access, and page callbacks.
    *
-   * @return \Drupal\drupalmoduleupgrader\Routing\ParameterMap
+   * @return ParameterMap
    */
   protected function buildParameterMap(TargetInterface $target, Drupal7Route $route) {
     $map = new ParameterMap(clone $route->getPath(), []);
@@ -169,7 +170,7 @@ class ContentRoute extends ConverterBase implements RouteConverterInterface, Con
 
     foreach ($map->toArray() as $function_name => $parameters) {
       if ($parameters && $indexer->has($function_name)) {
-        /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+        /** @var FunctionDeclarationNode $function */
         $function = $indexer->get($function_name);
         foreach ($parameters as $parameter_name => $info) {
           $parameter = $function->getParameterByName($parameter_name)->setName($info['name'], TRUE);
diff --git a/src/Plugin/DMU/Routing/FormRoute.php b/src/Plugin/DMU/Routing/FormRoute.php
index b6a4db5..81274f9 100644
--- a/src/Plugin/DMU/Routing/FormRoute.php
+++ b/src/Plugin/DMU/Routing/FormRoute.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Routing;
 
+use Drupal\drupalmoduleupgrader\Utility\FormConverter;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Routing\RouteProviderInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ -21,7 +22,7 @@ use Psr\Log\LoggerInterface;
 class FormRoute extends ContentRoute {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\FormConverter
+   * @var FormConverter
    */
   protected $formConverter;
 
diff --git a/src/PluginBase.php b/src/PluginBase.php
index 22da8dc..506a3a1 100644
--- a/src/PluginBase.php
+++ b/src/PluginBase.php
@@ -17,7 +17,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class PluginBase extends CorePluginBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $log;
 
diff --git a/src/Report.php b/src/Report.php
index e043699..ed8431d 100644
--- a/src/Report.php
+++ b/src/Report.php
@@ -8,7 +8,7 @@ namespace Drupal\drupalmoduleupgrader;
 class Report implements ReportInterface {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\IssueInterface[]
+   * @var IssueInterface[]
    */
   protected $issues = [];
 
diff --git a/src/RewriterInterface.php b/src/RewriterInterface.php
index a67b88d..065a229 100644
--- a/src/RewriterInterface.php
+++ b/src/RewriterInterface.php
@@ -18,7 +18,7 @@ interface RewriterInterface {
   /**
    * Parametrically rewrites the function containing the given parameter.
    *
-   * @param \Pharborist\Functions\ParameterNode $parameter
+   * @param ParameterNode $parameter
    *   The parameter upon which to base the rewrite. The parameter must be
    *   attached to a function or method declaration node, or fatal errors will
    *   likely result.
diff --git a/src/Routing/Drupal7/RouteWrapper.php b/src/Routing/Drupal7/RouteWrapper.php
index 428dea6..350175b 100644
--- a/src/Routing/Drupal7/RouteWrapper.php
+++ b/src/Routing/Drupal7/RouteWrapper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Routing\Drupal7;
 
+use Drupal\drupalmoduleupgrader\Routing\RouterInterface;
 use Doctrine\Common\Collections\ArrayCollection;
 use Drupal\drupalmoduleupgrader\Routing\RouterBuiltEvent;
 use Drupal\drupalmoduleupgrader\Routing\RouteWrapperInterface;
@@ -13,12 +14,12 @@ use Drupal\drupalmoduleupgrader\Utility\Path\Drupal7\PathUtility;
 class RouteWrapper extends ArrayCollection implements RouteWrapperInterface {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Path\Drupal7\PathUtility
+   * @var PathUtility
    */
   protected $path;
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Routing\RouterInterface
+   * @var RouterInterface
    */
   protected $router;
 
@@ -28,12 +29,12 @@ class RouteWrapper extends ArrayCollection implements RouteWrapperInterface {
   protected $parent;
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Routing\Drupal7\Router
+   * @var Router
    */
   protected $children;
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Routing\Drupal7\Router
+   * @var Router
    */
   protected $siblings;
 
@@ -225,7 +226,7 @@ class RouteWrapper extends ArrayCollection implements RouteWrapperInterface {
   /**
    * Returns the immediate children of this route.
    *
-   * @return \Drupal\drupalmoduleupgrader\Routing\Drupal7\Router
+   * @return Router
    */
   public function getChildren() {
     return $this->children;
@@ -243,7 +244,7 @@ class RouteWrapper extends ArrayCollection implements RouteWrapperInterface {
   /**
    * Gets the siblings of this route.
    *
-   * @return \Drupal\drupalmoduleupgrader\Routing\Drupal7\Router
+   * @return Router
    */
   public function getSiblings() {
     return $this->siblings;
diff --git a/src/Routing/Drupal8/RouteWrapper.php b/src/Routing/Drupal8/RouteWrapper.php
index 4e7e994..92e87b1 100644
--- a/src/Routing/Drupal8/RouteWrapper.php
+++ b/src/Routing/Drupal8/RouteWrapper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Routing\Drupal8;
 
+use Symfony\Component\Routing\RouteCollection;
 use Drupal\Core\Routing\RouteProviderInterface;
 use Drupal\drupalmoduleupgrader\Routing\RouterBuiltEvent;
 use Drupal\drupalmoduleupgrader\Routing\RouteWrapperInterface;
@@ -19,22 +20,22 @@ class RouteWrapper implements RouteWrapperInterface {
   protected $name;
 
   /**
-   * @var \Symfony\Component\Routing\Route
+   * @var Route
    */
   protected $route;
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Path\Drupal8\PathUtility
+   * @var PathUtility
    */
   protected $path;
 
   /**
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
-   * @var \Symfony\Component\Routing\RouteCollection
+   * @var RouteCollection
    */
   protected $router;
 
diff --git a/src/Routing/HookMenu.php b/src/Routing/HookMenu.php
index 01e9b98..bef7009 100644
--- a/src/Routing/HookMenu.php
+++ b/src/Routing/HookMenu.php
@@ -41,23 +41,23 @@ class HookMenu {
   protected $routeMap = [];
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\TargetInterface
+   * @var TargetInterface
    */
   protected $target;
 
   /**
    * The route converters' plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $routeConverters;
 
   /**
    * Constructs a HookMenu object.
    *
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    *   The target module.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $route_converters
+   * @param PluginManagerInterface $route_converters
    *   The route converters.
    */
   public function __construct(TargetInterface $target, PluginManagerInterface $route_converters) {
diff --git a/src/Routing/LinkBinding/LinkBinding.php b/src/Routing/LinkBinding/LinkBinding.php
index 98795cf..2fa16ae 100644
--- a/src/Routing/LinkBinding/LinkBinding.php
+++ b/src/Routing/LinkBinding/LinkBinding.php
@@ -31,7 +31,7 @@ class LinkBinding {
   /**
    * Index of all other links of this type.
    *
-   * @var \Drupal\drupalmoduleupgrader\Routing\LinkIndex
+   * @var LinkIndex
    */
   protected $index;
 
@@ -75,7 +75,7 @@ class LinkBinding {
    *
    * @param string $id
    *   The link's plugin ID, sanitized to prevent collisions.
-   * @param \Drupal\drupalmoduleupgrader\Routing\LinkIndex $index
+   * @param LinkIndex $index
    *   The link index.
    */
   public function onIndexed($id, LinkIndex $index) {
diff --git a/src/Routing/LinkBinding/LinkBindingFactory.php b/src/Routing/LinkBinding/LinkBindingFactory.php
index 721d05c..2ed3b39 100644
--- a/src/Routing/LinkBinding/LinkBindingFactory.php
+++ b/src/Routing/LinkBinding/LinkBindingFactory.php
@@ -12,7 +12,7 @@ use Drupal\drupalmoduleupgrader\Routing\Drupal8\RouteWrapper as Drupal8Route;
 class LinkBindingFactory {
 
   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   private $linkManager;
 
diff --git a/src/Routing/LinkBinding/LocalTaskLinkBinding.php b/src/Routing/LinkBinding/LocalTaskLinkBinding.php
index e861eda..fc0216c 100644
--- a/src/Routing/LinkBinding/LocalTaskLinkBinding.php
+++ b/src/Routing/LinkBinding/LocalTaskLinkBinding.php
@@ -12,7 +12,7 @@ use Drupal\drupalmoduleupgrader\Routing\Drupal8\RouteWrapper as Drupal8Route;
 class LocalTaskLinkBinding extends LinkBinding {
 
   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   private $linkManager;
 
diff --git a/src/Routing/LinkIndex.php b/src/Routing/LinkIndex.php
index 94e0ae7..f4ecdae 100644
--- a/src/Routing/LinkIndex.php
+++ b/src/Routing/LinkIndex.php
@@ -20,7 +20,7 @@ class LinkIndex extends ArrayCollection {
   /**
    * Adds a binding to this index.
    *
-   * @param \Drupal\drupalmoduleupgrader\Routing\LinkBinding\LinkBinding $binding
+   * @param LinkBinding $binding
    */
   public function addBinding(LinkBinding $binding) {
     $id = $binding->getIdentifier();
diff --git a/src/Routing/ParameterBinding.php b/src/Routing/ParameterBinding.php
index f47b18a..890caf5 100644
--- a/src/Routing/ParameterBinding.php
+++ b/src/Routing/ParameterBinding.php
@@ -14,12 +14,12 @@ use Pharborist\Types\ScalarNode;
 class ParameterBinding {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface
+   * @var PathUtilityInterface
    */
   protected $path;
 
   /**
-   * @var \Pharborist\Functions\ParameterNode
+   * @var ParameterNode
    */
   protected $parameter;
 
@@ -48,7 +48,7 @@ class ParameterBinding {
   /**
    * The original parameter node.
    *
-   * @return \Pharborist\Functions\ParameterNode
+   * @return ParameterNode
    */
   public function getParameter() {
     return $this->parameter;
diff --git a/src/Routing/ParameterMap.php b/src/Routing/ParameterMap.php
index a6db64a..9dcd960 100644
--- a/src/Routing/ParameterMap.php
+++ b/src/Routing/ParameterMap.php
@@ -15,7 +15,7 @@ use Symfony\Component\Routing\Route as Drupal8Route;
 class ParameterMap extends ArrayCollection {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface
+   * @var PathUtilityInterface
    */
   protected $path;
 
@@ -115,7 +115,7 @@ class ParameterMap extends ArrayCollection {
   /**
    * Applies the parameter map to a path, modifying it as needed.
    *
-   * @param \Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface $path
+   * @param PathUtilityInterface $path
    *   The path to modify (in-place).
    */
   public function applyPath(PathUtilityInterface $path) {
diff --git a/src/Routing/RouteConverterInterface.php b/src/Routing/RouteConverterInterface.php
index 22b1c77..03992ae 100644
--- a/src/Routing/RouteConverterInterface.php
+++ b/src/Routing/RouteConverterInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Routing;
 
+use Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface;
 use Drupal\drupalmoduleupgrader\Routing\Drupal7\RouteWrapper;
 use Drupal\drupalmoduleupgrader\TargetInterface;
 
@@ -30,7 +31,7 @@ interface RouteConverterInterface {
    * to parameters of the callback method which can accept input from the path.
    * Parameters are matched to slugs by name and type hint.
    *
-   * @return \Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface
+   * @return PathUtilityInterface
    */
   public function buildPath(TargetInterface $target, RouteWrapper $route);
 
diff --git a/src/Routing/RouteWrapperInterface.php b/src/Routing/RouteWrapperInterface.php
index a2b7d6b..a4308ed 100644
--- a/src/Routing/RouteWrapperInterface.php
+++ b/src/Routing/RouteWrapperInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Routing;
 
+use Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface;
 /**
  * Common interface implemented by classes which wrap around Drupal 7 or
  * Drupal 8 routes.
@@ -18,7 +19,7 @@ interface RouteWrapperInterface {
   /**
    * Returns a PathUtilityInterface implementation for the route.
    *
-   * @return \Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface
+   * @return PathUtilityInterface
    */
   public function getPath();
 
diff --git a/src/Routing/RouterBase.php b/src/Routing/RouterBase.php
index 1bb7ae1..fe3d15d 100644
--- a/src/Routing/RouterBase.php
+++ b/src/Routing/RouterBase.php
@@ -11,7 +11,7 @@ use Symfony\Component\EventDispatcher\EventDispatcher;
 class RouterBase extends ArrayCollection implements RouterInterface {
 
   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $dispatcher;
 
@@ -35,7 +35,7 @@ class RouterBase extends ArrayCollection implements RouterInterface {
    * {@inheritdoc}
    */
   public function finalize() {
-    $this->dispatcher->dispatch('router.built', new RouterBuiltEvent($this));
+    $this->dispatcher->dispatch(new RouterBuiltEvent($this), 'router.built');
   }
 
 }
diff --git a/src/Routing/RouterBuiltEvent.php b/src/Routing/RouterBuiltEvent.php
index ddbe3d5..6c2f9ec 100644
--- a/src/Routing/RouterBuiltEvent.php
+++ b/src/Routing/RouterBuiltEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Routing;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event object fired when all routes have been added to a RouterInterface
diff --git a/src/Target.php b/src/Target.php
index 60451a5..edb9737 100644
--- a/src/Target.php
+++ b/src/Target.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader;
 
+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Doctrine\Common\Collections\ArrayCollection;
 use Pharborist\Node;
@@ -23,7 +24,7 @@ class Target implements TargetInterface {
   protected $id;
 
   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $indexerManager;
 
@@ -40,14 +41,14 @@ class Target implements TargetInterface {
   protected $indexers = [];
 
   /**
-   * @var \Doctrine\Common\Collections\ArrayCollection
+   * @var ArrayCollection
    */
   protected $services;
 
   /**
    * All open documents.
    *
-   * @var \Pharborist\RootNode[]
+   * @var RootNode[]
    */
   protected $documents = [];
 
@@ -56,7 +57,7 @@ class Target implements TargetInterface {
    *
    * @param string $path
    *   The base path of the target module.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The current container, to pull any dependencies out of.
    */
   public function __construct($path, ContainerInterface $container) {
diff --git a/src/TargetInterface.php b/src/TargetInterface.php
index 007a6a6..bff2df5 100644
--- a/src/TargetInterface.php
+++ b/src/TargetInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\drupalmoduleupgrader;
 
+use Symfony\Component\Finder\Finder;
+use Doctrine\Common\Collections\ArrayCollection;
+use Pharborist\RootNode;
 use Pharborist\Node;
 
 /**
@@ -39,7 +42,7 @@ interface TargetInterface {
    * module's code files. Any file type which doesn't contain PHP code
    * should be ignored.
    *
-   * @return \Symfony\Component\Finder\Finder
+   * @return Finder
    */
   public function getFinder();
 
@@ -56,7 +59,7 @@ interface TargetInterface {
   /**
    * Returns services defined by the target module.
    *
-   * @return \Doctrine\Common\Collections\ArrayCollection
+   * @return ArrayCollection
    */
   public function getServices();
 
@@ -93,18 +96,18 @@ interface TargetInterface {
    * @param string $file
    *   The path of the file to open, relative to the CWD.
    *
-   * @return \Pharborist\RootNode|null
+   * @return RootNode|null
    */
   public function open($file);
 
   /**
    * Saves the file in which a particular node appears.
    *
-   * @param \Pharborist\Node|null $node
+   * @param Node|null $node
    *   The node to save. This can be positioned anywhere in the
    *   syntax tree. If NULL, all open files will be saved.
    *
-   * @throws \Drupal\drupalmoduleupgrader\IOException
+   * @throws IOException
    */
   public function save(Node $node = NULL);
 
@@ -114,7 +117,7 @@ interface TargetInterface {
    * @param string $file
    *   The path of the file to create, relative to the CWD.
    *
-   * @return \Pharborist\RootNode
+   * @return RootNode
    */
   public function create($file);
 
diff --git a/src/Utility/Filter/ContainsLogicFilter.php b/src/Utility/Filter/ContainsLogicFilter.php
index 0efe9a8..4fbb538 100644
--- a/src/Utility/Filter/ContainsLogicFilter.php
+++ b/src/Utility/Filter/ContainsLogicFilter.php
@@ -44,7 +44,7 @@ class ContainsLogicFilter {
    * Tests if a function contains logic: any branching operator, function
    * call, or object instantiation.
    *
-   * @param \Pharborist\ParentNode $node
+   * @param ParentNode $node
    *   The node to test.
    *
    * @return bool
diff --git a/src/Utility/Filter/NodeAssignmentFilter.php b/src/Utility/Filter/NodeAssignmentFilter.php
index 70cde9f..b8ae4fa 100644
--- a/src/Utility/Filter/NodeAssignmentFilter.php
+++ b/src/Utility/Filter/NodeAssignmentFilter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Utility\Filter;
 
+use Pharborist\Operators\AssignNode;
 use Pharborist\Filter;
 use Pharborist\Node;
 
@@ -10,13 +11,13 @@ class NodeAssignmentFilter {
   /**
    * Tests if the given node is on the left side of an assignment.
    *
-   * @param \Pharborist\Node $node
+   * @param Node $node
    *   The node to test.
    *
    * @return bool
    */
   public function __invoke(Node $node) {
-    /** @var \Pharborist\Operators\AssignNode $assignment */
+    /** @var AssignNode $assignment */
     $assignment = $node->closest(Filter::isInstanceOf('\Pharborist\Operators\AssignNode'));
     return ($assignment ? $assignment->getLeftOperand() === $node : FALSE);
   }
diff --git a/src/Utility/FormConverter.php b/src/Utility/FormConverter.php
index 0065fda..c0fc33e 100644
--- a/src/Utility/FormConverter.php
+++ b/src/Utility/FormConverter.php
@@ -23,7 +23,7 @@ class FormConverter {
   use StringTransformTrait;
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\TargetInterface
+   * @var TargetInterface
    */
   protected $target;
 
@@ -33,17 +33,17 @@ class FormConverter {
   protected $formID;
 
   /**
-   * @var \Pharborist\Functions\FunctionDeclarationNode
+   * @var FunctionDeclarationNode
    */
   protected $builder;
 
   /**
-   * @var \Pharborist\Functions\FunctionDeclarationNode
+   * @var FunctionDeclarationNode
    */
   protected $validator;
 
   /**
-   * @var \Pharborist\Functions\FunctionDeclarationNode
+   * @var FunctionDeclarationNode
    */
   protected $submitHandler;
 
@@ -53,12 +53,12 @@ class FormConverter {
   protected $isConfig;
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\RewriterInterface
+   * @var RewriterInterface
    */
   protected $formStateRewriter;
 
   /**
-   * @var \Pharborist\Objects\ClassNode
+   * @var ClassNode
    */
   protected $controller;
 
@@ -84,7 +84,7 @@ class FormConverter {
   }
 
   /**
-   * @return \Pharborist\Objects\ClassNode
+   * @return ClassNode
    */
   public function render() {
     if (empty($this->controller)) {
@@ -103,7 +103,7 @@ class FormConverter {
   }
 
   /**
-   * @return \Pharborist\Objects\ClassNode
+   * @return ClassNode
    */
   public function build() {
     $controller = $this->render();
@@ -138,7 +138,7 @@ class FormConverter {
   }
 
   /**
-   * @return \Pharborist\Objects\ClassMethodNode
+   * @return ClassMethodNode
    */
   protected function addMethod(FunctionDeclarationNode $function, ClassNode $class, $alias = NULL) {
     $method = ClassMethodNode::fromFunction($function);
diff --git a/src/Utility/FormConverterFactory.php b/src/Utility/FormConverterFactory.php
index 9f40291..bcf5023 100644
--- a/src/Utility/FormConverterFactory.php
+++ b/src/Utility/FormConverterFactory.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drupalmoduleupgrader\Utility;
 
+use Drupal\drupalmoduleupgrader\RewriterInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ -12,7 +13,7 @@ class FormConverterFactory {
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\RewriterInterface
+   * @var RewriterInterface
    */
   protected $rewriter;
 
@@ -24,7 +25,7 @@ class FormConverterFactory {
   /**
    * Creates a FormConverter for a specific form.
    *
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    *   The module which defines the form.
    * @param string $form_id
    *   The original form ID.
diff --git a/src/Utility/Path/PathUtilityBase.php b/src/Utility/Path/PathUtilityBase.php
index 3d90b35..fbf83d4 100644
--- a/src/Utility/Path/PathUtilityBase.php
+++ b/src/Utility/Path/PathUtilityBase.php
@@ -92,7 +92,7 @@ abstract class PathUtilityBase extends ArrayCollection implements PathUtilityInt
   /**
    * Returns the next wildcard, if any.
    *
-   * @return \Drupal\drupalmoduleupgrader\Utility\Path\PathComponentInterface|null
+   * @return PathComponentInterface|null
    */
   public function getNextWildcard() {
     $wildcards = $this->getWildcards()->slice($this->_wildcard, 1);
diff --git a/src/Utility/Path/PathUtilityInterface.php b/src/Utility/Path/PathUtilityInterface.php
index ba4490b..287b035 100644
--- a/src/Utility/Path/PathUtilityInterface.php
+++ b/src/Utility/Path/PathUtilityInterface.php
@@ -25,7 +25,7 @@ interface PathUtilityInterface extends CollectionInterface {
    * @param mixed $value
    *   The value to wrap.
    *
-   * @return \Drupal\drupalmoduleupgrader\Utility\Path\PathComponentInterface
+   * @return PathComponentInterface
    */
   public static function getComponent($value);
 
diff --git a/templates/EventSubscriber.html.twig b/templates/EventSubscriber.html.twig
index 7c7c421..f39cff4 100644
--- a/templates/EventSubscriber.html.twig
+++ b/templates/EventSubscriber.html.twig
@@ -6,7 +6,7 @@
 namespace Drupal\{{ module }}\EventSubscriber;
 
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Symfony\Contracts\EventDispatcher\EventSubscriberInterface;
 
 class {{ class }} implements EventSubscriberInterface {
 
diff --git a/tests/src/Unit/ContainerMockTrait.php b/tests/src/Unit/ContainerMockTrait.php
index 36b2f41..4cfa6e5 100644
--- a/tests/src/Unit/ContainerMockTrait.php
+++ b/tests/src/Unit/ContainerMockTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit;
 
+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 
 /**
@@ -11,7 +12,7 @@ use Drupal\Core\DependencyInjection\ContainerBuilder;
 trait ContainerMockTrait {
 
   /**
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
diff --git a/tests/src/Unit/IssueTest.php b/tests/src/Unit/IssueTest.php
index e4813dc..fa257ba 100644
--- a/tests/src/Unit/IssueTest.php
+++ b/tests/src/Unit/IssueTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit;
 
+use Drupal\drupalmoduleupgrader\IssueInterface;
 use Drupal\drupalmoduleupgrader\Issue;
 use Pharborist\Filter;
 
@@ -11,11 +12,11 @@ use Pharborist\Filter;
 class IssueTest extends TestBase {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\IssueInterface
+   * @var IssueInterface
    */
   private $issue;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->issue = new Issue($this->target, 'Foobaz');
   }
@@ -33,7 +34,7 @@ class IssueTest extends TestBase {
   public function testDocumentation() {
     $this->issue->addDocumentation('http://www.google.com', 'Just Google it, baby!');
     $documentation = $this->issue->getDocumentation();
-    $this->assertInternalType('array', $documentation);
+    $this->assertIsArray($documentation);
     $this->assertCount(1, $documentation);
     $this->assertArrayHasKey('url', $documentation[0]);
     $this->assertArrayHasKey('title', $documentation[0]);
@@ -42,7 +43,7 @@ class IssueTest extends TestBase {
   }
 
   public function testViolationsAndDetectors() {
-    $analyzer = $this->getMockBuilder('\Drupal\drupalmoduleupgrader\AnalyzerBase')->disableOriginalConstructor()->getMock();
+    $analyzer = $this->createMock('\Drupal\drupalmoduleupgrader\AnalyzerBase');
     $analyzer->method('getPluginId')->willReturn('blarg');
     $this->issue->addAffectedFile($this->dir->getChild('foo.info')->url(), $analyzer);
 
@@ -65,7 +66,7 @@ END;
     $this->issue->addViolation($node, $analyzer);
 
     $violations = $this->issue->getViolations();
-    $this->assertInternalType('array', $violations);
+    $this->assertIsArray($violations);
     $this->assertCount(2, $violations);
     $this->assertArrayHasKey('file', $violations[0]);
     $this->assertArrayNotHasKey('line_number', $violations[0]);
@@ -75,7 +76,7 @@ END;
     $this->assertEquals($this->dir->getChild('foo.module')->url(), $violations[1]['file']);
 
     $detectors = $this->issue->getDetectors();
-    $this->assertInternalType('array', $detectors);
+    $this->assertIsArray($detectors);
     $this->assertCount(1, $detectors);
     $this->assertEquals($analyzer->getPluginId(), $detectors[0]);
   }
@@ -85,7 +86,7 @@ END;
     $this->issue->addFix('baz', ['bar' => 'wambooli']);
 
     $fixes = $this->issue->getFixes();
-    $this->assertInternalType('array', $fixes);
+    $this->assertIsArray($fixes);
     $this->assertCount(2, $fixes);
     $this->assertEquals(['_plugin_id' => 'foo'], $fixes[0]);
     $this->assertEquals(['_plugin_id' => 'baz', 'bar' => 'wambooli'], $fixes[1]);
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/AnalyzerTestBase.php b/tests/src/Unit/Plugin/DMU/Analyzer/AnalyzerTestBase.php
index 0e8cb0b..6f05e2f 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/AnalyzerTestBase.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/AnalyzerTestBase.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Analyzer;
 
+use Drupal\drupalmoduleupgrader\AnalyzerInterface;
 use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;
 
 abstract class AnalyzerTestBase extends TestBase {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\AnalyzerInterface
+   * @var AnalyzerInterface
    */
   protected $analyzer;
 
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/DBTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/DBTest.php
index cb0c54b..53de941 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/DBTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/DBTest.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\FunctionCalls;
  */
 class DBTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -41,7 +41,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/FlagHookTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/FlagHookTest.php
index 338d66f..d2f96a2 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/FlagHookTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/FlagHookTest.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions;
  */
 class FlagHookTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -38,7 +38,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/FunctionCallTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/FunctionCallTest.php
index 7e11d14..5b8a185 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/FunctionCallTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/FunctionCallTest.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\FunctionCalls;
  */
 class FunctionCallTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -39,7 +39,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/HookFormAlterTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/HookFormAlterTest.php
index 5dd474d..92360ef 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/HookFormAlterTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/HookFormAlterTest.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions;
  */
 class HookFormAlterTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -44,7 +44,7 @@ END;
 
   public function testHookFormAlter() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(2, $issues[0]->getViolations());
@@ -52,7 +52,7 @@ END;
 
   public function testDerivedFormAlter() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(2, $issues[0]->getViolations());
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/HookPermissionTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/HookPermissionTest.php
index 3ce57df..dd01c1b 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/HookPermissionTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/HookPermissionTest.php
@@ -14,7 +14,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions;
  */
 class HookPermissionTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -42,7 +42,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/HookUninstallTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/HookUninstallTest.php
index 59f04e8..2b55a81 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/HookUninstallTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/HookUninstallTest.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions;
  */
 class HookUninstalltest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -38,7 +38,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/InfoFileTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/InfoFileTest.php
index cf1820c..987104b 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/InfoFileTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/InfoFileTest.php
@@ -8,7 +8,7 @@ namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Analyzer;
  */
 class InfoFileTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $info = <<<'END'
@@ -27,7 +27,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertArrayHasKey('core', $issues);
     $this->assertArrayHasKey('type', $issues);
     $this->assertArrayNotHasKey('dependencies', $issues);
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/PSR4Test.php b/tests/src/Unit/Plugin/DMU/Analyzer/PSR4Test.php
index ccd0ae3..1af3ba2 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/PSR4Test.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/PSR4Test.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Classes;
  */
 class PSR4Test extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -33,7 +33,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
   }
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/TestsTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/TestsTest.php
index 7880e3b..5d6e808 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/TestsTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/TestsTest.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Classes;
  */
 class TestsTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -34,7 +34,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
   }
diff --git a/tests/src/Unit/Plugin/DMU/Converter/Functions/CToolsGetPluginsTest.php b/tests/src/Unit/Plugin/DMU/Converter/Functions/CToolsGetPluginsTest.php
index 0c5858b..75fd7f0 100644
--- a/tests/src/Unit/Plugin/DMU/Converter/Functions/CToolsGetPluginsTest.php
+++ b/tests/src/Unit/Plugin/DMU/Converter/Functions/CToolsGetPluginsTest.php
@@ -11,7 +11,7 @@ use Pharborist\Parser;
  */
 class CToolsGetPluginsTest extends FunctionCallModifierTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = CToolsGetPlugins::create($this->container, [], 'ctools_get_plugins', []);
   }
diff --git a/tests/src/Unit/Plugin/DMU/Converter/Functions/DBTest.php b/tests/src/Unit/Plugin/DMU/Converter/Functions/DBTest.php
index 6cd9ee6..a37bb4e 100644
--- a/tests/src/Unit/Plugin/DMU/Converter/Functions/DBTest.php
+++ b/tests/src/Unit/Plugin/DMU/Converter/Functions/DBTest.php
@@ -13,7 +13,7 @@ use Pharborist\Parser;
  */
 class DBTest extends FunctionCallModifierTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = $this->getPlugin([], ['function' => 'db_select']);
   }
diff --git a/tests/src/Unit/Plugin/DMU/Converter/Functions/DisableTest.php b/tests/src/Unit/Plugin/DMU/Converter/Functions/DisableTest.php
index 52b6f50..fd737f0 100644
--- a/tests/src/Unit/Plugin/DMU/Converter/Functions/DisableTest.php
+++ b/tests/src/Unit/Plugin/DMU/Converter/Functions/DisableTest.php
@@ -13,7 +13,7 @@ use Pharborist\Parser;
  */
 class DisableTest extends FunctionCallModifierTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = $this->getPlugin([], ['function' => 'field_create_field']);
   }
diff --git a/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalGetTitleTest.php b/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalGetTitleTest.php
index 85530e0..66da71e 100644
--- a/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalGetTitleTest.php
+++ b/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalGetTitleTest.php
@@ -10,7 +10,7 @@ use Pharborist\Parser;
  */
 class DrupalGetTitleTest extends FunctionCallModifierTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = $this->getPlugin();
   }
diff --git a/tests/src/Unit/Plugin/DMU/Converter/Functions/FunctionCallModifierTestBase.php b/tests/src/Unit/Plugin/DMU/Converter/Functions/FunctionCallModifierTestBase.php
index 32f839a..ab1d4f5 100644
--- a/tests/src/Unit/Plugin/DMU/Converter/Functions/FunctionCallModifierTestBase.php
+++ b/tests/src/Unit/Plugin/DMU/Converter/Functions/FunctionCallModifierTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Converter\Functions;
 
+use Drupal\drupalmoduleupgrader\Plugin\DMU\Converter\Functions\FunctionCallModifier;
 use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;
 
 /**
@@ -14,14 +15,14 @@ abstract class FunctionCallModifierTestBase extends TestBase {
   /**
    * The plugin object under test.
    *
-   * @var \Drupal\drupalmoduleupgrader\Plugin\DMU\Converter\Functions\FunctionCallModifier
+   * @var FunctionCallModifier
    */
   protected $plugin;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = $this->getPlugin();
   }
diff --git a/tests/src/Unit/Plugin/DMU/Converter/Functions/GetTTest.php b/tests/src/Unit/Plugin/DMU/Converter/Functions/GetTTest.php
index 6ab4d67..e18167a 100644
--- a/tests/src/Unit/Plugin/DMU/Converter/Functions/GetTTest.php
+++ b/tests/src/Unit/Plugin/DMU/Converter/Functions/GetTTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Converter\Functions;
 
+use Pharborist\Types\StringNode;
 use Pharborist\Parser;
 
 /**
@@ -12,7 +13,7 @@ class GetTTest extends FunctionCallModifierTestBase {
 
   public function testRewrite() {
     $function_call = Parser::parseExpression('get_t()');
-    /** @var \Pharborist\Types\StringNode $rewritten */
+    /** @var StringNode $rewritten */
     $rewritten = $this->plugin->rewrite($function_call, $this->target);
     $this->assertInstanceOf('\Pharborist\Types\StringNode', $rewritten);
     $this->assertEquals('t', $rewritten->toValue());
diff --git a/tests/src/Unit/Plugin/DMU/Converter/Functions/StTest.php b/tests/src/Unit/Plugin/DMU/Converter/Functions/StTest.php
index 3bb9457..9b8e9c9 100644
--- a/tests/src/Unit/Plugin/DMU/Converter/Functions/StTest.php
+++ b/tests/src/Unit/Plugin/DMU/Converter/Functions/StTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Converter\Functions;
 
+use Pharborist\Functions\FunctionCallNode;
 use Pharborist\Parser;
 
 /**
@@ -12,7 +13,7 @@ class StTest extends FunctionCallModifierTestBase {
 
   public function testRewrite() {
     $function_call = Parser::parseExpression('st("I translate thee!")');
-    /** @var \Pharborist\Functions\FunctionCallNode $rewritten */
+    /** @var FunctionCallNode $rewritten */
     $rewritten = $this->plugin->rewrite($function_call, $this->target);
     $this->assertSame($function_call, $rewritten);
     $this->assertEquals('t("I translate thee!")', $rewritten->getText());
diff --git a/tests/src/Unit/Plugin/DMU/Fixer/CreateClassTest.php b/tests/src/Unit/Plugin/DMU/Fixer/CreateClassTest.php
index 48d8e71..816cc08 100644
--- a/tests/src/Unit/Plugin/DMU/Fixer/CreateClassTest.php
+++ b/tests/src/Unit/Plugin/DMU/Fixer/CreateClassTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Fixer;
 
+use Pharborist\Objects\ClassNode;
 use Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer\CreateClass;
 use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Classes;
 use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;
@@ -39,7 +40,7 @@ class CreateClassTest extends TestBase {
     $this->assertTrue($indexer->has('MyBaz'));
     $classes = $indexer->getMultiple(['MyBaz']);
     $this->assertCount(1, $classes);
-    /** @var \Pharborist\Objects\ClassNode $class */
+    /** @var ClassNode $class */
     $class = $classes->get(0);
     $this->assertInstanceOf('\Pharborist\Objects\ClassNode', $class);
     $this->assertEquals('\Drupal\foo\MyBaz', $class->getName()->getAbsolutePath());
diff --git a/tests/src/Unit/Plugin/DMU/Fixer/HookToYAMLTest.php b/tests/src/Unit/Plugin/DMU/Fixer/HookToYAMLTest.php
index 70d0b20..3df2fbc 100644
--- a/tests/src/Unit/Plugin/DMU/Fixer/HookToYAMLTest.php
+++ b/tests/src/Unit/Plugin/DMU/Fixer/HookToYAMLTest.php
@@ -18,9 +18,7 @@ class HookToYAMLTest extends TestBase {
       ],
     ];
 
-    $indexer = $this->getMockBuilder('\Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $indexer = $this->createMock('\Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions');
     $indexer->method('has')->with('hook_permission')->willReturn(TRUE);
     $indexer->method('hasExecutable')->with('hook_permission')->willReturn(TRUE);
     $indexer->method('execute')->with('hook_permission')->willReturn($permissions);
diff --git a/tests/src/Unit/Plugin/DMU/Indexer/ClassesTest.php b/tests/src/Unit/Plugin/DMU/Indexer/ClassesTest.php
index b45dca8..32680fc 100644
--- a/tests/src/Unit/Plugin/DMU/Indexer/ClassesTest.php
+++ b/tests/src/Unit/Plugin/DMU/Indexer/ClassesTest.php
@@ -13,7 +13,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Classes;
  */
 class ClassesTest extends IndexerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
diff --git a/tests/src/Unit/Plugin/DMU/Indexer/FunctionsTest.php b/tests/src/Unit/Plugin/DMU/Indexer/FunctionsTest.php
index 627d819..66d3ee4 100644
--- a/tests/src/Unit/Plugin/DMU/Indexer/FunctionsTest.php
+++ b/tests/src/Unit/Plugin/DMU/Indexer/FunctionsTest.php
@@ -13,7 +13,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions;
  */
 class FunctionsTest extends IndexerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
diff --git a/tests/src/Unit/Plugin/DMU/Indexer/IndexerTestBase.php b/tests/src/Unit/Plugin/DMU/Indexer/IndexerTestBase.php
index 082c164..da4ca8a 100644
--- a/tests/src/Unit/Plugin/DMU/Indexer/IndexerTestBase.php
+++ b/tests/src/Unit/Plugin/DMU/Indexer/IndexerTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Indexer;
 
+use Drupal\drupalmoduleupgrader\IndexerInterface;
 use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;
 
 /**
@@ -12,7 +13,7 @@ use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;
 abstract class IndexerTestBase extends TestBase {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\IndexerInterface
+   * @var IndexerInterface
    */
   protected $indexer;
 
diff --git a/tests/src/Unit/Plugin/DMU/Rewriter/FormStateTest.php b/tests/src/Unit/Plugin/DMU/Rewriter/FormStateTest.php
index ef15773..01e70ed 100644
--- a/tests/src/Unit/Plugin/DMU/Rewriter/FormStateTest.php
+++ b/tests/src/Unit/Plugin/DMU/Rewriter/FormStateTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Rewriter;
 
+use Drupal\drupalmoduleupgrader\RewriterInterface;
+use Pharborist\Operators\AssignNode;
 use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;
 use Pharborist\Parser;
 
@@ -12,11 +14,11 @@ use Pharborist\Parser;
 class FormStateTest extends TestBase {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\RewriterInterface
+   * @var RewriterInterface
    */
   protected $plugin;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $definition = [
@@ -62,7 +64,7 @@ class FormStateTest extends TestBase {
   }
 
   public function testRewriteValuesAsSetter() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$form_state["values"]["foo"] = "baz"');
     $rewritten = $this->plugin->rewriteAsSetter($expr->getLeftOperand(), 'values', $expr);
     $this->assertInstanceOf('\Pharborist\Objects\ObjectMethodCallNode', $rewritten);
@@ -75,7 +77,7 @@ class FormStateTest extends TestBase {
   }
 
   public function testRewriteKnownPropertyAsSetter() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$form_state["input"] = array()');
     $rewritten = $this->plugin->rewriteAsSetter($expr->getLeftOperand(), 'input', $expr);
     $this->assertInstanceOf('\Pharborist\Objects\ObjectMethodCallNode', $rewritten);
@@ -83,7 +85,7 @@ class FormStateTest extends TestBase {
   }
 
   public function testRewriteArbitraryKeyAsSetter() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$form_state["foo"]["baz"] = "bar"');
     $rewritten = $this->plugin->rewriteAsSetter($expr->getLeftOperand(), 'foo', $expr);
     $this->assertInstanceOf('\Pharborist\Objects\ObjectMethodCallNode', $rewritten);
diff --git a/tests/src/Unit/Plugin/DMU/Rewriter/GenericTest.php b/tests/src/Unit/Plugin/DMU/Rewriter/GenericTest.php
index fdf5aaf..5995b75 100644
--- a/tests/src/Unit/Plugin/DMU/Rewriter/GenericTest.php
+++ b/tests/src/Unit/Plugin/DMU/Rewriter/GenericTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Rewriter;
 
+use Drupal\drupalmoduleupgrader\RewriterInterface;
+use Pharborist\Objects\ObjectPropertyNode;
+use Pharborist\Operators\AssignNode;
+use Pharborist\ArrayLookupNode;
+use Pharborist\Functions\FunctionDeclarationNode;
 use Drupal\drupalmoduleupgrader\Plugin\DMU\Rewriter\Generic as GenericRewriter;
 use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;
 use Pharborist\Parser;
@@ -13,11 +18,11 @@ use Pharborist\Parser;
 class GenericTest extends TestBase {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\RewriterInterface
+   * @var RewriterInterface
    */
   protected $plugin;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $definition = [
@@ -35,7 +40,7 @@ class GenericTest extends TestBase {
   }
 
   public function testRewriteValidPropertyAsGetter() {
-    /** @var \Pharborist\Objects\ObjectPropertyNode $expr */
+    /** @var ObjectPropertyNode $expr */
     $expr = Parser::parseExpression('$node->nid');
     $rewritten = $this->plugin->rewriteAsGetter($expr, 'nid');
     $this->assertInstanceOf('\Pharborist\Objects\ObjectMethodCallNode', $rewritten);
@@ -43,14 +48,14 @@ class GenericTest extends TestBase {
   }
 
   public function testRewriteInvalidPropertyAsGetter() {
-    /** @var \Pharborist\Objects\ObjectPropertyNode $expr */
+    /** @var ObjectPropertyNode $expr */
     $expr = Parser::parseExpression('$node->baz');
     $rewritten = $this->plugin->rewriteAsGetter($expr, 'baz');
     $this->assertNull($rewritten);
   }
 
   public function testRewriteValidPropertyAsSetter() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$node->title = "Foobaz"');
     $rewritten = $this->plugin->rewriteAsSetter($expr->getLeftOperand(), 'title', $expr);
     $this->assertInstanceOf('\Pharborist\Objects\ObjectMethodCallNode', $rewritten);
@@ -58,19 +63,19 @@ class GenericTest extends TestBase {
   }
 
   public function testRewriteInvalidPropertyAsSetter() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$node->baz = "Blorf!"');
     $rewritten = $this->plugin->rewriteAsSetter($expr->getLeftOperand(), 'baz', $expr);
     $this->assertNull($rewritten);
 
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$node->nid = 30');
     $rewritten = $this->plugin->rewriteAsSetter($expr->getLeftOperand(), 'nid', $expr);
     $this->assertNull($rewritten);
   }
 
   public function testRewriteFieldLookup() {
-    /** @var \Pharborist\ArrayLookupNode $lookup */
+    /** @var ArrayLookupNode $lookup */
     $lookup = Parser::parseExpression('$node->field_foo[LANGUAGE_NONE][0]["value"]');
     $rewritten = GenericRewriter::rewriteFieldLookup($lookup);
     $this->assertInstanceOf('\Pharborist\Objects\ObjectPropertyNode', $rewritten);
@@ -104,7 +109,7 @@ function foo($baz) {
   }
 }
 END;
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $func */
+    /** @var FunctionDeclarationNode $func */
     $func = Parser::parseSnippet($code);
     $this->plugin->rewrite($func->getParameterAtIndex(0));
 
@@ -124,7 +129,7 @@ function foo($baz) {
   }
 }
 END;
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $func */
+    /** @var FunctionDeclarationNode $func */
     $func = Parser::parseSnippet($code);
     $this->plugin->rewrite($func->getParameterAtIndex(0));
 
diff --git a/tests/src/Unit/ReportTest.php b/tests/src/Unit/ReportTest.php
index 68b5800..9d21f23 100644
--- a/tests/src/Unit/ReportTest.php
+++ b/tests/src/Unit/ReportTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit;
 
+use Drupal\drupalmoduleupgrader\ReportInterface;
 use Drupal\drupalmoduleupgrader\Issue;
 use Drupal\drupalmoduleupgrader\Report;
 
@@ -11,11 +12,11 @@ use Drupal\drupalmoduleupgrader\Report;
 class ReportTest extends TestBase {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\ReportInterface
+   * @var ReportInterface
    */
   private $report;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->report = new Report();
   }
diff --git a/tests/src/Unit/Routing/Drupal7/RouterTest.php b/tests/src/Unit/Routing/Drupal7/RouterTest.php
index 344ad95..87653c5 100644
--- a/tests/src/Unit/Routing/Drupal7/RouterTest.php
+++ b/tests/src/Unit/Routing/Drupal7/RouterTest.php
@@ -13,7 +13,7 @@ class RouterTest extends UnitTestCase {
 
   private $router;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->router = new Router();
 
diff --git a/tests/src/Unit/Routing/Drupal8/RouteWrapperTest.php b/tests/src/Unit/Routing/Drupal8/RouteWrapperTest.php
index 133363b..103be91 100644
--- a/tests/src/Unit/Routing/Drupal8/RouteWrapperTest.php
+++ b/tests/src/Unit/Routing/Drupal8/RouteWrapperTest.php
@@ -13,7 +13,7 @@ class RouteWrapperTest extends UnitTestCase {
 
   private $route, $wrapper;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->route = new Route('user/{user}/edit');
     $this->wrapper = new RouteWrapper('user.edit', $this->route, $this->createMock('\Drupal\Core\Routing\RouteProviderInterface'));
diff --git a/tests/src/Unit/Routing/LinkBinding/LinkBindingTest.php b/tests/src/Unit/Routing/LinkBinding/LinkBindingTest.php
index df8ba6a..2ab9dfe 100644
--- a/tests/src/Unit/Routing/LinkBinding/LinkBindingTest.php
+++ b/tests/src/Unit/Routing/LinkBinding/LinkBindingTest.php
@@ -16,7 +16,7 @@ class LinkBindingTest extends UnitTestCase {
 
   private $source, $destination;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $item = [
       'title' => 'Diff',
diff --git a/tests/src/Unit/Routing/ParameterBindingTest.php b/tests/src/Unit/Routing/ParameterBindingTest.php
index 214fec5..b35271d 100644
--- a/tests/src/Unit/Routing/ParameterBindingTest.php
+++ b/tests/src/Unit/Routing/ParameterBindingTest.php
@@ -14,11 +14,11 @@ use Pharborist\Types\StringNode;
 class ParameterBindingTest extends UnitTestCase {
 
   /**
-   * @var \Pharborist\Functions\ParameterNode
+   * @var ParameterNode
    */
   private $parameter;
 
-  public function setUp() {
+  public function setUp(): void {
     // ParameterNode supports variadic parameters, which use the T_ELLIPSIS
     // token. Which will be undefined on any PHP older than 5.6. So this kludges
     // around that.
diff --git a/tests/src/Unit/Routing/RouterBaseTest.php b/tests/src/Unit/Routing/RouterBaseTest.php
index 0934f03..e1c7852 100644
--- a/tests/src/Unit/Routing/RouterBaseTest.php
+++ b/tests/src/Unit/Routing/RouterBaseTest.php
@@ -15,7 +15,7 @@ class RouterBaseTest extends UnitTestCase {
 
   private $userEdit, $userView, $userRoot, $routeProvider;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->userEdit = new Route('/user/{user}/edit');
     $this->userView = new Route('/user/{user}');
diff --git a/tests/src/Unit/TargetTest.php b/tests/src/Unit/TargetTest.php
index 2844858..25e9aff 100644
--- a/tests/src/Unit/TargetTest.php
+++ b/tests/src/Unit/TargetTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit;
 
+use Drupal\drupalmoduleupgrader\IndexerInterface;
 use Drupal\drupalmoduleupgrader\Target;
 
 /**
@@ -10,16 +11,14 @@ use Drupal\drupalmoduleupgrader\Target;
 class TargetTest extends TestBase {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\IndexerInterface
+   * @var IndexerInterface
    */
   protected $indexer;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
-    $this->indexer = $this->getMockBuilder('\Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->indexer = $this->createMock('\Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions');
 
     $this->container
       ->get('plugin.manager.drupalmoduleupgrader.indexer')
@@ -28,10 +27,8 @@ class TargetTest extends TestBase {
       ->willReturn($this->indexer);
   }
 
-  /**
-   * @expectedException \RuntimeException
-   */
   public function testInvalidBasePath() {
+    $this->expectException(\RuntimeException::class);
     // Trying to create a target with an invalid path should instantly
     // throw an exception.
     new Target('foobar', $this->container);
@@ -86,10 +83,8 @@ class TargetTest extends TestBase {
     $this->assertFalse($this->target->implementsHook('menu_alter'));
   }
 
-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testExecuteUnimplementedHook() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->indexer->method('has')->with('hook_menu')->willReturn(FALSE);
     $this->target->executeHook('menu');
   }
@@ -106,7 +101,7 @@ class TargetTest extends TestBase {
     $this->indexer->method('execute')->with('hook_menu')->willReturn($expected);
 
     $actual = $this->target->executeHook('menu');
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertSame($expected, $actual);
   }
 
diff --git a/tests/src/Unit/TestBase.php b/tests/src/Unit/TestBase.php
index 67b2975..860aa88 100644
--- a/tests/src/Unit/TestBase.php
+++ b/tests/src/Unit/TestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit;
 
+use org\bovigo\vfs\vfsStreamDirectory;
+use Drupal\drupalmoduleupgrader\TargetInterface;
 use Drupal\drupalmoduleupgrader\Target;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Tests\PhpunitCompatibilityTrait;
@@ -30,19 +32,19 @@ abstract class TestBase extends UnitTestCase {
   protected $info;
 
   /**
-   * @var \org\bovigo\vfs\vfsStreamDirectory
+   * @var vfsStreamDirectory
    */
   protected $dir;
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\TargetInterface
+   * @var TargetInterface
    */
   protected $target;
 
   /**
    * Mocks an entire module, called foo, in a virtual file system.
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->info = $this->getAnnotations();
 
     $this->dir = $this->mockModule('foo');
diff --git a/tests/src/Unit/Utility/Filter/ContainsLogicFilterTest.php b/tests/src/Unit/Utility/Filter/ContainsLogicFilterTest.php
index 44d32e9..775fcc2 100644
--- a/tests/src/Unit/Utility/Filter/ContainsLogicFilterTest.php
+++ b/tests/src/Unit/Utility/Filter/ContainsLogicFilterTest.php
@@ -12,11 +12,11 @@ use Pharborist\Parser;
 class ContainsLogicFilterTest extends UnitTestCase {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Filter\ContainsLogicFilter
+   * @var ContainsLogicFilter
    */
   protected $filter;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->filter = new ContainsLogicFilter();
   }
 
diff --git a/tests/src/Unit/Utility/Filter/FieldValueFilterTest.php b/tests/src/Unit/Utility/Filter/FieldValueFilterTest.php
index 44e3cd8..6fd4abe 100644
--- a/tests/src/Unit/Utility/Filter/FieldValueFilterTest.php
+++ b/tests/src/Unit/Utility/Filter/FieldValueFilterTest.php
@@ -12,11 +12,11 @@ use Pharborist\Parser;
 class FieldValueFilterTest extends UnitTestCase {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Filter\FieldValueFilter
+   * @var FieldValueFilter
    */
   protected $filter;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->filter = new FieldValueFilter('foo');
   }
 
diff --git a/tests/src/Unit/Utility/Filter/FunctionCallArgumentFilterTest.php b/tests/src/Unit/Utility/Filter/FunctionCallArgumentFilterTest.php
index a967436..a4da7d0 100644
--- a/tests/src/Unit/Utility/Filter/FunctionCallArgumentFilterTest.php
+++ b/tests/src/Unit/Utility/Filter/FunctionCallArgumentFilterTest.php
@@ -12,11 +12,11 @@ use Pharborist\Parser;
 class FunctionCallArgumentFilterTest extends UnitTestCase {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Filter\FunctionCallArgumentFilter
+   * @var FunctionCallArgumentFilter
    */
   protected $filter;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->filter = new FunctionCallArgumentFilter('foo');
   }
 
diff --git a/tests/src/Unit/Utility/Filter/NodeAssignmentFilterTest.php b/tests/src/Unit/Utility/Filter/NodeAssignmentFilterTest.php
index e5806d0..18cf948 100644
--- a/tests/src/Unit/Utility/Filter/NodeAssignmentFilterTest.php
+++ b/tests/src/Unit/Utility/Filter/NodeAssignmentFilterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Utility\Filter;
 
+use Pharborist\Operators\AssignNode;
 use Drupal\drupalmoduleupgrader\Utility\Filter\NodeAssignmentFilter;
 use Drupal\Tests\UnitTestCase;
 use Pharborist\Parser;
@@ -12,22 +13,22 @@ use Pharborist\Parser;
 class NodeAssignmentFilterTest extends UnitTestCase {
 
   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Filter\NodeAssignmentFilter
+   * @var NodeAssignmentFilter
    */
   protected $filter;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->filter = new NodeAssignmentFilter();
   }
 
   public function testLeftOperand() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$foo = "bazzz"');
     $this->assertTrue($expr->getLeftOperand()->is($this->filter));
   }
 
   public function testRightOperand() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$baz = $foo');
     $this->assertFalse($expr->getRightOperand()->is($this->filter));
   }
diff --git a/tests/src/Unit/Utility/Path/Drupal7/PathUtilityTest.php b/tests/src/Unit/Utility/Path/Drupal7/PathUtilityTest.php
index 66a2aeb..f28dea9 100644
--- a/tests/src/Unit/Utility/Path/Drupal7/PathUtilityTest.php
+++ b/tests/src/Unit/Utility/Path/Drupal7/PathUtilityTest.php
@@ -19,7 +19,7 @@ class PathUtilityTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->path = new PathUtility('node/%node/foo/%');
   }
@@ -41,17 +41,13 @@ class PathUtilityTest extends UnitTestCase {
     $this->assertEquals('wambooli', $path->last()->__toString());
   }
 
-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testAddArray() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->path->add([]);
   }
 
-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testAddObject() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->path->add(new \StdClass());
   }
 
diff --git a/tests/src/Unit/Utility/Path/Drupal8/PathUtilityTest.php b/tests/src/Unit/Utility/Path/Drupal8/PathUtilityTest.php
index 7490171..dad8689 100644
--- a/tests/src/Unit/Utility/Path/Drupal8/PathUtilityTest.php
+++ b/tests/src/Unit/Utility/Path/Drupal8/PathUtilityTest.php
@@ -11,7 +11,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class PathUtilityTest extends UnitTestCase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->path = new PathUtility('node/{node}/foo/{bar}');
   }
@@ -33,17 +33,13 @@ class PathUtilityTest extends UnitTestCase {
     $this->assertEquals('wambooli', $path->last()->__toString());
   }
 
-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testAddArray() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->path->add([]);
   }
 
-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testAddObject() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->path->add(new \StdClass());
   }
 
