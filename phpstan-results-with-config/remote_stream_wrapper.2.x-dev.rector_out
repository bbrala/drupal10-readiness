modules/contrib/remote_stream_wrapper/remote_stream_wrapper.install
modules/contrib/remote_stream_wrapper/remote_stream_wrapper.module
modules/contrib/remote_stream_wrapper/src/Controller/RemoteImageStyleDownloadController.php
modules/contrib/remote_stream_wrapper/src/Entity/ImageStyle.php
modules/contrib/remote_stream_wrapper/src/File/MimeType/HttpMimeTypeGuesser.php
modules/contrib/remote_stream_wrapper/src/HttpClientTrait.php
modules/contrib/remote_stream_wrapper/src/Routing/RemoteImageStyleRoutes.php
modules/contrib/remote_stream_wrapper/src/StreamWrapper/HttpStreamWrapper.php
modules/contrib/remote_stream_wrapper/src/StreamWrapper/ReadOnlyPhpStreamWrapperTrait.php
modules/contrib/remote_stream_wrapper/src/StreamWrapper/RemoteStreamWrapperInterface.php
modules/contrib/remote_stream_wrapper/tests/src/Kernel/HttpMimeTypeGuesserTest.php
modules/contrib/remote_stream_wrapper/tests/src/Kernel/HttpStreamWrapperTest.php
modules/contrib/remote_stream_wrapper/tests/src/Kernel/ImageStyleTest.php
modules/contrib/remote_stream_wrapper/tests/src/Unit/HttpStreamWrapperTest.php

9 files with changes
====================

1) modules/contrib/remote_stream_wrapper/tests/src/Kernel/ImageStyleTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\remote_stream_wrapper\Kernel;

+use Drupal\image\ImageStyleInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\remote_stream_wrapper\Entity\ImageStyle;

@@ @@
   /**
    * A testing image style entity.
    *
-   * @var \Drupal\image\ImageStyleInterface
+   * @var ImageStyleInterface
    */
   protected $imageStyle;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/remote_stream_wrapper/tests/src/Kernel/HttpStreamWrapperTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\remote_stream_wrapper\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\remote_stream_wrapper\StreamWrapper\HttpStreamWrapper;
+use GuzzleHttp\Psr7\Uri;
+use Psr\Http\Message\ResponseInterface;
 use Drupal\KernelTests\KernelTestBase;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\ClientException;
@@ @@
  */
 class HttpStreamWrapperTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * The HTTP stream wrapper.
    *
-   * @var \Drupal\remote_stream_wrapper\StreamWrapper\HttpStreamWrapper
+   * @var HttpStreamWrapper
    */
   protected $wrapper;

@@ @@
   /**
    * Prepare the mock HTTP requests and responses.
    *
-   * @param \GuzzleHttp\Psr7\Uri|string $url
+   * @param Uri|string $url
    *   The request URL.
-   * @param \Psr\Http\Message\ResponseInterface|int $head_response
+   * @param ResponseInterface|int $head_response
    *   The HEAD request response or an exception HTTP response error code.
-   * @param \Psr\Http\Message\ResponseInterface|int $get_response
+   * @param ResponseInterface|int $get_response
    *   The GET request response or an exception HTTP response error code.
    *
-   * @return \GuzzleHttp\ClientInterface
+   * @return ClientInterface
    *   The HTTP client.
    */
   protected function prepareClient($url, $head_response, $get_response): ClientInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/remote_stream_wrapper/tests/src/Kernel/HttpMimeTypeGuesserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\remote_stream_wrapper\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\Mime\MimeTypeGuesserInterface;
+use Drupal\remote_stream_wrapper\File\MimeType\HttpMimeTypeGuesser;
+use GuzzleHttp\Psr7\Uri;
+use Psr\Http\Message\ResponseInterface;
 use Drupal\KernelTests\KernelTestBase;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\ClientException;
@@ @@
  */
 class HttpMimeTypeGuesserTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * The mime type guesser.
    *
-   * @var \Symfony\Component\Mime\MimeTypeGuesserInterface
+   * @var MimeTypeGuesserInterface
    */
   protected $guesser;

@@ @@
   /**
    * The HTTP mime type guesser.
    *
-   * @var \Drupal\remote_stream_wrapper\File\MimeType\HttpMimeTypeGuesser
+   * @var HttpMimeTypeGuesser
    */
   protected $httpGuesser;

@@ @@
   /**
    * Prepare the mock HTTP requests and responses.
    *
-   * @param \GuzzleHttp\Psr7\Uri|string $url
+   * @param Uri|string $url
    *   The request URL.
-   * @param \Psr\Http\Message\ResponseInterface|int $head_response
+   * @param ResponseInterface|int $head_response
    *   The HEAD request response or an exception HTTP response error code.
-   * @param \Psr\Http\Message\ResponseInterface|int $get_response
+   * @param ResponseInterface|int $get_response
    *   The GET request response or an exception HTTP response error code.
    *
-   * @return \GuzzleHttp\ClientInterface
+   * @return ClientInterface
    *   The HTTP client.
    */
   protected function prepareClient($url, $head_response, $get_response): ClientInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/remote_stream_wrapper/src/StreamWrapper/RemoteStreamWrapperInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\remote_stream_wrapper\StreamWrapper;

+use Psr\Http\Message\ResponseInterface;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;

 interface RemoteStreamWrapperInterface extends StreamWrapperInterface {
@@ @@
    * @param string $method
    *   The HTTP method.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   The HTTP response object.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function request($method = 'GET');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/remote_stream_wrapper/src/StreamWrapper/HttpStreamWrapper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\remote_stream_wrapper\StreamWrapper;

+use Psr\Http\Message\StreamInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\remote_stream_wrapper\HttpClientTrait;

@@ @@
   /**
    * The response stream.
    *
-   * @var \Psr\Http\Message\StreamInterface
+   * @var StreamInterface
    */
   protected $stream;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/remote_stream_wrapper/src/Routing/RemoteImageStyleRoutes.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * The module handler used to check whether the image module exists.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new PathProcessorImageStyles object.
    *
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/remote_stream_wrapper/src/HttpClientTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\remote_stream_wrapper;

+use Psr\Http\Message\ResponseInterface;
+use GuzzleHttp\Exception\GuzzleException;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\ClientException;
 use GuzzleHttp\Exception\ServerException;
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * Sets the HTTP client.
    *
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   An HTTP client.
    */
   public function setHttpClient(ClientInterface $httpClient) {
@@ @@
   /**
    * Returns the HTTP client.
    *
-   * @return \GuzzleHttp\ClientInterface
+   * @return ClientInterface
    */
   public function getHttpClient() {
     if (!isset($this->httpClient)) {
@@ @@
    *   Case-insensitive header field name.
    * @param array $options
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   The HTTP response object.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function requestTryHeadLookingForHeader($uri, $header, array $options = []) {
     try {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/remote_stream_wrapper/src/File/MimeType/HttpMimeTypeGuesser.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The extension guesser.
    *
-   * @var \Symfony\Component\Mime\MimeTypeGuesserInterface
+   * @var MimeTypeGuesserInterface
    */
   protected $extensionGuesser;

@@ @@
   /**
    * Constructs a new HttpMimeTypeGuesser.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Symfony\Component\Mime\MimeTypeGuesserInterface $extension_guesser
+   * @param MimeTypeGuesserInterface $extension_guesser
    *   The extension guesser.
    */
   public function __construct(FileSystemInterface $file_system, MimeTypeGuesserInterface $extension_guesser) {
@@ @@
   /**
    * Extract the mime type from a HTTP response using Content-Type headers.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   The HTTP request response.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/remote_stream_wrapper/src/Controller/RemoteImageStyleDownloadController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\remote_stream_wrapper\Controller;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\image\Controller\ImageStyleDownloadController;
 use Drupal\image\ImageStyleInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fileStorage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

