diff --git a/digital_signage_framework.install b/digital_signage_framework.install
index 456197d..39cade7 100644
--- a/digital_signage_framework.install
+++ b/digital_signage_framework.install
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\digital_signage_framework\Entity\ContentSetting;
 use Drupal\digital_signage_framework\Entity\Device;
@@ -15,7 +17,7 @@ function digital_signage_framework_setting_install() {
 /**
  * Update fields for digital_signage_content_setting entities.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function digital_signage_framework_update_8001() {
   if ($dscs_entity_type = Drupal::entityTypeManager()->getDefinition('digital_signage_content_setting')) {
@@ -46,7 +48,7 @@ function digital_signage_framework_update_8001() {
 /**
  * Add field for dynamic content to digital_signage_content_setting entities.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function digital_signage_framework_update_8002() {
   if ($dscs_entity_type = Drupal::entityTypeManager()->getDefinition('digital_signage_content_setting')) {
@@ -64,7 +66,7 @@ function digital_signage_framework_update_8002() {
 /**
  * Add fields for label to digital_signage_content_setting entities.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function digital_signage_framework_update_8003() {
   if ($dscs_entity_type = Drupal::entityTypeManager()->getDefinition('digital_signage_content_setting')) {
@@ -85,7 +87,7 @@ function digital_signage_framework_update_8003() {
  * Add field for emergency mode to digital_signage_content_setting entities.
  * Add new emergency_entity field to digital_signage_device.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function digital_signage_framework_update_8004() {
   if ($dscs_entity_type = Drupal::entityTypeManager()->getDefinition('digital_signage_content_setting')) {
@@ -102,7 +104,7 @@ function digital_signage_framework_update_8004() {
       ->execute();
   }
 
-  $config_path = drupal_get_path('module', 'digital_signage_framework') . '/config/optional';
+  $config_path = \Drupal::service('extension.list.module')->getPath('digital_signage_framework') . '/config/optional';
   $source = new FileStorage($config_path);
   $config_storage = Drupal::service('config.storage');
   $config_storage->write('views.view.emergency_entities', $source->read('views.view.emergency_entities'));
@@ -190,7 +192,7 @@ function digital_signage_framework_update_8007() {
  */
 function digital_signage_framework_update_8008() {
   $definition_update_manager = Drupal::entityDefinitionUpdateManager();
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $definition */
+  /** @var EntityTypeInterface $definition */
   foreach (Drupal::entityTypeManager()->getDefinitions() as $definition) {
     if ($definition instanceof ContentEntityTypeInterface) {
       if ($definition->id() === 'digital_signage_content_setting') {
diff --git a/digital_signage_framework.module b/digital_signage_framework.module
index 94a5e20..0236e8a 100644
--- a/digital_signage_framework.module
+++ b/digital_signage_framework.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\digital_signage_framework\EntityUpdate;
+use Drupal\digital_signage_framework\ContentSettingInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Url;
 use Drupal\digital_signage_framework\Entity\Schedule;
@@ -69,13 +73,13 @@ function template_preprocess_digital_signage_schedule(array &$variables) {
 /**
  * Implements hook_entity_base_field_info().
  *
- * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+ * @param EntityTypeInterface $entity_type
  *
  * @return array|void
  */
 function digital_signage_framework_entity_base_field_info(EntityTypeInterface $entity_type) {
   if (!in_array($entity_type->id(), Drupal::service('digital_signage_content_setting.entity_types')->allDisabledIds(), TRUE)) {
-    /** @var \Drupal\digital_signage_framework\EntityUpdate $service */
+    /** @var EntityUpdate $service */
     $service = Drupal::service('digital_signage_content_setting.entity_update');
     if ($entity_type instanceof ContentEntityTypeInterface) {
       $service->ensureDisplayModes($entity_type);
@@ -99,7 +103,7 @@ function digital_signage_framework_entity_base_field_info_alter(&$fields, Entity
  * Implements hook_entity_extra_field_info().
  */
 function digital_signage_framework_entity_extra_field_info() {
-  /** @var \Drupal\digital_signage_framework\EntityUpdate $service */
+  /** @var EntityUpdate $service */
   $service = Drupal::service('digital_signage_content_setting.entity_update');
   return $service->addExtraFields();
 }
@@ -121,7 +125,7 @@ function digital_signage_framework_entity_view(array &$build, EntityInterface $e
     $labelClass = '';
   }
   if ($labelField) {
-    /** @var \Drupal\digital_signage_framework\ContentSettingInterface $settings */
+    /** @var ContentSettingInterface $settings */
     $settings = ContentSetting::load($entity->get('digital_signage')->getValue()[0]['target_id']);
     $build[$labelField] = [
       '#markup' => $settings->getLabel(),
@@ -146,7 +150,7 @@ function digital_signage_framework_entity_view(array &$build, EntityInterface $e
 /**
  * Implements hook_entity_presave().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function digital_signage_framework_entity_presave(EntityInterface $entity) {
   Drupal::service('digital_signage_content_setting.events')->presave($entity);
@@ -155,7 +159,7 @@ function digital_signage_framework_entity_presave(EntityInterface $entity) {
 /**
  * Implements hook_entity_insert().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function digital_signage_framework_entity_insert(EntityInterface $entity) {
   Drupal::service('digital_signage_content_setting.events')->update($entity);
@@ -164,7 +168,7 @@ function digital_signage_framework_entity_insert(EntityInterface $entity) {
 /**
  * Implements hook_entity_update().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function digital_signage_framework_entity_update(EntityInterface $entity) {
   Drupal::service('digital_signage_content_setting.events')->update($entity);
@@ -173,7 +177,7 @@ function digital_signage_framework_entity_update(EntityInterface $entity) {
 /**
  * Implements hook_entity_delete().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function digital_signage_framework_entity_delete(EntityInterface $entity) {
   Drupal::service('digital_signage_content_setting.events')->update($entity);
@@ -183,13 +187,13 @@ function digital_signage_framework_entity_delete(EntityInterface $entity) {
  * Implements hook_form_alter().
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function digital_signage_framework_form_alter(array &$form, FormStateInterface $form_state) {
   if (isset($form['digital_signage'], $form['advanced'])) {
     $form['digital_signage']['widget'][0]['#group'] = 'advanced';
     $form['digital_signage']['widget'][0]['#open'] = FALSE;
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $form_state->getBuildInfo()['callback_object']->getEntity();
     $form['digital_signage']['widget'][0]['#weight'] = -1;
   }
@@ -199,7 +203,7 @@ function digital_signage_framework_form_alter(array &$form, FormStateInterface $
  * Implements hook_inline_entity_form_entity_form_alter().
  *
  * @param array $entity_form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function digital_signage_framework_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface $form_state) {
   if ($entity_form['#entity_type'] === 'digital_signage_content_setting') {
@@ -236,7 +240,7 @@ function digital_signage_framework_cron() {
  *
  * @param $modules
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function digital_signage_framework_modules_installed($modules) {
   foreach ($modules as $module) {
diff --git a/modules/computed_content/digital_signage_computed_content.module b/modules/computed_content/digital_signage_computed_content.module
index 61aa0a0..1a04273 100644
--- a/modules/computed_content/digital_signage_computed_content.module
+++ b/modules/computed_content/digital_signage_computed_content.module
@@ -1,4 +1,6 @@
-<?php /** @noinspection PhpUnused */
+<?php use Drupal\digital_signage_computed_content\RenderInterface;
+use Drupal\node\NodeInterface;
+/** @noinspection PhpUnused */
 
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -27,12 +29,12 @@ function digital_signage_computed_content_entity_extra_field_info() {
  * Implements hook_ENTITY_TYPE_view().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  */
 function digital_signage_computed_content_digsig_computed_content_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   if ($entity instanceof ComputedContentInterface && $display->getComponent('computed_content')) {
-    /** @var \Drupal\digital_signage_computed_content\RenderInterface $service */
+    /** @var RenderInterface $service */
     $service = Drupal::service('digital_signage_computed_content.render.' . $entity->bundle());
     $build['computed_content'] = $service->getMarkup($entity);
   }
@@ -65,7 +67,7 @@ function template_preprocess_digsig_computed_content(array &$variables) {
     $variables['content'][$key] = $variables['elements'][$key];
   }
 
-  /** @var \Drupal\node\NodeInterface $node */
+  /** @var NodeInterface $node */
   $entity = $variables['elements']['#digsig_computed_content'];
   $variables['attributes']['class'][] = 'computed-content';
   $variables['attributes']['class'][] = $entity->bundle();
diff --git a/modules/computed_content/src/ComputedContentListBuilder.php b/modules/computed_content/src/ComputedContentListBuilder.php
index b298354..9a7366c 100644
--- a/modules/computed_content/src/ComputedContentListBuilder.php
+++ b/modules/computed_content/src/ComputedContentListBuilder.php
@@ -18,27 +18,27 @@ class ComputedContentListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new ComputedContentListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
diff --git a/modules/computed_content/src/Form/ComputedContentForm.php b/modules/computed_content/src/Form/ComputedContentForm.php
index 6c120c5..98898cf 100644
--- a/modules/computed_content/src/Form/ComputedContentForm.php
+++ b/modules/computed_content/src/Form/ComputedContentForm.php
@@ -20,7 +20,7 @@ class ComputedContentForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result === SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New computed content %label has been created.', $message_arguments));
diff --git a/modules/computed_content/src/Plugin/views/display/DigitalSignage.php b/modules/computed_content/src/Plugin/views/display/DigitalSignage.php
index 239b5c9..3d98702 100644
--- a/modules/computed_content/src/Plugin/views/display/DigitalSignage.php
+++ b/modules/computed_content/src/Plugin/views/display/DigitalSignage.php
@@ -29,7 +29,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class DigitalSignage extends DisplayPluginBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
@@ -42,7 +42,7 @@ class DigitalSignage extends DisplayPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -78,7 +78,7 @@ class DigitalSignage extends DisplayPluginBase {
   }
 
   /**
-   * @return \Drupal\digital_signage_computed_content\ComputedContentInterface
+   * @return ComputedContentInterface
    */
   protected function getComputedContentEntity(): ComputedContentInterface {
     try {
@@ -94,7 +94,7 @@ class DigitalSignage extends DisplayPluginBase {
     catch (PluginNotFoundException $e) {
       // TODO: Log this exception.
     }
-    /** @var \Drupal\digital_signage_computed_content\ComputedContentInterface $content */
+    /** @var ComputedContentInterface $content */
     if (empty($entities)) {
       $settings = ContentSetting::create(['status' => 1]);
       $this->saveEntity($settings);
@@ -114,7 +114,7 @@ class DigitalSignage extends DisplayPluginBase {
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return bool
    */
diff --git a/modules/computed_content/src/RenderInterface.php b/modules/computed_content/src/RenderInterface.php
index 5b1c4db..cb56068 100644
--- a/modules/computed_content/src/RenderInterface.php
+++ b/modules/computed_content/src/RenderInterface.php
@@ -12,7 +12,7 @@ interface RenderInterface {
   /**
    * Render the entity.
    *
-   * @param \Drupal\digital_signage_computed_content\ComputedContentInterface $entity
+   * @param ComputedContentInterface $entity
    *   The entity which should be rendered.
    *
    * @return array
diff --git a/modules/custom_platform/src/Plugin/DigitalSignagePlatform/Custom.php b/modules/custom_platform/src/Plugin/DigitalSignagePlatform/Custom.php
index 1df175f..55f7372 100644
--- a/modules/custom_platform/src/Plugin/DigitalSignagePlatform/Custom.php
+++ b/modules/custom_platform/src/Plugin/DigitalSignagePlatform/Custom.php
@@ -53,7 +53,7 @@ class Custom extends PlatformPluginBase {
           'height' => $device['orientation']['height'],
         ];
       }
-      /** @var \Drupal\digital_signage_framework\DeviceInterface $deviceEntity */
+      /** @var DeviceInterface $deviceEntity */
       $deviceEntity = Device::create($values);
       $deviceEntities[] = $deviceEntity;
       if (!empty($device['segments'])) {
diff --git a/modules/example/src/Plugin/DigitalSignagePlatform/Example.php b/modules/example/src/Plugin/DigitalSignagePlatform/Example.php
index e57b5c9..6452226 100644
--- a/modules/example/src/Plugin/DigitalSignagePlatform/Example.php
+++ b/modules/example/src/Plugin/DigitalSignagePlatform/Example.php
@@ -53,7 +53,7 @@ class Example extends PlatformPluginBase {
           'height' => $device['orientation']['height'],
         ];
       }
-      /** @var \Drupal\digital_signage_framework\DeviceInterface $deviceEntity */
+      /** @var DeviceInterface $deviceEntity */
       $deviceEntity = Device::create($values);
       $deviceEntities[] = $deviceEntity;
       if (!empty($device['segments'])) {
diff --git a/src/Annotation/DigitalSignagePlatform.php b/src/Annotation/DigitalSignagePlatform.php
index f323f9f..e5b0689 100644
--- a/src/Annotation/DigitalSignagePlatform.php
+++ b/src/Annotation/DigitalSignagePlatform.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class DigitalSignagePlatform extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class DigitalSignagePlatform extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/DigitalSignageScheduleGenerator.php b/src/Annotation/DigitalSignageScheduleGenerator.php
index e19961b..b3662f1 100644
--- a/src/Annotation/DigitalSignageScheduleGenerator.php
+++ b/src/Annotation/DigitalSignageScheduleGenerator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class DigitalSignageScheduleGenerator extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class DigitalSignageScheduleGenerator extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Commands/DeviceCommands.php b/src/Commands/DeviceCommands.php
index 5d617ee..18f9df2 100644
--- a/src/Commands/DeviceCommands.php
+++ b/src/Commands/DeviceCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework\Commands;
 
+use Drupal\digital_signage_framework\DeviceInterface;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\digital_signage_framework\Emergency;
 use Drupal\digital_signage_framework\Entity\Device;
@@ -15,12 +16,12 @@ use InvalidArgumentException;
 class DeviceCommands extends DrushCommands {
 
   /**
-   * @var \Drupal\digital_signage_framework\PlatformPluginManager
+   * @var PlatformPluginManager
    */
   protected $pluginManager;
 
   /**
-   * @var \Drupal\digital_signage_framework\Emergency
+   * @var Emergency
    */
   protected $emergency;
 
@@ -68,11 +69,11 @@ class DeviceCommands extends DrushCommands {
    *   slides: No of slides
    * @default-fields id,label,platform,extid,status,slides
    * @aliases dsdl
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|void
+   * @return RowsOfFields|void
    */
   public function listDevices(array $options = ['all' => FALSE, 'platform' => NULL, 'format' => 'table']) {
     $devices = [];
-    /** @var \Drupal\digital_signage_framework\DeviceInterface $device */
+    /** @var DeviceInterface $device */
     foreach (Device::loadMultiple() as $device) {
       if ($options['all'] || $device->isEnabled()) {
         if ($options['platform'] === NULL || $device->bundle() === $options['platform']) {
@@ -106,7 +107,7 @@ class DeviceCommands extends DrushCommands {
    *   message: Message
    * @default-fields time,message
    * @aliases dsdld
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|void
+   * @return RowsOfFields|void
    */
   public function showDebugLogs($deviceId, array $options = ['record' => NULL, 'format' => 'table']) {
     if ($device = $this->loadDevice($deviceId)) {
@@ -139,7 +140,7 @@ class DeviceCommands extends DrushCommands {
    *   message: Message
    * @default-fields time,message
    * @aliases dsdle
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|void
+   * @return RowsOfFields|void
    */
   public function showErrorLogs($deviceId, array $options = ['record' => NULL, 'format' => 'table']) {
     if ($device = $this->loadDevice($deviceId)) {
@@ -171,7 +172,7 @@ class DeviceCommands extends DrushCommands {
    *   message: Slide ID
    * @default-fields time,message
    * @aliases dsdrs
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|void
+   * @return RowsOfFields|void
    */
   public function showSlideChangeReport($deviceId, array $options = ['format' => 'table']) {
     if ($device = $this->loadDevice($deviceId)) {
@@ -244,11 +245,10 @@ class DeviceCommands extends DrushCommands {
    * @param int $deviceId
    * @param string|null $bundle
    *
-   * @return \Drupal\digital_signage_framework\DeviceInterface
-   *
+   * @return DeviceInterface
    */
   protected function loadDevice($deviceId, $bundle = NULL) {
-    /** @var \Drupal\digital_signage_framework\DeviceInterface $device */
+    /** @var DeviceInterface $device */
     $device = Device::load($deviceId);
     if (empty($device)) {
       throw new InvalidArgumentException('Incorrect device ID');
diff --git a/src/Commands/ScheduleCommands.php b/src/Commands/ScheduleCommands.php
index 25dfb98..57f6b3a 100644
--- a/src/Commands/ScheduleCommands.php
+++ b/src/Commands/ScheduleCommands.php
@@ -11,14 +11,14 @@ use Drush\Commands\DrushCommands;
 class ScheduleCommands extends DrushCommands {
 
   /**
-   * @var \Drupal\digital_signage_framework\ScheduleManager
+   * @var ScheduleManager
    */
   protected $scheduleManager;
 
   /**
    * DigitalSignageScheduleCommands constructor.
    *
-   * @param \Drupal\digital_signage_framework\ScheduleManager $schedule_manager
+   * @param ScheduleManager $schedule_manager
    */
   public function __construct(ScheduleManager $schedule_manager) {
     $this->scheduleManager = $schedule_manager;
diff --git a/src/ContentEvent.php b/src/ContentEvent.php
index eab659c..0b8bcae 100644
--- a/src/ContentEvent.php
+++ b/src/ContentEvent.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ -16,21 +19,21 @@ use Drupal\digital_signage_framework\Entity\Device;
 class ContentEvent {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs an Entity update service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(EntityTypeManager $entity_type_manager, MessengerInterface $messenger) {
@@ -39,9 +42,9 @@ class ContentEvent {
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\digital_signage_framework\ContentSettingInterface|false|null
+   * @return ContentSettingInterface|false|null
    */
   private function loadSettings(EntityInterface $entity) {
     if (!($entity instanceof ContentEntityInterface)) {
@@ -61,15 +64,15 @@ class ContentEvent {
       // Might be missing in some circumstances.
       return FALSE;
     }
-    /** @var \Drupal\digital_signage_framework\ContentSettingInterface $settings */
+    /** @var ContentSettingInterface $settings */
     $settings = ContentSetting::load($settingsTarget[0]['target_id']);
     return $settings;
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function presave(EntityInterface $entity) {
     $settings = $this->loadSettings($entity);
@@ -82,11 +85,11 @@ class ContentEvent {
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function update(EntityInterface $entity) {
     $settings = $this->loadSettings($entity);
@@ -164,7 +167,7 @@ class ContentEvent {
 
     // Retrieve and update all devices.
     foreach ($query->execute() as $id) {
-      /** @var \Drupal\digital_signage_framework\DeviceInterface $device */
+      /** @var DeviceInterface $device */
       $device = Device::load($id);
       $device->scheduleUpdate();
     }
diff --git a/src/Controller/Api.php b/src/Controller/Api.php
index 6672f0d..ae4f2a6 100644
--- a/src/Controller/Api.php
+++ b/src/Controller/Api.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\digital_signage_framework\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\digital_signage_framework\ScheduleInterface;
+use Drupal\digital_signage_framework\PlatformInterface;
+use Drupal\file\FileInterface;
+use Drupal\image\ImageStyleInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ -56,92 +63,92 @@ class Api implements ContainerInjectionInterface {
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
-   * @var \Drupal\digital_signage_framework\DeviceInterface
+   * @var DeviceInterface
    */
   protected $device;
 
   /**
-   * @var \Drupal\digital_signage_framework\ScheduleInterface
+   * @var ScheduleInterface
    */
   protected $schedule;
 
   /**
-   * @var \Drupal\digital_signage_framework\PlatformInterface
+   * @var PlatformInterface
    */
   protected $platform;
 
   /**
-   * @var \Drupal\digital_signage_framework\Renderer
+   * @var Renderer
    */
   protected $dsRenderer;
 
   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $clientFactory;
 
   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\digital_signage_framework\Emergency
+   * @var Emergency
    */
   protected $emergency;
 
   /**
-   * @var \Drupal\Core\Asset\AssetResolverInterface
+   * @var AssetResolverInterface
    */
   protected $assetResolver;
 
   /**
-   * @var \Drupal\Core\Asset\AssetCollectionRendererInterface
+   * @var AssetCollectionRendererInterface
    */
   protected $jsAssetCollectionRenderer;
 
   /**
-   * @var \Drupal\Core\Asset\AssetCollectionRendererInterface
+   * @var AssetCollectionRendererInterface
    */
   protected $cssAssetCollectionRenderer;
 
   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -153,21 +160,21 @@ class Api implements ContainerInjectionInterface {
   /**
    * Api constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
-   * @param \Drupal\digital_signage_framework\Renderer $ds_renderer
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
-   * @param \Drupal\Core\Http\ClientFactory $client_factory
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
-   * @param \Drupal\digital_signage_framework\Emergency $emergency
-   * @param \Drupal\Core\Asset\AssetResolverInterface $asset_resolver
-   * @param \Drupal\Core\Asset\AssetCollectionRendererInterface $js_asset_collection_renderer
-   * @param \Drupal\Core\Asset\AssetCollectionRendererInterface $css_asset_collection_renderer
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param ConfigFactoryInterface $config_factory
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ModuleHandlerInterface $module_handler
+   * @param LibraryDiscoveryInterface $library_discovery
+   * @param RequestStack $request_stack
+   * @param Renderer $ds_renderer
+   * @param EventDispatcherInterface $event_dispatcher
+   * @param ClientFactory $client_factory
+   * @param RendererInterface $renderer
+   * @param AccountProxyInterface $current_user
+   * @param Emergency $emergency
+   * @param AssetResolverInterface $asset_resolver
+   * @param AssetCollectionRendererInterface $js_asset_collection_renderer
+   * @param AssetCollectionRendererInterface $css_asset_collection_renderer
+   * @param LanguageManagerInterface $language_manager
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, LibraryDiscoveryInterface $library_discovery, RequestStack $request_stack, Renderer $ds_renderer, EventDispatcherInterface $event_dispatcher, ClientFactory $client_factory, RendererInterface $renderer, AccountProxyInterface $current_user, Emergency $emergency, AssetResolverInterface $asset_resolver, AssetCollectionRendererInterface $js_asset_collection_renderer, AssetCollectionRendererInterface $css_asset_collection_renderer, LanguageManagerInterface $language_manager) {
     $this->config = $config_factory->get('digital_signage_framework.settings');
@@ -226,7 +233,7 @@ class Api implements ContainerInjectionInterface {
   }
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
    * @return string
    */
@@ -235,7 +242,7 @@ class Api implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access(): AccessResult {
     if (empty($this->device)) {
@@ -297,7 +304,7 @@ class Api implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function request(): Response {
     switch ($this->request->query->get('mode')) {
@@ -358,7 +365,7 @@ class Api implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function screenshot(): AjaxResponse {
     if ($screenshot = $this->device->getPlugin()->getScreenshot($this->device, (bool) $this->request->query->get('refresh'))) {
@@ -373,7 +380,7 @@ class Api implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function log(): AjaxResponse {
     if ($this->request->query->get('type', 'debug') === 'error') {
@@ -451,7 +458,7 @@ class Api implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   private function getSchedule(): JsonResponse {
     $underlays = new Underlays($this->device);
@@ -495,7 +502,7 @@ class Api implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Drupal\Core\Render\AttachmentsInterface
+   * @return AttachmentsInterface
    */
   private function load(): AttachmentsInterface {
     $output = [
@@ -510,12 +517,12 @@ class Api implements ContainerInjectionInterface {
    */
   private function getFileUri(): string {
     /** @var \Drupal\media\MediaInterface $media */
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     if (($media = Media::load($this->request->query->get('entityId'))) && $file = File::load($media->getSource()
         ->getSourceFieldValue($media))) {
       $file_uri = $file->getFileUri();
       try {
-        /** @var \Drupal\image\ImageStyleInterface $image_style */
+        /** @var ImageStyleInterface $image_style */
         if (($media->bundle() === 'image') && $image_style = $this->entityTypeManager->getStorage('image_style')
             ->load('digital_signage_' . $this->device->getOrientation())) {
           $derivative_uri = $image_style->buildUri($file_uri);
@@ -646,8 +653,8 @@ class Api implements ContainerInjectionInterface {
         }
       }
     }
-    $cssFiles[] = drupal_get_path('module', 'digital_signage_framework') . '/css/digital-signage.css';
-    $cssFiles[] = drupal_get_path('module', 'digital_signage_framework') . '/css/overlays.css';
+    $cssFiles[] = \Drupal::service('extension.list.module')->getPath('digital_signage_framework') . '/css/digital-signage.css';
+    $cssFiles[] = \Drupal::service('extension.list.module')->getPath('digital_signage_framework') . '/css/overlays.css';
     foreach (explode(PHP_EOL, str_replace("\r", '', $this->config->get('css'))) as $file) {
       $cssFiles[] = $file;
     }
@@ -662,7 +669,7 @@ class Api implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   private function loadCSS(): Response {
     $css = $this->prepareCSS();
@@ -673,7 +680,7 @@ class Api implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    */
   private function loadContent(): BinaryFileResponse {
     $content_path = Url::fromUserInput('/', [
@@ -709,7 +716,7 @@ class Api implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    */
   private function loadBinary(): BinaryFileResponse {
     $file_uri = $this->getFileUri();
@@ -722,7 +729,7 @@ class Api implements ContainerInjectionInterface {
   /**
    * @param array|string $output
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   private function popupContent($output): AjaxResponse {
     $underlays = new Underlays($this->device);
@@ -757,17 +764,17 @@ class Api implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   private function preview(): AjaxResponse {
     return $this->popupContent($this->buildEntityView());
   }
 
   /**
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   private function previewBinary(): AjaxResponse {
-    $file_uri = file_create_url($this->getFileUri());
+    $file_uri = \Drupal::service('file_url_generator')->generateAbsoluteString($this->getFileUri());
     switch ($this->request->query->get('type')) {
       case 'image':
         $output = '<img src="' . $file_uri . '" alt="" />';
@@ -784,7 +791,7 @@ class Api implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   private function diagram(): AjaxResponse {
     $items = $this->schedule->getItems();
@@ -822,7 +829,7 @@ class Api implements ContainerInjectionInterface {
    */
   private function getEntityLabel(string $type, int $id): string {
     try {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $this->entityTypeManager->getStorage($type)->load($id);
       if (($entity !== NULL) && $label = $entity->label()) {
         return $label;
diff --git a/src/Controller/BlockApi.php b/src/Controller/BlockApi.php
index 92464b6..e91d9bb 100644
--- a/src/Controller/BlockApi.php
+++ b/src/Controller/BlockApi.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework\Controller;
 
+use Drupal\block\BlockViewBuilder;
 use Drupal\block\Entity\Block;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -15,12 +16,12 @@ use Symfony\Component\HttpFoundation\Response;
 class BlockApi implements ContainerInjectionInterface {
 
   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
-   * @var \Drupal\block\BlockViewBuilder
+   * @var BlockViewBuilder
    */
   protected $blockViewBuilder;
 
@@ -40,7 +41,7 @@ class BlockApi implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function request($id): Response {
     $block = Block::load($id);
diff --git a/src/DefaultDuration.php b/src/DefaultDuration.php
index c1ddfc8..1053dac 100644
--- a/src/DefaultDuration.php
+++ b/src/DefaultDuration.php
@@ -7,14 +7,14 @@ use Drupal\Core\Config\ImmutableConfig;
 class DefaultDuration implements DurationInterface {
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;
 
   /**
    * DefaultDuration constructor.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $settings
+   * @param ImmutableConfig $settings
    */
   public function __construct(ImmutableConfig $settings) {
     $this->settings = $settings;
diff --git a/src/DefaultWeight.php b/src/DefaultWeight.php
index 1a1b3f4..b5a5b75 100644
--- a/src/DefaultWeight.php
+++ b/src/DefaultWeight.php
@@ -7,14 +7,14 @@ use Drupal\Core\Config\ImmutableConfig;
 class DefaultWeight implements WeightInterface {
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;
 
   /**
    * DefaultDuration constructor.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $settings
+   * @param ImmutableConfig $settings
    */
   public function __construct(ImmutableConfig $settings) {
     $this->settings = $settings;
diff --git a/src/DeviceInterface.php b/src/DeviceInterface.php
index 1df0eaa..1e2daff 100644
--- a/src/DeviceInterface.php
+++ b/src/DeviceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 
@@ -13,7 +14,7 @@ interface DeviceInterface extends ContentEntityInterface, EntityChangedInterface
   /**
    * Get the corresponding plugin for the device.
    *
-   * @return \Drupal\digital_signage_framework\PlatformInterface
+   * @return PlatformInterface
    */
   public function getPlugin(): PlatformInterface;
 
@@ -87,7 +88,7 @@ interface DeviceInterface extends ContentEntityInterface, EntityChangedInterface
    *
    * @return bool
    *   TRUE if a new segment got added to the device entity.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function addSegment($segment): bool;
 
@@ -125,14 +126,14 @@ interface DeviceInterface extends ContentEntityInterface, EntityChangedInterface
    * @param bool $stored
    *   Whether to receive the stored schedule or a temporary one.
    *
-   * @return \Drupal\digital_signage_framework\ScheduleInterface|null
+   * @return ScheduleInterface|null
    */
   public function getSchedule($stored = TRUE);
 
   /**
    * Sets the active schedule for this device.
    *
-   * @param \Drupal\digital_signage_framework\ScheduleInterface $schedule
+   * @param ScheduleInterface $schedule
    *
    * @return \Drupal\digital_signage_framework\DeviceInterface
    *   The called device entity.
diff --git a/src/DeviceListBuilder.php b/src/DeviceListBuilder.php
index 3341a21..e4eb9ff 100644
--- a/src/DeviceListBuilder.php
+++ b/src/DeviceListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -18,27 +19,27 @@ class DeviceListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new DigitalSignageDeviceListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ -91,7 +92,7 @@ class DeviceListBuilder extends EntityListBuilder {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function buildRow(EntityInterface $entity): array {
     /* @var $entity \Drupal\digital_signage_framework\DeviceInterface */
diff --git a/src/Emergency.php b/src/Emergency.php
index ad8e32e..4b16d28 100644
--- a/src/Emergency.php
+++ b/src/Emergency.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\digital_signage_framework\SequenceItem;
@@ -9,21 +10,21 @@ use Drupal\digital_signage_framework\SequenceItem;
 class Emergency {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Renderer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
   }
 
   /**
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    */
   protected function queryAll(): array {
     $entities = [];
@@ -33,10 +34,10 @@ class Emergency {
         ->getQuery()
         ->condition('status', 1)
         ->condition('emergencymode', 1);
-      /** @var \Drupal\digital_signage_framework\ContentSettingInterface $item */
+      /** @var ContentSettingInterface $item */
       foreach ($this->entityTypeManager->getStorage('digital_signage_content_setting')
                  ->loadMultiple($query->execute()) as $item) {
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+        /** @var ContentEntityInterface $entity */
         if (($entity = $this->entityTypeManager->getStorage($item->getReverseEntityType())
             ->load($item->getReverseEntityId())) &&
           (!$entity->hasField('status') || $entity->get('status')->value)) {
diff --git a/src/Entity/ContentSetting.php b/src/Entity/ContentSetting.php
index b6df09d..152434a 100644
--- a/src/Entity/ContentSetting.php
+++ b/src/Entity/ContentSetting.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\digital_signage_framework\Entity;
 
+use Drupal\digital_signage_framework\DeviceInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -32,7 +34,7 @@ use Drupal\digital_signage_framework\ContentSettingInterface;
 class ContentSetting extends ContentEntityBase implements ContentSettingInterface {
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *
    * @return string
    */
@@ -140,7 +142,7 @@ class ContentSetting extends ContentEntityBase implements ContentSettingInterfac
    */
   public function getDeviceIds(): array {
     $ids = [];
-    /** @var \Drupal\digital_signage_framework\DeviceInterface $entity */
+    /** @var DeviceInterface $entity */
     foreach ($this->get('devices')->referencedEntities() as $entity) {
       $ids[] = $entity->id();
     }
@@ -152,7 +154,7 @@ class ContentSetting extends ContentEntityBase implements ContentSettingInterfac
    */
   public function getSegmentIds(): array {
     $ids = [];
-    /** @var \Drupal\taxonomy\TermInterface $entity */
+    /** @var TermInterface $entity */
     foreach ($this->get('segments')->referencedEntities() as $entity) {
       $ids[] = $entity->id();
     }
diff --git a/src/Entity/Device.php b/src/Entity/Device.php
index 6aaa12f..630805c 100644
--- a/src/Entity/Device.php
+++ b/src/Entity/Device.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework\Entity;
 
+use Drupal\taxonomy\TermInterface;
 use Drupal;
 use Drupal\Core\Asset\AssetResolverInterface;
 use Drupal\Core\Asset\AttachedAssets;
@@ -148,7 +149,7 @@ class Device extends RevisionableContentEntityBase implements DeviceInterface {
         if ($js_asset['type'] === 'file' && $name !== 'core/misc/drupalSettingsLoader.js') {
           $scriptIndex++;
           $scripts[] = [
-            'uri' => file_create_url($js_asset['data']),
+            'uri' => \Drupal::service('file_url_generator')->generateAbsoluteString($js_asset['data']),
             'uid' => 'ajs-' . $scriptIndex . '.js',
           ];
         }
@@ -315,7 +316,7 @@ class Device extends RevisionableContentEntityBase implements DeviceInterface {
    */
   public function getSegmentIds(): array {
     $ids = [];
-    /** @var \Drupal\taxonomy\TermInterface $entity */
+    /** @var TermInterface $entity */
     foreach ($this->get('segments')->referencedEntities() as $entity) {
       $ids[] = $entity->id();
     }
diff --git a/src/Entity/Schedule.php b/src/Entity/Schedule.php
index ad5b5bc..46a8857 100644
--- a/src/Entity/Schedule.php
+++ b/src/Entity/Schedule.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework\Entity;
 
+use Drupal\digital_signage_framework\PlatformPluginManager;
 use Drupal;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -102,7 +103,7 @@ class Schedule extends ContentEntityBase implements ScheduleInterface {
       ->setRequired(TRUE);
 
     // TODO: Is there a way to inject this service as a dependency?
-    /** @var \Drupal\digital_signage_framework\PlatformPluginManager $platformManager */
+    /** @var PlatformPluginManager $platformManager */
     $platformManager = Drupal::service('plugin.manager.digital_signage_platform');
     foreach ($platformManager->getAllPlugins() as $plugin) {
       $plugin->scheduleBaseFields($fields);
diff --git a/src/EntityFieldUpdate.php b/src/EntityFieldUpdate.php
index 4a79223..78ac899 100644
--- a/src/EntityFieldUpdate.php
+++ b/src/EntityFieldUpdate.php
@@ -12,23 +12,23 @@ use Exception;
 class EntityFieldUpdate {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The entity definition update manager.
    *
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @var EntityDefinitionUpdateManagerInterface
    */
   protected $updateManager;
 
   /**
    * Constructs an Entity update service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $update_manager
+   * @param EntityDefinitionUpdateManagerInterface $update_manager
    *   The entity definition update manager.
    */
   public function __construct(EntityTypeManager $entity_type_manager, EntityDefinitionUpdateManagerInterface $update_manager) {
diff --git a/src/EntityTypes.php b/src/EntityTypes.php
index ab67f82..90b853b 100644
--- a/src/EntityTypes.php
+++ b/src/EntityTypes.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 
 class EntityTypes {
@@ -39,21 +40,21 @@ class EntityTypes {
 
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Renderer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
   }
 
   /**
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    */
   public function all(): array {
     return $this->entityTypeManager->getDefinitions();
diff --git a/src/EntityUpdate.php b/src/EntityUpdate.php
index 4add9d8..891bfcb 100644
--- a/src/EntityUpdate.php
+++ b/src/EntityUpdate.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\Entity\EntityViewMode;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -17,29 +21,29 @@ use Drupal\Core\Field\BaseFieldDefinition;
 class EntityUpdate {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The entity definition update manager.
    *
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @var EntityDefinitionUpdateManagerInterface
    */
   protected $updateManager;
 
   /**
-   * @var \Drupal\digital_signage_framework\EntityFieldUpdate
+   * @var EntityFieldUpdate
    */
   protected $entityFieldUpdate;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
-   * @var \Drupal\digital_signage_framework\EntityTypes
+   * @var EntityTypes
    */
   protected $entityTypesService;
 
@@ -51,15 +55,15 @@ class EntityUpdate {
   /**
    * Constructs an Entity update service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $update_manager
+   * @param EntityDefinitionUpdateManagerInterface $update_manager
    *   The entity definition update manager.
-   * @param \Drupal\digital_signage_framework\EntityFieldUpdate $entity_field_update
+   * @param EntityFieldUpdate $entity_field_update
    *   The entity field update manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity bundle manager.
-   * @param \Drupal\digital_signage_framework\EntityTypes $entity_types_service
+   * @param EntityTypes $entity_types_service
    *   The entity type service.
    * @param ModuleHandlerInterface $module_handler
    *   The Drupal container module handler.
@@ -79,7 +83,7 @@ class EntityUpdate {
   public function addExtraFields(): array {
     $extra = [];
     $bundles = $this->entityTypeBundleInfo->getAllBundleInfo();
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $definition */
+    /** @var EntityTypeInterface $definition */
     foreach ($this->entityTypeManager->getDefinitions() as $definition) {
       if (($definition instanceof ContentEntityTypeInterface) &&
         isset($bundles[$definition->id()]) &&
@@ -110,7 +114,7 @@ class EntityUpdate {
   }
 
   /**
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    */
   public function fieldDefinition(): BaseFieldDefinition {
     return BaseFieldDefinition::create('entity_reference')
@@ -141,13 +145,13 @@ class EntityUpdate {
   /**
    * Method description.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function updateExistingEntityTypes() {
     $field_definition = $this->fieldDefinition();
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $definition */
+    /** @var EntityTypeInterface $definition */
     foreach ($this->entityTypeManager->getDefinitions() as $definition) {
       if ($definition instanceof ContentEntityTypeInterface) {
         if ($definition->id() === 'digital_signage_content_setting') {
@@ -166,8 +170,8 @@ class EntityUpdate {
    * @param $machine_name
    *
    * @return bool
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function existsDisplayMode($entity_type_id, $machine_name): bool {
     return (bool) $this->entityTypeManager
@@ -178,11 +182,11 @@ class EntityUpdate {
   }
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type
+   * @param ContentEntityTypeInterface $entity_type
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function ensureDisplayModes(ContentEntityTypeInterface $entity_type) {
     foreach (['landscape', 'portrait'] as $type) {
diff --git a/src/Event/Libraries.php b/src/Event/Libraries.php
index 142203a..816c76a 100644
--- a/src/Event/Libraries.php
+++ b/src/Event/Libraries.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\digital_signage_framework\DeviceInterface;
 
 /**
@@ -9,7 +10,7 @@ use Drupal\digital_signage_framework\DeviceInterface;
  *
  * @package Drupal\digital_signage_framework\Event
  */
-class Libraries extends \Symfony\Contracts\EventDispatcher\Event {
+class Libraries extends Event {
 
   /**
    * @var array
@@ -22,14 +23,14 @@ class Libraries extends \Symfony\Contracts\EventDispatcher\Event {
   protected $settings = [];
 
   /**
-   * @var \Drupal\digital_signage_framework\DeviceInterface
+   * @var DeviceInterface
    */
   protected $device;
 
   /**
    * Libraries constructor.
    *
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    */
   public function __construct(DeviceInterface $device) {
     $this->device = $device;
@@ -71,7 +72,7 @@ class Libraries extends \Symfony\Contracts\EventDispatcher\Event {
   }
 
   /**
-   * @return \Drupal\digital_signage_framework\DeviceInterface
+   * @return DeviceInterface
    */
   public function getDevice(): DeviceInterface {
     return $this->device;
diff --git a/src/Event/Overlays.php b/src/Event/Overlays.php
index 3fbc8d7..05352e6 100644
--- a/src/Event/Overlays.php
+++ b/src/Event/Overlays.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\digital_signage_framework\DeviceInterface;
 
@@ -10,7 +11,7 @@ use Drupal\digital_signage_framework\DeviceInterface;
  *
  * @package Drupal\digital_signage_framework\Event
  */
-class Overlays extends \Symfony\Contracts\EventDispatcher\Event {
+class Overlays extends Event {
 
   /**
    * @var array
@@ -23,21 +24,21 @@ class Overlays extends \Symfony\Contracts\EventDispatcher\Event {
   protected $libraries = [];
 
   /**
-   * @var \Drupal\digital_signage_framework\DeviceInterface
+   * @var DeviceInterface
    */
   protected $device;
 
   /**
    * Rendered constructor.
    *
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    */
   public function __construct(DeviceInterface $device) {
     $this->device = $device;
   }
 
   /**
-   * @return \Drupal\digital_signage_framework\DeviceInterface
+   * @return DeviceInterface
    */
   public function getDevice(): DeviceInterface {
     return $this->device;
diff --git a/src/Event/Rendered.php b/src/Event/Rendered.php
index 6025d7f..e6ad010 100644
--- a/src/Event/Rendered.php
+++ b/src/Event/Rendered.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\digital_signage_framework\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\digital_signage_framework\DeviceInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Response;
 
 /**
@@ -11,23 +11,23 @@ use Symfony\Component\HttpFoundation\Response;
  *
  * @package Drupal\digital_signage_framework\Event
  */
-class Rendered extends \Symfony\Contracts\EventDispatcher\Event {
+class Rendered extends Event {
 
   /**
-   * @var \Symfony\Component\HttpFoundation\Response
+   * @var Response
    */
   protected $response;
 
   /**
-   * @var \Drupal\digital_signage_framework\DeviceInterface
+   * @var DeviceInterface
    */
   protected $device;
 
   /**
    * Rendered constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Response $response
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param Response $response
+   * @param DeviceInterface $device
    */
   public function __construct(Response $response, DeviceInterface $device) {
     $this->response = $response;
@@ -35,14 +35,14 @@ class Rendered extends \Symfony\Contracts\EventDispatcher\Event {
   }
 
   /**
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function getResponse(): Response {
     return $this->response;
   }
 
   /**
-   * @return \Drupal\digital_signage_framework\DeviceInterface
+   * @return DeviceInterface
    */
   public function getDevice(): DeviceInterface {
     return $this->device;
diff --git a/src/Event/Underlays.php b/src/Event/Underlays.php
index 8387ee6..72e7ddf 100644
--- a/src/Event/Underlays.php
+++ b/src/Event/Underlays.php
@@ -2,16 +2,16 @@
 
 namespace Drupal\digital_signage_framework\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\digital_signage_framework\DeviceInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class Underlays
  *
  * @package Drupal\digital_signage_framework\Event
  */
-class Underlays extends \Symfony\Contracts\EventDispatcher\Event {
+class Underlays extends Event {
 
   /**
    * @var array
@@ -24,21 +24,21 @@ class Underlays extends \Symfony\Contracts\EventDispatcher\Event {
   protected $libraries = [];
 
   /**
-   * @var \Drupal\digital_signage_framework\DeviceInterface
+   * @var DeviceInterface
    */
   protected $device;
 
   /**
    * Rendered constructor.
    *
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    */
   public function __construct(DeviceInterface $device) {
     $this->device = $device;
   }
 
   /**
-   * @return \Drupal\digital_signage_framework\DeviceInterface
+   * @return DeviceInterface
    */
   public function getDevice(): DeviceInterface {
     return $this->device;
diff --git a/src/EventSubscriber/Blocks.php b/src/EventSubscriber/Blocks.php
index 87e47bc..dff21a9 100644
--- a/src/EventSubscriber/Blocks.php
+++ b/src/EventSubscriber/Blocks.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\digital_signage_framework\EventSubscriber;
 
+use Drupal\block\BlockViewBuilder;
+use Drupal\Core\Theme\ActiveTheme;
+use Drupal\block\Entity\Block;
 use Drupal\block\BlockRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
@@ -22,46 +25,46 @@ class Blocks implements EventSubscriberInterface {
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The block repository.
    *
-   * @var \Drupal\block\BlockRepositoryInterface
+   * @var BlockRepositoryInterface
    */
   protected $blockRepository;
 
   /**
-   * @var \Drupal\block\BlockViewBuilder
+   * @var BlockViewBuilder
    */
   protected $blockViewBuilder;
 
   /**
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
-   * @var \Drupal\Core\Theme\ActiveTheme
+   * @var ActiveTheme
    */
   protected $currentTheme;
 
   /**
-   * @var \Drupal\Core\Theme\ActiveTheme
+   * @var ActiveTheme
    */
   protected $defaultTheme;
 
   /**
    * Blocks constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\block\BlockRepositoryInterface $blockRepository
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $themeInitialization
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param RendererInterface $renderer
+   * @param BlockRepositoryInterface $blockRepository
+   * @param ThemeManagerInterface $themeManager
+   * @param ThemeHandlerInterface $themeHandler
+   * @param ThemeInitializationInterface $themeInitialization
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer, BlockRepositoryInterface $blockRepository, ThemeManagerInterface $themeManager, ThemeHandlerInterface $themeHandler, ThemeInitializationInterface $themeInitialization) {
     $this->renderer = $renderer;
@@ -80,7 +83,7 @@ class Blocks implements EventSubscriberInterface {
     $cacheable_metadata_list = [];
     foreach ($this->blockRepository->getVisibleBlocksPerRegion($cacheable_metadata_list) as $theme_region => $blocks) {
       if (!empty($blocks) && $theme_region === $region) {
-        /** @var \Drupal\block\Entity\Block $block */
+        /** @var Block $block */
         foreach ($blocks as $block) {
           $build = $this->blockViewBuilder->view($block);
           $content[] = [
@@ -98,7 +101,7 @@ class Blocks implements EventSubscriberInterface {
   }
 
   /**
-   * @param \Drupal\digital_signage_framework\Event\Underlays $event
+   * @param Underlays $event
    */
   public function onUnderlays(Underlays $event): void {
     foreach ($this->renderBlocks('digital_signage_underlays') as $renderBlock) {
@@ -107,7 +110,7 @@ class Blocks implements EventSubscriberInterface {
   }
 
   /**
-   * @param \Drupal\digital_signage_framework\Event\Overlays $event
+   * @param Overlays $event
    */
   public function onOverlays(Overlays $event): void {
     foreach ($this->renderBlocks('digital_signage_overlays') as $renderBlock) {
diff --git a/src/Form/ActionBase.php b/src/Form/ActionBase.php
index 019e38b..7105417 100644
--- a/src/Form/ActionBase.php
+++ b/src/Form/ActionBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework\Form;
 
+use Drupal\digital_signage_framework\DeviceInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -20,39 +21,39 @@ abstract class ActionBase extends ConfirmFormBase {
   /**
    * The temp store factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\digital_signage_framework\ScheduleManager
+   * @var ScheduleManager
    */
   protected $scheduleManager;
 
   /**
-   * @var \Drupal\digital_signage_framework\DeviceInterface[]
+   * @var DeviceInterface[]
    */
   protected $devices;
 
   /**
-   * @var \Drupal\digital_signage_framework\Query
+   * @var Query
    */
   protected $queryService;
 
   /**
    * Constructs a new EmergencyMode confirm form.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\digital_signage_framework\ScheduleManager $schedule_manager
-   * @param \Drupal\digital_signage_framework\Query $query_service
+   * @param PrivateTempStoreFactory $temp_store_factory
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ScheduleManager $schedule_manager
+   * @param Query $query_service
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $entity_type_manager, ScheduleManager $schedule_manager, Query $query_service) {
     $this->tempStoreFactory = $temp_store_factory;
diff --git a/src/Form/Device.php b/src/Form/Device.php
index 0cf6126..91cf7ae 100644
--- a/src/Form/Device.php
+++ b/src/Form/Device.php
@@ -20,7 +20,7 @@ class Device extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New device %label has been created.', $message_arguments));
diff --git a/src/Form/EmergencyMode.php b/src/Form/EmergencyMode.php
index ff06376..976ba33 100644
--- a/src/Form/EmergencyMode.php
+++ b/src/Form/EmergencyMode.php
@@ -15,7 +15,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class EmergencyMode extends ActionBase {
 
   /**
-   * @var \Drupal\digital_signage_framework\Emergency
+   * @var Emergency
    */
   protected $emergency;
 
diff --git a/src/Form/SyncDevices.php b/src/Form/SyncDevices.php
index 856ece0..905c193 100644
--- a/src/Form/SyncDevices.php
+++ b/src/Form/SyncDevices.php
@@ -14,7 +14,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class SyncDevices extends ConfirmFormBase {
 
   /**
-   * @var \Drupal\digital_signage_framework\PlatformPluginManager
+   * @var PlatformPluginManager
    */
   protected $pluginManager;
 
diff --git a/src/PlatformInterface.php b/src/PlatformInterface.php
index 026f3d3..cdbc67e 100644
--- a/src/PlatformInterface.php
+++ b/src/PlatformInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\digital_signage_framework\Entity\Device;
 use Drupal\digital_signage_framework\DeviceInterface;
 
 /**
@@ -50,21 +54,21 @@ interface PlatformInterface {
   /**
    * Syncs devices of this platform.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function syncDevices();
 
   /**
    * Receive a list of all devices from the platform.
    *
-   * @return \Drupal\digital_signage_framework\Entity\Device[]
+   * @return Device[]
    */
   public function getPlatformDevices(): array;
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    * @param bool $debug
    * @param bool $reload_assets
    * @param bool $reload_content
@@ -72,7 +76,7 @@ interface PlatformInterface {
   public function pushSchedule(DeviceInterface $device, bool $debug, bool $reload_assets, bool $reload_content);
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    * @param bool $debug
    * @param bool $reload_schedule
    * @param bool $reload_assets
@@ -81,45 +85,45 @@ interface PlatformInterface {
   public function pushConfiguration(DeviceInterface $device, bool $debug, bool $reload_schedule, bool $reload_assets, bool $reload_content);
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    * @param string $entity_type
    * @param int $entity_id
    */
   public function setEmergencyMode(DeviceInterface $device, string $entity_type, int $entity_id);
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    */
   public function disableEmergencyMode(DeviceInterface $device);
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    */
   public function debugDevice(DeviceInterface $device);
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
    * @return array
    */
   public function showDebugLog(DeviceInterface $device);
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
    * @return array
    */
   public function showErrorLog(DeviceInterface $device);
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
    * @return array
    */
   public function showSlideReport(DeviceInterface $device);
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    * @param bool $refresh
    *
    * @return array
diff --git a/src/PlatformPluginBase.php b/src/PlatformPluginBase.php
index 1cd697d..d201b55 100644
--- a/src/PlatformPluginBase.php
+++ b/src/PlatformPluginBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Core\TempStore\SharedTempStore;
+use Drupal\digital_signage_framework\Entity\Device;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -23,47 +26,47 @@ abstract class PlatformPluginBase extends PluginBase implements PlatformInterfac
   protected const PREFIX_PLATFORM_LAST_SYNC = 'digital_signage_platform.last_sync.device.';
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\digital_signage_framework\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
 
   /**
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $clientFactory;
 
   /**
-   * @var \Drupal\Core\TempStore\SharedTempStore
+   * @var SharedTempStore
    */
   protected $sharedTempStore;
 
@@ -123,7 +126,7 @@ abstract class PlatformPluginBase extends PluginBase implements PlatformInterfac
    * {@inheritdoc}
    */
   final public function syncDevices() {
-    /** @var \Drupal\digital_signage_framework\Entity\Device[] $existingDevices */
+    /** @var Device[] $existingDevices */
     $existingDevices = $this->entityTypeManager->getStorage('digital_signage_device')->loadByProperties([
       'bundle' => $this->getPluginId(),
     ]);
@@ -162,10 +165,10 @@ abstract class PlatformPluginBase extends PluginBase implements PlatformInterfac
    * Compares all field values and if at least one got changed, saves the
    * updated entity.
    *
-   * @param \Drupal\digital_signage_framework\Entity\Device $existingDevice
-   * @param \Drupal\digital_signage_framework\Entity\Device $platformDevice
+   * @param Device $existingDevice
+   * @param Device $platformDevice
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function update($existingDevice, $platformDevice) {
     $field_names = [
diff --git a/src/PlatformPluginManager.php b/src/PlatformPluginManager.php
index f90273e..1b8efe3 100644
--- a/src/PlatformPluginManager.php
+++ b/src/PlatformPluginManager.php
@@ -18,7 +18,7 @@ use Traversable;
 class PlatformPluginManager extends DefaultPluginManager {
 
   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -28,11 +28,11 @@ class PlatformPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, LoggerInterface $logger) {
     $this->logger = $logger;
@@ -89,26 +89,26 @@ class PlatformPluginManager extends DefaultPluginManager {
   }
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    * @param bool $debug
    * @param bool $reload_assets
    * @param bool $reload_content
    */
   public function pushSchedule($device, $debug = FALSE, $reload_assets = FALSE, $reload_content = FALSE) {
-    /** @var \Drupal\digital_signage_framework\PlatformInterface $plugin */
+    /** @var PlatformInterface $plugin */
     $plugin = $this->createInstance($device->bundle());
     $plugin->pushSchedule($device, $debug, $reload_assets, $reload_content);
   }
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    * @param bool $debug
    * @param bool $reload_schedule
    * @param bool $reload_assets
    * @param bool $reload_content
    */
   public function pushConfiguration(DeviceInterface $device, bool $debug, bool $reload_schedule, bool $reload_assets, bool $reload_content) {
-    /** @var \Drupal\digital_signage_framework\PlatformInterface $plugin */
+    /** @var PlatformInterface $plugin */
     $plugin = $this->createInstance($device->bundle());
     $plugin->pushConfiguration($device, $debug, $reload_schedule, $reload_assets, $reload_content);
   }
diff --git a/src/Plugin/Action/Base.php b/src/Plugin/Action/Base.php
index 0c35b99..e1567f8 100644
--- a/src/Plugin/Action/Base.php
+++ b/src/Plugin/Action/Base.php
@@ -17,14 +17,14 @@ abstract class Base extends ActionBase implements ContainerFactoryPluginInterfac
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
diff --git a/src/Plugin/DigitalSignageScheduleGenerator/Base.php b/src/Plugin/DigitalSignageScheduleGenerator/Base.php
index ed5255b..1747083 100644
--- a/src/Plugin/DigitalSignageScheduleGenerator/Base.php
+++ b/src/Plugin/DigitalSignageScheduleGenerator/Base.php
@@ -26,7 +26,7 @@ class Base extends ScheduleGeneratorPluginBase {
   public function generate($device, $contentSettings): array {
     $sequenceItems = [];
     $criticalSequenceItems = [];
-    /** @var \Drupal\digital_signage_framework\Entity\ContentSetting[] $nonCriticalEntities */
+    /** @var ContentSetting[] $nonCriticalEntities */
     $nonCriticalEntities = [];
     $nonChosenEntities = [];
 
@@ -50,7 +50,7 @@ class Base extends ScheduleGeneratorPluginBase {
 
     $weightMap = $this->getWeightMap($nonCriticalEntities, $weight);
 
-    /** @var \Drupal\digital_signage_framework\Entity\ContentSetting $contentEntityTmp */
+    /** @var ContentSetting $contentEntityTmp */
     $contentEntityTmp = NULL;
     for ($i = 0; $i < $weightSum; $i++) {
       $contentEntity = $this->getNonCriticalEntity($weightMap, $weightSum);
@@ -79,8 +79,8 @@ class Base extends ScheduleGeneratorPluginBase {
   /**
    * Sort by priority function for entities.
    *
-   * @param \Drupal\digital_signage_framework\Entity\ContentSetting $contentSetting
-   * @param \Drupal\digital_signage_framework\Entity\ContentSetting $otherContentSetting
+   * @param ContentSetting $contentSetting
+   * @param ContentSetting $otherContentSetting
    *
    * @return int
    */
@@ -97,7 +97,7 @@ class Base extends ScheduleGeneratorPluginBase {
    * @param $weightMap
    * @param $weightSum
    *
-   * @return \Drupal\digital_signage_framework\Entity\ContentSetting
+   * @return ContentSetting
    */
   private function getNonCriticalEntity($weightMap, $weightSum): ContentSetting {
     /** @noinspection RandomApiMigrationInspection */
@@ -114,8 +114,8 @@ class Base extends ScheduleGeneratorPluginBase {
   /**
    * Returns a weighted array for entities.
    *
-   * @param \Drupal\digital_signage_framework\Entity\ContentSetting[] $nonCriticalEntities
-   * @param \Drupal\digital_signage_framework\WeightInterface $weight
+   * @param ContentSetting[] $nonCriticalEntities
+   * @param WeightInterface $weight
    *
    * @return array
    */
diff --git a/src/Plugin/Field/FieldFormatter/Preview.php b/src/Plugin/Field/FieldFormatter/Preview.php
index 08c2469..6d692bf 100644
--- a/src/Plugin/Field/FieldFormatter/Preview.php
+++ b/src/Plugin/Field/FieldFormatter/Preview.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework\Plugin\Field\FieldFormatter;
 
+use Drupal\digital_signage_framework\DeviceInterface;
 use Drupal;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -37,7 +38,7 @@ class Preview extends FormatterBase {
     if (!Drupal::currentUser()->hasPermission('digital signage framework access preview')) {
       return [];
     }
-    /** @var \Drupal\digital_signage_framework\DeviceInterface $device */
+    /** @var DeviceInterface $device */
     $device = $items->getEntity();
     $build = [
       '#prefix' => '<div class="digital-signage-device-preview-buttons">',
diff --git a/src/Query.php b/src/Query.php
index 7c5b78b..32fdbbb 100644
--- a/src/Query.php
+++ b/src/Query.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -9,20 +10,20 @@ use Drupal\Core\Entity\EntityTypeManagerInterface;
 class Query {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\digital_signage_framework\Emergency
+   * @var Emergency
    */
   protected $emergency;
 
   /**
    * Renderer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\digital_signage_framework\Emergency $emergency
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param Emergency $emergency
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Emergency $emergency) {
     $this->entityTypeManager = $entity_type_manager;
@@ -30,9 +31,9 @@ class Query {
   }
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface[] $devices
+   * @param DeviceInterface[] $devices
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    */
   public function allEntitiesForSelect(array $devices): array {
     $entities = [];
diff --git a/src/Renderer.php b/src/Renderer.php
index d140bcb..9e86c2b 100644
--- a/src/Renderer.php
+++ b/src/Renderer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Render\MarkupInterface;
@@ -14,26 +15,26 @@ use Drupal\Core\Render\RendererInterface;
 class Renderer {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
-   * @var \Drupal\Core\Render\HtmlResponseAttachmentsProcessor
+   * @var HtmlResponseAttachmentsProcessor
    */
   protected $attachmentProcessor;
 
   /**
    * Renderer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\Core\Render\HtmlResponseAttachmentsProcessor $attachment_processor
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param RendererInterface $renderer
+   * @param HtmlResponseAttachmentsProcessor $attachment_processor
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, HtmlResponseAttachmentsProcessor $attachment_processor) {
     $this->entityTypeManager = $entity_type_manager;
@@ -44,12 +45,12 @@ class Renderer {
   /**
    * @param string $entityType
    * @param string $entityId
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
    * @return array
    */
   public function buildEntityView($entityType, $entityId, $device): array {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     try {
       $entity = $this->entityTypeManager->getStorage($entityType)
         ->load($entityId);
@@ -66,7 +67,7 @@ class Renderer {
   /**
    * @param array $output
    *
-   * @return \Drupal\Core\Render\AttachmentsInterface
+   * @return AttachmentsInterface
    */
   public function buildHtmlResponse($output): AttachmentsInterface {
     $response = new HtmlResponse();
@@ -91,7 +92,7 @@ class Renderer {
   /**
    * @param array $elements
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    */
   public function renderPlain(&$elements): MarkupInterface {
     return $this->renderer->renderPlain($elements);
diff --git a/src/ScheduleGeneratorInterface.php b/src/ScheduleGeneratorInterface.php
index 7eba3a7..0a69790 100644
--- a/src/ScheduleGeneratorInterface.php
+++ b/src/ScheduleGeneratorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\digital_signage_framework\Entity\ContentSetting;
 /**
  * Interface for digital_signage_schedule_generator plugins.
  */
@@ -18,10 +19,10 @@ interface ScheduleGeneratorInterface {
   /**
    * Generates the actual schedule.
    *
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
-   * @param \Drupal\digital_signage_framework\Entity\ContentSetting[] $contentSettings
+   * @param DeviceInterface $device
+   * @param ContentSetting[] $contentSettings
    *
-   * @return \Drupal\digital_signage_framework\SequenceItem[]
+   * @return SequenceItem[]
    */
   public function generate(DeviceInterface $device, array $contentSettings): array;
 
diff --git a/src/ScheduleGeneratorPluginBase.php b/src/ScheduleGeneratorPluginBase.php
index e8eec8e..1af6e23 100644
--- a/src/ScheduleGeneratorPluginBase.php
+++ b/src/ScheduleGeneratorPluginBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ -14,17 +16,17 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class ScheduleGeneratorPluginBase extends PluginBase implements ScheduleGeneratorInterface, ContainerFactoryPluginInterface  {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;
 
@@ -34,8 +36,8 @@ abstract class ScheduleGeneratorPluginBase extends PluginBase implements Schedul
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param EntityTypeManager $entity_type_manager
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManager $entity_type_manager, ConfigFactoryInterface $config_factory) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -44,7 +46,7 @@ abstract class ScheduleGeneratorPluginBase extends PluginBase implements Schedul
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
diff --git a/src/ScheduleGeneratorPluginManager.php b/src/ScheduleGeneratorPluginManager.php
index ba2979e..3678e8f 100644
--- a/src/ScheduleGeneratorPluginManager.php
+++ b/src/ScheduleGeneratorPluginManager.php
@@ -19,9 +19,9 @@ class ScheduleGeneratorPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/ScheduleListBuilder.php b/src/ScheduleListBuilder.php
index 33db4f6..1e8c73f 100644
--- a/src/ScheduleListBuilder.php
+++ b/src/ScheduleListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -18,27 +19,27 @@ class ScheduleListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new DigitalSignageScheduleListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ -85,7 +86,7 @@ class ScheduleListBuilder extends EntityListBuilder {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function buildRow(EntityInterface $entity): array {
     /* @var $entity \Drupal\digital_signage_framework\ScheduleInterface */
diff --git a/src/ScheduleManager.php b/src/ScheduleManager.php
index c737894..0643213 100644
--- a/src/ScheduleManager.php
+++ b/src/ScheduleManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ -15,22 +16,22 @@ use Drupal\digital_signage_framework\Entity\Schedule;
 class ScheduleManager {
 
   /**
-   * @var \Drupal\digital_signage_framework\ScheduleGeneratorPluginManager
+   * @var ScheduleGeneratorPluginManager
    */
   protected $generatorPluginManager;
 
   /**
-   * @var \Drupal\digital_signage_framework\PlatformPluginManager
+   * @var PlatformPluginManager
    */
   protected $platformPluginManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -45,7 +46,7 @@ class ScheduleManager {
    * @param int|null $deviceId
    * @param bool $all
    *
-   * @return \Drupal\digital_signage_framework\DeviceInterface[]
+   * @return DeviceInterface[]
    */
   protected function getDevices($deviceId = NULL, $all = FALSE): array {
     try {
@@ -72,18 +73,18 @@ class ScheduleManager {
   }
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
-   * @param \Drupal\digital_signage_framework\ScheduleGeneratorInterface $plugin
+   * @param DeviceInterface $device
+   * @param ScheduleGeneratorInterface $plugin
    * @param bool $store
    * @param bool $force
    * @param string|null $entityType
    * @param int|null $entityId
    *
-   * @return \Drupal\digital_signage_framework\ScheduleInterface
+   * @return ScheduleInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function createSchedule(DeviceInterface $device, ScheduleGeneratorInterface $plugin, bool $store, bool $force, $entityType = NULL, $entityId = NULL) {
     // Collect the content entities for this schedule
@@ -117,9 +118,9 @@ class ScheduleManager {
 
     $contentSettings = [];
     $hashMap = [];
-    /** @var \Drupal\digital_signage_framework\ContentSettingInterface $item */
+    /** @var ContentSettingInterface $item */
     foreach ($this->entityTypeManager->getStorage('digital_signage_content_setting')->loadMultiple($query->execute()) as $item) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if (($entity = $this->entityTypeManager->getStorage($item->getReverseEntityType())->load($item->getReverseEntityId())) &&
         (!$entity->hasField('status') || $entity->get('status')->value)) {
         $contentSettings[] = $item;
@@ -140,7 +141,7 @@ class ScheduleManager {
     // See if we already have a schedule with that.
     $scheduleHash = md5(json_encode($hashMap));
     try {
-      /** @var \Drupal\digital_signage_framework\ScheduleInterface[] $schedules */
+      /** @var ScheduleInterface[] $schedules */
       $schedules = $this->entityTypeManager
         ->getStorage('digital_signage_schedule')
         ->loadByProperties([
@@ -157,7 +158,7 @@ class ScheduleManager {
       foreach ($plugin->generate($device, $contentSettings) as $sequenceItem) {
         $this->addItemAndSuccessors($items, $sequenceItem, $device);
       }
-      /** @var \Drupal\digital_signage_framework\ScheduleInterface $schedule */
+      /** @var ScheduleInterface $schedule */
       $schedule = Schedule::create([
         'hash' => $scheduleHash,
         'items' => [$items],
@@ -186,7 +187,7 @@ class ScheduleManager {
 
   /**
    * @param array $items
-   * @param \Drupal\digital_signage_framework\SequenceItem $sequenceItem
+   * @param SequenceItem $sequenceItem
    * @param DeviceInterface $device
    * @param int $level
    */
@@ -213,7 +214,7 @@ class ScheduleManager {
    */
   public function pushSchedules($deviceId = NULL, $force = FALSE, $debug = FALSE, $reload_assets = FALSE, $reload_content = FALSE, $entityType = NULL, $entityId = NULL) {
     try {
-      /** @var \Drupal\digital_signage_framework\ScheduleGeneratorInterface $plugin */
+      /** @var ScheduleGeneratorInterface $plugin */
       $plugin = $this->generatorPluginManager->createInstance('default');
       foreach ($this->getDevices($deviceId, $force) as $device) {
           $schedule = $this->createSchedule($device, $plugin, TRUE, $force, $entityType, $entityId);
@@ -245,13 +246,13 @@ class ScheduleManager {
   }
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
-   * @return \Drupal\digital_signage_framework\ScheduleInterface|null
+   * @return ScheduleInterface|null
    */
   public function getSchedule(DeviceInterface $device) {
     try {
-      /** @var \Drupal\digital_signage_framework\ScheduleGeneratorInterface $plugin */
+      /** @var ScheduleGeneratorInterface $plugin */
       $plugin = $this->generatorPluginManager->createInstance('default');
       return $this->createSchedule($device, $plugin, FALSE, TRUE);
     }
diff --git a/src/SequenceItem.php b/src/SequenceItem.php
index 511fc3c..ec732a5 100644
--- a/src/SequenceItem.php
+++ b/src/SequenceItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\digital_signage_framework;
 
+use Drupal\media\MediaTypeInterface;
 use Drupal;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ -45,7 +46,7 @@ class SequenceItem {
   /**
    * Returns a sequence item by the given entity and duration.
    *
-   * @param \Drupal\digital_signage_framework\ContentSettingInterface $contentSetting
+   * @param ContentSettingInterface $contentSetting
    * @param int $duration
    *
    * @return \Drupal\digital_signage_framework\SequenceItem
@@ -63,7 +64,7 @@ class SequenceItem {
   }
 
   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
    * @return array
    */
@@ -89,7 +90,7 @@ class SequenceItem {
         $query
           ->condition($orQuery)
           ->condition('predecessor', $this->id);
-        /** @var \Drupal\digital_signage_framework\ContentSettingInterface $item */
+        /** @var ContentSettingInterface $item */
         foreach ($entityTypeManager->getStorage('digital_signage_content_setting')->loadMultiple($query->execute()) as $item) {
           $this->successors[] = self::create($item, $this->duration);
         }
@@ -110,7 +111,7 @@ class SequenceItem {
   protected function determineType(): void {
     $this->type = 'html';
     if ($this->entityType === 'media') {
-      /** @var \Drupal\media\MediaTypeInterface $mediaType */
+      /** @var MediaTypeInterface $mediaType */
       $mediaType = MediaType::load($this->entityBundle);
       if (($fieldDefinition = $mediaType->getSource()->getSourceFieldDefinition($mediaType)) &&
           $fieldDefinition->getSetting('handler')) {
