modules/contrib/domain_language_google_tag/domain_language_google_tag.module
modules/contrib/domain_language_google_tag/src/EventSubscriber/GoogleTagResponseSubscriber.php
modules/contrib/domain_language_google_tag/src/Form/DomainLanguageGoogleTagSettingsForm.php

2 files with changes
====================

1) modules/contrib/domain_language_google_tag/src/Form/DomainLanguageGoogleTagSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_language_google_tag\Form;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ @@
   /**
    * The config object for the domain_language_google_tag settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
   /**
@@ @@
       $url = Url::fromRoute('domain.admin');
       $domain_link = Link::fromTextAndUrl($this->t('Domain records'), $url);
       $domain_link = $domain_link->toRenderable();
-      $form['title']['#markup'] = $this->t('There is no Domain record yet.Please create a domain records. See link: @domain_list', ['@domain_list' => render($domain_link)]);
+      $form['title']['#markup'] = $this->t('There is no Domain record yet.Please create a domain records. See link: @domain_list', ['@domain_list' => \Drupal::service('renderer')->render($domain_link)]);
       return $form;
     }
   }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/domain_language_google_tag/src/EventSubscriber/GoogleTagResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_language_google_tag\EventSubscriber;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\domain\DomainNegotiatorInterface;
 use Drupal\Core\Language\LanguageManager;
@@ @@
   /**
    * The config object for the domain_language_google_tag settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The DomainNegotiator.
    *
-   * @var \Drupal\domain\DomainNegotiatorInterface
+   * @var DomainNegotiatorInterface
    */
   protected $activeDomain;

@@ @@
   /**
    * The LanguageManager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new Google Tag Manager response subscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
-   * @param \Drupal\domain\DomainNegotiatorInterface $negotiator
+   * @param DomainNegotiatorInterface $negotiator
    *   The domain negotiator service.
-   * @param \Drupal\Core\Language\LanguageManager $languageManager
+   * @param LanguageManager $languageManager
    *   The language manager service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, DomainNegotiatorInterface $negotiator, LanguageManager $languageManager) {
@@ @@
   /**
    * Add a tags in boby.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *
    *   Set response.
    */
-  public function addTag(FilterResponseEvent $event) {
+  public function addTag(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 2 files have been changed by Rector                                       

