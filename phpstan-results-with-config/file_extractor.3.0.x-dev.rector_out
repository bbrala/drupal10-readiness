modules/contrib/file_extractor/file_extractor.install
modules/contrib/file_extractor/file_extractor.module
modules/contrib/file_extractor/file_extractor.post_update.php
modules/contrib/file_extractor/src/Annotation/FileExtractorExtractor.php
modules/contrib/file_extractor/src/Event/FileIndexableEvent.php
modules/contrib/file_extractor/src/ExtractionSettingsFormHelper.php
modules/contrib/file_extractor/src/Extractor/ExtractorPluginBase.php
modules/contrib/file_extractor/src/Extractor/ExtractorPluginInterface.php
modules/contrib/file_extractor/src/Extractor/ExtractorPluginManager.php
modules/contrib/file_extractor/src/Form/SettingsForm.php
modules/contrib/file_extractor/src/Form/TestForm.php
modules/contrib/file_extractor/src/HookHandler/EntityTypeInfoHandler.php
modules/contrib/file_extractor/src/Plugin/Field/ExtractedFileFieldItemList.php
modules/contrib/file_extractor/src/Plugin/Field/FieldFormatter/ExtractedText.php
modules/contrib/file_extractor/src/Plugin/file_extractor/Extractor/DocconvExtractor.php
modules/contrib/file_extractor/src/Plugin/file_extractor/Extractor/PdftotextExtractor.php
modules/contrib/file_extractor/src/Plugin/file_extractor/Extractor/PythonPdf2txtExtractor.php
modules/contrib/file_extractor/src/Plugin/file_extractor/Extractor/SearchApiSolrExtractor.php
modules/contrib/file_extractor/src/Plugin/file_extractor/Extractor/TikaExtractor.php
modules/contrib/file_extractor/src/Plugin/file_extractor/Extractor/TikaServerExtractor.php
modules/contrib/file_extractor/src/Service/ExtractorManager.php
modules/contrib/file_extractor/src/Service/ExtractorManagerInterface.php
modules/contrib/file_extractor/src/Service/FileExtractorUpdater.php
modules/contrib/file_extractor/src/Service/FileExtractorUpdaterInterface.php
modules/contrib/file_extractor/src/Service/TestFileHelper.php
modules/contrib/file_extractor/src/Service/TestFileHelperInterface.php
modules/contrib/file_extractor/tests/src/Functional/Extractor/ExtractorTestBase.php
modules/contrib/file_extractor/tests/src/Functional/Extractor/TikaServerExtractorTest.php
modules/contrib/file_extractor/tests/src/Kernel/Extractor/DocconvExtractorTest.php
modules/contrib/file_extractor/tests/src/Kernel/Extractor/ExtractorTestBase.php
modules/contrib/file_extractor/tests/src/Kernel/Extractor/PdftotextExtractorTest.php
modules/contrib/file_extractor/tests/src/Kernel/Extractor/PythonPdf2txtExtractorTest.php
modules/contrib/file_extractor/tests/src/Kernel/Extractor/TikaExtractorTest.php
modules/contrib/file_extractor/tests/src/Traits/FileExtractorTestTrait.php

19 files with changes
=====================

1) modules/contrib/file_extractor/tests/src/Traits/FileExtractorTestTrait.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\file_extractor\Traits;

+use Drupal\file_extractor\Service\TestFileHelperInterface;
+use Drupal\file_extractor\Extractor\ExtractorPluginInterface;
+use Drupal\file_extractor\Extractor\ExtractorPluginManager;
 /**
  * Avoid code duplication between test base classes.
  */
@@ @@
   /**
    * Test file helper service.
    *
-   * @var \Drupal\file_extractor\Service\TestFileHelperInterface
+   * @var TestFileHelperInterface
    */
   protected $testFileHelper;

@@ @@
   /**
    * The tested extractor.
    *
-   * @var \Drupal\file_extractor\Extractor\ExtractorPluginInterface
+   * @var ExtractorPluginInterface
    */
   protected $extractor;

@@ @@

     $this->testFileHelper = $this->container->get('file_extractor.test_file_helper');

-    /** @var \Drupal\file_extractor\Extractor\ExtractorPluginManager $extractor_plugin_manager */
+    /** @var ExtractorPluginManager $extractor_plugin_manager */
     $extractor_plugin_manager = $this->container->get('plugin.manager.file_extractor.extractor');
     $this->extractor = $extractor_plugin_manager->createInstance($this->extractorPluginId, $this->extractorPluginConfiguration);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/file_extractor/tests/src/Functional/Extractor/TikaServerExtractorTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * The process running the Tika server.
    *
-   * @var \Symfony\Component\Process\Process
+   * @var Process
    */
   protected $process;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/file_extractor/src/Service/TestFileHelperInterface.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Helper function to get the test file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file used for the test.
    */
   public function getTestFile() : FileInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/file_extractor/src/Service/TestFileHelper.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The test file.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $testFile;

@@ @@
   /**
    * TestFileHelper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(
@@ @@
   public function getTestFile() : FileInterface {
     if (!isset($this->testFile)) {
       // Copy the source file to public directory.
-      $source = drupal_get_path('module', 'file_extractor');
+      $source = \Drupal::service('extension.list.module')->getPath('file_extractor');
       $source .= '/data/' . self::TEST_FILENAME;
       $this->fileSystem->copy($source, self::TEST_FILE_URI, FileSystemInterface::EXISTS_REPLACE);

-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $this->entityTypeManager->getStorage('file')->create([
         'filename' => self::TEST_FILENAME,
         'filemime' => 'application/pdf',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/file_extractor/src/Service/FileExtractorUpdater.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_extractor\Service;

+use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(
@@ @@
     $file_fields = &drupal_static(__FUNCTION__);

     if (!isset($file_fields)) {
-      /** @var \Drupal\field\Entity\FieldConfig[] $field_instance_config_entities */
+      /** @var FieldConfig[] $field_instance_config_entities */
       $field_instance_config_entities = $this->entityTypeManager->getStorage('field_config')->loadMultiple();

       $file_fields = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/file_extractor/src/Service/ExtractorManagerInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Extract file content.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file to extract content from.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/file_extractor/src/Service/ExtractorManager.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_extractor\Service;

+use Drupal\file_extractor\Extractor\ExtractorPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The extractor plugin manager.
    *
-   * @var \Drupal\file_extractor\Extractor\ExtractorPluginManager
+   * @var ExtractorPluginManager
    */
   protected $extractorPluginManager;

@@ @@
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The mime type guesser.
    *
-   * @var \Symfony\Component\Mime\MimeTypeGuesserInterface
+   * @var MimeTypeGuesserInterface
    */
   protected $mimeTypeGuesser;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The cache backend service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * ExtractorManager constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\file_extractor\Extractor\ExtractorPluginManager $extractor_plugin_manager
+   * @param ExtractorPluginManager $extractor_plugin_manager
    *   The extractor plugin manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger.
-   * @param \Symfony\Component\Mime\MimeTypeGuesserInterface $mimeTypeGuesser
+   * @param MimeTypeGuesserInterface $mimeTypeGuesser
    *   Mime type guesser service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $file_extractor_cache
+   * @param CacheBackendInterface $file_extractor_cache
    *   The cache backend service.
    */
   public function __construct(
@@ @@
   /**
    * Helper function.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to extract.
    *
    * @return string
@@ @@
     }

     try {
-      /** @var \Drupal\file_extractor\Extractor\ExtractorPluginInterface $extractor_plugin */
+      /** @var ExtractorPluginInterface $extractor_plugin */
       $extractor_plugin = $this->extractorPluginManager->createInstance($extractor_plugin_id, $extractor_plugin_settings);
     }
     catch (PluginException $exception) {
@@ @@
   /**
    * Check if the file is allowed to be indexed.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   A file object.
    *
    * @return bool
@@ @@
   /**
    * Exclude files that exceed configured max size.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File object.
    *
    * @return bool
@@ @@
   /**
    * Exclude private files from being indexed.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File object.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/file_extractor/src/Plugin/file_extractor/Extractor/TikaServerExtractor.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_extractor\Plugin\file_extractor\Extractor;

+use GuzzleHttp\Client;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\file\FileInterface;
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/file_extractor/src/Plugin/Field/FieldFormatter/ExtractedText.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_extractor\Plugin\Field\FieldFormatter;

+use Drupal\file_extractor\Service\ExtractorManagerInterface;
+use Drupal\Core\DependencyInjection\ClassResolverInterface;
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ @@
   /**
    * The extractor manager.
    *
-   * @var \Drupal\file_extractor\Service\ExtractorManagerInterface
+   * @var ExtractorManagerInterface
    */
   protected $extractorManager;

@@ @@
   /**
    * Class resolver service.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;

@@ @@

     $form_state->setTemporary($this->getSetting('extraction_settings'));
     $extraction_settings_form_state = SubformState::createForSubform($form['extraction_settings'], $form, $form_state);
-    /** @var \Drupal\file_extractor\ExtractionSettingsFormHelper $extraction_settings_form_helper */
+    /** @var ExtractionSettingsFormHelper $extraction_settings_form_helper */
     $extraction_settings_form_helper = $this->classResolver->getInstanceFromDefinition(ExtractionSettingsFormHelper::class);
     $form['extraction_settings'] = $extraction_settings_form_helper->buildConfigurationForm($form['extraction_settings'], $extraction_settings_form_state);

@@ @@
    *
    * @param array $element
    *   The form element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param array $form
    *   The form representation.
@@ @@
    */
   public static function validateSettingsForm(array $element, FormStateInterface $form_state, array $form) : void {
     $extraction_settings_form_state = SubformState::createForSubform($element['extraction_settings'], $form, $form_state);
-    /** @var \Drupal\file_extractor\ExtractionSettingsFormHelper $extraction_settings_form_helper */
+    /** @var ExtractionSettingsFormHelper $extraction_settings_form_helper */
     $extraction_settings_form_helper = \Drupal::service('class_resolver')->getInstanceFromDefinition(ExtractionSettingsFormHelper::class);
     $extraction_settings_form_helper->validateConfigurationForm($element['extraction_settings'], $extraction_settings_form_state);
   }
@@ @@
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items */
+    /** @var EntityReferenceFieldItemListInterface $items */
     $elements = [];

     if ($this->getSetting('override_global_extraction_settings')) {
@@ @@
     }

     foreach ($this->getEntitiesToView($items, $langcode) as $delta => $file) {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $elements[$delta] = [
         '#markup' => $this->extractorManager->extract($file),
         '#cache' => [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/file_extractor/src/Plugin/Field/ExtractedFileFieldItemList.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_extractor\Plugin\Field;

+use Drupal\file_extractor\Service\ExtractorManagerInterface;
+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Field\FieldItemList;
 use Drupal\Core\TypedData\ComputedItemListTrait;
 use Drupal\file\FileInterface;
@@ @@
     }

     // There does ot seem to have dependency injection in FieldItemList.
-    /** @var \Drupal\file_extractor\Service\ExtractorManagerInterface $extractor_manager */
+    /** @var ExtractorManagerInterface $extractor_manager */
     $extractor_manager = \Drupal::service('file_extractor.extractor_manager');

     $extracted_data = $extractor_manager->extract($entity);
@@ @@
     // done yet or is empty, we do not create list items for the computed field.
     if (!empty($extracted_data)) {
       // An entity can only have a single extracted data.
-      /** @var \Drupal\Core\Field\FieldItemInterface $field_item */
+      /** @var FieldItemInterface $field_item */
       $field_item = $this->createItem(0, $extracted_data);
       $this->list[0] = $field_item;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/file_extractor/src/HookHandler/EntityTypeInfoHandler.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Adds base field info to an entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   Entity type for adding base fields to.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition[]
+   * @return BaseFieldDefinition[]
    *   New fields added.
    *
    * @see hook_entity_base_field_info()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/file_extractor/src/Form/TestForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The extractor manager.
    *
-   * @var \Drupal\file_extractor\Service\ExtractorManagerInterface
+   * @var ExtractorManagerInterface
    */
   protected $extractorManager;

@@ @@
   /**
    * Test file helper.
    *
-   * @var \Drupal\file_extractor\Service\TestFileHelperInterface
+   * @var TestFileHelperInterface
    */
   protected $testFileHelper;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/file_extractor/src/Form/SettingsForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_extractor\Form;

+use Drupal\file_extractor\Extractor\ExtractorPluginManager;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\DependencyInjection\ClassResolverInterface;
+use Drupal\file_extractor\Extractor\ExtractorPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Form\SubformState;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ @@
   /**
    * Text extractor plugin Manager.
    *
-   * @var \Drupal\file_extractor\Extractor\ExtractorPluginManager
+   * @var ExtractorPluginManager
    */
   private $extractorPluginManager;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Class resolver service.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;

@@ @@
     $config_extraction_settings = is_null($config->get('extraction_settings')) ? [] : $config->get('extraction_settings');
     $form_state->setTemporary($config_extraction_settings);
     $extraction_settings_form_state = SubformState::createForSubform($form['extraction_settings'], $form, $form_state);
-    /** @var \Drupal\file_extractor\ExtractionSettingsFormHelper $extraction_settings_form_helper */
+    /** @var ExtractionSettingsFormHelper $extraction_settings_form_helper */
     $extraction_settings_form_helper = $this->classResolver->getInstanceFromDefinition(ExtractionSettingsFormHelper::class);
     $form['extraction_settings'] = $extraction_settings_form_helper->buildConfigurationForm($form['extraction_settings'], $extraction_settings_form_state);

@@ @@

     // Extraction settings validation.
     $extraction_settings_form_state = SubformState::createForSubform($form['extraction_settings'], $form, $form_state);
-    /** @var \Drupal\file_extractor\ExtractionSettingsFormHelper $extraction_settings_form_helper */
+    /** @var ExtractionSettingsFormHelper $extraction_settings_form_helper */
     $extraction_settings_form_helper = $this->classResolver->getInstanceFromDefinition(ExtractionSettingsFormHelper::class);
     $extraction_settings_form_helper->validateConfigurationForm($form['extraction_settings'], $extraction_settings_form_state);
   }
@@ @@
     $selected_extraction_method_settings = $form_state->getValue('extraction_method_settings', []);

     try {
-      /** @var \Drupal\file_extractor\Extractor\ExtractorPluginInterface $extractor_plugin */
+      /** @var ExtractorPluginInterface $extractor_plugin */
       $extractor_plugin = $this->getExtractorPluginManager()->createInstance($selected_extraction_method, $selected_extraction_method_settings);

       if ($extractor_plugin instanceof PluginFormInterface) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function buildExtractorConfigForm(array &$form, FormStateInterface $form_state) : void {
@@ @@
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
    * This method is required because sometimes with AJAX reloading the attribute
    * 'extractorPluginManager' is NULL.
    *
-   * @return \Drupal\file_extractor\Extractor\ExtractorPluginManager
+   * @return ExtractorPluginManager
    *   The extractor plugin manager.
    */
   protected function getExtractorPluginManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/file_extractor/src/Extractor/ExtractorPluginManager.php:52

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function createInstance($plugin_id, array $configuration = []) {
-    /** @var \Drupal\file_extractor\Extractor\ExtractorPluginInterface $instance */
+    /** @var ExtractorPluginInterface $instance */
     $instance = parent::createInstance($plugin_id);
     $instance->setConfiguration($configuration);
     return $instance;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/file_extractor/src/Extractor/ExtractorPluginInterface.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Extract file content.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/file_extractor/src/Extractor/ExtractorPluginBase.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * Mime type guesser service.
    *
-   * @var \Symfony\Component\Mime\MimeTypeGuesserInterface
+   * @var MimeTypeGuesserInterface
    */
   protected $mimeTypeGuesser;

@@ @@
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) : void {
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) : void {
@@ @@
    *   The real path to the file if it is a local file. An URL otherwise.
    */
   protected function getRealpath(string $uri) : string {
-    /** @var \Drupal\Core\StreamWrapper\StreamWrapperInterface $wrapper */
+    /** @var StreamWrapperInterface $wrapper */
     $wrapper = $this->streamWrapperManager->getViaUri($uri);
     $scheme = $this->streamWrapperManager->getScheme($uri);
     $local_wrappers = $this->streamWrapperManager->getWrappers(StreamWrapperInterface::LOCAL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/file_extractor/src/Event/FileIndexableEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_extractor\Event;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\file\FileInterface;
 use Drupal\Component\EventDispatcher\Event;

@@ @@
   /**
    * The file entity.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $file;

@@ @@
   /**
    * FileIndexableEvent constructor.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file being manipulated.
    */
   public function __construct(FileInterface $file) {
@@ @@
   /**
    * Returns the file entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity being manipulated.
    */
   public function getFile() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/file_extractor/file_extractor.post_update.php:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\layout_builder\Section;

 use Drupal\file_extractor\Service\FileExtractorUpdater;

@@ @@
     $layout_section_field_mapping = \Drupal::service('entity_field.manager')->getFieldMapByFieldType('layout_section');
     foreach ($layout_section_field_mapping as $entity_type_id => $entity_fields) {
       $sandbox['entity_fields'][$entity_type_id] = [];
-      /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
+      /** @var EntityStorageInterface $entity_storage */
       $entity_storage = \Drupal::service('entity_type.manager')->getStorage($entity_type_id);

       // There should be only one field but in case of custom development or
@@ @@
       continue;
     }

-    /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
+    /** @var EntityStorageInterface $entity_storage */
     $entity_storage = \Drupal::service('entity_type.manager')->getStorage($entity_type_id);
     /** @var string $entity_id_key */
     $entity_id_key = $entity_storage->getEntityType()->getKey('id');
@@ @@
     $query->range(0, 25);
     /** @var int[] $entity_ids_to_update */
     $entity_ids_to_update = $query->execute();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface[] $entities_to_update */
+    /** @var ContentEntityInterface[] $entities_to_update */
     $entities_to_update = $entity_storage->loadMultiple($entity_ids_to_update);

     foreach ($entities_to_update as $entity) {
@@ @@

         $sections_changed = FALSE;
         $sections = $override_field_value->getValue();
-        /** @var \Drupal\layout_builder\Section $section */
+        /** @var Section $section */
         foreach ($sections as $section) {
           $components = $section->getComponents();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


19) modules/contrib/file_extractor/file_extractor.install:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\Core\Config\Config;

 use Drupal\file_extractor\Form\SettingsForm;

@@ @@
  */
 function file_extractor_update_9102(&$sandbox) {
   \Drupal::keyValue('file_extractor')->deleteAll();
-  /** @var \Drupal\Core\Config\Config $file_extractor_settings */
+  /** @var Config $file_extractor_settings */
   $file_extractor_settings = \Drupal::service('config.factory')->getEditable(SettingsForm::CONFIG_NAME);
   $file_extractor_settings->clear('cache_enable');
   $file_extractor_settings->clear('reserve_cache');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 19 files have been changed by Rector                                      

