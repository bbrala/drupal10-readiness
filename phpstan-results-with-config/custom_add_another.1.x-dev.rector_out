modules/contrib/custom_add_another/custom_add_another.module
modules/contrib/custom_add_another/src/Tests/AddAnotherItemButtonTest.php
modules/contrib/custom_add_another/src/Tests/RemoveButtonTest.php

3 files with changes
====================

1) modules/contrib/custom_add_another/src/Tests/RemoveButtonTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_add_another\Tests;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\File\FileSystem;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Tests\file\Functional\FileFieldTestBase;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The file system manager.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ @@
     $edit = [
       'files[' . $field_name . '_0][]' => $this->fileSystem->realpath($test_file->getFileUri()),
     ];
-    $this->drupalPostForm(NULL, $edit, t('Upload'));
+    $this->submitForm($edit, t('Upload'));

     $button_name = $field_name . '_0_remove_button';
     $remove_button_xpath = '//input[@name="' . $button_name . '"]';
@@ @@

     $this->drupalGet("node/add/$type_name");
     $edit = ['files[' . $field_name . '_0][]' => $this->fileSystem->realpath($test_file->getFileUri())];
-    $this->drupalPostForm(NULL, $edit, $updated_add_more_value);
+    $this->submitForm($edit, $updated_add_more_value);

     $this->assertFieldsByValue($this->xpath('.' . $remove_button_xpath), $updated_remove_value, 'Found the "Remove" button with updated value.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/custom_add_another/src/Tests/AddAnotherItemButtonTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_add_another\Tests;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\field\FieldConfigInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Tests\field\Functional\FieldTestBase;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $web_user = $this->drupalCreateUser(['view test entity', 'administer entity_test content']);
@@ @@
       ->create($field_storage)
       ->save();

-    /** @var \Drupal\field\FieldConfigInterface $field_config_entity */
+    /** @var FieldConfigInterface $field_config_entity */
     $field_config_entity = $this
       ->entityTypeManager
       ->getStorage('field_config')
@@ @@
       ->create($this->field);
     $field_config_entity->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
+    /** @var EntityFormDisplayInterface $entity_form_display */
     $entity_form_display = $this
       ->entityTypeManager
       ->getStorage('entity_form_display')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/custom_add_another/custom_add_another.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\FieldStorageConfigInterface;
 /**
  * @file
  * Allows the 'Add another item' button text to be customised.
@@ @@
  * field instance' form.
  */
 function custom_add_another_form_field_storage_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\field\FieldConfigInterface $field */
+  /** @var FieldConfigInterface $field */
   $field = $form_state->getStorage()['field_config'];

-  /** @var \Drupal\field\FieldStorageConfigInterface $field_storage */
+  /** @var FieldStorageConfigInterface $field_storage */
   $field_storage = $form_state->getFormObject()->getEntity();

   if (!$field_storage->isLocked()) {
@@ @@
  * Submit callback that saves custom labels to field Third Party Settings.
  */
 function custom_add_another_third_party_settings_submit($form, FormStateInterface $form_state) {
-  /** @var \Drupal\field\FieldConfigInterface $field */
+  /** @var FieldConfigInterface $field */
   $field = $form_state->getStorage()['field_config'];

   if (!empty($form_state->getValue('custom_add_another'))) {
@@ @@
   $field = $context['items']->getFieldDefinition();

   if ($field instanceof FieldConfigInterface) {
-    /** @var \Drupal\field\FieldStorageConfigInterface $field_storage */
+    /** @var FieldStorageConfigInterface $field_storage */
     $field_storage = $field->getFieldStorageDefinition();

     if ($field_storage->getCardinality() == FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

