diff --git a/openam_api.info.yml b/openam_api.info.yml
index 26f84cf..29d4f34 100644
--- a/openam_api.info.yml
+++ b/openam_api.info.yml
@@ -1,7 +1,7 @@
 name: 'OpenAM API'
 description: 'Integrates OpenAM API with Drupal'
 type: module
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 configure: openam_api.settings
 
 # Information added by Drupal.org packaging script on 2021-11-07
diff --git a/src/Event/PostUserCreateEvent.php b/src/Event/PostUserCreateEvent.php
index acd7d2d..d8e680f 100644
--- a/src/Event/PostUserCreateEvent.php
+++ b/src/Event/PostUserCreateEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\openam_api\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class PostUserCreateEvent.
diff --git a/src/Event/PreUserCreateEvent.php b/src/Event/PreUserCreateEvent.php
index 739f499..1d81716 100644
--- a/src/Event/PreUserCreateEvent.php
+++ b/src/Event/PreUserCreateEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\openam_api\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class PreUserCreateEvent.
diff --git a/src/EventSubscriber/PostUserCreate.php b/src/EventSubscriber/PostUserCreate.php
index 0f50494..a35299b 100644
--- a/src/EventSubscriber/PostUserCreate.php
+++ b/src/EventSubscriber/PostUserCreate.php
@@ -21,7 +21,7 @@ class PostUserCreate implements EventSubscriberInterface {
   /**
    * Alter user before post submit.
    *
-   * @param \Drupal\openam_api\Event\PostUserCreateEvent $event
+   * @param PostUserCreateEvent $event
    *   Post User Create Event.
    */
   public function doPostUserCreateSub(PostUserCreateEvent $event) {
diff --git a/src/EventSubscriber/PreUserCreate.php b/src/EventSubscriber/PreUserCreate.php
index 46c7e8d..b0a5696 100644
--- a/src/EventSubscriber/PreUserCreate.php
+++ b/src/EventSubscriber/PreUserCreate.php
@@ -21,7 +21,7 @@ class PreUserCreate implements EventSubscriberInterface {
   /**
    * Alter user before create.
    *
-   * @param \Drupal\openam_api\Event\PreUserCreateEvent $event
+   * @param PreUserCreateEvent $event
    *   Pre User Create Event.
    */
   public function doPreUserCreate(PreUserCreateEvent $event) {
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 671329d..f56c54c 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -16,16 +16,16 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
   /**
    * Settings constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config Factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory,
diff --git a/src/Service/OpenamApiClient.php b/src/Service/OpenamApiClient.php
index b05218c..d35f0aa 100644
--- a/src/Service/OpenamApiClient.php
+++ b/src/Service/OpenamApiClient.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\openam_api\Service;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Psr\Http\Message\ResponseInterface;
+use GuzzleHttp\Exception\GuzzleException;
+use Drupal\Core\GeneratedUrl;
+use Psr\Http\Message\StreamInterface;
+use function GuzzleHttp\uri_template;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ -29,41 +36,41 @@ class OpenamApiClient {
   /**
    * An instance of Config Factory.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   private $config;
 
   /**
    * LoggerChannelFactory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   public $loggerFactory;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
   /**
    * The HTTP client to fetch the API data.
    *
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   private $httpClientFactory;
 
   /**
    * Create the OpenAM API client.
    *
-   * @param \Drupal\Core\Http\ClientFactory $httpClientFactory
+   * @param ClientFactory $httpClientFactory
    *   A Guzzle client object.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   An instance of Config Factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   LoggerChannelFactory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(ClientFactory $httpClientFactory,
@@ -120,10 +127,10 @@ class OpenamApiClient {
    * @param array $options
    *   Request options with headers and post body etc.
    *
-   * @return mixed|\Psr\Http\Message\ResponseInterface
+   * @return mixed|ResponseInterface
    *   Guzzle response instance.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function callEndpoint(array $options = []) {
     $url = $this->requestUrl($options);
@@ -139,12 +146,12 @@ class OpenamApiClient {
    * @param array $options
    *   Request options with headers and post body etc.
    *
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    *   Request url with replaced placeholder.
    */
   protected function requestUrl(array $options = []) {
     $baseUrl = $this->config->get('openam_api_url');
-    $uri = \GuzzleHttp\uri_template($options['uri'], $options['uri_template_options']);
+    $uri = uri_template($options['uri'], $options['uri_template_options']);
     return Url::fromUri($baseUrl . $uri)->toString();
   }
 
@@ -190,10 +197,10 @@ class OpenamApiClient {
    * @param array $options
    *   for Url building.
    *
-   * @return mixed|null|\Psr\Http\Message\StreamInterface
+   * @return mixed|null|StreamInterface
    *   Returns response body to be used by caller.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function queryEndpoint(array $options = []) {
     $responseContents = NULL;
diff --git a/src/Service/Users.php b/src/Service/Users.php
index 38a21a0..3aade53 100644
--- a/src/Service/Users.php
+++ b/src/Service/Users.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\openam_api\Service;
 
+use Psr\Http\Message\StreamInterface;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactory;
 use Exception;
@@ -21,14 +23,14 @@ class Users {
   /**
    * OpenAM Client.
    *
-   * @var \Drupal\openam_api\Service\OpenamApiClient
+   * @var OpenamApiClient
    */
   public $openamApiClient;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -42,11 +44,11 @@ class Users {
   /**
    * Users constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   Config factory.
-   * @param \Drupal\openam_api\Service\OpenamApiClient $openamApiClient
+   * @param OpenamApiClient $openamApiClient
    *   OpenAM API Client.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(ConfigFactory $configFactory,
@@ -66,10 +68,10 @@ class Users {
    * @param array $options
    *   Additional options for the guzzle request. e.g. proxy settings.
    *
-   * @return \Psr\Http\Message\StreamInterface
+   * @return StreamInterface
    *   Auth api response containing user id.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function isTokenValid($authToken, array $options = []) {
     try {
@@ -107,7 +109,7 @@ class Users {
    * @param string $realm
    *   The domain/store to authenticate against, default Top Level Realm (/).
    *
-   * @return \Psr\Http\Message\StreamInterface
+   * @return StreamInterface
    *   A token if the username and password match. A string "NULL" if the
    *   username and password match, but when the user is locked out.
    *
@@ -156,10 +158,10 @@ class Users {
    * @param array $options
    *   Additional options for the guzzle request. e.g. proxy settings.
    *
-   * @return \Psr\Http\Message\StreamInterface
+   * @return StreamInterface
    *   User attributes from openAM, if is successful.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function getUserData($username, $authToken, array $options = []) {
     $response = NULL;
@@ -195,10 +197,10 @@ class Users {
    * @param array $options
    *   Additional options for the guzzle request. e.g. proxy settings.
    *
-   * @return \Psr\Http\Message\StreamInterface
+   * @return StreamInterface
    *   Success message response, if logout is successful.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function logoutUser($authToken, array $options = []) {
     try {
