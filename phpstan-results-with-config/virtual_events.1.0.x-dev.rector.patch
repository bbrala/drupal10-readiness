diff --git a/src/Annotation/VirtualEventFormatterPlugin.php b/src/Annotation/VirtualEventFormatterPlugin.php
index f7a3867..c835b89 100644
--- a/src/Annotation/VirtualEventFormatterPlugin.php
+++ b/src/Annotation/VirtualEventFormatterPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\virtual_events\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class VirtualEventFormatterPlugin extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/VirtualEventPostHandlePlugin.php b/src/Annotation/VirtualEventPostHandlePlugin.php
index 3138cbb..1d515bd 100644
--- a/src/Annotation/VirtualEventPostHandlePlugin.php
+++ b/src/Annotation/VirtualEventPostHandlePlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\virtual_events\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class VirtualEventPostHandlePlugin extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/VirtualEventPreHandlePlugin.php b/src/Annotation/VirtualEventPreHandlePlugin.php
index a608712..89b4549 100644
--- a/src/Annotation/VirtualEventPreHandlePlugin.php
+++ b/src/Annotation/VirtualEventPreHandlePlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\virtual_events\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class VirtualEventPreHandlePlugin extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/VirtualEventSourcePlugin.php b/src/Annotation/VirtualEventSourcePlugin.php
index 171663a..5cb2326 100644
--- a/src/Annotation/VirtualEventSourcePlugin.php
+++ b/src/Annotation/VirtualEventSourcePlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\virtual_events\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class VirtualEventSourcePlugin extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/VirtualEventsEventEndedController.php b/src/Controller/VirtualEventsEventEndedController.php
index 494d350..97907e7 100644
--- a/src/Controller/VirtualEventsEventEndedController.php
+++ b/src/Controller/VirtualEventsEventEndedController.php
@@ -14,7 +14,7 @@ class VirtualEventsEventEndedController extends ControllerBase {
   /**
    * Reload.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request instance.
    *
    * @return string[]
diff --git a/src/Entity/VirtualEventsConfigEntity.php b/src/Entity/VirtualEventsConfigEntity.php
index aaab1b2..fbe9a51 100644
--- a/src/Entity/VirtualEventsConfigEntity.php
+++ b/src/Entity/VirtualEventsConfigEntity.php
@@ -98,7 +98,7 @@ class VirtualEventsConfigEntity extends ConfigEntityBase implements VirtualEvent
   /**
    * Get the formatters config entity.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity
+   * @return VirtualEventsFormatterEntity
    *   formatters config
    */
   public function getFormattersConfig() {
diff --git a/src/Entity/VirtualEventsEventEntity.php b/src/Entity/VirtualEventsEventEntity.php
index 27b7d5a..b2e9320 100644
--- a/src/Entity/VirtualEventsEventEntity.php
+++ b/src/Entity/VirtualEventsEventEntity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\virtual_events\Entity;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 
 /**
@@ -133,7 +134,7 @@ class VirtualEventsEventEntity extends ConfigEntityBase implements VirtualEvents
   /**
    * Get entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|bool
+   * @return EntityInterface|bool
    *   The entity false if not found
    */
   public function getEntity() {
@@ -147,7 +148,7 @@ class VirtualEventsEventEntity extends ConfigEntityBase implements VirtualEvents
   /**
    * Get the event formatter config object of a given event type if found.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity
+   * @return VirtualEventsFormatterEntity
    *   Return formatter Config Entity if found for the given entity type,
    *   ortherwise it will return default formatter config
    */
@@ -164,7 +165,7 @@ class VirtualEventsEventEntity extends ConfigEntityBase implements VirtualEvents
   /**
    * Get the event config object of a given event type if found.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsConfigEntity|bool
+   * @return VirtualEventsConfigEntity|bool
    *   Return Config Entity if found for the given entity type,
    *   ortherwise it will return false
    */
@@ -182,7 +183,7 @@ class VirtualEventsEventEntity extends ConfigEntityBase implements VirtualEvents
   /**
    * Get the event config object of a given event type if found.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsConfigEntity|bool
+   * @return VirtualEventsConfigEntity|bool
    *   Return Config Entity if found for the given entity type,
    *   ortherwise it will return false
    */
diff --git a/src/Plugin/VirtualEventFormatterPluginBase.php b/src/Plugin/VirtualEventFormatterPluginBase.php
index cc9107c..1bef45a 100644
--- a/src/Plugin/VirtualEventFormatterPluginBase.php
+++ b/src/Plugin/VirtualEventFormatterPluginBase.php
@@ -23,11 +23,11 @@ abstract class VirtualEventFormatterPluginBase extends PluginBase implements Vir
   /**
    * Handle the display of this formatter inside entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event enitity attached to the current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity $formatters_config
+   * @param VirtualEventsFormatterEntity $formatters_config
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
@@ -66,11 +66,11 @@ abstract class VirtualEventFormatterPluginBase extends PluginBase implements Vir
   /**
    * Handle the display of this formatter inside entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event enitity attached to the current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity $formatters_config
+   * @param VirtualEventsFormatterEntity $formatters_config
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
@@ -87,9 +87,9 @@ abstract class VirtualEventFormatterPluginBase extends PluginBase implements Vir
   /**
    * Handle Settings Form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\Core\Entity\Display\EntityDisplayInterface|null $display
+   * @param EntityDisplayInterface|null $display
    *   The created event entity if any.
    * @param array|null $options
    *   The formatter options stored in the display.
@@ -121,13 +121,13 @@ abstract class VirtualEventFormatterPluginBase extends PluginBase implements Vir
    *
    * @param array $build
    *   Entity build array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The current enitity display.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event enitity attached to the current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity $formatters_config
+   * @param VirtualEventsFormatterEntity $formatters_config
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
diff --git a/src/Plugin/VirtualEventFormatterPluginManager.php b/src/Plugin/VirtualEventFormatterPluginManager.php
index 4e680ad..27f2141 100644
--- a/src/Plugin/VirtualEventFormatterPluginManager.php
+++ b/src/Plugin/VirtualEventFormatterPluginManager.php
@@ -17,9 +17,9 @@ class VirtualEventFormatterPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/VirtualEventPostHandlePluginBase.php b/src/Plugin/VirtualEventPostHandlePluginBase.php
index cb25a01..ed11404 100644
--- a/src/Plugin/VirtualEventPostHandlePluginBase.php
+++ b/src/Plugin/VirtualEventPostHandlePluginBase.php
@@ -33,7 +33,7 @@ abstract class VirtualEventPostHandlePluginBase extends PluginBase implements Vi
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation) {
@@ -44,7 +44,7 @@ abstract class VirtualEventPostHandlePluginBase extends PluginBase implements Vi
   /**
    * Creates a new VirtualEventPostHandlePluginBase object.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Container interface for service dependency injection.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -69,7 +69,7 @@ abstract class VirtualEventPostHandlePluginBase extends PluginBase implements Vi
    *
    * @param array $form
    *   The current form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The config entity form state.
    * @param array|null $pluginConfigValues
    *   The config values for the current plugin.
@@ -87,9 +87,9 @@ abstract class VirtualEventPostHandlePluginBase extends PluginBase implements Vi
    *
    * @param array $form
    *   The current form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The created event entity if any.
    * @param array $source_data
    *   The soruce plugin saved data if any.
@@ -105,13 +105,13 @@ abstract class VirtualEventPostHandlePluginBase extends PluginBase implements Vi
   /**
    * Submit handler that will be connected to the current entity form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsConfigEntity $event_config
+   * @param VirtualEventsConfigEntity $event_config
    *   The event config entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
@@ -145,9 +145,9 @@ abstract class VirtualEventPostHandlePluginBase extends PluginBase implements Vi
    *
    * @param array $form
    *   Formatter Settings From.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\Core\Entity\Display\EntityDisplayInterface|null $display
+   * @param EntityDisplayInterface|null $display
    *   The created event entity if any.
    * @param array|null $options
    *   The formatter options stored in the display.
@@ -165,15 +165,15 @@ abstract class VirtualEventPostHandlePluginBase extends PluginBase implements Vi
    *
    * @param array $element
    *   Element Render array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
    * @param array $source_data
    *   The source plugin data from the current event entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity $formatters
+   * @param VirtualEventsFormatterEntity $formatters
    *   The formatter config entity attached to the current entity.
    * @param string $formatterId
    *   The formatter id that is being processed.
@@ -189,11 +189,11 @@ abstract class VirtualEventPostHandlePluginBase extends PluginBase implements Vi
    *
    * @param array $build
    *   Entity build array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event enitity attached to the current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity $formatters
+   * @param VirtualEventsFormatterEntity $formatters
    *   The formatter config entity attached to the current entity.
    */
   public function handleEntityView(array &$build, EntityInterface $entity, VirtualEventsEventEntity $event, VirtualEventsFormatterEntity $formatters) {
diff --git a/src/Plugin/VirtualEventPostHandlePluginManager.php b/src/Plugin/VirtualEventPostHandlePluginManager.php
index 5baa011..b519a6d 100644
--- a/src/Plugin/VirtualEventPostHandlePluginManager.php
+++ b/src/Plugin/VirtualEventPostHandlePluginManager.php
@@ -17,9 +17,9 @@ class VirtualEventPostHandlePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/VirtualEventPreHandlePluginBase.php b/src/Plugin/VirtualEventPreHandlePluginBase.php
index 9f0b074..3ea72ae 100644
--- a/src/Plugin/VirtualEventPreHandlePluginBase.php
+++ b/src/Plugin/VirtualEventPreHandlePluginBase.php
@@ -34,7 +34,7 @@ abstract class VirtualEventPreHandlePluginBase extends PluginBase implements Vir
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation) {
@@ -45,7 +45,7 @@ abstract class VirtualEventPreHandlePluginBase extends PluginBase implements Vir
   /**
    * Creates a new VirtualEventPreHandlePluginBase object.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Container interface for service dependency injection.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -70,7 +70,7 @@ abstract class VirtualEventPreHandlePluginBase extends PluginBase implements Vir
    *
    * @param array $form
    *   The current form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The config entity form state.
    * @param array|null $pluginConfigValues
    *   The config values for the current plugin.
@@ -88,9 +88,9 @@ abstract class VirtualEventPreHandlePluginBase extends PluginBase implements Vir
    *
    * @param array $form
    *   The current form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The created event entity if any.
    * @param array $source_data
    *   The soruce plugin saved data if any.
@@ -106,13 +106,13 @@ abstract class VirtualEventPreHandlePluginBase extends PluginBase implements Vir
   /**
    * Submit handler that will be connected to the current entity form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsConfigEntity $event_config
+   * @param VirtualEventsConfigEntity $event_config
    *   The event config entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
@@ -132,9 +132,9 @@ abstract class VirtualEventPreHandlePluginBase extends PluginBase implements Vir
    *
    * @param array $element
    *   Element Render array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
@@ -154,11 +154,11 @@ abstract class VirtualEventPreHandlePluginBase extends PluginBase implements Vir
    *
    * @param array $build
    *   Entity build array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event entity attached to the current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity $formatters
+   * @param VirtualEventsFormatterEntity $formatters
    *   The formatter config entity attached to the current entity.
    */
   public function handleEntityView(array &$build, EntityInterface &$entity, VirtualEventsEventEntity &$event, VirtualEventsFormatterEntity $formatters) {
diff --git a/src/Plugin/VirtualEventPreHandlePluginManager.php b/src/Plugin/VirtualEventPreHandlePluginManager.php
index 129315f..39f4b45 100644
--- a/src/Plugin/VirtualEventPreHandlePluginManager.php
+++ b/src/Plugin/VirtualEventPreHandlePluginManager.php
@@ -17,9 +17,9 @@ class VirtualEventPreHandlePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/VirtualEventSourcePluginBase.php b/src/Plugin/VirtualEventSourcePluginBase.php
index 997a2d7..e3f0fc8 100644
--- a/src/Plugin/VirtualEventSourcePluginBase.php
+++ b/src/Plugin/VirtualEventSourcePluginBase.php
@@ -27,7 +27,7 @@ abstract class VirtualEventSourcePluginBase extends PluginBase implements Virtua
   /**
    * The virtual events common service.
    *
-   * @var \Drupal\virtual_events\services\VirtualEventsCommonService
+   * @var VirtualEventsCommonService
    */
   protected $virtualEventsCommon;
 
@@ -40,9 +40,9 @@ abstract class VirtualEventSourcePluginBase extends PluginBase implements Virtua
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
-   * @param \Drupal\virtual_events\services\VirtualEventsCommonService $virtual_events_common
+   * @param VirtualEventsCommonService $virtual_events_common
    *   The virtual events common service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation, VirtualEventsCommonService $virtual_events_common) {
@@ -54,7 +54,7 @@ abstract class VirtualEventSourcePluginBase extends PluginBase implements Virtua
   /**
    * Creates a new VirtualEventSourcePluginBase object.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Container interface for service dependency injection.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -78,10 +78,10 @@ abstract class VirtualEventSourcePluginBase extends PluginBase implements Virtua
   /**
    * Handles meeting creation on desired platfrom through apis.
    *
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event entity.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsEventEntity
+   * @return VirtualEventsEventEntity
    *   Virtual Event Entity
    */
   abstract public function createMeeting(VirtualEventsEventEntity $event);
@@ -89,7 +89,7 @@ abstract class VirtualEventSourcePluginBase extends PluginBase implements Virtua
   /**
    * Check if the meeting exists and active on desired platfrom through apis.
    *
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event entity.
    *
    * @return bool
@@ -100,7 +100,7 @@ abstract class VirtualEventSourcePluginBase extends PluginBase implements Virtua
   /**
    * Delete meeting on desired platfrom through apis.
    *
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event entity.
    *
    * @return bool
@@ -113,7 +113,7 @@ abstract class VirtualEventSourcePluginBase extends PluginBase implements Virtua
   /**
    * Handles the plugin configuration form inside the event config entity.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The config entity form state.
    * @param array|null $pluginConfigValues
    *   The config values for the current plugin.
@@ -123,9 +123,9 @@ abstract class VirtualEventSourcePluginBase extends PluginBase implements Virtua
   /**
    * Handles the plugin form inside the current entity.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The created event entity if any.
    * @param array $source_data
    *   The soruce plugin saved data if any.
@@ -135,13 +135,13 @@ abstract class VirtualEventSourcePluginBase extends PluginBase implements Virtua
   /**
    * Submit handler that will be connected to the current entity form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsConfigEntity $event_config
+   * @param VirtualEventsConfigEntity $event_config
    *   The event config entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
@@ -155,13 +155,13 @@ abstract class VirtualEventSourcePluginBase extends PluginBase implements Virtua
   /**
    * Fucntion that will handle the event registrants.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The event entity.
-   * @param \Drupal\user\UserInterface $registrant
+   * @param UserInterface $registrant
    *   The registrant entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsConfigEntity $event_config
+   * @param VirtualEventsConfigEntity $event_config
    *   The event config entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
diff --git a/src/Plugin/VirtualEventSourcePluginManager.php b/src/Plugin/VirtualEventSourcePluginManager.php
index 527f0ae..aa79ce7 100644
--- a/src/Plugin/VirtualEventSourcePluginManager.php
+++ b/src/Plugin/VirtualEventSourcePluginManager.php
@@ -17,9 +17,9 @@ class VirtualEventSourcePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/ProxyClass/VirtualEventsUninstallValidator.php b/src/ProxyClass/VirtualEventsUninstallValidator.php
index 93acd4e..27340ba 100644
--- a/src/ProxyClass/VirtualEventsUninstallValidator.php
+++ b/src/ProxyClass/VirtualEventsUninstallValidator.php
@@ -7,15 +7,20 @@
 
 namespace Drupal\virtual_events\ProxyClass {
 
+    use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Drupal\virtual_events\Services\VirtualEventsCommonService;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\StringTranslation\TranslationInterface;
     /**
      * Provides a proxy class for \Drupal\book\BookUninstallValidator.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class VirtualEventsUninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface
+    class VirtualEventsUninstallValidator implements ModuleUninstallValidatorInterface
     {
 
-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;
 
         /**
          * The id of the original proxied service.
@@ -27,7 +32,7 @@ namespace Drupal\virtual_events\ProxyClass {
         /**
          * The book outline storage.
          *
-         * @var \Drupal\virtual_events\Services\VirtualEventsCommonService
+         * @var VirtualEventsCommonService
          */
         protected $service;
 
@@ -35,19 +40,19 @@ namespace Drupal\virtual_events\ProxyClass {
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;
 
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ -79,7 +84,7 @@ namespace Drupal\virtual_events\ProxyClass {
         /**
          * {@inheritdoc}
          */
-        public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation)
+        public function setStringTranslation(TranslationInterface $translation)
         {
             return $this->lazyLoadItself()->setStringTranslation($translation);
         }
diff --git a/src/Services/VirtualEventsCommonService.php b/src/Services/VirtualEventsCommonService.php
index 0168b4e..578c7bb 100644
--- a/src/Services/VirtualEventsCommonService.php
+++ b/src/Services/VirtualEventsCommonService.php
@@ -23,7 +23,7 @@ class VirtualEventsCommonService {
    * @param string $event_id
    *   The event id.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsEventEntity|bool
+   * @return VirtualEventsEventEntity|bool
    *   The event Entity
    */
   public function getEventById($event_id) {
@@ -39,7 +39,7 @@ class VirtualEventsCommonService {
    * @param string $entity_id
    *   Referenced Entity Id.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsEventEntity|bool
+   * @return VirtualEventsEventEntity|bool
    *   The event Entity if found or false if not found
    */
   public function getEventByReference($entity_type, $entity_id) {
@@ -60,7 +60,7 @@ class VirtualEventsCommonService {
   /**
    * Get all events config entites (Event Types).
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsConfigEntity[]
+   * @return VirtualEventsConfigEntity[]
    *   Array of meeting config entites.
    */
   public function getAllVirtualEventsTypes() {
@@ -94,7 +94,7 @@ class VirtualEventsCommonService {
    * @param string $entity_type
    *   Refernced Entity Type.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsConfigEntity|bool
+   * @return VirtualEventsConfigEntity|bool
    *   Return Config Entity if found for the given entity type,
    *   ortherwise it will return false
    */
diff --git a/src/VirtualEventsUninstallValidator.php b/src/VirtualEventsUninstallValidator.php
index c3e58a3..610651a 100644
--- a/src/VirtualEventsUninstallValidator.php
+++ b/src/VirtualEventsUninstallValidator.php
@@ -20,25 +20,25 @@ class VirtualEventsUninstallValidator implements ModuleUninstallValidatorInterfa
   /**
    * The virtual events common service.
    *
-   * @var \Drupal\virtual_events\Services\VirtualEventsCommonService
+   * @var VirtualEventsCommonService
    */
   protected $virtualEventsCommonService;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new VirtualEventsUninstallValidator.
    *
-   * @param \Drupal\virtual_events\Services\VirtualEventsCommonService $virtual_events_common_service
+   * @param VirtualEventsCommonService $virtual_events_common_service
    *   The virtual events common service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(VirtualEventsCommonService $virtual_events_common_service, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/virtual_events.info.yml b/virtual_events.info.yml
index f1d00aa..0263658 100644
--- a/virtual_events.info.yml
+++ b/virtual_events.info.yml
@@ -1,6 +1,5 @@
 name: 'Virtual Events'
 type: module
 description: 'Virtual events management'
-core: 8.x
 package: 'Virtual Events'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
diff --git a/virtual_events.install b/virtual_events.install
index e36b9d4..c392c12 100644
--- a/virtual_events.install
+++ b/virtual_events.install
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Config\ConfigManagerInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorage;
 /**
  * @file
  * Install, update and uninstall functions for the group module.
@@ -14,7 +16,7 @@ function _virtual_events_update_or_install_config(String $path) {
   $updated = [];
   $created = [];
 
-  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
+  /** @var ConfigManagerInterface $config_manager */
   $config_manager = \Drupal::service('config.manager');
   $files = glob($path . '*.yml');
   foreach ($files as $file) {
@@ -32,7 +34,7 @@ function _virtual_events_update_or_install_config(String $path) {
       $id_key = $definition->getKey('id');
       $id = $value[$id_key];
 
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $entity_storage */
+      /** @var ConfigEntityStorage $entity_storage */
       $entity_storage = $entity_manager->getStorage($type);
       $entity = $entity_storage->load($id);
       if ($entity) {
@@ -58,6 +60,6 @@ function _virtual_events_update_or_install_config(String $path) {
  * Install new views and missing config.
  */
 function virtual_events_update_8001() {
-  $config_path = drupal_get_path('module', 'virtual_events') . '/config/install/';
+  $config_path = \Drupal::service('extension.list.module')->getPath('virtual_events') . '/config/install/';
   _virtual_events_update_or_install_config($config_path);
 }
