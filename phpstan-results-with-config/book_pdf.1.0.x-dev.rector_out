modules/contrib/book_pdf/book_pdf.module
modules/contrib/book_pdf/src/BookPdfGenerator.php
modules/contrib/book_pdf/src/Controller/BookPdfController.php
modules/contrib/book_pdf/src/Event/BookPdfEvents.php
modules/contrib/book_pdf/src/Event/BookPdfPreGenerateEvent.php
modules/contrib/book_pdf/src/EventSubscriber/BookPdfPreGenerateSubscriber.php
modules/contrib/book_pdf/src/Form/SettingsForm.php
modules/contrib/book_pdf/src/Plugin/Block/BookPdfLinkBlock.php

5 files with changes
====================

1) modules/contrib/book_pdf/src/EventSubscriber/BookPdfPreGenerateSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\book_pdf\EventSubscriber;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Logger\LoggerChannelFactory;
 use Drupal\book\BookExport;
 use Drupal\book_pdf\Event\BookPdfEvents;
 use Drupal\book_pdf\Event\BookPdfPreGenerateEvent;
@@ @@
   /**
    * The Book export service.
    *
-   * @var \Drupal\book\BookExport
+   * @var BookExport
    */
   protected $bookExport;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The book_pdf logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs event subscriber.
    *
-   * @param \Drupal\book\BookExport $bookExport
+   * @param BookExport $bookExport
    *   The Book export service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $loggerFactory
+   * @param LoggerChannelFactory $loggerFactory
    *   The logger factory service.
    */
   public function __construct(BookExport $bookExport, RendererInterface $renderer, LoggerChannelFactoryInterface $loggerFactory) {
@@ @@
   /**
    * Adds the main book body to the PDF being generated.
    *
-   * @param \Drupal\book_pdf\Event\BookPdfPreGenerateEvent $event
+   * @param BookPdfPreGenerateEvent $event
    *   The Book Pdf Pre Generate Event Object.
    *
-   * @return \Drupal\book_pdf\Event\BookPdfPreGenerateEvent|false
+   * @return BookPdfPreGenerateEvent|false
    *   Event Object.
    */
   public function addBookHtml(BookPdfPreGenerateEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/book_pdf/src/Event/BookPdfPreGenerateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\book_pdf\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use mikehaertl\wkhtmlto\Pdf;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\node\Entity\Node;

 /**
@@ @@
   /**
    * The WKHTMLTOPDF object.
    *
-   * @var \mikehaertl\wkhtmlto\Pdf
+   * @var Pdf
    */
   protected $pdf;

@@ @@
   /**
    * The Book node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $book;

@@ @@
   /**
    * BookPdfPreStringEvent constructor.
    *
-   * @param \Drupal\node\Entity\Node $book
+   * @param Node $book
    *   The Book node.
-   * @param \mikehaertl\wkhtmlto\Pdf $pdf
+   * @param Pdf $pdf
    *   The WKHTMLTOPDF object.
    * @param array $default_options
    *   The default WKHTMLTOPDF global options.
@@ @@
   /**
    * Get the PDF object.
    *
-   * @return \mikehaertl\wkhtmlto\Pdf
+   * @return Pdf
    *   The WKHTMLTOPDF object.
    */
   public function getPdf() {
@@ @@
   /**
    * Get the Book node.
    *
-   * @return \Drupal\node\Entity\Node
+   * @return Node
    *   The Book node.
    */
   public function getBook() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/book_pdf/src/Controller/BookPdfController.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The book PDF generator service.
    *
-   * @var \Drupal\book_pdf\BookPdfGenerator
+   * @var BookPdfGenerator
    */
   protected $generator;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * BookPdfController constructor.
    *
-   * @param \Drupal\book_pdf\BookPdfGenerator $generator
+   * @param BookPdfGenerator $generator
    *   The book PDF generator service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(BookPdfGenerator $generator, Messenger $messenger) {
@@ @@
   /**
    * Get a filename for the PDF based on the book title and date/time.
    *
-   * @param \Drupal\node\Entity\Node $book
+   * @param Node $book
    *   The book node by which we can generate the filename from.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/book_pdf/src/BookPdfGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\book_pdf;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\book\BookExport;
 use Drupal\book_pdf\Event\BookPdfPreGenerateEvent;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The Book export service.
    *
-   * @var \Drupal\book\BookExport
+   * @var BookExport
    */
   protected $bookExport;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The book_pdf logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The The book_pdf settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a BookPdfGenerator object.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\book\BookExport $book_export
+   * @param BookExport $book_export
    *   The Book export service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Psr\Log\LoggerInterface $logger_channel
+   * @param LoggerInterface $logger_channel
    *   The logger.channel.book_pdf service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher
+   * @param ContainerAwareEventDispatcher $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(StateInterface $state, BookExport $book_export, RendererInterface $renderer, LoggerInterface $logger_channel, ConfigFactoryInterface $config_factory, ContainerAwareEventDispatcher $event_dispatcher) {
@@ @@
   /**
    * Get the Book PDF cache filename.
    *
-   * @param \Drupal\node\Entity\Node $book
+   * @param Node $book
    *   The book to get the cache filename for.
    *
    * @return string
@@ @@
   /**
    * Get the Book PDF contents.
    *
-   * @param \Drupal\node\Entity\Node $book
+   * @param Node $book
    *   The Book node.
    *
    * @return bool|string
@@ @@
       $defaultOptions['password'] = $basicPass;
     }
     $pdf = new Pdf();
-    $event = $this->eventDispatcher->dispatch('book_pdf.pre', new BookPdfPreGenerateEvent($book, $pdf, $defaultOptions));
+    $event = $this->eventDispatcher->dispatch(new BookPdfPreGenerateEvent($book, $pdf, $defaultOptions), 'book_pdf.pre');
     $pdf->setOptions($event->getGlobalOptions());
     if (($content = $pdf->toString())) {
       return $content;
@@ @@
   /**
    * Get the state key.
    *
-   * @param \Drupal\node\Entity\Node $book
+   * @param Node $book
    *   The book to get the cache state key for.
    *
    * @return string
@@ @@
   /**
    * Get the URI for a Book's cached PDF.
    *
-   * @param \Drupal\node\Entity\Node $book
+   * @param Node $book
    *   The Book to return the PDF file path for.
    *
    * @return bool|string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


5) modules/contrib/book_pdf/book_pdf.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\State\State;
+use Drupal\book_pdf\BookPdfGenerator;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
   // so the PDF cache will be re-generated the next time it's
   // requested.
   if (isset($entity->book)) {
-    /** @var \Drupal\Core\State\State $state */
+    /** @var State $state */
     $state = \Drupal::getContainer()->get('state');
-    /** @var \Drupal\book_pdf\BookPdfGenerator $generator */
+    /** @var BookPdfGenerator $generator */
     $generator = \Drupal::getContainer()->get('book_pdf.generator');
     $state->delete($generator->getStateKey($entity));
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 5 files have been changed by Rector                                       

