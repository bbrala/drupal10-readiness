diff --git a/anonymous_login.info.yml b/anonymous_login.info.yml
index 052bcd4..ab311b0 100644
--- a/anonymous_login.info.yml
+++ b/anonymous_login.info.yml
@@ -1,6 +1,6 @@
 name: Anonymous Login
 type: module
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
 description: Specify pages that when visited by anonymous users will be forced to login.
 dependencies:
   - drupal:path_alias
diff --git a/src/EventSubscriber/AnonymousLoginSubscriber.php b/src/EventSubscriber/AnonymousLoginSubscriber.php
index 91ea2f8..3a2d872 100644
--- a/src/EventSubscriber/AnonymousLoginSubscriber.php
+++ b/src/EventSubscriber/AnonymousLoginSubscriber.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\anonymous_login\EventSubscriber;
 
+use Drupal\Core\Config\ConfigFactory;
+use Drupal\Core\Session\AccountProxy;
+use Drupal\Core\Path\PathMatcher;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Messenger\MessengerTrait;
 use Drupal\Core\Path\CurrentPathStack;
@@ -15,7 +19,6 @@ use Drupal\path_alias\AliasManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 
 /**
  * Class AnonymousLoginSubscriber.
@@ -29,56 +32,56 @@ class AnonymousLoginSubscriber implements EventSubscriberInterface {
   /**
    * The configuration object factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * The state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The instantiated account.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcher
+   * @var PathMatcher
    */
   protected $pathMatcher;
 
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The path validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
@@ -92,21 +95,21 @@ class AnonymousLoginSubscriber implements EventSubscriberInterface {
   /**
    * Constructor of a new AnonymousLoginSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The instantiated account.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The path alias manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator service.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
    * @param string $sapi
    *   (Optional) The Server API for this build of PHP.
@@ -146,10 +149,10 @@ class AnonymousLoginSubscriber implements EventSubscriberInterface {
    * This method is called whenever the KernelEvents::REQUEST event is
    * dispatched.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The Event to process.
    */
-  public function redirect(GetResponseEvent $event) {
+  public function redirect(RequestEvent $event) {
     // Skip if maintenance mode is enabled.
     if ($this->state->get('system.maintenance_mode')) {
       return;
diff --git a/src/Form/AnonymousLoginSettings.php b/src/Form/AnonymousLoginSettings.php
index dedd286..710bd92 100644
--- a/src/Form/AnonymousLoginSettings.php
+++ b/src/Form/AnonymousLoginSettings.php
@@ -16,7 +16,7 @@ class AnonymousLoginSettings extends ConfigFormBase {
   /**
    * The path validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
@@ -39,9 +39,9 @@ class AnonymousLoginSettings extends ConfigFormBase {
   /**
    * Constructs a AnonymousLoginSettings object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, PathValidatorInterface $path_validator) {
diff --git a/tests/src/Functional/AnonymousLoginSettingsFormTest.php b/tests/src/Functional/AnonymousLoginSettingsFormTest.php
index b6076f0..4bc7af1 100755
--- a/tests/src/Functional/AnonymousLoginSettingsFormTest.php
+++ b/tests/src/Functional/AnonymousLoginSettingsFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\anonymous_login\Functional;
 
+use Drupal\Core\Config\Config;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -22,14 +23,14 @@ class AnonymousLoginSettingsFormTest extends BrowserTestBase {
   /**
    * Module configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $moduleConfig;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->moduleConfig = $this->config('anonymous_login.settings');
   }
diff --git a/tests/src/Unit/AnonymousLoginSubscriberTest.php b/tests/src/Unit/AnonymousLoginSubscriberTest.php
index 739f9f1..be94e5b 100644
--- a/tests/src/Unit/AnonymousLoginSubscriberTest.php
+++ b/tests/src/Unit/AnonymousLoginSubscriberTest.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\Tests\anonymous_login\Unit;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\anonymous_login\EventSubscriber\AnonymousLoginSubscriber;
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 
 /**
  * Tests the redirect logic.
@@ -66,31 +66,25 @@ class AnonymousLoginSubscriberTest extends UnitTestCase {
    * @param string $request_uri
    *   The URI of the request.
    *
-   * @return \Symfony\Component\HttpKernel\Event\GetResponseEvent
+   * @return RequestEvent
    *   THe response event.
    */
   protected function callOnKernelRequestCheckRedirect($request_uri) {
     $event = $this->getGetResponseEventStub($request_uri);
     $request = $event->getRequest();
 
-    $state = $this->getMockBuilder('Drupal\Core\State\StateInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $state = $this->createMock('Drupal\Core\State\StateInterface');
     $state->expects($this->any())
       ->method('get')
       ->with('system.maintenance_mode')
       ->will($this->returnValue(FALSE));
 
-    $current_user = $this->getMockBuilder('Drupal\Core\Session\AccountProxyInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $current_user = $this->createMock('Drupal\Core\Session\AccountProxyInterface');
     $current_user->expects($this->any())
       ->method('isAnonymous')
       ->will($this->returnValue(TRUE));
 
-    $alias_manager = $this->getMockBuilder('Drupal\path_alias\AliasManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $alias_manager = $this->createMock('Drupal\path_alias\AliasManagerInterface');
     $alias_manager->expects($this->any())
       ->method('getPathByAlias')
       ->with($this->anything())
@@ -139,9 +133,7 @@ class AnonymousLoginSubscriberTest extends UnitTestCase {
         'sites/default/files/*',
       ],
     ];
-    $path_matcher = $this->getMockBuilder('Drupal\Core\Path\PathMatcherInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $path_matcher = $this->createMock('Drupal\Core\Path\PathMatcherInterface');
     $path_matcher->expects($this->any())
       ->method('matchPath')
       ->with($this->anything(), $this->anything())
@@ -161,21 +153,15 @@ class AnonymousLoginSubscriberTest extends UnitTestCase {
 
           return (bool) preg_match($search, $path);
       }));
-    $module_handler = $this->getMockBuilder('Drupal\Core\Extension\ModuleHandlerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $module_handler = $this->createMock('Drupal\Core\Extension\ModuleHandlerInterface');
     $module_handler->expects($this->any())
       ->method('alter')
       ->will($this->returnValue($paths));
-    $path_validator = $this->getMockBuilder('Drupal\Core\Path\PathValidatorInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $path_validator = $this->createMock('Drupal\Core\Path\PathValidatorInterface');
     $path_validator->expects($this->any())
       ->method('getUrlIfValidWithoutAccessCheck')
       ->will($this->returnValue(FALSE));
-    $current_path = $this->getMockBuilder('Drupal\Core\Path\CurrentPathStack')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $current_path = $this->createMock('Drupal\Core\Path\CurrentPathStack');
     $current_path->expects($this->any())
       ->method('getPath')
       ->with($request)
@@ -214,15 +200,14 @@ class AnonymousLoginSubscriberTest extends UnitTestCase {
    * @param string $request_uri
    *   The URI of the request.
    *
-   * @return \Symfony\Component\HttpKernel\Event\GetResponseEvent
+   * @return RequestEvent
    *   The get response event object.
    */
   protected function getGetResponseEventStub($request_uri) {
     $request = Request::create($request_uri, 'GET', [], [], [], ['SCRIPT_NAME' => 'index.php']);
 
-    $http_kernel = $this->getMockBuilder('\Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
-    return new GetResponseEvent($http_kernel, $request, 'test');
+    $http_kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
+    return new RequestEvent($http_kernel, $request, 'test');
   }
 
 }
