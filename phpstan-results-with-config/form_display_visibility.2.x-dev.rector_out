modules/contrib/form_display_visibility/form_display_visibility.module
modules/contrib/form_display_visibility/src/Annotation/FormDisplayVisibilityCondition.php
modules/contrib/form_display_visibility/src/Plugin/FormDisplayVisibilityCondition/AccessByPermission.php
modules/contrib/form_display_visibility/src/Plugin/FormDisplayVisibilityCondition/AccessByRole.php
modules/contrib/form_display_visibility/src/Plugin/FormDisplayVisibilityConditionInterface.php
modules/contrib/form_display_visibility/src/Plugin/FormDisplayVisibilityConditionPluginManager.php
modules/contrib/form_display_visibility/tests/src/Kernel/FormDisplayVisibilityAccessByPermissionTest.php

7 files with changes
====================

1) modules/contrib/form_display_visibility/tests/src/Kernel/FormDisplayVisibilityAccessByPermissionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\form_display_visibility\Kernel;

+use Drupal\user\UserInterface;
+use Drupal\user\RoleInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * The test field storage config.
    *
-   * @var \Drupal\field\Entity\FieldStorageConfig
+   * @var FieldStorageConfig
    */
   protected $fieldStorage;

@@ @@
   /**
    * The field config.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $field;

@@ @@
   /**
    * An admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;

@@ @@
   /**
    * A custom role for testing purposes.
    *
-   * @var \Drupal\user\RoleInterface
+   * @var RoleInterface
    */
   protected $role;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('entity_test');
     $this->installEntitySchema('user');
@@ @@
       'third_party_settings' => [],
       'region' => 'content',
     ];
-    $this->assertEqual($form_display->getComponent($this->fieldName), $expected);
+    $this->assertEquals($form_display->getComponent($this->fieldName), $expected);

     $normal_user = $this->createUser();
     $this->setCurrentUser($normal_user);
@@ @@
       'region' => 'content',
       'third_party_settings' => $third_party_settings,
     ];
-    $this->assertEqual($form_display->getComponent($this->fieldName), $expected);
+    $this->assertEquals($form_display->getComponent($this->fieldName), $expected);

     $normal_user = $this->createUser();
     $this->setCurrentUser($normal_user);
@@ @@
       'region' => 'content',
       'third_party_settings' => $third_party_settings,
     ];
-    $this->assertEqual($form_display->getComponent($this->fieldName), $expected);
+    $this->assertEquals($form_display->getComponent($this->fieldName), $expected);

     $normal_user = $this->createUser();
     $this->setCurrentUser($normal_user);
@@ @@
       'region' => 'content',
       'third_party_settings' => $third_party_settings,
     ];
-    $this->assertEqual($form_display->getComponent($this->fieldName), $expected);
+    $this->assertEquals($form_display->getComponent($this->fieldName), $expected);

     $normal_user = $this->createUser(['view test entity']);
     $this->setCurrentUser($normal_user);
@@ @@
       'region' => 'content',
       'third_party_settings' => $third_party_settings,
     ];
-    $this->assertEqual($form_display->getComponent($this->fieldName), $expected);
+    $this->assertEquals($form_display->getComponent($this->fieldName), $expected);

     $normal_user = $this->createUser();
     $this->setCurrentUser($normal_user);
@@ @@
       'region' => 'content',
       'third_party_settings' => $third_party_settings,
     ];
-    $this->assertEqual($form_display->getComponent($this->fieldName), $expected);
+    $this->assertEquals($form_display->getComponent($this->fieldName), $expected);

     $normal_user = $this->createUser();
     $this->setCurrentUser($normal_user);
@@ @@
       'region' => 'content',
       'third_party_settings' => $third_party_settings,
     ];
-    $this->assertEqual($form_display->getComponent($this->fieldName), $expected);
+    $this->assertEquals($form_display->getComponent($this->fieldName), $expected);

     $normal_user = $this->createUser();
     $normal_user->addRole($this->role->id());
@@ @@
       'region' => 'content',
       'third_party_settings' => $third_party_settings,
     ];
-    $this->assertEqual($form_display->getComponent($this->fieldName), $expected);
+    $this->assertEquals($form_display->getComponent($this->fieldName), $expected);

     $normal_user = $this->createUser(['view test entity']);
     $normal_user->addRole($this->role->id());
@@ @@
       'region' => 'content',
       'third_party_settings' => $third_party_settings,
     ];
-    $this->assertEqual($form_display->getComponent($this->fieldName), $expected);
+    $this->assertEquals($form_display->getComponent($this->fieldName), $expected);

     $normal_user = $this->createUser(['view test entity']);
     $this->setCurrentUser($normal_user);
@@ @@
       'region' => 'content',
       'third_party_settings' => $third_party_settings,
     ];
-    $this->assertEqual($form_display->getComponent($this->fieldName), $expected);
+    $this->assertEquals($form_display->getComponent($this->fieldName), $expected);

     $normal_user = $this->createUser();
     $normal_user->addRole($this->role->id());
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/form_display_visibility/src/Plugin/FormDisplayVisibilityConditionPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/form_display_visibility/src/Plugin/FormDisplayVisibilityConditionInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\form_display_visibility\Plugin;

+use Drupal\Core\Access\AccessResult;
 /**
  * Provides an interface for FormDisplayVisibilityCondition plugins.
  */
@@ @@
   /**
    * Calculates the access level for a given condition.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Access result of the calculation.
    */
   public function applyCondition();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/form_display_visibility/src/Plugin/FormDisplayVisibilityCondition/AccessByRole.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountInterface $current_user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/form_display_visibility/src/Plugin/FormDisplayVisibilityCondition/AccessByPermission.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The permission handler.
    *
-   * @var \Drupal\user\PermissionHandlerInterface
+   * @var PermissionHandlerInterface
    */
   protected $permissionHandler;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\user\PermissionHandlerInterface $permission_handler
+   * @param PermissionHandlerInterface $permission_handler
    *   The permission handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PermissionHandlerInterface $permission_handler, ModuleHandlerInterface $module_handler, AccountInterface $current_user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/form_display_visibility/src/Annotation/FormDisplayVisibilityCondition.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\form_display_visibility\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the event operation.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the event operation.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


7) modules/contrib/form_display_visibility/form_display_visibility.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\form_display_visibility\Plugin\FormDisplayVisibilityConditionInterface;
+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * @file
  * Form display visibility hooks and alters.
@@ @@
   $field_settings = form_display_visibility_settings_getter($field_definition, $form_mode);
   $plugin_manager = \Drupal::service('plugin.manager.form_display_visibility_condition');
   foreach ($plugin_manager->getDefinitions() as $condition_plugin) {
-    /** @var \Drupal\form_display_visibility\Plugin\FormDisplayVisibilityConditionInterface $condition */
+    /** @var FormDisplayVisibilityConditionInterface $condition */
     $condition = $plugin_manager->createInstance($condition_plugin['id'], ['field_settings' => $field_settings]);
     $conditions[$condition_plugin['id']] = $condition->buildForm();
   }
@@ @@
   if ($conditions = $context['widget']->getThirdPartySetting('form_display_visibility', 'conditions')) {
     $plugin_manager = \Drupal::service('plugin.manager.form_display_visibility_condition');
     foreach ($conditions as $id => $condition) {
-      /** @var \Drupal\form_display_visibility\Plugin\FormDisplayVisibilityConditionInterface $condition_plugin */
+      /** @var FormDisplayVisibilityConditionInterface $condition_plugin */
       $condition_plugin = $plugin_manager->createInstance($id, $conditions);
       $summary[] = $condition_plugin->displaySummary();
     }
@@ @@
     // Nothing to do for this form.
     return;
   }
-  /** @var \Drupal\Core\Field\FieldConfigInterface $field_definition */
+  /** @var FieldConfigInterface $field_definition */
   $field_definition = $context['items']->getFieldDefinition();
   $form_mode = form_display_visibility_filter_form_mode_helper($field_definition->getTargetEntityTypeId(), $form_object->getOperation());

@@ @@
     $plugin_definitions = $plugin_manager->getDefinitions();
     $access = AccessResult::allowed();
     foreach ($plugin_definitions as $condition_plugin) {
-      /** @var \Drupal\form_display_visibility\Plugin\FormDisplayVisibilityConditionInterface $condition */
+      /** @var FormDisplayVisibilityConditionInterface $condition */
       $condition = $plugin_manager->createInstance($condition_plugin['id'], ['field_settings' => $field_settings]);
       $access = $access->andIf($condition->applyCondition());
     }
@@ @@
 /**
  * Helper function to get the form display settings.
  *
- * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+ * @param FieldDefinitionInterface $field_definition
  *   The field definition.
  * @param string $form_mode
  *   The form mode.
@@ @@
  * @return array
  *   The field settings. Empty array if not found.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function form_display_visibility_settings_getter(FieldDefinitionInterface $field_definition, $form_mode) {
   if ($config_entity = \Drupal::entityTypeManager()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

