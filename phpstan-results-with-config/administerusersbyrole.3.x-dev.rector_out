modules/contrib/administerusersbyrole/administerusersbyrole.module
modules/contrib/administerusersbyrole/src/AdministerusersbyrolePermissions.php
modules/contrib/administerusersbyrole/src/Constraint/OverrideUserMailRequired.php
modules/contrib/administerusersbyrole/src/Constraint/OverrideUserMailRequiredValidator.php
modules/contrib/administerusersbyrole/src/Form/SettingsForm.php
modules/contrib/administerusersbyrole/src/Plugin/Action/AddRoleUser.php
modules/contrib/administerusersbyrole/src/Plugin/Action/ChangeUserRoleTrait.php
modules/contrib/administerusersbyrole/src/Plugin/Action/RemoveRoleUser.php
modules/contrib/administerusersbyrole/src/Routing/RouteSubscriber.php
modules/contrib/administerusersbyrole/src/Services/AccessManager.php
modules/contrib/administerusersbyrole/src/Services/AccessManagerInterface.php
modules/contrib/administerusersbyrole/tests/src/Functional/AdministerusersbyroleTest.php

8 files with changes
====================

1) modules/contrib/administerusersbyrole/tests/src/Functional/AdministerusersbyroleTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\administerusersbyrole\Functional;

+use Drupal\administerusersbyrole\Services\AccessManagerInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The access manager.
    *
-   * @var \Drupal\administerusersbyrole\Services\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/administerusersbyrole/src/Services/AccessManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\administerusersbyrole\Services;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\user\RoleInterface;
 use Drupal\Core\Session\AccountInterface;

 /**
@@ @@
    * @param string $operation
    *   The operation that is to be performed on the user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account trying to access the entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result. hook_entity_access() has detailed documentation.
    */
   public function access(array $roles, $operation, AccountInterface $account);
@@ @@
    * @param string $operation
    *   The operation that is to be performed.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account trying to access the entity.
    *
    * @return array of role IDs.
@@ @@
   /**
    * Returns a list of all roles that are available to be managed by this module.
    *
-   * @return \Drupal\user\RoleInterface[]
+   * @return RoleInterface[]
    *   An associative array with the role id as the key and the role object as
    *   value.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/administerusersbyrole/src/Services/AccessManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\administerusersbyrole\Services;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
-
   protected $config;

   const CONVERT_OP = [
@@ @@
    *   The operation that is to be performed on the user.
    *   Value is updated to match the canonical value used in this module.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account trying to access the entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result. hook_entity_access() has detailed documentation.
    */
   protected function preAccess(&$operation, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/administerusersbyrole/src/Plugin/Action/ChangeUserRoleTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\administerusersbyrole\Plugin\Action;

+use Drupal\user\UserInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;

@@ @@
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\user\UserInterface $object */
+    /** @var UserInterface $object */
     $access = parent::access($object, $account, TRUE)
       ->orIf(administerusersbyrole_user_assign_role($object, $account, [$this->configuration['rid']]));
     return $return_as_object ? $access : $access->isAllowed();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/administerusersbyrole/src/Form/SettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The access manager.
    *
-   * @var \Drupal\administerusersbyrole\Services\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;

@@ @@
   /**
    * Constructs a new AdministerusersbyrolePermissions instance.
    *
-   * @param \Drupal\administerusersbyrole\Services\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The entity manager.
    */
   public function __construct(AccessManagerInterface $access_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/administerusersbyrole/src/Constraint/OverrideUserMailRequiredValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\administerusersbyrole\Constraint;

+use Drupal\user\UserInterface;
 use Drupal\user\Plugin\Validation\Constraint\UserMailRequiredValidator;
 use Symfony\Component\Validator\Constraint;

@@ @@
    */
   public function validate($items, Constraint $constraint) {
     /** @var \Drupal\Core\Field\FieldItemListInterface $items */
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $items->getEntity();
     $existing_value = NULL;
     if ($account->id()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/administerusersbyrole/src/AdministerusersbyrolePermissions.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The access manager.
    *
-   * @var \Drupal\administerusersbyrole\Services\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;

@@ @@
   /**
    * Constructs a new AdministerusersbyrolePermissions instance.
    *
-   * @param \Drupal\administerusersbyrole\Services\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The entity manager.
    */
   public function __construct(AccessManagerInterface $access_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/administerusersbyrole/administerusersbyrole.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Access\AccessResultInterface;
 /**
  * @file Administer Users by Role main module file.
  */
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_access() for entity type "user_role".
  *
- * @param \Drupal\user\RoleInterface $role
+ * @param RoleInterface $role
  *   The role object to check access for.
  *
  * @param string $operation
  *   The operation that is to be performed on $role.
  *
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The account trying to access the entity.
  *
- * @return \Drupal\Core\Access\AccessResultInterface
+ * @return AccessResultInterface
  *   The access result. hook_entity_access() has detailed documentation.
  */
 function administerusersbyrole_user_role_access(RoleInterface $role, $operation, AccountInterface $account) {
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_access() for entity type "user".
  *
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  *   The user object to check access for.
  *
  * @param string $operation
  *   The operation that is to be performed on $entity.
  *
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The account trying to access the entity.
  *
- * @return \Drupal\Core\Access\AccessResultInterface
+ * @return AccessResultInterface
  *   The access result. hook_entity_access() has detailed documentation.
  */
 function administerusersbyrole_user_access(UserInterface $user, $operation, AccountInterface $account) {
@@ @@
 /**
  * Check for permission to assign roles to a user.
  *
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  *   The user object to check access for.
  *
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The account trying to access the entity.
  *
  * @param array $rids
  *   Array of role ids to add/remove.
  *
- * @return \Drupal\Core\Access\AccessResultInterface
+ * @return AccessResultInterface
  *   The access result. hook_entity_access() has detailed documentation.
  */
 function administerusersbyrole_user_assign_role(UserInterface $user, AccountInterface $account, array $rids) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

