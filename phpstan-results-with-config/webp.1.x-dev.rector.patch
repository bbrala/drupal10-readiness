diff --git a/src/Controller/FileDownloadController.php b/src/Controller/FileDownloadController.php
index d0125f8..824f10d 100644
--- a/src/Controller/FileDownloadController.php
+++ b/src/Controller/FileDownloadController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\webp\Controller;
 
+use Psr\Log\LoggerInterface;
+use Drupal\Core\Image\Image;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Image\ImageFactory;
 use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
@@ -19,39 +21,39 @@ class FileDownloadController extends ControllerBase {
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * WebP driver.
    *
-   * @var \Drupal\webp\Webp
+   * @var Webp
    */
   protected $webp;
 
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
   /**
    * Constructs a FileDownloadController object.
    *
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface|null $streamWrapperManager
+   * @param StreamWrapperManagerInterface|null $streamWrapperManager
    *   The stream wrapper manager.
-   * @param \Drupal\webp\Webp $webp
+   * @param Webp $webp
    *   WebP driver.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
    */
   public function __construct(StreamWrapperManagerInterface $streamWrapperManager = NULL, Webp $webp, ImageFactory $image_factory) {
@@ -86,20 +88,19 @@ class FileDownloadController extends ControllerBase {
    * file exists but no modules responded an AccessDeniedHttpException will be
    * thrown. If the file does not exist a NotFoundHttpException will be thrown.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param string $scheme
    *   The file scheme, defaults to 'private'.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The transferred file as response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown when the requested file does not exist.
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when the user does not have access to the file.
    * @see hook_file_download()
-   *
    */
   public function download(Request $request, $scheme = 'private') {
     $target = $request->query->get('file');
@@ -176,7 +177,7 @@ class FileDownloadController extends ControllerBase {
    * @param string $scheme
    *   The file scheme, defaults to 'private'.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The transferred file as response.
    */
   protected function webpResponse($file, array $headers, $scheme) {
@@ -194,14 +195,14 @@ class FileDownloadController extends ControllerBase {
   /**
    * Returns an image as response.
    *
-   * @param \Drupal\Core\Image\Image $image
+   * @param Image $image
    *   The image.
    * @param array $headers
    *   Response headers.
    * @param string $scheme
    *   The file scheme, defaults to 'private'.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The transferred file as response.
    */
   protected function response($uri, array $headers, $scheme) {
diff --git a/src/Controller/ImageStyleDownloadController.php b/src/Controller/ImageStyleDownloadController.php
index 2816fef..0c72c92 100644
--- a/src/Controller/ImageStyleDownloadController.php
+++ b/src/Controller/ImageStyleDownloadController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\webp\Controller;
 
+use Psr\Log\LoggerInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Image\Image;
 use Drupal\Core\Image\ImageFactory;
@@ -23,46 +24,46 @@ use Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException;
 class ImageStyleDownloadController extends FileDownloadController {
 
   /**
-   * The lock backend.
-   *
-   * @var \Drupal\Core\Lock\LockBackendInterface
-   */
-  protected $lock;
+		 * The lock backend.
+		 *
+		 * @var LockBackendInterface
+		 */
+		protected $lock;
 
   /**
-   * The image factory.
-   *
-   * @var \Drupal\Core\Image\ImageFactory
-   */
-  protected $imageFactory;
+		 * The image factory.
+		 *
+		 * @var ImageFactory
+		 */
+		protected $imageFactory;
 
   /**
-   * A logger instance.
-   *
-   * @var \Psr\Log\LoggerInterface
-   */
-  protected $logger;
+		 * A logger instance.
+		 *
+		 * @var LoggerInterface
+		 */
+		protected $logger;
 
   /**
-   * WebP driver.
-   *
-   * @var \Drupal\webp\Webp
-   */
-  protected $webp;
+		 * WebP driver.
+		 *
+		 * @var Webp
+		 */
+		protected $webp;
 
   /**
-   * Constructs a ImageStyleDownloadController object.
-   *
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
-   *   The lock backend.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
-   *   The image factory.
-   * @param \Drupal\webp\Webp $webp
-   *   WebP driver.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface|null $stream_wrapper_manager
-   *   The stream wrapper manager.
-   */
-  public function __construct(LockBackendInterface $lock, ImageFactory $image_factory, Webp $webp, StreamWrapperManagerInterface $stream_wrapper_manager = NULL) {
+		 * Constructs a ImageStyleDownloadController object.
+		 *
+		 * @param LockBackendInterface $lock
+		 *   The lock backend.
+		 * @param ImageFactory $image_factory
+		 *   The image factory.
+		 * @param Webp $webp
+		 *   WebP driver.
+		 * @param StreamWrapperManagerInterface|null $stream_wrapper_manager
+		 *   The stream wrapper manager.
+		 */
+		public function __construct(LockBackendInterface $lock, ImageFactory $image_factory, Webp $webp, StreamWrapperManagerInterface $stream_wrapper_manager = NULL) {
     parent::__construct($stream_wrapper_manager);
     $this->lock = $lock;
     $this->imageFactory = $image_factory;
@@ -83,26 +84,26 @@ class ImageStyleDownloadController extends FileDownloadController {
   }
 
   /**
-   * Generates a derivative, given a style and image path.
-   *
-   * After generating an image, transfer it to the requesting agent.
-   *
-   * @param \Symfony\Component\HttpFoundation\Request $request
-   *   The request object.
-   * @param string $scheme
-   *   The file scheme, defaults to 'private'.
-   * @param \Drupal\image\ImageStyleInterface $image_style
-   *   The image style to deliver.
-   *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse|\Symfony\Component\HttpFoundation\Response
-   *   The transferred file as response or some error response.
-   *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
-   *   Thrown when the user does not have access to the file.
-   * @throws \Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException
-   *   Thrown when the file is still being generated.
-   */
-  public function deliver(Request $request, $scheme, ImageStyleInterface $image_style) {
+		 * Generates a derivative, given a style and image path.
+		 *
+		 * After generating an image, transfer it to the requesting agent.
+		 *
+		 * @param Request $request
+		 *   The request object.
+		 * @param string $scheme
+		 *   The file scheme, defaults to 'private'.
+		 * @param ImageStyleInterface $image_style
+		 *   The image style to deliver.
+		 *
+		 * @return BinaryFileResponse|Response
+		 *   The transferred file as response or some error response.
+		 *
+		 * @throws AccessDeniedHttpException
+		 *   Thrown when the user does not have access to the file.
+		 * @throws ServiceUnavailableHttpException
+		 *   Thrown when the file is still being generated.
+		 */
+		public function deliver(Request $request, $scheme, ImageStyleInterface $image_style) {
     $target = $request->query->get('file');
     $image_uri = $scheme . '://' . $target;
 
@@ -221,19 +222,19 @@ class ImageStyleDownloadController extends FileDownloadController {
   }
 
   /**
-   * Returns a WebP image as response.
-   *
-   * @param string $file
-   *   Path to image file.
-   * @param array $headers
-   *   Response headers.
-   * @param string $scheme
-   *   The file scheme, defaults to 'private'.
-   *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
-   *   The transferred file as response.
-   */
-  protected function webpResponse($file, array $headers, $scheme) {
+		 * Returns a WebP image as response.
+		 *
+		 * @param string $file
+		 *   Path to image file.
+		 * @param array $headers
+		 *   Response headers.
+		 * @param string $scheme
+		 *   The file scheme, defaults to 'private'.
+		 *
+		 * @return BinaryFileResponse
+		 *   The transferred file as response.
+		 */
+		protected function webpResponse($file, array $headers, $scheme) {
     $headers = array_merge($headers, [
       'Content-Type' => 'image/webp',
       'Content-Length' => filesize($file),
@@ -246,19 +247,19 @@ class ImageStyleDownloadController extends FileDownloadController {
   }
 
   /**
-   * Returns an image style derivative as response.
-   *
-   * @param \Drupal\Core\Image\Image $image
-   *   The image style derivation.
-   * @param array $headers
-   *   Response headers.
-   * @param string $scheme
-   *   The file scheme, defaults to 'private'.
-   *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
-   *   The transferred file as response.
-   */
-  protected function response(Image $image, array $headers, $scheme) {
+		 * Returns an image style derivative as response.
+		 *
+		 * @param Image $image
+		 *   The image style derivation.
+		 * @param array $headers
+		 *   Response headers.
+		 * @param string $scheme
+		 *   The file scheme, defaults to 'private'.
+		 *
+		 * @return BinaryFileResponse
+		 *   The transferred file as response.
+		 */
+		protected function response(Image $image, array $headers, $scheme) {
     $headers = array_merge($headers, [
       'Content-Type' => $image->getMimeType(),
       'Content-Length' => $image->getFileSize(),
diff --git a/src/Webp.php b/src/Webp.php
index bbd6de2..3bb1e6c 100644
--- a/src/Webp.php
+++ b/src/Webp.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\webp;
 
+use Psr\Log\LoggerInterface;
+use Drupal\system\Plugin\ImageToolkit\GDToolkit;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\Exception\FileException;
 use Drupal\Core\Image\ImageFactory;
@@ -23,14 +25,14 @@ class Webp {
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -44,22 +46,22 @@ class Webp {
   /**
    * The file system service.
    *
-   * @var Drupal\Core\File\FileSystemInterface;
+   * @var FileSystemInterface ;
    */
   protected $fileSystem;
 
   /**
    * Webp constructor.
    *
-   * @param \Drupal\Core\Image\ImageFactory $imageFactory
+   * @param ImageFactory $imageFactory
    *   Image factory to be used.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   Logger channel factory.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   * @param TranslationInterface $stringTranslation
    *   String translation interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Configuration factory.
-   * @param Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system service.
    */
   public function __construct(ImageFactory $imageFactory, LoggerChannelFactoryInterface $loggerFactory, TranslationInterface $stringTranslation, ConfigFactoryInterface $configFactory, FileSystemInterface $fileSystem) {
@@ -106,7 +108,7 @@ class Webp {
       // created by the $imageFactory as a parameter to another function, so we
       // have to do everything in one function.
       $sourceImage = $this->imageFactory->get($uri, 'gd');
-      /** @var \Drupal\system\Plugin\ImageToolkit\GDToolkit $toolkit */
+      /** @var GDToolkit $toolkit */
       $toolkit = $sourceImage->getToolkit();
       $mimeType = $sourceImage->getMimeType();
       $sourceImage = $toolkit->getResource();
diff --git a/tests/src/Unit/WebpTest.php b/tests/src/Unit/WebpTest.php
index db4a31f..3121564 100644
--- a/tests/src/Unit/WebpTest.php
+++ b/tests/src/Unit/WebpTest.php
@@ -16,7 +16,7 @@ class WebpTest extends UnitTestCase {
    *
    * Create new unit object.
    */
-  public function setUp() {
+  public function setUp(): void {
     // Mock the class to avoid the constructor.
     $this->webp = $this->getMockBuilder('\Drupal\webp\Webp')
       ->disableOriginalConstructor()
diff --git a/webp.module b/webp.module
index de27098..33d6fbf 100644
--- a/webp.module
+++ b/webp.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Template\Attribute;
 /**
  * @file
  * Contains webp.module.
@@ -30,8 +31,7 @@ function webp_preprocess_responsive_image(&$variables) {
   $webp_sources = [];
   if (isset($variables['sources'])) {
     foreach ($variables['sources'] as $source) {
-      /** @var \Drupal\Core\Template\Attribute $source */
-
+      /** @var Attribute $source */
       // Blazy module is using another srcset attribute.
       $srcset_attribute_key = FALSE;
       if ($source->offsetExists('data-srcset')) {
