diff --git a/field_collection.api.php b/field_collection.api.php
index 49844a6..98003d2 100644
--- a/field_collection.api.php
+++ b/field_collection.api.php
@@ -1,15 +1,14 @@
 <?php
 
+use Drupal\field_collection\Entity\FieldCollectionItem;
 /**
  * @file
  * Contains API documentation and examples for the Field collection.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter whether a field collection item is considered empty.
  *
@@ -18,10 +17,10 @@
  *
  * @param bool $is_empty
  *   Whether or not the field should be considered empty.
- * @param \Drupal\field_collection\Entity\FieldCollectionItem $item
+ * @param FieldCollectionItem $item
  *   The field collection we are currently operating on.
  */
-function hook_field_collection_is_empty_alter(&$is_empty, \Drupal\field_collection\Entity\FieldCollectionItem $item) {
+function hook_field_collection_is_empty_alter(&$is_empty, FieldCollectionItem $item) {
   if (isset($item->my_field) && empty($item->my_field)) {
     $is_empty = TRUE;
   }
diff --git a/field_collection.info.yml b/field_collection.info.yml
index 851df33..023cb25 100755
--- a/field_collection.info.yml
+++ b/field_collection.info.yml
@@ -1,8 +1,7 @@
 name: Field Collection
 description: 'Provides a field collection field, to which any number of fields can be attached.'
 package: Field types
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 configure: field_collection.overview_field_collections
 type: module
 dependencies:
diff --git a/field_collection.install b/field_collection.install
index e49c3fd..b942fd6 100644
--- a/field_collection.install
+++ b/field_collection.install
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Entity\Sql\TableMappingInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 /**
  * @file
  * Install, update and uninstall functions for the field_collection module.
@@ -11,7 +14,7 @@ use Drupal\Core\Entity\Sql\SqlEntityStorageInterface;
  * Update database tables to support extended entity references.
  */
 function field_collection_update_8001() {
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+  /** @var EntityFieldManagerInterface $entity_field_manager */
   $entity_field_manager = \Drupal::service('entity_field.manager');
   // The key-value collection for tracking installed storage schema.
   $installed_storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
@@ -36,10 +39,10 @@ function field_collection_update_8001() {
     }
 
     $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
-    /** @var \Drupal\Core\Entity\Sql\TableMappingInterface $table_mapping */
+    /** @var TableMappingInterface $table_mapping */
     $table_mapping = $entity_storage->getTableMapping($field_storage_definitions);
     // Only need field storage definitions of field_collection fields.
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition */
+    /** @var FieldStorageDefinitionInterface $field_storage_definition */
     foreach (array_intersect_key($field_storage_definitions, $map) as $field_storage_definition) {
       $field_name = $field_storage_definition->getName();
       $column_name = $table_mapping->getFieldColumnName($field_storage_definition, 'target_id');
@@ -101,7 +104,7 @@ function field_collection_update_8001() {
  * Update database to support entity references for pre-existing content types.
  */
 function field_collection_update_8002() {
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+  /** @var EntityFieldManagerInterface $entity_field_manager */
   $entity_field_manager = \Drupal::service('entity_field.manager');
   $entity_type_manager = \Drupal::entityTypeManager();
 
diff --git a/field_collection.views.inc b/field_collection.views.inc
index 95112b6..3709021 100644
--- a/field_collection.views.inc
+++ b/field_collection.views.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 /**
  * @file
  * Provide views data that isn't tied to any other module.
@@ -19,7 +20,7 @@ use Drupal\views;
 function field_collection_field_views_data(FieldStorageConfigInterface $field_storage) {
   $data = views_field_default_views_data($field_storage);
   $storage = _views_field_get_entity_type_storage($field_storage);
-  /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+  /** @var DefaultTableMapping $table_mapping */
   $table_mapping = $storage->getTableMapping();
 
   $entity_type_id = $field_storage->getTargetEntityTypeId();
diff --git a/src/Access/FieldCollectionItemHostAddOperationCheck.php b/src/Access/FieldCollectionItemHostAddOperationCheck.php
index f5003fb..63ea1a4 100644
--- a/src/Access/FieldCollectionItemHostAddOperationCheck.php
+++ b/src/Access/FieldCollectionItemHostAddOperationCheck.php
@@ -14,14 +14,14 @@ class FieldCollectionItemHostAddOperationCheck implements AccessInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a FieldCollectionItemHostAddOperationCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -31,7 +31,7 @@ class FieldCollectionItemHostAddOperationCheck implements AccessInterface {
   /**
    * Checks access to add a field collection item to its future host.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
    * TODO: Document params
diff --git a/src/Access/FieldCollectionItemHostOperationCheck.php b/src/Access/FieldCollectionItemHostOperationCheck.php
index 4e7aa60..cbe41f9 100644
--- a/src/Access/FieldCollectionItemHostOperationCheck.php
+++ b/src/Access/FieldCollectionItemHostOperationCheck.php
@@ -16,7 +16,7 @@ class FieldCollectionItemHostOperationCheck implements AccessInterface {
   /**
    * Checks access to the operation on the field collection item's host.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
    * TODO: Document params
diff --git a/src/Access/FieldCollectionItemHostRevisionsOperationCheck.php b/src/Access/FieldCollectionItemHostRevisionsOperationCheck.php
index b4384a3..0ebd887 100644
--- a/src/Access/FieldCollectionItemHostRevisionsOperationCheck.php
+++ b/src/Access/FieldCollectionItemHostRevisionsOperationCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\field_collection\Access;
 
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -17,21 +18,21 @@ class FieldCollectionItemHostRevisionsOperationCheck implements AccessInterface
   /**
    * The permission handler.
    *
-   * @var \Drupal\user\PermissionHandlerInterface
+   * @var PermissionHandlerInterface
    */
   protected $permissionHandler;
 
   /**
    * The field collection item storage.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage
+   * @var SqlContentEntityStorage
    */
   protected $fieldCollectionItemStorage;
 
   /**
    * Constructs a new FieldCollectionItemHostRevisionsOperationCheck.
    *
-   * @param \Drupal\user\PermissionHandlerInterface $permission_handler
+   * @param PermissionHandlerInterface $permission_handler
    *   The permission handler.
    */
   public function __construct(PermissionHandlerInterface $permission_handler) {
@@ -41,7 +42,7 @@ class FieldCollectionItemHostRevisionsOperationCheck implements AccessInterface
   /**
    * Checks operation access on the field collection item's host's revisions.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
    * TODO: Document params
diff --git a/src/Controller/FieldCollectionItemController.php b/src/Controller/FieldCollectionItemController.php
index 9cd96b0..98faec7 100644
--- a/src/Controller/FieldCollectionItemController.php
+++ b/src/Controller/FieldCollectionItemController.php
@@ -15,7 +15,7 @@ class FieldCollectionItemController extends ControllerBase {
   /**
    * Provides the field collection item submission form.
    *
-   * @param \Drupal\field_collection\Entity\FieldCollection $field_collection
+   * @param FieldCollection $field_collection
    *   The field_collection entity for the field collection item.
    *
    * @param $host_type
@@ -52,7 +52,7 @@ class FieldCollectionItemController extends ControllerBase {
   /**
    * Displays a field collection item.
    *
-   * @param \Drupal\field_collection\Entity\FieldCollectionItem $field_collection_item
+   * @param FieldCollectionItem $field_collection_item
    *   The field collection item we are displaying.
    *
    * @return array
@@ -66,7 +66,7 @@ class FieldCollectionItemController extends ControllerBase {
   /**
    * Builds a field collection item page render array.
    *
-   * @param \Drupal\field_collection\Entity\FieldCollectionItem $field_collection_item
+   * @param FieldCollectionItem $field_collection_item
    *   The field collection item we are displaying.
    *
    * @return array
@@ -96,7 +96,7 @@ class FieldCollectionItemController extends ControllerBase {
   /**
    * The _title_callback for the field_collection_item.add route.
    *
-   * @param \Drupal\field_collection\Entity\FieldCollection $field_collection
+   * @param FieldCollection $field_collection
    *   The current field collection.
    *
    * @return string
diff --git a/src/FieldCollectionItemAccessControlHandler.php b/src/FieldCollectionItemAccessControlHandler.php
index 3c4fecb..f5db8f0 100644
--- a/src/FieldCollectionItemAccessControlHandler.php
+++ b/src/FieldCollectionItemAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\field_collection;
 
+use Drupal\field_collection\Entity\FieldCollectionItem;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -12,7 +13,7 @@ class FieldCollectionItemAccessControlHandler extends EntityAccessControlHandler
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\field_collection\Entity\FieldCollectionItem $entity */
+    /** @var FieldCollectionItem $entity */
     $result = parent::checkAccess($entity, $operation, $account);
 
     if (!$result->isForbidden()) {
diff --git a/src/FieldCollectionItemInterface.php b/src/FieldCollectionItemInterface.php
index 6abbf6d..73a5f8d 100644
--- a/src/FieldCollectionItemInterface.php
+++ b/src/FieldCollectionItemInterface.php
@@ -25,7 +25,7 @@ interface FieldCollectionItemInterface extends ContentEntityInterface {
    *   (optional) TRUE to reset the internal cache for the host's entity type.
    *   Defaults to FALSE.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The host entity of this field collection item or NULL if the reference
    *   doesn't exist in the host yet.
    */
@@ -52,7 +52,7 @@ interface FieldCollectionItemInterface extends ContentEntityInterface {
   /**
    * Sets the host entity. Only possible during creation of a item.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The host entity to add the the field collection item to.
    *
    * @param $create_link
diff --git a/src/Plugin/Field/FieldWidget/FieldCollectionEmbedWidget.php b/src/Plugin/Field/FieldWidget/FieldCollectionEmbedWidget.php
index 478c3cc..06bb9ed 100644
--- a/src/Plugin/Field/FieldWidget/FieldCollectionEmbedWidget.php
+++ b/src/Plugin/Field/FieldWidget/FieldCollectionEmbedWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\field_collection\Plugin\Field\FieldWidget;
 
+use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
@@ -334,9 +335,9 @@ class FieldCollectionEmbedWidget extends WidgetBase implements TrustedCallbackIn
    * Ajax callback to remove a field collection from a multi-valued field.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AjaxResponse object.
    *
    * @see self::removeSubmit()
diff --git a/src/Plugin/migrate/destination/EntityFieldCollection.php b/src/Plugin/migrate/destination/EntityFieldCollection.php
index 65e00b6..0a1ca91 100644
--- a/src/Plugin/migrate/destination/EntityFieldCollection.php
+++ b/src/Plugin/migrate/destination/EntityFieldCollection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\field_collection\Plugin\migrate\destination;
 
+use Drupal\field_collection\Entity\FieldCollectionItem;
 use Drupal\migrate\Plugin\migrate\destination\EntityContentBase;
 use Drupal\migrate\Row;
 
@@ -17,7 +18,7 @@ class EntityFieldCollection extends EntityContentBase {
    */
   public function import(Row $row, array $old_destination_id_values = []) {
 
-    /** @var \Drupal\field_collection\Entity\FieldCollectionItem $field_collection */
+    /** @var FieldCollectionItem $field_collection */
     $field_collection = $this->getEntity($row, $old_destination_id_values);
 
     if ($field_collection->isNew()) {
diff --git a/tests/src/Functional/FieldCollectionBasicTestCase.php b/tests/src/Functional/FieldCollectionBasicTestCase.php
index 84940f1..649453c 100644
--- a/tests/src/Functional/FieldCollectionBasicTestCase.php
+++ b/tests/src/Functional/FieldCollectionBasicTestCase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\field_collection\Functional;
 
+use Drupal\field_collection\FieldCollectionItemInterface;
 use Drupal\field_collection\Entity\FieldCollection;
 use Drupal\field_collection\Entity\FieldCollectionItem;
 use Drupal\node\Entity\Node;
@@ -32,7 +33,7 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
   /**
    * Sets up the data structures for the tests.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->setUpFieldCollectionTest();
   }
@@ -42,12 +43,12 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
    */
   public function testCRUD() {
     /** @var \Drupal\node\NodeInterface $node */
-    /** @var \Drupal\field_collection\FieldCollectionItemInterface $field_collection_item */
+    /** @var FieldCollectionItemInterface $field_collection_item */
     list ($node, $field_collection_item) = $this->createNodeWithFieldCollection('article');
 
-    $this->assertEqual($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'A field_collection_item has been successfully created and referenced.');
+    $this->assertEquals($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'A field_collection_item has been successfully created and referenced.');
 
-    $this->assertEqual($field_collection_item->revision_id->value, $node->{$this->field_collection_name}->revision_id, 'The new field_collection_item has the correct revision.');
+    $this->assertEquals($field_collection_item->revision_id->value, $node->{$this->field_collection_name}->revision_id, 'The new field_collection_item has the correct revision.');
 
     // Test adding an additional field_collection_item.
     $field_collection_item_2 = FieldCollectionItem::create(['field_name' => $this->field_collection_name]);
@@ -64,15 +65,15 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
 
     $this->assertTrue(!empty($field_collection_item_2->getRevisionId()), 'Second field_collection_item has a revision.');
 
-    $this->assertEqual(count(FieldCollectionItem::loadMultiple()), 2, 'Field_collection_items have been stored.');
+    $this->assertEquals(count(FieldCollectionItem::loadMultiple()), 2, 'Field_collection_items have been stored.');
 
-    $this->assertEqual($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'Existing reference has been kept during update.');
+    $this->assertEquals($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'Existing reference has been kept during update.');
 
-    $this->assertEqual($field_collection_item->getRevisionId(), $node->{$this->field_collection_name}[0]->revision_id, 'Revision: Existing reference has been kept during update.');
+    $this->assertEquals($field_collection_item->getRevisionId(), $node->{$this->field_collection_name}[0]->revision_id, 'Revision: Existing reference has been kept during update.');
 
-    $this->assertEqual($field_collection_item_2->id(), $node->{$this->field_collection_name}[1]->target_id, 'New field_collection_item has been properly referenced.');
+    $this->assertEquals($field_collection_item_2->id(), $node->{$this->field_collection_name}[1]->target_id, 'New field_collection_item has been properly referenced.');
 
-    $this->assertEqual($field_collection_item_2->getRevisionId(), $node->{$this->field_collection_name}[1]->revision_id, 'Revision: New field_collection_item has been properly referenced.');
+    $this->assertEquals($field_collection_item_2->getRevisionId(), $node->{$this->field_collection_name}[1]->revision_id, 'Revision: New field_collection_item has been properly referenced.');
 
     // Make sure deleting the field collection item removes the reference.
     $field_collection_item_2->delete();
@@ -84,7 +85,7 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
     // Make sure field_collections are removed during deletion of the host.
     $node->delete();
 
-    $this->assertIdentical(FieldCollectionItem::loadMultiple(), [], 'field_collection_item deleted when the host is deleted.');
+    $this->assertSame(FieldCollectionItem::loadMultiple(), [], 'field_collection_item deleted when the host is deleted.');
 
     // Try deleting nodes with collections without any values.
     $node = $this->drupalCreateNode(['type' => 'article']);
@@ -188,9 +189,9 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
 
     list(, $field_collection_item_2) = $this->createNodeWithFieldCollection('test_content_type');
 
-    /** @var \Drupal\field_collection\FieldCollectionItemInterface $field_collection_item_1 */
+    /** @var FieldCollectionItemInterface $field_collection_item_1 */
     $field_collection_item_id_1 = $field_collection_item_1->id();
-    /** @var \Drupal\field_collection\FieldCollectionItemInterface $field_collection_item_2 */
+    /** @var FieldCollectionItemInterface $field_collection_item_2 */
     $field_collection_item_id_2 = $field_collection_item_2->id();
 
     $field_collection_field_1->delete();
@@ -224,7 +225,10 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
     $path = "field_collection_item/add/field_test_collection/node/{$node->id()}";
 
     $this->drupalGet($path);
-    $this->assertText(t('Access denied'), 'Access has been denied.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));
 
     // Login with new user that has basic edit rights.
     $user_privileged = $this->drupalCreateUser([
@@ -237,31 +241,50 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
     // Test field collection item add form.
     $this->drupalGet('admin/structure/types/manage/article/display');
     $this->drupalGet("node/{$node->id()}");
-    $this->assertLinkByHref($path, 0, 'Add link is shown.');
+    $this->assertSession()->linkByHrefExists($path, 0, 'Add link is shown.');
     $this->drupalGet($path);
 
-    $this->assertText(t($this->inner_field_definition['label']), 'Add form is shown.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t($this->inner_field_definition['label']));
 
     $edit = ["$this->inner_field_name[0][value]" => rand()];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
-    $this->assertText(t('Successfully added a @field.', ['@field' => $this->field_collection_name]), 'Field collection saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Successfully added a @field.', ['@field' => $this->field_collection_name]));
 
-    $this->assertText($edit["$this->inner_field_name[0][value]"], 'Added field value is shown.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit["$this->inner_field_name[0][value]"]);
 
     $field_collection_item = FieldCollectionItem::load(1);
 
     // Test field collection item edit form.
     $edit["$this->inner_field_name[0][value]"] = rand();
-    $this->drupalPostForm('field_collection_item/1/edit', $edit, t('Save'));
+    $this->drupalGet('field_collection_item/1/edit');
+    $this->submitForm($edit, t('Save'));
 
-    $this->assertText(t('Successfully edited @field.', ['@field' => $field_collection_item->label()]), 'Field collection saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Successfully edited @field.', ['@field' => $field_collection_item->label()]));
 
-    $this->assertText($edit["$this->inner_field_name[0][value]"], 'Field collection has been edited.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit["$this->inner_field_name[0][value]"]);
 
     $this->drupalGet('field_collection_item/1');
 
-    $this->assertText($edit["$this->inner_field_name[0][value]"], 'Field collection can be viewed.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit["$this->inner_field_name[0][value]"]);
   }
 
 }
diff --git a/tests/src/Functional/FieldCollectionTestTrait.php b/tests/src/Functional/FieldCollectionTestTrait.php
index c636eed..b816e31 100644
--- a/tests/src/Functional/FieldCollectionTestTrait.php
+++ b/tests/src/Functional/FieldCollectionTestTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\field_collection\Functional;
 
+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field_collection\Entity\FieldCollectionItem;
@@ -14,14 +16,14 @@ trait FieldCollectionTestTrait {
   /**
    * Field storage config for the field collection bundle.
    *
-   * @var \Drupal\field\Entity\FieldStorageConfig
+   * @var FieldStorageConfig
    */
   protected $field_collection_field_storage;
 
   /**
    * Field config for the field collection bundle.
    *
-   * @var \Drupal\Core\Field\FieldConfigInterface
+   * @var FieldConfigInterface
    */
   protected $field_collection_field;
 
@@ -49,7 +51,7 @@ trait FieldCollectionTestTrait {
   /**
    * EntityStorageInterface for nodes.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;
 
diff --git a/tests/src/Kernel/DuplicateFieldCollectionTest.php b/tests/src/Kernel/DuplicateFieldCollectionTest.php
index 6a2fda8..28bbf3b 100644
--- a/tests/src/Kernel/DuplicateFieldCollectionTest.php
+++ b/tests/src/Kernel/DuplicateFieldCollectionTest.php
@@ -21,7 +21,7 @@ class DuplicateFieldCollectionTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['field_collection']);
   }
