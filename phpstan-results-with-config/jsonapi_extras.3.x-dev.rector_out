modules/contrib/jsonapi_extras/jsonapi_extras.module
modules/contrib/jsonapi_extras/jsonapi_extras.post_update.php
modules/contrib/jsonapi_extras/modules/jsonapi_defaults/jsonapi_defaults.install
modules/contrib/jsonapi_extras/modules/jsonapi_defaults/jsonapi_defaults.module
modules/contrib/jsonapi_extras/modules/jsonapi_defaults/src/Controller/EntityResource.php
modules/contrib/jsonapi_extras/modules/jsonapi_defaults/src/JsonapiDefaultsServiceProvider.php
modules/contrib/jsonapi_extras/modules/jsonapi_defaults/tests/src/Functional/JsonApiDefaultsFunctionalTest.php
modules/contrib/jsonapi_extras/src-impostor-normalizers/ConfigEntityDenormalizerImpostor.php
modules/contrib/jsonapi_extras/src-impostor-normalizers/ContentEntityDenormalizerImpostor.php
modules/contrib/jsonapi_extras/src-impostor-normalizers/FieldItemNormalizerImpostor.php
modules/contrib/jsonapi_extras/src-impostor-normalizers/ResourceIdentifierNormalizerImpostor.php
modules/contrib/jsonapi_extras/src-impostor-normalizers/ResourceObjectNormalizerImpostor.php
modules/contrib/jsonapi_extras/src/Annotation/ResourceFieldEnhancer.php
modules/contrib/jsonapi_extras/src/Entity/JsonapiResourceConfig.php
modules/contrib/jsonapi_extras/src/EntityToJsonApi.php
modules/contrib/jsonapi_extras/src/EventSubscriber/ConfigSubscriber.php
modules/contrib/jsonapi_extras/src/EventSubscriber/JsonApiBuildSubscriber.php
modules/contrib/jsonapi_extras/src/Form/JsonapiExtrasSettingsForm.php
modules/contrib/jsonapi_extras/src/Form/JsonapiResourceConfigDeleteForm.php
modules/contrib/jsonapi_extras/src/Form/JsonapiResourceConfigForm.php
modules/contrib/jsonapi_extras/src/JsonapiExtrasServiceProvider.php
modules/contrib/jsonapi_extras/src/JsonapiResourceConfigListBuilder.php
modules/contrib/jsonapi_extras/src/Normalizer/ConfigEntityDenormalizer.php
modules/contrib/jsonapi_extras/src/Normalizer/ContentEntityDenormalizer.php
modules/contrib/jsonapi_extras/src/Normalizer/FieldItemNormalizer.php
modules/contrib/jsonapi_extras/src/Normalizer/JsonApiNormalizerDecoratorBase.php
modules/contrib/jsonapi_extras/src/Normalizer/ResourceIdentifierNormalizer.php
modules/contrib/jsonapi_extras/src/Normalizer/ResourceObjectNormalizer.php
modules/contrib/jsonapi_extras/src/Normalizer/SchemaFieldDefinitionNormalizer.php
modules/contrib/jsonapi_extras/src/Normalizer/SchemataSchemaNormalizer.php
modules/contrib/jsonapi_extras/src/Plugin/DateTimeEnhancerBase.php
modules/contrib/jsonapi_extras/src/Plugin/ResourceFieldEnhancerBase.php
modules/contrib/jsonapi_extras/src/Plugin/ResourceFieldEnhancerInterface.php
modules/contrib/jsonapi_extras/src/Plugin/ResourceFieldEnhancerManager.php
modules/contrib/jsonapi_extras/src/Plugin/Validation/Constraint/DuplicateFieldConstraint.php
modules/contrib/jsonapi_extras/src/Plugin/Validation/Constraint/DuplicateFieldConstraintValidator.php
modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/DateTimeEnhancer.php
modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/DateTimeFromStringEnhancer.php
modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/JSONFieldEnhancer.php
modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/SingleNestedEnhancer.php
modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/UrlLinkEnhancer.php
modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/UuidLinkEnhancer.php
modules/contrib/jsonapi_extras/src/ResourceType/ConfigurableResourceType.php
modules/contrib/jsonapi_extras/src/ResourceType/ConfigurableResourceTypeRepository.php
modules/contrib/jsonapi_extras/src/ResourceType/NullJsonapiResourceConfig.php
modules/contrib/jsonapi_extras/src/SerializerDecorator.php
modules/contrib/jsonapi_extras/tests/src/Functional/JsonApiExtrasFunctionalTest.php
modules/contrib/jsonapi_extras/tests/src/Functional/JsonApiExtrasFunctionalTestBase.php
modules/contrib/jsonapi_extras/tests/src/Kernel/Controller/EntityResourceTest.php
modules/contrib/jsonapi_extras/tests/src/Kernel/DefaultDisabledResourceConfigTest.php
modules/contrib/jsonapi_extras/tests/src/Kernel/EntityToJsonApiTest.php

30 files with changes
=====================

1) modules/contrib/jsonapi_extras/tests/src/Kernel/EntityToJsonApiTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\jsonapi_extras\Kernel;

+use Drupal\jsonapi_extras\EntityToJsonApi;
+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   /**
    * System under test.
    *
-   * @var \Drupal\jsonapi_extras\EntityToJsonApi
+   * @var EntityToJsonApi
    */
   protected $sut;

@@ @@
   ];

   /**
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   private $nodeType;

   /**
-   * @var \Drupal\taxonomy\Entity\Vocabulary
+   * @var Vocabulary
    */
   private $vocabulary;

   /**
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   private $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Add the entity schemas.
     $this->installEntitySchema('node');
@@ @@
    * @see https://www.drupal.org/project/jsonapi_extras/issues/3124805
    */
   public function testRequestStack() {
-    /** @var \Symfony\Component\HttpFoundation\RequestStack $request_stack */
+    /** @var RequestStack $request_stack */
     $request_stack = $this->container->get('request_stack');
     $this->sut->serialize($this->node);
     $request = $request_stack->pop();
-    $this->assertNotEqual($request->getPathInfo(), '/jsonapi/node/' . $this->nodeType->id() . '/' . $this->node->uuid(), 'The request from jsonapi_extras.entity.to_jsonapi should not linger in the request stack.');
+    $this->assertNotEquals($request->getPathInfo(), '/jsonapi/node/' . $this->nodeType->id() . '/' . $this->node->uuid(), 'The request from jsonapi_extras.entity.to_jsonapi should not linger in the request stack.');
   }

   /**
    * Checks entity's serialization/normalization.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to serialize/normalize.
    * @param string[] $include_fields
    *   The list of fields to include.
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/jsonapi_extras/tests/src/Kernel/Controller/EntityResourceTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     NodeType::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/jsonapi_extras/tests/src/Functional/JsonApiExtrasFunctionalTestBase.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Add vocabs field to the tags.
     $this->createEntityReferenceField(
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/jsonapi_extras/tests/src/Functional/JsonApiExtrasFunctionalTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\jsonapi_extras\Functional;

+use Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository;
+use Symfony\Component\Routing\RouteCollection;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Check that the e0ipso/shaper library is available.
     if (!class_exists("\\Shaper\\DataAdaptor\\DataAdaptorBase")) {
       $this->fail('The e0ipso/shaper library is missing. You can install it with `composer require e0ipso/shaper`.');
@@ @@
    * @todo Create a test similar to this
    */
   public function testResourceTypeFieldAliasing() {
-    /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository $resourceTypeRepository */
+    /** @var ConfigurableResourceTypeRepository $resourceTypeRepository */
     $resourceTypeRepository = $this->container->get('jsonapi.resource_type.repository');

     $nodeArticleType = $resourceTypeRepository->getByTypeName('node--article');
@@ @@
     $this->nodes[40]->save();

     // 1. Make sure the api root is under '/api' and not '/jsonapi'.
-    /** @var \Symfony\Component\Routing\RouteCollection $route_collection */
+    /** @var RouteCollection $route_collection */
     $route_collection = \Drupal::service('router.route_provider')
       ->getRoutesByPattern('/api');
     $this->assertInstanceOf(
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/jsonapi_extras/src/SerializerDecorator.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated JSON:API serializer service.
    *
-   * @var \Drupal\jsonapi\Serializer\Serializer
+   * @var Serializer
    */
   protected $decoratedSerializer;

@@ @@
   /**
    * Constructs a SerializerDecorator.
    *
-   * @param \Drupal\jsonapi\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The decorated JSON:API serializer.
    */
   public function __construct(Serializer $serializer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/jsonapi_extras/src/ResourceType/ConfigurableResourceTypeRepository.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras\ResourceType;

+use Drupal\jsonapi_extras\Entity\JsonapiResourceConfig;
+use Drupal\jsonapi\ResourceType\ResourceType;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Plugin manager for enhancers.
    *
-   * @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager
+   * @var ResourceFieldEnhancerManager
    */
   protected $enhancerManager;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * A list of all resource types.
    *
-   * @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType[]
+   * @var ConfigurableResourceType[]
    */
   protected $resourceTypes;

@@ @@
   /**
    * A list of only enabled resource types.
    *
-   * @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType[]
+   * @var ConfigurableResourceType[]
    */
   protected $enabledResourceTypes;

@@ @@
   /**
    * A list of all resource configuration entities.
    *
-   * @var \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig[]
+   * @var JsonapiResourceConfig[]
    */
   protected static $resourceConfigs;

@@ @@
   /**
    * Injects the entity repository.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function setEntityRepository(EntityRepositoryInterface $entity_repository) {
@@ @@
   /**
    * Injects the resource enhancer manager.
    *
-   * @param \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager $enhancer_manager
+   * @param ResourceFieldEnhancerManager $enhancer_manager
    *   The resource enhancer manager.
    */
   public function setEnhancerManager(ResourceFieldEnhancerManager $enhancer_manager) {
@@ @@
   /**
    * Injects the configuration factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory) {
@@ @@
    * @param string $resource_config_id
    *   The configuration entity ID.
    *
-   * @return \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig
+   * @return JsonapiResourceConfig
    *   The configuration entity for the resource type.
    */
   protected function getResourceConfig($resource_config_id) {
@@ @@
   /**
    * Load all resource configuration entities.
    *
-   * @return \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig[]
+   * @return JsonapiResourceConfig[]
    *   The resource config entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getResourceConfigs() {
     if (!static::$resourceConfigs) {
@@ @@
   /**
    * Lookups resource type by the internal and public identifiers.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType[] $resource_types
+   * @param ResourceType[] $resource_types
    *   The list of resource types to do a lookup.
    * @param string $entity_type_id
    *   The entity type of a seekable resource.
@@ @@
    * @param string $bundle
    *   The entity bundle of a seekable resource.
    *
-   * @return \Drupal\jsonapi\ResourceType\ResourceType|null
+   * @return ResourceType|null
    *   The resource type or NULL if it cannot be found.
    *
    * @todo Remove this code when Drupal 8 support is dropped
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/jsonapi_extras/src/ResourceType/ConfigurableResourceType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras\ResourceType;

+use Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\jsonapi\ResourceType\ResourceType;
@@ @@
   /**
    * The JsonapiResourceConfig entity.
    *
-   * @var \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig
+   * @var JsonapiResourceConfig
    */
   protected $jsonapiResourceConfig;

@@ @@
   /**
    * Plugin manager for enhancers.
    *
-   * @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager
+   * @var ResourceFieldEnhancerManager
    */
   protected $enhancerManager;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Returns the jsonapi_resource_config.
    *
-   * @return \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig
+   * @return JsonapiResourceConfig
    *   The jsonapi_resource_config entity.
    */
   public function getJsonapiResourceConfig() {
@@ @@
   /**
    * Sets the jsonapi_resource_config.
    *
-   * @param \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $resource_config
+   * @param JsonapiResourceConfig $resource_config
    *   The jsonapi_resource_config entity.
    */
   public function setJsonapiResourceConfig(JsonapiResourceConfig $resource_config) {
@@ @@
   /**
    * Injects the config factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The field enhancer manager.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Injects the field enhancer manager.
    *
-   * @param \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager $enhancer_manager
+   * @param ResourceFieldEnhancerManager $enhancer_manager
    *   The field enhancer manager.
    */
   public function setEnhancerManager(ResourceFieldEnhancerManager $enhancer_manager) {
@@ @@
    * @param string $from
    *   The realm of the provided field name.
    *
-   * @return \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface|null
+   * @return ResourceFieldEnhancerInterface|null
    *   The enhancer plugin. NULL if not found.
    */
   public function getFieldEnhancer($field_name, $from = 'fieldName') {
@@ @@
         $settings = $enhancer_info['settings'];
       }
       // Get the enhancer instance.
-      /** @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface $enhancer */
+      /** @var ResourceFieldEnhancerInterface $enhancer */
       $enhancer = $this->enhancerManager->createInstance(
         $enhancer_info['id'],
         $settings
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/UuidLinkEnhancer.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/UrlLinkEnhancer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras\Plugin\jsonapi\FieldEnhancer;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/JSONFieldEnhancer.php:34

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Serialization\Json $encoder
+   * @param Json $encoder
    *   The serialization json.
    */
   public function __construct(array $configuration, string $plugin_id, $plugin_definition, Json $encoder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/jsonapi_extras/src/Plugin/Validation/Constraint/DuplicateFieldConstraintValidator.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/jsonapi_extras/src/Plugin/ResourceFieldEnhancerManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/jsonapi_extras/src/Normalizer/ResourceObjectNormalizer.php:38

    ---------- begin diff ----------
@@ @@
    *   The parent object.
    * @param array $normalization
    *   The normalization to be enhanced.
-   * @param \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType $resource_type
+   * @param ConfigurableResourceType $resource_type
    *   The resource type of the normalized resource object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/jsonapi_extras/src/Normalizer/ResourceIdentifierNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras\Normalizer;

+use Symfony\Component\Serializer\SerializerAwareInterface;
+use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
+use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
@@ @@
   /**
    * The resource type repository for changes on the target resource type.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * Instantiates a ResourceIdentifierNormalizer object.
    *
-   * @param \Symfony\Component\Serializer\SerializerAwareInterface|\Symfony\Component\Serializer\Normalizer\NormalizerInterface|\Symfony\Component\Serializer\Normalizer\DenormalizerInterface $inner
+   * @param SerializerAwareInterface|NormalizerInterface|DenormalizerInterface $inner
    *   The decorated normalizer.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The repository.
    */
   public function __construct($inner, ResourceTypeRepositoryInterface $resource_type_repository) {
@@ @@
    *
    * @param string $uuid
    *   The uuid being referenced.
-   * @param \Drupal\jsonapi\JsonApiResource\ResourceObject $resource_object
+   * @param ResourceObject $resource_object
    *   The object being normalized.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/jsonapi_extras/src/Normalizer/JsonApiNormalizerDecoratorBase.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated (de)normalizer.
    *
-   * @var \Symfony\Component\Serializer\SerializerAwareInterface|\Symfony\Component\Serializer\Normalizer\NormalizerInterface|\Symfony\Component\Serializer\Normalizer\DenormalizerInterface
+   * @var SerializerAwareInterface|NormalizerInterface|DenormalizerInterface
    */
   protected $inner;

@@ @@
   /**
    * JsonApiNormalizerDecoratorBase constructor.
    *
-   * @param \Symfony\Component\Serializer\SerializerAwareInterface|\Symfony\Component\Serializer\Normalizer\NormalizerInterface|\Symfony\Component\Serializer\Normalizer\DenormalizerInterface $inner
+   * @param SerializerAwareInterface|NormalizerInterface|DenormalizerInterface $inner
    *   The decorated normalizer or denormalizer.
    */
   public function __construct($inner) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/jsonapi_extras/src/Normalizer/FieldItemNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras\Normalizer;

+use Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\jsonapi\Normalizer\FieldItemNormalizer as JsonapiFieldItemNormalizer;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The field enhancer manager.
    *
-   * @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager
+   * @var ResourceFieldEnhancerManager
    */
   protected $enhancerManager;

@@ @@
    *
    * @param \Drupal\jsonapi\Normalizer\FieldItemNormalizer $inner
    *   The JSON:API field normalizer entity.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager $enhancer_manager
+   * @param ResourceFieldEnhancerManager $enhancer_manager
    *   The field enhancer manager.
    */
   public function __construct(JsonapiFieldItemNormalizer $inner, EntityTypeManagerInterface $entity_type_manager, ResourceFieldEnhancerManager $enhancer_manager) {
@@ @@
     // First get the regular output.
     $normalized_output = parent::normalize($object, $format, $context);
     // Then detect if there is any enhancer to be applied here.
-    /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType $resource_type */
+    /** @var ConfigurableResourceType $resource_type */
     $resource_type = $context['resource_object']->getResourceType();
     $enhancer = $resource_type->getFieldEnhancer($object->getParent()->getName());
     if (!$enhancer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/jsonapi_extras/src/Normalizer/ContentEntityDenormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras\Normalizer;

+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType;
 use Drupal\jsonapi\ResourceType\ResourceType;

 /**
@@ @@
    *
    * @param array $data
    *   The input data to modify.
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   Contains the info about the resource type.
    *
    * @return array
@@ @@
    *   The modified input data.
    */
   protected function prepareInput(array $data, ResourceType $resource_type) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storage_definitions */
+    /** @var FieldStorageDefinitionInterface[] $field_storage_definitions */
     $field_storage_definitions = \Drupal::service('entity_field.manager')
       ->getFieldStorageDefinitions(
         $resource_type->getEntityTypeId()
       );
     $data_internal = [];
-    /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType $resource_type */
+    /** @var ConfigurableResourceType $resource_type */
     // Translate the public fields into the entity fields.
     foreach ($data as $public_field_name => $field_value) {
       // Skip any disabled field.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/jsonapi_extras/src/Normalizer/ConfigEntityDenormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras\Normalizer;

+use Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface;
 use Drupal\jsonapi\ResourceType\ResourceType;

 /**
@@ @@
    */
   protected function prepareInput(array $data, ResourceType $resource_type) {
     foreach ($data as $public_field_name => &$field_value) {
-      /** @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface $enhancer */
+      /** @var ResourceFieldEnhancerInterface $enhancer */
       $enhancer = $resource_type->getFieldEnhancer($public_field_name);
       if (!$enhancer) {
         continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/jsonapi_extras/src/JsonapiResourceConfigListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras;

+use Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The JSON:API configurable resource type repository.
    *
-   * @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository
+   * @var ConfigurableResourceTypeRepository
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * The JSON:API extras config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs new JsonapiResourceConfigListBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The storage.
    * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The config instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface|null $entityTypeManager
+   * @param EntityTypeManagerInterface|null $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ResourceTypeRepositoryInterface $resource_type_repository, ImmutableConfig $config, EntityTypeManagerInterface $entityTypeManager = NULL) {
@@ @@
     }

     $prefix = $this->config->get('path_prefix');
-    /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType[] $resource_types */
+    /** @var ConfigurableResourceType[] $resource_types */
     $resource_types = $this->resourceTypeRepository->all();
     $default_disabled = $this->config->get('default_disabled');
     foreach ($resource_types as $resource_type) {
@@ @@
         ? $resource_type->getJsonapiResourceConfig()
         : NULL;

-      /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType $resource_type */
+      /** @var ConfigurableResourceType $resource_type */
       $entity_type_id = $resource_type->getEntityTypeId();
       $bundle = $resource_type->getBundle();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/jsonapi_extras/src/Form/JsonapiResourceConfigForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras\Form;

+use Drupal\jsonapi\ResourceType\ResourceTypeRepository;
+use Symfony\Component\Validator\ConstraintViolation;
+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
+use Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\NestedArray;
@@ @@
   /**
    * The bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepository
+   * @var ResourceTypeRepository
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * The field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;

@@ @@
   /**
    * The entity type repository.
    *
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface
+   * @var EntityTypeRepositoryInterface
    */
   protected $entityTypeRepository;

@@ @@
   /**
    * The field enhancer manager.
    *
-   * @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager
+   * @var ResourceFieldEnhancerManager
    */
   protected $enhancerManager;

@@ @@
   /**
    * The JSON:API extras config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The typed config manager.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;

@@ @@
   /**
    * JsonapiResourceConfigForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   Bundle information service.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
-   * @param \Drupal\Core\Entity\EntityFieldManager $field_manager
+   * @param EntityFieldManager $field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository.
-   * @param \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager $enhancer_manager
+   * @param ResourceFieldEnhancerManager $enhancer_manager
    *   The plugin manager for the resource field enhancer.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The config instance.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config_manager
+   * @param TypedConfigManagerInterface $typed_config_manager
    *   The typed config manager.
    */
   public function __construct(EntityTypeBundleInfoInterface $bundle_info, ResourceTypeRepositoryInterface $resource_type_repository, EntityFieldManager $field_manager, EntityTypeRepositoryInterface $entity_type_repository, ResourceFieldEnhancerManager $enhancer_manager, ImmutableConfig $config, Request $request, TypedConfigManagerInterface $typed_config_manager) {
@@ @@
     $entity_type_id = $this->request->get('entity_type_id');
     $bundle = $this->request->get('bundle');

-    /** @var \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $entity */
+    /** @var JsonapiResourceConfig $entity */
     $entity = $this->getEntity();
     $resource_id = $entity->get('id');
     // If we are editing an entity we don't want the Entity Type and Bundle
@@ @@
     $typed_config = $this->typedConfigManager
       ->createFromNameAndData($this->entity->id(), $this->entity->toArray());
     $constraints = $typed_config->validate();
-    /** @var \Symfony\Component\Validator\ConstraintViolation $violation */
+    /** @var ConstraintViolation $violation */
     foreach ($constraints as $violation) {
       $form_path = str_replace('.', '][', $violation->getPropertyPath());
       $form_state->setErrorByName($form_path, $violation->getMessage());
@@ @@
   /**
    * Builds the part of the form that contains the overrides.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type being overridden.
-   * @param \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $entity
+   * @param JsonapiResourceConfig $entity
    *   The configuration entity backing this form.
    *
    * @return array
    *   The partial form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function buildOverridesForm(ResourceType $resource_type, JsonapiResourceConfig $entity) {
     $entity_type_id = $resource_type->getEntityTypeId();
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $entity_type */
+    /** @var ConfigEntityTypeInterface $entity_type */
     $entity_type = $this->entityTypeManager->getDefinition($entity_type_id);
     $bundle = $resource_type->getBundle();
     $field_names = $this->getAllFieldNames($entity_type, $bundle);
@@ @@
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $entity */
+    /** @var JsonapiResourceConfig $entity */
     $entity = parent::buildEntity($form, $form_state);

     // Trim slashes from path.
@@ @@
    *
    * @param string $field_name
    *   The field name of the field being overridden.
-   * @param \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $entity
+   * @param JsonapiResourceConfig $entity
    *   The config entity backed by this form.
    *
    * @return array
    *   The partial form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function buildOverridesField($field_name, JsonapiResourceConfig $entity) {
     $rfs = $entity->get('resourceFields') ?: [];
@@ @@
       '#attributes' => ['id' => $field_name . '-settings-wrapper'],
     ];
     if (!empty($resource_field['enhancer']['id'])) {
-      /** @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface $enhancer */
+      /** @var ResourceFieldEnhancerInterface $enhancer */
       $enhancer = $this->enhancerManager
         ->createInstance($resource_field['enhancer']['id'], []);
       $overrides_form['enhancer']['settings'] += $enhancer
@@ @@
    *
    * @param array $form
    *   The reference to the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return mixed
@@ @@
   /**
    * Gets all field names for a given entity type and bundle.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type for which to get all field names.
    * @param string $bundle
    *   The bundle for which to get all field names.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/jsonapi_extras/src/Form/JsonapiExtrasSettingsForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $jsonApiResourceRepository;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\ProxyClass\Routing\RouteBuilder $router_builder
+   * @param RouteBuilder $router_builder
    *   The router builder to rebuild menus after saving config entity.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $jsonApiResourceRepository
+   * @param ResourceTypeRepositoryInterface $jsonApiResourceRepository
    *   Resource type repository.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteBuilder $router_builder, ResourceTypeRepositoryInterface $jsonApiResourceRepository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/jsonapi_extras/src/EventSubscriber/JsonApiBuildSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras\EventSubscriber;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\jsonapi\ResourceType\ResourceTypeBuildEvent;
@@ @@
 class JsonApiBuildSubscriber implements EventSubscriberInterface {

   /**
-   * @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository
+   * @var ConfigurableResourceTypeRepository
    *  The extra's resource repository
    */
   private $repository;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * JsonApiBuildSubscriber constructor.
    *
-   * @param \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository $repository
+   * @param ConfigurableResourceTypeRepository $repository
    *   Repository from jsonapi_extras is needed to apply configuration.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface|null $configFactory
+   * @param ConfigFactoryInterface|null $configFactory
    *   Config factory.
    */
   public function __construct(ConfigurableResourceTypeRepository $repository, ConfigFactoryInterface $configFactory = NULL) {
@@ @@
   /**
    * Apply resource config through the event.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeBuildEvent $event
+   * @param ResourceTypeBuildEvent $event
    *   The build event used to change the resources and fields.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function applyResourceConfig(ResourceTypeBuildEvent $event) {
     $resource_config = $this->getResourceConfig($event->getResourceTypeName());
@@ @@
    * @param string $resource_config_id
    *   The configuration entity ID.
    *
-   * @return \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig
+   * @return JsonapiResourceConfig
    *   The configuration entity for the resource type.
    */
   protected function getResourceConfig($resource_config_id) {
@@ @@
   /**
    * Gets the fields for the given field names and entity type + bundle.
    *
-   * @param \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $resource_config
+   * @param JsonapiResourceConfig $resource_config
    *   The associated resource config.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeBuildEvent $event
+   * @param ResourceTypeBuildEvent $event
    *   The associated resource config.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function overrideFields(JsonapiResourceConfig $resource_config, ResourceTypeBuildEvent $event) {
     // Use the base class to fetch the non-configurable field mappings.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/jsonapi_extras/src/EventSubscriber/ConfigSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
@@ @@
 use Drupal\Core\DrupalKernelInterface;
 use Drupal\Core\Routing\RouteBuilderInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The Drupal kernel.
    *
-   * @var \Drupal\Core\DrupalKernelInterface
+   * @var DrupalKernelInterface
    */
   protected $drupalKernel;

@@ @@
   /**
    * The route building service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;

@@ @@
   /**
    * Constructs a ConfigSubscriber object.
    *
-   * @param \Drupal\Core\DrupalKernelInterface $drupal_kernel
+   * @param DrupalKernelInterface $drupal_kernel
    *   The Drupal kernel.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route building service.
    */
   public function __construct(DrupalKernelInterface $drupal_kernel, RouteBuilderInterface $route_builder) {
@@ @@
   /**
    * Rebuilds container and routes  when 'path_prefix' configuration is changed.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onSave(ConfigCrudEvent $event) {
@@ @@
   /**
    * Associates JSON:API Extras' config cache tag with all JSON:API responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     if ($event->getRequest()->getRequestFormat() !== 'api_json') {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/jsonapi_extras/src/EntityToJsonApi.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The HTTP kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * The JSON:API Resource Type Repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * A Session object.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $currentRequest;

@@ @@
   /**
    * EntityToJsonApi constructor.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The HTTP kernel.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The resource type repository.
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session object.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The stack of requests.
    */
   public function __construct(
@@ @@
   /**
    * Return the requested entity as a raw string.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to generate the JSON from.
    * @param string[] $includes
    *   The list of includes.
@@ @@
   /**
    * Return the requested entity as an structured array.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to generate the JSON from.
    * @param string[] $includes
    *   The list of includes.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/jsonapi_extras/src/Annotation/ResourceFieldEnhancer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the formatter type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A short description of the formatter type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


26) modules/contrib/jsonapi_extras/modules/jsonapi_defaults/tests/src/Functional/JsonApiDefaultsFunctionalTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\jsonapi_defaults\Functional;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Serialization\Json;
 use Drupal\jsonapi\Query\OffsetPage;
 use Drupal\jsonapi_extras\Entity\JsonapiResourceConfig;
@@ @@
   /**
    * Checks standard pagination and page limit overrides.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testPagination() {
     /** @var \Drupal\Component\Serialization\JsonapiResourceConfig $resource_config */
@@ @@
     ]);
     $response = Json::decode($response);
     $this->assertArrayHasKey('data', $response);
-    $this->assertNotEqual(count($response['data']), $query_override);
-    $this->assertEqual(count($response['data']), static::PAGE_LIMIT_OVERRIDE_VALUE);
+    $this->assertNotEquals(count($response['data']), $query_override);
+    $this->assertEquals(count($response['data']), static::PAGE_LIMIT_OVERRIDE_VALUE);
   }

   /**
@@ @@
     $response = $this->drupalGet($jsonapi_response['links']['next']['href']);
     $jsonapi_response = Json::decode($response);
     $this->assertCount($page_limit, $jsonapi_response['data']);
-    $this->assertNotEqual($first_node_uuid, $jsonapi_response['data'][0]['attributes']['internalId']);
+    $this->assertNotEquals($first_node_uuid, $jsonapi_response['data'][0]['attributes']['internalId']);
     $this->assertArrayHasKey('next', $jsonapi_response['links']);
     $this->assertArrayHasKey('prev', $jsonapi_response['links']);
     $this->assertPagerLink(
@@ @@
    * @param array $values
    *   Combination of keys and values to set on the resource config.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setResouceConfigValue(array $values) {
     $resource_config = JsonapiResourceConfig::load('node--article');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/jsonapi_extras/modules/jsonapi_defaults/src/JsonapiDefaultsServiceProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_defaults;

+use Symfony\Component\DependencyInjection\Definition;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\DependencyInjection\ServiceProviderBase;

@@ @@
    * {@inheritdoc}
    */
   public function alter(ContainerBuilder $container) {
-    /** @var \Symfony\Component\DependencyInjection\Definition $definition */
-
+    /** @var Definition $definition */
     if ($container->hasDefinition('jsonapi.entity_resource')) {
       $definition = $container->getDefinition('jsonapi.entity_resource');
       $definition->setClass('Drupal\jsonapi_defaults\Controller\EntityResource');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/jsonapi_extras/modules/jsonapi_defaults/src/Controller/EntityResource.php:100

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getIncludes(Request $request, $data) {
-    /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType $resourceConfig */
+    /** @var ConfigurableResourceType $resourceConfig */
     if (
       ($resource_type = $request->get(Routes::RESOURCE_TYPE_KEY))
       && $resource_type instanceof ConfigurableResourceType
@@ @@
    *
    * @param string $related_field
    *   The name of the related field to use. NULL if not using a related field.
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type straight from the request.
    *
-   * @return \Drupal\jsonapi\ResourceType\ResourceType
+   * @return ResourceType
    *   The resource type to use to load the includes.
    *
    * @throws \LengthException
@@ @@
    *
    * @param array $page_params
    *   The values of the page query parameter of the request.
-   * @param Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $resource_config
+   * @param JsonapiResourceConfig $resource_config
    *   This resource's config entity.
    *
    * @return int
@@ @@
   /**
    * Sets a jsonapi parameter for the page limit if applicable.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $resource_config
+   * @param JsonapiResourceConfig $resource_config
    *   The resource config entity to check for an override of the page limit.
    * @param array $params
    *   The parameters passed to jsonapi, passed by reference.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/jsonapi_extras/modules/jsonapi_defaults/jsonapi_defaults.module:27

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   Drupal form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Drupal form_state object.
  */
 function _jsonapi_defaults_form_alter(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $config_resource */
+  /** @var JsonapiResourceConfig $config_resource */
   $config_resource = $form_state->getFormObject()->getEntity();
   $filters = _jsonapi_defaults_convert_value(
     $config_resource->getThirdPartySetting('jsonapi_defaults', 'default_filter')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


30) modules/contrib/jsonapi_extras/modules/jsonapi_defaults/jsonapi_defaults.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Config\Config;
 /**
  * @file
  * Install, update and uninstall functions for the JSON API Defaults module.
  */
-
 /**
  * Update third party settings default_include.
  */
 function jsonapi_defaults_update_8001() {
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+  /** @var ConfigFactoryInterface $config_factory */
   $config_factory = \Drupal::configFactory();
-  /** @var \Drupal\Core\Config\Config $config */
+  /** @var Config $config */
   $config_list = $config_factory->listAll('jsonapi_extras.jsonapi_resource_config');
   foreach ($config_list as $config) {
     $config = $config_factory->getEditable($config);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/jsonapi_extras/src/Normalizer/SchemataSchemaNormalizer.p
         hp" file, due to:                                                      
         "Analyze error: "Class                                                 
         Drupal\schemata_json_schema\Normalizer\jsonapi\SchemataSchemaNormalizer
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/jsonapi_extras/src/Normalizer/SchemaFieldDefinitionNorma
         lizer.php" file, due to:                                               
         "Analyze error: "Class                                                 
         Drupal\schemata_json_schema\Normalizer\jsonapi\FieldDefinitionNormalizer
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

