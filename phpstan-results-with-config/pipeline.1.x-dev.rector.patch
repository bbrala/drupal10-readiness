diff --git a/src/Annotation/PipelinePipeline.php b/src/Annotation/PipelinePipeline.php
index 8fffae3..ac6f3d2 100644
--- a/src/Annotation/PipelinePipeline.php
+++ b/src/Annotation/PipelinePipeline.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pipeline\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class PipelinePipeline extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/PipelineStep.php b/src/Annotation/PipelineStep.php
index 08e03db..25ef055 100644
--- a/src/Annotation/PipelineStep.php
+++ b/src/Annotation/PipelineStep.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pipeline\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class PipelineStep extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/PipelineExecutionController.php b/src/Controller/PipelineExecutionController.php
index 778ecda..6ed1589 100644
--- a/src/Controller/PipelineExecutionController.php
+++ b/src/Controller/PipelineExecutionController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pipeline\Controller;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Session\AccountInterface;
@@ -18,14 +19,14 @@ class PipelineExecutionController extends ControllerBase {
   /**
    * The pipeline orchestrator service.
    *
-   * @var \Drupal\pipeline\PipelineOrchestratorInterface
+   * @var PipelineOrchestratorInterface
    */
   protected $orchestrator;
 
   /**
    * Constructs a new pipeline execution controller.
    *
-   * @param \Drupal\pipeline\PipelineOrchestratorInterface $orchestrator
+   * @param PipelineOrchestratorInterface $orchestrator
    *   The pipeline orchestrator service.
    */
   public function __construct(PipelineOrchestratorInterface $orchestrator) {
@@ -58,7 +59,7 @@ class PipelineExecutionController extends ControllerBase {
    * @param string $pipeline
    *   The pipeline to reset.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response.
    */
   public function reset($pipeline) {
@@ -79,10 +80,10 @@ class PipelineExecutionController extends ControllerBase {
    *
    * @param string $pipeline
    *   The pipeline plugin ID.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current use account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result object.
    */
   public function allowExecute($pipeline, AccountInterface $account) {
@@ -94,10 +95,10 @@ class PipelineExecutionController extends ControllerBase {
    *
    * @param string $pipeline
    *   The pipeline plugin ID.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current use account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result object.
    */
   public function allowReset($pipeline, AccountInterface $account) {
diff --git a/src/Event/PipelineErrorEvent.php b/src/Event/PipelineErrorEvent.php
index 697d59d..6efb0b2 100644
--- a/src/Event/PipelineErrorEvent.php
+++ b/src/Event/PipelineErrorEvent.php
@@ -4,8 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\pipeline\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\pipeline\Plugin\PipelinePipelineInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * A failed pipeline completion event.
@@ -15,14 +15,14 @@ class PipelineErrorEvent extends Event {
   /**
    * The pipeline that triggered this event.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @var PipelinePipelineInterface
    */
   protected $pipeline;
 
   /**
    * Constructs a PipelineErrorEvent object.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelineInterface $pipeline
+   * @param PipelinePipelineInterface $pipeline
    *   The pipeline.
    */
   public function __construct(PipelinePipelineInterface $pipeline) {
@@ -32,7 +32,7 @@ class PipelineErrorEvent extends Event {
   /**
    * Retrieves the pipeline that triggered this event.
    *
-   * @return \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @return PipelinePipelineInterface
    *   The pipeline.
    */
   public function getPipeline(): PipelinePipelineInterface {
@@ -42,7 +42,7 @@ class PipelineErrorEvent extends Event {
   /**
    * Sets the pipeline that triggered this event.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelineInterface $pipeline
+   * @param PipelinePipelineInterface $pipeline
    *   The pipeline.
    */
   public function setPipeline(PipelinePipelineInterface $pipeline): void {
diff --git a/src/Event/PipelineSuccessEvent.php b/src/Event/PipelineSuccessEvent.php
index 41dda68..c8b9e08 100644
--- a/src/Event/PipelineSuccessEvent.php
+++ b/src/Event/PipelineSuccessEvent.php
@@ -4,8 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\pipeline\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\pipeline\Plugin\PipelinePipelineInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * A successful pipeline completion event.
@@ -15,14 +15,14 @@ class PipelineSuccessEvent extends Event {
   /**
    * The pipeline that triggered this event.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @var PipelinePipelineInterface
    */
   protected $pipeline;
 
   /**
    * Constructs a PipelineSuccessEvent object.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelineInterface $pipeline
+   * @param PipelinePipelineInterface $pipeline
    *   The pipeline.
    */
   public function __construct(PipelinePipelineInterface $pipeline) {
@@ -32,7 +32,7 @@ class PipelineSuccessEvent extends Event {
   /**
    * Retrieves the pipeline that triggered this event.
    *
-   * @return \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @return PipelinePipelineInterface
    *   The pipeline.
    */
   public function getPipeline(): PipelinePipelineInterface {
@@ -42,7 +42,7 @@ class PipelineSuccessEvent extends Event {
   /**
    * Sets the pipeline that triggered this event.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelineInterface $pipeline
+   * @param PipelinePipelineInterface $pipeline
    *   The pipeline.
    */
   public function setPipeline(PipelinePipelineInterface $pipeline): void {
diff --git a/src/Form/PipelineOrchestratorForm.php b/src/Form/PipelineOrchestratorForm.php
index 2b741e4..d4fb83b 100644
--- a/src/Form/PipelineOrchestratorForm.php
+++ b/src/Form/PipelineOrchestratorForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\pipeline\Form;
 
+use Drupal\pipeline\Plugin\PipelinePipelineInterface;
+use Drupal\pipeline\Plugin\PipelineStepWithFormInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ -18,23 +20,23 @@ class PipelineOrchestratorForm extends FormBase {
   /**
    * The pipeline plugin manager service.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelinePluginManager
+   * @var PipelinePipelinePluginManager
    */
   protected $pipelinePluginManager;
 
   /**
    * The step plugin manager service.
    *
-   * @var \Drupal\pipeline\Plugin\PipelineStepPluginManager
+   * @var PipelineStepPluginManager
    */
   protected $stepPluginManager;
 
   /**
    * Builds a new form object.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelinePluginManager $pipeline_plugin_manager
+   * @param PipelinePipelinePluginManager $pipeline_plugin_manager
    *   The pipeline plugin manager service.
-   * @param \Drupal\pipeline\Plugin\PipelineStepPluginManager $step_plugin_manager
+   * @param PipelineStepPluginManager $step_plugin_manager
    *   The step plugin manager service.
    */
   public function __construct(PipelinePipelinePluginManager $pipeline_plugin_manager, PipelineStepPluginManager $step_plugin_manager) {
@@ -86,7 +88,7 @@ class PipelineOrchestratorForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -106,7 +108,7 @@ class PipelineOrchestratorForm extends FormBase {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ -135,10 +137,10 @@ class PipelineOrchestratorForm extends FormBase {
   /**
    * Returns the current pipeline given the form state object.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @return PipelinePipelineInterface
    *   The current pipeline.
    */
   protected function getCurrentPipeline(FormStateInterface $form_state) {
@@ -148,10 +150,10 @@ class PipelineOrchestratorForm extends FormBase {
   /**
    * Returns the current step given the form state object.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\pipeline\Plugin\PipelineStepWithFormInterface
+   * @return PipelineStepWithFormInterface
    *   An instance of the current pipeline step plugin.
    */
   protected function getCurrentStep(FormStateInterface $form_state) {
diff --git a/src/Form/PipelineSelectForm.php b/src/Form/PipelineSelectForm.php
index 4b463a2..0c422ef 100644
--- a/src/Form/PipelineSelectForm.php
+++ b/src/Form/PipelineSelectForm.php
@@ -18,23 +18,23 @@ class PipelineSelectForm extends FormBase {
   /**
    * The pipeline plugin manager service.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelinePluginManager
+   * @var PipelinePipelinePluginManager
    */
   protected $pipelinePluginManager;
 
   /**
    * The state manager service.
    *
-   * @var \Drupal\pipeline\PipelineStateManager
+   * @var PipelineStateManager
    */
   protected $stateManager;
 
   /**
    * Constructs a new form class.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelinePluginManager $pipeline_plugin_manager
+   * @param PipelinePipelinePluginManager $pipeline_plugin_manager
    *   The pipeline plugin manager service.
-   * @param \Drupal\pipeline\PipelineStateManager $state_manager
+   * @param PipelineStateManager $state_manager
    *   The state manager service.
    */
   public function __construct(PipelinePipelinePluginManager $pipeline_plugin_manager, PipelineStateManager $state_manager) {
diff --git a/src/PipelineOrchestrator.php b/src/PipelineOrchestrator.php
index e4a800e..63695d2 100644
--- a/src/PipelineOrchestrator.php
+++ b/src/PipelineOrchestrator.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\pipeline;
 
+use Drupal\Core\Form\FormSubmitterInterface;
+use Drupal\pipeline\Plugin\PipelinePipelineInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Form\EnforcedResponseException;
+use Drupal\Core\Form\FormAjaxException;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
@@ -34,21 +40,21 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormSubmitterInterface
+   * @var FormSubmitterInterface
    */
   protected $formBuilder;
 
   /**
    * The active pipeline.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @var PipelinePipelineInterface
    */
   protected $pipeline;
 
   /**
    * The pipeline plugin manager service.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelinePluginManager
+   * @var PipelinePipelinePluginManager
    */
   protected $pipelinePluginManager;
 
@@ -62,45 +68,45 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
   /**
    * The persistent state of the importer.
    *
-   * @var \Drupal\pipeline\PipelineStateManager
+   * @var PipelineStateManager
    */
   protected $stateManager;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The request stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a new pipeline orchestrator object.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelinePluginManager $pipeline_plugin_manager
+   * @param PipelinePipelinePluginManager $pipeline_plugin_manager
    *   The pipeline plugin manager service.
-   * @param \Drupal\pipeline\PipelineStateManager $state_manager
+   * @param PipelineStateManager $state_manager
    *   The persistent state of the importer.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
    */
   public function __construct(PipelinePipelinePluginManager $pipeline_plugin_manager, PipelineStateManager $state_manager, FormBuilderInterface $form_builder, MessengerInterface $messenger, AccountProxyInterface $current_user, RequestStack $request_stack) {
@@ -141,10 +147,10 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
    * @param string $pipeline_id
    *   The pipeline to be used.
    *
-   * @return \Drupal\pipeline\PipelineStateInterface
+   * @return PipelineStateInterface
    *   The current pipeline state object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   protected function getCurrentState($pipeline_id) {
@@ -186,7 +192,7 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
   /**
    * Executes the current step and progresses the state machine with one step.
    *
-   * @param \Drupal\pipeline\PipelineStateInterface $state
+   * @param PipelineStateInterface $state
    *   The current pipeline state.
    *
    * @return bool
@@ -209,7 +215,7 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
     }
 
     if ($is_batch = $step instanceof PipelineStepWithBatchInterface) {
-      /** @var \Drupal\pipeline\Plugin\PipelineStepWithBatchInterface $step */
+      /** @var PipelineStepWithBatchInterface $step */
       if ($state->batchProcessIsStarted() && $step->batchProcessIsCompleted()) {
         // We landed here after all batches were processed in the last request.
         if ($state->hasBatchProcessErrors()) {
@@ -299,9 +305,9 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
   /**
    * Advances the pipeline to the next step.
    *
-   * @param \Drupal\pipeline\Plugin\PipelineStepInterface $step
+   * @param PipelineStepInterface $step
    *   The current step.
-   * @param \Drupal\pipeline\PipelineStateInterface $state
+   * @param PipelineStateInterface $state
    *   The pipeline state object.
    *
    * @return bool
@@ -337,9 +343,9 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
   /**
    * Renders a batch progress bar screen or subsequent Json responses.
    *
-   * @param \Drupal\pipeline\Plugin\PipelineStepWithBatchInterface $step
+   * @param PipelineStepWithBatchInterface $step
    *   The current step.
-   * @param \Drupal\pipeline\PipelineStateInterface $state
+   * @param PipelineStateInterface $state
    *   The pipeline state object.
    */
   protected function batchResponse(PipelineStepWithBatchInterface $step, PipelineStateInterface $state) {
@@ -418,9 +424,9 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
   /**
    * Builds the form and instructs the caller that it should render the form.
    *
-   * @param \Drupal\pipeline\Plugin\PipelineStepWithFormInterface $step
+   * @param PipelineStepWithFormInterface $step
    *   The active pipeline step.
-   * @param \Drupal\pipeline\PipelineStateInterface $state
+   * @param PipelineStateInterface $state
    *   The state.
    *
    * @return bool
@@ -456,13 +462,13 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
   /**
    * Builds the form.
    *
-   * @param \Drupal\pipeline\Plugin\PipelineStepWithFormInterface $step
+   * @param PipelineStepWithFormInterface $step
    *   The step plugin instance.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @throws \Drupal\Core\Form\EnforcedResponseException
-   * @throws \Drupal\Core\Form\FormAjaxException
+   * @throws EnforcedResponseException
+   * @throws FormAjaxException
    *   If errors occurred during the form build.
    */
   protected function buildForm(PipelineStepWithFormInterface $step, FormStateInterface &$form_state) {
@@ -474,7 +480,7 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
   /**
    * Reloads the page if the form needs to rebuild.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function redirectForm(FormStateInterface $form_state): void {
@@ -487,7 +493,7 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
   /**
    * Acts when the pipeline exits with error.
    *
-   * @param \Drupal\pipeline\Plugin\PipelineStepInterface $step
+   * @param PipelineStepInterface $step
    *   The step plugin instance.
    * @param array $error
    *   The error message as a render array.
@@ -537,10 +543,10 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
   /**
    * Returns the status message when the pipeline exists with error.
    *
-   * @param \Drupal\pipeline\Plugin\PipelineStepInterface $step
+   * @param PipelineStepInterface $step
    *   The pipeline step plugin instance.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The error message.
    */
   protected function getErrorStatusMessage(PipelineStepInterface $step) {
@@ -553,7 +559,7 @@ class PipelineOrchestrator implements PipelineOrchestratorInterface {
   /**
    * Returns the page title on error.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The error message.
    */
   protected function getErrorPageTitle() {
diff --git a/src/PipelinePermissions.php b/src/PipelinePermissions.php
index c1a5183..4d9802b 100644
--- a/src/PipelinePermissions.php
+++ b/src/PipelinePermissions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pipeline;
 
+use Drupal\pipeline\Plugin\PipelinePipelineInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -17,14 +18,14 @@ class PipelinePermissions implements ContainerInjectionInterface {
   /**
    * The pipeline plugin manager service.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pipelinePluginManager;
 
   /**
    * Constructs a new permission generator instance.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $pipeline_plugin_manager
+   * @param PluginManagerInterface $pipeline_plugin_manager
    *   The pipeline plugin manager service.
    */
   public function __construct(PluginManagerInterface $pipeline_plugin_manager) {
@@ -47,7 +48,7 @@ class PipelinePermissions implements ContainerInjectionInterface {
   public function buildPermissions() {
     $permissions = [];
 
-    /** @var \Drupal\pipeline\Plugin\PipelinePipelineInterface[] $definitions */
+    /** @var PipelinePipelineInterface[] $definitions */
     $definitions = $this->pipelinePluginManager->getDefinitions();
     foreach ($definitions as $plugin_id => $definition) {
       $arguments = ['%pipeline' => $definition['label']];
diff --git a/src/PipelineStateManager.php b/src/PipelineStateManager.php
index 0d820e6..22ea6a2 100644
--- a/src/PipelineStateManager.php
+++ b/src/PipelineStateManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pipeline;
 
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
 
 /**
@@ -12,21 +13,21 @@ class PipelineStateManager implements PipelineStateManagerInterface {
   /**
    * The user private temp store factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $privateTempStoreFactory;
 
   /**
    * The user private temp store.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $privateTempStore;
 
   /**
    * Constructs a new pipeline state manager service.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $private_tempstore_factory
+   * @param PrivateTempStoreFactory $private_tempstore_factory
    *   The user private temp store factory.
    */
   public function __construct(PrivateTempStoreFactory $private_tempstore_factory) {
@@ -66,7 +67,7 @@ class PipelineStateManager implements PipelineStateManagerInterface {
   /**
    * Returns the user private temp store.
    *
-   * @return \Drupal\Core\TempStore\PrivateTempStore
+   * @return PrivateTempStore
    *   The private tempstore.
    */
   protected function getPrivateTempStore() {
diff --git a/src/PipelineStateManagerInterface.php b/src/PipelineStateManagerInterface.php
index d45dc0f..3400fc2 100644
--- a/src/PipelineStateManagerInterface.php
+++ b/src/PipelineStateManagerInterface.php
@@ -12,7 +12,7 @@ interface PipelineStateManagerInterface {
    *
    * @param string $pipeline_id
    *   The pipeline plugin ID.
-   * @param \Drupal\pipeline\PipelineStateInterface $state
+   * @param PipelineStateInterface $state
    *   The pipeline state object.
    *
    * @return $this
@@ -25,7 +25,7 @@ interface PipelineStateManagerInterface {
    * @param string $pipeline_id
    *   The pipeline plugin ID.
    *
-   * @return \Drupal\pipeline\PipelineStateInterface|null
+   * @return PipelineStateInterface|null
    *   The state object or NULL.
    */
   public function getState($pipeline_id);
diff --git a/src/Plugin/PipelinePipelineInterface.php b/src/Plugin/PipelinePipelineInterface.php
index 7777076..cefca81 100644
--- a/src/Plugin/PipelinePipelineInterface.php
+++ b/src/Plugin/PipelinePipelineInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pipeline\Plugin;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\pipeline\PipelineStateInterface;
 
@@ -13,7 +14,7 @@ interface PipelinePipelineInterface extends PluginInspectionInterface, \Iterator
   /**
    * Sets steps iterator pointer to a given step.
    *
-   * @param \Drupal\pipeline\PipelineStateInterface $state
+   * @param PipelineStateInterface $state
    *   The current state object.
    *
    * @return $this
@@ -26,7 +27,7 @@ interface PipelinePipelineInterface extends PluginInspectionInterface, \Iterator
   /**
    * The current pipeline state.
    *
-   * @return \Drupal\pipeline\PipelineStateInterface
+   * @return PipelineStateInterface
    *   The pipeline state object.
    */
   public function getCurrentState();
@@ -44,7 +45,7 @@ interface PipelinePipelineInterface extends PluginInspectionInterface, \Iterator
    * @param string $step_plugin_id
    *   The step plugin ID.
    *
-   * @return \Drupal\pipeline\Plugin\PipelineStepInterface
+   * @return PipelineStepInterface
    *   The step plugin instance.
    */
   public function createStepInstance($step_plugin_id);
@@ -52,7 +53,7 @@ interface PipelinePipelineInterface extends PluginInspectionInterface, \Iterator
   /**
    * Gives a chance to plugins to perform some tasks just before executing.
    *
-   * @return null|\Drupal\Component\Render\MarkupInterface|string
+   * @return null|MarkupInterface|string
    *   If no errors were encountered during the pipeline preparation, nothing
    *   should be returned. Return the error message as a translatable markup
    *   object.
diff --git a/src/Plugin/PipelinePipelinePluginBase.php b/src/Plugin/PipelinePipelinePluginBase.php
index 746cbaf..3d45f59 100644
--- a/src/Plugin/PipelinePipelinePluginBase.php
+++ b/src/Plugin/PipelinePipelinePluginBase.php
@@ -33,28 +33,28 @@ abstract class PipelinePipelinePluginBase extends PluginBase implements Pipeline
   /**
    * The step plugin manager service.
    *
-   * @var \Drupal\pipeline\Plugin\PipelineStepPluginManager
+   * @var PipelineStepPluginManager
    */
   protected $stepPluginManager;
 
   /**
    * The pipeline state manager service.
    *
-   * @var \Drupal\pipeline\PipelineStateManager
+   * @var PipelineStateManager
    */
   protected $stateManager;
 
   /**
    * The current pipeline state.
    *
-   * @var \Drupal\pipeline\PipelineStateInterface
+   * @var PipelineStateInterface
    */
   protected $state;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -67,11 +67,11 @@ abstract class PipelinePipelinePluginBase extends PluginBase implements Pipeline
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\pipeline\Plugin\PipelineStepPluginManager $step_plugin_manager
+   * @param PipelineStepPluginManager $step_plugin_manager
    *   The step plugin manager service.
-   * @param \Drupal\pipeline\PipelineStateManager $state_manager
+   * @param PipelineStateManager $state_manager
    *   The pipeline state manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PipelineStepPluginManager $step_plugin_manager, PipelineStateManager $state_manager, EventDispatcherInterface $event_dispatcher) {
@@ -103,7 +103,7 @@ abstract class PipelinePipelinePluginBase extends PluginBase implements Pipeline
    * {@inheritdoc}
    */
   public function createStepInstance($step_plugin_id) {
-    /** @var \Drupal\pipeline\Plugin\PipelineStepInterface $step */
+    /** @var PipelineStepInterface $step */
     $step = $this->stepPluginManager->createInstance($step_plugin_id, $this->getStepList()->offsetGet($step_plugin_id));
     return $step->setPipeline($this);
   }
@@ -119,13 +119,13 @@ abstract class PipelinePipelinePluginBase extends PluginBase implements Pipeline
   public function onSuccess() {
     // Ask each step if they want to take some action after pipeline execution.
     foreach ($this->getStepList() as $step_plugin_id => $step_plugin_config) {
-      /** @var \Drupal\pipeline\Plugin\PipelineStepInterface $step_plugin */
+      /** @var PipelineStepInterface $step_plugin */
       $step_plugin = $this->stepPluginManager->createInstance($step_plugin_id, $step_plugin_config);
       $step_plugin->onPipelineSuccess();
     }
 
     $event = new PipelineSuccessEvent($this);
-    $this->eventDispatcher->dispatch(PipelineSuccessEvent::class, $event);
+    $this->eventDispatcher->dispatch($event);
 
     // Reset the state manager.
     $this->stateManager->reset($this->getPluginId());
@@ -148,13 +148,13 @@ abstract class PipelinePipelinePluginBase extends PluginBase implements Pipeline
   public function onError() {
     // Ask each step if they want to take some action after pipeline error.
     foreach ($this->getStepList() as $step_plugin_id => $step_plugin_config) {
-      /** @var \Drupal\pipeline\Plugin\PipelineStepInterface $step_plugin */
+      /** @var PipelineStepInterface $step_plugin */
       $step_plugin = $this->stepPluginManager->createInstance($step_plugin_id, $step_plugin_config);
       $step_plugin->onPipelineError();
     }
 
     $event = new PipelineErrorEvent($this);
-    $this->eventDispatcher->dispatch(PipelineErrorEvent::class, $event);
+    $this->eventDispatcher->dispatch($event);
 
     // Reset the state manager.
     $this->stateManager->reset($this->getPluginId());
diff --git a/src/Plugin/PipelinePipelinePluginManager.php b/src/Plugin/PipelinePipelinePluginManager.php
index a0040c4..3c2fa2a 100644
--- a/src/Plugin/PipelinePipelinePluginManager.php
+++ b/src/Plugin/PipelinePipelinePluginManager.php
@@ -18,9 +18,9 @@ class PipelinePipelinePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/PipelineStepInterface.php b/src/Plugin/PipelineStepInterface.php
index 50c7b1e..709b5ce 100644
--- a/src/Plugin/PipelineStepInterface.php
+++ b/src/Plugin/PipelineStepInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\pipeline\Plugin;
 
+use Drupal\pipeline\Exception\PipelineStepExecutionLogicException;
+use Drupal\pipeline\Exception\PipelineStepPrepareLogicException;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 
 /**
@@ -12,7 +15,7 @@ interface PipelineStepInterface extends PluginInspectionInterface {
   /**
    * Executes the business logic of the pipeline step.
    *
-   * @throws \Drupal\pipeline\Exception\PipelineStepExecutionLogicException
+   * @throws PipelineStepExecutionLogicException
    *   By throwing this exception, the step notifies the pipeline orchestrator
    *   that it should exit the pipeline with an error, in this step. Method
    *   implementations should use PipelineStepLogicalException::setError() in
@@ -26,7 +29,7 @@ interface PipelineStepInterface extends PluginInspectionInterface {
   /**
    * Gives a chance to step plugins to perform some tasks just before executing.
    *
-   * @throws \Drupal\pipeline\Exception\PipelineStepPrepareLogicException
+   * @throws PipelineStepPrepareLogicException
    *   By throwing this exception, the step prepare method notifies the pipeline
    *   orchestrator that it should exit the pipeline with an error, in this
    *   step. Method implementations should pass the error markup to be displayed
@@ -39,7 +42,7 @@ interface PipelineStepInterface extends PluginInspectionInterface {
   /**
    * Sets the pipeline where this step is instantiated.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelineInterface $pipeline
+   * @param PipelinePipelineInterface $pipeline
    *   The pipeline plugin instance.
    *
    * @return $this
@@ -49,7 +52,7 @@ interface PipelineStepInterface extends PluginInspectionInterface {
   /**
    * Gets the pipeline where this step belongs.
    *
-   * @return \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @return PipelinePipelineInterface
    *   The pipeline plugin instance.
    */
   public function getPipeline();
@@ -139,7 +142,7 @@ interface PipelineStepInterface extends PluginInspectionInterface {
   /**
    * Returns the generic title to be used on pages.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The page title.
    */
   public function getPageTitle();
diff --git a/src/Plugin/PipelineStepPluginBase.php b/src/Plugin/PipelineStepPluginBase.php
index 3a4df1f..54946b4 100644
--- a/src/Plugin/PipelineStepPluginBase.php
+++ b/src/Plugin/PipelineStepPluginBase.php
@@ -17,7 +17,7 @@ abstract class PipelineStepPluginBase extends PluginBase implements PipelineStep
   /**
    * The parent pipeline.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @var PipelinePipelineInterface
    */
   protected $pipeline;
 
diff --git a/src/Plugin/PipelineStepPluginManager.php b/src/Plugin/PipelineStepPluginManager.php
index b3af601..81a6920 100644
--- a/src/Plugin/PipelineStepPluginManager.php
+++ b/src/Plugin/PipelineStepPluginManager.php
@@ -18,9 +18,9 @@ class PipelineStepPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/PipelineStepWithFormInterface.php b/src/Plugin/PipelineStepWithFormInterface.php
index aec7848..e69b755 100644
--- a/src/Plugin/PipelineStepWithFormInterface.php
+++ b/src/Plugin/PipelineStepWithFormInterface.php
@@ -32,7 +32,7 @@ interface PipelineStepWithFormInterface extends PluginFormInterface, PluginInspe
    * }
    * @endcode
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
diff --git a/src/Plugin/PipelineStepWithResponseInterface.php b/src/Plugin/PipelineStepWithResponseInterface.php
index d8ba574..eec86aa 100644
--- a/src/Plugin/PipelineStepWithResponseInterface.php
+++ b/src/Plugin/PipelineStepWithResponseInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pipeline\Plugin;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 /**
  * Provides an interface for pipeline steps returning a HTTP response.
  */
@@ -10,7 +11,7 @@ interface PipelineStepWithResponseInterface extends PipelineStepInterface {
   /**
    * Returns a response as a render array or a redirect.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   The response.
    */
   public function getResponse();
diff --git a/tests/src/Unit/PipelineOrchestratorTest.php b/tests/src/Unit/PipelineOrchestratorTest.php
index d6621cc..661bad4 100644
--- a/tests/src/Unit/PipelineOrchestratorTest.php
+++ b/tests/src/Unit/PipelineOrchestratorTest.php
@@ -7,6 +7,10 @@
 
 namespace Drupal\Tests\pipeline\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\pipeline\PipelineOrchestratorInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Form\FormBuilder;
 use Drupal\Core\Messenger\Messenger;
@@ -32,73 +36,74 @@ use Symfony\Component\HttpFoundation\RequestStack;
  */
 class PipelineOrchestratorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The data pipeline plugin manager.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelinePluginManager|\Prophecy\Prophecy\ObjectProphecy
+   * @var PipelinePipelinePluginManager|ObjectProphecy
    */
   protected $pipelinePluginManager;
 
   /**
    * The pipeline step plugin manager.
    *
-   * @var \Drupal\pipeline\Plugin\PipelineStepPluginManager|\Prophecy\Prophecy\ObjectProphecy
+   * @var PipelineStepPluginManager|ObjectProphecy
    */
   protected $stepPluginManager;
 
   /**
    * The state manager.
    *
-   * @var \Drupal\pipeline\PipelineStateManager|\Prophecy\Prophecy\ObjectProphecy
+   * @var PipelineStateManager|ObjectProphecy
    */
   protected $stateManager;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder|\Prophecy\Prophecy\ObjectProphecy
+   * @var FormBuilder|ObjectProphecy
    */
   protected $formBuilder;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger|\Prophecy\Prophecy\ObjectProphecy
+   * @var Messenger|ObjectProphecy
    */
   protected $messenger;
 
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var AccountProxyInterface|ObjectProphecy
    */
   protected $currentUser;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->pipelinePluginManager = $this->prophesize(PipelinePipelinePluginManager::class);
     $this->stepPluginManager = $this->prophesize(PipelineStepPluginManager::class);
@@ -168,7 +173,7 @@ class PipelineOrchestratorTest extends UnitTestCase {
   /**
    * Initializes a new orchestrator object.
    *
-   * @return \Drupal\pipeline\PipelineOrchestratorInterface
+   * @return PipelineOrchestratorInterface
    *   The new orchestrator object.
    */
   protected function createOrchestrator() {
