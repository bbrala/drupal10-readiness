modules/contrib/geofield/geofield.module
modules/contrib/geofield/geofield.views.inc
modules/contrib/geofield/src/Annotation/GeofieldBackend.php
modules/contrib/geofield/src/Annotation/GeofieldProximitySource.php
modules/contrib/geofield/src/DmsConverter.php
modules/contrib/geofield/src/DmsConverterInterface.php
modules/contrib/geofield/src/DmsPoint.php
modules/contrib/geofield/src/Element/GeofieldBounds.php
modules/contrib/geofield/src/Element/GeofieldDms.php
modules/contrib/geofield/src/Element/GeofieldElementBase.php
modules/contrib/geofield/src/Element/GeofieldLatLon.php
modules/contrib/geofield/src/Exception/HaversineUnavailableException.php
modules/contrib/geofield/src/Exception/InvalidPointException.php
modules/contrib/geofield/src/Exception/ProximityUnavailableException.php
modules/contrib/geofield/src/Feeds/Target/Geofield.php
modules/contrib/geofield/src/GeoPHP/GeoPHPInterface.php
modules/contrib/geofield/src/GeoPHP/GeoPHPWrapper.php
modules/contrib/geofield/src/Plugin/Field/FieldFormatter/GeofieldDefaultFormatter.php
modules/contrib/geofield/src/Plugin/Field/FieldFormatter/LatLonFormatter.php
modules/contrib/geofield/src/Plugin/Field/FieldType/GeofieldItem.php
modules/contrib/geofield/src/Plugin/Field/FieldWidget/GeofieldBaseWidget.php
modules/contrib/geofield/src/Plugin/Field/FieldWidget/GeofieldBoundsWidget.php
modules/contrib/geofield/src/Plugin/Field/FieldWidget/GeofieldDefaultWidget.php
modules/contrib/geofield/src/Plugin/Field/FieldWidget/GeofieldDmsWidget.php
modules/contrib/geofield/src/Plugin/Field/FieldWidget/GeofieldLatLonWidget.php
modules/contrib/geofield/src/Plugin/GeofieldBackend/GeofieldBackendDefault.php
modules/contrib/geofield/src/Plugin/GeofieldBackend/GeofieldBackendPostgis.php
modules/contrib/geofield/src/Plugin/GeofieldBackendBase.php
modules/contrib/geofield/src/Plugin/GeofieldBackendManager.php
modules/contrib/geofield/src/Plugin/GeofieldBackendPluginInterface.php
modules/contrib/geofield/src/Plugin/GeofieldProximitySource/ClientLocationOriginFilter.php
modules/contrib/geofield/src/Plugin/GeofieldProximitySource/ContextProximityFilter.php
modules/contrib/geofield/src/Plugin/GeofieldProximitySource/ManualOriginDefault.php
modules/contrib/geofield/src/Plugin/GeofieldProximitySource/OriginFromProximityFilter.php
modules/contrib/geofield/src/Plugin/GeofieldProximitySourceBase.php
modules/contrib/geofield/src/Plugin/GeofieldProximitySourceInterface.php
modules/contrib/geofield/src/Plugin/GeofieldProximitySourceManager.php
modules/contrib/geofield/src/Plugin/Validation/Constraint/GeoConstraint.php
modules/contrib/geofield/src/Plugin/Validation/Constraint/GeoConstraintValidator.php
modules/contrib/geofield/src/Plugin/diff/Field/GeofieldFieldBuilder.php
modules/contrib/geofield/src/Plugin/migrate/field/Geofield.php
modules/contrib/geofield/src/Plugin/migrate/process/GeoField.php
modules/contrib/geofield/src/Plugin/migrate/process/GeoFieldFieldSettings.php
modules/contrib/geofield/src/Plugin/migrate/process/GeofieldLatLon.php
modules/contrib/geofield/src/Plugin/migrate/process/GeofieldWKT.php
modules/contrib/geofield/src/Plugin/views/GeofieldBoundaryHandlerTrait.php
modules/contrib/geofield/src/Plugin/views/GeofieldProximityHandlerTrait.php
modules/contrib/geofield/src/Plugin/views/argument/GeofieldProximityArgument.php
modules/contrib/geofield/src/Plugin/views/argument/GeofieldRectBoundaryArgument.php
modules/contrib/geofield/src/Plugin/views/field/GeofieldProximityField.php
modules/contrib/geofield/src/Plugin/views/filter/GeofieldProximityFilter.php
modules/contrib/geofield/src/Plugin/views/filter/GeofieldRectBoundaryFilter.php
modules/contrib/geofield/src/Plugin/views/sort/GeofieldProximitySort.php
modules/contrib/geofield/src/WktGenerator.php
modules/contrib/geofield/src/WktGeneratorInterface.php
modules/contrib/geofield/tests/src/Functional/GeofieldWidgetTest.php
modules/contrib/geofield/tests/src/Kernel/ConstraintsTest.php
modules/contrib/geofield/tests/src/Kernel/GeofieldFormatterTest.php
modules/contrib/geofield/tests/src/Kernel/GeofieldItemTest.php
modules/contrib/geofield/tests/src/Kernel/WktGeneratorTest.php
modules/contrib/geofield/tests/src/Unit/DmsConverterTest.php

30 files with changes
=====================

1) modules/contrib/geofield/tests/src/Kernel/WktGeneratorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\geofield\Kernel;

+use Drupal\geofield\WktGenerator;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * WKT Generator service.
    *
-   * @var \Drupal\geofield\WktGenerator
+   * @var WktGenerator
    */
   public $wktGenerator;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->wktGenerator = \Drupal::service('geofield.wkt_generator');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/geofield/tests/src/Kernel/GeofieldItemTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Field storage entity.
    *
-   * @var \Drupal\field\Entity\FieldStorageConfig
+   * @var FieldStorageConfig
    */
   protected $fieldStorage;

@@ @@
   /**
    * Field entity.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $field;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('entity_test_rev');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/geofield/tests/src/Kernel/GeofieldFormatterTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     FieldStorageConfig::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/geofield/tests/src/Kernel/ConstraintsTest.php:33

    ---------- begin diff ----------
@@ @@
     $constraint = new GeoConstraint();
     $this->assertEquals('"@value" is not a valid geospatial content.', $constraint->message, 'Correct constraint message found.');

-    $execution_context = $this->getMockBuilder('\Drupal\Core\TypedData\Validation\ExecutionContext')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $execution_context = $this->createMock('\Drupal\Core\TypedData\Validation\ExecutionContext');

     if ($expected_violation_count) {
       $execution_context->expects($this->exactly($expected_violation_count))
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/geofield/tests/src/Functional/GeofieldWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\geofield\Functional;

+use Drupal\Tests\WebAssert;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * A field storage with cardinality 1 to use in this test class.
    *
-   * @var \Drupal\field\Entity\FieldStorageConfig
+   * @var FieldStorageConfig
    */
   protected $fieldStorage;

@@ @@
   /**
    * A Field to use in this test class.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $field;

@@ @@
   /**
    * The web assert object.
    *
-   * @var \Drupal\Tests\WebAssert
+   * @var WebAssert
    */
   protected $assertSession;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->fieldStorage = FieldStorageConfig::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/geofield/src/Plugin/views/sort/GeofieldProximitySort.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geofield\Plugin\views\sort;

+use Drupal\geofield\Plugin\GeofieldProximitySourceInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\sort\SortPluginBase;
 use Drupal\geofield\Plugin\views\GeofieldProximityHandlerTrait;
@@ @@
   /**
    * The geofield proximity manager.
    *
-   * @var \Drupal\geofield\Plugin\GeofieldProximitySourceManager
+   * @var GeofieldProximitySourceManager
    */
   protected $proximitySourceManager;

@@ @@
   /**
    * The Geofield Proximity Source Plugin.
    *
-   * @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface
+   * @var GeofieldProximitySourceInterface
    */
   protected $sourcePlugin;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\geofield\Plugin\GeofieldProximitySourceManager $proximity_source_manager
+   * @param GeofieldProximitySourceManager $proximity_source_manager
    *   The Geofield Proximity Source manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GeofieldProximitySourceManager $proximity_source_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/geofield/src/Plugin/views/filter/GeofieldProximityFilter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geofield\Plugin\views\filter;

+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\geofield\Plugin\GeofieldProximitySourceInterface;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\RendererInterface;
@@ @@
   /**
    * The Renderer service property.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $renderer;

@@ @@
   /**
    * The geofield proximity manager.
    *
-   * @var \Drupal\geofield\Plugin\GeofieldProximitySourceManager
+   * @var GeofieldProximitySourceManager
    */
   protected $proximitySourceManager;

@@ @@
   /**
    * The Geofield Proximity Source Plugin.
    *
-   * @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface
+   * @var GeofieldProximitySourceInterface
    */
   protected $sourcePlugin;

@@ @@
   /**
    * The current request.
    *
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   protected $request;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\geofield\Plugin\GeofieldProximitySourceManager $proximity_source_manager
+   * @param GeofieldProximitySourceManager $proximity_source_manager
    *   The Geofield Proximity Source manager service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(
@@ @@
     $lon_alias = $this->realField . '_lon';

     try {
-      /** @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface $source_plugin */
+      /** @var GeofieldProximitySourceInterface $source_plugin */
       $this->sourcePlugin = $this->proximitySourceManager->createInstance($this->options['source'], $this->options['source_configuration']);
       $this->sourcePlugin->setViewHandler($this);
       $this->sourcePlugin->setUnits($this->options['units']);
@@ @@
         $source_plugin_id = $this->options['source'];
         $source_plugin_configuration = isset($identifier) && isset($user_input[$identifier]['origin']) ? $user_input[$identifier] : $this->options['source_configuration'];

-        /** @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface $source_plugin */
+        /** @var GeofieldProximitySourceInterface $source_plugin */
         $this->sourcePlugin = $this->proximitySourceManager->createInstance($source_plugin_id, $source_plugin_configuration);
         $this->sourcePlugin->setViewHandler($this);
         $proximity_origin = $this->sourcePlugin->getOrigin();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/geofield/src/Plugin/views/field/GeofieldProximityField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geofield\Plugin\views\field;

+use Drupal\geofield\Plugin\GeofieldProximitySourceInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\geofield\Plugin\views\GeofieldProximityHandlerTrait;
 use Drupal\views\Plugin\views\field\NumericField;
@@ @@
   /**
    * The geofield proximity manager.
    *
-   * @var \Drupal\geofield\Plugin\GeofieldProximitySourceManager
+   * @var GeofieldProximitySourceManager
    */
   protected $proximitySourceManager;

@@ @@
   /**
    * The Geofield Proximity Source Plugin.
    *
-   * @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface
+   * @var GeofieldProximitySourceInterface
    */
   protected $sourcePlugin;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\geofield\Plugin\GeofieldProximitySourceManager $proximity_source_manager
+   * @param GeofieldProximitySourceManager $proximity_source_manager
    *   The Geofield Proximity Source manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GeofieldProximitySourceManager $proximity_source_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/geofield/src/Plugin/views/argument/GeofieldProximityArgument.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geofield\Plugin\views\argument;

+use Drupal\geofield\Plugin\GeofieldProximitySourceInterface;
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\geofield\WktGenerator;
 use Drupal\views\Plugin\views\argument\Formula;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The WktGenerator object.
    *
-   * @var \Drupal\geofield\WktGenerator
+   * @var WktGenerator
    */
   protected $wktGenerator;

@@ @@
   /**
    * The geofield proximity manager.
    *
-   * @var \Drupal\geofield\Plugin\GeofieldProximitySourceManager
+   * @var GeofieldProximitySourceManager
    */
   protected $proximitySourceManager;

@@ @@
   /**
    * The Geofield Proximity Source Plugin.
    *
-   * @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface
+   * @var GeofieldProximitySourceInterface
    */
   protected $sourcePlugin;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\geofield\WktGenerator $wkt_generator
+   * @param WktGenerator $wkt_generator
    *   The WktGenerator object.
-   * @param \Drupal\geofield\Plugin\GeofieldProximitySourceManager $proximity_source_manager
+   * @param GeofieldProximitySourceManager $proximity_source_manager
    *   The Geofield Proximity Source manager service.
    */
   public function __construct(
@@ @@
     $lon_alias = $this->realField . '_lon';

     try {
-      /** @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface $source_plugin */
+      /** @var GeofieldProximitySourceInterface $source_plugin */
       $values = $this->getParsedReferenceLocation();
       if (!empty($values)) {
         $source_configuration = [
@@ @@
   protected function operator($options, $distance, $operator) {

     if (!empty($distance) && is_numeric($distance)) {
-      /** @var \Drupal\views\Plugin\views\query\Sql $query */
+      /** @var Sql $query */
       $query = $this->query;
       $query->addWhereExpression(0, geofield_haversine($options) . ' ' . $operator . ' ' . $distance);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/geofield/src/Plugin/views/GeofieldProximityHandlerTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geofield\Plugin\views;

+use Drupal\views\Plugin\views\query\Sql;
+use Drupal\geofield\Plugin\GeofieldProximitySourceInterface;
 /**
  * Trait class for Geofield Proximity View Handlers.
  */
@@ @@
     $this->ensureMyTable();
     $lat_alias = $this->realField . '_lat';
     $lon_alias = $this->realField . '_lon';
-    /** @var \Drupal\views\Plugin\views\query\Sql $query */
+    /** @var Sql $query */
     $query = $this->query;

     try {
-      /** @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface $source_plugin */
+      /** @var GeofieldProximitySourceInterface $source_plugin */
       $source_plugin = $this->proximitySourceManager->createInstance($this->options['source'], $this->options['source_configuration']);
       $source_plugin->setViewHandler($this);
       $source_plugin->setUnits($this->options['units']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/geofield/src/Plugin/migrate/process/GeofieldWKT.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The WktGenerator service.
    *
-   * @var \Drupal\geofield\WktGeneratorInterface
+   * @var WktGeneratorInterface
    */
   protected $wktGenerator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/geofield/src/Plugin/migrate/process/GeofieldLatLon.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The WktGenerator service.
    *
-   * @var \Drupal\geofield\WktGeneratorInterface
+   * @var WktGeneratorInterface
    */
   protected $wktGenerator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/geofield/src/Plugin/migrate/process/GeoField.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The geoPhpWrapper service.
    *
-   * @var \Drupal\geofield\GeoPHP\GeoPHPInterface
+   * @var GeoPHPInterface
    */
   protected $geoPhpWrapper;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/geofield/src/Plugin/Validation/Constraint/GeoConstraintValidator.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The geoPhpWrapper service.
    *
-   * @var \Drupal\geofield\GeoPHP\GeoPHPInterface
+   * @var GeoPHPInterface
    */
   protected $geoPhpWrapper;

@@ @@
   /**
    * Constructs a new GeoConstraintValidator object.
    *
-   * @param \Drupal\geofield\GeoPHP\GeoPHPInterface $geophp_wrapper
+   * @param GeoPHPInterface $geophp_wrapper
    *   The geoPhpWrapper.
    */
   public function __construct(GeoPHPInterface $geophp_wrapper) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/geofield/src/Plugin/GeofieldProximitySourceManager.php:31

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $context
    *   The array list of the specific view handler plugin type to look for.
@@ @@
    *
    * @param array $form
    *   The build form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response with updated form element.
    */
   public static function sourceUpdate(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/geofield/src/Plugin/GeofieldProximitySourceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geofield\Plugin;

+use Drupal\geofield\Exception\InvalidPointException;
+use Drupal\geofield\Exception\ProximityUnavailableException;
+use Drupal\geofield\Exception\HaversineUnavailableException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\HandlerBase;
@@ @@
    *
    * @param array $form
    *   The form element to build.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $options_parents
    *   The values parents.
@@ @@
    *
    * @param array $form
    *   The form element to build.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $options_parents
    *   The values parents.
@@ @@
   /**
    * Sets view handler which uses this proximity plugin.
    *
-   * @param \Drupal\views\Plugin\views\HandlerBase $view_handler
+   * @param HandlerBase $view_handler
    *   The view handler which uses this proximity plugin.
    */
   public function setViewHandler(HandlerBase $view_handler);

   /**
-   * Get the calculated proximity.
-   *
-   * @param float $lat
-   *   The current point latitude.
-   * @param float $lon
-   *   The current point longitude.
-   *
-   * @return float
-   *   The calculated proximity.
-   *
-   * @throws \Drupal\geofield\Exception\InvalidPointException;
-   *   If the proximity cannot be created, due to incorrect point coordinates
-   *   definition.
-   *
-   * @throws \Drupal\geofield\Exception\ProximityUnavailableException;
-   *   If any other case the proximity value cannot be created correctly.
-   */
+  * Get the calculated proximity.
+  *
+  * @param float $lat
+  *   The current point latitude.
+  * @param float $lon
+  *   The current point longitude.
+  *
+  * @return float
+  *   The calculated proximity.
+  *
+   * @throws InvalidPointException ;
+    If the proximity cannot be created, due to incorrect point coordinates
+    definition.
+  *
+   * @throws ProximityUnavailableException ;
+    If any other case the proximity value cannot be created correctly.
+  */
   public function getProximity($lat, $lon);

   /**
-   * Gets the haversine options.
-   *
-   * @return array
-   *   The haversine options.
-   *
-   * @throws \Drupal\geofield\Exception\HaversineUnavailableException;
-   *   If the haversine is unavailable, due to incorrect setup definitions.
-   */
+  * Gets the haversine options.
+  *
+  * @return array
+  *   The haversine options.
+  *
+   * @throws HaversineUnavailableException ;
+    If the haversine is unavailable, due to incorrect setup definitions.
+  */
   public function getHaversineOptions();

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/geofield/src/Plugin/GeofieldProximitySourceBase.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The view handler which uses this proximity plugin.
    *
-   * @var \Drupal\views\Plugin\views\HandlerBase
+   * @var HandlerBase
    */
   protected $viewHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/geofield/src/Plugin/GeofieldProximitySource/OriginFromProximityFilter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geofield\Plugin\GeofieldProximitySource;

+use Drupal\views\Plugin\views\filter\FilterPluginBase;
+use Drupal\geofield\Plugin\views\filter\GeofieldProximityFilter;
+use Drupal\geofield\Plugin\GeofieldProximitySourceInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   /**
    * The geofield proximity manager.
    *
-   * @var \Drupal\geofield\Plugin\GeofieldProximitySourceManager
+   * @var GeofieldProximitySourceManager
    */
   protected $proximitySourceManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\geofield\Plugin\GeofieldProximitySourceManager $proximitySourceManager
+   * @param GeofieldProximitySourceManager $proximitySourceManager
    *   The Geofield Proximity Source manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GeofieldProximitySourceManager $proximitySourceManager) {
@@ @@
   protected function getAvailableProximityFilters() {
     $proximity_filters = [];

-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     foreach ($this->viewHandler->displayHandler->getHandlers('filter') as $delta => $filter) {
       if ($filter->pluginId === 'geofield_proximity_filter') {
         $proximity_filters[$delta] = $filter->adminLabel();
@@ @@
    *
    * @param array $form
    *   The build form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response with updated form element.
    */
   public static function sourceProximityFilterUpdate(array $form, FormStateInterface $form_state) {
@@ @@
       && is_a($this->viewHandler->view->filter[$this->viewHandler->options['source_configuration']['source_proximity_filter']], '\Drupal\geofield\Plugin\views\filter\GeofieldProximityFilter')
       && $source_proximity_filter = $this->viewHandler->options['source_configuration']['source_proximity_filter']
     ) {
-      /** @var \Drupal\geofield\Plugin\views\filter\GeofieldProximityFilter $geofield_proximity_filter */
+      /** @var GeofieldProximityFilter $geofield_proximity_filter */
       $geofield_proximity_filter = $this->viewHandler->view->filter[$source_proximity_filter];

       $source_plugin_id = $geofield_proximity_filter->options['source'];
@@ @@

       try {

-        /** @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface $source_plugin */
+        /** @var GeofieldProximitySourceInterface $source_plugin */
         $source_plugin = $this->proximitySourceManager->createInstance($source_plugin_id, $source_plugin_configuration);
         $source_plugin->setViewHandler($geofield_proximity_filter);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/geofield/src/Plugin/GeofieldProximitySource/ContextProximityFilter.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The geofield proximity manager.
    *
-   * @var \Drupal\geofield\Plugin\GeofieldProximitySourceManager
+   * @var GeofieldProximitySourceManager
    */
   protected $proximitySourceManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\geofield\Plugin\GeofieldProximitySourceManager $proximitySourceManager
+   * @param GeofieldProximitySourceManager $proximitySourceManager
    *   The Geofield Proximity Source manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GeofieldProximitySourceManager $proximitySourceManager) {
@@ @@
   public function getOrigin() {
     $origin = [];
     if (isset($this->viewHandler)) {
-      /** @var \Drupal\geofield\Plugin\views\argument\GeofieldProximityArgument $geofield_proximity_argument */
+      /** @var GeofieldProximityArgument $geofield_proximity_argument */
       $geofield_proximity_argument = $this->viewHandler->view->argument;
       foreach ($this->viewHandler->view->argument as $argument) {
         if ($argument instanceof GeofieldProximityArgument) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/geofield/src/Plugin/GeofieldBackendManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/geofield/src/Plugin/GeofieldBackendBase.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The geoPhpWrapper service.
    *
-   * @var \Drupal\geofield\GeoPHP\GeoPHPInterface
+   * @var GeoPHPInterface
    */
   protected $geoPhpWrapper;

@@ @@
    *   The plugin ID for the migration process to do.
    * @param mixed $plugin_definition
    *   The configuration for the plugin.
-   * @param \Drupal\geofield\GeoPHP\GeoPHPInterface $geophp_wrapper
+   * @param GeoPHPInterface $geophp_wrapper
    *   The geoPhpWrapper.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/geofield/src/Plugin/Field/FieldWidget/GeofieldBaseWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geofield\Plugin\Field\FieldWidget;

+use Drupal\geofield\Plugin\GeofieldBackendPluginInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\WidgetBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The Geofield Backend setup for the specific Field definition.
    *
-   * @var \Drupal\geofield\Plugin\GeofieldBackendPluginInterface|null
+   * @var GeofieldBackendPluginInterface|null
    */
   protected $geofieldBackend = NULL;

@@ @@
   /**
    * The geoPhpWrapper service.
    *
-   * @var \Drupal\geofield\GeoPHP\GeoPHPInterface
+   * @var GeoPHPInterface
    */
   protected $geoPhpWrapper;

@@ @@
   /**
    * The WKT format Generator service.
    *
-   * @var \Drupal\geofield\WktGeneratorInterface
+   * @var WktGeneratorInterface
    */
   protected $wktGenerator;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\geofield\GeoPHP\GeoPHPInterface $geophp_wrapper
+   * @param GeoPHPInterface $geophp_wrapper
    *   The geoPhpWrapper.
-   * @param \Drupal\geofield\WktGeneratorInterface $wkt_generator
+   * @param WktGeneratorInterface $wkt_generator
    *   The WKT format Generator service.
-   * @param \Drupal\geofield\Plugin\GeofieldBackendManager $geofield_backend_manager
+   * @param GeofieldBackendManager $geofield_backend_manager
    *   The geofieldBackendManager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/geofield/src/Plugin/Field/FieldFormatter/GeofieldDefaultFormatter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The geoPhpWrapper service.
    *
-   * @var \Drupal\geofield\GeoPHP\GeoPHPInterface
+   * @var GeoPHPInterface
    */
   protected $geoPhpWrapper;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\geofield\GeoPHP\GeoPHPInterface $geophp_wrapper
+   * @param GeoPHPInterface $geophp_wrapper
    *   The The geoPhpWrapper.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/geofield/src/Element/GeofieldLatLon.php:50

    ---------- begin diff ----------
@@ @@
    *   An associative array containing the properties and children of the
    *   element. Note that $element must be taken by reference here, so processed
    *   child elements are taken over into $form_state.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/geofield/src/Element/GeofieldElementBase.php:26

    ---------- begin diff ----------
@@ @@
    *   An associative array containing the properties and children of the
    *   element. Note that $element must be taken by reference here, so processed
    *   child elements are taken over into $form_state.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
    *
    * @param array $element
    *   The element being processed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/geofield/src/Element/GeofieldDms.php:36

    ---------- begin diff ----------
@@ @@
    *   An associative array containing the properties and children of the
    *   element. Note that $element must be taken by reference here, so processed
    *   child elements are taken over into $form_state.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
    *
    * @param array $element
    *   The element being processed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/geofield/src/Element/GeofieldBounds.php:57

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The element being processed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/geofield/src/DmsConverterInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Transforms a DMS point to a decimal one.
    *
-   * @param \Drupal\geofield\DmsPoint $point
+   * @param DmsPoint $point
    *   The DMS Point to transform.
    *
    * @return array
@@ @@
    * @param float $lat
    *   The Decimal Point to transform latitude.
    *
-   * @return \Drupal\geofield\DmsPoint
+   * @return DmsPoint
    *   The equivalent DMS Point object.
    */
   public static function decimalToDms($lon, $lat);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/geofield/src/Annotation/GeofieldProximitySource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geofield\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A short description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A description to show in the exposed form.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *   (optional)
    *
    * @ingroup plugin_translatable
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


30) modules/contrib/geofield/src/Annotation/GeofieldBackend.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geofield\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The administrative label of the geofield backend.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the geofield backend.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [ERROR] Could not process                                                      
         "modules/contrib/geofield/src/Plugin/diff/Field/GeofieldFieldBuilder.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\diff\Plugin\diff\Field\CoreFieldBuilder not
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/geofield/src/Plugin/Field/FieldFormatter/LatLonFormatter
         .php" file, due to:                                                    
         "Analyze error: "Class Geometry was not found while trying to analyse it
         - discovering symbols is probably not configured properly.". Include your
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/geofield/src/Feeds/Target/Geofield.php" file, due to: 
         "Analyze error: "Class Drupal\feeds\Plugin\Type\Target\FieldTargetBase 
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

