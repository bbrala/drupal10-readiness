modules/contrib/entity_browser/entity_browser.api.php
modules/contrib/entity_browser/entity_browser.install
modules/contrib/entity_browser/entity_browser.module
modules/contrib/entity_browser/entity_browser.views.inc
modules/contrib/entity_browser/modules/entity_form/entity_browser_entity_form.module
modules/contrib/entity_browser/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php
modules/contrib/entity_browser/modules/entity_form/tests/src/FunctionalJavascript/EntityFormWidgetTest.php
modules/contrib/entity_browser/modules/entity_form/tests/src/FunctionalJavascript/InlineEntityIntegrationTest.php
modules/contrib/entity_browser/modules/example/tests/src/FunctionalJavascript/EntityBrowserExampleTest.php
modules/contrib/entity_browser/src/Ajax/SelectEntitiesCommand.php
modules/contrib/entity_browser/src/Ajax/ValueUpdatedCommand.php
modules/contrib/entity_browser/src/Annotation/EntityBrowserDisplay.php
modules/contrib/entity_browser/src/Annotation/EntityBrowserFieldWidgetDisplay.php
modules/contrib/entity_browser/src/Annotation/EntityBrowserSelectionDisplay.php
modules/contrib/entity_browser/src/Annotation/EntityBrowserWidget.php
modules/contrib/entity_browser/src/Annotation/EntityBrowserWidgetSelector.php
modules/contrib/entity_browser/src/Annotation/EntityBrowserWidgetValidation.php
modules/contrib/entity_browser/src/Controllers/EntityBrowserController.php
modules/contrib/entity_browser/src/Controllers/EntityBrowserFormController.php
modules/contrib/entity_browser/src/Controllers/EntityBrowserListBuilder.php
modules/contrib/entity_browser/src/DisplayAjaxInterface.php
modules/contrib/entity_browser/src/DisplayBase.php
modules/contrib/entity_browser/src/DisplayInterface.php
modules/contrib/entity_browser/src/DisplayManager.php
modules/contrib/entity_browser/src/DisplayRouterInterface.php
modules/contrib/entity_browser/src/Element/EntityBrowserElement.php
modules/contrib/entity_browser/src/Element/EntityBrowserPagerElement.php
modules/contrib/entity_browser/src/Entity/EntityBrowser.php
modules/contrib/entity_browser/src/EntityBrowserFormInterface.php
modules/contrib/entity_browser/src/EntityBrowserInterface.php
modules/contrib/entity_browser/src/Events/AlterEntityBrowserDisplayData.php
modules/contrib/entity_browser/src/Events/EntitySelectionEvent.php
modules/contrib/entity_browser/src/Events/EventBase.php
modules/contrib/entity_browser/src/Events/Events.php
modules/contrib/entity_browser/src/Events/RegisterJSCallbacks.php
modules/contrib/entity_browser/src/Events/SelectionDoneEvent.php
modules/contrib/entity_browser/src/FieldWidgetDisplayBase.php
modules/contrib/entity_browser/src/FieldWidgetDisplayInterface.php
modules/contrib/entity_browser/src/FieldWidgetDisplayManager.php
modules/contrib/entity_browser/src/Form/EntityBrowserDeleteForm.php
modules/contrib/entity_browser/src/Form/EntityBrowserEditForm.php
modules/contrib/entity_browser/src/Form/EntityBrowserForm.php
modules/contrib/entity_browser/src/Form/WidgetsConfig.php
modules/contrib/entity_browser/src/Permissions.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/Display/IFrame.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/Display/Modal.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/Display/Standalone.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/FieldWidgetDisplay/EntityLabel.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/FieldWidgetDisplay/ImageThumbnail.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/FieldWidgetDisplay/RenderedEntity.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/SelectionDisplay/MultiStepDisplay.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/SelectionDisplay/NoDisplay.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/SelectionDisplay/View.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/Widget/MediaImageUpload.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/Widget/Upload.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/Widget/View.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetSelector/DropDown.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetSelector/Single.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetSelector/Tabs.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetValidation/Cardinality.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetValidation/EntityType.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetValidation/File.php
modules/contrib/entity_browser/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
modules/contrib/entity_browser/src/Plugin/Field/FieldWidget/FileBrowserWidget.php
modules/contrib/entity_browser/src/Plugin/views/argument_default/EntityBrowserWidgetContext.php
modules/contrib/entity_browser/src/Plugin/views/display/EntityBrowser.php
modules/contrib/entity_browser/src/Plugin/views/field/SearchApiSelectForm.php
modules/contrib/entity_browser/src/Plugin/views/field/SelectForm.php
modules/contrib/entity_browser/src/Plugin/views/filter/ContextualBundle.php
modules/contrib/entity_browser/src/PluginConfigurationFormTrait.php
modules/contrib/entity_browser/src/RouteSubscriber.php
modules/contrib/entity_browser/src/SelectionDisplayBase.php
modules/contrib/entity_browser/src/SelectionDisplayInterface.php
modules/contrib/entity_browser/src/SelectionDisplayManager.php
modules/contrib/entity_browser/src/WidgetBase.php
modules/contrib/entity_browser/src/WidgetInterface.php
modules/contrib/entity_browser/src/WidgetManager.php
modules/contrib/entity_browser/src/WidgetSelectorBase.php
modules/contrib/entity_browser/src/WidgetSelectorInterface.php
modules/contrib/entity_browser/src/WidgetSelectorManager.php
modules/contrib/entity_browser/src/WidgetValidationBase.php
modules/contrib/entity_browser/src/WidgetValidationInterface.php
modules/contrib/entity_browser/src/WidgetValidationManager.php
modules/contrib/entity_browser/src/WidgetsCollection.php
modules/contrib/entity_browser/src/WidgetsLazyPluginCollection.php
modules/contrib/entity_browser/tests/fixtures/update/entity_browser.update-hook-test.php
modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Cache/Context/DummyCacheContext.php
modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Form/FormElementTest.php
modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/DummyWidget.php
modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/MultipleSubmitTestWidget.php
modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/PagerTestWidget.php
modules/contrib/entity_browser/tests/src/Functional/ConfigAccessTest.php
modules/contrib/entity_browser/tests/src/Functional/EntityBrowserUITest.php
modules/contrib/entity_browser/tests/src/Functional/EntityBrowserUpdateHookTest.php
modules/contrib/entity_browser/tests/src/Functional/FormElementTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/CardinalityTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/ConfigurationTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityBrowserTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityBrowserViewsWidgetTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityBrowserWebDriverTestBase.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityEmbedTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityQueueTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/FieldWidgetConfigTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/ImageFieldTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/InlineEntityFormTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/MultiStepSelectionDisplayTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/PagerElementTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/ParagraphsTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/PluginsTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/UploadWidgetTest.php
modules/contrib/entity_browser/tests/src/Kernel/Extension/EntityBrowserTest.php
modules/contrib/entity_browser/tests/src/Kernel/Plugin/FieldWidgetDisplayTest.php

84 files with changes
=====================

1) modules/contrib/entity_browser/tests/src/Kernel/Plugin/FieldWidgetDisplayTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\Kernel\Plugin;

+use Drupal\entity_browser\FieldWidgetDisplayManager;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * Field widget display plugin manager.
    *
-   * @var \Drupal\entity_browser\FieldWidgetDisplayManager
+   * @var FieldWidgetDisplayManager
    */
   protected $pluginManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->pluginManager = $this->container->get('plugin.manager.entity_browser.field_widget_display');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_browser/tests/src/Kernel/Extension/EntityBrowserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\Kernel\Extension;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Routing\RouteProviderInterface;
+use Drupal\entity_browser\EntityBrowserFormInterface;
+use Drupal\user\UserInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\user\RoleInterface;
 use Drupal\Component\FileCache\FileCacheFactory;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
@@ @@
   /**
    * The entity browser storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $controller;

@@ @@
   /**
    * Route provider service.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     FileCacheFactory::setPrefix($this->randomString(4));
     parent::setUp();

@@ @@
    * Tests the loading of entity browser.
    */
   protected function loadTests() {
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test_browser');

     $this->assertTrue($entity instanceof EntityBrowserInterface, 'The loaded entity is an entity browser.');
@@ @@
     $this->installConfig(['entity_browser_test']);
     $this->container->get('router.builder')->rebuild();

-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test');
     $route = $entity->route();

@@ @@
     $this->installConfig(['entity_browser_test']);
     $permissions = $this->container->get('user.permissions')->getPermissions();

-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test');

     $expected_permission_name = 'access ' . $entity->id() . ' entity browser pages';
@@ @@
   public function testDefaultWidget() {
     $this->installConfig(['entity_browser_test']);

-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test');

-    /** @var \Drupal\entity_browser\EntityBrowserFormInterface $form_object */
+    /** @var EntityBrowserFormInterface $form_object */
     $form_object = $entity->getFormObject();
     $form_object->setEntityBrowser($entity);
     $form_state = new FormState();
@@ @@
   public function testSelectedEvent() {
     $this->installConfig(['entity_browser_test']);

-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('dummy_widget');

-    /** @var \Drupal\entity_browser\EntityBrowserFormInterface $form_object */
+    /** @var EntityBrowserFormInterface $form_object */
     $form_object = $entity->getFormObject();
     $form_object->setEntityBrowser($entity);

@@ @@
     $this->installConfig(['entity_browser_test']);
     $this->installEntitySchema('user');

-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test');

-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->container->get('entity_type.manager')
       ->getStorage('user')
       ->create([
@@ @@
       ]);
     $user->save();

-    /** @var \Symfony\Component\HttpFoundation\Request $request */
+    /** @var Request $request */
     $uuid = $this->container->get('uuid')->generate();
     $this->container->get('request_stack')
       ->getCurrentRequest()
@@ @@
       ->set('uuid', $uuid);
     $this->container->get('entity_browser.selection_storage')->setWithExpire($uuid, ['selected_entities' => [$user]], 21600);

-    /** @var \Drupal\entity_browser\EntityBrowserFormInterface $form_object */
+    /** @var EntityBrowserFormInterface $form_object */
     $form_object = $entity->getFormObject();
     $form_object->setEntityBrowser($entity);
     $form_state = new FormState();
@@ @@
     $this->installConfig(['entity_browser_test']);
     $this->installEntitySchema('user');

-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test');

-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->container->get('entity_type.manager')
       ->getStorage('user')
       ->create([
@@ @@
       ]);
     $user->save();

-    /** @var \Symfony\Component\HttpFoundation\Request $request */
+    /** @var Request $request */
     $uuid = $this->container->get('uuid')->generate();
     $this->container->get('request_stack')
       ->getCurrentRequest()
@@ @@
     ];
     $this->container->get('entity_browser.selection_storage')->setWithExpire($uuid, $storage, 21600);

-    /** @var \Drupal\entity_browser\EntityBrowserFormInterface $form_object */
+    /** @var EntityBrowserFormInterface $form_object */
     $form_object = $entity->getFormObject();
     $form_object->setEntityBrowser($entity);
     $form_state = new FormState();
@@ @@
     $this->installEntitySchema('user');
     $this->installEntitySchema('user_role');

-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity */
+    /** @var EntityBrowserInterface $entity */
     $entity = $this->controller->load('test_entity_browser_file');

     $this->assertFalse($entity->getWidget('774798f1-5ec5-4b63-84bd-124cd51ec07d')->access()->isAllowed());

     // Create a user that has permission to access the view and try with it.
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = $this->container->get('entity_type.manager')
       ->getStorage('user_role')
       ->create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_browser/tests/src/FunctionalJavascript/UploadWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\user\RoleInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\user\Entity\Role;

 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Grant permission to this user to use also the EB page we are testing.
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load('authenticated');
     $this->grantPermissions($role, ['access test_entity_browser_standalone_upload entity browser pages']);

@@ @@
    */
   public function testUploadWidget() {

-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_standalone_upload');
@@ @@
     $page = $this->getSession()->getPage();

     // Make sure the test file is not present beforehand.
-    $this->assertFileNotExists('public://druplicon.png');
+    $this->assertFileDoesNotExist('public://druplicon.png');

     // Go to the widget standalone page and test the upload.
     $this->drupalGet($browser->getDisplay()->path());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_browser/tests/src/FunctionalJavascript/PluginsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\views\Entity\View;
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\Sql\SqlContentEntityStorageException;

 /**
@@ @@
     // DropDown widget selector does not work with exposed view filter. This is
     // a known bug and we need to remove exposed filters from the view until
     // that is fixed.
-    /** @var \Drupal\views\Entity\View $view */
+    /** @var View $view */
     $view = $this->container->get('entity_type.manager')->getStorage('view')->load('files_entity_browser');
     $display = &$view->getDisplay('default');
     $display['display_options']['filters'] = [];
@@ @@
   /**
    * Get the most recently uploaded file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   File entity.
    *
-   * @throws \Drupal\Core\Entity\Sql\SqlContentEntityStorageException
+   * @throws SqlContentEntityStorageException
    *   Thrown if no results from query.
    */
   protected function getLastUploadedFile() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_browser/tests/src/FunctionalJavascript/PagerElementTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'foo', 'name' => 'Foo']);
@@ @@
       'settings' => [],
     ])->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.foo.default');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_browser/tests/src/FunctionalJavascript/MultiStepSelectionDisplayTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Component\Utility\NestedArray;

 /**
@@ @@
    *   Configuration that will be used for field form display.
    */
   protected function changeFieldFormDisplayConfig(array $configuration) {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_browser/tests/src/FunctionalJavascript/InlineEntityFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\FunctionalJavascriptTests\SortableTestTrait;

 /**
@@ @@
     $this->assertSession()->pageTextContains('Leia');
     $this->assertSession()->pageTextNotContains('Darth');

-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.ief_content.field_nodes');
@@ @@
     $this->assertSession()->pageTextContains('Leia');
     $this->assertSession()->pageTextNotContains('Darth');

-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.ief_content.field_nodes');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_browser/tests/src/FunctionalJavascript/ImageFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * Created file entity.
    *
-   * @var \Drupal\file\Entity\File
+   * @var File
    */
   protected $image;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     FieldStorageConfig::create([
@@ @@
     // this file on node save.
     \Drupal::service('file.usage')->add($this->image, 'entity_browser', 'test', '1');

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ @@
       'height' => '500',
       'link_text' => 'Select images',
     ];
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_iframe_view');
@@ @@
     $this->waitForAjaxToFinish();
     $entity_id = $this->getSession()->evaluateScript('jQuery("#edit-field-image-wrapper [data-entity-id]").data("entity-id")');
     $this->assertStringStartsWith('file:', $entity_id);
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $fid = explode(':', $entity_id)[1];
     $file = File::load($fid);
     $this->assertStringContainsString('entity-browser-test', $file->getFileUri());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_browser/tests/src/FunctionalJavascript/FieldWidgetConfigTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('local_actions_block');
@@ @@
     ]);
     $field->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\user\RoleInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load('authenticated');
     $this->grantPermissions($role, [
       'access test_entity_browser_iframe_node_view entity browser pages',
@@ @@
     ]);
     $field->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ @@
     ])->save();
     // In order to ensure the replace button opens the browser, it needs to be
     // closed.
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_iframe_node_view');
@@ @@

     // Verify that if the user cannot edit the entity, the "Edit" button does
     // not show up, even if configured to.
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load('authenticated');
     $role->revokePermission('bypass node access')->trustData()->save();
     $this->drupalGet('node/add/article');
@@ @@
     $field2 = FieldConfig::create($field2_config);
     $field2->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityQueueTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\entityqueue\Entity\EntitySubqueue;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityEmbedTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

 /**
@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityBrowserWebDriverTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\file\FileInterface;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\file\Entity\File;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     FieldStorageConfig::create([
@@ @@
       'settings' => [],
     ])->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ @@
    * @param array $widget_configurations
    *   Widget configurations. Have be provided with widget UUIDs.
    *
-   * @return \Drupal\entity_browser\EntityBrowserInterface
+   * @return EntityBrowserInterface
    *   Returns an Entity Browser.
    */
   protected function getEntityBrowser($browser_name, $display_id, $widget_selector_id, $selection_display_id, array $display_configuration = [], array $widget_selector_configuration = [], array $selection_display_configuration = [], array $widget_configurations = []) {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser');

-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $storage->load($browser_name) ?: $storage->create(['name' => $browser_name]);

     $browser->setDisplay($display_id);
@@ @@
    * @param string $extension
    *   File extension.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   Returns an image.
    */
   protected function createFile($name, $extension = 'jpg') {
@@ @@
   /**
    * Drag element in document with defined offset position.
    *
-   * @param \Behat\Mink\Element\NodeElement $element
+   * @param NodeElement $element
    *   Element that will be dragged.
    * @param int $offsetX
    *   Vertical offset for element drag in pixels.
@@ @@
    * @param string $value
    *   The string value of the radio element.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The radio input form element.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function assertRadioExistsByValue($value) {
     $value = (string) $value;
@@ @@
    * @param string $value
    *   The string value of the radio element.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The radio input form element.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function assertRadioNotExistsByValue($value) {
     $value = (string) $value;
@@ @@
    * @param string $value
    *   The string value of the radio element.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The radio input form element.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function assertCheckboxExistsByValue($value) {
     $value = (string) $value;
@@ @@
    * @param string $value
    *   The string value of the radio element.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The radio input form element.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function assertCheckboxNotExistsByValue($value) {
     $value = (string) $value;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityBrowserViewsWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\file\FileInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\file\Entity\File;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $user = $this->drupalCreateUser([
@@ @@
   public function testViewsWidget() {
     // Create a file so that our test View isn't empty.
     \Drupal::service('file_system')->copy(\Drupal::root() . '/core/misc/druplicon.png', 'public://example.jpg');
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = File::create([
       'uri' => 'public://example.jpg',
     ]);
@@ @@

     // Create another file to test bulk select form.
     \Drupal::service('file_system')->copy(\Drupal::root() . '/core/misc/druplicon.png', 'public://example_1.jpg');
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $new_file = File::create([
       'uri' => 'public://example_1.jpg',
     ]);
@@ @@
     ]);
     $field->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityBrowserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\entity_browser\EntityBrowserInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Field\FieldConfigInterface;
 /**
  * Tests the entity_browser.
  *
@@ @@
   public function testSingleWidgetSelector() {

     // Sets the single widget selector.
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_file');
@@ @@
   public function testTabsWidgetSelector() {

     // Sets the tabs widget selector.
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_file')
@@ @@
   public function testDropdownWidgetSelector() {

     // Sets the dropdown widget selector.
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_file')
@@ @@
   public function testViewsSelectionDisplayWidget() {

     // Sets the dropdown widget selector.
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('test_entity_browser_file')
@@ @@
    * Tests NoDisplay selection display plugin.
    */
   public function testNoDisplaySelectionDisplay() {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ @@
     $this->createNode(['type' => 'jet', 'title' => 'Leia']);
     $this->createNode(['type' => 'article', 'title' => 'Darth']);

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ @@
       ],
     ])->save();

-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.article.field_reference');
@@ @@
     $this->assertSession()->pageTextContains('Leia');
     $this->assertSession()->pageTextNotContains('Darth');

-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.article.field_reference');
@@ @@
     $this->createNode(['type' => 'jet', 'title' => 'Leia']);
     $this->createNode(['type' => 'article', 'title' => 'Darth']);

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ @@
       ],
     ])->save();

-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.article.field_reference');
@@ @@
     $this->assertSession()->pageTextContains('Leia');
     $this->assertSession()->pageTextNotContains('Darth');

-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.article.field_reference');
@@ @@
     $this->createNode(['type' => 'jet', 'title' => 'Leia']);
     $this->createNode(['type' => 'article', 'title' => 'Darth']);

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ @@
       ],
     ])->save();

-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.article.field_reference');
@@ @@
     $this->assertSession()->pageTextContains('Leia');
     $this->assertSession()->pageTextNotContains('Darth');

-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
       ->load('node.article.field_reference');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/entity_browser/tests/src/FunctionalJavascript/ConfigurationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('local_actions_block');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity_browser/tests/src/FunctionalJavascript/CardinalityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\FunctionalJavascript;

+use Drupal\user\RoleInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load('authenticated');
     $this->grantPermissions($role, [
       'access cardinality entity browser pages',
@@ @@
     ]);
     $field->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ @@
    */
   public function testInlineEntityForm() {

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.ief_content.default');
@@ @@
   /**
    * Helper function for repetitive task.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function openIframe() {
     $open_iframe_link = $this->assertSession()
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/entity_browser/tests/src/Functional/FormElementTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\Functional;

+use Drupal\node\NodeInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * Test nodes.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $nodes;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->container
       ->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/entity_browser/tests/src/Functional/EntityBrowserUpdateHookTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $entity_browser_type = $this->container
       ->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/entity_browser/tests/src/Functional/ConfigAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('local_actions_block');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/PagerTestWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser_test\Plugin\EntityBrowser\Widget;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_browser\Element\EntityBrowserPagerElement;
 use Drupal\entity_browser\WidgetBase;
@@ @@
   /**
    * Entity to be returned.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/MultipleSubmitTestWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser_test\Plugin\EntityBrowser\Widget;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_browser\WidgetBase;

@@ @@
   /**
    * Entity to be returned.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/DummyWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser_test\Plugin\EntityBrowser\Widget;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_browser\WidgetBase;
@@ @@
   /**
    * Entity to be returned.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/entity_browser/src/WidgetValidationManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/entity_browser/src/WidgetValidationInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser;

+use Symfony\Component\Validator\ConstraintViolationListInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ @@
    * @param array $options
    *   (Optional) Array of options needed by the constraint validator.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationListInterface
+   * @return ConstraintViolationListInterface
    *   A list of constraint violations. If the list is empty, validation
    *   succeeded.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/entity_browser/src/WidgetValidationBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser;

+use Symfony\Component\Validator\ConstraintViolationListInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ @@
   /**
    * The Typed Data Manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
    * @param array $options
    *   Array of options needed by the constraint validator.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   A data definition object for the given data type.
    */
   protected function getDataDefinition($data_type, $constraint_name = NULL, array $options = []) {
@@ @@
   /**
    * Creates and validates instances of typed data for each Entity.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The data definition generated from ::getDataDefinition().
    * @param array $entities
    *   An array of Entities to validate the definition against.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationListInterface
+   * @return ConstraintViolationListInterface
    *   A list of violations.
    */
   protected function validateDataDefinition(DataDefinitionInterface $data_definition, array $entities) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/entity_browser/src/WidgetSelectorManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/entity_browser/src/WidgetSelectorInterface.php:46

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function validate(array &$form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/entity_browser/src/WidgetManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/entity_browser/src/WidgetInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ @@
    *   Entire form bult up to this point. Form elements for widget should generally
    *   not be added directly to it but returned from funciton as a separated
    *   unit.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    * @param array $additional_widget_parameters
    *   Additional parameters that we want to pass to the widget.
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function validate(array &$form, FormStateInterface $form_state);
@@ @@
    *   Widget part of the form.
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function submit(array &$element, array &$form, FormStateInterface $form_state);
@@ @@
   /**
    * Defines if the widget is visible / accessible in a given context.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/entity_browser/src/WidgetBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser;

+use Drupal\Core\Entity\EntityInterface;
+use Symfony\Component\Validator\ConstraintViolationListInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Widget Validation Manager service.
    *
-   * @var \Drupal\entity_browser\WidgetValidationManager
+   * @var WidgetValidationManager
    */
   protected $validationManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager) {
@@ @@
    *
    * @param array $form
    *   Complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entities.
    */
   abstract protected function prepareEntities(array $form, FormStateInterface $form_state);
@@ @@
    * @param array $validators
    *   Array of widget validator ids.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationListInterface
+   * @return ConstraintViolationListInterface
    *   A list of constraint violations. If the list is empty, validation
    *   succeeded.
    */
@@ @@
   protected function runWidgetValidators(array $entities, $validators = []) {
     $violations = new ConstraintViolationList();
     foreach ($validators as $validator_id => $options) {
-      /** @var \Drupal\entity_browser\WidgetValidationInterface $widget_validator */
+      /** @var WidgetValidationInterface $widget_validator */
       $widget_validator = $this->validationManager->createInstance($validator_id, []);
       if ($widget_validator) {
         $violations->addAll($widget_validator->validate($entities, $options));
@@ @@
     $selected_entities = array_merge($selected_entities, $entities);

     $this->eventDispatcher->dispatch(
-      Events::SELECTED,
       new EntitySelectionEvent(
         $this->configuration['entity_browser_id'],
         $form_state->get(['entity_browser', 'instance_uuid']),
         $entities
-      ));
+      ),
+      Events::SELECTED);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/entity_browser/src/SelectionDisplayManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/entity_browser/src/SelectionDisplayInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser;

+use Drupal\Core\Config\ConfigException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ @@
    *   Entire form built up to this point. Form elements for selection display
    *   should generally not be added directly to it but returned from function
    *   as a separated unit.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function validate(array &$form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function submit(array &$form, FormStateInterface $form_state);
@@ @@
    *
    * @deprecated Use ::supportsPreselection instead.
    *
-   * @throws \Drupal\Core\Config\ConfigException
+   * @throws ConfigException
    */
   public function checkPreselectionSupport();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/entity_browser/src/SelectionDisplayBase.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager type service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   protected function selectionDone(FormStateInterface $form_state) {
     $form_state->set(['entity_browser', 'selection_completed'], TRUE);
     $this->eventDispatcher->dispatch(
-      Events::DONE,
       new SelectionDoneEvent(
         $this->configuration['entity_browser_id'],
         $form_state->get(['entity_browser', 'instance_uuid'])
-      ));
+      ),
+      Events::DONE);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/entity_browser/src/RouteSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\Routing\RouteCollection;

@@ @@
   /**
    * The entity browser storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $browserStorage;

@@ @@
   /**
    * Display plugin manager.
    *
-   * @var \Drupal\entity_browser\DisplayManager
+   * @var DisplayManager
    */
   protected $displayManager;

@@ @@
   /**
    * Constructs a \Drupal\views\EventSubscriber\RouteSubscriber instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_browser\DisplayManager $display_manager
+   * @param DisplayManager $display_manager
    *   The display manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, DisplayManager $display_manager) {
@@ @@
   /**
    * Returns a set of route objects.
    *
-   * @return \Symfony\Component\Routing\RouteCollection
+   * @return RouteCollection
    *   A route collection.
    */
   public function routes() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


36) modules/contrib/entity_browser/src/Plugin/views/filter/ContextualBundle.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A request stack symfony instance.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The entity browser selection storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $selectionStorage;

@@ @@
   /**
    * The bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfoService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   A request stack symfony instance.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info_service
+   * @param EntityTypeBundleInfoInterface $bundle_info_service
    *   The bundle info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, RequestStack $request_stack, KeyValueStoreExpirableInterface $selection_storage, EntityTypeBundleInfoInterface $bundle_info_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/entity_browser/src/Plugin/views/field/SelectForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Plugin\views\field;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\Plugin\views\style\Table;
@@ @@
   /**
    * The current request.
    *
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   protected $currentRequest;

@@ @@
   /**
    * The entity browser selection storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $selectionStorage;

@@ @@
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface $selection_storage
+   * @param KeyValueStoreExpirableInterface $selection_storage
    *   The selection storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RequestStack $request_stack, KeyValueStoreExpirableInterface $selection_storage) {
@@ @@
   /**
    * Returns the ID for a result row.
    *
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   The result row.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/entity_browser/src/Plugin/views/display/EntityBrowser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Plugin\views\display;

+use Drupal\entity_browser\Plugin\views\field\SelectForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Security\TrustedCallbackInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
@@ @@
   protected function handleForm(array &$render) {
     if (!empty($this->view->field['entity_browser_select'])) {

-      /** @var \Drupal\entity_browser\Plugin\views\field\SelectForm $select */
+      /** @var SelectForm $select */
       $select = $this->view->field['entity_browser_select'];
       $select->viewsForm($render);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/entity_browser/src/Plugin/views/argument_default/EntityBrowserWidgetContext.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The selection storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $selectionStorage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/entity_browser/src/Plugin/Field/FieldWidget/FileBrowserWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Plugin\Field\FieldWidget;

+use Symfony\Component\Mime\MimeTypesInterface;
+use Drupal\file\FileInterface;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Component\Utility\Environment;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * Entity browser file widget.
@@ @@
   /**
    * A list of currently edited items. Used to determine alt/title values.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   protected $items;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $displayRepository;

@@ @@
   /**
    * The mime type guesser service.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\entity_browser\FieldWidgetDisplayManager $field_display_manager
+   * @param FieldWidgetDisplayManager $field_display_manager
    *   Field widget display plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository
+   * @param EntityDisplayRepositoryInterface $display_repository
    *   The entity display repository service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mime_type_guesser
+   * @param MimeTypesInterface $mime_type_guesser
    *   The mime type guesser service.
    */
-  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager, ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $display_repository, ModuleHandlerInterface $module_handler, AccountInterface $current_user, MimeTypeGuesserInterface $mime_type_guesser, MessengerInterface $messenger) {
+  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager, ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $display_repository, ModuleHandlerInterface $module_handler, AccountInterface $current_user, MimeTypesInterface $mime_type_guesser, MessengerInterface $messenger) {
     parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $third_party_settings, $entity_type_manager, $field_display_manager, $module_handler, $current_user, $messenger);
     $this->entityTypeManager = $entity_type_manager;
     $this->fieldDisplayManager = $field_display_manager;
@@ @@
     $current['#header'][] = ['data' => $this->t('Operations'), 'colspan' => 3];
     $current['#header'][] = $this->t('Order', [], ['context' => 'Sort order']);

-    /** @var \Drupal\file\FileInterface[] $entities */
+    /** @var FileInterface[] $entities */
     foreach ($entities as $entity) {
       // Check to see if this entity has an edit form. If not, the edit button
       // will only throw an exception.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/entity_browser/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Plugin\Field\FieldWidget;

+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\entity_browser\Entity\EntityBrowser;
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Field widget display plugin manager.
    *
-   * @var \Drupal\entity_browser\FieldWidgetDisplayManager
+   * @var FieldWidgetDisplayManager
    */
   protected $fieldDisplayManager;

@@ @@
   /**
    * The module handler interface.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\entity_browser\FieldWidgetDisplayManager $field_display_manager
+   * @param FieldWidgetDisplayManager $field_display_manager
    *   Field widget display plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, MessengerInterface $messenger) {
@@ @@
     $element = parent::settingsForm($form, $form_state);

     $browsers = [];
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     foreach ($this->entityTypeManager->getStorage('entity_browser')->loadMultiple() as $browser) {
       $browsers[$browser->id()] = $browser->label();
     }
@@ @@
     $values = NestedArray::getValue($form_state->getValues(), $element['#parents']);

     if ($values['selection_mode'] == 'selection_edit') {
-      /** @var \Drupal\entity_browser\Entity\EntityBrowser $entity_browser */
+      /** @var EntityBrowser $entity_browser */
       $entity_browser = EntityBrowser::load($values['entity_browser']);
       if ($entity_browser->getSelectionDisplay()->supportsPreselection() === FALSE) {
         $tparams = [
@@ @@
    */
   public function flagErrors(FieldItemListInterface $items, ConstraintViolationListInterface $violations, array $form, FormStateInterface $form_state) {
     if ($violations->count() > 0) {
-      /** @var \Symfony\Component\Validator\ConstraintViolation $violation */
+      /** @var ConstraintViolation $violation */
       foreach ($violations as $offset => $violation) {
         // The value of the required field is checked through the "not null"
         // constraint, whose message is not very useful. We override it here for
@@ @@
   /**
    * Returns a key used to store the previously loaded entity.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field items.
    *
    * @return string
@@ @@
    *   The ID for the details element.
    * @param string[] $field_parents
    *   Field parents.
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $entities
+   * @param ContentEntityInterface[] $entities
    *   Array of referenced entities.
    *
    * @return array
@@ @@
   /**
    * Determines the entities used for the form element.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field item to extract the entities from.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The list of entities for the form element.
    */
   protected function formElementEntities(FieldItemListInterface $items, array $element, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]|false
+   * @return EntityInterface[]|false
    *   Return list of entities if they are available or false.
    */
   protected function getEntitiesByTargetId(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetSelector/Tabs.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Plugin\EntityBrowser\WidgetSelector;

+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\entity_browser\WidgetSelectorBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    */
   public function getForm(array &$form = [], FormStateInterface &$form_state = NULL) {
     $element = [];
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $form_state->getFormObject()->getEntityBrowser();
     foreach ($this->widget_ids as $id => $label) {
       $name = 'tab_selector_' . $id;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetSelector/DropDown.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Plugin\EntityBrowser\WidgetSelector;

+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\entity_browser\WidgetSelectorBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
     $form['#prefix'] = '<div id="entity-browser-form">';
     $form['#suffix'] = '</div>';

-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $form_state->getFormObject()->getEntityBrowser();

     $widget_ids = [];
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/entity_browser/src/Plugin/EntityBrowser/Widget/View.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Plugin\EntityBrowser\Widget;

+use Drupal\views\ViewExecutable;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager, AccountInterface $current_user) {
@@ @@
     // case either of those is nonexistent or display not of correct type)?
     $form['#attached']['library'] = ['entity_browser/view'];

-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $this->entityTypeManager
       ->getStorage('view')
       ->load($this->configuration['view'])
@@ @@
    */
   public function access() {
     // Mark the widget as not visible if the user has no access to the view.
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $this->entityTypeManager
       ->getStorage('view')
       ->load($this->configuration['view'])
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/entity_browser/src/Plugin/EntityBrowser/Widget/Upload.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager, ModuleHandlerInterface $module_handler, Token $token) {
@@ @@
    *
    * @param array $element
    *   Upload form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   protected function clearFormValues(array &$element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/entity_browser/src/Plugin/EntityBrowser/Widget/MediaImageUpload.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Plugin\EntityBrowser\Widget;

+use Drupal\media\MediaTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\entity_browser\Plugin\EntityBrowser\Widget\Upload as FileUpload;
@@ @@
    * {@inheritdoc}
    */
   public function getForm(array &$original_form, FormStateInterface $form_state, array $aditional_widget_parameters) {
-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     if (!$this->configuration['media_type'] || !($media_type = $this->entityTypeManager->getStorage('media_type')->load($this->configuration['media_type']))) {
       return ['#markup' => $this->t('The media type is not configured correctly.')];
     }
@@ @@
   protected function prepareEntities(array $form, FormStateInterface $form_state) {
     $files = parent::prepareEntities($form, $form_state);

-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     $media_type = $this->entityTypeManager
       ->getStorage('media_type')
       ->load($this->configuration['media_type']);
@@ @@

     $images = [];
     foreach ($files as $file) {
-      /** @var \Drupal\media\MediaInterface $image */
+      /** @var MediaInterface $image */
       $image = $this->entityTypeManager->getStorage('media')->create([
         'bundle' => $media_type->id(),
         $media_type->getSource()->getConfiguration()['source_field'] => $file,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/entity_browser/src/Plugin/EntityBrowser/SelectionDisplay/MultiStepDisplay.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Plugin\EntityBrowser\SelectionDisplay;

+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Ajax\AfterCommand;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\InvokeCommand;
@@ @@
   /**
    * Field widget display plugin manager.
    *
-   * @var \Drupal\entity_browser\FieldWidgetDisplayManager
+   * @var FieldWidgetDisplayManager
    */
   protected $fieldDisplayManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\FieldWidgetDisplayManager $field_display_manager
+   * @param FieldWidgetDisplayManager $field_display_manager
    *   Field widget display plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager) {
@@ @@
   /**
    * Execute command generated by front-end.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   protected function executeJsCommand(FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Return Ajax response with commands.
    */
   public static function handleAjaxCommand(array $form, FormStateInterface $form_state) {
@@ @@

       // Entity IDs that are affected by this command.
       if (isset($commands['add'])) {
-        /** @var \Drupal\Core\Render\RendererInterface $renderer */
+        /** @var RendererInterface $renderer */
         $renderer = \Drupal::service('renderer');
         $entity_ids = $commands['add'];

@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public static function removeItemSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Saves new ordering of entities based on weight.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public static function saveNewOrder(FormStateInterface $form_state) {
@@ @@

     $entity_types = [];
     foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+      /** @var EntityTypeInterface $entity_type */
       $entity_types[$entity_type_id] = $entity_type->getLabel();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/entity_browser/src/Plugin/EntityBrowser/FieldWidgetDisplay/RenderedEntity.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   Entity display repository service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/entity_browser/src/Plugin/EntityBrowser/FieldWidgetDisplay/ImageThumbnail.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/entity_browser/src/Plugin/EntityBrowser/FieldWidgetDisplay/EntityLabel.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityRepositoryInterface $entity_repository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/entity_browser/src/Plugin/EntityBrowser/Display/Modal.php:31

    ---------- begin diff ----------
@@ @@
     DisplayBase::displayEntityBrowser($element, $form_state, $complete_form, $persistent_data);
     $js_event_object = new RegisterJSCallbacks($this->configuration['entity_browser_id'], $this->getUuid());
     $js_event_object->registerCallback('Drupal.entityBrowser.selectionCompleted');
-    $js_event = $this->eventDispatcher->dispatch(Events::REGISTER_JS_CALLBACKS, $js_event_object);
+    $js_event = $this->eventDispatcher->dispatch($js_event_object, Events::REGISTER_JS_CALLBACKS);
     $original_path = $this->currentPath->getPath();

     $data = [
@@ @@
       ],
     ];
     $event_object = new AlterEntityBrowserDisplayData($this->configuration['entity_browser_id'], $this->getUuid(), $this->getPluginDefinition(), $form_state, $data);
-    $event = $this->eventDispatcher->dispatch(Events::ALTER_BROWSER_DISPLAY_DATA, $event_object);
+    $event = $this->eventDispatcher->dispatch($event_object, Events::ALTER_BROWSER_DISPLAY_DATA);
     $data = $event->getData();
     return [
       '#theme_wrappers' => ['container'],
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An ajax response.
    */
   public function openModal(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/entity_browser/src/Plugin/EntityBrowser/Display/IFrame.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Plugin\EntityBrowser\Display;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Path\CurrentPathStack;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Render\BareHtmlPageRendererInterface;
@@ @@
   /**
    * Current route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * Current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The bare HTML page renderer.
    *
-   * @var \Drupal\Core\Render\BareHtmlPageRendererInterface
+   * @var BareHtmlPageRendererInterface
    */
   protected $bareHtmlPageRenderer;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   UUID generator interface.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface $selection_storage
+   * @param KeyValueStoreExpirableInterface $selection_storage
    *   The selection storage.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $current_route_match
+   * @param RouteMatchInterface $current_route_match
    *   The currently active route match object.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Render\BareHtmlPageRendererInterface $bare_html_page_renderer
+   * @param BareHtmlPageRendererInterface $bare_html_page_renderer
    *   The bare HTML page renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, UuidInterface $uuid, KeyValueStoreExpirableInterface $selection_storage, RouteMatchInterface $current_route_match, Request $request, CurrentPathStack $current_path, RendererInterface $renderer, BareHtmlPageRendererInterface $bare_html_page_renderer) {
@@ @@
    */
   public function displayEntityBrowser(array $element, FormStateInterface $form_state, array &$complete_form, array $persistent_data = []) {
     parent::displayEntityBrowser($element, $form_state, $complete_form, $persistent_data);
-    /** @var \Drupal\entity_browser\Events\RegisterJSCallbacks $event */
+    /** @var RegisterJSCallbacks $event */
     $js_event_object = new RegisterJSCallbacks($this->configuration['entity_browser_id'], $this->getUuid());
     $js_event_object->registerCallback('Drupal.entityBrowser.selectionCompleted');
-    $callback_event = $this->eventDispatcher->dispatch(Events::REGISTER_JS_CALLBACKS, $js_event_object);
+    $callback_event = $this->eventDispatcher->dispatch($js_event_object, Events::REGISTER_JS_CALLBACKS);
     $original_path = $this->currentPath->getPath();

     $data = [
@@ @@
       ],
     ];
     $event_object = new AlterEntityBrowserDisplayData($this->configuration['entity_browser_id'], $this->getUuid(), $this->getPluginDefinition(), $form_state, $data);
-    $event = $this->eventDispatcher->dispatch(Events::ALTER_BROWSER_DISPLAY_DATA, $event_object);
+    $event = $this->eventDispatcher->dispatch($event_object, Events::ALTER_BROWSER_DISPLAY_DATA);
     $data = $event->getData();
     return [
       '#theme_wrappers' => ['container'],
@@ @@
    * Intercepts default response and injects response that will trigger JS to
    * propagate selected entities upstream.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   Response event.
    */
-  public function propagateSelection(FilterResponseEvent $event) {
+  public function propagateSelection(ResponseEvent $event) {
     $render = [
       '#attached' => [
         'library' => ['entity_browser/' . $this->pluginDefinition['id'] . '_selection'],
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/entity_browser/src/Permissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The entity browser storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $browserStorage;

@@ @@
   /**
    * Constructs Permissions object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    */
   public function permissions() {
     $permissions = [];
-    /** @var \Drupal\entity_browser\EntityBrowserInterface[] $browsers */
+    /** @var EntityBrowserInterface[] $browsers */
     $browsers = $this->browserStorage->loadMultiple();

     foreach ($browsers as $browser) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


54) modules/contrib/entity_browser/src/Form/WidgetsConfig.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Form;

+use Drupal\entity_browser\EntityBrowserInterface;
+use Drupal\entity_browser\WidgetInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * Entity browser widget plugin manager.
    *
-   * @var \Drupal\entity_browser\WidgetManager
+   * @var WidgetManager
    */
   protected $widgetManager;

@@ @@
   /**
    * WidgetsConfig constructor.
    *
-   * @param \Drupal\entity_browser\WidgetManager $widget_manager
+   * @param WidgetManager $widget_manager
    *   Entity browser widget plugin manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(WidgetManager $widget_manager, MessengerInterface $messenger) {
@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {

-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity_browser */
+    /** @var EntityBrowserInterface $entity_browser */
     $entity_browser = $this->getEntity();

     $options = [
@@ @@
     }
     $default_widgets = [];
     foreach ($entity_browser->getWidgets() as $widget) {
-      /** @var \Drupal\entity_browser\WidgetInterface $widget */
+      /** @var WidgetInterface $widget */
       $default_widgets[] = $widget->id();
     }
     $form['widget'] = [
@@ @@
       ],
     ];

-    /** @var \Drupal\entity_browser\WidgetInterface $widget */
+    /** @var WidgetInterface $widget */
     foreach ($entity_browser->getWidgets() as $uuid => $widget) {
       $row = [
         '#attributes' => [
@@ @@
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $entity_browser = $this->getEntity();
-    /** @var \Drupal\entity_browser\WidgetInterface $widget */
+    /** @var WidgetInterface $widget */
     foreach ($entity_browser->getWidgets() as $widget) {
       $widget->validateConfigurationForm($form, $form_state);
     }
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $entity_browser = $this->getEntity();
     $table = $form_state->getValue('table');
-    /** @var \Drupal\entity_browser\WidgetInterface $widget */
+    /** @var WidgetInterface $widget */
     foreach ($entity_browser->getWidgets() as $uuid => $widget) {
       $widget->submitConfigurationForm($form, $form_state);
       $widget->setWeight($table[$uuid]['weight']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/entity_browser/src/Form/EntityBrowserForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Form;

+use Drupal\entity_browser\WidgetInterface;
+use Drupal\entity_browser\SelectionDisplayInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Config\ConfigException;
 use Drupal\Core\Form\BaseFormIdInterface;
@@ @@
   /**
    * UUID generator service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;

@@ @@
   /**
    * The entity browser object.
    *
-   * @var \Drupal\entity_browser\EntityBrowserInterface
+   * @var EntityBrowserInterface
    */
   protected $entityBrowser;

@@ @@
   /**
    * The entity browser selection storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $selectionStorage;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a EntityBrowserForm object.
    *
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param UuidInterface $uuid_generator
    *   The UUID generator service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface $selection_storage
+   * @param KeyValueStoreExpirableInterface $selection_storage
    *   Selection storage.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(UuidInterface $uuid_generator, KeyValueStoreExpirableInterface $selection_storage, RendererInterface $renderer, MessengerInterface $messenger) {
@@ @@
   /**
    * Initializes form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   protected function init(FormStateInterface $form_state) {
@@ @@
     // Add cache access cache metadata from the widgets to the form directly as
     // it is affected.
     foreach ($this->entityBrowser->getWidgets() as $widget) {
-      /** @var \Drupal\entity_browser\WidgetInterface $widget */
+      /** @var WidgetInterface $widget */
       $this->renderer->addCacheableDependency($form, $widget->access());
     }

@@ @@
    * Check if entity browser with selected configuration combination can work.
    */
   protected function isFunctionalForm() {
-    /** @var \Drupal\entity_browser\WidgetInterface $widget */
+    /** @var WidgetInterface $widget */
     foreach ($this->entityBrowser->getWidgets() as $widget) {
-      /** @var \Drupal\entity_browser\SelectionDisplayInterface $selectionDisplay */
+      /** @var SelectionDisplayInterface $selectionDisplay */
       $selectionDisplay = $this->entityBrowser->getSelectionDisplay();

       if ($widget->requiresJsCommands() && !$selectionDisplay->supportsJsCommands()) {
@@ @@
   /**
    * Returns the widget that is currently selected.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return string
@@ @@
    *
    * @param string $widget
    *   New active widget UUID.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   protected function setCurrentWidget($widget, FormStateInterface $form_state) {
@@ @@
   /**
    * Indicates selection is done.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return bool
@@ @@
   /**
    * Returns currently selected entities.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of currently selected entities.
    */
   protected function getSelectedEntities(FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/entity_browser/src/Form/EntityBrowserEditForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Form;

+use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_browser\DisplayManager;
@@ @@
   /**
    * Entity browser display plugin manager.
    *
-   * @var \Drupal\entity_browser\DisplayManager
+   * @var DisplayManager
    */
   protected $displayManager;

@@ @@
   /**
    * Entity browser widget selector plugin manager.
    *
-   * @var \Drupal\entity_browser\WidgetSelectorManager
+   * @var WidgetSelectorManager
    */
   protected $widgetSelectorManager;

@@ @@
   /**
    * Entity browser selection display plugin manager.
    *
-   * @var \Drupal\entity_browser\SelectionDisplayManager
+   * @var SelectionDisplayManager
    */
   protected $selectionDisplayManager;

@@ @@
   /**
    * Entity browser widget plugin manager.
    *
-   * @var \Drupal\entity_browser\WidgetManager
+   * @var WidgetManager
    */
   protected $widgetManager;

@@ @@
   /**
    * Constructs EntityBrowserEditForm form class.
    *
-   * @param \Drupal\entity_browser\DisplayManager $display_manager
+   * @param DisplayManager $display_manager
    *   Entity browser display plugin manager.
-   * @param \Drupal\entity_browser\WidgetSelectorManager $widget_selector_manager
+   * @param WidgetSelectorManager $widget_selector_manager
    *   Entity browser widget selector plugin manager.
-   * @param \Drupal\entity_browser\SelectionDisplayManager $selection_display_manager
+   * @param SelectionDisplayManager $selection_display_manager
    *   Entity browser selection display plugin manager.
-   * @param \Drupal\entity_browser\WidgetManager $widget_manager
+   * @param WidgetManager $widget_manager
    *   Entity browser widget plugin manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(DisplayManager $display_manager, WidgetSelectorManager $widget_selector_manager, SelectionDisplayManager $selection_display_manager, WidgetManager $widget_manager, MessengerInterface $messenger) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\entity_browser\Entity\EntityBrowser $entity_browser */
+    /** @var EntityBrowser $entity_browser */
     $entity_browser = $this->entity;

     $form['label'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/entity_browser/src/FieldWidgetDisplayManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/entity_browser/src/FieldWidgetDisplayInterface.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Builds and gets render array for the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to be displayed.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
   /**
    * Returns if the FieldWidgetDisplay can be used for the provided field.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type that should be checked.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


59) modules/contrib/entity_browser/src/Events/EventBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Events;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Base implementation of entity browser events.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/entity_browser/src/Events/EntitySelectionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Events;

+use Drupal\Core\Entity\EntityInterface;
 /**
  * Represents entity selection as event.
  */
@@ @@
   /**
    * Entities being selected.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities;

@@ @@
    *   Entity browser ID.
    * @param string $instance_uuid
    *   Entity browser instance UUID.
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Array of selected entities.
    */
   public function __construct($entity_browser_id, $instance_uuid, array $entities) {
@@ @@
   /**
    * Gets selected entities.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    */
   public function getEntities() {
     return $this->entities;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/entity_browser/src/Events/AlterEntityBrowserDisplayData.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Form state object.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;

@@ @@
    *   Entity browser instance UUID.
    * @param array $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    * @param array $data
    *   Data to process.
@@ @@
   /**
    * Gets form state.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   Form state object.
    */
   public function getFormState() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/entity_browser/src/EntityBrowserInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser;

+use Symfony\Component\Routing\Route;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Returns the display.
    *
-   * @return \Drupal\entity_browser\DisplayInterface
+   * @return DisplayInterface
    *   The display.
    */
   public function getDisplay();
@@ @@
    * @param string $widget
    *   The widget ID.
    *
-   * @return \Drupal\entity_browser\WidgetInterface
+   * @return WidgetInterface
    *   The widget object.
    */
   public function getWidget($widget);
@@ @@
   /**
    * Returns the widgets for this entity browser.
    *
-   * @return \Drupal\entity_browser\WidgetsLazyPluginCollection
+   * @return WidgetsLazyPluginCollection
    *   The tag plugin bag.
    */
   public function getWidgets();
@@ @@
   /**
    * Deletes a widget from this entity browser.
    *
-   * @param \Drupal\entity_browser\WidgetInterface $widget
+   * @param WidgetInterface $widget
    *   The widget object.
    *
    * @return $this
@@ @@
   /**
    * Returns the selection display.
    *
-   * @return \Drupal\entity_browser\SelectionDisplayInterface
+   * @return SelectionDisplayInterface
    *   The display.
    */
   public function getSelectionDisplay();
@@ @@
   /**
    * Returns the widget selector.
    *
-   * @return \Drupal\entity_browser\WidgetSelectorInterface
+   * @return WidgetSelectorInterface
    *   The widget selector.
    */
   public function getWidgetSelector();
@@ @@
   /**
    * Gets route that matches this display.
    *
-   * @return \Symfony\Component\Routing\Route|bool
+   * @return Route|bool
    *   Route object or FALSE if no route is used.
    */
   public function route();
@@ @@
   /**
    * Gets entity browser form object.
    *
-   * @return \Drupal\entity_browser\EntityBrowserFormInterface
+   * @return EntityBrowserFormInterface
    *   Entity browser form.
    */
   public function getFormObject();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


63) modules/contrib/entity_browser/src/EntityBrowserFormInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Sets entity browser entity.
    *
-   * @param \Drupal\entity_browser\EntityBrowserInterface $entity_browser
+   * @param EntityBrowserInterface $entity_browser
    *   Entity browser entity.
    */
   public function setEntityBrowser(EntityBrowserInterface $entity_browser);
@@ @@
   /**
    * Returns the entity browser entity.
    *
-   * @return \Drupal\entity_browser\EntityBrowserInterface
+   * @return EntityBrowserInterface
    *   Entity browser entity.
    */
   public function getEntityBrowser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


64) modules/contrib/entity_browser/src/Entity/EntityBrowser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Entity;

+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ @@
   /**
    * Display lazy plugin collection.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $displayCollection;

@@ @@
   /**
    * Holds the collection of widgets that are used by this entity browser.
    *
-   * @var \Drupal\entity_browser\WidgetsCollection
+   * @var WidgetsCollection
    */
   protected $widgetsCollection;

@@ @@
   /**
    * Selection display plugin collection.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $selectionDisplayCollection;

@@ @@
   /**
    * Widget selector plugin collection.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $widgetSelectorCollection;

@@ @@
   /**
    * Returns display plugin collection.
    *
-   * @return \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @return DefaultSingleLazyPluginCollection
    *   The tag plugin collection.
    */
   protected function displayPluginCollection() {
@@ @@
   /**
    * Returns the plugin collections used by this entity.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection[]
+   * @return LazyPluginCollection[]
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
@@ @@
   /**
    * Returns selection display plugin collection.
    *
-   * @return \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @return DefaultSingleLazyPluginCollection
    *   The tag plugin collection.
    */
   protected function selectionDisplayPluginCollection() {
@@ @@
   /**
    * Returns widget selector plugin collection.
    *
-   * @return \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @return DefaultSingleLazyPluginCollection
    *   The tag plugin collection.
    */
   protected function widgetSelectorPluginCollection() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/entity_browser/src/Element/EntityBrowserPagerElement.php:88

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public static function submitPager(array $form, FormStateInterface $form_state) {
@@ @@
   /**
    * Gets current page from the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return int
@@ @@
   /**
    * Sets current page.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param int $page
    *   (Optional) Page to set as current. Pager will be reset to the first page
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/entity_browser/src/Element/EntityBrowserElement.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Element;

+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\FormElement;
@@ @@
    * Render API callback: Processes the entity browser element.
    */
   public static function processEntityBrowser(&$element, FormStateInterface $form_state, &$complete_form) {
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity_browser */
+    /** @var EntityBrowserInterface $entity_browser */
     if (is_string($element['#entity_browser'])) {
       $entity_browser = EntityBrowser::load($element['#entity_browser']);
     }
@@ @@
    *   are in [entity_type_id]:[entity_id] form. Array of IDs or a
    *   space-delimited string is supported.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entity objects.
    */
   public static function processEntityIds($ids) {
@@ @@
    *   Processes entity ID as it is returned from the entity browser. ID should
    *   be in [entity_type_id]:[entity_id] form.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Entity object.
    */
   public static function processEntityId($id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/entity_browser/src/DisplayManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/entity_browser/src/DisplayInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ @@
    *   A form element array containing basic properties for the entity browser
    *   element:
    *   - #eb_parents: The 'parents' space for the field in the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param array $complete_form
    *   The form structure where entity browser is being attached to.
@@ @@
    * plugin is responsible for fetching selected entities and sending them to
    * the initiating code.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Array of selected entities.
    */
   public function selectionCompleted(array $entities);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


69) modules/contrib/entity_browser/src/DisplayBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Selected entities.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities = [];

@@ @@
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * UUID generator interface.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;

@@ @@
   /**
    * The selection storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $selectionStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param UuidInterface $uuid_generator
    *   UUID generator interface.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface $selection_storage
+   * @param KeyValueStoreExpirableInterface $selection_storage
    *   The selection storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, UuidInterface $uuid_generator, KeyValueStoreExpirableInterface $selection_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/entity_browser/src/Controllers/EntityBrowserFormController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Controllers;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\HtmlFormController;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
@@ @@
   /**
    * Current route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * The browser storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $browserStorage;

@@ @@
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Constructs Entity browser form controller.
    *
-   * @param \Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface $argument_resolver
+   * @param ArgumentResolverInterface $argument_resolver
    *   The argument resolver.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   Current route match service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    */
   public function __construct(ArgumentResolverInterface $argument_resolver, FormBuilderInterface $form_builder, ClassResolverInterface $class_resolver, RouteMatchInterface $route_match, EntityTypeManagerInterface $entity_type_manager, Request $request) {
@@ @@
   /**
    * Loads entity browser object for this page.
    *
-   * @return \Drupal\entity_browser\EntityBrowserInterface
+   * @return EntityBrowserInterface
    *   Loads the entity browser object
    */
   protected function loadBrowser() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


71) modules/contrib/entity_browser/src/Controllers/EntityBrowserController.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Return an Ajax dialog command for editing a referenced entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity being edited.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The currently processing request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An Ajax response with a command for opening or closing the dialog
    *   containing the edit form.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


72) modules/contrib/entity_browser/src/Annotation/EntityBrowserWidgetValidation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the widget validator.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


73) modules/contrib/entity_browser/src/Annotation/EntityBrowserWidgetSelector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the widget selector.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
    *
    * This will be shown when adding or configuring this widget selector.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


74) modules/contrib/entity_browser/src/Annotation/EntityBrowserWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the widget.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
    *
    * This will be shown when adding or configuring this widget.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


75) modules/contrib/entity_browser/src/Annotation/EntityBrowserSelectionDisplay.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the selection display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
    *
    * This will be shown when adding or configuring this selection display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


76) modules/contrib/entity_browser/src/Annotation/EntityBrowserFieldWidgetDisplay.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the field widget display display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
    *
    * This will be shown when adding or configuring this display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


77) modules/contrib/entity_browser/src/Annotation/EntityBrowserDisplay.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
    *
    * This will be shown when adding or configuring this display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


78) modules/contrib/entity_browser/modules/example/tests/src/FunctionalJavascript/EntityBrowserExampleTest.php:24

    ---------- begin diff ----------
@@ @@

   /**
    * Tests Entity Browser example module.
+   * @doesNotPerformAssertions
    */
   public function testExampleInstall() {
     // If we came this far example module installed successfully.
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


79) modules/contrib/entity_browser/modules/entity_form/tests/src/FunctionalJavascript/InlineEntityIntegrationTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Delete unnecessary entity browser.
     $browser = $this->container->get('entity_type.manager')->getStorage('entity_browser')->load('entity_browser_test_entity_form');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/entity_browser/modules/entity_form/tests/src/FunctionalJavascript/EntityFormWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_browser_entity_form\FunctionalJavascript;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'foo', 'name' => 'Foo']);
@@ @@
       'settings' => [],
     ])->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.foo.default');
@@ @@
    * Test if save button is appears on form.
    */
   public function testEntityForm() {
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
       ->load('entity_browser_test_entity_form');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/entity_browser/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityDisplayRepositoryInterface $entity_display_repository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/entity_browser/modules/entity_form/entity_browser_entity_form.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\FieldConfigInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Hook implementations for entity_browser_entity_form.module.
@@ @@
  * Implements hook_inline_entity_form_reference_form_alter().
  */
 function entity_browser_entity_form_inline_entity_form_reference_form_alter(&$reference_form, FormStateInterface &$form_state) {
-  /** @var \Drupal\field\FieldConfigInterface $instance */
+  /** @var FieldConfigInterface $instance */
   $instance = $form_state->get([
     'inline_entity_form',
     $reference_form['#ief_id'],
@@ @@
     'instance',
   ]);

-  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+  /** @var EntityFormDisplayInterface $form_display */
   $entity_form_id = $instance->getTargetEntityTypeId() . '.' . $instance->getTargetBundle() . '.default';
   // TODO - 'default' might become configurable or something else in the future.
   // See https://www.drupal.org/node/2510274
@@ @@
  *
  * @param array $reference_form
  *   The reference entity form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state of the parent form.
  *
  * @see inline_entity_form_reference_form_validate()
@@ @@
  *
  * @param array $reference_form
  *   The reference entity form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state of the parent form.
  *
  * @see inline_entity_form_reference_form_submit()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


83) modules/contrib/entity_browser/entity_browser.module:125

    ---------- begin diff ----------
@@ @@
  * may be used elsewhere would resize it for all of its uses. We copy the
  * normal validation here so that we can stop this from occurring.
  *
- * @param \Drupal\file\FileInterface $file
+ * @param FileInterface $file
  *   The file being evaluated.
  * @param int $maximum_dimensions
  *   The maximum dimensions.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


84) modules/contrib/entity_browser/entity_browser.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ConfigFactoryInterface;
 /**
  * @file
  * Update hooks for the Entity browser module.
@@ @@
       // If the version being used is -dev, $info['version'] will be empty. Try
       // an alternative method to detect if we are using the 2.x branch in that
       // case.
-      if (!file_exists(DRUPAL_ROOT . '/' . drupal_get_path('module', 'media_entity') . '/src/CliService.php')) {
+      if (!file_exists(DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('media_entity') . '/src/CliService.php')) {
         $incompatible = TRUE;
       }
     }
@@ @@
  * Updates submit text for existing Entity browsers.
  */
 function entity_browser_update_8001() {
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+  /** @var ConfigFactoryInterface $config_factory */
   $config_factory = \Drupal::service('config.factory');

   foreach ($config_factory->listAll('entity_browser.browser') as $name) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 84 files have been changed by Rector                                      

