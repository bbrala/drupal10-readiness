diff --git a/modules/facets_map_widget/facets_map_widget.module b/modules/facets_map_widget/facets_map_widget.module
index 5b33599..c9d6515 100644
--- a/modules/facets_map_widget/facets_map_widget.module
+++ b/modules/facets_map_widget/facets_map_widget.module
@@ -1,16 +1,16 @@
 <?php
 
+use Drupal\search_api\Backend\BackendInterface;
 /**
  * @file
  * Contains hook implementations.
  */
-
 /**
  * Implements hook_facets_search_api_query_type_mapping_alter().
  */
 function facets_map_widget_facets_search_api_query_type_mapping_alter($backend_plugin_id, array &$query_types) {
   $backend_manager = \Drupal::service('plugin.manager.search_api.backend');
-  /** @var \Drupal\search_api\Backend\BackendInterface $plugin */
+  /** @var BackendInterface $plugin */
   $plugin = $backend_manager->createInstance($backend_plugin_id);
 
   // Check if rpt data type is supported by the backend plugin before adding the
diff --git a/modules/search_api_location_geocoder/src/Plugin/search_api_location/location_input/Geocode.php b/modules/search_api_location_geocoder/src/Plugin/search_api_location/location_input/Geocode.php
index ca5e3b8..49dbf6f 100644
--- a/modules/search_api_location_geocoder/src/Plugin/search_api_location/location_input/Geocode.php
+++ b/modules/search_api_location_geocoder/src/Plugin/search_api_location/location_input/Geocode.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_location_geocoder\Plugin\search_api_location\location_input;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -31,7 +32,7 @@ class Geocode extends LocationInputPluginBase implements ContainerFactoryPluginI
   /**
    * The geocoder config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $geocoderConfig;
 
@@ -46,7 +47,7 @@ class Geocode extends LocationInputPluginBase implements ContainerFactoryPluginI
    *   The plugin implementation definition.
    * @param \Drupal\geocoder\Geocoder $geocoder
    *   The geocoder service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Geocoder $geocoder, ConfigFactoryInterface $config_factory) {
@@ -166,7 +167,7 @@ class Geocode extends LocationInputPluginBase implements ContainerFactoryPluginI
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ -179,7 +180,7 @@ class Geocode extends LocationInputPluginBase implements ContainerFactoryPluginI
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
diff --git a/modules/search_api_location_geocoder/tests/src/Kernel/GeocodeTest.php b/modules/search_api_location_geocoder/tests/src/Kernel/GeocodeTest.php
index 705bd20..2f4038c 100644
--- a/modules/search_api_location_geocoder/tests/src/Kernel/GeocodeTest.php
+++ b/modules/search_api_location_geocoder/tests/src/Kernel/GeocodeTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_location_geocoder\Kernel;
 
+use Drupal\search_api_location_geocoder\Plugin\search_api_location\location_input\Geocode;
 use Drupal\KernelTests\KernelTestBase;
 use Geocoder\Model\Address;
 use Geocoder\Model\AddressCollection;
@@ -29,22 +30,20 @@ class GeocodeTest extends KernelTestBase {
   /**
    * The Geocode location input plugin under test.
    *
-   * @var \Drupal\search_api_location_geocoder\Plugin\search_api_location\location_input\Geocode
+   * @var Geocode
    */
   protected $sut;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $ghent = new AddressCollection([new Address(new Coordinates(51.037455, 3.7192784))]);
 
     // Mock the Geocoder service.
-    $geocoder = $this->getMockBuilder('\Drupal\geocoder\Geocoder')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $geocoder = $this->createMock('\Drupal\geocoder\Geocoder');
 
     $geocoder->expects($this->any())
       ->method('geocode')
diff --git a/modules/search_api_location_views/search_api_location_views.module b/modules/search_api_location_views/search_api_location_views.module
index 7edbc4d..3c916d4 100644
--- a/modules/search_api_location_views/search_api_location_views.module
+++ b/modules/search_api_location_views/search_api_location_views.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\search_api\IndexInterface;
+use Drupal\search_api\Item\FieldInterface;
 /**
  * @file
  * Provide Views integration for Search API Location.
@@ -11,11 +13,11 @@ use Drupal\search_api\Entity\Index;
  * Implements hook_views_data_alter().
  */
 function search_api_location_views_views_data_alter(&$data) {
-  /** @var \Drupal\search_api\IndexInterface $index */
+  /** @var IndexInterface $index */
   foreach (Index::loadMultiple() as $index) {
     $table = &$data['search_api_index_' . $index->id()];
 
-    /** @var \Drupal\search_api\Item\FieldInterface $field */
+    /** @var FieldInterface $field */
     foreach ($index->getFields(TRUE) as $field_id => $field) {
       if ($field->getType() == 'location') {
         $field_alias = _search_api_location_views_get_field_alias($field_id, $table);
diff --git a/modules/search_api_location_views/src/Plugin/views/filter/SearchApiFilterLocation.php b/modules/search_api_location_views/src/Plugin/views/filter/SearchApiFilterLocation.php
index ede140f..93f96ba 100644
--- a/modules/search_api_location_views/src/Plugin/views/filter/SearchApiFilterLocation.php
+++ b/modules/search_api_location_views/src/Plugin/views/filter/SearchApiFilterLocation.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_location_views\Plugin\views\filter;
 
+use Drupal\search_api_location\LocationInput\LocationInputInterface;
+use Drupal\search_api\Query\Query;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
 use Drupal\search_api_location\LocationInput\LocationInputPluginManager;
@@ -20,7 +22,7 @@ class SearchApiFilterLocation extends FilterPluginBase {
   /**
    * The location plugin manager.
    *
-   * @var \Drupal\search_api_location\LocationInput\LocationInputPluginManager
+   * @var LocationInputPluginManager
    */
   protected $locationInputManager;
 
@@ -33,7 +35,7 @@ class SearchApiFilterLocation extends FilterPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\search_api_location\LocationInput\LocationInputPluginManager $location_input_manager
+   * @param LocationInputPluginManager $location_input_manager
    *   The plugin implementation definition.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LocationInputPluginManager $location_input_manager) {
@@ -136,7 +138,7 @@ class SearchApiFilterLocation extends FilterPluginBase {
 
     $plugin_id = $form_state->getValues()['options']['plugin'];
 
-    /** @var \Drupal\search_api_location\LocationInput\LocationInputInterface $plugin */
+    /** @var LocationInputInterface $plugin */
     $plugin = $this->locationInputManager->createInstance($plugin_id, $this->options['plugin-' . $plugin_id]);
     $processor_form_state = SubformState::createForSubform($form['plugin-' . $plugin_id], $form, $form_state);
     $plugin->submitConfigurationForm($form['plugin-' . $plugin_id], $processor_form_state);
@@ -167,7 +169,7 @@ class SearchApiFilterLocation extends FilterPluginBase {
       return;
     }
 
-    /** @var \Drupal\search_api_location\LocationInput\LocationInputInterface $plugin */
+    /** @var LocationInputInterface $plugin */
     $plugin = $this->locationInputManager->createInstance($plugin_id, $this->options['plugin-' . $plugin_id]);
 
     $form = $plugin->getForm($form, $form_state, $this->options + ['operator_options' => $this->operatorOptions()]);
@@ -185,7 +187,7 @@ class SearchApiFilterLocation extends FilterPluginBase {
 
     $plugin_options = $this->options['plugin-' . $plugin_id];
 
-    /** @var \Drupal\search_api_location\LocationInput\LocationInputInterface $plugin */
+    /** @var LocationInputInterface $plugin */
     $plugin = $this->locationInputManager->createInstance($plugin_id, $plugin_options);
 
     if (!$plugin->hasInput($this->value, $this->options)) {
@@ -198,7 +200,7 @@ class SearchApiFilterLocation extends FilterPluginBase {
       return;
     }
     $location = explode(',', $location, 2);
-    /** @var \Drupal\search_api\Query\Query $query */
+    /** @var Query $query */
     $query = $this->query;
 
     $location_options = (array) $query->getOption('search_api_location', []);
diff --git a/src/Annotation/LocationInput.php b/src/Annotation/LocationInput.php
index 3ff74d8..3d3f866 100644
--- a/src/Annotation/LocationInput.php
+++ b/src/Annotation/LocationInput.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_location\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class LocationInput extends Plugin {
   /**
    * The human-readable name of the Location Input plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -35,7 +36,7 @@ class LocationInput extends Plugin {
   /**
    * The Location Input description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/LocationInput/LocationInputInterface.php b/src/LocationInput/LocationInputInterface.php
index 35e8dca..724c1fa 100644
--- a/src/LocationInput/LocationInputInterface.php
+++ b/src/LocationInput/LocationInputInterface.php
@@ -58,7 +58,7 @@ interface LocationInputInterface extends PluginFormInterface {
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $options
    *   Option array with extra info of the plugin.
diff --git a/src/LocationInput/LocationInputPluginManager.php b/src/LocationInput/LocationInputPluginManager.php
index 8ddf23e..1cb312b 100644
--- a/src/LocationInput/LocationInputPluginManager.php
+++ b/src/LocationInput/LocationInputPluginManager.php
@@ -31,7 +31,7 @@ class LocationInputPluginManager extends DefaultPluginManager {
   /**
    * Returns all known location input methods.
    *
-   * @return \Drupal\search_api_location\LocationInput\LocationInputInterface[]
+   * @return LocationInputInterface[]
    *   An array of data type plugins, keyed by type identifier.
    */
   public function getInstances() {
diff --git a/src/Plugin/search_api_location/location_input/Map.php b/src/Plugin/search_api_location/location_input/Map.php
index e10f98e..561cb3e 100644
--- a/src/Plugin/search_api_location/location_input/Map.php
+++ b/src/Plugin/search_api_location/location_input/Map.php
@@ -175,7 +175,7 @@ class Map extends LocationInputPluginBase {
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ -188,7 +188,7 @@ class Map extends LocationInputPluginBase {
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Plugin/search_api_location/location_input/Raw.php b/src/Plugin/search_api_location/location_input/Raw.php
index 61b39f0..549caf0 100644
--- a/src/Plugin/search_api_location/location_input/Raw.php
+++ b/src/Plugin/search_api_location/location_input/Raw.php
@@ -34,7 +34,7 @@ class Raw extends LocationInputPluginBase {
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ -47,7 +47,7 @@ class Raw extends LocationInputPluginBase {
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
diff --git a/tests/src/Kernel/RawTest.php b/tests/src/Kernel/RawTest.php
index 44ee470..98323e5 100644
--- a/tests/src/Kernel/RawTest.php
+++ b/tests/src/Kernel/RawTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_location\Kernel;
 
+use Drupal\search_api_location\Plugin\search_api_location\location_input\Raw;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -24,14 +25,14 @@ class RawTest extends KernelTestBase {
   /**
    * The Raw location input plugin under test.
    *
-   * @var \Drupal\search_api_location\Plugin\search_api_location\location_input\Raw
+   * @var Raw
    */
   protected $sut;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->sut = $this->container
