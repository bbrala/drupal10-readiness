diff --git a/src/Analyser/AnalyserManager.php b/src/Analyser/AnalyserManager.php
index fe7f1f9..c127503 100644
--- a/src/Analyser/AnalyserManager.php
+++ b/src/Analyser/AnalyserManager.php
@@ -20,9 +20,9 @@ final class AnalyserManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Annotation/OpenSearchConnector.php b/src/Annotation/OpenSearchConnector.php
index b7c42e5..52344ba 100644
--- a/src/Annotation/OpenSearchConnector.php
+++ b/src/Annotation/OpenSearchConnector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_opensearch\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -31,7 +32,7 @@ class OpenSearchConnector extends Plugin {
   /**
    * The human-readable name of the OpenSearch connector.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -40,7 +41,7 @@ class OpenSearchConnector extends Plugin {
   /**
    * The backend description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Connector/ConnectorPluginManager.php b/src/Connector/ConnectorPluginManager.php
index 8f2b89d..1ab2bf5 100644
--- a/src/Connector/ConnectorPluginManager.php
+++ b/src/Connector/ConnectorPluginManager.php
@@ -23,9 +23,9 @@ class ConnectorPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Connector/OpenSearchConnectorInterface.php b/src/Connector/OpenSearchConnectorInterface.php
index 2cf74ff..706f2d2 100644
--- a/src/Connector/OpenSearchConnectorInterface.php
+++ b/src/Connector/OpenSearchConnectorInterface.php
@@ -31,7 +31,7 @@ interface OpenSearchConnectorInterface extends PluginFormInterface, Configurable
   /**
    * Gets the OpenSearch client.
    *
-   * @return \OpenSearch\Client
+   * @return Client
    *   The OpenSearch client.
    */
   public function getClient(): Client;
diff --git a/src/Event/FieldMappingEvent.php b/src/Event/FieldMappingEvent.php
index f1694d5..b08d324 100644
--- a/src/Event/FieldMappingEvent.php
+++ b/src/Event/FieldMappingEvent.php
@@ -13,7 +13,7 @@ class FieldMappingEvent extends Event {
   /**
    * The field.
    *
-   * @var \Drupal\search_api\Item\FieldInterface
+   * @var FieldInterface
    */
   protected $field;
 
@@ -27,7 +27,7 @@ class FieldMappingEvent extends Event {
   /**
    * Creates a new event.
    *
-   * @param \Drupal\search_api\Item\FieldInterface $field
+   * @param FieldInterface $field
    *   The field.
    * @param array $param
    *   The mapping param.
@@ -40,7 +40,7 @@ class FieldMappingEvent extends Event {
   /**
    * Gets the field.
    *
-   * @return \Drupal\search_api\Item\FieldInterface
+   * @return FieldInterface
    *   The field.
    */
   public function getField(): FieldInterface {
diff --git a/src/Plugin/search_api/backend/OpenSearchBackend.php b/src/Plugin/search_api/backend/OpenSearchBackend.php
index ca32f12..368107c 100644
--- a/src/Plugin/search_api/backend/OpenSearchBackend.php
+++ b/src/Plugin/search_api/backend/OpenSearchBackend.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_opensearch\Plugin\search_api\backend;
 
+use Drupal\search_api_opensearch\SearchAPI\BackendClient;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Form\FormStateInterface;
@@ -47,28 +49,28 @@ class OpenSearchBackend extends BackendPluginBase implements PluginFormInterface
   /**
    * The client factory.
    *
-   * @var \Drupal\search_api_opensearch\Connector\ConnectorPluginManager
+   * @var ConnectorPluginManager
    */
   protected $connectorPluginManager;
 
   /**
    * The OpenSearch backend client factory.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\BackendClientFactory
+   * @var BackendClientFactory
    */
   protected $backendClientFactory;
 
   /**
    * The OpenSearch Search API client.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\BackendClient
+   * @var BackendClient
    */
   protected $backendClient;
 
   /**
    * The OpenSearch client.
    *
-   * @var \OpenSearch\Client
+   * @var Client
    */
   protected $client;
 
@@ -173,10 +175,10 @@ class OpenSearchBackend extends BackendPluginBase implements PluginFormInterface
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function buildConnectorConfigForm(array &$form, FormStateInterface $form_state) {
     $form['connector_config'] = [];
@@ -273,12 +275,12 @@ class OpenSearchBackend extends BackendPluginBase implements PluginFormInterface
   /**
    * Gets the OpenSearch connector.
    *
-   * @return \Drupal\search_api_opensearch\Connector\OpenSearchConnectorInterface
+   * @return OpenSearchConnectorInterface
    *   The OpenSearch connector.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   Thrown when a plugin error occurs.
-   * @throws \Drupal\search_api_opensearch\Connector\InvalidConnectorException
+   * @throws InvalidConnectorException
    *   Thrown when a connector is invalid.
    */
   public function getConnector(): OpenSearchConnectorInterface {
@@ -292,7 +294,7 @@ class OpenSearchBackend extends BackendPluginBase implements PluginFormInterface
   /**
    * Gets the OpenSearch client.
    *
-   * @return \OpenSearch\Client
+   * @return Client
    *   The OpenSearch client.
    */
   public function getClient(): Client {
@@ -305,7 +307,7 @@ class OpenSearchBackend extends BackendPluginBase implements PluginFormInterface
   /**
    * Gets the OpenSearch Search API client.
    *
-   * @return \Drupal\search_api_opensearch\SearchAPI\BackendClientInterface
+   * @return BackendClientInterface
    *   The OpenSearch Search API client.
    */
   public function getBackendClient(): BackendClientInterface {
diff --git a/src/SearchAPI/BackendClient.php b/src/SearchAPI/BackendClient.php
index 49169e2..d262bf0 100644
--- a/src/SearchAPI/BackendClient.php
+++ b/src/SearchAPI/BackendClient.php
@@ -29,49 +29,49 @@ class BackendClient implements BackendClientInterface {
   /**
    * The item param builder.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\IndexParamBuilder
+   * @var IndexParamBuilder
    */
   protected $indexParamBuilder;
 
   /**
    * The query param builder.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\Query\QueryParamBuilder
+   * @var QueryParamBuilder
    */
   protected $queryParamBuilder;
 
   /**
    * The query result parser.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\Query\QueryResultParser
+   * @var QueryResultParser
    */
   protected $resultParser;
 
   /**
    * The OpenSearch client.
    *
-   * @var \OpenSearch\Client
+   * @var Client
    */
   protected $client;
 
   /**
    * The Search API fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface
+   * @var FieldsHelperInterface
    */
   protected $fieldsHelper;
 
   /**
    * The field mapping param builder.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\FieldMapper
+   * @var FieldMapper
    */
   protected $fieldParamsBuilder;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -83,23 +83,23 @@ class BackendClient implements BackendClientInterface {
   /**
    * Constructs a new BackendClient.
    *
-   * @param \Drupal\search_api_opensearch\SearchAPI\Query\QueryParamBuilder $queryParamBuilder
+   * @param QueryParamBuilder $queryParamBuilder
    *   The query param builder.
-   * @param \Drupal\search_api_opensearch\SearchAPI\Query\QueryResultParser $resultParser
+   * @param QueryResultParser $resultParser
    *   The query result parser.
-   * @param \Drupal\search_api_opensearch\SearchAPI\IndexParamBuilder $indexParamBuilder
+   * @param IndexParamBuilder $indexParamBuilder
    *   The index param builder.
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fieldsHelper
+   * @param FieldsHelperInterface $fieldsHelper
    *   The fields helper.
-   * @param \Drupal\search_api_opensearch\SearchAPI\FieldMapper $fieldParamsBuilder
+   * @param FieldMapper $fieldParamsBuilder
    *   THe field mapper.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \OpenSearch\Client $client
+   * @param Client $client
    *   The OpenSearch client.
    * @param array $settings
    *   The settings.
-   * @param \Drupal\search_api_opensearch\Analyser\AnalyserManager $analyserManager
+   * @param AnalyserManager $analyserManager
    *   Analyser manager.
    */
   public function __construct(QueryParamBuilder $queryParamBuilder, QueryResultParser $resultParser, IndexParamBuilder $indexParamBuilder, FieldsHelperInterface $fieldsHelper, FieldMapper $fieldParamsBuilder, LoggerInterface $logger, Client $client, array $settings, protected AnalyserManager $analyserManager) {
@@ -281,10 +281,10 @@ class BackendClient implements BackendClientInterface {
   /**
    * Updates the field mappings for an index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown when an underlying OpenSearch error occurs.
    */
   public function updateFieldMapping(IndexInterface $index): void {
@@ -324,7 +324,7 @@ class BackendClient implements BackendClientInterface {
   /**
    * Gets the index ID.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index.
    *
    * @return string
@@ -348,7 +348,7 @@ class BackendClient implements BackendClientInterface {
   /**
    * Updates index settings.
    *
-   * @param \Drupal\search_api\IndexInterface $index_param
+   * @param IndexInterface $index_param
    *   Index.
    */
   public function updateSettings(IndexInterface $index_param): void {
diff --git a/src/SearchAPI/BackendClientFactory.php b/src/SearchAPI/BackendClientFactory.php
index c2b7c16..9b78b55 100644
--- a/src/SearchAPI/BackendClientFactory.php
+++ b/src/SearchAPI/BackendClientFactory.php
@@ -20,61 +20,61 @@ class BackendClientFactory {
   /**
    * The item param builder.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\IndexParamBuilder
+   * @var IndexParamBuilder
    */
   protected $itemParamBuilder;
 
   /**
    * The query param builder.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\Query\QueryParamBuilder
+   * @var QueryParamBuilder
    */
   protected $queryParamBuilder;
 
   /**
    * The query result parser.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\Query\QueryResultParser
+   * @var QueryResultParser
    */
   protected $resultParser;
 
   /**
    * The Search API fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface
+   * @var FieldsHelperInterface
    */
   protected $fieldsHelper;
 
   /**
    * The field mapping param builder.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\FieldMapper
+   * @var FieldMapper
    */
   protected $fieldParamsBuilder;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Creates a backend client factory.
    *
-   * @param \Drupal\search_api_opensearch\SearchAPI\Query\QueryParamBuilder $queryParamBuilder
+   * @param QueryParamBuilder $queryParamBuilder
    *   The query param builder.
-   * @param \Drupal\search_api_opensearch\SearchAPI\Query\QueryResultParser $resultParser
+   * @param QueryResultParser $resultParser
    *   The query result parser.
-   * @param \Drupal\search_api_opensearch\SearchAPI\IndexParamBuilder $itemParamBuilder
+   * @param IndexParamBuilder $itemParamBuilder
    *   The index param builder.
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fieldsHelper
+   * @param FieldsHelperInterface $fieldsHelper
    *   The fields helper.
-   * @param \Drupal\search_api_opensearch\SearchAPI\FieldMapper $fieldParamsBuilder
+   * @param FieldMapper $fieldParamsBuilder
    *   The field mapper.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\search_api_opensearch\Analyser\AnalyserManager $analyserManager
+   * @param AnalyserManager $analyserManager
    *   Analyser manager.
    */
   public function __construct(QueryParamBuilder $queryParamBuilder, QueryResultParser $resultParser, IndexParamBuilder $itemParamBuilder, FieldsHelperInterface $fieldsHelper, FieldMapper $fieldParamsBuilder, LoggerInterface $logger, protected AnalyserManager $analyserManager) {
@@ -89,12 +89,12 @@ class BackendClientFactory {
   /**
    * Creates a new OpenSearch Search API client.
    *
-   * @param \OpenSearch\Client $client
+   * @param Client $client
    *   The OpenSearch client.
    * @param array $settings
    *   THe backend settings.
    *
-   * @return \Drupal\search_api_opensearch\SearchAPI\BackendClientInterface
+   * @return BackendClientInterface
    *   The backend client.
    */
   public function create(Client $client, array $settings): BackendClientInterface {
diff --git a/src/SearchAPI/BackendClientInterface.php b/src/SearchAPI/BackendClientInterface.php
index d494ca4..837c76c 100644
--- a/src/SearchAPI/BackendClientInterface.php
+++ b/src/SearchAPI/BackendClientInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_opensearch\SearchAPI;
 
+use Drupal\search_api\Item\ItemInterface;
+use Drupal\search_api\SearchApiException;
 use Drupal\search_api\IndexInterface;
 use Drupal\search_api\Query\QueryInterface;
 
@@ -27,15 +29,15 @@ interface BackendClientInterface {
   /**
    * Indexes the specified items.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index for which items should be indexed.
-   * @param \Drupal\search_api\Item\ItemInterface[] $items
+   * @param ItemInterface[] $items
    *   An array of items to be indexed, keyed by their item IDs.
    *
    * @return string[]
    *   The IDs of all items that were successfully indexed.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if indexing was prevented by a fundamental configuration error.
    */
   public function indexItems(IndexInterface $index, array $items): array;
@@ -43,12 +45,12 @@ interface BackendClientInterface {
   /**
    * Deletes the specified items from the index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index from which items should be deleted.
    * @param string[] $item_ids
    *   The IDs of the deleted items.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurred while trying to delete the items.
    */
   public function deleteItems(IndexInterface $index, array $item_ids): void;
@@ -59,10 +61,10 @@ interface BackendClientInterface {
    * If the index was already added to the server, the object should treat this
    * as if removeIndex() and then addIndex() were called.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index to add.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurred while adding the index.
    */
   public function addIndex(IndexInterface $index): void;
@@ -73,10 +75,10 @@ interface BackendClientInterface {
    * If any user action is necessary as a result of this, the method should
    * set a message to notify the user.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The updated index.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurred while reacting to the change.
    */
   public function updateIndex(IndexInterface $index): void;
@@ -94,11 +96,11 @@ interface BackendClientInterface {
    * Implementations of this method should also check whether
    * $index->isReadOnly() and don't delete any indexed data if it is.
    *
-   * @param \Drupal\search_api\IndexInterface|string $index
+   * @param IndexInterface|string $index
    *   Either an object representing the index to remove, or its ID (if the
    *   index was completely deleted).
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurred while removing the index.
    */
   public function removeIndex($index): void;
@@ -106,13 +108,13 @@ interface BackendClientInterface {
   /**
    * Deletes all the items from the index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which items should be deleted.
    * @param string|null $datasource_id
    *   (optional) If given, only delete items from the datasource with the
    *   given ID.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurred while trying to delete indexed items.
    */
   public function clearIndex(IndexInterface $index, string $datasource_id = NULL): void;
@@ -120,7 +122,7 @@ interface BackendClientInterface {
   /**
    * Checks if an index exists on the server.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index.
    *
    * @return bool
@@ -131,10 +133,10 @@ interface BackendClientInterface {
   /**
    * Executes a search on this server.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query to execute.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error prevented the search from completing.
    */
   public function search(QueryInterface $query);
diff --git a/src/SearchAPI/FieldMapper.php b/src/SearchAPI/FieldMapper.php
index 1795dee..8fe0cee 100644
--- a/src/SearchAPI/FieldMapper.php
+++ b/src/SearchAPI/FieldMapper.php
@@ -18,23 +18,23 @@ class FieldMapper {
   /**
    * The fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface
+   * @var FieldsHelperInterface
    */
   protected $fieldsHelper;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Creates a new Field Mapper.
    *
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fieldsHelper
+   * @param FieldsHelperInterface $fieldsHelper
    *   The fields helper.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(FieldsHelperInterface $fieldsHelper, EventDispatcherInterface $eventDispatcher) {
@@ -47,7 +47,7 @@ class FieldMapper {
    *
    * @param string $indexId
    *   The index ID.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   Index object.
    *
    * @return array
@@ -98,11 +98,11 @@ class FieldMapper {
   /**
    * Creates dummy field objects for the "magic" fields present for every index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to create the fields. (Needed since field objects
    *   always need an index set.)
    *
-   * @return \Drupal\search_api\Item\FieldInterface[]
+   * @return FieldInterface[]
    *   An array of field objects for all "magic" fields, keyed by field IDs.
    *
    * @see \Drupal\search_api\Backend\BackendPluginBase::getSpecialFields()
@@ -118,7 +118,7 @@ class FieldMapper {
   /**
    * Helper function. Get the elasticsearch mapping for a field.
    *
-   * @param \Drupal\search_api\Item\FieldInterface $field
+   * @param FieldInterface $field
    *   The field.
    *
    * @return array
diff --git a/src/SearchAPI/IndexParamBuilder.php b/src/SearchAPI/IndexParamBuilder.php
index 68f3b6e..4d0deb7 100644
--- a/src/SearchAPI/IndexParamBuilder.php
+++ b/src/SearchAPI/IndexParamBuilder.php
@@ -17,23 +17,23 @@ class IndexParamBuilder {
   /**
    * The fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface
+   * @var FieldsHelperInterface
    */
   protected $fieldsHelper;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Creates a new IndexParamBuilder.
    *
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fieldsHelper
+   * @param FieldsHelperInterface $fieldsHelper
    *   The fields helper.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(FieldsHelperInterface $fieldsHelper, EventDispatcherInterface $eventDispatcher) {
@@ -46,9 +46,9 @@ class IndexParamBuilder {
    *
    * @param string $indexId
    *   The index ID.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index.
-   * @param \Drupal\search_api\Item\ItemInterface[] $items
+   * @param ItemInterface[] $items
    *   The items.
    *
    * @return array
@@ -60,7 +60,7 @@ class IndexParamBuilder {
     foreach ($items as $id => $item) {
       $data = [];
       $this->addSpecialFields($index, $item);
-      /** @var \Drupal\search_api\Item\FieldInterface $field */
+      /** @var FieldInterface $field */
       foreach ($item as $name => $field) {
         $field_type = $field->getType();
         if (!empty($field->getValues())) {
@@ -83,9 +83,9 @@ class IndexParamBuilder {
   /**
    * Adds the "magic" field values on an item.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index.
-   * @param \Drupal\search_api\Item\ItemInterface $item
+   * @param ItemInterface $item
    *   The item.
    */
   protected function addSpecialFields(IndexInterface $index, ItemInterface $item): void {
@@ -103,7 +103,7 @@ class IndexParamBuilder {
   /**
    * Builds field values.
    *
-   * @param \Drupal\search_api\Item\FieldInterface $field
+   * @param FieldInterface $field
    *   The field.
    * @param string $field_type
    *   The field type.
diff --git a/src/SearchAPI/Query/FacetParamBuilder.php b/src/SearchAPI/Query/FacetParamBuilder.php
index 6ae8d93..05f7c23 100644
--- a/src/SearchAPI/Query/FacetParamBuilder.php
+++ b/src/SearchAPI/Query/FacetParamBuilder.php
@@ -18,14 +18,14 @@ class FacetParamBuilder {
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Creates a new Facet builder.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(LoggerInterface $logger) {
@@ -35,7 +35,7 @@ class FacetParamBuilder {
   /**
    * Fill the aggregation array of the request.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   Search API query.
    * @param array $indexFields
    *   The index field, keyed by field identifier.
diff --git a/src/SearchAPI/Query/FacetResultParser.php b/src/SearchAPI/Query/FacetResultParser.php
index ec0054e..05379fb 100644
--- a/src/SearchAPI/Query/FacetResultParser.php
+++ b/src/SearchAPI/Query/FacetResultParser.php
@@ -13,14 +13,14 @@ class FacetResultParser {
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Creates a new facet result parser.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(LoggerInterface $logger) {
@@ -30,7 +30,7 @@ class FacetResultParser {
   /**
    * Parse the facet result.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query.
    * @param array $response
    *   The response.
diff --git a/src/SearchAPI/Query/FilterBuilder.php b/src/SearchAPI/Query/FilterBuilder.php
index 0896781..66f6909 100644
--- a/src/SearchAPI/Query/FilterBuilder.php
+++ b/src/SearchAPI/Query/FilterBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_opensearch\SearchAPI\Query;
 
+use Drupal\search_api\Item\FieldInterface;
 use Drupal\search_api\Query\Condition;
 use Drupal\search_api\Query\ConditionGroupInterface;
 use Drupal\search_api\SearchApiException;
@@ -15,14 +16,14 @@ class FilterBuilder {
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Creates a new filter builder.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(LoggerInterface $logger) {
@@ -32,17 +33,17 @@ class FilterBuilder {
   /**
    * Recursively parse Search API condition group.
    *
-   * @param \Drupal\search_api\Query\ConditionGroupInterface $condition_group
+   * @param ConditionGroupInterface $condition_group
    *   The condition group object that holds all conditions that should be
    *   expressed as filters.
-   * @param \Drupal\search_api\Item\FieldInterface[] $index_fields
+   * @param FieldInterface[] $index_fields
    *   An array of all indexed fields for the index, keyed by field identifier.
    *
    * @return array
    *   Array of filter parameters to apply to query based on the given Search
    *   API condition group.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an invalid condition occurs.
    */
   public function buildFilters(ConditionGroupInterface $condition_group, array $index_fields) {
@@ -122,7 +123,7 @@ class FilterBuilder {
   /**
    * Build a filter term from a Search API condition.
    *
-   * @param \Drupal\search_api\Query\Condition $condition
+   * @param Condition $condition
    *   The condition.
    *
    * @return array
@@ -236,7 +237,7 @@ class FilterBuilder {
    *   Returns the passed $filters array wrapped in an array keyed by 'should'
    *   or 'must', as appropriate, based on the given conjunction.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if there is an invalid conjunction.
    */
   protected function wrapWithConjunction(array $filters, string $conjunction) {
diff --git a/src/SearchAPI/Query/QueryParamBuilder.php b/src/SearchAPI/Query/QueryParamBuilder.php
index 524bbbb..bb5e8d4 100644
--- a/src/SearchAPI/Query/QueryParamBuilder.php
+++ b/src/SearchAPI/Query/QueryParamBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_opensearch\SearchAPI\Query;
 
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api\Item\FieldInterface;
 use Drupal\search_api_opensearch\Event\QueryParamsEvent;
 use Drupal\search_api_opensearch\SearchAPI\MoreLikeThisParamBuilder;
 use Drupal\search_api\IndexInterface;
@@ -28,77 +30,77 @@ class QueryParamBuilder {
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface
+   * @var FieldsHelperInterface
    */
   protected $fieldsHelper;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The MLT param builder.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\MoreLikeThisParamBuilder
+   * @var MoreLikeThisParamBuilder
    */
   protected $mltParamBuilder;
 
   /**
    * The search param builder.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\Query\SearchParamBuilder
+   * @var SearchParamBuilder
    */
   protected $searchParamBuilder;
 
   /**
    * The sort builder.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\Query\QuerySortBuilder
+   * @var QuerySortBuilder
    */
   protected $sortBuilder;
 
   /**
    * The filter builder.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\Query\FilterBuilder
+   * @var FilterBuilder
    */
   protected $filterBuilder;
 
   /**
    * The facet param builder.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\Query\FacetParamBuilder
+   * @var FacetParamBuilder
    */
   protected $facetBuilder;
 
   /**
    * Creates a new QueryParamBuilder.
    *
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fieldsHelper
+   * @param FieldsHelperInterface $fieldsHelper
    *   The fields helper.
-   * @param \Drupal\search_api_opensearch\SearchAPI\Query\QuerySortBuilder $sortBuilder
+   * @param QuerySortBuilder $sortBuilder
    *   The sort builder.
-   * @param \Drupal\search_api_opensearch\SearchAPI\Query\FilterBuilder $filterBuilder
+   * @param FilterBuilder $filterBuilder
    *   The filter builder.
-   * @param \Drupal\search_api_opensearch\SearchAPI\Query\SearchParamBuilder $searchParamBuilder
+   * @param SearchParamBuilder $searchParamBuilder
    *   The search param builder.
-   * @param \Drupal\search_api_opensearch\SearchAPI\MoreLikeThisParamBuilder $mltParamBuilder
+   * @param MoreLikeThisParamBuilder $mltParamBuilder
    *   The More Like This param builder.
-   * @param \Drupal\search_api_opensearch\SearchAPI\Query\FacetParamBuilder $facetBuilder
+   * @param FacetParamBuilder $facetBuilder
    *   The facet param builder.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(FieldsHelperInterface $fieldsHelper, QuerySortBuilder $sortBuilder, FilterBuilder $filterBuilder, SearchParamBuilder $searchParamBuilder, MoreLikeThisParamBuilder $mltParamBuilder, FacetParamBuilder $facetBuilder, EventDispatcherInterface $eventDispatcher, LoggerInterface $logger) {
@@ -117,7 +119,7 @@ class QueryParamBuilder {
    *
    * @param string $indexId
    *   The query.
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The index ID.
    * @param array $settings
    *   The query settings.
@@ -125,7 +127,7 @@ class QueryParamBuilder {
    * @return array
    *   Array or parameters to send along to the OpenSearch _search endpoint.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurs building query params.
    */
   public function buildQueryParams(string $indexId, QueryInterface $query, array $settings): array {
@@ -220,10 +222,10 @@ class QueryParamBuilder {
   /**
    * Gets the list of index fields.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index.
    *
-   * @return \Drupal\search_api\Item\FieldInterface[]
+   * @return FieldInterface[]
    *   The index fields, keyed by field identifier.
    */
   protected function getIndexFields(IndexInterface $index): array {
diff --git a/src/SearchAPI/Query/QueryResultParser.php b/src/SearchAPI/Query/QueryResultParser.php
index 9814443..819d32c 100644
--- a/src/SearchAPI/Query/QueryResultParser.php
+++ b/src/SearchAPI/Query/QueryResultParser.php
@@ -14,23 +14,23 @@ class QueryResultParser {
   /**
    * The Search API fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface
+   * @var FieldsHelperInterface
    */
   protected $fieldsHelper;
 
   /**
    * The facet result parser.
    *
-   * @var \Drupal\search_api_opensearch\SearchAPI\Query\FacetResultParser
+   * @var FacetResultParser
    */
   protected $facetResultParser;
 
   /**
    * Creates a new QueryResultParser.
    *
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fieldsHelper
+   * @param FieldsHelperInterface $fieldsHelper
    *   The fields helper.
-   * @param \Drupal\search_api_opensearch\SearchAPI\Query\FacetResultParser $facetResultParser
+   * @param FacetResultParser $facetResultParser
    *   The facet result parser.
    */
   public function __construct(FieldsHelperInterface $fieldsHelper, FacetResultParser $facetResultParser) {
@@ -43,12 +43,12 @@ class QueryResultParser {
    *
    * @todo Add excerpt handling.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   Search API query.
    * @param array $response
    *   Raw response array back from OpenSearch.
    *
-   * @return \Drupal\search_api\Query\ResultSetInterface
+   * @return ResultSetInterface
    *   The results of the search.
    */
   public function parseResult(QueryInterface $query, array $response): ResultSetInterface {
diff --git a/src/SearchAPI/Query/QuerySortBuilder.php b/src/SearchAPI/Query/QuerySortBuilder.php
index 7acc887..7c9e53a 100644
--- a/src/SearchAPI/Query/QuerySortBuilder.php
+++ b/src/SearchAPI/Query/QuerySortBuilder.php
@@ -13,14 +13,14 @@ class QuerySortBuilder {
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Creates a new QuerySortBuilder.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(LoggerInterface $logger) {
diff --git a/src/SearchAPI/Query/SearchParamBuilder.php b/src/SearchAPI/Query/SearchParamBuilder.php
index 5106c98..8046750 100644
--- a/src/SearchAPI/Query/SearchParamBuilder.php
+++ b/src/SearchAPI/Query/SearchParamBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_opensearch\SearchAPI\Query;
 
+use Drupal\search_api\Item\FieldInterface;
+use Drupal\search_api\SearchApiException;
 use Drupal\search_api\Query\QueryInterface;
 use MakinaCorpus\Lucene\Query;
 use MakinaCorpus\Lucene\TermQuery;
@@ -14,9 +16,9 @@ class SearchParamBuilder {
   /**
    * Builds the search params for the query.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query.
-   * @param \Drupal\search_api\Item\FieldInterface[] $indexFields
+   * @param FieldInterface[] $indexFields
    *   The index fields.
    * @param array $settings
    *   The settings.
@@ -26,7 +28,7 @@ class SearchParamBuilder {
    *   - query: the search string
    *   - fields: the query fields
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if there is an underlying Search API error.
    */
   public function buildSearchParams(QueryInterface $query, array $indexFields, array $settings): array {
@@ -82,7 +84,7 @@ class SearchParamBuilder {
    * @param string|null $fuzziness
    *   (optional) The fuzziness. Defaults to "auto".
    *
-   * @return \MakinaCorpus\Lucene\Query
+   * @return Query
    *   The lucene query.
    */
   public function buildSearchString(array $keys, ?string $fuzziness = "auto"): Query {
diff --git a/tests/src/Kernel/DataTypeTest.php b/tests/src/Kernel/DataTypeTest.php
index ff735e6..2dec402 100644
--- a/tests/src/Kernel/DataTypeTest.php
+++ b/tests/src/Kernel/DataTypeTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_opensearch\Kernel;
 
+use Drupal\search_api\DataType\DataTypePluginManager;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -20,7 +21,7 @@ class DataTypeTest extends KernelTestBase {
    * Tests the data types.
    */
   public function testHasObjectDataType() {
-    /** @var \Drupal\search_api\DataType\DataTypePluginManager $manager */
+    /** @var DataTypePluginManager $manager */
     $manager = $this->container->get('plugin.manager.search_api.data_type');
     $definitions = $manager->getDefinitions();
     $this->assertArrayHasKey('object', $definitions);
diff --git a/tests/src/Kernel/OpenSearchBackendTest.php b/tests/src/Kernel/OpenSearchBackendTest.php
index a0bb6f0..5329fd6 100644
--- a/tests/src/Kernel/OpenSearchBackendTest.php
+++ b/tests/src/Kernel/OpenSearchBackendTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\search_api_opensearch\Kernel;
 
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api_opensearch\Plugin\search_api\backend\OpenSearchBackend;
 use Drupal\search_api\Entity\Index;
 use Drupal\search_api\Entity\Server;
 use Drupal\search_api\Query\QueryInterface;
@@ -55,7 +57,7 @@ class OpenSearchBackendTest extends BackendTestBase {
    */
   protected function serverAvailable(): bool {
     try {
-      /** @var \Drupal\search_api\Entity\Server $server */
+      /** @var Server $server */
       $server = Server::load($this->serverId);
       if ($server->getBackend()->isAvailable()) {
         return TRUE;
@@ -71,6 +73,7 @@ class OpenSearchBackendTest extends BackendTestBase {
    * Tests various indexing scenarios for the search backend.
    *
    * Uses a single method to save time.
+   * @doesNotPerformAssertions
    */
   public function testBackend() {
     $this->recreateIndex();
@@ -89,11 +92,11 @@ class OpenSearchBackendTest extends BackendTestBase {
   /**
    * Re-creates the index.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    */
   protected function recreateIndex() {
     $server = Server::load($this->serverId);
-    /** @var \Drupal\search_api_opensearch\Plugin\search_api\backend\OpenSearchBackend $backend */
+    /** @var OpenSearchBackend $backend */
     $backend = $server->getBackend();
     $index = Index::load($this->indexId);
     $client = $backend->getBackendClient();
diff --git a/tests/src/Unit/SearchAPI/FieldMapperTest.php b/tests/src/Unit/SearchAPI/FieldMapperTest.php
index 7265dc1..6de995c 100644
--- a/tests/src/Unit/SearchAPI/FieldMapperTest.php
+++ b/tests/src/Unit/SearchAPI/FieldMapperTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_opensearch\Unit\SearchAPI;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -21,6 +22,7 @@ use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;
  */
 class FieldMapperTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::mapFieldParams
    */
diff --git a/tests/src/Unit/SearchAPI/IndexParamBuilderTest.php b/tests/src/Unit/SearchAPI/IndexParamBuilderTest.php
index 3c85928..b6a9224 100644
--- a/tests/src/Unit/SearchAPI/IndexParamBuilderTest.php
+++ b/tests/src/Unit/SearchAPI/IndexParamBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_opensearch\Unit\SearchAPI;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,6 +23,7 @@ use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;
  */
 class IndexParamBuilderTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/tests/src/Unit/SearchAPI/Query/FacetParamBuilderTest.php b/tests/src/Unit/SearchAPI/Query/FacetParamBuilderTest.php
index bb4e1c3..3d47fe8 100644
--- a/tests/src/Unit/SearchAPI/Query/FacetParamBuilderTest.php
+++ b/tests/src/Unit/SearchAPI/Query/FacetParamBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_opensearch\Unit\SearchAPI\Query;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\search_api\Query\QueryInterface;
 use Drupal\search_api_opensearch\SearchAPI\Query\FacetParamBuilder;
 use Drupal\Tests\UnitTestCase;
@@ -15,6 +16,7 @@ use Psr\Log\Test\TestLogger;
  */
 class FacetParamBuilderTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::buildFacetParams
    */
diff --git a/tests/src/Unit/SearchAPI/Query/FacetResultParserTest.php b/tests/src/Unit/SearchAPI/Query/FacetResultParserTest.php
index 54bc1e6..4280ef3 100644
--- a/tests/src/Unit/SearchAPI/Query/FacetResultParserTest.php
+++ b/tests/src/Unit/SearchAPI/Query/FacetResultParserTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_opensearch\Unit\SearchAPI\Query;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\search_api\Query\QueryInterface;
 use Drupal\search_api_opensearch\SearchAPI\Query\FacetResultParser;
 use Drupal\Tests\UnitTestCase;
@@ -15,6 +16,7 @@ use Psr\Log\Test\TestLogger;
  */
 class FacetResultParserTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::parseFacetResult
    */
diff --git a/tests/src/Unit/SearchAPI/Query/FilterBuilderTest.php b/tests/src/Unit/SearchAPI/Query/FilterBuilderTest.php
index 5d139f7..9b803c9 100644
--- a/tests/src/Unit/SearchAPI/Query/FilterBuilderTest.php
+++ b/tests/src/Unit/SearchAPI/Query/FilterBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_opensearch\Unit\SearchAPI\Query;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\search_api_opensearch\SearchAPI\Query\FilterBuilder;
 use Drupal\search_api\IndexInterface;
 use Drupal\search_api\Item\Field;
@@ -18,6 +19,7 @@ use Psr\Log\Test\TestLogger;
  */
 class FilterBuilderTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::buildFilters
    */
diff --git a/tests/src/Unit/SearchAPI/Query/QueryParamBuilderTest.php b/tests/src/Unit/SearchAPI/Query/QueryParamBuilderTest.php
index 65b8b94..7c83afc 100644
--- a/tests/src/Unit/SearchAPI/Query/QueryParamBuilderTest.php
+++ b/tests/src/Unit/SearchAPI/Query/QueryParamBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_opensearch\Unit\SearchAPI\Query;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\search_api\IndexInterface;
 use Drupal\search_api\Item\FieldInterface;
 use Drupal\search_api\Query\ConditionGroupInterface;
@@ -26,6 +27,7 @@ use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;
  */
 class QueryParamBuilderTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::
    */
diff --git a/tests/src/Unit/SearchAPI/Query/QueryResultParserTest.php b/tests/src/Unit/SearchAPI/Query/QueryResultParserTest.php
index f528ec8..2ad741b 100644
--- a/tests/src/Unit/SearchAPI/Query/QueryResultParserTest.php
+++ b/tests/src/Unit/SearchAPI/Query/QueryResultParserTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_opensearch\Unit\SearchAPI\Query;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\search_api_opensearch\SearchAPI\Query\FacetResultParser;
 use Drupal\search_api_opensearch\SearchAPI\Query\QueryResultParser;
 use Drupal\search_api\IndexInterface;
@@ -21,6 +22,7 @@ use Prophecy\Argument;
  */
 class QueryResultParserTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::parseResult
    */
diff --git a/tests/src/Unit/SearchAPI/Query/SearchParamBuilderTest.php b/tests/src/Unit/SearchAPI/Query/SearchParamBuilderTest.php
index fcf2220..c7e7c0b 100644
--- a/tests/src/Unit/SearchAPI/Query/SearchParamBuilderTest.php
+++ b/tests/src/Unit/SearchAPI/Query/SearchParamBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_opensearch\Unit\SearchAPI\Query;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\search_api_opensearch\Plugin\search_api\backend\OpenSearchBackend;
 use Drupal\search_api_opensearch\SearchAPI\Query\SearchParamBuilder;
 use Drupal\search_api\Entity\Server;
@@ -19,6 +20,7 @@ use MakinaCorpus\Lucene\Query;
  */
 class SearchParamBuilderTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::buildSearchParams
    */
