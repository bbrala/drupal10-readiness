modules/contrib/depcalc/depcalc.module
modules/contrib/depcalc/modules/depcalc_ui/depcalc_ui.module
modules/contrib/depcalc/src/Cache/DepcalcCacheBackend.php
modules/contrib/depcalc/src/Cache/DepcalcCacheFactory.php
modules/contrib/depcalc/src/Commands/DepcalcCommands.php
modules/contrib/depcalc/src/DepcalcServiceProvider.php
modules/contrib/depcalc/src/DependencyCalculator.php
modules/contrib/depcalc/src/DependencyCalculatorEvents.php
modules/contrib/depcalc/src/DependencyStack.php
modules/contrib/depcalc/src/DependentEntityWrapper.php
modules/contrib/depcalc/src/DependentEntityWrapperInterface.php
modules/contrib/depcalc/src/Event/CalculateEntityDependenciesEvent.php
modules/contrib/depcalc/src/Event/FilterDependencyCalculationFieldsEvent.php
modules/contrib/depcalc/src/Event/FilterDependencyConfigEntityEvent.php
modules/contrib/depcalc/src/Event/InvalidateDependenciesEvent.php
modules/contrib/depcalc/src/Event/SectionComponentDependenciesEvent.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/BaseDependencyCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/ConfigEntityDependencyCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/DrupalMediaEmbedCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EmbeddedImagesCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EntityEmbedCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EntityFormDisplayDependencyCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EntityLanguage.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EntityPathAliasCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EntityReferenceFieldDependencyCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EntityViewDisplayDependencyCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/LayoutBuilderEntityViewDisplayDependencyCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/LayoutBuilderFieldDependencyCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/LinkFieldCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/MenuItemContentDependencyCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/PathAliasEntityCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/TermParentCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/TextItemFieldDependencyCollector.php
modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/WorkflowCollector.php
modules/contrib/depcalc/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/BlockContentDependencyCollector.php
modules/contrib/depcalc/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/ConfigDependencyCollector.php
modules/contrib/depcalc/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/InlineBlockDependencyCollector.php
modules/contrib/depcalc/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/LayoutBuilderDependencyCollectorBase.php
modules/contrib/depcalc/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/ModuleDependencyCollector.php
modules/contrib/depcalc/src/FieldExtractor.php
modules/contrib/depcalc/tests/src/Functional/DepcalcClearCacheTest.php
modules/contrib/depcalc/tests/src/Kernel/ClearCacheTest.php
modules/contrib/depcalc/tests/src/Kernel/DependencyCalculatorTest.php
modules/contrib/depcalc/tests/src/Kernel/DependencyHelperTrait.php
modules/contrib/depcalc/tests/src/Kernel/EntityLanguageTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/CalculateDependenciesEventDispatcherTrait.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/ConfigEntityDependencyCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/DrupalMediaEmbedCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/EmbeddedImagesCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityEmbedCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityFormDisplayDependencyCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityPathAliasCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityReferenceFieldDependencyCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityViewDisplayDependencyCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/LinkFieldCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/MenuDependencyTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/PathAliasEntityCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/TermParentCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/TextItemFieldDependencyCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/WorkflowCollectorTest.php
modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/LayoutBuilderDependencyCalculatorTest.php

56 files with changes
=====================

1) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/LayoutBuilderDependencyCalculatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityRepository;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ @@
     $this->calculator = Drupal::service('entity.dependency.calculator');

     // Create test user.
-    /** @var \Drupal\Core\Entity\EntityRepository $entity_repository */
+    /** @var EntityRepository $entity_repository */
     $entity_repository = Drupal::service('entity.repository');
     $admin_role = $entity_repository->loadEntityByUuid(
       'user_role',
@@ @@
     ]);
     $node_type->save();

-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->create([
       'targetEntityType' => 'node',
       'bundle' => 'landing_page',
@@ @@
   public function testEntityDependencies() {
     $view = \Drupal::entityTypeManager()->getStorage('view')->load('who_s_online');
     // Calculate dependencies for an entity_view_display entity.
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.landing_page.default');

     // Extract the entity dependencies.
@@ @@
   /**
    * Gets an array of section components for testing dependencies.
    *
-   * @return \Drupal\layout_builder\SectionComponent[]
+   * @return SectionComponent[]
    */
   protected function getSectionComponents() {
     return [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/WorkflowCollectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\NodeType;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;
@@ @@
    * {@inheritdoc}
    *
    * @throws \ReflectionException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/TextItemFieldDependencyCollectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\editor\Entity\Editor;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\field\Traits\EntityReferenceTestTrait;
@@ @@
    * {@inheritdoc}
    *
    * @throws \ReflectionException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/TermParentCollectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\taxonomy\Entity\Term;

@@ @@
    * {@inheritdoc}
    *
    * @throws \ReflectionException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/MenuDependencyTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
 use Drupal\depcalc\Event\CalculateEntityDependenciesEvent;
@@ @@
    * @param array $expected_modules
    *   The list of expected modules.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @dataProvider menuDependenciesDataProvider
    */
   public function testMenuEntityDependencies(string $test_entity_type, string $test_entity_uuid, array $entities, array $expected_entities, array $expected_modules) {
-    /** @var \Drupal\Core\Entity\EntityRepositoryInterface $repository */
+    /** @var EntityRepositoryInterface $repository */
     $repository = \Drupal::service('entity.repository');
     $entity_type_manager = \Drupal::entityTypeManager();
     foreach ($entities as $entity_type => $entities_values) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/LinkFieldCollectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;

+use Drupal\depcalc\DependencyCalculator;
+use Drupal\node\NodeInterface;
 use Drupal;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
@@ @@
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   protected $calculator;

@@ @@

     foreach ($linked_nodes as $key => $linked_node_array) {
       foreach ($linked_node_array as $linked_node) {
-        /** @var \Drupal\node\NodeInterface $linked_node */
+        /** @var NodeInterface $linked_node */
         $uri_key = $key === 'entity' ? "$key:" : "$key:/";
         $node->get('link')->appendItem([
           'uri' => "{$uri_key}node/{$linked_node->id()}",
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityViewDisplayDependencyCollectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Entity\Entity\EntityViewMode;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
    * {@inheritdoc}
    *
    * @throws \ReflectionException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityReferenceFieldDependencyCollectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;

+use Drupal\depcalc\DependencyCalculator;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
@@ @@
   /**
    * DependencyCalculator.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   private $calculator;

@@ @@
   /**
    * Tests dependencies calculation for an entity reference field.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function testDependenciesCollection() {
@@ @@
   /**
    * Calculates dependencies for the given node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Node.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityPathAliasCollectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;

+use Drupal\path_alias\PathAliasInterface;
+use Drupal\depcalc\DependencyCalculator;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
@@ @@
   /**
    * The path alias.
    *
-   * @var \Drupal\path_alias\PathAliasInterface
+   * @var PathAliasInterface
    */
   protected $alias;

@@ @@
   /**
    * The dependency calculator.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   protected $calculator;

@@ @@
   /**
    * A test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * Calculates dependencies for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityFormDisplayDependencyCollectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;

+use Drupal\depcalc\DependencyCalculator;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityFormMode;
 use Drupal\depcalc\DependencyStack;
@@ @@
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   private $calculator;

@@ @@
   /**
    * Tests dependency calculation of entity form display.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function testEntityFormDisplayDependencyCollection() {
@@ @@
     $this->assertArrayHasKey($enabledFormDisplay->uuid(), $dependencies);
     $this->assertArrayNotHasKey($disabledFormDisplay->uuid(), $dependencies);

-    /** @var \Drupal\depcalc\DependentEntityWrapper $formDisplayEntityWrapper */
+    /** @var DependentEntityWrapper $formDisplayEntityWrapper */
     $formDisplayEntityWrapper = $dependencies[$enabledFormDisplay->uuid()];
     $this->assertEquals($enabledFormDisplay->uuid(), $formDisplayEntityWrapper->getUuid());
     $this->assertEquals('entity_form_display', $enabledFormDisplay->getEntityTypeId());
@@ @@
    * @param bool $status
    *   Publishing status.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Form display.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function createFormDisplay(string $targetEntityType, string $bundle, string $mode, bool $status) {
     (EntityFormMode::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/EmbeddedImagesCollectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;

+use Drupal\depcalc\DependencyCalculator;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\file\FileUsage\FileUsageInterface;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
 use Drupal\depcalc\EventSubscriber\DependencyCollector\EmbeddedImagesCollector;
@@ @@
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   private $calculator;

@@ @@
    * @param array $usages
    *   Usages map for files.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @dataProvider dependenciesCalculationProvider
    */
@@ @@
    * @param array $usages
    *   Usages map for files.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @dataProvider dependenciesCalculationProvider
    */
   public function testDependenciesCalculationWithoutImagesCollector(array $files_ids, array $usages) {
-    $mock = $this->getMockBuilder(EmbeddedImagesCollector::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mock = $this->createMock(EmbeddedImagesCollector::class);
     \Drupal::getContainer()->set('embedded_images.calculator', $mock);

     $node = $this->createNode();
@@ @@
    *   File UUID.
    * @param string $usages
    *   File usages count.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Node.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function uploadAndAttachFileToNode($uuid, $usages, NodeInterface $node) {
     $uri = sprintf('public://file-%s.png', $this->randomMachineName());
@@ @@
   /**
    * Wraps the file usage service.
    *
-   * @return \Drupal\file\FileUsage\FileUsageInterface
+   * @return FileUsageInterface
    *   File usage service.
    */
   protected static function fileUsage() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/DrupalMediaEmbedCollectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;

+use Drupal\depcalc\DependencyCalculator;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
 use Drupal\media\Entity\Media;
@@ @@
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   private $calculator;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/ConfigEntityDependencyCollectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;

+use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
+use Drupal\Tests\node\Traits\NodeCreationTrait;
+use Drupal\depcalc\DependencyCalculator;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\responsive_image\ResponsiveImageStyleInterface;
+use Drupal\depcalc\DependentEntityWrapperInterface;
+use Drupal\image\ImageStyleInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependencyStack;
@@ @@
  */
 class ConfigEntityDependencyCollectorTest extends KernelTestBase {

-  use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
-  use Drupal\Tests\node\Traits\NodeCreationTrait;
+  use ContentTypeCreationTrait;
+  use NodeCreationTrait;

   /**
    * {@inheritdoc}
@@ @@
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   private $calculator;

@@ @@
   /**
    * Tests config entities dependency calculation.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function testConfigEntitiesDependencyCalculation() {
@@ @@
     $style2 = $this->createImageStyle('dummy_image_style_2');

     // Creating a responsive image style which depends on the above styles.
-    /** @var \Drupal\responsive_image\ResponsiveImageStyleInterface $responsiveImageStyle */
+    /** @var ResponsiveImageStyleInterface $responsiveImageStyle */
     $responsiveImageStyle = ResponsiveImageStyle::create([
       'id' => 'dummy_responsive_image_style_1',
       'label' => 'Dummy responsive image style 1',
@@ @@
   /**
    * Tests language config dependencies calculation.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function testLanguageConfigEntitiesDependencyCalculation() {
@@ @@
     $this->assertArrayHasKey('language', array_flip($csDependencies['module']));
     $this->assertArrayHasKey('language', array_flip($frDependencies['module']));

-    /** @var \Drupal\depcalc\DependentEntityWrapperInterface $csNodeDependency */
+    /** @var DependentEntityWrapperInterface $csNodeDependency */
     $csNodeDependency = $csDependencies[$csNode->uuid()];
     $this->assertArrayHasKey($csLanguage->uuid(), $csNodeDependency->getDependencies());
     $this->assertArrayHasKey($frLanguage->uuid(), $csNodeDependency->getDependencies());
@@ @@
    * @param string $name
    *   Image style name.
    *
-   * @return \Drupal\image\ImageStyleInterface
+   * @return ImageStyleInterface
    *   Image style.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function createImageStyle(string $name): EntityInterface {
     $style = ImageStyle::create([
@@ @@
    * @param string $langcode
    *   Language code.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   Test node.
    */
   private function createTestNode(string $langcode): NodeInterface {
@@ @@
    * @return array
    *   Languages list.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function getTestLanguages(): array {
     foreach (['cs', 'fr'] as $language) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyCollector/CalculateDependenciesEventDispatcherTrait.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Dispatches dependency calculation event.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to use in the event.
    *
-   * @return \Drupal\depcalc\Event\CalculateEntityDependenciesEvent
+   * @return CalculateEntityDependenciesEvent
    *   The event.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/depcalc/tests/src/Kernel/EntityLanguageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel;

+use Drupal\depcalc\DependencyCalculator;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   protected $calculator;

@@ @@
   /**
    * Node object.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;

@@ @@
   /**
    * Tests node dependencies when entity translation is enabled.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testEntityTranslationEnabled(): void {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/depcalc/tests/src/Kernel/DependencyHelperTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel;

+use Drupal\depcalc\DependencyCalculator;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
@@ @@
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   protected $calculator;

@@ @@
   /**
    * Returns the list of entity dependencies.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
@@ @@
   /**
    * Returns the list of module dependencies.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
    * @return array
@@ @@
   /**
    * Calculate entity dependencies and return the DependentEntityWrapper object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface|null
+   * @return DependentEntityWrapperInterface|null
    *   The DependentEntityWrapper object.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/depcalc/tests/src/Kernel/DependencyCalculatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel;

+use Drupal\depcalc\DependencyCalculator;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityRepository;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependencyStack;
@@ @@
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   protected $calculator;

@@ @@
   /**
    * The DependentEntityWrapper object.
    *
-   * @var \Drupal\depcalc\DependentEntityWrapper
+   * @var DependentEntityWrapper
    */
   protected $dependentEntityWrapper;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ @@
     $this->calculator = Drupal::service('entity.dependency.calculator');

     // Create test user.
-    /** @var \Drupal\Core\Entity\EntityRepository $entity_repository */
+    /** @var EntityRepository $entity_repository */
     $entity_repository = Drupal::service('entity.repository');
     $admin_role = $entity_repository->loadEntityByUuid(
       'user_role',
@@ @@
    */
   public function testEntityDependencies(string $entity_type, array $entities, array $expected_entities, array $expected_modules) {
     foreach ($entities as $entity_values) {
-      /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+      /** @var EntityTypeManagerInterface $entity_type_manager */
       $entity_type_manager = Drupal::service('entity_type.manager');
       $entity = $entity_type_manager->getStorage($entity_type)->create($entity_values);
       $entity->save();
@@ @@
     }

     // Calculate dependencies for the last entity from the $entities list.
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $actual_entities = $this->getEntityDependencies($entity);
     $this->assertEquals($expected_entities, $actual_entities);
     $actual_modules = $this->getModuleDependencies($entity);
@@ @@
   /**
    * Returns the list of entity dependencies.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
@@ @@
   /**
    * Returns the list of module dependencies.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
    * @return array
@@ @@
   /**
    * Calculate entity dependencies and return the DependentEntityWrapper object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapper
+   * @return DependentEntityWrapper
    *   The DependentEntityWrapper object.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/depcalc/tests/src/Kernel/ClearCacheTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc\Kernel;

+use Drupal\depcalc\Cache\DepcalcCacheBackend;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Entity\EntityRepository;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\file\Entity\File;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The Depcalc Cache backend.
    *
-   * @var \Drupal\depcalc\Cache\DepcalcCacheBackend
+   * @var DepcalcCacheBackend
    */
   protected $depcalcCache;

@@ @@
   /**
    * The database connection
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
     $this->database = $this->container->get('database');

     // Create test user.
-    /** @var \Drupal\Core\Entity\EntityRepository $entity_repository */
+    /** @var EntityRepository $entity_repository */
     $entity_repository = $this->container->get('entity.repository');
     $admin_role = $entity_repository->loadEntityByUuid(
       'user_role',
@@ @@
    */
   public function testClearCache(string $entity_type, array $entities, array $expected_entities): void {
     foreach ($entities as $entity_values) {
-      /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+      /** @var EntityTypeManagerInterface $entity_type_manager */
       $entity_type_manager = $this->container->get('entity_type.manager');
       $entity = $entity_type_manager->getStorage($entity_type)->create($entity_values);
       $entity->save();
     }
     // Calculate dependencies for the last entity from the $entities list.
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $actual_entities = $this->getEntityDependencies($entity);
     $this->assertSame($expected_entities, $actual_entities);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/depcalc/tests/src/Functional/DepcalcClearCacheTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\depcalc_ui\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\depcalc\Cache\DepcalcCacheBackend;
+use Drupal\Core\Database\Connection;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\depcalc\Kernel\DependencyHelperTrait;

@@ @@
   /**
    * User that has administer permission.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $authorizedUser;

@@ @@
   /**
    * User that is $unauthorizedUser.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $unauthorizedUser;

@@ @@
   /**
    * The Depcalc Cache backend.
    *
-   * @var \Drupal\depcalc\Cache\DepcalcCacheBackend
+   * @var DepcalcCacheBackend
    */
   protected $depcalcCache;

@@ @@
   /**
    * The database connection
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/depcalc/src/FieldExtractor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc;

+use Drupal\Core\Field\FieldItemListInterface;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\depcalc\Event\FilterDependencyCalculationFieldsEvent;

@@ @@
   /**
    * Extract all fields in all translations that match our criteria.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param callable $condition
    *   The condition.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface[]
+   * @return FieldItemListInterface[]
    *   The list of fields.
    */
   public static function getFieldsFromEntity(ContentEntityInterface $entity, callable $condition) {
@@ @@
     $languages = $entity->getTranslationLanguages();
     /**
      * @var string $field_name
-     * @var \Drupal\Core\Field\FieldItemListInterface $field
+     * @var FieldItemListInterface $field
      */
     foreach ($entity as $field_name => $field) {
       // Check if field definition type is a link.
@@ @@
     }
     if ($fields) {
       $event = new FilterDependencyCalculationFieldsEvent($entity, ...$fields);
-      /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher */
+      /** @var EventDispatcherInterface $dispatcher */
       $dispatcher = \Drupal::service('event_dispatcher');
-      $dispatcher->dispatch(DependencyCalculatorEvents::FILTER_FIELDS, $event);
+      $dispatcher->dispatch($event, DependencyCalculatorEvents::FILTER_FIELDS);
       $fields = $event->getFields();
     }
     return $fields;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


21) modules/contrib/depcalc/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/ModuleDependencyCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\LayoutBuilderComponentDepencyCollector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\Event\SectionComponentDependenciesEvent;
@@ @@
   /**
    * Calculates the entities referenced on Layout Builder components.
    *
-   * @param \Drupal\depcalc\Event\SectionComponentDependenciesEvent $event
+   * @param SectionComponentDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateSectionComponentDependencies(SectionComponentDependenciesEvent $event) {
     $component = $event->getComponent();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/depcalc/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/LayoutBuilderDependencyCollectorBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\LayoutBuilderComponentDepencyCollector;

+use Drupal\Core\Layout\LayoutPluginManager;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\layout_builder\SectionComponent;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Layout\LayoutPluginManagerInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\DependentEntityWrapper;
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * The layout plugin manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManager
+   * @var LayoutPluginManager
    */
   protected $layoutPluginManager;

@@ @@
   /**
    * The LayoutBuilderDependencyCollectorBase constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Layout\LayoutPluginManagerInterface|null $layoutPluginManager
+   * @param LayoutPluginManagerInterface|null $layoutPluginManager
    *   The LayoutPluginManager
    */
   public function __construct(EventDispatcherInterface $dispatcher, LayoutPluginManagerInterface $layoutPluginManager = NULL) {
@@ @@
   /**
    * Set module dependencies to the event.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The calculate entity dependencies event.
-   * @param \Drupal\layout_builder\Section $section
+   * @param Section $section
    *   The section.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function addSectionDependencies(CalculateEntityDependenciesEvent $event, Section $section) {
     $layout_id = $section->getLayoutId();
@@ @@
   /**
    * Adds dependencies from components.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The calculate entity dependencies event.
-   * @param \Drupal\layout_builder\SectionComponent[] $components
+   * @param SectionComponent[] $components
    *   The components for this field.
    *
    * @throws \Exception
@@ @@
    * Adds entity dependencies from this layout builder field to this event
    * dependencies.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The calculate entity dependencies event.
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entity dependencies.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/depcalc/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/InlineBlockDependencyCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\LayoutBuilderComponentDepencyCollector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\Event\SectionComponentDependenciesEvent;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * TextItemFieldDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Calculates the entities referenced on Layout Builder components.
    *
-   * @param \Drupal\depcalc\Event\SectionComponentDependenciesEvent $event
+   * @param SectionComponentDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateSectionComponentDependencies(SectionComponentDependenciesEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/depcalc/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/ConfigDependencyCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\LayoutBuilderComponentDepencyCollector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\Event\SectionComponentDependenciesEvent;
@@ @@
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * ConfigEntityDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
    */
   public function __construct(ConfigManagerInterface $config_manager) {
@@ @@
   /**
    * Calculates the entities referenced on Layout Builder components.
    *
-   * @param \Drupal\depcalc\Event\SectionComponentDependenciesEvent $event
+   * @param SectionComponentDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateSectionComponentDependencies(SectionComponentDependenciesEvent $event) {
     $component = $event->getComponent();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/depcalc/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/BlockContentDependencyCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\LayoutBuilderComponentDepencyCollector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\block_content\Plugin\Block\BlockContentBlock;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * TextItemFieldDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Calculates the entities referenced on Layout Builder components.
    *
-   * @param \Drupal\depcalc\Event\SectionComponentDependenciesEvent $event
+   * @param SectionComponentDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateSectionComponentDependencies(SectionComponentDependenciesEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/WorkflowCollector.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Moderation Information
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInfo;

@@ @@
   /**
    * EntityFormDisplayDependencyCollector constructor.
    *
-   * @param \Drupal\content_moderation\ModerationInformationInterface|null $moderation_information
+   * @param ModerationInformationInterface|null $moderation_information
    *   The moderation information.
    */
   public function __construct(ModerationInformationInterface $moderation_information = NULL) {
@@ @@
   /**
    * Calculates the associated workflows.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/TextItemFieldDependencyCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * TextItemFieldDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Calculates the associated filter_format entity for any text item field.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     // @todo determine if there's a better way to catch this field type for other classes which might some day extend it.
@@ @@
     }
     /**
      * @var string $field_name
-     * @var \Drupal\Core\Field\FieldItemListInterface $field
+     * @var FieldItemListInterface $field
      */
     foreach ($fields as $field) {
       foreach ($field as $item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/TermParentCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\taxonomy\TermInterface;
+use Drupal\taxonomy\TermStorage;
 use Drupal\Core\Database\Connection;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\DependentEntityWrapper;
@@ @@
 class TermParentCollector extends BaseDependencyCollector {

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * TermParentCollector constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(Connection $database) {
@@ @@
   /**
    * Add parent terms to dependency calculation.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The CalculateEntityDependenciesEvent event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if ($event->getWrapper()->getEntityTypeId() == 'taxonomy_term') {
-      /** @var \Drupal\taxonomy\TermInterface $term */
+      /** @var TermInterface $term */
       $term = $event->getEntity();
-      /** @var \Drupal\taxonomy\TermStorage $storage */
+      /** @var TermStorage $storage */
       $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
       $parents = $storage->loadParents($term->id());
       foreach($parents as $parent) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/PathAliasEntityCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\path_alias\Entity\PathAlias;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
@@ @@
   /**
    * The url matcher.
    *
-   * @var \Symfony\Component\Routing\Matcher\UrlMatcherInterface
+   * @var UrlMatcherInterface
    */
   protected $matcher;

@@ @@

   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if ($event->getEntity()->getEntityTypeId() === 'path_alias' && \Drupal::moduleHandler()->moduleExists('path_alias')) {
-      /** @var \Drupal\path_alias\Entity\PathAlias $entity */
+      /** @var PathAlias $entity */
       $entity = $event->getEntity();
       $params = $this->matcher->match($entity->getPath());
       foreach ($params['_raw_variables']->keys() as $parameter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/MenuItemContentDependencyCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\DependentEntityWrapper;
 use Drupal\depcalc\Event\CalculateEntityDependenciesEvent;
@@ @@
   }

   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $event->getEntity();
     if ($entity->getEntityTypeId() !== 'menu_link_content') {
       return;
@@ @@
       return;
     }
     [$parent_type, $uuid] = explode(':', $parent);
-    /** @var \Drupal\Core\Entity\EntityInterface $parent_menu */
+    /** @var EntityInterface $parent_menu */
     $parent_menu = \Drupal::service('entity.repository')->loadEntityByUuid($parent_type, $uuid);
     if ($parent_menu && !$event->getStack()->hasDependency($parent_menu->uuid())) {
       $parent_wrapper = new DependentEntityWrapper($parent_menu);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/LinkFieldCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\link\Plugin\Field\FieldType\LinkItem;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * LinkFieldCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Calculates menu link dependencies.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
@@ @@
         /**
          * Loop through field items for relevant dependencies.
          *
-         * @var \Drupal\link\Plugin\Field\FieldType\LinkItem $item
+         * @var LinkItem $item
          */
         foreach ($field as $item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/LayoutBuilderFieldDependencyCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
@@ @@
   /**
    * Calculates the entities referenced on Layout Builder components.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if (!$this->layoutPluginManager) {
@@ @@
   /**
    * Determines if the field is of one of the specified types.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/LayoutBuilderEntityViewDisplayDependencyCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\Event\CalculateEntityDependenciesEvent;
 use Drupal\depcalc\EventSubscriber\LayoutBuilderComponentDepencyCollector\LayoutBuilderDependencyCollectorBase;
@@ @@
   /**
    * Calculates the entities referenced in Layout Builder components.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if (!$this->layoutPluginManager) {
       return;
     }
-    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $entity */
+    /** @var EntityViewDisplay $entity */
     $entity = $event->getEntity();
     if ($entity->getEntityTypeId() !== 'entity_view_display') {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EntityViewDisplayDependencyCollector.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EntityViewDisplayDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Calculates the associated entity view display.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EntityReferenceFieldDependencyCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
@@ @@
   /**
    * Calculates the referenced entities.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     $entity = $event->getEntity();
@@ @@
   /**
    * Determines if the field is of one of the specified types.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EntityPathAliasCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\path_alias\PathAliasStorage;
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Drupal\depcalc\DependencyCalculatorEvents;
@@ @@
       $entity = $event->getEntity();
       try {
         $uri = "/{$entity->toUrl()->getInternalPath()}";
-        /** @var \Drupal\path_alias\PathAliasStorage $storage */
+        /** @var PathAliasStorage $storage */
         $storage = \Drupal::entityTypeManager()->getStorage('path_alias');
         $paths = $storage->loadByProperties(['path' => $uri]);
         if ($paths) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EntityLanguage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * EntityLanguage constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Calculates the language of content entities.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if (!$this->moduleHandler->moduleExists('language')) {
@@ @@
     if ($entity instanceof ContentEntityInterface && $entity instanceof TranslatableInterface) {
       $fields = FieldExtractor::getFieldsFromEntity($entity, function (ContentEntityInterface $entity, $field_name, FieldItemListInterface $field) { return $field->getFieldDefinition()->getType() == 'language'; });
       foreach ($fields as $field) {
-        /** @var \Drupal\language\Entity\ContentLanguageSettings $settings */
+        /** @var ContentLanguageSettings $settings */
         $settings = \Drupal::entityTypeManager()->getStorage('language_content_settings')->load("{$entity->getEntityTypeId()}.{$entity->bundle()}");
         if (!$this->isContentTranslationEnabled($settings)) {
           return;
@@ @@
   /**
    * Check when content translation is enabled.
    *
-   * @param \Drupal\language\Entity\ContentLanguageSettings|null $settings
+   * @param ContentLanguageSettings|null $settings
    *   The content translation setting.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EntityFormDisplayDependencyCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EntityFormDisplayDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Calculates the associated entity form display.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if ($event->getEntity() instanceof ContentEntityInterface) {
@@ @@
   }

   /**
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
-   *
-   * @todo Determine if commented code is desirable functionality or not.
-   *
-   * The entity_view_displays often don't exist for simple entity types like
-   * taxonomy terms until someone has interacted with the "manage display" tab.
-   * This indicates that the fields or the display of fields may have been
-   * altered in some relevant way, but since terms don't have any attached
-   * fields by default, they also don't get a corresponding entity_view_display
-   * object until that changes or there has been some sort of interaction that
-   * caused it to come into existence. This may actually be desirable for us
-   * to not create and export the entity, but the inverse may actually prove to
-   * be true as well, so the code has been left for later evaluation.
-   */
+ * @param CalculateEntityDependenciesEvent $event
+ *
+ * @todo Determine if commented code is desirable functionality or not.
+ *
+ * The entity_view_displays often don't exist for simple entity types like
+ * taxonomy terms until someone has interacted with the "manage display" tab.
+ * This indicates that the fields or the display of fields may have been
+ * altered in some relevant way, but since terms don't have any attached
+ * fields by default, they also don't get a corresponding entity_view_display
+ * object until that changes or there has been some sort of interaction that
+ * caused it to come into existence. This may actually be desirable for us
+ * to not create and export the entity, but the inverse may actually prove to
+ * be true as well, so the code has been left for later evaluation.
+ */
 //  public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
 //    $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
 //    $entity = $event->getEntity();
@@ @@
 //      $event->stopPropagation();
 //    }
 //  }
+

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EntityEmbedCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\filter\Entity\FilterFormat;
+use Drupal\filter\Plugin\FilterInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Calculates entities embedded into the text areas of other entities.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The CalculateEntityDependenciesEvent event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if (!\Drupal::moduleHandler()->moduleExists('entity_embed')) {
@@ @@
   /**
    * Extracts embedded entities from the text fields of another entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity from which to extract embedded entities.
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The CalculateEntityDependenciesEvent event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function extractEmbeddedEntities(EntityInterface $entity, CalculateEntityDependenciesEvent $event) {
     if (!$entity instanceof ContentEntityInterface) {
@@ @@
         if (empty($value['format'])) {
           continue;
         }
-        /** @var \Drupal\filter\Entity\FilterFormat $filter_format */
+        /** @var FilterFormat $filter_format */
         $filter_format = \Drupal::entityTypeManager()->getStorage('filter_format')->load($value['format']);
         $filters = $filter_format->filters();
         $filters->sort();
-        /** @var \Drupal\filter\Plugin\FilterInterface $filter */
+        /** @var FilterInterface $filter */
         foreach ($filters as $filter) {
           // If this text area can have entities embedded, we want to
           // manually extract the entities contained therein.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/EmbeddedImagesCollector.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * EmbeddedImagesCollector constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
    */
   public function __construct(Connection $database, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Reacts on CALCULATE_DEPENDENCIES event.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   Event.
    *
    * @throws \Exception
@@ @@
   /**
    * Builds list of attached files.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    * @param string $module
    *   Module name.
    *
-   * @return \Drupal\file\Entity\File[]
+   * @return File[]
    *   Files list.
    */
   protected function getAttachedFiles(EntityInterface $entity, string $module = 'file'): array {
@@ @@
   /**
    * Add dependency.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   Event.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/DrupalMediaEmbedCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\filter\Entity\FilterFormat;
+use Drupal\filter\Plugin\FilterInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * Calculates media entities embedded into the text areas of other entities.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The CalculateEntityDependenciesEvent event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {

@@ @@
         if (empty($value['format'])) {
           continue;
         }
-        /** @var \Drupal\filter\Entity\FilterFormat $filter_format */
+        /** @var FilterFormat $filter_format */
         $filter_format = \Drupal::entityTypeManager()->getStorage('filter_format')->load($value['format']);
         $filters = $filter_format->filters();
         $filters->sort();
-        /** @var \Drupal\filter\Plugin\FilterInterface $filter */
+        /** @var FilterInterface $filter */
         foreach ($filters as $filter) {
           // If this text area can have entities embedded, we want to
           // manually extract the entities contained therein.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/ConfigEntityDependencyCollector.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * ConfigEntityDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
    */
   public function __construct(ConfigManagerInterface $config_manager) {
@@ @@
   /**
    * Calculates config entity dependencies.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    * @param string $event_name
    *   The name of the event.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
    *
    * @throws \Exception
@@ @@
           if ($sub_entity) {
             $sub_wrapper = new DependentEntityWrapper($sub_entity);
             $config_dependency_event = new FilterDependencyConfigEntityEvent($sub_wrapper);
-            $dispatcher->dispatch(DependencyCalculatorEvents::FILTER_CONFIG_ENTITIES, $config_dependency_event);
+            $dispatcher->dispatch($config_dependency_event, DependencyCalculatorEvents::FILTER_CONFIG_ENTITIES);
             if (!$config_dependency_event->isCalculable()) {
               continue;
             }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/depcalc/src/EventSubscriber/DependencyCollector/BaseDependencyCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;

+use Drupal\depcalc\DependencyCalculator;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapperInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ @@
   /**
    * Properly adds dependencies and their modules to a wrapper object.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface $wrapper
+   * @param DependentEntityWrapperInterface $wrapper
    *   The object to add dependencies to.
-   * @param \Drupal\depcalc\DependencyStack $stack
+   * @param DependencyStack $stack
    *   The stack with all loaded dependencies.
    * @param array $dependencies
    *   The list of dependencies to add to the wrapper.
@@ @@
   /**
    * Gets the dependency calculator.
    *
-   * @return \Drupal\depcalc\DependencyCalculator
+   * @return DependencyCalculator
    *   The dependency calculator.
    */
   protected function getCalculator() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


44) modules/contrib/depcalc/src/Event/SectionComponentDependenciesEvent.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The component for this event.
    *
-   * @var \Drupal\layout_builder\SectionComponent
+   * @var SectionComponent
    */
   protected $component;

@@ @@
   /**
    * The entity dependencies for this event.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entityDependencies;

@@ @@
   /**
    * SectionComponentDependenciesEvent constructor.
    *
-   * @param \Drupal\layout_builder\SectionComponent $component
+   * @param SectionComponent $component
    *   The section component.
    */
   public function __construct(SectionComponent $component) {
@@ @@
   /**
    * Get the event component.
    *
-   * @return \Drupal\layout_builder\SectionComponent
+   * @return SectionComponent
    *   The section component.
    */
   public function getComponent() {
@@ @@
   /**
    * Get the entity dependencies for this event.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entity dependencies.
    */
   public function getEntityDependencies() {
@@ @@
   /**
    * Adds an entity as dependency.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function addEntityDependency(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/depcalc/src/Event/InvalidateDependenciesEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\Event;

+use Drupal\depcalc\DependentEntityWrapperInterface;
 use Symfony\Contracts\EventDispatcher\Event;

 class InvalidateDependenciesEvent extends Event {
@@ @@
   /**
    * The list of DependentEntityWrappers being invalidated.
    *
-   * @var \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @var DependentEntityWrapperInterface[]
    */
   protected $wrappers;

@@ @@
   /**
    * InvalidateDependenciesEvent constructor.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface[] $wrappers
+   * @param DependentEntityWrapperInterface[] $wrappers
    */
   public function __construct(array $wrappers) {
     $this->wrappers = $wrappers;
@@ @@
   }

   /**
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @return DependentEntityWrapperInterface[]
    */
   public function getWrappers(): array {
     return $this->wrappers;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/depcalc/src/Event/FilterDependencyConfigEntityEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\Event;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependentEntityWrapper;
 use Symfony\Contracts\EventDispatcher\Event;

@@ @@
   /**
    * The dependent entity wrapper.
    *
-   * @var \Drupal\depcalc\DependentEntityWrapper
+   * @var DependentEntityWrapper
    */
   protected $wrapper;

@@ @@
   /**
    * FilterDependencyConfigEntityEvent constructor.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapper $wrapper
+   * @param DependentEntityWrapper $wrapper
    *   The entity wrapper for calculation.
    */
   public function __construct(DependentEntityWrapper $wrapper) {
@@ @@
   /**
    * Get the wrapper of the entity we are considering calculating.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapper
+   * @return DependentEntityWrapper
    *   The entity wrapper for calculation.
    */
   public function getWrapper() {
@@ @@
   /**
    * Get the entity we are considering calculating.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity for calculation.
    */
   public function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/depcalc/src/Event/FilterDependencyCalculationFieldsEvent.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The entity to calculate dependencies.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * The entity fields.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface[]
+   * @var FieldItemListInterface[]
    */
   protected $fields;

@@ @@
   /**
    * FilterDependencyCalculationFieldsEvent constructor.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Field\FieldItemListInterface ...$fields
+   * @param FieldItemListInterface ...$fields
    *   The fields.
    */
   public function __construct(ContentEntityInterface $entity, FieldItemListInterface ...$fields) {
@@ @@
   /**
    * Retrieve the entity object
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   public function getEntity() {
@@ @@
   /**
    * Get the fields to be filtered.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface[]
+   * @return FieldItemListInterface[]
    *   The fields.
    */
   public function getFields() {
@@ @@
   /**
    * Set a filtered list of fields.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface ...$fields
+   * @param FieldItemListInterface ...$fields
    *   The fields.
    */
   public function setFields(FieldItemListInterface ...$fields) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/depcalc/src/Event/CalculateEntityDependenciesEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\Event;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapperInterface;
 use Symfony\Contracts\EventDispatcher\Event;
@@ @@
   /**
    * The wrapper of the entity for which we are calculating dependencies.
    *
-   * @var \Drupal\depcalc\DependentEntityWrapperInterface
+   * @var DependentEntityWrapperInterface
    */
   protected $wrapper;

@@ @@
   /**
    * The dependency stack.
    *
-   * @var \Drupal\depcalc\DependencyStack
+   * @var DependencyStack
    */
   protected $stack;

@@ @@
   /**
    * CalculateEntityDependenciesEvent constructor.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface $wrapper
+   * @param DependentEntityWrapperInterface $wrapper
    *   The entity for which we are calculating dependencies.
-   * @param \Drupal\depcalc\DependencyStack $stack
+   * @param DependencyStack $stack
    *   The dependency stack.
    */
   public function __construct(DependentEntityWrapperInterface $wrapper, DependencyStack $stack) {
@@ @@
   /**
    * Get the dependency wrapper of the entity.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface
+   * @return DependentEntityWrapperInterface
    *   The wrapper.
    */
   public function getWrapper() {
@@ @@
   /**
    * Get the entity for which dependencies are being calculated.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity() {
@@ @@
   /**
    * Get the dependency stack.
    *
-   * @return \Drupal\depcalc\DependencyStack
+   * @return DependencyStack
    *   The dependency stack.
    */
   public function getStack() {
@@ @@
   /**
    * Add a dependency to this wrapper.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface $dependency
+   * @param DependentEntityWrapperInterface $dependency
    *   The dependency to be added.
    */
   public function addDependency(DependentEntityWrapperInterface $dependency) {
@@ @@
   /**
    * Add a group of dependencies to this wrapper.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface ...$dependencies
+   * @param DependentEntityWrapperInterface ...$dependencies
    *   The dependencies to add to this wrapper.
    */
   public function setDependencies(DependentEntityWrapperInterface ...$dependencies) {
@@ @@
   /**
    * A list of all uuids this entity is dependent on.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @return DependentEntityWrapperInterface[]
    *   The dependencies.
    */
   public function getDependencies() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/depcalc/src/DependentEntityWrapperInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc;

+use Drupal\Core\Entity\EntityInterface;
 /**
  * Interface DependentEntityWrapperInterface.
  */
@@ @@
   /**
    * Get the entity for which we are collecting dependencies.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   public function getEntity();

@@ @@
    *
    * @param \Drupal\depcalc\DependentEntityWrapperInterface $dependency
    *   The dependency to add.
-   * @param \Drupal\depcalc\DependencyStack $stack
+   * @param DependencyStack $stack
    *   The dependency stack.
    * @param bool $direct_child
    *   Whether given wrapper is a direct child.
@@ @@
   /**
    * Add dependencies of this entity.
    *
-   * @param \Drupal\depcalc\DependencyStack $stack
+   * @param DependencyStack $stack
    *   The dependency stack.
    * @param \Drupal\depcalc\DependentEntityWrapperInterface ...$dependencies
    *   Entities wrappers to add as a dependency.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


50) modules/contrib/depcalc/src/DependentEntityWrapper.php:80

    ---------- begin diff ----------
@@ @@
    * minimum of details to reconstruct it are kept. This is to reduce memory
    * overhead during the run time of dependency calculation.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which we are calculating dependencies.
    * @param bool $additional_processing
    *   Whether or not the entity will require additional processing.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


51) modules/contrib/depcalc/src/DependencyStack.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The dependencies list.
    *
-   * @var \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @var DependentEntityWrapperInterface[]
    */
   protected $dependencies = [];

@@ @@
   /**
    * DependencyStack constructor.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface ...$dependencies
+   * @param DependentEntityWrapperInterface ...$dependencies
    *   Any previously built dependency to prevent recalculation.
    */
   public function __construct(DependentEntityWrapperInterface ...$dependencies) {
@@ @@
   /**
    * Add a dependency to the stack.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface $dependency
+   * @param DependentEntityWrapperInterface $dependency
    *   The dependency to add to the stack.
    * @param bool $cache
    *   TRUE if to add to cache (Default), FALSE otherwise.
@@ @@
    * @param string $uuid
    *   The uuid of the dependency to retrieve.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface|null
+   * @return DependentEntityWrapperInterface|null
    *   The dependent entity wrapper.
    */
   public function getDependency($uuid) {
@@ @@
    * @param string[] $dependencies
    *   The list of dependencies, by uuid, to retrieve.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @return DependentEntityWrapperInterface[]
    *   The dependencies.
    *
    * @throws \Exception
@@ @@
   /**
    * * Get a list of dependencies within the stack.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @return DependentEntityWrapperInterface[]
    *   The dependencies.
    */
   public function getDependencies() {
@@ @@
    * This will exclude dependencies that have been created but which still
    * require additional processing.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @return DependentEntityWrapperInterface[]
    *   The processed dependencies.
    */
   public function getProcessedDependencies() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


52) modules/contrib/depcalc/src/DependencyCalculator.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * The depcalc logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The DependencyCalculator constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The depcalc logger channel.
    */
   public function __construct(EventDispatcherInterface $dispatcher, LoggerChannelInterface $logger) {
@@ @@
   /**
    * Calculates the dependencies.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface $wrapper
+   * @param DependentEntityWrapperInterface $wrapper
    *   The dependency wrapper for the entity to calculate dependencies.
-   * @param \Drupal\depcalc\DependencyStack $stack
+   * @param DependencyStack $stack
    *   An array of pre-calculated dependencies to prevent recalculation.
    * @param array $dependencies
    *   (optional) An array of dependencies by reference. Internally used.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


53) modules/contrib/depcalc/src/Commands/DepcalcCommands.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Logger Service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The Depcalc Cache backend.
    *
-   * @var \Drupal\depcalc\Cache\DepcalcCacheBackend
+   * @var DepcalcCacheBackend
    */
   protected $cache;

@@ @@
   /**
    * Public Constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The Depcalc logger channel.
-   * @param \Drupal\depcalc\Cache\DepcalcCacheBackend $depcalc_cache
+   * @param DepcalcCacheBackend $depcalc_cache
    *   The Depcalc Cache Backend.
    */
   public function __construct(LoggerChannelInterface $logger, DepcalcCacheBackend $depcalc_cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/depcalc/src/Cache/DepcalcCacheFactory.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * The core cache factory.
    *
-   * @var \Drupal\Core\Cache\CacheFactoryInterface
+   * @var CacheFactoryInterface
    */
   protected $factory;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * DepcalcCacheFactory constructor.
    *
-   * @param \Drupal\Core\Cache\CacheFactoryInterface $factory
+   * @param CacheFactoryInterface $factory
    *   The core cache factory.
    */
   public function __construct(CacheFactoryInterface $factory, EventDispatcherInterface $dispatcher) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


55) modules/contrib/depcalc/src/Cache/DepcalcCacheBackend.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\depcalc\Cache;

+use Drupal\Core\Database\Connection;
+use Drupal\depcalc\DependentEntityWrapperInterface;
 use Drupal\Component\Uuid\Uuid;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The cache backend to decorate.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $backend;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * DepcalcCacheBackend constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $backend
+   * @param CacheBackendInterface $backend
    *   The CacheBackendInterface object to decorate.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
    *
    * @throws \ReflectionException
@@ @@
    * We don't want to get our own database connection or cache bin, so we just
    * reflect it out of the object we're decorating.
    *
-   * @param \Drupal\Core\Cache\DatabaseBackend $backend
+   * @param DatabaseBackend $backend
    *   The database backend object from which to extract necessary properties.
    *
    * @throws \ReflectionException
@@ @@
     if (!$cache_objects) {
       return;
     }
-    /** @var \Drupal\depcalc\DependentEntityWrapperInterface[] $wrappers */
+    /** @var DependentEntityWrapperInterface[] $wrappers */
     $wrappers = array_map(function($cache) {return $cache->data;}, $cache_objects);
     $event = new InvalidateDependenciesEvent($wrappers);
     $this->dispatcher->dispatch($event, DependencyCalculatorEvents::INVALIDATE_DEPENDENCIES);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


56) modules/contrib/depcalc/modules/depcalc_ui/depcalc_ui.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\depcalc\Cache\DepcalcCacheBackend;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
  * Clears the depcalc cache.
  */
 function submitDepcalcCacheClear(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\depcalc\Cache\DepcalcCacheBackend $depcalc_cache */
+  /** @var DepcalcCacheBackend $depcalc_cache */
   $depcalc_cache = \Drupal::service('cache.depcalc');
   $depcalc_cache->deleteAllPermanent();
   \Drupal::messenger()->addStatus(t('Cleared all depcalc cache.'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/depcalc/tests/src/Kernel/EventSubscriber/DependencyColle
         ctor/EntityEmbedCollectorTest.php" file, due to:                       
         "Analyze error: "Class                                                 
         Drupal\Tests\entity_embed\Kernel\EntityEmbedFilterTestBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

