diff --git a/integer_textfield_widget.info.yml b/integer_textfield_widget.info.yml
index 871561b..d05c2c3 100644
--- a/integer_textfield_widget.info.yml
+++ b/integer_textfield_widget.info.yml
@@ -2,7 +2,7 @@ name: Integer Textfield Widget
 description: The integer Textfield widget limits user input to numeric values only for the string field type.
 type: module
 package: Fields
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.1 || ^10
 
 dependencies:
   - drupal:field
\ No newline at end of file
diff --git a/tests/src/Functional/IntegerTextfieldWidgetTest.php b/tests/src/Functional/IntegerTextfieldWidgetTest.php
index 04a1d70..228248d 100644
--- a/tests/src/Functional/IntegerTextfieldWidgetTest.php
+++ b/tests/src/Functional/IntegerTextfieldWidgetTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\integer_textfield_widget\Functional;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -30,7 +32,7 @@ class IntegerTextfieldWidgetTest extends BrowserTestBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -42,7 +44,7 @@ class IntegerTextfieldWidgetTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'article']);
@@ -76,10 +78,10 @@ class IntegerTextfieldWidgetTest extends BrowserTestBase {
       'bundle' => $bundle,
     ])->save();
 
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $this->container->get('entity_type.manager');
 
-    /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $form_display */
+    /** @var EntityFormDisplay $form_display */
     $form_display = $entity_type_manager->getStorage('entity_form_display')
       ->load('node.article.default');
 
@@ -106,8 +108,11 @@ class IntegerTextfieldWidgetTest extends BrowserTestBase {
       'field_serial_number[0][value]' => "Invalid test",
     ];
 
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-    $this->assertText('Serial number is not a valid number.');
+    $this->submitForm($edit, $this->t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Serial number is not a valid number.');
 
     // Try the basic entry with a valid field.
     $edit = [
@@ -115,10 +120,13 @@ class IntegerTextfieldWidgetTest extends BrowserTestBase {
       'field_serial_number[0][value]' => "12345678987654321",
     ];
 
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));
     $this->assertSession()->statusCodeEquals(200);
     $t_args = ['@type' => $bundle, '%title' => $title];
-    $this->assertText(strip_tags($this->t('@type %title has been created.', $t_args)), 'The node was created.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(strip_tags($this->t('@type %title has been created.', $t_args)));
 
   }
 
