diff --git a/modules/tome_base/src/CommandBase.php b/modules/tome_base/src/CommandBase.php
index 6b107f9..bdf0d11 100644
--- a/modules/tome_base/src/CommandBase.php
+++ b/modules/tome_base/src/CommandBase.php
@@ -20,7 +20,7 @@ class CommandBase extends Command {
   /**
    * The IO decorator.
    *
-   * @var \Symfony\Component\Console\Style\SymfonyStyle
+   * @var SymfonyStyle
    */
   protected $io;
 
diff --git a/modules/tome_base/src/ExecutableFinderTrait.php b/modules/tome_base/src/ExecutableFinderTrait.php
index fc0e91f..a47ad62 100644
--- a/modules/tome_base/src/ExecutableFinderTrait.php
+++ b/modules/tome_base/src/ExecutableFinderTrait.php
@@ -14,7 +14,7 @@ trait ExecutableFinderTrait {
   /**
    * Finds an executable string for the current process.
    *
-   * @param \Symfony\Component\Console\Input\InputInterface $input
+   * @param InputInterface $input
    *   The command input.
    *
    * @return string
diff --git a/modules/tome_base/src/ProcessTrait.php b/modules/tome_base/src/ProcessTrait.php
index a412a3f..c6a48f7 100644
--- a/modules/tome_base/src/ProcessTrait.php
+++ b/modules/tome_base/src/ProcessTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tome_base;
 
+use Symfony\Component\Console\Style\SymfonyStyle;
 use Symfony\Component\Process\Process;
 
 /**
@@ -31,7 +32,7 @@ trait ProcessTrait {
     $collected_errors = [];
 
     $retry_callback = function (&$current_process) use (&$collected_errors, $retry_count) {
-      /** @var \Symfony\Component\Process\Process $process */
+      /** @var Process $process */
       $process = $current_process['process'];
       $command = $process->getCommandLine();
       if (!$process->isRunning() && !$process->isSuccessful() && $current_process['retry'] < $retry_count) {
@@ -42,7 +43,7 @@ trait ProcessTrait {
     };
 
     $filter_callback = function ($current_process) use (&$collected_errors, $callback) {
-      /** @var \Symfony\Component\Process\Process $process */
+      /** @var Process $process */
       $process = $current_process['process'];
       $is_running = $process->isRunning();
       $command = $process->getCommandLine();
@@ -119,7 +120,7 @@ trait ProcessTrait {
   /**
    * Returns the IO decorator, for reporting errors.
    *
-   * @return \Symfony\Component\Console\Style\SymfonyStyle
+   * @return SymfonyStyle
    *   The IO decorator.
    */
   abstract public function io();
diff --git a/modules/tome_base/tests/src/Kernel/TestBase.php b/modules/tome_base/tests/src/Kernel/TestBase.php
index f250e07..f755e2d 100644
--- a/modules/tome_base/tests/src/Kernel/TestBase.php
+++ b/modules/tome_base/tests/src/Kernel/TestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_base\Kernel;
 
+use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\Tests\field\Traits\EntityReferenceTestTrait;
 use Drupal\KernelTests\KernelTestBase;
@@ -41,7 +42,7 @@ abstract class TestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->setUpFilesystem();
@@ -82,7 +83,7 @@ abstract class TestBase extends KernelTestBase {
       'name' => 'Article',
     ])->save();
 
-    /** @var \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager */
+    /** @var ContentTranslationManagerInterface $content_translation_manager */
     $content_translation_manager = $this->container->get('content_translation.manager');
     $content_translation_manager->setEnabled('node', 'page', TRUE);
     $content_translation_manager->setEnabled('node', 'article', TRUE);
diff --git a/modules/tome_base/tests/src/Unit/ExecutableFinderTraitTest.php b/modules/tome_base/tests/src/Unit/ExecutableFinderTraitTest.php
index cee9745..8342e79 100644
--- a/modules/tome_base/tests/src/Unit/ExecutableFinderTraitTest.php
+++ b/modules/tome_base/tests/src/Unit/ExecutableFinderTraitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_base\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\tome_base\ExecutableFinderTrait;
 use Symfony\Component\Console\Input\InputInterface;
@@ -12,6 +13,7 @@ use Symfony\Component\Console\Input\InputInterface;
  */
 class ExecutableFinderTraitTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers \Drupal\tome_base\ExecutableFinderTrait::findExecutable
    *
diff --git a/modules/tome_static/modules/tome_static_cron/src/Plugin/QueueWorker/TomeStaticQueueWorker.php b/modules/tome_static/modules/tome_static_cron/src/Plugin/QueueWorker/TomeStaticQueueWorker.php
index 4194040..6d4d911 100644
--- a/modules/tome_static/modules/tome_static_cron/src/Plugin/QueueWorker/TomeStaticQueueWorker.php
+++ b/modules/tome_static/modules/tome_static_cron/src/Plugin/QueueWorker/TomeStaticQueueWorker.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tome_static_cron\Plugin\QueueWorker;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ -38,35 +40,35 @@ class TomeStaticQueueWorker extends QueueWorkerBase implements ContainerFactoryP
   /**
    * The static generator.
    *
-   * @var \Drupal\tome_static\StaticGeneratorInterface
+   * @var StaticGeneratorInterface
    */
   protected $static;
 
   /**
    * The request preparer.
    *
-   * @var \Drupal\tome_static\RequestPreparer
+   * @var RequestPreparer
    */
   protected $requestPreparer;
 
   /**
    * The current request, or NULL if there is no request.
    *
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   protected $currentRequest;
 
   /**
    * The state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
@@ -79,15 +81,15 @@ class TomeStaticQueueWorker extends QueueWorkerBase implements ContainerFactoryP
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static generator.
-   * @param \Drupal\tome_static\RequestPreparer $request_preparer
+   * @param RequestPreparer $request_preparer
    *   The request preparer.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, StaticGeneratorInterface $static, RequestPreparer $request_preparer, RequestStack $request_stack, StateInterface $state, LoggerChannelFactoryInterface $logger_factory) {
diff --git a/modules/tome_static/modules/tome_static_cron/tests/src/Functional/TomeStaticCronTest.php b/modules/tome_static/modules/tome_static_cron/tests/src/Functional/TomeStaticCronTest.php
index bd856d5..09f476f 100644
--- a/modules/tome_static/modules/tome_static_cron/tests/src/Functional/TomeStaticCronTest.php
+++ b/modules/tome_static/modules/tome_static_cron/tests/src/Functional/TomeStaticCronTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_static_cron\Functional;
 
+use Drupal\tome_static\StaticGeneratorInterface;
 use Drupal\file\Entity\File;
 use Drupal\image\Entity\ImageStyle;
 use Drupal\Tests\BrowserTestBase;
@@ -39,7 +40,7 @@ class TomeStaticCronTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->createContentType([
@@ -67,7 +68,7 @@ class TomeStaticCronTest extends BrowserTestBase {
    * Tests the static cron.
    */
   public function testStaticCron() {
-    /** @var \Drupal\tome_static\StaticGeneratorInterface $static */
+    /** @var StaticGeneratorInterface $static */
     $static = \Drupal::service('tome_static.generator');
 
     $valid_images = [];
@@ -100,9 +101,9 @@ class TomeStaticCronTest extends BrowserTestBase {
     _tome_static_cron_queue_paths(['/node/' . $node->id()], 'http://google.com');
 
     $filename = $static->getStaticDirectory() . '/node/' . $node->id() . '/index.html';
-    $image_filename = $static->getStaticDirectory() . file_url_transform_relative(file_create_url(ImageStyle::load('large')->buildUri($file->getFileUri())));
-    $this->assertFileNotExists($filename);
-    $this->assertFileNotExists($image_filename);
+    $image_filename = $static->getStaticDirectory() . \Drupal::service('file_url_generator')->generateString(ImageStyle::load('large')->buildUri($file->getFileUri()));
+    $this->assertFileDoesNotExist($filename);
+    $this->assertFileDoesNotExist($image_filename);
     $this->cronRun();
     $this->assertFileExists($filename);
     $this->assertFileExists($image_filename);
diff --git a/modules/tome_static/modules/tome_static_cron/tome_static_cron.module b/modules/tome_static/modules/tome_static_cron/tome_static_cron.module
index d868460..73141a5 100644
--- a/modules/tome_static/modules/tome_static_cron/tome_static_cron.module
+++ b/modules/tome_static/modules/tome_static_cron/tome_static_cron.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\tome_static\StaticGeneratorInterface;
 /**
  * @file
  * Contains hook implementations for the tome_static_cron module.
@@ -29,7 +30,7 @@ function tome_static_cron_cron() {
   \Drupal::state()->set(TomeStaticQueueWorker::STATE_KEY_INVOKE_PATHS, []);
   \Drupal::state()->set(TomeStaticQueueWorker::STATE_KEY_OLD_PATHS, []);
 
-  /** @var \Drupal\tome_static\StaticGeneratorInterface $static */
+  /** @var StaticGeneratorInterface $static */
   $static = \Drupal::service('tome_static.generator');
   $static->cleanupStaticDirectory();
   $static->prepareStaticDirectory();
diff --git a/modules/tome_static/modules/tome_static_super_cache/src/Commands/TomeSuperCacheRebuildCommand.php b/modules/tome_static/modules/tome_static_super_cache/src/Commands/TomeSuperCacheRebuildCommand.php
index 6f08e1a..df308cb 100644
--- a/modules/tome_static/modules/tome_static_super_cache/src/Commands/TomeSuperCacheRebuildCommand.php
+++ b/modules/tome_static/modules/tome_static_super_cache/src/Commands/TomeSuperCacheRebuildCommand.php
@@ -24,10 +24,11 @@ class TomeSuperCacheRebuildCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $GLOBALS[SuperStaticCache::FULL_REBUILD_KEY] = TRUE;
     drupal_flush_all_caches();
     $this->io()->success('Full cache rebuild complete.');
+    return 0;
   }
 
 }
diff --git a/modules/tome_static/modules/tome_static_super_cache/src/Plugin/views/cache/SmartTag.php b/modules/tome_static/modules/tome_static_super_cache/src/Plugin/views/cache/SmartTag.php
index 84e242d..a0e2b5b 100644
--- a/modules/tome_static/modules/tome_static_super_cache/src/Plugin/views/cache/SmartTag.php
+++ b/modules/tome_static/modules/tome_static_super_cache/src/Plugin/views/cache/SmartTag.php
@@ -59,7 +59,7 @@ class SmartTag extends CachePluginBase {
   /**
    * Determines the cache tag for the given View.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A View executable.
    *
    * @return string
diff --git a/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SmartTagTest.php b/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SmartTagTest.php
index 5d73c92..2c17360 100644
--- a/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SmartTagTest.php
+++ b/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SmartTagTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_static_super_cache\Kernel;
 
+use Drupal\tome_static\StaticGenerator;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\tome_base\Kernel\TestBase;
@@ -31,7 +32,7 @@ class SmartTagTest extends TestBase {
   public function testSmartTag() {
     $this->installConfig(['tome_static_super_cache_test']);
 
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
 
     DateFormat::create([
@@ -39,7 +40,7 @@ class SmartTagTest extends TestBase {
       'id' => 'medium',
     ])->save();
 
-    /** @var \Drupal\node\Entity\Node $article */
+    /** @var Node $article */
     $article = Node::create(['type' => 'article', 'title' => 'My article']);
 
     drupal_static_reset('tome_static_super_cache_entity_insert');
@@ -60,7 +61,7 @@ class SmartTagTest extends TestBase {
 
     $this->assertNotContains('/test', $static->getPaths());
 
-    /** @var \Drupal\node\Entity\Node $article */
+    /** @var Node $article */
     $article = Node::create(['type' => 'article', 'title' => 'My other article']);
     $article->setUnpublished();
 
diff --git a/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SuperStaticCacheTest.php b/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SuperStaticCacheTest.php
index b93c669..0dedfb9 100644
--- a/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SuperStaticCacheTest.php
+++ b/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SuperStaticCacheTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_static_super_cache\Kernel;
 
+use Drupal\tome_static\StaticGenerator;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\tome_base\Kernel\TestBase;
@@ -35,7 +36,7 @@ class SuperStaticCacheTest extends TestBase {
       'name' => '',
     ])->save();
 
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
 
     DateFormat::create([
@@ -43,7 +44,7 @@ class SuperStaticCacheTest extends TestBase {
       'id' => 'medium',
     ])->save();
 
-    /** @var \Drupal\node\Entity\Node $article */
+    /** @var Node $article */
     $article = Node::create(['type' => 'article', 'title' => 'My article']);
     $article->save();
 
diff --git a/modules/tome_static/modules/tome_static_super_cache/tome_static_super_cache.module b/modules/tome_static/modules/tome_static_super_cache/tome_static_super_cache.module
index f1cc5ca..2542389 100644
--- a/modules/tome_static/modules/tome_static_super_cache/tome_static_super_cache.module
+++ b/modules/tome_static/modules/tome_static_super_cache/tome_static_super_cache.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\views\ViewEntityInterface;
 /**
  * @file
  * Contains functions for the Tome Static Super Cache module.
@@ -47,7 +48,7 @@ function tome_static_super_cache_entity_insert(EntityInterface $entity) {
   if (empty($view_ids)) {
     return;
   }
-  /** @var \Drupal\views\ViewEntityInterface $view */
+  /** @var ViewEntityInterface $view */
   foreach ($view_storage->loadMultiple($view_ids) as $view) {
     $base_entity_type = $view->getExecutable()->getBaseEntityType();
     if (!$base_entity_type || $base_entity_type->id() !== $entity->getEntityTypeId()) {
@@ -115,7 +116,7 @@ function tome_static_super_cache_form_system_performance_settings_alter(array &$
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function _tome_static_super_cache_form_system_performance_settings_submit(array $form, FormStateInterface $form_state) {
diff --git a/modules/tome_static/src/Commands/StaticCommand.php b/modules/tome_static/src/Commands/StaticCommand.php
index bf54406..55f7dae 100644
--- a/modules/tome_static/src/Commands/StaticCommand.php
+++ b/modules/tome_static/src/Commands/StaticCommand.php
@@ -42,7 +42,7 @@ class StaticCommand extends CommandBase {
   /**
    * The static service.
    *
-   * @var \Drupal\tome_static\StaticGeneratorInterface
+   * @var StaticGeneratorInterface
    */
   protected $static;
 
@@ -56,9 +56,9 @@ class StaticCommand extends CommandBase {
   /**
    * Constructs a StaticCommand instance.
    *
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
    */
   public function __construct(StaticGeneratorInterface $static, StateInterface $state) {
@@ -86,7 +86,7 @@ class StaticCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();
 
     if ($this->state->get(StaticGeneratorInterface::STATE_KEY_BUILDING, FALSE)) {
@@ -131,6 +131,7 @@ class StaticCommand extends CommandBase {
     if ($options['run-server']) {
       $this->runCommand($this->executable . ' tome:preview --port=' . escapeshellarg($options['port']), NULL, NULL);
     }
+    return 0;
   }
 
   /**
diff --git a/modules/tome_static/src/Commands/StaticExportPathCommand.php b/modules/tome_static/src/Commands/StaticExportPathCommand.php
index 874f4e7..19b9671 100644
--- a/modules/tome_static/src/Commands/StaticExportPathCommand.php
+++ b/modules/tome_static/src/Commands/StaticExportPathCommand.php
@@ -25,18 +25,18 @@ class StaticExportPathCommand extends StaticCommand {
   /**
    * The request preparer.
    *
-   * @var \Drupal\tome_static\RequestPreparer
+   * @var RequestPreparer
    */
   protected $requestPreparer;
 
   /**
    * Constructs a StaticCommand instance.
    *
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\tome_static\RequestPreparer $request_preparer
+   * @param RequestPreparer $request_preparer
    *   The request preparer.
    */
   public function __construct(StaticGeneratorInterface $static, StateInterface $state, RequestPreparer $request_preparer) {
@@ -60,7 +60,7 @@ class StaticExportPathCommand extends StaticCommand {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $chunk = $input->getArgument('chunk');
     $paths = explode(',', $chunk);
     $invoke_paths = [];
@@ -80,6 +80,7 @@ class StaticExportPathCommand extends StaticCommand {
     else {
       $this->exportPaths($invoke_paths, $paths, $options['process-count'], $options['path-count'], FALSE, $options['retry-count'], $options['uri']);
     }
+    return 0;
   }
 
 }
diff --git a/modules/tome_static/src/Commands/StaticPreviewCommand.php b/modules/tome_static/src/Commands/StaticPreviewCommand.php
index cc9555e..dcf003a 100644
--- a/modules/tome_static/src/Commands/StaticPreviewCommand.php
+++ b/modules/tome_static/src/Commands/StaticPreviewCommand.php
@@ -22,14 +22,14 @@ class StaticPreviewCommand extends CommandBase {
   /**
    * The static service.
    *
-   * @var \Drupal\tome_static\StaticGeneratorInterface
+   * @var StaticGeneratorInterface
    */
   protected $static;
 
   /**
    * Constructs a StaticPreviewCommand instance.
    *
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static service.
    */
   public function __construct(StaticGeneratorInterface $static) {
@@ -49,7 +49,7 @@ class StaticPreviewCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     if (!file_exists($this->static->getStaticDirectory())) {
       $this->io()->error('Static directory does not exist. Have you ran the "tome:static" command yet?');
       return 1;
@@ -58,6 +58,7 @@ class StaticPreviewCommand extends CommandBase {
     $url = '127.0.0.1:' . $options['port'];
     $this->startBrowser('http://' . $url . base_path(), 2);
     $this->runCommand('php -S ' . escapeshellarg($url), $this->static->getStaticDirectory(), NULL);
+    return 0;
   }
 
   /**
diff --git a/modules/tome_static/src/Controller/StaticDownloadController.php b/modules/tome_static/src/Controller/StaticDownloadController.php
index 5adf020..ada8f4f 100644
--- a/modules/tome_static/src/Controller/StaticDownloadController.php
+++ b/modules/tome_static/src/Controller/StaticDownloadController.php
@@ -22,23 +22,23 @@ class StaticDownloadController extends ControllerBase {
   /**
    * The static generator.
    *
-   * @var \Drupal\tome_static\StaticGeneratorInterface
+   * @var StaticGeneratorInterface
    */
   protected $static;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * StaticGeneratorForm constructor.
    *
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static generator.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(StaticGeneratorInterface $static, FileSystemInterface $file_system) {
@@ -109,7 +109,7 @@ class StaticDownloadController extends ControllerBase {
   /**
    * Custom access callback to determine if there's anything to download.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function downloadAccess() {
diff --git a/modules/tome_static/src/Controller/StaticPreviewController.php b/modules/tome_static/src/Controller/StaticPreviewController.php
index 2922482..93c9b1c 100644
--- a/modules/tome_static/src/Controller/StaticPreviewController.php
+++ b/modules/tome_static/src/Controller/StaticPreviewController.php
@@ -19,14 +19,14 @@ class StaticPreviewController extends ControllerBase {
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;
 
   /**
    * StaticPreviewForm constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\Session $session
+   * @param Session $session
    *   The session.
    */
   public function __construct(Session $session) {
diff --git a/modules/tome_static/src/Event/CollectPathsEvent.php b/modules/tome_static/src/Event/CollectPathsEvent.php
index 661107d..0843474 100644
--- a/modules/tome_static/src/Event/CollectPathsEvent.php
+++ b/modules/tome_static/src/Event/CollectPathsEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tome_static\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Wraps an array of paths that will be processed by the static generator.
diff --git a/modules/tome_static/src/Event/FileSavedEvent.php b/modules/tome_static/src/Event/FileSavedEvent.php
index 1725553..edb8ed7 100644
--- a/modules/tome_static/src/Event/FileSavedEvent.php
+++ b/modules/tome_static/src/Event/FileSavedEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tome_static\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Allows modules to react to a file save.
diff --git a/modules/tome_static/src/Event/ModifyDestinationEvent.php b/modules/tome_static/src/Event/ModifyDestinationEvent.php
index fe6a88d..d5d5abe 100644
--- a/modules/tome_static/src/Event/ModifyDestinationEvent.php
+++ b/modules/tome_static/src/Event/ModifyDestinationEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tome_static\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Allows modules to modify the HTML of a static page before save.
diff --git a/modules/tome_static/src/Event/ModifyHtmlEvent.php b/modules/tome_static/src/Event/ModifyHtmlEvent.php
index f9db9b7..f319651 100644
--- a/modules/tome_static/src/Event/ModifyHtmlEvent.php
+++ b/modules/tome_static/src/Event/ModifyHtmlEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tome_static\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Allows modules to modify the HTML of a static page before save.
diff --git a/modules/tome_static/src/Event/PathPlaceholderEvent.php b/modules/tome_static/src/Event/PathPlaceholderEvent.php
index 32768f1..1ebac98 100644
--- a/modules/tome_static/src/Event/PathPlaceholderEvent.php
+++ b/modules/tome_static/src/Event/PathPlaceholderEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tome_static\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Allows modules that provide placeholder paths to load the real path.
diff --git a/modules/tome_static/src/EventSubscriber/EntityPathSubscriber.php b/modules/tome_static/src/EventSubscriber/EntityPathSubscriber.php
index cfacb91..e683706 100644
--- a/modules/tome_static/src/EventSubscriber/EntityPathSubscriber.php
+++ b/modules/tome_static/src/EventSubscriber/EntityPathSubscriber.php
@@ -27,23 +27,23 @@ class EntityPathSubscriber implements EventSubscriberInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs the EntityPathSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager) {
@@ -54,7 +54,7 @@ class EntityPathSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a collect paths event.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function collectPaths(CollectPathsEvent $event) {
@@ -98,7 +98,7 @@ class EntityPathSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a path placeholder event.
    *
-   * @param \Drupal\tome_static\Event\PathPlaceholderEvent $event
+   * @param PathPlaceholderEvent $event
    *   The path placeholder event.
    */
   public function replacePathPlaceholder(PathPlaceholderEvent $event) {
diff --git a/modules/tome_static/src/EventSubscriber/ExcludePathSubscriber.php b/modules/tome_static/src/EventSubscriber/ExcludePathSubscriber.php
index 0ef7a24..6710965 100644
--- a/modules/tome_static/src/EventSubscriber/ExcludePathSubscriber.php
+++ b/modules/tome_static/src/EventSubscriber/ExcludePathSubscriber.php
@@ -45,7 +45,7 @@ class ExcludePathSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a collect paths event.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function collectPaths(CollectPathsEvent $event) {
diff --git a/modules/tome_static/src/EventSubscriber/LanguagePathSubscriber.php b/modules/tome_static/src/EventSubscriber/LanguagePathSubscriber.php
index f4c567b..461d4c8 100644
--- a/modules/tome_static/src/EventSubscriber/LanguagePathSubscriber.php
+++ b/modules/tome_static/src/EventSubscriber/LanguagePathSubscriber.php
@@ -22,23 +22,23 @@ class LanguagePathSubscriber implements EventSubscriberInterface {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs the LanguagePathSubscriber object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager) {
@@ -49,7 +49,7 @@ class LanguagePathSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a collect paths event to add multilingual homepage paths.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function collectPaths(CollectPathsEvent $event) {
diff --git a/modules/tome_static/src/EventSubscriber/MediaOembedPathSubscriber.php b/modules/tome_static/src/EventSubscriber/MediaOembedPathSubscriber.php
index 0f59cb9..f5e4eb3 100644
--- a/modules/tome_static/src/EventSubscriber/MediaOembedPathSubscriber.php
+++ b/modules/tome_static/src/EventSubscriber/MediaOembedPathSubscriber.php
@@ -17,7 +17,7 @@ class MediaOembedPathSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a modify destination event.
    *
-   * @param \Drupal\tome_static\Event\ModifyDestinationEvent $event
+   * @param ModifyDestinationEvent $event
    *   The event.
    */
   public function modifyDestination(ModifyDestinationEvent $event) {
@@ -29,7 +29,7 @@ class MediaOembedPathSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a modify HTML event.
    *
-   * @param \Drupal\tome_static\Event\ModifyHtmlEvent $event
+   * @param ModifyHtmlEvent $event
    *   The event.
    */
   public function modifyHtml(ModifyHtmlEvent $event) {
diff --git a/modules/tome_static/src/EventSubscriber/PageCacheRequestPrepareSubscriber.php b/modules/tome_static/src/EventSubscriber/PageCacheRequestPrepareSubscriber.php
index a0748a2..e22d9c8 100644
--- a/modules/tome_static/src/EventSubscriber/PageCacheRequestPrepareSubscriber.php
+++ b/modules/tome_static/src/EventSubscriber/PageCacheRequestPrepareSubscriber.php
@@ -16,14 +16,14 @@ class PageCacheRequestPrepareSubscriber implements EventSubscriberInterface {
   /**
    * The resettable page cache.
    *
-   * @var \Drupal\tome_static\StackMiddleware\ResettablePageCache
+   * @var ResettablePageCache
    */
   protected $pageCache;
 
   /**
    * Constructs the EntityPathSubscriber object.
    *
-   * @param \Drupal\tome_static\StackMiddleware\ResettablePageCache $page_cache
+   * @param ResettablePageCache $page_cache
    *   The resettable page cache.
    */
   public function __construct(ResettablePageCache $page_cache) {
diff --git a/modules/tome_static/src/EventSubscriber/PagerPathSubscriber.php b/modules/tome_static/src/EventSubscriber/PagerPathSubscriber.php
index 484fd63..fbea5dc 100644
--- a/modules/tome_static/src/EventSubscriber/PagerPathSubscriber.php
+++ b/modules/tome_static/src/EventSubscriber/PagerPathSubscriber.php
@@ -17,7 +17,7 @@ class PagerPathSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a modify destination event.
    *
-   * @param \Drupal\tome_static\Event\ModifyDestinationEvent $event
+   * @param ModifyDestinationEvent $event
    *   The event.
    */
   public function modifyDestination(ModifyDestinationEvent $event) {
@@ -29,7 +29,7 @@ class PagerPathSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a modify HTML event.
    *
-   * @param \Drupal\tome_static\Event\ModifyHtmlEvent $event
+   * @param ModifyHtmlEvent $event
    *   The event.
    */
   public function modifyHtml(ModifyHtmlEvent $event) {
diff --git a/modules/tome_static/src/EventSubscriber/RedirectPathSubscriber.php b/modules/tome_static/src/EventSubscriber/RedirectPathSubscriber.php
index 0b99268..dff0291 100644
--- a/modules/tome_static/src/EventSubscriber/RedirectPathSubscriber.php
+++ b/modules/tome_static/src/EventSubscriber/RedirectPathSubscriber.php
@@ -32,23 +32,23 @@ class RedirectPathSubscriber implements EventSubscriberInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs the RedirectPathSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager) {
@@ -59,7 +59,7 @@ class RedirectPathSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a collect paths event.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function collectPaths(CollectPathsEvent $event) {
@@ -82,7 +82,7 @@ class RedirectPathSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a path placeholder event.
    *
-   * @param \Drupal\tome_static\Event\PathPlaceholderEvent $event
+   * @param PathPlaceholderEvent $event
    *   The path placeholder event.
    */
   public function replacePathPlaceholder(PathPlaceholderEvent $event) {
diff --git a/modules/tome_static/src/EventSubscriber/RoutePathSubscriber.php b/modules/tome_static/src/EventSubscriber/RoutePathSubscriber.php
index 37c09c7..4cdaee4 100644
--- a/modules/tome_static/src/EventSubscriber/RoutePathSubscriber.php
+++ b/modules/tome_static/src/EventSubscriber/RoutePathSubscriber.php
@@ -20,23 +20,23 @@ class RoutePathSubscriber implements EventSubscriberInterface {
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs the RoutePathSubscriber object.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(RouteProviderInterface $route_provider, LanguageManagerInterface $language_manager) {
@@ -47,7 +47,7 @@ class RoutePathSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a collect paths event.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function collectPaths(CollectPathsEvent $event) {
diff --git a/modules/tome_static/src/EventSubscriber/StaticPreviewRequestSubscriber.php b/modules/tome_static/src/EventSubscriber/StaticPreviewRequestSubscriber.php
index f3a688f..c35fd61 100644
--- a/modules/tome_static/src/EventSubscriber/StaticPreviewRequestSubscriber.php
+++ b/modules/tome_static/src/EventSubscriber/StaticPreviewRequestSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tome_static\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
@@ -11,7 +12,6 @@ use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\File\File;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpFoundation\Session\Session;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -32,32 +32,32 @@ class StaticPreviewRequestSubscriber implements EventSubscriberInterface {
   /**
    * The static generator.
    *
-   * @var \Drupal\tome_static\StaticGeneratorInterface
+   * @var StaticGeneratorInterface
    */
   protected $static;
 
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;
 
   /**
    * Constructs a new StaticPreviewRequestSubscriber object.
    *
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static generator.
-   * @param \Symfony\Component\HttpFoundation\Session\Session $session
+   * @param Session $session
    *   The session.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $route_match
+   * @param CurrentRouteMatch $route_match
    *   The current route match.
    */
   public function __construct(StaticGeneratorInterface $static, Session $session, CurrentRouteMatch $route_match) {
@@ -69,10 +69,10 @@ class StaticPreviewRequestSubscriber implements EventSubscriberInterface {
   /**
    * Sets a response in case of a Dynamic Page Cache hit.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();
     if (!$this->session->get(static::SESSION_KEY) || $this->routeMatch->getRouteName() === 'tome_static.preview_exit') {
       return;
diff --git a/modules/tome_static/src/Form/StaticGeneratorForm.php b/modules/tome_static/src/Form/StaticGeneratorForm.php
index c1ede70..5907614 100644
--- a/modules/tome_static/src/Form/StaticGeneratorForm.php
+++ b/modules/tome_static/src/Form/StaticGeneratorForm.php
@@ -26,32 +26,32 @@ class StaticGeneratorForm extends FormBase {
   /**
    * The static generator.
    *
-   * @var \Drupal\tome_static\StaticGeneratorInterface
+   * @var StaticGeneratorInterface
    */
   protected $static;
 
   /**
    * The state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The request preparer.
    *
-   * @var \Drupal\tome_static\RequestPreparer
+   * @var RequestPreparer
    */
   protected $requestPreparer;
 
   /**
    * StaticGeneratorForm constructor.
    *
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static generator.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\tome_static\RequestPreparer $request_preparer
+   * @param RequestPreparer $request_preparer
    *   The request preparer.
    */
   public function __construct(StaticGeneratorInterface $static, StateInterface $state, RequestPreparer $request_preparer) {
diff --git a/modules/tome_static/src/Form/StaticPreviewForm.php b/modules/tome_static/src/Form/StaticPreviewForm.php
index b75e6b4..b6b7139 100644
--- a/modules/tome_static/src/Form/StaticPreviewForm.php
+++ b/modules/tome_static/src/Form/StaticPreviewForm.php
@@ -19,14 +19,14 @@ class StaticPreviewForm extends FormBase {
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;
 
   /**
    * StaticPreviewForm constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\Session $session
+   * @param Session $session
    *   The session.
    */
   public function __construct(Session $session) {
diff --git a/modules/tome_static/src/PageCache/RequestPolicy/CoreRequestPolicy.php b/modules/tome_static/src/PageCache/RequestPolicy/CoreRequestPolicy.php
index 971c0eb..01e9919 100644
--- a/modules/tome_static/src/PageCache/RequestPolicy/CoreRequestPolicy.php
+++ b/modules/tome_static/src/PageCache/RequestPolicy/CoreRequestPolicy.php
@@ -18,7 +18,7 @@ class CoreRequestPolicy extends ChainRequestPolicy {
   /**
    * Constructs the CoreRequestPolicy object.
    *
-   * @param \Drupal\Core\Session\SessionConfigurationInterface $session_configuration
+   * @param SessionConfigurationInterface $session_configuration
    *   The session configuration.
    */
   public function __construct(SessionConfigurationInterface $session_configuration) {
diff --git a/modules/tome_static/src/RequestPreparer.php b/modules/tome_static/src/RequestPreparer.php
index 00e6b31..733b03e 100644
--- a/modules/tome_static/src/RequestPreparer.php
+++ b/modules/tome_static/src/RequestPreparer.php
@@ -24,59 +24,59 @@ class RequestPreparer {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The decorated context repository.
    *
-   * @var \Drupal\tome_static\LazyResettableContextRepository
+   * @var LazyResettableContextRepository
    */
   protected $contextRepository;
 
   /**
    * The decorated path matcher.
    *
-   * @var \Drupal\tome_static\ResettablePathMatcher
+   * @var ResettablePathMatcher
    */
   protected $pathMatcher;
 
   /**
    * The menu active trail cache collector.
    *
-   * @var \Drupal\Core\Menu\MenuActiveTrailInterface
+   * @var MenuActiveTrailInterface
    */
   protected $menuActiveTrail;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a RequestPreparer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\tome_static\LazyResettableContextRepository $context_repository
+   * @param LazyResettableContextRepository $context_repository
    *   The decorated context repository.
-   * @param \Drupal\tome_static\ResettablePathMatcher $path_matcher
+   * @param ResettablePathMatcher $path_matcher
    *   The decorated path matcher.
-   * @param \Drupal\Core\Menu\MenuActiveTrailInterface $menu_active_trail
+   * @param MenuActiveTrailInterface $menu_active_trail
    *   The menu active trail cache collector.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LazyResettableContextRepository $context_repository, ResettablePathMatcher $path_matcher, MenuActiveTrailInterface $menu_active_trail, EventDispatcherInterface $event_dispatcher, LanguageManagerInterface $language_manager) {
diff --git a/modules/tome_static/src/StaticCache.php b/modules/tome_static/src/StaticCache.php
index 5f41b28..9e67ef9 100644
--- a/modules/tome_static/src/StaticCache.php
+++ b/modules/tome_static/src/StaticCache.php
@@ -21,9 +21,9 @@ class StaticCache extends DatabaseBackend implements StaticCacheInterface {
   /**
    * Constructs a StaticCache object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Cache\CacheTagsChecksumInterface $checksum_provider
+   * @param CacheTagsChecksumInterface $checksum_provider
    *   The cache tags checksum provider.
    */
   public function __construct(Connection $connection, CacheTagsChecksumInterface $checksum_provider) {
diff --git a/modules/tome_static/src/StaticCacheInterface.php b/modules/tome_static/src/StaticCacheInterface.php
index a1cd287..4b17d7c 100644
--- a/modules/tome_static/src/StaticCacheInterface.php
+++ b/modules/tome_static/src/StaticCacheInterface.php
@@ -26,9 +26,9 @@ interface StaticCacheInterface {
   /**
    * Adds to the Tome cache.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request object.
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   A response object that should be stored in the page cache.
    * @param string $original_path
    *   The original, placeholdered path.
diff --git a/modules/tome_static/src/StaticGenerator.php b/modules/tome_static/src/StaticGenerator.php
index d393160..a1a068a 100644
--- a/modules/tome_static/src/StaticGenerator.php
+++ b/modules/tome_static/src/StaticGenerator.php
@@ -36,66 +36,66 @@ class StaticGenerator implements StaticGeneratorInterface {
   /**
    * The HTTP kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The static cache.
    *
-   * @var \Drupal\tome_static\StaticCacheInterface
+   * @var StaticCacheInterface
    */
   protected $cache;
 
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Creates a StaticGenerator object.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The HTTP kernel.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\tome_static\StaticCacheInterface $cache
+   * @param StaticCacheInterface $cache
    *   The static cache.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(HttpKernelInterface $http_kernel, RequestStack $request_stack, EventDispatcherInterface $event_dispatcher, StaticCacheInterface $cache, AccountSwitcherInterface $account_switcher, FileSystemInterface $file_system) {
@@ -115,7 +115,7 @@ class StaticGenerator implements StaticGeneratorInterface {
   public function getPaths() {
     $this->accountSwitcher->switchTo(new AnonymousUserSession());
     $event = new CollectPathsEvent([]);
-    $this->eventDispatcher->dispatch(TomeStaticEvents::COLLECT_PATHS, $event);
+    $this->eventDispatcher->dispatch($event, TomeStaticEvents::COLLECT_PATHS);
     $paths = $event->getPaths();
 
     $paths = $this->cache->filterUncachedPaths($this->currentRequest->getSchemeAndHttpHost(), $paths);
@@ -142,7 +142,7 @@ class StaticGenerator implements StaticGeneratorInterface {
     $original_path = $path;
 
     $event = new PathPlaceholderEvent($path);
-    $this->eventDispatcher->dispatch(TomeStaticEvents::PATH_PLACEHOLDER, $event);
+    $this->eventDispatcher->dispatch($event, TomeStaticEvents::PATH_PLACEHOLDER);
 
     if ($event->isInvalid()) {
       $this->accountSwitcher->switchBack();
@@ -179,14 +179,14 @@ class StaticGenerator implements StaticGeneratorInterface {
         $content = $response->getContent();
         if (strpos($response->headers->get('Content-Type'), 'text/html') === 0) {
           $event = new ModifyHtmlEvent($content, $path);
-          $this->eventDispatcher->dispatch(TomeStaticEvents::MODIFY_HTML, $event);
+          $this->eventDispatcher->dispatch($event, TomeStaticEvents::MODIFY_HTML);
           $content = $event->getHtml();
           $invoke_paths = array_merge($invoke_paths, $this->getHtmlAssets($content, $path), $event->getInvokePaths());
           $invoke_paths = array_diff($invoke_paths, $event->getExcludePaths());
         }
         file_put_contents($destination, $content);
       }
-      $this->eventDispatcher->dispatch(TomeStaticEvents::FILE_SAVED, new FileSavedEvent($destination));
+      $this->eventDispatcher->dispatch(new FileSavedEvent($destination), TomeStaticEvents::FILE_SAVED);
 
       if ($response instanceof RedirectResponse) {
         $target_url = $this->makeExternalUrlLocal($response->getTargetUrl());
@@ -270,7 +270,7 @@ class StaticGenerator implements StaticGeneratorInterface {
    *
    * @param array $invoke_paths
    *   An array of paths returned by requestPath or exportPaths.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request object.
    *
    * @return array
@@ -484,7 +484,7 @@ class StaticGenerator implements StaticGeneratorInterface {
    */
   protected function getDestination($path) {
     $event = new ModifyDestinationEvent($path);
-    $this->eventDispatcher->dispatch(TomeStaticEvents::MODIFY_DESTINATION, $event);
+    $this->eventDispatcher->dispatch($event, TomeStaticEvents::MODIFY_DESTINATION);
     $path = $event->getDestination();
     $path = urldecode($path);
     $path = $this->sanitizePath($path);
@@ -559,10 +559,10 @@ class StaticGenerator implements StaticGeneratorInterface {
   /**
    * Replaces the request stack with a static request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The new static request.
    *
-   * @return \Symfony\Component\HttpFoundation\Request[]
+   * @return Request[]
    *   An array of previous stack requests.
    */
   protected function replaceRequestStack(Request $request) {
@@ -577,7 +577,7 @@ class StaticGenerator implements StaticGeneratorInterface {
   /**
    * Restores the request stack to its previous state.
    *
-   * @param \Symfony\Component\HttpFoundation\Request[] $stack
+   * @param Request[] $stack
    *   An array of previous stack requests.
    */
   protected function restoreRequestStack(array $stack) {
diff --git a/modules/tome_static/src/StaticUITrait.php b/modules/tome_static/src/StaticUITrait.php
index ae7a165..d9b9165 100644
--- a/modules/tome_static/src/StaticUITrait.php
+++ b/modules/tome_static/src/StaticUITrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tome_static;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * Trait containing methods useful for different static user interfaces.
  *
@@ -54,7 +55,7 @@ trait StaticUITrait {
    * @param \Exception $exception
    *   An exception.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   A formatted message to present to the user.
    */
   protected function formatPathException($path, \Exception $exception) {
@@ -76,7 +77,7 @@ trait StaticUITrait {
    * @param array $options
    *   (optional) An associative array of additional options.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   An object that, when cast to a string, returns the translated string.
    */
   abstract protected function t($string, array $args = [], array $options = []);
diff --git a/modules/tome_static/src/TomeStaticHelper.php b/modules/tome_static/src/TomeStaticHelper.php
index 8b00e64..02fe533 100644
--- a/modules/tome_static/src/TomeStaticHelper.php
+++ b/modules/tome_static/src/TomeStaticHelper.php
@@ -14,7 +14,7 @@ trait TomeStaticHelper {
   /**
    * Sets the base URL for a given request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $base_url
    *   The base URL.
@@ -53,7 +53,7 @@ trait TomeStaticHelper {
   /**
    * Restores the base URL for a request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param array $original_params
    *   The return value of ::setBaseUrl.
diff --git a/modules/tome_static/tests/modules/tome_test/src/Controller/TestController.php b/modules/tome_static/tests/modules/tome_test/src/Controller/TestController.php
index be536ac..424c0ec 100644
--- a/modules/tome_static/tests/modules/tome_test/src/Controller/TestController.php
+++ b/modules/tome_static/tests/modules/tome_test/src/Controller/TestController.php
@@ -26,7 +26,7 @@ class TestController extends ControllerBase {
    * Outputs a more complex test page.
    */
   public function testComplexPage(Request $request) {
-    $module_path = drupal_get_path('module', 'tome_test');
+    $module_path = \Drupal::service('extension.list.module')->getPath('tome_test');
     return [
       '#children' => "<p>Hello, complex world</p>
 <img src=\"/$module_path/assets/druplicon-1.png\">
diff --git a/modules/tome_static/tests/src/Functional/TomeStaticGeneratorFormTest.php b/modules/tome_static/tests/src/Functional/TomeStaticGeneratorFormTest.php
index 3740cf4..133d1d1 100644
--- a/modules/tome_static/tests/src/Functional/TomeStaticGeneratorFormTest.php
+++ b/modules/tome_static/tests/src/Functional/TomeStaticGeneratorFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_static\Functional;
 
+use Drupal\tome_static\StaticGeneratorInterface;
 use Drupal\file\Entity\File;
 use Drupal\image\Entity\ImageStyle;
 use Drupal\Tests\BrowserTestBase;
@@ -39,7 +40,7 @@ class TomeStaticGeneratorFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->createContentType([
@@ -69,7 +70,7 @@ class TomeStaticGeneratorFormTest extends BrowserTestBase {
    * Tests the static generator form.
    */
   public function testStaticGeneratorForm() {
-    /** @var \Drupal\tome_static\StaticGeneratorInterface $static */
+    /** @var StaticGeneratorInterface $static */
     $static = \Drupal::service('tome_static.generator');
 
     $valid_images = [];
@@ -99,9 +100,9 @@ class TomeStaticGeneratorFormTest extends BrowserTestBase {
     ]);
 
     $filename = $static->getStaticDirectory() . base_path() . 'node/' . $node->id() . '/index.html';
-    $image_filename = $static->getStaticDirectory() . file_url_transform_relative(file_create_url(ImageStyle::load('large')->buildUri($file->getFileUri())));
-    $this->assertFileNotExists($filename);
-    $this->assertFileNotExists($image_filename);
+    $image_filename = $static->getStaticDirectory() . \Drupal::service('file_url_generator')->generateString(ImageStyle::load('large')->buildUri($file->getFileUri()));
+    $this->assertFileDoesNotExist($filename);
+    $this->assertFileDoesNotExist($image_filename);
 
     $this->drupalGet('/admin/config/tome/static/generate');
     $this->submitForm([], 'Submit');
diff --git a/modules/tome_static/tests/src/Kernel/CollectPathsEventTest.php b/modules/tome_static/tests/src/Kernel/CollectPathsEventTest.php
index cc91a69..9113e51 100644
--- a/modules/tome_static/tests/src/Kernel/CollectPathsEventTest.php
+++ b/modules/tome_static/tests/src/Kernel/CollectPathsEventTest.php
@@ -84,14 +84,14 @@ class CollectPathsEventTest extends TomeStaticEventTestBase {
    */
   protected function collectPaths(array $paths = []) {
     $event = new CollectPathsEvent($paths);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event->getPaths();
   }
 
   /**
    * Emulates the addPath() listener.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function addPath(CollectPathsEvent $event) {
@@ -101,7 +101,7 @@ class CollectPathsEventTest extends TomeStaticEventTestBase {
   /**
    * Emulates the addPaths() listener.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function addPaths(CollectPathsEvent $event) {
@@ -111,7 +111,7 @@ class CollectPathsEventTest extends TomeStaticEventTestBase {
   /**
    * Emulates the replacePath() listener.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function replacePath(CollectPathsEvent $event) {
@@ -121,7 +121,7 @@ class CollectPathsEventTest extends TomeStaticEventTestBase {
   /**
    * Emulates the replacePaths() listener.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function replacePaths(CollectPathsEvent $event) {
@@ -131,7 +131,7 @@ class CollectPathsEventTest extends TomeStaticEventTestBase {
   /**
    * Emulates the deletePath() listener.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function deletePath(CollectPathsEvent $event) {
diff --git a/modules/tome_static/tests/src/Kernel/FileSavedEventTest.php b/modules/tome_static/tests/src/Kernel/FileSavedEventTest.php
index 6e8e30e..f6d7f36 100644
--- a/modules/tome_static/tests/src/Kernel/FileSavedEventTest.php
+++ b/modules/tome_static/tests/src/Kernel/FileSavedEventTest.php
@@ -34,19 +34,19 @@ class FileSavedEventTest extends TomeStaticEventTestBase {
    * @param string $path
    *   (optional) The HTML path.
    *
-   * @return \Drupal\tome_static\Event\FileSavedEvent
+   * @return FileSavedEvent
    *   The file saved event after it is triggered.
    */
   protected function fileSaved($path = '/my-file-path') {
     $event = new FileSavedEvent($path);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event;
   }
 
   /**
    * Emulates the setPath() listener.
    *
-   * @param \Drupal\tome_static\Event\FileSavedEvent $event
+   * @param FileSavedEvent $event
    *   The file saved event.
    */
   public function getPath(FileSavedEvent $event) {
diff --git a/modules/tome_static/tests/src/Kernel/ModifyDestinationEventTest.php b/modules/tome_static/tests/src/Kernel/ModifyDestinationEventTest.php
index 1b085d3..7a5252b 100644
--- a/modules/tome_static/tests/src/Kernel/ModifyDestinationEventTest.php
+++ b/modules/tome_static/tests/src/Kernel/ModifyDestinationEventTest.php
@@ -40,14 +40,14 @@ class ModifyDestinationEventTest extends TomeStaticEventTestBase {
    */
   protected function modifyDestination($destination = '/my-destination') {
     $event = new ModifyDestinationEvent($destination);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event->getDestination();
   }
 
   /**
    * Emulates the setDestination() listener.
    *
-   * @param \Drupal\tome_static\Event\ModifyDestinationEvent $event
+   * @param ModifyDestinationEvent $event
    *   The modify destination event.
    */
   public function setDestination(ModifyDestinationEvent $event) {
diff --git a/modules/tome_static/tests/src/Kernel/ModifyHtmlEventTest.php b/modules/tome_static/tests/src/Kernel/ModifyHtmlEventTest.php
index 58b7d73..0ff6a64 100644
--- a/modules/tome_static/tests/src/Kernel/ModifyHtmlEventTest.php
+++ b/modules/tome_static/tests/src/Kernel/ModifyHtmlEventTest.php
@@ -69,19 +69,19 @@ class ModifyHtmlEventTest extends TomeStaticEventTestBase {
    * @param string $path
    *   (optional) The HTML path.
    *
-   * @return \Drupal\tome_static\Event\ModifyHtmlEvent
+   * @return ModifyHtmlEvent
    *   The modified HTML event after it is triggered.
    */
   protected function modifyHtml($html = 'HTML', $path = '/my-path') {
     $event = new ModifyHtmlEvent($html, $path);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event;
   }
 
   /**
    * Emulates the setHtml() listener.
    *
-   * @param \Drupal\tome_static\Event\ModifyHtmlEvent $event
+   * @param ModifyHtmlEvent $event
    *   The modify HTML event.
    */
   public function setHtml(ModifyHtmlEvent $event) {
@@ -91,7 +91,7 @@ class ModifyHtmlEventTest extends TomeStaticEventTestBase {
   /**
    * Emulates the addInvokePath() listener.
    *
-   * @param \Drupal\tome_static\Event\ModifyHtmlEvent $event
+   * @param ModifyHtmlEvent $event
    *   The modify HTML event.
    */
   public function addInvokePath(ModifyHtmlEvent $event) {
@@ -102,7 +102,7 @@ class ModifyHtmlEventTest extends TomeStaticEventTestBase {
   /**
    * Emulates the addExcludePath() listener.
    *
-   * @param \Drupal\tome_static\Event\ModifyHtmlEvent $event
+   * @param ModifyHtmlEvent $event
    *   The modify HTML event.
    */
   public function addExcludePath(ModifyHtmlEvent $event) {
diff --git a/modules/tome_static/tests/src/Kernel/PathPlaceholderEventTest.php b/modules/tome_static/tests/src/Kernel/PathPlaceholderEventTest.php
index a4cf8f0..ab3a3fc 100644
--- a/modules/tome_static/tests/src/Kernel/PathPlaceholderEventTest.php
+++ b/modules/tome_static/tests/src/Kernel/PathPlaceholderEventTest.php
@@ -46,19 +46,19 @@ class PathPlaceholderEventTest extends TomeStaticEventTestBase {
    * @param string $path
    *   (optional) The HTML path.
    *
-   * @return \Drupal\tome_static\Event\PathPlaceholderEvent
+   * @return PathPlaceholderEvent
    *   The path placeholder event after it is triggered.
    */
   protected function pathPlaceholder($path = '/my-path/{placeholder}') {
     $event = new PathPlaceholderEvent($path);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event;
   }
 
   /**
    * Emulates the setPath() listener.
    *
-   * @param \Drupal\tome_static\Event\PathPlaceholderEvent $event
+   * @param PathPlaceholderEvent $event
    *   The path placeholder event.
    */
   public function setPath(PathPlaceholderEvent $event) {
@@ -68,7 +68,7 @@ class PathPlaceholderEventTest extends TomeStaticEventTestBase {
   /**
    * Emulates the isInvalid() listener.
    *
-   * @param \Drupal\tome_static\Event\PathPlaceholderEvent $event
+   * @param PathPlaceholderEvent $event
    *   The path placeholder event.
    */
   public function isinvalid(PathPlaceholderEvent $event) {
diff --git a/modules/tome_static/tests/src/Kernel/StaticCacheTest.php b/modules/tome_static/tests/src/Kernel/StaticCacheTest.php
index d102001..9c3d000 100644
--- a/modules/tome_static/tests/src/Kernel/StaticCacheTest.php
+++ b/modules/tome_static/tests/src/Kernel/StaticCacheTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_static\Kernel;
 
+use Drupal\tome_static\StaticGenerator;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\Core\Site\Settings;
 use Drupal\node\Entity\Node;
@@ -27,7 +28,7 @@ class StaticCacheTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     User::create([
@@ -41,7 +42,7 @@ class StaticCacheTest extends TestBase {
    * @covers \Drupal\tome_static\StaticGenerator::getPaths
    */
   public function testCache() {
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
     $base_dir = Settings::get('tome_static_directory');
 
@@ -50,7 +51,7 @@ class StaticCacheTest extends TestBase {
       'id' => 'medium',
     ])->save();
 
-    /** @var \Drupal\node\Entity\Node $article */
+    /** @var Node $article */
     $article = Node::create(['type' => 'article', 'title' => 'My article']);
     $article->save();
 
@@ -89,7 +90,7 @@ class StaticCacheTest extends TestBase {
     $this->assertFileExists("$base_dir/node/1/index.html");
     $article->delete();
     $static->cleanupStaticDirectory();
-    $this->assertFileNotExists("$base_dir/node/1/index.html");
+    $this->assertFileDoesNotExist("$base_dir/node/1/index.html");
   }
 
 }
diff --git a/modules/tome_static/tests/src/Kernel/StaticGeneratorTest.php b/modules/tome_static/tests/src/Kernel/StaticGeneratorTest.php
index 4576564..0278ad7 100644
--- a/modules/tome_static/tests/src/Kernel/StaticGeneratorTest.php
+++ b/modules/tome_static/tests/src/Kernel/StaticGeneratorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_static\Kernel;
 
+use Drupal\tome_static\StaticGenerator;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\block_content\Entity\BlockContentType;
 use Drupal\Core\Datetime\Entity\DateFormat;
@@ -30,7 +31,7 @@ class StaticGeneratorTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     User::create([
@@ -47,7 +48,7 @@ class StaticGeneratorTest extends TestBase {
    * @covers \Drupal\tome_static\EventSubscriber\EntityPathSubscriber::replacePathPlaceholder
    */
   public function testGetPaths() {
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
     $base_dir = Settings::get('tome_static_directory');
 
@@ -96,7 +97,7 @@ class StaticGeneratorTest extends TestBase {
     \Drupal::entityTypeManager()->getAccessControlHandler('node')->resetCache();
     $static->requestPath('/');
     $static->requestPath('_entity:node:en:1');
-    $this->assertFileNotExists("$base_dir/node/1/index.html");
+    $this->assertFileDoesNotExist("$base_dir/node/1/index.html");
     $static->requestPath('_entity:node:fr:1');
     $this->assertFileExists("$base_dir/french/node/1/index.html");
   }
@@ -107,7 +108,7 @@ class StaticGeneratorTest extends TestBase {
   public function testLanguagePathPrefix() {
     $this->enableModules(['tome_test']);
 
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
 
     $this->assertUnsortedEquals([
@@ -165,7 +166,7 @@ class StaticGeneratorTest extends TestBase {
     $article->addTranslation('fr', ['title' => 'My french article']);
     $article->save();
 
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
 
     $this->assertUnsortedEquals([
@@ -191,7 +192,7 @@ class StaticGeneratorTest extends TestBase {
   public function testRequestPath() {
     $this->enableModules(['tome_test']);
 
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
 
     $static->requestPath('/tome-test/page');
@@ -207,11 +208,11 @@ class StaticGeneratorTest extends TestBase {
   public function testComplexHtml() {
     $this->enableModules(['tome_test']);
 
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
 
     $invoke_paths = $static->requestPath('/tome-test/complex-page');
-    $module_path = drupal_get_path('module', 'tome_test');
+    $module_path = \Drupal::service('extension.list.module')->getPath('tome_test');
     $base_dir = Settings::get('tome_static_directory');
 
     $this->assertContains("/$module_path/assets/srcset-test1.png", $invoke_paths);
@@ -246,7 +247,7 @@ class StaticGeneratorTest extends TestBase {
   public function testPagers() {
     $this->enableModules(['tome_test']);
 
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
 
     $invoke_paths = $static->requestPath('/tome-test/pager-page');
@@ -268,7 +269,7 @@ class StaticGeneratorTest extends TestBase {
   public function testOembed() {
     $this->enableModules(['tome_test']);
 
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
 
     $invoke_paths = $static->requestPath('/tome-test/oembed-page');
@@ -292,7 +293,7 @@ class StaticGeneratorTest extends TestBase {
     $this->enableModules(['link', 'block_content']);
     $this->installEntitySchema('block_content');
 
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
 
     BlockContentType::create([
diff --git a/modules/tome_static/tests/src/Kernel/StaticRedirectTest.php b/modules/tome_static/tests/src/Kernel/StaticRedirectTest.php
index 4251884..3d574df 100644
--- a/modules/tome_static/tests/src/Kernel/StaticRedirectTest.php
+++ b/modules/tome_static/tests/src/Kernel/StaticRedirectTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_static\Kernel;
 
+use Drupal\tome_static\StaticGenerator;
 use Drupal\Core\Site\Settings;
 use Drupal\redirect\Entity\Redirect;
 use Drupal\Tests\tome_base\Kernel\TestBase;
@@ -28,7 +29,7 @@ class StaticRedirectTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('redirect');
     // @see \Drupal\redirect\RedirectChecker::canRedirect
@@ -41,7 +42,7 @@ class StaticRedirectTest extends TestBase {
    * @covers \Drupal\tome_static\EventSubscriber\RedirectPathSubscriber::replacePathPlaceholder
    */
   public function testRedirect() {
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
     $base_dir = Settings::get('tome_static_directory');
 
diff --git a/modules/tome_static/tests/src/Kernel/TomeStaticEventTestBase.php b/modules/tome_static/tests/src/Kernel/TomeStaticEventTestBase.php
index dbdf1c1..ee73798 100644
--- a/modules/tome_static/tests/src/Kernel/TomeStaticEventTestBase.php
+++ b/modules/tome_static/tests/src/Kernel/TomeStaticEventTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_static\Kernel;
 
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -24,14 +25,14 @@ abstract class TomeStaticEventTestBase extends KernelTestBase {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->eventDispatcher = \Drupal::service('event_dispatcher');
diff --git a/modules/tome_sync/modules/tome_sync_autoclean/src/EventSubscriber/ExportEventSubscriber.php b/modules/tome_sync/modules/tome_sync_autoclean/src/EventSubscriber/ExportEventSubscriber.php
index 865fa9f..da28a20 100644
--- a/modules/tome_sync/modules/tome_sync_autoclean/src/EventSubscriber/ExportEventSubscriber.php
+++ b/modules/tome_sync/modules/tome_sync_autoclean/src/EventSubscriber/ExportEventSubscriber.php
@@ -28,41 +28,41 @@ class ExportEventSubscriber implements EventSubscriberInterface {
   /**
    * The target content storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $contentStorage;
 
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The file sync service.
    *
-   * @var \Drupal\tome_sync\FileSyncInterface
+   * @var FileSyncInterface
    */
   protected $fileSync;
 
   /**
    * Creates a ExportEventSubscriber object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $content_storage
+   * @param StorageInterface $content_storage
    *   The target content storage.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The target config storage.
-   * @param \Drupal\tome_sync\FileSyncInterface $file_sync
+   * @param FileSyncInterface $file_sync
    *   The file sync service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(StorageInterface $content_storage, StorageInterface $config_storage, FileSyncInterface $file_sync, FileSystemInterface $file_system) {
@@ -87,7 +87,7 @@ class ExportEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to content events.
    *
-   * @param \Drupal\tome_sync\Event\ContentCrudEvent $event
+   * @param ContentCrudEvent $event
    *   The event.
    */
   public function exportContent(ContentCrudEvent $event) {
@@ -109,7 +109,7 @@ class ExportEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to config events.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The event.
    */
   public function exportConfig(ConfigCrudEvent $event) {
diff --git a/modules/tome_sync/src/AccountSwitcherTrait.php b/modules/tome_sync/src/AccountSwitcherTrait.php
index c21f57e..7905104 100644
--- a/modules/tome_sync/src/AccountSwitcherTrait.php
+++ b/modules/tome_sync/src/AccountSwitcherTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tome_sync;
 
+use Drupal\Core\Session\AccountSwitcherInterface;
 use Drupal\Core\Session\UserSession;
 
 /**
@@ -12,7 +13,7 @@ trait AccountSwitcherTrait {
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
diff --git a/modules/tome_sync/src/Commands/CleanFilesCommand.php b/modules/tome_sync/src/Commands/CleanFilesCommand.php
index 019b66d..799a437 100644
--- a/modules/tome_sync/src/Commands/CleanFilesCommand.php
+++ b/modules/tome_sync/src/Commands/CleanFilesCommand.php
@@ -27,41 +27,41 @@ class CleanFilesCommand extends CommandBase {
   /**
    * The target content storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $contentStorage;
 
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The file sync service.
    *
-   * @var \Drupal\tome_sync\FileSyncInterface
+   * @var FileSyncInterface
    */
   protected $fileSync;
 
   /**
    * Creates a CleanFilesCommand object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $content_storage
+   * @param StorageInterface $content_storage
    *   The target content storage.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The target config storage.
-   * @param \Drupal\tome_sync\FileSyncInterface $file_sync
+   * @param FileSyncInterface $file_sync
    *   The file sync service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(StorageInterface $content_storage, StorageInterface $config_storage, FileSyncInterface $file_sync, FileSystemInterface $file_system) {
@@ -84,7 +84,7 @@ class CleanFilesCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();
 
     $this->io()->writeLn('Searching for unused files...');
@@ -103,6 +103,7 @@ class CleanFilesCommand extends CommandBase {
       $this->fileSync->deleteFile($filename);
     }
     $this->io()->success('Deleted all unused files.');
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Commands/DeleteContentCommand.php b/modules/tome_sync/src/Commands/DeleteContentCommand.php
index f9db5d8..c109b12 100644
--- a/modules/tome_sync/src/Commands/DeleteContentCommand.php
+++ b/modules/tome_sync/src/Commands/DeleteContentCommand.php
@@ -21,20 +21,20 @@ class DeleteContentCommand extends ImportCommand {
   /**
    * The config installer.
    *
-   * @var \Drupal\Core\Config\ConfigInstallerInterface
+   * @var ConfigInstallerInterface
    */
   protected $configInstaller;
 
   /**
    * Constructs an DeleteContentCommand instance.
    *
-   * @param \Drupal\tome_sync\ImporterInterface $importer
+   * @param ImporterInterface $importer
    *   The importer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\Core\Config\ConfigInstallerInterface $config_installer
+   * @param ConfigInstallerInterface $config_installer
    *   The config installer.
    */
   public function __construct(ImporterInterface $importer, EntityTypeManagerInterface $entity_type_manager, StateInterface $state, ConfigInstallerInterface $config_installer) {
@@ -54,7 +54,7 @@ class DeleteContentCommand extends ImportCommand {
   /**
    * {@inheritdoc}
    */
-  public function execute(InputInterface $input, OutputInterface $output) {
+  public function execute(InputInterface $input, OutputInterface $output): int {
     $this->configInstaller->setSyncing(TRUE);
     $this->importer->isImporting(TRUE);
 
@@ -100,6 +100,7 @@ class DeleteContentCommand extends ImportCommand {
 
     $this->importer->isImporting(FALSE);
     $this->configInstaller->setSyncing(FALSE);
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Commands/ExportCommand.php b/modules/tome_sync/src/Commands/ExportCommand.php
index d003fa5..1101e18 100644
--- a/modules/tome_sync/src/Commands/ExportCommand.php
+++ b/modules/tome_sync/src/Commands/ExportCommand.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tome_sync\Commands;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\tome_base\CommandBase;
 use Drupal\tome_sync\Event\TomeSyncEvents;
@@ -9,7 +10,6 @@ use Drupal\tome_sync\ExporterInterface;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 
 /**
@@ -38,32 +38,32 @@ class ExportCommand extends CommandBase {
   /**
    * The exporter.
    *
-   * @var \Drupal\tome_sync\ExporterInterface
+   * @var ExporterInterface
    */
   protected $exporter;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs an ExportCommand instance.
    *
-   * @param \Drupal\tome_sync\ExporterInterface $exporter
+   * @param ExporterInterface $exporter
    *   The exporter.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(ExporterInterface $exporter, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher) {
@@ -87,7 +87,7 @@ class ExportCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();
     if (!$options['yes'] && !$this->io()->confirm('The files in your export directory will be deleted and replaced.', FALSE)) {
       return 0;
@@ -118,9 +118,10 @@ class ExportCommand extends CommandBase {
       return 1;
     }
 
-    $this->eventDispatcher->dispatch(TomeSyncEvents::EXPORT_ALL, new Event());
+    $this->eventDispatcher->dispatch(new Event(), TomeSyncEvents::EXPORT_ALL);
 
     $this->io()->success('Exported config, content, and files.');
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Commands/ExportContentCommand.php b/modules/tome_sync/src/Commands/ExportContentCommand.php
index 7d13815..a87ac2c 100644
--- a/modules/tome_sync/src/Commands/ExportContentCommand.php
+++ b/modules/tome_sync/src/Commands/ExportContentCommand.php
@@ -26,7 +26,7 @@ class ExportContentCommand extends ExportCommand {
   /**
    * {@inheritdoc}
    */
-  public function execute(InputInterface $input, OutputInterface $output) {
+  public function execute(InputInterface $input, OutputInterface $output): int {
     $chunk = $input->getArgument('chunk');
     $id_pairs = explode(',', $chunk);
     $storages = [];
@@ -53,6 +53,7 @@ class ExportContentCommand extends ExportCommand {
         $this->exporter->exportContent($entity->getTranslation($language->getId()));
       }
     }
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Commands/ImportCommand.php b/modules/tome_sync/src/Commands/ImportCommand.php
index bfb97a4..5eb462a 100644
--- a/modules/tome_sync/src/Commands/ImportCommand.php
+++ b/modules/tome_sync/src/Commands/ImportCommand.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tome_sync\Commands;
 
+use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\State\StateInterface;
@@ -37,32 +38,32 @@ class ImportCommand extends CommandBase {
   /**
    * The importer.
    *
-   * @var \Drupal\tome_sync\ImporterInterface
+   * @var ImporterInterface
    */
   protected $importer;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Constructs an ImportCommand instance.
    *
-   * @param \Drupal\tome_sync\ImporterInterface $importer
+   * @param ImporterInterface $importer
    *   The importer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
    */
   public function __construct(ImporterInterface $importer, EntityTypeManagerInterface $entity_type_manager, StateInterface $state) {
@@ -86,7 +87,7 @@ class ImportCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();
 
     if (!$options['yes'] && !$this->io()->confirm('Your local site\'s config, content, and files will be deleted and replaced.', FALSE)) {
@@ -133,13 +134,14 @@ class ImportCommand extends CommandBase {
     $this->state->set(ImporterInterface::STATE_KEY_IMPORTING, FALSE);
 
     $this->io()->success('Imported config, content, and files.');
+    return 0;
   }
 
   /**
    * Prepares config for import by copying some directly from the source.
    */
   protected function prepareConfigForImport() {
-    /** @var \Drupal\Core\Config\StorageInterface $source_storage */
+    /** @var StorageInterface $source_storage */
     $source_storage = \Drupal::service('config.storage.sync');
     if ($site_data = $source_storage->read('system.site')) {
       \Drupal::configFactory()->getEditable('system.site')->setData($site_data)->save(TRUE);
diff --git a/modules/tome_sync/src/Commands/ImportCompleteCommand.php b/modules/tome_sync/src/Commands/ImportCompleteCommand.php
index 2a8547d..62788d1 100644
--- a/modules/tome_sync/src/Commands/ImportCompleteCommand.php
+++ b/modules/tome_sync/src/Commands/ImportCompleteCommand.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\tome_sync\Commands;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\tome_base\CommandBase;
 use Drupal\tome_sync\Event\TomeSyncEvents;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 
 /**
@@ -19,14 +19,14 @@ class ImportCompleteCommand extends CommandBase {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs an ImportCompleteCommand instance.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ -46,8 +46,9 @@ class ImportCompleteCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
-    $this->eventDispatcher->dispatch(TomeSyncEvents::IMPORT_ALL, new Event());
+  protected function execute(InputInterface $input, OutputInterface $output): int {
+    $this->eventDispatcher->dispatch(new Event(), TomeSyncEvents::IMPORT_ALL);
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Commands/ImportContentCommand.php b/modules/tome_sync/src/Commands/ImportContentCommand.php
index 7dfef5c..ab676aa 100644
--- a/modules/tome_sync/src/Commands/ImportContentCommand.php
+++ b/modules/tome_sync/src/Commands/ImportContentCommand.php
@@ -26,13 +26,14 @@ class ImportContentCommand extends ImportCommand {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $names = $input->getArgument('names');
     $names = explode(',', $names);
     foreach ($names as $name) {
       list($entity_type_id, $uuid, $langcode) = TomeSyncHelper::getPartsFromContentName($name);
       $this->importer->importContent($entity_type_id, $uuid, $langcode);
     }
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Commands/ImportPartialCommand.php b/modules/tome_sync/src/Commands/ImportPartialCommand.php
index 4e1832d..f07367f 100644
--- a/modules/tome_sync/src/Commands/ImportPartialCommand.php
+++ b/modules/tome_sync/src/Commands/ImportPartialCommand.php
@@ -21,20 +21,20 @@ class ImportPartialCommand extends ImportCommand {
   /**
    * The content hasher.
    *
-   * @var \Drupal\tome_sync\ContentHasherInterface
+   * @var ContentHasherInterface
    */
   protected $contentHasher;
 
   /**
    * Constructs an ImportPartialCommand instance.
    *
-   * @param \Drupal\tome_sync\ImporterInterface $importer
+   * @param ImporterInterface $importer
    *   The importer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\tome_sync\ContentHasherInterface $content_hasher
+   * @param ContentHasherInterface $content_hasher
    *   The content hasher.
    */
   public function __construct(ImporterInterface $importer, EntityTypeManagerInterface $entity_type_manager, StateInterface $state, ContentHasherInterface $content_hasher) {
@@ -56,7 +56,7 @@ class ImportPartialCommand extends ImportCommand {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     if (!$this->contentHasher->hashesExist()) {
       $this->io()->error('No content hashes exist to perform a partial import. Please run a full Tome install and export (i.e. "drush tome:install && drush tome:export"), which will ensure hashes exist in the database and filesystem.');
       return 1;
@@ -141,6 +141,7 @@ class ImportPartialCommand extends ImportCommand {
     $this->state->set(ImporterInterface::STATE_KEY_IMPORTING, FALSE);
 
     $this->io()->success('Imported config, content, and files.');
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/ContentHasher.php b/modules/tome_sync/src/ContentHasher.php
index 484780f..78e1598 100644
--- a/modules/tome_sync/src/ContentHasher.php
+++ b/modules/tome_sync/src/ContentHasher.php
@@ -13,23 +13,23 @@ class ContentHasher implements ContentHasherInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The content storage.
    *
-   * @var \Drupal\Core\Config\FileStorage
+   * @var FileStorage
    */
   protected $storage;
 
   /**
    * Creates a ContentHasher object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Config\FileStorage $storage
+   * @param FileStorage $storage
    *   The content storage.
    */
   public function __construct(Connection $database, FileStorage $storage) {
diff --git a/modules/tome_sync/src/ContentIndexerTrait.php b/modules/tome_sync/src/ContentIndexerTrait.php
index 19e7b94..de9880e 100644
--- a/modules/tome_sync/src/ContentIndexerTrait.php
+++ b/modules/tome_sync/src/ContentIndexerTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tome_sync;
 
+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -21,7 +22,7 @@ trait ContentIndexerTrait {
   /**
    * Writes content to the index.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity to be indexed.
    */
   protected function indexContent(ContentEntityInterface $entity) {
@@ -38,7 +39,7 @@ trait ContentIndexerTrait {
       }
       elseif ($field instanceof FieldItemListInterface) {
         foreach ($field as $item) {
-          /** @var \Drupal\Core\Field\FieldItemInterface $item */
+          /** @var FieldItemInterface $item */
           foreach ($item as $property) {
             // @see \Drupal\tome_sync\Normalizer\UriNormalizer
             if ($property instanceof UriInterface && strpos($property->getValue(), 'entity:') === 0) {
@@ -88,7 +89,7 @@ trait ContentIndexerTrait {
   /**
    * Removes content from the index.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity to be indexed.
    */
   protected function unIndexContent(ContentEntityInterface $entity) {
diff --git a/modules/tome_sync/src/Event/ContentCrudEvent.php b/modules/tome_sync/src/Event/ContentCrudEvent.php
index 73f50ed..8159416 100644
--- a/modules/tome_sync/src/Event/ContentCrudEvent.php
+++ b/modules/tome_sync/src/Event/ContentCrudEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\tome_sync\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Wraps a content event for listeners.
@@ -13,14 +13,14 @@ class ContentCrudEvent extends Event {
   /**
    * Content object.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $content;
 
   /**
    * Constructs a CollectPathsEvent object.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $content
+   * @param ContentEntityInterface $content
    *   Content object.
    */
   public function __construct(ContentEntityInterface $content) {
@@ -30,7 +30,7 @@ class ContentCrudEvent extends Event {
   /**
    * Gets the content object.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The content object that caused the event to fire.
    */
   public function getContent() {
diff --git a/modules/tome_sync/src/EventSubscriber/BookEventSubscriber.php b/modules/tome_sync/src/EventSubscriber/BookEventSubscriber.php
index 6c61fc4..3c73b06 100644
--- a/modules/tome_sync/src/EventSubscriber/BookEventSubscriber.php
+++ b/modules/tome_sync/src/EventSubscriber/BookEventSubscriber.php
@@ -22,32 +22,32 @@ class BookEventSubscriber implements EventSubscriberInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Creates a BookEventSubscriber object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(Connection $connection, EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system) {
diff --git a/modules/tome_sync/src/EventSubscriber/ConfigEventSubscriber.php b/modules/tome_sync/src/EventSubscriber/ConfigEventSubscriber.php
index 21295c5..8ed8405 100644
--- a/modules/tome_sync/src/EventSubscriber/ConfigEventSubscriber.php
+++ b/modules/tome_sync/src/EventSubscriber/ConfigEventSubscriber.php
@@ -18,14 +18,14 @@ class ConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;
 
   /**
    * Constructs the ConfigEventSubscriber object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The config storage.
    */
   public function __construct(StorageInterface $config_storage) {
@@ -35,7 +35,7 @@ class ConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a save event.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    */
   public function configSave(ConfigCrudEvent $event) {
@@ -48,7 +48,7 @@ class ConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to delete event.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    */
   public function configDelete(ConfigCrudEvent $event) {
@@ -60,7 +60,7 @@ class ConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to rename event.
    *
-   * @param \Drupal\Core\Config\ConfigRenameEvent $event
+   * @param ConfigRenameEvent $event
    *   The configuration event.
    */
   public function configRename(ConfigRenameEvent $event) {
diff --git a/modules/tome_sync/src/EventSubscriber/ContentHasherEventSubscriber.php b/modules/tome_sync/src/EventSubscriber/ContentHasherEventSubscriber.php
index abffb92..32e53a4 100644
--- a/modules/tome_sync/src/EventSubscriber/ContentHasherEventSubscriber.php
+++ b/modules/tome_sync/src/EventSubscriber/ContentHasherEventSubscriber.php
@@ -19,23 +19,23 @@ class ContentHasherEventSubscriber implements EventSubscriberInterface {
   /**
    * The content hasher.
    *
-   * @var \Drupal\tome_sync\ContentHasherInterface
+   * @var ContentHasherInterface
    */
   protected $contentHasher;
 
   /**
    * The target content storage.
    *
-   * @var \Drupal\Core\Config\FileStorage
+   * @var FileStorage
    */
   protected $contentStorage;
 
   /**
    * Creates a ContentHasherEventSubscriber object.
    *
-   * @param \Drupal\tome_sync\ContentHasherInterface $content_hasher
+   * @param ContentHasherInterface $content_hasher
    *   The content hasher.
-   * @param \Drupal\Core\Config\FileStorage $content_storage
+   * @param FileStorage $content_storage
    *   The target content storage.
    */
   public function __construct(ContentHasherInterface $content_hasher, FileStorage $content_storage) {
@@ -46,7 +46,7 @@ class ContentHasherEventSubscriber implements EventSubscriberInterface {
   /**
    * Maintains a hash of imported content to support partial imports.
    *
-   * @param \Drupal\tome_sync\Event\ContentCrudEvent $event
+   * @param ContentCrudEvent $event
    *   The content CRUD event.
    */
   public function writeHash(ContentCrudEvent $event) {
@@ -62,7 +62,7 @@ class ContentHasherEventSubscriber implements EventSubscriberInterface {
   /**
    * Maintains a hash of exported content to support partial imports.
    *
-   * @param \Drupal\tome_sync\Event\ContentCrudEvent $event
+   * @param ContentCrudEvent $event
    *   The content CRUD event.
    */
   public function writeSourceHash(ContentCrudEvent $event) {
@@ -78,7 +78,7 @@ class ContentHasherEventSubscriber implements EventSubscriberInterface {
   /**
    * Maintains a hash of imported content to support partial imports.
    *
-   * @param \Drupal\tome_sync\Event\ContentCrudEvent $event
+   * @param ContentCrudEvent $event
    *   The content CRUD event.
    */
   public function deleteHash(ContentCrudEvent $event) {
diff --git a/modules/tome_sync/src/EventSubscriber/LanguageConfigEventSubscriber.php b/modules/tome_sync/src/EventSubscriber/LanguageConfigEventSubscriber.php
index 91d160f..e6d1bd7 100644
--- a/modules/tome_sync/src/EventSubscriber/LanguageConfigEventSubscriber.php
+++ b/modules/tome_sync/src/EventSubscriber/LanguageConfigEventSubscriber.php
@@ -17,14 +17,14 @@ class LanguageConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;
 
   /**
    * Constructs the ConfigEventSubscriber object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The config storage.
    */
   public function __construct(StorageInterface $config_storage) {
@@ -34,7 +34,7 @@ class LanguageConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a save event.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   The configuration event.
    */
   public function configSave(LanguageConfigOverrideCrudEvent $event) {
@@ -49,7 +49,7 @@ class LanguageConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to delete event.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   The configuration event.
    */
   public function configDelete(LanguageConfigOverrideCrudEvent $event) {
diff --git a/modules/tome_sync/src/Exporter.php b/modules/tome_sync/src/Exporter.php
index 8ccb8da..c6144d6 100644
--- a/modules/tome_sync/src/Exporter.php
+++ b/modules/tome_sync/src/Exporter.php
@@ -29,42 +29,42 @@ class Exporter implements ExporterInterface {
   /**
    * The target content storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $contentStorage;
 
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The file sync service.
    *
-   * @var \Drupal\tome_sync\FileSyncInterface
+   * @var FileSyncInterface
    */
   protected $fileSync;
 
@@ -87,19 +87,19 @@ class Exporter implements ExporterInterface {
   /**
    * Creates an Exporter object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $content_storage
+   * @param StorageInterface $content_storage
    *   The target content storage.
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher.
-   * @param \Drupal\tome_sync\FileSyncInterface $file_sync
+   * @param FileSyncInterface $file_sync
    *   The file sync service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(StorageInterface $content_storage, Serializer $serializer, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, AccountSwitcherInterface $account_switcher, FileSyncInterface $file_sync, FileSystemInterface $file_system) {
@@ -155,7 +155,7 @@ class Exporter implements ExporterInterface {
       $this->fileSync->exportFile($entity);
     }
     $event = new ContentCrudEvent($entity);
-    $this->eventDispatcher->dispatch(TomeSyncEvents::EXPORT_CONTENT, $event);
+    $this->eventDispatcher->dispatch($event, TomeSyncEvents::EXPORT_CONTENT);
     $this->switchBack();
   }
 
@@ -173,7 +173,7 @@ class Exporter implements ExporterInterface {
       $this->fileSync->deleteFileExport($entity);
     }
     $event = new ContentCrudEvent($entity);
-    $this->eventDispatcher->dispatch(TomeSyncEvents::DELETE_CONTENT, $event);
+    $this->eventDispatcher->dispatch($event, TomeSyncEvents::DELETE_CONTENT);
   }
 
 }
diff --git a/modules/tome_sync/src/ExporterInterface.php b/modules/tome_sync/src/ExporterInterface.php
index 97f538c..07ce971 100644
--- a/modules/tome_sync/src/ExporterInterface.php
+++ b/modules/tome_sync/src/ExporterInterface.php
@@ -28,7 +28,7 @@ interface ExporterInterface {
   /**
    * Exports a content entity to the target storage.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity to export.
    */
   public function exportContent(ContentEntityInterface $entity);
@@ -36,7 +36,7 @@ interface ExporterInterface {
   /**
    * Deletes an exported content entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity to delete.
    */
   public function deleteContentExport(ContentEntityInterface $entity);
diff --git a/modules/tome_sync/src/FileSync.php b/modules/tome_sync/src/FileSync.php
index 3d47a7d..506fcba 100644
--- a/modules/tome_sync/src/FileSync.php
+++ b/modules/tome_sync/src/FileSync.php
@@ -22,14 +22,14 @@ class FileSync implements FileSyncInterface {
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Creates an FileSync object.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(FileSystemInterface $file_system) {
@@ -44,7 +44,7 @@ class FileSync implements FileSyncInterface {
     if (!is_dir($file_directory)) {
       return;
     }
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     foreach ($this->fileSystem->scanDirectory($file_directory, '/.*/') as $file) {
       $destination = 'public://' . ltrim(str_replace($file_directory, '', $file->uri), '/');
       $directory = dirname($destination);
diff --git a/modules/tome_sync/src/FileSyncInterface.php b/modules/tome_sync/src/FileSyncInterface.php
index 7bc8651..817f8b6 100644
--- a/modules/tome_sync/src/FileSyncInterface.php
+++ b/modules/tome_sync/src/FileSyncInterface.php
@@ -25,7 +25,7 @@ interface FileSyncInterface {
   /**
    * Exports a file to the export directory.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity.
    */
   public function exportFile(FileInterface $file);
@@ -33,7 +33,7 @@ interface FileSyncInterface {
   /**
    * Deletes an exported file by entity.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity.
    */
   public function deleteFileExport(FileInterface $file);
diff --git a/modules/tome_sync/src/Form/CleanFilesForm.php b/modules/tome_sync/src/Form/CleanFilesForm.php
index b0507dd..2472d81 100644
--- a/modules/tome_sync/src/Form/CleanFilesForm.php
+++ b/modules/tome_sync/src/Form/CleanFilesForm.php
@@ -26,41 +26,41 @@ class CleanFilesForm extends FormBase {
   /**
    * The target content storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $contentStorage;
 
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The file sync service.
    *
-   * @var \Drupal\tome_sync\FileSyncInterface
+   * @var FileSyncInterface
    */
   protected $fileSync;
 
   /**
    * Creates a CleanFilesForm object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $content_storage
+   * @param StorageInterface $content_storage
    *   The target content storage.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The target config storage.
-   * @param \Drupal\tome_sync\FileSyncInterface $file_sync
+   * @param FileSyncInterface $file_sync
    *   The file sync service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(StorageInterface $content_storage, StorageInterface $config_storage, FileSyncInterface $file_sync, FileSystemInterface $file_system) {
diff --git a/modules/tome_sync/src/Form/ImportPartialForm.php b/modules/tome_sync/src/Form/ImportPartialForm.php
index c6bf598..375008d 100644
--- a/modules/tome_sync/src/Form/ImportPartialForm.php
+++ b/modules/tome_sync/src/Form/ImportPartialForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tome_sync\Form;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\Config\StorageComparer;
 use Drupal\Core\Config\StorageInterface;
@@ -26,59 +27,59 @@ class ImportPartialForm extends FormBase {
   /**
    * The importer.
    *
-   * @var \Drupal\tome_sync\ImporterInterface
+   * @var ImporterInterface
    */
   protected $importer;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The content hasher.
    *
-   * @var \Drupal\tome_sync\ContentHasherInterface
+   * @var ContentHasherInterface
    */
   protected $contentHasher;
 
   /**
    * The state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The sync configuration object.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $syncStorage;
 
   /**
    * The active configuration object.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $activeStorage;
 
   /**
    * Constructs an ImportPartialForm instance.
    *
-   * @param \Drupal\tome_sync\ImporterInterface $importer
+   * @param ImporterInterface $importer
    *   The importer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\tome_sync\ContentHasherInterface $content_hasher
+   * @param ContentHasherInterface $content_hasher
    *   The content hasher.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\Core\Config\StorageInterface $sync_storage
+   * @param StorageInterface $sync_storage
    *   The source storage.
-   * @param \Drupal\Core\Config\StorageInterface $active_storage
+   * @param StorageInterface $active_storage
    *   The target storage.
    */
   public function __construct(ImporterInterface $importer, EntityTypeManagerInterface $entity_type_manager, ContentHasherInterface $content_hasher, StateInterface $state, StorageInterface $sync_storage, StorageInterface $active_storage) {
@@ -181,7 +182,7 @@ class ImportPartialForm extends FormBase {
   /**
    * Determines if there is an initial error that should prevent an import.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   An error message, if available.
    */
   protected function getInitialError() {
diff --git a/modules/tome_sync/src/Importer.php b/modules/tome_sync/src/Importer.php
index 49a1b6a..a5c929f 100644
--- a/modules/tome_sync/src/Importer.php
+++ b/modules/tome_sync/src/Importer.php
@@ -29,21 +29,21 @@ class Importer implements ImporterInterface {
   /**
    * The target content storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $contentStorage;
 
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -57,21 +57,21 @@ class Importer implements ImporterInterface {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The file sync service.
    *
-   * @var \Drupal\tome_sync\FileSyncInterface
+   * @var FileSyncInterface
    */
   protected $fileSync;
 
@@ -85,19 +85,19 @@ class Importer implements ImporterInterface {
   /**
    * Creates an Importer object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $content_storage
+   * @param StorageInterface $content_storage
    *   The target content storage.
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher.
-   * @param \Drupal\tome_sync\FileSyncInterface $file_sync
+   * @param FileSyncInterface $file_sync
    *   The file sync service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(StorageInterface $content_storage, Serializer $serializer, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, AccountSwitcherInterface $account_switcher, FileSyncInterface $file_sync, FileSystemInterface $file_system) {
@@ -228,7 +228,7 @@ class Importer implements ImporterInterface {
     $this->isImporting(FALSE);
     if (isset($imported_entity)) {
       $event = new ContentCrudEvent($imported_entity);
-      $this->eventDispatcher->dispatch(TomeSyncEvents::IMPORT_CONTENT, $event);
+      $this->eventDispatcher->dispatch($event, TomeSyncEvents::IMPORT_CONTENT);
     }
     $this->switchBack();
   }
@@ -236,9 +236,9 @@ class Importer implements ImporterInterface {
   /**
    * Copies values from a denormalized entity to the original entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The denormalized entity.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $original_entity
+   * @param FieldableEntityInterface $original_entity
    *   The original entity.
    *
    * @see \Drupal\rest\Plugin\rest\resource\EntityResource::patch
@@ -256,19 +256,19 @@ class Importer implements ImporterInterface {
   /**
    * Loads an entity from the content storage.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type of this entity.
    * @param string $uuid
    *   The entity UUID.
    * @param string $langcode
    *   (optional) The langcode, for translations.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The loaded entity.
    */
   protected function loadEntityFromStorage(EntityTypeInterface $entity_type, $uuid, $langcode = NULL) {
     $contents = $this->contentStorage->read(TomeSyncHelper::getContentNameFromParts($entity_type->id(), $uuid, $langcode));
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->serializer->denormalize($contents, $entity_type->getClass(), $this->encoderFormat);
     $entity->_tomeFields = array_keys($contents);
     return $entity;
diff --git a/modules/tome_sync/src/JsonFileStorageFactory.php b/modules/tome_sync/src/JsonFileStorageFactory.php
index 532ed60..5324ee5 100644
--- a/modules/tome_sync/src/JsonFileStorageFactory.php
+++ b/modules/tome_sync/src/JsonFileStorageFactory.php
@@ -14,7 +14,7 @@ class JsonFileStorageFactory {
   /**
    * Returns a JsonFileStorage object.
    *
-   * @return \Drupal\tome_sync\JsonFileStorage
+   * @return JsonFileStorage
    *   The JSON file storage.
    */
   public static function getContent() {
diff --git a/modules/tome_sync/src/Normalizer/ContentEntityNormalizer.php b/modules/tome_sync/src/Normalizer/ContentEntityNormalizer.php
index 86f8b85..0b72b49 100644
--- a/modules/tome_sync/src/Normalizer/ContentEntityNormalizer.php
+++ b/modules/tome_sync/src/Normalizer/ContentEntityNormalizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tome_sync\Normalizer;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\serialization\Normalizer\ContentEntityNormalizer as BaseContentEntityNormalizer;
 
 /**
@@ -40,7 +41,7 @@ class ContentEntityNormalizer extends BaseContentEntityNormalizer {
    */
   public function normalize($entity, $format = NULL, array $context = []) {
     $values = parent::normalize($entity, $format, $context);
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity_type = $entity->getEntityType();
     $id_key = $entity_type->getKey('id');
     // User IDs are important to retain to ensure that User 1 is consistent
diff --git a/modules/tome_sync/src/Normalizer/PathAliasNormalizer.php b/modules/tome_sync/src/Normalizer/PathAliasNormalizer.php
index f652ea1..0b25d56 100644
--- a/modules/tome_sync/src/Normalizer/PathAliasNormalizer.php
+++ b/modules/tome_sync/src/Normalizer/PathAliasNormalizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tome_sync\Normalizer;
 
+use Drupal\path_alias\PathAliasInterface;
 use Drupal\Component\Uuid\Uuid;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -23,20 +24,20 @@ class PathAliasNormalizer extends ContentEntityNormalizer {
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * Constructs a PathAliasNormalizer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeRepositoryInterface $entity_type_repository = NULL, EntityFieldManagerInterface $entity_field_manager = NULL, EntityRepositoryInterface $entity_repository) {
@@ -67,7 +68,7 @@ class PathAliasNormalizer extends ContentEntityNormalizer {
    * {@inheritdoc}
    */
   public function denormalize($data, $class, $format = NULL, array $context = []) {
-    /** @var \Drupal\path_alias\PathAliasInterface $entity */
+    /** @var PathAliasInterface $entity */
     $entity = parent::denormalize($data, $class, $format, $context);
     foreach (['path', 'alias'] as $key) {
       if ($entity && !empty($entity->get($key)->value)) {
diff --git a/modules/tome_sync/src/Normalizer/UriNormalizer.php b/modules/tome_sync/src/Normalizer/UriNormalizer.php
index 83eabc8..d32993a 100644
--- a/modules/tome_sync/src/Normalizer/UriNormalizer.php
+++ b/modules/tome_sync/src/Normalizer/UriNormalizer.php
@@ -23,23 +23,23 @@ class UriNormalizer extends PrimitiveDataNormalizer implements DenormalizerInter
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * Constructs a UriNormalizer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository) {
diff --git a/modules/tome_sync/src/TomeSyncHelper.php b/modules/tome_sync/src/TomeSyncHelper.php
index 745473d..87cd11b 100644
--- a/modules/tome_sync/src/TomeSyncHelper.php
+++ b/modules/tome_sync/src/TomeSyncHelper.php
@@ -17,7 +17,7 @@ class TomeSyncHelper {
    *
    * This can be used to read/write from the tome_sync.storage.content service.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    *
    * @return string
diff --git a/modules/tome_sync/src/YamlFileStorageFactory.php b/modules/tome_sync/src/YamlFileStorageFactory.php
index 3bf4c1b..93b3f17 100644
--- a/modules/tome_sync/src/YamlFileStorageFactory.php
+++ b/modules/tome_sync/src/YamlFileStorageFactory.php
@@ -14,7 +14,7 @@ class YamlFileStorageFactory {
   /**
    * Returns a YamlFileStorage object.
    *
-   * @return \Drupal\tome_sync\YamlFileStorage
+   * @return YamlFileStorage
    *   The Yaml file storage.
    */
   public static function getContent() {
diff --git a/modules/tome_sync/tests/src/Functional/BookTest.php b/modules/tome_sync/tests/src/Functional/BookTest.php
index d051a7e..9d07d1d 100644
--- a/modules/tome_sync/tests/src/Functional/BookTest.php
+++ b/modules/tome_sync/tests/src/Functional/BookTest.php
@@ -39,7 +39,7 @@ class BookTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('system_breadcrumb_block');
     $this->drupalPlaceBlock('page_title_block');
diff --git a/modules/tome_sync/tests/src/Functional/ImportPartialFormTest.php b/modules/tome_sync/tests/src/Functional/ImportPartialFormTest.php
index b9f2c71..f5b9f19 100644
--- a/modules/tome_sync/tests/src/Functional/ImportPartialFormTest.php
+++ b/modules/tome_sync/tests/src/Functional/ImportPartialFormTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\tome_sync\Functional;
 
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\tome_sync\JsonFileStorage;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\tome_sync\ContentIndexerTrait;
@@ -19,7 +21,7 @@ class ImportPartialFormTest extends BrowserTestBase {
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
@@ -40,7 +42,7 @@ class ImportPartialFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Note: The format for ::writeSettings is really weird.
@@ -63,7 +65,7 @@ class ImportPartialFormTest extends BrowserTestBase {
    * Tests that the import partial form works.
    */
   public function testImportPartialForm() {
-    /** @var \Drupal\tome_sync\JsonFileStorage $storage */
+    /** @var JsonFileStorage $storage */
     $storage = \Drupal::service('tome_sync.storage.content');
 
     $node1 = $this->createNode([
diff --git a/modules/tome_sync/tests/src/Kernel/ContentHasherTest.php b/modules/tome_sync/tests/src/Kernel/ContentHasherTest.php
index a0d818f..ca76e0c 100644
--- a/modules/tome_sync/tests/src/Kernel/ContentHasherTest.php
+++ b/modules/tome_sync/tests/src/Kernel/ContentHasherTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_sync\Kernel;
 
+use Drupal\tome_sync\ContentHasherInterface;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\tome_base\Kernel\TestBase;
 use Drupal\tome_sync\TomeSyncHelper;
@@ -24,7 +25,7 @@ class ContentHasherTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
   }
@@ -34,7 +35,7 @@ class ContentHasherTest extends TestBase {
    * @covers \Drupal\tome_sync\EventSubscriber\ContentHasherEventSubscriber::writeHash
    */
   public function testContentHasher() {
-    /** @var \Drupal\tome_sync\ContentHasherInterface $content_hasher */
+    /** @var ContentHasherInterface $content_hasher */
     $content_hasher = \Drupal::service('tome_sync.content_hasher');
 
     $uuid = \Drupal::service('uuid')->generate();
diff --git a/modules/tome_sync/tests/src/Kernel/ExporterTest.php b/modules/tome_sync/tests/src/Kernel/ExporterTest.php
index 887093d..f8bdeec 100644
--- a/modules/tome_sync/tests/src/Kernel/ExporterTest.php
+++ b/modules/tome_sync/tests/src/Kernel/ExporterTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\tome_sync\Kernel;
 
+use Symfony\Component\Serializer\Serializer;
+use Drupal\Core\Config\StorageInterface;
+use Drupal\language\Config\LanguageConfigFactoryOverrideInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\tome_base\Kernel\TestBase;
@@ -24,7 +27,7 @@ class ExporterTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     if (\Drupal::entityTypeManager()->hasDefinition('path_alias')) {
@@ -36,10 +39,10 @@ class ExporterTest extends TestBase {
    * @covers \Drupal\tome_sync\Exporter::exportContent
    */
   public function testExportContent() {
-    /** @var \Symfony\Component\Serializer\Serializer $serializer */
+    /** @var Serializer $serializer */
     $serializer = \Drupal::service('serializer');
 
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');
 
     $user = $this->createUser();
@@ -91,7 +94,7 @@ class ExporterTest extends TestBase {
    * @covers \Drupal\tome_sync\Exporter::deleteContentExport
    */
   public function testDeleteContentExport() {
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');
     $article = Node::create(['type' => 'article', 'title' => 'My article']);
     $article->save();
@@ -128,13 +131,13 @@ class ExporterTest extends TestBase {
    * @covers \Drupal\tome_sync\EventSubscriber\LanguageConfigEventSubscriber::configDelete
    */
   public function testDeleteConfigExport() {
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('config.storage.sync');
 
     \Drupal::configFactory()->getEditable('foo.bar')->save();
     $this->assertTrue($storage->exists('foo.bar'));
 
-    /** @var \Drupal\language\Config\LanguageConfigFactoryOverrideInterface $config_factory_override */
+    /** @var LanguageConfigFactoryOverrideInterface $config_factory_override */
     $config_factory_override = \Drupal::service('language.config_factory_override');
     $override = $config_factory_override->getOverride('fr', 'foo.bar');
     $override->setData(['bonjour' => 'monde'])->save();
@@ -151,7 +154,7 @@ class ExporterTest extends TestBase {
    * @covers \Drupal\tome_sync\EventSubscriber\LanguageConfigEventSubscriber::configSave
    */
   public function testExportConfig() {
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('config.storage.sync');
     $data = ['hello' => 'world'];
     \Drupal::configFactory()->getEditable('foo.bar')
@@ -160,7 +163,7 @@ class ExporterTest extends TestBase {
     $this->assertEquals($data, $storage->read('foo.bar'));
 
     $data = ['bonjour' => 'monde'];
-    /** @var \Drupal\language\Config\LanguageConfigFactoryOverrideInterface $config_factory_override */
+    /** @var LanguageConfigFactoryOverrideInterface $config_factory_override */
     $config_factory_override = \Drupal::service('language.config_factory_override');
     $override = $config_factory_override->getOverride('fr', 'foo.bar');
     $override->setData($data)->save();
@@ -174,7 +177,7 @@ class ExporterTest extends TestBase {
    * @covers \Drupal\tome_sync\EventSubscriber\LanguageConfigEventSubscriber::configDelete
    */
   public function testRenameConfig() {
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('config.storage.sync');
     $data = ['hello' => 'world'];
     \Drupal::configFactory()->getEditable('foo.bar')
@@ -182,7 +185,7 @@ class ExporterTest extends TestBase {
     $this->assertEquals($data, $storage->read('foo.bar'));
 
     $override_data = ['bonjour' => 'monde'];
-    /** @var \Drupal\language\Config\LanguageConfigFactoryOverrideInterface $config_factory_override */
+    /** @var LanguageConfigFactoryOverrideInterface $config_factory_override */
     $config_factory_override = \Drupal::service('language.config_factory_override');
     $override = $config_factory_override->getOverride('fr', 'foo.bar');
     $override->setData($override_data)->save();
@@ -217,10 +220,10 @@ class ExporterTest extends TestBase {
     new Settings($settings);
     drupal_flush_all_caches();
 
-    /** @var \Symfony\Component\Serializer\Serializer $serializer */
+    /** @var Serializer $serializer */
     $serializer = \Drupal::service('serializer');
 
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');
 
     $user = $this->createUser();
diff --git a/modules/tome_sync/tests/src/Kernel/FieldDeletionTest.php b/modules/tome_sync/tests/src/Kernel/FieldDeletionTest.php
index a30447b..dde42b4 100644
--- a/modules/tome_sync/tests/src/Kernel/FieldDeletionTest.php
+++ b/modules/tome_sync/tests/src/Kernel/FieldDeletionTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\tome_sync\Kernel;
 
+use Drupal\Core\Config\StorageInterface;
+use Drupal\Core\Config\ConfigInstallerInterface;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -25,7 +27,7 @@ class FieldDeletionTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
   }
@@ -34,7 +36,7 @@ class FieldDeletionTest extends TestBase {
    * @covers \Drupal\tome_sync\Exporter::exportContent
    */
   public function testDeleteField() {
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');
 
     $field_config = node_add_body_field(NodeType::load('article'));
@@ -76,7 +78,7 @@ class FieldDeletionTest extends TestBase {
    * @covers \Drupal\tome_sync\Exporter::exportContent
    */
   public function testDeleteFieldDuringSync() {
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');
 
     $field_config = node_add_body_field(NodeType::load('article'));
@@ -91,7 +93,7 @@ class FieldDeletionTest extends TestBase {
     $data = $storage->read(TomeSyncHelper::getContentName($article));
     $this->assertArrayHasKey('body', $data);
 
-    /** @var \Drupal\Core\Config\ConfigInstallerInterface $installer */
+    /** @var ConfigInstallerInterface $installer */
     $installer = \Drupal::service('config.installer');
     $installer->setSyncing(TRUE);
     $field_config->delete();
diff --git a/modules/tome_sync/tests/src/Kernel/FileSyncTest.php b/modules/tome_sync/tests/src/Kernel/FileSyncTest.php
index ed66363..e42139f 100644
--- a/modules/tome_sync/tests/src/Kernel/FileSyncTest.php
+++ b/modules/tome_sync/tests/src/Kernel/FileSyncTest.php
@@ -24,14 +24,14 @@ class FileSyncTest extends TestBase {
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->fileSystem = \Drupal::service('file_system');
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
diff --git a/modules/tome_sync/tests/src/Kernel/ImporterTest.php b/modules/tome_sync/tests/src/Kernel/ImporterTest.php
index d747705..1cb8f62 100644
--- a/modules/tome_sync/tests/src/Kernel/ImporterTest.php
+++ b/modules/tome_sync/tests/src/Kernel/ImporterTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\tome_sync\Kernel;
 
+use Drupal\Core\Entity\EntityRepository;
+use Drupal\tome_sync\Exporter;
+use Drupal\tome_sync\Importer;
 use Drupal\Core\Site\Settings;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\tome_base\Kernel\TestBase;
@@ -25,7 +28,7 @@ class ImporterTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
   }
@@ -34,12 +37,12 @@ class ImporterTest extends TestBase {
    * @covers \Drupal\tome_sync\Importer::importContent
    */
   public function testImportContent() {
-    /** @var \Drupal\Core\Entity\EntityRepository $repository */
+    /** @var EntityRepository $repository */
     $repository = \Drupal::service('entity.repository');
 
-    /** @var \Drupal\tome_sync\Exporter $exporter */
+    /** @var Exporter $exporter */
     $exporter = \Drupal::service('tome_sync.exporter');
-    /** @var \Drupal\tome_sync\Importer $importer */
+    /** @var Importer $importer */
     $importer = \Drupal::service('tome_sync.importer');
 
     $uuid = \Drupal::service('uuid')->generate();
@@ -89,12 +92,12 @@ class ImporterTest extends TestBase {
     new Settings($settings);
     drupal_flush_all_caches();
 
-    /** @var \Drupal\Core\Entity\EntityRepository $repository */
+    /** @var EntityRepository $repository */
     $repository = \Drupal::service('entity.repository');
 
-    /** @var \Drupal\tome_sync\Exporter $exporter */
+    /** @var Exporter $exporter */
     $exporter = \Drupal::service('tome_sync.exporter');
-    /** @var \Drupal\tome_sync\Importer $importer */
+    /** @var Importer $importer */
     $importer = \Drupal::service('tome_sync.importer');
 
     $uuid = \Drupal::service('uuid')->generate();
@@ -107,7 +110,7 @@ class ImporterTest extends TestBase {
     $yml_file = Settings::get('tome_content_directory', '../content') . '/node.' . $uuid . '.yml';
     $json_file = Settings::get('tome_content_directory', '../content') . '/node.' . $uuid . '.json';
     $this->assertFileExists($yml_file);
-    $this->assertFileNotExists($json_file);
+    $this->assertFileDoesNotExist($json_file);
 
     $this->assertFalse((bool) $repository->loadEntityByUuid('node', $uuid));
     $importer->importContent('node', $uuid);
diff --git a/modules/tome_sync/tests/src/Kernel/LinkItemTest.php b/modules/tome_sync/tests/src/Kernel/LinkItemTest.php
index d9f8661..65b058e 100644
--- a/modules/tome_sync/tests/src/Kernel/LinkItemTest.php
+++ b/modules/tome_sync/tests/src/Kernel/LinkItemTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\tome_sync\Kernel;
 
+use Symfony\Component\Serializer\Serializer;
+use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -29,7 +31,7 @@ class LinkItemTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     $this->installEntitySchema('path_alias');
@@ -52,10 +54,10 @@ class LinkItemTest extends TestBase {
    * Tests that exporting/importing link field data works.
    */
   public function testLinkFields() {
-    /** @var \Symfony\Component\Serializer\Serializer $serializer */
+    /** @var Serializer $serializer */
     $serializer = \Drupal::service('serializer');
 
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');
 
     $article1 = Node::create([
diff --git a/modules/tome_sync/tests/src/Kernel/PathAliasTest.php b/modules/tome_sync/tests/src/Kernel/PathAliasTest.php
index dde0524..51bff96 100644
--- a/modules/tome_sync/tests/src/Kernel/PathAliasTest.php
+++ b/modules/tome_sync/tests/src/Kernel/PathAliasTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\tome_sync\Kernel;
 
+use Symfony\Component\Serializer\Serializer;
+use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\node\Entity\Node;
 use Drupal\path_alias\Entity\PathAlias;
@@ -26,7 +28,7 @@ class PathAliasTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     $this->installEntitySchema('path_alias');
@@ -36,10 +38,10 @@ class PathAliasTest extends TestBase {
    * Tests that exporting/importing path alias entities works.
    */
   public function testAliases() {
-    /** @var \Symfony\Component\Serializer\Serializer $serializer */
+    /** @var Serializer $serializer */
     $serializer = \Drupal::service('serializer');
 
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');
 
     $article = Node::create([
@@ -65,7 +67,7 @@ class PathAliasTest extends TestBase {
     $this->assertEquals($data['path'][0]['value'], '/node/' . $article->uuid());
     $this->assertEquals($data['alias'][0]['value'], '/node/' . $article2->uuid());
 
-    /** @var \Drupal\path_alias\Entity\PathAlias $exported_alias */
+    /** @var PathAlias $exported_alias */
     $exported_alias = $serializer->denormalize($data, PathAlias::class, 'json');
     $this->assertEquals($exported_alias->getPath(), '/node/' . $article->id());
     $this->assertEquals($exported_alias->getAlias(), '/node/' . $article2->id());
diff --git a/modules/tome_sync/tests/src/Kernel/PathautoTest.php b/modules/tome_sync/tests/src/Kernel/PathautoTest.php
index 5bbf03e..0fb31e3 100644
--- a/modules/tome_sync/tests/src/Kernel/PathautoTest.php
+++ b/modules/tome_sync/tests/src/Kernel/PathautoTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\tome_sync\Kernel;
 
+use Drupal\Core\Entity\EntityRepository;
+use Drupal\tome_sync\Importer;
+use Drupal\tome_sync\Exporter;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\node\Entity\Node;
 use Drupal\pathauto\Entity\PathautoPattern;
@@ -30,7 +33,7 @@ class PathautoTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     $this->installEntitySchema('path_alias');
@@ -52,11 +55,11 @@ class PathautoTest extends TestBase {
    * Tests that exporting/importing nodes with patterns works.
    */
   public function testPathauto() {
-    /** @var \Drupal\Core\Entity\EntityRepository $repository */
+    /** @var EntityRepository $repository */
     $repository = \Drupal::service('entity.repository');
-    /** @var \Drupal\tome_sync\Importer $importer */
+    /** @var Importer $importer */
     $importer = \Drupal::service('tome_sync.importer');
-    /** @var \Drupal\tome_sync\Exporter $exporter */
+    /** @var Exporter $exporter */
     $exporter = \Drupal::service('tome_sync.exporter');
 
     // Make sure normal entities work with our pattern.
diff --git a/modules/tome_sync/tests/src/Unit/Normalizer/ContentEntityNormalizerTest.php b/modules/tome_sync/tests/src/Unit/Normalizer/ContentEntityNormalizerTest.php
index 74e8031..b86712d 100644
--- a/modules/tome_sync/tests/src/Unit/Normalizer/ContentEntityNormalizerTest.php
+++ b/modules/tome_sync/tests/src/Unit/Normalizer/ContentEntityNormalizerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_sync\Unit\Normalizer;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -21,6 +22,7 @@ use Symfony\Component\Serializer\Serializer;
  */
 class ContentEntityNormalizerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests the normalize() method.
    *
diff --git a/modules/tome_sync/tests/src/Unit/Normalizer/EntityReferenceItemNormalizerTest.php b/modules/tome_sync/tests/src/Unit/Normalizer/EntityReferenceItemNormalizerTest.php
index 5ba73fe..eac74b4 100644
--- a/modules/tome_sync/tests/src/Unit/Normalizer/EntityReferenceItemNormalizerTest.php
+++ b/modules/tome_sync/tests/src/Unit/Normalizer/EntityReferenceItemNormalizerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_sync\Unit\Normalizer;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -19,6 +20,7 @@ use Symfony\Component\Serializer\Serializer;
  */
 class EntityReferenceItemNormalizerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   use InternalTypedDataTestTrait;
 
   /**
diff --git a/modules/tome_sync/tests/src/Unit/Normalizer/FieldItemNormalizerTest.php b/modules/tome_sync/tests/src/Unit/Normalizer/FieldItemNormalizerTest.php
index a9a1664..5cb7ded 100644
--- a/modules/tome_sync/tests/src/Unit/Normalizer/FieldItemNormalizerTest.php
+++ b/modules/tome_sync/tests/src/Unit/Normalizer/FieldItemNormalizerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_sync\Unit\Normalizer;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ -17,6 +18,7 @@ use Symfony\Component\Serializer\Serializer;
  */
 class FieldItemNormalizerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests the normalize() method.
    *
diff --git a/modules/tome_sync/tests/src/Unit/Normalizer/UserEntityNormalizerTest.php b/modules/tome_sync/tests/src/Unit/Normalizer/UserEntityNormalizerTest.php
index fb0308d..e7fa14e 100644
--- a/modules/tome_sync/tests/src/Unit/Normalizer/UserEntityNormalizerTest.php
+++ b/modules/tome_sync/tests/src/Unit/Normalizer/UserEntityNormalizerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tome_sync\Unit\Normalizer;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -21,6 +22,7 @@ use Symfony\Component\Serializer\Serializer;
  */
 class UserEntityNormalizerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests the normalize() method.
    *
diff --git a/modules/tome_sync/tome_sync.module b/modules/tome_sync/tome_sync.module
index 953c486..53e8cc1 100644
--- a/modules/tome_sync/tome_sync.module
+++ b/modules/tome_sync/tome_sync.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\StorageInterface;
 /**
  * @file
  * Keeps content, config, and files in sync.
@@ -60,7 +61,7 @@ function tome_sync_field_config_delete(FieldConfig $field) {
   if (\Drupal::isConfigSyncing()) {
     return;
   }
-  /** @var \Drupal\Core\Config\StorageInterface $content_storage */
+  /** @var StorageInterface $content_storage */
   $content_storage = \Drupal::service('tome_sync.storage.content');
   $storage = \Drupal::entityTypeManager()
     ->getStorage($field->getTargetEntityTypeId());
@@ -98,7 +99,7 @@ function tome_sync_pathauto_alias_alter(&$alias, array &$context) {
 /**
  * Determines if a given entity should be exported.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An entity to export.
  *
  * @return bool
diff --git a/tome.install b/tome.install
index 65684dd..13db695 100644
--- a/tome.install
+++ b/tome.install
@@ -1,15 +1,15 @@
 <?php
 
+use Drupal\Core\Extension\ModuleInstallerInterface;
 /**
  * @file
  * Install, update, and uninstall functions for Tome.
  */
-
 /**
  * Installs the new tome_sync and tome_static sub-modules.
  */
 function tome_update_8001() {
-  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $installer */
+  /** @var ModuleInstallerInterface $installer */
   $installer = \Drupal::service('module_installer');
   $installer->install([
     'tome_base',
