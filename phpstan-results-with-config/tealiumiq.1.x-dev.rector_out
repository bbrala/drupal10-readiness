modules/contrib/tealiumiq/modules/tealiumiq_context/src/EventSubscriber/AlterUdoProperties.php
modules/contrib/tealiumiq/modules/tealiumiq_context/src/Plugin/ContextReaction/TealiumiqContext.php
modules/contrib/tealiumiq/src/Annotation/TealiumiqGroup.php
modules/contrib/tealiumiq/src/Annotation/TealiumiqTag.php
modules/contrib/tealiumiq/src/Controller/Overview.php
modules/contrib/tealiumiq/src/Event/AlterUdoPropertiesEvent.php
modules/contrib/tealiumiq/src/Event/FinalAlterUdoPropertiesEvent.php
modules/contrib/tealiumiq/src/EventSubscriber/AlterUdoProperties.php
modules/contrib/tealiumiq/src/EventSubscriber/FinalAlterUdoProperties.php
modules/contrib/tealiumiq/src/Form/Defaults.php
modules/contrib/tealiumiq/src/Form/Settings.php
modules/contrib/tealiumiq/src/Normalizer/FieldItemNormalizer.php
modules/contrib/tealiumiq/src/Normalizer/TealiumiqHalNormalizer.php
modules/contrib/tealiumiq/src/Normalizer/TealiumiqNormalizer.php
modules/contrib/tealiumiq/src/Plugin/Field/FieldFormatter/TealiumiqFormatter.php
modules/contrib/tealiumiq/src/Plugin/Field/FieldType/TealiumiqFieldItem.php
modules/contrib/tealiumiq/src/Plugin/Field/FieldWidget/TealiumiqWidget.php
modules/contrib/tealiumiq/src/Plugin/Field/TealiumiqEntityFieldItemList.php
modules/contrib/tealiumiq/src/Plugin/tealium/Group/GroupBase.php
modules/contrib/tealiumiq/src/Plugin/tealium/Group/Page.php
modules/contrib/tealiumiq/src/Plugin/tealium/Tag/PageName.php
modules/contrib/tealiumiq/src/Plugin/tealium/Tag/PageUrl.php
modules/contrib/tealiumiq/src/Plugin/tealium/Tag/TagBase.php
modules/contrib/tealiumiq/src/Service/GroupPluginManager.php
modules/contrib/tealiumiq/src/Service/Helper.php
modules/contrib/tealiumiq/src/Service/TagPluginManager.php
modules/contrib/tealiumiq/src/Service/Tealiumiq.php
modules/contrib/tealiumiq/src/Service/TealiumiqToken.php
modules/contrib/tealiumiq/src/Service/Udo.php
modules/contrib/tealiumiq/src/TealiumiqServiceProvider.php
modules/contrib/tealiumiq/tealiumiq.module

14 files with changes
=====================

1) modules/contrib/tealiumiq/src/Service/TealiumiqToken.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * Constructs a new TealiumiqToken object.
    *
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
    */
   public function __construct(Token $token) {
@@ @@
    *   Arguments for token->replace().
    * @param array $options
    *   Any additional options necessary.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which static::generate() and the hooks and
    *   functions that it invokes will add their required bubbleable metadata.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/tealiumiq/src/Service/Tealiumiq.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tealiumiq\Service;

+use Drupal\Core\Config\Config;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * UDO.
    *
-   * @var \Drupal\tealiumiq\Service\Udo
+   * @var Udo
    */
   public $udo;

@@ @@
   /**
    * Tag Plugin Manager.
    *
-   * @var \Drupal\tealiumiq\Service\TagPluginManager
+   * @var TagPluginManager
    */
   protected $tagPluginManager;

@@ @@
   /**
    * Token Service.
    *
-   * @var \Drupal\tealiumiq\Service\TealiumiqToken
+   * @var TealiumiqToken
    */
   private $tokenService;

@@ @@
   /**
    * Request Stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   private $requestStack;

@@ @@
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   private $languageManager;

@@ @@
   /**
    * Group Plugin Manager.
    *
-   * @var \Drupal\tealiumiq\Service\GroupPluginManager
+   * @var GroupPluginManager
    */
   private $groupPluginManager;

@@ @@
   /**
    * LoggerChannelFactoryInterface.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private $logger;

@@ @@
   /**
    * Tealium Helper.
    *
-   * @var \Drupal\tealiumiq\Service\Helper
+   * @var Helper
    */
   public $helper;

@@ @@
   /**
    * EventDispatcherInterface.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;

@@ @@
   /**
    * Tealiumiq constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   Config Factory.
-   * @param \Drupal\tealiumiq\Service\Udo $udo
+   * @param Udo $udo
    *   UDO Service.
-   * @param \Drupal\tealiumiq\Service\TealiumiqToken $token
+   * @param TealiumiqToken $token
    *   Tealiumiq Token.
-   * @param \Drupal\tealiumiq\Service\GroupPluginManager $groupPluginManager
+   * @param GroupPluginManager $groupPluginManager
    *   Group Plugin Manager.
-   * @param \Drupal\tealiumiq\Service\TagPluginManager $tagPluginManager
+   * @param TagPluginManager $tagPluginManager
    *   Tealiumiq Tag Plugin Manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request Stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager Interface.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $channelFactory
+   * @param LoggerChannelFactoryInterface $channelFactory
    *   Logger Channel Factory Interface.
-   * @param \Drupal\tealiumiq\Service\Helper $helper
+   * @param Helper $helper
    *   Tealium Helper.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   EventDispatcherInterface.
    */
   public function __construct(ConfigFactory $config,
@@ @@
   /**
    * Set all data values.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity.
    */
   public function setUdoPropertiesFromEntity(ContentEntityInterface $entity) {
@@ @@
    *
    * @param array $properties
    *   Tags array.
-   * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
+   * @param ContentEntityInterface|null $entity
    *   Entity.
    */
   public function setProperties(array $properties = [], ContentEntityInterface $entity = NULL) {
@@ @@
     );

     $event = $this->eventDispatcher->dispatch(
-      AlterUdoPropertiesEvent::UDO_ALTER_PROPERTIES,
-      $alterUDOPropertiesEvent
+      $alterUDOPropertiesEvent,
+      AlterUdoPropertiesEvent::UDO_ALTER_PROPERTIES
     );

     // Altered properties.
@@ @@
     );

     $finalEvent = $this->eventDispatcher->dispatch(
-      FinalAlterUdoPropertiesEvent::FINAL_UDO_ALTER_PROPERTIES,
-      $finalAlterUDOPropertiesEvent
+      $finalAlterUDOPropertiesEvent,
+      FinalAlterUdoPropertiesEvent::FINAL_UDO_ALTER_PROPERTIES
     );

     // Final Altered properties.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


3) modules/contrib/tealiumiq/src/Service/Helper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tealiumiq\Service;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityType;
@@ @@
   /**
    * EntityTypeManagerInterface.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * GroupPluginManager.
    *
-   * @var \Drupal\tealiumiq\Service\GroupPluginManager
+   * @var GroupPluginManager
    */
   private $groupPluginManager;

@@ @@
   /**
    * TagPluginManager.
    *
-   * @var \Drupal\tealiumiq\Service\TagPluginManager
+   * @var TagPluginManager
    */
   private $tagPluginManager;

@@ @@
   /**
    * LoggerChannelFactoryInterface.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private $logger;

@@ @@
   /**
    * Request Stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   private $requestStack;

@@ @@
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   private $languageManager;

@@ @@
   /**
    * Token Service.
    *
-   * @var \Drupal\tealiumiq\Service\TealiumiqToken
+   * @var TealiumiqToken
    */
   private $tokenService;

@@ @@
   /**
    * RouteMatchInterface.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;

@@ @@
   /**
    * EntityTypeBundleInfoInterface.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   private $entityTypeBundleInfo;

@@ @@
   /**
    * Helper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager Interface.
-   * @param \Drupal\tealiumiq\Service\GroupPluginManager $groupPluginManager
+   * @param GroupPluginManager $groupPluginManager
    *   Group Plugin Manager.
-   * @param \Drupal\tealiumiq\Service\TagPluginManager $tagPluginManager
+   * @param TagPluginManager $tagPluginManager
    *   Tealiumiq Tag Plugin Manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $channelFactory
+   * @param LoggerChannelFactoryInterface $channelFactory
    *   Logger Channel Factory Interface.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request Stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager Interface.
-   * @param \Drupal\tealiumiq\Service\TealiumiqToken $token
+   * @param TealiumiqToken $token
    *   Tealiumiq Token.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   RouteMatchInterface.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   EntityTypeBundleInfoInterface.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager,
@@ @@
   /**
    * Returns a list of the Tealium fields on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to examine.
    *
    * @return array
@@ @@
   /**
    * Returns a list of the meta tags with values from a field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The ContentEntityInterface object.
    * @param string $field_name
    *   The name of the field to work on.
@@ @@
   /**
    * Returns the text label for the entity type specified.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type to process.
    *
    * @return string
@@ @@
     $label = $entityType->getLabel();

     if (is_a($label, 'Drupal\Core\StringTranslation\TranslatableMarkup')) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $label */
+      /** @var TranslatableMarkup $label */
       $label = $label->render();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/tealiumiq/src/Plugin/tealium/Tag/TagBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tealiumiq\Plugin\tealium\Tag;

+use Drupal\Core\Annotation\Translation;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A longer explanation of what the field is for.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * Retrieves the currently active request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateTag(array &$element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tealiumiq/src/Plugin/tealium/Group/GroupBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tealiumiq\Plugin\tealium\Group;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Plugin\PluginBase;

 /**
@@ @@
   /**
    * The name of the group.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tealiumiq/src/Plugin/Field/FieldWidget/TealiumiqWidget.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Tealium iQ service.
    *
-   * @var \Drupal\tealiumiq\Service\Tealiumiq
+   * @var Tealiumiq
    */
   private $tealiumiq;

@@ @@
   /**
    * TagPluginManager.
    *
-   * @var \Drupal\tealiumiq\Service\TagPluginManager
+   * @var TagPluginManager
    */
   private $tagPluginManager;

@@ @@
   /**
    * ConfigFactoryInterface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/tealiumiq/src/Form/Defaults.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Tealiumiq Service.
    *
-   * @var \Drupal\tealiumiq\Service\Tealiumiq
+   * @var Tealiumiq
    */
   protected $tealiumiq;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   ConfigFactoryInterface.
-   * @param \Drupal\tealiumiq\Service\Tealiumiq $tealiumiq
+   * @param Tealiumiq $tealiumiq
    *   Tealiumiq Service.
    */
   public function __construct(ConfigFactoryInterface $configFactory,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/tealiumiq/src/EventSubscriber/FinalAlterUdoProperties.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Final Alter the UDO.
    *
-   * @param \Drupal\tealiumiq\Event\FinalAlterUdoPropertiesEvent $event
+   * @param FinalAlterUdoPropertiesEvent $event
    *   Final Alter Udo Properties Event.
    */
   public function doFinalUdoProperties(FinalAlterUdoPropertiesEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/tealiumiq/src/EventSubscriber/AlterUdoProperties.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Alter the UDO.
    *
-   * @param \Drupal\tealiumiq\Event\AlterUdoPropertiesEvent $event
+   * @param AlterUdoPropertiesEvent $event
    *   Alter Udo Properties Event.
    */
   public function doAlterUdoProperties(AlterUdoPropertiesEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/tealiumiq/src/Event/FinalAlterUdoPropertiesEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tealiumiq\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class SetUdoProperties.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/tealiumiq/src/Event/AlterUdoPropertiesEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tealiumiq\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class SetUdoProperties.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/tealiumiq/src/Annotation/TealiumiqTag.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tealiumiq\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The display label/name of the tealiumiq tag plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A longer explanation of what the field is for.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


13) modules/contrib/tealiumiq/src/Annotation/TealiumiqGroup.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tealiumiq\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The name of the group.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


14) modules/contrib/tealiumiq/modules/tealiumiq_context/src/EventSubscriber/AlterUdoProperties.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Alter the UDO.
    *
-   * @param \Drupal\tealiumiq\Event\AlterUdoPropertiesEvent $event
+   * @param AlterUdoPropertiesEvent $event
    *   Alter Udo Properties Event.
    */
   public function doAlterUdoProperties(AlterUdoPropertiesEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process                                                      
         "modules/contrib/tealiumiq/modules/tealiumiq_context/src/Plugin/ContextRe
         action/TealiumiqContext.php" file, due to:                             
         "Analyze error: "Class Drupal\context\ContextReactionPluginBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 2 nodes were removed                                                 

