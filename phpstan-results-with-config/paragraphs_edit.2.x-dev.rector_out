modules/contrib/paragraphs_edit/paragraphs_edit.module
modules/contrib/paragraphs_edit/src/Form/ParagraphCloneForm.php
modules/contrib/paragraphs_edit/src/Form/ParagraphDeleteForm.php
modules/contrib/paragraphs_edit/src/Form/ParagraphEditForm.php
modules/contrib/paragraphs_edit/src/ParagraphFormHelperTrait.php
modules/contrib/paragraphs_edit/src/ParagraphLineageInspector.php
modules/contrib/paragraphs_edit/src/ParagraphLineageRevisioner.php

4 files with changes
====================

1) modules/contrib/paragraphs_edit/src/ParagraphLineageRevisioner.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Construct a new ParagraphLineageRevisioner object.
    *
-   * @param \Drupal\paragraphs_edit\ParagraphLineageInspector $lineage_inspector
+   * @param ParagraphLineageInspector $lineage_inspector
    *   Provides paragraphs_edit.lineage.inspector service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Provides  service.
    */
   public function __construct(ParagraphLineageInspector $lineage_inspector, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Saves all of given entity's lineage as new revisions.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity whose lineage to save as new revisions.
    *
    * @return int
@@ @@
   /**
    * Saves an entity as a new revision.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to save.
    *
    * @return int
@@ @@
   /**
    * Checks if a given entity should be saved as a new revision by default.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check for default new revision.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/paragraphs_edit/src/ParagraphLineageInspector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_edit;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem;
 use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;
 use Drupal\paragraphs\ParagraphInterface;

@@ @@
   /**
    * Gets the root parent of this paragraph.
    *
-   * @param \Drupal\paragraphs\ParagraphInterface $paragraph
+   * @param ParagraphInterface $paragraph
    *   Paragraph data.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   Root parent.
    */
   public function getRootParent(ParagraphInterface $paragraph) {
@@ @@
   /**
    * Gets the field the paragraph is referenced from.
    *
-   * @param \Drupal\paragraphs\ParagraphInterface $paragraph
+   * @param ParagraphInterface $paragraph
    *   Paragraph data.
    *
-   * @return \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList|null
+   * @return EntityReferenceRevisionsFieldItemList|null
    *   Parent field.
    */
   public function getParentField(ParagraphInterface $paragraph) {
@@ @@
   /**
    * Gets the field item the paragraph is referenced from.
    *
-   * @param \Drupal\paragraphs\ParagraphInterface $paragraph
+   * @param ParagraphInterface $paragraph
    *   Paragraph data.
-   * @param \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList|null $parent_field
+   * @param EntityReferenceRevisionsFieldItemList|null $parent_field
    *   Parent field.
    *
-   * @return \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem|null
+   * @return EntityReferenceRevisionsItem|null
    *   Field item.
    */
   public function getParentFieldItem(ParagraphInterface $paragraph, EntityReferenceRevisionsFieldItemList $parent_field = NULL) {
@@ @@
   /**
    * Finds the field item the paragraph is referenced from.
    *
-   * @param \Drupal\paragraphs\ParagraphInterface $paragraph
+   * @param ParagraphInterface $paragraph
    *   Paragraph data.
-   * @param \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $field
+   * @param EntityReferenceRevisionsFieldItemList $field
    *   Field item.
    *
-   * @return \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem|null
+   * @return EntityReferenceRevisionsItem|null
    *   Referenced field item.
    */
   protected function findParentFieldItem(ParagraphInterface $paragraph, EntityReferenceRevisionsFieldItemList $field) {
@@ @@
   /**
    * Builds a string representation of a paragraph's lineage.
    *
-   * @param \Drupal\paragraphs\ParagraphInterface $paragraph
+   * @param ParagraphInterface $paragraph
    *   The paragraph whose lineage to return as a string.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/paragraphs_edit/src/ParagraphFormHelperTrait.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the lineage inspector service.
    *
-   * @return \Drupal\paragraphs_edit\ParagraphLineageInspector
+   * @return ParagraphLineageInspector
    *   The lineage inspector service data.
    */
   protected function lineageInspector() {
@@ @@
   /**
    * Returns the lineage revisioner service.
    *
-   * @return \Drupal\paragraphs_edit\ParagraphLineageRevisioner|null
+   * @return ParagraphLineageRevisioner|null
    *   The lineage revisioner service data.
    */
   protected function lineageRevisioner() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/paragraphs_edit/src/Form/ParagraphCloneForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_edit\Form;

+use Drupal\paragraphs\ParagraphInterface;
+use Drupal\field\FieldConfigInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The entity being cloned by this form.
    *
-   * @var \Drupal\paragraphs\ParagraphInterface
+   * @var ParagraphInterface
    */
   protected $originalEntity;

@@ @@
   /**
    * The entityFieldManager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entityTypeRepository.
    *
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface
+   * @var EntityTypeRepositoryInterface
    */
   protected $entityTypeRepository;

@@ @@
           if (!isset($field_definitions_bundle[$entity_type_id][$bundle])) {
             $field_definitions_bundle[$entity_type_id][$bundle] = $this->entityFieldManager->getFieldDefinitions($entity_type_id, $bundle);
           }
-          /** @var \Drupal\field\FieldConfigInterface $field_definition */
+          /** @var FieldConfigInterface $field_definition */
           $field_definition = $field_definitions_bundle[$entity_type_id][$bundle][$field];

           // Check if field accepts paragraphs of this bundle.
@@ @@
     $destination_entity_id = $form_state->getValue(['paragraphs_edit', 'parent']);
     $destination_field = $form_state->getValue(['paragraphs_edit', 'field']);
     if ($destination_entity_id && $destination_field) {
-      /** @var \Drupal\Core\Entity\FieldableEntityInterface $destination_entity */
+      /** @var FieldableEntityInterface $destination_entity */
       $destination_entity = $this->entityTypeManager->getStorage($destination_entity_type)->load($destination_entity_id);
       if ($destination_entity) {
         if (!$destination_entity->access('update')) {
@@ @@
     $destination_entity_type = $form_state->getValue(['paragraphs_edit', 'entity_type']);
     $destination_entity_id = $form_state->getValue(['paragraphs_edit', 'parent']);
     $destination_field = $form_state->getValue(['paragraphs_edit', 'field']);
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $destination_entity */
+    /** @var FieldableEntityInterface $destination_entity */
     $destination_entity = $this->entityTypeManager->getStorage($destination_entity_type)->load($destination_entity_id);
     $destination_entity->get($destination_field)->appendItem($this->entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

