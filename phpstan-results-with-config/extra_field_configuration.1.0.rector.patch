diff --git a/extra_field_configuration.module b/extra_field_configuration.module
index bc486e0..3d747e2 100644
--- a/extra_field_configuration.module
+++ b/extra_field_configuration.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * @file
  * Contains core functionality for the extra_field_configuration module.
@@ -19,6 +20,6 @@ function extra_field_configuration_entity_extra_field_info() {
  * Implements hook_entity_view().
  */
 function extra_field_configuration_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   \Drupal::service('plugin.manager.extra_field_configuration_display')->entityView($build, $entity, $display, $view_mode);
 }
diff --git a/modules/extra_field_configuration_examples/src/Plugin/ExtraField/Display/ExampleField.php b/modules/extra_field_configuration_examples/src/Plugin/ExtraField/Display/ExampleField.php
index 8edbb95..a6d188b 100644
--- a/modules/extra_field_configuration_examples/src/Plugin/ExtraField/Display/ExampleField.php
+++ b/modules/extra_field_configuration_examples/src/Plugin/ExtraField/Display/ExampleField.php
@@ -25,7 +25,7 @@ class ExampleField extends ExtraFieldDisplayBase implements ContainerFactoryPlug
   /**
    * The string_translation service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $stringTranslation;
 
@@ -38,7 +38,7 @@ class ExampleField extends ExtraFieldDisplayBase implements ContainerFactoryPlug
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string_translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation) {
diff --git a/modules/extra_field_configuration_examples/src/Plugin/ExtraField/Display/ExampleFormattedField.php b/modules/extra_field_configuration_examples/src/Plugin/ExtraField/Display/ExampleFormattedField.php
index f9afdeb..2ab9bd2 100644
--- a/modules/extra_field_configuration_examples/src/Plugin/ExtraField/Display/ExampleFormattedField.php
+++ b/modules/extra_field_configuration_examples/src/Plugin/ExtraField/Display/ExampleFormattedField.php
@@ -25,7 +25,7 @@ class ExampleFormattedField extends ExtraFieldDisplayFormattedBase implements Co
   /**
    * The string_translation service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $stringTranslation;
 
@@ -38,7 +38,7 @@ class ExampleFormattedField extends ExtraFieldDisplayFormattedBase implements Co
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string_translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation) {
diff --git a/src/Controller/ExtraFieldConfigurationListBuilder.php b/src/Controller/ExtraFieldConfigurationListBuilder.php
index 99e2121..491ae21 100644
--- a/src/Controller/ExtraFieldConfigurationListBuilder.php
+++ b/src/Controller/ExtraFieldConfigurationListBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\extra_field_configuration\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -18,20 +20,20 @@ class ExtraFieldConfigurationListBuilder extends ConfigEntityListBuilder {
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new ExtraFieldConfigurationListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ -41,8 +43,8 @@ class ExtraFieldConfigurationListBuilder extends ConfigEntityListBuilder {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function createInstance(ContainerInterface $container, EntityTypeInterface $entity_type) {
     return new static(
@@ -66,11 +68,11 @@ class ExtraFieldConfigurationListBuilder extends ConfigEntityListBuilder {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface $entity */
+    /** @var ExtraFieldConfigurationInterface $entity */
     return [
       'label' => $entity->label(),
       'id' => "extra_field_{$entity->id()}",
@@ -109,14 +111,14 @@ class ExtraFieldConfigurationListBuilder extends ConfigEntityListBuilder {
   /**
    * Format bundles for the listing table summary.
    *
-   * @param \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface $entity
+   * @param ExtraFieldConfigurationInterface $entity
    *   The extra_field_configuration entity for the row.
    *
    * @return array
    *   A render array of the row content.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function formatBundles(ExtraFieldConfigurationInterface $entity) {
     $bundles = [];
diff --git a/src/ExtraFieldConfigurationTrait.php b/src/ExtraFieldConfigurationTrait.php
index 8806264..6356340 100644
--- a/src/ExtraFieldConfigurationTrait.php
+++ b/src/ExtraFieldConfigurationTrait.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\extra_field_configuration;
 
+use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\extra_field\Plugin\ExtraFieldDisplayManager;
+use Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\Display\EntityDisplayInterface;
 /**
  * Trait to provide common methods associated with extra field configuration.
  *
@@ -19,35 +27,35 @@ trait ExtraFieldConfigurationTrait {
   /**
    * The cache_tags.invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The plugin.manager.extra_field_display service.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldDisplayManager
+   * @var ExtraFieldDisplayManager
    */
   protected $extraFieldManager;
 
   /**
    * The plugin.manager.extra_field_configuration_display service.
    *
-   * @var \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager
+   * @var ExtraFieldConfigurationDisplayManager
    */
   protected $extraFieldConfigurationManager;
 
   /**
    * Gets the cache_tags.invalidator service.
    *
-   * @return \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @return CacheTagsInvalidatorInterface
    *   The cache_tags.invalidator service.
    */
   protected function getCacheTagsInvalidator() {
@@ -60,7 +68,7 @@ trait ExtraFieldConfigurationTrait {
   /**
    * Gets the entity_type.manager service.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity_type.manager service.
    */
   protected function getEntityTypeManager() {
@@ -73,7 +81,7 @@ trait ExtraFieldConfigurationTrait {
   /**
    * Gets the plugin.manager.extra_field_display service.
    *
-   * @return \Drupal\extra_field\Plugin\ExtraFieldDisplayManager
+   * @return ExtraFieldDisplayManager
    *   The plugin.manager.extra_field_display service.
    */
   protected function getExtraFieldManager() {
@@ -86,7 +94,7 @@ trait ExtraFieldConfigurationTrait {
   /**
    * Gets the plugin.manager.extra_field_configuration_display service.
    *
-   * @return \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager
+   * @return ExtraFieldConfigurationDisplayManager
    *   The plugin.manager.extra_field_configuration_display service.
    */
   protected function getExtraFieldConfigurationManager() {
@@ -122,12 +130,12 @@ trait ExtraFieldConfigurationTrait {
    * configuration. These configuration artifacts can either be ignored or
    * removed manually.
    *
-   * @param \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface $entity
+   * @param ExtraFieldConfigurationInterface $entity
    *   The configuration entity which defines the extra field configuration.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function removeExtraFields(ExtraFieldConfigurationInterface $entity) {
     if (!empty($entity->getBundles())) {
@@ -145,21 +153,21 @@ trait ExtraFieldConfigurationTrait {
   /**
    * Get the entity view displays where the extra field is configured and shown.
    *
-   * @param \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface $entity
+   * @param ExtraFieldConfigurationInterface $entity
    *   The configuration entity which defines the extra field configuration.
    *
-   * @return array|\Drupal\Core\Entity\Display\EntityDisplayInterface[]
+   * @return array|EntityDisplayInterface[]
    *   The entity view displays where the extra field is active.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getFieldActiveDisplays(ExtraFieldConfigurationInterface $entity) {
     $active_configuration = [];
 
     foreach ($entity->getBundles() as $entity_id => $bundle_list) {
       foreach ($bundle_list as $bundle) {
-        /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface[] $displays */
+        /** @var EntityDisplayInterface[] $displays */
         $displays = $this->getEntityTypeManager()->getStorage('entity_view_display')
           ->loadByProperties([
             'targetEntityType' => $entity_id,
@@ -168,7 +176,7 @@ trait ExtraFieldConfigurationTrait {
 
         // Only return displays with the extra field active.
         $displays = array_filter($displays, function ($display) use ($entity) {
-          /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface $display */
+          /** @var EntityDisplayInterface $display */
           return $display->getComponent($entity->getRealFieldName());
         });
 
diff --git a/src/Form/ExtraFieldConfigurationDeleteForm.php b/src/Form/ExtraFieldConfigurationDeleteForm.php
index 002dfcf..bfb614d 100644
--- a/src/Form/ExtraFieldConfigurationDeleteForm.php
+++ b/src/Form/ExtraFieldConfigurationDeleteForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\extra_field_configuration\Form;
 
+use Drupal\extra_field_configuration\ExtraFieldConfigurationInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Entity\EntityStorageException;
@@ -24,57 +27,57 @@ class ExtraFieldConfigurationDeleteForm extends EntityConfirmFormBase {
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface
+   * @var ExtraFieldConfigurationInterface
    */
   protected $entity;
 
   /**
    * The cache_tags.invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The plugin.manager.extra_field_display service.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldDisplayManager
+   * @var ExtraFieldDisplayManager
    */
   protected $extraFieldManager;
 
   /**
    * The plugin.manager.extra_field_configuration_display service.
    *
-   * @var \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager
+   * @var ExtraFieldConfigurationDisplayManager
    */
   protected $extraFieldConfigurationManager;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Construct the extra_field_configuration edit form object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache_tags.invalidator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\extra_field\Plugin\ExtraFieldDisplayManager $extra_field_manager
+   * @param ExtraFieldDisplayManager $extra_field_manager
    *   The plugin.manager.extra_field_display service.
-   * @param \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager $extra_field_configuration_manager
+   * @param ExtraFieldConfigurationDisplayManager $extra_field_configuration_manager
    *   The plugin.manager.extra_field_configuration_display service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(
@@ -107,8 +110,8 @@ class ExtraFieldConfigurationDeleteForm extends EntityConfirmFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
@@ -157,9 +160,9 @@ class ExtraFieldConfigurationDeleteForm extends EntityConfirmFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     try {
@@ -187,8 +190,8 @@ class ExtraFieldConfigurationDeleteForm extends EntityConfirmFormBase {
    * @return string[]
    *   An array of all view display config strings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getActiveDisplayNames() {
     return array_keys($this->getFieldActiveDisplays($this->entity));
diff --git a/src/Form/ExtraFieldConfigurationForm.php b/src/Form/ExtraFieldConfigurationForm.php
index e3d1035..b836176 100644
--- a/src/Form/ExtraFieldConfigurationForm.php
+++ b/src/Form/ExtraFieldConfigurationForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\extra_field_configuration\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -26,68 +29,68 @@ class ExtraFieldConfigurationForm extends EntityForm {
   /**
    * The cache_tags.invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The entity_type.bundle.info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleManager;
 
   /**
    * The entity_field.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The plugin.manager.extra_field_display service.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldDisplayManager
+   * @var ExtraFieldDisplayManager
    */
   protected $extraFieldManager;
 
   /**
    * The plugin.manager.extra_field_configuration_display service.
    *
-   * @var \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager
+   * @var ExtraFieldConfigurationDisplayManager
    */
   protected $extraFieldConfigurationManager;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Construct the extra_field_configuration edit form object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache_tags.invalidator service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_bundle_manager
+   * @param EntityTypeBundleInfoInterface $entity_bundle_manager
    *   The entity_type.bundle.info service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity_field.manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\extra_field\Plugin\ExtraFieldDisplayManager $extra_field_manager
+   * @param ExtraFieldDisplayManager $extra_field_manager
    *   The plugin.manager.extra_field_display service.
-   * @param \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager $extra_field_configuration_manager
+   * @param ExtraFieldConfigurationDisplayManager $extra_field_configuration_manager
    *   The plugin.manager.extra_field_configuration_display service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(
@@ -189,9 +192,9 @@ class ExtraFieldConfigurationForm extends EntityForm {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $form_state->cleanValues();
@@ -245,8 +248,8 @@ class ExtraFieldConfigurationForm extends EntityForm {
    * @return bool
    *   True if it exists, false if it does not.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exists(string $id) {
     return (bool) $this->entityTypeManager->getStorage('extra_field_configuration')
@@ -258,11 +261,11 @@ class ExtraFieldConfigurationForm extends EntityForm {
   /**
    * Get all entity types with user-configurable fields.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of entity objects.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getFieldableEntityTypes() {
     $entity_types = [];
@@ -284,7 +287,7 @@ class ExtraFieldConfigurationForm extends EntityForm {
     // Sort alphabetically.
     usort($entity_types, function ($a, $b) {
       /** @var \Drupal\Core\Entity\EntityInterface $a */
-      /** @var \Drupal\Core\Entity\EntityInterface $b */
+      /** @var EntityInterface $b */
       return strcasecmp($a->id(), $b->id());
     });
 
@@ -296,7 +299,7 @@ class ExtraFieldConfigurationForm extends EntityForm {
    *
    * @param array $row
    *   The form row to add checkboxes to.
-   * @param \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type
+   * @param ContentEntityTypeInterface $entity_type
    *   The entity type to add checkboxes for.
    */
   protected function addBundles(array &$row, ContentEntityTypeInterface $entity_type) {
diff --git a/src/Plugin/Derivative/ExtraFieldConfigurationDeriver.php b/src/Plugin/Derivative/ExtraFieldConfigurationDeriver.php
index b32b0a2..7ad83f8 100644
--- a/src/Plugin/Derivative/ExtraFieldConfigurationDeriver.php
+++ b/src/Plugin/Derivative/ExtraFieldConfigurationDeriver.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\extra_field_configuration\Plugin\Derivative;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\extra_field_configuration\ExtraFieldConfigurationInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -15,14 +18,14 @@ class ExtraFieldConfigurationDeriver extends DeriverBase implements ContainerDer
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Construct the extra_field_configuration deriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -41,8 +44,8 @@ class ExtraFieldConfigurationDeriver extends DeriverBase implements ContainerDer
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
     $plugin_id = $base_plugin_definition['id'];
@@ -50,7 +53,7 @@ class ExtraFieldConfigurationDeriver extends DeriverBase implements ContainerDer
     // Add the original, non-derived, plugin to the list.
     $this->derivatives[$plugin_id] = $base_plugin_definition;
 
-    /** @var \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface[] $configuration */
+    /** @var ExtraFieldConfigurationInterface[] $configuration */
     $configuration = $this->entityTypeManager
       ->getStorage('extra_field_configuration')
       ->loadMultiple();
diff --git a/src/Plugin/ExtraFieldConfigurationDisplayManager.php b/src/Plugin/ExtraFieldConfigurationDisplayManager.php
index 82978e3..5be9e69 100644
--- a/src/Plugin/ExtraFieldConfigurationDisplayManager.php
+++ b/src/Plugin/ExtraFieldConfigurationDisplayManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field_configuration\Plugin;
 
+use Drupal\extra_field\Plugin\ExtraFieldDisplayInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ -35,7 +36,7 @@ class ExtraFieldConfigurationDisplayManager extends ExtraFieldDisplayManager {
   /**
    * Gets all base (non-extra field configuration derived) plugin definitions.
    *
-   * @return \Drupal\extra_field\Plugin\ExtraFieldDisplayInterface[]
+   * @return ExtraFieldDisplayInterface[]
    *   An array of plugin definitions (empty array if no definitions were
    *   found). Keys are plugin IDs.
    */
@@ -48,7 +49,7 @@ class ExtraFieldConfigurationDisplayManager extends ExtraFieldDisplayManager {
   /**
    * Gets all extra field configuration derived plugin definitions.
    *
-   * @return \Drupal\extra_field\Plugin\ExtraFieldDisplayInterface[]
+   * @return ExtraFieldDisplayInterface[]
    *   An array of plugin definitions (empty array if no definitions were
    *   found). Keys are plugin IDs.
    */
diff --git a/tests/src/Functional/ExtraFieldConfigurationBrowserTestBase.php b/tests/src/Functional/ExtraFieldConfigurationBrowserTestBase.php
index 4ac07d3..5cf9b68 100644
--- a/tests/src/Functional/ExtraFieldConfigurationBrowserTestBase.php
+++ b/tests/src/Functional/ExtraFieldConfigurationBrowserTestBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\extra_field_configuration\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\extra_field_configuration\ExtraFieldConfigurationInterface;
 use Drupal\extra_field_configuration\Entity\ExtraFieldConfiguration;
 use Drupal\Tests\BrowserTestBase;
 
@@ -30,7 +33,7 @@ abstract class ExtraFieldConfigurationBrowserTestBase extends BrowserTestBase {
   /**
    * An array of test nodes, keyed by content type.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $testNodes = [];
 
@@ -77,9 +80,9 @@ abstract class ExtraFieldConfigurationBrowserTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupExtraFields();
     $this->setupContentTypes();
@@ -97,11 +100,11 @@ abstract class ExtraFieldConfigurationBrowserTestBase extends BrowserTestBase {
   /**
    * Create extra field configurations for tests.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setupExtraFields() {
     foreach ($this->extraFieldConfigurationEntities as $field_id => $values) {
-      /** @var \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface $extra_field */
+      /** @var ExtraFieldConfigurationInterface $extra_field */
       $extra_field = ExtraFieldConfiguration::create([
         'id' => $field_id,
         'plugin_id' => $field_id,
diff --git a/tests/src/Functional/ExtraFieldConfigurationDisplayFormTest.php b/tests/src/Functional/ExtraFieldConfigurationDisplayFormTest.php
index 6ab40a6..a938d20 100644
--- a/tests/src/Functional/ExtraFieldConfigurationDisplayFormTest.php
+++ b/tests/src/Functional/ExtraFieldConfigurationDisplayFormTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\extra_field_configuration\Functional;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 
 /**
@@ -23,9 +25,9 @@ class ExtraFieldConfigurationDisplayFormTest extends ExtraFieldConfigurationBrow
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupDisplays();
     $user = $this->createUser(['administer node display']);
@@ -35,7 +37,7 @@ class ExtraFieldConfigurationDisplayFormTest extends ExtraFieldConfigurationBrow
   /**
    * Test assertions for the first content type display form.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testNodeOne() {
     $this->drupalGet($this->displayUrl('test_content_type_one'));
@@ -52,7 +54,7 @@ class ExtraFieldConfigurationDisplayFormTest extends ExtraFieldConfigurationBrow
   /**
    * Test assertions for the second content type display form.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testNodeTwo() {
     $this->drupalGet($this->displayUrl('test_content_type_two'));
diff --git a/tests/src/Functional/ExtraFieldConfigurationFieldTest.php b/tests/src/Functional/ExtraFieldConfigurationFieldTest.php
index c231159..9165762 100644
--- a/tests/src/Functional/ExtraFieldConfigurationFieldTest.php
+++ b/tests/src/Functional/ExtraFieldConfigurationFieldTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\extra_field_configuration\Functional;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
+use Drupal\Core\Entity\EntityMalformedException;
 /**
  * Test the display of configurable extra fields.
  *
@@ -22,9 +25,9 @@ class ExtraFieldConfigurationFieldTest extends ExtraFieldConfigurationBrowserTes
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupNodes();
   }
@@ -32,8 +35,8 @@ class ExtraFieldConfigurationFieldTest extends ExtraFieldConfigurationBrowserTes
   /**
    * Test assertions for the first test node.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException;
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws ResponseTextException ;
+   * @throws EntityMalformedException
    */
   public function testNodeOne() {
     $url = $this->testNodes['test_content_type_one']->toUrl();
@@ -51,8 +54,8 @@ class ExtraFieldConfigurationFieldTest extends ExtraFieldConfigurationBrowserTes
   /**
    * Test assertions for the second test node.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws ResponseTextException
+   * @throws EntityMalformedException
    */
   public function testNodeTwo() {
     $url = $this->testNodes['test_content_type_two']->toUrl();
diff --git a/tests/src/Kernel/ExtraFieldConfigurationDisplayManagerTest.php b/tests/src/Kernel/ExtraFieldConfigurationDisplayManagerTest.php
index 8358689..f5cde7d 100644
--- a/tests/src/Kernel/ExtraFieldConfigurationDisplayManagerTest.php
+++ b/tests/src/Kernel/ExtraFieldConfigurationDisplayManagerTest.php
@@ -23,14 +23,14 @@ class ExtraFieldConfigurationDisplayManagerTest extends KernelTestBase {
   /**
    * The plugin manager under test.
    *
-   * @var \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager|MockObject
+   * @var ExtraFieldConfigurationDisplayManager|MockObject
    */
   protected $extraFieldConfigurationDisplayManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->extraFieldConfigurationDisplayManager = $this->createPartialMock(
       ExtraFieldConfigurationDisplayManager::class,
@@ -52,10 +52,7 @@ class ExtraFieldConfigurationDisplayManagerTest extends KernelTestBase {
    */
   public function testGetBaseDefinitions(array $definitions, array $results) {
     $this->setupParentDefinitions($definitions);
-    $this->assertEqual(
-      count($this->extraFieldConfigurationDisplayManager->getBaseDefinitions()),
-      $results['base']
-    );
+    $this->assertEquals(count($this->extraFieldConfigurationDisplayManager->getBaseDefinitions()), $results['base']);
   }
 
   /**
@@ -70,10 +67,7 @@ class ExtraFieldConfigurationDisplayManagerTest extends KernelTestBase {
    */
   public function testGetDefinitions(array $definitions, array $results) {
     $this->setupParentDefinitions($definitions);
-    $this->assertEqual(
-      count($this->extraFieldConfigurationDisplayManager->getDefinitions()),
-      $results['derived']
-    );
+    $this->assertEquals(count($this->extraFieldConfigurationDisplayManager->getDefinitions()), $results['derived']);
   }
 
   /**
