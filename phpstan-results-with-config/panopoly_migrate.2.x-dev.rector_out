modules/contrib/panopoly_migrate/modules/panopoly_migrate_media/src/Event/MigrateMediaTagEvent.php
modules/contrib/panopoly_migrate/modules/panopoly_migrate_media/src/EventSubscriber/MigrateMediaFormattedTextEventSubscriber.php
modules/contrib/panopoly_migrate/modules/panopoly_migrate_media/src/EventSubscriber/MigrateMediaTagEventSubscriber.php
modules/contrib/panopoly_migrate/modules/panopoly_migrate_media/src/PanopolyMigrateMediaEvents.php
modules/contrib/panopoly_migrate/modules/panopoly_migrate_media/src/Plugin/migrate/process/RemoteVideoUrl.php
modules/contrib/panopoly_migrate/modules/panopoly_migrate_media/src/Plugin/migrate/source/d7/FileEntity.php
modules/contrib/panopoly_migrate/modules/panopoly_migrate_pages/panopoly_migrate_pages.module
modules/contrib/panopoly_migrate/modules/panopoly_migrate_widgets/panopoly_migrate_widgets.module
modules/contrib/panopoly_migrate/modules/panopoly_migrate_widgets/src/Plugin/migrate/process/SpotlightField.php
modules/contrib/panopoly_migrate/modules/panopoly_migrate_widgets/src/Plugin/migrate/process/Table.php
modules/contrib/panopoly_migrate/modules/panopoly_migrate_widgets/src/Plugin/migrate/source/d7/SpotlightItem.php
modules/contrib/panopoly_migrate/modules/panopoly_migrate_wysiwyg/panopoly_migrate_wysiwyg.module
modules/contrib/panopoly_migrate/modules/panopoly_migrate_wysiwyg/src/EventSubscriber/MigrateWysiwygFormattedTextEventSubscriber.php
modules/contrib/panopoly_migrate/panopoly_migrate.install
modules/contrib/panopoly_migrate/panopoly_migrate.module
modules/contrib/panopoly_migrate/src/ClassResolverDecorator.php
modules/contrib/panopoly_migrate/src/Event/MigrateFormattedTextEvent.php
modules/contrib/panopoly_migrate/src/Event/MigrateLayoutEvent.php
modules/contrib/panopoly_migrate/src/Event/MigratePaneEvent.php
modules/contrib/panopoly_migrate/src/Event/MigratePanePlacementEvent.php
modules/contrib/panopoly_migrate/src/EventSubscriber/MigrateDefaultPanesEventSubscriber.php
modules/contrib/panopoly_migrate/src/EventSubscriber/MigrateFieldablePanelsPanesEventSubscriber.php
modules/contrib/panopoly_migrate/src/EventSubscriber/MigrationEventSubscriber.php
modules/contrib/panopoly_migrate/src/InlineBlockEntityOperations.php
modules/contrib/panopoly_migrate/src/PanopolyMigrateEvents.php
modules/contrib/panopoly_migrate/src/Plugin/migrate/D7FieldablePanelsPaneDeriver.php
modules/contrib/panopoly_migrate/src/Plugin/migrate/process/FormattedText.php
modules/contrib/panopoly_migrate/src/Plugin/migrate/process/PanelizerToLayoutBuilder.php
modules/contrib/panopoly_migrate/src/Plugin/migrate/source/d7/FieldablePanelsPane.php
modules/contrib/panopoly_migrate/src/Plugin/migrate/source/d7/FieldablePanelsPaneType.php

15 files with changes
=====================

1) modules/contrib/panopoly_migrate/src/Plugin/migrate/source/d7/FieldablePanelsPane.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/panopoly_migrate/src/Plugin/migrate/process/PanelizerToLayoutBuilder.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * The UUID generator.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The layout manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManagerInterface
+   * @var LayoutPluginManagerInterface
    */
   protected $layoutManager;

@@ @@
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
    *   Plugin id.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param UuidInterface $uuid_generator
    *   The UUID generator.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Layout\LayoutPluginManagerInterface $layout_manager
+   * @param LayoutPluginManagerInterface $layout_manager
    *   The layout manager.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UuidInterface $uuid_generator, EventDispatcherInterface $event_dispatcher, LayoutPluginManagerInterface $layout_manager, BlockManagerInterface $block_manager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   public function transform($value, MigrateExecutableInterface $migrate_executable, Row $row, $destination_property) {
     $sections = [];
@@ @@
    * @param array $layout_settings
    *   The layout settings.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    *   When the resulting layout isn't valid.
    */
   public function migrateLayout(string &$layout, array &$layout_settings) {
@@ @@
    * @param string $region
    *   The region.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    *   When the resulting region isn't valid.
    */
   protected function migrateRegion(string $original_layout, string $layout, string &$region) {
@@ @@
    * @param string $region
    *   The region.
    *
-   * @return \Drupal\layout_builder\SectionComponent|NULL
+   * @return SectionComponent|NULL
    *   The component, or NULL if this pane should be skipped.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    *   When the pane can't be migrated.
    */
   protected function migratePane(array $pane, string $region) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/panopoly_migrate/src/Plugin/migrate/process/FormattedText.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
    *   Plugin id.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param Symfony\Contracts\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/panopoly_migrate/src/Plugin/migrate/D7FieldablePanelsPaneDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\panopoly_migrate\Plugin\migrate;

+use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * The migration field discovery service.
    *
-   * @var \Drupal\migrate_drupal\FieldDiscoveryInterface
+   * @var FieldDiscoveryInterface
    */
   protected $fieldDiscovery;

@@ @@
    *   The base plugin ID for the plugin ID.
    * @param bool $translations
    *   Whether or not to include translations.
-   * @param \Drupal\migrate_drupal\FieldDiscoveryInterface $field_discovery
+   * @param FieldDiscoveryInterface $field_discovery
    *   The migration field discovery service.
    */
   public function __construct($base_plugin_id, $translations, FieldDiscoveryInterface $field_discovery) {
@@ @@
         $values['source']['fpp_bundle'] = $fpp_bundle;
         $values['destination']['default_bundle'] = $fpp_bundle;

-        /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+        /** @var MigrationInterface $migration */
         $migration = \Drupal::service('plugin.manager.migration')->createStubMigration($values);
         $this->fieldDiscovery->addBundleFieldProcesses($migration, 'fieldable_panels_pane', $fpp_bundle);
         $this->derivatives[$fpp_bundle] = $migration->getPluginDefinition();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/panopoly_migrate/src/InlineBlockEntityOperations.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\panopoly_migrate;

+use Drupal\layout_builder\Plugin\Block\InlineBlock;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\layout_builder\InlineBlockEntityOperations as UpstreamInlineBlockEntityOperations;
 use Drupal\layout_builder\SectionComponent;
@@ @@

     // We don't ever duplicate or create a new revision, but we do update the
     // usage info always.
-
-    /** @var \Drupal\layout_builder\Plugin\Block\InlineBlock $plugin */
+    /** @var InlineBlock $plugin */
     $plugin = $component->getPlugin();
     $plugin->saveBlockContent();
     $configuration = $plugin->getConfiguration();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/panopoly_migrate/src/EventSubscriber/MigrationEventSubscriber.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Handles MigrateEvents::PRE_ROW_SAVE events.
    *
-   * @param \Drupal\migrate\Event\MigratePreRowSaveEvent $event
+   * @param MigratePreRowSaveEvent $event
    *   The event.
    */
   public function onPreRowSave(MigratePreRowSaveEvent $event) {
@@ @@
   /**
    * Handles MigrateEvents::POST_ROW_SAVE events.
    *
-   * @param \Drupal\migrate\Event\MigratePostRowSaveEvent $event
+   * @param MigratePostRowSaveEvent $event
    *   The event.
    */
   public function onPostRowSave(MigratePostRowSaveEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/panopoly_migrate/src/EventSubscriber/MigrateFieldablePanelsPanesEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\panopoly_migrate\EventSubscriber;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\block_content\Entity\BlockContent;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\KeyValueStore\KeyValueFactoryInterface;
 use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
@@ @@
   /**
    * The block content storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $blockContentStorage;

@@ @@
   /**
    * The migrate lookup service.
    *
-   * @var \Drupal\migrate\MigrateLookupInterface
+   * @var MigrateLookupInterface
    */
   protected $migrateLookup;

@@ @@
   /**
    * The migration manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationManager;

@@ @@
   /**
    * The key value service.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   * @var KeyValueFactoryInterface
    */
   protected $keyValue;

@@ @@
   /**
    * Constructs a MigrateFieldablePanelsPanesEventSubscriber.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\migrate\MigrateLookupInterface $migrate_lookup
+   * @param MigrateLookupInterface $migrate_lookup
    *   The migrate lookup service.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_manager
+   * @param MigrationPluginManagerInterface $migration_manager
    *   The migration manager.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value
+   * @param KeyValueFactoryInterface $key_value
    *   The key value factory.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MigrateLookupInterface $migrate_lookup, MigrationPluginManagerInterface $migration_manager, KeyValueFactoryInterface $key_value) {
     $this->blockContentStorage = $entity_type_manager->getStorage('block_content');
@@ @@
   /**
    * Migrates fieldable panels panes.
    *
-   * @param \Drupal\panopoly_migrate\Event\MigratePaneEvent $event
+   * @param MigratePaneEvent $event
    *   The event.
    */
   public function onMigratePane(MigratePaneEvent $event) {
@@ @@
    * @param array $pane
    *   Associative array with pane data.
    *
-   * @return \Drupal\block_content\Entity\BlockContent|NULL
+   * @return BlockContent|NULL
    */
   protected function lookupBlockContent(array $pane) {
     if ($this->fppMigrationIds === NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/panopoly_migrate/src/EventSubscriber/MigrateDefaultPanesEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\panopoly_migrate\EventSubscriber;

+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Database;
 use Drupal\Core\KeyValueStore\KeyValueFactoryInterface;
 use Drupal\Core\Site\Settings;
@@ @@
   /**
    * The migrate lookup service.
    *
-   * @var \Drupal\migrate\MigrateLookupInterface
+   * @var MigrateLookupInterface
    */
   protected $migrateLookup;

@@ @@
   /**
    * The migration manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationManager;

@@ @@
   /**
    * The key value service.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected $keyValue;

@@ @@
   /**
    * The site settings.
    *
-   * @var \Drupal\Core\Site\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * Constructs a MigrateFieldablePanelsPanesEventSubscriber.
    *
-   * @param \Drupal\migrate\MigrateLookupInterface $migrate_lookup
+   * @param MigrateLookupInterface $migrate_lookup
    *   The migrate lookup service.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_manager
+   * @param MigrationPluginManagerInterface $migration_manager
    *   The migration manager.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value
+   * @param KeyValueFactoryInterface $key_value
    *   The key value factory.
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   The site settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(MigrateLookupInterface $migrate_lookup, MigrationPluginManagerInterface $migration_manager, KeyValueFactoryInterface $key_value, Settings $settings) {
     $this->migrateLookup = $migrate_lookup;
@@ @@
   /**
    * Responds to the PanopolyMigrateEvents::MIGRATE_PANE event.
    *
-   * @param \Drupal\panopoly_migrate\Event\MigratePaneEvent $event
+   * @param MigratePaneEvent $event
    *   The event.
    */
   public function onMigratePane(MigratePaneEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/panopoly_migrate/src/ClassResolverDecorator.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The original class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;

@@ @@
   /**
    * ClassResolverDecorator constructor.
    *
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The original class resolver.
    */
   public function __construct(ClassResolverInterface $class_resolver) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/panopoly_migrate/panopoly_migrate.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\migrate\Plugin\MigrateSourcePluginManager;
 /**
  * @file
  * Hook implementations for Panopoly Migrate.
@@ @@
     'bypass' => TRUE,
   ];

-  /** @var \Drupal\migrate\Plugin\MigrationPluginManager $migration_plugin_manager */
+  /** @var MigrationPluginManager $migration_plugin_manager */
   $migration_plugin_manager = \Drupal::service('plugin.manager.migration');
-  /** @var \Drupal\migrate\Plugin\MigrateSourcePluginManager $source_plugin_manager */
+  /** @var MigrateSourcePluginManager $source_plugin_manager */
   $source_plugin_manager = \Drupal::service('plugin.manager.migrate.source');

   foreach ($migrations as &$migration) {
@@ @@
 /**
  * Checks if a migration plugin's id matches a list of suffixes.
  *
- * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+ * @param MigrationInterface $migration
  *   The migration.
  * @param string[] $id_suffixes
  *   An array of suffixes to check.
@@ @@
  *
  * TODO: Switch to use event from migrate_plus module?
  *
- * @throws \Drupal\migrate\MigrateSkipRowException
+ * @throws MigrateSkipRowException
  */
 function panopoly_migrate_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
   // Skip some fields configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


11) modules/contrib/panopoly_migrate/modules/panopoly_migrate_wysiwyg/src/EventSubscriber/MigrateWysiwygFormattedTextEventSubscriber.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The site settings service.
    *
-   * @var \Drupal\Core\Site\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * Constructs a MigrateWysiwygFormattedTextEventSubscriber.
    *
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   The site settings service.
    */
   public function __construct(Settings $settings) {
@@ @@
   /**
    * Migrates formatted text.
    *
-   * @param Drupal\panopoly_migrate\Event\MigrateFormattedTextEvent $event
+   * @param MigrateFormattedTextEvent $event
    *   The event.
    */
   public function onMigrateFormattedText(MigrateFormattedTextEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/panopoly_migrate/modules/panopoly_migrate_wysiwyg/panopoly_migrate_wysiwyg.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Site\Settings;
 use Drupal\migrate\MigrateSkipRowException;
 use Drupal\migrate\Plugin\MigrateSourceInterface;
 use Drupal\migrate\Plugin\MigrationInterface;
@@ @@
  */
 function panopoly_migrate_wysiwyg_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
   if ($source->getPluginId() === 'd7_filter_format') {
-    /** @var Drupal\Core\Site\Settings $settings */
+    /** @var Settings $settings */
     $settings = \Drupal::service('settings');

     $format = $row->getSourceProperty('format');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


13) modules/contrib/panopoly_migrate/modules/panopoly_migrate_widgets/panopoly_migrate_widgets.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleHandlerInterface;
 /**
  * @file
  * Hook implementations for Panopoly Migrate Pages.
  */
-
 /**
  * Implements hook_migration_plugins_alter().
  */
 function panopoly_migrate_widgets_migration_plugins_alter(&$plugins) {
-  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
+  /** @var ModuleHandlerInterface $module_handler */
   $module_handler = \Drupal::service('module_handler');

   $dependent_migrations = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/panopoly_migrate/modules/panopoly_migrate_media/src/EventSubscriber/MigrateMediaTagEventSubscriber.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Migrates from media tag attributes to embed attributes.
    *
-   * @param Drupal\panopoly_migrate_media\Event\MigrateMediaTagEvent $event
+   * @param MigrateMediaTagEvent $event
    *   The migrate media tag event.
    */
   public function onMigrateMediaTag(MigrateMediaTagEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/panopoly_migrate/modules/panopoly_migrate_media/src/EventSubscriber/MigrateMediaFormattedTextEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\panopoly_migrate_media\EventSubscriber;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\media\MediaInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Template\Attribute;
 use Drupal\panopoly_migrate\Event\MigrateFormattedTextEvent;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a MigrateMediaFormattedTextEventSubscriber.
    *
-   * @param Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * Migrates formatted text.
    *
-   * @param Drupal\panopoly_migrate\Event\MigrateFormattedTextEvent $event
+   * @param MigrateFormattedTextEvent $event
    *   The event.
    */
   public function onMigrateFormattedText(MigrateFormattedTextEvent $event) {
@@ @@
         return $matches[0];
       }

-      /** @var Drupal\Core\Entity\EntityStorageInterface $media_storage */
+      /** @var EntityStorageInterface $media_storage */
       $media_storage = $this->entityTypeManager->getStorage('media');
-      /** @var Drupal\media\MediaInterface $media */
+      /** @var MediaInterface $media */
       $media = $media_storage->load($data['fid']);

       $embed = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 15 files have been changed by Rector                                      

