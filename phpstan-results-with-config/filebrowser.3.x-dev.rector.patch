diff --git a/filebrowser.module b/filebrowser.module
index 2cca292..8ea0070 100644
--- a/filebrowser.module
+++ b/filebrowser.module
@@ -1,4 +1,9 @@
 <?php
+use Drupal\node\Entity\Node;
+use Drupal\filebrowser\FilebrowserManager;
+use Drupal\Core\Cache\Cache;
+use Drupal\filebrowser\File\DisplayFileList;
+use Drupal\filebrowser\Statistics;
 /* This file is part of "filebrowser".
  *    Copyright 2016, YagoSoft
  *    Author : Joop Sint Jago
@@ -117,7 +122,7 @@ function filebrowser_entity_extra_field_info() {
  * @param FormStateInterface $form_state
  * @param $form_id
  */
-function filebrowser_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function filebrowser_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   /** @var NodeInterface $node */
   $node = $form_state->getFormObject()->getEntity();
   if ($node->bundle() == 'dir_listing') {
@@ -160,7 +165,7 @@ function filebrowser_node_prepare_form(NodeInterface $node, $operation, FormStat
  * @inheritdoc
  */
 function filebrowser_node_load($nodes) {
-  /** @var \Drupal\node\Entity\Node $node */
+  /** @var Node $node */
   foreach ($nodes as $nid => $node) {
     if ($node->bundle() == 'dir_listing') {
       $node->filebrowser = new Filebrowser($nid);
@@ -170,7 +175,7 @@ function filebrowser_node_load($nodes) {
 
 /**
  * Implements hook_ENTITY_TYPE_insert().
- * @param Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  */
 function filebrowser_node_insert(NodeInterface $node) {
   if ($node->bundle() == 'dir_listing') {
@@ -182,17 +187,17 @@ function filebrowser_node_insert(NodeInterface $node) {
 
 /**
  * Implements hook_ENTITY_TYPE_update() for node entities.
- * @var Drupal\node\NodeInterface $node
+ * @var NodeInterface $node
  */
 function filebrowser_node_update(NodeInterface $node) {
-  /** @var \Drupal\filebrowser\FilebrowserManager $manager */
+  /** @var FilebrowserManager $manager */
   if ($node->bundle() == 'dir_listing') {
     $node->filebrowser->nid = $node->id();
     $manager = \Drupal::service('filebrowser.manager');
     //print_r($node->filebrowser);
     $manager->updateFilebrowser($node->filebrowser, 'edit');
     // invalidate the cache for this node
-    \Drupal\Core\Cache\Cache::invalidateTags(['filebrowser:node:' . $node->id()]);
+    Cache::invalidateTags(['filebrowser:node:' . $node->id()]);
   }
 }
 
@@ -234,13 +239,13 @@ function filebrowser_node_delete(NodeInterface $node) {
  */
 function filebrowser_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
   /** @var \Drupal\filebrowser\FilebrowserManager $manager */
-  /** @var \Drupal\filebrowser\Filebrowser $filebrowser*/
+  /** @var Filebrowser $filebrowser*/
   if ($view_mode == 'full' && $node->bundle() == 'dir_listing') {
     $manager = \Drupal::service('filebrowser.manager');
     // get the argument $fid from query
     $fid = \Drupal::request()->query->get('fid');
 
-    $list = new \Drupal\filebrowser\File\DisplayFileList($node, $fid);
+    $list = new DisplayFileList($node, $fid);
     $display_list = $list->get();
 
     // Show file listing content part
@@ -251,7 +256,7 @@ function filebrowser_node_view(array &$build, NodeInterface $node, EntityViewDis
 
     // Show the statistics of this listing
     if ($display->getComponent('filebrowser_statistics')) {
-      $statistics = new \Drupal\filebrowser\Statistics($display_list);
+      $statistics = new Statistics($display_list);
       $build['filebrowser_statistics'] = $statistics->get();
     }
 
diff --git a/src/Access/FilebrowserAccessCheck.php b/src/Access/FilebrowserAccessCheck.php
index 7593f6b..a34e4cc 100644
--- a/src/Access/FilebrowserAccessCheck.php
+++ b/src/Access/FilebrowserAccessCheck.php
@@ -16,7 +16,7 @@ class FilebrowserAccessCheck implements AccessInterface {
   /**
    * A custom access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    * @param RouteMatchInterface $route_match
    * @return AccessResult
diff --git a/src/Breadcrumb/BreadcrumbBuilder.php b/src/Breadcrumb/BreadcrumbBuilder.php
index 00d05a4..66ea78e 100644
--- a/src/Breadcrumb/BreadcrumbBuilder.php
+++ b/src/Breadcrumb/BreadcrumbBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\filebrowser\Breadcrumb;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Breadcrumb\Breadcrumb;
@@ -26,8 +27,7 @@ class BreadcrumbBuilder implements BreadcrumbBuilderInterface {
   protected $common;
 
   /**
-   * @var \Drupal\node\NodeInterface
-   *
+   * @var NodeInterface
    */
   protected $node;
 
@@ -49,7 +49,7 @@ class BreadcrumbBuilder implements BreadcrumbBuilderInterface {
    * @inheritdoc
    */
   public function build(RouteMatchInterface $route_match) {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $breadcrumb = new Breadcrumb();
     $this->node =  $this->common->getNodeFromPath();
     $title = $this->node->getTitle();
diff --git a/src/Controller/DefaultController.php b/src/Controller/DefaultController.php
index a378b4e..89747c1 100644
--- a/src/Controller/DefaultController.php
+++ b/src/Controller/DefaultController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\filebrowser\Controller;
 
+use Drupal\Core\Render\HtmlResponse;
 use Drupal\Core\Ajax\AfterCommand;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\AlertCommand;
@@ -29,16 +30,16 @@ use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 class DefaultController extends ControllerBase {
 
   /**
-   * @var \Drupal\filebrowser\FilebrowserManager $filebrowserManager
+   * @var FilebrowserManager $filebrowserManager
    */
   protected $filebrowserManager;
   /**
-   * @var \Drupal\filebrowser\Services\FilebrowserValidator
+   * @var FilebrowserValidator
    */
   protected $validator;
 
   /**
-   * @var \Drupal\filebrowser\Services\Common
+   * @var Common
    */
   protected $common;
 
@@ -71,7 +72,7 @@ class DefaultController extends ControllerBase {
    * route: filebrowser.page_download
    * path: filebrowser/download/{fid}
    * @param int $fid Id of the file selected in the download link
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function pageDownload($fid) {
     /* @var NodeInterface $node **/
@@ -88,7 +89,7 @@ class DefaultController extends ControllerBase {
     // todo:
     // RedirectResponse needs a relative path so we will convert the full url into a relative path
     // This is done here, but should be moved to a better place in Common
-    $file_path = file_url_transform_relative($file_data->url);
+    $file_path = \Drupal::service('file_url_generator')->transformRelative($file_data->url);
     if ($filebrowser->downloadManager == 'public' && StreamWrapperManager::getScheme($file_data->uri) == 'public') {
       $response = new RedirectResponse($file_path);
       return $response;
@@ -136,7 +137,7 @@ class DefaultController extends ControllerBase {
    * @param string|null $fids A string containing the field id's of the files
    * to be processed.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Drupal\Core\Render\HtmlResponse
+   * @return AjaxResponse|HtmlResponse
    */
   public function actionFormSubmitAction($nid, $query_fid, $op, $method, $fids = NULL) {
     // $op == archive does not use a form
diff --git a/src/Entity/FilebrowserMetadataEntityAccessControlHandler.php b/src/Entity/FilebrowserMetadataEntityAccessControlHandler.php
index 7601647..75ada0e 100644
--- a/src/Entity/FilebrowserMetadataEntityAccessControlHandler.php
+++ b/src/Entity/FilebrowserMetadataEntityAccessControlHandler.php
@@ -18,7 +18,7 @@ class FilebrowserMetadataEntityAccessControlHandler extends EntityAccessControlH
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\filebrowser\Entity\FilebrowserMetadataEntityInterface $entity */
+    /** @var FilebrowserMetadataEntityInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
diff --git a/src/File/DisplayFile.php b/src/File/DisplayFile.php
index 932a7f2..709bcd1 100644
--- a/src/File/DisplayFile.php
+++ b/src/File/DisplayFile.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\filebrowser\File;
 
+use Drupal\Core\Link;
 use Drupal\Core\Controller\ControllerBase;
 
 class DisplayFile extends ControllerBase {
@@ -85,7 +86,7 @@ class DisplayFile extends ControllerBase {
    */
   public $timestamp; // 1467989263
   /**
-   * @var \Drupal\Core\Link
+   * @var Link
    */
   public $link; // Drupal\Core\GeneratedLink Object
 
diff --git a/src/File/DisplayFileList.php b/src/File/DisplayFileList.php
index 34d0112..323b4e0 100644
--- a/src/File/DisplayFileList.php
+++ b/src/File/DisplayFileList.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\filebrowser\File;
 
+use Drupal\filebrowser\Services\Common;
+use Drupal\filebrowser\Services\FilebrowserValidator;
+use Drupal\filebrowser\Services\FilebrowserStorage;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\filebrowser\Filebrowser;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Link;
 use Drupal\filebrowser\Events\MetadataEvent;
@@ -31,7 +36,7 @@ class DisplayFileList extends ControllerBase {
    */
   protected $files;
   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -49,28 +54,28 @@ class DisplayFileList extends ControllerBase {
   protected $serverFileList;
 
   /**
-   * @var \Drupal\filebrowser\Services\Common
+   * @var Common
    */
   protected $common;
 
 
   /**
-   * @var \Drupal\filebrowser\Services\FilebrowserValidator
+   * @var FilebrowserValidator
    */
   protected $validator;
 
   /**
-   * @var \Drupal\filebrowser\Services\FilebrowserStorage
+   * @var FilebrowserStorage
    */
   protected $storage;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface $user
+   * @var AccountInterface $user
    */
   protected $user;
 
   /**
-   * @var \Drupal\filebrowser\Filebrowser
+   * @var Filebrowser
    */
   protected $filebrowser;
 
@@ -357,7 +362,7 @@ class DisplayFileList extends ControllerBase {
   /**
    * Need this function to build the "Go-up" and Navigate-to-folder links in the icon view
    * todo: solve this better by integrating with makeLink()
-   * @param \Drupal\filebrowser\File\DisplayFile $file
+   * @param DisplayFile $file
    * @param null|int $fid
    */
   protected function makeAnchor(DisplayFile $file, $fid = null) {
diff --git a/src/FilebrowserManager.php b/src/FilebrowserManager.php
index e726d6a..016d5f8 100644
--- a/src/FilebrowserManager.php
+++ b/src/FilebrowserManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\filebrowser;
 
+use Drupal\Core\Database\Connection;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,17 +18,17 @@ use Drupal\filebrowser\Services\FilebrowserStorage;
 class FilebrowserManager extends ControllerBase {
 
   /**
-   * @var \Drupal\filebrowser\Services\FilebrowserStorage
+   * @var FilebrowserStorage
    */
   public $storage;
 
   /**
-   * @var \Drupal\filebrowser\Services\FilebrowserValidator
+   * @var FilebrowserValidator
    */
   public $validator;
 
   /**
-   * @var \Drupal\filebrowser\Services\Common
+   * @var Common
    */
   public $common;
 
@@ -34,16 +36,16 @@ class FilebrowserManager extends ControllerBase {
   public $user;
 
   /**
-   * @var \Drupal\filebrowser\Filebrowser
+   * @var Filebrowser
    */
   protected $filebrowser;
 
   /**
    * FilebrowserManager constructor.
-   * @param \Drupal\filebrowser\Services\FilebrowserStorage $storage
-   * @param \Drupal\filebrowser\Services\FilebrowserValidator $validator
+   * @param FilebrowserStorage $storage
+   * @param FilebrowserValidator $validator
    * @param \Drupal\Core\Session\AccountInterface
-   * @param \Drupal\filebrowser\Services\Common $common
+   * @param Common $common
    */
   public function __construct(FilebrowserStorage $storage, FilebrowserValidator $validator, AccountInterface $user, Common
   $common) {
@@ -64,8 +66,7 @@ class FilebrowserManager extends ControllerBase {
    * @return array
    */
   public function addFormExtraFields(&$form, $form_state, $node = null, $isConfigForm = false) {
-    /** @var \Drupal\filebrowser\Filebrowser $nodeValues */
-
+    /** @var Filebrowser $nodeValues */
     $config = \Drupal::config('filebrowser.settings');
     $config = $config->get('filebrowser');
     $dispatcher = \Drupal::service('event_dispatcher');
@@ -375,8 +376,7 @@ class FilebrowserManager extends ControllerBase {
 
 
   public function updateFilebrowser(Filebrowser $filebrowser, $mode) {
-    /** @var \Drupal\Core\Database\Connection $connection */
-
+    /** @var Connection $connection */
     if (empty($filebrowser->nid)) {
       \Drupal::messenger()->addError($this->t('No filebrowser data available in node - remove exit'));
       exit();
@@ -397,7 +397,7 @@ class FilebrowserManager extends ControllerBase {
   public static function validateFolderPath($element, FormStateInterface $form_state) {
 
     $folder_path = $form_state->getValue('filebrowser')['folder_path'];
-    /** @var \Drupal\Core\StreamWrapper\StreamWrapperManager $stream_wrapper_manager */
+    /** @var StreamWrapperManager $stream_wrapper_manager */
     $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
     $scheme = $stream_wrapper_manager::getScheme($folder_path);
     $error = false;
@@ -442,65 +442,64 @@ class FilebrowserManager extends ControllerBase {
    * @param FormStateInterface $form_state
    * @return AjaxResponse
    */
-//  public function validateFolderPathAjax(array &$form, FormStateInterface $form_state) {
-//    $result = $this->checkFolderPath($form, $form_state);
-//    $response = new AjaxResponse();
-//    if ($result['error']) {
-//      $css = ['border' => '1px solid green'];
-//      $message = $this->t('Folder uri OK.');
-//    }
-//    else {
-//      $css = ['border' => '1px solid red'];
-//      $message = $this->$result['error_msg'];
-//    }
-//    $response->addCommand(new CssCommand('#edit-filebrowser-folder-path', $css));
-//    $response->addCommand(new HtmlCommand('.folder-path-valid-message', $message));
-//    return $response;
-//  }
-//
-//  public function checkFolderPath($form, FormStateInterface $form_state) {
-//    // @todo Replace deprecated code once the method is uncommented.
-//    $folder_path = $form_state->getValue('filebrowser')['folder_path'];
-//    $file_service = \Drupal::service('file_system');
-//    $scheme = $file_service->uriScheme($folder_path);
-//    $error = false;
-//    $message = '';
-//
-//    // Scheme is valid?
-//    if (!$scheme || !$file_service->validScheme($scheme)) {
-//      $message = $this->t('The scheme: %scheme in your uri is not valid.', ['%scheme' => $scheme]);
-//      $error = true;
-//     // $form_state->setError($element, $message);
-//    }
-//    // is directory name contains illegal characters?
-//    //todo:check
-//    if (strpbrk($folder_path, "\\/?%*:|\"<>") === TRUE) {
-//      $message = $this->t('This @name contains illegal characters.', ['name => $folder_path']);
-//      $error = true;
-//     // $form_state->setError($element, $message);
-//    }
-//
-//    if (!$error) {
-//      // name is safe, create the folder if it doesn't exists.
-//      if (!file_exists($folder_path)) {
-//        if (\Drupal::service('file_system')->mkdir($folder_path, NULL, TRUE, NULL)) {
-//          drupal_set_message($this->t('Folder location @uri created.', ['@uri' => $folder_path]));
-//        }
-//        else {
-//          $error = true;
-//          $message = $this->t('@url does not exist and Filebrowser can not create it.', ['@url' => $folder_path]);
-//      //    $form_state->setError($element, $message );
-//        }
-//      }
-//    }
-//    return [
-//      'error' => $error,
-//      'error_msg' => $message,
-//    ];
-//  }
-
+  //  public function validateFolderPathAjax(array &$form, FormStateInterface $form_state) {
+  //    $result = $this->checkFolderPath($form, $form_state);
+  //    $response = new AjaxResponse();
+  //    if ($result['error']) {
+  //      $css = ['border' => '1px solid green'];
+  //      $message = $this->t('Folder uri OK.');
+  //    }
+  //    else {
+  //      $css = ['border' => '1px solid red'];
+  //      $message = $this->$result['error_msg'];
+  //    }
+  //    $response->addCommand(new CssCommand('#edit-filebrowser-folder-path', $css));
+  //    $response->addCommand(new HtmlCommand('.folder-path-valid-message', $message));
+  //    return $response;
+  //  }
+  //
+  //  public function checkFolderPath($form, FormStateInterface $form_state) {
+  //    // @todo Replace deprecated code once the method is uncommented.
+  //    $folder_path = $form_state->getValue('filebrowser')['folder_path'];
+  //    $file_service = \Drupal::service('file_system');
+  //    $scheme = $file_service->uriScheme($folder_path);
+  //    $error = false;
+  //    $message = '';
+  //
+  //    // Scheme is valid?
+  //    if (!$scheme || !$file_service->validScheme($scheme)) {
+  //      $message = $this->t('The scheme: %scheme in your uri is not valid.', ['%scheme' => $scheme]);
+  //      $error = true;
+  //     // $form_state->setError($element, $message);
+  //    }
+  //    // is directory name contains illegal characters?
+  //    //todo:check
+  //    if (strpbrk($folder_path, "\\/?%*:|\"<>") === TRUE) {
+  //      $message = $this->t('This @name contains illegal characters.', ['name => $folder_path']);
+  //      $error = true;
+  //     // $form_state->setError($element, $message);
+  //    }
+  //
+  //    if (!$error) {
+  //      // name is safe, create the folder if it doesn't exists.
+  //      if (!file_exists($folder_path)) {
+  //        if (\Drupal::service('file_system')->mkdir($folder_path, NULL, TRUE, NULL)) {
+  //          drupal_set_message($this->t('Folder location @uri created.', ['@uri' => $folder_path]));
+  //        }
+  //        else {
+  //          $error = true;
+  //          $message = $this->t('@url does not exist and Filebrowser can not create it.', ['@url' => $folder_path]);
+  //      //    $form_state->setError($element, $message );
+  //        }
+  //      }
+  //    }
+  //    return [
+  //      'error' => $error,
+  //      'error_msg' => $message,
+  //    ];
+  //  }
   /**
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    * @param array $display_list
    * @return null
    */
diff --git a/src/FilebrowserUninstallValidator.php b/src/FilebrowserUninstallValidator.php
index 611cbd1..7328cee 100644
--- a/src/FilebrowserUninstallValidator.php
+++ b/src/FilebrowserUninstallValidator.php
@@ -16,7 +16,7 @@ class FilebrowserUninstallValidator implements ModuleUninstallValidatorInterface
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -25,10 +25,9 @@ class FilebrowserUninstallValidator implements ModuleUninstallValidatorInterface
    *
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface EntityTypeManager
    *   The entity query factory.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
-
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
     $this->entityQuery = $entity_type_manager->getStorage('node')->getQuery();
     $this->stringTranslation = $string_translation;
diff --git a/src/Form/ActionForm.php b/src/Form/ActionForm.php
index 5bec9c3..e14b70f 100644
--- a/src/Form/ActionForm.php
+++ b/src/Form/ActionForm.php
@@ -3,6 +3,8 @@
 
 namespace Drupal\filebrowser\Form;
 
+use Drupal\filebrowser\Services\Common;
+use Drupal\filebrowser\Services\FormHelper;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\node\NodeInterface;
@@ -44,14 +46,13 @@ class ActionForm extends FormBase {
   /**
    * {@inheritdoc}
    */
-
   /**
-   * @var \Drupal\filebrowser\Services\Common
+   * @var Common
    */
   protected $common;
 
   /**
-   * @var \Drupal\filebrowser\Services\FormHelper
+   * @var FormHelper
    */
   protected $helper;
 
diff --git a/src/Form/DeleteForm.php b/src/Form/DeleteForm.php
index 339efa0..f88acd6 100644
--- a/src/Form/DeleteForm.php
+++ b/src/Form/DeleteForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\filebrowser\Form;
 
+use Drupal\node\NodeInterface;
+use Drupal\filebrowser\Services\Common;
+use Drupal\filebrowser\Services\FilebrowserValidator;
+use Drupal\filebrowser\Filebrowser;
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -23,27 +28,27 @@ class DeleteForm extends ConfirmFormBase {
   protected $queryFid;
 
   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * Common methods
-   * @var \Drupal\filebrowser\Services\Common
+   * @var Common
    */
   protected $common;
 
   /**
    * Validator methods
    *
-   * @var \Drupal\filebrowser\Services\FilebrowserValidator
+   * @var FilebrowserValidator
    */
   protected $validator;
 
   /**
    * Filebrowser object holds specific data
    *
-   * @var \Drupal\filebrowser\Filebrowser
+   * @var Filebrowser
    */
   protected $filebrowser;
 
@@ -56,7 +61,7 @@ class DeleteForm extends ConfirmFormBase {
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
diff --git a/src/Form/DescriptionForm.php b/src/Form/DescriptionForm.php
index 1399d8a..8bf24fc 100644
--- a/src/Form/DescriptionForm.php
+++ b/src/Form/DescriptionForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\filebrowser\Form;
 
+use Drupal\filebrowser\Services\Common;
+use Drupal\filebrowser\Services\FilebrowserStorage;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\filebrowser\Entity\FilebrowserMetadataEntity;
@@ -23,12 +25,12 @@ class DescriptionForm extends FormBase {
   protected $nid;
   protected $queryFid;
   /**
-   * @var \Drupal\filebrowser\Services\Common
+   * @var Common
    */
   protected $common;
 
   /**
-   * @var \Drupal\filebrowser\Services\FilebrowserStorage
+   * @var FilebrowserStorage
    */
   protected $storage;
 
diff --git a/src/Form/FolderForm.php b/src/Form/FolderForm.php
index e76f3b9..965c9e1 100644
--- a/src/Form/FolderForm.php
+++ b/src/Form/FolderForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\filebrowser\Form;
 
+use Drupal\node\NodeInterface;
+use Drupal\filebrowser\Services\Common;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Form\FormBase;
@@ -19,7 +21,7 @@ class FolderForm extends FormBase {
   protected $relativeFid;
 
   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -29,7 +31,7 @@ class FolderForm extends FormBase {
   protected $relativeRoot;
 
   /**
-   * @var \Drupal\filebrowser\Services\Common
+   * @var Common
    */
   protected $common;
 
diff --git a/src/Form/GridActionForm.php b/src/Form/GridActionForm.php
index c33a44c..856b88d 100644
--- a/src/Form/GridActionForm.php
+++ b/src/Form/GridActionForm.php
@@ -62,9 +62,8 @@ class GridActionForm extends FormBase {
   /**
    * {@inheritdoc}
    */
-
   /**
-   * @var \Drupal\filebrowser\Services\Common
+   * @var Common
    */
   protected $common;
 
@@ -167,7 +166,7 @@ class GridActionForm extends FormBase {
         }
         else {
           $form['container'][$row_name][$col_name][$content['content']['file']->fid] = [
-            '#markup' => render($content['content']['grid']),
+            '#markup' => \Drupal::service('renderer')->render($content['content']['grid']),
           ];
         }
       }
diff --git a/src/Form/RenameForm.php b/src/Form/RenameForm.php
index 98acbb6..e3c639c 100644
--- a/src/Form/RenameForm.php
+++ b/src/Form/RenameForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\filebrowser\Form;
 
+use Drupal\node\NodeInterface;
+use Drupal\filebrowser\Filebrowser;
+use Drupal\filebrowser\Services\FilebrowserStorage;
+use Drupal\filebrowser\Services\Common;
+use Drupal\filebrowser\Services\FilebrowserValidator;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -13,7 +18,7 @@ class RenameForm extends ConfirmFormBase {
   /**
    * The node holding the dir-listing.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -40,12 +45,12 @@ class RenameForm extends ConfirmFormBase {
   /**
    * Filebrowser object holds specific data
    *
-   * @var \Drupal\filebrowser\Filebrowser
+   * @var Filebrowser
    */
   protected $filebrowser;
 
   /**
-   * @var \Drupal\filebrowser\Services\FilebrowserStorage
+   * @var FilebrowserStorage
    */
   protected $storage;
 
@@ -55,7 +60,7 @@ class RenameForm extends ConfirmFormBase {
   protected $oldNames;
 
   /**
-   * @var \Drupal\filebrowser\Services\Common
+   * @var Common
    */
   public $common;
 
@@ -70,7 +75,7 @@ class RenameForm extends ConfirmFormBase {
   }
 
   public function buildForm(array $form, FormStateInterface $form_state, $nid = null, $query_fid = null, $fids_str = null, $ajax = null) {
-    /** @var \Drupal\filebrowser\Services\FilebrowserValidator $validate */
+    /** @var FilebrowserValidator $validate */
     $this->common = \Drupal::service('filebrowser.common');
     $this->storage = \Drupal::service('filebrowser.storage');
     $this->node = Node::load($nid);
@@ -269,7 +274,7 @@ class RenameForm extends ConfirmFormBase {
     $file->uri = $uri;
     $file->filename = \Drupal::service('file_system')->basename($uri);
     $file->name = pathinfo($file->filename, PATHINFO_FILENAME);
-    $file->url = file_create_url($file->uri);
+    $file->url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->uri);
   }
 
 }
diff --git a/src/Form/UploadForm.php b/src/Form/UploadForm.php
index d4342d4..3f512a3 100644
--- a/src/Form/UploadForm.php
+++ b/src/Form/UploadForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\filebrowser\Form;
 
+use Drupal\filebrowser\Services\Common;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Cache\Cache;
@@ -30,7 +31,7 @@ class UploadForm extends FormBase {
   protected $nid;
 
   /**
-   * @var \Drupal\filebrowser\Services\Common
+   * @var Common
    */
   protected $common;
 
diff --git a/src/Presentation.php b/src/Presentation.php
index 020e394..9bb41d7 100644
--- a/src/Presentation.php
+++ b/src/Presentation.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\filebrowser;
 
+use Drupal\Core\Image\Image;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Utility\TableSort;
 use Drupal\filebrowser\Entity\FilebrowserMetadataEntity;
@@ -15,7 +17,7 @@ use Symfony\Component\HttpFoundation\Request;
 class Presentation extends ControllerBase{
 
   /**
-   * @var \Drupal\filebrowser\Filebrowser;
+   * @var Filebrowser ;
    */
   protected $filebrowser;
 
@@ -31,12 +33,12 @@ class Presentation extends ControllerBase{
   protected $fsFileList;
 
   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
-   * @var \Drupal\filebrowser\Services\Common $common
+   * @var Common $common
    */
   protected $common;
 
@@ -54,7 +56,7 @@ class Presentation extends ControllerBase{
    * @param array $list
    */
   public function __construct(NodeInterface $node, array $list) {
-    /** @var \Drupal\filebrowser\Filebrowser $filebrowser */
+    /** @var Filebrowser $filebrowser */
     $this->common = \Drupal::service('filebrowser.common');
     $this->node = $node;
     $this->filebrowser = $node->filebrowser;
@@ -199,8 +201,8 @@ class Presentation extends ControllerBase{
 
   public function iconView() {
     /**
-     * @var \Drupal\Core\Image\Image $thumbnail
-     * @var \Drupal\filebrowser\Grid\Grid  $grid_table
+     * @var Image $thumbnail
+     * @var Grid $grid_table
      * @var DisplayFile $data
      */
     $list_data = $this->dbFileList['data'];
@@ -332,12 +334,12 @@ class Presentation extends ControllerBase{
         // ##### ICON COLUMN #####
         $visible_columns[Common::ICON] = true;
         $icon = $this->common->iconGenerate($file->fileData->type, $file->fileData->mimetype, 24, 24);
-        $unsorted_rows[$file_name][Common::ICON] = render($icon);
+        $unsorted_rows[$file_name][Common::ICON] = \Drupal::service('renderer')->render($icon);
       }
 
       // ##### NAME COLUMN - we will always set the name column
       // fixme: delete not needed
-      $unsorted_rows[$file_name][Common::NAME] = render($file->link);
+      $unsorted_rows[$file_name][Common::NAME] = \Drupal::service('renderer')->render($file->link);
       $visible_columns[Common::NAME] = true;
 
       // ##### SET OTHER METADATA
@@ -364,7 +366,7 @@ class Presentation extends ControllerBase{
             $render = [];
             $render['#theme'] = $theme;
             $render['#data'] = $content;
-            $unsorted_rows[$file_name][$name] = render($render);
+            $unsorted_rows[$file_name][$name] = \Drupal::service('renderer')->render($render);
           }
         }
       }
@@ -373,9 +375,8 @@ class Presentation extends ControllerBase{
 
   private function buildHeader(&$header, &$unsorted_rows, $visible_columns, $column_names, $default_sort, $sort_order) {
     /**
-     * @var \Drupal\Core\StringTranslation\TranslatableMarkup  $specs
+     * @var TranslatableMarkup $specs
      */
-
     foreach ($column_names as $column_name => $column_spec) {
       if (isset($visible_columns[$column_name]) && $visible_columns[$column_name]) {
         if ($column_name == Common::ICON) {
diff --git a/src/ServerFileList.php b/src/ServerFileList.php
index 6a086c7..ad1c03f 100644
--- a/src/ServerFileList.php
+++ b/src/ServerFileList.php
@@ -33,7 +33,7 @@ class ServerFileList {
 
   /**
    * ServerFileList constructor.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    * @param string $relative_path
    */
   public function __construct(NodeInterface $node, $relative_path) {
@@ -73,7 +73,7 @@ class ServerFileList {
 
     foreach ($files as $key => $file) {
 
-      $file->url = file_create_url($file->uri);
+      $file->url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->uri);
       // Complete the required file data
 
       $file->mimetype = $guessor->guess($file->filename);
diff --git a/src/Services/Common.php b/src/Services/Common.php
index b8416b5..8e4a7d7 100644
--- a/src/Services/Common.php
+++ b/src/Services/Common.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\filebrowser\Services;
 
+use Drupal\filebrowser\Filebrowser;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Link;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -49,7 +50,7 @@ class Common extends ControllerBase{
 
   /**
    * Common constructor.
-   * @param \Drupal\filebrowser\Services\FilebrowserStorage $storage
+   * @param FilebrowserStorage $storage
    */
   public function __construct(FilebrowserStorage $storage) {
     $this->storage = $storage;
@@ -303,7 +304,7 @@ class Common extends ControllerBase{
    * @return array
    */
   public function userAllowedActions($node) {
-    /** @var \Drupal\filebrowser\Filebrowser $filebrowser */
+    /** @var Filebrowser $filebrowser */
     $actions = [];
     $account = \Drupal::currentUser();
     $filebrowser = $node->filebrowser;
diff --git a/src/Services/FilebrowserStorage.php b/src/Services/FilebrowserStorage.php
index 401a9f5..5601300 100644
--- a/src/Services/FilebrowserStorage.php
+++ b/src/Services/FilebrowserStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\filebrowser\Services;
 
+use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\Connection;
 
 class FilebrowserStorage {
@@ -9,14 +10,14 @@ class FilebrowserStorage {
   /**
    * Database Service Object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a BookOutlineStorage object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    */
   public function __construct(Connection $connection) {
     $this->connection = $connection;
@@ -148,7 +149,7 @@ class FilebrowserStorage {
    * @param mixed $key_value
    * @param string $field_name Field who's value to change
    * @param mixed $value New value
-   * @return \Drupal\Core\Database\StatementInterface|int|null
+   * @return StatementInterface|int|null
    */
   public function updateContentField($key, $key_value, $field_name, $value) {
     return
@@ -200,9 +201,9 @@ class FilebrowserStorage {
   }
 
   /**
-   * @param array $data   [$fid] => $description
-   * @return \Drupal\Core\Database\StatementInterface|int|null
-   */
+     * @param array $data   [$fid] => $description
+     * @return StatementInterface|int|null
+     */
     public function storeDescriptionMultiple($data) {
       //var_dump($data);
       $query = "UPDATE {filebrowser_content} SET description = :description WHERE fid = :fid";
