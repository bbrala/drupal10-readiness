modules/contrib/convivial_enricher/convivial_enricher.module
modules/contrib/convivial_enricher/modules/convivial_enricher_active_campaign/convivial_enricher_active_campaign.module
modules/contrib/convivial_enricher/modules/convivial_enricher_active_campaign/src/ActiveCampaignPhpApiAdaptor.php
modules/contrib/convivial_enricher/modules/convivial_enricher_active_campaign/src/ActiveCampaignPhpApiAdaptorInterface.php
modules/contrib/convivial_enricher/modules/convivial_enricher_active_campaign/src/Exception/ContactHashMismatchException.php
modules/contrib/convivial_enricher/modules/convivial_enricher_active_campaign/src/Plugin/EnricherDatasource/ActiveCampaignEnricherDatasource.php
modules/contrib/convivial_enricher/modules/convivial_enricher_recombee/convivial_enricher_recombee.module
modules/contrib/convivial_enricher/modules/convivial_enricher_recombee/src/Plugin/EnricherDatasource/RecombeeEnricherDatasource.php
modules/contrib/convivial_enricher/src/Annotation/EnricherDatasource.php
modules/contrib/convivial_enricher/src/Controller/EnricherController.php
modules/contrib/convivial_enricher/src/EnricherDatasourceBase.php
modules/contrib/convivial_enricher/src/EnricherDatasourceInterface.php
modules/contrib/convivial_enricher/src/EnricherDatasourceManager.php
modules/contrib/convivial_enricher/src/EnricherDatasourcePluginCollection.php
modules/contrib/convivial_enricher/src/EnricherHelper.php
modules/contrib/convivial_enricher/src/EnricherHelperInterface.php
modules/contrib/convivial_enricher/src/EnricherInterface.php
modules/contrib/convivial_enricher/src/EnricherListBuilder.php
modules/contrib/convivial_enricher/src/Entity/Enricher.php
modules/contrib/convivial_enricher/src/EventSubscriber/EnricherEndpointRouteSubscriber.php
modules/contrib/convivial_enricher/src/Form/EnricherAddForm.php
modules/contrib/convivial_enricher/src/Form/EnricherDatasourceAddForm.php
modules/contrib/convivial_enricher/src/Form/EnricherDatasourceDeleteForm.php
modules/contrib/convivial_enricher/src/Form/EnricherDatasourceEditForm.php
modules/contrib/convivial_enricher/src/Form/EnricherDatasourceFormBase.php
modules/contrib/convivial_enricher/src/Form/EnricherEditForm.php
modules/contrib/convivial_enricher/src/Form/EnricherFormBase.php
modules/contrib/convivial_enricher/src/PathProcessor/InboundPathProcessor.php
modules/contrib/convivial_enricher/src/Plugin/EnricherDatasource/DummyEnricherDatasource.php

21 files with changes
=====================

1) modules/contrib/convivial_enricher/src/PathProcessor/InboundPathProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\convivial_enricher\PathProcessor;

+use Drupal\convivial_enricher\EnricherInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\PathProcessor\InboundPathProcessorInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ @@
   /**
    * Entity type manager for loading enricher configuration entities.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   private $entityTypeManager;

@@ @@
   /**
    * Construct an EncricherPathProcessor class.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   Entity type manager for loading enricher configuration entities.
    */
   public function __construct(EntityTypeManager $entityTypeManager) {
@@ @@
   /**
    * Load the enricher config entities.
    *
-   * @return \Drupal\convivial_enricher\EnricherInterface[]
+   * @return EnricherInterface[]
    *   An array of entity objects indexed by their IDs. Returns an empty array
    *   if no matching entities are found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function loadEnricherConfigEntities(): array {
     $entity_storage = $this->entityTypeManager->getStorage('enricher');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/convivial_enricher/src/Form/EnricherFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\convivial_enricher\Form;

+use Drupal\convivial_enricher\EnricherInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\convivial_enricher\EnricherInterface
+   * @var EnricherInterface
    */
   protected $entity;

@@ @@
   /**
    * The route building service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;

@@ @@
   /**
    * The enricher entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $enricherStorage;

@@ @@
   /**
    * Constructs a base class for enricher add and edit forms.
    *
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route building service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $enricher_storage
+   * @param EntityStorageInterface $enricher_storage
    *   The enricher entity storage.
    */
   public function __construct(RouteBuilderInterface $route_builder, EntityStorageInterface $enricher_storage) {
@@ @@
    * this entity our form can accept and save paths with forward slashes, while
    * our system continues to function using paths without that slash.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state of this form.
    */
   protected function removeLeadingSlashFromFormStateEndpointValue(FormStateInterface $form_state): void {
@@ @@
    *
    * @param string $enricher_id
    *   The ID (machine name) of the Enricher entity associated with this form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The FromState of this form as passed in from validateForm().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function validateEndpointPathIsUnique(string $enricher_id, FormStateInterface $form_state): void {
     if (!empty($enricher_id)) {
@@ @@
   /**
    * Load all the enricher config entities.
    *
-   * @return \Drupal\convivial_enricher\EnricherInterface[]
+   * @return EnricherInterface[]
    *   An array of Enricher config entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadEnricherConfigEntities(): array {
     $entity_storage = $this->entityTypeManager->getStorage('enricher');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/convivial_enricher/src/Form/EnricherEditForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The enricher datasource manager service.
    *
-   * @var \Drupal\convivial_enricher\EnricherDatasourceManager
+   * @var EnricherDatasourceManager
    */
   protected $enricherDatasourceManager;

@@ @@
   /**
    * Constructs an EnricherEditForm object.
    *
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route building service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $enricher_storage
+   * @param EntityStorageInterface $enricher_storage
    *   The enricher entity storage.
-   * @param \Drupal\convivial_enricher\EnricherDatasourceManager $enricher_datasource_manager
+   * @param EnricherDatasourceManager $enricher_datasource_manager
    *   The enricher datasource manager service.
    */
   public function __construct(RouteBuilderInterface $route_builder, EntityStorageInterface $enricher_storage, EnricherDatasourceManager $enricher_datasource_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/convivial_enricher/src/Form/EnricherDatasourceFormBase.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The enricher.
    *
-   * @var \Drupal\convivial_enricher\EnricherInterface
+   * @var EnricherInterface
    */
   protected $enricher;

@@ @@
   /**
    * The enricher datasource.
    *
-   * @var \Drupal\convivial_enricher\EnricherDatasourceInterface
+   * @var EnricherDatasourceInterface
    */
   protected $enricherDatasource;

@@ @@
    *
    * @param array $form
    *   A nested array form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\convivial_enricher\EnricherInterface $enricher
+   * @param EnricherInterface $enricher
    *   The enricher.
    * @param string $enricher_datasource
    *   The enricher datasource ID.
@@ @@
    * @return array
    *   The form structure.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    */
   public function buildForm(array $form, FormStateInterface $form_state, EnricherInterface $enricher = NULL, $enricher_datasource = NULL) {
     $this->enricher = $enricher;
@@ @@
    * @param string $enricher_datasource
    *   The enricher datasource ID.
    *
-   * @return \Drupal\convivial_enricher\EnricherDatasourceInterface
+   * @return EnricherDatasourceInterface
    *   The enricher datasource object.
    */
   abstract protected function prepareEnricherDatasource($enricher_datasource);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/convivial_enricher/src/Form/EnricherDatasourceDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\convivial_enricher\Form;

+use Drupal\convivial_enricher\EnricherDatasourceInterface;
 use Drupal\convivial_enricher\EnricherInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The enricher containing the datasource to be deleted.
    *
-   * @var \Drupal\convivial_enricher\EnricherInterface
+   * @var EnricherInterface
    */
   protected $enricher;

@@ @@
   /**
    * The enricher datasource to be deleted.
    *
-   * @var \Drupal\convivial_enricher\EnricherDatasourceInterface
+   * @var EnricherDatasourceInterface
    */
   protected $enricherDatasource;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/convivial_enricher/src/Form/EnricherDatasourceAddForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The enricher datasource manager.
    *
-   * @var \Drupal\convivial_enricher\EnricherDatasourceManager
+   * @var EnricherDatasourceManager
    */
   protected $datasourceManager;

@@ @@
   /**
    * Constructs a new EnricherDatasourceAddForm.
    *
-   * @param \Drupal\convivial_enricher\EnricherDatasourceManager $datasource_manager
+   * @param EnricherDatasourceManager $datasource_manager
    *   The enricher datasource manager.
    */
   public function __construct(EnricherDatasourceManager $datasource_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/convivial_enricher/src/EventSubscriber/EnricherEndpointRouteSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\convivial_enricher\EventSubscriber;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\convivial_enricher\EnricherInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Symfony\Component\Routing\Route;
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   private $entityTypeManager;

@@ @@
   /**
    * Construct a new EnricherEndpointRouteSubscriber.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager service for loading the config entities.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Load EnricherConfigEntities that are enabled.
    *
-   * @return \Drupal\convivial_enricher\EnricherInterface[]
+   * @return EnricherInterface[]
    *   An array of EnricherConfigEntities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getEnabledEnricherConfigEntities(): array {
     $entity_storage = $this->entityTypeManager->getStorage('enricher');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/convivial_enricher/src/Entity/Enricher.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\convivial_enricher\Entity;

+use Drupal\Core\Routing\RouteBuilder;
+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\convivial_enricher\EnricherDatasourceInterface;
 use Drupal\convivial_enricher\EnricherDatasourcePluginCollection;
 use Drupal\convivial_enricher\EnricherInterface;
@@ @@
   /**
    * Collection of enricher datasources that are used by this enricher.
    *
-   * @var \Drupal\convivial_enricher\EnricherDatasourcePluginCollection
+   * @var EnricherDatasourcePluginCollection
    */
   protected $datasourcesCollection;

@@ @@
   /**
    * Drupal routeBuilder object, for rebuilding routes on form save.
    *
-   * @var \Drupal\Core\Routing\RouteBuilder
+   * @var RouteBuilder
    */
   private $routeBuilder;

@@ @@
    *
    * See: https://www.drupal.org/project/drupal/issues/2142515
    *
-   * @return \Drupal\Core\Routing\RouteBuilderInterface
+   * @return RouteBuilderInterface
    *   A Drupal route builder.
    */
   private function getRouteBuilder(): RouteBuilderInterface {
@@ @@
   /**
    * Returns the enricher data source plugin manager.
    *
-   * @return \Drupal\Component\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    *   The enricher datasource plugin manager.
    */
   protected function getEnricherDatasourcePluginManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/convivial_enricher/src/EnricherListBuilder.php:23

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\convivial_enricher\EnricherInterface $entity */
+    /** @var EnricherInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['status'] = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/convivial_enricher/src/EnricherInterface.php:33

    ---------- begin diff ----------
@@ @@
    * @param string $datasource
    *   The datasource ID.
    *
-   * @return \Drupal\convivial_enricher\EnricherDatasourceInterface
+   * @return EnricherDatasourceInterface
    *   The convivial enricher datasource object.
    */
   public function getDatasource($datasource);
@@ @@
   /**
    * Returns the enricher datasources for this enricher.
    *
-   * @return \Drupal\convivial_enricher\EnricherDatasourcePluginCollection|\Drupal\convivial_enricher\EnricherDatasourceInterface[]
+   * @return EnricherDatasourcePluginCollection|EnricherDatasourceInterface[]
    *   The convivial enricher datasource plugin collection.
    */
   public function getDatasources();
@@ @@
   /**
    * Deletes a datasource from this enricher.
    *
-   * @param \Drupal\convivial_enricher\EnricherDatasourceInterface $datasource
+   * @param EnricherDatasourceInterface $datasource
    *   The enricher datasource object.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/convivial_enricher/src/EnricherHelperInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\convivial_enricher;

+use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpFoundation\RedirectResponse;

 /**
@@ @@
    * @param string $enricher_id
    *   The enricher id to process this request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect to the return_to encoded in the $data.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    */
   public function processIncomingData($data, string $enricher_id): RedirectResponse;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/convivial_enricher/src/EnricherHelper.php:20

    ---------- begin diff ----------
@@ @@
    *
    * Used for loading Enricher config entities.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs an EnricherHelper object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   An enricher entity we can call its plugin and associated data processor.
    */
   public function __construct(EntityTypeManager $entityTypeManager) {
@@ @@
     if ($data_decoded['return_to'] && !empty($data_decoded['return_to'])) {
       $response = new RedirectResponse($data_decoded['return_to']);
       $response->setStatusCode(Response::HTTP_TEMPORARY_REDIRECT);
-      /** @var \Drupal\convivial_enricher\EnricherInterface $enricher */
+      /** @var EnricherInterface $enricher */
       $enricher = $this->entityTypeManager->load($enricher_id);
       if ($enricher->get('datasources')) {
         $datasources_output = [];
@@ @@
         $token = $this->dataToArray($data)['token'];
         $datasources = $enricher->get('datasources');
         foreach ($datasources as $key => $datasource) {
-          /** @var \Drupal\convivial_enricher\EnricherDatasourceInterface $datasource_plugin */
+          /** @var EnricherDatasourceInterface $datasource_plugin */
           $datasource_plugin = $enricher->getDatasource($key);
           // Get datasources data based on this token.
           $datasources_output += $datasource_plugin->fetchAndProcessData($token);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/convivial_enricher/src/EnricherDatasourcePluginCollection.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\convivial_enricher\EnricherDatasourceInterface
+   * @return EnricherDatasourceInterface
    *   The convivial enricher datasource object.
    */
   public function &get($instance_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/convivial_enricher/src/EnricherDatasourceManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/convivial_enricher/src/EnricherDatasourceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\convivial_enricher;

+use Symfony\Component\HttpFoundation\Cookie;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ @@
    * @param mixed $key
    *   The key to query the datasource with.
    *
-   * @return \Symfony\Component\HttpFoundation\Cookie|null
+   * @return Cookie|null
    *   Data from the datasource.
    */
   public function fetchAndProcessData($key);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/convivial_enricher/src/EnricherDatasourceBase.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
    * @param string $expire
    *   The expiry of the cookie.
    *
-   * @return \Symfony\Component\HttpFoundation\Cookie
+   * @return Cookie
    *   The generated cookie.
    */
   public function createCookie($cookie_name, $cookie_value, $expire = "+1 day"): Cookie {
-    return new Cookie('convivial_enricher_' . $cookie_name, $cookie_value, $expire, '/', NULL, FALSE, FALSE, FALSE, NULL);
+    return Cookie::create('convivial_enricher_' . $cookie_name, $cookie_value, $expire, '/', NULL, FALSE, FALSE, FALSE, NULL);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * NewToStaticCallRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/convivial_enricher/src/Controller/EnricherController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\convivial_enricher\Controller;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\convivial_enricher\EnricherHelper;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The endpoint processor we will hand process of the data over to.
    *
-   * @var \Drupal\convivial_enricher\EnricherHelper
+   * @var EnricherHelper
    */
   private $enricherHelper;

@@ @@
    * @param mixed $data
    *   The incoming data parameter from this request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   HTTP response, probably a redirect to the 'return_to'.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function build(string $enricher_id, $data = []): Response {
     return $this->enricherHelper->processIncomingData($data, $enricher_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/convivial_enricher/src/Annotation/EnricherDatasource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\convivial_enricher\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


19) modules/contrib/convivial_enricher/modules/convivial_enricher_recombee/src/Plugin/EnricherDatasource/RecombeeEnricherDatasource.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/convivial_enricher/modules/convivial_enricher_active_campaign/src/Plugin/EnricherDatasource/ActiveCampaignEnricherDatasource.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * ActiveCampaign API client.
    *
-   * @var array|\Drupal\convivial_enricher_active_campaign\ActiveCampaignPhpApiAdaptorInterface
+   * @var array|ActiveCampaignPhpApiAdaptorInterface
    */
   private $activeCampaignPhpApiAdaptor;

@@ @@
    * @return object
    *   The contact object retrieved from active campaign.
    *
-   * @throws \Drupal\convivial_enricher_active_campaign\Exception\ContactHashMismatchException
+   * @throws ContactHashMismatchException
    * @throws \InvalidArgumentException
    */
   private function getContactFromEmailHash(string $email_hash): \stdClass {
@@ @@
    * @param string $email_hash
    *   The contact's email hash as retrieved from active_campaign.
    *
-   * @throws \Drupal\convivial_enricher_active_campaign\Exception\ContactHashMismatchException
+   * @throws ContactHashMismatchException
    */
   private function checkCachedUserIdEmailHashForChanges(object $response, string $email_hash): void {
     $contact_id = $response->contacts[0]->id;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/convivial_enricher/modules/convivial_enricher_active_campaign/src/ActiveCampaignPhpApiAdaptor.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The HTTP client to communicate with REST.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
    *
    * For logging exceptions.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private $loggerChannelFactory;

@@ @@
   /**
    * Cache backend service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $cacheBackend;

@@ @@
   /**
    * Construct a new ActiveCampaignPhpApiAdaptor.
    *
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   Client for communicating with active campaigns REST api.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Drupal logger service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   Cache backend service.
    */
   public function __construct(ClientInterface $httpClient, LoggerChannelFactoryInterface $loggerChannelFactory, CacheBackendInterface $cacheBackend) {
@@ @@
   /**
    * Gather the request URL, options and perform the request.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   This request's response.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    * @throws \InvalidArgumentException
    */
   private function getResponseFromApi(): ResponseInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 21 files have been changed by Rector                                      

