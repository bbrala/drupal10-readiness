diff --git a/gathercontent.drush.inc b/gathercontent.drush.inc
index 2ffba8c..d9c5180 100644
--- a/gathercontent.drush.inc
+++ b/gathercontent.drush.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\gathercontent\Entity\MappingInterface;
+use Cheppers\GatherContent\DataTypes\Item;
 /**
  * @file
  * Drush command to cli config import.
@@ -101,7 +103,7 @@ function gathercontent_drush_command() {
  * Implements drush_COMMAND().
  */
 function drush_gathercontent_list_mappings() {
-  /** @var \Drupal\gathercontent\Entity\MappingInterface[] $gc_mappings */
+  /** @var MappingInterface[] $gc_mappings */
   $gc_mappings = \Drupal::entityTypeManager()->getStorage('gathercontent_mapping')->loadMultiple();
 
   $mappings = [];
@@ -123,7 +125,7 @@ function drush_gathercontent_list_mappings() {
  * Implements drush_COMMAND().
  */
 function drush_gathercontent_list_status($project_id = NULL) {
-  /** @var \Drupal\gathercontent\DrupalGatherContentClient $client */
+  /** @var DrupalGatherContentClient $client */
   $client = \Drupal::service('gathercontent.client');
 
   if ($project_id === NULL) {
@@ -183,7 +185,7 @@ function drush_gathercontent_import_validate($mapping_id = NULL) {
  */
 function drush_gathercontent_import($mapping_id = NULL, $status_id = '', $parent_menu_item = NULL) {
   if ($mapping_id === NULL) {
-    /** @var \Drupal\gathercontent\Entity\MappingInterface[] $gc_mappings */
+    /** @var MappingInterface[] $gc_mappings */
     $gc_mappings = \Drupal::entityTypeManager()->getStorage('gathercontent_mapping')->loadMultiple();
 
     $options = [];
@@ -202,9 +204,9 @@ function drush_gathercontent_import($mapping_id = NULL, $status_id = '', $parent
   $project_id = $mapping->getGathercontentProjectId();
   $template_id = $mapping->getGathercontentTemplateId();
 
-  /** @var \Drupal\gathercontent\DrupalGatherContentClient $client */
+  /** @var DrupalGatherContentClient $client */
   $client = \Drupal::service('gathercontent.client');
-  /** @var \Cheppers\GatherContent\DataTypes\Item[] $items */
+  /** @var Item[] $items */
   $items = $client->itemsGet($project_id);
 
   $publish = drush_get_option('publish', \Drupal::config('gathercontent.import')->get('node_default_status'));
diff --git a/gathercontent.install b/gathercontent.install
index ac06a20..e4c62aa 100644
--- a/gathercontent.install
+++ b/gathercontent.install
@@ -1,5 +1,11 @@
 <?php
 
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Field\FieldStorageDefinitionListenerInterface;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Language\LanguageInterface;
+use Drupal\Core\Field\FieldStorageDefinitionListener;
 /**
  * @file
  * Install and uninstall script for GatherContent module.
@@ -99,7 +105,7 @@ function gathercontent_schema() {
  * Create gathercontent_option_ids field if doesn't exist.
  */
 function gathercontent_update_8301() {
-  /** @var \Drupal\Core\Entity\EntityFieldManager $entityFieldManager */
+  /** @var EntityFieldManager $entityFieldManager */
   $entityFieldManager = \Drupal::service('entity_field.manager');
   $definitions = $entityFieldManager->getFieldStorageDefinitions('taxonomy_term');
   if (!isset($definitions['gathercontent_option_ids'])) {
@@ -130,9 +136,9 @@ function gathercontent_update_8302() {
  * Create fields for gathercontent_operation_item entity.
  */
 function gathercontent_update_8303() {
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
+  /** @var EntityFieldManagerInterface $entityFieldManager */
   $entityFieldManager = \Drupal::service('entity_field.manager');
-  /** @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $fieldStorageListener */
+  /** @var FieldStorageDefinitionListenerInterface $fieldStorageListener */
   $fieldStorageListener = \Drupal::service('field_storage_definition.listener');
   $definition = $entityFieldManager->getFieldStorageDefinitions('gathercontent_operation_item')['created'];
   $fieldStorageListener->onFieldStorageDefinitionCreate($definition);
@@ -275,9 +281,9 @@ function gathercontent_update_8504() {
     $schema->addPrimaryKey('gathercontent_entity_mapping', $spec['primary key']);
   }
 
-  /** @var \Drupal\Core\Database\Connection $connection */
+  /** @var Connection $connection */
   $connection = \Drupal::service('database');
-  /** @var \Drupal\Core\Language\LanguageInterface $language */
+  /** @var LanguageInterface $language */
   $language = \Drupal::service('language.default')->get();
   $langcode = $language->getId();
 
@@ -294,9 +300,9 @@ function gathercontent_update_8504() {
  * Update gc_id to gc_file_id field on file entity.
  */
 function gathercontent_update_8505() {
-  /** @var \Drupal\Core\Entity\EntityFieldManager $entityFieldManager */
+  /** @var EntityFieldManager $entityFieldManager */
   $entityFieldManager = \Drupal::service('entity_field.manager');
-  /** @var \Drupal\Core\Field\FieldStorageDefinitionListener $fieldStorageDefinitionListener */
+  /** @var FieldStorageDefinitionListener $fieldStorageDefinitionListener */
   $fieldStorageDefinitionListener = \Drupal::service('field_storage_definition.listener');
 
   $definition = $entityFieldManager->getFieldStorageDefinitions('file')['gc_file_id'];
@@ -304,7 +310,7 @@ function gathercontent_update_8505() {
     $fieldStorageDefinitionListener->onFieldStorageDefinitionCreate($definition);
   }
 
-  /** @var \Drupal\Core\Database\Connection $connection */
+  /** @var Connection $connection */
   $connection = \Drupal::service('database');
   $connection->query('UPDATE file_managed SET gc_file_id = gc_id')
     ->execute();
diff --git a/gathercontent.module b/gathercontent.module
index e73c236..f3a9c53 100644
--- a/gathercontent.module
+++ b/gathercontent.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\migrate\Plugin\Migration;
+use Drupal\migrate\MigrateException;
+use Drupal\Core\Database\Connection;
 /**
  * @file
  * Main module file for GatherContent module.
@@ -63,7 +66,7 @@ function gathercontent_import_process($gc_ids, array $import_options, MappingInt
 
   if (!empty($migrationIds)) {
     foreach ($migrationIds as $migrationId) {
-      /** @var \Drupal\migrate\Plugin\Migration $migration */
+      /** @var Migration $migration */
       $migration = \Drupal::service('plugin.manager.migration')
         ->createInstance($migrationId);
 
@@ -110,16 +113,16 @@ function gathercontent_import_process($gc_ids, array $import_options, MappingInt
 /**
  * Deletes the tracked table records for this entity and rolls back the migration.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
- * @throws \Drupal\migrate\MigrateException
+ * @throws MigrateException
  */
 function gathercontent_on_entity_delete(EntityInterface $entity, $skipLanguage = false) {
   $entityId = $entity->id();
   $entityType = $entity->getEntityTypeId();
   $langcode = $entity->language()->getId();
 
-  /** @var \Drupal\Core\Database\Connection $connection */
+  /** @var Connection $connection */
   $connection = \Drupal::service('database');
   $query = $connection->select('gathercontent_entity_mapping')
     ->fields('gathercontent_entity_mapping', [
diff --git a/gathercontent_ui/src/Controller/MappingController.php b/gathercontent_ui/src/Controller/MappingController.php
index 92a61af..e8a08e9 100644
--- a/gathercontent_ui/src/Controller/MappingController.php
+++ b/gathercontent_ui/src/Controller/MappingController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gathercontent_ui\Controller;
 
+use Drupal\gathercontent\DrupalGatherContentClient;
 use Cheppers\GatherContent\GatherContentClientInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +17,7 @@ class MappingController extends ControllerBase {
   /**
    * GatherContent client.
    *
-   * @var \Drupal\gathercontent\DrupalGatherContentClient
+   * @var DrupalGatherContentClient
    */
   protected $client;
 
diff --git a/gathercontent_ui/src/Controller/TrackedEntitiesController.php b/gathercontent_ui/src/Controller/TrackedEntitiesController.php
index 9f30b3f..1716be4 100644
--- a/gathercontent_ui/src/Controller/TrackedEntitiesController.php
+++ b/gathercontent_ui/src/Controller/TrackedEntitiesController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\gathercontent_ui\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -20,21 +24,21 @@ class TrackedEntitiesController extends ControllerBase {
   /**
    * Query factory instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Session service.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;
 
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
@@ -68,9 +72,9 @@ class TrackedEntitiesController extends ControllerBase {
    * @return array
    *   Render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function listTrackedEntities() {
     $tracked = $this->session->get('gathercontent_tracked_entities', []);
@@ -87,7 +91,7 @@ class TrackedEntitiesController extends ControllerBase {
         $storages[$item['entity_type']] = $this->entityTypeManager->getStorage($item['entity_type']);
       }
 
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $storages[$item['entity_type']]->load($item['id']);
       $gcStatus = '';
 
diff --git a/gathercontent_ui/src/Form/ContentImportSelectForm.php b/gathercontent_ui/src/Form/ContentImportSelectForm.php
index 25bbc26..5a49678 100644
--- a/gathercontent_ui/src/Form/ContentImportSelectForm.php
+++ b/gathercontent_ui/src/Form/ContentImportSelectForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\gathercontent_ui\Form;
 
+use Cheppers\GatherContent\DataTypes\Status;
+use Cheppers\GatherContent\DataTypes\Item;
+use Drupal\gathercontent\Entity\MappingInterface;
 use Cheppers\GatherContent\GatherContentClientInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ -67,21 +70,21 @@ class ContentImportSelectForm extends FormBase {
   /**
    * GatherCotnent client.
    *
-   * @var \Cheppers\GatherContent\GatherContentClientInterface
+   * @var GatherContentClientInterface
    */
   protected $client;
 
   /**
    * Menu parent form selector.
    *
-   * @var \Drupal\Core\Menu\MenuParentFormSelectorInterface
+   * @var MenuParentFormSelectorInterface
    */
   protected $menuParentFormSelector;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -136,7 +139,7 @@ class ContentImportSelectForm extends FormBase {
       $entityTypes = [];
 
       foreach ($mappings as $mapping) {
-        /** @var \Drupal\gathercontent\Entity\Mapping $mapping */
+        /** @var Mapping $mapping */
         if ($mapping->hasMapping()) {
           if (!array_key_exists($mapping->getGathercontentTemplateId(), $contentTypes)) {
             $contentTypes[$mapping->getGathercontentTemplateId()] = $mapping->getContentType();
@@ -418,7 +421,7 @@ class ContentImportSelectForm extends FormBase {
       ];
 
       $options = [];
-      /** @var \Cheppers\GatherContent\DataTypes\Status[] $statuses */
+      /** @var Status[] $statuses */
       $statuses = $this->client->projectStatusesGet($this->projectId);
 
       foreach ($statuses['data'] as $status) {
@@ -493,9 +496,9 @@ class ContentImportSelectForm extends FormBase {
         $importOptions = [];
 
         foreach ($importContent as $value) {
-          /** @var \Cheppers\GatherContent\DataTypes\Item $item */
+          /** @var Item $item */
           $gcItem = $this->client->itemGet($value);
-          /** @var \Drupal\gathercontent\Entity\MappingInterface $mapping */
+          /** @var MappingInterface $mapping */
           $mapping = MappingLoader::load($gcItem);
           $mappingId = $mapping->id();
 
@@ -527,7 +530,7 @@ class ContentImportSelectForm extends FormBase {
           'title' => $this->t('Importing content ...'),
           'operations' => $operations,
           'finished' => 'gathercontent_ui_import_finished',
-          'file' => drupal_get_path('module', 'gathercontent') . '/gathercontent.module',
+          'file' => \Drupal::service('extension.list.module')->getPath('gathercontent') . '/gathercontent.module',
           'init_message' => $this->t('Import is starting ...'),
           'progress_message' => $this->t('Processed @current out of @total.'),
           'error_message' => $this->t('An error occurred during processing'),
diff --git a/gathercontent_ui/src/Form/MappingEditForm.php b/gathercontent_ui/src/Form/MappingEditForm.php
index e308859..982a3b0 100644
--- a/gathercontent_ui/src/Form/MappingEditForm.php
+++ b/gathercontent_ui/src/Form/MappingEditForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\gathercontent_ui\Form;
 
+use Drupal\gathercontent\DrupalGatherContentClient;
+use Drupal\gathercontent_ui\Form\MappingEditSteps\MappingSteps;
+use Drupal\gathercontent\Entity\MappingInterface;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Cheppers\GatherContent\GatherContentClientInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -24,41 +28,41 @@ class MappingEditForm extends MappingEditFormBase {
   /**
    * GatherContent client.
    *
-   * @var \Drupal\gathercontent\DrupalGatherContentClient
+   * @var DrupalGatherContentClient
    */
   protected $client;
 
   /**
    * Step object.
    *
-   * @var \Drupal\gathercontent_ui\Form\MappingEditSteps\MappingSteps
+   * @var MappingSteps
    */
   protected $mappingStep;
 
   /**
    * Mapping step service object.
    *
-   * @var \Drupal\gathercontent_ui\Form\MappingEditSteps\MappingStepService
+   * @var MappingStepService
    */
   protected $mappingService;
 
   /**
    * Migration definition creator.
    *
-   * @var \Drupal\gathercontent\MigrationDefinitionCreator
+   * @var MigrationDefinitionCreator
    */
   protected $migrationDefinitionCreator;
 
   /**
    * MappingEditForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   EntityFieldManagerInterface.
-   * @param \Cheppers\GatherContent\GatherContentClientInterface $client
+   * @param GatherContentClientInterface $client
    *   GatherContent client.
-   * @param \Drupal\gathercontent_ui\Form\MappingEditSteps\MappingStepService $mapping_service
+   * @param MappingStepService $mapping_service
    *   MappingStepService.
-   * @param \Drupal\gathercontent\MigrationDefinitionCreator $migrationDefinitionCreator
+   * @param MigrationDefinitionCreator $migrationDefinitionCreator
    *   MigrationDefinitionCreator.
    */
   public function __construct(
@@ -97,7 +101,7 @@ class MappingEditForm extends MappingEditFormBase {
     $form['#attached']['library'][] = 'gathercontent_ui/theme';
     $form['#attached']['library'][] = 'gathercontent_ui/entity_references';
 
-    /** @var \Drupal\gathercontent\Entity\MappingInterface $mapping */
+    /** @var MappingInterface $mapping */
     $mapping = $this->entity;
     $this->new = !$mapping->hasMapping();
 
@@ -151,7 +155,7 @@ class MappingEditForm extends MappingEditFormBase {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     if ($form_state->getTriggeringElement()['#id'] == 'edit-submit') {
-      /** @var \Drupal\gathercontent\Entity\MappingInterface $mapping */
+      /** @var MappingInterface $mapping */
       $mapping = $this->entity;
       $entityStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
 
@@ -253,7 +257,7 @@ class MappingEditForm extends MappingEditFormBase {
                   $entity = \Drupal::entityTypeManager()
                     ->getStorage('entity_form_display')
                     ->load('node.' . $mapping->getContentType() . '.default');
-                  /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $entity */
+                  /** @var EntityFormDisplay $entity */
                   $entity->getRenderer($field_info->getName())
                     ->setSetting('available_options', implode("\n", $new_local_options));
                 }
diff --git a/gathercontent_ui/src/Form/MappingEditFormBase.php b/gathercontent_ui/src/Form/MappingEditFormBase.php
index 765d045..12825b8 100644
--- a/gathercontent_ui/src/Form/MappingEditFormBase.php
+++ b/gathercontent_ui/src/Form/MappingEditFormBase.php
@@ -112,7 +112,7 @@ class MappingEditFormBase extends EntityForm implements ContainerInjectionInterf
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -184,7 +184,7 @@ class MappingEditFormBase extends EntityForm implements ContainerInjectionInterf
   /**
    * Generate automatically terms for local field from GatherContent options.
    *
-   * @param \Drupal\field\Entity\FieldConfig $handlerSettings
+   * @param FieldConfig $handlerSettings
    *   Field config for local field.
    * @param array $localOptions
    *   Array of remote options.
@@ -193,7 +193,7 @@ class MappingEditFormBase extends EntityForm implements ContainerInjectionInterf
    */
   public function automaticTermsGenerator(FieldConfig $handlerSettings, array $localOptions, $langcode) {
     $settings = $handlerSettings->getSetting('handler_settings');
-    /** @var \Drupal\taxonomy\Entity\Term[] $terms */
+    /** @var Term[] $terms */
     if (!empty($settings['auto_create_bundle'])) {
       $vid = $settings['auto_create_bundle'];
     }
@@ -264,7 +264,7 @@ class MappingEditFormBase extends EntityForm implements ContainerInjectionInterf
   /**
    * Prepare options for every language for every field.
    *
-   * @param \Cheppers\GatherContent\DataTypes\Template $template
+   * @param Template $template
    *   GatherContent template object.
    *
    * @return array
@@ -333,7 +333,7 @@ class MappingEditFormBase extends EntityForm implements ContainerInjectionInterf
    *
    * @param array|null $languages
    *   Array with languages available for mapping.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entityStorage
+   * @param EntityStorageInterface $entityStorage
    *   Storage object for taxonomy terms.
    * @param array $row
    *   Array with mapping options.
@@ -341,7 +341,7 @@ class MappingEditFormBase extends EntityForm implements ContainerInjectionInterf
   public function manualErImport($languages, EntityStorageInterface $entityStorage, array $row) {
     if (!empty($languages) && !empty($row['terms'])) {
       $terms = $entityStorage->loadByProperties(['gathercontent_option_ids' => $row[$languages[0]]]);
-      /** @var \Drupal\taxonomy\Entity\Term $term */
+      /** @var Term $term */
       $term = array_shift($terms);
       // If term already exists.
       if (!empty($term)) {
@@ -381,7 +381,7 @@ class MappingEditFormBase extends EntityForm implements ContainerInjectionInterf
       $und_lang_value = $row[LanguageInterface::LANGCODE_NOT_SPECIFIED];
       if (!empty($und_lang_value)) {
         $terms = $entityStorage->loadByProperties(['gathercontent_option_ids' => $und_lang_value]);
-        /** @var \Drupal\taxonomy\Entity\Term $term */
+        /** @var Term $term */
         $term = array_shift($terms);
         // If term already exists.
         if (!empty($term)) {
@@ -411,7 +411,7 @@ class MappingEditFormBase extends EntityForm implements ContainerInjectionInterf
    *
    * @param array|null $languages
    *   Array with languages available for mapping.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entityStorage
+   * @param EntityStorageInterface $entityStorage
    *   Storage object for taxonomy terms.
    * @param array $row
    *   Array with mapping options.
@@ -423,7 +423,7 @@ class MappingEditFormBase extends EntityForm implements ContainerInjectionInterf
   public function semiErImport($languages, EntityStorageInterface $entityStorage, array $row, array $options, $vid) {
     if (!empty($languages)) {
       $terms = $entityStorage->loadByProperties(['gathercontent_option_ids' => $row[$languages[0]]]);
-      /** @var \Drupal\taxonomy\Entity\Term $term */
+      /** @var Term $term */
       $term = array_shift($terms);
       if (!empty($term)) {
         foreach ($languages as $language) {
@@ -457,7 +457,7 @@ class MappingEditFormBase extends EntityForm implements ContainerInjectionInterf
       }
     }
     else {
-      /** @var \Drupal\taxonomy\Entity\Term $term */
+      /** @var Term $term */
       $und_lang_value = $row[LanguageInterface::LANGCODE_NOT_SPECIFIED];
       if (!empty($und_lang_value)) {
         $terms = $entityStorage->loadByProperties(['gathercontent_option_ids' => $und_lang_value]);
@@ -519,7 +519,7 @@ class MappingEditFormBase extends EntityForm implements ContainerInjectionInterf
     $id_array = explode('||', $field_id);
     $field_config = FieldConfig::load($id_array[count($id_array) - 1]);
     $settings = $field_config->getSetting('handler_settings');
-    /** @var \Drupal\taxonomy\Entity\Term[] $terms */
+    /** @var Term[] $terms */
     if (!empty($settings['auto_create_bundle'])) {
       $vid = $settings['auto_create_bundle'];
       return $vid;
diff --git a/gathercontent_ui/src/Form/MappingEditSteps/MappingStepEntityReference.php b/gathercontent_ui/src/Form/MappingEditSteps/MappingStepEntityReference.php
index 15d6a68..dfd15e9 100644
--- a/gathercontent_ui/src/Form/MappingEditSteps/MappingStepEntityReference.php
+++ b/gathercontent_ui/src/Form/MappingEditSteps/MappingStepEntityReference.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gathercontent_ui\Form\MappingEditSteps;
 
+use Drupal\taxonomy\Entity\Term;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\field\Entity\FieldConfig;
@@ -77,7 +78,7 @@ class MappingStepEntityReference extends MappingSteps {
       // For manual mapping load terms from vocabulary.
       if ($this->erImportType === 'manual') {
         $settings = $field_config->getSetting('handler_settings');
-        /** @var \Drupal\taxonomy\Entity\Term[] $terms */
+        /** @var Term[] $terms */
         if (!empty($settings['auto_create_bundle'])) {
           $terms = $entityTypeManager->getStorage('taxonomy_term')
             ->loadByProperties(['vid' => $settings['auto_create_bundle']]);
diff --git a/gathercontent_ui/src/Form/MappingEditSteps/MappingStepService.php b/gathercontent_ui/src/Form/MappingEditSteps/MappingStepService.php
index ca7e22a..b03c191 100644
--- a/gathercontent_ui/src/Form/MappingEditSteps/MappingStepService.php
+++ b/gathercontent_ui/src/Form/MappingEditSteps/MappingStepService.php
@@ -35,12 +35,12 @@ class MappingStepService {
   /**
    * Returns new step object.
    *
-   * @param \Drupal\gathercontent\Entity\MappingInterface $mapping
+   * @param MappingInterface $mapping
    *   Mapping object.
    * @param array $template
    *   Template array.
    *
-   * @return \Drupal\gathercontent_ui\Form\MappingEditSteps\MappingStepNew
+   * @return MappingStepNew
    *   MappingStepNew object.
    */
   public function getNewStep(MappingInterface $mapping, array $template) {
@@ -54,12 +54,12 @@ class MappingStepService {
   /**
    * Returns new step object.
    *
-   * @param \Drupal\gathercontent\Entity\MappingInterface $mapping
+   * @param MappingInterface $mapping
    *   Mapping object.
    * @param array $template
    *   Template array.
    *
-   * @return \Drupal\gathercontent_ui\Form\MappingEditSteps\MappingStepEdit
+   * @return MappingStepEdit
    *   MappingStepEdit object.
    */
   public function getEditStep(MappingInterface $mapping, array $template) {
@@ -73,12 +73,12 @@ class MappingStepService {
   /**
    * Returns new step object.
    *
-   * @param \Drupal\gathercontent\Entity\MappingInterface $mapping
+   * @param MappingInterface $mapping
    *   Mapping object.
    * @param array $template
    *   Template array.
    *
-   * @return \Drupal\gathercontent_ui\Form\MappingEditSteps\MappingStepEntityReference
+   * @return MappingStepEntityReference
    *   MappingStepEntityReference object.
    */
   public function getEntityReferenceStep(MappingInterface $mapping, array $template) {
diff --git a/gathercontent_ui/src/Form/MappingEditSteps/MappingSteps.php b/gathercontent_ui/src/Form/MappingEditSteps/MappingSteps.php
index 2aa09a0..e37524b 100644
--- a/gathercontent_ui/src/Form/MappingEditSteps/MappingSteps.php
+++ b/gathercontent_ui/src/Form/MappingEditSteps/MappingSteps.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\gathercontent_ui\Form\MappingEditSteps;
 
+use Drupal\gathercontent\Entity\Mapping;
+use Cheppers\GatherContent\DataTypes\Template;
+use Drupal\gathercontent\MetatagQuery;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Language\Language;
 use Cheppers\GatherContent\DataTypes\Element;
 use Cheppers\GatherContent\DataTypes\ElementText;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
@@ -25,14 +30,14 @@ abstract class MappingSteps {
   /**
    * Mapping object.
    *
-   * @var \Drupal\gathercontent\Entity\Mapping
+   * @var Mapping
    */
   public $mapping;
 
   /**
    * Template object.
    *
-   * @var \Cheppers\GatherContent\DataTypes\Template
+   * @var Template
    */
   public $template;
 
@@ -53,14 +58,14 @@ abstract class MappingSteps {
   /**
    * MetatagQuery helper object.
    *
-   * @var \Drupal\gathercontent\MetatagQuery
+   * @var MetatagQuery
    */
   protected $metatagQuery;
 
   /**
    * MappingSteps constructor.
    *
-   * @param \Drupal\gathercontent\Entity\MappingInterface $mapping
+   * @param MappingInterface $mapping
    *   Mapping object.
    * @param array $template
    *   Template array.
@@ -68,7 +73,7 @@ abstract class MappingSteps {
   public function __construct(MappingInterface $mapping, array $template) {
     $this->mapping = $mapping;
     $this->template = $template;
-    /** @var \Drupal\gathercontent\MetatagQuery $metatagQuery */
+    /** @var MetatagQuery $metatagQuery */
     $this->metatagQuery = \Drupal::service('gathercontent.metatag');
   }
 
@@ -109,7 +114,7 @@ abstract class MappingSteps {
   /**
    * Returns form array.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   Form state object.
    *
    * @return mixed
@@ -299,7 +304,7 @@ abstract class MappingSteps {
    *
    * Use for filtering only equivalent fields.
    *
-   * @param \Cheppers\GatherContent\DataTypes\Element $gc_field
+   * @param Element $gc_field
    *   Type of field in GatherContent.
    * @param string $content_type
    *   Name of Drupal content type.
@@ -371,7 +376,7 @@ abstract class MappingSteps {
     $entityDefinition = $entityTypeManager->getDefinition($entity_type);
     $titleKey = $entityDefinition->getKey('label');
 
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $instances */
+    /** @var FieldDefinitionInterface[] $instances */
     $instances = $entityFieldManager->getFieldDefinitions($entity_type, $content_type);
 
     $fields = [];
@@ -569,7 +574,7 @@ abstract class MappingSteps {
       isset($gathercontent_field->metaData->isPlain) &&
       $gathercontent_field->metaData->isPlain
     ) {
-      /** @var \Drupal\gathercontent\MetatagQuery $metatagQuery */
+      /** @var MetatagQuery $metatagQuery */
       $metatagQuery = \Drupal::service('gathercontent.metatag');
       return $metatagQuery->getMetatagFields($entity_type, $content_type);
     }
@@ -590,7 +595,7 @@ abstract class MappingSteps {
       ->getLanguages(LanguageInterface::STATE_CONFIGURABLE);
     $language_list = [];
     foreach ($languages as $lang_code => $language) {
-      /** @var \Drupal\Core\Language\Language $language */
+      /** @var Language $language */
       $language_list[$lang_code] = $language->getName();
     }
     return $language_list;
diff --git a/gathercontent_ui/src/Form/MappingImportForm.php b/gathercontent_ui/src/Form/MappingImportForm.php
index b04d7b3..3c10518 100644
--- a/gathercontent_ui/src/Form/MappingImportForm.php
+++ b/gathercontent_ui/src/Form/MappingImportForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gathercontent_ui\Form;
 
+use Cheppers\GatherContent\DataTypes\Project;
 use Cheppers\GatherContent\GatherContentClientInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -22,14 +23,14 @@ class MappingImportForm extends EntityForm {
   /**
    * GatherContent client.
    *
-   * @var \Drupal\gathercontent\DrupalGatherContentClient
+   * @var DrupalGatherContentClient
    */
   protected $client;
 
   /**
    * MappingImportForm constructor.
    *
-   * @param \Cheppers\GatherContent\GatherContentClientInterface $client
+   * @param GatherContentClientInterface $client
    *   GatherContent client.
    */
   public function __construct(GatherContentClientInterface $client) {
@@ -52,7 +53,7 @@ class MappingImportForm extends EntityForm {
     $form = parent::form($form, $form_state);
 
     $account_id = DrupalGatherContentClient::getAccountId();
-    /** @var \Cheppers\GatherContent\DataTypes\Project[] $projects */
+    /** @var Project[] $projects */
     $projects = [];
     if ($account_id) {
       $projects = $this->client->getActiveProjects($account_id);
@@ -89,7 +90,7 @@ class MappingImportForm extends EntityForm {
     $local_templates = [];
 
     foreach ($created_mapping_ids as $mapping) {
-      /** @var \Drupal\gathercontent\Entity\Mapping $mapping */
+      /** @var Mapping $mapping */
       $local_templates[$mapping->getGathercontentTemplateId()] = $mapping->getGathercontentTemplate();
     }
 
@@ -136,7 +137,7 @@ class MappingImportForm extends EntityForm {
         return;
       }
 
-      /** @var \Cheppers\GatherContent\DataTypes\Project[] $projects */
+      /** @var Project[] $projects */
       $projects = $this->client->getActiveProjects($account_id);
 
       $values = $form_state->getValues();
diff --git a/gathercontent_ui/src/MappingHtmlRouteProvider.php b/gathercontent_ui/src/MappingHtmlRouteProvider.php
index 70b6244..800512f 100644
--- a/gathercontent_ui/src/MappingHtmlRouteProvider.php
+++ b/gathercontent_ui/src/MappingHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class MappingHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -63,10 +63,10 @@ class MappingHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
diff --git a/gathercontent_ui/src/MappingListBuilder.php b/gathercontent_ui/src/MappingListBuilder.php
index f21eb63..ab993a6 100644
--- a/gathercontent_ui/src/MappingListBuilder.php
+++ b/gathercontent_ui/src/MappingListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gathercontent_ui;
 
+use Drupal\gathercontent\Entity\Mapping;
 use Cheppers\GatherContent\GatherContentClientInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ -30,21 +31,21 @@ class MappingListBuilder extends ConfigEntityListBuilder {
   /**
    * Client for querying the GatherContent API.
    *
-   * @var \Drupal\gathercontent\DrupalGatherContentClient
+   * @var DrupalGatherContentClient
    */
   protected $client;
 
   /**
    * Entity query service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Request service.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
@@ -144,7 +145,7 @@ class MappingListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\gathercontent\Entity\Mapping $entity */
+    /** @var Mapping $entity */
     $exists = isset($this->templates[$entity->getGathercontentTemplateId()]);
     $row['project'] = $entity->getGathercontentProject();
     $row['gathercontent_template'] = $entity->getGathercontentTemplate();
diff --git a/gathercontent_upload/gathercontent_upload.module b/gathercontent_upload/gathercontent_upload.module
index e82aa81..c02527a 100644
--- a/gathercontent_upload/gathercontent_upload.module
+++ b/gathercontent_upload/gathercontent_upload.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\gathercontent_upload\Export\Exporter;
+use Drupal\gathercontent_upload\Export\MigrateUpdater;
 /**
  * @file
  * Main module file for GatherContent Upload module.
@@ -11,9 +13,9 @@ use Drupal\gathercontent\Entity\MappingInterface;
 /**
  * Upload batch operation callback.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Object of entity we want to upload.
- * @param \Drupal\gathercontent\Entity\MappingInterface $mapping
+ * @param MappingInterface $mapping
  *   Mapping object.
  * @param int|null $gcId
  *   GatherContent ID.
@@ -21,7 +23,7 @@ use Drupal\gathercontent\Entity\MappingInterface;
  *   Context of operation.
  */
 function gathercontent_upload_process(EntityInterface $entity, MappingInterface $mapping, $gcId = NULL, &$context = []) {
-  /** @var \Drupal\gathercontent_upload\Export\Exporter $exporter */
+  /** @var Exporter $exporter */
   $exporter = \Drupal::service('gathercontent_upload.exporter');
 
   if (!isset($context['results']['success'])) {
@@ -49,7 +51,7 @@ function gathercontent_upload_process(EntityInterface $entity, MappingInterface
  *   Context of operation.
  */
 function gathercontent_upload_migrate_update_process(&$context) {
-  /** @var \Drupal\gathercontent_upload\Export\MigrateUpdater $migrateUpdater */
+  /** @var MigrateUpdater $migrateUpdater */
   $migrateUpdater = \Drupal::service('gathercontent_upload.migrate_updater');
   try {
     $migrateUpdater->updateIdMap($context);
diff --git a/gathercontent_upload/src/Event/PostNodeUploadEvent.php b/gathercontent_upload/src/Event/PostNodeUploadEvent.php
index 77874dc..6b513d1 100644
--- a/gathercontent_upload/src/Event/PostNodeUploadEvent.php
+++ b/gathercontent_upload/src/Event/PostNodeUploadEvent.php
@@ -2,8 +2,9 @@
 
 namespace Drupal\gathercontent_upload\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Wraps a post node upload event for event listeners.
@@ -13,7 +14,7 @@ class PostNodeUploadEvent extends Event {
   /**
    * Node object.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -27,7 +28,7 @@ class PostNodeUploadEvent extends Event {
   /**
    * Constructs a post node upload event object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $node
+   * @param EntityInterface $node
    *   Entity object.
    * @param array $gathercontentValues
    *   Source fields representing object in GatherContent.
@@ -40,7 +41,7 @@ class PostNodeUploadEvent extends Event {
   /**
    * Gets the node object.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The node object.
    */
   public function getNode() {
diff --git a/gathercontent_upload/src/Event/PreNodeUploadEvent.php b/gathercontent_upload/src/Event/PreNodeUploadEvent.php
index 57c10e9..e4dd2a4 100644
--- a/gathercontent_upload/src/Event/PreNodeUploadEvent.php
+++ b/gathercontent_upload/src/Event/PreNodeUploadEvent.php
@@ -2,8 +2,9 @@
 
 namespace Drupal\gathercontent_upload\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Wraps a pre node upload event for event listeners.
@@ -13,7 +14,7 @@ class PreNodeUploadEvent extends Event {
   /**
    * Node object.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -27,7 +28,7 @@ class PreNodeUploadEvent extends Event {
   /**
    * Constructs a pre node upload event object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $node
+   * @param EntityInterface $node
    *   Entity object.
    * @param array $gathercontentValues
    *   Source fields representing object in GatherContent.
@@ -40,7 +41,7 @@ class PreNodeUploadEvent extends Event {
   /**
    * Gets the node object.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The node object.
    */
   public function getNode() {
diff --git a/gathercontent_upload/src/Export/Exporter.php b/gathercontent_upload/src/Export/Exporter.php
index eb020a8..f6aa583 100644
--- a/gathercontent_upload/src/Export/Exporter.php
+++ b/gathercontent_upload/src/Export/Exporter.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\gathercontent_upload\Export;
 
+use Drupal\gathercontent\DrupalGatherContentClient;
+use Drupal\content_translation\ContentTranslationManagerInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\taxonomy\Entity\Term;
+use Drupal\file\FileInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Cheppers\GatherContent\DataTypes\Item;
 use Cheppers\GatherContent\GatherContentClientInterface;
 use Drupal;
@@ -31,49 +38,49 @@ class Exporter implements ContainerInjectionInterface {
   /**
    * Drupal GatherContent Client.
    *
-   * @var \Drupal\gathercontent\DrupalGatherContentClient
+   * @var DrupalGatherContentClient
    */
   protected $client;
 
   /**
    * Meta tag Query.
    *
-   * @var \Drupal\gathercontent\MetatagQuery
+   * @var MetatagQuery
    */
   protected $metatag;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Content translation manager.
    *
-   * @var \Drupal\content_translation\ContentTranslationManagerInterface
+   * @var ContentTranslationManagerInterface
    */
   protected $contentTranslation;
 
   /**
    * Filesystem service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
@@ -105,12 +112,12 @@ class Exporter implements ContainerInjectionInterface {
   /**
    * Exporter constructor.
    *
-   * @param \Cheppers\GatherContent\GatherContentClientInterface $client
-   * @param \Drupal\gathercontent\MetatagQuery $metatag
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param GatherContentClientInterface $client
+   * @param MetatagQuery $metatag
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param EventDispatcherInterface $eventDispatcher
+   * @param ModuleHandlerInterface $moduleHandler
+   * @param FileSystemInterface $fileSystem
    */
   public function __construct(
     GatherContentClientInterface $client,
@@ -156,9 +163,9 @@ class Exporter implements ContainerInjectionInterface {
   /**
    * Exports the changes made in Drupal contents.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity entity object.
-   * @param \Drupal\gathercontent\Entity\MappingInterface $mapping
+   * @param MappingInterface $mapping
    *   Mapping object.
    * @param int|null $gcId
    *   GatherContent ID.
@@ -175,9 +182,9 @@ class Exporter implements ContainerInjectionInterface {
     $data = $this->processGroups($entity, $mapping);
 
     $event = $this->eventDispatcher
-      ->dispatch(GatherUploadContentEvents::PRE_NODE_UPLOAD, new PreNodeUploadEvent($entity, $data));
+      ->dispatch(new PreNodeUploadEvent($entity, $data), GatherUploadContentEvents::PRE_NODE_UPLOAD);
 
-    /** @var \Drupal\gathercontent_upload\Event\PreNodeUploadEvent $event */
+    /** @var PreNodeUploadEvent $event */
     $data = $event->getGathercontentValues();
 
     if (!empty($gcId)) {
@@ -193,7 +200,7 @@ class Exporter implements ContainerInjectionInterface {
     }
 
     $this->eventDispatcher
-      ->dispatch(GatherUploadContentEvents::POST_NODE_UPLOAD, new PostNodeUploadEvent($entity, $data));
+      ->dispatch(new PostNodeUploadEvent($entity, $data), GatherUploadContentEvents::POST_NODE_UPLOAD);
 
     if (empty($context['results']['mappings'][$mapping->id()])) {
       $context['results']['mappings'][$mapping->id()] = [
@@ -216,9 +223,9 @@ class Exporter implements ContainerInjectionInterface {
   /**
    * Manages the panes and changes the Item object values.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
-   * @param \Drupal\gathercontent\Entity\MappingInterface $mapping
+   * @param MappingInterface $mapping
    *   Mappig object.
    *
    * @return array
@@ -265,7 +272,7 @@ class Exporter implements ContainerInjectionInterface {
    *
    * @param object $group
    *   Group object.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    * @param array $mappingData
    *   Mapping array.
@@ -277,8 +284,8 @@ class Exporter implements ContainerInjectionInterface {
    * @return array
    *   Returns data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function processFields(object $group, EntityInterface $entity, array $mappingData, bool $isTranslatable, string $language) {
     $exportedFields = [];
@@ -297,7 +304,7 @@ class Exporter implements ContainerInjectionInterface {
         || !isset($mappingData[$group->uuid]['type'])
       ) {
         $localIdArray = explode('||', $localFieldId);
-        /** @var \Drupal\field\Entity\FieldConfig $fieldInfo */
+        /** @var FieldConfig $fieldInfo */
         $fieldInfo = FieldConfig::load($localIdArray[0]);
         $currentEntity = $entity;
         $type = '';
@@ -381,7 +388,7 @@ class Exporter implements ContainerInjectionInterface {
   /**
    * Processes the target ids for a field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $currentEntity
+   * @param EntityInterface $currentEntity
    *   Entity object.
    * @param string $currentFieldName
    *   Current field name.
@@ -398,8 +405,8 @@ class Exporter implements ContainerInjectionInterface {
    * @param string $language
    *   Language.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function processTargets(EntityInterface &$currentEntity, string &$currentFieldName, string &$type, string &$bundle, array &$exportedFields, array $localIdArray, bool $isTranslatable, string $language) {
     $idCount = count($localIdArray);
@@ -460,7 +467,7 @@ class Exporter implements ContainerInjectionInterface {
   /**
    * Processes meta fields.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    * @param string $localFieldName
    *   Field name.
@@ -490,7 +497,7 @@ class Exporter implements ContainerInjectionInterface {
    *
    * @param object $field
    *   Field object.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    * @param bool $isTranslatable
    *   Translatable bool.
@@ -506,8 +513,8 @@ class Exporter implements ContainerInjectionInterface {
    * @return array|string
    *   Returns value.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function processSetFields(object $field, EntityInterface $entity, bool $isTranslatable, string $language, string $localFieldName, string $bundle, bool $isRepeatable) {
     $value = NULL;
@@ -566,7 +573,7 @@ class Exporter implements ContainerInjectionInterface {
             ->getStorage('taxonomy_term')
             ->loadByProperties($conditionArray);
 
-          /** @var \Drupal\taxonomy\Entity\Term $term */
+          /** @var Term $term */
           $term = array_shift($terms);
           if (!empty($term)) {
             $optionIds = $term->gathercontent_option_ids->getValue();
@@ -631,7 +638,7 @@ class Exporter implements ContainerInjectionInterface {
    *
    * @param object $field
    *   Field object.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    * @param bool $isTranslatable
    *   Translatable bool.
@@ -643,8 +650,8 @@ class Exporter implements ContainerInjectionInterface {
    * @return array|string
    *   Returns value.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function processSetAssets(object $field, EntityInterface $entity, bool $isTranslatable, string $language, string $localFieldName) {
     $value = NULL;
@@ -661,7 +668,7 @@ class Exporter implements ContainerInjectionInterface {
 
         $value = [];
         foreach ($targets as $target) {
-          /** @var \Drupal\file\FileInterface $file */
+          /** @var FileInterface $file */
           $file = $this->entityTypeManager
             ->getStorage('file')
             ->load($target['target_id']);
@@ -686,9 +693,9 @@ class Exporter implements ContainerInjectionInterface {
    * @param array $returnedAssets
    *   The assets returned by GC.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function updateFileGcIds(array $returnedAssets) {
     if (empty($this->collectedFileFields) || empty($returnedAssets)) {
@@ -701,7 +708,7 @@ class Exporter implements ContainerInjectionInterface {
       }
 
       foreach ($fileField as $delta => $target) {
-        /** @var \Drupal\file\FileInterface $file */
+        /** @var FileInterface $file */
         $file = $this->entityTypeManager
           ->getStorage('file')
           ->load($target['target_id']);
@@ -740,7 +747,7 @@ class Exporter implements ContainerInjectionInterface {
   /**
    * Moves field values into an array.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $fieldItemList
+   * @param FieldItemListInterface $fieldItemList
    *   The list of field values.
    *
    * @return array
diff --git a/gathercontent_upload/src/Export/MappingCreator.php b/gathercontent_upload/src/Export/MappingCreator.php
index 19cb97d..eefa048 100644
--- a/gathercontent_upload/src/Export/MappingCreator.php
+++ b/gathercontent_upload/src/Export/MappingCreator.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\gathercontent_upload\Export;
 
+use Drupal\content_translation\ContentTranslationManagerInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\field\Entity\FieldConfig;
+use Cheppers\GatherContent\DataTypes\Project;
 use Cheppers\GatherContent\DataTypes\Structure;
 use Cheppers\GatherContent\GatherContentClientInterface;
 use Drupal\Component\Uuid\UuidInterface;
@@ -27,70 +33,70 @@ class MappingCreator implements ContainerInjectionInterface {
   /**
    * Drupal GatherContent Client.
    *
-   * @var \Drupal\gathercontent\DrupalGatherContentClient
+   * @var DrupalGatherContentClient
    */
   protected $client;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidService;
 
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Migration definition creator.
    *
-   * @var \Drupal\gathercontent\MigrationDefinitionCreator
+   * @var MigrationDefinitionCreator
    */
   protected $migrationDefinitionCreator;
 
   /**
    * Content translation manager.
    *
-   * @var \Drupal\content_translation\ContentTranslationManagerInterface
+   * @var ContentTranslationManagerInterface
    */
   protected $contentTranslation;
 
   /**
    * Entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
@@ -111,15 +117,15 @@ class MappingCreator implements ContainerInjectionInterface {
   /**
    * MappingCreator constructor.
    *
-   * @param \Cheppers\GatherContent\GatherContentClientInterface $client
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
-   * @param \Drupal\Component\Uuid\UuidInterface $uuidService
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
-   * @param \Drupal\gathercontent\MigrationDefinitionCreator $migrationDefinitionCreator
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepository
+   * @param GatherContentClientInterface $client
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param EntityFieldManagerInterface $entityFieldManager
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param UuidInterface $uuidService
+   * @param ModuleHandlerInterface $moduleHandler
+   * @param LanguageManagerInterface $languageManager
+   * @param MigrationDefinitionCreator $migrationDefinitionCreator
+   * @param EntityDisplayRepositoryInterface $entityDisplayRepository
    */
   public function __construct(
     GatherContentClientInterface $client,
@@ -174,9 +180,9 @@ class MappingCreator implements ContainerInjectionInterface {
    * @param string $projectId
    *   Project ID.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function generateMapping(string $entityTypeId, string $bundle, string $projectId) {
     $groups = [];
@@ -242,7 +248,7 @@ class MappingCreator implements ContainerInjectionInterface {
     $this->client->templateGet($template->id);
     $templateData = serialize($this->client->getBody(TRUE));
 
-    /** @var \Drupal\gathercontent\Entity\Mapping $mapping */
+    /** @var Mapping $mapping */
     $mapping = Mapping::create([
       'id' => $template->id,
       'gathercontent_project_id' => $projectId,
@@ -271,7 +277,7 @@ class MappingCreator implements ContainerInjectionInterface {
    *
    * @param array $fields
    *   Fields list.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   Language object.
    * @param array $group
    *   Group array.
@@ -284,9 +290,9 @@ class MappingCreator implements ContainerInjectionInterface {
    * @param string $parentFieldLabel
    *   Parent field's Label.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function processFields(
     array $fields,
@@ -302,7 +308,7 @@ class MappingCreator implements ContainerInjectionInterface {
         continue;
       }
 
-      /** @var \Drupal\field\Entity\FieldConfig $field */
+      /** @var FieldConfig $field */
       if (empty(static::FIELD_COMBINATIONS[$field->getType()])
         && $field->getType() !== 'entity_reference'
         && $field->getType() !== 'entity_reference_revisions'
@@ -454,7 +460,7 @@ class MappingCreator implements ContainerInjectionInterface {
    */
   public function getProjects() {
     $accountId = DrupalGatherContentClient::getAccountId();
-    /** @var \Cheppers\GatherContent\DataTypes\Project[] $projects */
+    /** @var Project[] $projects */
     $projects = [];
     if ($accountId) {
       $projects = $this->client->getActiveProjects($accountId);
diff --git a/gathercontent_upload/src/Export/MigrateUpdater.php b/gathercontent_upload/src/Export/MigrateUpdater.php
index e09baf8..c8e00b9 100644
--- a/gathercontent_upload/src/Export/MigrateUpdater.php
+++ b/gathercontent_upload/src/Export/MigrateUpdater.php
@@ -18,22 +18,22 @@ class MigrateUpdater implements ContainerInjectionInterface {
   /**
    * Migration service.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationService;
 
   /**
    * Database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * DI GatherContent Client.
    *
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migrationService
-   * @param \Drupal\Core\Database\Connection $database
+   * @param MigrationPluginManagerInterface $migrationService
+   * @param Connection $database
    */
   public function __construct(
     MigrationPluginManagerInterface $migrationService,
@@ -78,7 +78,7 @@ class MigrateUpdater implements ContainerInjectionInterface {
   }
 
   protected function processMigration(string $migrationId, array $gcIds) {
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->migrationService->createInstance($migrationId);
     $source = $migration->getSourcePlugin();
     $source->rewind();
@@ -104,7 +104,7 @@ class MigrateUpdater implements ContainerInjectionInterface {
     $plugin = explode(':', $destinationConfiguration['plugin']);
     $idMap = $migration->getIdMap();
 
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     foreach ($entities as $entity) {
       if ($plugin[1] !== $entity->getEntityTypeId()) {
         continue;
diff --git a/gathercontent_upload/tests/src/Kernel/GatherContentUploadTest.php b/gathercontent_upload/tests/src/Kernel/GatherContentUploadTest.php
index 796d7de..227a751 100644
--- a/gathercontent_upload/tests/src/Kernel/GatherContentUploadTest.php
+++ b/gathercontent_upload/tests/src/Kernel/GatherContentUploadTest.php
@@ -32,7 +32,7 @@ class GatherContentUploadTest extends GatherContentUploadTestBase {
    *
    * @param array $content
    *   Content array.
-   * @param \Drupal\node\NodeInterface $entity
+   * @param NodeInterface $entity
    *   Node entity object.
    */
   public function assertItemChanged(array $content, NodeInterface $entity) {
@@ -99,7 +99,7 @@ class GatherContentUploadTest extends GatherContentUploadTestBase {
    *
    * @param array $content
    *   Content array.
-   * @param \Drupal\node\NodeInterface $entity
+   * @param NodeInterface $entity
    *   Node entity object.
    */
   public function assertItemChangedMultilang(array $content, NodeInterface $entity) {
@@ -202,7 +202,7 @@ class GatherContentUploadTest extends GatherContentUploadTestBase {
    *
    * @param array $content
    *   Content array.
-   * @param \Drupal\node\NodeInterface $entity
+   * @param NodeInterface $entity
    *   Node entity object.
    */
   public function assertItemChangedMetatag(array $content, NodeInterface $entity) {
@@ -249,7 +249,7 @@ class GatherContentUploadTest extends GatherContentUploadTestBase {
    *
    * @param array $content
    *   Content array.
-   * @param \Drupal\node\NodeInterface $entity
+   * @param NodeInterface $entity
    *   Node entity object.
    */
   public function assertItemChangedMetatagMultilang(array $content, NodeInterface $entity) {
@@ -282,7 +282,7 @@ class GatherContentUploadTest extends GatherContentUploadTestBase {
    *
    * @param array $value
    *   Response value array.
-   * @param \Drupal\Core\Field\FieldItemListInterface $itemList
+   * @param FieldItemListInterface $itemList
    *   Item list.
    */
   public function assertSelection(array $value, FieldItemListInterface $itemList) {
@@ -302,7 +302,7 @@ class GatherContentUploadTest extends GatherContentUploadTestBase {
    *
    * @param string $fieldValue
    *   GatherContent field value.
-   * @param \Drupal\Core\Field\FieldItemListInterface $itemList
+   * @param FieldItemListInterface $itemList
    *   Item list.
    * @param bool $isPop
    *   Use array_pop or not.
diff --git a/gathercontent_upload/tests/src/Kernel/GatherContentUploadTestBase.php b/gathercontent_upload/tests/src/Kernel/GatherContentUploadTestBase.php
index 8b78462..bae6992 100644
--- a/gathercontent_upload/tests/src/Kernel/GatherContentUploadTestBase.php
+++ b/gathercontent_upload/tests/src/Kernel/GatherContentUploadTestBase.php
@@ -21,7 +21,7 @@ abstract class GatherContentUploadTestBase extends EntityKernelTestBase {
   /**
    * Exporter class.
    *
-   * @var \Drupal\gathercontent_upload\Export\Exporter
+   * @var Exporter
    */
   public $exporter;
 
@@ -53,7 +53,7 @@ abstract class GatherContentUploadTestBase extends EntityKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('node', 'node_access');
@@ -71,7 +71,7 @@ abstract class GatherContentUploadTestBase extends EntityKernelTestBase {
   /**
    * Returns mapping for a GatherContent Item.
    *
-   * @param \Cheppers\GatherContent\DataTypes\Item $gcItem
+   * @param Item $gcItem
    *   GatherContent Item object.
    *
    * @return mixed
@@ -84,7 +84,7 @@ abstract class GatherContentUploadTestBase extends EntityKernelTestBase {
   /**
    * Returns the Node for the simple ProcessPane test.
    *
-   * @return \Drupal\node\Entity\Node
+   * @return Node
    *   Node object.
    */
   public function getSimpleNode() {
@@ -142,7 +142,7 @@ abstract class GatherContentUploadTestBase extends EntityKernelTestBase {
   /**
    * Returns Item for the simple ProcessPane test.
    *
-   * @return \Cheppers\GatherContent\DataTypes\Item
+   * @return Item
    *   Item object.
    */
   public function getSimpleItem() {
@@ -155,7 +155,7 @@ abstract class GatherContentUploadTestBase extends EntityKernelTestBase {
   /**
    * Returns the Node for the multilang ProcessPane test.
    *
-   * @return \Drupal\node\Entity\Node
+   * @return Node
    *   Node object.
    */
   public function getMultilangNode() {
@@ -268,7 +268,7 @@ abstract class GatherContentUploadTestBase extends EntityKernelTestBase {
   /**
    * Returns Item for the multilang ProcessPane test.
    *
-   * @return \Cheppers\GatherContent\DataTypes\Item
+   * @return Item
    *   Item object.
    */
   public function getMultilangItem() {
@@ -281,7 +281,7 @@ abstract class GatherContentUploadTestBase extends EntityKernelTestBase {
   /**
    * Returns the Node for the meta tag ProcessPane test.
    *
-   * @return \Drupal\node\Entity\Node
+   * @return Node
    *   Node object.
    */
   public function getMetatagNode() {
@@ -301,7 +301,7 @@ abstract class GatherContentUploadTestBase extends EntityKernelTestBase {
   /**
    * Returns Item for the meta tag ProcessPane test.
    *
-   * @return \Cheppers\GatherContent\DataTypes\Item
+   * @return Item
    *   Item object.
    */
   public function getMetatagItem() {
@@ -314,7 +314,7 @@ abstract class GatherContentUploadTestBase extends EntityKernelTestBase {
   /**
    * Returns the Node for the meta tag multilang ProcessPane test.
    *
-   * @return \Drupal\node\Entity\Node
+   * @return Node
    *   Node object.
    */
   public function getMetatagMultilangNode() {
@@ -334,7 +334,7 @@ abstract class GatherContentUploadTestBase extends EntityKernelTestBase {
   /**
    * Returns Item for the meta tag multilang ProcessPane test.
    *
-   * @return \Cheppers\GatherContent\DataTypes\Item
+   * @return Item
    *   Item object.
    */
   public function getMetatagMultilangItem() {
diff --git a/gathercontent_upload_ui/src/Form/ContentUploadSelectForm.php b/gathercontent_upload_ui/src/Form/ContentUploadSelectForm.php
index 7c0ae10..756480b 100644
--- a/gathercontent_upload_ui/src/Form/ContentUploadSelectForm.php
+++ b/gathercontent_upload_ui/src/Form/ContentUploadSelectForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gathercontent_upload_ui\Form;
 
+use Drupal\gathercontent\Entity\MappingInterface;
 use Cheppers\GatherContent\GatherContentClientInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -52,21 +53,21 @@ class ContentUploadSelectForm extends FormBase {
   /**
    * Client object.
    *
-   * @var \Cheppers\GatherContent\GatherContentClientInterface
+   * @var GatherContentClientInterface
    */
   protected $client;
 
   /**
    * The current database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -120,7 +121,7 @@ class ContentUploadSelectForm extends FormBase {
       $migrationIds = [];
 
       foreach ($createdMappings as $mapping) {
-        /** @var \Drupal\gathercontent\Entity\Mapping $mapping */
+        /** @var Mapping $mapping */
         if ($mapping->hasMapping()) {
           $projects[$mapping->getGathercontentProjectId()] = $mapping->getGathercontentProject();
           $mappingArray[$mapping->getGathercontentTemplateId()] = [
@@ -211,7 +212,7 @@ class ContentUploadSelectForm extends FormBase {
         $projectId = $form_state->hasValue('project') ? $form_state->getValue('project') : $this->projectId;
 
         foreach ($createdMappings as $mapping) {
-          /** @var \Drupal\gathercontent\Entity\Mapping $mapping */
+          /** @var Mapping $mapping */
           if (
             !$mapping->hasMapping()
             || $mapping->getGathercontentProjectId() != $projectId
@@ -390,7 +391,7 @@ class ContentUploadSelectForm extends FormBase {
         $uploadContent = $this->entities;
 
         foreach ($uploadContent as $data) {
-          /** @var \Drupal\gathercontent\Entity\MappingInterface $mapping */
+          /** @var MappingInterface $mapping */
           $mapping = Mapping::load($data['mapping_id']);
           $storage = $this->entityTypeManager->getStorage($data['entity_type']);
           $entity = $storage->load($data['id']);
@@ -414,7 +415,7 @@ class ContentUploadSelectForm extends FormBase {
           'title' => $this->t('Uploading content ...'),
           'operations' => $operations,
           'finished' => 'gathercontent_upload_finished',
-          'file' => drupal_get_path('module', 'gathercontent_upload_ui') . '/gathercontent_upload_ui.module',
+          'file' => \Drupal::service('extension.list.module')->getPath('gathercontent_upload_ui') . '/gathercontent_upload_ui.module',
           'init_message' => $this->t('Upload is starting ...'),
           'progress_message' => $this->t('Processed @current out of @total.'),
           'error_message' => $this->t('An error occurred during processing'),
diff --git a/gathercontent_upload_ui/src/Form/CreateTemplateForm.php b/gathercontent_upload_ui/src/Form/CreateTemplateForm.php
index 700f0f9..80cc588 100644
--- a/gathercontent_upload_ui/src/Form/CreateTemplateForm.php
+++ b/gathercontent_upload_ui/src/Form/CreateTemplateForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\gathercontent_upload_ui\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -15,30 +17,30 @@ class CreateTemplateForm extends FormBase {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Mapping creator.
    *
-   * @var \Drupal\gathercontent_upload\Export\MappingCreator
+   * @var MappingCreator
    */
   protected $mappingCreator;
 
   /**
    * MappingCreator constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
-   * @param \Drupal\gathercontent_upload\Export\MappingCreator $mappingCreator
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param MappingCreator $mappingCreator
    */
   public function __construct(
     EntityTypeManagerInterface $entityTypeManager,
@@ -150,8 +152,8 @@ class CreateTemplateForm extends FormBase {
    * @return array
    *   Assoc array of bundle types.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getBundles(string $entityType): array {
     $mappingStorage = $this->entityTypeManager->getStorage('gathercontent_mapping');
@@ -207,7 +209,7 @@ class CreateTemplateForm extends FormBase {
    * Ajax callback for mapping multistep form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    *   Array of form elements.
diff --git a/src/DrupalGatherContentClient.php b/src/DrupalGatherContentClient.php
index 3d76ea0..9fb0ae6 100644
--- a/src/DrupalGatherContentClient.php
+++ b/src/DrupalGatherContentClient.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\gathercontent;
 
+use Psr\Http\Message\StreamInterface;
+use GuzzleHttp\Client;
 use function GuzzleHttp\json_decode;
 use Cheppers\GatherContent\GatherContentClient;
 use GuzzleHttp\ClientInterface;
@@ -100,7 +102,7 @@ class DrupalGatherContentClient extends GatherContentClient {
    * @param bool $jsonDecoded
    *   If TRUE the method will return the body json_decoded.
    *
-   * @return \Psr\Http\Message\StreamInterface
+   * @return StreamInterface
    *   Response body.
    */
   public function getBody($jsonDecoded = FALSE) {
@@ -128,7 +130,7 @@ class DrupalGatherContentClient extends GatherContentClient {
    */
   public function downloadFiles(array $files, $directory, $language) {
     $entityTypeManager = \Drupal::service('entity_type.manager');
-    /** @var \GuzzleHttp\Client $httpClient */
+    /** @var Client $httpClient */
     $httpClient = $this->client;
     $options = [
       'auth' => $this->getRequestAuth(),
@@ -171,7 +173,7 @@ class DrupalGatherContentClient extends GatherContentClient {
 
             $path = $directory . '/' . $files[$index]->filename;
 
-            $importedFile = file_save_data($response->getBody(), $path);
+            $importedFile = \Drupal::service('file.repository')->writeData($response->getBody(), $path);
 
             if ($importedFile) {
               $importedFile
diff --git a/src/Entity/Mapping.php b/src/Entity/Mapping.php
index acd77f7..99d6584 100644
--- a/src/Entity/Mapping.php
+++ b/src/Entity/Mapping.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gathercontent\Entity;
 
+use Drupal\migrate_plus\Entity\MigrationInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -344,7 +345,7 @@ class Mapping extends ConfigEntityBase implements MappingInterface {
       }
 
       foreach ($migrationIds as $migrationId) {
-        /** @var \Drupal\migrate_plus\Entity\MigrationInterface $migration */
+        /** @var MigrationInterface $migration */
         $migration = $migrationStorage->load($migrationId);
         $migration->delete();
       }
diff --git a/src/Form/ConfigForm.php b/src/Form/ConfigForm.php
index 3c5953b..ce1426f 100644
--- a/src/Form/ConfigForm.php
+++ b/src/Form/ConfigForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gathercontent\Form;
 
+use Drupal\gathercontent\DrupalGatherContentClient;
 use Cheppers\GatherContent\GatherContentClientInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -23,7 +24,7 @@ class ConfigForm extends ConfigFormBase {
   /**
    * GatherContent client.
    *
-   * @var \Drupal\gathercontent\DrupalGatherContentClient
+   * @var DrupalGatherContentClient
    */
   protected $client;
 
diff --git a/src/MetatagQuery.php b/src/MetatagQuery.php
index 0ea7b05..243ca76 100644
--- a/src/MetatagQuery.php
+++ b/src/MetatagQuery.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gathercontent;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -15,14 +16,14 @@ class MetatagQuery implements ContainerInjectionInterface {
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -63,7 +64,7 @@ class MetatagQuery implements ContainerInjectionInterface {
       ->getFieldDefinitions($entityType, $contentType);
 
     foreach ($instances as $instance) {
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $instance */
+      /** @var FieldDefinitionInterface $instance */
       if ($instance->getType() === 'metatag') {
         return TRUE;
       }
@@ -87,7 +88,7 @@ class MetatagQuery implements ContainerInjectionInterface {
       ->getFieldDefinitions($entityType, $contentType);
 
     foreach ($instances as $instance) {
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $instance */
+      /** @var FieldDefinitionInterface $instance */
       if ($instance->getType() === 'metatag') {
         return $instance->getName();
       }
diff --git a/src/MigrateExecutable.php b/src/MigrateExecutable.php
index a411ebd..c060a86 100644
--- a/src/MigrateExecutable.php
+++ b/src/MigrateExecutable.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\gathercontent;
 
+use Cheppers\GatherContent\DataTypes\Status;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Symfony\Component\HttpFoundation\Session\Session;
+use Drupal\gathercontent\Import\ImportOptions;
+use Drupal\node\NodeInterface;
 use Drupal\gathercontent\Import\MenuCreator;
 use Drupal\migrate\Event\MigrateImportEvent;
 use Drupal\migrate_tools\MigrateExecutable as MigrateExecutableBase;
@@ -25,35 +30,35 @@ class MigrateExecutable extends MigrateExecutableBase {
   /**
    * Gathercontent client.
    *
-   * @var \Drupal\gathercontent\DrupalGatherContentClient
+   * @var DrupalGatherContentClient
    */
   protected $client;
 
   /**
    * Latest GatherContent status.
    *
-   * @var \Cheppers\GatherContent\DataTypes\Status
+   * @var Status
    */
   protected $latestGcStatus;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Session manager.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;
 
   /**
    * Statuses.
    *
-   * @var \Cheppers\GatherContent\DataTypes\Status[]
+   * @var Status[]
    */
   protected $statuses;
 
@@ -87,7 +92,7 @@ class MigrateExecutable extends MigrateExecutableBase {
       ->getIds())), $row->getSourceIdValues());
 
     if (!empty($this->importOptions[$sourceId['id']])) {
-      /** @var \Drupal\gathercontent\Import\ImportOptions $options */
+      /** @var ImportOptions $options */
       $options = $this->importOptions[$sourceId['id']];
       $destinationConfiguration = $migration->getDestinationConfiguration();
       $plugin = explode(':', $destinationConfiguration['plugin']);
@@ -134,13 +139,13 @@ class MigrateExecutable extends MigrateExecutableBase {
       }
 
       if (!empty($this->importOptions[$row['sourceid1']])) {
-        /** @var \Drupal\gathercontent\Import\ImportOptions $options */
+        /** @var ImportOptions $options */
         $options = $this->importOptions[$row['sourceid1']];
         $parentMenuItem = $options->getParentMenuItem();
 
         if (!empty($parentMenuItem) && $parentMenuItem != '0') {
           // TODO: Use the entity type from the mapping, not the node!
-          /** @var \Drupal\node\NodeInterface $entity */
+          /** @var NodeInterface $entity */
           $entity = Node::load($row['destid1']);
 
           // TODO: Rewrite menu creator to support none node entities too.
diff --git a/src/MigrationDefinitionCreator.php b/src/MigrationDefinitionCreator.php
index 49f82a7..e450111 100644
--- a/src/MigrationDefinitionCreator.php
+++ b/src/MigrationDefinitionCreator.php
@@ -42,7 +42,7 @@ class MigrationDefinitionCreator {
   /**
    * Mapping object.
    *
-   * @var \Drupal\gathercontent\Entity\MappingInterface
+   * @var MappingInterface
    */
   protected $mapping;
 
@@ -56,14 +56,14 @@ class MigrationDefinitionCreator {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -91,21 +91,21 @@ class MigrationDefinitionCreator {
   /**
    * MetatagQuery helper object.
    *
-   * @var \Drupal\gathercontent\MetatagQuery
+   * @var MetatagQuery
    */
   protected $metatagQuery;
 
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -401,7 +401,7 @@ class MigrationDefinitionCreator {
       $elementKeys = explode('||', $element, 2);
 
       $targetFieldInfo = NULL;
-      /** @var \Drupal\field\Entity\FieldConfig $fieldInfo */
+      /** @var FieldConfig $fieldInfo */
       $fieldInfo = FieldConfig::load($elementKeys[0]);
       $fieldType = 'string';
       $isTranslatable = TRUE;
diff --git a/src/Plugin/Derivative/MigrateEntity.php b/src/Plugin/Derivative/MigrateEntity.php
index e510903..c4fbf22 100644
--- a/src/Plugin/Derivative/MigrateEntity.php
+++ b/src/Plugin/Derivative/MigrateEntity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gathercontent\Plugin\Derivative;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -22,14 +23,14 @@ class MigrateEntity implements ContainerDeriverInterface {
   /**
    * The entity definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface[]
+   * @var EntityTypeInterface[]
    */
   protected $entityDefinitions;
 
   /**
    * Constructs a MigrateEntity object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_definitions
+   * @param EntityTypeInterface[] $entity_definitions
    *   A list of entity definition objects.
    */
   public function __construct(array $entity_definitions) {
diff --git a/src/Plugin/migrate/destination/GatherContentEntity.php b/src/Plugin/migrate/destination/GatherContentEntity.php
index a66ec9a..b565998 100644
--- a/src/Plugin/migrate/destination/GatherContentEntity.php
+++ b/src/Plugin/migrate/destination/GatherContentEntity.php
@@ -25,14 +25,14 @@ class GatherContentEntity extends EntityContentBase {
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
diff --git a/src/Plugin/migrate/process/GatherContentFile.php b/src/Plugin/migrate/process/GatherContentFile.php
index 54f003c..7558b22 100644
--- a/src/Plugin/migrate/process/GatherContentFile.php
+++ b/src/Plugin/migrate/process/GatherContentFile.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gathercontent\Plugin\migrate\process;
 
+use Drupal\gathercontent\DrupalGatherContentClient;
 use Cheppers\GatherContent\GatherContentClientInterface;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Core\File\FileSystem;
@@ -33,14 +34,14 @@ class GatherContentFile extends ProcessPluginBase implements ContainerFactoryPlu
   /**
    * GatherContent client.
    *
-   * @var \Drupal\gathercontent\DrupalGatherContentClient
+   * @var DrupalGatherContentClient
    */
   protected $client;
 
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;
 
diff --git a/src/Plugin/migrate/process/GatherContentGet.php b/src/Plugin/migrate/process/GatherContentGet.php
index 59e49f3..ef3740d 100644
--- a/src/Plugin/migrate/process/GatherContentGet.php
+++ b/src/Plugin/migrate/process/GatherContentGet.php
@@ -33,14 +33,14 @@ class GatherContentGet extends Get implements ContainerFactoryPluginInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/migrate/process/GatherContentSubProcess.php b/src/Plugin/migrate/process/GatherContentSubProcess.php
index a4a4f61..143219d 100644
--- a/src/Plugin/migrate/process/GatherContentSubProcess.php
+++ b/src/Plugin/migrate/process/GatherContentSubProcess.php
@@ -26,14 +26,14 @@ class GatherContentSubProcess extends SubProcess implements ContainerFactoryPlug
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/migrate/process/GatherContentTaxonomy.php b/src/Plugin/migrate/process/GatherContentTaxonomy.php
index 88cb3f8..836e2d0 100644
--- a/src/Plugin/migrate/process/GatherContentTaxonomy.php
+++ b/src/Plugin/migrate/process/GatherContentTaxonomy.php
@@ -28,7 +28,7 @@ class GatherContentTaxonomy extends ProcessPluginBase implements ContainerFactor
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/migrate/source/GatherContentMigrateSource.php b/src/Plugin/migrate/source/GatherContentMigrateSource.php
index 19ed533..c012abc 100644
--- a/src/Plugin/migrate/source/GatherContentMigrateSource.php
+++ b/src/Plugin/migrate/source/GatherContentMigrateSource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gathercontent\Plugin\migrate\source;
 
+use Cheppers\GatherContent\DataTypes\Pagination;
 use Cheppers\GatherContent\DataTypes\Element;
 use Cheppers\GatherContent\DataTypes\ElementSimpleChoice;
 use Cheppers\GatherContent\DataTypes\ElementSimpleFile;
@@ -54,7 +55,7 @@ class GatherContentMigrateSource extends SourcePluginBase implements ContainerFa
   /**
    * Drupal GatherContent Client.
    *
-   * @var \Drupal\gathercontent\DrupalGatherContentClient
+   * @var DrupalGatherContentClient
    */
   protected $client;
 
@@ -179,7 +180,7 @@ class GatherContentMigrateSource extends SourcePluginBase implements ContainerFa
       // The first response will reveal the total number of pages. If there
       // is more than one page, continue until total pages has been reached.
       if (!empty($this->items['data'])) {
-        /** @var \Cheppers\GatherContent\DataTypes\Pagination $pagination */
+        /** @var Pagination $pagination */
         $pagination = $this->items['pagination'];
         $total_pages = $pagination->totalPages;
         $current_page = $pagination->currentPage;
@@ -226,7 +227,7 @@ class GatherContentMigrateSource extends SourcePluginBase implements ContainerFa
    *
    * @param array $gcFiles
    *   Gathercontent file array.
-   * @param \Cheppers\GatherContent\DataTypes\Element $field
+   * @param Element $field
    *   Gathercontent field.
    *
    * @return array
diff --git a/tests/modules/gathercontent_test/src/MockData.php b/tests/modules/gathercontent_test/src/MockData.php
index e0e2e5b..15928a9 100644
--- a/tests/modules/gathercontent_test/src/MockData.php
+++ b/tests/modules/gathercontent_test/src/MockData.php
@@ -178,7 +178,7 @@ class MockData {
       $file->userId = static::getUniqueInt();
       $file->itemId = $item->id;
       $file->field = $element->id;
-      $file->url = static::$drupalRoot . '/' . drupal_get_path('module', 'gathercontent_test') . '/images/test.png';
+      $file->url = static::$drupalRoot . '/' . \Drupal::service('extension.list.module')->getPath('gathercontent_test') . '/images/test.png';
       $file->fileName = 'test.jpg';
       $file->size = 60892;
       $file->type = 'field';
diff --git a/tests/src/Kernel/ConfigCreatorTest.php b/tests/src/Kernel/ConfigCreatorTest.php
index 7225d7c..621d52a 100644
--- a/tests/src/Kernel/ConfigCreatorTest.php
+++ b/tests/src/Kernel/ConfigCreatorTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\gathercontent\Kernel;
 
+use Drupal\gathercontent\Entity\MappingInterface;
+use Drupal\gathercontent\MigrationDefinitionCreator;
 use Drupal\gathercontent_test\MockData;
 use Drupal\migrate_plus\Entity\Migration;
 use Symfony\Component\Yaml\Yaml;
@@ -41,11 +43,11 @@ class ConfigCreatorTest extends GcMigrateTestBase {
    */
   public function testConfigCreate() {
     foreach (self::CONFIG_NAMES_CONFIG_CREATE_TEST as $templateId => $testFiles) {
-      /** @var \Drupal\gathercontent\Entity\MappingInterface $mapping */
+      /** @var MappingInterface $mapping */
       $mapping = MockData::getSpecificMapping($templateId);
       $mappingData = unserialize($mapping->getData());
 
-      /** @var \Drupal\gathercontent\MigrationDefinitionCreator $creator */
+      /** @var MigrationDefinitionCreator $creator */
       $creator = \Drupal::service('gathercontent.migration_creator');
       $creator
         ->setMapping($mapping)
diff --git a/tests/src/Kernel/GcImportTestBase.php b/tests/src/Kernel/GcImportTestBase.php
index 7b9d9ec..a854508 100644
--- a/tests/src/Kernel/GcImportTestBase.php
+++ b/tests/src/Kernel/GcImportTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\gathercontent\Kernel;
 
+use Drupal\taxonomy\Entity\Term;
 use Drupal\gathercontent\MetatagQuery;
 use Drupal\gathercontent_test\MockData;
 use Drupal\gathercontent_test\MockDrupalGatherContentClient;
@@ -25,7 +26,7 @@ abstract class GcImportTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('node', 'node_access');
     $this->installEntitySchema('node');
@@ -37,7 +38,7 @@ abstract class GcImportTestBase extends KernelTestBase {
     $this->installEntitySchema('menu_link_content');
     $this->installConfig(['gathercontent_test']);
     MockData::$drupalRoot = $this->getDrupalRoot();
-    /** @var \Drupal\taxonomy\Entity\Term[] $terms */
+    /** @var Term[] $terms */
     $terms = MockData::createTaxonomyTerms();
     foreach ($terms as $term) {
       $term->save();
diff --git a/tests/src/Kernel/GcMigrateTestBase.php b/tests/src/Kernel/GcMigrateTestBase.php
index 0aa8566..a011e1a 100644
--- a/tests/src/Kernel/GcMigrateTestBase.php
+++ b/tests/src/Kernel/GcMigrateTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\gathercontent\Kernel;
 
+use Drupal\taxonomy\Entity\Term;
 use Drupal\gathercontent_test\MockData;
 use Drupal\gathercontent_test\MockDrupalGatherContentClient;
 use Drupal\Tests\migrate\Kernel\MigrateTestBase;
@@ -24,7 +25,7 @@ abstract class GcMigrateTestBase extends MigrateTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('node', 'node_access');
     $this->installEntitySchema('node');
@@ -37,7 +38,7 @@ abstract class GcMigrateTestBase extends MigrateTestBase {
     $this->installConfig(['gathercontent_test']);
     $this->installSchema('system', ['key_value_expire']);
     MockData::$drupalRoot = $this->getDrupalRoot();
-    /** @var \Drupal\taxonomy\Entity\Term[] $terms */
+    /** @var Term[] $terms */
     $terms = MockData::createTaxonomyTerms();
     foreach ($terms as $term) {
       $term->save();
