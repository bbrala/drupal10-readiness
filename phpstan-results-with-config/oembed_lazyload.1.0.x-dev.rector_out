modules/contrib/oembed_lazyload/modules/oembed_lazyload_youtube/oembed_lazyload_youtube.module
modules/contrib/oembed_lazyload/modules/oembed_lazyload_youtube/src/Plugin/oembed_lazyload/ProviderEnhancer/YoutubeEnhancer.php
modules/contrib/oembed_lazyload/modules/oembed_lazyload_youtube/tests/src/Functional/FormatterThirdPartySettingsTest.php
modules/contrib/oembed_lazyload/modules/oembed_lazyload_youtube/tests/src/Kernel/YoutubeEnhancerTest.php
modules/contrib/oembed_lazyload/oembed_lazyload.module
modules/contrib/oembed_lazyload/src/Access/OembedLazyloadIframeAccessCheck.php
modules/contrib/oembed_lazyload/src/Annotation/ProviderEnhancer.php
modules/contrib/oembed_lazyload/src/IframeUrlHelper.php
modules/contrib/oembed_lazyload/src/Plugin/Field/FieldFormatter/LazyloadOEmbedFormatter.php
modules/contrib/oembed_lazyload/src/Plugin/oembed_lazyload/ProviderEnhancer/FallbackEnhancer.php
modules/contrib/oembed_lazyload/src/ProviderEnhancerBase.php
modules/contrib/oembed_lazyload/src/ProviderEnhancerInterface.php
modules/contrib/oembed_lazyload/src/ProviderEnhancerManager.php
modules/contrib/oembed_lazyload/src/ProviderEnhancerManagerInterface.php
modules/contrib/oembed_lazyload/src/Routing/RouteSubscriber.php
modules/contrib/oembed_lazyload/tests/modules/oembed_lazyload_test/oembed_lazyload_test.module
modules/contrib/oembed_lazyload/tests/modules/oembed_lazyload_test/src/Plugin/oembed_lazyload/ProviderEnhancer/TestEnhancer.php
modules/contrib/oembed_lazyload/tests/src/FunctionalJavascript/LazyloadOEmbedFormatterTest.php
modules/contrib/oembed_lazyload/tests/src/Kernel/FallbackEnhancerTest.php
modules/contrib/oembed_lazyload/tests/src/Kernel/IframeUrlHelperTest.php
modules/contrib/oembed_lazyload/tests/src/Kernel/OEmbedLazyloadIframeAccessCheckTest.php
modules/contrib/oembed_lazyload/tests/src/Kernel/ProviderEnhancerAnnotationTest.php
modules/contrib/oembed_lazyload/tests/src/Kernel/ProviderEnhancerManagerTest.php
modules/contrib/oembed_lazyload/tests/src/Kernel/ProviderEnhancerTest.php
modules/contrib/oembed_lazyload/tests/src/Unit/RouteSubscriberTest.php

20 files with changes
=====================

1) modules/contrib/oembed_lazyload/tests/src/Unit/RouteSubscriberTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The subject under test.
    *
-   * @var \Drupal\oembed_lazyload\Routing\RouteSubscriber
+   * @var RouteSubscriber
    */
   protected $instance;

@@ @@
    */
   public function testAlterRoutes() {

-    $route = $this->getMockBuilder(Route::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $route = $this->createMock(Route::class);

-    $route_collection = $this->getMockBuilder(RouteCollection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $route_collection = $this->createMock(RouteCollection::class);

     $route_collection->method('get')
       ->with('media.oembed_iframe')
       ->willReturn($route);

-    $event = $this->getMockBuilder(RouteBuildEvent::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $event = $this->createMock(RouteBuildEvent::class);

     $event->method('getRouteCollection')
       ->willReturn($route_collection);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/oembed_lazyload/tests/src/Kernel/ProviderEnhancerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\oembed_lazyload\Kernel;

+use Drupal\oembed_lazyload\ProviderEnhancerInterface;
+use Drupal\oembed_lazyload\ProviderEnhancerManagerInterface;
 use Drupal\Core\Url;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\media\OEmbed\Provider;
@@ @@
   /**
    * The subject under test.
    *
-   * @var \Drupal\oembed_lazyload\ProviderEnhancerInterface
+   * @var ProviderEnhancerInterface
    */
   protected $instance;

@@ @@
   protected function setUp() : void {
     parent::setUp();

-    /** @var \Drupal\oembed_lazyload\ProviderEnhancerManagerInterface $plugin_manager */
+    /** @var ProviderEnhancerManagerInterface $plugin_manager */
     $plugin_manager = $this->container->get('oembed_lazyload');
     $this->instance = $plugin_manager->getEnhancerForProvider('test');
   }
@@ @@
    * Test case for the default placeholder generation with a known provider.
    */
   public function testGetPlaceholder() {
-    $url = $this->getMockBuilder(Url::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock(Url::class);

-    $thumbnail_url = $this->getMockBuilder(Url::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $thumbnail_url = $this->createMock(Url::class);

-    $resource = $this->getMockBuilder(Resource::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $resource = $this->createMock(Resource::class);

-    $provider = $this->getMockBuilder(Provider::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $provider = $this->createMock(Provider::class);

     $provider->method('getName')
       ->willReturn('test_provider');
@@ @@
    * Test case for the default placeholder generation with an unknown provider.
    */
   public function testGetPlaceholderNoProvider() {
-    $url = $this->getMockBuilder(Url::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock(Url::class);

-    $thumbnail_url = $this->getMockBuilder(Url::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $thumbnail_url = $this->createMock(Url::class);

-    $resource = $this->getMockBuilder(Resource::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $resource = $this->createMock(Resource::class);

     $resource->method('getProvider')
       ->willReturn(NULL);
@@ @@
    * @covers \Drupal\oembed_lazyload\ProviderEnhancerBase::getIframe
    */
   public function testGetIframeWithTitle() {
-    $url = $this->getMockBuilder(Url::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock(Url::class);

     $url->method('toString')
       ->willReturn('https://example.com');

-    $resource = $this->getMockBuilder(Resource::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $resource = $this->createMock(Resource::class);

     $resource->method('getWidth')
       ->willReturn('550');
@@ @@
    * @covers \Drupal\oembed_lazyload\ProviderEnhancerBase::getIframe
    */
   public function testGetIframeWithoutTitle() {
-    $url = $this->getMockBuilder(Url::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock(Url::class);

     $url->method('toString')
       ->willReturn('https://example.com');

-    $resource = $this->getMockBuilder(Resource::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $resource = $this->createMock(Resource::class);

     $resource->method('getWidth')
       ->willReturn('550');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/oembed_lazyload/tests/src/Kernel/ProviderEnhancerManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\oembed_lazyload\Kernel;

+use Drupal\oembed_lazyload\ProviderEnhancerManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\oembed_lazyload\Plugin\oembed_lazyload\ProviderEnhancer\FallbackEnhancer;
 use Drupal\oembed_lazyload_test\Plugin\oembed_lazyload\ProviderEnhancer\TestEnhancer;
@@ @@
   /**
    * The subject under test.
    *
-   * @var \Drupal\oembed_lazyload\ProviderEnhancerManagerInterface
+   * @var ProviderEnhancerManagerInterface
    */
   protected $instance;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/oembed_lazyload/tests/src/Kernel/ProviderEnhancerAnnotationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\oembed_lazyload\Kernel;

+use Drupal\oembed_lazyload\ProviderEnhancerManagerInterface;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
    */
   public function testAnnotations() {

-    /** @var \Drupal\oembed_lazyload\ProviderEnhancerManagerInterface $manager */
+    /** @var ProviderEnhancerManagerInterface $manager */
     $manager = $this->container->get('oembed_lazyload');
     $plugin = $manager->getDefinition('test');
     static::assertEquals('test', $plugin['id']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/oembed_lazyload/tests/src/Kernel/OEmbedLazyloadIframeAccessCheckTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\oembed_lazyload\Kernel;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Access\AccessResult;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\oembed_lazyload\Access\OembedLazyloadIframeAccessCheck;
@@ @@
   /**
    * The oembed lazyload iFrame URL helper service.
    *
-   * @var \Drupal\oembed_lazyload\IframeUrlHelper
+   * @var IframeUrlHelper
    */
   protected $oembedLazyloadIframeUrlHelper;

@@ @@
   /**
    * The mock query.
    *
-   * @var \Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface
+   * @var ParameterBagInterface
    */
   protected $query;

@@ @@
   /**
    * The subject under test.
    *
-   * @var \Drupal\oembed_lazyload\Access\OembedLazyloadIframeAccessCheck
+   * @var OembedLazyloadIframeAccessCheck
    */
   protected $instance;

@@ @@
   protected function setUp() : void {
     parent::setUp();

-    $this->oembedLazyloadIframeUrlHelper = $this->getMockBuilder(IframeUrlHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->oembedLazyloadIframeUrlHelper = $this->createMock(IframeUrlHelper::class);

-    $request_stack = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $request_stack = $this->createMock(RequestStack::class);

-    /** @var \Symfony\Component\HttpFoundation\Request|\PHPUnit\Framework\MockObject\MockObject $request */
-    $request = $this->getMockBuilder(Request::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var Request|MockObject $request */
+    $request = $this->createMock(Request::class);

     $request_stack->method('getCurrentRequest')
       ->willReturn($request);

-    $this->query = $this->getMockBuilder(ParameterBagInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->query = $this->createMock(ParameterBagInterface::class);

     $request->query = $this->query;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/oembed_lazyload/tests/src/Kernel/IframeUrlHelperTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The mock private key.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;

@@ @@
   /**
    * The subject under test.
    *
-   * @var \Drupal\oembed_lazyload\IframeUrlHelper
+   * @var IframeUrlHelper
    */
   protected $instance;

@@ @@
   protected function setUp() : void {
     parent::setUp();

-    $this->privateKey = $this->getMockBuilder(PrivateKey::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->privateKey = $this->createMock(PrivateKey::class);

     $this->instance = new IframeUrlHelper($this->privateKey);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/oembed_lazyload/tests/src/Kernel/FallbackEnhancerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\oembed_lazyload\Kernel;

+use Drupal\oembed_lazyload\ProviderEnhancerManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\oembed_lazyload\Plugin\oembed_lazyload\ProviderEnhancer\FallbackEnhancer;

@@ @@
    * Test case for confirming annotation fields are working properly.
    */
   public function testFallbackEnhancer() {
-    /** @var \Drupal\oembed_lazyload\ProviderEnhancerManagerInterface $manager */
+    /** @var ProviderEnhancerManagerInterface $manager */
     $manager = $this->container->get('oembed_lazyload');
     $plugin = $manager->createInstance('does_not_exist');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/oembed_lazyload/src/ProviderEnhancerManagerInterface.php:15

    ---------- begin diff ----------
@@ @@
    * @param string $provider
    *   The provider to get an enhancer for.
    *
-   * @return \Drupal\oembed_lazyload\ProviderEnhancerInterface
+   * @return ProviderEnhancerInterface
    *   The enhancer that applies to the provider.
    */
   public function getEnhancerForProvider($provider);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/oembed_lazyload/src/ProviderEnhancerManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/oembed_lazyload/src/ProviderEnhancerInterface.php:31

    ---------- begin diff ----------
@@ @@
    *
    * @param string $url
    *   The url that the oembed resource resides at.
-   * @param \Drupal\media\OEmbed\Resource $resource
+   * @param Resource $resource
    *   The resource to build a thumbnail for.
    * @param array $settings
    *   The settings of the formatter that this enhancer is running on.
@@ @@
   /**
    * Gets a build array that forms the iframe for an oembed video.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The iframe url.
    * @param \Drupal\media\Oembed\Resource $resource
    *   The resource to build an iframe for.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/oembed_lazyload/src/ProviderEnhancerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oembed_lazyload;

+use Psr\Log\LoggerInterface;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
@@ @@
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     $instance = new static($configuration, $plugin_id, $plugin_definition);

-    /** @var \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_channel_factory */
+    /** @var LoggerChannelFactoryInterface $logger_channel_factory */
     $logger_channel_factory = $container->get('logger.factory');
     $instance->logger = $logger_channel_factory->get('oembed_lazyload');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/oembed_lazyload/src/Plugin/Field/FieldFormatter/LazyloadOEmbedFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oembed_lazyload\Plugin\Field\FieldFormatter;

+use Drupal\media\OEmbed\ResourceFetcherInterface;
+use Drupal\media\OEmbed\UrlResolverInterface;
+use Drupal\media\IFrameUrlHelper;
+use Drupal\oembed_lazyload\IframeUrlHelper;
+use Drupal\oembed_lazyload\ProviderEnhancerManager;
+use Drupal\Core\Config\ImmutableConfig;
+use Psr\Log\LoggerInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use Drupal\Core\Field\FieldItemInterface;
+use Drupal\oembed_lazyload\ProviderEnhancerInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   /**
    * The oEmbed resource fetcher.
    *
-   * @var \Drupal\media\OEmbed\ResourceFetcherInterface
+   * @var ResourceFetcherInterface
    */
   protected $resourceFetcher;

@@ @@
   /**
    * The oEmbed URL resolver service.
    *
-   * @var \Drupal\media\OEmbed\UrlResolverInterface
+   * @var UrlResolverInterface
    */
   protected $urlResolver;

@@ @@
   /**
    * The iFrame URL helper service.
    *
-   * @var \Drupal\media\IFrameUrlHelper
+   * @var IFrameUrlHelper
    */
   protected $iFrameUrlHelper;

@@ @@
   /**
    * The oembed lazyload iFrame URL helper service.
    *
-   * @var \Drupal\oembed_lazyload\IframeUrlHelper
+   * @var IframeUrlHelper
    */
   protected $oembedLazyloadIframeUrlHelper;

@@ @@
   /**
    * The OEmbed lazyload manager service.
    *
-   * @var \Drupal\oembed_lazyload\ProviderEnhancerManager
+   * @var ProviderEnhancerManager
    */
   protected $oembedLazyloadPluginManager;

@@ @@
   /**
    * The media settings config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
     $instance->oembedLazyloadIframeUrlHelper = $container->get('oembed_lazyload.iframe_url_helper');
     $instance->oembedLazyloadPluginManager = $container->get('oembed_lazyload');

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $container->get('config.factory');
     $instance->config = $config_factory->get('media.settings');

-    /** @var \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory */
+    /** @var LoggerChannelFactoryInterface $logger_factory */
     $logger_factory = $container->get('logger.factory');
     $instance->logger = $logger_factory->get('oembed_lazyload');

@@ @@
    *
    * @param array $element
    *   The form being validated.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the form.
    */
   public static function validateIntersectionObserverMargin(array $element, FormStateInterface $form_state) {
@@ @@

     foreach ($items as $delta => $item) {

-      /** @var \Drupal\Core\Field\FieldItemInterface $item */
+      /** @var FieldItemInterface $item */
       $main_property = $item->getFieldDefinition()->getFieldStorageDefinition()->getMainPropertyName();
       $value = $item->{$main_property};

@@ @@
         $this->logger->error('Could not find the oembed provider.');
         continue;
       }
-      /** @var \Drupal\oembed_lazyload\ProviderEnhancerInterface $enhancer */
+      /** @var ProviderEnhancerInterface $enhancer */
       $enhancer = $this->oembedLazyloadPluginManager->getEnhancerForProvider($provider->getName());

       $query = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/oembed_lazyload/src/IframeUrlHelper.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The private key service.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;

@@ @@
   /**
    * IFrameUrlHelper constructor.
    *
-   * @param \Drupal\Core\PrivateKey $private_key
+   * @param PrivateKey $private_key
    *   The private key service.
    */
   public function __construct(PrivateKey $private_key) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/oembed_lazyload/src/Annotation/ProviderEnhancer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oembed_lazyload\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the enhancer plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


15) modules/contrib/oembed_lazyload/src/Access/OembedLazyloadIframeAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oembed_lazyload\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\oembed_lazyload\IframeUrlHelper;
@@ @@
   /**
    * The oembed lazyload iFrame URL helper service.
    *
-   * @var \Drupal\oembed_lazyload\IframeUrlHelper
+   * @var IframeUrlHelper
    */
   protected $oembedLazyloadIframeUrlHelper;

@@ @@
   /**
    * The request stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * OembedLazyloadIframeAccessCheck constructor.
    *
-   * @param \Drupal\oembed_lazyload\IframeUrlHelper $oembed_lazyload_iframe_url_helper
+   * @param IframeUrlHelper $oembed_lazyload_iframe_url_helper
    *   The oembed lazyload iFrame URL helper service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
    */
   public function __construct(IframeUrlHelper $oembed_lazyload_iframe_url_helper, RequestStack $request_stack) {
@@ @@
   /**
    * Ensures that the iframe url has not been tampered with.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/oembed_lazyload/oembed_lazyload.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\oembed_lazyload\ProviderEnhancerManager;
 /**
  * @file
  * Contains hooks for the oembed_lazyload module.
@@ @@

     $provider = $query->get('provider');
     if ($provider) {
-      /** @var \Drupal\oembed_lazyload\ProviderEnhancerManager $enhancer_manager */
+      /** @var ProviderEnhancerManager $enhancer_manager */
       $enhancer_manager = \Drupal::service('oembed_lazyload');
       $enhancer = $enhancer_manager->getEnhancerForProvider($provider);
       $options = $query->get('options', []);
@@ @@
  * Implements hook_ckeditor_css_alter().
  */
 function oembed_lazyload_ckeditor_css_alter(array &$css, EditorInterface $editor) {
-  $css[] = drupal_get_path('module', 'oembed_lazyload') . '/css/common.css';
+  $css[] = \Drupal::service('extension.list.module')->getPath('oembed_lazyload') . '/css/common.css';
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


17) modules/contrib/oembed_lazyload/modules/oembed_lazyload_youtube/tests/src/Kernel/YoutubeEnhancerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\oembed_lazyload_youtube\Kernel;

+use Drupal\oembed_lazyload\ProviderEnhancerInterface;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The subject under test.
    *
-   * @var \Drupal\oembed_lazyload\ProviderEnhancerInterface
+   * @var ProviderEnhancerInterface
    */
   protected $instance;

@@ @@
   protected function setUp() : void {
     parent::setUp();

-    $config = $this->getMockBuilder(Config::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock(Config::class);

     $config->method('get')->willReturn('https://example.com');
-    $config_factory = $this->getMockBuilder(ConfigFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_factory = $this->createMock(ConfigFactoryInterface::class);

     $config_factory->method('get')->willReturn($config);

@@ @@
    */
   public function testGetPlaceholder($url) {

-    $resource = $this->getMockBuilder(Resource::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $resource = $this->createMock(Resource::class);

-    $provider = $this->getMockBuilder(Provider::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $provider = $this->createMock(Provider::class);

     $provider->method('getName')
       ->willReturn('YouTube');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/oembed_lazyload/modules/oembed_lazyload_youtube/tests/src/Functional/FormatterThirdPartySettingsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\oembed_lazyload_youtube\Functional;

+use Drupal\media\MediaTypeInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Url;
 use Drupal\Tests\media\Functional\MediaFunctionalTestBase;
@@ @@
   /**
    * A media type entity.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   protected $mediaType;

@@ @@
     $source = $this->mediaType->getSource();
     $source_field = $source->getSourceFieldDefinition($this->mediaType);

-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
+    /** @var EntityViewDisplayInterface $view_display */
     $view_display = EntityViewDisplay::create([
       'targetEntityType' => 'media',
       'bundle' => $this->mediaType->id(),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/oembed_lazyload/modules/oembed_lazyload_youtube/src/Plugin/oembed_lazyload/ProviderEnhancer/YoutubeEnhancer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oembed_lazyload_youtube\Plugin\oembed_lazyload\ProviderEnhancer;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\media\OEmbed\Resource;
 use Drupal\oembed_lazyload\ProviderEnhancerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The request stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/oembed_lazyload/modules/oembed_lazyload_youtube/oembed_lazyload_youtube.module:141

    ---------- begin diff ----------
@@ @@
  * Implements hook_ckeditor_css_alter().
  */
 function oembed_lazyload_youtube_ckeditor_css_alter(array &$css, EditorInterface $editor) {
-  $css[] = drupal_get_path('module', 'oembed_lazyload_youtube') . '/css/youtube.css';
+  $css[] = \Drupal::service('extension.list.module')->getPath('oembed_lazyload_youtube') . '/css/youtube.css';
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 20 files have been changed by Rector                                      

