diff --git a/src/Access/ApplicableTransactionAccess.php b/src/Access/ApplicableTransactionAccess.php
index c07b170..5c26519 100644
--- a/src/Access/ApplicableTransactionAccess.php
+++ b/src/Access/ApplicableTransactionAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -21,32 +22,32 @@ class ApplicableTransactionAccess implements AccessInterface {
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * ApplicableTransactionAccess constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(RouteMatchInterface $route_match, RequestStack $request_stack, EntityTypeManagerInterface $entity_type_manager) {
@@ -58,17 +59,17 @@ class ApplicableTransactionAccess implements AccessInterface {
   /**
    * Check if the transaction type is applicable to the content entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
+   * @param ContentEntityInterface|null $entity
    *   (optional) The involved content entity, determined from request if NULL.
-   * @param \Drupal\transaction\TransactionTypeInterface|null $transaction_type
+   * @param TransactionTypeInterface|null $transaction_type
    *   (optional) The transaction type, determined from the request or the route
    *   options if NULL.
-   * @param \Symfony\Component\Routing\Route|null $route
+   * @param Route|null $route
    *   (optional) The route to check access for.
-   * @param \Symfony\Component\HttpFoundation\Request|null $request
+   * @param Request|null $request
    *   (optional) The current request.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Allowed if the transaction type is applicable to the content entity.
    */
   public function access(ContentEntityInterface $entity = NULL, TransactionTypeInterface $transaction_type = NULL, Route $route = NULL, Request $request = NULL) {
@@ -106,12 +107,12 @@ class ApplicableTransactionAccess implements AccessInterface {
   /**
    * Tries to determine the transaction type from request and route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check access for.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Drupal\transaction\TransactionTypeInterface|null
+   * @return TransactionTypeInterface|null
    *   The transaction type, NULL if cannot be determined.
    */
   protected function guessTransactionType(Route $route, Request $request) {
@@ -134,12 +135,12 @@ class ApplicableTransactionAccess implements AccessInterface {
   /**
    * Tries to determine the target entity type from request and route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check access for.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The target entity type, NULL if cannot be determined.
    */
   protected function guessTargetEntity(Route $route, Request $request) {
diff --git a/src/Annotation/Transactor.php b/src/Annotation/Transactor.php
index d7aa3f8..74bf24f 100644
--- a/src/Annotation/Transactor.php
+++ b/src/Annotation/Transactor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class Transactor extends Plugin {
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -33,7 +34,7 @@ class Transactor extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/TransactionController.php b/src/Controller/TransactionController.php
index 921f030..8dcfdc3 100644
--- a/src/Controller/TransactionController.php
+++ b/src/Controller/TransactionController.php
@@ -20,9 +20,9 @@ class TransactionController extends ControllerBase {
   /**
    * TransactionController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
@@ -43,13 +43,13 @@ class TransactionController extends ControllerBase {
   /**
    * Provides a title callback for transaction collection pages.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\transaction\TransactionTypeInterface $transaction_type
+   * @param TransactionTypeInterface $transaction_type
    *   (optional) The type of the transactions in the collection.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $target_entity
+   * @param ContentEntityInterface $target_entity
    *   (optional) The target entity of the transactions in collection.
    *
    * @return string
@@ -86,11 +86,11 @@ class TransactionController extends ControllerBase {
   /**
    * Provides a title callback for transaction creation form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\transaction\TransactionTypeInterface $transaction_type
+   * @param TransactionTypeInterface $transaction_type
    *   (optional) The type of the new transaction.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $target_entity
+   * @param ContentEntityInterface $target_entity
    *   (optional) The target entity for the new transaction.
    *
    * @return string
diff --git a/src/Entity/Transaction.php b/src/Entity/Transaction.php
index f2a3ac2..514b5ec 100644
--- a/src/Entity/Transaction.php
+++ b/src/Entity/Transaction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction\Entity;
 
+use Drupal\transaction\TransactorHandlerInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ -568,7 +569,7 @@ class Transaction extends ContentEntityBase implements TransactionInterface {
   /**
    * Gets the transactor handler.
    *
-   * @return \Drupal\transaction\TransactorHandlerInterface
+   * @return TransactorHandlerInterface
    *   The transactor entity handler.
    */
   protected function transactorHandler() {
diff --git a/src/Entity/TransactionType.php b/src/Entity/TransactionType.php
index 8f4befd..d095e3d 100644
--- a/src/Entity/TransactionType.php
+++ b/src/Entity/TransactionType.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\transaction\Entity;
 
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\transaction\TransactionTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
@@ -99,7 +101,7 @@ class TransactionType extends ConfigEntityBundleBase implements TransactionTypeI
   /**
    * A collection to store the transactor plugin.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $pluginCollection;
 
@@ -127,7 +129,7 @@ class TransactionType extends ConfigEntityBundleBase implements TransactionTypeI
     if (empty($bundles) && $applicable) {
       // If the setting is empty, return all bundle names for the target entity
       // type.
-      /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info_service */
+      /** @var EntityTypeBundleInfoInterface $bundle_info_service */
       $bundle_info_service = \Drupal::service('entity_type.bundle.info');
       $bundle_info = $bundle_info_service->getBundleInfo($this->target_entity_type);
       $bundles = array_keys($bundle_info);
@@ -139,7 +141,7 @@ class TransactionType extends ConfigEntityBundleBase implements TransactionTypeI
   /**
    * Single plugin collection that encapsulates the transactor plugin.
    *
-   * @return \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @return DefaultSingleLazyPluginCollection
    *   The transactor plugin collection.
    */
   protected function getPluginCollection() {
@@ -269,7 +271,7 @@ class TransactionType extends ConfigEntityBundleBase implements TransactionTypeI
       return;
     }
 
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $list_display_mode */
+    /** @var EntityViewDisplayInterface $list_display_mode */
     $list_display_mode = $entity_view_display_storage->create([
       'id' => $entity_display_id,
       'targetEntityType' => 'transaction',
diff --git a/src/Event/TransactionExecutionEvent.php b/src/Event/TransactionExecutionEvent.php
index 7bd0d05..7355179 100644
--- a/src/Event/TransactionExecutionEvent.php
+++ b/src/Event/TransactionExecutionEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\transaction\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\transaction\TransactionInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event that is fired when a transaction is executed.
@@ -17,7 +17,7 @@ class TransactionExecutionEvent extends Event {
   /**
    * The involved transaction.
    *
-   * @var \Drupal\transaction\TransactionInterface
+   * @var TransactionInterface
    *
    * @todo set this property as protected once rules support getters
    * @see https://www.drupal.org/project/rules/issues/2762517
@@ -27,7 +27,7 @@ class TransactionExecutionEvent extends Event {
   /**
    * Constructs the transaction execution event.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The executed transaction.
    */
   public function __construct(TransactionInterface $transaction) {
@@ -37,7 +37,7 @@ class TransactionExecutionEvent extends Event {
   /**
    * Gets the executed transaction.
    *
-   * @return \Drupal\transaction\TransactionInterface
+   * @return TransactionInterface
    *   The executed transaction.
    */
   public function getTransaction() {
diff --git a/src/Form/TransactionDeleteForm.php b/src/Form/TransactionDeleteForm.php
index 2661635..392a50e 100644
--- a/src/Form/TransactionDeleteForm.php
+++ b/src/Form/TransactionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction\Form;
 
+use Drupal\transaction\TransactionInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 
 /**
@@ -25,7 +26,7 @@ class TransactionDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   public function getCancelUrl() {
-    /** @var \Drupal\transaction\TransactionInterface $entity */
+    /** @var TransactionInterface $entity */
     $entity = $this->getEntity();
     return $entity->getTargetEntityId()
       ? $entity->toUrl('collection', ['target_entity' => $entity->getTargetEntityId()])
diff --git a/src/Form/TransactionExecuteForm.php b/src/Form/TransactionExecuteForm.php
index 165a429..3a89012 100644
--- a/src/Form/TransactionExecuteForm.php
+++ b/src/Form/TransactionExecuteForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\transaction\Form;
 
+use Drupal\transaction\TransactionInterface;
+use Drupal\transaction\TransactionTypeInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -21,9 +23,9 @@ class TransactionExecuteForm extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function getDescription() {
-    /** @var \Drupal\transaction\TransactionInterface $transaction */
+    /** @var TransactionInterface $transaction */
     $transaction = $this->getEntity();
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     $transaction_type = $transaction->get('type')->entity;
 
     return $transaction_type->getPlugin()->getExecutionIndications($transaction) ?: parent::getDescription();
@@ -33,7 +35,7 @@ class TransactionExecuteForm extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function getCancelUrl() {
-    /** @var \Drupal\transaction\TransactionInterface $entity */
+    /** @var TransactionInterface $entity */
     $entity = $this->getEntity();
     return $entity->getTargetEntityId()
       ? $entity->toUrl('collection', ['target_entity' => $entity->getTargetEntityId()])
@@ -45,7 +47,7 @@ class TransactionExecuteForm extends ContentEntityConfirmFormBase {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
-    /** @var \Drupal\transaction\TransactionInterface $transaction */
+    /** @var TransactionInterface $transaction */
     $transaction = $this->getEntity();
 
     // ContentEntityForm::buildEntity sets the entity validation required, but
diff --git a/src/Form/TransactionForm.php b/src/Form/TransactionForm.php
index 4763fca..78ab540 100644
--- a/src/Form/TransactionForm.php
+++ b/src/Form/TransactionForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction\Form;
 
+use Drupal\transaction\TransactionInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -17,7 +18,7 @@ class TransactionForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, ContentEntityInterface $target_entity = NULL) {
-    /** @var \Drupal\transaction\TransactionInterface $transaction */
+    /** @var TransactionInterface $transaction */
     $transaction = $this->entity;
 
     // Set the target entity in the transaction.
@@ -60,7 +61,7 @@ class TransactionForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   protected function prepareEntity() {
-    /** @var \Drupal\transaction\TransactionInterface $transaction */
+    /** @var TransactionInterface $transaction */
     $transaction = $this->entity;
 
     // This entity form serves specific target entity routes as well, where the
@@ -80,7 +81,7 @@ class TransactionForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\transaction\TransactionInterface $transaction */
+    /** @var TransactionInterface $transaction */
     $transaction = $this->entity;
 
     // Execute if the user indicated to do so.
diff --git a/src/Form/TransactionOperationForm.php b/src/Form/TransactionOperationForm.php
index 081c108..de8f5fd 100644
--- a/src/Form/TransactionOperationForm.php
+++ b/src/Form/TransactionOperationForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction\Form;
 
+use Drupal\transaction\TransactionOperationInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\transaction\TransactorHandler;
@@ -17,7 +18,7 @@ class TransactionOperationForm extends EntityForm {
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
 
-    /** @var \Drupal\transaction\TransactionOperationInterface $transaction_operation */
+    /** @var TransactionOperationInterface $transaction_operation */
     $transaction_operation = $this->entity;
 
     $form['label'] = [
@@ -112,7 +113,7 @@ class TransactionOperationForm extends EntityForm {
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\transaction\TransactionOperationInterface $entity */
+    /** @var TransactionOperationInterface $entity */
     $entity = parent::buildEntity($form, $form_state);
 
     // On new operations, set the transaction type in form values from request.
@@ -134,7 +135,7 @@ class TransactionOperationForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\transaction\TransactionOperationInterface $transaction_operation */
+    /** @var TransactionOperationInterface $transaction_operation */
     $transaction_operation = $this->entity;
 
     $status = $transaction_operation->save();
@@ -158,7 +159,7 @@ class TransactionOperationForm extends EntityForm {
    * {@inheritdoc}
    */
   public function delete(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\transaction\TransactionOperationInterface $transaction_operation */
+    /** @var TransactionOperationInterface $transaction_operation */
     $transaction_operation = $this->entity;
 
     $form_state->setRedirect('entity.transaction_operation.collection', ['transaction_type' => $transaction_operation->getTransactionTypeId()]);
diff --git a/src/Form/TransactionTypeCreationForm.php b/src/Form/TransactionTypeCreationForm.php
index 4f09b2c..40d4486 100644
--- a/src/Form/TransactionTypeCreationForm.php
+++ b/src/Form/TransactionTypeCreationForm.php
@@ -23,23 +23,23 @@ class TransactionTypeCreationForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The transactor plugin manager.
    *
-   * @var \Drupal\transaction\TransactorPluginManager
+   * @var TransactorPluginManager
    */
   protected $transactorManager;
 
   /**
    * Constructs a new transaction type creation form.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\transaction\TransactorPluginManager $transactor_manager
+   * @param TransactorPluginManager $transactor_manager
    *   The transactor plugin manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TransactorPluginManager $transactor_manager) {
diff --git a/src/Form/TransactionTypeEditForm.php b/src/Form/TransactionTypeEditForm.php
index 4c4cbd1..47a384c 100644
--- a/src/Form/TransactionTypeEditForm.php
+++ b/src/Form/TransactionTypeEditForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction\Form;
 
+use Drupal\transaction\TransactionTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -17,7 +18,7 @@ class TransactionTypeEditForm extends TransactionTypeFormBase {
   public function buildForm(array $form, FormStateInterface $form_state, $entity_type = NULL) {
     $form = parent::buildForm($form, $form_state);
 
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     $transaction_type = $this->entity;
 
     return $form;
diff --git a/src/Form/TransactionTypeFormBase.php b/src/Form/TransactionTypeFormBase.php
index fb2f799..d27c3e3 100644
--- a/src/Form/TransactionTypeFormBase.php
+++ b/src/Form/TransactionTypeFormBase.php
@@ -20,25 +20,25 @@ abstract class TransactionTypeFormBase extends BundleEntityFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * Constructs the TransactionTypeFormBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The entity type bundle info.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation, EntityTypeBundleInfoInterface $bundle_info) {
@@ -64,7 +64,7 @@ abstract class TransactionTypeFormBase extends BundleEntityFormBase {
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
 
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     $transaction_type = $this->entity;
 
     $form['label'] = [
@@ -172,7 +172,7 @@ abstract class TransactionTypeFormBase extends BundleEntityFormBase {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     $transaction_type = $this->entity;
 
     $id = trim($form_state->getValue('id'));
@@ -188,7 +188,7 @@ abstract class TransactionTypeFormBase extends BundleEntityFormBase {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     $transaction_type = $this->entity;
     // Process options.
     $this->saveOptions($form, $form_state);
@@ -224,11 +224,11 @@ abstract class TransactionTypeFormBase extends BundleEntityFormBase {
    *
    * @param array $form
    *   The form definition.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function saveOptions(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     $transaction_type = $this->entity;
     $new_options = [];
     foreach (isset($form['options']) ? array_keys($form['options']) : [] as $option_key) {
diff --git a/src/Plugin/Derivative/TransactionLocalAction.php b/src/Plugin/Derivative/TransactionLocalAction.php
index 47918c5..2d00a06 100644
--- a/src/Plugin/Derivative/TransactionLocalAction.php
+++ b/src/Plugin/Derivative/TransactionLocalAction.php
@@ -22,25 +22,25 @@ class TransactionLocalAction extends DeriverBase implements ContainerDeriverInte
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Creates an TransactionLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, TranslationInterface $string_translation) {
diff --git a/src/Plugin/Derivative/TransactionLocalTask.php b/src/Plugin/Derivative/TransactionLocalTask.php
index e1e3692..2b9e3f0 100644
--- a/src/Plugin/Derivative/TransactionLocalTask.php
+++ b/src/Plugin/Derivative/TransactionLocalTask.php
@@ -22,25 +22,25 @@ class TransactionLocalTask extends DeriverBase implements ContainerDeriverInterf
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Creates an TransactionLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, TranslationInterface $string_translation) {
diff --git a/src/Plugin/Field/TransactionDescriptionItemList.php b/src/Plugin/Field/TransactionDescriptionItemList.php
index 368545a..22fea04 100644
--- a/src/Plugin/Field/TransactionDescriptionItemList.php
+++ b/src/Plugin/Field/TransactionDescriptionItemList.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction\Plugin\Field;
 
+use Drupal\transaction\TransactionInterface;
 use Drupal\Core\Field\FieldItemList;
 
 /**
@@ -45,7 +46,7 @@ class TransactionDescriptionItemList extends FieldItemList {
    */
   protected function ensurePopulated() {
     if (!isset($this->list[0])) {
-      /** @var \Drupal\transaction\TransactionInterface $entity */
+      /** @var TransactionInterface $entity */
       $entity = $this->getEntity();
       $this->list[0] = $this->createItem(0, $entity->isNew() ? '' : $entity->getDescription(TRUE));
     }
diff --git a/src/Plugin/Field/TransactionResultMessageItemList.php b/src/Plugin/Field/TransactionResultMessageItemList.php
index 925b4ab..886ad89 100644
--- a/src/Plugin/Field/TransactionResultMessageItemList.php
+++ b/src/Plugin/Field/TransactionResultMessageItemList.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction\Plugin\Field;
 
+use Drupal\transaction\TransactionInterface;
 use Drupal\Core\Field\FieldItemList;
 
 /**
@@ -45,7 +46,7 @@ class TransactionResultMessageItemList extends FieldItemList {
    */
   protected function ensurePopulated() {
     if (!isset($this->list[0])) {
-      /** @var \Drupal\transaction\TransactionInterface $entity */
+      /** @var TransactionInterface $entity */
       $entity = $this->getEntity();
       if (!$entity->isPending()) {
         $this->list[0] = $this->createItem(0, $entity->getResultMessage(TRUE));
diff --git a/src/Plugin/RulesAction/TransactionCreateDeriver.php b/src/Plugin/RulesAction/TransactionCreateDeriver.php
index fbf363e..e1ea78b 100644
--- a/src/Plugin/RulesAction/TransactionCreateDeriver.php
+++ b/src/Plugin/RulesAction/TransactionCreateDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction\Plugin\RulesAction;
 
+use Drupal\transaction\TransactorPluginManager;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -25,25 +26,25 @@ class TransactionCreateDeriver extends DeriverBase implements ContainerDeriverIn
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The transactor plugin manager.
    *
-   * @var \Drupal\transaction\TransactorPluginManager
+   * @var TransactorPluginManager
    */
   protected $transactorManager;
 
   /**
    * Creates a new TransactionCreateDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\transaction\TransactorPluginManagerInterface $transactor_manager
+   * @param TransactorPluginManagerInterface $transactor_manager
    *   The transactor plugin manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TransactorPluginManagerInterface $transactor_manager, TranslationInterface $string_translation) {
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index b31a654..cb522bb 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction\Routing;
 
+use Drupal\transaction\TransactionTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Drupal\Core\Routing\RoutingEvents;
@@ -16,14 +17,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -37,7 +38,7 @@ class RouteSubscriber extends RouteSubscriberBase {
     // Add transaction collection route for transaction types with a link
     // template for it.
     foreach ($this->entityTypeManager->getStorage('transaction_type')->loadMultiple() as $transaction_type_id => $transaction_type) {
-      /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+      /** @var TransactionTypeInterface $transaction_type */
       if ($route_path = $this->entityTypeManager->getDefinition($target_entity_type_id = $transaction_type->getTargetEntityTypeId())->getLinkTemplate("transaction-$transaction_type_id")) {
         $route = new Route($route_path);
         $route
diff --git a/src/TransactionAccessControlHandler.php b/src/TransactionAccessControlHandler.php
index c5b45a3..0726271 100644
--- a/src/TransactionAccessControlHandler.php
+++ b/src/TransactionAccessControlHandler.php
@@ -18,7 +18,7 @@ class TransactionAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\transaction\TransactionInterface $entity */
+    /** @var TransactionInterface $entity */
     $result = parent::checkAccess($entity, $operation, $account);
     if ($result->isForbidden()) {
       return $result;
diff --git a/src/TransactionInterface.php b/src/TransactionInterface.php
index e00eb07..351ab71 100644
--- a/src/TransactionInterface.php
+++ b/src/TransactionInterface.php
@@ -57,7 +57,7 @@ interface TransactionInterface extends ContentEntityInterface, EntityOwnerInterf
   /**
    * Returns the transaction type.
    *
-   * @return \Drupal\transaction\TransactionTypeInterface
+   * @return TransactionTypeInterface
    *   The transaction type.
    */
   public function getType();
@@ -87,7 +87,7 @@ interface TransactionInterface extends ContentEntityInterface, EntityOwnerInterf
    * @return \Drupal\transaction\TransactionInterface
    *   The previously executed transaction. NULL if this is the first one.
    *
-   * @throws \Drupal\transaction\InvalidTransactionStateException
+   * @throws InvalidTransactionStateException
    *   If the transaction was not executed yet.
    */
   public function getPrevious();
@@ -98,7 +98,7 @@ interface TransactionInterface extends ContentEntityInterface, EntityOwnerInterf
    * @return \Drupal\transaction\TransactionInterface
    *   The previously executed transaction. NULL if this is the last executed.
    *
-   * @throws \Drupal\transaction\InvalidTransactionStateException
+   * @throws InvalidTransactionStateException
    *   If the transaction was not executed yet.
    */
   public function getNext();
@@ -106,7 +106,7 @@ interface TransactionInterface extends ContentEntityInterface, EntityOwnerInterf
   /**
    * Get the transaction target entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The transaction's target entity.
    */
   public function getTargetEntity();
@@ -122,7 +122,7 @@ interface TransactionInterface extends ContentEntityInterface, EntityOwnerInterf
   /**
    * Sets the transaction's target entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The target content entity.
    *
    * @return \Drupal\transaction\TransactionInterface
@@ -136,7 +136,7 @@ interface TransactionInterface extends ContentEntityInterface, EntityOwnerInterf
   /**
    * Gets the transaction operation.
    *
-   * @return \Drupal\transaction\TransactionOperationInterface
+   * @return TransactionOperationInterface
    *   The transaction operation for this transaction. NULL if not set.
    */
   public function getOperation();
@@ -152,7 +152,7 @@ interface TransactionInterface extends ContentEntityInterface, EntityOwnerInterf
   /**
    * Sets the transaction operation.
    *
-   * @param string|\Drupal\transaction\TransactionOperationInterface $operation
+   * @param string|TransactionOperationInterface $operation
    *   (optional) The transaction operation config entity or its ID. Defaults
    *     to NULL that clears the current value.
    *
@@ -233,7 +233,7 @@ interface TransactionInterface extends ContentEntityInterface, EntityOwnerInterf
    * @return bool
    *   TRUE if transaction was executed, FALSE otherwise.
    *
-   * @throws \Drupal\transaction\InvalidTransactionStateException
+   * @throws InvalidTransactionStateException
    *   If the transaction is already executed.
    *
    * @see \Drupal\transaction\TransactionInterface::getResultCode()
diff --git a/src/TransactionListBuilder.php b/src/TransactionListBuilder.php
index a51e138..1f4f087 100644
--- a/src/TransactionListBuilder.php
+++ b/src/TransactionListBuilder.php
@@ -21,21 +21,21 @@ class TransactionListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The type of the transactions in the collection.
    *
-   * @var \Drupal\transaction\TransactionTypeInterface
+   * @var TransactionTypeInterface
    */
   protected $transactionType;
 
   /**
    * The target entity of the transactions in collection.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $targetEntity;
 
@@ -50,17 +50,17 @@ class TransactionListBuilder extends EntityListBuilder {
   /**
    * Constructs a new TransactionListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\transaction\TransactorPluginManagerInterface $transactor_manager
+   * @param TransactorPluginManagerInterface $transactor_manager
    *   The transactor plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Symfony\Component\HttpFoundation\Request $current_request
+   * @param Request $current_request
    *   The currently active request object.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $current_route_match
+   * @param RouteMatchInterface $current_route_match
    *   The current route match.
    */
   public function __construct(EntityTypeInterface $entity_type, TransactorPluginManagerInterface $transactor_manager, EntityTypeManagerInterface $entity_type_manager, DateFormatterInterface $date_formatter, Request $current_request, RouteMatchInterface $current_route_match) {
@@ -164,7 +164,7 @@ class TransactionListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\transaction\TransactionInterface $entity */
+    /** @var TransactionInterface $entity */
     $row = [];
 
     $row['description'] = [
diff --git a/src/TransactionOperationListBuilder.php b/src/TransactionOperationListBuilder.php
index b5a847a..068c79a 100644
--- a/src/TransactionOperationListBuilder.php
+++ b/src/TransactionOperationListBuilder.php
@@ -25,9 +25,9 @@ class TransactionOperationListBuilder extends ConfigEntityListBuilder {
   /**
    * Constructs a new TransactionTypeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    * @param string $transaction_type_id
    *   The transaction type ID that operations belongs to.
@@ -93,7 +93,7 @@ class TransactionOperationListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\transaction\TransactionOperationInterface $entity */
+    /** @var TransactionOperationInterface $entity */
     $row = [];
 
     $row['id'] = [
diff --git a/src/TransactionPermissions.php b/src/TransactionPermissions.php
index 9e05186..e0c5cc2 100644
--- a/src/TransactionPermissions.php
+++ b/src/TransactionPermissions.php
@@ -17,14 +17,14 @@ class TransactionPermissions implements ContainerInjectionInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * MediaPermissions constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -62,7 +62,7 @@ class TransactionPermissions implements ContainerInjectionInterface {
   /**
    * Returns a list of transaction permissions for a given transaction type.
    *
-   * @param \Drupal\transaction\TransactionTypeInterface $type
+   * @param TransactionTypeInterface $type
    *   The transaction type.
    *
    * @return array
diff --git a/src/TransactionService.php b/src/TransactionService.php
index d5ab3dc..f9f9067 100644
--- a/src/TransactionService.php
+++ b/src/TransactionService.php
@@ -12,14 +12,14 @@ class TransactionService implements TransactionServiceInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/TransactionServiceInterface.php b/src/TransactionServiceInterface.php
index c3ebfbc..15b196a 100644
--- a/src/TransactionServiceInterface.php
+++ b/src/TransactionServiceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * Transaction service interface.
  */
@@ -10,12 +11,12 @@ interface TransactionServiceInterface {
   /**
    * Gets the last executed transaction for a given type and target entity.
    *
-   * @param string|\Drupal\Core\Entity\ContentEntityInterface $target_entity
+   * @param string|ContentEntityInterface $target_entity
    *   The target entity object or ID.
-   * @param string|\Drupal\transaction\TransactionTypeInterface $transaction_type
+   * @param string|TransactionTypeInterface $transaction_type
    *   The transaction type object or ID.
    *
-   * @return null|\Drupal\transaction\TransactionInterface
+   * @return null|TransactionInterface
    *   The last executed transaction, NULL if not found.
    *
    * @throws \InvalidArgumentException
diff --git a/src/TransactionTypeInterface.php b/src/TransactionTypeInterface.php
index 956fdb3..4e10f17 100644
--- a/src/TransactionTypeInterface.php
+++ b/src/TransactionTypeInterface.php
@@ -107,7 +107,7 @@ interface TransactionTypeInterface extends ConfigEntityInterface {
   /**
    * Gets the transactor plugin for this transaction type.
    *
-   * @return \Drupal\transaction\TransactorPluginInterface
+   * @return TransactorPluginInterface
    *   The transactor plugin.
    */
   public function getPlugin();
@@ -160,7 +160,7 @@ interface TransactionTypeInterface extends ConfigEntityInterface {
   /**
    * Check if the type of transaction is applicable to a particular entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity to check.
    *
    * @return bool
diff --git a/src/TransactionTypeListBuilder.php b/src/TransactionTypeListBuilder.php
index 8e9a4eb..c5e7738 100644
--- a/src/TransactionTypeListBuilder.php
+++ b/src/TransactionTypeListBuilder.php
@@ -18,27 +18,27 @@ class TransactionTypeListBuilder extends ConfigEntityListBuilder {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The transactor plugin manager.
    *
-   * @var \Drupal\transaction\TransactorPluginManager
+   * @var TransactorPluginManager
    */
   protected $transactorManager;
 
   /**
    * Constructs a new TransactionTypeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\transaction\TransactorPluginManager $transactor_manager
+   * @param TransactorPluginManager $transactor_manager
    *   The transactor plugin manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, EntityTypeManagerInterface $entity_type_manager, TransactorPluginManager $transactor_manager) {
@@ -74,7 +74,7 @@ class TransactionTypeListBuilder extends ConfigEntityListBuilder {
   /**
    * Gets the transactor plugin label for the given transaction type.
    *
-   * @param \Drupal\transaction\TransactionTypeInterface $transaction_type
+   * @param TransactionTypeInterface $transaction_type
    *   The transaction type.
    *
    * @return array
@@ -94,7 +94,7 @@ class TransactionTypeListBuilder extends ConfigEntityListBuilder {
   /**
    * Gets the target entity type label for the given transaction type.
    *
-   * @param \Drupal\transaction\TransactionTypeInterface $transaction_type
+   * @param TransactionTypeInterface $transaction_type
    *   The transaction type.
    *
    * @return array
@@ -114,7 +114,7 @@ class TransactionTypeListBuilder extends ConfigEntityListBuilder {
   /**
    * Generates a render array of the applicable bundles.
    *
-   * @param \Drupal\transaction\TransactionTypeInterface $transaction_type
+   * @param TransactionTypeInterface $transaction_type
    *   The transaction type.
    *
    * @return array
@@ -151,7 +151,7 @@ class TransactionTypeListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\transaction\TransactionTypeInterface $entity */
+    /** @var TransactionTypeInterface $entity */
     $row = [];
 
     $row['label'] = [
diff --git a/src/TransactionTypeStorage.php b/src/TransactionTypeStorage.php
index 41dd568..f3c046f 100644
--- a/src/TransactionTypeStorage.php
+++ b/src/TransactionTypeStorage.php
@@ -24,60 +24,60 @@ class TransactionTypeStorage extends ConfigEntityStorage {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;
 
   /**
    * The route builder.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;
 
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The cache discovery.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheDiscovery;
 
   /**
    * Constructs the TransactionTypeFormBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memory_cache
+   * @param MemoryCacheInterface|null $memory_cache
    *   The memory cache backend.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route builder.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_discovery
+   * @param CacheBackendInterface $cache_discovery
    *   The cache discovery.
    */
   public function __construct(EntityTypeInterface $entity_type, ConfigFactoryInterface $config_factory, UuidInterface $uuid_service, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache = NULL, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $field_manager, RouteBuilderInterface $route_builder, CacheTagsInvalidatorInterface $cache_tags_invalidator, CacheBackendInterface $cache_discovery) {
@@ -138,7 +138,7 @@ class TransactionTypeStorage extends ConfigEntityStorage {
   /**
    * Update the settings local task.
    *
-   * @param \Drupal\transaction\TransactionTypeInterface $transaction_type
+   * @param TransactionTypeInterface $transaction_type
    *   The transaction type.
    * @param bool $has_tab
    *   Indicates if the transaction type has a local task in the target entity.
diff --git a/src/TransactorBase.php b/src/TransactorBase.php
index 597e679..dbecf22 100644
--- a/src/TransactorBase.php
+++ b/src/TransactorBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction;
 
+use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -29,28 +30,28 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
   /**
    * The transaction entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $transactionStorage;
 
   /**
    * The transaction service.
    *
-   * @var \Drupal\transaction\TransactionServiceInterface
+   * @var TransactionServiceInterface
    */
   protected $transactionService;
 
   /**
    * The field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -129,7 +130,7 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
    *
    * @param array $form
    *   The transaction type form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -153,7 +154,7 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
    *
    * @param array $form
    *   The transaction type form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -170,7 +171,7 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
         '#weight' => 10,
       ];
 
-      /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+      /** @var TransactionTypeInterface $transaction_type */
       $transaction_type = $form_state->getFormObject()->getEntity();
       $transactor_settings = $transaction_type->getPluginSettings();
 
@@ -205,7 +206,7 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
    *
    * @param array $form
    *   The transaction type form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -222,7 +223,7 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
         '#weight' => 20,
       ];
 
-      /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+      /** @var TransactionTypeInterface $transaction_type */
       $transaction_type = $form_state->getFormObject()->getEntity();
       $transactor_settings = $transaction_type->getPluginSettings();
 
@@ -257,7 +258,7 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
    *
    * @param array $form
    *   The transaction type form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -432,7 +433,7 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
    *   Field name to check.
    * @param array $form_element
    *   Form element array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ -461,11 +462,11 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     if (!$transaction_type = $form_state->getFormObject()->getEntity()) {
       return;
     }
@@ -550,7 +551,7 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
    * @param array $field_info
    *   The field info array as defined in the transactor plugin.
    *
-   * @return \Drupal\field\Entity\FieldStorageConfig
+   * @return FieldStorageConfig
    *   The new (saved) field storage object.
    */
   protected function createFieldStorage($field_name, array $field_info) {
@@ -579,7 +580,7 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
    * @param string $transaction_type_id
    *   The transaction type ID.
    *
-   * @return \Drupal\field\Entity\FieldConfig
+   * @return FieldConfig
    *   The created field config object.
    */
   protected function createFieldConfig($field_name, array $field_info, $bundle, $label, $transaction_type_id) {
@@ -627,7 +628,7 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
    * @param array $options
    *   (optional) Display options.
    *
-   * @return null|\Drupal\Core\Entity\Display\EntityDisplayInterface
+   * @return null|EntityDisplayInterface
    *   The display config object. NULL on unrecognized display type or mode.
    */
   protected function setFieldDisplay($field_name, array $field_info, $bundle, $type = 'view', $mode = 'default', array $options = []) {
@@ -674,7 +675,7 @@ abstract class TransactorBase extends PluginBase implements TransactorPluginInte
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/TransactorHandler.php b/src/TransactorHandler.php
index d81f0f5..d421f22 100644
--- a/src/TransactorHandler.php
+++ b/src/TransactorHandler.php
@@ -24,68 +24,68 @@ class TransactorHandler implements TransactorHandlerInterface {
   /**
    * The transaction service.
    *
-   * @var \Drupal\transaction\TransactionServiceInterface
+   * @var TransactionServiceInterface
    */
   protected $transactionService;
 
   /**
    * The transaction entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $transactionStorage;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $timeService;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The lock service.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * Creates a new TransactorHandler object.
    *
-   * @param \Drupal\transaction\TransactionServiceInterface $transaction_service
+   * @param TransactionServiceInterface $transaction_service
    *   The transaction service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $transaction_storage
+   * @param EntityStorageInterface $transaction_storage
    *   The transaction entity type storage.
-   * @param \Drupal\Component\Datetime\Time $time_service
+   * @param Time $time_service
    *   The time service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock service.
    */
   public function __construct(TransactionServiceInterface $transaction_service, EntityStorageInterface $transaction_storage, Time $time_service, AccountInterface $current_user, Token $token, EventDispatcherInterface $event_dispatcher, LockBackendInterface $lock) {
@@ -152,7 +152,7 @@ class TransactorHandler implements TransactorHandlerInterface {
       $transaction->setExecutor($executor ?: User::getAnonymousUser());
 
       // Launch the transaction execution event.
-      $this->eventDispatcher->dispatch(TransactionExecutionEvent::EVENT_NAME, new TransactionExecutionEvent($transaction));
+      $this->eventDispatcher->dispatch(new TransactionExecutionEvent($transaction), TransactionExecutionEvent::EVENT_NAME);
 
       // Save the transaction.
       if ($save) {
@@ -179,7 +179,7 @@ class TransactorHandler implements TransactorHandlerInterface {
   /**
    * Locks a transaction for execution.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The transaction to lock.
    *
    * @return string|false
diff --git a/src/TransactorHandlerInterface.php b/src/TransactorHandlerInterface.php
index 8b03cdc..fc97cad 100644
--- a/src/TransactorHandlerInterface.php
+++ b/src/TransactorHandlerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\transaction;
 
+use Drupal\transaction\Exception\ExecutionTimeoutException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityHandlerInterface;
 use Drupal\user\UserInterface;
 
@@ -15,7 +17,7 @@ interface TransactorHandlerInterface extends EntityHandlerInterface {
   /**
    * Executes a transaction.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The transaction to execute.
    * @param bool $save
    *   Save the transaction after succeeded execution.
@@ -26,9 +28,9 @@ interface TransactorHandlerInterface extends EntityHandlerInterface {
    * @return bool
    *   TRUE if transaction was executed, FALSE otherwise.
    *
-   * @throws \Drupal\transaction\InvalidTransactionStateException
+   * @throws InvalidTransactionStateException
    *   If the transaction is already executed.
-   * @throws \Drupal\transaction\Exception\ExecutionTimeoutException
+   * @throws ExecutionTimeoutException
    *   If the transaction execution time exceeds the allowed threshold.
    */
   public function doExecute(TransactionInterface $transaction, $save = TRUE, UserInterface $executor = NULL);
@@ -36,13 +38,13 @@ interface TransactorHandlerInterface extends EntityHandlerInterface {
   /**
    * Compose a message that describes the execution result of a transaction.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The executed transaction for which to compose the result message.
    * @param string $langcode
    *   (optional) The language to use in message composition. Defaults to the
    *   current content language.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translatable markup with the execution result message, FALSE if
    *   transaction execution was never called.
    */
@@ -51,13 +53,13 @@ interface TransactorHandlerInterface extends EntityHandlerInterface {
   /**
    * Compose a human readable description for the given transaction.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The transaction to describe.
    * @param string $langcode
    *   (optional) For which language the transaction description should be
    *   composed, defaults to the current content language.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translatable markup with the composed description.
    */
   public function composeDescription(TransactionInterface $transaction, $langcode = NULL);
@@ -65,13 +67,13 @@ interface TransactorHandlerInterface extends EntityHandlerInterface {
   /**
    * Compose human readable details for the given transaction.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The transaction to detail.
    * @param string $langcode
    *   (optional) For which language the transaction details should be
    *   composed, defaults to the current content language.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   An array of translatable markup objects representing each one a line
    *   detailing the transaction. Empty array if no details were composed.
    */
@@ -80,13 +82,13 @@ interface TransactorHandlerInterface extends EntityHandlerInterface {
   /**
    * Get the previous same-type transaction in order of execution.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The transaction from which to get the previous.
    *
-   * @return \Drupal\transaction\TransactionInterface
+   * @return TransactionInterface
    *   The previously executed transaction. NULL if this is the first one.
    *
-   * @throws \Drupal\transaction\InvalidTransactionStateException
+   * @throws InvalidTransactionStateException
    *   If the transaction is no executed.
    */
   public function getPreviousTransaction(TransactionInterface $transaction);
@@ -94,13 +96,13 @@ interface TransactorHandlerInterface extends EntityHandlerInterface {
   /**
    * Get the next same-type transaction in order of execution.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The transaction from which to get the next.
    *
-   * @return \Drupal\transaction\TransactionInterface
+   * @return TransactionInterface
    *   The previously executed transaction. NULL if this is the last executed.
    *
-   * @throws \Drupal\transaction\InvalidTransactionStateException
+   * @throws InvalidTransactionStateException
    *   If the transaction is no executed.
    */
   public function getNextTransaction(TransactionInterface $transaction);
diff --git a/src/TransactorPluginInterface.php b/src/TransactorPluginInterface.php
index b07bed8..630b2e6 100644
--- a/src/TransactorPluginInterface.php
+++ b/src/TransactorPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\transaction;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -29,9 +30,9 @@ interface TransactorPluginInterface extends PluginFormInterface, ConfigurableInt
    * By calling this method, the transactor will set the result code in the
    * transaction.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The transaction to execute.
-   * @param \Drupal\transaction\TransactionInterface $last_executed
+   * @param TransactionInterface $last_executed
    *   The last executed transaction with the same type and target. Empty if
    *   this is the first one.
    *
@@ -45,13 +46,13 @@ interface TransactorPluginInterface extends PluginFormInterface, ConfigurableInt
   /**
    * Compose a message that describes the execution result of a transaction.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The executed transaction for which to compose the result message.
    * @param string $langcode
    *   (optional) The language to use in message composition. Defaults to the
    *   current content language.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translatable markup with the execution result message, FALSE if
    *   transaction execution was never called.
    */
@@ -60,13 +61,13 @@ interface TransactorPluginInterface extends PluginFormInterface, ConfigurableInt
   /**
    * Compose a human readable description for the given transaction.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The transaction to describe.
    * @param string $langcode
    *   (optional) For which language the transaction description should be
    *   composed, defaults to the current content language.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   A string or translatable markup with the generated description.
    */
   public function getTransactionDescription(TransactionInterface $transaction, $langcode = NULL);
@@ -74,7 +75,7 @@ interface TransactorPluginInterface extends PluginFormInterface, ConfigurableInt
   /**
    * Compose human readable details for the given transaction.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The transaction to detail.
    * @param string $langcode
    *   (optional) For which language the transaction details should be
@@ -92,13 +93,13 @@ interface TransactorPluginInterface extends PluginFormInterface, ConfigurableInt
    *
    * This message is commonly shown to the users upon transaction execution.
    *
-   * @param \Drupal\transaction\TransactionInterface $transaction
+   * @param TransactionInterface $transaction
    *   The pending transaction to compose indications about.
    * @param string $langcode
    *   (optional) For which language the execution indications should be
    *   composed, defaults to the current content language.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   A string or translatable markup with the generated message.
    */
   public function getExecutionIndications(TransactionInterface $transaction, $langcode = NULL);
@@ -106,9 +107,9 @@ interface TransactorPluginInterface extends PluginFormInterface, ConfigurableInt
   /**
    * Check if the transactor is applicable to a particular entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity to check.
-   * @param \Drupal\transaction\TransactionTypeInterface $transaction_type
+   * @param TransactionTypeInterface $transaction_type
    *   (optional) Restrict the checking to a particular transaction type.
    *
    * @return bool
diff --git a/src/TransactorPluginManager.php b/src/TransactorPluginManager.php
index a747058..9231f4b 100644
--- a/src/TransactorPluginManager.php
+++ b/src/TransactorPluginManager.php
@@ -18,9 +18,9 @@ class TransactorPluginManager extends DefaultPluginManager implements Transactor
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/tests/src/Functional/FunctionalTransactionTestBase.php b/tests/src/Functional/FunctionalTransactionTestBase.php
index a2bf593..b1b07db 100644
--- a/tests/src/Functional/FunctionalTransactionTestBase.php
+++ b/tests/src/Functional/FunctionalTransactionTestBase.php
@@ -35,7 +35,7 @@ abstract class FunctionalTransactionTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create a basic bundle on the entity test type.
diff --git a/tests/src/Functional/TransactionAdminTest.php b/tests/src/Functional/TransactionAdminTest.php
index 787fea6..c6901d0 100644
--- a/tests/src/Functional/TransactionAdminTest.php
+++ b/tests/src/Functional/TransactionAdminTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\transaction\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\transaction\TransactionTypeInterface;
+use Drupal\transaction\TransactorPluginInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Routing\RouteProviderInterface;
+use Drupal\transaction\TransactionOperationInterface;
 use Drupal\transaction\Entity\TransactionOperation;
 use Drupal\transaction\Entity\TransactionType;
 
@@ -15,14 +21,14 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
   /**
    * A test user with permission to administer transactions types.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create and log in an administrative user.
@@ -70,7 +76,7 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
     $transactor = 'transaction_generic';
     $target_entity_type = 'entity_test';
     $post = ['target_entity_type' => $target_entity_type, 'transactor' => $transactor];
-    $this->drupalPostForm(NULL, $post, 'Continue');
+    $this->submitForm($post, 'Continue');
 
     $label = 'Generic workflow';
     $id = 'generic_workflow';
@@ -78,17 +84,17 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
       'label' => $label,
       'id' => $id,
     ];
-    $this->drupalPostForm(NULL, $post, 'Create transaction type');
+    $this->submitForm($post, 'Create transaction type');
 
     // Check the created transaction type values.
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     $transaction_type = TransactionType::load($id);
     $this->assertNotNull($transaction_type);
-    $this->assertEqual($transaction_type->label(), $label);
-    $this->assertEqual($transaction_type->getTargetEntityTypeId(), $target_entity_type);
-    $this->assertEqual($transaction_type->getPluginId(), $transactor);
+    $this->assertEquals($transaction_type->label(), $label);
+    $this->assertEquals($transaction_type->getTargetEntityTypeId(), $target_entity_type);
+    $this->assertEquals($transaction_type->getPluginId(), $transactor);
 
-    /** @var \Drupal\transaction\TransactorPluginInterface $transactor_plugin */
+    /** @var TransactorPluginInterface $transactor_plugin */
     $transactor_plugin = $transaction_type->getPlugin();
     // Check that the transactor has no configuration (uses default options).
     $this->assertEmpty($transactor_plugin->getConfiguration());
@@ -107,10 +113,11 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
       'last_transaction_label' => 'Last transaction',
       'last_transaction_field_name' => 'last_transaction',
     ];
-    $this->drupalPostForm('admin/config/workflow/transaction/edit/generic_workflow', $post, 'Save transaction type');
+    $this->drupalGet('admin/config/workflow/transaction/edit/generic_workflow');
+    $this->submitForm($post, 'Save transaction type');
 
     // Check the log message field was created on the transaction type.
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+    /** @var EntityFieldManagerInterface $entity_field_manager */
     $entity_field_manager = \Drupal::service('entity_field.manager');
     $fields = $entity_field_manager->getFieldDefinitions('transaction', 'generic_workflow');
     $this->assertTrue(isset($fields['field_log_message']));
@@ -128,7 +135,8 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
       // Execution control: ask user.
       'execution' => '3',
     ];
-    $this->drupalPostForm('admin/config/workflow/transaction/edit/generic_workflow', $post, 'Save transaction type');
+    $this->drupalGet('admin/config/workflow/transaction/edit/generic_workflow');
+    $this->submitForm($post, 'Save transaction type');
 
     // Checks the transactor options.
     $expected_plugin_configuration = [
@@ -136,9 +144,9 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
       'last_transaction' => 'field_last_transaction',
       'execution' => '3',
     ];
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     $transaction_type = TransactionType::load('generic_workflow');
-    /** @var \Drupal\transaction\TransactorPluginInterface $transactor_plugin */
+    /** @var TransactorPluginInterface $transactor_plugin */
     $transactor_plugin = $transaction_type->getPlugin();
     // Check that the transactor has the expected configuration.
     $this->assertEquals($transactor_plugin->getConfiguration(), $expected_plugin_configuration);
@@ -154,16 +162,17 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
       // Execution control: ask user.
       'local_task' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/workflow/transaction/edit/generic_workflow', $post, 'Save transaction type');
+    $this->drupalGet('admin/config/workflow/transaction/edit/generic_workflow');
+    $this->submitForm($post, 'Save transaction type');
 
     // Check that the option were saved.
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     $transaction_type = TransactionType::load('generic_workflow');
     $transaction_type_options = $transaction_type->getOptions();
     $this->assertNotEmpty($transaction_type_options['local_task']);
 
     // Check that the target entity type transaction list route was added.
-    /** @var \Drupal\Core\Routing\RouteProviderInterface $route_provider */
+    /** @var RouteProviderInterface $route_provider */
     $route_provider = \Drupal::service('router.route_provider');
     $route = $route_provider->getRouteByName('entity.entity_test.generic_workflow-transaction');
     $this->assertNotNull($route);
@@ -186,13 +195,13 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
       'description' => 'Transaction operation description',
       'details' => 'Details line line 1' . PHP_EOL . 'Details line line 2',
     ];
-    $this->drupalPostForm(NULL, $post, 'Save transaction operation');
+    $this->submitForm($post, 'Save transaction operation');
 
     // Check the creation message.
     $this->assertSession()->pageTextContains('Transaction operation Test operation has been added.');
 
     // Check the created transaction type values.
-    /** @var \Drupal\transaction\TransactionOperationInterface $transaction_operation */
+    /** @var TransactionOperationInterface $transaction_operation */
     $transaction_operation = TransactionOperation::load('test_operation');
     $this->assertEquals($transaction_operation->getTransactionTypeId(), 'generic_workflow');
     $this->assertEquals($transaction_operation->label(), $post['label']);
@@ -210,7 +219,7 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
     // Go to the deletion.
     $this->drupalGet('admin/config/workflow/transaction/delete/generic_workflow');
     $this->assertSession()->pageTextContains('Are you sure you want to delete Generic workflow?');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
 
     $this->assertSession()->pageTextContains('Transaction type Generic workflow deleted.');
     // Check there as no transaction type.
diff --git a/tests/src/Kernel/GenericTransactionTest.php b/tests/src/Kernel/GenericTransactionTest.php
index 682bb83..4fb351d 100644
--- a/tests/src/Kernel/GenericTransactionTest.php
+++ b/tests/src/Kernel/GenericTransactionTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\transaction\Kernel;
 
+use Drupal\transaction\TransactionInterface;
 use Drupal\transaction\Entity\TransactionType;
 use Drupal\user\Entity\User;
 
@@ -104,7 +105,7 @@ class GenericTransactionTest extends KernelTransactionTestBase {
     $this->assertEquals($first_transaction->getExecutionTime(), $second_transaction->getExecutionTime());
 
     // Checks that the second transaction is the last execution transaction.
-    /** @var \Drupal\transaction\TransactionInterface $last_transaction */
+    /** @var TransactionInterface $last_transaction */
     $last_transaction = \Drupal::service('transaction')
       ->getLastExecutedTransaction($this->targetEntity, $this->transactionType);
     $this->assertEquals($second_transaction->id(), $last_transaction->id());
diff --git a/tests/src/Kernel/KernelTransactionTestBase.php b/tests/src/Kernel/KernelTransactionTestBase.php
index 5009e48..fd80c84 100644
--- a/tests/src/Kernel/KernelTransactionTestBase.php
+++ b/tests/src/Kernel/KernelTransactionTestBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\transaction\Kernel;
 
+use Drupal\transaction\TransactionTypeInterface;
+use Drupal\transaction\TransactionOperationInterface;
+use Drupal\transaction\TransactionInterface;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -34,7 +37,7 @@ abstract class KernelTransactionTestBase extends KernelTestBase {
   /**
    * The tested transaction type.
    *
-   * @var \Drupal\transaction\TransactionTypeInterface
+   * @var TransactionTypeInterface
    *
    * @see \Drupal\Tests\transaction\Kernel\KernelTransactionTestBase::prepareTransactionType()
    */
@@ -43,7 +46,7 @@ abstract class KernelTransactionTestBase extends KernelTestBase {
   /**
    * A transaction operation to be used in tests.
    *
-   * @var \Drupal\transaction\TransactionOperationInterface
+   * @var TransactionOperationInterface
    *
    * @see \Drupal\Tests\transaction\Kernel\KernelTransactionTestBase::prepareTransactionOperation()
    */
@@ -52,7 +55,7 @@ abstract class KernelTransactionTestBase extends KernelTestBase {
   /**
    * A transaction to work with in tests.
    *
-   * @var \Drupal\transaction\TransactionInterface
+   * @var TransactionInterface
    *
    * @see \Drupal\Tests\transaction\Kernel\KernelTransactionTestBase::prepareTransaction()
    */
@@ -61,7 +64,7 @@ abstract class KernelTransactionTestBase extends KernelTestBase {
   /**
    * The target entity.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $targetEntity;
 
@@ -75,7 +78,7 @@ abstract class KernelTransactionTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('entity_test');
diff --git a/transaction.module b/transaction.module
index 458587c..53f97b2 100644
--- a/transaction.module
+++ b/transaction.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\transaction\TransactionInterface;
 
@@ -15,8 +16,7 @@ function transaction_field_formatter_info_alter(array &$info) {
  * Implements hook_entity_type_alter().
  */
 function transaction_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
-
+  /** @var EntityTypeInterface[] $entity_types */
   // Set a link template in the target entity type to the transaction
   // collection for generic based transaction types.
   $tabs = \Drupal::config('transaction.settings')->get('tabs') ? : [];
