diff --git a/repec.api.php b/repec.api.php
index a463c71..ed3d0f9 100644
--- a/repec.api.php
+++ b/repec.api.php
@@ -11,11 +11,10 @@ use Drupal\Core\Entity\ContentEntityInterface;
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Maps the series fields with the entity fields to generate the template file.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The entity that is the subject of the mapping.
  *
  * @ingroup repec
diff --git a/repec.install b/repec.install
index 8e69104..eb4573f 100644
--- a/repec.install
+++ b/repec.install
@@ -1,15 +1,15 @@
 <?php
 
+use Drupal\repec\RepecInterface;
 /**
  * @file
  * Install, update and uninstall functions for the RePEc module.
  */
-
 /**
  * Implements hook_uninstall().
  */
 function repec_uninstall() {
-  /** @var \Drupal\repec\RepecInterface $repec */
+  /** @var RepecInterface $repec */
   $repec = \Drupal::service('repec');
   \Drupal::service('file_system')->deleteRecursive($repec->getArchiveDirectory());
 }
diff --git a/repec.module b/repec.module
index 39a9aef..1d58634 100644
--- a/repec.module
+++ b/repec.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\repec\RepecInterface;
 /**
  * @file
  * Contains repec.module.
@@ -37,7 +38,7 @@ function repec_entity_insert(EntityInterface $entity) {
     return;
   }
 
-  /** @var \Drupal\repec\RepecInterface $repec */
+  /** @var RepecInterface $repec */
   $repec = \Drupal::service('repec');
   if ($repec->isEntityShareable($entity)) {
     $repec->createEntityTemplate($entity, Repec::SERIES_WORKING_PAPER);
@@ -52,7 +53,7 @@ function repec_entity_update(EntityInterface $entity) {
     return;
   }
 
-  /** @var \Drupal\repec\RepecInterface $repec */
+  /** @var RepecInterface $repec */
   $repec = \Drupal::service('repec');
   if ($repec->isEntityShareable($entity)) {
     $repec->updateEntityTemplate($entity, Repec::SERIES_WORKING_PAPER);
@@ -70,7 +71,7 @@ function repec_entity_delete(EntityInterface $entity) {
     return;
   }
 
-  /** @var \Drupal\repec\RepecInterface $repec */
+  /** @var RepecInterface $repec */
   $repec = \Drupal::service('repec');
   $repec->deleteEntityTemplate($entity);
 }
diff --git a/src/Form/EntityTypeSettingsForm.php b/src/Form/EntityTypeSettingsForm.php
index d89b108..1a0bff1 100644
--- a/src/Form/EntityTypeSettingsForm.php
+++ b/src/Form/EntityTypeSettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\repec\Form;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ -18,41 +19,41 @@ class EntityTypeSettingsForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Repec service.
    *
-   * @var \Drupal\repec\RepecInterface
+   * @var RepecInterface
    */
   protected $repec;
 
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * EntityTypeSettingsForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\repec\RepecInterface $repec
+   * @param RepecInterface $repec
    *   Repec service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RepecInterface $repec, MessengerInterface $messenger, EntityFieldManagerInterface $entity_field_manager) {
@@ -241,7 +242,7 @@ class EntityTypeSettingsForm extends FormBase {
   private function getBooleanFields($entity_type_id, $bundle) {
     $result = [];
     $bundleFields = $this->entityFieldManager->getFieldDefinitions($entity_type_id, $bundle);
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition */
+    /** @var FieldDefinitionInterface $fieldDefinition */
     foreach ($bundleFields as $fieldName => $fieldDefinition) {
       if ($fieldDefinition->getType() === 'boolean') {
         $result[$fieldName] = $fieldDefinition->getLabel();
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 8487489..4cf724d 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\repec\Form;
 
+use Drupal\repec\RepecInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -123,7 +124,7 @@ class SettingsForm extends ConfigFormBase {
       ->save();
 
     // @todo if directory exists, add confirmation, this removes / recreates all rdf files.
-    /** @var \Drupal\repec\RepecInterface $repec */
+    /** @var RepecInterface $repec */
     $repec = \Drupal::service('repec');
     $repec->initializeTemplates();
   }
diff --git a/src/Plugin/Derivative/RepecLocalTask.php b/src/Plugin/Derivative/RepecLocalTask.php
index ed49618..532f4d0 100644
--- a/src/Plugin/Derivative/RepecLocalTask.php
+++ b/src/Plugin/Derivative/RepecLocalTask.php
@@ -19,23 +19,23 @@ class RepecLocalTask extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * RepecLocalTask constructor.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   Route provider.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
    */
   public function __construct(RouteProviderInterface $route_provider, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Repec.php b/src/Repec.php
index fc372f0..89a302b 100644
--- a/src/Repec.php
+++ b/src/Repec.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\repec;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\taxonomy\Entity\Term;
+use Drupal\user\Entity\User;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -18,48 +21,48 @@ class Repec implements RepecInterface {
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Core\File\FileSystemInterface definition.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * System wide settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $settings;
 
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Repec constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   File system service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system, ConfigFactoryInterface $config_factory, MessengerInterface $messenger) {
@@ -277,7 +280,7 @@ EOF;
    *
    * The attribute / field mapping is done via the entity type configuration.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to get the field value from.
    * @param string $attribute_key
    *   The attribute key that is mapped to the field for the entity bundle.
@@ -349,7 +352,7 @@ EOF;
   /**
    * Get the entity field value for a RePEc attribute.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that will be used to get its bundle configuration.
    * @param string $attribute_key
    *   The RePEc attribute that is mapped to the field.
@@ -401,7 +404,7 @@ EOF;
         $terms = $this->entityTypeManager->getStorage('taxonomy_term')
           ->loadMultiple($tids);
         $termNames = [];
-        /** @var \Drupal\taxonomy\Entity\Term $term */
+        /** @var Term $term */
         foreach ($terms as $term) {
           // @todo get translation
           $termNames[] = $term->getName();
@@ -471,7 +474,7 @@ EOF;
         }
         $users = $this->entityTypeManager->getStorage('user')
           ->loadMultiple($uids);
-        /** @var \Drupal\user\Entity\User $user */
+        /** @var User $user */
         foreach ($users as $user) {
           // @todo this needs to be set from the config as user names
           // can be fetched from first name / last name instead of
@@ -594,7 +597,7 @@ EOF;
   /**
    * Maps the series fields with the node fields to create the template file.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the mapping.
    */
   private function createPaperTemplate(ContentEntityInterface $entity) {
diff --git a/src/RepecInterface.php b/src/RepecInterface.php
index 58c2826..06838a0 100644
--- a/src/RepecInterface.php
+++ b/src/RepecInterface.php
@@ -52,7 +52,7 @@ interface RepecInterface {
   /**
    * Maps a template to an entity based on its bundle configuration.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    *
    * @return array
@@ -63,7 +63,7 @@ interface RepecInterface {
   /**
    * Maps a template to an entity based on its bundle configuration.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    *
    * @return array
@@ -106,7 +106,7 @@ interface RepecInterface {
    * The scope of this template is per entity, so meant tho be stored in
    * a sub-directory e.g. aaa/wpaper.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    * @param int $templateType
    *   The template type.
@@ -119,7 +119,7 @@ interface RepecInterface {
    * The scope of this template is per entity, so meant tho be stored in
    * a sub-directory e.g. aaa/wpaper.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    * @param int $templateType
    *   The template type.
@@ -132,7 +132,7 @@ interface RepecInterface {
    * The scope of this template is per entity, so meant tho be stored in
    * a sub-directory e.g. aaa/wpaper.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    */
   public function deleteEntityTemplate(ContentEntityInterface $entity);
@@ -151,7 +151,7 @@ interface RepecInterface {
   /**
    * Checks if an entity type and bundle is RePEc enabled.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    *
    * @return bool
@@ -166,7 +166,7 @@ interface RepecInterface {
    * conditions to share a template: published, per entity configuration,
    * content access, ...
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    *
    * @return bool
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index ef3ec21..e7fd011 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -16,14 +16,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * RouteSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 2a068b6..30d0070 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\repec\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,14 +23,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
