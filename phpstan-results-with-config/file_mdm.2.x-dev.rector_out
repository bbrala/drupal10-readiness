modules/contrib/file_mdm/file_mdm.install
modules/contrib/file_mdm/file_mdm.module
modules/contrib/file_mdm/file_mdm_exif/src/ExifTagMapper.php
modules/contrib/file_mdm/file_mdm_exif/src/ExifTagMapperInterface.php
modules/contrib/file_mdm/file_mdm_exif/src/Plugin/FileMetadata/Exif.php
modules/contrib/file_mdm/file_mdm_exif/tests/src/Kernel/FileMetadataExifTest.php
modules/contrib/file_mdm/file_mdm_font/src/Plugin/FileMetadata/Font.php
modules/contrib/file_mdm/file_mdm_font/tests/src/Kernel/FileMetadataFontTest.php
modules/contrib/file_mdm/src/Element/FileMetadataCaching.php
modules/contrib/file_mdm/src/FileMetadata.php
modules/contrib/file_mdm/src/FileMetadataException.php
modules/contrib/file_mdm/src/FileMetadataInterface.php
modules/contrib/file_mdm/src/FileMetadataManager.php
modules/contrib/file_mdm/src/FileMetadataManagerInterface.php
modules/contrib/file_mdm/src/Form/SettingsForm.php
modules/contrib/file_mdm/src/Plugin/Annotation/FileMetadata.php
modules/contrib/file_mdm/src/Plugin/FileMetadata/FileMetadataPluginBase.php
modules/contrib/file_mdm/src/Plugin/FileMetadata/GetImageSize.php
modules/contrib/file_mdm/src/Plugin/FileMetadataPluginInterface.php
modules/contrib/file_mdm/src/Plugin/FileMetadataPluginManager.php
modules/contrib/file_mdm/tests/src/Kernel/FileMetadataManagerTest.php
modules/contrib/file_mdm/tests/src/Kernel/FileMetadataManagerTestBase.php

18 files with changes
=====================

1) modules/contrib/file_mdm/tests/src/Kernel/FileMetadataManagerTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\file_mdm\Kernel;

+use Drupal\Core\File\FileSystemInterface;
 use Drupal\file_mdm\FileMetadataInterface;
 use Drupal\KernelTests\KernelTestBase;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Returns the count of metadata keys found in the file.
    *
-   * @param \Drupal\file_mdm\FileMetadataInterface $file_md
+   * @param FileMetadataInterface $file_md
    *   The FileMetadata object.
    * @param string $metadata_id
    *   The file metadata plugin id.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_mdm/tests/src/Kernel/FileMetadataManagerTest.php:24

    ---------- begin diff ----------
@@ @@
   public function testFileMetadata() {
     // Prepare a copy of test files.
     $this->fileSystem->copy('core/tests/fixtures/files/image-test.png', 'public://', FileSystemInterface::EXISTS_REPLACE);
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
     // The image files that will be tested.
     $image_files = [
       [
         // Pass a path instead of the URI.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg',
         'count_keys' => 7,
         'test_keys' => [
           [0, 100],
@@ @@
       ],
       [
         // JPEG Image with GPS data.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/1024-2006_1011_093752.jpg',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/1024-2006_1011_093752.jpg',
         'count_keys' => 7,
         'test_keys' => [
           [0, 1024],
@@ @@
       ],
       [
         // TIFF image.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/sample-1.tiff',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/sample-1.tiff',
         'count_keys' => 5,
         'test_keys' => [
           [0, 174],
@@ @@
    */
   public function testFileMetadataCaching() {
     // Prepare a copy of test files.
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
     $this->fileSystem->copy('core/tests/fixtures/files/image-test.gif', 'public://', FileSystemInterface::EXISTS_REPLACE);
     $this->fileSystem->copy('core/tests/fixtures/files/image-test.png', 'public://', FileSystemInterface::EXISTS_REPLACE);

@@ @@
       ],
       [
         // Pass a path instead of the URI.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg',
         'cache' => FALSE,
         'delete' => FALSE,
         'count_keys' => 7,
@@ @@
     $fmdm = $this->container->get('file_metadata_manager');

     // Copy the test file to a temp location.
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', 'temporary://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', 'temporary://', FileSystemInterface::EXISTS_REPLACE);

     // Test setting local temp path explicitly. The files should be parsed
     // even if not available on the URI.
@@ @@
     $file_system = $this->container->get('file_system');

     // Copy the test file to dummy-remote wrapper.
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', 'dummy-remote://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', 'dummy-remote://', FileSystemInterface::EXISTS_REPLACE);

     foreach ($image_files as $image_file) {
       $file_metadata = $fmdm->uri($image_file['uri']);
@@ @@
     // Copy a test file to test directory.
     $test_directory = 'public://test-images/';
     $this->fileSystem->prepareDirectory($test_directory, FileSystemInterface::CREATE_DIRECTORY);
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', $test_directory, FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', $test_directory, FileSystemInterface::EXISTS_REPLACE);

     // Get file metadata object.
     $file_metadata = $fmdm->uri('public://test-images/test-exif.jpeg');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/file_mdm/src/Plugin/FileMetadataPluginManager.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/file_mdm/src/Plugin/FileMetadataPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_mdm\Plugin;

+use Drupal\file_mdm\FileMetadataException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   If no URI is specified.
    */
   public function setUri($uri);
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   If no hash is specified.
    */
   public function setHash($hash);
@@ @@
    * @return bool
    *   TRUE if metadata was loaded successfully, FALSE otherwise.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   In case there were significant errors reading from file.
    */
   public function loadMetadataFromFile();
@@ @@
    * @return bool
    *   TRUE if metadata was loaded successfully, FALSE otherwise.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   In case of significant errors.
    */
   public function loadMetadataFromCache();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/file_mdm/src/Plugin/FileMetadata/GetImageSize.php:39

    ---------- begin diff ----------
@@ @@
    * @return bool
    *   TRUE if the key is valid.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   In case the key is invalid.
    */
   protected function validateKey($key, $method) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/file_mdm/src/Plugin/FileMetadata/FileMetadataPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_mdm\Plugin\FileMetadata;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\Config;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_service
+   * @param CacheBackendInterface $cache_service
    *   The cache service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, CacheBackendInterface $cache_service, ConfigFactoryInterface $config_factory, StreamWrapperManagerInterface $stream_wrapper_manager) {
@@ @@
    * @param bool $editable
    *   If TRUE returns the editable configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig|\Drupal\Core\Config\Config
+   * @return ImmutableConfig|Config
    *   The ImmutableConfig of the Config object for this plugin.
    */
   protected function getConfigObject($editable = FALSE) {
@@ @@
    * @return mixed
    *   The metadata retrieved from the file.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   In case there were significant errors reading from file.
    */
   abstract protected function doGetMetadataFromFile();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/file_mdm/src/Plugin/Annotation/FileMetadata.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_mdm\Plugin\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * The string should be wrapped in a @Translation().
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
    *
    * The string should be wrapped in a @Translation().
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


8) modules/contrib/file_mdm/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_mdm\Form;

+use Drupal\file_mdm\Plugin\FileMetadataPluginInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * An array containing the available metadata plugins.
    *
-   * @var \Drupal\file_mdm\Plugin\FileMetadataPluginInterface[]
+   * @var FileMetadataPluginInterface[]
    */
   protected $metadataPlugins = [];

@@ @@
   /**
    * Constructs a SettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\file_mdm\Plugin\FileMetadataPluginManager $manager
+   * @param FileMetadataPluginManager $manager
    *   The file metadata plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, FileMetadataPluginManager $manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/file_mdm/src/FileMetadataManagerInterface.php:23

    ---------- begin diff ----------
@@ @@
    * @param string $uri
    *   The URI to a file.
    *
-   * @return \Drupal\file_mdm\FileMetadataInterface|null
+   * @return FileMetadataInterface|null
    *   The FileMetadata object for the specified URI.
    */
   public function uri($uri);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/file_mdm/src/FileMetadataManager.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The FileMetadata plugin manager.
    *
-   * @var \Drupal\file_mdm\Plugin\FileMetadataPluginManager
+   * @var FileMetadataPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The file_mdm logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * The array of FileMetadata objects currently in use.
    *
-   * @var \Drupal\file_mdm\FileMetadataInterface[]
+   * @var FileMetadataInterface[]
    */
   protected $files = [];

@@ @@
   /**
    * Constructs a FileMetadataManager object.
    *
-   * @param \Drupal\file_mdm\Plugin\FileMetadataPluginManager $plugin_manager
+   * @param FileMetadataPluginManager $plugin_manager
    *   The FileMetadata plugin manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The file_mdm logger.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_service
+   * @param CacheBackendInterface $cache_service
    *   The cache service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
    */
   public function __construct(FileMetadataPluginManager $plugin_manager, LoggerInterface $logger, ConfigFactoryInterface $config_factory, FileSystemInterface $file_system, CacheBackendInterface $cache_service, StreamWrapperManagerInterface $stream_wrapper_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/file_mdm/src/FileMetadataInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_mdm;

+use Drupal\file_mdm\Plugin\FileMetadataPluginInterface;
 /**
  * Provides an interface for file metadata objects.
  */
@@ @@
    *   The id of the plugin whose instance is to be returned. If it is does
    *   not exist, an instance is created.
    *
-   * @return \Drupal\file_mdm\Plugin\FileMetadataPluginInterface|null
+   * @return FileMetadataPluginInterface|null
    *   The FileMetadata plugin instance. NULL if no plugin is found.
    */
   public function getFileMetadataPlugin($metadata_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/file_mdm/src/FileMetadata.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_mdm;

+use Drupal\file_mdm\Plugin\FileMetadataPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\file_mdm\Plugin\FileMetadataPluginManager;
@@ @@
   /**
    * The FileMetadata plugin manager.
    *
-   * @var \Drupal\file_mdm\Plugin\FileMetadataPluginManager
+   * @var FileMetadataPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The file_mdm logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The array of FileMetadata plugins for this URI.
    *
-   * @var \Drupal\file_mdm\Plugin\FileMetadataPluginInterface[]
+   * @var FileMetadataPluginInterface[]
    */
   protected $plugins = [];

@@ @@
   /**
    * Constructs a FileMetadata object.
    *
-   * @param \Drupal\file_mdm\Plugin\FileMetadataPluginManager $plugin_manager
+   * @param FileMetadataPluginManager $plugin_manager
    *   The file metadata plugin manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    * @param string $uri
    *   The URI of the file.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/file_mdm/src/Element/FileMetadataCaching.php:50

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/file_mdm/file_mdm_font/src/Plugin/FileMetadata/Font.php:65

    ---------- begin diff ----------
@@ @@
    * @return bool
    *   TRUE if the key is valid.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   In case the key is invalid.
    */
   protected function validateKey($key, $method) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/file_mdm/file_mdm_exif/tests/src/Kernel/FileMetadataExifTest.php:44

    ---------- begin diff ----------
@@ @@
     // Prepare a copy of test files.
     $this->fileSystem->copy('core/tests/fixtures/files/image-test.jpg', 'public://', FileSystemInterface::EXISTS_REPLACE);
     $this->fileSystem->copy('core/tests/fixtures/files/image-test.png', 'public://', FileSystemInterface::EXISTS_REPLACE);
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', 'temporary://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', 'temporary://', FileSystemInterface::EXISTS_REPLACE);
     // The image files that will be tested.
     $image_files = [
       [
         // Pass a path instead of the URI.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg',
         'count_keys' => 47,
         'test_keys' => [
           ['Orientation', 8],
@@ @@
       ],
       [
         // JPEG Image with GPS data.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/1024-2006_1011_093752.jpg',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/1024-2006_1011_093752.jpg',
         'count_keys' => 59,
         'test_keys' => [
           ['Orientation', 1],
@@ @@
       ],
       [
         // TIFF image.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/sample-1.tiff',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/sample-1.tiff',
         'count_keys' => 15,
         'test_keys' => [
           ['Orientation', 1],
@@ @@
     $fmdm = $this->container->get('file_metadata_manager');

     // Copy test file to public://.
-    $this->fileSystem->copy(drupal_get_path('module', 'image_effects') . '/tests/images/portrait-painting.jpg', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('image_effects') . '/tests/images/portrait-painting.jpg', 'public://', FileSystemInterface::EXISTS_REPLACE);
     $file_uri = 'public://portrait-painting.jpg';
     $file_metadata = $fmdm->uri($file_uri);

@@ @@
     $fmdm = $this->container->get('file_metadata_manager');

     // Copy test file to public://.
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/sample-1.tiff', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/sample-1.tiff', 'public://', FileSystemInterface::EXISTS_REPLACE);
     $file_uri = 'public://sample-1.tiff';
     $file_metadata = $fmdm->uri($file_uri);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/file_mdm/file_mdm_exif/src/Plugin/FileMetadata/Exif.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_mdm_exif\Plugin\FileMetadata;

+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
@@ @@
 use Drupal\file_mdm\Plugin\FileMetadata\FileMetadataPluginBase;
 use Drupal\file_mdm_exif\ExifTagMapperInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 use lsolesen\pel\PelEntry;
 use lsolesen\pel\PelExif;
 use lsolesen\pel\PelIfd;
@@ @@
   /**
    * The MIME type guessing service.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;

@@ @@
   /**
    * The EXIF tag mapping service.
    *
-   * @var \Drupal\file_mdm_exif\ExifTagMapperInterface
+   * @var ExifTagMapperInterface
    */
   protected $tagMapper;

@@ @@
   /**
    * The PEL file object being processed.
    *
-   * @var \lsolesen\pel\PelJpeg|\lsolesen\pel\PelTiff
+   * @var PelJpeg|PelTiff
    */
   protected $pelFile;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_service
+   * @param CacheBackendInterface $cache_service
    *   The cache service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mime_type_guesser
+   * @param MimeTypesInterface $mime_type_guesser
    *   The MIME type mapping service.
-   * @param \Drupal\file_mdm_exif\ExifTagMapperInterface $tag_mapper
+   * @param ExifTagMapperInterface $tag_mapper
    *   The EXIF tag mapping service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
    */
-  public function __construct(array $configuration, $plugin_id, array $plugin_definition, CacheBackendInterface $cache_service, ConfigFactoryInterface $config_factory, MimeTypeGuesserInterface $mime_type_guesser, ExifTagMapperInterface $tag_mapper, StreamWrapperManagerInterface $stream_wrapper_manager) {
+  public function __construct(array $configuration, $plugin_id, array $plugin_definition, CacheBackendInterface $cache_service, ConfigFactoryInterface $config_factory, MimeTypesInterface $mime_type_guesser, ExifTagMapperInterface $tag_mapper, StreamWrapperManagerInterface $stream_wrapper_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $cache_service, $config_factory, $stream_wrapper_manager);
     $this->mimeTypeGuesser = $mime_type_guesser;
     $this->tagMapper = $tag_mapper;
@@ @@
   /**
    * Returns the PEL file object for the image file.
    *
-   * @return \lsolesen\pel\PelJpeg|\lsolesen\pel\PelTiff
+   * @return PelJpeg|PelTiff
    *   A PEL file object.
    */
   protected function getFile() {
@@ @@
   /**
    * Returns a PelEntry.
    *
-   * @param \lsolesen\pel\PelTiff $tiff
+   * @param PelTiff $tiff
    *   A PelTiff object.
    * @param int $ifd_tag
    *   The IFD EXIF integer identifier.
@@ @@
    * @param int $key_tag
    *   The TAG EXIF integer identifier.
    *
-   * @return \lsolesen\pel\PelEntry
+   * @return PelEntry
    *   The PelEntry for the specified IFD and TAG.
    */
   protected function getEntry(PelTiff $tiff, $ifd_tag, $key_tag) {
@@ @@
   /**
    * Adds or changes entries for an IFD.
    *
-   * @param lsolesen\pel\PelIfd $ifd
+   * @param PelIfd $ifd
    *   A PelIfd object.
-   * @param lsolesen\pel\PelEntry[] $entries
+   * @param PelEntry[] $entries
    *   An array of PelEntry objects.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/file_mdm/file_mdm_exif/src/ExifTagMapperInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_mdm_exif;

+use Drupal\file_mdm\FileMetadataException;
 /**
  * Provides an interface for EXIF metadata ifds and tags mapper.
  */
@@ @@
    *     'ifd' - the IFD EXIF integer identifier.
    *     'tag' - the TAG EXIF integer identifier.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   When wrong argument is passed, or if the IFD/TAG could not be found.
    */
   public function resolveKeyToIfdAndTag($key);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/file_mdm/file_mdm_exif/src/ExifTagMapper.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The file_mdm logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a ExifTagMapper object.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The file_mdm logger.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_service
+   * @param CacheBackendInterface $cache_service
    *   The cache service.
    */
   public function __construct(LoggerInterface $logger, ConfigFactoryInterface $config_factory, CacheBackendInterface $cache_service) {
@@ @@
    * @return array
    *   A simple array of with IFD and TAG, expressed as integers.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   When the IFD/TAG combination could not be found.
    */
   protected function stringToTag($value) {
@@ @@
    * @return int
    *   The IFD identifier.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   When the IFD could not be found.
    */
   protected function stringToIfd($value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 18 files have been changed by Rector                                      

