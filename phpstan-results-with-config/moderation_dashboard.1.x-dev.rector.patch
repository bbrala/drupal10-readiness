diff --git a/moderation_dashboard.module b/moderation_dashboard.module
index c2465e5..4f3475e 100644
--- a/moderation_dashboard.module
+++ b/moderation_dashboard.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\views\ViewExecutable;
 /**
  * @file
  * Contains hooks for the moderation_dashboard module.
@@ -16,7 +17,7 @@ function moderation_dashboard_views_data() {
   $data = [];
 
   $manager = \Drupal::entityTypeManager();
-  /** @var \Drupal\Core\Entity\ContentEntityTypeInterface[] $entity_types */
+  /** @var ContentEntityTypeInterface[] $entity_types */
   $entity_types = array_filter($manager->getDefinitions(), function (EntityTypeInterface $entity_type) {
     return (
       $entity_type instanceof ContentEntityTypeInterface &&
@@ -48,7 +49,7 @@ function moderation_dashboard_views_data() {
  */
 function moderation_dashboard_preprocess_views_view(&$variables) {
   if (isset($variables['id']) && strpos($variables['id'], 'moderation_dashboard') === 0) {
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $variables['view'];
     if ($view->getCurrentPage() === 0 && $view->total_rows < $view->getItemsPerPage()) {
       $variables['pager'] = [];
diff --git a/src/Plugin/Block/ModerationDashboardActivity.php b/src/Plugin/Block/ModerationDashboardActivity.php
index b42fdb3..f8da474 100644
--- a/src/Plugin/Block/ModerationDashboardActivity.php
+++ b/src/Plugin/Block/ModerationDashboardActivity.php
@@ -23,21 +23,21 @@ class ModerationDashboardActivity extends BlockBase implements ContainerFactoryP
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The user storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;
 
@@ -50,11 +50,11 @@ class ModerationDashboardActivity extends BlockBase implements ContainerFactoryP
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $user_storage
+   * @param EntityStorageInterface $user_storage
    *   The user storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database, TimeInterface $time, EntityStorageInterface $user_storage) {
diff --git a/src/Plugin/Block/ModerationDashboardAddLinks.php b/src/Plugin/Block/ModerationDashboardAddLinks.php
index c4455f5..e8594b6 100644
--- a/src/Plugin/Block/ModerationDashboardAddLinks.php
+++ b/src/Plugin/Block/ModerationDashboardAddLinks.php
@@ -22,7 +22,7 @@ class ModerationDashboardAddLinks extends BlockBase implements ContainerFactoryP
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/Condition/HasModeratedContentType.php b/src/Plugin/Condition/HasModeratedContentType.php
index b876143..54676f3 100644
--- a/src/Plugin/Condition/HasModeratedContentType.php
+++ b/src/Plugin/Condition/HasModeratedContentType.php
@@ -23,21 +23,21 @@ class HasModeratedContentType extends ConditionPluginBase implements ContainerFa
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;
 
   /**
    * The bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -50,11 +50,11 @@ class HasModeratedContentType extends ConditionPluginBase implements ContainerFa
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_information
+   * @param ModerationInformationInterface $moderation_information
    *   The moderation information service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The bundle information service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ModerationInformationInterface $moderation_information, EntityTypeBundleInfoInterface $bundle_info, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/Condition/ModerationDashboardAccess.php b/src/Plugin/Condition/ModerationDashboardAccess.php
index 89e1185..df82c65 100644
--- a/src/Plugin/Condition/ModerationDashboardAccess.php
+++ b/src/Plugin/Condition/ModerationDashboardAccess.php
@@ -33,7 +33,7 @@ class ModerationDashboardAccess extends ConditionPluginBase implements Container
    *   Contains plugin Id.
    * @param mixed $plugin_definition
    *   Contains plugin definition.
-   * @param \Drupal\user\UserStorageInterface $user_storage
+   * @param UserStorageInterface $user_storage
    *   Contains User entity storage interface.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UserStorageInterface $user_storage) {
@@ -44,7 +44,7 @@ class ModerationDashboardAccess extends ConditionPluginBase implements Container
   /**
    * Create method for DI.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Contains container interface object.
    * @param array $configuration
    *   A config array.
diff --git a/src/Plugin/views/field/LinkToLatestVersion.php b/src/Plugin/views/field/LinkToLatestVersion.php
index 5795ee8..a84e01e 100644
--- a/src/Plugin/views/field/LinkToLatestVersion.php
+++ b/src/Plugin/views/field/LinkToLatestVersion.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\moderation_dashboard\Plugin\views\field;
 
+use Drupal\content_moderation\ModerationInformation;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Url;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;
@@ -17,10 +19,10 @@ class LinkToLatestVersion extends FieldPluginBase {
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\content_moderation\ModerationInformation $information */
+    /** @var ModerationInformation $information */
     $moderation_information = \Drupal::service('content_moderation.moderation_information');
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity($values);
     $entity_type_id = $entity->getEntityTypeId();
 
diff --git a/src/Routing/ResponseSubscriber.php b/src/Routing/ResponseSubscriber.php
index 9124253..6e3c484 100644
--- a/src/Routing/ResponseSubscriber.php
+++ b/src/Routing/ResponseSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\moderation_dashboard\Routing;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Condition\ConditionManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -9,7 +10,6 @@ use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Url;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -20,32 +20,32 @@ class ResponseSubscriber implements EventSubscriberInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * ResponseSubscriber constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(AccountProxyInterface $current_user, ConditionManager $condition_manager, ConfigFactoryInterface $config_factory) {
@@ -57,10 +57,10 @@ class ResponseSubscriber implements EventSubscriberInterface {
   /**
    * Redirects user login to the Moderation Dashboard, when appropriate.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
     $request = $event->getRequest();
 
diff --git a/tests/src/Functional/ModerationDashboardComponentsTest.php b/tests/src/Functional/ModerationDashboardComponentsTest.php
index 08b160f..0e95fe6 100644
--- a/tests/src/Functional/ModerationDashboardComponentsTest.php
+++ b/tests/src/Functional/ModerationDashboardComponentsTest.php
@@ -54,7 +54,7 @@ class ModerationDashboardComponentsTest extends ModerationDashboardTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalLogin($this->user);
diff --git a/tests/src/Functional/ModerationDashboardPermissionTest.php b/tests/src/Functional/ModerationDashboardPermissionTest.php
index 167a294..8d35e71 100644
--- a/tests/src/Functional/ModerationDashboardPermissionTest.php
+++ b/tests/src/Functional/ModerationDashboardPermissionTest.php
@@ -29,7 +29,7 @@ class ModerationDashboardPermissionTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create a moderated entity type.
diff --git a/tests/src/Functional/ModerationDashboardPersonalizedComponentsTest.php b/tests/src/Functional/ModerationDashboardPersonalizedComponentsTest.php
index 87e719f..a9ac22d 100644
--- a/tests/src/Functional/ModerationDashboardPersonalizedComponentsTest.php
+++ b/tests/src/Functional/ModerationDashboardPersonalizedComponentsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\moderation_dashboard\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 /**
  * Tests personalized moderation dashboard components.
  *
@@ -12,14 +13,14 @@ class ModerationDashboardPersonalizedComponentsTest extends ModerationDashboardT
   /**
    * Moderator user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $moderatorUser;
 
   /**
    * Regular user without moderation dashboard permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $regularUser;
 
@@ -57,7 +58,7 @@ class ModerationDashboardPersonalizedComponentsTest extends ModerationDashboardT
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->moderatorUser = $this->createUser($this->userPermissions, 'moderator user');
diff --git a/tests/src/Functional/ModerationDashboardRedirectTest.php b/tests/src/Functional/ModerationDashboardRedirectTest.php
index 8b04933..2d98c19 100644
--- a/tests/src/Functional/ModerationDashboardRedirectTest.php
+++ b/tests/src/Functional/ModerationDashboardRedirectTest.php
@@ -12,7 +12,7 @@ class ModerationDashboardRedirectTest extends ModerationDashboardTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('system.site')
       ->set('page.403', '/user/login')
diff --git a/tests/src/Functional/ModerationDashboardTestBase.php b/tests/src/Functional/ModerationDashboardTestBase.php
index 393bb1b..63ab688 100644
--- a/tests/src/Functional/ModerationDashboardTestBase.php
+++ b/tests/src/Functional/ModerationDashboardTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\moderation_dashboard\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;
 
@@ -52,7 +53,7 @@ abstract class ModerationDashboardTestBase extends BrowserTestBase {
   /**
    * Test user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;
 
@@ -66,7 +67,7 @@ abstract class ModerationDashboardTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create content types for tests.
