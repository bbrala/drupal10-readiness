diff --git a/helpdesk_integration.install b/helpdesk_integration.install
index 5bd7637..9892036 100644
--- a/helpdesk_integration.install
+++ b/helpdesk_integration.install
@@ -1,12 +1,13 @@
 <?php
 
+use Drupal\user\RoleInterface;
 use Drupal\user\Entity\Role;
 
 /**
  * Implements hook_install().
  */
 function helpdesk_integration_install() {
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   $role = Role::load(Role::AUTHENTICATED_ID);
   $role
     ->grantPermission('access helpdesk')
diff --git a/helpdesk_integration.module b/helpdesk_integration.module
index 0e1f7ca..65b5473 100644
--- a/helpdesk_integration.module
+++ b/helpdesk_integration.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\helpdesk_integration\Service;
 use Drupal\comment\CommentInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Render\Element;
@@ -12,11 +14,11 @@ use Drupal\user\UserInterface;
 use Drupal\views\ViewExecutable;
 
 /**
- * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
- * @param \Drupal\user\UserInterface[] $users
+ * @param HelpdeskInterface $helpdesk
+ * @param UserInterface[] $users
  * @param array $context
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginException
+ * @throws PluginException
  */
 function helpdesk_integration_batch_push_users(HelpdeskInterface $helpdesk, array $users, array &$context) {
   if (empty($context['sandbox'])) {
@@ -66,11 +68,11 @@ function helpdesk_integration_batch_push_users(HelpdeskInterface $helpdesk, arra
 /**
  * Gets the user post creation event.
  *
- * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
- * @param \Drupal\user\UserInterface $user
+ * @param HelpdeskInterface $helpdesk
+ * @param UserInterface $user
  * @param string $remoteId
  *
- * @return \Drupal\helpdesk_integration\UserPostCreationEvent
+ * @return UserPostCreationEvent
  */
 function getUserPostCreationEvent(HelpdeskInterface $helpdesk, UserInterface $user, string $remoteId): UserPostCreationEvent {
   $userPostCreationEvent = new UserPostCreationEvent();
@@ -83,19 +85,19 @@ function getUserPostCreationEvent(HelpdeskInterface $helpdesk, UserInterface $us
 /**
  * Implements hook_entity_insert().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function helpdesk_integration_entity_insert(EntityInterface $entity) {
   if (Drupal::state()->get('helpdesk_integration.sync.disabled', FALSE)) {
     return;
   }
   if ($entity instanceof UserInterface) {
-    /** @var \Drupal\helpdesk_integration\Service $service */
+    /** @var Service $service */
     $service = Drupal::service('helpdesk_integration.service');
     $service->sync('users', NULL, $entity);
   }
   else if ($entity instanceof CommentInterface) {
-    /** @var \Drupal\helpdesk_integration\Service $service */
+    /** @var Service $service */
     $service = Drupal::service('helpdesk_integration.service');
     $service->addCommentToIssue($entity);
   }
@@ -104,7 +106,7 @@ function helpdesk_integration_entity_insert(EntityInterface $entity) {
 /**
  * Implements hook_entity_delete().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function helpdesk_integration_entity_delete(EntityInterface $entity) {
   if (Drupal::state()->get('helpdesk_integration.sync.disabled', FALSE)) {
@@ -116,7 +118,7 @@ function helpdesk_integration_entity_delete(EntityInterface $entity) {
 /**
  * Implements hook_entity_update().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function helpdesk_integration_entity_update(EntityInterface $entity) {
   if (Drupal::state()->get('helpdesk_integration.sync.disabled', FALSE)) {
@@ -128,13 +130,13 @@ function helpdesk_integration_entity_update(EntityInterface $entity) {
 /**
  * Implements hook_views_pre_build().
  *
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  */
 function helpdesk_integration_views_pre_build(ViewExecutable $view) {
   if ($view->id() === 'helpdesk') {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = User::load(Drupal::currentUser()->id());
-    /** @var \Drupal\helpdesk_integration\Service $service */
+    /** @var Service $service */
     $service = Drupal::service('helpdesk_integration.service');
     $service->sync('issues', NULL, $user);
   }
@@ -160,7 +162,7 @@ function helpdesk_integration_views_filter_user_id_alter(array &$ids, string $mo
     // user ids. The mapping should be found in user data table. For sites with
     // multiple helpdesk instances, check if there $query provides a "helpdesk_id"
     // and if not, use the default helpdesk.
-    /** @var \Drupal\helpdesk_integration\Service $helpdeskService */
+    /** @var Service $helpdeskService */
     $helpdeskService = Drupal::service('helpdesk_integration.service');
     if (isset($query['helpdesk_id'])) {
       $helpdesk = $helpdeskService->getHelpdeskById($query['helpdesk_id']);
diff --git a/src/Access.php b/src/Access.php
index fc96295..cb744dd 100644
--- a/src/Access.php
+++ b/src/Access.php
@@ -14,7 +14,7 @@ class Access {
   /**
    * TBD.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Object to determine if access is allowed.
    */
   public static function availableHelpdesk(): AccessResult {
@@ -24,7 +24,7 @@ class Access {
   /**
    * TBD.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Object to determine if access is allowed.
    */
   public static function applicableHelpdeskForUser(): AccessResult {
diff --git a/src/Annotation/HelpdeskPlugin.php b/src/Annotation/HelpdeskPlugin.php
index 1eee5cb..9c70cb6 100644
--- a/src/Annotation/HelpdeskPlugin.php
+++ b/src/Annotation/HelpdeskPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helpdesk_integration\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class HelpdeskPlugin extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class HelpdeskPlugin extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Commands/SyncCommands.php b/src/Commands/SyncCommands.php
index 746d811..391f975 100644
--- a/src/Commands/SyncCommands.php
+++ b/src/Commands/SyncCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helpdesk_integration\Commands;
 
+use Drupal\helpdesk_integration\HelpdeskInterface;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\helpdesk_integration\Service;
@@ -17,14 +18,14 @@ class SyncCommands extends DrushCommands {
   /**
    * The helpdesk services.
    *
-   * @var \Drupal\helpdesk_integration\Service
+   * @var Service
    */
   protected $service;
 
   /**
    * SyncCommands constructor.
    *
-   * @param \Drupal\helpdesk_integration\Service $service
+   * @param Service $service
    *   The helpdesk services.
    */
   public function __construct(Service $service) {
@@ -42,7 +43,7 @@ class SyncCommands extends DrushCommands {
    */
   public function list() {
     $rows = [];
-    /** @var \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk */
+    /** @var HelpdeskInterface $helpdesk */
     foreach ($this->service->getHelpdeskInstances() as $helpdesk) {
       $rows[] = [
         'id' => $helpdesk->id(),
diff --git a/src/Controller/RefreshIssues.php b/src/Controller/RefreshIssues.php
index 734cbb0..d89c49a 100644
--- a/src/Controller/RefreshIssues.php
+++ b/src/Controller/RefreshIssues.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helpdesk_integration\Controller;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Url;
 use Drupal\helpdesk_integration\Service;
@@ -17,14 +18,14 @@ class RefreshIssues extends ControllerBase {
   /**
    * The helpdesk_integration.service service.
    *
-   * @var \Drupal\helpdesk_integration\Service
+   * @var Service
    */
   protected $service;
 
   /**
    * The refresh issues constructor.
    *
-   * @param \Drupal\helpdesk_integration\Service $service
+   * @param Service $service
    *   The helpdesk_integration.service service.
    */
   public function __construct(Service $service) {
@@ -43,11 +44,11 @@ class RefreshIssues extends ControllerBase {
   /**
    * Builds the response.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Destination when completed.
    */
   public function build(): RedirectResponse {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = User::load($this->currentUser()->id());
     $this->service->sync('issues', NULL, $user, TRUE);
     return new RedirectResponse(Url::fromRoute('helpdesk_integration.helpdesk')->toString());
diff --git a/src/Controller/ResolveIssue.php b/src/Controller/ResolveIssue.php
index 0ad82de..4bdc5ec 100644
--- a/src/Controller/ResolveIssue.php
+++ b/src/Controller/ResolveIssue.php
@@ -19,14 +19,14 @@ class ResolveIssue extends ControllerBase {
   /**
    * The helpdesk_integration.service service.
    *
-   * @var \Drupal\helpdesk_integration\Service
+   * @var Service
    */
   protected $service;
 
   /**
    * The refresh issues constructor.
    *
-   * @param \Drupal\helpdesk_integration\Service $service
+   * @param Service $service
    *   The helpdesk_integration.service service.
    */
   public function __construct(Service $service) {
@@ -45,10 +45,10 @@ class ResolveIssue extends ControllerBase {
   /**
    * TBD.
    *
-   * @param \Drupal\helpdesk_integration\IssueInterface $helpdesk_issue
+   * @param IssueInterface $helpdesk_issue
    *   The issue entity for which access should be checked.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Object to determine if access is allowed.
    */
   public static function access(IssueInterface $helpdesk_issue): AccessResult {
@@ -58,10 +58,10 @@ class ResolveIssue extends ControllerBase {
   /**
    * Builds the response.
    *
-   * @param \Drupal\helpdesk_integration\IssueInterface $helpdesk_issue
+   * @param IssueInterface $helpdesk_issue
    *   The issue entity which should be resolved.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Destination when completed.
    */
   public function build(IssueInterface $helpdesk_issue): RedirectResponse {
diff --git a/src/Entity/Helpdesk.php b/src/Entity/Helpdesk.php
index c412ae6..dec352a 100644
--- a/src/Entity/Helpdesk.php
+++ b/src/Entity/Helpdesk.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helpdesk_integration\Entity;
 
+use Drupal\helpdesk_integration\Service;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ -138,7 +139,7 @@ class Helpdesk extends ConfigEntityBase implements HelpdeskInterface {
    */
   public static function postLoad(EntityStorageInterface $storage, array &$entities) {
     parent::postLoad($storage, $entities);
-    /** @var \Drupal\helpdesk_integration\HelpdeskInterface $entity */
+    /** @var HelpdeskInterface $entity */
     foreach ($entities as $entity) {
       $entity->postLoadEntity();
     }
@@ -172,7 +173,7 @@ class Helpdesk extends ConfigEntityBase implements HelpdeskInterface {
    * {@inheritdoc}
    */
   public function getPlugin(): PluginInterface {
-    /** @var \Drupal\helpdesk_integration\Service $service */
+    /** @var Service $service */
     $service = Drupal::service('helpdesk_integration.service');
     return $service->getPluginInstance($this->plugin_id);
   }
diff --git a/src/Entity/Issue.php b/src/Entity/Issue.php
index 144d3ff..4d1d61f 100644
--- a/src/Entity/Issue.php
+++ b/src/Entity/Issue.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helpdesk_integration\Entity;
 
+use Drupal\helpdesk_integration\HelpdeskInterface;
 use Drupal;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityChangedTrait;
@@ -82,7 +83,7 @@ class Issue extends ContentEntityBase implements IssueInterface {
   public function preSave(EntityStorageInterface $storage) {
     parent::preSave($storage);
     if ($this->isNew() && empty($this->get('extid')->value)) {
-      /** @var \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk */
+      /** @var HelpdeskInterface $helpdesk */
       $helpdesk = Drupal::service('helpdesk_integration.service')
         ->getHelpdesk($this);
       $this->set('helpdesk', $helpdesk->id());
diff --git a/src/Form/Helpdesk.php b/src/Form/Helpdesk.php
index caf437f..5492962 100644
--- a/src/Form/Helpdesk.php
+++ b/src/Form/Helpdesk.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\helpdesk_integration\Form;
 
+use Drupal\helpdesk_integration\HelpdeskInterface;
+use Drupal\helpdesk_integration\Service;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -10,7 +13,7 @@ use Exception;
 /**
  * Helpdesk form.
  *
- * @property \Drupal\helpdesk_integration\HelpdeskInterface $entity
+ * @property HelpdeskInterface $entity
  */
 class Helpdesk extends EntityForm {
 
@@ -20,7 +23,7 @@ class Helpdesk extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\helpdesk_integration\Service $service */
+    /** @var Service $service */
     $service = Drupal::service('helpdesk_integration.service');
     $plugins = $service->getPluginInstances();
     $isFirst = empty($service->getHelpdeskInstances());
@@ -124,7 +127,7 @@ class Helpdesk extends EntityForm {
       $this->entity->set($key, $value);
     }
 
-    /** @var Drupal\helpdesk_integration\Service $service */
+    /** @var Service $service */
     $service = Drupal::service('helpdesk_integration.service');
     foreach ($service->getPluginInstances() as $plugin) {
       unset($this->entity->{'details_' . $plugin->getPluginId()});
@@ -134,10 +137,10 @@ class Helpdesk extends EntityForm {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\helpdesk_integration\Service $service */
+    /** @var Service $service */
     $service = Drupal::service('helpdesk_integration.service');
     try {
       $defaultHelpdesk = $service->getDefaultHelpdesk();
diff --git a/src/Form/Issue.php b/src/Form/Issue.php
index 38d58d8..e90a7fd 100644
--- a/src/Form/Issue.php
+++ b/src/Form/Issue.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\helpdesk_integration\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -13,8 +15,8 @@ class Issue extends ContentEntityForm {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityStorageException
+   * @throws EntityMalformedException
    */
   public function save(array $form, FormStateInterface $form_state) {
 
@@ -23,7 +25,7 @@ class Issue extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     $this->messenger()->addStatus($this->t('New helpdesk issue %label has been created.', $message_arguments));
     $this->logger('helpdesk_integration')->notice('Created new helpdesk issue %label', $logger_arguments);
diff --git a/src/Form/RefreshUsers.php b/src/Form/RefreshUsers.php
index a374acd..d8aaca1 100644
--- a/src/Form/RefreshUsers.php
+++ b/src/Form/RefreshUsers.php
@@ -16,14 +16,14 @@ class RefreshUsers extends ConfirmFormBase {
   /**
    * The helpdesk_integration.service service.
    *
-   * @var \Drupal\helpdesk_integration\Service
+   * @var Service
    */
   protected $service;
 
   /**
    * The refresh users constructor.
    *
-   * @param \Drupal\helpdesk_integration\Service $service
+   * @param Service $service
    *   The helpdesk_integration.service service.
    */
   public function __construct(Service $service) {
diff --git a/src/HelpdeskAccessControlHandler.php b/src/HelpdeskAccessControlHandler.php
index 9533ed0..6e6a337 100644
--- a/src/HelpdeskAccessControlHandler.php
+++ b/src/HelpdeskAccessControlHandler.php
@@ -18,7 +18,7 @@ class HelpdeskAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\helpdesk_integration\HelpdeskInterface $entity */
+    /** @var HelpdeskInterface $entity */
     if ($operation === 'delete' && $entity->isDefault()) {
       return AccessResult::forbidden('Default helpdesk can not be deleted.');
     }
diff --git a/src/HelpdeskInterface.php b/src/HelpdeskInterface.php
index ce185d6..3034d8c 100644
--- a/src/HelpdeskInterface.php
+++ b/src/HelpdeskInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helpdesk_integration;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\user\UserInterface;
 
@@ -29,17 +30,17 @@ interface HelpdeskInterface extends ConfigEntityInterface {
   /**
    * Gets the plugin for this helpdesk entity.
    *
-   * @return \Drupal\helpdesk_integration\PluginInterface
+   * @return PluginInterface
    *   The plugin associated with this helpdesk instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getPlugin(): PluginInterface;
 
   /**
    * Determine if the given user has access to this helpdesk instance.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user entity for which to determine, if they had access.
    *
    * @return bool
diff --git a/src/HelpdeskListBuilder.php b/src/HelpdeskListBuilder.php
index 907f271..ebfc208 100644
--- a/src/HelpdeskListBuilder.php
+++ b/src/HelpdeskListBuilder.php
@@ -25,7 +25,7 @@ class HelpdeskListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\helpdesk_integration\HelpdeskInterface $entity */
+    /** @var HelpdeskInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['status'] = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');
diff --git a/src/PluginBase.php b/src/PluginBase.php
index 3617862..d7d40ff 100644
--- a/src/PluginBase.php
+++ b/src/PluginBase.php
@@ -36,70 +36,70 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
   /**
    * The client factory.
    *
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected ClientFactory $clientFactory;
 
   /**
    * The helpdesk service.
    *
-   * @var \Drupal\helpdesk_integration\Service
+   * @var Service
    */
   protected Service $service;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;
 
   /**
    * The time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected TimeInterface $time;
 
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected LoggerInterface $logger;
 
   /**
    * The account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected AccountInterface $currentUser;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;
 
   /**
    * The type guesser.
    *
-   * @var \Symfony\Component\Mime\MimeTypeGuesserInterface
+   * @var MimeTypeGuesserInterface
    */
   protected MimeTypeGuesserInterface $mimeTypeGuesser;
 
@@ -113,21 +113,21 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Http\ClientFactory $client_factory
+   * @param ClientFactory $client_factory
    *   HTTP client factory.
-   * @param \Drupal\helpdesk_integration\Service $service
+   * @param Service $service
    *   Helpdesk services.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data service to persistently store data for each user.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Drupal's time service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   Drupal's date formatter service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Drupal's logger service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The currently logged in user account session.
    */
   public function __construct(array $configuration, string $plugin_id, $plugin_definition, ClientFactory $client_factory, Service $service, EntityTypeManagerInterface $entity_type_manager, UserDataInterface $user_data, TimeInterface $time, DateFormatterInterface $date_formatter, LoggerInterface $logger, AccountInterface $current_user, FileSystemInterface $file_system, MimeTypeGuesserInterface $mime_type_guesser) {
@@ -187,7 +187,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
           break;
         }
       }
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $users[$helpdesk->id()][$key][$hash] = User::load($load_uid);
     }
     return $users[$helpdesk->id()][$key][$hash];
@@ -244,17 +244,17 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
   /**
    * Synchronize the issues.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $issueStorage
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
-   * @param \Drupal\helpdesk_integration\IssueInterface $issue
-   * @param \Drupal\Core\Entity\EntityInterface|null $user
+   * @param EntityStorageInterface $issueStorage
+   * @param HelpdeskInterface $helpdesk
+   * @param IssueInterface $issue
+   * @param EntityInterface|null $user
    *
    * @return int the local issue id
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   private function synchronizeIssues(EntityStorageInterface $issueStorage, HelpdeskInterface $helpdesk, IssueInterface $issue, ?EntityInterface $user): int {
     $changed = FALSE;
-    /** @var \Drupal\helpdesk_integration\IssueInterface $localIssue */
+    /** @var IssueInterface $localIssue */
     if ($localIssues = $issueStorage->loadByProperties([
       'helpdesk' => $helpdesk->id(),
       'extid' => $issue->get('extid')->value,
@@ -292,12 +292,12 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
   /**
    * Synchronize the comments.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $commentStorage
+   * @param EntityStorageInterface $commentStorage
    * @param int $localIssueId
    * @param $comment
    *
    * @return int the comment id
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException|\Drupal\Core\Entity\EntityStorageException
+   * @throws HelpdeskPluginException|EntityStorageException
    */
   private function synchronizeComments(EntityStorageInterface $commentStorage, int $localIssueId, $comment): int {
     if ($localComments = $commentStorage->loadByProperties([
@@ -337,7 +337,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
    * @param CommentInterface $localComment
    * @param $comment
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   private function updateCommentIfNecessary(CommentInterface $localComment, $comment): void {
     $changed = FALSE;
@@ -370,7 +370,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
    * @param array $attachments
    *
    * @return array
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   private function downloadAndGetAttachmentValues(array $attachments): array {
     $attachmentValues = [];
@@ -412,11 +412,11 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
   /**
    * Remove existing local comments that no longer exist remotely.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $commentStorage
+   * @param EntityStorageInterface $commentStorage
    * @param int $localIssueId
    * @param array $remoteCommentIds
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   private function removeExistingLocalComments(EntityStorageInterface $commentStorage, int $localIssueId, array $remoteCommentIds) {
     $localComments = $commentStorage->loadByProperties([
@@ -437,13 +437,13 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
   /**
    * Remove access to existing items that no longer apply.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
-   * @param \Drupal\Core\Entity\EntityBase|null $user
+   * @param HelpdeskInterface $helpdesk
+   * @param EntityBase|null $user
    * @param array $remoteIssueIds
    * @param int $lastSync
    *
    * @return void
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   private function removeAccessOfExistingItems(HelpdeskInterface $helpdesk, EntityBase $user, array $remoteIssueIds, int $lastSync) {
     try {
@@ -456,13 +456,13 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
       'helpdesk' => $helpdesk->id(),
       'users' => $user->id(),
     ]) as $key => $issue) {
-      /** @var \Drupal\helpdesk_integration\IssueInterface $issue */
+      /** @var IssueInterface $issue */
       if ($issue->getChangedTime() > $lastSync) {
         $localIssues[$key] = $issue;
       }
     }
     $removeIssueIds = array_diff(array_keys($localIssues), $remoteIssueIds);
-    /** @var \Drupal\helpdesk_integration\IssueInterface $removeIssue */
+    /** @var IssueInterface $removeIssue */
     foreach ($removeIssueIds as $removeIssueId) {
       $removeIssue = $localIssues[$removeIssueId];
       try {
@@ -481,7 +481,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
   final public function updateAllUsers(HelpdeskInterface $helpdesk, UserInterface $user = NULL, array &$batch = NULL): void {
     $users = [];
     if ($user === NULL) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       foreach (User::loadMultiple() as $user) {
         if ($helpdesk->hasAccess($user) && $user->isActive()) {
           $users[] = $user;
@@ -523,11 +523,11 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
   /**
    * Gets the user post creation event.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
-   * @param \Drupal\user\UserInterface $user
+   * @param HelpdeskInterface $helpdesk
+   * @param UserInterface $user
    * @param string $remoteId
    *
-   * @return \Drupal\helpdesk_integration\UserPostCreationEvent
+   * @return UserPostCreationEvent
    */
   public static function getUserPostCreationEvent(HelpdeskInterface $helpdesk, UserInterface $user, string $remoteId): UserPostCreationEvent {
     $userPostCreationEvent = new UserPostCreationEvent();
@@ -540,10 +540,10 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
   /**
    * Gets the user pre creation event.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
-   * @param \Drupal\user\UserInterface $user
+   * @param HelpdeskInterface $helpdesk
+   * @param UserInterface $user
    *
-   * @return \Drupal\helpdesk_integration\UserPreCreationEvent
+   * @return UserPreCreationEvent
    */
   public static function getUserPreCreationEvent(HelpdeskInterface $helpdesk, UserInterface $user): UserPreCreationEvent {
     $userPreCreationEvent = new UserPreCreationEvent();
diff --git a/src/PluginInterface.php b/src/PluginInterface.php
index 6583e81..bc49901 100644
--- a/src/PluginInterface.php
+++ b/src/PluginInterface.php
@@ -31,7 +31,7 @@ interface PluginInterface extends PluginInspectionInterface {
   /**
    * Adds plugin specific fields to the config form.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk entity with the instance's configuration.
    *
    * @param array $required
@@ -53,14 +53,14 @@ interface PluginInterface extends PluginInspectionInterface {
   /**
    * Find user entity related to given helpdesk which has given data stored.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk entity with the instance's configuration.
    * @param string $key
    *   The key representing the data record.
    * @param mixed $data
    *   The stored data record to search for.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The found user entity or NULL.
    */
   public function findUserByData(HelpdeskInterface $helpdesk, string $key, $data): ?UserInterface;
@@ -68,9 +68,9 @@ interface PluginInterface extends PluginInspectionInterface {
   /**
    * Get data stored for given user entity related to given helpdesk.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user entity.
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk entity with the instance's configuration.
    * @param string $key
    *   The key representing the data record.
@@ -83,38 +83,38 @@ interface PluginInterface extends PluginInspectionInterface {
   /**
    * Creates a new issue.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk entity with the instance's configuration.
-   * @param \Drupal\helpdesk_integration\IssueInterface $issue
+   * @param IssueInterface $issue
    *   The issue entity that should be created remotely.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function createIssue(HelpdeskInterface $helpdesk, IssueInterface $issue);
 
   /**
    * Add new comment to an issue.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk entity with the instance's configuration.
-   * @param \Drupal\helpdesk_integration\IssueInterface $issue
+   * @param IssueInterface $issue
    *   The issue entity to which the comment should be added.
-   * @param \Drupal\comment\CommentInterface $comment
+   * @param CommentInterface $comment
    *   The comment entity that should be created remotely.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function addCommentToIssue(HelpdeskInterface $helpdesk, IssueInterface $issue, CommentInterface $comment);
 
   /**
    * Mark an issue as resolved and submit change to remote helpdesk.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk entity with the instance's configuration.
-   * @param \Drupal\helpdesk_integration\IssueInterface $issue
+   * @param IssueInterface $issue
    *   The issue entity to which should be marked as resolved.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function resolveIssue(HelpdeskInterface $helpdesk, IssueInterface $issue): void;
 
@@ -124,9 +124,9 @@ interface PluginInterface extends PluginInspectionInterface {
    * This function is finally implemented by the PluginBase and can not be
    * overwritten by implementing plugins.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk entity with the instance's configuration.
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   The user entity for which the update should be performed. If not
    *   provided, the user entity of the currently logged in user will be used.
    * @param bool $force
@@ -134,7 +134,7 @@ interface PluginInterface extends PluginInspectionInterface {
    *   be performed if the time since the last update for this user on the given
    *   helpdesk is longer than defined in self::REFRESH_INTERVAL.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function updateAllIssues(HelpdeskInterface $helpdesk, UserInterface $user = NULL, $force = FALSE): void;
 
@@ -147,19 +147,19 @@ interface PluginInterface extends PluginInspectionInterface {
    * mapping with the Drupal user by utilizing UserDataInterface. Use the
    * getUserData and setUserData of this interface for this.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk entity with the instance's configuration.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user entity for which the issues should be received.
    * @param int $since
    *   If a positive value is given, the helpdesk should only look for issues
    *   that have been created or updated after that timestamp, where the value
    *   of $since is the number of seconds since 1-1-1970.
    *
-   * @return \Drupal\helpdesk_integration\IssueInterface[]
+   * @return IssueInterface[]
    *   An array of issue entities that have been received but not saved.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function getAllIssues(HelpdeskInterface $helpdesk, UserInterface $user, int $since = 0): array;
 
@@ -169,9 +169,9 @@ interface PluginInterface extends PluginInspectionInterface {
    * This function is finally implemented by the PluginBase and can not be
    * overwritten by implementing plugins.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk entity with the instance's configuration.
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   The user that should be pushed to the helpdesk. If NULL, all users will
    *   be pushed. If a dedicated user record is provided, it must have been
    *   checked if that user has access to the given helpdesk.
@@ -179,46 +179,46 @@ interface PluginInterface extends PluginInspectionInterface {
    *   If an array is given, this callback does NOT update users directly but
    *   adds a Batch API compatible operation to the array.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function updateAllUsers(HelpdeskInterface $helpdesk, UserInterface $user = NULL, array &$batch = NULL): void;
 
   /**
    * Implemented by the backend plugin to push a single user entity to helpdesk.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk entity with the instance's configuration.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user entity that should be pushed.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function pushUser(HelpdeskInterface $helpdesk, UserInterface $user): string;
 
   /**
    * Get the remote ID of a local user.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk entity with the instance's configuration.
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   The user entity on behalf of which the client should communicate.
    *
    * @return string
    *   The remote user id.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function getRemoteUserId(HelpdeskInterface $helpdesk, UserInterface $user): string;
 
   /**
    * Checks whether the user in the helpdesk platform is locked.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
-   * @param \Drupal\user\UserInterface $user
+   * @param HelpdeskInterface $helpdesk
+   * @param UserInterface $user
    *
    * @return bool
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function isUserLocked(HelpdeskInterface $helpdesk, UserInterface $user): bool;
 }
diff --git a/src/PluginManager.php b/src/PluginManager.php
index f45114b..5c4a289 100644
--- a/src/PluginManager.php
+++ b/src/PluginManager.php
@@ -19,9 +19,9 @@ class PluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Service.php b/src/Service.php
index 1499b95..386ecfa 100644
--- a/src/Service.php
+++ b/src/Service.php
@@ -22,32 +22,32 @@ class Service {
   /**
    * TBD.
    *
-   * @var \Drupal\helpdesk_integration\PluginManager
+   * @var PluginManager
    */
   protected $pluginManager;
 
   /**
    * TBD.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * TBD.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Service constructor.
    *
-   * @param \Drupal\helpdesk_integration\PluginManager $plugin_manager
+   * @param PluginManager $plugin_manager
    *   The helpdesk plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Drupal messenger service.
    */
   public function __construct(PluginManager $plugin_manager, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger) {
@@ -59,13 +59,13 @@ class Service {
   /**
    * Returns a list of active helpdesk entities.
    *
-   * @return \Drupal\helpdesk_integration\HelpdeskInterface[]
+   * @return HelpdeskInterface[]
    *   The list of active helpdesk instances.
    */
   public function getHelpdeskInstances(): array {
-    /** @var \Drupal\helpdesk_integration\HelpdeskInterface[] $instances */
+    /** @var HelpdeskInterface[] $instances */
     $instances = [];
-    /** @var \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk */
+    /** @var HelpdeskInterface $helpdesk */
     foreach (Helpdesk::loadMultiple() as $helpdesk) {
       if ($helpdesk->status()) {
         $instances[] = $helpdesk;
@@ -91,10 +91,10 @@ class Service {
   /**
    * Returns a list of active helpdesk entities for the given user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user entity for whom the list should be built.
    *
-   * @return \Drupal\helpdesk_integration\HelpdeskInterface[]
+   * @return HelpdeskInterface[]
    *   The list of active helpdesk instances.
    */
   public function getHelpdeskInstancesForUser(UserInterface $user): array {
@@ -110,7 +110,7 @@ class Service {
   /**
    * Get a list of all installed helpdesk plugins.
    *
-   * @return \Drupal\helpdesk_integration\PluginInterface[]
+   * @return PluginInterface[]
    *   The list of installed helpdesk plugins.
    */
   public function getPluginInstances(): array {
@@ -132,13 +132,13 @@ class Service {
    * @param string $plugin_id
    *   The ID of the plugin which should be returned.
    *
-   * @return \Drupal\helpdesk_integration\PluginInterface
+   * @return PluginInterface
    *   The helpdesk plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getPluginInstance($plugin_id): PluginInterface {
-    /** @var \Drupal\helpdesk_integration\PluginInterface $instance */
+    /** @var PluginInterface $instance */
     $instance = $this->pluginManager->createInstance($plugin_id);
     return $instance;
   }
@@ -154,10 +154,10 @@ class Service {
    * This rule engine is intended to be extended with more sophisticated
    * conditions in later versions of this module.
    *
-   * @param \Drupal\helpdesk_integration\IssueInterface $issue
+   * @param IssueInterface $issue
    *   The issue entity for which the helpdesk should be determined.
    *
-   * @return \Drupal\helpdesk_integration\HelpdeskInterface
+   * @return HelpdeskInterface
    *   The determined helpdesk entity.
    *
    * @throws \Exception
@@ -177,7 +177,7 @@ class Service {
   /**
    * Find and return the default helpdesk entity.
    *
-   * @return \Drupal\helpdesk_integration\HelpdeskInterface
+   * @return HelpdeskInterface
    *   The default helpdesk entity.
    *
    * @throws \Exception
@@ -194,7 +194,7 @@ class Service {
   /**
    * Find and return the helpdesk entity with the given id.
    *
-   * @return \Drupal\helpdesk_integration\HelpdeskInterface
+   * @return HelpdeskInterface
    *   The default helpdesk entity.
    *
    * @throws \Exception
@@ -211,11 +211,11 @@ class Service {
   /**
    * Mark an issue as resolved and submit change to remote helpdesk.
    *
-   * @param \Drupal\helpdesk_integration\IssueInterface $issue
+   * @param IssueInterface $issue
    *   The issue entity to which should be marked as resolved.
    */
   public function resolveIssue(IssueInterface $issue): void {
-    /** @var \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk */
+    /** @var HelpdeskInterface $helpdesk */
     $helpdesk = Helpdesk::load($issue->get('helpdesk')->value);
     try {
       $helpdesk->getPlugin()->resolveIssue($helpdesk, $issue);
@@ -242,16 +242,16 @@ class Service {
   /**
    * Add the new comment to its issue on the remote helpdesk.
    *
-   * @param \Drupal\comment\CommentInterface $comment
+   * @param CommentInterface $comment
    *   The comment entity.
    */
   public function addCommentToIssue(CommentInterface $comment): void {
     if ($comment->bundle() !== 'helpdesk_issue_comment' || !empty($comment->get('field_extid')->value)) {
       return;
     }
-    /** @var \Drupal\helpdesk_integration\IssueInterface $issue */
+    /** @var IssueInterface $issue */
     $issue = $comment->getCommentedEntity();
-    /** @var \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk */
+    /** @var HelpdeskInterface $helpdesk */
     $helpdesk = Helpdesk::load($issue->get('helpdesk')->value);
     try {
       if(!$helpdesk->getPlugin()->isUserLocked($helpdesk, $issue->getOwner())) {
@@ -279,9 +279,9 @@ class Service {
    *
    * @param string $type
    *   The object type to update, can be "users" or "issues".
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk entity to/from which the update/sync should be performed.
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   Optional, the user entity which is related to the update/sync.
    * @param bool $force
    *   Optional, if TRUE the update/sync is performed regardless of any
@@ -290,8 +290,8 @@ class Service {
    *   If an array is given, this callback does NOT update users directly but
    *   adds a Batch API compatible operation to the array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws PluginException
+   * @throws HelpdeskPluginException
    */
   protected function updateAll($type, HelpdeskInterface $helpdesk, UserInterface $user = NULL, $force = FALSE, array &$batch = NULL) {
     $plugin = $helpdesk->getPlugin();
@@ -311,11 +311,11 @@ class Service {
    *
    * @param string $type
    *   The object type to update, can be "users" or "issues".
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface|null $helpdesk
+   * @param HelpdeskInterface|null $helpdesk
    *   Optional, the helpdesk entity to/from which the update/sync should be
    *   performed. If not provided, the update/sync will be performed with all
    *   active helpdesks.
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   Optional, the user entity which is related to the update/sync.
    * @param bool $force
    *   Optional, if TRUE the update/sync is performed regardless of any
diff --git a/src/UserPostCreationEvent.php b/src/UserPostCreationEvent.php
index 74bb929..33bd9fa 100644
--- a/src/UserPostCreationEvent.php
+++ b/src/UserPostCreationEvent.php
@@ -3,12 +3,13 @@
 
 namespace Drupal\helpdesk_integration;
 
+use Symfony\Contracts\EventDispatcher\Event;
 /**
  * Event class after successfully created user.
  *
  * @package Drupal\helpdesk_integration
  */
-class UserPostCreationEvent extends \Symfony\Contracts\EventDispatcher\Event {
+class UserPostCreationEvent extends Event {
 
   protected $user_id;
 
