diff --git a/src/Annotation/TetherStatsChartRenderer.php b/src/Annotation/TetherStatsChartRenderer.php
index e052486..a45d720 100644
--- a/src/Annotation/TetherStatsChartRenderer.php
+++ b/src/Annotation/TetherStatsChartRenderer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tether_stats\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -27,7 +28,7 @@ class TetherStatsChartRenderer extends Plugin {
   /**
    * The human-readable name of the chart renderer tool.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
diff --git a/src/Chart/TetherStatsChart.php b/src/Chart/TetherStatsChart.php
index e8c3f89..20eaf17 100644
--- a/src/Chart/TetherStatsChart.php
+++ b/src/Chart/TetherStatsChart.php
@@ -12,14 +12,14 @@ abstract class TetherStatsChart {
   /**
    * The TetherStatsChartSchema object used to define this chart.
    *
-   * @var \Drupal\tether_stats\Chart\TetherStatsChartSchema
+   * @var TetherStatsChartSchema
    */
   protected $schema;
 
   /**
    * The analytics storage.
    *
-   * @var \Drupal\tether_stats\TetherStatsAnalyticsStorageInterface
+   * @var TetherStatsAnalyticsStorageInterface
    */
   protected $storage;
 
@@ -44,7 +44,7 @@ abstract class TetherStatsChart {
    *   The schema object which describes what kind of chart to build.
    * @param \DateTime $date_start
    *   The start time for the data period.
-   * @param \Drupal\tether_stats\TetherStatsAnalyticsStorageInterface $storage
+   * @param TetherStatsAnalyticsStorageInterface $storage
    *   The analytics storage.
    */
   public function __construct(TetherStatsChartSchema $schema, \DateTime $date_start, TetherStatsAnalyticsStorageInterface $storage) {
@@ -87,7 +87,7 @@ abstract class TetherStatsChart {
   /**
    * Gets the schema being used by this chart.
    *
-   * @return \Drupal\tether_stats\Chart\TetherStatsChartSchema
+   * @return TetherStatsChartSchema
    *   The chart schema.
    */
   public function getSchema() {
diff --git a/src/Chart/TetherStatsChartSchema.php b/src/Chart/TetherStatsChartSchema.php
index 987524a..9fd0e58 100644
--- a/src/Chart/TetherStatsChartSchema.php
+++ b/src/Chart/TetherStatsChartSchema.php
@@ -62,7 +62,7 @@ abstract class TetherStatsChartSchema {
    *
    * @param \DateTime $date_start
    *   The start date for the period of data to be displayed by the chart.
-   * @param \Drupal\tether_stats\TetherStatsAnalyticsStorageInterface $storage
+   * @param TetherStatsAnalyticsStorageInterface $storage
    *   The analytics storage.
    *
    * @return TetherStatsChart
diff --git a/src/Chart/TetherStatsPieChart.php b/src/Chart/TetherStatsPieChart.php
index 4f15aa9..9cb01f0 100644
--- a/src/Chart/TetherStatsPieChart.php
+++ b/src/Chart/TetherStatsPieChart.php
@@ -28,7 +28,7 @@ class TetherStatsPieChart extends TetherStatsChart {
    *   The schema object which describes what kind of chart to build.
    * @param \DateTime $date_start
    *   The start time for the data period.
-   * @param \Drupal\tether_stats\TetherStatsAnalyticsStorageInterface $storage
+   * @param TetherStatsAnalyticsStorageInterface $storage
    *   The analytics storage.
    */
   public function __construct(TetherStatsPieChartSchema $schema, \DateTime $date_start, TetherStatsAnalyticsStorageInterface $storage) {
diff --git a/src/Chart/TetherStatsSteppedChart.php b/src/Chart/TetherStatsSteppedChart.php
index 78f627e..52665de 100644
--- a/src/Chart/TetherStatsSteppedChart.php
+++ b/src/Chart/TetherStatsSteppedChart.php
@@ -23,7 +23,7 @@ abstract class TetherStatsSteppedChart extends TetherStatsChart {
    *   The schema object which describes what kind of chart to build.
    * @param \DateTime $date_start
    *   The start time for the data period.
-   * @param \Drupal\tether_stats\TetherStatsAnalyticsStorageInterface $storage
+   * @param TetherStatsAnalyticsStorageInterface $storage
    *   The analytics storage.
    */
   public function __construct(TetherStatsSteppedChartSchema $schema, \DateTime $date_start, TetherStatsAnalyticsStorageInterface $storage) {
diff --git a/src/Chart/TetherStatsSteppedChartSchemaInterface.php b/src/Chart/TetherStatsSteppedChartSchemaInterface.php
index f886878..38e2604 100644
--- a/src/Chart/TetherStatsSteppedChartSchemaInterface.php
+++ b/src/Chart/TetherStatsSteppedChartSchemaInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tether_stats\Chart;
 
+use Drupal\tether_stats\Exception\TetherStatsInvalidDateIntervalException;
 /**
  * Interface for TetherStatsSteppedChartSchema.
  */
@@ -26,7 +27,7 @@ interface TetherStatsSteppedChartSchemaInterface {
    *   Unlike $max_domain_ticks, this excludes any domainStepMultiplier
    *   adjustment to reduce the number of ticks.
    *
-   * @throws \Drupal\tether_stats\Exception\TetherStatsInvalidDateIntervalException
+   * @throws TetherStatsInvalidDateIntervalException
    *   The $date_start must be less than the $date_finish.
    */
   public function calcDomainStep(\DateTime $date_start, \DateTime $date_finish, $max_domain_ticks = 12, $domain_step_threshold = 32);
diff --git a/src/Controller/TetherStatsAutocompleteController.php b/src/Controller/TetherStatsAutocompleteController.php
index 4350fe6..e9a8007 100644
--- a/src/Controller/TetherStatsAutocompleteController.php
+++ b/src/Controller/TetherStatsAutocompleteController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tether_stats\Controller;
 
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\Query\QueryInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,14 +17,14 @@ class TetherStatsAutocompleteController implements ContainerInjectionInterface {
   /**
    * Derivative entity query interface.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $derivativeEntityQuery;
 
   /**
    * Constructs a new TetherStatsAutocompleteController object.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $derivative_entity_query
+   * @param QueryInterface $derivative_entity_query
    *   The entity query service.
    */
   public function __construct(QueryInterface $derivative_entity_query) {
@@ -47,10 +48,10 @@ class TetherStatsAutocompleteController implements ContainerInjectionInterface {
    * requests made by the element finder form. The output is a JSON object of
    * plain-text derivative name suggestions, keyed by the user-entered value.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse|\Symfony\Component\HttpFoundation\Response
+   * @return JsonResponse|Response
    *   When valid derivative name is specified, a JSON response containing the
    *   autocomplete suggestions for names. Otherwise a normal response
    *   containing an error message.
diff --git a/src/Controller/TetherStatsChartController.php b/src/Controller/TetherStatsChartController.php
index 187d36d..aa739f9 100644
--- a/src/Controller/TetherStatsChartController.php
+++ b/src/Controller/TetherStatsChartController.php
@@ -17,14 +17,14 @@ class TetherStatsChartController implements ContainerInjectionInterface {
   /**
    * The Tether Stats manager service.
    *
-   * @var \Drupal\tether_stats\TetherStatsManagerInterface
+   * @var TetherStatsManagerInterface
    */
   protected $manager;
 
   /**
    * The error logger for the 'tether_stats' channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -40,11 +40,11 @@ class TetherStatsChartController implements ContainerInjectionInterface {
   /**
    * Constructor for a TetherStatsChartController.
    *
-   * @param \Drupal\tether_stats\TetherStatsManagerInterface $manager
+   * @param TetherStatsManagerInterface $manager
    *   The Tether Stats manager service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The log channel.
-   * @param \Drupal\Core\TempStore\PrivateTempStore $temp_store
+   * @param PrivateTempStore $temp_store
    *   The private temporary storage for tether_stats.
    */
   protected function __construct(TetherStatsManagerInterface $manager, LoggerInterface $logger, PrivateTempStore $temp_store) {
@@ -69,7 +69,7 @@ class TetherStatsChartController implements ContainerInjectionInterface {
   /**
    * Retrieves new chart data for iteration.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response
    */
   public function iterate() {
diff --git a/src/Controller/TetherStatsOverviewController.php b/src/Controller/TetherStatsOverviewController.php
index a1da925..105c848 100644
--- a/src/Controller/TetherStatsOverviewController.php
+++ b/src/Controller/TetherStatsOverviewController.php
@@ -24,14 +24,14 @@ class TetherStatsOverviewController implements ContainerInjectionInterface {
   /**
    * The Tether Stats manager service.
    *
-   * @var \Drupal\tether_stats\TetherStatsManagerInterface
+   * @var TetherStatsManagerInterface
    */
   protected $manager;
 
   /**
    * Constructor for a TetherStatsOverviewController.
    *
-   * @param \Drupal\tether_stats\TetherStatsManagerInterface $manager
+   * @param TetherStatsManagerInterface $manager
    *   The Tether Stats manager service.
    */
   protected function __construct(TetherStatsManagerInterface $manager) {
@@ -62,7 +62,7 @@ class TetherStatsOverviewController implements ContainerInjectionInterface {
       ];
 
       $finish_date = new \DateTime();
-      $finish_date->setTimestamp(REQUEST_TIME);
+      $finish_date->setTimestamp(\Drupal::time()->getRequestTime());
 
       // Borrow a stepped chart method to normalize the current time to
       // the start of the current day.
@@ -227,7 +227,7 @@ class TetherStatsOverviewController implements ContainerInjectionInterface {
           }
 
           $finish_date = new \DateTime();
-          $finish_date->setTimestamp(REQUEST_TIME);
+          $finish_date->setTimestamp(\Drupal::time()->getRequestTime());
 
           // Borrow a stepped chart method to normalize the current time to
           // the start of the current day.
diff --git a/src/Controller/TetherStatsTrackController.php b/src/Controller/TetherStatsTrackController.php
index 2493449..7113b2e 100644
--- a/src/Controller/TetherStatsTrackController.php
+++ b/src/Controller/TetherStatsTrackController.php
@@ -22,50 +22,50 @@ class TetherStatsTrackController implements ContainerInjectionInterface {
   /**
    * The Tether Stats manager service.
    *
-   * @var \Drupal\tether_stats\TetherStatsManagerInterface
+   * @var TetherStatsManagerInterface
    */
   protected $manager;
 
   /**
    * The error logger for the 'tether_stats' channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructor for a TetherStatsTrackController.
    *
-   * @param \Drupal\tether_stats\TetherStatsManagerInterface $manager
+   * @param TetherStatsManagerInterface $manager
    *   The Tether Stats manager service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The log channel.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   protected function __construct(TetherStatsManagerInterface $manager, LoggerInterface $logger, AccountProxyInterface $account, RequestStack $request_stack, ModuleHandlerInterface $module_handler) {
@@ -112,10 +112,10 @@ class TetherStatsTrackController implements ContainerInjectionInterface {
    * This callback logs activities and impressions in the database based on
    * instructions in the query string.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response
    */
-  public function track($event_time = REQUEST_TIME) {
+  public function track($event_time = \Drupal::time()->getRequestTime()) {
 
     $response_json = [];
 
diff --git a/src/Event/TetherStatsRequestToElementEvent.php b/src/Event/TetherStatsRequestToElementEvent.php
index 761c99c..ad2ad59 100644
--- a/src/Event/TetherStatsRequestToElementEvent.php
+++ b/src/Event/TetherStatsRequestToElementEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tether_stats\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\tether_stats\TetherStatsIdentitySetInterface;
 
@@ -16,14 +16,14 @@ class TetherStatsRequestToElementEvent extends Event {
    *
    * Once set through setIdentitySet(), this event stops propagation.
    *
-   * @var \Drupal\tether_stats\TetherStatsIdentitySetInterface
+   * @var TetherStatsIdentitySetInterface
    */
   protected $identitySet;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -39,7 +39,7 @@ class TetherStatsRequestToElementEvent extends Event {
   /**
    * Constructor for TetherStatsElementEvent.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    * @param string $request_uri
    *   The master request URI.
@@ -64,7 +64,7 @@ class TetherStatsRequestToElementEvent extends Event {
   /**
    * Gets the identity set.
    *
-   * @return \Drupal\tether_stats\TetherStatsIdentitySetInterface|null
+   * @return TetherStatsIdentitySetInterface|null
    *   The TetherStatsIdentitySet object or null if it has not been set.
    */
   public function getIdentityset() {
@@ -86,7 +86,7 @@ class TetherStatsRequestToElementEvent extends Event {
   /**
    * Gets the current route match.
    *
-   * @return \Drupal\Core\Routing\RouteMatchInterface
+   * @return RouteMatchInterface
    *   The route match inferface.
    */
   public function getRouteMatch() {
@@ -104,7 +104,7 @@ class TetherStatsRequestToElementEvent extends Event {
    * uncertain, TetherStatsIdentitySet::isValid() should be executed and
    * any exceptions handled.
    *
-   * @param \Drupal\tether_stats\TetherStatsIdentitySetInterface $identity_set
+   * @param TetherStatsIdentitySetInterface $identity_set
    *   The identity set to provide the TetherStatsRequestSubscriber for
    *   assigning a stats element to the request.
    *
diff --git a/src/EventSubscriber/TetherStatsRequestSubscriber.php b/src/EventSubscriber/TetherStatsRequestSubscriber.php
index d81ac44..3206009 100644
--- a/src/EventSubscriber/TetherStatsRequestSubscriber.php
+++ b/src/EventSubscriber/TetherStatsRequestSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\tether_stats\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\tether_stats\TetherStatsRequestFilterInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Config\ImmutableConfig;
@@ -39,39 +39,39 @@ class TetherStatsRequestSubscriber implements EventSubscriberInterface {
   /**
    * The Tether Stats manager service.
    *
-   * @var \Drupal\tether_stats\TetherStatsManagerInterface
+   * @var TetherStatsManagerInterface
    */
   protected $manager;
 
   /**
    * The current route match service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * The request filter class.
    *
-   * @var \Drupal\tether_stats\TetherStatsRequestFilterInterface
+   * @var TetherStatsRequestFilterInterface
    */
   protected $filter;
 
   /**
    * Constructs a TetherStatsRequestSubscriber.
    *
-   * @param \Drupal\tether_stats\TetherStatsManagerInterface $manager
+   * @param TetherStatsManagerInterface $manager
    *   The Tether Stats manager service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $route_match
+   * @param CurrentRouteMatch $route_match
    *   The current route match.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher service.
    */
   public function __construct(TetherStatsManagerInterface $manager, CurrentRouteMatch $route_match, EventDispatcherInterface $dispatcher) {
@@ -107,10 +107,10 @@ class TetherStatsRequestSubscriber implements EventSubscriberInterface {
    *
    * No response will be added to the GetResponseEvent.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The get response event.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
 
     $config = $this->manager->getSettings();
     $request_uri = $event->getRequest()->getRequestUri();
@@ -127,7 +127,7 @@ class TetherStatsRequestSubscriber implements EventSubscriberInterface {
         // set for the current request.
         $element_event = new TetherStatsRequestToElementEvent($this->routeMatch, $request_uri);
 
-        $this->dispatcher->dispatch(TetherStatsEvents::REQUEST_TO_ELEMENT, $element_event);
+        $this->dispatcher->dispatch($element_event, TetherStatsEvents::REQUEST_TO_ELEMENT);
 
         if ($element_event->hasIdentityset()) {
 
@@ -177,7 +177,7 @@ class TetherStatsRequestSubscriber implements EventSubscriberInterface {
    *
    * @param string $request_uri
    *   The request URI string.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The Tether Stats configuration settings.
    *
    * @return bool
@@ -253,7 +253,7 @@ class TetherStatsRequestSubscriber implements EventSubscriberInterface {
    *   TetherStatsRequestFilterInterface::MODE_INCLUDE,
    *   TetherStatsRequestFilterInterface::MODE_EXCLUDE.
    *
-   * @return \Drupal\tether_stats\TetherStatsRequestFilterInterface
+   * @return TetherStatsRequestFilterInterface
    *   The request filter.
    */
   protected function getFilter(array $route_filter_rules, array $url_filter_rules, string $mode) {
diff --git a/src/EventSubscriber/TetherStatsRequestToElementSubscriber.php b/src/EventSubscriber/TetherStatsRequestToElementSubscriber.php
index 0231c97..e7646ba 100644
--- a/src/EventSubscriber/TetherStatsRequestToElementSubscriber.php
+++ b/src/EventSubscriber/TetherStatsRequestToElementSubscriber.php
@@ -44,7 +44,7 @@ class TetherStatsRequestToElementSubscriber implements EventSubscriberInterface
   /**
    * This handler will bind node pages to respective stat elements.
    *
-   * @param \Drupal\tether_stats\Event\TetherStatsRequestToElementEvent $event
+   * @param TetherStatsRequestToElementEvent $event
    *   The request to element event.
    */
   public function onRequestToElement(TetherStatsRequestToElementEvent $event) {
diff --git a/src/Form/TetherStatsDerivativeForm.php b/src/Form/TetherStatsDerivativeForm.php
index 3cc6b56..db0a0b7 100644
--- a/src/Form/TetherStatsDerivativeForm.php
+++ b/src/Form/TetherStatsDerivativeForm.php
@@ -16,23 +16,23 @@ class TetherStatsDerivativeForm extends EntityForm {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The entity type repository service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface
+   * @var EntityTypeRepositoryInterface
    */
   protected $entityTypeRepository;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository service.
    */
   public function __construct(EntityTypeBundleInfoInterface $bundle_info, EntityTypeRepositoryInterface $entity_type_repository) {
diff --git a/src/Form/TetherStatsElementFinderForm.php b/src/Form/TetherStatsElementFinderForm.php
index b826d8d..d72b024 100644
--- a/src/Form/TetherStatsElementFinderForm.php
+++ b/src/Form/TetherStatsElementFinderForm.php
@@ -24,28 +24,28 @@ class TetherStatsElementFinderForm extends FormBase {
   /**
    * The Tether Stats manager service.
    *
-   * @var \Drupal\tether_stats\TetherStatsManagerInterface
+   * @var TetherStatsManagerInterface
    */
   protected $manager;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type repository service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface
+   * @var EntityTypeRepositoryInterface
    */
   protected $entityTypeRepository;
 
   /**
    * The link generator service.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $linkGenerator;
 
@@ -59,15 +59,15 @@ class TetherStatsElementFinderForm extends FormBase {
   /**
    * Form constructor.
    *
-   * @param \Drupal\tether_stats\TetherStatsManagerInterface $manager
+   * @param TetherStatsManagerInterface $manager
    *   The Tether Stats manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository service.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link manager service.
-   * @param \Drupal\Core\TempStore\PrivateTempStore $temp_store
+   * @param PrivateTempStore $temp_store
    *   The private temporary storage for tether_stats.
    */
   public function __construct(TetherStatsManagerInterface $manager, EntityTypeManagerInterface $entity_type_manager, EntityTypeRepositoryInterface $entity_type_repository, LinkGeneratorInterface $link_generator, PrivateTempStore $temp_store) {
diff --git a/src/Form/TetherStatsSettingsForm.php b/src/Form/TetherStatsSettingsForm.php
index f93959a..116dad8 100644
--- a/src/Form/TetherStatsSettingsForm.php
+++ b/src/Form/TetherStatsSettingsForm.php
@@ -263,7 +263,7 @@ class TetherStatsSettingsForm extends ConfigFormBase {
     // provide a lower boundary when iterating chart data.
     if ($form_state->getValue('active') && $config->get('advanced.first_activation_time') == 0 && $form_state->getValue('first_activation_time') == 0) {
 
-      $form_state->setValue('first_activation_time', REQUEST_TIME);
+      $form_state->setValue('first_activation_time', \Drupal::time()->getRequestTime());
     }
 
     if ($form_state->getValue('use_alternate_database')) {
@@ -297,7 +297,7 @@ class TetherStatsSettingsForm extends ConfigFormBase {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The $form_state array for the form this element belongs to.
    *
    * @see form_process_pattern()
@@ -319,7 +319,7 @@ class TetherStatsSettingsForm extends ConfigFormBase {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The $form_state array for the form this element belongs to.
    *
    * @see form_process_pattern()
diff --git a/src/Plugin/tether_stats/Chart/TetherStatsChartRendererGoogle.php b/src/Plugin/tether_stats/Chart/TetherStatsChartRendererGoogle.php
index d4f692e..47dd870 100644
--- a/src/Plugin/tether_stats/Chart/TetherStatsChartRendererGoogle.php
+++ b/src/Plugin/tether_stats/Chart/TetherStatsChartRendererGoogle.php
@@ -30,14 +30,14 @@ class TetherStatsChartRendererGoogle extends PluginBase implements TetherStatsCh
   /**
    * The Tether Stats manager service.
    *
-   * @var \Drupal\tether_stats\TetherStatsManagerInterface
+   * @var TetherStatsManagerInterface
    */
   protected $manager;
 
   /**
    * Storage of private temporary data for the current user.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $privateTempStore;
 
@@ -88,7 +88,7 @@ class TetherStatsChartRendererGoogle extends PluginBase implements TetherStatsCh
       $start = $chart->getDateStart();
       $next = $schema->nextDateTime($start);
       $current_time = new \DateTime();
-      $current_time->setTimestamp(REQUEST_TIME);
+      $current_time->setTimestamp(\Drupal::time()->getRequestTime());
 
       $iterate = [
         'start' => $start,
@@ -133,7 +133,7 @@ class TetherStatsChartRendererGoogle extends PluginBase implements TetherStatsCh
    * Builds the data table to be passed into the arrayToDataTable
    * method of the Google charts API.
    *
-   * @param \Drupal\tether_stats\Chart\TetherStatsChart $chart
+   * @param TetherStatsChart $chart
    *   The chart object.
    *
    * @return array
@@ -163,7 +163,7 @@ class TetherStatsChartRendererGoogle extends PluginBase implements TetherStatsCh
    * When first rendering charts, Google expects the first row to
    * be a row of titles for each column or slice.
    *
-   * @param \Drupal\tether_stats\Chart\TetherStatsChart $chart
+   * @param TetherStatsChart $chart
    *   The chart object.
    *
    * @return array
@@ -194,7 +194,7 @@ class TetherStatsChartRendererGoogle extends PluginBase implements TetherStatsCh
   /**
    * Gets an array of default options for the chart.
    *
-   * @param \Drupal\tether_stats\Chart\TetherStatsChart $chart
+   * @param TetherStatsChart $chart
    *   The chart to be rendered.
    *
    * @return array
@@ -233,7 +233,7 @@ class TetherStatsChartRendererGoogle extends PluginBase implements TetherStatsCh
   /**
    * Gets a human readable label for a domain axis step.
    *
-   * @param \Drupal\tether_stats\Chart\TetherStatsSteppedChartSchema $schema
+   * @param TetherStatsSteppedChartSchema $schema
    *   The stepped chart schema.
    * @param int $step_unixtime
    *   The domain step time in unixtime.
diff --git a/src/Tests/TetherStatsAnalyticsStorageTest.php b/src/Tests/TetherStatsAnalyticsStorageTest.php
index bc53834..f09d4b8 100644
--- a/src/Tests/TetherStatsAnalyticsStorageTest.php
+++ b/src/Tests/TetherStatsAnalyticsStorageTest.php
@@ -64,7 +64,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
     // Extract the top elements within the active range  and test if
     // they line up with what they should be.
     $extracted_top_elements = $this->getAnalyticsStorage()->getTopElementsForActivity(TetherStatsAnalytics::ACTIVITY_HIT, $start, $finish, count($top_element_elids));
-    $this->assertEqual($top_element_elids, $extracted_top_elements, 'Top Elements For Hit Activity Retrieved Successfully.');
+    $this->assertEquals($top_element_elids, $extracted_top_elements, 'Top Elements For Hit Activity Retrieved Successfully.');
   }
 
   /**
@@ -104,17 +104,17 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
 
     // Test element mining method.
     $count = $this->getAnalyticsStorage()->getElementActivityCount($element->getId(), TetherStatsAnalytics::ACTIVITY_HIT, $start, $finish);
-    $this->assertEqual($element_count, $count, 'getElementActivityCount Retrieved Correct Counts.');
+    $this->assertEquals($element_count, $count, 'getElementActivityCount Retrieved Correct Counts.');
 
     // Test all mining method.
     $all_count = $this->getAnalyticsStorage()->getAllActivityCount(TetherStatsAnalytics::ACTIVITY_HIT, $start, $finish);
-    $this->assertEqual($element_count + $other_count, $all_count, 'getAllActivityCount Retrieved Correct Counts.');
+    $this->assertEquals($element_count + $other_count, $all_count, 'getAllActivityCount Retrieved Correct Counts.');
 
     // Test the chronologically sequenced variant.
     $counts = $this->getAnalyticsStorage()->getAllActivityCount(TetherStatsAnalytics::ACTIVITY_HIT, $start, $finish, TetherStatsAnalytics::STEP_HOUR);
     $total_count = array_sum($counts);
 
-    $this->assertEqual($total_count, $all_count, 'getAllActivityCount Produced the Right Sum of Sequenced Results.');
+    $this->assertEquals($total_count, $all_count, 'getAllActivityCount Produced the Right Sum of Sequenced Results.');
   }
 
   /**
@@ -157,7 +157,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
     foreach ($referrer_samples as $inx => $referrer) {
 
       $total_count = $this->getAnalyticsStorage()->getHitActivityWithReferrerCount($referrer_searches[$inx], $start, $finish);
-      $this->assertEqual($referrer_counts[$inx], $total_count, "getHitActivityWithReferrerCount Retrieved Correct Counts for {$referrer_searches[$inx]} search.");
+      $this->assertEquals($referrer_counts[$inx], $total_count, "getHitActivityWithReferrerCount Retrieved Correct Counts for {$referrer_searches[$inx]} search.");
     }
 
     // Generate element specific activity.
@@ -177,7 +177,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
     foreach ($referrer_samples as $inx => $referrer) {
 
       $total_count = $this->getAnalyticsStorage()->getElementHitActivityWithReferrerCount($elid, $referrer_searches[$inx], $start, $finish);
-      $this->assertEqual($referrer_counts[$inx], $total_count, "getElementHitActivityWithReferrerCount Retrieved Correct Counts for {$referrer_searches[$inx]} search.");
+      $this->assertEquals($referrer_counts[$inx], $total_count, "getElementHitActivityWithReferrerCount Retrieved Correct Counts for {$referrer_searches[$inx]} search.");
     }
   }
 
@@ -221,7 +221,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
     foreach ($browser_searches as $inx => $search) {
 
       $total_count = $this->getAnalyticsStorage()->getHitActivityWithBrowserCount($search, $start, $finish);
-      $this->assertEqual($browser_counts[$inx], $total_count, "getHitActivityWithBrowserCount Retrieved Correct Counts for {$search} search.");
+      $this->assertEquals($browser_counts[$inx], $total_count, "getHitActivityWithBrowserCount Retrieved Correct Counts for {$search} search.");
     }
 
     // Generate element specific activity.
@@ -241,7 +241,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
     foreach ($browser_searches as $inx => $search) {
 
       $total_count = $this->getAnalyticsStorage()->getElementHitActivityWithBrowserCount($elid, $search, $start, $finish);
-      $this->assertEqual($browser_counts[$inx], $total_count, "getElementHitActivityWithBrowserCount Retrieved Correct Counts for {$search} search.");
+      $this->assertEquals($browser_counts[$inx], $total_count, "getElementHitActivityWithBrowserCount Retrieved Correct Counts for {$search} search.");
     }
   }
 
@@ -299,7 +299,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
 
     // See if the database count matches.
     $count = $this->getAnalyticsStorage()->getElementImpressedOnElementCount($impressed_element->getId(), $source_element->getId(), $start, $finish);
-    $this->assertEqual($count, $impression_count, 'Method getElementImpressedOnElementCount produced correct count.');
+    $this->assertEquals($count, $impression_count, 'Method getElementImpressedOnElementCount produced correct count.');
 
     $total_element_impressions += $impression_count;
 
@@ -324,7 +324,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
 
     // See if the database count matches.
     $count = $this->getAnalyticsStorage()->getAllElementsImpressedOnElementCount($source_element->getId(), $start, $finish);
-    $this->assertEqual($count, $impression_count + $second_impression_count, 'Method getAllElementsImpressedOnElementCount produced correct count.');
+    $this->assertEquals($count, $impression_count + $second_impression_count, 'Method getAllElementsImpressedOnElementCount produced correct count.');
 
     // Test the getElementImpressedOnNodeBundleCount method.
     $source_element = NULL;
@@ -380,7 +380,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
 
     // See if the database count matches.
     $count = $this->getAnalyticsStorage()->getElementImpressedOnNodeBundleCount($impressed_element->getId(), $bundle, $start, $finish);
-    $this->assertEqual($count, $impression_count, 'Method getElementImpressedOnNodeBundleCount produced correct count.');
+    $this->assertEquals($count, $impression_count, 'Method getElementImpressedOnNodeBundleCount produced correct count.');
 
     $total_element_impressions += $impression_count;
 
@@ -420,14 +420,14 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
 
     // See if the database count matches.
     $count = $this->getAnalyticsStorage()->getElementImpressedOnBaseUrlCount($impressed_element->getId(), $base_url, $start, $finish);
-    $this->assertEqual($count, $impression_count, 'Method getElementImpressedOnBaseUrlCount produced correct count.');
+    $this->assertEquals($count, $impression_count, 'Method getElementImpressedOnBaseUrlCount produced correct count.');
 
     $total_element_impressions += $impression_count;
 
     // See if the impressed element total impressed count matches,
     // now that it's been impressed several times above.
     $count = $this->getAnalyticsStorage()->getElementImpressedAnywhereCount($impressed_element->getId(), $start, $finish);
-    $this->assertEqual($count, $total_element_impressions, 'Method getElementImpressedAnywhereCount produced correct count.');
+    $this->assertEquals($count, $total_element_impressions, 'Method getElementImpressedAnywhereCount produced correct count.');
 
   }
 
diff --git a/src/Tests/TetherStatsIdentitySetTest.php b/src/Tests/TetherStatsIdentitySetTest.php
index 01a6bd5..f310537 100644
--- a/src/Tests/TetherStatsIdentitySetTest.php
+++ b/src/Tests/TetherStatsIdentitySetTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tether_stats\Tests;
 
+use Drupal\node\NodeInterface;
 use Drupal\tether_stats\TetherStatsIdentitySet;
 use Drupal\tether_stats\Entity\TetherStatsDerivative;
 use Drupal\tether_stats\Exception\TetherStatsIncompleteIdentitySetException;
@@ -19,14 +20,14 @@ class TetherStatsIdentitySetTest extends TetherStatsTestBase {
   /**
    * Simple page node for testing.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $testPage;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create test page.
diff --git a/src/Tests/TetherStatsStorageTest.php b/src/Tests/TetherStatsStorageTest.php
index ef02c15..5888a57 100644
--- a/src/Tests/TetherStatsStorageTest.php
+++ b/src/Tests/TetherStatsStorageTest.php
@@ -86,7 +86,7 @@ class TetherStatsStorageTest extends TetherStatsTestBase {
     $set = $this->getRandomIdentitySet();
     $set->set('derivative', 'derivative-simple');
     $element = $this->getStorage()->createElementFromIdentitySet($set);
-    $this->assert(isset($element), 'Successfully created an element with a derivative.');
+    $this->assertTrue(isset($element), 'Successfully created an element with a derivative.');
 
     // Test derivative usage.
     $num_elements = mt_rand(1, 5);
@@ -103,7 +103,7 @@ class TetherStatsStorageTest extends TetherStatsTestBase {
 
     $count = $this->getStorage()->getDerivativeUsageCount('derivative-simple');
 
-    $this->assertEqual($count, $num_elements, "Derivative usage count {$count} was counted correctly.");
+    $this->assertEquals($count, $num_elements, "Derivative usage count {$count} was counted correctly.");
 
   }
 
@@ -142,18 +142,18 @@ class TetherStatsStorageTest extends TetherStatsTestBase {
 
     $this->assertTrue(!empty($activity), 'An activity was recorded successfully.');
 
-    $this->assertEqual($activity->type, TetherStatsAnalytics::ACTIVITY_HIT, 'Type field same in recorded activity.');
-    $this->assertEqual($activity->uid, 1, 'Uid field same in recorded activity.');
-    $this->assertEqual($activity->referrer, 'referrer', 'Referrer field same in recorded activity.');
-    $this->assertEqual($activity->ip_address, '127.0.0.1', 'IP address field same in recorded activity.');
-    $this->assertEqual($activity->sid, $fake_sid, 'Session Id field same in recorded activity.');
-    $this->assertEqual($activity->browser, 'browser A', 'Browser field same in recorded activity.');
-    $this->assertEqual($activity->created, $time->getTimestamp(), 'Created field same in recorded activity.');
-
-    $this->assertEqual($activity->hour, $hour->getTimestamp(), 'Hour field correct in recorded activity.');
-    $this->assertEqual($activity->day, $day->getTimestamp(), 'Day field correct in recorded activity.');
-    $this->assertEqual($activity->month, $month->getTimestamp(), 'Month field correct in recorded activity.');
-    $this->assertEqual($activity->year, $year->getTimestamp(), 'Year field correct in recorded activity.');
+    $this->assertEquals($activity->type, TetherStatsAnalytics::ACTIVITY_HIT, 'Type field same in recorded activity.');
+    $this->assertEquals($activity->uid, 1, 'Uid field same in recorded activity.');
+    $this->assertEquals($activity->referrer, 'referrer', 'Referrer field same in recorded activity.');
+    $this->assertEquals($activity->ip_address, '127.0.0.1', 'IP address field same in recorded activity.');
+    $this->assertEquals($activity->sid, $fake_sid, 'Session Id field same in recorded activity.');
+    $this->assertEquals($activity->browser, 'browser A', 'Browser field same in recorded activity.');
+    $this->assertEquals($activity->created, $time->getTimestamp(), 'Created field same in recorded activity.');
+
+    $this->assertEquals($activity->hour, $hour->getTimestamp(), 'Hour field correct in recorded activity.');
+    $this->assertEquals($activity->day, $day->getTimestamp(), 'Day field correct in recorded activity.');
+    $this->assertEquals($activity->month, $month->getTimestamp(), 'Month field correct in recorded activity.');
+    $this->assertEquals($activity->year, $year->getTimestamp(), 'Year field correct in recorded activity.');
 
     // Track second activity.
     $this->getStorage()->trackActivity($source_element->getId(), TetherStatsAnalytics::ACTIVITY_HIT, $time->getTimestamp(), '127.0.0.1', $fake_sid, 'browser B', 'referrer', 1);
diff --git a/src/Tests/TetherStatsTestBase.php b/src/Tests/TetherStatsTestBase.php
index dd6bcfa..0929b4d 100644
--- a/src/Tests/TetherStatsTestBase.php
+++ b/src/Tests/TetherStatsTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tether_stats\Tests;
 
+use Drupal\tether_stats\TetherStatsStorageInterface;
+use Drupal\tether_stats\TetherStatsAnalyticsStorageInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\tether_stats\TetherStatsAnalytics;
 use Drupal\tether_stats\TetherStatsIdentitySet;
@@ -33,7 +35,7 @@ abstract class TetherStatsTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -81,7 +83,7 @@ abstract class TetherStatsTestBase extends BrowserTestBase {
    *   together to create an element randomly from amongst the delineated
    *   categories.
    *
-   * @return \Drupal\tether_stats\TetherStatsIdentitySet
+   * @return TetherStatsIdentitySet
    *   The random identity set.
    */
   protected function getRandomIdentitySet($category = 0b00000111) {
@@ -305,7 +307,7 @@ abstract class TetherStatsTestBase extends BrowserTestBase {
   /**
    * Gets the basic storage class.
    *
-   * @return \Drupal\tether_stats\TetherStatsStorageInterface
+   * @return TetherStatsStorageInterface
    *   The storage object.
    */
   protected function getStorage() {
@@ -321,7 +323,7 @@ abstract class TetherStatsTestBase extends BrowserTestBase {
   /**
    * Gets the analytics storage class.
    *
-   * @return \Drupal\tether_stats\TetherStatsAnalyticsStorageInterface
+   * @return TetherStatsAnalyticsStorageInterface
    *   The analytics data mining storage object.
    */
   protected function getAnalyticsStorage() {
diff --git a/src/TetherStatsAnalyticsStorage.php b/src/TetherStatsAnalyticsStorage.php
index a7657b1..3e2828b 100644
--- a/src/TetherStatsAnalyticsStorage.php
+++ b/src/TetherStatsAnalyticsStorage.php
@@ -13,14 +13,14 @@ class TetherStatsAnalyticsStorage implements TetherStatsAnalyticsStorageInterfac
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Constructs a TetherStatsAnalyticsStorage object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(Connection $database) {
@@ -260,7 +260,7 @@ class TetherStatsAnalyticsStorage implements TetherStatsAnalyticsStorageInterfac
    * This is a helper method that will complete data select queries, which all
    * have common parts, then execute the query.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $select
+   * @param SelectInterface $select
    *   The base select query to complete and execute.
    * @param string $step
    *   The domain step to aggregate over as defined in TetherStatsAnalytics.php.
diff --git a/src/TetherStatsChartRendererInterface.php b/src/TetherStatsChartRendererInterface.php
index 1985836..966d93a 100644
--- a/src/TetherStatsChartRendererInterface.php
+++ b/src/TetherStatsChartRendererInterface.php
@@ -18,7 +18,7 @@ interface TetherStatsChartRendererInterface {
    * Contructs the render array to display the chart using the the appropriate
    * chart provider.
    *
-   * @param \Drupal\tether_stats\Chart\TetherStatsChart $chart
+   * @param TetherStatsChart $chart
    *   The chart object to render.
    * @param array $options
    *   An array of options to send to the chart renderer.
@@ -36,7 +36,7 @@ interface TetherStatsChartRendererInterface {
    * Used for converting the raw data table generated by the chart class into
    * a data table suitable to send to the handling chart API.
    *
-   * @param \Drupal\tether_stats\Chart\TetherStatsChart $chart
+   * @param TetherStatsChart $chart
    *   The chart object.
    *
    * @return array
diff --git a/src/TetherStatsChartRendererPluginManager.php b/src/TetherStatsChartRendererPluginManager.php
index 943223a..0222c91 100644
--- a/src/TetherStatsChartRendererPluginManager.php
+++ b/src/TetherStatsChartRendererPluginManager.php
@@ -24,9 +24,9 @@ class TetherStatsChartRendererPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/TetherStatsIdentitySet.php b/src/TetherStatsIdentitySet.php
index bfc106b..66b6a20 100644
--- a/src/TetherStatsIdentitySet.php
+++ b/src/TetherStatsIdentitySet.php
@@ -133,19 +133,19 @@ class TetherStatsIdentitySet extends ParameterBag implements TetherStatsIdentity
    * @throws \Drupal\tether_stats\Exception\TetherStatsInvalidEntityException
    *   Thrown when an invalid entity_type or entity_id combination is
    *   provided.
-   * @throws \Drupal\tether_stats\Exception\TetherStatsIncompleteIdentitySetException
+   * @throws TetherStatsIncompleteIdentitySetException
    *   Thrown when there are insufficient parameters set to complete the
    *   identity set for one of the states A, B, and C above.
-   * @throws \Drupal\tether_stats\Exception\TetherStatsEntityInvalidException
+   * @throws TetherStatsEntityInvalidException
    *   Thrown when entity_type and entity_id parameters are provided but the
    *   entity is invalid.
-   * @throws \Drupal\tether_stats\Exception\TetherStatsDerivativeNotFoundException
+   * @throws TetherStatsDerivativeNotFoundException
    *   Thrown when a "dervative" parameter was provided that but no derivative
    *   by that name exists.
-   * @throws \Drupal\tether_stats\Exception\TetherStatsDerivativeDisabledException
+   * @throws TetherStatsDerivativeDisabledException
    *   Thrown when a "dervative" parameter was provided but that derivaitive is
    *   not enabled for use.
-   * @throws \Drupal\tether_stats\Exception\TetherStatsDerivativeInvalidException
+   * @throws TetherStatsDerivativeInvalidException
    *   Thrown when the derivative parameter provided can not be applied to
    *   to the entity given by entity_id and entity_type.
    *
diff --git a/src/TetherStatsIdentitySetInterface.php b/src/TetherStatsIdentitySetInterface.php
index 692a00d..61fa240 100644
--- a/src/TetherStatsIdentitySetInterface.php
+++ b/src/TetherStatsIdentitySetInterface.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\tether_stats;
 
+use Drupal\tether_stats\Exception\TetherStatsIncompleteIdentitySetException;
+use Drupal\tether_stats\Exception\TetherStatsEntityInvalidException;
+use Drupal\tether_stats\Exception\TetherStatsDerivativeNotFoundException;
+use Drupal\tether_stats\Exception\TetherStatsDerivativeDisabledException;
+use Drupal\tether_stats\Exception\TetherStatsDerivativeInvalidException;
 /**
  * Interface for TetherStatsIdentitySet.
  */
@@ -136,19 +141,19 @@ interface TetherStatsIdentitySetInterface {
    * @throws \Drupal\tether_stats\Exception\TetherStatsInvalidEntityException
    *   Thrown when an invalid entity_type or entity_id combination is
    *   provided.
-   * @throws \Drupal\tether_stats\Exception\TetherStatsIncompleteIdentitySetException
+   * @throws TetherStatsIncompleteIdentitySetException
    *   Thrown when there are insufficient parameters set to complete the
    *   identity set for one of the states A, B, and C above.
-   * @throws \Drupal\tether_stats\Exception\TetherStatsEntityInvalidException
+   * @throws TetherStatsEntityInvalidException
    *   Thrown when entity_type and entity_id parameters are provided but the
    *   entity is invalid.
-   * @throws \Drupal\tether_stats\Exception\TetherStatsDerivativeNotFoundException
+   * @throws TetherStatsDerivativeNotFoundException
    *   Thrown when a "dervative" parameter was provided that but no derivative
    *   by that name exists.
-   * @throws \Drupal\tether_stats\Exception\TetherStatsDerivativeDisabledException
+   * @throws TetherStatsDerivativeDisabledException
    *   Thrown when a "dervative" parameter was provided but that derivaitive is
    *   not enabled for use.
-   * @throws \Drupal\tether_stats\Exception\TetherStatsDerivativeInvalidException
+   * @throws TetherStatsDerivativeInvalidException
    *   Thrown when the derivative parameter provided can not be applied to
    *   to the entity given by entity_id and entity_type.
    *
diff --git a/src/TetherStatsManager.php b/src/TetherStatsManager.php
index 15faa99..c1f9395 100644
--- a/src/TetherStatsManager.php
+++ b/src/TetherStatsManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tether_stats;
 
+use Drupal\Core\DependencyInjection\ClassResolverInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -26,78 +28,78 @@ class TetherStatsManager implements TetherStatsManagerInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;
 
   /**
    * The class resolver service.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   private $classResolver;
 
   /**
    * The database storage object for activity tracking.
    *
-   * @var \Drupal\tether_stats\TetherStatsStorageInterface
+   * @var TetherStatsStorageInterface
    */
   private $storage;
 
   /**
    * The database storage object for data mining and analytics.
    *
-   * @var \Drupal\tether_stats\TetherStatsAnalyticsStorageInterface
+   * @var TetherStatsAnalyticsStorageInterface
    */
   private $analyticsStorage;
 
   /**
    * The stats element object representing the current page request.
    *
-   * @var \Drupal\tether_stats\TetherStatsElementInterface
+   * @var TetherStatsElementInterface
    */
   private $element;
 
   /**
    * The Tether Stats configuration settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $settings;
 
   /**
    * The error logger for the 'tether_stats' channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * The link generator service.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   private $linkGenerator;
 
   /**
    * The link generator service.
    *
-   * @var \Drupal\tether_stats\TetherStatsChartRendererPluginManager
+   * @var TetherStatsChartRendererPluginManager
    */
   private $chartPluginManager;
 
   /**
    * Constructs the TetherStatsManager service.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The error logger.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator service.
-   * @param \Drupal\tether_stats\TetherStatsChartRendererPluginManager $chart_plugin_manager
+   * @param TetherStatsChartRendererPluginManager $chart_plugin_manager
    *   The chart renderer plugin manager.
    */
   public function __construct(Connection $database, LoggerInterface $logger, ConfigFactoryInterface $config_factory, LinkGeneratorInterface $link_generator, TetherStatsChartRendererPluginManager $chart_plugin_manager) {
diff --git a/src/TetherStatsManagerInterface.php b/src/TetherStatsManagerInterface.php
index 87757e9..ed372ee 100644
--- a/src/TetherStatsManagerInterface.php
+++ b/src/TetherStatsManagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tether_stats;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Url;
 
 /**
@@ -28,7 +30,7 @@ interface TetherStatsManagerInterface {
   /**
    * Gets the Tether Stats configuration settings.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The configuration settings.
    */
   public function getSettings();
@@ -36,7 +38,7 @@ interface TetherStatsManagerInterface {
   /**
    * Gets the Tether Stats logger channel.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger channel.
    */
   public function getLogger();
@@ -76,7 +78,7 @@ interface TetherStatsManagerInterface {
   /**
    * Gets the chart renderer.
    *
-   * @return \Drupal\tether_stats\TetherStatsChartRendererInterface
+   * @return TetherStatsChartRendererInterface
    *   The chart renderer object.
    */
   public function getChartRenderer();
@@ -99,7 +101,7 @@ interface TetherStatsManagerInterface {
    *   the link text, use a render array or an already sanitized string such as
    *   the output of \Drupal\Component\Utility\Xss::filter() or
    *   \Drupal\Component\Utility\SafeMarkup::format().
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL object used for the link. Amongst its options, the following may
    *   be set to affect the generated link: - attributes: An associative array
    *   of HTML attributes to apply to the anchor tag. If element 'class' is
@@ -117,7 +119,7 @@ interface TetherStatsManagerInterface {
    *   an "active" class will be applied to the link. It is important to use
    *   this sparingly since it is usually unnecessary and requires extra
    *   processing.
-   * @param \Drupal\tether_stats\TetherStatsIdentitySetInterface $identity_set
+   * @param TetherStatsIdentitySetInterface $identity_set
    *   The identity set uniquely defining the stats element relative to
    *   which the "click" event should be recorded. If this identity set is
    *   invalid, the tracking will fail.
@@ -132,7 +134,7 @@ interface TetherStatsManagerInterface {
   /**
    * Tests the validity of an identity set and logs any issues.
    *
-   * @param \Drupal\tether_stats\TetherStatsIdentitySetInterface $identity_set
+   * @param TetherStatsIdentitySetInterface $identity_set
    *   The identity set to validate.
    *
    * @return bool
diff --git a/src/TetherStatsStorage.php b/src/TetherStatsStorage.php
index 56868e0..50df8ef 100644
--- a/src/TetherStatsStorage.php
+++ b/src/TetherStatsStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tether_stats;
 
+use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\Database\Connection;
 
 /**
@@ -12,14 +13,14 @@ class TetherStatsStorage implements TetherStatsStorageInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Constructs a TetherStatsStorage object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(Connection $database) {
@@ -97,8 +98,8 @@ class TetherStatsStorage implements TetherStatsStorageInterface {
       if (empty($element_values)) {
 
         $fields = $identity_set->getIdentityParams();
-        $fields['created'] = REQUEST_TIME;
-        $fields['changed'] = REQUEST_TIME;
+        $fields['created'] = \Drupal::time()->getRequestTime();
+        $fields['changed'] = \Drupal::time()->getRequestTime();
         $fields['last_activity'] = 0;
         $fields['count'] = 0;
 
@@ -111,10 +112,10 @@ class TetherStatsStorage implements TetherStatsStorageInterface {
         $element_values = $fields;
         $element_values['elid'] = $elid;
       }
-      elseif ((REQUEST_TIME - $element_values['changed']) >= $config->get('advanced.element_ttl')) {
+      elseif ((\Drupal::time()->getRequestTime() - $element_values['changed']) >= $config->get('advanced.element_ttl')) {
 
         $fields = $identity_set->getIdentityParams();
-        $fields['changed'] = REQUEST_TIME;
+        $fields['changed'] = \Drupal::time()->getRequestTime();
 
         // Elements may sometimes need to be updated as entity urls may change.
         // The time to live setting will determine how long an element remains
@@ -302,7 +303,7 @@ class TetherStatsStorage implements TetherStatsStorageInterface {
    * @param TetherStatsIdentitySetInterface $identity_set
    *   The identity set to construct the query for.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   The select object.
    */
   private function buildElementSelectQueryFromIdentitySet(TetherStatsIdentitySetInterface $identity_set) {
diff --git a/tether_stats.api.php b/tether_stats.api.php
index 816eaca..f5bfc32 100644
--- a/tether_stats.api.php
+++ b/tether_stats.api.php
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\tether_stats\TetherStatsElementInterface;
 /**
  * @file
  * Hooks provided by the Tether Stats module.
  */
-
 /**
  * Populate the data column when tracking an activity.
  *
@@ -12,7 +12,7 @@
  * tether_stats_activity_log table. The data will be serialized and added to
  * the "data" column for the activity being tracked.
  *
- * @param \Drupal\tether_stats\TetherStatsElementInterface $element
+ * @param TetherStatsElementInterface $element
  *   The stats element associated with the activity.
  * @param array $params
  *   The query string parameters passed on to the track controller.
