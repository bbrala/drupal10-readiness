diff --git a/src/Controller/DownloadController.php b/src/Controller/DownloadController.php
index 6b7c0ce..842564b 100644
--- a/src/Controller/DownloadController.php
+++ b/src/Controller/DownloadController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\media_entity_download\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
@@ -22,32 +24,32 @@ class DownloadController extends ControllerBase {
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * DownloadController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request object.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
    */
   public function __construct(RequestStack $request_stack, FileSystemInterface $file_system, StreamWrapperManagerInterface $stream_wrapper_manager) {
@@ -70,16 +72,16 @@ class DownloadController extends ControllerBase {
   /**
    * Serves the file upon request.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   A valid media object.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   Serve the file as the response.
    *
    * @throws \Exception
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws NotFoundHttpException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function download(MediaInterface $media) {
     $bundle = $media->bundle();
diff --git a/src/Plugin/Field/FieldFormatter/DownloadLinkFieldFormatter.php b/src/Plugin/Field/FieldFormatter/DownloadLinkFieldFormatter.php
index d40f636..bcc0a1e 100644
--- a/src/Plugin/Field/FieldFormatter/DownloadLinkFieldFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/DownloadLinkFieldFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\media_entity_download\Plugin\Field\FieldFormatter;
 
+use Drupal\file\FileInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -82,7 +83,7 @@ class DownloadLinkFieldFormatter extends LinkFormatter {
       }
 
       // @todo: replace with DI when this issue is fixed: https://www.drupal.org/node/2053415
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = \Drupal::entityTypeManager()->getStorage('file')->load($item->target_id);
 
       if (empty($file)) {
@@ -133,7 +134,7 @@ class DownloadLinkFieldFormatter extends LinkFormatter {
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
diff --git a/tests/src/Functional/DownloadTest.php b/tests/src/Functional/DownloadTest.php
index d9612de..d235796 100644
--- a/tests/src/Functional/DownloadTest.php
+++ b/tests/src/Functional/DownloadTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\media_entity_download\Functional;
 
+use Drupal\media\MediaTypeInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\file\FileInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
 use Drupal\file\Entity\File;
@@ -43,21 +47,21 @@ class DownloadTest extends BrowserTestBase {
   /**
    * Default testing media type.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   private $defaultMediaType;
 
   /**
    * Field definition of default testing media type source field.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   private $defaultSourceField;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create bundle and modify form display.
     $this->defaultMediaType = $this->createMediaType('file', ['id' => 'testing']);
@@ -69,13 +73,13 @@ class DownloadTest extends BrowserTestBase {
    *
    * @param bool $published
    *   Published state of media entity.
-   * @param \Drupal\Core\Session\AccountInterface $owner
+   * @param AccountInterface $owner
    *   Media entity owner.
    *
-   * @return \Drupal\media\Entity\Media
+   * @return Media
    *   The created media entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createMediaEntity($published, AccountInterface $owner) {
     $value = FileItem::generateSampleValue($this->defaultSourceField);
@@ -144,7 +148,7 @@ class DownloadTest extends BrowserTestBase {
       'view own unpublished media',
     ]);
     $no_media_owner_role = Role::load(current($no_media_owner->getRoles(TRUE)));
-    $this->assertNotEqual($media_owner_role, $no_media_owner_role);
+    $this->assertNotEquals($media_owner_role, $no_media_owner_role);
     $media = $this->createMediaEntity(TRUE, $media_owner);
     $unpublished_media = $this->createMediaEntity(FALSE, $media_owner);
 
@@ -163,7 +167,7 @@ class DownloadTest extends BrowserTestBase {
     $this->assertEquals(Response::HTTP_OK, $this->getSession()->getStatusCode());
     // Assert file headers.
     $unpublished_media_file_id = $unpublished_media->getSource()->getSourceFieldValue($unpublished_media);
-    /** @var \Drupal\file\FileInterface $unpublished_media_file */
+    /** @var FileInterface $unpublished_media_file */
     $unpublished_media_file = File::load($unpublished_media_file_id);
     $this->assertEquals('attachment; filename="' . $unpublished_media_file->getFilename() . '"', $this->drupalGetHeader('Content-Disposition'));
     $this->assertEquals('public', $this->drupalGetHeader('Cache-Control'));
