diff --git a/janrain_capture.api.php b/janrain_capture.api.php
index 2993fc8..a9f49f4 100644
--- a/janrain_capture.api.php
+++ b/janrain_capture.api.php
@@ -7,13 +7,12 @@ use Drupal\user\UserInterface;
  * @file
  * Janrain Capture Drupal API.
  */
-
 /**
  * React to the authentication via Janrain.
  *
- * @param \Drupal\janrain_capture\User\JanrainUserProfile $profile
+ * @param JanrainUserProfile $profile
  *   The profile of a user on Janrain.
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  *   The user that has been authenticated.
  * @param bool $is_new
  *   The state whether an authenticated user is new in Drupal.
diff --git a/src/Authentication/AccessToken.php b/src/Authentication/AccessToken.php
index cc3d809..5b50895 100644
--- a/src/Authentication/AccessToken.php
+++ b/src/Authentication/AccessToken.php
@@ -10,7 +10,7 @@ class AccessToken extends Token {
   /**
    * The refresh token.
    *
-   * @var \Drupal\janrain_capture\Authentication\RefreshToken
+   * @var RefreshToken
    */
   protected $refreshToken;
 
diff --git a/src/Controller/AuthenticationController.php b/src/Controller/AuthenticationController.php
index 95c3c45..d61974d 100644
--- a/src/Controller/AuthenticationController.php
+++ b/src/Controller/AuthenticationController.php
@@ -23,13 +23,13 @@ class AuthenticationController extends ControllerBase {
   /**
    * An instance of the "janrain_capture.capture_api" service.
    *
-   * @var \Drupal\janrain_capture\JanrainCaptureApi
+   * @var JanrainCaptureApi
    */
   protected $captureApi;
   /**
    * An instance of the "janrain_capture.markup_builder" service.
    *
-   * @var \Drupal\janrain_capture\JanrainMarkupBuilder
+   * @var JanrainMarkupBuilder
    */
   protected $markupBuilder;
 
@@ -83,7 +83,7 @@ class AuthenticationController extends ControllerBase {
   /**
    * View profile page.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming HTTP request.
    */
   public function viewProfile(Request $request) {
@@ -120,7 +120,7 @@ class AuthenticationController extends ControllerBase {
   /**
    * Login or reset a password for a user using Janrain API.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming HTTP request.
    *
    * @return string
@@ -165,7 +165,7 @@ class AuthenticationController extends ControllerBase {
   /**
    * Returns the authorization code.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return string
@@ -198,10 +198,10 @@ class AuthenticationController extends ControllerBase {
   /**
    * Returns the URL to redirect to.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to redirect to.
    */
   protected function getDestinationUrl(Request $request): Url {
diff --git a/src/EventSubscriber.php b/src/EventSubscriber.php
index 85c2863..0f19ca0 100644
--- a/src/EventSubscriber.php
+++ b/src/EventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\janrain_capture;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\user\UserInterface;
 use Drupal\user\Entity\User;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ -28,7 +29,7 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Redirect event.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The Event to process.
    */
   public function onRequest($event): void {
diff --git a/src/JanrainCaptureApi.php b/src/JanrainCaptureApi.php
index 3a92c92..aad40fe 100644
--- a/src/JanrainCaptureApi.php
+++ b/src/JanrainCaptureApi.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\janrain_capture;
 
+use Drupal\user\UserStorageInterface;
+use Psr\Log\LoggerInterface;
+use Drupal\Core\KeyValueStore\DatabaseStorage;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -28,43 +32,43 @@ class JanrainCaptureApi implements JanrainCaptureApiInterface {
   /**
    * An instance of the "http_client" service.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
   /**
    * The storage of the "user" entities.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
   /**
    * An instance of the "current_user" service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
   /**
    * An instance of the "user.data" service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
   /**
    * An instance of the "module_handler" service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
   /**
    * The logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
   /**
    * The database storage.
    *
-   * @var \Drupal\Core\KeyValueStore\DatabaseStorage
+   * @var DatabaseStorage
    */
   protected $dbStorage;
   /**
@@ -89,7 +93,7 @@ class JanrainCaptureApi implements JanrainCaptureApiInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function __construct(
     Client $http_client,
@@ -237,10 +241,10 @@ class JanrainCaptureApi implements JanrainCaptureApiInterface {
   /**
    * Returns existing, newly added or updated access token from the database.
    *
-   * @param \Drupal\janrain_capture\Authentication\AccessToken|null $access_token
+   * @param AccessToken|null $access_token
    *   The access token. Can be omitted to read an existing one.
    *
-   * @return \Drupal\janrain_capture\Authentication\AccessToken|null
+   * @return AccessToken|null
    *   The access token.
    */
   protected function cache(AccessToken $access_token = NULL): ? AccessToken {
@@ -269,13 +273,13 @@ class JanrainCaptureApi implements JanrainCaptureApiInterface {
    * @param string[] $parameters
    *   The list of additional parameters for the request.
    *
-   * @return \Drupal\janrain_capture\Authentication\AccessToken
+   * @return AccessToken
    *   The obtained access token.
    *
    * @throws \InvalidArgumentException
-   * @throws \GuzzleHttp\Exception\TransferException
-   * @throws \Drupal\janrain_capture\Exception\JsonParseError
-   * @throws \Drupal\janrain_capture\Exception\JanrainApiCallError
+   * @throws TransferException
+   * @throws JsonParseError
+   * @throws JanrainApiCallError
    *
    * @link https://docs.janrain.com/api/registration/authentication/#oauth-token
    */
@@ -295,16 +299,16 @@ class JanrainCaptureApi implements JanrainCaptureApiInterface {
   /**
    * Returns the user's profile data.
    *
-   * @param \Drupal\janrain_capture\Authentication\AccessToken $access_token
+   * @param AccessToken $access_token
    *   The access token.
    *
-   * @return \Drupal\janrain_capture\User\JanrainUserProfile
+   * @return JanrainUserProfile
    *   The user's profile data.
    *
-   * @throws \GuzzleHttp\Exception\TransferException
-   * @throws \Drupal\janrain_capture\Exception\JsonParseError
-   * @throws \Drupal\janrain_capture\Exception\JanrainApiCallError
-   * @throws \Drupal\janrain_capture\Exception\JanrainUnauthorizedError
+   * @throws TransferException
+   * @throws JsonParseError
+   * @throws JanrainApiCallError
+   * @throws JanrainUnauthorizedError
    *
    * @link https://docs.janrain.com/api/registration/entity/#entity
    * @link https://docs.janrain.com/api/registration/error-codes
@@ -332,9 +336,9 @@ class JanrainCaptureApi implements JanrainCaptureApiInterface {
    * @return \stdClass
    *   The HTTP request result data.
    *
-   * @throws \GuzzleHttp\Exception\TransferException
-   * @throws \Drupal\janrain_capture\Exception\JsonParseError
-   * @throws \Drupal\janrain_capture\Exception\JanrainApiCallError
+   * @throws TransferException
+   * @throws JsonParseError
+   * @throws JanrainApiCallError
    */
   protected function call($command, array $data = [], string $access_token = NULL): \stdClass {
     $headers = [];
diff --git a/src/JanrainCaptureApiInterface.php b/src/JanrainCaptureApiInterface.php
index 9544fdf..0c8bebf 100644
--- a/src/JanrainCaptureApiInterface.php
+++ b/src/JanrainCaptureApiInterface.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\janrain_capture;
 
+use GuzzleHttp\Exception\GuzzleException;
+use Drupal\janrain_capture\Exception\JsonParseError;
+use Drupal\janrain_capture\Exception\JanrainApiCallError;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\janrain_capture\Exception\JanrainUnauthorizedError;
 use Drupal\janrain_capture\User\JanrainUserProfile;
 use Drupal\user\UserInterface;
 use Drupal\janrain_capture\Authentication\AccessToken;
@@ -28,13 +33,13 @@ interface JanrainCaptureApiInterface {
    * @param string $redirect_uri
    *   The URI to redirect to after successful call.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The Drupal account of authenticated user.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \Drupal\janrain_capture\Exception\JsonParseError
-   * @throws \Drupal\janrain_capture\Exception\JanrainApiCallError
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws GuzzleException
+   * @throws JsonParseError
+   * @throws JanrainApiCallError
+   * @throws EntityStorageException
    */
   public function authenticate(string $auth_code, string $redirect_uri): UserInterface;
 
@@ -46,35 +51,35 @@ interface JanrainCaptureApiInterface {
    * @param bool $force_refresh
    *   An indicator to forcibly refresh an access token.
    *
-   * @return \Drupal\janrain_capture\Authentication\AccessToken
+   * @return AccessToken
    *   The access token.
    *
    * @throws \InvalidArgumentException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \Drupal\janrain_capture\Exception\JsonParseError
-   * @throws \Drupal\janrain_capture\Exception\JanrainApiCallError
-   * @throws \Drupal\janrain_capture\Exception\JanrainUnauthorizedError
+   * @throws GuzzleException
+   * @throws JsonParseError
+   * @throws JanrainApiCallError
+   * @throws JanrainUnauthorizedError
    */
   public function getAccessToken(bool $force_refresh = FALSE): AccessToken;
 
   /**
    * Returns the user's profile data.
    *
-   * @return \Drupal\janrain_capture\User\JanrainUserProfile
+   * @return JanrainUserProfile
    *   The user's profile data.
    *
    * @throws \InvalidArgumentException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \Drupal\janrain_capture\Exception\JsonParseError
-   * @throws \Drupal\janrain_capture\Exception\JanrainApiCallError
-   * @throws \Drupal\janrain_capture\Exception\JanrainUnauthorizedError
+   * @throws GuzzleException
+   * @throws JsonParseError
+   * @throws JanrainApiCallError
+   * @throws JanrainUnauthorizedError
    */
   public function getUserProfile(): JanrainUserProfile;
 
   /**
    * Returns a state whether a user has a Janrain account.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The Drupal user.
    *
    * @return bool
diff --git a/src/JanrainMarkupBuilder.php b/src/JanrainMarkupBuilder.php
index 485e9b2..a8588b9 100644
--- a/src/JanrainMarkupBuilder.php
+++ b/src/JanrainMarkupBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\janrain_capture;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\Url;
@@ -14,23 +15,23 @@ class JanrainMarkupBuilder {
   /**
    * Janrain screen loader manager.
    *
-   * @var \Drupal\janrain_capture\ScreenLoaderManager
+   * @var ScreenLoaderManager
    */
   protected $screenLoaderManager;
 
   /**
    * Janrain Capture settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $janrainCaptureSettings;
 
   /**
    * JanrainMarkupBuilder constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\janrain_capture\ScreenLoaderManager $screen_loader_manager
+   * @param ScreenLoaderManager $screen_loader_manager
    *   Config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ScreenLoaderManager $screen_loader_manager) {
@@ -62,12 +63,12 @@ class JanrainMarkupBuilder {
     }
 
     // Federate.
-    $settings['capture']['federate_xd_reciever'] = $base_url . $base_path . drupal_get_path('module', 'janrain_capture') . '/xdcomm.html';
+    $settings['capture']['federate_xd_reciever'] = $base_url . $base_path . \Drupal::service('extension.list.module')->getPath('janrain_capture') . '/xdcomm.html';
 
-    $settings['capture']['stylesheets'][] = file_create_url(drupal_get_path('module', 'janrain_capture') . '/janrain-capture-screens/stylesheets/janrain.css');
+    $settings['capture']['stylesheets'][] = \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('janrain_capture') . '/janrain-capture-screens/stylesheets/janrain.css');
 
     if (isset($settings['screens']['folder'])) {
-      $settings['capture']['stylesheets'][] = file_create_url($settings['screens']['folder'] . '/stylesheets/janrain.css');
+      $settings['capture']['stylesheets'][] = \Drupal::service('file_url_generator')->generateAbsoluteString($settings['screens']['folder'] . '/stylesheets/janrain.css');
     }
 
     // @todo Investigate docs for more info about federateSupportedSegments.
diff --git a/src/RouteEnhancer.php b/src/RouteEnhancer.php
index 6aca2d1..cfa8739 100644
--- a/src/RouteEnhancer.php
+++ b/src/RouteEnhancer.php
@@ -20,7 +20,7 @@ class RouteEnhancer implements EnhancerInterface {
   /**
    * An instance of the "janrain_capture.capture_api" service.
    *
-   * @var \Drupal\janrain_capture\JanrainCaptureApi
+   * @var JanrainCaptureApi
    */
   protected $captureApi;
 
diff --git a/src/ScreenLoaderManager.php b/src/ScreenLoaderManager.php
index 5e98057..3d771fe 100644
--- a/src/ScreenLoaderManager.php
+++ b/src/ScreenLoaderManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\janrain_capture;
 
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use GuzzleHttp\Client;
@@ -49,27 +50,27 @@ class ScreenLoaderManager {
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
   /**
    * ScreenLoaderManager constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger factory.
-   * @param \GuzzleHttp\Client $client
+   * @param Client $client
    *   HTTP client.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, LoggerChannelFactoryInterface $logger_factory, Client $client, FileSystemInterface $file_system) {
