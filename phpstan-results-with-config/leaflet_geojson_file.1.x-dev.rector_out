modules/contrib/leaflet_geojson_file/leaflet_geojson_file.module
modules/contrib/leaflet_geojson_file/src/LeafletGeoJsonService.php
modules/contrib/leaflet_geojson_file/src/Plugin/Field/FieldFormatter/LeafletGeoJsonFormatter.php
modules/contrib/leaflet_geojson_file/src/Plugin/Field/FieldWidget/LeafletGeoJsonWidget.php
modules/contrib/leaflet_geojson_file/src/Plugin/search_api/data_type/RptJTSDataType.php
modules/contrib/leaflet_geojson_file/src/Plugin/search_api/data_type/RptJsonDataType.php
modules/contrib/leaflet_geojson_file/src/Plugin/search_api/processor/GeoJson.php

5 files with changes
====================

1) modules/contrib/leaflet_geojson_file/src/Plugin/search_api/processor/GeoJson.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\leaflet_geojson_file\Plugin\search_api\processor;

+use Drupal\search_api\Item\FieldInterface;
+use Drupal\search_api\Entity\Index;
 use Drupal\file\Entity\File;
 use Drupal\search_api\Processor\ProcessorPluginBase;

@@ @@
    */
   public function preprocessIndexItems(array $items) {
     foreach ($items as $item) {
-      /** @var \Drupal\search_api\Item\FieldInterface $field */
+      /** @var FieldInterface $field */
       foreach ($item->getFields() as $field) {
-        /** @var \Drupal\search_api\Entity\Index $index */
+        /** @var Index $index */
         $index = $field->getIndex();
         $field_settings = $index->getField($field->getFieldIdentifier());
         if ('rpt_json' === $field_settings->getType()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/leaflet_geojson_file/src/Plugin/Field/FieldWidget/LeafletGeoJsonWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\leaflet_geojson_file\Plugin\Field\FieldWidget;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\Core\File\FileSystem;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityFormInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Field\WidgetPluginManager
+   * @var WidgetPluginManager
    */
   private $widget_plugin_manager;

   /**
-   * @var \Drupal\leaflet\LeafletService
+   * @var LeafletService
    */
   private $leafletService;

   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $file_system;

   /**
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManager
+   * @var StreamWrapperManager
    */
   private $stream_wrapper_manager;

@@ @@
     $fid = $items[$delta]->target_id ?: NULL;
     $file = NULL;
     if (!empty($fid)) {
-      /** @var \Drupal\file\Entity\File $file */
+      /** @var File $file */
       $file = File::load($fid);
     }

@@ @@

       if (!empty($value['fids']) && !empty($value['fids']['0'])) {
         $fid = $value['fids']['0'];
-        /** @var \Drupal\file\Entity\File $file */
+        /** @var File $file */
         $file = File::load($fid);
-        file_save_data($data, $file->getFileUri(), FileSystemInterface::EXISTS_REPLACE);
+        \Drupal::service('file.repository')->writeData($data, $file->getFileUri(), FileSystemInterface::EXISTS_REPLACE);
       }
       else {
         if ($form_state->getFormObject() instanceof EntityFormInterface) {
-          /** @var \Drupal\Core\Entity\EntityInterface $entity */
+          /** @var EntityInterface $entity */
           $entity = $form_state->getFormObject()->getEntity();

-          /** @var \Drupal\field\Entity\FieldConfig $field_definition */
+          /** @var FieldConfig $field_definition */
           $field_definition = $entity->getFieldDefinition($field_name);
           $field_storage = $field_definition->getFieldStorageDefinition();
           $destination_scheme_name = $field_storage->getSetting('uri_scheme');
           $directory = $field_definition->getSetting('file_directory');

-          /** @var \Drupal\Core\File\FileSystem $file_system */
+          /** @var FileSystem $file_system */
           $file_system = \Drupal::service('file_system');
           $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
           $stream_wrapper = $stream_wrapper_manager->getViaScheme($destination_scheme_name);
@@ @@
           $destination = $stream_wrapper->getUri() . $directory . '/' . $entity->uuid() . '-' . $field_name . '.json';
           $dirname = $file_system->dirname($destination);
           $file_system->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY);
-          $file = file_save_data($value['geojson_input'], $destination, FileSystemInterface::EXISTS_REPLACE);
+          $file = \Drupal::service('file.repository')->writeData($value['geojson_input'], $destination, FileSystemInterface::EXISTS_REPLACE);
           if ($file) {
             $values['fids'][] = $file->id();
             NestedArray::setValue($form_state->getValues(), $element['#parents'], $values);
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/leaflet_geojson_file/src/Plugin/Field/FieldFormatter/LeafletGeoJsonFormatter.php:33

    ---------- begin diff ----------
@@ @@
    *
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    * @param array $settings
    * @param $label
    * @param $view_mode
    * @param array $third_party_settings
-   * @param \Drupal\leaflet_geojson_file\LeafletGeoJsonService $leaflet_service
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   * @param \Drupal\Core\Utility\Token $token
-   * @param \Drupal\core\Render\Renderer $renderer
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LeafletGeoJsonService $leaflet_service
+   * @param EntityFieldManagerInterface $entity_field_manager
+   * @param Token $token
+   * @param Renderer $renderer
+   * @param ModuleHandlerInterface $module_handler
+   * @param LinkGeneratorInterface $link_generator
    */
   public function __construct(
     $plugin_id,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/leaflet_geojson_file/src/LeafletGeoJsonService.php:61

    ---------- begin diff ----------
@@ @@
    * @return string
    */
   public function leafletProcessGeofieldFileUrl($fid, NodeInterface $entity) {
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = File::load($fid);
     if ($file) {
-      /** @var \Drupal\Core\Url $file_uri */
+      /** @var Url $file_uri */
       $file_uri = Url::fromUri($file->url());
       $file_uri->setOption('query', ['v' => $entity->getRevisionId()]);
-      return file_url_transform_relative($file_uri->toUriString());
+      return \Drupal::service('file_url_generator')->transformRelative($file_uri->toUriString());

     }
   }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/leaflet_geojson_file/leaflet_geojson_file.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\File\FileSystem;
 /**
  * @file
  */
@@ @@
  * Implements hook_entity_insert().
  */
 function leaflet_geojson_file_entity_insert(EntityInterface $entity) {
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   if (!$entity instanceof ContentEntityInterface) {
     return;
   }
@@ @@
     if ($widget_type['type'] == 'geojson_leaflet_widget') {
       $fid = $field->target_id;
       if ($fid) {
-        /** @var \Drupal\file\Entity\File $file */
+        /** @var File $file */
         $file = File::load($fid);
         if (strpos($file->getFileUri(), $entity->uuid())) {
-          /** @var \Drupal\Core\File\FileSystem $file_system */
+          /** @var FileSystem $file_system */
           $file_system = \Drupal::service('file_system');

           $destination = str_replace($entity->uuid(), $entity->id(), $file->getFileUri());
-          $file_new = file_move($file, $destination, FileSystemInterface::EXISTS_REPLACE);
+          $file_new = \Drupal::service('file.repository')->move($file, $destination, FileSystemInterface::EXISTS_REPLACE);
           $name = $file_system->basename($destination);
           $file_new->setFilename($name);
           $file_new->save();
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

