diff --git a/entity_print.install b/entity_print.install
index e2f5f54..bad71d3 100644
--- a/entity_print.install
+++ b/entity_print.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\entity_print\Plugin\PrintEngineInterface;
 /**
  * @file
  * Entity Print installation file.
@@ -39,7 +40,7 @@ function entity_print_requirements($phase) {
   $definitions = \Drupal::service('plugin.manager.entity_print.print_engine')->getDefinitions();
   $has_one_engine = FALSE;
   foreach ($definitions as $definition) {
-    /** @var \Drupal\entity_print\Plugin\PrintEngineInterface $class */
+    /** @var PrintEngineInterface $class */
     $class = $definition['class'];
     if ($class::dependenciesAvailable()) {
       $has_one_engine = TRUE;
diff --git a/entity_print.module b/entity_print.module
index 39c2b42..6f54129 100644
--- a/entity_print.module
+++ b/entity_print.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
 /**
  * @file
  * Print any entity.
@@ -33,7 +35,7 @@ function entity_print_theme($existing, $type, $theme, $path) {
  * Implements hook_entity_type_alter().
  */
 function entity_print_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   foreach ($entity_types as $entity_type) {
     if ($entity_type->entityClassImplements(ContentEntityInterface::class) && !$entity_type->hasHandlerClass('entity_print')) {
       $entity_type->setHandlerClass('entity_print', ContentEntityRenderer::class);
@@ -97,7 +99,7 @@ function entity_print_entity_view_alter(array &$build, EntityInterface $entity,
  * Implements hook_form_FORM_ID_alter().
  */
 function entity_print_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $display */
+  /** @var EntityViewDisplay $display */
   $display = $form_state->getFormObject()->getEntity();
   $export_types = \Drupal::service('plugin.manager.entity_print.export_type')->getDefinitions();
 
@@ -132,7 +134,7 @@ function entity_print_form_entity_view_display_edit_form_validate(&$form, FormSt
  * Entity display form submit handler.
  */
 function entity_print_form_entity_view_display_edit_form_submit(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $display */
+  /** @var EntityViewDisplay $display */
   $display = $form_state->getFormObject()->getEntity();
 
   $export_types = \Drupal::service('plugin.manager.entity_print.export_type')->getDefinitions();
diff --git a/entity_print.post_update.php b/entity_print.post_update.php
index 6c2eb6f..179c557 100644
--- a/entity_print.post_update.php
+++ b/entity_print.post_update.php
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface;
+use Drupal\entity_print\Plugin\PrintEngineInterface;
 /**
  * @file
  * Post update hooks.
@@ -11,7 +13,7 @@ use Drupal\entity_print\Entity\PrintEngineStorage;
  * Sets the new default configuration for dompdf.
  */
 function entity_print_post_update_new_dompdf_configuration() {
-  /** @var \Drupal\entity_print\Entity\PrintEngineStorage $engine_config */
+  /** @var PrintEngineStorage $engine_config */
   if ($engine_config = PrintEngineStorage::load('dompdf')) {
     $settings = $engine_config->getSettings();
     $settings['default_paper_size'] = 'letter';
@@ -26,10 +28,10 @@ function entity_print_post_update_new_dompdf_configuration() {
 function entity_print_post_update_migrate_config() {
   $config = \Drupal::configFactory()->getEditable('entity_print.settings');
   if ($plugin_id = $config->get('print_engine')) {
-    /** @var \Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface $plugin_manager */
+    /** @var EntityPrintPluginManagerInterface $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.entity_print.print_engine');
     $definition = $plugin_manager->getDefinition($plugin_id);
-    /** @var \Drupal\entity_print\Plugin\PrintEngineInterface $class */
+    /** @var PrintEngineInterface $class */
     $class = $definition['class'];
 
     if ($class::dependenciesAvailable()) {
diff --git a/modules/entity_print_views/src/Controller/ViewPrintController.php b/modules/entity_print_views/src/Controller/ViewPrintController.php
index 2a7556f..b9f0139 100644
--- a/modules/entity_print_views/src/Controller/ViewPrintController.php
+++ b/modules/entity_print_views/src/Controller/ViewPrintController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print_views\Controller;
 
+use Drupal\views\Entity\View;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ -26,28 +27,28 @@ class ViewPrintController extends ControllerBase {
   /**
    * The plugin manager for our Print engines.
    *
-   * @var \Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface
+   * @var EntityPrintPluginManagerInterface
    */
   protected $pluginManager;
 
   /**
    * The Print builder.
    *
-   * @var \Drupal\entity_print\PrintBuilderInterface
+   * @var PrintBuilderInterface
    */
   protected $printBuilder;
 
   /**
    * The Entity Type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;
 
@@ -85,14 +86,14 @@ class ViewPrintController extends ControllerBase {
    * @param string $display_id
    *   The view display to render.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response object on error otherwise the Print is sent.
    */
   public function viewPrint($export_type, $view_name, $display_id) {
     // Create the Print engine plugin.
     $config = $this->config('entity_print.settings');
 
-    /** @var \Drupal\views\Entity\View $view */
+    /** @var View $view */
     $view = $this->entityTypeManager->getStorage('view')->load($view_name);
     $executable = $view->getExecutable();
     $executable->setDisplay($display_id);
@@ -129,11 +130,11 @@ class ViewPrintController extends ControllerBase {
    * @param string $display_id
    *   The machine name of the display.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response object.
    */
   public function viewPrintDebug($export_type, $view_name, $display_id) {
-    /** @var \Drupal\views\Entity\View $view */
+    /** @var View $view */
     $view = $this->entityTypeManager->getStorage('view')->load($view_name);
     $executable = $view->getExecutable();
     $executable->setDisplay($display_id);
@@ -159,7 +160,7 @@ class ViewPrintController extends ControllerBase {
    * @param string $display_id
    *   The view display to render.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result object.
    *
    * @TODO, improve permissions in https://www.drupal.org/node/2759553
@@ -185,7 +186,7 @@ class ViewPrintController extends ControllerBase {
    * @param string $display_id
    *   The machine name of the display.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function viewRedirect($export_type, $view_name, $display_id) {
@@ -206,7 +207,7 @@ class ViewPrintController extends ControllerBase {
    * @param string $display_id
    *   The machine name of the display.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function viewRedirectDebug($export_type, $view_name, $display_id) {
diff --git a/modules/entity_print_views/src/Plugin/views/area/EntityPrintViewsLink.php b/modules/entity_print_views/src/Plugin/views/area/EntityPrintViewsLink.php
index 39806f6..32fb1ae 100644
--- a/modules/entity_print_views/src/Plugin/views/area/EntityPrintViewsLink.php
+++ b/modules/entity_print_views/src/Plugin/views/area/EntityPrintViewsLink.php
@@ -20,7 +20,7 @@ class EntityPrintViewsLink extends AreaPluginBase {
   /**
    * The export type manager.
    *
-   * @var \Drupal\entity_print\Plugin\ExportTypeManagerInterface
+   * @var ExportTypeManagerInterface
    */
   protected $exportTypeManager;
 
@@ -33,7 +33,7 @@ class EntityPrintViewsLink extends AreaPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\entity_print\Plugin\ExportTypeManagerInterface $export_type_manager
+   * @param ExportTypeManagerInterface $export_type_manager
    *   The export type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ExportTypeManagerInterface $export_type_manager) {
diff --git a/modules/entity_print_views/src/Plugin/views/field/PrintLink.php b/modules/entity_print_views/src/Plugin/views/field/PrintLink.php
index 9c7dbeb..c15c969 100644
--- a/modules/entity_print_views/src/Plugin/views/field/PrintLink.php
+++ b/modules/entity_print_views/src/Plugin/views/field/PrintLink.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print_views\Plugin\views\field;
 
+use Drupal\entity_print\Plugin\ExportTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\views\Plugin\views\field\LinkBase;
@@ -20,7 +21,7 @@ class PrintLink extends LinkBase {
   /**
    * The print export type manager.
    *
-   * @var \Drupal\entity_print\Plugin\ExportTypeManagerInterface
+   * @var ExportTypeManagerInterface
    */
   protected $exportTypeManager;
 
diff --git a/modules/entity_print_views/src/Renderer/ViewRenderer.php b/modules/entity_print_views/src/Renderer/ViewRenderer.php
index 1e214cd..af2d890 100644
--- a/modules/entity_print_views/src/Renderer/ViewRenderer.php
+++ b/modules/entity_print_views/src/Renderer/ViewRenderer.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_print_views\Renderer;
 
+use Drupal\views\Entity\View;
+use Drupal\views\ViewEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Security\TrustedCallbackInterface;
@@ -35,14 +37,14 @@ class ViewRenderer extends RendererBase implements TrustedCallbackInterface {
   /**
    * Render a single entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $view
+   * @param EntityInterface $view
    *   The entity we're rendering.
    *
    * @return array
    *   A render array.
    */
   protected function renderSingle(EntityInterface $view) {
-    /** @var \Drupal\views\Entity\View $view */
+    /** @var View $view */
     $executable = $view->getExecutable();
     $render = $executable->render() ?: [];
 
@@ -63,7 +65,7 @@ class ViewRenderer extends RendererBase implements TrustedCallbackInterface {
    */
   public function getFilename(array $entities) {
     return $this->filenameGenerator->generateFilename($entities, function ($view) {
-      /** @var \Drupal\views\ViewEntityInterface $view */
+      /** @var ViewEntityInterface $view */
       return $view->getExecutable()->getTitle();
     });
   }
diff --git a/modules/entity_print_views/tests/src/Functional/PrintViewsTest.php b/modules/entity_print_views/tests/src/Functional/PrintViewsTest.php
index 17065ca..bd9dd98 100644
--- a/modules/entity_print_views/tests/src/Functional/PrintViewsTest.php
+++ b/modules/entity_print_views/tests/src/Functional/PrintViewsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_print_views\Functional;
 
+use Drupal\node\Entity\Node;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\Role;
 
@@ -34,7 +35,7 @@ class PrintViewsTest extends BrowserTestBase {
   /**
    * An array of nodes.
    *
-   * @var \Drupal\node\Entity\Node[]
+   * @var Node[]
    */
   protected $nodes;
 
diff --git a/modules/entity_print_views/tests/src/Kernel/ViewsAccessTest.php b/modules/entity_print_views/tests/src/Kernel/ViewsAccessTest.php
index 8d638ed..d4ca1ab 100644
--- a/modules/entity_print_views/tests/src/Kernel/ViewsAccessTest.php
+++ b/modules/entity_print_views/tests/src/Kernel/ViewsAccessTest.php
@@ -67,7 +67,7 @@ class ViewsAccessTest extends KernelTestBase {
   /**
    * Checks access for the user to print the view.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account we're checking against.
    * @param string $view_name
    *   The view name.
diff --git a/src/Asset/AssetCollector.php b/src/Asset/AssetCollector.php
index a4e862b..1179f64 100644
--- a/src/Asset/AssetCollector.php
+++ b/src/Asset/AssetCollector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print\Asset;
 
+use Drupal\Core\Extension\ThemeExtensionList;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Extension\InfoParserInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
@@ -17,32 +18,32 @@ class AssetCollector implements AssetCollectorInterface {
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * Theme extension list.
    *
-   * @var \Drupal\Core\Extension\ThemeExtensionList
+   * @var ThemeExtensionList
    */
   protected $themeExtension;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * AssetCollector constructor.
    *
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Extension\ThemeExtensionList|\Drupal\Core\Extension\InfoParserInterface $theme_extension_list
+   * @param ThemeExtensionList|InfoParserInterface $theme_extension_list
    *   Theme extension list.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(ThemeHandlerInterface $theme_handler, $theme_extension_list, EventDispatcherInterface $event_dispatcher) {
@@ -75,7 +76,7 @@ class AssetCollector implements AssetCollectorInterface {
       }
     }
 
-    $this->dispatcher->dispatch(PrintEvents::CSS_ALTER, new PrintCssAlterEvent($libraries, $entities));
+    $this->dispatcher->dispatch(new PrintCssAlterEvent($libraries, $entities), PrintEvents::CSS_ALTER);
 
     return $libraries;
   }
@@ -83,7 +84,7 @@ class AssetCollector implements AssetCollectorInterface {
   /**
    * Build the CSS for a single entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to build the CSS for.
    * @param array $theme_info
    *   A list of css libraries to add.
diff --git a/src/Asset/AssetCollectorInterface.php b/src/Asset/AssetCollectorInterface.php
index 98c573b..4d9a0e7 100644
--- a/src/Asset/AssetCollectorInterface.php
+++ b/src/Asset/AssetCollectorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print\Asset;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Collect all css assets for the entities being printed.
  */
@@ -23,7 +24,7 @@ interface AssetCollectorInterface {
    *   node:
    *     article: 'yourtheme/article-pdf'
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entity info from entity_get_info().
    *
    * @return array
diff --git a/src/Asset/AssetRenderer.php b/src/Asset/AssetRenderer.php
index ad13d71..39a51d3 100644
--- a/src/Asset/AssetRenderer.php
+++ b/src/Asset/AssetRenderer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print\Asset;
 
+use Drupal\Core\Asset\CssCollectionRenderer;
 use Drupal\Core\Asset\AssetCollectionRendererInterface;
 use Drupal\Core\Asset\AssetResolverInterface;
 use Drupal\Core\Asset\AttachedAssets;
@@ -14,32 +15,32 @@ class AssetRenderer implements AssetRendererInterface {
   /**
    * The asset resolver.
    *
-   * @var \Drupal\Core\Asset\AssetResolverInterface
+   * @var AssetResolverInterface
    */
   protected $assetResolver;
 
   /**
    * The css asset renderer.
    *
-   * @var \Drupal\Core\Asset\CssCollectionRenderer
+   * @var CssCollectionRenderer
    */
   protected $cssRenderer;
 
   /**
    * Asset collector.
    *
-   * @var \Drupal\entity_print\Asset\AssetCollectorInterface
+   * @var AssetCollectorInterface
    */
   protected $assetCollector;
 
   /**
    * AssetRenderer constructor.
    *
-   * @param \Drupal\Core\Asset\AssetResolverInterface $asset_resolver
+   * @param AssetResolverInterface $asset_resolver
    *   The asset resolver.
-   * @param \Drupal\Core\Asset\AssetCollectionRendererInterface $css_renderer
+   * @param AssetCollectionRendererInterface $css_renderer
    *   The CSS renderer.
-   * @param \Drupal\entity_print\Asset\AssetCollectorInterface $asset_collector
+   * @param AssetCollectorInterface $asset_collector
    *   The asset collector.
    */
   public function __construct(AssetResolverInterface $asset_resolver, AssetCollectionRendererInterface $css_renderer, AssetCollectorInterface $asset_collector) {
diff --git a/src/Asset/AssetRendererInterface.php b/src/Asset/AssetRendererInterface.php
index fe4b5c9..6dc31f2 100644
--- a/src/Asset/AssetRendererInterface.php
+++ b/src/Asset/AssetRendererInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print\Asset;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Interface for the print asset renderer.
  */
@@ -10,7 +11,7 @@ interface AssetRendererInterface {
   /**
    * Renders the CSS assets for the given entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   An array of entities for whose assets we want to render.
    * @param bool $use_default_css
    *   TRUE to add in the global CSS otherwise FALSE.
diff --git a/src/Controller/EntityPrintController.php b/src/Controller/EntityPrintController.php
index 500f1b4..f238a95 100644
--- a/src/Controller/EntityPrintController.php
+++ b/src/Controller/EntityPrintController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -20,28 +21,28 @@ class EntityPrintController extends ControllerBase {
   /**
    * The plugin manager for our Print engines.
    *
-   * @var \Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface
+   * @var EntityPrintPluginManagerInterface
    */
   protected $pluginManager;
 
   /**
    * The export type manager.
    *
-   * @var \Drupal\entity_print\Plugin\ExportTypeManagerInterface
+   * @var ExportTypeManagerInterface
    */
   protected $exportTypeManager;
 
   /**
    * The Print builder.
    *
-   * @var \Drupal\entity_print\PrintBuilderInterface
+   * @var PrintBuilderInterface
    */
   protected $printBuilder;
 
   /**
    * The Entity Type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -77,7 +78,7 @@ class EntityPrintController extends ControllerBase {
    * @param int $entity_id
    *   The entity id.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response object on error otherwise the Print is sent.
    */
   public function viewPrint($export_type, $entity_type, $entity_id) {
@@ -102,7 +103,7 @@ class EntityPrintController extends ControllerBase {
    * @param int $entity_id
    *   The entity id.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response object.
    *
    * @TODO, improve permissions in https://www.drupal.org/node/2759553
@@ -126,7 +127,7 @@ class EntityPrintController extends ControllerBase {
    * @param int $entity_id
    *   The entity id.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result object.
    */
   public function checkAccess($export_type, $entity_type, $entity_id) {
@@ -182,7 +183,7 @@ class EntityPrintController extends ControllerBase {
    * @param string|int $entity_id
    *   The entity type id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function viewRedirect($export_type, $entity_type, $entity_id) {
@@ -203,7 +204,7 @@ class EntityPrintController extends ControllerBase {
    * @param string|int $entity_id
    *   The entity type id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function viewRedirectDebug($export_type, $entity_type, $entity_id) {
diff --git a/src/Entity/PrintEngineStorage.php b/src/Entity/PrintEngineStorage.php
index 6c0c72a..eda74f7 100644
--- a/src/Entity/PrintEngineStorage.php
+++ b/src/Entity/PrintEngineStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print\Entity;
 
+use Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;
 
@@ -27,7 +28,7 @@ class PrintEngineStorage extends ConfigEntityBase implements PrintEngineStorageI
   /**
    * The plugin collection for one Print engine.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $printEnginePluginCollection;
 
@@ -80,7 +81,7 @@ class PrintEngineStorage extends ConfigEntityBase implements PrintEngineStorageI
   /**
    * Gets the plugin manager.
    *
-   * @return \Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface
+   * @return EntityPrintPluginManagerInterface
    *   The plugin manager instance.
    */
   protected function getPrintEnginePluginManager() {
diff --git a/src/Entity/PrintEngineStorageInterface.php b/src/Entity/PrintEngineStorageInterface.php
index 0c25748..f01988e 100644
--- a/src/Entity/PrintEngineStorageInterface.php
+++ b/src/Entity/PrintEngineStorageInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print\Entity;
 
+use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
@@ -13,7 +14,7 @@ interface PrintEngineStorageInterface extends ConfigEntityInterface, EntityWithP
   /**
    * Gets a single lazy plugin collection.
    *
-   * @return \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @return DefaultSingleLazyPluginCollection
    *   The plugin collection for our Print Engine plugin.
    */
   public function getPrintEnginePluginCollection();
diff --git a/src/EntityPrintPermissions.php b/src/EntityPrintPermissions.php
index b5c11cf..929e0a5 100644
--- a/src/EntityPrintPermissions.php
+++ b/src/EntityPrintPermissions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -19,25 +20,25 @@ class EntityPrintPermissions implements ContainerInjectionInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Constructs a new EntityPrintPermissions.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\StringTranslation\TranslationManager $translation_manager
+   * @param TranslationManager $translation_manager
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, TranslationManager $translation_manager) {
@@ -61,7 +62,7 @@ class EntityPrintPermissions implements ContainerInjectionInterface {
    * Returns an array of entity_print permissions.
    */
   public function getPermissions() {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface[] $content_entity_types */
+    /** @var EntityTypeInterface[] $content_entity_types */
     // Get all EntityTypes for the group "content".
     $content_entity_types = array_filter($this->entityTypeManager->getDefinitions(), function ($entity_type) {
       return $entity_type->getGroup() === 'content';
diff --git a/src/Event/PreSendPrintEvent.php b/src/Event/PreSendPrintEvent.php
index 101a2f8..a1397a7 100644
--- a/src/Event/PreSendPrintEvent.php
+++ b/src/Event/PreSendPrintEvent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print\Event;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\entity_print\Plugin\PrintEngineInterface;
 
 /**
@@ -12,16 +13,16 @@ class PreSendPrintEvent extends PrintEventBase {
   /**
    * An array of entities.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities;
 
   /**
    * PreSendPrintEvent constructor.
    *
-   * @param \Drupal\entity_print\Plugin\PrintEngineInterface $print_engine
+   * @param PrintEngineInterface $print_engine
    *   The Print Engine.
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entity to print.
    */
   public function __construct(PrintEngineInterface $print_engine, array $entities) {
@@ -32,7 +33,7 @@ class PreSendPrintEvent extends PrintEventBase {
   /**
    * Gets the entities that is being printed to Print.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The content entities.
    */
   public function getEntities() {
diff --git a/src/Event/PrintCssAlterEvent.php b/src/Event/PrintCssAlterEvent.php
index 9d638b8..cb9444a 100644
--- a/src/Event/PrintCssAlterEvent.php
+++ b/src/Event/PrintCssAlterEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_print\Event;
 
-use Symfony\Component\EventDispatcher\Event;
-
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * This event allows the CSS libraries to be altered.
  */
@@ -19,7 +19,7 @@ class PrintCssAlterEvent extends Event {
   /**
    * An array of entities we're rendering.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities;
 
@@ -49,7 +49,7 @@ class PrintCssAlterEvent extends Event {
   /**
    * Gets the entities being rendered.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of entities.
    */
   public function getEntities() {
diff --git a/src/Event/PrintEventBase.php b/src/Event/PrintEventBase.php
index ca00d0f..d42f697 100644
--- a/src/Event/PrintEventBase.php
+++ b/src/Event/PrintEventBase.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_print\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\entity_print\Plugin\PrintEngineInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event base class.
@@ -13,14 +13,14 @@ abstract class PrintEventBase extends Event {
   /**
    * The print engine plugin.
    *
-   * @var \Drupal\entity_print\Plugin\PrintEngineInterface
+   * @var PrintEngineInterface
    */
   protected $printEngine;
 
   /**
    * The Print Engine event base class.
    *
-   * @param \Drupal\entity_print\Plugin\PrintEngineInterface $print_engine
+   * @param PrintEngineInterface $print_engine
    *   The Print Engine.
    */
   public function __construct(PrintEngineInterface $print_engine) {
@@ -30,7 +30,7 @@ abstract class PrintEventBase extends Event {
   /**
    * Gets the Print Engine plugin that will print the Print.
    *
-   * @return \Drupal\entity_print\Plugin\PrintEngineInterface
+   * @return PrintEngineInterface
    *   The Print Engine.
    */
   public function getPrintEngine() {
diff --git a/src/Event/PrintHtmlAlterEvent.php b/src/Event/PrintHtmlAlterEvent.php
index 3d4b1e0..d231dc6 100644
--- a/src/Event/PrintHtmlAlterEvent.php
+++ b/src/Event/PrintHtmlAlterEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_print\Event;
 
-use Symfony\Component\EventDispatcher\Event;
-
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * An event to alter the HTML string.
  */
@@ -19,7 +19,7 @@ class PrintHtmlAlterEvent extends Event {
   /**
    * An array of entities we're rendering.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities;
 
@@ -49,7 +49,7 @@ class PrintHtmlAlterEvent extends Event {
   /**
    * Gets the entities being rendered.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of entities.
    */
   public function getEntities() {
diff --git a/src/EventSubscriber/PostRenderSubscriber.php b/src/EventSubscriber/PostRenderSubscriber.php
index 242eefa..0103bb2 100644
--- a/src/EventSubscriber/PostRenderSubscriber.php
+++ b/src/EventSubscriber/PostRenderSubscriber.php
@@ -17,23 +17,23 @@ class PostRenderSubscriber implements EventSubscriberInterface {
   /**
    * The Config Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * PostRenderSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RequestStack $request_stack) {
@@ -44,7 +44,7 @@ class PostRenderSubscriber implements EventSubscriberInterface {
   /**
    * Alter the HTML after it has been rendered.
    *
-   * @param \Drupal\entity_print\Event\PrintHtmlAlterEvent $event
+   * @param PrintHtmlAlterEvent $event
    *   The event object.
    *
    *   This is a temporary workaround for a core issue.
diff --git a/src/EventSubscriber/PrintEngineExceptionSubscriber.php b/src/EventSubscriber/PrintEngineExceptionSubscriber.php
index 4794185..b2d22cb 100644
--- a/src/EventSubscriber/PrintEngineExceptionSubscriber.php
+++ b/src/EventSubscriber/PrintEngineExceptionSubscriber.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_print\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
+use Drupal\views\ViewExecutable;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\views\ViewEntityInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -9,7 +13,6 @@ use Drupal\Core\Url;
 use Drupal\entity_print\PrintEngineException;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -20,23 +23,23 @@ class PrintEngineExceptionSubscriber implements EventSubscriberInterface {
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * PrintEngineExceptionSubscriber constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   Route match service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(RouteMatchInterface $routeMatch, EntityTypeManagerInterface $entityTypeManager) {
@@ -47,11 +50,11 @@ class PrintEngineExceptionSubscriber implements EventSubscriberInterface {
   /**
    * Handles print exceptions.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The exception event.
    */
-  public function handleException(GetResponseForExceptionEvent $event) {
-    $exception = $event->getException();
+  public function handleException(ExceptionEvent $event) {
+    $exception = $event->getThrowable();
     if ($exception instanceof PrintEngineException) {
       \Drupal::messenger()->addError(new FormattableMarkup($exception->getPrettyMessage(), []));
 
@@ -60,7 +63,7 @@ class PrintEngineExceptionSubscriber implements EventSubscriberInterface {
       }
       elseif ($view = $this->getView()) {
         $display_id = $this->routeMatch->getParameter('display_id');
-        /** @var \Drupal\views\ViewExecutable $executable */
+        /** @var ViewExecutable $executable */
         $executable = $view->getExecutable();
         $executable->setDisplay($display_id);
         $url = $executable->hasUrl() ? $executable->getUrl()->toString() : Url::fromRoute('<front>');
@@ -72,7 +75,7 @@ class PrintEngineExceptionSubscriber implements EventSubscriberInterface {
   /**
    * Gets a generic entity from the route data if it exists.
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface
+   * @return bool|EntityInterface
    *   The entity or FALSE if it does not exist.
    */
   protected function getEntity() {
@@ -84,7 +87,7 @@ class PrintEngineExceptionSubscriber implements EventSubscriberInterface {
   /**
    * Gets the view from the route data if it exists.
    *
-   * @return bool|\Drupal\views\ViewEntityInterface
+   * @return bool|ViewEntityInterface
    *   The View or FALSE if it not a view route.
    */
   protected function getView() {
diff --git a/src/FilenameGenerator.php b/src/FilenameGenerator.php
index 258cf7e..aa125ed 100644
--- a/src/FilenameGenerator.php
+++ b/src/FilenameGenerator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Transliteration\TransliterationInterface;
 
 /**
@@ -12,14 +13,14 @@ class FilenameGenerator implements FilenameGeneratorInterface {
   /**
    * The transliteration service.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliteration;
 
   /**
    * FilenameGenerator constructor.
    *
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliteration
+   * @param TransliterationInterface $transliteration
    *   Transliteration service.
    */
   public function __construct(TransliterationInterface $transliteration) {
@@ -31,7 +32,7 @@ class FilenameGenerator implements FilenameGeneratorInterface {
    */
   public function generateFilename(array $entities, callable $entity_label_callback = NULL) {
     $filenames = [];
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     foreach ($entities as $entity) {
       if ($label = trim($this->sanitizeFilename($entity_label_callback ? $entity_label_callback($entity) : $entity->label(), $entity->language()->getId()))) {
         $filenames[] = $label;
diff --git a/src/FilenameGeneratorInterface.php b/src/FilenameGeneratorInterface.php
index bffe8eb..eb3d929 100644
--- a/src/FilenameGeneratorInterface.php
+++ b/src/FilenameGeneratorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * The filename generator interface.
  */
@@ -17,7 +18,7 @@ interface FilenameGeneratorInterface {
   /**
    * Generates a filename to be used for a printed document.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   An array of entities to generate a filename for.
    * @param callable $entity_label_callback
    *   (optional) A function to generate the label for an individual entity.
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index bf0f259..d41606c 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_print\Form;
 
+use Drupal\entity_print\Plugin\PrintEngineInterface;
+use Drupal\entity_print\Entity\PrintEngineStorage;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -19,34 +21,34 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The Print engine plugin manager.
    *
-   * @var \Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface
+   * @var EntityPrintPluginManagerInterface
    */
   protected $pluginManager;
 
   /**
    * The entity config storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * The export type manager.
    *
-   * @var \Drupal\entity_print\Plugin\ExportTypeManagerInterface
+   * @var ExportTypeManagerInterface
    */
   protected $exportTypeManager;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface $plugin_manager
+   * @param EntityPrintPluginManagerInterface $plugin_manager
    *   The plugin manager object.
-   * @param \Drupal\entity_print\Plugin\ExportTypeManagerInterface $export_type_manager
+   * @param ExportTypeManagerInterface $export_type_manager
    *   The export type manager interface.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The config storage.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityPrintPluginManagerInterface $plugin_manager, ExportTypeManagerInterface $export_type_manager, EntityStorageInterface $entity_storage) {
@@ -90,7 +92,7 @@ class SettingsForm extends ConfigFormBase {
   public function buildForm(array $form, FormStateInterface $form_state, Request $request = NULL) {
     $print_engines = [];
     foreach ($this->pluginManager->getDefinitions() as $plugin_id => $definition) {
-      /** @var \Drupal\entity_print\Plugin\PrintEngineInterface $class */
+      /** @var PrintEngineInterface $class */
       $class = $definition['class'];
       if ($class::dependenciesAvailable()) {
         $print_engines[$definition['export_type']][$plugin_id] = $definition['label'];
@@ -176,7 +178,7 @@ class SettingsForm extends ConfigFormBase {
    *
    * @param string $plugin_id
    *   The plugin id for which we want the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ -203,7 +205,7 @@ class SettingsForm extends ConfigFormBase {
         // Load the config entity, submit the relevant plugin form and then save
         // it.
         $entity = $this->loadConfigEntity($plugin_id);
-        /** @var \Drupal\entity_print\Plugin\PrintEngineInterface $plugin */
+        /** @var PrintEngineInterface $plugin */
         $plugin = $entity->getPrintEnginePluginCollection()->get($entity->id());
         $plugin->validateConfigurationForm($form, $form_state);
       }
@@ -218,7 +220,7 @@ class SettingsForm extends ConfigFormBase {
     foreach ($this->exportTypeManager->getDefinitions() as $export_type => $definition) {
       if ($plugin_id = $form_state->getValue($export_type)) {
         $entity = $this->loadConfigEntity($plugin_id);
-        /** @var \Drupal\entity_print\Plugin\PrintEngineInterface $plugin */
+        /** @var PrintEngineInterface $plugin */
         $plugin = $entity->getPrintEnginePluginCollection()->get($entity->id());
         $plugin->submitConfigurationForm($form, $form_state);
         $entity->save();
@@ -244,7 +246,7 @@ class SettingsForm extends ConfigFormBase {
    * @param string $plugin_id
    *   The Print engine plugin id.
    *
-   * @return \Drupal\entity_print\Entity\PrintEngineStorage
+   * @return PrintEngineStorage
    *   The loaded config object backing the plugin.
    */
   protected function loadConfigEntity($plugin_id) {
diff --git a/src/Plugin/Action/PrintDownload.php b/src/Plugin/Action/PrintDownload.php
index e3cd278..85a1d74 100644
--- a/src/Plugin/Action/PrintDownload.php
+++ b/src/Plugin/Action/PrintDownload.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_print\Plugin\Action;
 
+use Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface;
+use Drupal\entity_print\Plugin\PrintEngineInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Xss;
@@ -33,35 +36,35 @@ class PrintDownload extends ConfigurableActionBase implements ContainerFactoryPl
   /**
    * Access manager.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;
 
   /**
    * The Print builder service.
    *
-   * @var \Drupal\entity_print\PrintBuilderInterface
+   * @var PrintBuilderInterface
    */
   protected $printBuilder;
 
   /**
    * The Entity Print plugin manager.
    *
-   * @var \Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface
+   * @var EntityPrintPluginManagerInterface
    */
   protected $entityPrintPluginManager;
 
   /**
    * The export type manager.
    *
-   * @var \Drupal\entity_print\Plugin\ExportTypeManagerInterface
+   * @var ExportTypeManagerInterface
    */
   protected $exportTypeManager;
 
   /**
    * The Print engine implementation.
    *
-   * @var \Drupal\entity_print\Plugin\PrintEngineInterface
+   * @var PrintEngineInterface
    */
   protected $printEngine;
 
@@ -95,7 +98,7 @@ class PrintDownload extends ConfigurableActionBase implements ContainerFactoryPl
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\node\NodeInterface $object */
+    /** @var NodeInterface $object */
     $route_params = [
       'export_type' => $this->configuration['export_type'],
       'entity_id' => $object->id(),
diff --git a/src/Plugin/Block/PrintLinks.php b/src/Plugin/Block/PrintLinks.php
index 3e4e455..ac49376 100644
--- a/src/Plugin/Block/PrintLinks.php
+++ b/src/Plugin/Block/PrintLinks.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print\Plugin\Block;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -26,7 +27,7 @@ class PrintLinks extends BlockBase implements ContainerFactoryPluginInterface {
   /**
    * The export type manager.
    *
-   * @var \Drupal\entity_print\Plugin\ExportTypeManagerInterface
+   * @var ExportTypeManagerInterface
    */
   protected $exportTypeManager;
 
@@ -39,7 +40,7 @@ class PrintLinks extends BlockBase implements ContainerFactoryPluginInterface {
    *   Plugin ID.
    * @param array $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\entity_print\Plugin\ExportTypeManagerInterface $exportTypeManager
+   * @param ExportTypeManagerInterface $exportTypeManager
    *   The export type manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ExportTypeManagerInterface $exportTypeManager) {
@@ -124,7 +125,7 @@ class PrintLinks extends BlockBase implements ContainerFactoryPluginInterface {
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->getContextValue('entity');
     $configuration = $this->getConfiguration();
     $route_params = [
diff --git a/src/Plugin/EntityPrint/PrintEngine/DomPdf.php b/src/Plugin/EntityPrint/PrintEngine/DomPdf.php
index a457c19..2ff3569 100644
--- a/src/Plugin/EntityPrint/PrintEngine/DomPdf.php
+++ b/src/Plugin/EntityPrint/PrintEngine/DomPdf.php
@@ -61,7 +61,7 @@ class DomPdf extends PdfEngineBase implements ContainerFactoryPluginInterface {
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
diff --git a/src/Plugin/EntityPrintPluginManager.php b/src/Plugin/EntityPrintPluginManager.php
index b7e83f7..86ad68a 100644
--- a/src/Plugin/EntityPrintPluginManager.php
+++ b/src/Plugin/EntityPrintPluginManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print\Plugin;
 
+use Drupal\entity_print\Entity\PrintEngineStorageInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -20,7 +21,7 @@ class EntityPrintPluginManager extends DefaultPluginManager implements EntityPri
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
@@ -34,14 +35,14 @@ class EntityPrintPluginManager extends DefaultPluginManager implements EntityPri
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -51,15 +52,15 @@ class EntityPrintPluginManager extends DefaultPluginManager implements EntityPri
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EventDispatcherInterface $dispatcher, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
@@ -77,7 +78,7 @@ class EntityPrintPluginManager extends DefaultPluginManager implements EntityPri
   public function createInstance($plugin_id, array $configuration = []) {
     $configuration = array_merge($this->getPrintEngineSettings($plugin_id), $configuration);
 
-    /** @var \Drupal\entity_print\Plugin\PrintEngineInterface $class */
+    /** @var PrintEngineInterface $class */
     $definition = $this->getDefinition($plugin_id);
     $class = $definition['class'];
 
@@ -131,7 +132,7 @@ class EntityPrintPluginManager extends DefaultPluginManager implements EntityPri
       $this->disabledPrintEngines[$filter_export_type] = [];
 
       foreach ($this->getDefinitions() as $plugin_id => $definition) {
-        /** @var \Drupal\entity_print\Plugin\PrintEngineInterface $class */
+        /** @var PrintEngineInterface $class */
         $class = $definition['class'];
         if ($definition['export_type'] === $filter_export_type && !$class::dependenciesAvailable()) {
           $this->disabledPrintEngines[$filter_export_type][$plugin_id] = $definition;
@@ -152,14 +153,14 @@ class EntityPrintPluginManager extends DefaultPluginManager implements EntityPri
    *   An array of Print engine settings for this plugin.
    */
   protected function getPrintEngineSettings($plugin_id) {
-    /** @var \Drupal\entity_print\Entity\PrintEngineStorageInterface $storage */
+    /** @var PrintEngineStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('print_engine');
     if (!$entity = $storage->load($plugin_id)) {
       $entity = $storage->create(['id' => $plugin_id]);
     }
     $configuration = $entity->getSettings();
     $event = new GenericEvent(PrintEvents::CONFIGURATION_ALTER, ['configuration' => $configuration, 'config' => $entity]);
-    $this->dispatcher->dispatch(PrintEvents::CONFIGURATION_ALTER, $event);
+    $this->dispatcher->dispatch($event, PrintEvents::CONFIGURATION_ALTER);
     $configuration = $event->getArgument('configuration');
 
     return $configuration;
diff --git a/src/Plugin/EntityPrintPluginManagerInterface.php b/src/Plugin/EntityPrintPluginManagerInterface.php
index 96df907..7befcda 100644
--- a/src/Plugin/EntityPrintPluginManagerInterface.php
+++ b/src/Plugin/EntityPrintPluginManagerInterface.php
@@ -15,7 +15,7 @@ interface EntityPrintPluginManagerInterface extends PluginManagerInterface {
    * @param string $export_type
    *   The export type plugin id.
    *
-   * @return \Drupal\entity_print\Plugin\PrintEngineInterface
+   * @return PrintEngineInterface
    *   The loaded print engine.
    */
   public function createSelectedInstance($export_type);
diff --git a/src/Plugin/ExportTypeManager.php b/src/Plugin/ExportTypeManager.php
index eb363f0..543d179 100644
--- a/src/Plugin/ExportTypeManager.php
+++ b/src/Plugin/ExportTypeManager.php
@@ -17,14 +17,14 @@ class ExportTypeManager extends DefaultPluginManager implements ExportTypeManage
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
@@ -40,11 +40,11 @@ class ExportTypeManager extends DefaultPluginManager implements ExportTypeManage
   /**
    * Constructs a new export type manager.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler) {
diff --git a/src/Plugin/Field/FieldFormatter/Base64ImageFormatter.php b/src/Plugin/Field/FieldFormatter/Base64ImageFormatter.php
index 3e6fe3f..3459067 100644
--- a/src/Plugin/Field/FieldFormatter/Base64ImageFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/Base64ImageFormatter.php
@@ -49,7 +49,7 @@ class Base64ImageFormatter extends ImageFormatter {
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $element = [];
 
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     foreach ($items as $delta => $item) {
       $file = $item->entity;
       $uri = $file->getFileUri();
@@ -74,9 +74,9 @@ class Base64ImageFormatter extends ImageFormatter {
   /**
    * Gets the image style uri.
    *
-   * @param \Drupal\image\Entity\ImageStyle $image_style
+   * @param ImageStyle $image_style
    *   The image style we want a URL for.
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The file object.
    *
    * @return bool|string
diff --git a/src/Plugin/PrintEngineBase.php b/src/Plugin/PrintEngineBase.php
index ff8ae43..037b1de 100644
--- a/src/Plugin/PrintEngineBase.php
+++ b/src/Plugin/PrintEngineBase.php
@@ -19,7 +19,7 @@ abstract class PrintEngineBase extends PluginBase implements PrintEngineInterfac
   /**
    * The export type plugin.
    *
-   * @var \Drupal\entity_print\Plugin\ExportTypeInterface
+   * @var ExportTypeInterface
    */
   protected $exportType;
 
diff --git a/src/Plugin/PrintEngineInterface.php b/src/Plugin/PrintEngineInterface.php
index be72de2..ccd16ba 100644
--- a/src/Plugin/PrintEngineInterface.php
+++ b/src/Plugin/PrintEngineInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print\Plugin;
 
+use Drupal\entity_print\PrintEngineException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ -14,7 +15,7 @@ interface PrintEngineInterface extends PluginInspectionInterface, PluginFormInte
   /**
    * Gets the export type.
    *
-   * @return \Drupal\entity_print\Plugin\ExportTypeInterface
+   * @return ExportTypeInterface
    *   The export type interface.
    */
   public function getExportType();
@@ -37,7 +38,7 @@ interface PrintEngineInterface extends PluginInspectionInterface, PluginFormInte
    * @param bool $force_download
    *   TRUE to attempt to force the browser to download the PDF otherwise FALSE.
    *
-   * @throws \Drupal\entity_print\PrintEngineException
+   * @throws PrintEngineException
    *   Thrown when Print generation fails.
    */
   public function send($filename, $force_download = TRUE);
diff --git a/src/PrintBuilder.php b/src/PrintBuilder.php
index 972af13..a8441bb 100644
--- a/src/PrintBuilder.php
+++ b/src/PrintBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print;
 
+use Drupal\entity_print\Renderer\RendererInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -22,25 +23,25 @@ class PrintBuilder implements PrintBuilderInterface {
   /**
    * The Print Renderer factory.
    *
-   * @var \Drupal\entity_print\Renderer\RendererFactoryInterface
+   * @var RendererFactoryInterface
    */
   protected $rendererFactory;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * Constructs a new EntityPrintPrintBuilder.
    *
-   * @param \Drupal\entity_print\Renderer\RendererFactoryInterface $renderer_factory
+   * @param RendererFactoryInterface $renderer_factory
    *   The Renderer factory.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(RendererFactoryInterface $renderer_factory, EventDispatcherInterface $event_dispatcher, TranslationInterface $string_translation) {
@@ -56,7 +57,7 @@ class PrintBuilder implements PrintBuilderInterface {
     $renderer = $this->prepareRenderer($entities, $print_engine, $use_default_css);
 
     // Allow other modules to alter the generated Print object.
-    $this->dispatcher->dispatch(PrintEvents::PRE_SEND, new PreSendPrintEvent($print_engine, $entities));
+    $this->dispatcher->dispatch(new PreSendPrintEvent($print_engine, $entities), PrintEvents::PRE_SEND);
 
     // Calculate the filename.
     $filename = $renderer->getFilename($entities) . '.' . $print_engine->getExportType()->getFileExtension();
@@ -87,7 +88,7 @@ class PrintBuilder implements PrintBuilderInterface {
     $renderer = $this->prepareRenderer($entities, $print_engine, $use_default_css);
 
     // Allow other modules to alter the generated Print object.
-    $this->dispatcher->dispatch(PrintEvents::PRE_SEND, new PreSendPrintEvent($print_engine, $entities));
+    $this->dispatcher->dispatch(new PreSendPrintEvent($print_engine, $entities), PrintEvents::PRE_SEND);
 
     // If we didn't have a URI passed in the generate one.
     if (!$filename) {
@@ -105,12 +106,12 @@ class PrintBuilder implements PrintBuilderInterface {
    *
    * @param array $entities
    *   An array of entities.
-   * @param \Drupal\entity_print\Plugin\PrintEngineInterface $print_engine
+   * @param PrintEngineInterface $print_engine
    *   The print engine.
    * @param bool $use_default_css
    *   TRUE if we want the default CSS included.
    *
-   * @return \Drupal\entity_print\Renderer\RendererInterface
+   * @return RendererInterface
    *   A print renderer.
    */
   protected function prepareRenderer(array $entities, PrintEngineInterface $print_engine, $use_default_css) {
diff --git a/src/PrintBuilderInterface.php b/src/PrintBuilderInterface.php
index fae2bef..6d1d135 100644
--- a/src/PrintBuilderInterface.php
+++ b/src/PrintBuilderInterface.php
@@ -13,9 +13,9 @@ interface PrintBuilderInterface {
   /**
    * Render any content entity as a Print.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The content entity to render.
-   * @param \Drupal\entity_print\Plugin\PrintEngineInterface $print_engine
+   * @param PrintEngineInterface $print_engine
    *   The plugin id of the Print engine to use.
    * @param bool $force_download
    *   (optional) TRUE to try and force the document download.
@@ -30,7 +30,7 @@ interface PrintBuilderInterface {
   /**
    * Get a HTML version of the entity as used for the Print rendering.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The content entity to render.
    * @param bool $use_default_css
    *   TRUE if you want the default CSS included, otherwise FALSE.
@@ -51,9 +51,9 @@ interface PrintBuilderInterface {
    * to keep the files private, you must specify the uri yourself when calling
    * this method.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The content entity to render.
-   * @param \Drupal\entity_print\Plugin\PrintEngineInterface $print_engine
+   * @param PrintEngineInterface $print_engine
    *   The plugin id of the Print engine to use.
    * @param string $scheme
    *   The Drupal scheme.
diff --git a/src/Renderer/ContentEntityRenderer.php b/src/Renderer/ContentEntityRenderer.php
index 4ac83e8..d348a3b 100644
--- a/src/Renderer/ContentEntityRenderer.php
+++ b/src/Renderer/ContentEntityRenderer.php
@@ -19,7 +19,7 @@ class ContentEntityRenderer extends RendererBase {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -28,13 +28,13 @@ class ContentEntityRenderer extends RendererBase {
    *
    * @param \Drupal\Core\Render\RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\entity_print\Asset\AssetRendererInterface $asset_renderer
+   * @param AssetRendererInterface $asset_renderer
    *   The asset renderer.
-   * @param \Drupal\entity_print\FilenameGeneratorInterface $filename_generator
+   * @param FilenameGeneratorInterface $filename_generator
    *   A filename generator.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(CoreRendererInterface $renderer, AssetRendererInterface $asset_renderer, FilenameGeneratorInterface $filename_generator, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager) {
@@ -70,7 +70,7 @@ class ContentEntityRenderer extends RendererBase {
   /**
    * Gets the view mode to use for this entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The content entity we're viewing.
    *
    * @return string
diff --git a/src/Renderer/RendererBase.php b/src/Renderer/RendererBase.php
index 2eb19c1..a24adda 100644
--- a/src/Renderer/RendererBase.php
+++ b/src/Renderer/RendererBase.php
@@ -28,21 +28,21 @@ abstract class RendererBase implements RendererInterface, EntityHandlerInterface
   /**
    * The asset renderer.
    *
-   * @var \Drupal\entity_print\Asset\AssetRendererInterface
+   * @var AssetRendererInterface
    */
   protected $assetRenderer;
 
   /**
    * Generate filename's for a printed document.
    *
-   * @var \Drupal\entity_print\FilenameGeneratorInterface
+   * @var FilenameGeneratorInterface
    */
   protected $filenameGenerator;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
@@ -51,11 +51,11 @@ abstract class RendererBase implements RendererInterface, EntityHandlerInterface
    *
    * @param \Drupal\Core\Render\RendererInterface $renderer
    *   Cores renderer.
-   * @param \Drupal\entity_print\Asset\AssetRendererInterface $asset_renderer
+   * @param AssetRendererInterface $asset_renderer
    *   The asset renderer.
-   * @param \Drupal\entity_print\FilenameGeneratorInterface $filename_generator
+   * @param FilenameGeneratorInterface $filename_generator
    *   Filename generator.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(CoreRendererInterface $renderer, AssetRendererInterface $asset_renderer, FilenameGeneratorInterface $filename_generator, EventDispatcherInterface $event_dispatcher) {
@@ -91,7 +91,7 @@ abstract class RendererBase implements RendererInterface, EntityHandlerInterface
     });
 
     // Allow other modules to alter the generated HTML.
-    $this->dispatcher->dispatch(PrintEvents::POST_RENDER, new PrintHtmlAlterEvent($html, $entities));
+    $this->dispatcher->dispatch(new PrintHtmlAlterEvent($html, $entities), PrintEvents::POST_RENDER);
 
     return $html;
   }
diff --git a/src/Renderer/RendererFactoryInterface.php b/src/Renderer/RendererFactoryInterface.php
index cef80ca..1b7aa42 100644
--- a/src/Renderer/RendererFactoryInterface.php
+++ b/src/Renderer/RendererFactoryInterface.php
@@ -15,7 +15,7 @@ interface RendererFactoryInterface {
    * @param string $context
    *   The type, currently supports entities but could change in the future.
    *
-   * @return \Drupal\entity_print\Renderer\RendererInterface
+   * @return RendererInterface
    *   The constructed renderer.
    */
   public function create($item, $context = 'entity');
diff --git a/src/Renderer/RendererInterface.php b/src/Renderer/RendererInterface.php
index a25f48b..8f2c332 100644
--- a/src/Renderer/RendererInterface.php
+++ b/src/Renderer/RendererInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_print\Renderer;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * The renderer interface.
  */
@@ -10,7 +11,7 @@ interface RendererInterface {
   /**
    * Gets the renderable for this entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entities we're rendering.
    *
    * @return array
@@ -38,7 +39,7 @@ interface RendererInterface {
   /**
    * Get the filename for the entity we're printing *without* the extension.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entities for which to generate the filename from.
    *
    * @return string
diff --git a/tests/modules/entity_print_test/entity_print_test.module b/tests/modules/entity_print_test/entity_print_test.module
index ff93452..5fd851e 100644
--- a/tests/modules/entity_print_test/entity_print_test.module
+++ b/tests/modules/entity_print_test/entity_print_test.module
@@ -11,7 +11,7 @@ use Drupal\Core\Extension\Extension;
  * Implements hook_system_theme_info().
  */
 function entity_print_test_system_theme_info() {
-  $themes['entity_print_test_theme'] = drupal_get_path('module', 'entity_print_test') . '/themes/entity_print_test_theme/entity_print_test_theme.info';
+  $themes['entity_print_test_theme'] = \Drupal::service('extension.list.module')->getPath('entity_print_test') . '/themes/entity_print_test_theme/entity_print_test_theme.info';
   return $themes;
 }
 
diff --git a/tests/modules/entity_print_test/src/EventSubscriber/TestEngineConfigurationAlter.php b/tests/modules/entity_print_test/src/EventSubscriber/TestEngineConfigurationAlter.php
index b92074c..71406f2 100644
--- a/tests/modules/entity_print_test/src/EventSubscriber/TestEngineConfigurationAlter.php
+++ b/tests/modules/entity_print_test/src/EventSubscriber/TestEngineConfigurationAlter.php
@@ -15,7 +15,7 @@ class TestEngineConfigurationAlter implements EventSubscriberInterface {
   /**
    * Alter the configuration for our testpdf engine.
    *
-   * @param \Symfony\Component\EventDispatcher\GenericEvent $event
+   * @param GenericEvent $event
    *   The event object.
    */
   public function alterConfiguration(GenericEvent $event) {
@@ -27,7 +27,7 @@ class TestEngineConfigurationAlter implements EventSubscriberInterface {
   /**
    * Alter the CSS renderable array and add our CSS.
    *
-   * @param \Drupal\entity_print\Event\PrintCssAlterEvent $event
+   * @param PrintCssAlterEvent $event
    *   The event object.
    */
   public function alterCss(PrintCssAlterEvent $event) {
diff --git a/tests/src/Functional/Base64ImageTest.php b/tests/src/Functional/Base64ImageTest.php
index 82a4470..b4c3909 100644
--- a/tests/src/Functional/Base64ImageTest.php
+++ b/tests/src/Functional/Base64ImageTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_print\Functional;
 
+use Drupal\node\Entity\Node;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Render\RenderContext;
 use Drupal\field\Entity\FieldConfig;
@@ -31,7 +32,7 @@ class Base64ImageTest extends BrowserTestBase {
   /**
    * The node we're printing.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
diff --git a/tests/src/Functional/EntityPrintActionTest.php b/tests/src/Functional/EntityPrintActionTest.php
index 5f58538..0d1977a 100644
--- a/tests/src/Functional/EntityPrintActionTest.php
+++ b/tests/src/Functional/EntityPrintActionTest.php
@@ -54,7 +54,7 @@ class EntityPrintActionTest extends BrowserTestBase {
    */
   public function testDownloadPdfAction() {
     $this->drupalGet('/admin/content');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'action' => 'entity_print_pdf_download_action',
       'node_bulk_form[0]' => 1,
     ], 'Apply to selected items');
diff --git a/tests/src/Functional/EntityPrintAdminTest.php b/tests/src/Functional/EntityPrintAdminTest.php
index cb020b7..d7b8b20 100644
--- a/tests/src/Functional/EntityPrintAdminTest.php
+++ b/tests/src/Functional/EntityPrintAdminTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_print\Functional;
 
+use Drupal\node\Entity\Node;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,7 +28,7 @@ class EntityPrintAdminTest extends BrowserTestBase {
   /**
    * The node object to test against.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
@@ -75,7 +76,8 @@ class EntityPrintAdminTest extends BrowserTestBase {
 
     $full_view_mode = 'Full view mode';
     $pdf_view_mode = 'PDF view mode';
-    $this->drupalPostForm('admin/structure/types/manage/page/display', [
+    $this->drupalGet('admin/structure/types/manage/page/display');
+    $this->submitForm([
       'fields[entity_print_view_pdf][empty_cell]' => $full_view_mode,
       'fields[entity_print_view_pdf][region]' => 'content',
     ], 'Save');
@@ -89,12 +91,14 @@ class EntityPrintAdminTest extends BrowserTestBase {
     $this->drupalGet('/print/pdf/node/1/debug');
     $assert->pageTextContains($full_view_mode);
     $assert->pageTextNotContains($pdf_view_mode);
+    $this->drupalGet('admin/structure/types/manage/page/display');
 
     // Configure the PDF view mode.
-    $this->drupalPostForm('admin/structure/types/manage/page/display', [
+    $this->submitForm([
       'display_modes_custom[pdf]' => 1,
     ], 'Save');
-    $this->drupalPostForm('admin/structure/types/manage/page/display/pdf', [
+    $this->drupalGet('admin/structure/types/manage/page/display/pdf');
+    $this->submitForm([
       'fields[entity_print_view_pdf][empty_cell]' => $pdf_view_mode,
       'fields[entity_print_view_pdf][region]' => 'content',
     ], 'Save');
@@ -106,7 +110,7 @@ class EntityPrintAdminTest extends BrowserTestBase {
 
     // Load the EntityViewDisplay and ensure the settings are in the correct
     // place.
-    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $display */
+    /** @var EntityViewDisplay $display */
     $display = EntityViewDisplay::load('node.page.default');
     $this->assertSame($full_view_mode, $display->getThirdPartySetting('entity_print', 'pdf_label'));
 
diff --git a/tests/src/Functional/EntityPrintTest.php b/tests/src/Functional/EntityPrintTest.php
index 5f0a19b..ff01087 100644
--- a/tests/src/Functional/EntityPrintTest.php
+++ b/tests/src/Functional/EntityPrintTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_print\Functional;
 
+use Drupal\node\Entity\Node;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\Role;
 
@@ -33,7 +34,7 @@ class EntityPrintTest extends BrowserTestBase {
   /**
    * The node we're printing.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
diff --git a/tests/src/Functional/InstallationTest.php b/tests/src/Functional/InstallationTest.php
index 03f4e45..1d5ca57 100644
--- a/tests/src/Functional/InstallationTest.php
+++ b/tests/src/Functional/InstallationTest.php
@@ -54,11 +54,13 @@ class InstallationTest extends BrowserTestBase {
    * Uninstall the module using the UI.
    */
   protected function uninstallModules() {
-    $this->drupalPostForm('admin/modules/uninstall', [
+    $this->drupalGet('admin/modules/uninstall');
+    $this->submitForm([
       'uninstall[entity_print_views]' => TRUE,
     ], 'Uninstall');
     $this->getSession()->getPage()->pressButton('Uninstall');
-    $this->drupalPostForm('admin/modules/uninstall', [
+    $this->drupalGet('admin/modules/uninstall');
+    $this->submitForm([
       'uninstall[entity_print]' => TRUE,
     ], 'Uninstall');
     $this->getSession()->getPage()->pressButton('Uninstall');
@@ -68,7 +70,8 @@ class InstallationTest extends BrowserTestBase {
    * Install the modules using the UI.
    */
   protected function installModules() {
-    $this->drupalPostForm('admin/modules', [
+    $this->drupalGet('admin/modules');
+    $this->submitForm([
       'modules[entity_print][enable]' => TRUE,
       'modules[entity_print_views][enable]' => TRUE,
     ], 'Install');
diff --git a/tests/src/FunctionalJavascript/EntityPrintAdminTest.php b/tests/src/FunctionalJavascript/EntityPrintAdminTest.php
index 0202783..a998433 100644
--- a/tests/src/FunctionalJavascript/EntityPrintAdminTest.php
+++ b/tests/src/FunctionalJavascript/EntityPrintAdminTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_print\FunctionalJavascript;
 
+use Drupal\node\Entity\Node;
+use Drupal\entity_print\Entity\PrintEngineStorageInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 
 /**
@@ -26,7 +28,7 @@ class EntityPrintAdminTest extends WebDriverTestBase {
   /**
    * The node object to test against.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
@@ -69,7 +71,7 @@ class EntityPrintAdminTest extends WebDriverTestBase {
     $assert->pageTextContains('Dompdf is not available because it is not configured. Please install with:');
 
     // Ensure saving the form without any PDF engine selected doesn't blow up.
-    $this->drupalPostForm(NULL, [], 'Save configuration');
+    $this->submitForm([], 'Save configuration');
 
     // Assert the intial config values.
     $this->getSession()->getPage()->fillField('pdf', 'testprintengine');
@@ -81,14 +83,14 @@ class EntityPrintAdminTest extends WebDriverTestBase {
     $assert->fieldValueEquals('test_word_print_engine[test_word_setting]', 'my-default');
 
     // Ensure the plugin gets the chance to validate the form.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'pdf' => 'testprintengine',
       'word_docx' => 'test_word_print_engine',
       'testprintengine[test_engine_setting]' => 'rejected',
     ], 'Save configuration');
     $assert->pageTextContains('Setting has an invalid value');
 
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'default_css' => 0,
       'force_download' => 0,
       'pdf' => 'testprintengine',
@@ -97,7 +99,7 @@ class EntityPrintAdminTest extends WebDriverTestBase {
       'testprintengine[test_engine_setting]' => 'testvalue',
     ], 'Save configuration');
 
-    /** @var \Drupal\entity_print\Entity\PrintEngineStorageInterface $config_entity */
+    /** @var PrintEngineStorageInterface $config_entity */
     $config_entity = \Drupal::entityTypeManager()->getStorage('print_engine')->load('testprintengine');
     // Assert the expected settings were stored.
     $this->assertEquals('testprintengine', $config_entity->id());
diff --git a/tests/src/Kernel/EntityPrintAccessTest.php b/tests/src/Kernel/EntityPrintAccessTest.php
index 232af9e..8cd28a6 100644
--- a/tests/src/Kernel/EntityPrintAccessTest.php
+++ b/tests/src/Kernel/EntityPrintAccessTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_print\Kernel;
 
+use Drupal\node\Entity\Node;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\entity_print\Controller\EntityPrintController;
 use Drupal\KernelTests\KernelTestBase;
@@ -35,7 +36,7 @@ class EntityPrintAccessTest extends KernelTestBase {
   /**
    * The node object to test against.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
@@ -133,7 +134,7 @@ class EntityPrintAccessTest extends KernelTestBase {
   /**
    * Checks access for the user to print the view.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account we're checking against.
    * @param string $entity_type
    *   The entity type string.
diff --git a/tests/src/Kernel/EntityPrintPluginManagerTest.php b/tests/src/Kernel/EntityPrintPluginManagerTest.php
index 9bc5cdb..660c0df 100644
--- a/tests/src/Kernel/EntityPrintPluginManagerTest.php
+++ b/tests/src/Kernel/EntityPrintPluginManagerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_print\Kernel;
 
+use Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\entity_print\PrintEngineException;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -19,7 +21,7 @@ class EntityPrintPluginManagerTest extends KernelTestBase {
   /**
    * The plugin manager.
    *
-   * @var \Drupal\entity_print\Plugin\EntityPrintPluginManagerInterface
+   * @var EntityPrintPluginManagerInterface
    */
   protected $pluginManager;
 
@@ -37,7 +39,7 @@ class EntityPrintPluginManagerTest extends KernelTestBase {
    * @covers ::createSelectedInstance
    */
   public function testCreateSelectedInstance() {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $factory */
+    /** @var ConfigFactoryInterface $factory */
     $factory = $this->container->get('config.factory');
     $config = $factory->getEditable('entity_print.settings');
     $config->set('print_engines', ['pdf_engine' => '']);
diff --git a/tests/src/Kernel/ExtraFieldsTest.php b/tests/src/Kernel/ExtraFieldsTest.php
index 36ca167..c54d60c 100644
--- a/tests/src/Kernel/ExtraFieldsTest.php
+++ b/tests/src/Kernel/ExtraFieldsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_print\Kernel;
 
+use Drupal\node\Entity\Node;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Session\AnonymousUserSession;
 use Drupal\KernelTests\KernelTestBase;
@@ -38,7 +39,7 @@ class ExtraFieldsTest extends KernelTestBase {
   /**
    * The node we're working with.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
diff --git a/tests/src/Kernel/FilenameGeneratorTest.php b/tests/src/Kernel/FilenameGeneratorTest.php
index 15bd6e8..4ad0eb4 100644
--- a/tests/src/Kernel/FilenameGeneratorTest.php
+++ b/tests/src/Kernel/FilenameGeneratorTest.php
@@ -24,7 +24,7 @@ class FilenameGeneratorTest extends KernelTestBase {
   /**
    * The filename generator.
    *
-   * @var \Drupal\entity_print\FilenameGeneratorInterface
+   * @var FilenameGeneratorInterface
    */
   protected $filenameGenerator;
 
diff --git a/tests/src/Kernel/NodePreviewTest.php b/tests/src/Kernel/NodePreviewTest.php
index 083d926..61e3aa9 100644
--- a/tests/src/Kernel/NodePreviewTest.php
+++ b/tests/src/Kernel/NodePreviewTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_print\Kernel;
 
+use Drupal\Core\Render\RendererInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Controller\NodePreviewController;
 use Drupal\node\Entity\Node;
@@ -53,7 +54,7 @@ class NodePreviewTest extends KernelTestBase {
 
     $controller = NodePreviewController::create($this->container);
     $build = $controller->view($node);
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');
     $renderer->renderPlain($build);
     $this->assertNotError("array_flip(): Can only flip STRING and INTEGER values!", E_WARNING);
diff --git a/tests/src/Kernel/PostRenderSubscriberTest.php b/tests/src/Kernel/PostRenderSubscriberTest.php
index 7abd350..e6a6a7b 100644
--- a/tests/src/Kernel/PostRenderSubscriberTest.php
+++ b/tests/src/Kernel/PostRenderSubscriberTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_print\Kernel;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\entity_print\EventSubscriber\PostRenderSubscriber;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -22,7 +23,7 @@ class PostRenderSubscriberTest extends KernelTestBase {
    * Test the event subscriber.
    */
   public function testEventSubscriber() {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+    /** @var ConfigFactoryInterface $configFactory */
     $configFactory = $this->container->get('config.factory');
     $event = new PrintHtmlAlterTestEvent();
     $subscriber = new PostRenderSubscriber($configFactory, $this->container->get('request_stack'));
diff --git a/tests/src/Kernel/PrintBuilderTest.php b/tests/src/Kernel/PrintBuilderTest.php
index 805664c..fd16397 100644
--- a/tests/src/Kernel/PrintBuilderTest.php
+++ b/tests/src/Kernel/PrintBuilderTest.php
@@ -118,7 +118,7 @@ class PrintBuilderTest extends KernelTestBase {
 
     // Print builder generates a filename for us.
     $uri = $builder->savePrintable([$node], $print_engine);
-    $this->assertRegExp('#public://(.*)\.pdf#', $uri);
+    $this->assertMatchesRegularExpression('#public://(.*)\.pdf#', $uri);
 
     $filename = $this->randomMachineName() . 'pdf';
     $uri = $builder->savePrintable([$node], $print_engine, 'public', $filename);
diff --git a/tests/src/Kernel/PrintLinkTest.php b/tests/src/Kernel/PrintLinkTest.php
index e75d3d4..514fc76 100644
--- a/tests/src/Kernel/PrintLinkTest.php
+++ b/tests/src/Kernel/PrintLinkTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_print\Kernel;
 
+use Drupal\entity_print\Plugin\Block\PrintLinks;
 use Drupal\Core\Plugin\Context\Context;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\KernelTests\KernelTestBase;
@@ -56,7 +57,7 @@ class PrintLinkTest extends KernelTestBase {
    * @param array $config
    *   The block configuration.
    *
-   * @return \Drupal\entity_print\Plugin\Block\PrintLinks
+   * @return PrintLinks
    *   The loaded block.
    */
   protected function getBlock(array $config = []) {
@@ -64,7 +65,7 @@ class PrintLinkTest extends KernelTestBase {
     $entity = $this->createMock('Drupal\Core\Entity\EntityInterface');
     $context = new Context(ContextDefinition::create(), $entity);
 
-    /** @var \Drupal\entity_print\Plugin\Block\PrintLinks $block */
+    /** @var PrintLinks $block */
     $block = $manager->createInstance('print_links', $config);
     $block->setContext('entity', $context);
 
diff --git a/tests/src/Unit/AssetCollectorTest.php b/tests/src/Unit/AssetCollectorTest.php
index c9e9b0e..a3b5d84 100644
--- a/tests/src/Unit/AssetCollectorTest.php
+++ b/tests/src/Unit/AssetCollectorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_print\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Extension\Extension;
 use Drupal\Core\Extension\InfoParserInterface;
 use Drupal\Core\Extension\ThemeExtensionList;
@@ -18,6 +19,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class AssetCollectorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * CSS Alter event should always fire, even when no entries in the theme file.
    */
