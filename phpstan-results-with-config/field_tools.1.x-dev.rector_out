modules/contrib/field_tools/field_tools.admin.inc
modules/contrib/field_tools/field_tools.module
modules/contrib/field_tools/src/Controller/FieldGraph.php
modules/contrib/field_tools/src/Controller/FieldList.php
modules/contrib/field_tools/src/Controller/FieldListTrait.php
modules/contrib/field_tools/src/Controller/FieldReferencesList.php
modules/contrib/field_tools/src/DisplayCloner.php
modules/contrib/field_tools/src/DisplaySettingsCopier.php
modules/contrib/field_tools/src/EntityHandler/FieldStorageConfigAccess.php
modules/contrib/field_tools/src/FieldCloner.php
modules/contrib/field_tools/src/FieldToolsReferencesInfo.php
modules/contrib/field_tools/src/Form/BundleDestinationOptionsTrait.php
modules/contrib/field_tools/src/Form/ConfigFieldsExportToCodeForm.php
modules/contrib/field_tools/src/Form/EntityDisplayBulkCloneForm.php
modules/contrib/field_tools/src/Form/EntityDisplaySettingsBulkCopyForm.php
modules/contrib/field_tools/src/Form/FieldBulkCloneForm.php
modules/contrib/field_tools/src/Form/FieldConfigCloneForm.php
modules/contrib/field_tools/src/Form/FieldStorageConfigDeleteForm.php
modules/contrib/field_tools/src/Plugin/Derivative/FieldToolsLocalTask.php
modules/contrib/field_tools/src/Routing/RouteSubscriber.php

18 files with changes
=====================

1) modules/contrib/field_tools/src/Routing/RouteSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_tools/src/Plugin/Derivative/FieldToolsLocalTask.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates an FieldToolsLocalTask object.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(RouteProviderInterface $route_provider, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/field_tools/src/Form/FieldConfigCloneForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The field cloner.
    *
-   * @var \Drupal\field_tools\FieldCloner
+   * @var FieldCloner
    */
   protected $fieldCloner;

@@ @@
   /**
    * Creates a Clone instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\field_tools\FieldCloner $field_cloner
+   * @param FieldCloner $field_cloner
    *   The field cloner.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, FieldCloner $field_cloner) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   A reference to a keyed array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/field_tools/src/Form/FieldBulkCloneForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The field cloner.
    *
-   * @var \Drupal\field_tools\FieldCloner
+   * @var FieldCloner
    */
   protected $fieldCloner;

@@ @@
   /**
    * Creates a Clone instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\field_tools\FieldCloner $field_cloner
+   * @param FieldCloner $field_cloner
    *   The field cloner.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, FieldCloner $field_cloner) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/field_tools/src/Form/EntityDisplaySettingsBulkCopyForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The field cloner.
    *
-   * @var \Drupal\field_tools\DisplaySettingsCopier
+   * @var DisplaySettingsCopier
    */
   protected $displaySettingsCopier;

@@ @@
   /**
    * Creates a Clone instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository service.
-   * @param \Drupal\field_tools\DisplaySettingsCopier $display_settings_copier
+   * @param DisplaySettingsCopier $display_settings_copier
    *   The display settings copier.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/field_tools/src/Form/EntityDisplayBulkCloneForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The field cloner.
    *
-   * @var \Drupal\field_tools\DisplayCloner
+   * @var DisplayCloner
    */
   protected $displayCloner;

@@ @@
   /**
    * Creates a Clone instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository service.
-   * @param \Drupal\field_tools\DisplayCloner $display_cloner
+   * @param DisplayCloner $display_cloner
    *   The display cloner.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/field_tools/src/Form/ConfigFieldsExportToCodeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_tools\Form;

+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The field cloner.
    *
-   * @var \Drupal\field_tools\FieldCloner
+   * @var FieldCloner
    */
   protected $fieldCloner;

@@ @@
   /**
    * Creates a Clone instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\field_tools\FieldCloner $field_cloner
+   * @param FieldCloner $field_cloner
    *   The field cloner.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, FieldCloner $field_cloner) {
@@ @@
       $code[] = "  ->setRequired(TRUE)";
     }

-    if ($field instanceof \Drupal\Core\Field\FieldStorageDefinitionInterface) {
+    if ($field instanceof FieldStorageDefinitionInterface) {
       if ($field->isRevisionable()) {
         $code[] = "  ->setRevisionable(TRUE)";
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/field_tools/src/Form/BundleDestinationOptionsTrait.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the options for the destination entity types and bundles form element.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    *
    * @return
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/field_tools/src/FieldToolsReferencesInfo.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Creates a FieldToolsReferencesInfo instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The Entity field manager.
    */
   public function __construct(
@@ @@
    * @param bool $include_config_targets
    *   (optional) Whether to include references to config entity types.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   An array of field definitions. This can be a mix of base fields and
    *   config fields. The keys are of the form 'ENTITY_ID:BUNDLE:FIELD_NAME'.
    */
@@ @@
    * TODO: improve this when
    * https://www.drupal.org/project/drupal/issues/3057545 is fixed.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $storage_definition
+   * @param FieldStorageDefinitionInterface $storage_definition
    *   The field storage.
    *
    * @return string[]
@@ @@
   /**
    * Gets the bundles that a field references.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *
    * @return string[]
    *   Array of whose values are of the form TARGET_ENTITY_TYPE:TARGET_BUNDLE.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/field_tools/src/FieldCloner.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new FieldCloner.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
@@ @@
    * name exists on the destination bundle.
    * TODO: check for this and throw an exception.
    *
-   * @param \Drupal\field\FieldConfigInterface $field_config
+   * @param FieldConfigInterface $field_config
    *  The field config entity to clone.
    * @param string $destination_entity_type_id
    *  The entity type to clone the field to. If this is different from the
@@ @@
    * @param string $destination_bundle
    *  The destination bundle.
    *
-   * @throws \Drupal\Core\Field\FieldException
+   * @throws FieldException
    *  Throws an exception if there is already a field storage with the same name
    *  on the target entity type, whose type does not match the given field.
    */
@@ @@
    * @param string $display_type
    *  The entity type ID of the display entities to copy: one of
    *  'entity_view_display' or entity_form_display'.
-   * @param \Drupal\field\FieldConfigInterface $field_config
+   * @param FieldConfigInterface $field_config
    *  The field config entity to clone.
    * @param string $destination_entity_type_id
    *  The destination entity type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/field_tools/src/DisplaySettingsCopier.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new FieldCloner.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/field_tools/src/DisplayCloner.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new FieldCloner.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(
@@ @@
    *  - Fields which are on the target only but not the source have their
    *    settings left untouched.
    *
-   * @param \Drupal\Core\Entity\EntityDisplayBase $source_entity_display
+   * @param EntityDisplayBase $source_entity_display
    *  The entity display (form or view) to clone.
    * @param string $destination_bundle
    *  The destination bundle.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/field_tools/src/Controller/FieldReferencesList.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_tools\Controller;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * Creates an FieldReferencesList object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(
@@ @@

     $reference_storage_definitions = [];
     $referenced_types = [];
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
       if ($entity_type->getGroup() != 'content') {
         continue;
@@ @@
   /**
    * Returns a table row for a single field storage.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $storage_definition
+   * @param FieldStorageDefinitionInterface $storage_definition
    *   The field storage.
    *
    * @return array
@@ @@
   /**
    * Builds operation links for a single storage definition.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $storage_definition
+   * @param FieldStorageDefinitionInterface $storage_definition
    *   The field storage.
    *
    * @return array
@@ @@
    * TODO: improve this when
    * https://www.drupal.org/project/drupal/issues/3057545 is fixed.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $storage_definition
+   * @param FieldStorageDefinitionInterface $storage_definition
    *   The field storage.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/field_tools/src/Controller/FieldListTrait.php:20

    ---------- begin diff ----------
@@ @@
    *  The name of a field on field_storage_config entities that can be used for
    *  sorting.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *  A URL object.
    */
   protected function getSortQueryURL($sort) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/field_tools/src/Controller/FieldList.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Creates an FieldList object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/field_tools/src/Controller/FieldGraph.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Creates a FieldGraph object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/field_tools/field_tools.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\field_tools\Form\FieldStorageConfigDeleteForm;
+use Drupal\field_tools\EntityHandler\FieldStorageConfigAccess;
+use Drupal\Core\Entity\Routing\AdminHtmlRouteProvider;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Url;
 /**
  * @file field_tools.module
  * Contains useful tools for working with fields.
@@ @@
 /**
  * Implements hook_help().
  */
-function field_tools_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function field_tools_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     // Main module help.
     case 'help.page.field_tools':
@@ @@
   // FieldConfig::linkTemplates(), but we can't hack into that.

   // Add a delete form and link to field storage config.
-  $entity_types['field_storage_config']->setFormClass('delete', Drupal\field_tools\Form\FieldStorageConfigDeleteForm::class);
+  $entity_types['field_storage_config']->setFormClass('delete', FieldStorageConfigDeleteForm::class);
   $entity_types['field_storage_config']->setLinkTemplate('delete-form', '/admin/reports/fields/tools/{field_storage_config}/delete');
-  $entity_types['field_storage_config']->setHandlerClass('access', Drupal\field_tools\EntityHandler\FieldStorageConfigAccess::class);
+  $entity_types['field_storage_config']->setHandlerClass('access', FieldStorageConfigAccess::class);
   // @todo Core forgot to add a direct way to manipulate route_provider, so
   // we have to do it the sloppy way for now.
   $route_providers = $entity_types['field_storage_config']->getRouteProviderClasses() ?: [];
@@ @@
   if (empty($route_providers['field_tools'])) {
     // This will only provide the delete route, as all the other link templates
     // aren't defined.
-    $route_providers['field_tools'] = \Drupal\Core\Entity\Routing\AdminHtmlRouteProvider::class;
+    $route_providers['field_tools'] = AdminHtmlRouteProvider::class;
     $entity_types['field_storage_config']->setHandlerClass('route_provider', $route_providers);
   }
 }
@@ @@
 /**
  * Implements hook_entity_operation().
  */
-function field_tools_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
+function field_tools_entity_operation(EntityInterface $entity) {
   $operations = [];

   if ($entity->getEntityTypeId() == 'field_config' && $entity->access('update')) {
@@ @@
     // Field clone operation.
     $operations['clone'] = array(
       'title' => t('Clone'),
-      'url' => \Drupal\Core\Url::fromRoute("entity.field_config.{$target_entity_type_id}_field_tools_clone_form", $parameters),
+      'url' => Url::fromRoute("entity.field_config.{$target_entity_type_id}_field_tools_clone_form", $parameters),
       'weight' => 50,
     );
   }
@@ @@

       $operations['clone_fields'] = array(
         'title' => t('Clone fields'),
-        'url' => \Drupal\Core\Url::fromRoute("field_tools.field_bulk_clone_{$bundle_of_entity_type_id}", $parameters),
+        'url' => Url::fromRoute("field_tools.field_bulk_clone_{$bundle_of_entity_type_id}", $parameters),
         'weight' => 50,
       );
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


18) modules/contrib/field_tools/field_tools.admin.inc:68

    ---------- begin diff ----------
@@ @@
     'header' => $header,
   ));

-  drupal_add_css(drupal_get_path('module', 'field_tools') . '/field_tools.css');
+  drupal_add_css(\Drupal::service('extension.list.module')->getPath('field_tools') . '/field_tools.css');

   return $output;
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 18 files have been changed by Rector                                      

