modules/contrib/dynamic_layouts/dynamic_layouts.install
modules/contrib/dynamic_layouts/dynamic_layouts.module
modules/contrib/dynamic_layouts/src/Controller/DynamicLayoutController.php
modules/contrib/dynamic_layouts/src/DynamicLayoutConstants.php
modules/contrib/dynamic_layouts/src/DynamicLayoutInterface.php
modules/contrib/dynamic_layouts/src/DynamicLayoutListBuilder.php
modules/contrib/dynamic_layouts/src/DynamicLayoutSettingsInterface.php
modules/contrib/dynamic_layouts/src/Entity/DynamicLayout.php
modules/contrib/dynamic_layouts/src/Entity/DynamicLayoutSettings.php
modules/contrib/dynamic_layouts/src/Form/DynamicLayoutDeleteForm.php
modules/contrib/dynamic_layouts/src/Form/DynamicLayoutForm.php
modules/contrib/dynamic_layouts/src/Form/EditColumnModalForm.php
modules/contrib/dynamic_layouts/src/Form/EditRowModalForm.php
modules/contrib/dynamic_layouts/src/Form/SettingsForm.php
modules/contrib/dynamic_layouts/src/Plugin/Derivative/DynamicLayoutDeriver.php
modules/contrib/dynamic_layouts/src/Plugin/Layout/DynamicLayout.php

10 files with changes
=====================

1) modules/contrib/dynamic_layouts/src/Plugin/Layout/DynamicLayout.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dynamic_layouts\Plugin\Layout;

+use Drupal\dynamic_layouts\Entity\DynamicLayoutSettings;
 use Drupal\Core\Layout\LayoutDefault;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\dynamic_layouts\Entity\DynamicLayoutSettings
+   * @var DynamicLayoutSettings
    */
   protected $settings;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/dynamic_layouts/src/Plugin/Derivative/DynamicLayoutDeriver.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
         $regions = $entity->getLayoutRegions();
         $icon_map = $entity->getIconMap();

-        $module_path = drupal_get_path('module', 'dynamic_layouts') . '/templates';
+        $module_path = \Drupal::service('extension.list.module')->getPath('dynamic_layouts') . '/templates';

         $this->derivatives[$entity->id()] = new LayoutDefinition([
           'label' => $entity->label(),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/dynamic_layouts/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dynamic_layouts\Form;

+use Drupal\dynamic_layouts\Entity\DynamicLayoutSettings;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EditRowModalForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {

-    /** @var \Drupal\dynamic_layouts\Entity\DynamicLayoutSettings $settings */
+    /** @var DynamicLayoutSettings $settings */
     $frontend_library_default = '';
     $column_prefix = '';
     $grid_column_count = '';
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     if (!$settings = $this->entityTypeManager->getStorage('dynamic_layout_settings')->load('settings')) {
       return NULL;
     }
@@ @@
    *   The old frontend library.
    * @param object $new_frontend_library
    *   The new frontend library.
-   * @param \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings
+   * @param DynamicLayoutSettingsInterface $settings
    *   The settings object.
    */
   public function updateValues(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/dynamic_layouts/src/Form/EditRowModalForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EditRowModalForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/dynamic_layouts/src/Form/EditColumnModalForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dynamic_layouts\Form;

+use Drupal\dynamic_layouts\DynamicLayoutSettingsInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;

@@ @@
   /**
    * EditRowModalForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityFormBuilderInterface $entity_form_builder, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
       '#disabled' => TRUE,
     ];

-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     if ($settings = $this->entityTypeManager->getStorage('dynamic_layout_settings')->load('settings')) {
       $column_class_options = $settings->getFrontendColumnClasses();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/dynamic_layouts/src/Form/DynamicLayoutForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dynamic_layouts\Form;

+use Drupal\dynamic_layouts\Entity\DynamicLayout;
+use Drupal\dynamic_layouts\Entity\DynamicLayoutSettings;
 use Drupal\Core\Url;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a new DynamicLayoutForm.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(RendererInterface $renderer) {
@@ @@
    */
   public function form(array $form, FormStateInterface $form_state) {

-    /** @var \Drupal\dynamic_layouts\DynamicLayoutInterface $entity */
+    /** @var DynamicLayoutInterface $entity */
     $entity = $this->entity;

     // Attach dynamic layout & popups dialogs/modals libraries.
@@ @@
    */
   protected function addRowFormFields(array &$form) {

-    /** @var \Drupal\dynamic_layouts\Entity\DynamicLayout $entity */
+    /** @var DynamicLayout $entity */
     $entity = $this->entity;

     // Check if we need to render rows.
@@ @@
    * {@inheritdoc}
    */
   protected function actions(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\dynamic_layouts\Entity\DynamicLayout $entity */
+    /** @var DynamicLayout $entity */
     $entity = $this->entity;

     // Change submit button title if entity is new.
@@ @@
   public function getWrapperClasses() {
     $wrapper_classes_arr = ['container-fluid'];

-    /** @var \Drupal\dynamic_layouts\Entity\DynamicLayoutSettings $settings */
+    /** @var DynamicLayoutSettings $settings */
     $frontend_library_class = 'custom';
     if ($settings = $this->entityTypeManager->getStorage('dynamic_layout_settings')->load('settings')) {
       $frontend_library = $settings->getFrontendLibrary();
@@ @@
       return NULL;
     }

-    /** @var \Drupal\dynamic_layouts\DynamicLayoutInterface $entity */
+    /** @var DynamicLayoutInterface $entity */
     $entity = $this->entity;

     // Check if we need to redirect to the list.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/dynamic_layouts/src/Entity/DynamicLayout.php:358

    ---------- begin diff ----------
@@ @@
     $rows = $this->getRows();
     $column_count = 1;

-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     $last_column_class = '';
     $column_width_prefix = '';
     if ($settings = \Drupal::entityTypeManager()
@@ @@
       $this->default_row_class = $starting_default_row_class;
     }

-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     $last_column_class = '';
     $column_width_prefix = '';
     if ($settings = \Drupal::entityTypeManager()
@@ @@
     $delete_column_link = Link::fromTextAndUrl($title, $delete_column_url);
     $delete_column = $delete_column_link->toRenderable();

-    return render($delete_column);
+    return \Drupal::service('renderer')->render($delete_column);
   }

   /**
@@ @@
     $edit_column_link = Link::fromTextAndUrl($title, $edit_column_url);
     $edit_column = $edit_column_link->toRenderable();

-    return render($edit_column);
+    return \Drupal::service('renderer')->render($edit_column);
   }

   /**
@@ @@
   public function getRowLink($row_id, $route, $text, array $options = []) {
     $link = Link::createFromRoute($text, $route, ['dynamic_layout_id' => $this->id(), Constants::ROW_ID => $row_id], $options);
     $renderLink = $link->toRenderable();
-    return render($renderLink);
+    return \Drupal::service('renderer')->render($renderLink);
   }

   /**
@@ @@
     $updated_row = $this->getRowById($row_id);
     $columns = $updated_row[Constants::COLUMNS];

-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     $calculated_column_width_number = NULL;
     if ($settings = \Drupal::entityTypeManager()
       ->getStorage(Constants::DYNAMIC_LAYOUT_SETTINGS)
@@ @@
     $edit_column = $this->getEditColumnLink($this->id(), $row_id, $column_id);
     $delete_column = $this->getDeleteColumnLink($this->id(), $row_id, $column_id);

-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     $column_width_prefix = '';
     if ($settings = \Drupal::entityTypeManager()
       ->getStorage(Constants::DYNAMIC_LAYOUT_SETTINGS)
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/dynamic_layouts/src/DynamicLayoutListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dynamic_layouts;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\dynamic_layouts\Entity\DynamicLayout;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\Entity\DraggableListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new LanguageListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage handler class.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    * {@inheritdoc}
    */
   public function buildHeader() {
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     if (($settings = $this->entityTypeManager->getStorage('dynamic_layout_settings')->load('settings')) && (!$settings->getFrontendLibrary())) {
       $settings_link = Link::fromTextAndUrl(t('here'), Url::fromRoute('dynamic_layout.dynamic_layout_settings'))->toString();

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\dynamic_layouts\Entity\DynamicLayout $entity */
+    /** @var DynamicLayout $entity */
     $row['label'] = $entity->label();
     $row['category'] = Html::escape($entity->getCategory());
     return $row + parent::buildRow($entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/dynamic_layouts/src/Controller/DynamicLayoutController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dynamic_layouts\Controller;

+use Drupal\dynamic_layouts\DynamicLayoutSettingsInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;

@@ @@
   /**
    * EditRowModalForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Form\FormBuilder $formBuilder
+   * @param FormBuilder $formBuilder
    *   The form builder.
    */
   public function __construct(EntityFormBuilderInterface $entity_form_builder, EntityTypeManagerInterface $entityTypeManager, FormBuilder $formBuilder) {
@@ @@
   public function access() {
     $settings_created = FALSE;

-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     if (($settings = $this->entityTypeManager->getStorage('dynamic_layout_settings')->load('settings')) && ($settings->getFrontendLibrary())) {
       $settings_created = TRUE;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/dynamic_layouts/dynamic_layouts.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\dynamic_layouts\DynamicLayoutSettingsInterface;
 /**
  * @file
  * Install, update and uninstall functions for the dynamic_layouts module.
@@ @@
   }

   if ($phase == 'runtime') {
-    /** @var \Drupal\dynamic_layouts\DynamicLayoutSettingsInterface $settings */
+    /** @var DynamicLayoutSettingsInterface $settings */
     if ($settings = \Drupal::entityTypeManager()
       ->getStorage('dynamic_layout_settings')
       ->load('settings')) {
@@ @@
   }

   return $requirements;
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

