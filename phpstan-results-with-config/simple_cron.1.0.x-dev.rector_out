modules/contrib/simple_cron/modules/simple_cron_examples/src/Plugin/SimpleCron/ConfigurableCron.php
modules/contrib/simple_cron/modules/simple_cron_examples/src/Plugin/SimpleCron/MultiTypesCron.php
modules/contrib/simple_cron/modules/simple_cron_examples/src/Plugin/SimpleCron/SingleCron.php
modules/contrib/simple_cron/simple_cron.install
modules/contrib/simple_cron/simple_cron.module
modules/contrib/simple_cron/src/Annotation/SimpleCron.php
modules/contrib/simple_cron/src/Commands/SimpleCronCommands.php
modules/contrib/simple_cron/src/Controller/JobController.php
modules/contrib/simple_cron/src/CronJobAccessControlHandler.php
modules/contrib/simple_cron/src/CronJobListBuilder.php
modules/contrib/simple_cron/src/CronJobManager.php
modules/contrib/simple_cron/src/CronJobManagerInterface.php
modules/contrib/simple_cron/src/Entity/CronJob.php
modules/contrib/simple_cron/src/Entity/CronJobInterface.php
modules/contrib/simple_cron/src/Form/CronJobDisableForm.php
modules/contrib/simple_cron/src/Form/CronJobEnableForm.php
modules/contrib/simple_cron/src/Form/CronJobForm.php
modules/contrib/simple_cron/src/Form/CronJobUnlockForm.php
modules/contrib/simple_cron/src/Form/SimpleCronSettingsForm.php
modules/contrib/simple_cron/src/Plugin/SimpleCron/Cron.php
modules/contrib/simple_cron/src/Plugin/SimpleCron/Queue.php
modules/contrib/simple_cron/src/Plugin/SimpleCronPluginBase.php
modules/contrib/simple_cron/src/Plugin/SimpleCronPluginInterface.php
modules/contrib/simple_cron/src/Plugin/SimpleCronPluginManager.php
modules/contrib/simple_cron/src/Plugin/SimpleCronPluginManagerInterface.php
modules/contrib/simple_cron/src/ProxyClass/SimpleCron.php
modules/contrib/simple_cron/src/Routing/CronJobRouteProvider.php
modules/contrib/simple_cron/src/SimpleCron.php
modules/contrib/simple_cron/src/SimpleCronServiceProvider.php
modules/contrib/simple_cron/tests/modules/simple_cron_test/simple_cron_test.module
modules/contrib/simple_cron/tests/modules/simple_cron_test/src/Plugin/QueueWorker/TestQueue.php
modules/contrib/simple_cron/tests/modules/simple_cron_test/src/Plugin/SimpleCron/TestCronJob.php
modules/contrib/simple_cron/tests/modules/simple_cron_test/src/Plugin/SimpleCron/TestCronJobMultipleTypes.php
modules/contrib/simple_cron/tests/src/Functional/CronJobFormTest.php
modules/contrib/simple_cron/tests/src/Functional/CronJobRoutesTest.php
modules/contrib/simple_cron/tests/src/Functional/CronJobTest.php
modules/contrib/simple_cron/tests/src/Functional/SettingsFormTest.php
modules/contrib/simple_cron/tests/src/Functional/SimpleCronBrowserTestBase.php
modules/contrib/simple_cron/tests/src/Kernel/CronJobAccessTest.php
modules/contrib/simple_cron/tests/src/Kernel/CronJobConfigSchemaTest.php
modules/contrib/simple_cron/tests/src/Kernel/CronJobManagerTest.php
modules/contrib/simple_cron/tests/src/Kernel/CronJobStorageTest.php
modules/contrib/simple_cron/tests/src/Kernel/CronJobTest.php
modules/contrib/simple_cron/tests/src/Kernel/SimpleCronPluginTest.php
modules/contrib/simple_cron/tests/src/Unit/Entity/CronJobTest.php
modules/contrib/simple_cron/tests/src/Unit/Plugin/SimpleCron/CronTest.php
modules/contrib/simple_cron/tests/src/Unit/Plugin/SimpleCron/QueueTest.php
modules/contrib/simple_cron/tests/src/Unit/SimpleCronTest.php

38 files with changes
=====================

1) modules/contrib/simple_cron/tests/src/Unit/SimpleCronTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_cron\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\KeyValueStore\KeyValueMemoryFactory;
@@ @@
 class SimpleCronTest extends UnitTestCase {

   protected const REQUEST_TIME = 1615109176;
+  use ProphecyTrait;

   /**
    * An instance of the Cron class for testing.
    *
-   * @var \Drupal\simple_cron\SimpleCron
+   * @var SimpleCron
    */
   protected $cron;

@@ @@
   /**
    * The current state of the test in memory.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * The container builder.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
    * @param bool $queue_override
    *   Is queue override enabled.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config override mock.
    */
   protected function getConfigFactoryMock(bool $cron_override, bool $queue_override): ConfigFactoryInterface {
@@ @@
    * @param bool $locked
    *   Is lock enabled.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   The logger mock.
    */
   protected function getLoggerMock(bool $locked): LoggerChannelInterface {
@@ @@
    * @param bool $queue_override
    *   Is queue override enabled.
    *
-   * @return \Drupal\simple_cron\CronJobManagerInterface
+   * @return CronJobManagerInterface
    *   The cron job manager mock.
    */
   protected function getCronJobManagerMock(bool $cron_override, bool $queue_override): CronJobManagerInterface {
@@ @@
    * @param bool $is_single_forced
    *   (optional) Is single cron is forced. Defaults to FALSE.
    *
-   * @return \Symfony\Component\HttpFoundation\RequestStack
+   * @return RequestStack
    *   The request stack mock.
    */
   protected function getRequestStackMock(bool $is_manual, bool $is_single, bool $is_single_forced = FALSE): RequestStack {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/simple_cron/tests/src/Unit/Plugin/SimpleCron/QueueTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_cron\Unit\Plugin\SimpleCron;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
@@ @@
   protected const REQUEUE_COUNT = 3;

   protected const CLAIM_TIME = 300;
+  use ProphecyTrait;

   /**
    * The queue used to store test work items.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * The current state of the test in memory.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * The container builder.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * Get logger mock.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   The logger mock.
    */
   protected function getLoggerMock(): LoggerChannelInterface {
@@ @@
    * @param bool $override_enabled
    *   TRUE when override enabled.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config factory mock.
    */
   protected function getConfigFactoryMock(bool $override_enabled): ConfigFactoryInterface {
@@ @@
   /**
    * Get queue worker mock.
    *
-   * @param \Prophecy\Prophecy\ObjectProphecy $queue_factory
+   * @param ObjectProphecy $queue_factory
    *   The queue factory mock.
    *
-   * @return \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @return QueueWorkerManagerInterface
    *   The queue worker manager mock.
    */
   protected function getQueueWorkerMock(ObjectProphecy $queue_factory): QueueWorkerManagerInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/simple_cron/tests/src/Unit/Plugin/SimpleCron/CronTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_cron\Unit\Plugin\SimpleCron;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
  */
 class CronTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The current state of the test in memory.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * The container builder.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
    * @param bool $override_enabled
    *   TRUE when override enabled.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config factory mock.
    */
   protected function getConfigFactoryMock(bool $override_enabled): ConfigFactoryInterface {
@@ @@
   /**
    * Get module handler mock.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler mock.
    */
   protected function getModuleHandlerMock(): ModuleHandlerInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/simple_cron/tests/src/Unit/Entity/CronJobTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_cron\Unit\Entity;

+use Prophecy\PhpUnit\ProphecyTrait;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Database\Connection;
@@ @@
   protected const JOB_LABEL = 'Simple Cron Test';

   protected const REQUEST_TIME = 1615109176;
+  use ProphecyTrait;

   /**
    * The current state of the test in memory.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * The container builder.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * The cron job mock.
    *
-   * @var \Drupal\simple_cron\Entity\CronJob|\PHPUnit\Framework\MockObject\MockObject
+   * @var CronJob|MockObject
    */
   protected $job;

@@ @@
   /**
    * Get config override mock.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config override mock.
    */
   protected function getConfigFactoryMock(): ConfigFactoryInterface {
@@ @@
    * @param bool|null $locked
    *   Is lock enabled.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   The logger mock.
    */
   protected function getLoggerMock(?bool $locked): LoggerChannelInterface {
@@ @@
    * @param int $timestamp
    *   The timestamp.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date time mock.
    */
   protected function getDrupalDateTimeMock(int $timestamp): DrupalDateTime {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/simple_cron/tests/src/Kernel/SimpleCronPluginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_cron\Kernel;

+use Drupal\simple_cron\Plugin\SimpleCronPluginManagerInterface;
 use Drupal\simple_cron\Form\SimpleCronSettingsForm;
 use Drupal\simple_cron\Plugin\SimpleCron\Cron;
 use Drupal\simple_cron\Plugin\SimpleCron\Queue;
@@ @@
   /**
    * The simple cron plugin manager.
    *
-   * @var \Drupal\simple_cron\Plugin\SimpleCronPluginManagerInterface
+   * @var SimpleCronPluginManagerInterface
    */
   protected $simpleCronPluginManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/simple_cron/tests/src/Kernel/CronJobStorageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_cron\Kernel;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\simple_cron\Entity\CronJobInterface;
@@ @@
   /**
    * The cron job storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $storage;

@@ @@
    */
   protected function createTests(): void {
     // Attempt to create a cron job without a plugin.
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $entity */
+    /** @var CronJobInterface $entity */
     $entity = $this->storage->create();
     $plugin = $entity->getPlugin();
     $this->assertEquals(NULL, $plugin, 'The plugin is null when a cron job was created without a plugin.');
@@ @@
    * Tests the loading of cron job.
    */
   protected function loadTests(): void {
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $entity */
+    /** @var CronJobInterface $entity */
     $entity = $this->storage->load('simple_cron_test');

     $this->assertInstanceOf(CronJobInterface::class, $entity);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/simple_cron/tests/src/Kernel/CronJobManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_cron\Kernel;

+use Drupal\simple_cron\CronJobManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\simple_cron\Entity\CronJob;
 use Drupal\simple_cron\Form\SimpleCronSettingsForm;
@@ @@
   /**
    * The cron job manager.
    *
-   * @var \Drupal\simple_cron\CronJobManagerInterface
+   * @var CronJobManagerInterface
    */
   protected $cronJobManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/simple_cron/tests/src/Kernel/CronJobConfigSchemaTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_cron\Kernel;

+use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\simple_cron\Entity\CronJob;
 use Drupal\Tests\SchemaCheckTestTrait;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The typed config manager.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/simple_cron/tests/src/Kernel/CronJobAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_cron\Kernel;

+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Core\Lock\DatabaseLockBackend;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\simple_cron\Entity\CronJob;
@@ @@
   /**
    * The cron job enabled.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $jobEnabled;

@@ @@
   /**
    * The cron job disabled.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $jobDisabled;

@@ @@
   /**
    * The cron job locked.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $jobLocked;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/simple_cron/tests/src/Functional/SimpleCronBrowserTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_cron\Functional;

+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
    * @param bool $exists
    *   (optional) Is xpath exists. Default to TRUE.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
    */
   protected function assertTableElementExists(int $row, int $column, string $value, bool $exists = TRUE): void {
-    $xpath = $this->assertSession()->buildXPathQuery(
-      '//form[@class="simple-cron-list"]/table/tbody/tr[:row]/td[:column and text() = :label]',
-      [
-        ':row' => $row,
-        ':column' => $column,
-        ':label' => $value,
-      ]
-    );
+    $xpath = $this->assertSession()->buildXPathQuery('//form[@class="simple-cron-list"]/table/tbody/tr[:row]/td[:column and text() = :label]', [
+      ':row' => $row,
+      ':column' => $column,
+      ':label' => $value,
+    ]);

     if ($exists) {
       $this->assertSession()->elementExists('xpath', $xpath);
    ----------- end diff -----------

Applied rules:
 * BuildXPathQueryRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/simple_cron/tests/src/Functional/SettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_cron\Functional;

+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
    *
    * @dataProvider providerTestSettingsFormRoute
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws EntityStorageException
    */
   public function testSettingsFormRoute(string $permission, int $status_code): void {
     $user = $this->drupalCreateUser([$permission]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/simple_cron/tests/src/Functional/CronJobTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_cron\Functional;

+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\simple_cron\Entity\CronJob;
 use Drupal\Tests\Traits\Core\CronRunTrait;

@@ @@
    * @param int $row
    *   The row.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
    */
   protected function assertCronNotRun(int $row = 1): void {
     $this->drupalGet('admin/config/system/cron/jobs');
@@ @@
    * @param int $row
    *   The row.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
    */
   protected function assertCronRun(int $row = 1): void {
     $this->drupalGet('admin/config/system/cron/jobs');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/simple_cron/src/SimpleCron.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron;

+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Component\Utility\Environment;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Cron;
@@ @@
   /**
    * The cron job manager.
    *
-   * @var \Drupal\simple_cron\CronJobManagerInterface
+   * @var CronJobManagerInterface
    */
   protected $cronJobManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Set cron job manager.
    *
-   * @param \Drupal\simple_cron\CronJobManagerInterface $cron_job_manager
+   * @param CronJobManagerInterface $cron_job_manager
    *   The cron job manager.
    */
   public function setCronJobManager(CronJobManagerInterface $cron_job_manager): void {
@@ @@
   /**
    * Set config factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory): void {
@@ @@
   /**
    * Set request stack.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function setRequestStack(RequestStack $request_stack): void {
@@ @@

     // Manual cron job run.
     if ($current_request && $current_request->attributes->get('_route') === 'entity.simple_cron_job.run') {
-      /** @var \Drupal\simple_cron\Entity\CronJobInterface $job */
+      /** @var CronJobInterface $job */
       $job = $current_request->get('simple_cron_job');
       $return = $job->run($this->time->getRequestTime(), TRUE);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/simple_cron/src/Routing/CronJobRouteProvider.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the enable form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getEnableFormRoute(EntityTypeInterface $entity_type): ?Route {
@@ @@
   /**
    * Gets the disable form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDisableFormRoute(EntityTypeInterface $entity_type): ?Route {
@@ @@
   /**
    * Gets the unlock form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getUnlockPageRoute(EntityTypeInterface $entity_type): ?Route {
@@ @@
   /**
    * Gets the run page route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRunPageRoute(EntityTypeInterface $entity_type): ?Route {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/simple_cron/src/ProxyClass/SimpleCron.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron\ProxyClass {

+  use Drupal\Core\Cron;
   use Drupal\Core\CronInterface;
   use Drupal\Core\DependencyInjection\DependencySerializationTrait;
   use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
     /**
      * The real proxied service, after it was lazy loaded.
      *
-     * @var \Drupal\Core\Cron
+     * @var Cron
      */
     protected $service;

@@ @@
     /**
      * The service container.
      *
-     * @var \Symfony\Component\DependencyInjection\ContainerInterface
+     * @var ContainerInterface
      */
     protected $container;

@@ @@
     /**
      * Constructs a ProxyClass Drupal proxy object.
      *
-     * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+     * @param ContainerInterface $container
      *   The container.
      * @param string $drupal_proxy_original_service_id
      *   The service ID of the original service.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/simple_cron/src/Plugin/SimpleCronPluginManagerInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Get plugins.
    *
-   * @return \Drupal\simple_cron\Plugin\SimpleCronPluginInterface[]
+   * @return SimpleCronPluginInterface[]
    *   An array of plugins. Keys are plugin IDs.
    */
   public function getPlugins(): array;
@@ @@
    * @param array $configuration
    *   (Optional) The plugin configuration. Defaults to [].
    *
-   * @return \Drupal\simple_cron\Plugin\SimpleCronPluginInterface|null
+   * @return SimpleCronPluginInterface|null
    *   The simple cron plugin.
    */
   public function getPlugin(string $plugin_id, array $configuration = []): ?SimpleCronPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/simple_cron/src/Plugin/SimpleCronPluginManager.php:21

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/simple_cron/src/Plugin/SimpleCronPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron\Plugin;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ @@
   /**
    * Get plugin label.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The plugin label.
    */
   public function label();
@@ @@
   /**
    * Get cron job.
    *
-   * @return \Drupal\simple_cron\Entity\CronJobInterface
+   * @return CronJobInterface
    *   Cron job.
    */
   public function getCronJob(): CronJobInterface;
@@ @@
   /**
    * Set cron job.
    *
-   * @param \Drupal\simple_cron\Entity\CronJobInterface $cron_job
+   * @param CronJobInterface $cron_job
    *   The cron job.
    *
    * @return \Drupal\simple_cron\Plugin\SimpleCronPluginInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/simple_cron/src/Plugin/SimpleCronPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron\Plugin;

+use Drupal\Core\Config\ConfigFactory;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The cron job.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $cronJob;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory|object|null
+   * @var ConfigFactory|object|null
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/simple_cron/src/Plugin/SimpleCron/Queue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron\Plugin\SimpleCron;

+use Drupal\Core\Queue\QueueWorkerManagerInterface;
+use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Logger\LoggerChannelTrait;
 use Drupal\Core\Queue\DelayableQueueInterface;
@@ @@
   /**
    * The queue worker manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueManager;

@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/simple_cron/src/Plugin/SimpleCron/Cron.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron\Plugin\SimpleCron;

+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\simple_cron\Form\SimpleCronSettingsForm;
 use Drupal\simple_cron\Plugin\SimpleCronPluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/simple_cron/src/Form/SimpleCronSettingsForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The cron job manager.
    *
-   * @var \Drupal\simple_cron\CronJobManagerInterface
+   * @var CronJobManagerInterface
    */
   protected $cronJobManager;

@@ @@
   /**
    * SimpleCronSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\simple_cron\CronJobManagerInterface $cron_job_manager
+   * @param CronJobManagerInterface $cron_job_manager
    *   The cron job manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/simple_cron/src/Form/CronJobUnlockForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron\Form;

+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The cron job.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/simple_cron/src/Form/CronJobForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron\Form;

+use Drupal\simple_cron\Entity\CronJobInterface;
 use Cron\CronExpression;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/simple_cron/src/Form/CronJobEnableForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron\Form;

+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The cron job.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/simple_cron/src/Form/CronJobDisableForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron\Form;

+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The cron job.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/simple_cron/src/Entity/CronJobInterface.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Get plugin.
    *
-   * @return \Drupal\simple_cron\Plugin\SimpleCronPluginInterface|null
+   * @return SimpleCronPluginInterface|null
    *   Simple cron plugin.
    */
   public function getPlugin(): ?SimpleCronPluginInterface;
@@ @@
   /**
    * Get next run time.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   Last run date.
    */
   public function getLastRunTime(): ?DrupalDateTime;
@@ @@
   /**
    * Get next run timestamp.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   Next run date.
    */
   public function getNextRunTime(): DrupalDateTime;
@@ @@
   /**
    * Get single cron job run url.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The single run url.
    */
   public function getSingleRunUrl(): Url;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/simple_cron/src/Entity/CronJob.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron\Entity;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Lock\LockBackendInterface;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\State\StateInterface;
+use Drupal\simple_cron\Plugin\SimpleCronPluginManagerInterface;
 use Cron\CronExpression;
 use Drupal\Component\Utility\Timer;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The lock service.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Stores the state storage service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The simple cron plugin manager.
    *
-   * @var \Drupal\simple_cron\Plugin\SimpleCronPluginManagerInterface
+   * @var SimpleCronPluginManagerInterface
    */
   protected $simpleCronPluginManager;

@@ @@

     // Delete cron job state values.
     $state_ids = [];
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $entity */
+    /** @var CronJobInterface $entity */
     foreach ($entities as $entity) {
       $state_ids[] = 'simple_cron.state.' . $entity->id();
     }
@@ @@
    */
   public static function sort(ConfigEntityInterface $a, ConfigEntityInterface $b): int {
     /** @var \Drupal\simple_cron\Entity\CronJobInterface $a */
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $b */
+    /** @var CronJobInterface $b */
     $a_weight = $a->getWeight();
     $b_weight = $b->getWeight();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/simple_cron/src/CronJobManagerInterface.php:21

    ---------- begin diff ----------
@@ @@
    * @param string $job_id
    *   The job id.
    *
-   * @return \Drupal\simple_cron\Entity\CronJobInterface|null
+   * @return CronJobInterface|null
    *   Cron job.
    */
   public function getEnabledJob(string $job_id): ?CronJobInterface;
@@ @@
   /**
    * Get enabled cron jobs for default cron run.
    *
-   * @return \Drupal\simple_cron\Entity\CronJobInterface[]
+   * @return CronJobInterface[]
    *   Cron jobs.
    */
   public function getEnabledDefaultRunJobs(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


30) modules/contrib/simple_cron/src/CronJobManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\simple_cron\Entity\CronJob;
 use Drupal\simple_cron\Entity\CronJobInterface;
@@ @@
   /**
    * The cron job storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $cronJobStorage;

@@ @@
   /**
    * The simple cron plugin manager.
    *
-   * @var \Drupal\simple_cron\Plugin\SimpleCronPluginManagerInterface
+   * @var SimpleCronPluginManagerInterface
    */
   protected $simpleCronPluginManager;

@@ @@
   /**
    * CronJobManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\simple_cron\Plugin\SimpleCronPluginManagerInterface $simple_cron_plugin_manager
+   * @param SimpleCronPluginManagerInterface $simple_cron_plugin_manager
    *   The simple cron plugin manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function updateList(): void {
     $updated_jobs = [];
@@ @@
    * @param string $operator
    *   The condition operator.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function deleteCronJobs(array $jobs_ids, string $operator): void {
     // Delete old cron jobs entities.
@@ @@
    *   The type.
    * @param array $definition
    *   The definition.
-   * @param \Drupal\simple_cron\Plugin\SimpleCronPluginInterface $plugin
+   * @param SimpleCronPluginInterface $plugin
    *   The simple cron plugin.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createCronJob(string $id, string $type, array $definition, SimpleCronPluginInterface $plugin): void {
     if (!$this->cronJobStorage->load($id)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/simple_cron/src/CronJobListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron;

+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Core\Config\Entity\DraggableListBuilder;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new FilterFormatListBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
    */
   public function __construct(
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $entity */
+    /** @var CronJobInterface $entity */
     $row['title']['#markup'] = $entity->label();
     $row['provider']['#markup'] = $entity->getProviderName();
     $row['crontab']['#markup'] = $entity->getCrontab();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/simple_cron/src/CronJobAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron;

+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
       return AccessResult::forbidden()->addCacheableDependency($entity);
     }

-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $entity */
+    /** @var CronJobInterface $entity */
     switch ($operation) {
       case 'disable':
         return AccessResult::allowedIf($entity->status())
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/simple_cron/src/Controller/JobController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The cron.
    *
-   * @var \Drupal\Core\CronInterface
+   * @var CronInterface
    */
   protected $cron;

@@ @@
   /**
    * JobController constructor.
    *
-   * @param \Drupal\Core\CronInterface $cron
+   * @param CronInterface $cron
    *   The cron.
    */
   public function __construct(CronInterface $cron) {
@@ @@
   /**
    * Runs a single cron job.
    *
-   * @param \Drupal\simple_cron\Entity\CronJobInterface $simple_cron_job
+   * @param CronJobInterface $simple_cron_job
    *   The cron job.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirects to the job listing after running a job.
    */
   public function run(CronJobInterface $simple_cron_job): RedirectResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/simple_cron/src/Commands/SimpleCronCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron\Commands;

+use Drupal\simple_cron\Entity\CronJobInterface;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Component\Utility\Environment;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * SimpleCronCommands constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
@@ @@
     }

     // Run a specific job.
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $job */
+    /** @var CronJobInterface $job */
     $job = $this->entityTypeManager->getStorage('simple_cron_job')->load($id);
     if (!$job) {
       throw new \Exception(dt('@name not found', ['@name' => $id]));
@@ @@
    *
    * @aliases scron:list,simple-cron:list
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|null
+   * @return RowsOfFields|null
    *   The table of cron jobs.
    *
    * @throws \Exception
@@ @@
     'status' => NULL,
     'format' => 'table',
   ]): ?RowsOfFields {
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface[] $jobs */
+    /** @var CronJobInterface[] $jobs */
     $jobs = $this->entityTypeManager->getStorage('simple_cron_job')->loadMultiple();

     // Get the --status option.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/simple_cron/src/Annotation/SimpleCron.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


36) modules/contrib/simple_cron/simple_cron.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_cron\CronJobManagerInterface;
 /**
  * @file
  * Simple cron module file.
@@ @@
  * Implements hook_modules_installed().
  */
 function simple_cron_modules_installed() {
-  /** @var \Drupal\simple_cron\CronJobManagerInterface $cron_job_manager */
+  /** @var CronJobManagerInterface $cron_job_manager */
   $cron_job_manager = \Drupal::service('simple_cron.cron_job_manager');
   $cron_job_manager->updateList();
 }
@@ @@
  * Implements hook_modules_uninstalled().
  */
 function simple_cron_modules_uninstalled() {
-  /** @var \Drupal\simple_cron\CronJobManagerInterface $cron_job_manager */
+  /** @var CronJobManagerInterface $cron_job_manager */
   $cron_job_manager = \Drupal::service('simple_cron.cron_job_manager');
   $cron_job_manager->updateList();
 }
@@ @@
  * Implements hook_rebuild().
  */
 function simple_cron_rebuild() {
-  /** @var \Drupal\simple_cron\CronJobManagerInterface $cron_job_manager */
+  /** @var CronJobManagerInterface $cron_job_manager */
   $cron_job_manager = \Drupal::service('simple_cron.cron_job_manager');
   $cron_job_manager->updateList();
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


37) modules/contrib/simple_cron/simple_cron.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_cron\Entity\CronJobInterface;
 /**
  * @file
  * Simple cron install file.
  */
-
 /**
  * Implements hook_requirements().
  */
@@ @@
     $requirements['cron_jobs']['title'] = 'Simple Cron';
     $requirements['cron_jobs']['severity'] = REQUIREMENT_OK;

-    /** @var \Drupal\simple_cron\Entity\CronJobInterface[] $jobs */
+    /** @var CronJobInterface[] $jobs */
     $jobs = \Drupal::entityTypeManager()
       ->getStorage('simple_cron_job')
       ->loadByProperties(['status' => TRUE]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


38) modules/contrib/simple_cron/modules/simple_cron_examples/src/Plugin/SimpleCron/ConfigurableCron.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_cron_examples\Plugin\SimpleCron;

+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Logger\LoggerChannelTrait;
 use Drupal\simple_cron\Plugin\SimpleCronPluginBase;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 38 files have been changed by Rector                                      

