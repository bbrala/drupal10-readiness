diff --git a/blog.info.yml b/blog.info.yml
index 1915a47..95fbd44 100644
--- a/blog.info.yml
+++ b/blog.info.yml
@@ -1,6 +1,6 @@
 name: Blog
 description: "Enables multi-user blogs."
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.1 || ^10
 type: module
 dependencies:
   - drupal:comment
diff --git a/composer.json b/composer.json
index 2209ee6..c833a2c 100644
--- a/composer.json
+++ b/composer.json
@@ -26,7 +26,7 @@
         "source": "https://git.drupalcode.org/project/blog"
     },
     "require": {
-        "drupal/core": "^8.8 || ^9"
+        "drupal/core": "^9.1 || ^10"
     },
     "license": "GPL-2.0+",
     "minimum-stability": "dev"
diff --git a/src/BlogBreadcrumbBuilder.php b/src/BlogBreadcrumbBuilder.php
index 86dd368..0efa9ae 100644
--- a/src/BlogBreadcrumbBuilder.php
+++ b/src/BlogBreadcrumbBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\blog;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\Breadcrumb\Breadcrumb;
 use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
 use Drupal\Core\Link;
@@ -17,7 +18,7 @@ class BlogBreadcrumbBuilder implements BreadcrumbBuilderInterface {
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\blog\BlogListerInterface
+   * @var BlogListerInterface
    */
   protected $blogLister;
 
@@ -34,8 +35,8 @@ class BlogBreadcrumbBuilder implements BreadcrumbBuilderInterface {
   public function applies(RouteMatchInterface $route_match) {
     if ($route_match->getRouteName() == 'entity.node.canonical') {
       /**
-* @var \Drupal\node\NodeInterface $node
-*/
+       * @var NodeInterface $node
+      */
       $node = $route_match->getParameter('node');
       return ($node->bundle() == 'blog_post');
     }
@@ -47,8 +48,8 @@ class BlogBreadcrumbBuilder implements BreadcrumbBuilderInterface {
    */
   public function build(RouteMatchInterface $route_match) {
     /**
-* @var \Drupal\node\NodeInterface $node
-*/
+     * @var NodeInterface $node
+    */
     $node = $route_match->getParameter('node');
     $breadcrumb = new Breadcrumb();
     $breadcrumb->addCacheContexts(['route']);
diff --git a/src/BlogLister.php b/src/BlogLister.php
index 61a33cb..dd96a48 100644
--- a/src/BlogLister.php
+++ b/src/BlogLister.php
@@ -15,14 +15,14 @@ class BlogLister implements BlogListerInterface {
   /**
    * Config Factory Service Object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
@@ -37,7 +37,7 @@ class BlogLister implements BlogListerInterface {
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User object.
    *
    * @return string
diff --git a/src/Controller/BlogController.php b/src/Controller/BlogController.php
index 077aded..04a819a 100644
--- a/src/Controller/BlogController.php
+++ b/src/Controller/BlogController.php
@@ -15,14 +15,14 @@ class BlogController implements ContainerInjectionInterface {
   /**
    * The blog lister.
    *
-   * @var \Drupal\blog\BlogListerInterface
+   * @var BlogListerInterface
    */
   protected $blogLister;
 
   /**
    * Constructs a BlogController object.
    *
-   * @param \Drupal\blog\BlogListerInterface $blogLister
+   * @param BlogListerInterface $blogLister
    *   The blog lister.
    */
   final public function __construct(BlogListerInterface $blogLister) {
@@ -41,7 +41,7 @@ class BlogController implements ContainerInjectionInterface {
   /**
    * Returns a title for user blog pages.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *
    * @return string
    *   A title string for a user blog page.
diff --git a/src/Plugin/Menu/MyBlogLink.php b/src/Plugin/Menu/MyBlogLink.php
index 91f7bed..dfdbd84 100644
--- a/src/Plugin/Menu/MyBlogLink.php
+++ b/src/Plugin/Menu/MyBlogLink.php
@@ -15,7 +15,7 @@ class MyBlogLink extends MenuLinkDefault {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
diff --git a/tests/src/Functional/BasicBlogTest.php b/tests/src/Functional/BasicBlogTest.php
index d1c17c4..5e4d3ae 100644
--- a/tests/src/Functional/BasicBlogTest.php
+++ b/tests/src/Functional/BasicBlogTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\blog\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\block\Functional\AssertBlockAppearsTrait;
 
 /**
@@ -26,7 +27,7 @@ class BasicBlogTest extends BlogTestBase {
   ];
 
   /**
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $regularUser;
 
@@ -45,8 +46,8 @@ class BasicBlogTest extends BlogTestBase {
   public function testPersonalBlogTitle() {
     $this->drupalLogin($this->regularUser);
     $this->drupalGet('blog/' . $this->blogger1->id());
-    $this->assertResponse(200);
-    $this->assertTitle($this->blogger1->getDisplayName() . "'s blog | Drupal");
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->titleEquals($this->blogger1->getDisplayName() . "'s blog | Drupal");
   }
 
   /**
@@ -55,9 +56,12 @@ class BasicBlogTest extends BlogTestBase {
   public function testBlogPageNoEntries() {
     $this->drupalLogin($this->regularUser);
     $this->drupalGet('blog/' . $this->bloggerNoEntries->id());
-    $this->assertResponse(200);
-    $this->assertTitle($this->bloggerNoEntries->getDisplayName() . "'s blog | Drupal");
-    $this->assertText($this->bloggerNoEntries->getDisplayName() . ' has not created any blog entries.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->titleEquals($this->bloggerNoEntries->getDisplayName() . "'s blog | Drupal");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->bloggerNoEntries->getDisplayName() . ' has not created any blog entries.');
   }
 
   /**
diff --git a/tests/src/Functional/BlogTestBase.php b/tests/src/Functional/BlogTestBase.php
index ecda98a..3dde613 100644
--- a/tests/src/Functional/BlogTestBase.php
+++ b/tests/src/Functional/BlogTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\blog\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -24,12 +26,12 @@ abstract class BlogTestBase extends BrowserTestBase {
   ];
 
   /**
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $blogNodes1, $blogNodes2, $articleNodes1, $articleNodes2;
 
   /**
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $blogger1, $blogger2, $bloggerNoEntries;
 
diff --git a/tests/src/Functional/EmptyBlogTest.php b/tests/src/Functional/EmptyBlogTest.php
index caf1458..5198565 100644
--- a/tests/src/Functional/EmptyBlogTest.php
+++ b/tests/src/Functional/EmptyBlogTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\blog\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -24,7 +25,7 @@ class EmptyBlogTest extends BrowserTestBase {
   ];
 
   /**
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $bloggerNoEntries;
 
@@ -47,7 +48,10 @@ class EmptyBlogTest extends BrowserTestBase {
   public function testAllBlogEmptyLists() {
     $this->drupalLogin($this->bloggerNoEntries);
     $this->drupalGet('blog');
-    $this->assertText('No blog entries have been created.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('No blog entries have been created.');
   }
 
   /**
@@ -56,7 +60,10 @@ class EmptyBlogTest extends BrowserTestBase {
   public function testEmptyPersonalBlog() {
     $this->drupalLogin($this->bloggerNoEntries);
     $this->drupalGet('blog/' . $this->bloggerNoEntries->id());
-    $this->assertText($this->bloggerNoEntries->getDisplayName() . ' has not created any blog entries.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->bloggerNoEntries->getDisplayName() . ' has not created any blog entries.');
   }
 
 }
diff --git a/tests/src/Functional/MyBlogLinkTest.php b/tests/src/Functional/MyBlogLinkTest.php
index c8711b1..23f48d3 100644
--- a/tests/src/Functional/MyBlogLinkTest.php
+++ b/tests/src/Functional/MyBlogLinkTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\blog\Functional;
 
+use Drupal\user\UserInterface;
 /**
  * Link "My blog" and "View recent blog entries" test for blog module.
  *
@@ -24,7 +25,7 @@ class MyBlogLinkTest extends BlogTestBase {
   ];
 
   /**
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $regularUser;
 
@@ -44,15 +45,15 @@ class MyBlogLinkTest extends BlogTestBase {
    */
   public function testMyBlogLinkWithRegularUser() {
     $this->drupalLogin($this->regularUser);
-    $this->assertLink('My blog');
-    $this->assertLinkByHref('/blog/' . $this->regularUser->id());
+    $this->assertSession()->linkExists('My blog');
+    $this->assertSession()->linkByHrefExists('/blog/' . $this->regularUser->id());
   }
 
   /**
    * Test "My blog" link with anonymous user.
    */
   public function testMyBlogLinkWithAnonUser() {
-    $this->assertNoLink('My blog');
+    $this->assertSession()->linkNotExists('My blog');
   }
 
   /**
@@ -62,22 +63,25 @@ class MyBlogLinkTest extends BlogTestBase {
     $this->drupalLogin($this->regularUser);
     // Add "Personal blog link" psuedo-field.
     $this->drupalGet('admin/config/people/accounts/display');
-    $this->assertText('Personal blog link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Personal blog link');
     $edit = [
       'fields[blog__personal_blog_link][region]' => 'content',
       'display_modes_custom[compact]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->drupalLogout();
     // Test "Personal blog link" on user profile page.
     $this->drupalLogin($this->blogger1);
     $this->drupalGet('user/' . $this->blogger1->id());
-    $this->assertLink('View recent blog entries');
-    $this->assertLinkByHref('blog/' . $this->blogger1->id());
+    $this->assertSession()->linkExists('View recent blog entries');
+    $this->assertSession()->linkByHrefExists('blog/' . $this->blogger1->id());
     // Test "Personal blog link" on content.
     $node = array_shift($this->blogNodes1);
     $this->drupalGet('node/' . $node->id());
-    $this->assertNoLink('View recent blog entries');
+    $this->assertSession()->linkNotExists('View recent blog entries');
   }
 
 }
