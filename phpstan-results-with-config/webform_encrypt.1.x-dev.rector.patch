diff --git a/src/WebformEncryptSubmissionStorage.php b/src/WebformEncryptSubmissionStorage.php
index 6e5622b..0c96172 100644
--- a/src/WebformEncryptSubmissionStorage.php
+++ b/src/WebformEncryptSubmissionStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\webform_encrypt;
 
+use Drupal\encrypt\Exception\EncryptException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityInterface;
@@ -26,28 +27,28 @@ class WebformEncryptSubmissionStorage extends WebformSubmissionStorage {
   /**
    * The encryption Service.
    *
-   * @var \Drupal\encrypt\EncryptServiceInterface
+   * @var EncryptServiceInterface
    */
   protected $encryptionService;
 
   /**
    * WebformEncryptSubmissionStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Proxied implementation of AccountInterface, to access current user data.
-   * @param \Drupal\webform\WebformAccessRulesManagerInterface $access_rules_manager
+   * @param WebformAccessRulesManagerInterface $access_rules_manager
    *   The webform access rules manager.
-   * @param \Drupal\encrypt\EncryptServiceInterface $encryptService
+   * @param EncryptServiceInterface $encryptService
    *   The encryption Service.
    */
   public function __construct(EntityTypeInterface $entity_type, Connection $database, EntityTypeManagerInterface $entity_type_manager, CacheBackendInterface $cache, LanguageManagerInterface $language_manager, AccountProxyInterface $current_user, WebformAccessRulesManagerInterface $access_rules_manager, EncryptServiceInterface $encryptService) {
@@ -77,14 +78,14 @@ class WebformEncryptSubmissionStorage extends WebformSubmissionStorage {
    *
    * @param array $data
    *   The current form data array.
-   * @param \Drupal\webform\WebformInterface $webform
+   * @param WebformInterface $webform
    *   The webform we are encrypting.
    *
    * @return array
    *   Array of form data with the value encrypted for those elements setup
    *   for being processed by an encryption profile.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    */
   public function encryptElements(array $data, WebformInterface $webform) {
     // Load the configuration.
@@ -112,10 +113,10 @@ class WebformEncryptSubmissionStorage extends WebformSubmissionStorage {
    *
    * @param array $data
    *   Element data by reference.
-   * @param \Drupal\encrypt\EncryptionProfileInterface $encryption_profile
+   * @param EncryptionProfileInterface $encryption_profile
    *   The encryption profile to be used on this element.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    */
   public function encryptChildren(array &$data, EncryptionProfileInterface $encryption_profile) {
     foreach ($data as $key => $value) {
@@ -134,13 +135,13 @@ class WebformEncryptSubmissionStorage extends WebformSubmissionStorage {
    *
    * @param string $string
    *   The string to be decrypted.
-   * @param \Drupal\encrypt\EncryptionProfileInterface $encryption_profile
+   * @param EncryptionProfileInterface $encryption_profile
    *   The encryption profile to be used to encrypt the string.
    *
    * @return string
    *   The serialized encrypted value.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    */
   protected function encrypt($string, EncryptionProfileInterface $encryption_profile) {
     // Serialize the data to include the encryption profile.
@@ -163,7 +164,7 @@ class WebformEncryptSubmissionStorage extends WebformSubmissionStorage {
    * @return string
    *   The decrypted value.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    */
   protected function decrypt($data, $check_permissions = TRUE) {
     if ($check_permissions && !$this->currentUser->hasPermission('view encrypted values')) {
@@ -181,7 +182,7 @@ class WebformEncryptSubmissionStorage extends WebformSubmissionStorage {
   /**
    * Helper function to recursively decrypt fields.
    *
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *   The webform submission to work on.
    * @param bool $check_permissions
    *   Flag that controls permissions check.
@@ -190,7 +191,7 @@ class WebformEncryptSubmissionStorage extends WebformSubmissionStorage {
    *   Array of form data with the value now decrypted for those elements setup
    *   for being processed by an encryption profile.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    */
   public function decryptElements(WebformSubmissionInterface $webform_submission, $check_permissions = TRUE) {
     // Load webform.
@@ -222,7 +223,7 @@ class WebformEncryptSubmissionStorage extends WebformSubmissionStorage {
    * @param bool $check_permissions
    *   Flag that controls permissions check.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    */
   public function decryptChildren(array &$data, $check_permissions = TRUE) {
     foreach ($data as $key => $value) {
@@ -240,7 +241,7 @@ class WebformEncryptSubmissionStorage extends WebformSubmissionStorage {
    * {@inheritdoc}
    */
   protected function doPreSave(EntityInterface $entity) {
-    /** @var \Drupal\webform\WebformSubmissionInterface $entity */
+    /** @var WebformSubmissionInterface $entity */
     $id = parent::doPreSave($entity);
 
     $data_original = $entity->getData();
@@ -257,8 +258,7 @@ class WebformEncryptSubmissionStorage extends WebformSubmissionStorage {
    * {@inheritdoc}
    */
   protected function doPostSave(EntityInterface $entity, $update) {
-    /** @var \Drupal\webform\WebformSubmissionInterface $entity */
-
+    /** @var WebformSubmissionInterface $entity */
     // Decrypt and set data post save so it remains readable for multistep
     // webforms and/or any other process that may take place after saving.
     $data = $this->decryptElements($entity, FALSE);
diff --git a/tests/modules/webform_encrypt_test/src/Plugin/WebformHandler/TestWebformHandler.php b/tests/modules/webform_encrypt_test/src/Plugin/WebformHandler/TestWebformHandler.php
index 8b7e66f..8c141dc 100644
--- a/tests/modules/webform_encrypt_test/src/Plugin/WebformHandler/TestWebformHandler.php
+++ b/tests/modules/webform_encrypt_test/src/Plugin/WebformHandler/TestWebformHandler.php
@@ -31,7 +31,7 @@ class TestWebformHandler extends WebformHandlerBase {
   /**
    * The State system service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
