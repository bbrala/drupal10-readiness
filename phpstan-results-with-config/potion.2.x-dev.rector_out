modules/contrib/potion/potion.install
modules/contrib/potion/potion.module
modules/contrib/potion/src/Commands/PotionCommands.php
modules/contrib/potion/src/Exception/ConsoleException.php
modules/contrib/potion/src/Exception/ExtractorException.php
modules/contrib/potion/src/Exception/GettextException.php
modules/contrib/potion/src/Exception/PotionException.php
modules/contrib/potion/src/Extractor/AnnotationExtractor.php
modules/contrib/potion/src/Extractor/ExtractableInterface.php
modules/contrib/potion/src/Extractor/ExtractorBase.php
modules/contrib/potion/src/Extractor/PhpExtractor.php
modules/contrib/potion/src/Extractor/TwigExtractor.php
modules/contrib/potion/src/Extractor/YamlExtractor.php
modules/contrib/potion/src/Form/GettextSettingsForm.php
modules/contrib/potion/src/GettextWrapper.php
modules/contrib/potion/src/MessageCatalogue.php
modules/contrib/potion/src/TranslationsExport.php
modules/contrib/potion/src/TranslationsExtractor.php
modules/contrib/potion/src/TranslationsFill.php
modules/contrib/potion/src/TranslationsImport.php
modules/contrib/potion/src/Twig/Extension/TransExtractorExtension.php
modules/contrib/potion/src/Twig/NodeVisitor/TranslationNodeVisitor.php
modules/contrib/potion/src/Utility.php
modules/contrib/potion/tests/modules/potion_test/inc/hooks.inc
modules/contrib/potion/tests/modules/potion_test/potion_test.install
modules/contrib/potion/tests/modules/potion_test/potion_test.module
modules/contrib/potion/tests/modules/potion_test/src/Plugin/Block/TestAnnotationBlock.php
modules/contrib/potion/tests/modules/potion_test/src/Plugin/Block/TestHtmlBlock.php
modules/contrib/potion/tests/src/Kernel/Extractor/AnnotationExtractorTest.php
modules/contrib/potion/tests/src/Kernel/Extractor/PhpExtractorTest.php
modules/contrib/potion/tests/src/Kernel/Extractor/TwigExtractorTest.php
modules/contrib/potion/tests/src/Kernel/Extractor/YamlExtractorTest.php
modules/contrib/potion/tests/src/Kernel/MessageCatalogueTest.php
modules/contrib/potion/tests/src/Kernel/TranslationsExportTest.php
modules/contrib/potion/tests/src/Kernel/TranslationsExtractorTest.php
modules/contrib/potion/tests/src/Kernel/TranslationsFillTest.php
modules/contrib/potion/tests/src/Kernel/TranslationsImportTest.php
modules/contrib/potion/tests/src/Kernel/TranslationsTest.php
modules/contrib/potion/tests/src/Kernel/TranslationsTestsBase.php
modules/contrib/potion/tests/src/Kernel/UtilityTest.php
modules/contrib/potion/tests/src/Unit/UtilityBackupTest.php
modules/contrib/potion/tests/src/Unit/UtilityTest.php
modules/contrib/potion/tests/src/Unit/UtilityTestBase.php

31 files with changes
=====================

1) modules/contrib/potion/tests/src/Unit/UtilityTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\potion\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\potion\Utility;
 use Drupal\potion\GettextWrapper;
@@ @@
  */
 abstract class UtilityTestBase extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The Utility service of Potion.
    *
-   * @var \Drupal\potion\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
       'locked'    => FALSE,
     ]);

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\Prophecy\Prophecy\ProphecyInterface $config_factory */
+    /** @var ConfigFactoryInterface|ProphecyInterface $config_factory */
     $config_factory = $this->prophesize(ConfigFactoryInterface::class);
-    /** @var \Drupal\Core\Config\ImmutableConfig|\Prophecy\Prophecy\ProphecyInterface $config */
+    /** @var ImmutableConfig|ProphecyInterface $config */
     $config = $this->prophesize(ImmutableConfig::class);
     $config_factory->get('potion.gettext.settings')
       ->willReturn($config->reveal());
@@ @@
     /** @var \Drupal\Potion\GettextWrapper $gettext_wrapper */
     $gettext_wrapper = new GettextWrapper($config_factory->reveal());

-    /** @var \Drupal\Core\Language\LanguageManagerInterface|\Prophecy\Prophecy\ProphecyInterface $language_manager */
+    /** @var LanguageManagerInterface|ProphecyInterface $language_manager */
     $language_manager = $this->prophesize(LanguageManagerInterface::class);

-    /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface|\Prophecy\Prophecy\ProphecyInterface $file_system */
+    /** @var StreamWrapperManagerInterface|ProphecyInterface $file_system */
     $stream_wrapper = $this->prophesize(StreamWrapperManagerInterface::class);

     $this->utility = new Utility($language_manager->reveal(), $gettext_wrapper, $stream_wrapper->reveal());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/potion/tests/src/Kernel/UtilityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\potion\Kernel;

+use Drupal\potion\Utility;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The Utility service of Potion.
    *
-   * @var \Drupal\potion\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\potion\Utility $utility */
+    /** @var Utility $utility */
     $this->utility = $this->container->get('potion.utility');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/potion/tests/src/Kernel/TranslationsTestsBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\potion\Kernel;

+use Drupal\locale\TranslationString;
+use Drupal\locale\StringStorageInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;

@@ @@
   /**
    * Collection of tests translations strings.
    *
-   * @var \Drupal\locale\TranslationString[]
+   * @var TranslationString[]
    */
   protected $translationsStrings;

@@ @@
   /**
    * String translation storage object.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $localStorage;

@@ @@

     $this->setUpLanguages();

-    /** @var \Drupal\locale\StringStorageInterface $localStorage */
+    /** @var StringStorageInterface $localStorage */
     $this->localStorage = $this->container->get('locale.storage');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/potion/tests/src/Kernel/TranslationsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\potion\Kernel;

+use Drupal\potion\TranslationsImport;
 /**
  * Cover default behaviors of translations.
  *
@@ @@
   /**
    * The Translation importer.
    *
-   * @var \Drupal\potion\TranslationsImport
+   * @var TranslationsImport
    */
   protected $translationsImport;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/potion/tests/src/Kernel/TranslationsImportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\potion\Kernel;

+use Drupal\potion\TranslationsImport;
 use Drupal\potion\Exception\PotionException;

 /**
@@ @@
   /**
    * The Translation importer.
    *
-   * @var \Drupal\potion\TranslationsImport
+   * @var TranslationsImport
    */
   protected $translationsImport;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\potion\TranslationsImport $translationsImport */
+    /** @var TranslationsImport $translationsImport */
     $this->translationsImport = $this->container->get('potion.translations.import');

     /** @var string $translationsPath */
-    $this->translationsPath = drupal_get_path('module', 'potion_test') . DIRECTORY_SEPARATOR . 'assets';
+    $this->translationsPath = \Drupal::service('extension.list.module')->getPath('potion_test') . DIRECTORY_SEPARATOR . 'assets';
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/potion/tests/src/Kernel/TranslationsFillTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\potion\Kernel;

+use Drupal\potion\TranslationsFill;
+use Drupal\potion\TranslationsImport;
 use Drupal\potion\Exception\PotionException;

 /**
@@ @@
   /**
    * The Translation filler.
    *
-   * @var \Drupal\potion\TranslationsFill
+   * @var TranslationsFill
    */
   protected $translationsFill;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\potion\TranslationsImport $translationsImport */
+    /** @var TranslationsImport $translationsImport */
     $this->translationsFill = $this->container->get('potion.translations.fill');

     /** @var string $translationsPath */
-    $this->translationsPath = drupal_get_path('module', 'potion_test') . DIRECTORY_SEPARATOR . 'assets';
+    $this->translationsPath = \Drupal::service('extension.list.module')->getPath('potion_test') . DIRECTORY_SEPARATOR . 'assets';
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/potion/tests/src/Kernel/TranslationsExtractorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\potion\Kernel;

+use Drupal\potion\TranslationsExtractor;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\potion\Exception\PotionException;

@@ @@
   /**
    * The Translation Extracter.
    *
-   * @var \Drupal\potion\TranslationsExtractor
+   * @var TranslationsExtractor
    */
   protected $translationExtractor;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\potion\TranslationsExtractor $translationExtractor */
+    /** @var TranslationsExtractor $translationExtractor */
     $this->translationExtractor = $this->container->get('potion.translations.extractor');

-    /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
+    /** @var FileSystemInterface $fileSystem */
     $this->fileSystem = $this->container->get('file_system');

     /** @var string $extractionPath */
-    $this->extractionPath = drupal_get_path('module', 'potion_test');
+    $this->extractionPath = \Drupal::service('extension.list.module')->getPath('potion_test');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/potion/tests/src/Kernel/TranslationsExportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\potion\Kernel;

+use Drupal\potion\TranslationsExport;
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\potion\Exception\PotionException;

 /**
@@ @@
   /**
    * The Translation exporter.
    *
-   * @var \Drupal\potion\TranslationsExport
+   * @var TranslationsExport
    */
   protected $translationExport;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\potion\TranslationsExport $translationExport */
+    /** @var TranslationsExport $translationExport */
     $this->translationExport = $this->container->get('potion.translations.export');

-    /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
+    /** @var FileSystemInterface $fileSystem */
     $this->fileSystem = $this->container->get('file_system');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/potion/tests/src/Kernel/MessageCatalogueTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The catalogue of messages.
    *
-   * @var \Drupal\potion\MessageCatalogue
+   * @var MessageCatalogue
    */
   protected $catalogue;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/potion/tests/src/Kernel/Extractor/YamlExtractorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potion\tests\Kernel\Extractor;

+use Drupal\potion\Extractor\YamlExtractor;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Component\Gettext\PoItem;
 use Drupal\potion\MessageCatalogue;
@@ @@
    * Collection of poItems that should be generated when using the extractor
    * twig-only on the potion_tests dir.
    *
-   * @var \Drupal\Component\Gettext\PoItem[]
+   * @var PoItem[]
    */
   private $poItems;

@@ @@
   /**
    * Extract Translations Annotation from PHP Class files.
    *
-   * @var \Drupal\potion\Extractor\YamlExtractor
+   * @var YamlExtractor
    */
   protected $yamlExtractor;

@@ @@
     parent::setUp();

     /** @var string $extractionPath */
-    $this->extractionPath = drupal_get_path('module', 'potion_test');
+    $this->extractionPath = \Drupal::service('extension.list.module')->getPath('potion_test');

-    /** @var \Drupal\potion\Extractor\YamlExtractor $yamlExtractor */
+    /** @var YamlExtractor $yamlExtractor */
     $this->yamlExtractor = $this->container->get('potion.extractor.yaml');

     $po_items = [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/potion/tests/src/Kernel/Extractor/TwigExtractorTest.php:44

    ---------- begin diff ----------
@@ @@
    * Collection of poItems that should be generated when using the extractor
    * twig-only on the potion_tests/templates dir.
    *
-   * @var \Drupal\Component\Gettext\PoItem[]
+   * @var PoItem[]
    */
   private $poItems;

@@ @@
     $this->twig = $this->container->get('twig');

     /** @var string $extractionPath */
-    $this->extractionPath = drupal_get_path('module', 'potion_test') . DIRECTORY_SEPARATOR . 'templates';
+    $this->extractionPath = \Drupal::service('extension.list.module')->getPath('potion_test') . DIRECTORY_SEPARATOR . 'templates';

     $po_items = [
       [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/potion/tests/src/Kernel/Extractor/PhpExtractorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potion\tests\Kernel\Extractor;

+use Drupal\potion\Extractor\PhpExtractor;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Component\Gettext\PoItem;
 use Drupal\potion\MessageCatalogue;
@@ @@
    * Collection of poItems that should be generated when using the extractor
    * twig-only on the potion_tests dir.
    *
-   * @var \Drupal\Component\Gettext\PoItem[]
+   * @var PoItem[]
    */
   private $poItems;

@@ @@
   /**
    * Extract Translations from PHP files.
    *
-   * @var \Drupal\potion\Extractor\PhpExtractor
+   * @var PhpExtractor
    */
   protected $phpExtractor;

@@ @@
     parent::setUp();

     /** @var string $extractionPath */
-    $this->extractionPath = drupal_get_path('module', 'potion_test');
+    $this->extractionPath = \Drupal::service('extension.list.module')->getPath('potion_test');

-    /** @var \Drupal\potion\Extractor\PhpExtractor $phpExtractor */
+    /** @var PhpExtractor $phpExtractor */
     $this->phpExtractor = $this->container->get('potion.extractor.php');

     $po_items = [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/potion/tests/src/Kernel/Extractor/AnnotationExtractorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potion\tests\Kernel\Extractor;

+use Drupal\potion\Extractor\AnnotationExtractor;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Component\Gettext\PoItem;
 use Drupal\potion\MessageCatalogue;
@@ @@
    * Collection of poItems that should be generated when using the extractor
    * twig-only on the potion_tests dir.
    *
-   * @var \Drupal\Component\Gettext\PoItem[]
+   * @var PoItem[]
    */
   private $poItems;

@@ @@
   /**
    * Extract Translations Annotation from PHP Class files.
    *
-   * @var \Drupal\potion\Extractor\AnnotationExtractor
+   * @var AnnotationExtractor
    */
   protected $annotationExtractor;

@@ @@
     parent::setUp();

     /** @var string $extractionPath */
-    $this->extractionPath = drupal_get_path('module', 'potion_test');
+    $this->extractionPath = \Drupal::service('extension.list.module')->getPath('potion_test');

-    /** @var \Drupal\potion\Extractor\AnnotationExtractor $annotationExtractor */
+    /** @var AnnotationExtractor $annotationExtractor */
     $this->annotationExtractor = $this->container->get('potion.extractor.annotation');

     $po_items = [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/potion/src/Utility.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potion;

+use Drupal\language\ConfigurableLanguageManager;
+use Drupal\potion\Exception\GettextException;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\potion\Exception\PotionException;
 use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
@@ @@
   /**
    * The language Manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManager
+   * @var ConfigurableLanguageManager
    */
   protected $languageManager;

@@ @@
   /**
    * The Gettext wrapper.
    *
-   * @var \Drupal\potion\GettextWrapper
+   * @var GettextWrapper
    */
   protected $gettextWrapper;

@@ @@
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\potion\GettextWrapper $gettext_wrapper
+   * @param GettextWrapper $gettext_wrapper
    *   The Gettext wrapper.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
    */
   public function __construct(LanguageManagerInterface $language_manager, GettextWrapper $gettext_wrapper, StreamWrapperManagerInterface $stream_wrapper_manager) {
@@ @@
    * @return bool
    *   TRUE if the given file is valid, FALSE otherwise.
    *
-   * @throws \Drupal\potion\Exception\GettextException
+   * @throws GettextException
    */
   public function isValidPo($src) {
     if (!is_file($src)) {
@@ @@
    * @return bool
    *   TRUE if the merge works, FALSE otherwise.
    *
-   * @throws \Drupal\potion\Exception\GettextException
-   * @throws \Drupal\potion\Exception\PotionException
+   * @throws GettextException
+   * @throws PotionException
    */
   public function merge($original, array $files) {
     // Don't process when the original file does not exist.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/potion/src/Twig/NodeVisitor/TranslationNodeVisitor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potion\Twig\NodeVisitor;

+use Drupal\potion\Utility;
 use Drupal\Core\Template\TwigNodeTrans;
 use Twig\NodeVisitor\AbstractNodeVisitor;
 use Drupal\potion\MessageCatalogue;
@@ @@
   /**
    * The catalogue of messages.
    *
-   * @var \Drupal\potion\MessageCatalogue
+   * @var MessageCatalogue
    */
   protected $catalogue;

@@ @@
   /**
    * The Utility service of Potion.
    *
-   * @var \Drupal\potion\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * Return the list of translation messages key extracted from Twig.
    *
-   * @return \Drupal\potion\MessageCatalogue
+   * @return MessageCatalogue
    *   Catalogue of extracted translations messages.
    */
   public function getCatalogue() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/potion/src/Twig/Extension/TransExtractorExtension.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The NodeVisitor to extracts translation messages from twig.
    *
-   * @var \Drupal\potion\Twig\NodeVisitor\TranslationNodeVisitor
+   * @var TranslationNodeVisitor
    */
   protected $transNodeVisitor;

@@ @@
   /**
    * Expose the translation Node Visitor to be accessible by the extractor.
    *
-   * @return \Drupal\potion\Twig\NodeVisitor\TranslationNodeVisitor
+   * @return TranslationNodeVisitor
    *   The NodeVisitor to extracts translation messages from twig.
    */
   public function getTranslationNodeVisitor() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/potion/src/TranslationsImport.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The Utility service of Potion.
    *
-   * @var \Drupal\potion\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\potion\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Potion.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(Utility $utility, ModuleHandlerInterface $module_handler, FileSystemInterface $file_system) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/potion/src/TranslationsFill.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potion;

+use Drupal\Core\Config\Config;
+use Drupal\locale\SourceString;
+use Drupal\locale\TranslationString;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\locale\StringStorageInterface;
@@ @@
   /**
    * The Utility service of Potion.
    *
-   * @var \Drupal\potion\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * The site settings config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $siteConfig;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * String translation storage object.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $localeStorage;

@@ @@
   /**
    * The catalogue of messages.
    *
-   * @var \Drupal\potion\MessageCatalogue
+   * @var MessageCatalogue
    */
   protected $catalogue;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\potion\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Potion.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\locale\StringStorageInterface $local_storage
+   * @param StringStorageInterface $local_storage
    *   String translation storage object.
    */
   public function __construct(Utility $utility, ConfigFactoryInterface $config_factory, FileSystemInterface $file_system, StringStorageInterface $local_storage) {
@@ @@
         $trans = implode(PoItem::DELIMITER, $trans);
       }

-      /** @var \Drupal\locale\SourceString $string */
+      /** @var SourceString $string */
       $local = $this->localeStorage->findString(
         [
           'source' => $source,
@@ @@
         ]);

       if ($local && empty($trans) || $local && $overwrite) {
-        /** @var \Drupal\locale\TranslationString[] $trans */
+        /** @var TranslationString[] $trans */
         $trans = $this->localeStorage->getTranslations([
           'lid'        => $local->lid,
           'language'   => $langcode,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/potion/src/TranslationsExtractor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potion;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\potion\Extractor\TwigExtractor;
@@ @@
   /**
    * The Utility service of Potion.
    *
-   * @var \Drupal\potion\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * The site settings config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $siteConfig;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Extract Translations from Twig templates.
    *
-   * @var \Drupal\potion\Extractor\TwigExtractor
+   * @var TwigExtractor
    */
   protected $twigExtractor;

@@ @@
   /**
    * Extract Translations from PHP files.
    *
-   * @var \Drupal\potion\Extractor\PhpExtractor
+   * @var PhpExtractor
    */
   protected $phpExtractor;

@@ @@
   /**
    * Extract Translations Annotation from PHP Class files.
    *
-   * @var \Drupal\potion\Extractor\AnnotationExtractor
+   * @var AnnotationExtractor
    */
   protected $annotationExtractor;

@@ @@
   /**
    * Extract Translations from YAML files.
    *
-   * @var \Drupal\potion\Extractor\YamlExtractor
+   * @var YamlExtractor
    */
   protected $yamlExtractor;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\potion\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Potion.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\potion\Extractor\TwigExtractor $twig_extractor
+   * @param TwigExtractor $twig_extractor
    *   Extract Translations from Twig templates.
-   * @param \Drupal\potion\Extractor\PhpExtractor $php_extractor
+   * @param PhpExtractor $php_extractor
    *   Extract Translations from PHP files.
-   * @param \Drupal\potion\Extractor\AnnotationExtractor $annotation_extractor
+   * @param AnnotationExtractor $annotation_extractor
    *   Extract Translations Annotation from PHP Class files.
-   * @param \Drupal\potion\Extractor\YamlExtractor $yaml_extractor
+   * @param YamlExtractor $yaml_extractor
    *   Extract Translations Annotation from PHP Class files.
    */
   public function __construct(Utility $utility, ConfigFactoryInterface $config_factory, FileSystemInterface $file_system, TwigExtractor $twig_extractor, PhpExtractor $php_extractor, AnnotationExtractor $annotation_extractor, YamlExtractor $yaml_extractor) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/potion/src/TranslationsExport.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potion;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\locale\PoDatabaseReader;
@@ @@
   /**
    * The Utility service of Potion.
    *
-   * @var \Drupal\potion\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * The site settings config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $siteConfig;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\potion\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Potion.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(Utility $utility, ConfigFactoryInterface $config_factory, FileSystemInterface $file_system) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/potion/src/MessageCatalogue.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Collection of PoItem.
    *
-   * @var \Drupal\Component\Gettext\PoItem[]
+   * @var PoItem[]
    */
   private $messages = [];

@@ @@
   /**
    * Gets the messages.
    *
-   * @return \Drupal\Component\Gettext\PoItem[]
+   * @return PoItem[]
    *   An array of messages.
    */
   public function all() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/potion/src/GettextWrapper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potion;

+use Drupal\Core\Config\Config;
 use Symfony\Component\Process\Process;
 use Drupal\potion\Exception\GettextException;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The gettext settings config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $gettextConfig;

@@ @@
   /**
    * Construct the GettextWrapper object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
    * @return bool
    *   TRUE if the given file is valid, FALSE otherwise.
    *
-   * @throws \Drupal\potion\Exception\GettextException
+   * @throws GettextException
    */
   public function msgfmt($src) {
     $cmd = $this->path . 'msgfmt';
@@ @@
    * @return bool
    *   TRUE if the given file is valid, FALSE otherwise.
    *
-   * @throws \Drupal\potion\Exception\GettextException
+   * @throws GettextException
    */
   public function msgcat(array $files, $output) {
     $cmd = $this->path . 'msgcat';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/potion/src/Form/GettextSettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Utility service of Potion.
    *
-   * @var \Drupal\potion\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * GettextSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\potion\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Potion.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Utility $utility) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/potion/src/Extractor/YamlExtractor.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The Utility service of Potion.
    *
-   * @var \Drupal\potion\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * Provides a YAML serialization implementation.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $yamlSerializer;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\potion\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Potion.
-   * @param \Drupal\Component\Serialization\SerializationInterface $yaml_serialization
+   * @param SerializationInterface $yaml_serialization
    *   Provides a YAML serialization implementation.
    */
   public function __construct(Utility $utility, SerializationInterface $yaml_serialization) {
@@ @@
   /**
    * Extract from a Annocation Class file and store in the catalogue.
    *
-   * @param \Symfony\Component\Finder\SplFileInfo $file
+   * @param SplFileInfo $file
    *   The file to process File.
    */
   protected function extractFromFile(SplFileInfo $file) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/potion/src/Extractor/TwigExtractor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potion\Extractor;

+use Drupal\potion\MessageCatalogue;
+use Twig\Error\RuntimeError;
+use Twig\Error\SyntaxError;
+use Drupal\potion\Twig\NodeVisitor\TranslationNodeVisitor;
 use Twig\Source;
 use Symfony\Component\Finder\Finder;
 use Drupal\potion\Exception\ExtractorException;
@@ @@
    * @param string $template
    *   Twig content template.
    *
-   * @return \Drupal\potion\MessageCatalogue
+   * @return MessageCatalogue
    *   Catalogue of extracted translations messages.
    *
-   * @throws \Twig\Error\RuntimeError
-   * @throws \Twig\Error\SyntaxError
+   * @throws RuntimeError
+   * @throws SyntaxError
    */
   protected function extractFromTemplate($template) {
-    /** @var \Drupal\potion\Twig\NodeVisitor\TranslationNodeVisitor $visitor */
+    /** @var TranslationNodeVisitor $visitor */
     $visitor = $this->twig->getExtension('\Drupal\potion\Twig\Extension\TransExtractorExtension')
       ->getTranslationNodeVisitor();
     $visitor->enable();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/potion/src/Extractor/PhpExtractor.php:115

    ---------- begin diff ----------
@@ @@
   /**
    * The Utility service of Potion.
    *
-   * @var \Drupal\potion\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\potion\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Potion.
    */
   public function __construct(Utility $utility) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/potion/src/Extractor/ExtractorBase.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The catalogue of messages.
    *
-   * @var \Drupal\potion\MessageCatalogue
+   * @var MessageCatalogue
    */
   protected $catalogue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/potion/src/Extractor/ExtractableInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potion\Extractor;

+use Drupal\potion\MessageCatalogue;
 /**
  * Defines the Extractable interface.
  */
@@ @@
    * @param bool $recursive
    *   Does the extractor should recursively lookup for files.
    *
-   * @return \Drupal\potion\MessageCatalogue
+   * @return MessageCatalogue
    *   Catalogue of extracted translations messages.
    */
   public function extract($path, $recursive = FALSE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/potion/src/Extractor/AnnotationExtractor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potion\Extractor;

+use Doctrine\Common\Annotations\Reader;
 use Symfony\Component\Finder\Finder;
 use Drupal\potion\Exception\ExtractorException;
 use Drupal\Component\Annotation\Doctrine\SimpleAnnotationReader;
@@ @@
   /**
    * The Utility service of Potion.
    *
-   * @var \Drupal\potion\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * The doctrine annotation reader.
    *
-   * @var \Doctrine\Common\Annotations\Reader
+   * @var Reader
    */
   protected $annotationReader;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\potion\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Potion.
    */
   public function __construct(Utility $utility) {
@@ @@
   /**
    * Extract from a Annocation Class file & store it in the catalogue.
    *
-   * @param \Symfony\Component\Finder\SplFileInfo $file
+   * @param SplFileInfo $file
    *   The file to process File.
    */
   protected function extractFromFile(SplFileInfo $file) {
@@ @@
   /**
    * Extract the fully-qualified class name of a php file class.
    *
-   * @param \Symfony\Component\Finder\SplFileInfo $file
+   * @param SplFileInfo $file
    *   The file to process File.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/potion/src/Commands/PotionCommands.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The Utility service of Potion.
    *
-   * @var \Drupal\potion\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The Translation importer.
    *
-   * @var \Drupal\potion\TranslationsImport
+   * @var TranslationsImport
    */
   protected $transImport;

@@ @@
   /**
    * The Translation exporter.
    *
-   * @var \Drupal\potion\TranslationsExport
+   * @var TranslationsExport
    */
   protected $transExport;

@@ @@
   /**
    * The Translation extractor service.
    *
-   * @var \Drupal\potion\TranslationsExtractor
+   * @var TranslationsExtractor
    */
   protected $transExtractor;

@@ @@
   /**
    * The Translation fill service.
    *
-   * @var \Drupal\potion\TranslationsFill
+   * @var TranslationsFill
    */
   protected $transFill;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\potion\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Potion.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\potion\TranslationsImport $translations_import
+   * @param TranslationsImport $translations_import
    *   The Translation importer service.
-   * @param \Drupal\potion\TranslationsExport $translations_export
+   * @param TranslationsExport $translations_export
    *   The Translation exporter service.
-   * @param \Drupal\potion\TranslationsExtractor $translations_extractor
+   * @param TranslationsExtractor $translations_extractor
    *   The Translation extractor service.
-   * @param \Drupal\potion\TranslationsFill $translations_fill
+   * @param TranslationsFill $translations_fill
    *   The Translation fill service.
    */
   public function __construct(Utility $utility, FileSystemInterface $file_system, TranslationsImport $translations_import, TranslationsExport $translations_export, TranslationsExtractor $translations_extractor, TranslationsFill $translations_fill) {
@@ @@
    *
    * @aliases po:import
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   Formatted output summary.
    *
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If no langcode isn't a valid enabled language.
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If the given source isn't a valid or malformed .po file.
    */
   public function import($langcode, $source, array $options = [
@@ @@
    *
    * @aliases po:export
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   Formatted output summary.
    *
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If no langcode isn't a valid enabled language.
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If the given source already exists.
    */
   public function export($langcode, $destination, array $options = [
@@ @@
    *
    * @aliases po:gen
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   Formatted output summary.
    *
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If no langcode isn't a valid enabled language.
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If the given source does not exists.
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If the given source is not readable.
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If the given destination does not exists.
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If the given destination is not writable.
    */
   public function translationExtract($langcode, $source, $destination, array $options = [
@@ @@
    *
    * @aliases po:fill
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   Formatted output summary.
    *
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If the langcode isn't a valid enabled language.
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If the given source does not exists.
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If the given source isn't a valid or malformed .po file.
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If the given source is not readable.
-   * @throws \Drupal\potion\Exception\ConsoleException
+   * @throws ConsoleException
    *   If the given source is not writable.
    */
   public function fill($langcode, $source, array $options = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/potion/potion.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\Config;
+use Drupal\potion\Utility;
 /**
  * @file
  * Contains potion.install.
@@ @@

   // Asserts `gettext` utilities are reacheable & executable.
   if ($phase == 'runtime') {
-    /** @var \Drupal\Core\Config\Config $gettextConfig */
+    /** @var Config $gettextConfig */
     $gettextConfig = \Drupal::service('config.factory')->get('potion.gettext.settings');

-    /** @var \Drupal\potion\Utility $utility */
+    /** @var Utility $utility */
     $utility = \Drupal::service('potion.utility');

     // Path to gettext binaries files. When empty, the $PATH values are used.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 31 files have been changed by Rector                                      

