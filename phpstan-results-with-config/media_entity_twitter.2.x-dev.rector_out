modules/contrib/media_entity_twitter/media_entity_twitter.install
modules/contrib/media_entity_twitter/media_entity_twitter.module
modules/contrib/media_entity_twitter/media_entity_twitter.post_update.php
modules/contrib/media_entity_twitter/src/Exception/TwitterApiException.php
modules/contrib/media_entity_twitter/src/Form/TwitterMediaLibraryAddForm.php
modules/contrib/media_entity_twitter/src/Plugin/Field/FieldFormatter/TwitterEmbedFormatter.php
modules/contrib/media_entity_twitter/src/Plugin/media/Source/Twitter.php
modules/contrib/media_entity_twitter/src/TweetFetcher.php
modules/contrib/media_entity_twitter/src/TweetFetcherInterface.php
modules/contrib/media_entity_twitter/tests/src/Functional/TweetEmbedFormatterTest.php
modules/contrib/media_entity_twitter/tests/src/Kernel/ThumbnailTest.php

7 files with changes
====================

1) modules/contrib/media_entity_twitter/tests/src/Kernel/ThumbnailTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_entity_twitter\Kernel;

+use Drupal\media\MediaInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * The mocked tweet fetcher.
    *
-   * @var \Drupal\media_entity_twitter\TweetFetcherInterface
+   * @var TweetFetcherInterface
    */
   protected $tweetFetcher;

@@ @@
   /**
    * The plugin under test.
    *
-   * @var \Drupal\media_entity_twitter\Plugin\media\Source\Twitter
+   * @var Twitter
    */
   protected $plugin;

@@ @@
   /**
    * A tweet media entity.
    *
-   * @var \Drupal\media\MediaInterface
+   * @var MediaInterface
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/media_entity_twitter/src/TweetFetcherInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_entity_twitter;

+use Drupal\media_entity_twitter\Exception\TwitterApiException;
 /**
  * Defines a wrapper around the Twitter API.
  */
@@ @@
    * @return array
    *   The tweet information.
    *
-   * @throws \Drupal\media_entity_twitter\Exception\TwitterApiException
+   * @throws TwitterApiException
    *   If the Twitter API returns errors in the response.
    */
   public function fetchTweet($id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/media_entity_twitter/src/TweetFetcher.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The optional cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * TweetFetcher constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface|null $cache
+   * @param CacheBackendInterface|null $cache
    *   (optional) A cache bin for storing fetched tweets.
    */
   public function __construct(CacheBackendInterface $cache = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/media_entity_twitter/src/Plugin/media/Source/Twitter.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The tweet fetcher.
    *
-   * @var \Drupal\media_entity_twitter\TweetFetcherInterface
+   * @var TweetFetcherInterface
    */
   protected $tweetFetcher;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager service.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   Config field type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\media_entity_twitter\TweetFetcherInterface $tweet_fetcher
+   * @param TweetFetcherInterface $tweet_fetcher
    *   The tweet fetcher.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, RendererInterface $renderer, TweetFetcherInterface $tweet_fetcher, LoggerChannelInterface $logger, FileSystemInterface $file_system) {
@@ @@
    *
    * @param mixed $id
    *   The tweet ID.
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity.
    * @param string|null $media_url
    *   The URL of the media (i.e., photo, video, etc.) associated with the
@@ @@
   /**
    * Runs preg_match on embed code/URL.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   Media object.
    *
    * @return array|bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/media_entity_twitter/src/Plugin/Field/FieldFormatter/TwitterEmbedFormatter.php:64

    ---------- begin diff ----------
@@ @@
   /**
    * Extracts the embed code from a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/media_entity_twitter/src/Form/TwitterMediaLibraryAddForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_entity_twitter\Form;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function addButtonSubmit(array $form, FormStateInterface $form_state) {
@@ @@
   /**
    * Returns the definition of the source field for a media type.
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type to get the source definition for.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface|null
+   * @return FieldDefinitionInterface|null
    *   The field definition.
    */
   protected function getSourceFieldDefinition(MediaTypeInterface $media_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/media_entity_twitter/media_entity_twitter.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleExtensionList;
 /**
  * @file
  * Install, uninstall and update hooks for Media entity Twitter module.
@@ @@
  * Implements hook_install().
  */
 function media_entity_twitter_install() {
-  /** @var \Drupal\Core\Extension\ModuleExtensionList $extension_list */
+  /** @var ModuleExtensionList $extension_list */
   $extension_list = \Drupal::service("extension.list.module");
   $source = dirname($extension_list->getPathname('media_entity_twitter')) . '/images/icons';
   $destination = \Drupal::config('media.settings')->get('icon_base_uri');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

