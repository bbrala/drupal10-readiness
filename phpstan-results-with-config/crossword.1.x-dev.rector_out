modules/contrib/crossword/crossword.api.php
modules/contrib/crossword/crossword.module
modules/contrib/crossword/crossword.post_update.php
modules/contrib/crossword/modules/crossword_colors/crossword_colors.module
modules/contrib/crossword/modules/crossword_colors/src/CrosswordColorsService.php
modules/contrib/crossword/modules/crossword_colors/src/Form/CrosswordColorsConfigForm.php
modules/contrib/crossword/modules/crossword_contest/src/Controller/CrosswordContestController.php
modules/contrib/crossword/modules/crossword_contest/src/Plugin/Field/FieldFormatter/CrosswordContestFormatter.php
modules/contrib/crossword/modules/crossword_download/src/Plugin/Field/FieldFormatter/CrosswordFileDownloadLink.php
modules/contrib/crossword/modules/crossword_download/src/Plugin/Field/FieldFormatter/CrosswordImageDownload.php
modules/contrib/crossword/modules/crossword_image/src/Annotation/CrosswordImage.php
modules/contrib/crossword/modules/crossword_image/src/CrosswordImageManager.php
modules/contrib/crossword/modules/crossword_image/src/CrosswordImageManagerInterface.php
modules/contrib/crossword/modules/crossword_image/src/CrosswordImagePluginBase.php
modules/contrib/crossword/modules/crossword_image/src/CrosswordImagePluginInterface.php
modules/contrib/crossword/modules/crossword_image/src/CrosswordImageService.php
modules/contrib/crossword/modules/crossword_image/src/CrosswordImageServiceInterface.php
modules/contrib/crossword/modules/crossword_image/src/Form/CrosswordImageRegenerateForm.php
modules/contrib/crossword/modules/crossword_image/src/Plugin/Field/FieldFormatter/CrosswordImageRendered.php
modules/contrib/crossword/modules/crossword_image/src/Plugin/crossword/crossword_image/CrosswordNumberedThumbnail.php
modules/contrib/crossword/modules/crossword_image/src/Plugin/crossword/crossword_image/CrosswordSolutionThumbnail.php
modules/contrib/crossword/modules/crossword_image/src/Plugin/crossword/crossword_image/CrosswordThumbnail.php
modules/contrib/crossword/modules/crossword_image/src/Plugin/crossword/crossword_image/CrosswordThumbnailBase.php
modules/contrib/crossword/modules/crossword_media/crossword_media.install
modules/contrib/crossword/modules/crossword_media/crossword_media.module
modules/contrib/crossword/modules/crossword_media/src/Plugin/media/Source/Crossword.php
modules/contrib/crossword/modules/crossword_pseudofields/crossword_pseudofields.install
modules/contrib/crossword/modules/crossword_pseudofields/crossword_pseudofields.module
modules/contrib/crossword/modules/crossword_pseudofields/src/Form/CrosswordPseudofieldsConfigForm.php
modules/contrib/crossword/modules/crossword_pseudofields/src/Plugin/Field/FieldFormatter/CrosswordPseudofieldsFormatter.php
modules/contrib/crossword/modules/crossword_status/crossword_status.module
modules/contrib/crossword/modules/crossword_token/crossword_token.tokens.inc
modules/contrib/crossword/src/Annotation/CrosswordFileParser.php
modules/contrib/crossword/src/CrosswordDataService.php
modules/contrib/crossword/src/CrosswordDataServiceInterface.php
modules/contrib/crossword/src/CrosswordException.php
modules/contrib/crossword/src/CrosswordFileParserManager.php
modules/contrib/crossword/src/CrosswordFileParserManagerInterface.php
modules/contrib/crossword/src/CrosswordFileParserPluginBase.php
modules/contrib/crossword/src/CrosswordFileParserPluginInterface.php
modules/contrib/crossword/src/Plugin/Block/CrosswordInstructionsBlock.php
modules/contrib/crossword/src/Plugin/Field/FieldFormatter/CrosswordFormatter.php
modules/contrib/crossword/src/Plugin/Field/FieldFormatter/CrosswordGenericFileFormatter.php
modules/contrib/crossword/src/Plugin/Field/FieldFormatter/CrosswordSolutionFormatter.php
modules/contrib/crossword/src/Plugin/Field/FieldType/CrosswordItem.php
modules/contrib/crossword/src/Plugin/Field/FieldWidget/CrosswordFileWidget.php
modules/contrib/crossword/src/Plugin/Validation/Constraint/CrosswordDimensions.php
modules/contrib/crossword/src/Plugin/Validation/Constraint/CrosswordDimensionsValidator.php
modules/contrib/crossword/src/Plugin/Validation/Constraint/CrosswordFile.php
modules/contrib/crossword/src/Plugin/Validation/Constraint/CrosswordFileValidator.php
modules/contrib/crossword/src/Plugin/crossword/crossword_file_parser/AcrossLitePuzParser.php
modules/contrib/crossword/src/Plugin/crossword/crossword_file_parser/AcrossLiteTextParser.php
modules/contrib/crossword/src/Plugin/crossword/crossword_file_parser/CrosswordCompilerXmlParser.php
modules/contrib/crossword/src/Plugin/crossword/crossword_file_parser/IpuzParser.php
modules/contrib/crossword/tests/modules/crossword_pseudofields_tests/src/Controller/CrosswordTestsController.php
modules/contrib/crossword/tests/modules/crossword_tests/src/Controller/CrosswordTestsController.php
modules/contrib/crossword/tests/src/Functional/CrosswordColorsTest.php
modules/contrib/crossword/tests/src/Functional/CrosswordContestAccessTest.php
modules/contrib/crossword/tests/src/Functional/CrosswordFieldValidateTest.php
modules/contrib/crossword/tests/src/Functional/CrosswordImageRegenerateTest.php
modules/contrib/crossword/tests/src/Functional/CrosswordInstructionsBlockTest.php
modules/contrib/crossword/tests/src/FunctionalJavascript/CrosswordContestTest.php
modules/contrib/crossword/tests/src/FunctionalJavascript/CrosswordFormatterFancyFeaturesTest.php
modules/contrib/crossword/tests/src/FunctionalJavascript/CrosswordFormatterTest.php
modules/contrib/crossword/tests/src/FunctionalJavascript/CrosswordFormatterTestBase.php
modules/contrib/crossword/tests/src/FunctionalJavascript/CrosswordFormatterXssTest.php
modules/contrib/crossword/tests/src/FunctionalJavascript/CrosswordPseudofieldsTest.php
modules/contrib/crossword/tests/src/FunctionalJavascript/CrosswordSolutionXssTest.php
modules/contrib/crossword/tests/src/FunctionalJavascript/CrosswordStatusTest.php
modules/contrib/crossword/tests/src/FunctionalJavascript/MediaSourceCrosswordTest.php
modules/contrib/crossword/tests/src/Kernel/AcrossLitePuzParserTest.php
modules/contrib/crossword/tests/src/Kernel/AcrossLiteTextParserTest.php
modules/contrib/crossword/tests/src/Kernel/CrosswordCompilerXmlParserTest.php
modules/contrib/crossword/tests/src/Kernel/CrosswordDataServiceTest.php
modules/contrib/crossword/tests/src/Kernel/CrosswordFileParserPluginTestBase.php
modules/contrib/crossword/tests/src/Kernel/CrosswordImageServiceTest.php
modules/contrib/crossword/tests/src/Kernel/CrosswordImageTokenTest.php
modules/contrib/crossword/tests/src/Kernel/CrosswordTokenTest.php
modules/contrib/crossword/tests/src/Kernel/Formatter/CrosswordFileDownloadLinkFormatterTest.php
modules/contrib/crossword/tests/src/Kernel/Formatter/CrosswordImageDownloadLinkFormatterTest.php
modules/contrib/crossword/tests/src/Kernel/Formatter/CrosswordImageRenderedFormatterTest.php
modules/contrib/crossword/tests/src/Kernel/Formatter/CrosswordSolutionFormatterTest.php
modules/contrib/crossword/tests/src/Kernel/Formatter/SimpleCrosswordFormatterTestBase.php
modules/contrib/crossword/tests/src/Kernel/IpuzParserTest.php
modules/contrib/crossword/tests/src/Unit/FindReferencesTest.php

39 files with changes
=====================

1) modules/contrib/crossword/tests/src/Unit/FindReferencesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\crossword\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\crossword\CrosswordDataService;
 use Drupal\Tests\UnitTestCase;

@@ @@
  */
 class FindReferencesTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Test findReferences function.
    *
@@ @@
    * @dataProvider findReferencesProvider
    */
   public function testFindReferences($text) {
-    /** @var \Drupal\crossword\CrosswordDataService $crossword_data_service */
+    /** @var CrosswordDataService $crossword_data_service */
     $crossword_data_service = $this->prophesize(CrosswordDataService::class);
     $crossword_data_service = $crossword_data_service->reveal();

@@ @@
    * Tests addReferences specifically with "starred clues".
    */
   public function testStarredClues() {
-    /** @var \Drupal\crossword\CrosswordDataService $crossword_data_service */
+    /** @var CrosswordDataService $crossword_data_service */
     $crossword_data_service = $this->prophesize(CrosswordDataService::class);
     $crossword_data_service = $crossword_data_service->reveal();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/crossword/tests/src/Kernel/IpuzParserTest.php:31

    ---------- begin diff ----------
@@ @@
    *
    * @return array
    *   Structured data for tests.
+   * @doesNotPerformAssertions
    */
   public function testExceptionsProvider() {
     return [
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/crossword/tests/src/Kernel/Formatter/SimpleCrosswordFormatterTestBase.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * A test entity.
    *
-   * @var Drupal\entity_test\Entity\EntityTestRev
+   * @var EntityTestRev
    */
   public $entity;

@@ @@
   /**
    * Helper function to create node that can be used for testing.
    *
-   * @return Drupal\entity_test\Entity\EntityTestRev
+   * @return EntityTestRev
    *   An entity to be used for testing.
    */
   protected function createTestEntity() {
@@ @@
     // First we move a test file to the file system.
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/test.txt");

-    $file = file_save_data($contents, 'public://test.txt');
+    $file = \Drupal::service('file.repository')->writeData($contents, 'public://test.txt');
     $field_storage = FieldStorageConfig::create([
       'field_name' => 'field_crossword',
       'entity_type' => 'entity_test_rev',
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/crossword/tests/src/Kernel/Formatter/CrosswordImageDownloadLinkFormatterTest.php:57

    ---------- begin diff ----------
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'Solution (png)',
-      '#url' => Url::fromUri(file_create_url('public://crossword/1-solution_thumbnail.png')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://crossword/1-solution_thumbnail.png'),
       '#options' => [
         'attributes' => [
           'class' => [
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/crossword/tests/src/Kernel/Formatter/CrosswordFileDownloadLinkFormatterTest.php:55

    ---------- begin diff ----------
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'Test Puzzle (3x3)',
-      '#url' => Url::fromUri(file_create_url('public://test.txt')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://test.txt'),
       '#options' => [
         'attributes' => [
           'class' => [
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/crossword/tests/src/Kernel/CrosswordImageServiceTest.php:41

    ---------- begin diff ----------
@@ @@
    */
   public function testCrosswordImageService() {
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/test.txt");
-    $file = file_save_data($contents, "public://test.txt");
+    $file = \Drupal::service('file.repository')->writeData($contents, "public://test.txt");

     $crossword_image_manager = \Drupal::service('crossword.manager.image');
     $plugin_ids = array_keys($crossword_image_manager->getCrosswordImageOptionList());
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/crossword/tests/src/Kernel/CrosswordFileParserPluginTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\crossword\Kernel;

+use Drupal\crossword\CrosswordFileParserManagerInterface;
+use Drupal\crossword\CrosswordDataService;
 use Drupal\crossword\CrosswordException;
 use Drupal\KernelTests\KernelTestBase;

@@ @@
   /**
    * The parser plugin manager.
    *
-   * @var \Drupal\crossword\CrosswordFileParserManagerInterface
+   * @var CrosswordFileParserManagerInterface
    */
   protected $parserManager;

@@ @@
   /**
    * The crossword data service.
    *
-   * @var \Drupal\crossword\CrosswordDataService
+   * @var CrosswordDataService
    */
   protected $crosswordDataService;

@@ @@
    * This does not closely examine the parsed data. It simply checks whether
    * the parsing completes with or without an expected exception.
    *
-   * @dataProvider testExceptionsProvider
+   * @dataProvider exceptionsProvider
    */
   public function testExceptions($filename, $message) {
     $file = $this->getTestFile($filename);
@@ @@
    */
   protected function getTestFile($filename) {
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/" . $filename);
-    $file = file_save_data($contents, "public://$filename");
+    $file = \Drupal::service('file.repository')->writeData($contents, "public://$filename");
     return $file;
   }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/crossword/tests/src/Kernel/CrosswordDataServiceTest.php:35

    ---------- begin diff ----------
@@ @@
    */
   public function testCrosswordDataService() {
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/test.txt");
-    $file = file_save_data($contents, "public://test.txt");
+    $file = \Drupal::service('file.repository')->writeData($contents, "public://test.txt");
     $expected_json = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/test.json");
     $expected_data = json_decode($expected_json, TRUE);
     $expected_data['id'] = $file->id();
@@ @@
    */
   public function testCrosswordDataServiceXss() {
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/xss.txt");
-    $file = file_save_data($contents, "public://xss.txt");
+    $file = \Drupal::service('file.repository')->writeData($contents, "public://xss.txt");
     $expected_json = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/xss.json");
     $expected_data = json_decode($expected_json, TRUE);
     $expected_data['id'] = $file->id();
@@ @@
    */
   public function testJsonEncoding() {
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/3102647.puz");
-    $file = file_save_data($contents, "public://3102647.puz");
+    $file = \Drupal::service('file.repository')->writeData($contents, "public://3102647.puz");

     $crossword_data_service = \Drupal::service('crossword.data_service');
     $data = $crossword_data_service->getData($file);
@@ @@
    */
   public function testCorruptedFile() {
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/corrupted_bad_grid.puz");
-    $file = file_save_data($contents, "public://corrupted_bad_grid.puz");
+    $file = \Drupal::service('file.repository')->writeData($contents, "public://corrupted_bad_grid.puz");

     $cache_service = \Drupal::service('cache.crossword');
     $this->assertFalse($cache_service->get($file->id()));
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/crossword/tests/src/Kernel/CrosswordCompilerXmlParserTest.php:31

    ---------- begin diff ----------
@@ @@
    *
    * @return array
    *   Structured data for tests.
+   * @doesNotPerformAssertions
    */
   public function testExceptionsProvider() {
     return [
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/crossword/tests/src/Kernel/AcrossLiteTextParserTest.php:31

    ---------- begin diff ----------
@@ @@
    *
    * @return array
    *   Structured data for tests.
+   * @doesNotPerformAssertions
    */
   public function testExceptionsProvider() {
     return [
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/crossword/tests/src/Kernel/AcrossLitePuzParserTest.php:31

    ---------- begin diff ----------
@@ @@
    *
    * @return array
    *   Structured data for tests.
+   * @doesNotPerformAssertions
    */
   public function testExceptionsProvider() {
     return [
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/crossword/tests/src/FunctionalJavascript/CrosswordStatusTest.php:172

    ---------- begin diff ----------
@@ @@
   /**
    * Helper function to create node that can be viewed and used for testing.
    *
-   * @return Drupal\node\Entity\Node
+   * @return Node
    *   A crossword node that can be used in tests.
    */
   protected function createTestNode() {
     // First we move a test file to the file system.
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/{$this->testPuzzleFilename}");
-    $file = file_save_data($contents, "public://{$this->testPuzzleFilename}");
+    $file = \Drupal::service('file.repository')->writeData($contents, "public://{$this->testPuzzleFilename}");
     // Now use that file in a new crossword node.
     $node = Node::create(['type' => 'crossword']);
     $node->set('title', 'Test Crossword Node');
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/crossword/tests/src/FunctionalJavascript/CrosswordFormatterTestBase.php:324

    ---------- begin diff ----------
@@ @@
   /**
    * Helper function to create node that can be viewed and used for testing.
    *
-   * @return Drupal\node\Entity\Node
+   * @return Node
    *   A crossword node that can be used in tests.
    */
   protected function createTestNode() {
     // First we move a test file to the file system.
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/{$this->testPuzzleFilename}");
-    $file = file_save_data($contents, "public://{$this->testPuzzleFilename}");
+    $file = \Drupal::service('file.repository')->writeData($contents, "public://{$this->testPuzzleFilename}");
     // Now use that file in a new crossword node.
     $node = Node::create(['type' => 'crossword']);
     $node->set('title', 'Test Crossword Node');
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/crossword/tests/src/FunctionalJavascript/CrosswordContestTest.php:96

    ---------- begin diff ----------
@@ @@
   protected function createTestNode() {
     // First we move a test file to the file system.
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/{$this->testPuzzleFilename}");
-    $file = file_save_data($contents, "public://{$this->testPuzzleFilename}");
+    $file = \Drupal::service('file.repository')->writeData($contents, "public://{$this->testPuzzleFilename}");
     // Now use that file in a new crossword_contests media.
     $media = Media::create(['bundle' => 'crossword_contest']);
     $media->set('name', 'Test Crossword Contest');
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/crossword/tests/src/Functional/CrosswordImageRegenerateTest.php:29

    ---------- begin diff ----------
@@ @@
   public function testRegenerate() {
     // Create a crossword file.
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/test.txt");
-    $file = file_save_data($contents, "public://test.txt");
+    $file = \Drupal::service('file.repository')->writeData($contents, "public://test.txt");

     // Create a couple crossword images. Don't create solution.
     $crossword_image_service = \Drupal::service('crossword.image_service');
@@ @@
     // Confirm they exist.
     $this->assertFileExists('public://crossword/1-thumbnail.png');
     $this->assertFileExists('public://crossword/1-numbered_thumbnail.png');
-    $this->assertFileNotExists('public://crossword/1-solution_thumbnail.png');
+    $this->assertFileDoesNotExist('public://crossword/1-solution_thumbnail.png');
     // Put in a delay so updates can be measured..
     sleep(2);
     // Navigate to the regenerate form.
@@ @@
     $this->assertSession()->pageTextContains('Crossword Image Regeneration is complete');
     // Check file existence (or non-existence).
     $this->assertFileExists('public://crossword/1-thumbnail.png');
-    $this->assertFileNotExists('public://crossword/1-thumbnail_0.png');
+    $this->assertFileDoesNotExist('public://crossword/1-thumbnail_0.png');
     $this->assertFileExists('public://crossword/1-numbered_thumbnail.png');
-    $this->assertFileNotExists('public://crossword/1-numbered_thumbnail_0.png');
-    $this->assertFileNotExists('public://crossword/1-solution_thumbnail.png');
+    $this->assertFileDoesNotExist('public://crossword/1-numbered_thumbnail_0.png');
+    $this->assertFileDoesNotExist('public://crossword/1-solution_thumbnail.png');
     // Check modification times. Only numbered should have been updated.
     $this->assertEquals($thumbnail_time, filemtime('public://crossword/1-thumbnail.png'));
     $this->assertGreaterThan($numbered_time, filemtime('public://crossword/1-numbered_thumbnail.png'));
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/crossword/tests/src/Functional/CrosswordFieldValidateTest.php:32

    ---------- begin diff ----------
@@ @@
     // Not crossword.
     $filename = 'failure.txt';
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/" . $filename);
-    $not_crossword = file_save_data($contents, "public://$filename");
+    $not_crossword = \Drupal::service('file.repository')->writeData($contents, "public://$filename");

     // Corrupted txt.
     $filename = 'corrupted_bad_grid.txt';
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/" . $filename);
-    $corrupted_txt = file_save_data($contents, "public://$filename");
+    $corrupted_txt = \Drupal::service('file.repository')->writeData($contents, "public://$filename");

     // Ok txt.
     $filename = 'test.txt';
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/" . $filename);
-    $ok_txt = file_save_data($contents, "public://$filename");
+    $ok_txt = \Drupal::service('file.repository')->writeData($contents, "public://$filename");

     // Ok puz.
     $filename = 'test.puz';
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/" . $filename);
-    $ok_puz = file_save_data($contents, "public://$filename");
+    $ok_puz = \Drupal::service('file.repository')->writeData($contents, "public://$filename");

     // Log in as admin.
     $this->drupalLogin($this->drupalCreateUser([], 'radmin', TRUE));
@@ @@
     // Big file (25x25).
     $filename = '3185956.puz';
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/" . $filename);
-    $big_file = file_save_data($contents, "public://$filename");
+    $big_file = \Drupal::service('file.repository')->writeData($contents, "public://$filename");

     // Tiny File (2x2).
     $filename = 'tiny.txt';
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/" . $filename);
-    $tiny_file = file_save_data($contents, "public://$filename");
+    $tiny_file = \Drupal::service('file.repository')->writeData($contents, "public://$filename");

     // Ok size (3x3).
     $filename = 'test.txt';
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/" . $filename);
-    $ok_file = file_save_data($contents, "public://$filename");
+    $ok_file = \Drupal::service('file.repository')->writeData($contents, "public://$filename");

     // Log in as admin.
     $this->drupalLogin($this->drupalCreateUser([], 'radmin', TRUE));
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/crossword/tests/src/Functional/CrosswordContestAccessTest.php:71

    ---------- begin diff ----------
@@ @@
   protected function createTestMedia() {
     // First we move a test file to the file system.
     $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('crossword') . "/tests/files/{$this->testPuzzleFilename}");
-    $file = file_save_data($contents, "public://{$this->testPuzzleFilename}");
+    $file = \Drupal::service('file.repository')->writeData($contents, "public://{$this->testPuzzleFilename}");
     // Now use that file in a new crossword_contests media.
     $media = Media::create(['bundle' => 'crossword_contest']);
     $media->set('name', 'Published Crossword Contest');
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/crossword/tests/src/Functional/CrosswordColorsTest.php:24

    ---------- begin diff ----------
@@ @@
    * Use form to update config and confirm stylesheet is saved/updated.
    */
   public function testCrosswordColorsForm() {
-    $this->assertFileNotExists('public://crossword-colors.css');
+    $this->assertFileDoesNotExist('public://crossword-colors.css');
     $this->drupalLogin($this->drupalCreateUser(['configure crossword colors']));

     // Save config for first time.
@@ @@
    * Load library without ever visiting form.
    */
   public function testCrosswordColorsInstall() {
-    $this->assertFileNotExists('public://crossword-colors.css');
+    $this->assertFileDoesNotExist('public://crossword-colors.css');
     $this->drupalLogin($this->drupalCreateUser(['configure crossword colors']));
     $library = \Drupal::service('library.discovery')->getLibraryByName('crossword', 'crossword.default');
     // The library_info_alter hook should have created the file.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/crossword/src/Plugin/Validation/Constraint/CrosswordFileValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crossword\Plugin\Validation\Constraint;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\crossword\CrosswordException;
 use Psr\Log\LoggerInterface;
@@ @@
   /**
    * Crossword Parser manager service.
    *
-   * @var \Drupal\crossword\CrosswordFileParserManagerInterface
+   * @var CrosswordFileParserManagerInterface
    */
   protected $parserManager;

@@ @@
   /**
    * File storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fileStorage;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Create an instance of the validator.
    *
-   * @param \Drupal\crossword\CrosswordFileParserManagerInterface $parser_manager
+   * @param CrosswordFileParserManagerInterface $parser_manager
    *   The parser manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   Entity type manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(CrosswordFileParserManagerInterface $parser_manager, EntityTypeManager $entity_type_manager, LoggerInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/crossword/src/Plugin/Validation/Constraint/CrosswordDimensionsValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crossword\Plugin\Validation\Constraint;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\crossword\CrosswordDataServiceInterface;
 use Psr\Log\LoggerInterface;
@@ @@
   /**
    * Crossword data service.
    *
-   * @var \Drupal\crossword\CrosswordDataServiceInterface
+   * @var CrosswordDataServiceInterface
    */
   protected $crosswordDataService;

@@ @@
   /**
    * File storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fileStorage;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Create an instance of the validator.
    *
-   * @param \Drupal\crossword\CrosswordDataServiceInterface $crossword_data_service
+   * @param CrosswordDataServiceInterface $crossword_data_service
    *   The parser manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   Entity type manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(CrosswordDataServiceInterface $crossword_data_service, EntityTypeManager $entity_type_manager, LoggerInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/crossword/src/Plugin/Field/FieldFormatter/CrosswordFormatter.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Crossword data service.
    *
-   * @var \Drupal\crossword\CrosswordDataServiceInterface
+   * @var CrosswordDataServiceInterface
    */
   protected $crosswordDataService;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\crossword\CrosswordDataServiceInterface $crossword_data_service
+   * @param CrosswordDataServiceInterface $crossword_data_service
    *   Token service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, CrosswordDataServiceInterface $crossword_data_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/crossword/src/CrosswordFileParserPluginInterface.php:15

    ---------- begin diff ----------
@@ @@
    * and essential structure of the file. It could be as
    * simple as checking the extension.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The user input file to test against the plugins.
    *
    * @return bool
@@ @@
    * @return array
    *   An associative array that represents the crossword.
    *
-   * @throws \Drupal\crossword\CrosswordException
+   * @throws CrosswordException
    *   Thrown if something causes parsing to fail.
    */
   public function parse();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/crossword/src/CrosswordFileParserPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crossword;

+use Drupal\file\FileInterface;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\file\Entity\File;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The file entity that hopefully represents a crossword.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $file;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/crossword/src/CrosswordFileParserManagerInterface.php:13

    ---------- begin diff ----------
@@ @@
    *
    * @param array $definitions
    *   A list of definitions to test against.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The user input file to test against the plugins.
    *
-   * @return \Drupal\crossword\CrosswordFileParserPluginInterface|bool
+   * @return CrosswordFileParserPluginInterface|bool
    *   The relevant plugin or FALSE on failure.
    */
   public function filterApplicableDefinitions(array $definitions, FileInterface $file);
@@ @@
   /**
    * Load a crossword file parser from user input file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File provided from a field.
    *
-   * @return \Drupal\crossword\CrosswordFileParserPluginInterface|bool
+   * @return CrosswordFileParserPluginInterface|bool
    *   The loaded plugin.
    */
   public function loadCrosswordFileParserFromInput(FileInterface $file);
@@ @@
   /**
    * Load a plugin definition from an input.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   An input string.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/crossword/src/CrosswordDataServiceInterface.php:13

    ---------- begin diff ----------
@@ @@
    *
    * See CrosswordFilePluginInterface::parse() for returned data structure.
    *
-   * @param Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The (crossword) file.
    * @param bool $redacted
    *   If TRUE, answers and rebus info will not be included.
@@ @@
   /**
    * Get the crossword author from a file.
    *
-   * @param Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The (crossword) file.
    *
    * @return mixed
@@ @@
   /**
    * Get the crossword dimension from a file.
    *
-   * @param Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The (crossword) file.
    *
    * @return mixed
@@ @@
   /**
    * Get the crossword dimension from a file.
    *
-   * @param Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The (crossword) file.
    *
    * @return mixed
@@ @@
   /**
    * Get the crossword dimensions from a file.
    *
-   * @param Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The (crossword) file.
    * @param string $delimiter
    *   The delimiter.
@@ @@
   /**
    * Get the crossword title from a file.
    *
-   * @param Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The (crossword) file.
    *
    * @return mixed
@@ @@
    * means that the correct answer for a black square is an empty
    * string, not NULL.
    *
-   * @param Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The (crossword) file.
    * @param string $black
    *   The string to represent a black square.
@@ @@
   /**
    * Find out if it's a rebus puzzle, which may require more instructions.
    *
-   * @param Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The (crossword) file.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/crossword/src/CrosswordDataService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crossword;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandler;
@@ @@
   /**
    * Cache for the result of the parse function.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The crossword file parser plugin manage.
    *
-   * @var \Drupal\crossword\CrosswordFileParserManager
+   * @var CrosswordFileParserManager
    */
   protected $parserManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The Metatag logging channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Construct the Crossword Data Service.
    *
-   * @param Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache.
-   * @param Drupal\crossword\CrosswordFileParserManager $parser_manager
+   * @param CrosswordFileParserManager $parser_manager
    *   The crossword parser manager.
-   * @param Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $channelFactory
+   * @param LoggerChannelFactoryInterface $channelFactory
    *   The LoggerChannelFactoryInterface object.
    */
   public function __construct(CacheBackendInterface $cache, CrosswordFileParserManager $parser_manager, ModuleHandler $module_handler, LoggerChannelFactoryInterface $channelFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/crossword/src/Annotation/CrosswordFileParser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crossword\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


28) modules/contrib/crossword/modules/crossword_token/crossword_token.tokens.inc:122

    ---------- begin diff ----------
@@ @@
                 $replacements[$original] = $style->buildUrl($image->getFileUri());
               }
               elseif (!isset($parts[1])) {
-                $replacements[$original] = file_create_url($image->getFileUri());
+                $replacements[$original] = \Drupal::service('file_url_generator')->generateAbsoluteString($image->getFileUri());
               }
             }
           }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


29) modules/contrib/crossword/modules/crossword_media/src/Plugin/media/Source/Crossword.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The crossword image manager.
    *
-   * @var \Drupal\crossword_image\CrosswordImageManager
+   * @var CrosswordImageManager
    */
   protected $crosswordImageManager;

@@ @@
   /**
    * The crossword image service.
    *
-   * @var \Drupal\crossword_image\CrosswordImageServiceInterface
+   * @var CrosswordImageServiceInterface
    */
   protected $crosswordImageService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager service.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type plugin manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\crossword_image\CrosswordImageManager $crossword_image_manager
+   * @param CrosswordImageManager $crossword_image_manager
    *   The crossword image manager service.
-   * @param \Drupal\crossword_image\CrosswordImageServiceInterface $crossword_image_service
+   * @param CrosswordImageServiceInterface $crossword_image_service
    *   The crossword image service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, CrosswordImageManager $crossword_image_manager, CrosswordImageServiceInterface $crossword_image_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/crossword/modules/crossword_image/src/Plugin/Field/FieldFormatter/CrosswordImageRendered.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The crossword image manager service.
    *
-   * @var \Drupal\crossword_image\CrosswordImageManager
+   * @var CrosswordImageManager
    */
   protected $crosswordImageManager;

@@ @@
   /**
    * The crossword data service.
    *
-   * @var \Drupal\crossword\CrosswordDataServiceInterface
+   * @var CrosswordDataServiceInterface
    */
   protected $crosswordDataService;

@@ @@
   /**
    * The crossword image service.
    *
-   * @var \Drupal\crossword_image\CrosswordImageServiceInterface
+   * @var CrosswordImageServiceInterface
    */
   protected $crosswordImageService;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $image_style_storage
+   * @param EntityStorageInterface $image_style_storage
    *   The image style storage.
-   * @param \Drupal\crossword_image\CrosswordImageManager $crossword_image_manager
+   * @param CrosswordImageManager $crossword_image_manager
    *   The crossword image manager service.
-   * @param \Drupal\crossword\CrosswordDataServiceInterface $crossword_data_service
+   * @param CrosswordDataServiceInterface $crossword_data_service
    *   The crossword data service.
-   * @param \Drupal\crossword_image\CrosswordImageServiceInterface $crossword_image_service
+   * @param CrosswordImageServiceInterface $crossword_image_service
    *   The crossword image service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, EntityStorageInterface $image_style_storage, CrosswordImageManager $crossword_image_manager, CrosswordDataServiceInterface $crossword_data_service, CrosswordImageServiceInterface $crossword_image_service) {
@@ @@
         // context to ensure different file URLs are generated for different
         // sites in a multisite setup, including HTTP and HTTPS versions of the
         // same site. Fix in https://www.drupal.org/node/2646744.
-        $url = Url::fromUri(file_create_url($image_uri));
+        $url = \Drupal::service('file_url_generator')->generate($image_uri);
         $cache_contexts[] = 'url.site';
       }
       elseif (isset($link_file)) {
-        $url = Url::fromUri(file_create_url($file->getFileUri()));
+        $url = \Drupal::service('file_url_generator')->generate($file->getFileUri());
         $cache_contexts[] = 'url.site';
       }
       $cache_tags = Cache::mergeTags($base_cache_tags, $file->getCacheTags(), $image->getCacheTags());
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/crossword/modules/crossword_image/src/CrosswordImageServiceInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Get a uri to the image.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The Crossword file.
    * @param string $plugin_id
    *   Id of the crossword_image plugin to use.
@@ @@
   /**
    * Get a file entity of the image.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The Crossword file.
    * @param string $plugin_id
    *   Id of the crossword_image plugin to use.
    *
-   * @return \Drupal\file\FileInterface|null
+   * @return FileInterface|null
    *   The file entity of the image or null.
    */
   public function getImageEntity(FileInterface $file, string $plugin_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


32) modules/contrib/crossword/modules/crossword_image/src/CrosswordImageService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crossword_image;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManager;
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * Crossword image plugin manager.
    *
-   * @var \Drupal\crossword_image\CrosswordImageManager
+   * @var CrosswordImageManager
    */
   protected $crosswordImageManager;

@@ @@
   /**
    * File usage.
    *
-   * @var \Drupal\file\FileUsage\DatabaseFileUsageBackend
+   * @var DatabaseFileUsageBackend
    */
   protected $fileUsage;

@@ @@
   /**
    * File storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fileStorage;

@@ @@
   /**
    * The database connection used to store file usage information.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The crossword data service.
    *
-   * @var \Drupal\crossword\CrosswordDataServiceInterface
+   * @var CrosswordDataServiceInterface
    */
   protected $crosswordDataService;

@@ @@
   /**
    * Construct the Crossword Image Service.
    *
-   * @param \Drupal\Core\File\FileSystem $file_system
+   * @param FileSystem $file_system
    *   The file system.
-   * @param \Drupal\file\FileUsage\DatabaseFileUsageBackend $file_usage
+   * @param DatabaseFileUsageBackend $file_usage
    *   File usage service.
-   * @param \Drupal\crossword_image\CrosswordImageManager $crossword_image_manager
+   * @param CrosswordImageManager $crossword_image_manager
    *   Crossword image plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database connection.
    */
   public function __construct(FileSystem $file_system, DatabaseFileUsageBackend $file_usage, CrosswordImageManager $crossword_image_manager, EntityTypeManager $entity_type_manager, Connection $connection, CrosswordDataServiceInterface $crossword_data_service) {
@@ @@
   /**
    * Creates and saves image representation of the crossword file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file from which the image is to be created.
    * @param CrosswordImagePluginInterface $plugin
    *   The loaded crossword_image plugin.
@@ @@
    * By default the image is saved in a subdirectory of the directory that
    * holds the crossword file itself.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file that is being converted.
    * @param CrosswordImagePluginInterface $plugin
    *   The loaded crossword_image plugin.
@@ @@
   /**
    * Save a file entity for the image file (a managed file).
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file from which the image is to be created.
    * @param string $destination_uri
    *   The destination of the new file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file entity of the image.
    */
   protected function saveImageEntity(FileInterface $file, $destination_uri) {
@@ @@
       return $image;
     }
     else {
-      /** @var \Drupal\file\FileInterface $image */
+      /** @var FileInterface $image */
       $image = $this->fileStorage->create($values);
       $image->setPermanent();
       $image->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/crossword/modules/crossword_image/src/CrosswordImagePluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crossword_image;

+use Drupal\Core\ImageToolkit\ImageToolkitInterface;
 use Drupal\file\FileInterface;

 /**
@@ @@
   /**
    * Returns an image resource representing a preview of the puzzle.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The crossword file.
    *
    * @return resource
@@ @@
   /**
    * The toolkit to be used.
    *
-   * @return \Drupal\Core\ImageToolkit\ImageToolkitInterface
+   * @return ImageToolkitInterface
    *   The php image type to be saved.
    */
   public function getToolkit();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


34) modules/contrib/crossword/modules/crossword_image/src/CrosswordImagePluginBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The crossword data service.
    *
-   * @var \Drupal\crossword\CrosswordDataServiceInterface
+   * @var CrosswordDataServiceInterface
    */
   protected $crosswordDataService;

@@ @@
   /**
    * The image toolkit plugin manage.
    *
-   * @var \Drupal\Core\ImageToolkit\ImageToolkitManager
+   * @var ImageToolkitManager
    */
   protected $toolkitManager;

@@ @@
   /**
    * The extension list.
    *
-   * @var \Drupal\Core\Extension\ExtensionList
+   * @var ExtensionList
    */
   protected $extensionList;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/crossword/modules/crossword_image/src/Annotation/CrosswordImage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crossword_image\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


36) modules/contrib/crossword/modules/crossword_contest/src/Controller/CrosswordContestController.php:22

    ---------- begin diff ----------
@@ @@
    * the mid is for a crossword_contest media entity to which the user
    * has access.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $mid
    *   The id of the crossword_contest media.
@@ @@
    * @param string $answer
    *   The answer as a json string.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The crossword_contest media in the appropriate view mode.
    */
   public function build(Request $request, $mid, $answer) {
@@ @@
    * @param string $mid
    *   The id of the media entity.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The custom access.
    */
   public function validateMid($mid) {
@@ @@
   /**
    * Compares submitted answer to the correct answer.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The loaded crossword_content media.
    * @param string $answer
    *   Json encoded answer submitted by user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/crossword/modules/crossword_colors/src/CrosswordColorsService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crossword_colors;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\Color as ColorUtility;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\File\FileSystem;
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * Colors config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Construct the Crossword Image Service.
    *
-   * @param \Drupal\Core\File\FileSystem $file_system
+   * @param FileSystem $file_system
    *   The file system.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   Config factory.
    */
   public function __construct(FileSystem $file_system, ConfigFactory $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


38) modules/contrib/crossword/crossword.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Field\FormatterPluginManager;
 /**
  * @file
  * Post-update functions crossword module.
@@ @@
  */
 function crossword_post_update_musical_formatters_step_2(&$sandbox) {
   $config_entity_updater = \Drupal::classResolver(ConfigEntityUpdater::class);
-  /** @var \Drupal\Core\Field\FormatterPluginManager $field_formatter_manager */
+  /** @var FormatterPluginManager $field_formatter_manager */
   $field_formatter_manager = \Drupal::service('plugin.manager.field.formatter');
   $field_formatter_manager->clearCachedDefinitions();

@@ @@
  */
 function crossword_post_update_button_schema(&$sandbox) {
   $config_entity_updater = \Drupal::classResolver(ConfigEntityUpdater::class);
-  /** @var \Drupal\Core\Field\FormatterPluginManager $field_formatter_manager */
+  /** @var FormatterPluginManager $field_formatter_manager */
   $field_formatter_manager = \Drupal::service('plugin.manager.field.formatter');

   $formatter_callback = function (EntityDisplayInterface $display) {
@@ @@
  */
 function crossword_post_update_button_confirm(&$sandbox) {
   $config_entity_updater = \Drupal::classResolver(ConfigEntityUpdater::class);
-  /** @var \Drupal\Core\Field\FormatterPluginManager $field_formatter_manager */
+  /** @var FormatterPluginManager $field_formatter_manager */
   $field_formatter_manager = \Drupal::service('plugin.manager.field.formatter');

   $formatter_callback = function (EntityDisplayInterface $display) {
@@ @@
  */
 function crossword_post_update_musical_formatters_step_3(&$sandbox) {
   $config_entity_updater = \Drupal::classResolver(ConfigEntityUpdater::class);
-  /** @var \Drupal\Core\Field\FormatterPluginManager $field_formatter_manager */
+  /** @var FormatterPluginManager $field_formatter_manager */
   $field_formatter_manager = \Drupal::service('plugin.manager.field.formatter');
   $field_formatter_manager->clearCachedDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


39) modules/contrib/crossword/crossword.api.php:14

    ---------- begin diff ----------
@@ @@
  * @param array $data
  *   The parsed crossword file, ready to be used by formatters and/or
  *   passed to drupalSettings.
- * @param Drupal\file\FileInterface $file
+ * @param FileInterface $file
  *   The crossword file.
  */
 function hook_crossword_data_alter(array &$data, FileInterface $file) {
    ----------- end diff -----------

 [ERROR] Could not process                                                      
         "modules/contrib/crossword/tests/src/Kernel/CrosswordTokenTest.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Tests\token\Kernel\KernelTestBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crossword/tests/src/Kernel/CrosswordImageTokenTest.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\Tests\token\Kernel\KernelTestBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crossword/modules/crossword_download/src/Plugin/Field/Fi
         eldFormatter/CrosswordImageDownload.php" file, due to:                 
         "Analyze error: "Class                                                 
         Drupal\file_download_link\Plugin\Field\FieldFormatter\FileDownloadLink 
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crossword/modules/crossword_download/src/Plugin/Field/Fi
         eldFormatter/CrosswordFileDownloadLink.php" file, due to:              
         "Analyze error: "Class                                                 
         Drupal\file_download_link\Plugin\Field\FieldFormatter\FileDownloadLink 
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

