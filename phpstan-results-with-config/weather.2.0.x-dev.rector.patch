diff --git a/src/Commands/WeatherCommands.php b/src/Commands/WeatherCommands.php
index cfd1021..0b8ea90 100644
--- a/src/Commands/WeatherCommands.php
+++ b/src/Commands/WeatherCommands.php
@@ -64,7 +64,7 @@ class WeatherCommands extends DrushCommands {
    * Open file.
    */
   private function csv() {
-    return fopen(drupal_get_path('module', 'weather') . '/files/weather_data.csv', 'r');
+    return fopen(\Drupal::service('extension.list.module')->getPath('weather') . '/files/weather_data.csv', 'r');
   }
 
   /**
diff --git a/src/Controller/WeatherDetailedForecastController.php b/src/Controller/WeatherDetailedForecastController.php
index 7f11f16..498f2aa 100644
--- a/src/Controller/WeatherDetailedForecastController.php
+++ b/src/Controller/WeatherDetailedForecastController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\weather\Controller;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\weather\Entity\WeatherPlaceInterface;
@@ -16,28 +17,28 @@ class WeatherDetailedForecastController extends ControllerBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Display Place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $displayPlaceStorage;
 
   /**
    * Weather Place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherPlaceStorage;
 
   /**
    * The controller constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Controller/WeatherUserConfiguredDisplayController.php b/src/Controller/WeatherUserConfiguredDisplayController.php
index c8654ea..7b9d28c 100644
--- a/src/Controller/WeatherUserConfiguredDisplayController.php
+++ b/src/Controller/WeatherUserConfiguredDisplayController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\weather\Controller;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,32 +24,32 @@ class WeatherUserConfiguredDisplayController extends ControllerBase {
   /**
    * The weather.helper service.
    *
-   * @var \Drupal\weather\Service\HelperService
+   * @var HelperService
    */
   protected $weatherHelper;
 
   /**
    * The entity.type_manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The controller constructor.
    *
-   * @param \Drupal\weather\Service\HelperService $weather_helper
+   * @param HelperService $weather_helper
    *   The weather.helper service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity.type_manager service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
    */
   public function __construct(HelperService $weather_helper, EntityTypeManagerInterface $entity_type_manager, Renderer $renderer) {
@@ -156,12 +158,12 @@ class WeatherUserConfiguredDisplayController extends ControllerBase {
   /**
    * Checks access for a specific request.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, UserInterface $user) {
diff --git a/src/Form/AddCustomPlaceForm.php b/src/Form/AddCustomPlaceForm.php
index 455cdb4..1a19bc3 100644
--- a/src/Form/AddCustomPlaceForm.php
+++ b/src/Form/AddCustomPlaceForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\weather\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -20,61 +23,61 @@ class AddCustomPlaceForm extends FormBase {
   /**
    * Entity Type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Weather displays storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayStorage;
 
   /**
    * Weather display places storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayPlaceStorage;
 
   /**
    * Weather Data service.
    *
-   * @var \Drupal\weather\Service\DataService
+   * @var DataService
    */
   protected $weatherDataService;
 
   /**
    * Weather helper service.
    *
-   * @var \Drupal\weather\Service\HelperService
+   * @var HelperService
    */
   protected $weatherHelper;
 
   /**
    * Parser service.
    *
-   * @var \Drupal\weather\Service\ParserService
+   * @var ParserService
    */
   protected $weatherParser;
 
   /**
    * Constructs a \Drupal\weather\Form\SettingsForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager storage.
-   * @param \Drupal\weather\Service\DataService $weatherDataService
+   * @param DataService $weatherDataService
    *   Weather data service.
-   * @param \Drupal\weather\Service\HelperService $helperService
+   * @param HelperService $helperService
    *   Weather helper service.
-   * @param \Drupal\weather\Service\ParserService $parserService
+   * @param ParserService $parserService
    *   Weather parser service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Drupal messenegr service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, DataService $weatherDataService, HelperService $helperService, ParserService $parserService, MessengerInterface $messenger) {
     $this->entityTypeManager = $entityTypeManager;
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index d3f1fbd..bc26341 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\weather\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -21,52 +25,52 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Entity Type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Weather displays storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayStorage;
 
   /**
    * Weather display places storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayPlaceStorage;
 
   /**
    * Weather Data service.
    *
-   * @var \Drupal\weather\Service\DataService
+   * @var DataService
    */
   protected $weatherDataService;
 
   /**
    * The Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs a \Drupal\weather\Form\SettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager storage.
-   * @param \Drupal\weather\Service\DataService $weatherDataService
+   * @param DataService $weatherDataService
    *   Weather data service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   Renderer.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entityTypeManager, DataService $weatherDataService, Renderer $renderer) {
     parent::__construct($config_factory);
@@ -129,7 +133,7 @@ class SettingsForm extends ConfigFormBase {
 
     // Additional weather settings.
     $theme = $this->config('system.theme')->get('default');
-    $theme_path = drupal_get_path('theme', $theme);
+    $theme_path = \Drupal::service('extension.list.theme')->getPath($theme);
     $config = $this->config('weather.settings');
 
     $form['weather_image_directory'] = [
diff --git a/src/Form/WeatherDisplayDeleteForm.php b/src/Form/WeatherDisplayDeleteForm.php
index 21d1473..f09177b 100644
--- a/src/Form/WeatherDisplayDeleteForm.php
+++ b/src/Form/WeatherDisplayDeleteForm.php
@@ -22,20 +22,20 @@ class WeatherDisplayDeleteForm extends ContentEntityConfirmFormBase {
   /**
    * Block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * WeatherDisplayDeleteForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface|null $time
+   * @param TimeInterface|null $time
    *   The time service.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, BlockManagerInterface $block_manager) {
diff --git a/src/Form/WeatherDisplayForm.php b/src/Form/WeatherDisplayForm.php
index 19beb64..1aa7418 100644
--- a/src/Form/WeatherDisplayForm.php
+++ b/src/Form/WeatherDisplayForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\weather\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Cache\Cache;
@@ -26,42 +29,42 @@ class WeatherDisplayForm extends ContentEntityForm {
   /**
    * Weather helper service.
    *
-   * @var \Drupal\weather\Service\HelperService
+   * @var HelperService
    */
   protected $weatherHelperService;
 
   /**
    * Weather display storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayStorage;
 
   /**
    * Block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * WeatherDisplayForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\weather\Service\HelperService $weatherHelperService
+   * @param HelperService $weatherHelperService
    *   Weather helper service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface|null $time
+   * @param TimeInterface|null $time
    *   The time service.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityRepositoryInterface $entity_repository, HelperService $weatherHelperService, EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, BlockManagerInterface $block_manager) {
     parent::__construct($entity_repository, $entity_type_bundle_info, $time);
diff --git a/src/Form/WeatherDisplayPlaceForm.php b/src/Form/WeatherDisplayPlaceForm.php
index 1e20aee..cf101e8 100644
--- a/src/Form/WeatherDisplayPlaceForm.php
+++ b/src/Form/WeatherDisplayPlaceForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\weather\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\ContentEntityForm;
@@ -24,24 +27,24 @@ class WeatherDisplayPlaceForm extends ContentEntityForm {
   /**
    * Weather place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherPlaceStorage;
 
   /**
    * WeatherDisplayForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface|null $time
+   * @param TimeInterface|null $time
    *   The time service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
     parent::__construct($entity_repository, $entity_type_bundle_info, $time);
@@ -225,14 +228,14 @@ class WeatherDisplayPlaceForm extends ContentEntityForm {
   /**
    * Finds location settings for display Place form.
    *
-   * @param \Drupal\weather\Entity\WeatherDisplayPlaceInterface|null $weather_display_place
+   * @param WeatherDisplayPlaceInterface|null $weather_display_place
    *   Weather display place entity.
    *
    * @return array
    *   Settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getLocationSettings(WeatherDisplayPlaceInterface $weather_display_place = NULL) {
     // Set defaults.
diff --git a/src/Plugin/Block/WeatherDisplayBlockTrait.php b/src/Plugin/Block/WeatherDisplayBlockTrait.php
index f6776a6..efcb047 100644
--- a/src/Plugin/Block/WeatherDisplayBlockTrait.php
+++ b/src/Plugin/Block/WeatherDisplayBlockTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\weather\Plugin\Block;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\weather\Entity\WeatherDisplayInterface;
 
@@ -13,21 +15,21 @@ trait WeatherDisplayBlockTrait {
   /**
    * Weather display to show in this block.
    *
-   * @var \Drupal\weather\Entity\WeatherDisplayInterface
+   * @var WeatherDisplayInterface
    */
   protected $weatherDisplay;
 
   /**
    * Weather display Place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayPlaceStorage;
 
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
diff --git a/src/Plugin/Block/WeatherSystemDisplayBlock.php b/src/Plugin/Block/WeatherSystemDisplayBlock.php
index 90c2514..2b8860d 100644
--- a/src/Plugin/Block/WeatherSystemDisplayBlock.php
+++ b/src/Plugin/Block/WeatherSystemDisplayBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\weather\Plugin\Block;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -33,13 +35,13 @@ class WeatherSystemDisplayBlock extends BlockBase implements ContainerFactoryPlu
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   Current user.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, AccountProxyInterface $currentUser) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/Block/WeatherUserDisplayBlock.php b/src/Plugin/Block/WeatherUserDisplayBlock.php
index 9636276..e56489f 100644
--- a/src/Plugin/Block/WeatherUserDisplayBlock.php
+++ b/src/Plugin/Block/WeatherUserDisplayBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\weather\Plugin\Block;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -34,17 +36,17 @@ class WeatherUserDisplayBlock extends BlockBase implements ContainerFactoryPlugi
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   Current user.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $routeMatch
+   * @param CurrentRouteMatch $routeMatch
    *   Route Match.
-   * @param \Drupal\weather\Service\HelperService $helperService
+   * @param HelperService $helperService
    *   Helper Service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(
     array $configuration,
diff --git a/src/Plugin/Derivative/WeatherSystemDisplayBlock.php b/src/Plugin/Derivative/WeatherSystemDisplayBlock.php
index 280da39..c9eba12 100644
--- a/src/Plugin/Derivative/WeatherSystemDisplayBlock.php
+++ b/src/Plugin/Derivative/WeatherSystemDisplayBlock.php
@@ -21,14 +21,14 @@ class WeatherSystemDisplayBlock extends DeriverBase implements ContainerDeriverI
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayStorage;
 
   /**
    * Constructs new WeatherSystemDisplayBlock.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $weatherDisplayStorage
+   * @param EntityStorageInterface $weatherDisplayStorage
    *   The weather displays storage.
    */
   public function __construct(EntityStorageInterface $weatherDisplayStorage) {
diff --git a/src/Service/DataService.php b/src/Service/DataService.php
index 93d090f..9497a99 100644
--- a/src/Service/DataService.php
+++ b/src/Service/DataService.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\weather\Service;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -17,32 +20,32 @@ class DataService {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $placeStorage;
 
   /**
    * Batch Builder.
    *
-   * @var \Drupal\Core\Batch\BatchBuilder
+   * @var BatchBuilder
    */
   protected $batchBuilder;
 
   /**
    * DataService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ -100,7 +103,7 @@ class DataService {
       ->execute();
 
     // Read the data file and create Places in system.
-    $file = fopen(drupal_get_path('module', 'weather') . '/files/weather_data.csv', 'r');
+    $file = fopen(\Drupal::service('extension.list.module')->getPath('weather') . '/files/weather_data.csv', 'r');
     $items = [];
     while (($line = fgetcsv($file, 0, '	')) !== FALSE) {
       // Check if the geoid has been modified, if so, skip it.
diff --git a/src/Service/HelperService.php b/src/Service/HelperService.php
index 28ebcc2..9628735 100644
--- a/src/Service/HelperService.php
+++ b/src/Service/HelperService.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\weather\Service;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\weather\Entity\WeatherDisplayInterface;
 
@@ -13,39 +16,39 @@ class HelperService {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Weather display storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayStorage;
 
   /**
    * Weather display place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayPlaceStorage;
 
   /**
    * Weather place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherPlaceStorage;
 
   /**
    * HelperService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
diff --git a/src/Service/ParserService.php b/src/Service/ParserService.php
index 9c8d800..cdb1f69 100644
--- a/src/Service/ParserService.php
+++ b/src/Service/ParserService.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\weather\Service;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -22,84 +26,84 @@ class ParserService {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Weather helper service.
    *
-   * @var \Drupal\weather\Service\HelperService
+   * @var HelperService
    */
   protected $weatherHelper;
 
   /**
    * Http client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
   /**
    * Logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;
 
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Drupal messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Weather forecast storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherForecastInfoStorage;
 
   /**
    * Weather forecast storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherForecastStorage;
 
   /**
    * Weather Places storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherPlaceStorage;
 
   /**
    * ParserService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\weather\Service\HelperService $weatherHelper
+   * @param HelperService $weatherHelper
    *   Weather helper service.
-   * @param \GuzzleHttp\Client $httpClient
+   * @param Client $httpClient
    *   Http client.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   Logger service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Current user object.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Drupal messenegr service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, HelperService $weatherHelper, Client $httpClient, LoggerChannelFactoryInterface $loggerFactory, AccountProxyInterface $current_user, MessengerInterface $messenger) {
     $this->entityTypeManager = $entity_type_manager;
@@ -124,7 +128,7 @@ class ParserService {
    * @return bool
    *   TRUE on success, FALSE on failure.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function downloadForecast(string $geoid = '', string $url = '') {
     // Specify timeout in seconds.
@@ -163,7 +167,7 @@ class ParserService {
    * @return bool
    *   TRUE on success, FALSE on failure.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function parseForecast($xml, $geoid = '') {
     // In case the parsing fails, do not output all error messages.
@@ -504,7 +508,7 @@ class ParserService {
   /**
    * Sets time for next download attempt.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setNextAttempt($meta, $time) {
     // The download did not succeed. Set next download attempt accordingly.
diff --git a/src/Service/ThemeService.php b/src/Service/ThemeService.php
index c25fa2c..30edd46 100644
--- a/src/Service/ThemeService.php
+++ b/src/Service/ThemeService.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\weather\Service;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -20,79 +24,79 @@ class ThemeService {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The weather.helper service.
    *
-   * @var \Drupal\weather\Service\HelperService
+   * @var HelperService
    */
   protected $weatherHelper;
 
   /**
    * Parser service.
    *
-   * @var \Drupal\weather\Service\ParserService
+   * @var ParserService
    */
   protected $weatherParser;
 
   /**
    * The weather.data_service service.
    *
-   * @var \Drupal\weather\Service\DataService
+   * @var DataService
    */
   protected $weatherDataService;
 
   /**
    * Weather module configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $weatherConfig;
 
   /**
    * Theme manager service.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * Date format service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Weather place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherPlaceStorage;
 
   /**
    * ThemeService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\weather\Service\HelperService $weather_helper
+   * @param HelperService $weather_helper
    *   Weather helper service.
-   * @param \Drupal\weather\Service\ParserService $parserService
+   * @param ParserService $parserService
    *   Weather parser service.
-   * @param \Drupal\weather\Service\DataService $weather_data_service
+   * @param DataService $weather_data_service
    *   Weather data service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Configuration factory.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   Theme manager service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   Date formatter service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, HelperService $weather_helper, ParserService $parserService, DataService $weather_data_service, ConfigFactoryInterface $configFactory, ThemeManagerInterface $themeManager, DateFormatterInterface $dateFormatter) {
     $this->entityTypeManager = $entity_type_manager;
@@ -259,7 +263,7 @@ class ThemeService {
     // Construct the filename.
     $image = $custom_path . $symbol . '.png';
     if (!is_readable($image)) {
-      $default_path = drupal_get_path('module', 'weather') . '/images/';
+      $default_path = \Drupal::service('extension.list.module')->getPath('weather') . '/images/';
       $image = $default_path . $symbol . '.png';
     }
     $size = getimagesize($image);
diff --git a/src/WeatherAccessControlHandler.php b/src/WeatherAccessControlHandler.php
index 464b6e3..70cac63 100644
--- a/src/WeatherAccessControlHandler.php
+++ b/src/WeatherAccessControlHandler.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\weather;
 
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultNeutral;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -30,12 +32,12 @@ class WeatherAccessControlHandler extends EntityAccessControlHandler {
   /**
    * For all weather entities we do the same access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   Entity interface.
    *
-   * @return \Drupal\Core\Access\AccessResult|\Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultNeutral
+   * @return AccessResult|AccessResultAllowed|AccessResultNeutral
    *   Access result,
    */
   protected function commonAccessCheck(AccountInterface $account, EntityInterface $entity = NULL) {
diff --git a/tests/src/Functional/ParserTest.php b/tests/src/Functional/ParserTest.php
index 4d8934a..c455c7d 100644
--- a/tests/src/Functional/ParserTest.php
+++ b/tests/src/Functional/ParserTest.php
@@ -348,7 +348,7 @@ class ParserTest extends BrowserTestBase {
     $config = \Drupal::configFactory()->getEditable('weather.settings');
     $time = $config->get('weather_time_for_testing');
     if ($time !== \Drupal::time()->getRequestTime()) {
-      $path = drupal_get_path('module', 'weather') . '/tests/src/Functional/data/' . $geoid . '.xml';
+      $path = \Drupal::service('extension.list.module')->getPath('weather') . '/tests/src/Functional/data/' . $geoid . '.xml';
       if (is_readable($path)) {
         $xml = file_get_contents($path);
       }
diff --git a/tests/src/Functional/PermissionsTest.php b/tests/src/Functional/PermissionsTest.php
index 50602f9..4076c00 100644
--- a/tests/src/Functional/PermissionsTest.php
+++ b/tests/src/Functional/PermissionsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\weather\Functional;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -35,7 +36,7 @@ class PermissionsTest extends BrowserTestBase {
    *
    * This test requires that at least one system wide block is enabled.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \ReflectionException
    */
   public function testPermissions() {
diff --git a/tests/src/Functional/WeatherCommonTestTrait.php b/tests/src/Functional/WeatherCommonTestTrait.php
index 62ef7a7..bdd2421 100644
--- a/tests/src/Functional/WeatherCommonTestTrait.php
+++ b/tests/src/Functional/WeatherCommonTestTrait.php
@@ -17,7 +17,7 @@ trait WeatherCommonTestTrait {
    */
   public function weatherFillWeatherSchema($source = 'geonames_2911298.xml') {
     // Fetch forecast data from xml file.
-    $xml_source = drupal_get_path('module', 'weather') . '/tests/src/Functional/data/' . $source;
+    $xml_source = \Drupal::service('extension.list.module')->getPath('weather') . '/tests/src/Functional/data/' . $source;
     $xml_source_stream_content = stream_get_contents(fopen($xml_source, 'rb'));
     $element_data = new \SimpleXMLElement($xml_source_stream_content);
     // Prepare data for DB compatible format.
diff --git a/weather.info.yml b/weather.info.yml
index f1d0ce7..b5f13cb 100644
--- a/weather.info.yml
+++ b/weather.info.yml
@@ -3,7 +3,6 @@ type: module
 description: Displays current weather and forecasts
 configure: weather.settings
 package: Other
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - block:block
