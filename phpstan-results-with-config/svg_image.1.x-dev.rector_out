modules/contrib/svg_image/modules/svg_image_responsive/src/Plugin/Field/FieldFormatter/SvgResponsiveImageFormatter.php
modules/contrib/svg_image/modules/svg_image_responsive/svg_image_responsive.module
modules/contrib/svg_image/src/Plugin/Field/FieldFormatter/SvgImageFormatter.php
modules/contrib/svg_image/src/Plugin/Field/FieldFormatter/SvgImageUrlFormatter.php
modules/contrib/svg_image/src/Plugin/Field/FieldWidget/SvgImageWidget.php
modules/contrib/svg_image/svg_image.install
modules/contrib/svg_image/svg_image.module

5 files with changes
====================

1) modules/contrib/svg_image/svg_image.module:51

    ---------- begin diff ----------
@@ @@
 /**
  * Provides image file dimensions.
  *
- * @param \Drupal\file\Entity\File $file
+ * @param File $file
  *   SVG file.
  *
  * @return integer[]
@@ @@
 /**
  * Checks if current file is SVG image.
  *
- * @param \Drupal\file\Entity\File $file
+ * @param File $file
  *   File to check.
  *
  * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/svg_image/src/Plugin/Field/FieldWidget/SvgImageWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\svg_image\Plugin\Field\FieldWidget;

+use Drupal\Core\Entity\EntityRepository;
+use Drupal\Core\Render\Renderer;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Image\ImageFactory;
+use Drupal\image\ImageStyleStorage;
+use Drupal\image\ImageStyleInterface;
+use Drupal\image\ImageStyleStorageInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Component\Utility\NestedArray;
@@ @@
   /**
    * Container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   private $container;

@@ @@
   /**
    * Entity repository service instance.
    *
-   * @var \Drupal\Core\Entity\EntityRepository
+   * @var EntityRepository
    */
   protected $entityRepository;

@@ @@
   /**
    * Renderer instance.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * EntityType manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Image style storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $imageStyleStorage;

@@ @@
   /**
    * The image factory service.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
     $styleId = $this->getSetting('preview_image_style');

     if ($styleId) {
-      /** @var \Drupal\image\ImageStyleStorage $imageStyleStorage */
-
+      /** @var ImageStyleStorage $imageStyleStorage */
       $style = $this->imageStyleStorage->load($styleId);
       if ($style) {
         // If this widget uses a valid image style to display the preview of
@@ @@
     $changed = parent::onDependencyRemoval($dependencies);
     $styleId = $this->getSetting('preview_image_style');

-    /** @var \Drupal\image\ImageStyleInterface $style */
+    /** @var ImageStyleInterface $style */
     if ($styleId) {
       $style = $this->imageStyleStorage->load($styleId);
       if ($style) {
         if (!empty($dependencies[$style->getConfigDependencyKey()][$style->getConfigDependencyName()])) {
-          /** @var \Drupal\image\ImageStyleStorageInterface $storage */
+          /** @var ImageStyleStorageInterface $storage */
           $storage = $this->entityTypeManager->getStorage($style->getEntityTypeId());

           $replacementId = $storage->getReplacementId($styleId);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/svg_image/src/Plugin/Field/FieldFormatter/SvgImageUrlFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\svg_image\Plugin\Field\FieldFormatter;

+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
+use Drupal\image\ImageStyleInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\image\Plugin\Field\FieldFormatter\ImageUrlFormatter;
@@ @@
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];

-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items */
+    /** @var EntityReferenceFieldItemListInterface $items */
     if (empty($images = $this->getEntitiesToView($items, $langcode))) {
       // Early opt-out if the field is empty.
       return $elements;
     }

-    /** @var \Drupal\image\ImageStyleInterface $image_style */
+    /** @var ImageStyleInterface $image_style */
     $image_style = $this->imageStyleStorage->load($this->getSetting('image_style'));
-    /** @var \Drupal\file\FileInterface[] $images */
+    /** @var FileInterface[] $images */
     foreach ($images as $delta => $image) {
       $image_uri = $image->getFileUri();
       $isSvg = svg_image_is_file_svg($image);
-      $url = ($image_style && !$isSvg) ? $image_style->buildUrl($image_uri) : file_create_url($image_uri);
-      $url = file_url_transform_relative($url);
+      $url = ($image_style && !$isSvg) ? $image_style->buildUrl($image_uri) : \Drupal::service('file_url_generator')->generateAbsoluteString($image_uri);
+      $url = \Drupal::service('file_url_generator')->transformRelative($url);

       // Add cacheability metadata from the image and image style.
       $cacheability = CacheableMetadata::createFromObject($image);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/svg_image/src/Plugin/Field/FieldFormatter/SvgImageFormatter.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * File logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
-    /** @var \Drupal\file\Entity\File[] $files */
+    /** @var File[] $files */
     $files = $this->getEntitiesToView($items, $langcode);

     // Early opt-out if the field is empty.
@@ @@
       $cacheContexts = [];
       if (isset($linkFile)) {
         $imageUri = $file->getFileUri();
-        $url = Url::fromUri(file_create_url($imageUri));
+        $url = \Drupal::service('file_url_generator')->generate($imageUri);
         $cacheContexts[] = 'url.site';
       }
       $cacheTags = Cache::mergeTags($cacheTags, $file->getCacheTags());
@@ @@
   /**
    * Provides content of the file.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   File to handle.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/svg_image/modules/svg_image_responsive/src/Plugin/Field/FieldFormatter/SvgResponsiveImageFormatter.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * File logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   private $logger;

@@ @@
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
-    /** @var \Drupal\file\Entity\File[] $files */
+    /** @var File[] $files */
     $files = $this->getEntitiesToView($items, $langcode);

     // Early opt-out if the field is empty.
@@ @@
       $cacheContexts = [];
       if (isset($linkFile)) {
         $imageUri = $file->getFileUri();
-        $url = Url::fromUri(file_create_url($imageUri));
+        $url = \Drupal::service('file_url_generator')->generate($imageUri);
         $cacheContexts[] = 'url.site';
       }
       $cacheTags = Cache::mergeTags($cacheTags, $file->getCacheTags());
@@ @@

       // Link the <picture> element to the original file.
       if (isset($linkFile)) {
-        $url = file_url_transform_relative(file_create_url($file->getFileUri()));
+        $url = \Drupal::service('file_url_generator')->generateString($file->getFileUri());
       }
       // Extract field item attributes for the theme function, and unset them
       // from the $item so that the field template does not re-render them.
@@ @@
   /**
    * Provides content of the file.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   File to handle.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

