modules/contrib/config_selector/config_selector.module
modules/contrib/config_selector/src/Access/FeatureAccessControlHandler.php
modules/contrib/config_selector/src/ActiveEntity.php
modules/contrib/config_selector/src/ConfigSelector.php
modules/contrib/config_selector/src/ConfigSelectorServiceProvider.php
modules/contrib/config_selector/src/ConfigSelectorSortTrait.php
modules/contrib/config_selector/src/Controller/Switcher.php
modules/contrib/config_selector/src/DecoratingConfigInstaller.php
modules/contrib/config_selector/src/Entity/Feature.php
modules/contrib/config_selector/src/Entity/FeatureInterface.php
modules/contrib/config_selector/src/FeatureListBuilder.php
modules/contrib/config_selector/src/Form/FeatureManageForm.php
modules/contrib/config_selector/src/Plugin/Derivative/FeatureListMenuLink.php
modules/contrib/config_selector/src/TestLogger.php
modules/contrib/config_selector/tests/modules/config_selector_ui_test/config_selector_ui_test.install
modules/contrib/config_selector/tests/src/Functional/ConfigSelectorProfileTest.php
modules/contrib/config_selector/tests/src/Functional/ConfigSelectorUiTest.php
modules/contrib/config_selector/tests/src/Kernel/ActiveEntityTest.php
modules/contrib/config_selector/tests/src/Kernel/ConfigSelectorTest.php
modules/contrib/config_selector/tests/src/Unit/ConfigSelectorTest.php

17 files with changes
=====================

1) modules/contrib/config_selector/tests/src/Unit/ConfigSelectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_selector\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\config_selector\ConfigSelector;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
@@ @@
  */
 class ConfigSelectorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::getConfigEntityLink
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/config_selector/tests/src/Kernel/ConfigSelectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_selector\Kernel;

+use Drupal\Core\Extension\ModuleInstallerInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\config_selector\TestLogger;
@@ @@
    * Tests \Drupal\config_selector\ConfigSelector().
    */
   public function testConfigSelector() {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = $this->container->get('module_installer');

     // Install a module that has configuration with config_selector third party
     // settings for the ConfigSelector to process..
     $module_installer->install(['config_selector_test_one']);
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+    /** @var ConfigEntityInterface[] $configs */
     $configs = \Drupal::entityTypeManager()->getStorage('config_test')->loadMultiple();
     $this->assertTrue($configs['feature_a_one']->status());
     $this->assertArrayNotHasKey('feature_a_two', $configs);
@@ @@
    * Checks indirect module uninstall dependencies.
    */
   public function testConfigSelectorIndirectDependency() {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = $this->container->get('module_installer');

     // Install two modules at start, 3 configurations should be imported, where
@@ @@
       'config_selector_test_one',
       'config_selector_test_depends_on_test_two',
     ]);
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+    /** @var ConfigEntityInterface[] $configs */
     $configs = \Drupal::entityTypeManager()->getStorage('config_test')->loadMultiple();

     $this->assertFalse($configs['feature_a_one']->status());
@@ @@
    * versions.
    */
   public function testConfigSelectorMultipleFeatures() {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = $this->container->get('module_installer');

     $module_installer->install(['config_selector_test_provides_multiple']);
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+    /** @var ConfigEntityInterface[] $configs */
     $configs = \Drupal::entityTypeManager()->getStorage('config_test')->loadMultiple();

     $this->assertTrue($configs['feature_a_two']->status());
@@ @@
    * Tests installing multiple modules at the same time.
    */
   public function testConfigSelectorMultipleModuleInstall() {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = $this->container->get('module_installer');

     // Install a module that has configuration with config_selector third party
     // settings for the ConfigSelector to process..
     $module_installer->install(['config_selector_test_one']);
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+    /** @var ConfigEntityInterface[] $configs */
     $configs = \Drupal::entityTypeManager()->getStorage('config_test')->loadMultiple();
     $this->assertTrue($configs['feature_a_one']->status());
     $this->assertArrayNotHasKey('feature_a_two', $configs);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/config_selector/tests/src/Kernel/ActiveEntityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_selector\Kernel;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\config_selector\ActiveEntity;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The config_test entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $testEntityStorage;

@@ @@
    * @covers ::get
    */
   public function testGet() {
-    /** @var \Drupal\config_selector\ActiveEntity $service */
+    /** @var ActiveEntity $service */
     $service = $this->container->get('config_selector.active');
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->testEntityStorage->create(['id' => 'test_1']);
     $entity->setThirdPartySetting('config_selector', 'feature', 'test');
     $entity->save();
@@ @@
    * @covers ::getFromEntity
    */
   public function testGetFromEntity() {
-    /** @var \Drupal\config_selector\ActiveEntity $service */
+    /** @var ActiveEntity $service */
     $service = $this->container->get('config_selector.active');
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->testEntityStorage->create(['id' => 'test_1']);
     $entity->setThirdPartySetting('config_selector', 'feature', 'test');
     $entity->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/config_selector/tests/src/Functional/ConfigSelectorUiTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_selector\Functional;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\config_selector\Entity\Feature;
 use Drupal\Tests\BrowserTestBase;

@@ @@
     $this->assertFalse($view_storage->load('feature_test_3')->status());

     // Add another type of configuration entity to the feature.
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+    /** @var ConfigEntityInterface[] $configs */
     $configs = \Drupal::entityTypeManager()->getStorage('config_test')->loadMultiple();
     $configs['feature_a_one']
       ->setThirdPartySetting('config_selector', 'feature', 'feature_test')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/config_selector/tests/src/Functional/ConfigSelectorProfileTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_selector\Functional;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
    * Tests the profile supplied configuration can be selected.
    */
   public function testProfileInstall() {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+    /** @var ConfigEntityInterface[] $configs */
     $configs = \Drupal::entityTypeManager()->getStorage('config_test')->loadMultiple();

     $this->assertTrue($configs['feature_a_five']->status());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/config_selector/tests/modules/config_selector_ui_test/config_selector_ui_test.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\views\ViewEntityInterface;
 /**
  * @file
  * The Configuration Selector UI Test module install methods.
@@ @@
  * @param array $view_data
  *   The complete data for the view.
  *
- * @return \Drupal\views\ViewEntityInterface
+ * @return ViewEntityInterface
  *   The new view entity.
  */
 function _config_selector_ui_test_create_new_view($new_id, $feature, $description, $priority, $status, array $view_data) {
@@ @@
   $view_data['id'] = $new_id;
   // Make life simple for testing and ensure the views are removed on uninstall.
   $view_data['dependencies']['enforced']['module'] = ['config_selector_ui_test'];
-  /** @var \Drupal\views\ViewEntityInterface $view */
+  /** @var ViewEntityInterface $view */
   $view = $view_storage->createFromStorageRecord($view_data);
   $view->setStatus($status);
   $view->setThirdPartySetting('config_selector', 'feature', $feature);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


7) modules/contrib/config_selector/src/TestLogger.php:137

    ---------- begin diff ----------
@@ @@
   /**
    * Registers the test logger to the container.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The ContainerBuilder to register the test logger to.
    */
   public static function register(ContainerBuilder $container) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/config_selector/src/Plugin/Derivative/FeatureListMenuLink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_selector\Plugin\Derivative;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * FeatureListAccessCheck constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Allows access to Config Selector UI if there are entities.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/config_selector/src/Form/FeatureManageForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_selector\Form;

+use Drupal\config_selector\Entity\FeatureInterface;
 use Drupal\config_selector\ConfigSelectorSortTrait;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityForm;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\config_selector\Entity\FeatureInterface
+   * @var FeatureInterface
    */
   protected $entity;

@@ @@
         ],
       ];

-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $config_entity */
+      /** @var ConfigEntityInterface $config_entity */
       // Sort by reverse priority so that the highest priority is listed first.
       $config_entities = array_reverse($this->sortConfigEntities($config_entities), TRUE);
       foreach ($config_entities as $config_entity) {
@@ @@
    * getDescription() method that will be used. Otherwise descriptions can be
    * add to the config_selector third party settings.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The config entity to get the description for.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The config entity description.
    */
   protected function getDescription(ConfigEntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/config_selector/src/FeatureListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_selector;

+use Drupal\config_selector\Entity\FeatureInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\config_selector\Entity\FeatureInterface $entity */
+    /** @var FeatureInterface $entity */
     $row['name'] = $entity->label();
     $row['description'] = $entity->getDescription();
     return $row + parent::buildRow($entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/config_selector/src/Entity/FeatureInterface.php:30

    ---------- begin diff ----------
@@ @@
    * @param string $entity_type_id
    *   The entity type of the returned configuration entities.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface[]
+   * @return ConfigEntityInterface[]
    *   The feature's configuration entities of the specified type. Keyed by
    *   their ID.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/config_selector/src/DecoratingConfigInstaller.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The config.installer service.
    *
-   * @var \Drupal\Core\Config\ConfigInstallerInterface
+   * @var ConfigInstallerInterface
    */
   protected $decoratedService;

@@ @@
   /**
    * DecoratingConfigInstaller constructor.
    *
-   * @param \Drupal\Core\Config\ConfigInstallerInterface $config_installer
+   * @param ConfigInstallerInterface $config_installer
    *   The config.installer service to decorate.
-   * @param \Drupal\config_selector\ConfigSelector $config_selector
+   * @param ConfigSelector $config_selector
    *   The config_selector service.
    */
   public function __construct(ConfigInstallerInterface $config_installer, ConfigSelector $config_selector) {
@@ @@
   /**
    * Gets the configuration storage that provides the default configuration.
    *
-   * @return \Drupal\Core\Config\StorageInterface|null
+   * @return StorageInterface|null
    *   The configuration storage that provides the default configuration.
    *   Returns null if the source storage has not been set.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/config_selector/src/Controller/Switcher.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_selector\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\config_selector\ConfigSelector;
 use Drupal\config_selector\ConfigSelectorSortTrait;
 use Drupal\config_selector\Entity\FeatureInterface;
@@ @@
   /**
    * Selects the supplied configuration entity.
    *
-   * @param \Drupal\config_selector\Entity\FeatureInterface $config_selector_feature
+   * @param FeatureInterface $config_selector_feature
    *   The Configuration selector feature.
    * @param string $config_entity_type
    *   The entity type of the configuration entity we are switching to.
@@ @@
    * @param string $config_entity_id
    *   The ID of the configuration entity we are switching to.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   This always redirects to the feature's manage route.
    */
   public function select(FeatureInterface $config_selector_feature, $config_entity_type, $config_entity_id) {
     $redirect = $this->redirect('entity.config_selector_feature.manage', ['config_selector_feature' => $config_selector_feature->id()]);
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $config_entity */
+    /** @var ConfigEntityInterface $config_entity */
     $config_entity = $this->getConfigEntity($config_selector_feature, $config_entity_type, $config_entity_id);
     if (!$config_entity) {
       return $redirect;
@@ @@
   /**
    * Gets a valid configuration entity to work with.
    *
-   * @param \Drupal\config_selector\Entity\FeatureInterface $config_selector_feature
+   * @param FeatureInterface $config_selector_feature
    *   The Configuration selector feature.
    * @param string $config_entity_type
    *   The entity type of the configuration entity we are switching to.
@@ @@
    * @param string $config_entity_id
    *   The ID of the configuration entity we are switching to.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface|false
+   * @return ConfigEntityInterface|false
    *   The configuration entity we are switching to, or FALSE if invalid.
    */
   protected function getConfigEntity(FeatureInterface $config_selector_feature, $config_entity_type, $config_entity_id) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $config_entity */
+    /** @var ConfigEntityInterface $config_entity */
     $config_entity = $this->entityTypeManager()->getStorage($config_entity_type)->load($config_entity_id);
     if (!$config_entity) {
       $this->messenger()->addWarning($this->t('Configuration entity of type %type and ID $id does not exist.', ['%type' => $config_entity_type, '%id' => $config_entity_id]));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/config_selector/src/ConfigSelectorSortTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_selector;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 /**
  * Provides a sort function for sorting config entities for config_selector.
  */
@@ @@
   /**
    * Sorts an array of configuration entities by priority then config name.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs
+   * @param ConfigEntityInterface[] $configs
    *   Array of configuration entities to sort.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface[]
+   * @return ConfigEntityInterface[]
    *   The sorted array of configuration entities.
    */
   protected function sortConfigEntities(array $configs) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/config_selector/src/ConfigSelectorServiceProvider.php:17

    ---------- begin diff ----------
@@ @@
    * This service decorates the config.installer so the optional profile
    * configuration can be selected during installation.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The container builder.
    */
   public function register(ContainerBuilder $container) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/config_selector/src/ConfigSelector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_selector;

+use Drupal\Core\GeneratedUrl;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The config manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * ConfigSelector constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The config manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConfigManagerInterface $config_manager, EntityTypeManagerInterface $entity_type_manager, LoggerInterface $logger, StateInterface $state, MessengerInterface $messenger) {
@@ @@
         ->getQuery()
         ->condition('third_party_settings.config_selector.feature', $feature)
         ->execute();
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+      /** @var ConfigEntityInterface[] $configs */
       $configs = $entity_storage->loadMultiple($matching_config);
       $this->sortConfigEntities($configs);

@@ @@
     // Build a list of feature names of the configuration that's been imported.
     $features = [];
     foreach ($new_configuration_list as $config_name) {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $config_entity */
+      /** @var ConfigEntityInterface $config_entity */
       $config_entity = $this->configManager->loadConfigEntityByName($config_name);
       if (!$config_entity) {
         // Simple configuration is ignored.
@@ @@
         ->condition('status', FALSE, '<>')
         ->execute();

-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+      /** @var ConfigEntityInterface[] $configs */
       $configs = $entity_storage->loadMultiple($matching_config);
       $configs = $this->sortConfigEntities($configs);

@@ @@
   /**
    * Generates a link for a configuration entity if possible.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The configuration entity to generate a link for.
    *
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    *   The best URL to link to the entity with. Edit links are preferred to
    *   canonical links. If no link is possible an empty string is returned.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/config_selector/src/ActiveEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_selector;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * ActiveEntity constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * @param string $feature
    *   The config selector feature to get the ID for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The active entity for the provided entity type and feature. NULL is there
    *   is no corresponding entity.
    */
@@ @@
   /**
    * Gets the active entity from using the details from an entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity to get the active entity for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The active entity for the provided entity.
    */
   public function getFromEntity(ConfigEntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 17 files have been changed by Rector                                      

