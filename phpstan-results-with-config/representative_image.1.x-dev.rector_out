modules/contrib/representative_image/representative_image.module
modules/contrib/representative_image/src/Exception/RepresentativeImageFieldNotDefinedException.php
modules/contrib/representative_image/src/Plugin/Field/FieldFormatter/RepresentativeImageFormatter.php
modules/contrib/representative_image/src/Plugin/Field/FieldType/RepresentativeImageItem.php
modules/contrib/representative_image/src/Plugin/Field/FieldWidget/RepresentativeImageWidget.php
modules/contrib/representative_image/src/Plugin/migrate/source/FieldConfig.php
modules/contrib/representative_image/src/Plugin/migrate/source/FieldStorageConfig.php
modules/contrib/representative_image/src/RepresentativeImagePicker.php
modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageEntitiesTest.php
modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageTestBase.php
modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageTokenTest.php
modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageViewsTest.php

8 files with changes
====================

1) modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageViewsTest.php:28

    ---------- begin diff ----------
@@ @@
     $edit = [
       'settings[representative_image_field_name]' => 'field_image3',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');

     // Create image files to use for testing.
     $image1 = $this->randomFile('image');
@@ @@
     $edit = [
       'settings[representative_image_field_name]' => 'field_image2',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.field_representative_image');
+    $this->submitForm($edit, 'Save settings');
     // 2. Set the second image field of Sample content type 2 as representative.
     $edit = [
       'settings[representative_image_field_name]' => 'field_image4',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article2/fields/node.article2.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article2/fields/node.article2.field_representative_image');
+    $this->submitForm($edit, 'Save settings');
     // @todo Check why clearing caches is needed in order to find
     //   field_representative_image in the node.
     drupal_flush_all_caches();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageTokenTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\representative_image\FunctionalJavascript;

+use Drupal\Core\Utility\Token;
 /**
  * Test the token integration of representative images.
  *
@@ @@
    * expected values.
    */
   public function testTokenIntegration() {
-    /** @var \Drupal\Core\Utility\Token $token */
+    /** @var Token $token */
     $token = \Drupal::token();

     $image1 = $this->randomFile('image');
@@ @@
     $edit = [
       'settings[representative_image_field_name]' => 'field_image1',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.field_representative_image');
+    $this->submitForm($edit, 'Save settings');

     // Check that the first image is shown in a processed token.
     $node = $this->nodeStorage->load(1);
@@ @@
     $edit = [
       'settings[representative_image_field_name]' => 'field_image2',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.field_representative_image');
+    $this->submitForm($edit, 'Save settings');
     // @todo Need to do this or
     //   RepresentativeImagePicker::getRepresentativeImageField() will return
     //   ''.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\representative_image\FunctionalJavascript;

+use Drupal\Core\File\FileSystem;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\representative_image\RepresentativeImagePicker;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\FunctionalJavascriptTests\DrupalSelenium2Driver;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\image\Kernel\ImageFieldCreationTrait;
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * The node storage service.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;

@@ @@
   /**
    * The representative image picker service.
    *
-   * @var \Drupal\representative_image\RepresentativeImagePicker
+   * @var RepresentativeImagePicker
    */
   protected $representativeImagePicker;

@@ @@
   /**
    * The admin user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->fileSystem = \Drupal::service('file_system');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageEntitiesTest.php:33

    ---------- begin diff ----------
@@ @@
     $edit = [
       'settings[representative_image_field_name]' => 'field_image1',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.field_representative_image');
+    $this->submitForm($edit, 'Save settings');

     // Create a node with an image in field_image1. Check that it is shown.
     $this->drupalGet('node/add/article');
@@ @@
     $edit = [
       'settings[representative_image_behavior]' => 'first',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.field_representative_image');
+    $this->submitForm($edit, 'Save settings');

     // Create a node with an image in the second image field. Check that it is
     // shown.
@@ @@
     $edit = [
       'settings[representative_image_behavior]' => 'first_or_default',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.field_representative_image');
+    $this->submitForm($edit, 'Save settings');

     // Create a node without images.
     $edit = [
       'title[0][value]' => $this->randomMachineName(),
     ];
-    $this->drupalPostForm('node/add/article', $edit, 'Save');
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, 'Save');
     $assert_session->responseContains($this->defaultImageFile->name);
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/representative_image/src/RepresentativeImagePicker.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Constructs a RepresentativeImagePicker object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   Entity repository.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository) {
@@ @@
   /**
    * Gets the representative image field item from a representative image field.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   A field item list containing a representative image field.
    *
    * @throws \LogicException
    *   Thrown when $items does not contain a representative image field.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface|null
+   * @return FieldItemListInterface|null
    *   Returns the representative image field items on the entity for the
    *   given representative_image field, or NULL if one can't be found.
    */
@@ @@
   /**
    * Returns the first image field containing an image in the entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity being viewed.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface|null
+   * @return FieldItemListInterface|null
    *   The field item or NULL if not found.
    */
   protected function getFirstAvailableImageField(FieldableEntityInterface $entity) {
@@ @@
   /**
    * Returns the default field image.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The item list.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface|null
+   * @return FieldItemListInterface|null
    *   The field item list or NULL if not found.
    */
   protected function getDefaultImage(FieldItemListInterface $items) {
@@ @@
   /**
    * Find a representative image field by following entity references.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $list
+   * @param FieldItemListInterface $list
    *   Field list.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface|null
+   * @return FieldItemListInterface|null
    *   Returns the representative image field items on the entity by
    *   traversing the given field list if it's an entity reference. If the
    *   field is not an entity reference it's simply returned.
@@ @@
     }

     if ($list instanceof EntityReferenceFieldItemListInterface) {
-      /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+      /** @var FieldableEntityInterface $entity */
       foreach ($list->referencedEntities() as $entity) {
         if ($this->hasRepresentativeImageField($entity)) {
           $representative_field = $this->getRepresentativeImageField($entity);
@@ @@
   /**
    * Return if the field is not an image field and is not empty.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field_item
+   * @param FieldItemListInterface $field_item
    *   The field item to check.
    *
    * @return bool
@@ @@
   /**
    * Return if the entity has a representative image field defined.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to find the representative image field on.
    *
    * @return bool
@@ @@
   /**
    * Finds the representative image field in an entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   An entity instance.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface
+   * @return FieldItemListInterface
    *   The representative image field.
    */
   public function getRepresentativeImageField(FieldableEntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/representative_image/src/Plugin/Field/FieldType/RepresentativeImageItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\representative_image\Plugin\Field\FieldType;

+use Drupal\representative_image\RepresentativeImagePicker;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\image\Plugin\Field\FieldType\ImageItem;

@@ @@
   public function fieldSettingsForm(array $form, FormStateInterface $form_state) {
     $settings = $this->getSettings();
     $entity = $form['#entity'];
-    /** @var \Drupal\representative_image\RepresentativeImagePicker $representative_image_picker */
+    /** @var RepresentativeImagePicker $representative_image_picker */
     $representative_image_picker = \Drupal::service('representative_image.picker');

     $options = $representative_image_picker->getSupportedFields($entity->getEntityTypeId(), $entity->bundle());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/representative_image/src/Plugin/Field/FieldFormatter/RepresentativeImageFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\representative_image\Plugin\Field\FieldFormatter;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The representative image picker.
    *
-   * @var \Drupal\representative_image\RepresentativeImagePicker
+   * @var RepresentativeImagePicker
    */
   protected $representativeImagePicker;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $image_style_storage
+   * @param EntityStorageInterface $image_style_storage
    *   The image style storage.
-   * @param \Drupal\representative_image\RepresentativeImagePicker $representative_image_picker
+   * @param RepresentativeImagePicker $representative_image_picker
    *   The representative image picker.
    */
   public function __construct(string $plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, string $label, string $view_mode, array $third_party_settings, AccountInterface $current_user, EntityStorageInterface $image_style_storage, RepresentativeImagePicker $representative_image_picker) {
@@ @@
         $element['#url'] = $items->getEntity()->toUrl()->toString();
       }
       elseif ($settings['image_link'] == 'file') {
-        /** @var \Drupal\Core\Entity\EntityInterface $image_entity */
+        /** @var EntityInterface $image_entity */
         $image_entity = $image_items->entity;
         $element['#url'] = $image_entity->toUrl()->toString();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/representative_image/representative_image.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\Entity\File;
 /**
  * @file
  * Primary module hooks for Representative Image module.
@@ @@
             if (empty($field_output[0]['#item'])) {
               break;
             }
-            /** @var \Drupal\file\Entity\File $file_entity */
+            /** @var File $file_entity */
             $file_entity = $field_output[0]['#item']->entity;
             $replacements[$original] = $file_entity->createFileUrl(FALSE);
             break;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

