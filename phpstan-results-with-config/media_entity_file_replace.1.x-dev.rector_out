modules/contrib/media_entity_file_replace/media_entity_file_replace.module
modules/contrib/media_entity_file_replace/tests/src/Functional/MediaEntityFileReplaceTest.php

2 files with changes
====================

1) modules/contrib/media_entity_file_replace/tests/src/Functional/MediaEntityFileReplaceTest.php:131

    ---------- begin diff ----------
@@ @@
     // the contents of the file have.
     $updatedDocument = $this->loadMediaEntityByName('Foobar');
     $updatedFile = $this->loadFileEntity($updatedDocument->getSource()->getSourceFieldValue($updatedDocument));
-    $this->assertEqual($updatedFile->id(), $originalFile->id());
-    $this->assertEqual($updatedFile->getFileUri(), $originalFile->getFileUri());
-    $this->assertEqual($updatedFile->getFilename(), $originalFile->getFilename());
-    $this->assertNotEqual($updatedFile->getSize(), $originalFile->getSize());
-    $this->assertEqual(file_get_contents($updatedFile->getFileUri()), 'new');
+    $this->assertEquals($updatedFile->id(), $originalFile->id());
+    $this->assertEquals($updatedFile->getFileUri(), $originalFile->getFileUri());
+    $this->assertEquals($updatedFile->getFilename(), $originalFile->getFilename());
+    $this->assertNotEquals($updatedFile->getSize(), $originalFile->getSize());
+    $this->assertEquals(file_get_contents($updatedFile->getFileUri()), 'new');

     // Now upload another replacement document, but this time don't overwrite
     // the original.
@@ @@
     // previous one.
     $updatedDocument = $this->loadMediaEntityByName('Foobar');
     $updatedFile = $this->loadFileEntity($updatedDocument->getSource()->getSourceFieldValue($updatedDocument));
-    $this->assertNotEqual($updatedFile->id(), $originalFile->id());
-    $this->assertNotEqual($updatedFile->getFileUri(), $originalFile->getFileUri());
-    $this->assertNotEqual($updatedFile->getFilename(), $originalFile->getFilename());
-    $this->assertNotEqual($updatedFile->getSize(), $originalFile->getSize());
-    $this->assertNotEqual(file_get_contents($updatedFile->getFileUri()), file_get_contents($originalFile->getFileUri()));
-    $this->assertEqual(file_get_contents($updatedFile->getFileUri()), 'foo-new');
+    $this->assertNotEquals($updatedFile->id(), $originalFile->id());
+    $this->assertNotEquals($updatedFile->getFileUri(), $originalFile->getFileUri());
+    $this->assertNotEquals($updatedFile->getFilename(), $originalFile->getFilename());
+    $this->assertNotEquals($updatedFile->getSize(), $originalFile->getSize());
+    $this->assertNotEquals(file_get_contents($updatedFile->getFileUri()), file_get_contents($originalFile->getFileUri()));
+    $this->assertEquals(file_get_contents($updatedFile->getFileUri()), 'foo-new');
     $this->assertFalse($updatedFile->isTemporary());

     // The old file entity should still exist, and should not be marked as
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/media_entity_file_replace/media_entity_file_replace.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\media\MediaTypeInterface;
+use Drupal\media\Entity\MediaType;
+use Drupal\file\Plugin\Field\FieldType\FileItem;
+use Drupal\media\Entity\Media;
+use Drupal\Core\File\FileSystem;
 /**
  * @file
  * Media Entity File Replace module file.
@@ @@
       ->loadMultiple();

     foreach ($mediaTypes as $mediaType) {
-      /** @var \Drupal\media\MediaTypeInterface $mediaType */
+      /** @var MediaTypeInterface $mediaType */
       // We only care about media types that use a file field as a source.
       if ($mediaType->getSource() instanceof File) {
         $extra['media'][$mediaType->id()]['form']['replace_file'] = [
@@ @@
   // is nothing for us to do.
   if (!$media->isNew()) {
     // Only run for media entity types that use a file based source field.
-    /** @var \Drupal\media\Entity\MediaType $mediaType */
+    /** @var MediaType $mediaType */
     $mediaType = \Drupal::entityTypeManager()->getStorage('media_type')->load($media->bundle());
     if (!$mediaType->getSource() instanceof File) {
       return;
@@ @@
     // Make sure we have a file field item and that the file entity exists.
     // It's possible the file field item still exists (the reference to it)
     // but that the file entity was deleted.
-    /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $fileFieldItem */
+    /** @var FileItem $fileFieldItem */
     $fileFieldItem = $media->get($sourceFieldName)->first();
     if (!$fileFieldItem || !$fileFieldItem->entity) {
       return;
@@ @@
     return;
   }

-  /** @var \Drupal\media\Entity\Media $media */
+  /** @var Media $media */
   $media = $formState->getFormObject()->getEntity();
   $sourceFieldName = $form['replace_file']['replacement_file']['#source_field_name'];

-  /** @var \Drupal\Core\File\FileSystem $fileSystem */
+  /** @var FileSystem $fileSystem */
   $fileSystem = \Drupal::service('file_system');

   // Determine where to place the replacement file that a user selected.
@@ @@
     return;
   }

-  /** @var \Drupal\media\Entity\Media $media */
+  /** @var Media $media */
   $media = $formState->getFormObject()->getEntity();

   if ($formState->getValue('keep_original_filename')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 2 files have been changed by Rector                                       

