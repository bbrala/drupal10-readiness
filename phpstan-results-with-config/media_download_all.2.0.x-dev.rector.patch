diff --git a/media_download_all.info.yml b/media_download_all.info.yml
index 56b8f56..b2f4b72 100644
--- a/media_download_all.info.yml
+++ b/media_download_all.info.yml
@@ -1,8 +1,7 @@
 name: Media Download All
 type: module
 description: This module will provide field formatter and block plugin for downloading all media files associated with an entity.
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: Media
 dependencies:
   - drupal:media
diff --git a/media_download_all.module b/media_download_all.module
index 365e702..7648e7c 100644
--- a/media_download_all.module
+++ b/media_download_all.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Archiver\ArchiverException;
 /**
  * @file
  * This is the Media Download All module.
@@ -27,7 +28,7 @@ use Drupal\media_download_all\Plugin\Archiver\Zip;
  * @param array $context
  *   The context.
  *
- * @throws \Drupal\Core\Archiver\ArchiverException
+ * @throws ArchiverException
  */
 function media_download_all_operation($file_path, $entity_type, $entity_id, $field_name, $fid, $file_name, array &$context) {
   $file_zip = new Zip($file_path, TRUE);
diff --git a/src/Cache/MdaCacheTagsInvalidator.php b/src/Cache/MdaCacheTagsInvalidator.php
index 999c4f3..1963dc4 100644
--- a/src/Cache/MdaCacheTagsInvalidator.php
+++ b/src/Cache/MdaCacheTagsInvalidator.php
@@ -14,23 +14,23 @@ class MdaCacheTagsInvalidator implements CacheTagsInvalidatorInterface {
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * MdaCacheTagsInvalidator constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(CacheBackendInterface $cache, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Controller/DownloadController.php b/src/Controller/DownloadController.php
index 5129b92..ee8887e 100644
--- a/src/Controller/DownloadController.php
+++ b/src/Controller/DownloadController.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\media_download_all\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
+use Symfony\Component\HttpFoundation\Response;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Archiver\ArchiverException;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ -22,32 +28,32 @@ class DownloadController extends ControllerBase {
   /**
    * Entity Field Manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * File system.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;
 
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Constructs a new DownloadController object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\File\FileSystem $file_system
+   * @param FileSystem $file_system
    *   The file system.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, FileSystem $file_system, RequestStack $request_stack) {
@@ -59,8 +65,8 @@ class DownloadController extends ControllerBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
+   * @throws ServiceNotFoundException
+   * @throws ServiceCircularReferenceException
    */
   public static function create(ContainerInterface $container) {
     return new static(
@@ -80,12 +86,12 @@ class DownloadController extends ControllerBase {
    * @param string $field_name
    *   The field name.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Return the file.
    *
    * @throws \InvalidArgumentException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Core\Archiver\ArchiverException
+   * @throws InvalidPluginDefinitionException
+   * @throws ArchiverException
    */
   public function download($entity_type, $entity_id, $field_name) {
     // Cache ID to store files for this entity.
@@ -136,7 +142,7 @@ class DownloadController extends ControllerBase {
    * @param string $field_name
    *   The field name.
    *
-   * @return \Drupal\Core\Batch\BatchBuilder
+   * @return BatchBuilder
    *   The batch builder.
    */
   private function getBatch(array $files, $file_path, $entity_type, $entity_id, $field_name) {
@@ -173,7 +179,7 @@ class DownloadController extends ControllerBase {
    * @return array
    *   The file IDs.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getFiles($entity_type, $entity_id, $field_name) {
     $entity_storage = $this->entityTypeManager()->getStorage($entity_type);
@@ -236,7 +242,7 @@ class DownloadController extends ControllerBase {
    * @param string $file_path
    *   File physical path.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The binary file.
    */
   protected function streamZipFile($file_path) {
@@ -255,7 +261,7 @@ class DownloadController extends ControllerBase {
    * @param string $field_name
    *   The field name.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Return the result of the access check   *
    */
   public function access($entity_type, $entity_id, $field_name) {
diff --git a/src/Plugin/Archiver/Zip.php b/src/Plugin/Archiver/Zip.php
index 29dadd7..05e3067 100644
--- a/src/Plugin/Archiver/Zip.php
+++ b/src/Plugin/Archiver/Zip.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\media_download_all\Plugin\Archiver;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\File\FileSystem;
 use Drupal\Core\Archiver\Zip as BaseZip;
 use Drupal\Core\Archiver\ArchiverException;
 use Drupal\Core\StreamWrapper\StreamWrapperManager;
@@ -31,14 +33,14 @@ class Zip extends BaseZip {
   /**
    * A file storage instance.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fileStorage;
 
   /**
    * File system.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;
 
@@ -78,7 +80,7 @@ class Zip extends BaseZip {
     $file_name = $fid . ' - ' . $file->label();
     $uri = $file->getFileUri();
     if ($this->isAliyunOssSchema($uri)) {
-      $url = file_create_url($uri);
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
       $this->zip->addFromString($file_name, file_get_contents($url));
       return $this;
     }
diff --git a/src/Traits/MdaFormatterTrait.php b/src/Traits/MdaFormatterTrait.php
index 3cf1a38..e87474a 100644
--- a/src/Traits/MdaFormatterTrait.php
+++ b/src/Traits/MdaFormatterTrait.php
@@ -16,7 +16,7 @@ trait MdaFormatterTrait {
    *
    * @param array $elements
    *   The renderable array to append.
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field values to be rendered.
    * @param string $langcode
    *   The language that should be used to render the field.
diff --git a/tests/src/Functional/MdaFormatterTest.php b/tests/src/Functional/MdaFormatterTest.php
index f31270c..d7f7cf1 100644
--- a/tests/src/Functional/MdaFormatterTest.php
+++ b/tests/src/Functional/MdaFormatterTest.php
@@ -166,7 +166,7 @@ class MdaFormatterTest extends BrowserTestBase {
     $entity_id = $entity->id();
 
     $this->drupalGet($entity->toUrl());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $link = $this->xpath("//a[@class='media-download-all']");
     $this->assertCount(1, $link);
     $mda_link = $link[0];
@@ -192,7 +192,7 @@ class MdaFormatterTest extends BrowserTestBase {
     ]);
     $entity->save();
     $this->drupalGet($entity->toUrl());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $link = $this->xpath("//a[@class='media-download-all']");
     $this->assertCount(0, $link);
   }
