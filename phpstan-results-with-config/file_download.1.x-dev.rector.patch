diff --git a/file_download.module b/file_download.module
index 8af767c..1aa81fc 100644
--- a/file_download.module
+++ b/file_download.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\node\NodeInterface;
 /**
  * @file
  * @file
@@ -22,7 +23,7 @@ use Drupal\Core\Render\BubbleableMetadata;
 function file_download_help($route_name, RouteMatchInterface $arg) {
   switch ($route_name) {
     case 'help.page.file_download':
-      $output = file_get_contents(drupal_get_path('module', 'file_download') . '/README.md');
+      $output = file_get_contents(\Drupal::service('extension.list.module')->getPath('file_download') . '/README.md');
 
       return \Drupal::moduleHandler()->moduleExists('markdown') ? Xss::filterAdmin(\Drupal::moduleHandler()->invoke('markdown', 'filter', ['process', 0, -1, $output])) : '<h3>file_download README</h3><pre>' . Html::escape($output) . '</pre>';
   }
@@ -53,7 +54,7 @@ function template_preprocess_download_file_link(&$variables) {
   // To ensure different file URLs are generated for different sites in a.
   // Multisite setup, including HTTP and HTTPS versions of the same site.
   // Fix in https://www.drupal.org/node/2646744.
-  $url = file_create_url($file_entity->getFileUri());
+  $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file_entity->getFileUri());
   $variables['#cache']['contexts'][] = 'url.site';
 
   $mime_type = $file->getMimeType();
@@ -145,7 +146,7 @@ function file_download_tokens($type, $tokens, array $data, array $options, Bubbl
   $replacements = [];
 
   if ($type == 'file' && !empty($data['file'])) {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $file = $data['file'];
 
     foreach ($tokens as $name => $original) {
diff --git a/modules/file_download_counter/file_download_counter.module b/modules/file_download_counter/file_download_counter.module
index 3ca4e08..757f54e 100644
--- a/modules/file_download_counter/file_download_counter.module
+++ b/modules/file_download_counter/file_download_counter.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Component\Utility\Xss;
+use Drupal\Component\Utility\Html;
+use Drupal\core\Database\Database;
 /**
  * @file
  * Logs and displays content file_download_counter for a site.
@@ -14,8 +17,8 @@ use Drupal\Core\Routing\RouteMatchInterface;
 function file_download_counter_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'help.page.file_download_counter':
-      $output = file_get_contents(drupal_get_path('module', 'file_download_counter') . '/README.md');
-      return \Drupal::moduleHandler()->moduleExists('markdown') ? \Drupal\Component\Utility\Xss::filterAdmin(\Drupal::moduleHandler()->invoke('markdown', 'filter', ['process', 0, -1, $output])) : '<h3>file_download README</h3><pre>' . \Drupal\Component\Utility\Html::escape($output) . '</pre>';
+      $output = file_get_contents(\Drupal::service('extension.list.module')->getPath('file_download_counter') . '/README.md');
+      return \Drupal::moduleHandler()->moduleExists('markdown') ? Xss::filterAdmin(\Drupal::moduleHandler()->invoke('markdown', 'filter', ['process', 0, -1, $output])) : '<h3>file_download README</h3><pre>' . Html::escape($output) . '</pre>';
   }
 }
 
@@ -96,7 +99,7 @@ function file_download_counter_get($fid) {
 
   if ($fid > 0) {
     // Retrieve an array with both totalcount and daycount.
-     return \Drupal\core\Database\Database::getConnection('replica')->query('SELECT totalcount, daycount, timestamp FROM {file_download_counter} WHERE fid = :fid', [':fid' => $fid], [])->fetchAssoc();
+     return Database::getConnection('replica')->query('SELECT totalcount, daycount, timestamp FROM {file_download_counter} WHERE fid = :fid', [':fid' => $fid], [])->fetchAssoc();
   }
 }
 
diff --git a/modules/file_download_counter/src/FileDownloadSettingsForm.php b/modules/file_download_counter/src/FileDownloadSettingsForm.php
index 3db3626..06a8532 100644
--- a/modules/file_download_counter/src/FileDownloadSettingsForm.php
+++ b/modules/file_download_counter/src/FileDownloadSettingsForm.php
@@ -16,16 +16,16 @@ class FileDownloadSettingsForm extends ConfigFormBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a \Drupal\user\StatisticsSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
diff --git a/src/Controller/FileDownloadDownloadController.php b/src/Controller/FileDownloadDownloadController.php
index 514d627..9769463 100644
--- a/src/Controller/FileDownloadDownloadController.php
+++ b/src/Controller/FileDownloadDownloadController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\file_download\Controller;
 
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException;
 use Drupal\system\FileDownloadController;
 use Symfony\Component\HttpFoundation\BinaryFileResponse;
 use Symfony\Component\HttpFoundation\Request;
@@ -18,19 +20,19 @@ class FileDownloadDownloadController extends FileDownloadController {
   /**
    * Generates a download.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param string $scheme
    *   The file scheme, defaults to 'private'.
    * @param \Drupal\file\Entity $fid
    *   The file id.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse|\Symfony\Component\HttpFoundation\Response
+   * @return BinaryFileResponse|Response
    *   The transferred file as response or some error response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when the user does not have access to the file.
-   * @throws \Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException
+   * @throws ServiceUnavailableHttpException
    *   Thrown when the file is still being generated.
    */
   public function deliver(Request $request, $scheme, $fid) {
