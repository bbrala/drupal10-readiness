modules/contrib/google_calendar/google_calendar.install
modules/contrib/google_calendar/google_calendar.module
modules/contrib/google_calendar/google_calendar.page.inc
modules/contrib/google_calendar/google_calendar_event.page.inc
modules/contrib/google_calendar/src/Commands/GoogleCalendarCommands.php
modules/contrib/google_calendar/src/Controller/GoogleCalendarImportCalendarController.php
modules/contrib/google_calendar/src/Controller/GoogleCalendarImportEventsController.php
modules/contrib/google_calendar/src/Entity/GoogleCalendar.php
modules/contrib/google_calendar/src/Entity/GoogleCalendarEvent.php
modules/contrib/google_calendar/src/Entity/GoogleCalendarEventInterface.php
modules/contrib/google_calendar/src/Entity/GoogleCalendarEventViewsData.php
modules/contrib/google_calendar/src/Entity/GoogleCalendarInterface.php
modules/contrib/google_calendar/src/Entity/GoogleCalendarViewsData.php
modules/contrib/google_calendar/src/Event/CalendarEvent.php
modules/contrib/google_calendar/src/Form/EventSettingsForm.php
modules/contrib/google_calendar/src/Form/GoogleCalendarDeleteForm.php
modules/contrib/google_calendar/src/Form/GoogleCalendarEventDeleteForm.php
modules/contrib/google_calendar/src/Form/GoogleCalendarEventForm.php
modules/contrib/google_calendar/src/Form/GoogleCalendarForm.php
modules/contrib/google_calendar/src/Form/GoogleCalendarImportCalendarsForm.php
modules/contrib/google_calendar/src/Form/GoogleCalendarImportEventsForm.php
modules/contrib/google_calendar/src/Form/ImportForm.php
modules/contrib/google_calendar/src/Form/SettingsForm.php
modules/contrib/google_calendar/src/GoogleCalendarAccessControlHandler.php
modules/contrib/google_calendar/src/GoogleCalendarClientFactory.php
modules/contrib/google_calendar/src/GoogleCalendarEventAccessControlHandler.php
modules/contrib/google_calendar/src/GoogleCalendarEventListBuilder.php
modules/contrib/google_calendar/src/GoogleCalendarHtmlRouteProvider.php
modules/contrib/google_calendar/src/GoogleCalendarImportCalendar.php
modules/contrib/google_calendar/src/GoogleCalendarImportEvents.php
modules/contrib/google_calendar/src/GoogleCalendarImportEventsInterface.php
modules/contrib/google_calendar/src/GoogleCalendarListBuilder.php
modules/contrib/google_calendar/src/Plugin/QueueWorker/CalendarImportProcessor.php
modules/contrib/google_calendar/src/Plugin/views/field/GoogleCalendarEventsLoaded.php
modules/contrib/google_calendar/src/WizardForm/ConfigurationWizardBase.php
modules/contrib/google_calendar/src/WizardForm/ConfigurationWizard_1.php
modules/contrib/google_calendar/src/WizardForm/ConfigurationWizard_2.php
modules/contrib/google_calendar/src/WizardForm/ConfigurationWizard_3.php
modules/contrib/google_calendar/src/WizardForm/ConfigurationWizard_4.php
modules/contrib/google_calendar/src/WizardForm/ConfigurationWizard_5.php
modules/contrib/google_calendar/src/WizardForm/ConfigurationWizard_6.php
modules/contrib/google_calendar/src/WizardForm/ConfigurationWizard_7.php
modules/contrib/google_calendar/tests/src/Functional/GoogleCalendarAccessTest.php
modules/contrib/google_calendar/tests/src/Functional/GoogleCalendarMenuTests.php
modules/contrib/google_calendar/tests/src/Functional/GoogleCalendarUITest.php

24 files with changes
=====================

1) modules/contrib/google_calendar/tests/src/Functional/GoogleCalendarMenuTests.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\google_calendar\Functional;

+use Drupal\user\Entity\User;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A simple user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $user;

@@ @@
   /**
    * Perform initial setup tasks that run before every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(array(
       'administer site configuration',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/google_calendar/src/WizardForm/ConfigurationWizard_7.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar\WizardForm;

+use Drupal\google_secrets\GoogleSecretsStoreInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\google_secrets\GoogleSecretsStoreException;
@@ @@
     $store_config = $this->store->get('client_secret_config') ?? $config->get('client_secret_config') ?? [];

     if ($store_type) {
-      /** @var \Drupal\google_secrets\GoogleSecretsStoreInterface $store */
+      /** @var GoogleSecretsStoreInterface $store */
       $store = $google_secrets_store_manager->createInstance($store_type, $store_config);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/google_calendar/src/WizardForm/ConfigurationWizard_6.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar\WizardForm;

+use Drupal\google_secrets\GoogleSecretsStoreManager;
+use Drupal\google_secrets\GoogleClientFactory;
+use Drupal\google_secrets\GoogleSecretsStoreInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\google_secrets\GoogleSecretsStoreException;
@@ @@

     $config = \Drupal::config('google_calendar.settings');

-    /** @var \Drupal\google_secrets\GoogleSecretsStoreManager $google_secrets_store_manager */
+    /** @var GoogleSecretsStoreManager $google_secrets_store_manager */
     $google_secrets_store_manager = \Drupal::service('plugin.manager.google_secrets');

-    /** @var \Drupal\google_secrets\GoogleClientFactory $google_secrets_client_factory */
+    /** @var GoogleClientFactory $google_secrets_client_factory */
     $google_secrets_client_factory = \Drupal::service('google_secrets.google_client.factory');

-    /** @var \Drupal\google_secrets\GoogleSecretsStoreInterface[] $store_types */
+    /** @var GoogleSecretsStoreInterface[] $store_types */
     $store_types = $google_secrets_store_manager->getDefinitions();

     $file_id = NULL;
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {

-    /** @var \Drupal\google_secrets\GoogleSecretsStoreManager $google_secrets_store_manager */
+    /** @var GoogleSecretsStoreManager $google_secrets_store_manager */
     $google_secrets_store_manager = \Drupal::service('plugin.manager.google_secrets');

     // Ask the store plugin to parse form_state to extract its config.
@@ @@
     $store_type = $form_state->getValue('client_secret_types');
     $store_config = [];
     if ($store_type) {
-      /** @var \Drupal\google_secrets\GoogleSecretsStoreInterface $store */
+      /** @var GoogleSecretsStoreInterface $store */
       $store = $google_secrets_store_manager->createInstance($store_type, $store_config);
       if ($store) {
         $store_config = $store->submitForm($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/google_calendar/src/WizardForm/ConfigurationWizardBase.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Stores the tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The session manager service.
    *
-   * @var \Drupal\Core\Session\SessionManagerInterface
+   * @var SessionManagerInterface
    */
   private $sessionManager;

@@ @@
   /**
    * Constructs a WizardFormBase.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
-   * @param \Drupal\Core\Session\SessionManagerInterface $session_manager
+   * @param PrivateTempStoreFactory $temp_store_factory
+   * @param SessionManagerInterface $session_manager
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory,
                               SessionManagerInterface $session_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/google_calendar/src/Plugin/QueueWorker/CalendarImportProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar\Plugin\QueueWorker;

+use Psr\Log\LoggerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\google_calendar\Entity\GoogleCalendar;
@@ @@
   /**
    * The logger to use for status messages.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Storage for the class which will actually process each item.
    *
-   * @var \Drupal\google_calendar\GoogleCalendarImportEventsInterface
+   * @var GoogleCalendarImportEventsInterface
    */
   protected $calendarImport;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\google_calendar\GoogleCalendarImportEventsInterface $calendar_import
+   * @param GoogleCalendarImportEventsInterface $calendar_import
    *   Class to perform the item processing.
    */
   public function __construct(array $configuration,
@@ @@
    */
   public function processItem($calendarEntityId) {

-    /** @var \Drupal\google_calendar\Entity\GoogleCalendar $calendar */
+    /** @var GoogleCalendar $calendar */
     $calendar = GoogleCalendar::load($calendarEntityId);
     if ($calendar) {
       $this->calendarImport->import($calendar);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/google_calendar/src/GoogleCalendarListBuilder.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * GoogleCalendarListBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param EntityTypeInterface $entity_type
+   * @param EntityStorageInterface $storage
+   * @param DateFormatterInterface $dateFormatter
    */
   function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $dateFormatter) {
     parent::__construct($entity_type, $storage);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/google_calendar/src/GoogleCalendarImportEventsInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\google_calendar\Entity\GoogleCalendarInterface;

 /**
@@ @@
    * A token will be returned unless either 'ignoresynctoken' is set
    * or the calendar resync schedule has been reached.
    *
-   * @param \Drupal\google_calendar\Entity\GoogleCalendarInterface $calendar
+   * @param GoogleCalendarInterface $calendar
    *   The calendar for which the token is needed.
    * @param bool $ignoreSyncToken
    *   Flag forcing the function to return NULL.
@@ @@
   /**
    * Mark the Sync Token invalid, forcing an full update on the next update.
    *
-   * @param \Drupal\google_calendar\Entity\GoogleCalendarInterface $entity
+   * @param GoogleCalendarInterface $entity
    *   The calendar entity that should be modified.
    *
    * @return int
    *   SAVED_NEW or SAVED_UPDATED.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function deleteSyncToken(GoogleCalendarInterface $entity): int;

@@ @@
   /**
    * Import changes from Google Calendar to the local event entities.
    *
-   * @param \Drupal\google_calendar\Entity\GoogleCalendarInterface $calendar
+   * @param GoogleCalendarInterface $calendar
    *   The calendar entity that should be imported.
    * @param bool $ignoreSyncToken
    *   TRUE if the import should ignore any sync token, so causing a full
@@ @@
    *   reload of the calendar. FALSE to use any token that might be set, thus
    *   using an incremental update if possible.
    *
-   * @return \Drupal\google_calendar\Entity\GoogleCalendarInterface
+   * @return GoogleCalendarInterface
    *   The entity being updated. Inspect it for status information.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Google_Service_Exception
    */
   public function import(GoogleCalendarInterface $calendar, $ignoreSyncToken = FALSE): GoogleCalendarInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/google_calendar/src/GoogleCalendarImportEvents.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar;

+use Psr\Log\LoggerInterface;
+use Drupal\Core\Config\Config;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * Defined only during an import(), the calendar entity being imported.
    *
-   * @var \Drupal\google_calendar\Entity\GoogleCalendarInterface
+   * @var GoogleCalendarInterface
    */
   protected $calendarEntity;

@@ @@
   /**
    * Logger interface.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Configuration getter.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
    * Nominated owner of events not having a otherwise-defined owner.
    * How this is used depends on the eventOwnership setting.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $defaultEventOwner;

@@ @@
   /**
    * EntityTypeManager interface.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal's event dispatcher
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface;
+   * @var EventDispatcherInterface ;
    */
   protected $eventDispatcher;

@@ @@
    *
    * @param \Google_Service_Calendar $googleClient
    *   The Client API interface.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   Configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Logging factory.
    */
   public function __construct(Google_Service_Calendar $googleClient,
@@ @@
    *
    * @param array $events
    *   The array of events returned from the Calendar API.
-   * @param \Drupal\google_calendar\Entity\GoogleCalendarInterface $calendar
+   * @param GoogleCalendarInterface $calendar
    *   The calendar entity we are updating.
    * @param string $timezone
    *   The timezone to manupulate event dates in.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   private function syncEvents(array $events, GoogleCalendarInterface $calendar, string $timezone): void {

@@ @@
     foreach ($events as $event) {

       // Get the old entity, if it exists.
-      /** @var \Drupal\google_calendar\Entity\GoogleCalendarEventInterface $eventEntity */
+      /** @var GoogleCalendarEventInterface $eventEntity */
       $eventEntity = $indexedEvents[$event->getId()] ?? NULL;

       // If the API now states the event was cancelled, delete the entity.
@@ @@
       $rc = $eventEntity->save();

       $sync_event = new CalendarEvent($eventEntity, $event);
-      $this->eventDispatcher->dispatch(CalendarEvent::ENTITY_SYNC, $sync_event);
+      $this->eventDispatcher->dispatch($sync_event, CalendarEvent::ENTITY_SYNC);

       if ($rc === SAVED_UPDATED) {
         $this->debug(
@@ @@
   /**
    * Return the events stored for the given calendar, keyed by their Google id.
    *
-   * @param \Drupal\google_calendar\Entity\GoogleCalendarInterface $calendar
+   * @param GoogleCalendarInterface $calendar
    *   The calendar to list.
    *
    * @return array
    *   k-v array of event entities for the given calendar.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getIndexedEvents(GoogleCalendarInterface $calendar): array {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = $this->entityTypeManager
       ->getStorage('google_calendar_event');

@@ @@
       ->condition('calendar', $calendar->id());
     $eventIds = $query->execute();

-    /** @var \Drupal\google_calendar\Entity\GoogleCalendarEventInterface[] $drupalEvents */
+    /** @var GoogleCalendarEventInterface[] $drupalEvents */
     $drupalEvents = GoogleCalendarEvent::loadMultiple($eventIds);

     // Index the existing event nodes by Google Calendar Id for easier lookup.
@@ @@
   /**
    * Force a resync of this calendar at the next opportunity.
    *
-   * @param \Drupal\google_calendar\Entity\GoogleCalendarInterface $calendar
+   * @param GoogleCalendarInterface $calendar
    *   The calendar to resync.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function doForceResync(GoogleCalendarInterface $calendar) {
     $this->debug('Server requested resync: SyncToken set to NULL.');
@@ @@
     // If possible, assign the drupal owner of this entity from the organiser
     // email. Use $useremails,$usernames as a temporary cache.
     if ($user_anon === NULL) {
-      /** @var \Drupal\user\Entity\User $user_anon */
+      /** @var User $user_anon */
       $user_anon = User::load($this->anonEventOwner);
     }
     $user_id = $user_anon->id();
@@ @@
     $name = $user_anon->getEmail();
     $email = $user_anon->getAccountName();
     if ($user_fixed === NULL) {
-      /** @var \Drupal\user\Entity\User $user_fixed */
+      /** @var User $user_fixed */
       $user_fixed = User::load($this->defaultEventOwner);
     }

@@ @@
           $name = $usernames[$user_id];
         }
         else {
-          /** @var \Drupal\user\Entity\User $user_email */
+          /** @var User $user_email */
           $user_email = NULL;
           if ($email && ($user = user_load_by_mail($email))) {
             $user_email = $user;
@@ @@
           $email = $useremails[$user_id];
         }
         else {
-          /** @var \Drupal\user\Entity\User $user_name */
+          /** @var User $user_name */
           $user_name = NULL;
           if ($name && ($user = user_load_by_name($name))) {
             $user_name = $user;
@@ @@
   /**
    * Delete the event entity.
    *
-   * @param \Drupal\google_calendar\Entity\GoogleCalendarEventInterface|null $eventEntity
+   * @param GoogleCalendarEventInterface|null $eventEntity
    *   When not NULL, the event entity corresponding to $event.
    * @param \Google_Service_Calendar_Event $event
    *   The API event structure we want to delete.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   private function doDeleteEvent(?GoogleCalendarEventInterface $eventEntity,
                                  Google_Service_Calendar_Event $event) {
@@ @@

       if (is_array($evs)) {
         $evids = [];
-        /** @var \Drupal\google_calendar\Entity\GoogleCalendarEventInterface $ev */
+        /** @var GoogleCalendarEventInterface $ev */
         foreach ($evs as $id => $ev) {
           $evids[] = "$id ({$ev->getGoogleEventId()})";
         }
@@ @@
    * @return bool
    *   TRUE if there is a local event, FALSE otherwise.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function eventIdExists(?string $eventId) {
     if ($eventId === NULL || $eventId === '') {
@@ @@
    *
    * Pick the first of the three provided accounts to return.
    *
-   * @param \Drupal\user\Entity\User|null $user
+   * @param User|null $user
    *   A particular user owning this event.
-   * @param \Drupal\user\Entity\User|null $user_fixed
+   * @param User|null $user_fixed
    *   The "fixed user" account, the default user.
-   * @param \Drupal\user\Entity\User $user_anon
+   * @param User $user_anon
    *   The anonymous user - last gasp. Not expected to be used.
    *
    * @return array
@@ @@
    * seen in a download) to ensure that only events Google knows about remain
    * locally.
    *
-   * @param \Drupal\google_calendar\Entity\GoogleCalendarInterface $calendar
+   * @param GoogleCalendarInterface $calendar
    *   The calendar entity to check.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   private function doCleanup(GoogleCalendarInterface $calendar): void {

@@ @@
       // was supposed to be a full update, these are the ones we should clean.
       $past = strtotime($this->pastHorizon);

-      /** @var \Drupal\google_calendar\Entity\GoogleCalendarEventInterface $eventDetail */
+      /** @var GoogleCalendarEventInterface $eventDetail */
       foreach ($indexedEvents as $eventId => $eventDetail) {
         if ($eventDetail->getEndTime() < $past) {
           switch ($this->getCleanupPolicy()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/google_calendar/src/GoogleCalendarImportCalendar.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar;

+use Psr\Log\LoggerInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * Logger
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Settings Configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @param \Google_Service_Calendar $googleClient
    *   Google API Client API wrapper.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   Config factory for calendar settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity manager to use to create new events and load calendars.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Logger to write notices.
    */
   public function __construct(Google_Service_Calendar $googleClient,
@@ @@

   /**
    * @param string $calendarId
-   * @return bool|\Drupal\Core\Entity\EntityInterface|mixed|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return bool|EntityInterface|mixed|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function import(string $calendarId) {
     $entities = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/google_calendar/src/GoogleCalendarHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/google_calendar/src/GoogleCalendarEventAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar;

+use Drupal\google_calendar\Entity\GoogleCalendarEventInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\google_calendar\Entity\GoogleCalendarEventInterface $entity */
+    /** @var GoogleCalendarEventInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/google_calendar/src/GoogleCalendarClientFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\google_secrets\GoogleSecretsStoreException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\google_secrets\GoogleClientFactory;
@@ @@
   /**
    * Configuration settings for auth client.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The Google_Client factory to use.
    *
-   * @var \Drupal\google_secrets\GoogleClientFactory
+   * @var GoogleClientFactory
    */
   protected $clientFactory;

@@ @@
   /**
    * Logger interface.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * GoogleCalendarClientFactory constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Configuration factory.
-   * @param \Drupal\google_secrets\GoogleClientFactory $client_factory
+   * @param GoogleClientFactory $client_factory
    *   Factory for Google_Client objects.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   Logger factory.
    */
   public function __construct(ConfigFactoryInterface $config, GoogleClientFactory $client_factory, LoggerChannelFactoryInterface $loggerFactory) {
@@ @@
    * @return \Google_Service_Calendar
    *   A new, authenticated instance of the Calendar API object.
    *
-   * @throws \Drupal\google_secrets\GoogleSecretsStoreException
+   * @throws GoogleSecretsStoreException
    */
   public function getCalendarClient(): Google_Service_Calendar {
     $client = $this->getClient();
@@ @@
    * @return \Google_Client
    *   A new, authenticated instance of the basic Google API object.
    *
-   * @throws \Drupal\google_secrets\GoogleSecretsStoreException
+   * @throws GoogleSecretsStoreException
    */
   public function getClient(): Google_Client {
     $store = $this->config->get('client_secret_type') ?? 'static_file';
@@ @@
    * Normally, there is no need to access the store directly because the
    * access can be resolved completely inside getClient().
    *
-   * @return \Drupal\google_secrets\GoogleSecretsStoreInterface
+   * @return GoogleSecretsStoreInterface
    *   The GoogleSecretsStore object.
    *
-   * @throws \Drupal\google_secrets\GoogleSecretsStoreException
+   * @throws GoogleSecretsStoreException
    */
   public function getStore(): GoogleSecretsStoreInterface {
     $store = $this->config->get('client_secret_type') ?? 'static_file';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/google_calendar/src/GoogleCalendarAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar;

+use Drupal\google_calendar\Entity\GoogleCalendarInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\google_calendar\Entity\GoogleCalendarInterface $entity */
+    /** @var GoogleCalendarInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/google_calendar/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar\Form;

+use Drupal\google_secrets\GoogleSecretsStoreInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
       $store_config = [];
     }
     if ($store_type) {
-      /** @var \Drupal\google_secrets\GoogleSecretsStoreInterface $store */
+      /** @var GoogleSecretsStoreInterface $store */
       $store = $googleSecretsStoreManager->createInstance($store_type, $store_config);
       $store_config = $store->submitForm($form, $form_state);
     }
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
     ];

     $googleSecretsStoreManager = \Drupal::service('plugin.manager.google_secrets');
-    /** @var \Drupal\google_secrets\GoogleSecretsStoreInterface[] $store_types */
+    /** @var GoogleSecretsStoreInterface[] $store_types */
     $store_types = $googleSecretsStoreManager->getDefinitions();
     $secret_type = $config->get('client_secret_type');

@@ @@
     $subform = [];
     $markup = [];
     $store_config = $config->get('client_secret_config') ?? [];
-    /** @var \Drupal\google_secrets\GoogleSecretsStoreInterface $store */
+    /** @var GoogleSecretsStoreInterface $store */
     $store = $googleSecretsStoreManager->createInstance($secret_type, $store_config);
     $form['accounts']['client_secret_settings'] = $store->buildForm($subform, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/google_calendar/src/Form/ImportForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * ImportForm constructor.
    *
-   * @param \Drupal\google_calendar\GoogleCalendarImportCalendar $calendarImportService
+   * @param GoogleCalendarImportCalendar $calendarImportService
    *   Importer object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity manager object for google calendars.
    */
   public function __construct(GoogleCalendarImportCalendar $calendarImportService,
@@ @@
    *
    * Batch process per-item callback function.
    *
-   * @param \Drupal\google_calendar\GoogleCalendarImportCalendar $importer
+   * @param GoogleCalendarImportCalendar $importer
    *   The importer service.
-   * @param \Drupal\google_calendar\Entity\GoogleCalendar $calendar
+   * @param GoogleCalendar $calendar
    *   The calendar to import.
    * @param int $total
    *   Total calendars to import.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/google_calendar/src/Form/GoogleCalendarImportEventsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar\Form;

+use Drupal\google_calendar\GoogleCalendarImportEventsInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * Drupal\google_calendar\GoogleCalendarImport definition.
    *
-   * @var \Drupal\google_calendar\GoogleCalendarImportEventsInterface
+   * @var GoogleCalendarImportEventsInterface
    */
   protected $calendarService;

@@ @@
   /**
    * EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * GoogleCalendarImportEventsForm constructor.
    *
-   * @param \Drupal\google_calendar\Controller\GoogleCalendarImportEventsController $google_calendar_service
+   * @param GoogleCalendarImportEventsController $google_calendar_service
    *   The import service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
    */
   public function __construct(GoogleCalendarImportEventsController $google_calendar_service,
@@ @@
   /**
    * Batch API Callback function to import events for a calendar.
    *
-   * @param \Drupal\google_calendar\Entity\GoogleCalendarInterface $calendar
+   * @param GoogleCalendarInterface $calendar
    *   The calendar entity.
    * @param int $total
    *   Callback param.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/google_calendar/src/Form/GoogleCalendarImportCalendarsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\google_calendar\Entity\GoogleCalendarInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {

@@ @@
       $entities = [];
     }

-    /** @var \Drupal\google_calendar\Entity\GoogleCalendarInterface $entity */
+    /** @var GoogleCalendarInterface $entity */
     foreach ($entities as $entity) {
       $index[$entity->getGoogleCalendarId()] = $entity;
     }
@@ @@

     // Check to see if any current entities are no longer visible in
     // the calendar api (e.g. they have been unshared).
-    /** @var \Drupal\google_calendar\Entity\GoogleCalendarInterface $entity */
+    /** @var GoogleCalendarInterface $entity */
     foreach ($entities as $entity) {
       $eid = $entity->getGoogleCalendarId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/google_calendar/src/Form/EventSettingsForm.php:38

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/google_calendar/src/Event/CalendarEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Google_Service_Calendar_Event;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Calendar event for event listeners.
@@ @@
   /**
    * Node entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Constructs a node insertion demo event object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public function __construct(EntityInterface $entity, Google_Service_Calendar_Event $event) {
     $this->entity = $entity;
@@ @@
   /**
    * Get the inserted entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   public function getEntity() {
     return $this->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/google_calendar/src/Entity/GoogleCalendarEventInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar\Entity;

+use Drupal\Core\Url;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ @@
   /**
    * Gets the Google Calendar event Start time.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   URL linking to the event on the Google website.
    */
   public function getGoogleLink(): string;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/google_calendar/src/Controller/GoogleCalendarImportEventsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar\Controller;

+use Drupal\Core\Logger\LoggerChannel;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\google_calendar\Entity\GoogleCalendarInterface;
@@ @@
   /**
    * The logger to use for status messages.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   protected $logger;

@@ @@
   /**
    * The importer itself.
    *
-   * @var \Drupal\google_calendar\GoogleCalendarImportEventsInterface
+   * @var GoogleCalendarImportEventsInterface
    */
   protected $googleCalendarImport;

@@ @@
   /**
    * Constructs a new GoogleCalendarImportEventsController object.
    *
-   * @param \Drupal\google_calendar\GoogleCalendarImportEventsInterface $google_calendar_import
+   * @param GoogleCalendarImportEventsInterface $google_calendar_import
    *   The importer.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   Logger factory for messages.
    */
   public function __construct(GoogleCalendarImportEventsInterface $google_calendar_import, LoggerChannelFactoryInterface $loggerFactory) {
@@ @@
    * update, no events beyond the current future horizon date will be
    * loaded.
    *
-   * @param \Drupal\google_calendar\Entity\GoogleCalendarInterface $google_calendar
+   * @param GoogleCalendarInterface $google_calendar
    *   The calendar entity being synchronized.
    * @param bool $resync
    *   TRUE if a full resync should be performed for this calendar, FALSE
    *   otherwise (i.e. do an incremental sync).
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The next page.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Google_Service_Exception
    */
   public function synchronizeCalendar(GoogleCalendarInterface $google_calendar, $resync = FALSE): RedirectResponse {
@@ @@
   /**
    * Synchronize all currently imported Calendars.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The next page.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Google_Service_Exception
    */
   public function synchronizeCalendars(): RedirectResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/google_calendar/src/Controller/GoogleCalendarImportCalendarController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\google_calendar\GoogleCalendarImportCalendar;
@@ @@
   /**
    * The Logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface The logger to use for status messages.
+   * @var LoggerChannelFactoryInterface The logger to use for status messages.
    */
   protected $logger;

@@ @@
   /**
    * Google Calendar Importer object.
    *
-   * @var \Drupal\google_calendar\GoogleCalendarImportCalendar
+   * @var GoogleCalendarImportCalendar
    */
   protected $calendarImport;

@@ @@
   /**
    * Importer for Calendars.
    *
-   * @param \Drupal\google_calendar\GoogleCalendarImportCalendar $google_calendar_import
+   * @param GoogleCalendarImportCalendar $google_calendar_import
    *   Constructs a new GoogleCalendarImportEventsController object.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   Factory for logger notices.
    */
   public function __construct(GoogleCalendarImportCalendar $google_calendar_import, LoggerChannelFactoryInterface $loggerFactory) {
@@ @@
    *   is no entity. The code can also be run to update the local entity
    *   data from Google, hence allowing an entity id at all.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The next page.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function importCalendar(string $calendar_id): RedirectResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/google_calendar/src/Commands/GoogleCalendarCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_calendar\Commands;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\google_calendar\Entity\GoogleCalendar;
+use Drupal\google_calendar\GoogleCalendarClientFactory;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\google_calendar\GoogleCalendarImportEventsInterface;
+use Drupal\google_secrets\GoogleSecretsStoreInterface;
 use Consolidation\OutputFormatters\StructuredData\PropertyList;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Consolidation\OutputFormatters\StructuredData\UnstructuredListData;
@@ @@
    * @command gcal:update
    * @aliases gcal-update, gcal:cron, gcal-cron
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function cron(array $options = ['full' => FALSE]) {

@@ @@
       ->getStorage('google_calendar')
       ->loadByProperties(['status' => 1]);

-    /** @var \Drupal\google_calendar\Entity\GoogleCalendar $calendar */
+    /** @var GoogleCalendar $calendar */
     foreach ($foundCalendars as $calendar) {
       $this->output()
         ->writeln(dt('Update calendar "@name" (@id).',
@@ @@
    *   token: Sync token
    *   sync: Sync result
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   Table of calendars.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\google_secrets\GoogleSecretsStoreException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws GoogleSecretsStoreException
    */
   public function calendarList(): RowsOfFields {
     try {
-      /** @var \Drupal\google_calendar\GoogleCalendarClientFactory $client_factory */
+      /** @var GoogleCalendarClientFactory $client_factory */
       $client_factory = Drupal::service('google_calendar.google_client.factory');
     }
     catch (GoogleSecretsStoreException $e) {
@@ @@
     }

     // Now include the local entities -- and report any that were not remote.
-
-    /** @var \Drupal\google_calendar\Entity\GoogleCalendarInterface $entity */
+    /** @var GoogleCalendarInterface $entity */
     foreach ($entities as $entity) {
       $cal = [
         'id' => $entity->getGoogleCalendarId(),
@@ @@
     'raw' => FALSE,
   ]) {
     try {
-      /** @var \Drupal\google_calendar\GoogleCalendarClientFactory $client_factory */
+      /** @var GoogleCalendarClientFactory $client_factory */
       $client_factory = Drupal::service('google_calendar.google_client.factory');
     }
     catch (GoogleSecretsStoreException $e) {
@@ @@
    * @return array
    *   A k-v list of fields extracted from the event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function formatEvent(Google_Service_Calendar_Event $event) {
     $startdate = $event->getStart();
@@ @@
    * @option full
    *   Perform a full resync of the calendar.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\PropertyList
+   * @return PropertyList
    *   A list of stats on the import.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Google_Service_Exception
    */
   public function importEvents($calendar_id, array $options = ['full' => FALSE]): PropertyList {
     $pl = [];
-    /** @var Drupal\google_calendar\GoogleCalendarImportEventsInterface $importer */
+    /** @var GoogleCalendarImportEventsInterface $importer */
     $importer = Drupal::service('google_calendar.sync_events');

     $full_resync = $options['full'];
@@ @@
    *
    * @return PropertyList
    *
-   * @throws \Drupal\google_secrets\GoogleSecretsStoreException
+   * @throws GoogleSecretsStoreException
    */
   public function secrets(): PropertyList {

@@ @@
     $config = \Drupal::config('google_calendar.settings');
     $store_type = $config->get('client_secret_type') ?? 'static_file';

-    /** @var \Drupal\google_secrets\GoogleSecretsStoreInterface $store */
+    /** @var GoogleSecretsStoreInterface $store */
     $store = Drupal::service('google_calendar.google_client.store');
     $filepath = $store->getFilePath();

@@ @@
    *
    * @param array $calfilter
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   private function deleteSyncToken(array $calfilter) {
     $entities = Drupal::entityTypeManager()
@@ @@
       ->getStorage('google_calendar')
       ->loadByProperties(['status' => 1]);

-    /** @var \Drupal\google_calendar\Entity\GoogleCalendar $entity */
+    /** @var GoogleCalendar $entity */
     foreach ($entities as $entity) {
       $entity->setSyncToken('');
       $entity->setSyncResult(GoogleCalendarInterface::SYNC_RESULT_FORCE_RESYNC);
@@ @@
    * @return string
    *   User confirmation.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws UserAbortException
    */
   public function deleteEvents(array $options = [
     'events' => NULL,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/google_calendar/google_calendar.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\google_calendar\Entity\GoogleCalendar;
 /**
  * @file
  * Contains google_calendar.module.
@@ @@
  * @return bool
  *   True if calendars considered for update; false if bypassed.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function google_calendar_cron($bypass = FALSE) {

@@ @@
     ->getStorage('google_calendar')
     ->loadByProperties(['status' => 1]);

-  /** @var \Drupal\google_calendar\Entity\GoogleCalendar $calendar */
+  /** @var GoogleCalendar $calendar */
   foreach ($foundCalendars as $calendar) {
     $queue->createItem($calendar->id());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 24 files have been changed by Rector                                      

