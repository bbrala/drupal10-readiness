modules/contrib/entity_access_by_role_field/entity_access_by_role_field.module
modules/contrib/entity_access_by_role_field/src/Exceptions/RoleOptionNotFoundException.php
modules/contrib/entity_access_by_role_field/src/Helper/Constants.php
modules/contrib/entity_access_by_role_field/src/Plugin/Field/FieldFormatter/DebugEntityAccessRoleFormatter.php
modules/contrib/entity_access_by_role_field/src/Plugin/Field/FieldFormatter/DefaultEntityAccessRoleFormatter.php
modules/contrib/entity_access_by_role_field/src/Plugin/Field/FieldType/EntityAccessRoleItem.php
modules/contrib/entity_access_by_role_field/src/Plugin/Field/FieldWidget/DefaultEntityAccessRoleWidget.php
modules/contrib/entity_access_by_role_field/src/Routing/RouteSubscriber.php
modules/contrib/entity_access_by_role_field/tests/src/Functional/EntityAccessTestBase.php
modules/contrib/entity_access_by_role_field/tests/src/Functional/MediaEntityAccessTests.php
modules/contrib/entity_access_by_role_field/tests/src/Functional/NodeEntityAccessTests.php
modules/contrib/entity_access_by_role_field/tests/src/Functional/TaxonomyEntityAccessTests.php
modules/contrib/entity_access_by_role_field/tests/src/Kernel/EntityAccessKernelTest.php

4 files with changes
====================

1) modules/contrib/entity_access_by_role_field/tests/src/Functional/NodeEntityAccessTests.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_access_by_role_field\Functional;

+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_access_by_role_field\Helper\Constants;

@@ @@
     $entityNodeArticleBundle = $this->drupalCreateContentType(['type' => 'article']);
     $this->createAccessFieldTypeOnEntityBundle($entityNodeArticleBundle, $this->fieldName, [Constants::OPERATION_VIEW], Constants::FALLBACK_NEUTRAL, FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
     \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');
     $display_repository->getFormDisplay('node', 'article')
       ->setComponent($this->fieldName, [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_access_by_role_field/tests/src/Functional/EntityAccessTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_access_by_role_field\Functional;

+use Drupal\user\Entity\User;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * An admin user with all permissions.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * A user with the permission to skip field check.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $globalPermissionUser;

@@ @@
   /**
    * An authenticated user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $authenticatedUser;

@@ @@
   /**
    * A simple authenticated user with a test_role.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $testRoleUser;

@@ @@
   /**
    * Creates an Access field on an entity bundle type.
    *
-   * @param Drupal\Core\Config\Entity\ConfigEntityInterface $entityTypeBundle
+   * @param ConfigEntityInterface $entityTypeBundle
    *   The entityTypeBundle to add the field on.
    * @param string $fieldName
    *   The field name of the field.
@@ @@
   /**
    * Adds an entity access by role field to a bundle instance.
    *
-   * @param Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity bundle instance to add the field on.
    * @param string $fieldName
    *   The field name.
@@ @@
   /**
    * Asserts that access is allowed to access the entity for the operation.
    *
-   * @param Drupal\Core\Access\AccessibleInterface $entity
+   * @param AccessibleInterface $entity
    *   The Entity to test the access on.
    * @param string|null $operation
    *   The allowed operation on the entity.
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user to check the access on, NULL is current user.
    */
   protected static function assertAccessAllowed(AccessibleInterface $entity, ?string $operation = 'view', AccountInterface $account = NULL) {
@@ @@
   /**
    * Asserts that access is forbidden to access the entity for the operation.
    *
-   * @param Drupal\Core\Access\AccessibleInterface $entity
+   * @param AccessibleInterface $entity
    *   The Entity to test the access on.
    * @param string|null $operation
    *   The allowed operation on the entity.
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user to check the access on, NULL is current user.
    */
   protected static function assertAccessForbidden(AccessibleInterface $entity, ?string $operation = 'view', AccountInterface $account = NULL) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_access_by_role_field/src/Routing/RouteSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_access_by_role_field/entity_access_by_role_field.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultForbidden;
+use Drupal\Core\Access\AccessResultNeutral;
 /**
  * @file
  * Entity access by role field module file.
@@ @@
  * Checks 'entity_access_by_role_field' field of an entity
  * and compares with user roles.
  *
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   The entity to check.
  * @param string $operation
  *   The operation that is to be performed on $entity.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The account to check.
  *
- * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden|\Drupal\Core\Access\AccessResultNeutral
+ * @return AccessResultAllowed|AccessResultForbidden|AccessResultNeutral
  *   The access result.
  */
 function _entity_access_by_role_field_role_has_access(FieldableEntityInterface $entity, $operation, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

