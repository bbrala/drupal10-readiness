diff --git a/src/ComponentDiscovery.php b/src/ComponentDiscovery.php
index 47c52dd..a554843 100755
--- a/src/ComponentDiscovery.php
+++ b/src/ComponentDiscovery.php
@@ -31,21 +31,21 @@ class ComponentDiscovery implements ComponentDiscoveryInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -98,11 +98,11 @@ class ComponentDiscovery implements ComponentDiscoveryInterface {
    *
    * @param string $root
    *   The root web directory of the Drupal installation.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct($root, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, LoggerInterface $logger) {
diff --git a/src/ComponentDiscoveryInterface.php b/src/ComponentDiscoveryInterface.php
index b1697d7..67b0643 100644
--- a/src/ComponentDiscoveryInterface.php
+++ b/src/ComponentDiscoveryInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Component;
 
+use Drupal\Core\Extension\Extension;
 /**
  * Defines the interface for services which discover front-end components.
  */
@@ -10,7 +11,7 @@ interface ComponentDiscoveryInterface {
   /**
    * Find all available front-end components.
    *
-   * @return \Drupal\Core\Extension\Extension[]
+   * @return Extension[]
    *   The discovered components.
    */
   public function getComponents();
diff --git a/src/Plugin/Block/ComponentBlock.php b/src/Plugin/Block/ComponentBlock.php
index e8c5272..db770e1 100644
--- a/src/Plugin/Block/ComponentBlock.php
+++ b/src/Plugin/Block/ComponentBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Component\Plugin\Block;
 
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Component\Plugin\Context\ContextInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\Plugin\DataType\EntityAdapter;
 use Drupal\Core\Form\FormStateInterface;
@@ -196,7 +198,7 @@ class ComponentBlock extends BlockBase implements ContainerFactoryPluginInterfac
   /**
    * Build settings form configuration settings form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state array.
    *
    * @return array
@@ -220,7 +222,7 @@ class ComponentBlock extends BlockBase implements ContainerFactoryPluginInterfac
    *
    * @param array $configuration
    *   The configuration array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state array.
    *
    * @return array
@@ -249,11 +251,10 @@ class ComponentBlock extends BlockBase implements ContainerFactoryPluginInterfac
    *
    * @todo
    */
-
   /**
    * Add serialized entity to the JS Contexts.
    *
-   * @param \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $data
+   * @param EntityAdapter $data
    *   The entity to serialize.
    * @param array $js_contexts
    *   The full array of JS contexts.
@@ -267,7 +268,7 @@ class ComponentBlock extends BlockBase implements ContainerFactoryPluginInterfac
       return;
     }
     foreach ($entity as $field_name => $field) {
-      /** @var \Drupal\Core\Field\FieldItemListInterface $field */
+      /** @var FieldItemListInterface $field */
       $field_access = $field->access('view', NULL, TRUE);
 
       // @todo Used addCacheableDependency($field_access);
@@ -282,7 +283,7 @@ class ComponentBlock extends BlockBase implements ContainerFactoryPluginInterfac
   /**
    * Get an array of serialized JS contexts.
    *
-   * @param \Drupal\Component\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    *   The contexts to serialize.
    *
    * @return array
diff --git a/src/Plugin/Derivative/ComponentBlockDeriver.php b/src/Plugin/Derivative/ComponentBlockDeriver.php
index 3b7f822..a52dbcf 100644
--- a/src/Plugin/Derivative/ComponentBlockDeriver.php
+++ b/src/Plugin/Derivative/ComponentBlockDeriver.php
@@ -16,14 +16,14 @@ class ComponentBlockDeriver extends DeriverBase implements ContainerDeriverInter
   /**
    * The component discovery service.
    *
-   * @var \Drupal\Component\ComponentDiscoveryInterface
+   * @var ComponentDiscoveryInterface
    */
   protected $componentDiscovery;
 
   /**
    * ComponentBlockDeriver constructor.
    *
-   * @param \Drupal\Component\ComponentDiscoveryInterface $component_discovery
+   * @param ComponentDiscoveryInterface $component_discovery
    *   The component discovery service.
    */
   public function __construct(ComponentDiscoveryInterface $component_discovery) {
@@ -64,7 +64,7 @@ class ComponentBlockDeriver extends DeriverBase implements ContainerDeriverInter
    * @param array $contexts
    *   Contexts as defined in component label.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinition[]
+   * @return ContextDefinition[]
    *   Array of context to be used by block module
    *
    * @todo where is this defined in block module
