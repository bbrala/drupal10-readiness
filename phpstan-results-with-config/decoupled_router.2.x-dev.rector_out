modules/contrib/decoupled_router/decoupled_router.api.php
modules/contrib/decoupled_router/decoupled_router.module
modules/contrib/decoupled_router/src/CacheInvalidator.php
modules/contrib/decoupled_router/src/Controller/PathTranslator.php
modules/contrib/decoupled_router/src/EventSubscriber/RedirectPathTranslatorSubscriber.php
modules/contrib/decoupled_router/src/EventSubscriber/RouterPathTranslatorSubscriber.php
modules/contrib/decoupled_router/src/PathTranslatorEvent.php
modules/contrib/decoupled_router/tests/modules/test_decoupled_router/test_decoupled_router.module
modules/contrib/decoupled_router/tests/src/Functional/DecoupledRouterFunctionalTest.php
modules/contrib/decoupled_router/tests/src/Functional/DecoupledRouterInfoAlterTest.php

6 files with changes
====================

1) modules/contrib/decoupled_router/tests/src/Functional/DecoupledRouterInfoAlterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\decoupled_router\Functional;

+use Drupal\user\Entity\User;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType([
       'type' => 'article',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/decoupled_router/tests/src/Functional/DecoupledRouterFunctionalTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\decoupled_router\Functional;

+use Drupal\user\Entity\User;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Language\Language;
 use Drupal\Core\Url;
@@ @@
   /**
    * The user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * The nodes.
    *
-   * @var \Drupal\node\Entity\Node[]
+   * @var Node[]
    */
   protected $nodes = [];

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $language = ConfigurableLanguage::createFromLangcode('ca');
     $language->save();
@@ @@
    * @param int $num_articles
    *   Number of articles to create.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createDefaultContent($num_articles) {
     $random = $this->getRandomGenerator();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/decoupled_router/src/PathTranslatorEvent.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The response.
    *
-   * @var \Drupal\Core\Cache\CacheableJsonResponse
+   * @var CacheableJsonResponse
    */
   private $response;

@@ @@
   /**
    * PathTranslatorEvent constructor.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $kernel
+   * @param HttpKernelInterface $kernel
    *   The kernel.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param int $requestType
    *   The type of request: master or subrequest.
@@ @@
   /**
    * Returns the response object.
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
+   * @return CacheableJsonResponse
    *   The response.
    */
   public function getResponse() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/decoupled_router/src/EventSubscriber/RouterPathTranslatorSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\decoupled_router\EventSubscriber;

+use Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\Core\Cache\CacheableMetadata;
@@ @@
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The router.
    *
-   * @var \Symfony\Component\Routing\Matcher\UrlMatcherInterface
+   * @var UrlMatcherInterface
    */
   protected $router;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * RouterPathTranslatorSubscriber constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Symfony\Component\Routing\Matcher\UrlMatcherInterface $router
+   * @param UrlMatcherInterface $router
    *   The router.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\path_alias\AliasManagerInterface $aliasManager
+   * @param AliasManagerInterface $aliasManager
    *   The alias manager.
    */
   public function __construct(
@@ @@
     // If the route is JSON API, it means that JSON API is installed and its
     // services can be used.
     if ($this->moduleHandler->moduleExists('jsonapi')) {
-      /** @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $rt_repo */
+      /** @var ResourceTypeRepositoryInterface $rt_repo */
       $rt_repo = $this->container->get('jsonapi.resource_type.repository');
       $rt = $rt_repo->get($entity_type_id, $entity->bundle());
       $type_name = $rt->getTypeName();
@@ @@
    */
   protected function findEntityAndKeys(array $match_info) {
     $entity = NULL;
-    /** @var \Symfony\Component\Routing\Route $route */
+    /** @var Route $route */
     $route = $match_info[RouteObjectInterface::ROUTE_OBJECT];
     $route_parameters = $route->getOption('parameters');
     $route_parameter_entity_key = 'entity';
@@ @@
     }
     else {
       $entity_type_id = $this->findEntityTypeFromRoute($route);
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       // @todo $match_info[$entity_type_id] is broken for JSON API 2.x routes.
       // Now it will be $match_info[$entity_type_id] for core and
       // $match_info['entity'] for JSON API :-(.
@@ @@
    * If there are more than one parameter, this function will return the first
    * one.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route.
    *
    * @return string|null
@@ @@
    *
    * @param string $path
    *   The path that can contain the subdir prefix.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request to extract the path prefix from.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/decoupled_router/src/Controller/PathTranslator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\decoupled_router\Controller;

+use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\decoupled_router\PathTranslatorEvent;
@@ @@
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * EventInfoController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The HTTP kernel.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher, HttpKernelInterface $http_kernel) {
@@ @@
     );
     // Event subscribers are in charge of setting the appropriate response,
     // including cacheability metadata.
-    $this->eventDispatcher->dispatch(PathTranslatorEvent::TRANSLATE, $event);
-    /** @var \Drupal\Core\Cache\CacheableJsonResponse $response */
+    $this->eventDispatcher->dispatch($event, PathTranslatorEvent::TRANSLATE);
+    /** @var CacheableJsonResponse $response */
     $response = $event->getResponse();
     $response->headers->add(['Content-Type' => 'application/json']);
     $response->getCacheableMetadata()->addCacheContexts([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/decoupled_router/src/CacheInvalidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\decoupled_router;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   private $invalidator;

@@ @@
   /**
    * CacheInvalidator constructor.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $invalidator
+   * @param CacheTagsInvalidatorInterface $invalidator
    *   The cache tag invalidator.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manger.
    */
   public function __construct(CacheTagsInvalidatorInterface $invalidator, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * @param array $path
    *   The path array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @see https://www.drupal.org/project/drupal/issues/2480077
    */
@@ @@
    * @return string[]
    *   The merged array of cache tags, if any.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private function getTagsBySourcePath($source_path) {
     $tags = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 6 files have been changed by Rector                                       

