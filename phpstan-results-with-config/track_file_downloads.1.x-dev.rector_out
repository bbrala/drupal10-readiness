modules/contrib/track_file_downloads/src/Controller/TrackingFileDownloadController.php
modules/contrib/track_file_downloads/src/Entity/FileTracker.php
modules/contrib/track_file_downloads/src/Entity/FileTrackerInterface.php
modules/contrib/track_file_downloads/src/Entity/FileTrackerViewsData.php
modules/contrib/track_file_downloads/src/EventSubscriber/RouteAlterSubscriber.php
modules/contrib/track_file_downloads/src/FileTrackerAccessControlHandler.php
modules/contrib/track_file_downloads/src/FileTrackerFileUsage.php
modules/contrib/track_file_downloads/src/FileTrackerHtmlRouteProvider.php
modules/contrib/track_file_downloads/src/FileTrackerListBuilder.php
modules/contrib/track_file_downloads/tests/src/Functional/TrackFileDownloadsFunctionalTest.php
modules/contrib/track_file_downloads/track_file_downloads.module

9 files with changes
====================

1) modules/contrib/track_file_downloads/track_file_downloads.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\FileInterface;
 /**
  * @file
  * Module file for track_file_downloads.
@@ @@
  * Implements hook_ENTITY_TYPE_insert().
  */
 function track_file_downloads_file_insert(EntityInterface $entity) {
-  /** @var \Drupal\file\FileInterface $entity */
+  /** @var FileInterface $entity */
   if (\Drupal::service('stream_wrapper_manager')->getScheme($entity->getFileUri()) !== 'private') {
     return;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/track_file_downloads/tests/src/Functional/TrackFileDownloadsFunctionalTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\track_file_downloads\Functional;

+use Drupal\file\FileInterface;
+use Drupal\user\UserInterface;
+use Drupal\track_file_downloads\Entity\FileTrackerInterface;
 use Drupal\Core\Url;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * The test file.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $file;

@@ @@
   /**
    * The user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
     $usage = \Drupal::service('file.usage')->listUsage($this->file);
     $this->assertArrayNotHasKey('file_tracker', $usage['file']);
     $this->assertNotEmpty($usage['file']['node']);
-    /** @var \Drupal\track_file_downloads\Entity\FileTrackerInterface $tracker */
+    /** @var FileTrackerInterface $tracker */
     $tracker = reset($entities);
     $this->assertDownloadCount(0, $tracker->id());
-    $url = Url::fromUri(file_create_url($tracker->getFile()->getFileUri()));
+    $url = \Drupal::service('file_url_generator')->generate($tracker->getFile()->getFileUri());
     $this->drupalGet($url);
     $this->assertDownloadCount(1, $tracker->id());
     $this->grantPermissions(Role::load(RoleInterface::AUTHENTICATED_ID), ['skip file tracking']);
@@ @@
   protected function assertDownloadCount($count, $entity_id) {
     $storage = \Drupal::entityTypeManager()->getStorage('file_tracker');
     $storage->resetCache([$entity_id]);
-    /** @var \Drupal\track_file_downloads\Entity\FileTrackerInterface $tracker */
+    /** @var FileTrackerInterface $tracker */
     $tracker = $storage->load($entity_id);
     $this->assertEquals($count, $tracker->getDownloadCount());
   }
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/track_file_downloads/src/FileTrackerListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\track_file_downloads;

+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
     /* @var $entity \Drupal\track_file_downloads\Entity\FileTracker */
     $row['file'] = $entity->getFile()->label();
     $row['downloads'] = $entity->getDownloadCount();
-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date_formatter = \Drupal::service('date.formatter');
     $row['last_download_date'] = $date_formatter->format($entity->getLastDownloadedDate());
     return $row;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/track_file_downloads/src/FileTrackerHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/track_file_downloads/src/FileTrackerFileUsage.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The parent service we are decorating.
    *
-   * @var \Drupal\file\FileUsage\DatabaseFileUsageBackend
+   * @var DatabaseFileUsageBackend
    */
   protected $parentService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/track_file_downloads/src/FileTrackerAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\track_file_downloads;

+use Drupal\track_file_downloads\Entity\FileTrackerInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
       return AccessResult::allowed();
     }

-    /** @var \Drupal\track_file_downloads\Entity\FileTrackerInterface $entity */
+    /** @var FileTrackerInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view file tracker entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/track_file_downloads/src/EventSubscriber/RouteAlterSubscriber.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Alter the system file routes so we can track downloads.
    *
-   * @param \Drupal\Core\Routing\RouteBuildEvent $event
+   * @param RouteBuildEvent $event
    *   The event to process.
    */
   public function onRoutingAlter(RouteBuildEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/track_file_downloads/src/Entity/FileTrackerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\track_file_downloads\Entity;

+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\ContentEntityInterface;

 /**
@@ @@
   /**
    * Gets the file if one exists.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file this entity is tracking.
    */
   public function getFile();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/track_file_downloads/src/Controller/TrackingFileDownloadController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\track_file_downloads\Controller;

+use Drupal\track_file_downloads\Entity\FileTracker;
 use Drupal\system\FileDownloadController;
 use Symfony\Component\HttpFoundation\Request;

@@ @@
     // Find the related tracking entity.
     $tracker_storage = $this->entityTypeManager()->getStorage('file_tracker');
     $entities = $tracker_storage->loadByProperties(['file__target_id' => $file->id()]);
-    /** @var \Drupal\track_file_downloads\Entity\FileTracker $tracker */
+    /** @var FileTracker $tracker */
     if (!$tracker = reset($entities)) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

