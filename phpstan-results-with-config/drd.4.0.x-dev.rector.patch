diff --git a/drd.install b/drd.install
index fe6c7f7..ce50c7a 100644
--- a/drd.install
+++ b/drd.install
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\drd\Entity\ReleaseInterface;
+use Drupal\drd\Entity\DomainInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Serialization\Yaml;
@@ -29,7 +31,7 @@ function drd_install() {
 function drd_update_8001() {
   $majors = [];
   foreach (Release::loadMultiple() as $release) {
-    /** @var \Drupal\drd\Entity\ReleaseInterface $release */
+    /** @var ReleaseInterface $release */
     $major = $release->getMajor();
     if ($major === NULL) {
       continue;
@@ -66,7 +68,7 @@ function drd_update_8001() {
  * Update view definitions.
  */
 function drd_update_8002() {
-  $config_path = drupal_get_path('module', 'drd') . '/config/optional/views.view.drd_';
+  $config_path = \Drupal::service('extension.list.module')->getPath('drd') . '/config/optional/views.view.drd_';
   foreach (['domains_per_project', 'project', 'releases_per_domain'] as $view) {
     $data = Yaml::decode(file_get_contents($config_path . $view . '.yml'));
     Drupal::configFactory()
@@ -83,7 +85,7 @@ function drd_update_8002() {
 function drd_update_8003() {
   $n = 0;
   foreach (Domain::loadMultiple() as $domain) {
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     $domain->resetCryptSettings();
     $n++;
   }
@@ -93,7 +95,7 @@ function drd_update_8003() {
 /**
  * Add new field "gitrepo" to core entities.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function drd_update_8004() {
   if ($core_entity_type = Drupal::entityTypeManager()->getDefinition('drd_core')) {
diff --git a/modules/drd_migrate/src/Commands/Drush.php b/modules/drd_migrate/src/Commands/Drush.php
index fc44f83..a467c0a 100644
--- a/modules/drd_migrate/src/Commands/Drush.php
+++ b/modules/drd_migrate/src/Commands/Drush.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\drd_migrate\Commands;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\drd_migrate\Import;
 use Drush\Commands\DrushCommands;
 
@@ -13,14 +16,14 @@ use Drush\Commands\DrushCommands;
 class Drush extends DrushCommands {
 
   /**
-   * @var \Drupal\drd_migrate\Import
+   * @var Import
    */
   protected $service;
 
   /**
    * Drush constructor.
    *
-   * @param \Drupal\drd_migrate\Import $service
+   * @param Import $service
    */
   public function __construct(Import $service) {
     parent::__construct();
@@ -33,9 +36,9 @@ class Drush extends DrushCommands {
    * @param string $inventory
    *   Filename containing the json with you DRD 7 inventory.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @command drd:migratefromd7
    * @aliases drd-migrate-from-d7
    */
diff --git a/modules/drd_migrate/src/Import.php b/modules/drd_migrate/src/Import.php
index fcf9caf..63dc0a8 100644
--- a/modules/drd_migrate/src/Import.php
+++ b/modules/drd_migrate/src/Import.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\drd_migrate;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\drd\Entity\Core;
 use Drupal\Component\Serialization\Json;
 use Drupal\Console\Core\Style\DrupalStyle;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -18,20 +23,20 @@ use Exception;
 class Import {
 
   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Import constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param AccountProxyInterface $current_user
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(AccountProxyInterface $current_user, EntityTypeManagerInterface $entity_type_manager) {
     $this->currentUser = $current_user;
@@ -73,9 +78,9 @@ class Import {
    * @param \Drupal\Console\Core\Style\DrupalStyle $io
    *   The IO object from Drush or Console for output.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function execute($filename, DrupalStyle $io = NULL) {
@@ -90,14 +95,14 @@ class Import {
       $this->output($io, 'Inventory file can not be read!', TRUE);
       return;
     }
-    /** @var \Drupal\Core\Session\AccountInterface $account */
+    /** @var AccountInterface $account */
     $account = $this->entityTypeManager->getStorage('user')->load(1);
     $this->currentUser->setAccount($account);
     $storage = $this->entityTypeManager->getStorage('drd_core');
 
     foreach ($inventory as $id => $coredomains) {
       $this->output($io, 'Import core ' . $id);
-      /** @var \Drupal\drd\Entity\Core $core */
+      /** @var Core $core */
       $core = $storage->create([
         'name' => 'Migrate ' . $id,
       ]);
diff --git a/modules/drd_pi/drd_pi.module b/modules/drd_pi/drd_pi.module
index fe5a03d..82a7bb0 100644
--- a/modules/drd_pi/drd_pi.module
+++ b/modules/drd_pi/drd_pi.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\drd\Entity\BaseInterface;
@@ -74,14 +75,14 @@ function drd_pi_entity_base_field_info(EntityTypeInterface $entity_type) {
 /**
  * Get value of a drd_pi field from a DRD entity.
  *
- * @param \Drupal\drd\Entity\BaseInterface $entity
+ * @param BaseInterface $entity
  *   The DRD entity.
  * @param string $type
  *   The field type.
  *
  * @return string
  *   The value.
- * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+ * @throws MissingDataException
  */
 function drd_pi_get_entity_value(BaseInterface $entity, $type) {
   return $entity->get('pi_id_' . $type)->get(0)->getValue()['value'];
diff --git a/modules/drd_pi/src/DrdPiAccount.php b/modules/drd_pi/src/DrdPiAccount.php
index 12d525d..a70cd10 100644
--- a/modules/drd_pi/src/DrdPiAccount.php
+++ b/modules/drd_pi/src/DrdPiAccount.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\drd_pi;
 
+use Drupal\drd\Logging;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Http\ClientFactory;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\drd\Entity\BaseInterface;
 use Drupal;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use mikehaertl\shellcommand\Command as ShellCommand;
@@ -28,7 +36,7 @@ abstract class DrdPiAccount extends ConfigEntityBase implements DrdPiAccountInte
   /**
    * Logging service for output.
    *
-   * @var \Drupal\drd\Logging
+   * @var Logging
    */
   protected $logging;
 
@@ -63,12 +71,12 @@ abstract class DrdPiAccount extends ConfigEntityBase implements DrdPiAccountInte
   /**
    * Configuration of the acocunt plugin.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $httpClientFactory;
 
@@ -124,10 +132,10 @@ abstract class DrdPiAccount extends ConfigEntityBase implements DrdPiAccountInte
    * @param DrdPiEntityInterface $parent
    *   The optional parent entity to which the list of entities are attached.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws MissingDataException
    */
   protected function syncEntities(array &$platform, $type, DrdPiEntityInterface $parent = NULL) {
 
@@ -150,7 +158,7 @@ abstract class DrdPiAccount extends ConfigEntityBase implements DrdPiAccountInte
       }
     }
     $storage = $this->entityTypeManager()->getStorage('drd_' . $type);
-    /** @var \Drupal\drd\Entity\BaseInterface[] $internal */
+    /** @var BaseInterface[] $internal */
     $internal = $storage->loadByProperties($properties);
 
     $ids_with_pi = [];
@@ -198,10 +206,10 @@ abstract class DrdPiAccount extends ConfigEntityBase implements DrdPiAccountInte
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws MissingDataException
    */
   public function sync(): DrdPiAccountInterface {
     $this->logging->log('info', 'Receiving hosts');
diff --git a/modules/drd_pi/src/DrdPiAccountForm.php b/modules/drd_pi/src/DrdPiAccountForm.php
index db9a14e..d73a191 100644
--- a/modules/drd_pi/src/DrdPiAccountForm.php
+++ b/modules/drd_pi/src/DrdPiAccountForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drd_pi;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -16,7 +18,7 @@ abstract class DrdPiAccountForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\drd_pi\DrdPiAccountInterface $account */
+    /** @var DrdPiAccountInterface $account */
     $account = $this->entity;
 
     $form['status'] = [
@@ -50,8 +52,8 @@ abstract class DrdPiAccountForm extends EntityForm {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityStorageException
+   * @throws EntityMalformedException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $status = $this->entity->save();
diff --git a/modules/drd_pi/src/DrdPiDomain.php b/modules/drd_pi/src/DrdPiDomain.php
index 0d3f8ca..72a4136 100644
--- a/modules/drd_pi/src/DrdPiDomain.php
+++ b/modules/drd_pi/src/DrdPiDomain.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drd_pi;
 
+use Drupal\drd\Entity\DomainInterface;
+use Drupal\drd\Entity\CoreInterface;
 use Drupal\drd\Entity\Domain;
 use Exception;
 
@@ -106,9 +108,9 @@ class DrdPiDomain extends DrdPiEntity {
       'pi_id_domain' => $this->id,
     ]);
 
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     $domain = $this->getDrdEntity();
-    /** @var \Drupal\drd\Entity\CoreInterface $core */
+    /** @var CoreInterface $core */
     $core = $this->core->getDrdEntity();
 
     $domain->initValues('');
diff --git a/modules/drd_pi/src/DrdPiEntity.php b/modules/drd_pi/src/DrdPiEntity.php
index 9e14738..59b0357 100644
--- a/modules/drd_pi/src/DrdPiEntity.php
+++ b/modules/drd_pi/src/DrdPiEntity.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drd_pi;
 
+use Drupal\drd\Logging;
+use Drupal\Core\Http\ClientFactory;
 use Drupal;
 use Drupal\drd\Entity\BaseInterface;
 
@@ -34,7 +36,7 @@ abstract class DrdPiEntity implements DrdPiEntityInterface {
   /**
    * DrdEntity which matches this DrdPiEntity.
    *
-   * @var \Drupal\drd\Entity\BaseInterface
+   * @var BaseInterface
    */
   protected $entity;
 
@@ -48,12 +50,12 @@ abstract class DrdPiEntity implements DrdPiEntityInterface {
   /**
    * DRD logging service for console output.
    *
-   * @var \Drupal\drd\Logging
+   * @var Logging
    */
   protected $logging;
 
   /**
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $httpClientFactory;
 
diff --git a/modules/drd_pi/src/DrdPiEntityInterface.php b/modules/drd_pi/src/DrdPiEntityInterface.php
index f9c3e8a..3ce1dbe 100644
--- a/modules/drd_pi/src/DrdPiEntityInterface.php
+++ b/modules/drd_pi/src/DrdPiEntityInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd_pi;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\drd\Entity\BaseInterface;
 
 /**
@@ -36,7 +37,7 @@ interface DrdPiEntityInterface {
   /**
    * Set the matching Drd entity.
    *
-   * @param \Drupal\drd\Entity\BaseInterface $entity
+   * @param BaseInterface $entity
    *   The DRD entity.
    *
    * @return $this
@@ -46,7 +47,7 @@ interface DrdPiEntityInterface {
   /**
    * Get the matching DRD entity.
    *
-   * @return \Drupal\drd\Entity\BaseInterface
+   * @return BaseInterface
    *   The DRD entity.
    */
   public function getDrdEntity(): BaseInterface;
@@ -63,7 +64,7 @@ interface DrdPiEntityInterface {
    * Create the matching DRD entity.
    *
    * @return $this
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function create(): self;
@@ -72,7 +73,7 @@ interface DrdPiEntityInterface {
    * Update the matching DRD entity.
    *
    * @return $this
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function update(): self;
 
diff --git a/modules/drd_pi/src/Plugin/Action/Sync.php b/modules/drd_pi/src/Plugin/Action/Sync.php
index 744cc23..dc4c086 100644
--- a/modules/drd_pi/src/Plugin/Action/Sync.php
+++ b/modules/drd_pi/src/Plugin/Action/Sync.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd_pi\Plugin\Action;
 
+use Drupal\drd_pi\DrdPiAccountInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\drd\Plugin\Action\BaseGlobal;
@@ -21,17 +22,17 @@ class Sync extends BaseGlobal {
   /**
    * Return a list of all configured accounts of this type.
    *
-   * @return \Drupal\drd_pi\DrdPiAccountInterface[]
+   * @return DrdPiAccountInterface[]
    *   List of accounts.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getAccounts(): array {
     $accounts = [];
     foreach ($this->entityTypeManager->getDefinitions() as $definition) {
       if ($definition->entityClassImplements(DrdPiAccount::class)) {
         $storage = $this->entityTypeManager->getStorage($definition->id());
-        /** @var \Drupal\drd_pi\DrdPiAccountInterface $account */
+        /** @var DrdPiAccountInterface $account */
         foreach ($storage->loadMultiple() as $account) {
           if ($account->status()) {
             $accounts[] = $account;
diff --git a/modules/drd_pi/src/Plugin/Block/WidgetPlatforms.php b/modules/drd_pi/src/Plugin/Block/WidgetPlatforms.php
index b00d370..9f95b1a 100644
--- a/modules/drd_pi/src/Plugin/Block/WidgetPlatforms.php
+++ b/modules/drd_pi/src/Plugin/Block/WidgetPlatforms.php
@@ -91,7 +91,7 @@ class WidgetPlatforms extends WidgetBase {
   /**
    * Render ths table with accounts and entities and how many of each exist.
    *
-   * @return \Drupal\Component\Render\FormattableMarkup
+   * @return FormattableMarkup
    *   The formattable markup with the content.
    */
   protected function entitiesTable(): FormattableMarkup {
diff --git a/modules/drd_pi_acquia/src/Entity/AccountForm.php b/modules/drd_pi_acquia/src/Entity/AccountForm.php
index 4cda996..6349682 100644
--- a/modules/drd_pi_acquia/src/Entity/AccountForm.php
+++ b/modules/drd_pi_acquia/src/Entity/AccountForm.php
@@ -16,7 +16,7 @@ class AccountForm extends DrdPiAccountForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\drd_pi_acquia\Entity\AccountInterface $acquia_account */
+    /** @var AccountInterface $acquia_account */
     $acquia_account = $this->entity;
 
     $form['email'] = [
@@ -41,7 +41,7 @@ class AccountForm extends DrdPiAccountForm {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
-    /** @var \Drupal\drd_pi_acquia\Entity\AccountInterface $acquia_account */
+    /** @var AccountInterface $acquia_account */
     $acquia_account = $this->entity;
     $acquia_account->setPrivateKey($form_state->getValue('private_key'));
   }
diff --git a/modules/drd_pi_pantheon/src/Entity/AccountForm.php b/modules/drd_pi_pantheon/src/Entity/AccountForm.php
index 68366da..1295ef5 100644
--- a/modules/drd_pi_pantheon/src/Entity/AccountForm.php
+++ b/modules/drd_pi_pantheon/src/Entity/AccountForm.php
@@ -16,7 +16,7 @@ class AccountForm extends DrdPiAccountForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\drd_pi_pantheon\Entity\AccountInterface $pantheon_account */
+    /** @var AccountInterface $pantheon_account */
     $pantheon_account = $this->entity;
     $form['machine_token'] = [
       '#type' => 'textfield',
@@ -34,7 +34,7 @@ class AccountForm extends DrdPiAccountForm {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
-    /** @var \Drupal\drd_pi_pantheon\Entity\AccountInterface $pantheon_account */
+    /** @var AccountInterface $pantheon_account */
     $pantheon_account = $this->entity;
     $pantheon_account->setMachineToken($form_state->getValue('machine_token'));
   }
diff --git a/modules/drd_pi_platformsh/src/Entity/Account.php b/modules/drd_pi_platformsh/src/Entity/Account.php
index 2e464ec..a2f3291 100644
--- a/modules/drd_pi_platformsh/src/Entity/Account.php
+++ b/modules/drd_pi_platformsh/src/Entity/Account.php
@@ -54,7 +54,7 @@ class Account extends DrdPiAccount implements AccountInterface {
   /**
    * The client object to talk to the PlatformSH platform.
    *
-   * @var \Platformsh\Client\PlatformClient
+   * @var PlatformClient
    */
   protected $client;
 
diff --git a/modules/drd_pi_platformsh/src/Entity/AccountForm.php b/modules/drd_pi_platformsh/src/Entity/AccountForm.php
index 0e6dbe2..cd7b2ef 100644
--- a/modules/drd_pi_platformsh/src/Entity/AccountForm.php
+++ b/modules/drd_pi_platformsh/src/Entity/AccountForm.php
@@ -16,7 +16,7 @@ class AccountForm extends DrdPiAccountForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\drd_pi_platformsh\Entity\AccountInterface $platformsh_account */
+    /** @var AccountInterface $platformsh_account */
     $platformsh_account = $this->entity;
     $form['api_token'] = [
       '#type' => 'textfield',
@@ -34,7 +34,7 @@ class AccountForm extends DrdPiAccountForm {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
-    /** @var \Drupal\drd_pi_platformsh\Entity\AccountInterface $platformsh_account */
+    /** @var AccountInterface $platformsh_account */
     $platformsh_account = $this->entity;
     $platformsh_account->setApiToken($form_state->getValue('api_token'));
   }
diff --git a/src/ActionManager.php b/src/ActionManager.php
index f2f5045..2ecdbc3 100644
--- a/src/ActionManager.php
+++ b/src/ActionManager.php
@@ -18,7 +18,7 @@ use Traversable;
 class ActionManager extends CoreActionManager implements ActionManagerInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/ActionPermissions.php b/src/ActionPermissions.php
index e2d86a0..f461bba 100644
--- a/src/ActionPermissions.php
+++ b/src/ActionPermissions.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\drd;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\system\ActionConfigEntityInterface;
+use Drupal\drd\Plugin\Action\BaseInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -12,14 +16,14 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ActionPermissions implements ContainerInjectionInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * ActionPermissions constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ -36,14 +40,14 @@ class ActionPermissions implements ContainerInjectionInterface {
 
   /**
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function permissions(): array {
     $actionStorage = $this->entityTypeManager->getStorage('action');
     $actions = array_filter($actionStorage->loadMultiple(),
       static function ($action) {
-        /** @var \Drupal\system\ActionConfigEntityInterface $action */
+        /** @var ActionConfigEntityInterface $action */
         return in_array($action->getType(), [
           'drd',
           'drd_host',
@@ -53,9 +57,9 @@ class ActionPermissions implements ContainerInjectionInterface {
       });
 
     $permissions = [];
-    /** @var \Drupal\system\ActionConfigEntityInterface $action */
+    /** @var ActionConfigEntityInterface $action */
     foreach ($actions as $action) {
-      /** @var \Drupal\drd\Plugin\Action\BaseInterface $drdAction */
+      /** @var BaseInterface $drdAction */
       $drdAction = $action->getPlugin();
       $permissions[$drdAction->getPluginId()] = [
         'title' => t('Execute action @name', ['@name' => $action->getPlugin()->getPluginDefinition()['label']]),
diff --git a/src/ActionWidget.php b/src/ActionWidget.php
index 5740fa3..1b4f30e 100644
--- a/src/ActionWidget.php
+++ b/src/ActionWidget.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\drd;
 
+use Drupal\taxonomy\Entity\Term;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\drd\Entity\BaseInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerTrait;
@@ -28,7 +33,7 @@ class ActionWidget implements ActionWidgetInterface {
   /**
    * Term for action manager.
    *
-   * @var \Drupal\taxonomy\Entity\Term
+   * @var Term
    */
   private $term;
 
@@ -42,48 +47,48 @@ class ActionWidget implements ActionWidgetInterface {
   /**
    * Selected action entity.
    *
-   * @var \Drupal\system\ActionConfigEntityInterface
+   * @var ActionConfigEntityInterface
    */
   private $action;
 
   /**
    * An array of actions that can be executed.
    *
-   * @var \Drupal\system\ActionConfigEntityInterface[]
+   * @var ActionConfigEntityInterface[]
    */
   private $actions = [];
 
   /**
    * The action storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $actionStorage;
 
   /**
    * List of entities for which actions should be executed.
    *
-   * @var \Drupal\drd\Entity\BaseInterface[]
+   * @var BaseInterface[]
    */
   protected $entities;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\drd\QueueManager
+   * @var QueueManager
    */
   protected $queueManager;
 
   /**
    * ActionWidget constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\drd\QueueManager $queueManager
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param QueueManager $queueManager
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, QueueManager $queueManager) {
     $this->entityTypeManager = $entityTypeManager;
@@ -220,7 +225,7 @@ class ActionWidget implements ActionWidgetInterface {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->action = $this->actions[$form_state->getValue('action')];
-    /** @var \Drupal\drd\Plugin\Action\BaseEntityInterface $actionPlugin */
+    /** @var BaseEntityInterface $actionPlugin */
     $actionPlugin = $this->action->getPlugin();
     if ($actionPlugin instanceof BaseConfigurableInterface) {
       $actionPlugin->submitConfigurationForm($form, $form_state);
@@ -228,7 +233,7 @@ class ActionWidget implements ActionWidgetInterface {
 
     if ($actionPlugin instanceof BaseEntityInterface) {
       $permittedEntities = [];
-      /** @var \Drupal\drd\Entity\BaseInterface $entity */
+      /** @var BaseInterface $entity */
       foreach ($this->entities as $entity) {
         // Skip execution if the user did not have access.
         if (!$actionPlugin->access($entity)) {
diff --git a/src/ActionWidgetInterface.php b/src/ActionWidgetInterface.php
index 94669a5..d98f57e 100644
--- a/src/ActionWidgetInterface.php
+++ b/src/ActionWidgetInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd;
 
+use Drupal\drd\Plugin\Action\BaseInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\system\ActionConfigEntityInterface;
 
@@ -29,7 +30,7 @@ interface ActionWidgetInterface {
   /**
    * Get all action plugins.
    *
-   * @return \Drupal\drd\Plugin\Action\BaseInterface[]
+   * @return BaseInterface[]
    *   All action plugins depending on mode and/or term.
    */
   public function getActionPlugins(): array;
@@ -37,7 +38,7 @@ interface ActionWidgetInterface {
   /**
    * Get the selected action.
    *
-   * @return \Drupal\system\ActionConfigEntityInterface
+   * @return ActionConfigEntityInterface
    *   The selected action.
    */
   public function getSelectedAction(): ActionConfigEntityInterface;
@@ -55,7 +56,7 @@ interface ActionWidgetInterface {
    *
    * @param array $form
    *   The form array .
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param array $options
    *   Options for the form.
@@ -67,7 +68,7 @@ interface ActionWidgetInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateForm(array &$form, FormStateInterface $form_state);
@@ -87,7 +88,7 @@ interface ActionWidgetInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitForm(array &$form, FormStateInterface $form_state);
diff --git a/src/Annotation/Auth.php b/src/Annotation/Auth.php
index 3e6164e..8585563 100644
--- a/src/Annotation/Auth.php
+++ b/src/Annotation/Auth.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class Auth extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/Update.php b/src/Annotation/Update.php
index 9524f4f..8ed9ba0 100644
--- a/src/Annotation/Update.php
+++ b/src/Annotation/Update.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class Update extends Plugin {
   /**
    * The administrative label of the DRD Update.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Cleanup.php b/src/Cleanup.php
index 4027b4a..b94e8a9 100644
--- a/src/Cleanup.php
+++ b/src/Cleanup.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd;
 
+use Drupal\drd\Entity\CoreInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -23,32 +24,32 @@ class Cleanup {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Cleanup constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, Connection $database) {
@@ -153,7 +154,7 @@ class Cleanup {
     // Remember core versions.
     $cores = [];
     foreach (Core::loadMultiple() as $core) {
-      /** @var \Drupal\drd\Entity\CoreInterface $core */
+      /** @var CoreInterface $core */
       $cores[] = [
         'core' => $core,
         'version' => ($release = $core->getDrupalRelease()) ? $release->getVersion() : '',
@@ -190,7 +191,7 @@ class Cleanup {
 
     // Re-create Drupal core versions.
     foreach ($cores as $item) {
-      /** @var \Drupal\drd\Entity\CoreInterface $core */
+      /** @var CoreInterface $core */
       $core = $item['core'];
       $release = Release::findOrCreate('core', 'drupal', $item['version']);
       try {
diff --git a/src/Command/BaseEntitySelect.php b/src/Command/BaseEntitySelect.php
index 85f466b..2d049e9 100644
--- a/src/Command/BaseEntitySelect.php
+++ b/src/Command/BaseEntitySelect.php
@@ -18,10 +18,10 @@ trait BaseEntitySelect {
   /**
    * Load and configure service to select entities.
    *
-   * @param \Symfony\Component\Console\Input\InputInterface $input
+   * @param InputInterface $input
    *   The input interface from console.
    *
-   * @return \Drupal\drd\SelectEntitiesInterface
+   * @return SelectEntitiesInterface
    *   DRD service for entity selction.
    */
   protected function getService(InputInterface $input): SelectEntitiesInterface {
diff --git a/src/Commands/DrdCommands.php b/src/Commands/DrdCommands.php
index aa54298..aee12f0 100644
--- a/src/Commands/DrdCommands.php
+++ b/src/Commands/DrdCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Commands;
 
+use Drupal\Core\Entity\EntityInterface;
 use Consolidation\AnnotatedCommand\CommandData;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
@@ -30,7 +31,7 @@ class DrdCommands extends DrushCommands {
   /**
    * DRD action which will be executed.
    *
-   * @var \Drupal\drd\Plugin\Action\BaseInterface
+   * @var BaseInterface
    */
   protected $action;
 
@@ -51,55 +52,55 @@ class DrdCommands extends DrushCommands {
   /**
    * List of entities for which the action will be executed.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\drd\Logging
+   * @var Logging
    */
   protected $logging;
 
   /**
-   * @var \Drupal\drd\QueueManager
+   * @var QueueManager
    */
   protected $queueManager;
 
   /**
-   * @var \Drupal\drd\Cleanup
+   * @var Cleanup
    */
   protected $cleanup;
 
   /**
-   * @var \Drupal\drd\SelectEntitiesInterface
+   * @var SelectEntitiesInterface
    */
   protected $entitiesService;
 
   /**
-   * @var \Drupal\drd\ActionManagerInterface
+   * @var ActionManagerInterface
    */
   protected $actionManager;
 
   /**
    * Constructor for Drush commands.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   * @param \Drupal\drd\Logging $logging
-   * @param \Drupal\drd\SelectEntitiesInterface $entities_service
-   * @param \Drupal\drd\QueueManager $queue_manager
-   * @param \Drupal\drd\Cleanup $cleanup
-   * @param \Drupal\drd\ActionManagerInterface $actionManager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param AccountInterface $current_user
+   * @param Logging $logging
+   * @param SelectEntitiesInterface $entities_service
+   * @param QueueManager $queue_manager
+   * @param Cleanup $cleanup
+   * @param ActionManagerInterface $actionManager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountInterface $current_user, Logging $logging, SelectEntitiesInterface $entities_service, QueueManager $queue_manager, Cleanup $cleanup, ActionManagerInterface $actionManager) {
     parent::__construct();
@@ -118,7 +119,7 @@ class DrdCommands extends DrushCommands {
   /**
    * Callback to validate arguments from the command line.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   Source of the command data.
    * @param array $arguments
    *   List of argument ids that are expected from the command line.
@@ -137,7 +138,7 @@ class DrdCommands extends DrushCommands {
   /**
    * Load and configure service to select entities.
    *
-   * @return \Drupal\drd\SelectEntitiesInterface
+   * @return SelectEntitiesInterface
    *   DRD service for entity selction.
    */
   protected function service(): SelectEntitiesInterface {
@@ -168,7 +169,7 @@ class DrdCommands extends DrushCommands {
       return $this;
     }
     try {
-      /** @var \Drupal\Core\Session\AccountInterface $account */
+      /** @var AccountInterface $account */
       $account = $this->entityTypeManager->getStorage('user')->load(1);
       $this->currentUser->setAccount($account);
     }
@@ -471,7 +472,7 @@ class DrdCommands extends DrushCommands {
   /**
    * Validation callback for the DomainMove command.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data to validate.
    *
    * @hook validate drd:domainmove
@@ -588,7 +589,7 @@ class DrdCommands extends DrushCommands {
   /**
    * Validation callback for the Download command.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data to validate.
    *
    * @hook validate drd:download
@@ -770,7 +771,7 @@ class DrdCommands extends DrushCommands {
    * @param string $tag
    *   The tag for which to list actions.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The formatted rows with fields.
    * @command drd:list:actions
    * @table-style default
@@ -779,13 +780,12 @@ class DrdCommands extends DrushCommands {
    *   type: Type
    *   label: Label
    * @default-fields id,type,label
-   *
    */
   public function listActions($tag): RowsOfFields {
     $this->actionKey = 'drd_action_list_action';
     $this->setOutput(new NullOutput());
     $rows = [];
-    /** @var \Drupal\drd\Plugin\Action\BaseInterface $action */
+    /** @var BaseInterface $action */
     foreach ($this->actionManager->getActionsByTerm($tag) as $action) {
       $rows[] = [
         'id' => $action->getPluginId(),
@@ -818,7 +818,7 @@ class DrdCommands extends DrushCommands {
    *   host-label: Host
    * @default-fields core-id,core-label,host-label
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The formatted rows with fields.
    */
   public function listCores(array $options = [
@@ -865,7 +865,7 @@ class DrdCommands extends DrushCommands {
    *   host-label: Host
    * @default-fields domain-id,domain-label,domain,core-label,host-label
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The formatted rows with fields.
    */
   public function listDomains(array $options = [
@@ -907,7 +907,7 @@ class DrdCommands extends DrushCommands {
    *   host-label: Host
    * @default-fields host-id,host-label
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The formatted rows with fields.
    */
   public function listHosts(array $options = [
@@ -968,7 +968,7 @@ class DrdCommands extends DrushCommands {
   /**
    * Validation callback for the MaintenanceMode command.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data to validate.
    *
    * @hook validate drd:maintenancemode
@@ -1017,7 +1017,7 @@ class DrdCommands extends DrushCommands {
   /**
    * Validation callback for the Php command.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data to validate.
    *
    * @hook validate drd:php
@@ -1395,7 +1395,7 @@ class DrdCommands extends DrushCommands {
   /**
    * Validation callback for the UserCredential command.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data to validate.
    *
    * @hook validate drd:user:credentials
diff --git a/src/ContextProvider/RouteContext.php b/src/ContextProvider/RouteContext.php
index 9a880de..41443be 100644
--- a/src/ContextProvider/RouteContext.php
+++ b/src/ContextProvider/RouteContext.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\ContextProvider;
 
+use Drupal\drd\Entity\BaseInterface;
 use Drupal;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Plugin\Context\Context;
@@ -42,14 +43,14 @@ abstract class RouteContext implements ContextProviderInterface, RouteContextInt
   /**
    * The route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The DRD entity if we are on a DRD entity context.
    *
-   * @var \Drupal\drd\Entity\BaseInterface
+   * @var BaseInterface
    */
   protected $entity;
 
@@ -63,7 +64,7 @@ abstract class RouteContext implements ContextProviderInterface, RouteContextInt
   /**
    * Constructs a new DrdRouteContext.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    */
   public function __construct(RouteMatchInterface $route_match) {
@@ -106,7 +107,7 @@ abstract class RouteContext implements ContextProviderInterface, RouteContextInt
   /**
    * Determine the entity of the current context.
    *
-   * @return \Drupal\drd\Entity\BaseInterface|bool
+   * @return BaseInterface|bool
    *   The entity if in DRD entity context or FALSE otherwise.
    */
   public function getEntity() {
diff --git a/src/Controller/Activity.php b/src/Controller/Activity.php
index 257cb9e..9e3cd2f 100644
--- a/src/Controller/Activity.php
+++ b/src/Controller/Activity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Controller;
 
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Link;
@@ -21,12 +22,12 @@ class Activity extends DbLogController {
   /**
    * Read the activity log and render that into a view.
    *
-   * @param \Drupal\drd\Entity\DomainInterface $drd_domain
+   * @param DomainInterface $drd_domain
    *   The domain for which to display the activity.
    *
    * @return array
    *   Renderable array of the domain's activity.
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function view(DomainInterface $drd_domain): array {
     $rows = [];
diff --git a/src/Controller/Dashboard.php b/src/Controller/Dashboard.php
index 4fa857b..b617051 100644
--- a/src/Controller/Dashboard.php
+++ b/src/Controller/Dashboard.php
@@ -12,14 +12,14 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class Dashboard extends ControllerBase {
 
   /**
-   * @var \Drupal\drd\Widgets
+   * @var Widgets
    */
   protected $widgets;
 
   /**
    * Dashboard constructor.
    *
-   * @param \Drupal\drd\Widgets $widgets
+   * @param Widgets $widgets
    */
   public function __construct(Widgets $widgets) {
     $this->widgets = $widgets;
diff --git a/src/Controller/Domain.php b/src/Controller/Domain.php
index 6f311e2..34293a0 100644
--- a/src/Controller/Domain.php
+++ b/src/Controller/Domain.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Controller;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\drd\Entity\DomainInterface;
@@ -20,12 +21,12 @@ class Domain extends ControllerBase {
    * Return from remote after initially setting the configuration to then
    * retrieve core details and all other hosted domains.
    *
-   * @param \Drupal\drd\Entity\DomainInterface $domain
+   * @param DomainInterface $domain
    *   Domain entity which just has been configured.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Destination where to go next.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function returnFromRemote(DomainInterface $domain): RedirectResponse {
@@ -44,10 +45,10 @@ class Domain extends ControllerBase {
   /**
    * Redirect to the remote domain by opening a new session.
    *
-   * @param \Drupal\drd\Entity\DomainInterface $domain
+   * @param DomainInterface $domain
    *   Domain entity for which to start a remote user session.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Remote destination with the established session or local domain page if
    *   session couldn't be established.
    */
diff --git a/src/Crypt/BaseMethod.php b/src/Crypt/BaseMethod.php
index a0244ac..c78979f 100644
--- a/src/Crypt/BaseMethod.php
+++ b/src/Crypt/BaseMethod.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\drd\Crypt;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Messenger\Messenger;
+use Drupal\drd\Encryption;
+use Drupal\Core\Extension\ModuleHandler;
 use Exception;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -13,34 +17,34 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class BaseMethod implements BaseMethodInterface {
 
   /**
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
-   * @var \Drupal\Core\Messenger\Messenger|object|null
+   * @var Messenger|object|null
    */
   protected $messenger;
 
   /**
-   * @var \Drupal\drd\Encryption|object|null
+   * @var Encryption|object|null
    */
   protected $encryption;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandler|object|null
+   * @var ModuleHandler|object|null
    */
   protected $moduleHandler;
 
   /**
    * BaseMethod constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    */
   public function __construct(ContainerInterface $container) {
     $this->container = $container;
diff --git a/src/Crypt/BaseMethodInterface.php b/src/Crypt/BaseMethodInterface.php
index 8b03fe8..d781d16 100644
--- a/src/Crypt/BaseMethodInterface.php
+++ b/src/Crypt/BaseMethodInterface.php
@@ -79,7 +79,7 @@ interface BaseMethodInterface {
   /**
    * Retrieve values from settings form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
diff --git a/src/DomainLocalCopy.php b/src/DomainLocalCopy.php
index f7d183f..1d7eda1 100644
--- a/src/DomainLocalCopy.php
+++ b/src/DomainLocalCopy.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -23,7 +24,7 @@ class DomainLocalCopy {
   /**
    * DRD settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $drdConfig;
 
@@ -65,7 +66,7 @@ class DomainLocalCopy {
   /**
    * DRD domain entity for which to create a local copy.
    *
-   * @var \Drupal\drd\Entity\DomainInterface
+   * @var DomainInterface
    */
   protected $domain;
 
@@ -91,32 +92,32 @@ class DomainLocalCopy {
   protected $coreVersion;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\drd\Encryption
+   * @var Encryption
    */
   protected $encryption;
 
   /**
    * DomainLocalCopy constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\drd\Encryption $encryption
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param FileSystemInterface $file_system
+   * @param ConfigFactoryInterface $config_factory
+   * @param Encryption $encryption
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system, ConfigFactoryInterface $config_factory, Encryption $encryption) {
     $this->entityTypeManager = $entity_type_manager;
@@ -164,7 +165,7 @@ class DomainLocalCopy {
   /**
    * Set the DRD domain entity.
    *
-   * @param \Drupal\drd\Entity\DomainInterface $domain
+   * @param DomainInterface $domain
    *   The domain entity.
    *
    * @return $this
@@ -235,7 +236,7 @@ class DomainLocalCopy {
 
     $this->mkdir($this->settingsDir);
 
-    $templatefilename = drupal_get_path('module', 'drd') . '/templates/DomainLocalCopy.v' . $this->coreVersion . '.settings.php.twig';
+    $templatefilename = \Drupal::service('extension.list.module')->getPath('drd') . '/templates/DomainLocalCopy.v' . $this->coreVersion . '.settings.php.twig';
 
     $twig_loader = new Twig_Loader_Array([]);
     $twig = new Twig_Environment($twig_loader);
diff --git a/src/Encryption.php b/src/Encryption.php
index 09848cc..47b52ac 100644
--- a/src/Encryption.php
+++ b/src/Encryption.php
@@ -21,30 +21,30 @@ class Encryption {
   /**
    * The encryption service.
    *
-   * @var \Drupal\encrypt\EncryptService
+   * @var EncryptService
    */
   protected $encryptionService;
 
   /**
    * The encryption profile.
    *
-   * @var \Drupal\encrypt\Entity\EncryptionProfile
+   * @var EncryptionProfile
    */
   protected $encryptionProfile;
 
   /**
    * The old encryption profile, only set if a profile change happened.
    *
-   * @var \Drupal\encrypt\Entity\EncryptionProfile
+   * @var EncryptionProfile
    */
   protected $oldEncryptionProfile;
 
   /**
    * Constructs an Encrypt.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\encrypt\EncryptService $encryptionService
+   * @param EncryptService $encryptionService
    *   The encryption service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EncryptService $encryptionService = NULL) {
diff --git a/src/EncryptionUpdate.php b/src/EncryptionUpdate.php
index c91c030..ab40ec9 100644
--- a/src/EncryptionUpdate.php
+++ b/src/EncryptionUpdate.php
@@ -21,32 +21,32 @@ class EncryptionUpdate {
   /**
    * The encryption service.
    *
-   * @var \Drupal\drd\Encryption
+   * @var Encryption
    */
   protected $encryptionService;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * EncryptionUpdate constructor.
    *
-   * @param \Drupal\drd\Encryption $encryptionService
+   * @param Encryption $encryptionService
    *   DRD encryption service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(Encryption $encryptionService, ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager) {
@@ -81,7 +81,7 @@ class EncryptionUpdate {
           // TODO: Log this exception.
           continue;
         }
-        /** @var \Drupal\drd\EncryptionEntityInterface $entity */
+        /** @var EncryptionEntityInterface $entity */
         foreach ($storage->loadMultiple() as $entity) {
           foreach ($entity->getEncryptedFieldNames() as $encryptedFieldName) {
             if ($entity instanceof ContentEntityInterface) {
diff --git a/src/Entity/BaseInterface.php b/src/Entity/BaseInterface.php
index 44fbb59..c53932d 100644
--- a/src/Entity/BaseInterface.php
+++ b/src/Entity/BaseInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -71,7 +72,7 @@ interface BaseInterface extends EntityInterface, ContentEntityInterface, EntityC
    *   unpublished.
    *
    * @return $this
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function setPublished($published): self;
 
diff --git a/src/Entity/Core.php b/src/Entity/Core.php
index 9ea09e3..546ea89 100644
--- a/src/Entity/Core.php
+++ b/src/Entity/Core.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity;
 
+use Drupal\drd\Update\ManagerStorageInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
@@ -141,7 +142,7 @@ class Core extends ContentEntityBase implements CoreInterface {
    * {@inheritdoc}
    */
   public function getUpdatePlugin(): PluginStorageInterface {
-    /** @var \Drupal\drd\Update\ManagerStorageInterface $updateManager */
+    /** @var ManagerStorageInterface $updateManager */
     $updateManager = Drupal::service('plugin.manager.drd_update.storage');
     return $updateManager->executableInstance($this->getUpdateSettings());
   }
diff --git a/src/Entity/CoreInterface.php b/src/Entity/CoreInterface.php
index 5943c3d..42fe2f2 100644
--- a/src/Entity/CoreInterface.php
+++ b/src/Entity/CoreInterface.php
@@ -30,7 +30,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Gets the Core host.
    *
-   * @return \Drupal\drd\Entity\HostInterface|NULL
+   * @return HostInterface|NULL
    *   Host of the Core.
    */
   public function getHost();
@@ -48,7 +48,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Gets the Core drupal release.
    *
-   * @return \Drupal\drd\Entity\ReleaseInterface|NULL
+   * @return ReleaseInterface|NULL
    *   Drupal release of the Core.
    */
   public function getDrupalRelease();
@@ -82,7 +82,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Get the update plugin for the core.
    *
-   * @return \Drupal\drd\Update\PluginStorageInterface
+   * @return PluginStorageInterface
    *   The update plugin.
    * @throws \Exception
    */
@@ -104,7 +104,7 @@ interface CoreInterface extends BaseInterface {
    * @param array $properties
    *   Properties for the query.
    *
-   * @return \Drupal\drd\Entity\DomainInterface[]
+   * @return DomainInterface[]
    *   List of domains of this core.
    */
   public function getDomains(array $properties = []): array;
@@ -112,7 +112,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Get the first active domain for this core.
    *
-   * @return \Drupal\drd\Entity\DomainInterface|null
+   * @return DomainInterface|null
    *   A domain entity.
    */
   public function getFirstActiveDomain();
@@ -127,7 +127,7 @@ interface CoreInterface extends BaseInterface {
    * @param bool $forceLockedSecurity
    *   Whether to locked security releases or not.
    *
-   * @return \Drupal\drd\Entity\ReleaseInterface[]
+   * @return ReleaseInterface[]
    *   List of release entities.
    */
   public function getAvailableUpdates($includeLocked = FALSE, $securityOnly = FALSE, $forceLockedSecurity = FALSE): array;
@@ -164,7 +164,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Set project releases being locked for this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface[] $releases
+   * @param ReleaseInterface[] $releases
    *   List of locked release entities.
    *
    * @return $this
@@ -174,7 +174,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Get project releases being locked by this core.
    *
-   * @return \Drupal\drd\Entity\ReleaseInterface[]
+   * @return ReleaseInterface[]
    *   List of releases.
    */
   public function getLockedReleases(): array;
@@ -182,7 +182,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Check if a release is locked for this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release to ckeck.
    * @param bool $checkGlobal
    *   Set to True if you also want to check global lock status.
@@ -195,7 +195,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Lock a release for this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release which should be locked.
    *
    * @return $this
@@ -205,7 +205,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Unlock a release for this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release which should be unlocked.
    *
    * @return $this
@@ -222,7 +222,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Set project releases being hacked on this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface[] $releases
+   * @param ReleaseInterface[] $releases
    *   List of hacked release entities.
    *
    * @return $this
@@ -232,7 +232,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Get project releases being hacked on this core.
    *
-   * @return \Drupal\drd\Entity\ReleaseInterface[]
+   * @return ReleaseInterface[]
    *   List of releases.
    */
   public function getHackedReleases(): array;
@@ -240,7 +240,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Check if a release is hacked on this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release to ckeck.
    *
    * @return bool
@@ -251,7 +251,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Mark a release as hacked on this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release which should be marked as hacked.
    *
    * @return $this
@@ -261,7 +261,7 @@ interface CoreInterface extends BaseInterface {
   /**
    * Mark a release as unhacked on this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release which should be marked as unhacked.
    *
    * @return $this
diff --git a/src/Entity/Domain.php b/src/Entity/Domain.php
index fa05a46..bbee9f1 100644
--- a/src/Entity/Domain.php
+++ b/src/Entity/Domain.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drd\Entity;
 
+use Drupal\drd\ActionManagerInterface;
+use Drupal\drd\HttpRequest;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal;
 use Drupal\Component\Render\FormattableMarkup;
@@ -75,7 +77,7 @@ class Domain extends ContentEntityBase implements DomainInterface {
   protected $cleanUrl = TRUE;
 
   /**
-   * @var \Drupal\drd\ActionManagerInterface
+   * @var ActionManagerInterface
    */
   protected $actionManager;
 
@@ -620,7 +622,7 @@ class Domain extends ContentEntityBase implements DomainInterface {
   public function getSupportedCryptMethods($cleanUrl = TRUE) {
     $this->cleanUrl = $cleanUrl;
 
-    /** @var \Drupal\drd\HttpRequest $request */
+    /** @var HttpRequest $request */
     $request = Drupal::service('drd.http_request');
     $request->setDomain($this)
       ->setQuery('drd-agent-crypt')
@@ -839,11 +841,11 @@ class Domain extends ContentEntityBase implements DomainInterface {
       $crypt = 'OpenSSL';
       $crypt_setting = ['cipher' => 'aes-128-cbc'];
     }
-    $crypt_setting['password'] = user_password(50);
+    $crypt_setting['password'] = \Drupal::service('password_generator')->generate(50);
     $this->set('auth', 'shared_secret');
     $this->set('crypt', $crypt);
     $this
-      ->setAuthSetting(['shared_secret' => ['secret' => user_password(50)]])
+      ->setAuthSetting(['shared_secret' => ['secret' => \Drupal::service('password_generator')->generate(50)]])
       ->setCryptSetting([$crypt => $crypt_setting]);
   }
 
diff --git a/src/Entity/DomainInterface.php b/src/Entity/DomainInterface.php
index c7fcc63..2b6cd8c 100644
--- a/src/Entity/DomainInterface.php
+++ b/src/Entity/DomainInterface.php
@@ -50,7 +50,7 @@ interface DomainInterface extends BaseInterface, EncryptionEntityInterface {
   /**
    * Gets the Domain core.
    *
-   * @return \Drupal\drd\Entity\CoreInterface|NULL
+   * @return CoreInterface|NULL
    *   Core of the Domain.
    */
   public function getCore();
@@ -149,7 +149,7 @@ interface DomainInterface extends BaseInterface, EncryptionEntityInterface {
    * @param string $query
    *   The query of the remote request.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Fully setup URL object.
    */
   public function buildUrl($query = ''): Url;
@@ -224,7 +224,7 @@ interface DomainInterface extends BaseInterface, EncryptionEntityInterface {
    * @var string $label
    *   The label for the link.
    *
-   * @return \Drupal\Core\GeneratedLink
+   * @return GeneratedLink
    *   The rendered link.
    */
   public function getRemoteLoginLink($label): GeneratedLink;
@@ -235,7 +235,7 @@ interface DomainInterface extends BaseInterface, EncryptionEntityInterface {
    * @var bool $initial
    *   Whether this is the initial setup or not.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The redirect URL after remote configuration.
    */
   public function getRemoteSetupRedirect($initial = FALSE): Url;
@@ -248,7 +248,7 @@ interface DomainInterface extends BaseInterface, EncryptionEntityInterface {
    * @var bool $initial
    *   Whether this is the initial setup or not.
    *
-   * @return \Drupal\Core\GeneratedLink
+   * @return GeneratedLink
    *   The URL to get to the remote configuration form.
    */
   public function getRemoteSetupLink($label, $initial = FALSE): GeneratedLink;
@@ -360,7 +360,7 @@ interface DomainInterface extends BaseInterface, EncryptionEntityInterface {
   /**
    * Set project releases being used by this domain.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface[] $releases
+   * @param ReleaseInterface[] $releases
    *   List of release entities.
    *
    * @return $this
@@ -370,7 +370,7 @@ interface DomainInterface extends BaseInterface, EncryptionEntityInterface {
   /**
    * Get project releases being used by this domain.
    *
-   * @return \Drupal\drd\Entity\ReleaseInterface[]
+   * @return ReleaseInterface[]
    *   List of releases.
    */
   public function getReleases(): array;
diff --git a/src/Entity/Form/Core.php b/src/Entity/Form/Core.php
index ba9534f..c8bc60c 100644
--- a/src/Entity/Form/Core.php
+++ b/src/Entity/Form/Core.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\drd\Entity\CoreInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\drd\Entity\DomainInterface;
 use Drupal;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
@@ -30,29 +33,29 @@ use Symfony\Component\HttpFoundation\Request;
 class Core extends ContentEntityForm {
 
   /**
-   * @var \Drupal\drd\Plugin\Auth\Manager
+   * @var Manager
    */
   protected $authManager;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
-   * @var \Drupal\drd\Update\ManagerStorageInterface
+   * @var ManagerStorageInterface
    */
   protected $managerStorage;
 
   /**
    * Core constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
-   * @param \Drupal\Component\Datetime\TimeInterface $time
-   * @param \Drupal\drd\Plugin\Auth\Manager $auth_manager
-   * @param \Symfony\Component\HttpFoundation\Request $request
-   * @param \Drupal\drd\Update\ManagerStorageInterface $manager_storage
+   * @param EntityRepositoryInterface $entity_repository
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param TimeInterface $time
+   * @param Manager $auth_manager
+   * @param Request $request
+   * @param ManagerStorageInterface $manager_storage
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, Manager $auth_manager, Request $request, ManagerStorageInterface $manager_storage) {
     parent::__construct($entity_repository, $entity_type_bundle_info, $time);
@@ -192,7 +195,7 @@ class Core extends ContentEntityForm {
    *
    * @param array $form
    *   Form definition.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return bool|string|array
@@ -278,10 +281,10 @@ class Core extends ContentEntityForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response object with instructions on how to adjust the form.
    */
   public function validateUrlAjax(array &$form, FormStateInterface $form_state): AjaxResponse {
@@ -311,7 +314,7 @@ class Core extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\drd\Entity\CoreInterface $core */
+    /** @var CoreInterface $core */
     $core = parent::validateForm($form, $form_state);
     if (!$form_state->hasAnyErrors() && $core->isNew()) {
       $error = $this->validateUrl($form, $form_state);
@@ -324,10 +327,10 @@ class Core extends ContentEntityForm {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\drd\Entity\CoreInterface $core */
+    /** @var CoreInterface $core */
     $core = $this->entity;
 
     $core->set('updsettings', $this->managerStorage->globalFormValues($form, $form_state));
@@ -339,7 +342,7 @@ class Core extends ContentEntityForm {
         '%label' => $core->label(),
       ]));
 
-      /** @var \Drupal\drd\Entity\DomainInterface $domain */
+      /** @var DomainInterface $domain */
       $domain = $form_state->getTemporaryValue('drd_domain');
       $domain->setCore($core);
       $domain->save();
diff --git a/src/Entity/Form/CoreDelete.php b/src/Entity/Form/CoreDelete.php
index 2989912..5678c21 100644
--- a/src/Entity/Form/CoreDelete.php
+++ b/src/Entity/Form/CoreDelete.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\drd\Entity\CoreInterface;
+use Drupal\drd\Entity\DomainInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -37,15 +40,15 @@ class CoreDelete extends ContentEntityConfirmFormBase {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\drd\Entity\CoreInterface $core */
+    /** @var CoreInterface $core */
     $core = $this->entity;
 
     // Delete all domains first.
     foreach ($core->getDomains() as $domain) {
-      /** @var \Drupal\drd\Entity\DomainInterface $domain */
+      /** @var DomainInterface $domain */
       $domain->delete();
     }
 
diff --git a/src/Entity/Form/CoreSettings.php b/src/Entity/Form/CoreSettings.php
index 6d4a476..a8372c4 100644
--- a/src/Entity/Form/CoreSettings.php
+++ b/src/Entity/Form/CoreSettings.php
@@ -29,7 +29,7 @@ class CoreSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class CoreSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Entity/Form/CoreUpdateLog.php b/src/Entity/Form/CoreUpdateLog.php
index 2e6c181..9600bdc 100644
--- a/src/Entity/Form/CoreUpdateLog.php
+++ b/src/Entity/Form/CoreUpdateLog.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\drd\Entity\CoreInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,19 +18,19 @@ class CoreUpdateLog extends FormBase {
   /**
    * DRD Core entity for which we handle update logs.
    *
-   * @var \Drupal\drd\Entity\CoreInterface
+   * @var CoreInterface
    */
   protected $core;
 
   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * CoreUpdateLog constructor.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    */
   public function __construct(DateFormatterInterface $date_formatter) {
     $this->dateFormatter = $date_formatter;
diff --git a/src/Entity/Form/Domain.php b/src/Entity/Form/Domain.php
index 0630dfc..e67ddfc 100644
--- a/src/Entity/Form/Domain.php
+++ b/src/Entity/Form/Domain.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
@@ -15,7 +16,7 @@ class Domain extends ContentEntityForm {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $entity = $this->entity;
diff --git a/src/Entity/Form/DomainReset.php b/src/Entity/Form/DomainReset.php
index 59ff1c4..c54b021 100644
--- a/src/Entity/Form/DomainReset.php
+++ b/src/Entity/Form/DomainReset.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\drd\Entity\DomainInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -25,7 +26,7 @@ class DomainReset extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function getCancelUrl(): Url {
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     $domain = $this->entity;
     return new Url('entity.drd_core.canonical', ['drd_core' => $domain->getCore()->id()]);
   }
@@ -54,7 +55,7 @@ class DomainReset extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     $domain = $this->entity;
     if ($form_state->getValue('cryptsettings')) {
       $domain->resetCryptSettings();
diff --git a/src/Entity/Form/DomainSettings.php b/src/Entity/Form/DomainSettings.php
index b1db08d..c28b57d 100644
--- a/src/Entity/Form/DomainSettings.php
+++ b/src/Entity/Form/DomainSettings.php
@@ -29,7 +29,7 @@ class DomainSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class DomainSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Entity/Form/Host.php b/src/Entity/Form/Host.php
index 1b0d4dd..4eb1334 100644
--- a/src/Entity/Form/Host.php
+++ b/src/Entity/Form/Host.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
@@ -34,7 +35,7 @@ class Host extends ContentEntityForm {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     /* @var \Drupal\drd\Entity\HostInterface $entity */
diff --git a/src/Entity/Form/HostDelete.php b/src/Entity/Form/HostDelete.php
index e2d9c44..ef32af3 100644
--- a/src/Entity/Form/HostDelete.php
+++ b/src/Entity/Form/HostDelete.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -37,7 +38,7 @@ class HostDelete extends ContentEntityConfirmFormBase {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
diff --git a/src/Entity/Form/HostSettings.php b/src/Entity/Form/HostSettings.php
index 8e6541f..0ac2f60 100644
--- a/src/Entity/Form/HostSettings.php
+++ b/src/Entity/Form/HostSettings.php
@@ -29,7 +29,7 @@ class HostSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class HostSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Entity/Form/MajorSettings.php b/src/Entity/Form/MajorSettings.php
index 6893564..b86dd67 100644
--- a/src/Entity/Form/MajorSettings.php
+++ b/src/Entity/Form/MajorSettings.php
@@ -29,7 +29,7 @@ class MajorSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class MajorSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Entity/Form/Project.php b/src/Entity/Form/Project.php
index 0887067..bc8162f 100644
--- a/src/Entity/Form/Project.php
+++ b/src/Entity/Form/Project.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
@@ -15,7 +16,7 @@ class Project extends ContentEntityForm {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $entity = $this->entity;
diff --git a/src/Entity/Form/ProjectSettings.php b/src/Entity/Form/ProjectSettings.php
index e525531..63168c3 100644
--- a/src/Entity/Form/ProjectSettings.php
+++ b/src/Entity/Form/ProjectSettings.php
@@ -29,7 +29,7 @@ class ProjectSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class ProjectSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Entity/Form/Release.php b/src/Entity/Form/Release.php
index 5cc9c71..f3980ed 100644
--- a/src/Entity/Form/Release.php
+++ b/src/Entity/Form/Release.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
@@ -15,7 +16,7 @@ class Release extends ContentEntityForm {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $entity = $this->entity;
diff --git a/src/Entity/Form/ReleaseSettings.php b/src/Entity/Form/ReleaseSettings.php
index a40a69d..05826d7 100644
--- a/src/Entity/Form/ReleaseSettings.php
+++ b/src/Entity/Form/ReleaseSettings.php
@@ -29,7 +29,7 @@ class ReleaseSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class ReleaseSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Entity/Form/Requirement.php b/src/Entity/Form/Requirement.php
index 7232b8c..b646280 100644
--- a/src/Entity/Form/Requirement.php
+++ b/src/Entity/Form/Requirement.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
@@ -15,7 +16,7 @@ class Requirement extends ContentEntityForm {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $requirement = $this->entity;
diff --git a/src/Entity/Form/RequirementSettings.php b/src/Entity/Form/RequirementSettings.php
index f7180d7..7e87a65 100644
--- a/src/Entity/Form/RequirementSettings.php
+++ b/src/Entity/Form/RequirementSettings.php
@@ -29,7 +29,7 @@ class RequirementSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class RequirementSettings extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Entity/Form/Script.php b/src/Entity/Form/Script.php
index 07929a6..ef61e44 100644
--- a/src/Entity/Form/Script.php
+++ b/src/Entity/Form/Script.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\drd\Entity\ScriptInterface;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\drd\Entity\Script as ScriptEntity;
@@ -19,7 +22,7 @@ class Script extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\drd\Entity\ScriptInterface $script */
+    /** @var ScriptInterface $script */
     $script = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ -60,8 +63,8 @@ class Script extends EntityForm {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityMalformedException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     /** @noinspection DuplicatedCode */
diff --git a/src/Entity/Form/ScriptDelete.php b/src/Entity/Form/ScriptDelete.php
index b1eeebf..91f3ed1 100644
--- a/src/Entity/Form/ScriptDelete.php
+++ b/src/Entity/Form/ScriptDelete.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -35,7 +36,7 @@ class ScriptDelete extends EntityConfirmFormBase {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
diff --git a/src/Entity/Form/ScriptType.php b/src/Entity/Form/ScriptType.php
index 0322d29..0f25a2b 100644
--- a/src/Entity/Form/ScriptType.php
+++ b/src/Entity/Form/ScriptType.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\drd\Entity\ScriptTypeInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -18,7 +21,7 @@ class ScriptType extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\drd\Entity\ScriptTypeInterface $scriptType */
+    /** @var ScriptTypeInterface $scriptType */
     $scriptType = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ -72,8 +75,8 @@ class ScriptType extends EntityForm {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityStorageException
+   * @throws EntityMalformedException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $scriptType = $this->entity;
diff --git a/src/Entity/Form/ScriptTypeDelete.php b/src/Entity/Form/ScriptTypeDelete.php
index 1aadfed..339f5dd 100644
--- a/src/Entity/Form/ScriptTypeDelete.php
+++ b/src/Entity/Form/ScriptTypeDelete.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -35,7 +36,7 @@ class ScriptTypeDelete extends EntityConfirmFormBase {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
diff --git a/src/Entity/HostInterface.php b/src/Entity/HostInterface.php
index 3bc91fa..10a8ee7 100644
--- a/src/Entity/HostInterface.php
+++ b/src/Entity/HostInterface.php
@@ -41,7 +41,7 @@ interface HostInterface extends BaseInterface, EncryptionEntityInterface {
    * @param array $properties
    *   Extra properties for selection.
    *
-   * @return \Drupal\drd\Entity\CoreInterface[]
+   * @return CoreInterface[]
    *   List of cores.
    */
   public function getCores(array $properties = []): array;
@@ -52,7 +52,7 @@ interface HostInterface extends BaseInterface, EncryptionEntityInterface {
    * @param array $properties
    *   Extra properties for selection.
    *
-   * @return \Drupal\drd\Entity\DomainInterface[]
+   * @return DomainInterface[]
    *   List of domains.
    */
   public function getDomains(array $properties = []): array;
diff --git a/src/Entity/ListBuilder/Script.php b/src/Entity/ListBuilder/Script.php
index 44b0bdd..921518d 100644
--- a/src/Entity/ListBuilder/Script.php
+++ b/src/Entity/ListBuilder/Script.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\ListBuilder;
 
+use Drupal\drd\Entity\ScriptInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -24,7 +25,7 @@ class Script extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\drd\Entity\ScriptInterface $entity */
+    /** @var ScriptInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['type'] = $entity->type();
diff --git a/src/Entity/ListBuilder/ScriptType.php b/src/Entity/ListBuilder/ScriptType.php
index 2c6b4b9..f531ddd 100644
--- a/src/Entity/ListBuilder/ScriptType.php
+++ b/src/Entity/ListBuilder/ScriptType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\ListBuilder;
 
+use Drupal\drd\Entity\ScriptTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -24,7 +25,7 @@ class ScriptType extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\drd\Entity\ScriptTypeInterface $entity */
+    /** @var ScriptTypeInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['interpreter'] = $entity->interpreter();
diff --git a/src/Entity/MajorInterface.php b/src/Entity/MajorInterface.php
index c5a409f..7503e41 100644
--- a/src/Entity/MajorInterface.php
+++ b/src/Entity/MajorInterface.php
@@ -78,7 +78,7 @@ interface MajorInterface extends ContentEntityInterface, EntityChangedInterface,
   /**
    * Gets the Major Version project.
    *
-   * @return \Drupal\drd\Entity\ProjectInterface|NULL
+   * @return ProjectInterface|NULL
    *   Project of the Major Version.
    */
   public function getProject();
@@ -96,7 +96,7 @@ interface MajorInterface extends ContentEntityInterface, EntityChangedInterface,
   /**
    * Gets the Major Version parent project.
    *
-   * @return \Drupal\drd\Entity\ProjectInterface|NULL
+   * @return ProjectInterface|NULL
    *   Parent project of the Major Version.
    */
   public function getParentProject();
@@ -114,7 +114,7 @@ interface MajorInterface extends ContentEntityInterface, EntityChangedInterface,
   /**
    * Gets the Major Version recommended release.
    *
-   * @return \Drupal\drd\Entity\ReleaseInterface|NULL
+   * @return ReleaseInterface|NULL
    *   Recommended release of the Major Version.
    */
   public function getRecommendedRelease();
diff --git a/src/Entity/ProjectInterface.php b/src/Entity/ProjectInterface.php
index 627b542..dad2366 100644
--- a/src/Entity/ProjectInterface.php
+++ b/src/Entity/ProjectInterface.php
@@ -117,7 +117,7 @@ interface ProjectInterface extends UpdateStatusInterface, ContentEntityInterface
   /**
    * Get project's URL on drupal.org.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The project url.
    */
   public function getProjectLink(): Url;
diff --git a/src/Entity/ReleaseInterface.php b/src/Entity/ReleaseInterface.php
index 43b9b8e..4993481 100644
--- a/src/Entity/ReleaseInterface.php
+++ b/src/Entity/ReleaseInterface.php
@@ -86,7 +86,7 @@ interface ReleaseInterface extends UpdateStatusInterface, ContentEntityInterface
   /**
    * Gets the Release Major Version.
    *
-   * @return \Drupal\drd\Entity\MajorInterface|NULL
+   * @return MajorInterface|NULL
    *   Major Version of the Release.
    */
   public function getMajor();
@@ -198,7 +198,7 @@ interface ReleaseInterface extends UpdateStatusInterface, ContentEntityInterface
   /**
    * Get the url that points to the project on drupal.org.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url.
    */
   public function getProjectLink(): Url;
@@ -206,7 +206,7 @@ interface ReleaseInterface extends UpdateStatusInterface, ContentEntityInterface
   /**
    * Get the url that points to the release on drupal.org.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url.
    */
   public function getReleaseLink(): Url;
@@ -214,7 +214,7 @@ interface ReleaseInterface extends UpdateStatusInterface, ContentEntityInterface
   /**
    * Get the url that points to the download on drupal.org.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url.
    */
   public function getDownloadLink(): Url;
diff --git a/src/Entity/ViewBuilder/Base.php b/src/Entity/ViewBuilder/Base.php
index 1880eb9..d0e5ab1 100644
--- a/src/Entity/ViewBuilder/Base.php
+++ b/src/Entity/ViewBuilder/Base.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\ViewBuilder;
 
+use Drupal\drd\Entity\BaseInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -21,25 +22,25 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class Base extends EntityViewBuilder {
 
   /**
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Base constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Theme\Registry $theme_registry
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param EntityTypeInterface $entity_type
+   * @param EntityRepositoryInterface $entity_repository
+   * @param LanguageManagerInterface $language_manager
+   * @param Registry $theme_registry
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
+   * @param FormBuilderInterface $form_builder
+   * @param DateFormatterInterface $date_formatter
    */
   public function __construct(EntityTypeInterface $entity_type, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, Registry $theme_registry, EntityDisplayRepositoryInterface $entity_display_repository, FormBuilderInterface $form_builder, DateFormatterInterface $date_formatter) {
     parent::__construct($entity_type, $entity_repository, $language_manager, $theme_registry, $entity_display_repository);
@@ -66,7 +67,7 @@ abstract class Base extends EntityViewBuilder {
    * {@inheritdoc}
    */
   public function buildComponents(array &$build, array $entities, array $displays, $view_mode) {
-    /** @var \Drupal\drd\Entity\BaseInterface[] $entities */
+    /** @var BaseInterface[] $entities */
     if (empty($entities)) {
       return;
     }
diff --git a/src/Entity/ViewBuilder/Domain.php b/src/Entity/ViewBuilder/Domain.php
index d03c7ed..bf37677 100644
--- a/src/Entity/ViewBuilder/Domain.php
+++ b/src/Entity/ViewBuilder/Domain.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Entity\ViewBuilder;
 
+use Drupal\drd\Entity\DomainInterface;
 /**
  * View builder handler for drd_domain.
  *
@@ -13,7 +14,7 @@ class Domain extends Base {
    * {@inheritdoc}
    */
   public function buildComponents(array &$build, array $entities, array $displays, $view_mode) {
-    /** @var \Drupal\drd\Entity\DomainInterface[] $entities */
+    /** @var DomainInterface[] $entities */
     parent::buildComponents($build, $entities, $displays, $view_mode);
 
     if ($displays['drd_domain']->getComponent('monitoring')) {
diff --git a/src/Form/Actions.php b/src/Form/Actions.php
index 5b5f320..c768271 100644
--- a/src/Form/Actions.php
+++ b/src/Form/Actions.php
@@ -16,14 +16,14 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class Actions extends FormBase {
 
   /**
-   * @var \Drupal\drd\ActionWidgetInterface
+   * @var ActionWidgetInterface
    */
   protected $actionWidget;
 
   /**
    * Actions constructor.
    *
-   * @param \Drupal\drd\ActionWidgetInterface $actionWidget
+   * @param ActionWidgetInterface $actionWidget
    */
   public function __construct(ActionWidgetInterface $actionWidget) {
     $this->actionWidget = $actionWidget;
diff --git a/src/Form/EntityActions.php b/src/Form/EntityActions.php
index 03a039a..085dbdd 100644
--- a/src/Form/EntityActions.php
+++ b/src/Form/EntityActions.php
@@ -16,7 +16,7 @@ class EntityActions extends Actions {
   /**
    * The route context object.
    *
-   * @var \Drupal\drd\ContextProvider\RouteContext
+   * @var RouteContext
    */
   private $context;
 
diff --git a/src/Form/Settings.php b/src/Form/Settings.php
index 042c469..b1efacd 100644
--- a/src/Form/Settings.php
+++ b/src/Form/Settings.php
@@ -22,53 +22,53 @@ class Settings extends ConfigFormBase {
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;
 
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * The request context.
    *
-   * @var \Drupal\Core\Routing\RequestContext
+   * @var RequestContext
    */
   protected $requestContext;
 
   /**
-   * @var \Drupal\encrypt\EncryptionProfileManagerInterface
+   * @var EncryptionProfileManagerInterface
    */
   protected $encryptionProfileManager;
 
   /**
-   * @var \Drupal\drd\Encryption
+   * @var Encryption
    */
   protected $encryption;
 
   /**
-   * @var \Drupal\drd\EncryptionUpdate
+   * @var EncryptionUpdate
    */
   protected $encryptionUpdate;
 
   /**
    * Constructs a SiteInformationForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The path alias manager.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator.
-   * @param \Drupal\Core\Routing\RequestContext $request_context
+   * @param RequestContext $request_context
    *   The request context.
-   * @param \Drupal\encrypt\EncryptionProfileManagerInterface $encryption_profile_manager
-   * @param \Drupal\drd\Encryption $encryption
-   * @param \Drupal\drd\EncryptionUpdate $encryption_update
+   * @param EncryptionProfileManagerInterface $encryption_profile_manager
+   * @param Encryption $encryption
+   * @param EncryptionUpdate $encryption_update
    */
   public function __construct(ConfigFactoryInterface $config_factory, AliasManagerInterface $alias_manager, PathValidatorInterface $path_validator, RequestContext $request_context, EncryptionProfileManagerInterface $encryption_profile_manager, Encryption $encryption, EncryptionUpdate $encryption_update) {
     parent::__construct($config_factory);
diff --git a/src/HttpRequest.php b/src/HttpRequest.php
index f0e3fd9..a553228 100644
--- a/src/HttpRequest.php
+++ b/src/HttpRequest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd;
 
+use Psr\Http\Message\ResponseInterface;
 use Drupal;
 use Drupal\drd\Entity\DomainInterface;
 use Exception;
@@ -26,7 +27,7 @@ class HttpRequest {
   /**
    * The domain entity to communicate with.
    *
-   * @var \Drupal\drd\Entity\DomainInterface
+   * @var DomainInterface
    */
   protected $domain;
 
@@ -47,7 +48,7 @@ class HttpRequest {
   /**
    * The response for the request.
    *
-   * @var \Psr\Http\Message\ResponseInterface
+   * @var ResponseInterface
    */
   protected $response;
 
@@ -66,14 +67,14 @@ class HttpRequest {
   protected $remoteIsDrd;
 
   /**
-   * @var \Drupal\drd\Logging
+   * @var Logging
    */
   protected $logging;
 
   /**
    * HttpRequest constructor.
    *
-   * @param \Drupal\drd\Logging $logging
+   * @param Logging $logging
    */
   public function __construct(Logging $logging) {
     $this->logging = $logging;
@@ -82,7 +83,7 @@ class HttpRequest {
   /**
    * Set the DRD domain entity.
    *
-   * @param \Drupal\drd\Entity\DomainInterface $domain
+   * @param DomainInterface $domain
    *   The domain entity.
    *
    * @return $this
diff --git a/src/Logging.php b/src/Logging.php
index ba13984..c30b601 100644
--- a/src/Logging.php
+++ b/src/Logging.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ -20,22 +21,22 @@ class Logging {
   protected $debug = FALSE;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The input-output console object for logging.
    *
-   * @var \Symfony\Component\Console\Style\SymfonyStyle
+   * @var SymfonyStyle
    */
   protected $io;
 
   /**
    * Logging constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param ConfigFactoryInterface $configFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    */
   public function __construct(ConfigFactoryInterface $configFactory, LoggerChannelFactoryInterface $loggerChannelFactory) {
     $this->debug = $configFactory->get('drd.general')->get('debug');
@@ -61,7 +62,7 @@ class Logging {
   /**
    * Set the input-output object for logging.
    *
-   * @param \Symfony\Component\Console\Style\SymfonyStyle $io
+   * @param SymfonyStyle $io
    *   The input-output object.
    */
   public function setIo(SymfonyStyle $io) {
diff --git a/src/Plugin/Action/Base.php b/src/Plugin/Action/Base.php
index b71f8dc..9bf4b47 100644
--- a/src/Plugin/Action/Base.php
+++ b/src/Plugin/Action/Base.php
@@ -44,57 +44,57 @@ abstract class Base extends ActionBase implements BaseInterface, ConfigurableInt
   protected $output;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\drd\SelectEntitiesInterface
+   * @var SelectEntitiesInterface
    */
   protected $entities;
 
   /**
-   * @var \Drupal\drd\HttpRequest
+   * @var HttpRequest
    */
   protected $httpRequest;
 
   /**
-   * @var \Drupal\drd\Logging
+   * @var Logging
    */
   protected $logging;
 
   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\drd\ActionManagerInterface
+   * @var ActionManagerInterface
    */
   protected $actionManager;
 
   /**
-   * @var \Drupal\drd\QueueManager
+   * @var QueueManager
    */
   protected $queueManager;
 
   /**
-   * @var \Drupal\drd\UpdateProcessor
+   * @var UpdateProcessor
    */
   protected $updateProcessor;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -104,17 +104,17 @@ abstract class Base extends ActionBase implements BaseInterface, ConfigurableInt
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   * @param \Drupal\drd\SelectEntitiesInterface $entities
-   * @param \Drupal\drd\HttpRequest $http_request
-   * @param \Drupal\drd\Logging $logging
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\drd\ActionManagerInterface $action_manager
-   * @param \Drupal\drd\QueueManager $queue_manager
-   * @param \Drupal\drd\UpdateProcessor $update_processor
+   * @param ConfigFactoryInterface $config_factory
+   * @param AccountInterface $current_user
+   * @param SelectEntitiesInterface $entities
+   * @param HttpRequest $http_request
+   * @param Logging $logging
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param FileSystemInterface $file_system
+   * @param ModuleHandlerInterface $module_handler
+   * @param ActionManagerInterface $action_manager
+   * @param QueueManager $queue_manager
+   * @param UpdateProcessor $update_processor
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, AccountInterface $current_user, SelectEntitiesInterface $entities, HttpRequest $http_request, Logging $logging, EntityTypeManagerInterface $entityTypeManager, FileSystemInterface $file_system, ModuleHandlerInterface $module_handler, ActionManagerInterface $action_manager, QueueManager $queue_manager, UpdateProcessor $update_processor) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/Action/BaseConfigurableInterface.php b/src/Plugin/Action/BaseConfigurableInterface.php
index f843469..d72f8d2 100644
--- a/src/Plugin/Action/BaseConfigurableInterface.php
+++ b/src/Plugin/Action/BaseConfigurableInterface.php
@@ -16,7 +16,7 @@ interface BaseConfigurableInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ -29,7 +29,7 @@ interface BaseConfigurableInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state);
@@ -39,7 +39,7 @@ interface BaseConfigurableInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state);
diff --git a/src/Plugin/Action/BaseEntity.php b/src/Plugin/Action/BaseEntity.php
index e2af49a..73cedc9 100644
--- a/src/Plugin/Action/BaseEntity.php
+++ b/src/Plugin/Action/BaseEntity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\Action;
 
+use Drupal\drd\Entity\BaseInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
 
@@ -13,7 +14,7 @@ abstract class BaseEntity extends Base implements BaseEntityInterface {
   /**
    * DRD entity.
    *
-   * @var \Drupal\drd\Entity\BaseInterface
+   * @var BaseInterface
    */
   protected $drdEntity;
 
diff --git a/src/Plugin/Action/BaseEntityRemote.php b/src/Plugin/Action/BaseEntityRemote.php
index a394299..9447ca4 100644
--- a/src/Plugin/Action/BaseEntityRemote.php
+++ b/src/Plugin/Action/BaseEntityRemote.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\Action;
 
+use Drupal\drd\Crypt\BaseMethodInterface;
 use Drupal\drd\Crypt\Base as CryptBase;
 use Drupal\drd\Entity\BaseInterface as RemoteEntityInterface;
 use Drupal\drd\Entity\DomainInterface;
@@ -30,7 +31,7 @@ abstract class BaseEntityRemote extends BaseEntity {
   /**
    * Crypt object for the remote entity.
    *
-   * @var \Drupal\drd\Crypt\BaseMethodInterface
+   * @var BaseMethodInterface
    */
   protected $crypt;
 
@@ -80,7 +81,7 @@ abstract class BaseEntityRemote extends BaseEntity {
    * overwrite this and add options to the request before this is being
    * submitted.
    *
-   * @param \Drupal\drd\HttpRequest $request
+   * @param HttpRequest $request
    *   The request object.
    */
   protected function setRequestOptions(HttpRequest $request) {}
@@ -103,7 +104,7 @@ abstract class BaseEntityRemote extends BaseEntity {
    * Finally prepare and submit the request object and process the response.
    */
   protected function remoteRequest() {
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     $domain = $this->drdEntity;
     $class = explode('\\', get_class($this));
 
@@ -148,7 +149,7 @@ abstract class BaseEntityRemote extends BaseEntity {
     }
     $body = base64_encode(json_encode($payload));
 
-    /** @var \Drupal\drd\HttpRequest $request */
+    /** @var HttpRequest $request */
     $request = $this->httpRequest;
     $request->setDomain($domain)
       ->setQuery('drd-agent')
diff --git a/src/Plugin/Action/BaseInterface.php b/src/Plugin/Action/BaseInterface.php
index 18ffba9..034ca69 100644
--- a/src/Plugin/Action/BaseInterface.php
+++ b/src/Plugin/Action/BaseInterface.php
@@ -72,7 +72,7 @@ interface BaseInterface extends ActionInterface {
   /**
    * Determine if the current action has the given term associated with it.
    *
-   * @param \Drupal\taxonomy\Entity\Term $term
+   * @param Term $term
    *   The term to check.
    *
    * @return bool
diff --git a/src/Plugin/Action/DomainChange.php b/src/Plugin/Action/DomainChange.php
index 98f9676..251b6a8 100644
--- a/src/Plugin/Action/DomainChange.php
+++ b/src/Plugin/Action/DomainChange.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\Action;
 
+use Drupal\drd\Entity\DomainInterface;
 use Drupal\drd\Entity\BaseInterface as RemoteEntityInterface;
 use Drupal\drd\Entity\Domain;
 use Exception;
@@ -21,7 +22,7 @@ class DomainChange extends BaseEntity {
    * {@inheritdoc}
    */
   public function executeAction(RemoteEntityInterface $domain) {
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     if (isset($this->arguments['secure'])) {
       $domain->set('secure', $this->arguments['secure']);
     }
diff --git a/src/Plugin/Action/DomainMove.php b/src/Plugin/Action/DomainMove.php
index 839fa59..b9d4acc 100644
--- a/src/Plugin/Action/DomainMove.php
+++ b/src/Plugin/Action/DomainMove.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drd\Plugin\Action;
 
+use Drupal\drd\Entity\CoreInterface;
+use Drupal\drd\Entity\DomainInterface;
 use Drupal\drd\Entity\BaseInterface as RemoteEntityInterface;
 use Drupal\drd\Entity\Core;
 
@@ -19,7 +21,7 @@ class DomainMove extends BaseEntity {
   /**
    * The destination core to which the domain should be moved.
    *
-   * @var \Drupal\drd\Entity\CoreInterface
+   * @var CoreInterface
    */
   protected $core;
 
@@ -27,8 +29,7 @@ class DomainMove extends BaseEntity {
    * {@inheritdoc}
    */
   public function executeAction(RemoteEntityInterface $domain) {
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
-
+    /** @var DomainInterface $domain */
     if (!isset($this->core)) {
       $this->core = Core::load($this->arguments['dest-core-id']);
     }
diff --git a/src/Plugin/Action/DomainsEnableAll.php b/src/Plugin/Action/DomainsEnableAll.php
index 2978f40..52946e1 100644
--- a/src/Plugin/Action/DomainsEnableAll.php
+++ b/src/Plugin/Action/DomainsEnableAll.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\Action;
 
+use Drupal\drd\Entity\DomainInterface;
 use Drupal\drd\Entity\BaseInterface as RemoteEntityInterface;
 use Drupal\drd\Entity\CoreInterface;
 
@@ -51,7 +52,7 @@ class DomainsEnableAll extends BaseCoreRemote {
     $response = parent::executeAction($core);
     if ($response) {
       foreach ($response as $url) {
-        /** @var \Drupal\drd\Entity\DomainInterface $domain */
+        /** @var DomainInterface $domain */
         $domain = $local[$url];
         $domain->set('installed', 1);
         /** @noinspection PhpUnhandledExceptionInspection */
diff --git a/src/Plugin/Action/ListCores.php b/src/Plugin/Action/ListCores.php
index 86c3d33..2b4128f 100644
--- a/src/Plugin/Action/ListCores.php
+++ b/src/Plugin/Action/ListCores.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\Action;
 
+use Drupal\drd\Entity\CoreInterface;
 /**
  * Provides a 'ListCores' action.
  *
@@ -19,7 +20,7 @@ class ListCores extends ListEntities {
   public function executeAction() {
     $rows = [];
 
-    /** @var \Drupal\drd\Entity\CoreInterface $core */
+    /** @var CoreInterface $core */
     foreach ($this->prepareSelection()->cores() as $core) {
       $rows[] = [
         'core-id' => $core->id(),
diff --git a/src/Plugin/Action/ListDomains.php b/src/Plugin/Action/ListDomains.php
index 22f1ea5..7770a8e 100644
--- a/src/Plugin/Action/ListDomains.php
+++ b/src/Plugin/Action/ListDomains.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\Action;
 
+use Drupal\drd\Entity\DomainInterface;
 /**
  * Provides a 'ListDomains' action.
  *
@@ -19,7 +20,7 @@ class ListDomains extends ListEntities {
   public function executeAction() {
     $rows = [];
 
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     foreach ($this->prepareSelection()->domains() as $domain) {
       $rows[] = [
         'domain-id' => $domain->id(),
diff --git a/src/Plugin/Action/ListEntities.php b/src/Plugin/Action/ListEntities.php
index 06d6a98..d909ad7 100644
--- a/src/Plugin/Action/ListEntities.php
+++ b/src/Plugin/Action/ListEntities.php
@@ -19,7 +19,7 @@ abstract class ListEntities extends BaseGlobal {
   /**
    * Prepare the service to select entities.
    *
-   * @return \Drupal\drd\SelectEntitiesInterface
+   * @return SelectEntitiesInterface
    *   The service to select DRD entities from.
    */
   protected function prepareSelection(): SelectEntitiesInterface {
diff --git a/src/Plugin/Action/ListHosts.php b/src/Plugin/Action/ListHosts.php
index a530a3a..4d2ecd2 100644
--- a/src/Plugin/Action/ListHosts.php
+++ b/src/Plugin/Action/ListHosts.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\Action;
 
+use Drupal\drd\Entity\HostInterface;
 /**
  * Provides a 'ListHosts' action.
  *
@@ -19,7 +20,7 @@ class ListHosts extends ListEntities {
   public function executeAction() {
     $rows = [];
 
-    /** @var \Drupal\drd\Entity\HostInterface $host */
+    /** @var HostInterface $host */
     foreach ($this->prepareSelection()->hosts() as $host) {
       $rows[] = [
         'host-id' => $host->id(),
diff --git a/src/Plugin/Action/Projects.php b/src/Plugin/Action/Projects.php
index c880690..62ae105 100644
--- a/src/Plugin/Action/Projects.php
+++ b/src/Plugin/Action/Projects.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\Action;
 
+use Drupal\drd\Entity\ReleaseInterface;
 use Drupal\drd\Entity\BaseInterface as RemoteEntityInterface;
 use Drupal\drd\Entity\Project;
 use Drupal\drd\Entity\Release;
@@ -39,7 +40,7 @@ class Projects extends BaseEntityRemote {
         if (empty($info['version'])) {
           $info['version'] = $info['core'] . '-0.x';
         }
-        /** @var \Drupal\drd\Entity\ReleaseInterface $release */
+        /** @var ReleaseInterface $release */
         $release = Release::findOrCreate($item['type'], $item['name'], $info['version']);
         if ($release->isJustCreated()) {
           $major = $release->getMajor();
diff --git a/src/Plugin/Action/ReleaseLock.php b/src/Plugin/Action/ReleaseLock.php
index f3c3b40..1d6adc2 100644
--- a/src/Plugin/Action/ReleaseLock.php
+++ b/src/Plugin/Action/ReleaseLock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\Action;
 
+use Drupal\drd\Entity\CoreInterface;
 use Drupal\drd\Entity\Release;
 
 /**
@@ -41,7 +42,7 @@ class ReleaseLock extends BaseGlobal {
       return FALSE;
     }
 
-    /** @var \Drupal\drd\Entity\CoreInterface $core */
+    /** @var CoreInterface $core */
     foreach ($this->arguments['cores'] as $core) {
       $core
         ->{$this->function}($release)
diff --git a/src/Plugin/AdvancedQueue/JobType/Action.php b/src/Plugin/AdvancedQueue/JobType/Action.php
index 3453488..1a800f2 100644
--- a/src/Plugin/AdvancedQueue/JobType/Action.php
+++ b/src/Plugin/AdvancedQueue/JobType/Action.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\AdvancedQueue\JobType;
 
+use Drupal\drd\Plugin\Action\Base;
 use Drupal\advancedqueue\Job;
 use Drupal\advancedqueue\JobResult;
 use Drupal\advancedqueue\Plugin\AdvancedQueue\JobType\JobTypeBase;
@@ -18,7 +19,7 @@ abstract class Action extends JobTypeBase implements ActionInterface, ContainerF
   /**
    * Action plugin.
    *
-   * @var \Drupal\drd\Plugin\Action\Base
+   * @var Base
    */
   protected $action;
 
@@ -30,12 +31,12 @@ abstract class Action extends JobTypeBase implements ActionInterface, ContainerF
   protected $payload = [];
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\drd\ActionManagerInterface
+   * @var ActionManagerInterface
    */
   protected $actionManager;
 
@@ -45,8 +46,8 @@ abstract class Action extends JobTypeBase implements ActionInterface, ContainerF
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\drd\ActionManagerInterface $action_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ActionManagerInterface $action_manager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ActionManagerInterface $action_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/AdvancedQueue/JobType/ActionEntity.php b/src/Plugin/AdvancedQueue/JobType/ActionEntity.php
index 90e753b..95a9557 100644
--- a/src/Plugin/AdvancedQueue/JobType/ActionEntity.php
+++ b/src/Plugin/AdvancedQueue/JobType/ActionEntity.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drd\Plugin\AdvancedQueue\JobType;
 
+use Drupal\drd\Plugin\Action\BaseEntityInterface;
+use Drupal\drd\Entity\BaseInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 
@@ -19,9 +21,9 @@ class ActionEntity extends Action {
    * {@inheritdoc}
    */
   public function processAction() {
-    /** @var \Drupal\drd\Plugin\Action\BaseEntityInterface $action */
+    /** @var BaseEntityInterface $action */
     $action = $this->action;
-    /** @var \Drupal\drd\Entity\BaseInterface $entity */
+    /** @var BaseInterface $entity */
     try {
       if ($entity = $this->entityTypeManager
         ->getStorage($this->payload['entity_type'])
diff --git a/src/Plugin/AdvancedQueue/JobType/ActionGlobal.php b/src/Plugin/AdvancedQueue/JobType/ActionGlobal.php
index ee581dc..60e98fb 100644
--- a/src/Plugin/AdvancedQueue/JobType/ActionGlobal.php
+++ b/src/Plugin/AdvancedQueue/JobType/ActionGlobal.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\AdvancedQueue\JobType;
 
+use Drupal\drd\Plugin\Action\BaseGlobalInterface;
 /**
  * Provides an AdvancedQueue JobType for DRD globally.
  *
@@ -16,7 +17,7 @@ class ActionGlobal extends Action {
    * {@inheritdoc}
    */
   public function processAction() {
-    /** @var \Drupal\drd\Plugin\Action\BaseGlobalInterface $action */
+    /** @var BaseGlobalInterface $action */
     $action = $this->action;
 
     return $action->executeAction();
diff --git a/src/Plugin/Auth/Base.php b/src/Plugin/Auth/Base.php
index 6fdfbee..998783b 100644
--- a/src/Plugin/Auth/Base.php
+++ b/src/Plugin/Auth/Base.php
@@ -13,7 +13,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class Base extends PluginBase implements BaseInterface, ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\drd\Encryption
+   * @var Encryption
    */
   protected $encryption;
 
@@ -23,7 +23,7 @@ abstract class Base extends PluginBase implements BaseInterface, ContainerFactor
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\drd\Encryption $encryption
+   * @param Encryption $encryption
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Encryption $encryption) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/Auth/BaseInterface.php b/src/Plugin/Auth/BaseInterface.php
index c209afd..3b7e79e 100644
--- a/src/Plugin/Auth/BaseInterface.php
+++ b/src/Plugin/Auth/BaseInterface.php
@@ -31,7 +31,7 @@ interface BaseInterface extends PluginInspectionInterface {
   /**
    * Retrieve settings values.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
diff --git a/src/Plugin/Auth/Manager.php b/src/Plugin/Auth/Manager.php
index c8d0eff..c1a0d49 100644
--- a/src/Plugin/Auth/Manager.php
+++ b/src/Plugin/Auth/Manager.php
@@ -19,9 +19,9 @@ class Manager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Block/Base.php b/src/Plugin/Block/Base.php
index af600b2..e5bb3c0 100644
--- a/src/Plugin/Block/Base.php
+++ b/src/Plugin/Block/Base.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\Block;
 
+use Drupal\drd\Entity\BaseInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -23,47 +24,47 @@ abstract class Base extends BlockBase implements ContainerFactoryPluginInterface
   /**
    * Route context of current request.
    *
-   * @var \Drupal\drd\ContextProvider\RouteContext
+   * @var RouteContext
    */
   protected $context;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $linkGenerator;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\drd\QueueManager
+   * @var QueueManager
    */
   protected $queueManager;
 
   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -73,15 +74,15 @@ abstract class Base extends BlockBase implements ContainerFactoryPluginInterface
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\drd\QueueManager $queue_manager
-   * @param \Drupal\Core\State\StateInterface $state
-   * @param \Drupal\drd\ContextProvider\RouteContext|null $context
+   * @param AccountInterface $current_user
+   * @param Connection $database
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param FormBuilderInterface $form_builder
+   * @param LinkGeneratorInterface $link_generator
+   * @param ModuleHandlerInterface $module_handler
+   * @param QueueManager $queue_manager
+   * @param StateInterface $state
+   * @param RouteContext|null $context
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountInterface $current_user, Connection $database, EntityTypeManagerInterface $entity_type_manager, FormBuilderInterface $form_builder, LinkGeneratorInterface $link_generator, ModuleHandlerInterface $module_handler, QueueManager $queue_manager, StateInterface $state, $context = NULL) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -144,7 +145,7 @@ abstract class Base extends BlockBase implements ContainerFactoryPluginInterface
   /**
    * Get the entity of the current context.
    *
-   * @return bool|\Drupal\drd\Entity\BaseInterface
+   * @return bool|BaseInterface
    *   The DRD entity if within an entity context or FALSE otherwise.
    */
   protected function getEntity() {
diff --git a/src/Plugin/Block/Remote.php b/src/Plugin/Block/Remote.php
index d6b4fca..3b157ce 100644
--- a/src/Plugin/Block/Remote.php
+++ b/src/Plugin/Block/Remote.php
@@ -43,7 +43,7 @@ class Remote extends Base {
    * {@inheritdoc}
    */
   public function build(): array {
-    /** @var \Drupal\drd\Entity\DomainInterface $entity */
+    /** @var DomainInterface $entity */
     $entity = $this->getEntity();
     list(, $module, $delta) = explode(':', $this->getPluginId());
 
diff --git a/src/Plugin/Block/WidgetBase.php b/src/Plugin/Block/WidgetBase.php
index d0f7bb0..4e1395f 100644
--- a/src/Plugin/Block/WidgetBase.php
+++ b/src/Plugin/Block/WidgetBase.php
@@ -29,7 +29,7 @@ abstract class WidgetBase extends Base {
   /**
    * Get the title of the widget.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The title.
    */
   abstract protected function title(): TranslatableMarkup;
@@ -37,7 +37,7 @@ abstract class WidgetBase extends Base {
   /**
    * Get the content of the widget.
    *
-   * @return array|string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return array|string|TranslatableMarkup
    *   The content.
    */
   abstract protected function content();
diff --git a/src/Plugin/Derivative/RemoteBlock.php b/src/Plugin/Derivative/RemoteBlock.php
index 285095a..50eca44 100644
--- a/src/Plugin/Derivative/RemoteBlock.php
+++ b/src/Plugin/Derivative/RemoteBlock.php
@@ -15,14 +15,14 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class RemoteBlock extends DeriverBase implements ContainerDeriverInterface {
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * RemoteBlock constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
     $this->configFactory = $config_factory;
diff --git a/src/Plugin/Update/Process/Base.php b/src/Plugin/Update/Process/Base.php
index 31409e8..c0b9775 100644
--- a/src/Plugin/Update/Process/Base.php
+++ b/src/Plugin/Update/Process/Base.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\Update\Process;
 
+use Drupal\drd\Entity\DomainInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\drd\Plugin\Update\UpdateBase;
 use Drupal\drd\Update\PluginInterface;
@@ -20,7 +21,7 @@ abstract class Base extends UpdateBase implements PluginProcessInterface {
   /**
    * All domains that need processing.
    *
-   * @var \Drupal\drd\Entity\DomainInterface[]
+   * @var DomainInterface[]
    */
   protected $domains = [];
 
diff --git a/src/Plugin/Update/RsyncTrait.php b/src/Plugin/Update/RsyncTrait.php
index df1a0a2..f66789b 100644
--- a/src/Plugin/Update/RsyncTrait.php
+++ b/src/Plugin/Update/RsyncTrait.php
@@ -51,7 +51,7 @@ trait RsyncTrait {
   /**
    * Execute the RSync command.
    *
-   * @param \Drupal\drd\Update\PluginStorageInterface $storage
+   * @param PluginStorageInterface $storage
    *   The update storage plugin.
    * @param bool $fromRemote
    *   TRUE for downstream and FALSE for upstream.
diff --git a/src/Plugin/Update/Storage/Base.php b/src/Plugin/Update/Storage/Base.php
index c3fd8a2..4a0e75e 100644
--- a/src/Plugin/Update/Storage/Base.php
+++ b/src/Plugin/Update/Storage/Base.php
@@ -43,42 +43,42 @@ abstract class Base extends UpdateBase implements PluginStorageInterface {
   /**
    * The build plugin.
    *
-   * @var \Drupal\drd\Update\PluginBuildInterface
+   * @var PluginBuildInterface
    */
   private $buildPlugin;
 
   /**
    * The processing plugin.
    *
-   * @var \Drupal\drd\Update\PluginProcessInterface
+   * @var PluginProcessInterface
    */
   private $processPlugin;
 
   /**
    * The test plugin.
    *
-   * @var \Drupal\drd\Update\PluginTestInterface
+   * @var PluginTestInterface
    */
   private $testPlugin;
 
   /**
    * The deploy plugin.
    *
-   * @var \Drupal\drd\Update\PluginDeployInterface
+   * @var PluginDeployInterface
    */
   private $deployPlugin;
 
   /**
    * The finish plugin.
    *
-   * @var \Drupal\drd\Update\PluginFinishInterface
+   * @var PluginFinishInterface
    */
   private $finishPlugin;
 
   /**
    * The core entity which will get updated.
    *
-   * @var \Drupal\drd\Entity\CoreInterface
+   * @var CoreInterface
    */
   private $core;
 
diff --git a/src/Plugin/Update/Storage/Git.php b/src/Plugin/Update/Storage/Git.php
index b60ecc6..a5112e1 100644
--- a/src/Plugin/Update/Storage/Git.php
+++ b/src/Plugin/Update/Storage/Git.php
@@ -19,7 +19,7 @@ class Git extends Base {
   /**
    * The git repository object.
    *
-   * @var \GitElephant\Repository
+   * @var Repository
    */
   protected $repository;
 
diff --git a/src/Plugin/Update/UpdateBase.php b/src/Plugin/Update/UpdateBase.php
index d3558f6..81d53cc 100644
--- a/src/Plugin/Update/UpdateBase.php
+++ b/src/Plugin/Update/UpdateBase.php
@@ -46,32 +46,32 @@ abstract class UpdateBase extends PluginBase implements PluginInterface, Contain
   protected $lastShellOutput = '';
 
   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\drd\DomainLocalCopy
+   * @var DomainLocalCopy
    */
   protected $domainLocalCopy;
 
   /**
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $httpClientFactory;
 
@@ -81,12 +81,12 @@ abstract class UpdateBase extends PluginBase implements PluginInterface, Contain
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
-   * @param \Drupal\Component\Datetime\TimeInterface $time
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\drd\DomainLocalCopy $domain_local_copy
-   * @param \Drupal\Core\Http\ClientFactory $client_factory
+   * @param FileSystemInterface $file_system
+   * @param TimeInterface $time
+   * @param DateFormatterInterface $date_formatter
+   * @param ConfigFactoryInterface $config_factory
+   * @param DomainLocalCopy $domain_local_copy
+   * @param ClientFactory $client_factory
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FileSystemInterface $file_system, TimeInterface $time, DateFormatterInterface $date_formatter, ConfigFactoryInterface $config_factory, DomainLocalCopy $domain_local_copy, ClientFactory $client_factory) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -178,7 +178,7 @@ abstract class UpdateBase extends PluginBase implements PluginInterface, Contain
   /**
    * Get the value of a form element.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return mixed
@@ -273,7 +273,7 @@ abstract class UpdateBase extends PluginBase implements PluginInterface, Contain
   /**
    * Execute a shell command and capture the output.
    *
-   * @param \Drupal\drd\Update\PluginStorageInterface $storage
+   * @param PluginStorageInterface $storage
    *   The update storage plugin.
    * @param string $cmd
    *   The command to execute.
diff --git a/src/Plugin/views/field/Actions.php b/src/Plugin/views/field/Actions.php
index e70a3c0..8e3a60e 100644
--- a/src/Plugin/views/field/Actions.php
+++ b/src/Plugin/views/field/Actions.php
@@ -23,7 +23,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class Actions extends BulkForm {
 
   /**
-   * @var \Drupal\drd\ActionWidgetInterface
+   * @var ActionWidgetInterface
    */
   protected $actionWidget;
 
@@ -33,11 +33,11 @@ class Actions extends BulkForm {
    * @param array $configuration
    * @param string $plugin_id
    * @param string $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
-   * @param \Drupal\drd\ActionWidgetInterface $actionWidget
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param LanguageManagerInterface $language_manager
+   * @param MessengerInterface $messenger
+   * @param EntityRepositoryInterface $entity_repository
+   * @param ActionWidgetInterface $actionWidget
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, MessengerInterface $messenger, EntityRepositoryInterface $entity_repository, ActionWidgetInterface $actionWidget) {
     try {
diff --git a/src/Plugin/views/field/StatusBase.php b/src/Plugin/views/field/StatusBase.php
index 73ad299..911df62 100644
--- a/src/Plugin/views/field/StatusBase.php
+++ b/src/Plugin/views/field/StatusBase.php
@@ -17,7 +17,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class StatusBase extends FieldPluginBase implements StatusBaseInterface {
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -27,7 +27,7 @@ abstract class StatusBase extends FieldPluginBase implements StatusBaseInterface
    * @param array $configuration
    * @param string $plugin_id
    * @param string $plugin_definition
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -74,7 +74,7 @@ abstract class StatusBase extends FieldPluginBase implements StatusBaseInterface
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\drd\Entity\BaseInterface $remote */
+    /** @var BaseInterface $remote */
     if (!empty($this->options['relationship']) && !empty($values->_relationship_entities[$this->options['relationship']])) {
       $remote = $values->_relationship_entities[$this->options['relationship']];
     }
@@ -110,7 +110,7 @@ abstract class StatusBase extends FieldPluginBase implements StatusBaseInterface
   /**
    * Get aggregated warnings and error for a remote entity.
    *
-   * @param \Drupal\drd\Entity\BaseInterface $remote
+   * @param BaseInterface $remote
    *   The remote DRD entity.
    * @param string $field
    *   Either "warnings" or "errors".
diff --git a/src/Plugin/views/field/StatusBaseInterface.php b/src/Plugin/views/field/StatusBaseInterface.php
index 676233e..a33bbc4 100644
--- a/src/Plugin/views/field/StatusBaseInterface.php
+++ b/src/Plugin/views/field/StatusBaseInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\views\field;
 
+use Drupal\drd\Entity\DomainInterface;
 use Drupal\drd\Entity\BaseInterface;
 
 /**
@@ -15,10 +16,10 @@ interface StatusBaseInterface {
    * For a domain entity that is the entity itself, for host and core entities
    * this contains a list of all domains attached to them.
    *
-   * @param \Drupal\drd\Entity\BaseInterface $remote
+   * @param BaseInterface $remote
    *   The remote entity.
    *
-   * @return \Drupal\drd\Entity\DomainInterface[]
+   * @return DomainInterface[]
    *   List of domains.
    */
   public function getDomains(BaseInterface $remote): array;
diff --git a/src/Plugin/views/field/StatusCore.php b/src/Plugin/views/field/StatusCore.php
index 2fad8d5..3e9b578 100644
--- a/src/Plugin/views/field/StatusCore.php
+++ b/src/Plugin/views/field/StatusCore.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\views\field;
 
+use Drupal\drd\Entity\CoreInterface;
 use Drupal\drd\Entity\BaseInterface;
 
 /**
@@ -17,7 +18,7 @@ class StatusCore extends StatusBase {
    * {@inheritdoc}
    */
   public function getDomains(BaseInterface $remote): array {
-    /** @var \Drupal\drd\Entity\CoreInterface $remote */
+    /** @var CoreInterface $remote */
     return $remote->getDomains();
   }
 
diff --git a/src/Plugin/views/field/StatusHost.php b/src/Plugin/views/field/StatusHost.php
index 5cbeb68..b193bad 100644
--- a/src/Plugin/views/field/StatusHost.php
+++ b/src/Plugin/views/field/StatusHost.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Plugin\views\field;
 
+use Drupal\drd\Entity\HostInterface;
 use Drupal\drd\Entity\BaseInterface;
 
 /**
@@ -17,7 +18,7 @@ class StatusHost extends StatusBase {
    * {@inheritdoc}
    */
   public function getDomains(BaseInterface $remote): array {
-    /** @var \Drupal\drd\Entity\HostInterface $remote */
+    /** @var HostInterface $remote */
     return $remote->getDomains();
   }
 
diff --git a/src/Plugin/views/field/UpdateStatus.php b/src/Plugin/views/field/UpdateStatus.php
index 4feab8b..39806f3 100644
--- a/src/Plugin/views/field/UpdateStatus.php
+++ b/src/Plugin/views/field/UpdateStatus.php
@@ -29,7 +29,7 @@ class UpdateStatus extends Standard {
   /**
    * Render the update status for a release.
    *
-   * @param \Drupal\drd\Entity\UpdateStatusInterface $entity
+   * @param UpdateStatusInterface $entity
    *   The project or release entity.
    * @param string $status
    *   The status of the release.
diff --git a/src/Plugin/views/filter/BaseManyToOne.php b/src/Plugin/views/filter/BaseManyToOne.php
index 2875f96..505894e 100644
--- a/src/Plugin/views/filter/BaseManyToOne.php
+++ b/src/Plugin/views/filter/BaseManyToOne.php
@@ -10,7 +10,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class BaseManyToOne extends ManyToOne {
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -20,7 +20,7 @@ abstract class BaseManyToOne extends ManyToOne {
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/QueueManager.php b/src/QueueManager.php
index 6e12c90..0231c23 100644
--- a/src/QueueManager.php
+++ b/src/QueueManager.php
@@ -18,14 +18,14 @@ use Drupal\drd\Plugin\Action\BaseGlobalInterface;
 class QueueManager {
 
   /**
-   * @var \Drupal\advancedqueue\ProcessorInterface
+   * @var ProcessorInterface
    */
   protected $processor;
 
   /**
    * QueueManager constructor.
    *
-   * @param \Drupal\advancedqueue\ProcessorInterface $processor
+   * @param ProcessorInterface $processor
    */
   public function __construct(ProcessorInterface $processor) {
     $this->processor = $processor;
@@ -34,7 +34,7 @@ class QueueManager {
   /**
    * Get the DRD Queue.
    *
-   * @return \Drupal\advancedqueue\Entity\QueueInterface
+   * @return QueueInterface
    *   The DRD Queue.
    */
   private function getQueue(): QueueInterface {
diff --git a/src/SelectEntities.php b/src/SelectEntities.php
index fe03d36..9e1ec7c 100644
--- a/src/SelectEntities.php
+++ b/src/SelectEntities.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drd;
 
+use Drupal\Core\Database\StatementInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
@@ -21,7 +23,7 @@ class SelectEntities implements SelectEntitiesInterface {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -68,16 +70,16 @@ class SelectEntities implements SelectEntitiesInterface {
   protected $tagId;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Construct the Entity object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $database) {
     $this->entityTypeManager = $entity_type_manager;
@@ -278,7 +280,7 @@ class SelectEntities implements SelectEntitiesInterface {
       'installed' => 1,
     ];
     if ($this->hostId) {
-      /** @var \Drupal\drd\Entity\Host $host */
+      /** @var Host $host */
       if ($host = Host::load($this->hostId)) {
         $cores = $host->getCores();
         array_walk($cores, function (Core $core) {
@@ -352,7 +354,7 @@ class SelectEntities implements SelectEntitiesInterface {
       $query
         ->fields($alias, ['id'])
         ->condition($ids);
-      /** @var \Drupal\Core\Database\StatementInterface $query */
+      /** @var StatementInterface $query */
       $query->execute();
       return $query->fetchCol();
     }
@@ -376,7 +378,7 @@ class SelectEntities implements SelectEntitiesInterface {
    * @param int $id
    *   The id of the found entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array containing one entity.
    */
   protected function oneEntity($id): array {
@@ -398,7 +400,7 @@ class SelectEntities implements SelectEntitiesInterface {
    * @param $id
    *   ID of the entity to search or NULL to find all.
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface[]
+   * @return bool|EntityInterface[]
    *   List of all found entities.
    */
   protected function search($id) {
diff --git a/src/SelectEntitiesInterface.php b/src/SelectEntitiesInterface.php
index ab5e610..06224c9 100644
--- a/src/SelectEntitiesInterface.php
+++ b/src/SelectEntitiesInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\drd;
 
+use Drupal\drd\Entity\HostInterface;
+use Drupal\drd\Entity\CoreInterface;
+use Drupal\drd\Entity\DomainInterface;
 /**
  * Interface for DRD entities queries service.
  */
@@ -88,7 +91,7 @@ interface SelectEntitiesInterface {
   /**
    * Get selected hosts.
    *
-   * @return \Drupal\drd\Entity\HostInterface[]|false
+   * @return HostInterface[]|false
    *   The selected hosts.
    */
   public function hosts();
@@ -96,7 +99,7 @@ interface SelectEntitiesInterface {
   /**
    * Get selected cores.
    *
-   * @return \Drupal\drd\Entity\CoreInterface[]|false
+   * @return CoreInterface[]|false
    *   The selected cores.
    */
   public function cores();
@@ -104,7 +107,7 @@ interface SelectEntitiesInterface {
   /**
    * Get selected domains.
    *
-   * @return \Drupal\drd\Entity\DomainInterface[]|false
+   * @return DomainInterface[]|false
    *   The selected domains.
    */
   public function domains();
diff --git a/src/SshCommand.php b/src/SshCommand.php
index e062b00..38fbde5 100644
--- a/src/SshCommand.php
+++ b/src/SshCommand.php
@@ -17,7 +17,7 @@ class SshCommand {
   /**
    * DRD domain entity.
    *
-   * @var \Drupal\drd\Entity\DomainInterface
+   * @var DomainInterface
    */
   protected $domain;
 
@@ -38,7 +38,7 @@ class SshCommand {
   /**
    * Set the DRD domain entity.
    *
-   * @param \Drupal\drd\Entity\DomainInterface $domain
+   * @param DomainInterface $domain
    *   The domain entity.
    *
    * @return $this
diff --git a/src/SshLibSec.php b/src/SshLibSec.php
index 8430582..ff15120 100644
--- a/src/SshLibSec.php
+++ b/src/SshLibSec.php
@@ -54,7 +54,7 @@ class SshLibSec extends Ssh {
    * {@inheritdoc}
    */
   public function exec($command): bool {
-    /** @var \phpseclib\Net\SSH2 $connection */
+    /** @var SSH2 $connection */
     $connection = $this->connection;
     $this->output = $connection->exec($command);
     if (empty($this->output)) {
diff --git a/src/Update/Manager.php b/src/Update/Manager.php
index c821ed5..218782c 100644
--- a/src/Update/Manager.php
+++ b/src/Update/Manager.php
@@ -24,9 +24,9 @@ abstract class Manager extends DefaultPluginManager implements ManagerInterface
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Update/ManagerStorage.php b/src/Update/ManagerStorage.php
index 93a0bcc..36729dc 100644
--- a/src/Update/ManagerStorage.php
+++ b/src/Update/ManagerStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Update;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -15,27 +16,27 @@ use Traversable;
 class ManagerStorage extends Manager implements ManagerStorageInterface {
 
   /**
-   * @var \Drupal\drd\Update\ManagerBuild
+   * @var ManagerBuild
    */
   protected $build;
 
   /**
-   * @var \Drupal\drd\Update\ManagerProcess
+   * @var ManagerProcess
    */
   protected $process;
 
   /**
-   * @var \Drupal\drd\Update\ManagerTests
+   * @var ManagerTests
    */
   protected $test;
 
   /**
-   * @var \Drupal\drd\Update\ManagerDeploy
+   * @var ManagerDeploy
    */
   protected $deploy;
 
   /**
-   * @var \Drupal\drd\Update\ManagerFinish
+   * @var ManagerFinish
    */
   protected $finish;
 
@@ -43,13 +44,13 @@ class ManagerStorage extends Manager implements ManagerStorageInterface {
    * ManagerStorage constructor.
    *
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\drd\Update\ManagerBuild $build
-   * @param \Drupal\drd\Update\ManagerProcess $process
-   * @param \Drupal\drd\Update\ManagerTests $test
-   * @param \Drupal\drd\Update\ManagerDeploy $deploy
-   * @param \Drupal\drd\Update\ManagerFinish $finish
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
+   * @param ManagerBuild $build
+   * @param ManagerProcess $process
+   * @param ManagerTests $test
+   * @param ManagerDeploy $deploy
+   * @param ManagerFinish $finish
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ManagerBuild $build, ManagerProcess $process, ManagerTests $test, ManagerDeploy $deploy, ManagerFinish $finish) {
     parent::__construct($namespaces, $cache_backend, $module_handler);
@@ -109,7 +110,7 @@ class ManagerStorage extends Manager implements ManagerStorageInterface {
    *
    * @return object|PluginBuildInterface|PluginDeployInterface|PluginFinishInterface|PluginProcessInterface|PluginStorageInterface|PluginTestInterface
    *   The update plugin.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private function instance($type, array $settings) {
     $id = $settings['current'][$type];
diff --git a/src/Update/ManagerStorageInterface.php b/src/Update/ManagerStorageInterface.php
index 50bce82..f80aea2 100644
--- a/src/Update/ManagerStorageInterface.php
+++ b/src/Update/ManagerStorageInterface.php
@@ -30,7 +30,7 @@ interface ManagerStorageInterface extends ManagerInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param array $settings
    *   The plugin settings.
@@ -42,7 +42,7 @@ interface ManagerStorageInterface extends ManagerInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateGlobalForm(array &$form, FormStateInterface $form_state);
@@ -52,7 +52,7 @@ interface ManagerStorageInterface extends ManagerInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
diff --git a/src/Update/PluginBuildInterface.php b/src/Update/PluginBuildInterface.php
index 44f641a..eb0a4e1 100644
--- a/src/Update/PluginBuildInterface.php
+++ b/src/Update/PluginBuildInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Update;
 
+use Drupal\drd\Entity\ReleaseInterface;
 /**
  * Defines the required interface for all DRD Update Build plugins.
  */
@@ -12,7 +13,7 @@ interface PluginBuildInterface extends PluginInterface {
    *
    * @param PluginStorageInterface $storage
    *   The storage plugin.
-   * @param \Drupal\drd\Entity\ReleaseInterface[] $releases
+   * @param ReleaseInterface[] $releases
    *   The list of releases which need to be updated.
    *
    * @return $this
diff --git a/src/Update/PluginStorageInterface.php b/src/Update/PluginStorageInterface.php
index 951dd5f..7f7cdbc 100644
--- a/src/Update/PluginStorageInterface.php
+++ b/src/Update/PluginStorageInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd\Update;
 
+use Drupal\drd\Entity\ReleaseInterface;
 use Drupal\drd\Entity\CoreInterface;
 
 /**
@@ -35,9 +36,9 @@ interface PluginStorageInterface extends PluginInterface {
   /**
    * Start the update process.
    *
-   * @param \Drupal\drd\Entity\CoreInterface $core
+   * @param CoreInterface $core
    *   The core entity to update.
-   * @param \Drupal\drd\Entity\ReleaseInterface[] $releases
+   * @param ReleaseInterface[] $releases
    *   The list of releases that require updates.
    * @param bool $dry
    *   Whether to run the update in dry mode.
@@ -62,7 +63,7 @@ interface PluginStorageInterface extends PluginInterface {
   /**
    * Get the core entity.
    *
-   * @return \Drupal\drd\Entity\CoreInterface
+   * @return CoreInterface
    *   The core entity.
    */
   public function getCore(): CoreInterface;
diff --git a/src/UpdateProcessor.php b/src/UpdateProcessor.php
index cef0b70..05fe320 100644
--- a/src/UpdateProcessor.php
+++ b/src/UpdateProcessor.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\drd;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\KeyValueStore\KeyValueFactoryInterface;
@@ -22,21 +25,21 @@ use Drupal\update\UpdateProcessor as CoreUpdateProcessor;
 class UpdateProcessor extends CoreUpdateProcessor {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * UpdateProcessor constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
-   * @param \Drupal\update\UpdateFetcherInterface $update_fetcher
-   * @param \Drupal\Core\State\StateInterface $state_store
-   * @param \Drupal\Core\PrivateKey $private_key
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value_factory
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value_expirable_factory
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param ConfigFactoryInterface $config_factory
+   * @param QueueFactory $queue_factory
+   * @param UpdateFetcherInterface $update_fetcher
+   * @param StateInterface $state_store
+   * @param PrivateKey $private_key
+   * @param KeyValueFactoryInterface $key_value_factory
+   * @param KeyValueFactoryInterface $key_value_expirable_factory
+   * @param EntityTypeManagerInterface $entityTypeManager
    */
   public function __construct(ConfigFactoryInterface $config_factory, QueueFactory $queue_factory, UpdateFetcherInterface $update_fetcher, StateInterface $state_store, PrivateKey $private_key, KeyValueFactoryInterface $key_value_factory, KeyValueFactoryInterface $key_value_expirable_factory, EntityTypeManagerInterface $entityTypeManager) {
     parent::__construct($config_factory, $queue_factory, $update_fetcher, $state_store, $private_key, $key_value_factory, $key_value_expirable_factory);
@@ -450,16 +453,16 @@ class UpdateProcessor extends CoreUpdateProcessor {
   /**
    * Calculate the project update status.
    *
-   * @param \Drupal\drd\Entity\ProjectInterface $project
+   * @param ProjectInterface $project
    *   The project entity.
-   * @param \Drupal\drd\Entity\MajorInterface $major
+   * @param MajorInterface $major
    *   The major entity.
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release entity.
    * @param array $available
    *   Available data from drupal.org.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function calculate(ProjectInterface $project, MajorInterface $major, ReleaseInterface $release, array $available) {
     $project_data = [
@@ -500,9 +503,9 @@ class UpdateProcessor extends CoreUpdateProcessor {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function fetchData() {
     module_load_include('inc', 'update', 'update.compare');
@@ -516,7 +519,7 @@ class UpdateProcessor extends CoreUpdateProcessor {
       if (empty($ids)) {
         continue;
       }
-      /** @var \Drupal\drd\Entity\MajorInterface $major */
+      /** @var MajorInterface $major */
       foreach ($this->entityTypeManager->getStorage('drd_major')->loadMultiple($ids) as $major) {
         if ($project = $major->getProject()) {
           if (!isset($processed[$project->getName()])) {
@@ -537,7 +540,7 @@ class UpdateProcessor extends CoreUpdateProcessor {
               ->getQuery()
               ->condition('major', $major->id())
               ->execute();
-            /** @var \Drupal\drd\Entity\ReleaseInterface $release */
+            /** @var ReleaseInterface $release */
             foreach ($this->entityTypeManager->getStorage('drd_release')
                        ->loadMultiple($rids) as $release) {
               $this->calculate($project, $major, $release, $available);
diff --git a/src/Widgets.php b/src/Widgets.php
index 9f359ed..0f128cf 100644
--- a/src/Widgets.php
+++ b/src/Widgets.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd;
 
+use Drupal\drd\Plugin\Block\Base;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -12,20 +13,20 @@ use Drupal\Core\Session\AccountInterface;
 class Widgets {
 
   /**
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Widgets constructor.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $blockManager
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param BlockManagerInterface $blockManager
+   * @param AccountInterface $currentUser
    */
   public function __construct(BlockManagerInterface $blockManager, AccountInterface $currentUser) {
     $this->blockManager = $blockManager;
@@ -38,7 +39,7 @@ class Widgets {
    * @param bool $render
    *   Whether to render the widget's content.
    *
-   * @return \Drupal\drd\Plugin\Block\Base[]
+   * @return Base[]
    *   List of widgets.
    */
   public function findWidgets($render): array {
@@ -49,7 +50,7 @@ class Widgets {
           $definition['weight'] = 0;
         }
         if ($render) {
-          /** @var \Drupal\drd\Plugin\Block\Base $block */
+          /** @var Base $block */
           try {
             $block = $this->blockManager->createInstance($definition['id'], []);
             if ($block->access($this->currentUser)) {
