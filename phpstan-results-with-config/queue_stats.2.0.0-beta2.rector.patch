diff --git a/queue_stats.info.yml b/queue_stats.info.yml
index 75a1cab..af450a7 100644
--- a/queue_stats.info.yml
+++ b/queue_stats.info.yml
@@ -1,7 +1,7 @@
 name: 'Queue Statistics'
 type: module
 description: 'Calculate statistics about queues'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Queues'
 configure: 'queue_stats.admin_form'
 
diff --git a/src/Annotation/QueueStatistic.php b/src/Annotation/QueueStatistic.php
index cba3020..d2c6b48 100644
--- a/src/Annotation/QueueStatistic.php
+++ b/src/Annotation/QueueStatistic.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\queue_stats\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class QueueStatistic extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Event/QueueItemEvent.php b/src/Event/QueueItemEvent.php
index a7920f5..a8fdbf7 100644
--- a/src/Event/QueueItemEvent.php
+++ b/src/Event/QueueItemEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\queue_stats\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\queue_stats\MonitoredQueueInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Queue item event class.
@@ -26,7 +26,7 @@ class QueueItemEvent extends Event {
   /**
    * The queue the item is/was related to.
    *
-   * @var \Drupal\queue_stats\MonitoredQueueInterface
+   * @var MonitoredQueueInterface
    */
   protected $queue;
 
@@ -49,7 +49,7 @@ class QueueItemEvent extends Event {
    *
    * @param string $name
    *   Event name.
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   Related queue.
    * @param object $item
    *   Queue item.
@@ -76,7 +76,7 @@ class QueueItemEvent extends Event {
   /**
    * Returns the related queue.
    *
-   * @return \Drupal\queue_stats\MonitoredQueueInterface
+   * @return MonitoredQueueInterface
    *   Related queue.
    */
   public function getQueue() {
diff --git a/src/Form/AdminForm.php b/src/Form/AdminForm.php
index 214999e..8f11754 100644
--- a/src/Form/AdminForm.php
+++ b/src/Form/AdminForm.php
@@ -18,32 +18,32 @@ class AdminForm extends FormBase {
   /**
    * The queue worker manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorkerManager;
 
   /**
    * The queue stat manager.
    *
-   * @var \Drupal\queue_stats\Plugin\QueueStatisticManager
+   * @var QueueStatisticManager
    */
   protected $queueStatManager;
 
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * AdminForm constructor.
    *
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_worker_manager
+   * @param QueueWorkerManagerInterface $queue_worker_manager
    *   The queue worker manager.
-   * @param \Drupal\queue_stats\Plugin\QueueStatisticManager $queue_stat_manager
+   * @param QueueStatisticManager $queue_stat_manager
    *   The The queue stat manager.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
    */
   public function __construct(
diff --git a/src/MonitoredQueue.php b/src/MonitoredQueue.php
index 3df5f7a..518f0d1 100644
--- a/src/MonitoredQueue.php
+++ b/src/MonitoredQueue.php
@@ -16,7 +16,7 @@ class MonitoredQueue implements MonitoredQueueInterface, QueueInterface, QueueGa
   /**
    * The decorated queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
@@ -30,27 +30,27 @@ class MonitoredQueue implements MonitoredQueueInterface, QueueInterface, QueueGa
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * The current time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * MonitoredQueue constructor.
    *
-   * @param \Drupal\Core\Queue\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The queue to be monitored.
    * @param string $name
    *   The queue name.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The current time.
    */
   public function __construct(QueueInterface $queue, string $name, EventDispatcherInterface $dispatcher, TimeInterface $time) {
@@ -70,7 +70,7 @@ class MonitoredQueue implements MonitoredQueueInterface, QueueInterface, QueueGa
    */
   public function deleteItem($item) {
     $event = new QueueItemEvent(QueueItemEvent::PROCESSING_COMPLETED, $this, $item, $this->time->getCurrentMicroTime());
-    $this->dispatcher->dispatch($event->getName(), $event);
+    $this->dispatcher->dispatch($event, $event->getName());
 
     $this->queue->deleteItem($item);
   }
@@ -82,7 +82,7 @@ class MonitoredQueue implements MonitoredQueueInterface, QueueInterface, QueueGa
     $item = $this->queue->claimItem($lease_time);
     if ($item !== FALSE) {
       $event = new QueueItemEvent(QueueItemEvent::PROCESSING_STARTED, $this, $item, $this->time->getCurrentMicroTime());
-      $this->dispatcher->dispatch($event->getName(), $event);
+      $this->dispatcher->dispatch($event, $event->getName());
     }
     return $item;
   }
@@ -108,7 +108,7 @@ class MonitoredQueue implements MonitoredQueueInterface, QueueInterface, QueueGa
     $released = $this->queue->releaseItem($item);
     if ($released) {
       $event = new QueueItemEvent(QueueItemEvent::PROCESSING_ABORTED, $this, $item, $this->time->getCurrentMicroTime());
-      $this->dispatcher->dispatch($event->getName(), $event);
+      $this->dispatcher->dispatch($event, $event->getName());
     }
     return $released;
   }
@@ -148,7 +148,7 @@ class MonitoredQueue implements MonitoredQueueInterface, QueueInterface, QueueGa
   /**
    * Return the queue being monitored.
    *
-   * @return \Drupal\Core\Queue\QueueInterface
+   * @return QueueInterface
    *   The queue being monitored.
    */
   public function getMonitoredQueue() {
diff --git a/src/MonitoredQueueFactory.php b/src/MonitoredQueueFactory.php
index 59993dc..5850482 100644
--- a/src/MonitoredQueueFactory.php
+++ b/src/MonitoredQueueFactory.php
@@ -16,21 +16,21 @@ class MonitoredQueueFactory extends QueueFactory {
   /**
    * The decorated queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * The event dispatcher for queue events.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * The current time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
diff --git a/src/Plugin/Block/ListBlock.php b/src/Plugin/Block/ListBlock.php
index 1cd4a0d..dae8fe6 100644
--- a/src/Plugin/Block/ListBlock.php
+++ b/src/Plugin/Block/ListBlock.php
@@ -26,14 +26,14 @@ class ListBlock extends BlockBase implements ContainerFactoryPluginInterface {
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * The queue worker factory.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorkerManager;
 
@@ -42,7 +42,7 @@ class ListBlock extends BlockBase implements ContainerFactoryPluginInterface {
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -55,11 +55,11 @@ class ListBlock extends BlockBase implements ContainerFactoryPluginInterface {
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_worker_manager
+   * @param QueueWorkerManagerInterface $queue_worker_manager
    *   The queue worker manager factory.
-   * @param \Drupal\queue_stats\Plugin\QueueStatisticManager $queue_stat_manager
+   * @param QueueStatisticManager $queue_stat_manager
    *   The queue stats manager.
    */
   public function __construct(
diff --git a/src/Plugin/DateIntervalStatistic.php b/src/Plugin/DateIntervalStatistic.php
index bb6c48a..17581b7 100644
--- a/src/Plugin/DateIntervalStatistic.php
+++ b/src/Plugin/DateIntervalStatistic.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\queue_stats\Plugin;
 
+use Drupal\Core\Datetime\DateFormatterInterface;
 /**
  * Trait for statistics in the form of date intervals.
  */
@@ -10,7 +11,7 @@ trait DateIntervalStatistic {
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
diff --git a/src/Plugin/QueueStatistic/EstimatedTimeToFinish.php b/src/Plugin/QueueStatistic/EstimatedTimeToFinish.php
index f68dbcc..042bd49 100644
--- a/src/Plugin/QueueStatistic/EstimatedTimeToFinish.php
+++ b/src/Plugin/QueueStatistic/EstimatedTimeToFinish.php
@@ -31,9 +31,9 @@ class EstimatedTimeToFinish extends QueueStatisticBase implements ContainerFacto
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The dependency injection container.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
    */
   public function __construct(
diff --git a/src/Plugin/QueueStatistic/ProcessingRate.php b/src/Plugin/QueueStatistic/ProcessingRate.php
index 35be4ca..5cac9db 100644
--- a/src/Plugin/QueueStatistic/ProcessingRate.php
+++ b/src/Plugin/QueueStatistic/ProcessingRate.php
@@ -32,7 +32,7 @@ class ProcessingRate extends QueueStatisticBase implements EventSubscriberInterf
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The site state.
    */
   public function __construct(
@@ -74,11 +74,11 @@ class ProcessingRate extends QueueStatisticBase implements EventSubscriberInterf
   /**
    * Event handler for when items have been processed successfully.
    *
-   * @param \Drupal\queue_stats\Event\QueueItemEvent $event
+   * @param QueueItemEvent $event
    *   The event.
    */
   public function trackCompletion(QueueItemEvent $event) {
-    /** @var \Drupal\queue_stats\Statistics\ExponentialMovingAverage $value */
+    /** @var ExponentialMovingAverage $value */
     $value = $this->retrieveValue($event->getQueue(), 'value', new ExponentialMovingAverage(10));
 
     $last_processing_time = $this->retrieveValue($event->getQueue(), 'last_processing_time');
@@ -98,7 +98,7 @@ class ProcessingRate extends QueueStatisticBase implements EventSubscriberInterf
    * {@inheritdoc}
    */
   public function getValue(MonitoredQueueInterface $queue) {
-    /** @var \Drupal\queue_stats\Statistics\ExponentialMovingAverage $item_rate */
+    /** @var ExponentialMovingAverage $item_rate */
     $item_rate = $this->retrieveValue($queue, 'value', new ExponentialMovingAverage(10));
     return $item_rate->average();
   }
diff --git a/src/Plugin/QueueStatistic/ProcessingTime.php b/src/Plugin/QueueStatistic/ProcessingTime.php
index e11e550..ee9c760 100644
--- a/src/Plugin/QueueStatistic/ProcessingTime.php
+++ b/src/Plugin/QueueStatistic/ProcessingTime.php
@@ -28,7 +28,7 @@ class ProcessingTime extends QueueStatisticBase implements EventSubscriberInterf
   /**
    * Events for items which have started processing.
    *
-   * @var \Drupal\queue_stats\Event\QueueItemEvent[]
+   * @var QueueItemEvent[]
    */
   protected $itemStarts;
 
@@ -41,9 +41,9 @@ class ProcessingTime extends QueueStatisticBase implements EventSubscriberInterf
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The site state.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
    */
   public function __construct(
@@ -89,7 +89,7 @@ class ProcessingTime extends QueueStatisticBase implements EventSubscriberInterf
   /**
    * Event handler when events start processing.
    *
-   * @param \Drupal\queue_stats\Event\QueueItemEvent $event
+   * @param QueueItemEvent $event
    *   The event.
    */
   public function trackStart(QueueItemEvent $event) {
@@ -99,7 +99,7 @@ class ProcessingTime extends QueueStatisticBase implements EventSubscriberInterf
   /**
    * Event handler when events have finished processing.
    *
-   * @param \Drupal\queue_stats\Event\QueueItemEvent $event
+   * @param QueueItemEvent $event
    *   The event.
    */
   public function trackCompletion(QueueItemEvent $event) {
@@ -108,7 +108,7 @@ class ProcessingTime extends QueueStatisticBase implements EventSubscriberInterf
 
       $processing_time = $event->getTimestamp() - $startEvent->getTimestamp();
       if ($processing_time > 0) {
-        /** @var \Drupal\queue_stats\Statistics\ExponentialMovingAverage $value */
+        /** @var ExponentialMovingAverage $value */
         $value = $this->retrieveValue($event->getQueue(), 'value', new ExponentialMovingAverage(10));
         $value->add($processing_time);
         $this->storeValue($event->getQueue(), 'value', $value);
@@ -120,7 +120,7 @@ class ProcessingTime extends QueueStatisticBase implements EventSubscriberInterf
    * {@inheritdoc}
    */
   public function getValue(MonitoredQueueInterface $queue) {
-    /** @var \Drupal\queue_stats\Statistics\ExponentialMovingAverage $average */
+    /** @var ExponentialMovingAverage $average */
     $average = $this->retrieveValue($queue, 'value', new ExponentialMovingAverage(10));
     return $average->average();
   }
diff --git a/src/Plugin/QueueStatistic/QueueTime.php b/src/Plugin/QueueStatistic/QueueTime.php
index a261aaa..3adbdb1 100644
--- a/src/Plugin/QueueStatistic/QueueTime.php
+++ b/src/Plugin/QueueStatistic/QueueTime.php
@@ -34,9 +34,9 @@ class QueueTime extends QueueStatisticBase implements EventSubscriberInterface,
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The site state.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
    */
   public function __construct(
@@ -81,7 +81,7 @@ class QueueTime extends QueueStatisticBase implements EventSubscriberInterface,
   /**
    * Event handler for tracking when items have finished processing.
    *
-   * @param \Drupal\queue_stats\Event\QueueItemEvent $event
+   * @param QueueItemEvent $event
    *   The event.
    */
   public function trackCompletion(QueueItemEvent $event) {
@@ -94,7 +94,7 @@ class QueueTime extends QueueStatisticBase implements EventSubscriberInterface,
    * {@inheritdoc}
    */
   public function getValue(MonitoredQueueInterface $queue) {
-    /** @var \Drupal\queue_stats\Statistics\ExponentialMovingAverage $average */
+    /** @var ExponentialMovingAverage $average */
     $average = $this->retrieveValue($queue, 'value', new ExponentialMovingAverage(10));
     return $average->average();
   }
diff --git a/src/Plugin/QueueStatisticInterface.php b/src/Plugin/QueueStatisticInterface.php
index ff2c40d..6dd5465 100644
--- a/src/Plugin/QueueStatisticInterface.php
+++ b/src/Plugin/QueueStatisticInterface.php
@@ -21,7 +21,7 @@ interface QueueStatisticInterface extends PluginInspectionInterface {
   /**
    * Return the statistics value for a queue.
    *
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   The queue to show statistics for.
    *
    * @return int|float
@@ -43,7 +43,7 @@ interface QueueStatisticInterface extends PluginInspectionInterface {
   /**
    * Reset the statistic for a queue.
    *
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   The queue to reset statistics for.
    */
   public function reset(MonitoredQueueInterface $queue);
diff --git a/src/Plugin/QueueStatisticManager.php b/src/Plugin/QueueStatisticManager.php
index 5943031..ff32bc2 100644
--- a/src/Plugin/QueueStatisticManager.php
+++ b/src/Plugin/QueueStatisticManager.php
@@ -19,21 +19,21 @@ class QueueStatisticManager extends DefaultPluginManager implements EventSubscri
   /**
    * The queue worker manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorkerManager;
 
   /**
    * The queue factory.
    *
-   * @var \Drupal\queue_stats\MonitoredQueueFactory
+   * @var MonitoredQueueFactory
    */
   protected $queueFactory;
 
   /**
    * The event dispatcher used to dispatch queue events.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;
 
@@ -43,13 +43,13 @@ class QueueStatisticManager extends DefaultPluginManager implements EventSubscri
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_worker_manager
+   * @param QueueWorkerManagerInterface $queue_worker_manager
    *   The queue worker manager.
-   * @param \Drupal\queue_stats\MonitoredQueueFactory $queue_factory
+   * @param MonitoredQueueFactory $queue_factory
    *   The queue factory.
    */
   public function __construct(
@@ -115,11 +115,11 @@ class QueueStatisticManager extends DefaultPluginManager implements EventSubscri
   /**
    * Event handler for reacting to queue events.
    *
-   * @param \Drupal\queue_stats\Event\QueueItemEvent $event
+   * @param QueueItemEvent $event
    *   Queue event.
    */
   public function onEvent(QueueItemEvent $event) {
-    $this->eventDispatcher->dispatch($event->getName(), $event);
+    $this->eventDispatcher->dispatch($event, $event->getName());
   }
 
   /**
diff --git a/src/Plugin/StatefulStatistic.php b/src/Plugin/StatefulStatistic.php
index 7c74c94..4e2b39e 100644
--- a/src/Plugin/StatefulStatistic.php
+++ b/src/Plugin/StatefulStatistic.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\queue_stats\Plugin;
 
+use Drupal\Core\State\StateInterface;
 use Drupal\queue_stats\MonitoredQueueInterface;
 
 /**
@@ -12,14 +13,14 @@ trait StatefulStatistic {
   /**
    * The state interface.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Return a parent key for the queue under which statistics should store data.
    *
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   The queue.
    *
    * @return string
@@ -32,7 +33,7 @@ trait StatefulStatistic {
   /**
    * Store a value for a queue.
    *
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   The queue to store a value for.
    * @param string $name
    *   The name of the value to store.
@@ -46,7 +47,7 @@ trait StatefulStatistic {
   /**
    * Retrieve a value for queue.
    *
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   The queue to retrieve a value for.
    * @param string $name
    *   The name of the value to store.
@@ -63,7 +64,7 @@ trait StatefulStatistic {
   /**
    * Delete a stored entry.
    *
-   * @param \Drupal\queue_stats\MonitoredQueueInterface $queue
+   * @param MonitoredQueueInterface $queue
    *   The queue to delete a value for.
    * @param string $name
    *   The name of the entry to store.
