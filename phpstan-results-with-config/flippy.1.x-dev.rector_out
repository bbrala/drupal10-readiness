modules/contrib/flippy/flippy.install
modules/contrib/flippy/flippy.module
modules/contrib/flippy/src/FlippyEvent.php
modules/contrib/flippy/src/FlippyPager.php
modules/contrib/flippy/src/Plugin/Block/FlippyBlock.php
modules/contrib/flippy/tests/src/Functional/FlippyTest.php

4 files with changes
====================

1) modules/contrib/flippy/tests/src/Functional/FlippyTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create an article content type that we will use for testing.
@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Confirm that the front page contains the standard text.
-    $this->assertNoText('Previous');
-    $this->assertText('Next');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Previous');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Next');

     // Load the second page.
     $this->drupalGet('/node/2');
@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Confirm that the front page contains the standard text.
-    $this->assertText('Previous');
-    $this->assertText('Next');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Previous');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Next');

     // Load the last page.
     $this->drupalGet('/node/3');
@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Confirm that the front page contains the standard text.
-    $this->assertText('Previous');
-    $this->assertNoText('Next');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Previous');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Next');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/flippy/src/Plugin/Block/FlippyBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flippy\Plugin\Block;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The http request.
    *
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   protected $request;

@@ @@
   /**
    * The flippy pager service.
    *
-   * @var \Drupal\flippy\FlippyPager
+   * @var FlippyPager
    */
   protected $flippyPager;

@@ @@
   /**
    * The flippy Settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $flippySettings;

@@ @@
   /**
    * The current route service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/flippy/src/FlippyPager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flippy;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   public $entityFieldManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   public $entityTypeManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The flippy Settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $flippySettings;

@@ @@
   /**
    * Drupal Language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event displatcher.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory to get flippy settings.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Drupal token service.
-   * @param \Drupal\Core\Language\LanguageManager $languageManager
+   * @param LanguageManager $languageManager
    *   Drupal Language manager service.
    */
   public function __construct(EntityFieldManagerInterface $entityFieldManager, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, Connection $connection, ConfigFactoryInterface $config_factory, Token $token, LanguageManager $languageManager) {
@@ @@
   /**
    * Helper function: Query to get the list of flippy pagers.
    *
-   * @param Drupal\node\Entity\Node $node
+   * @param Node $node
    *   Current node object.
    *
    * @return array
@@ @@
         'last' => $last,
       ];
       $event = new FlippyEvent($queries, $node);
-      $this->eventDispatcher->dispatch('buildFlippyQuery', $event);
+      $this->eventDispatcher->dispatch($event, 'buildFlippyQuery');
       $queries = $event->getQueries();

       // Execute the queries.
@@ @@
   /**
    * Determine if the Flippy pager should be shown for the give node.
    *
-   * @param Drupal\node\Entity\Node $node
+   * @param Node $node
    *   Node to check for pager.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


4) modules/contrib/flippy/src/FlippyEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flippy;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\node\NodeInterface;

 /**
@@ @@
    *
    * @param array $queries
    *   The queries for this event.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node object.
    */
   public function __construct(array $queries, NodeInterface $node) {
@@ @@
   /**
    * Getter for node.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The node object for this event.
    */
   public function getNode() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 4 files have been changed by Rector                                       

