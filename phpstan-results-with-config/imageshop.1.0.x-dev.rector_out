modules/contrib/imageshop/imageshop.install
modules/contrib/imageshop/imageshop.module
modules/contrib/imageshop/src/Controller/ImageshopController.php
modules/contrib/imageshop/src/Element/ImageShopElement.php
modules/contrib/imageshop/src/Form/SettingsForm.php
modules/contrib/imageshop/src/ImageShopTempToken.php
modules/contrib/imageshop/src/Plugin/Field/FieldWidget/ImageShopWidget.php
modules/contrib/imageshop/src/TokenService.php
modules/contrib/imageshop/tests/modules/imageshop_test/imageshop_test.module
modules/contrib/imageshop/tests/modules/imageshop_test/src/Controller/ImageshopTestController.php
modules/contrib/imageshop/tests/modules/imageshop_test/src/ImageshopTestServiceProvider.php
modules/contrib/imageshop/tests/modules/imageshop_test/src/TestTokenService.php
modules/contrib/imageshop/tests/src/Functional/ElementTest.php
modules/contrib/imageshop/tests/src/FunctionalJavascript/MediaBrowserTest.php

7 files with changes
====================

1) modules/contrib/imageshop/tests/src/Functional/ElementTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\imageshop\Functional;

+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\file\Functional\FileFieldTestBase;
 use Drupal\Tests\image\Kernel\ImageFieldCreationTrait;
@@ @@
     $field_name = 'my_imageshop_field';
     $type = 'article';
     $this->createImageField($field_name, $type);
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');
     $display_repository->getFormDisplay('node', $type)
       ->setComponent($field_name, [
@@ @@
     $this->drupalGet('/node/add/article');
     $files = $this->container->get('entity_type.manager')->getStorage('file')->loadByProperties([]);
     $this->assertEmpty($files);
-    $this->drupalPostForm('/node/add/article', [
+    $this->drupalGet('/node/add/article');
+    $this->submitForm([
       'my_imageshop_field[0][url]' => Url::fromUserInput('/core/misc/druplicon.png')->setOption('absolute', TRUE)->toString(),
     ], 'Upload');
     $files = $this->container->get('entity_type.manager')->getStorage('file')->loadByProperties([]);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/imageshop/tests/modules/imageshop_test/imageshop_test.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Render\RendererInterface;
 /**
  * @file
  * Drupal hooks.
@@ @@
  * Implements hook_imageshop_iframe_render_alter().
  */
 function imageshop_test_imageshop_iframe_render_alter(array &$render) {
-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');
   $render["#attached"]["drupalSettings"]["imageShop"]["baseUrl"] = $renderer->executeInRenderContext(new RenderContext(), function () {
     return Url::fromRoute('imageshop_test.mock_chooser')->setOption('absolute', TRUE)->toString() . '?';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/imageshop/src/TokenService.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a TokenService object.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger.
    */
   public function __construct(ClientInterface $http_client, ConfigFactoryInterface $config_factory, StateInterface $state, LoggerInterface $logger) {
@@ @@
    * Method description.
    */
   public function getTemporaryToken() {
-    /** @var \Drupal\imageshop\ImageShopTempToken $token */
+    /** @var ImageShopTempToken $token */
     $token = $this->state->get(self::TOKEN_STATE_KEY, FALSE);
     // Check if this token is good.
     if ($token && !$token->isExpired()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/imageshop/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\imageshop\Form;

+use Drupal\media\Entity\MediaType;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
       '#default_value' => $this->config('imageshop.settings')->get('hide_media_browser'),
     ];
     try {
-      /** @var \Drupal\media\Entity\MediaType[] $media_types */
+      /** @var MediaType[] $media_types */
       $media_types = $this->entityTypeManager->getStorage('media_type')->loadMultiple();
       $options = [];
       foreach ($media_types as $type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/imageshop/src/Element/ImageShopElement.php:130

    ---------- begin diff ----------
@@ @@
    * Helper function.
    */
   public static function getFileForUrl($url, $dir) {
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     $class = "\Symfony\Component\HttpFoundation\File\MimeType\FileBinaryMimeTypeGuesser";
     if (class_exists("\Symfony\Component\Mime\FileBinaryMimeTypeGuesser")) {
@@ @@
     }
     $file_system->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY);
     $filename = sprintf('%s/%s.%s', $dir, $filename, $extension);
-    $file = file_save_data($data, $filename);
+    $file = \Drupal::service('file.repository')->writeData($data, $filename);
     if (!$file) {
       return FALSE;
     }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/imageshop/src/Controller/ImageshopController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Bare HTML renderer.
    *
-   * @var \Drupal\Core\Render\BareHtmlPageRendererInterface
+   * @var BareHtmlPageRendererInterface
    */
   protected $bareHtmlRenderer;

@@ @@
   /**
    * Token service.
    *
-   * @var \Drupal\imageshop\TokenService
+   * @var TokenService
    */
   protected $tokenService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/imageshop/imageshop.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\media_library\MediaLibraryState;
+use Drupal\imageshop\TokenService;
 /**
  * @file
  * Drupal hooks for imageshop.
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function imageshop_form_media_library_add_form_upload_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\media_library\MediaLibraryState $state */
+  /** @var MediaLibraryState $state */
   $state = $form_state->get('media_library_state');
   if (empty($state)) {
     return;
@@ @@
  * Implements hook_cron().
  */
 function imageshop_cron() {
-  /** @var \Drupal\imageshop\TokenService $token_service */
+  /** @var TokenService $token_service */
   $token_service = \Drupal::service('imageshop.token_service');
   $token_service->regenerateToken();
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

