modules/contrib/mini_layouts/mini_layouts.module
modules/contrib/mini_layouts/src/Entity/MiniLayout.php
modules/contrib/mini_layouts/src/Entity/MiniLayoutAccessControlHandler.php
modules/contrib/mini_layouts/src/Entity/MiniLayoutListBuilder.php
modules/contrib/mini_layouts/src/Entity/MiniLayoutStorage.php
modules/contrib/mini_layouts/src/Entity/MiniLayoutViewBuilder.php
modules/contrib/mini_layouts/src/Form/MiniLayoutDeleteForm.php
modules/contrib/mini_layouts/src/Form/MiniLayoutForm.php
modules/contrib/mini_layouts/src/Form/MiniLayoutLayoutBuilderForm.php
modules/contrib/mini_layouts/src/Plugin/Block/MiniLayout.php
modules/contrib/mini_layouts/src/Plugin/Deriver/MiniLayoutBlockDeriver.php
modules/contrib/mini_layouts/src/Plugin/SectionStorage/MiniLayoutSectionStorage.php

7 files with changes
====================

1) modules/contrib/mini_layouts/src/Plugin/SectionStorage/MiniLayoutSectionStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mini_layouts\Plugin\SectionStorage;

+use Drupal\mini_layouts\Entity\MiniLayout;
+use Drupal\layout_builder\SectionListInterface;
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
@@ @@
 class MiniLayoutSectionStorage extends SectionStorageBase implements ContainerFactoryPluginInterface, ThirdPartySettingsInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;

   /**
-   * @var \Drupal\layout_builder\Entity\SampleEntityGeneratorInterface
+   * @var SampleEntityGeneratorInterface
    */
   protected $sampleEntityGenerator;

@@ @@
   /**
    * Get the mini layout entity.
    *
-   * @return \Drupal\mini_layouts\Entity\MiniLayout
+   * @return MiniLayout
    */
   protected function getMiniLayout() {
     return $this->getContextValue('display');
@@ @@
   /**
    * Gets the section list.
    *
-   * @return \Drupal\layout_builder\SectionListInterface
+   * @return SectionListInterface
    *   The section list.
    */
   protected function getSectionList() {
@@ @@
    * @param string $id
    *   The storage ID, see ::getStorageId().
    *
-   * @return \Drupal\layout_builder\SectionListInterface
+   * @return SectionListInterface
    *   The section list.
    *
    * @throws \InvalidArgumentException
@@ @@
    * \Drupal\layout_builder\Routing\LayoutBuilderRoutesTrait is provided for the
    * typical use case of building a standard Layout Builder UI.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection.
    *
    * @see \Drupal\Core\Routing\RoutingEvents::ALTER
@@ @@
   /**
    * Gets the URL used when redirecting away from the Layout Builder UI.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL object.
    */
   public function getRedirectUrl() {
@@ @@
    *   (optional) The link relationship type, for example: 'view' or 'disable'.
    *   Defaults to 'view'.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL object.
    */
   public function getLayoutBuilderUrl($rel = 'view') {
@@ @@
    * @param array $defaults
    *   The route defaults array.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    *   The available plugin contexts.
    *
    * @see \Drupal\Core\ParamConverter\ParamConverterInterface::convert()
@@ @@
   /**
    * Determines if this section storage is applicable for the current contexts.
    *
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $cacheability
+   * @param RefinableCacheableDependencyInterface $cacheability
    *   Refinable cacheability object, typically provided by the section storage
    *   manager. When implementing this method, populate $cacheability with any
    *   information that affects whether this storage is applicable.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/mini_layouts/src/Plugin/Deriver/MiniLayoutBlockDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mini_layouts\Plugin\Deriver;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Context\ContextDefinition;
@@ @@
 class MiniLayoutBlockDeriver extends DeriverBase implements ContainerDeriverInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * MiniLayoutBlockDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
    * @param array $base_plugin_definition
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
     if (!empty($this->derivatives)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/mini_layouts/src/Plugin/Block/MiniLayout.php:24

    ---------- begin diff ----------
@@ @@
 class MiniLayout extends BlockBase implements ContextAwarePluginInterface, ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface
+   * @var SectionStorageManagerInterface
    */
   protected $sectionStorageManager;

@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/mini_layouts/src/Form/MiniLayoutLayoutBuilderForm.php:12

    ---------- begin diff ----------
@@ @@
   use PreviewToggleTrait;

   /**
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;

   /**
-   * @var \Drupal\layout_builder\SectionStorageInterface
+   * @var SectionStorageInterface
    */
   protected $sectionStorage;

@@ @@
   /**
    * Retrieves the section storage object.
    *
-   * @return \Drupal\layout_builder\SectionStorageInterface
+   * @return SectionStorageInterface
    *   The section storage for the current form.
    */
   public function getSectionStorage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/mini_layouts/src/Form/MiniLayoutForm.php:186

    ---------- begin diff ----------
@@ @@
    * Validate the information entered for the new context.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function formValidateAddRequiredContext($form, FormStateInterface $form_state) {
     $values = $form_state->getValue(['required_context', '_add_new']);
@@ @@
    * Submit to add a required context.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function formSubmitAddRequiredContext($form, FormStateInterface $form_state) {
     $rc = $form_state->get('required_context');
@@ @@
    * Submit to remove a required context.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function formSubmitRemoveRequiredContext($form, FormStateInterface $form_state) {
     $button = $form_state->getTriggeringElement();
@@ @@
    * Ajax callback to reload the required context.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
     parent::copyFormValuesToEntity($entity, $form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/mini_layouts/src/Entity/MiniLayoutStorage.php:20

    ---------- begin diff ----------
@@ @@

     /**
      * @var integer $delta
-     * @var \Drupal\layout_builder\Section $section
+     * @var Section $section
      */
     foreach ($record['sections'] as $delta => $section) {
       $record['sections'][$delta] = $section->toArray();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/mini_layouts/src/Entity/MiniLayout.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mini_layouts\Entity;

+use Drupal\layout_builder\Section;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\layout_builder\SectionListInterface;
 use Drupal\layout_builder\SectionStorage\SectionStorageTrait;
@@ @@
   /**
    * Gets the layout sections.
    *
-   * @return \Drupal\layout_builder\Section[]
+   * @return Section[]
    *   A sequentially and numerically keyed array of section objects.
    */
   public function getSections() {
@@ @@
    * Implementations of this method are expected to call array_values() to rekey
    * the list of sections.
    *
-   * @param \Drupal\layout_builder\Section[] $sections
+   * @param Section[] $sections
    *   An array of section objects.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

