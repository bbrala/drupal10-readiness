diff --git a/modules/simple_sitemap_engines/src/Controller/SearchEngineListBuilder.php b/modules/simple_sitemap_engines/src/Controller/SearchEngineListBuilder.php
index 67e0c2f..76da449 100644
--- a/modules/simple_sitemap_engines/src/Controller/SearchEngineListBuilder.php
+++ b/modules/simple_sitemap_engines/src/Controller/SearchEngineListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap_engines\Controller;
 
+use Drupal\simple_sitemap_engines\Entity\SearchEngine;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -19,25 +20,25 @@ class SearchEngineListBuilder extends ConfigEntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * SearchEngineListBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(EntityTypeInterface $entity_type,
@@ -79,7 +80,7 @@ class SearchEngineListBuilder extends ConfigEntityListBuilder {
   public function buildRow(EntityInterface $entity) {
     $last_submitted = $this->state->get("simple_sitemap_engines.simple_sitemap_engine.{$entity->id()}.last_submitted", -1);
 
-    /** @var \Drupal\simple_sitemap_engines\Entity\SearchEngine $entity */
+    /** @var SearchEngine $entity */
     $row['label'] = $entity->label();
     $row['url'] = $entity->url;
     $row['variants'] = implode(', ', $entity->sitemap_variants);
diff --git a/modules/simple_sitemap_engines/src/Form/SimplesitemapEnginesForm.php b/modules/simple_sitemap_engines/src/Form/SimplesitemapEnginesForm.php
index 5241ad4..f0f4b30 100644
--- a/modules/simple_sitemap_engines/src/Form/SimplesitemapEnginesForm.php
+++ b/modules/simple_sitemap_engines/src/Form/SimplesitemapEnginesForm.php
@@ -19,34 +19,34 @@ class SimplesitemapEnginesForm extends ConfigFormBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * The sitemap manager service.
    *
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   protected $sitemapManager;
 
   /**
    * SimplesitemapEnginesForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $sitemap_manager
+   * @param SimplesitemapManager $sitemap_manager
    *   The sitemap manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, DateFormatter $date_formatter, SimplesitemapManager $sitemap_manager) {
diff --git a/modules/simple_sitemap_engines/src/Plugin/QueueWorker/SitemapSubmitter.php b/modules/simple_sitemap_engines/src/Plugin/QueueWorker/SitemapSubmitter.php
index 021f3f8..2325faa 100644
--- a/modules/simple_sitemap_engines/src/Plugin/QueueWorker/SitemapSubmitter.php
+++ b/modules/simple_sitemap_engines/src/Plugin/QueueWorker/SitemapSubmitter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap_engines\Plugin\QueueWorker;
 
+use Drupal\simple_sitemap_engines\Entity\SearchEngine;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ -29,28 +30,28 @@ class SitemapSubmitter extends QueueWorkerBase implements ContainerFactoryPlugin
   /**
    * The EntityStorage service.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $engineStorage;
 
   /**
    * The HTTP Client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * The sitemap generator service.
    *
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;
 
   /**
    * The Drupal logger service.
    *
-   * @var \Drupal\simple_sitemap\Logger
+   * @var Logger
    */
   protected $logger;
 
@@ -64,7 +65,7 @@ class SitemapSubmitter extends QueueWorkerBase implements ContainerFactoryPlugin
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
@@ -77,17 +78,17 @@ class SitemapSubmitter extends QueueWorkerBase implements ContainerFactoryPlugin
    *   The plugin id.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $engine_storage
+   * @param EntityStorageInterface $engine_storage
    *   The EntityStorageInterface.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The client used to submit to engines.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
+   * @param Simplesitemap $generator
    *   The generator service.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   Standard logger.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   Drupal state service for last submitted.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(array $configuration,
@@ -129,7 +130,7 @@ class SitemapSubmitter extends QueueWorkerBase implements ContainerFactoryPlugin
    * {@inheritdoc}
    */
   public function processItem($engine_id) {
-    /** @var \Drupal\simple_sitemap_engines\Entity\SearchEngine $engine */
+    /** @var SearchEngine $engine */
     if ($engine = $this->engineStorage->load($engine_id)) {
 
       $sitemap_urls = [];
diff --git a/modules/simple_sitemap_views/src/Controller/SimpleSitemapViewsController.php b/modules/simple_sitemap_views/src/Controller/SimpleSitemapViewsController.php
index 508e865..c37ec5a 100644
--- a/modules/simple_sitemap_views/src/Controller/SimpleSitemapViewsController.php
+++ b/modules/simple_sitemap_views/src/Controller/SimpleSitemapViewsController.php
@@ -16,14 +16,14 @@ class SimpleSitemapViewsController extends ControllerBase {
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;
 
   /**
    * SimpleSitemapViewsController constructor.
    *
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
    */
   public function __construct(SimpleSitemapViews $sitemap_views) {
diff --git a/modules/simple_sitemap_views/src/EventSubscriber/ArgumentCollector.php b/modules/simple_sitemap_views/src/EventSubscriber/ArgumentCollector.php
index fc63255..4d61071 100755
--- a/modules/simple_sitemap_views/src/EventSubscriber/ArgumentCollector.php
+++ b/modules/simple_sitemap_views/src/EventSubscriber/ArgumentCollector.php
@@ -2,8 +2,10 @@
 
 namespace Drupal\simple_sitemap_views\EventSubscriber;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
+use Drupal\views\ViewEntityInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Drupal\simple_sitemap_views\SimpleSitemapViews;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
@@ -17,32 +19,32 @@ class ArgumentCollector implements EventSubscriberInterface {
   /**
    * View entities storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $viewStorage;
 
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;
 
   /**
    * The currently active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * ArgumentCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The currently active route match object.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SimpleSitemapViews $sitemap_views, RouteMatchInterface $route_match) {
@@ -62,10 +64,10 @@ class ArgumentCollector implements EventSubscriberInterface {
   /**
    * Collect information about views arguments.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param TerminateEvent $event
    *   Object of event after a response was sent.
    */
-  public function onTerminate(PostResponseEvent $event) {
+  public function onTerminate(TerminateEvent $event) {
     // Only successful requests are interesting.
     // Collect information about arguments only if views support is enabled.
     if (!$event->getResponse()->isSuccessful() || !$this->sitemapViews->isEnabled()) {
@@ -73,7 +75,7 @@ class ArgumentCollector implements EventSubscriberInterface {
     }
 
     $view_id = $this->routeMatch->getParameter('view_id');
-    /** @var \Drupal\views\ViewEntityInterface $view_entity */
+    /** @var ViewEntityInterface $view_entity */
     if ($view_id && $view_entity = $this->viewStorage->load($view_id)) {
       $display_id = $this->routeMatch->getParameter('display_id');
 
diff --git a/modules/simple_sitemap_views/src/Plugin/QueueWorker/GarbageCollector.php b/modules/simple_sitemap_views/src/Plugin/QueueWorker/GarbageCollector.php
index 3314ec2..39459df 100755
--- a/modules/simple_sitemap_views/src/Plugin/QueueWorker/GarbageCollector.php
+++ b/modules/simple_sitemap_views/src/Plugin/QueueWorker/GarbageCollector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simple_sitemap_views\Plugin\QueueWorker;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\views\ViewEntityInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\simple_sitemap_views\SimpleSitemapViews;
@@ -23,14 +25,14 @@ class GarbageCollector extends QueueWorkerBase implements ContainerFactoryPlugin
   /**
    * View entities storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $viewStorage;
 
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;
 
@@ -43,9 +45,9 @@ class GarbageCollector extends QueueWorkerBase implements ContainerFactoryPlugin
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, SimpleSitemapViews $sitemap_views) {
@@ -72,7 +74,7 @@ class GarbageCollector extends QueueWorkerBase implements ContainerFactoryPlugin
    */
   public function processItem($data) {
     $view_id = $data['view_id'];
-    /** @var \Drupal\views\ViewEntityInterface $view_entity */
+    /** @var ViewEntityInterface $view_entity */
     $view_entity = $this->viewStorage->load($view_id);
     $display_ids = [];
 
diff --git a/modules/simple_sitemap_views/src/Plugin/simple_sitemap/UrlGenerator/ViewsUrlGenerator.php b/modules/simple_sitemap_views/src/Plugin/simple_sitemap/UrlGenerator/ViewsUrlGenerator.php
index f04a094..452e2cc 100755
--- a/modules/simple_sitemap_views/src/Plugin/simple_sitemap/UrlGenerator/ViewsUrlGenerator.php
+++ b/modules/simple_sitemap_views/src/Plugin/simple_sitemap/UrlGenerator/ViewsUrlGenerator.php
@@ -29,14 +29,14 @@ class ViewsUrlGenerator extends EntityUrlGeneratorBase {
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;
 
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
@@ -49,19 +49,19 @@ class ViewsUrlGenerator extends EntityUrlGeneratorBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
+   * @param Simplesitemap $generator
    *   The simple_sitemap.generator service.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   The simple_sitemap.logger service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\simple_sitemap\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   The simple_sitemap.entity_helper service.
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    */
   public function __construct(
@@ -245,7 +245,7 @@ class ViewsUrlGenerator extends EntityUrlGeneratorBase {
   /**
    * Clears the URL from parameters that are not present in the arguments.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL object.
    * @param array $args
    *   Array of arguments.
diff --git a/modules/simple_sitemap_views/src/Plugin/views/display_extender/SimpleSitemapDisplayExtender.php b/modules/simple_sitemap_views/src/Plugin/views/display_extender/SimpleSitemapDisplayExtender.php
index ff73550..0cac2b7 100755
--- a/modules/simple_sitemap_views/src/Plugin/views/display_extender/SimpleSitemapDisplayExtender.php
+++ b/modules/simple_sitemap_views/src/Plugin/views/display_extender/SimpleSitemapDisplayExtender.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap_views\Plugin\views\display_extender;
 
+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 use Drupal\views\Plugin\views\display_extender\DisplayExtenderPluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\views\Plugin\views\display\DisplayRouterInterface;
@@ -28,14 +29,14 @@ class SimpleSitemapDisplayExtender extends DisplayExtenderPluginBase {
   /**
    * Simple XML Sitemap form helper.
    *
-   * @var \Drupal\simple_sitemap\Form\FormHelper
+   * @var FormHelper
    */
   protected $formHelper;
 
   /**
    * Simple XML Sitemap manager.
    *
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   protected $sitemapManager;
 
@@ -55,9 +56,9 @@ class SimpleSitemapDisplayExtender extends DisplayExtenderPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param FormHelper $form_helper
    *   Simple XML Sitemap form helper.
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $sitemap_manager
+   * @param SimplesitemapManager $sitemap_manager
    *   Simple XML Sitemap manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FormHelper $form_helper, SimplesitemapManager $sitemap_manager) {
@@ -371,7 +372,7 @@ class SimpleSitemapDisplayExtender extends DisplayExtenderPluginBase {
     $arguments = $this->displayHandler->getHandlers('argument');
     $arguments_options = [];
 
-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $argument */
+    /** @var ArgumentPluginBase $argument */
     foreach ($arguments as $id => $argument) {
       $arguments_options[$id] = $argument->adminLabel();
     }
diff --git a/modules/simple_sitemap_views/src/SimpleSitemapViews.php b/modules/simple_sitemap_views/src/SimpleSitemapViews.php
index 4f58393..47ed726 100755
--- a/modules/simple_sitemap_views/src/SimpleSitemapViews.php
+++ b/modules/simple_sitemap_views/src/SimpleSitemapViews.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap_views;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\simple_sitemap_views\Plugin\views\display_extender\SimpleSitemapDisplayExtender;
 use Drupal\simple_sitemap\SimplesitemapManager;
 use Drupal\Core\Database\Query\ConditionInterface;
@@ -32,50 +33,50 @@ class SimpleSitemapViews {
   /**
    * Simple XML Sitemap manager.
    *
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   protected $sitemapManager;
 
   /**
    * View entities storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $viewStorage;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * The current active database's master connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * SimpleSitemapViews constructor.
    *
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $sitemap_manager
+   * @param SimplesitemapManager $sitemap_manager
    *   Simple XML Sitemap manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The current active database's master connection.
    */
   public function __construct(
@@ -139,12 +140,12 @@ class SimpleSitemapViews {
   /**
    * Gets the display extender.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string|null $display_id
    *   The display id. If empty uses the current display.
    *
-   * @return \Drupal\simple_sitemap_views\Plugin\views\display_extender\SimpleSitemapDisplayExtender|null
+   * @return SimpleSitemapDisplayExtender|null
    *   The display extender.
    */
   public function getDisplayExtender(ViewExecutable $view, $display_id = NULL) {
@@ -165,7 +166,7 @@ class SimpleSitemapViews {
   /**
    * Gets the sitemap settings for view display.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string $variant
    *   The name of the sitemap variant.
@@ -192,7 +193,7 @@ class SimpleSitemapViews {
   /**
    * Gets the indexable arguments for view display.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string $variant
    *   The name of the sitemap variant.
@@ -240,7 +241,7 @@ class SimpleSitemapViews {
   /**
    * Adds view arguments to the index.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param array $args
    *   Array of arguments to add to the index.
@@ -266,7 +267,7 @@ class SimpleSitemapViews {
   /**
    * Adds view arguments to the index by the sitemap variant.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string $variant
    *   The name of the sitemap variant.
@@ -340,7 +341,7 @@ class SimpleSitemapViews {
   /**
    * Get arguments from index.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface|null $condition
+   * @param ConditionInterface|null $condition
    *   The query conditions.
    * @param int|null $limit
    *   The number of records to return from the result set. If NULL, returns
@@ -382,7 +383,7 @@ class SimpleSitemapViews {
   /**
    * Get the number of rows in the index.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface|null $condition
+   * @param ConditionInterface|null $condition
    *   The query conditions.
    *
    * @return int
@@ -402,7 +403,7 @@ class SimpleSitemapViews {
    *
    * @param int $position
    *   Position of the record.
-   * @param \Drupal\Core\Database\Query\ConditionInterface|null $condition
+   * @param ConditionInterface|null $condition
    *   The query conditions.
    *
    * @return int|bool
@@ -424,7 +425,7 @@ class SimpleSitemapViews {
   /**
    * Remove arguments from index.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface|null $condition
+   * @param ConditionInterface|null $condition
    *   The query conditions.
    */
   public function removeArgumentsFromIndex(ConditionInterface $condition = NULL) {
@@ -443,7 +444,7 @@ class SimpleSitemapViews {
   /**
    * Returns an array of view displays that use the route.
    *
-   * @param \Drupal\views\ViewEntityInterface $view_entity
+   * @param ViewEntityInterface $view_entity
    *   The config entity in which the view is stored.
    *
    * @return array
@@ -463,7 +464,7 @@ class SimpleSitemapViews {
   /**
    * Returns an array of executable views whose current display is indexable.
    *
-   * @return \Drupal\views\ViewExecutable[]
+   * @return ViewExecutable[]
    *   An array of ViewExecutable instances.
    */
   public function getIndexableViews() {
@@ -485,7 +486,7 @@ class SimpleSitemapViews {
     }
 
     $indexable_views = [];
-    /** @var \Drupal\views\ViewEntityInterface $view_entity */
+    /** @var ViewEntityInterface $view_entity */
     foreach ($this->viewStorage->loadMultiple($view_ids) as $view_entity) {
       foreach ($this->getRouterDisplayIds($view_entity) as $display_id) {
         $view = Views::executableFactory()->get($view_entity);
@@ -508,7 +509,7 @@ class SimpleSitemapViews {
   /**
    * Returns an array of indexable sitemap variants for view display.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string|null $display_id
    *   The display id. If empty uses the current display.
diff --git a/modules/simple_sitemap_views/tests/src/Functional/SimpleSitemapViewsTestBase.php b/modules/simple_sitemap_views/tests/src/Functional/SimpleSitemapViewsTestBase.php
index 9bfb923..9965936 100644
--- a/modules/simple_sitemap_views/tests/src/Functional/SimpleSitemapViewsTestBase.php
+++ b/modules/simple_sitemap_views/tests/src/Functional/SimpleSitemapViewsTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\simple_sitemap_views\Functional;
 
+use Drupal\Core\CronInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\Tests\simple_sitemap\Functional\SimplesitemapTestBase;
 use Drupal\simple_sitemap_views\SimpleSitemapViews;
 use Drupal\views\Views;
@@ -22,28 +24,28 @@ abstract class SimpleSitemapViewsTestBase extends SimplesitemapTestBase {
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;
 
   /**
    * The cron service.
    *
-   * @var \Drupal\Core\CronInterface
+   * @var CronInterface
    */
   protected $cron;
 
   /**
    * Test view.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $testView;
 
   /**
    * Test view 2.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $testView2;
 
@@ -57,7 +59,7 @@ abstract class SimpleSitemapViewsTestBase extends SimplesitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->sitemapViews = $this->container->get('simple_sitemap.views');
diff --git a/simple_sitemap.install b/simple_sitemap.install
index b562765..d79e216 100644
--- a/simple_sitemap.install
+++ b/simple_sitemap.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\simple_sitemap\SimplesitemapManager;
 /**
  * @file
  * Module install and update procedures.
@@ -196,7 +197,7 @@ function _simple_sitemap_update_8216_get_default_variant() {
       ->save();
   }
 
-  /** @var \Drupal\simple_sitemap\SimplesitemapManager $manager */
+  /** @var SimplesitemapManager $manager */
   $manager = \Drupal::service('simple_sitemap.manager');
   $variants = $manager->getSitemapVariants();
   if (!isset($variants[$default_variant])) {
diff --git a/simple_sitemap.module b/simple_sitemap.module
index ad00981..1609032 100644
--- a/simple_sitemap.module
+++ b/simple_sitemap.module
@@ -1,5 +1,12 @@
 <?php
 
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\simple_sitemap\Form\FormHelper;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\simple_sitemap\Simplesitemap;
+use Drupal\simple_sitemap\EntityHelper;
 /**
  * @file
  * Main module file containing hooks.
@@ -16,8 +23,8 @@ use Drupal\language\ConfigurableLanguageInterface;
  * Implements hook_help().
  *
  * @param $route_name
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
- * @return \Drupal\Component\Render\MarkupInterface|null
+ * @param RouteMatchInterface $route_match
+ * @return MarkupInterface|null
  */
 function simple_sitemap_help($route_name, RouteMatchInterface $route_match) {
   return $route_name === 'help.page.simple_sitemap'
@@ -31,14 +38,14 @@ function simple_sitemap_help($route_name, RouteMatchInterface $route_match) {
  * Adds sitemap settings to entity types that are supported via plugins.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param $form_id
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function simple_sitemap_form_alter(&$form, FormStateInterface $form_state, $form_id) {
 
-  /** @var Drupal\simple_sitemap\Form\FormHelper $f */
+  /** @var FormHelper $f */
   $f = \Drupal::service('simple_sitemap.form_helper');
   if (!$f->processForm($form_state)) {
     return;
@@ -81,14 +88,14 @@ function simple_sitemap_form_alter(&$form, FormStateInterface $form_state, $form
  * Form submission handler called in hook_form_alter.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @param FormStateInterface $form_state
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function simple_sitemap_entity_form_submit($form, FormStateInterface &$form_state) {
 
-  /** @var Drupal\simple_sitemap\Form\FormHelper $f */
+  /** @var FormHelper $f */
   $f = \Drupal::service('simple_sitemap.form_helper');
   if (!$f->processForm($form_state)) {
     return;
@@ -101,7 +108,7 @@ function simple_sitemap_entity_form_submit($form, FormStateInterface &$form_stat
 
   if ($f->valuesChanged($form, $values)) {
 
-    /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+    /** @var Simplesitemap $generator */
     $generator = \Drupal::service('simple_sitemap.generator');
 
     foreach ($generator->getSitemapManager()->getSitemapVariants(NULL, FALSE) as $variant => $definition) {
@@ -144,7 +151,7 @@ function simple_sitemap_entity_form_submit($form, FormStateInterface &$form_stat
  */
 function simple_sitemap_cron() {
 
-  /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+  /** @var Simplesitemap $generator */
   $generator = \Drupal::service('simple_sitemap.generator');
 
   if ($generator->getSetting('cron_generate')) {
@@ -173,7 +180,7 @@ function simple_sitemap_cron() {
  */
 function simple_sitemap_configurable_language_delete(ConfigurableLanguageInterface $language) {
 
-  /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+  /** @var Simplesitemap $generator */
   $generator = \Drupal::service('simple_sitemap.generator');
 
   $excluded_languages = $generator->getSetting('excluded_languages');
@@ -188,15 +195,15 @@ function simple_sitemap_configurable_language_delete(ConfigurableLanguageInterfa
  *
  * Removes settings of the removed entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function simple_sitemap_entity_delete(EntityInterface $entity) {
 
-  /** @var \Drupal\simple_sitemap\EntityHelper $entity_helper */
+  /** @var EntityHelper $entity_helper */
   $entity_helper = \Drupal::service('simple_sitemap.entity_helper');
   if ($entity_helper->supports($entity->getEntityType())) {
 
-    /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+    /** @var Simplesitemap $generator */
     $generator = \Drupal::service('simple_sitemap.generator');
     $generator->setVariants(TRUE)->removeEntityInstanceSettings(
       $entity->getEntityTypeId(), $entity->id()
@@ -211,12 +218,12 @@ function simple_sitemap_entity_delete(EntityInterface $entity) {
  *
  * @param string $entity_type_id
  * @param string $bundle
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function simple_sitemap_entity_bundle_delete($entity_type_id, $bundle) {
 
-  /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+  /** @var Simplesitemap $generator */
   $generator = \Drupal::service('simple_sitemap.generator');
   $generator->setVariants(TRUE)->removeBundleSettings($entity_type_id, $bundle);
 }
@@ -226,13 +233,13 @@ function simple_sitemap_entity_bundle_delete($entity_type_id, $bundle) {
  *
  * Removes settings for the removed menu.
  *
- * @param \Drupal\system\MenuInterface $menu
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @param MenuInterface $menu
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function simple_sitemap_menu_delete(MenuInterface $menu) {
 
-  /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+  /** @var Simplesitemap $generator */
   $generator = \Drupal::service('simple_sitemap.generator');
   $generator->setVariants(TRUE)->removeBundleSettings('menu_link_content', $menu->id());
 }
@@ -243,7 +250,7 @@ function simple_sitemap_menu_delete(MenuInterface $menu) {
 function simple_sitemap_page_attachments_alter(array &$attachments) {
   if (!empty($attachments['#attached']['html_head_link'])) {
 
-    /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+    /** @var Simplesitemap $generator */
     $generator = \Drupal::service('simple_sitemap.generator');
 
     if ($generator->getSetting('disable_language_hreflang')) {
diff --git a/src/Annotation/SitemapGenerator.php b/src/Annotation/SitemapGenerator.php
index 1b71536..bc8ccbf 100644
--- a/src/Annotation/SitemapGenerator.php
+++ b/src/Annotation/SitemapGenerator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -28,7 +29,7 @@ class SitemapGenerator extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -37,7 +38,7 @@ class SitemapGenerator extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Annotation/SitemapType.php b/src/Annotation/SitemapType.php
index 0d3670e..69f892a 100644
--- a/src/Annotation/SitemapType.php
+++ b/src/Annotation/SitemapType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -28,7 +29,7 @@ class SitemapType extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -37,7 +38,7 @@ class SitemapType extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Annotation/UrlGenerator.php b/src/Annotation/UrlGenerator.php
index ffd094f..ae92200 100644
--- a/src/Annotation/UrlGenerator.php
+++ b/src/Annotation/UrlGenerator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -28,7 +29,7 @@ class UrlGenerator extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -37,7 +38,7 @@ class UrlGenerator extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Commands/SimplesitemapCommands.php b/src/Commands/SimplesitemapCommands.php
index db5b9ee..6007d5c 100644
--- a/src/Commands/SimplesitemapCommands.php
+++ b/src/Commands/SimplesitemapCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap\Commands;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\simple_sitemap\Queue\QueueWorker;
 use Drupal\simple_sitemap\Simplesitemap;
 use Drush\Commands\DrushCommands;
@@ -13,13 +14,13 @@ use Drush\Commands\DrushCommands;
 class SimplesitemapCommands extends DrushCommands {
 
   /**
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;
 
   /**
    * SimplesitemapCommands constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
+   * @param Simplesitemap $generator
    */
   public function __construct(Simplesitemap $generator) {
     $this->generator = $generator;
@@ -60,7 +61,7 @@ class SimplesitemapCommands extends DrushCommands {
    *
    * @param array $options
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function rebuildQueue(array $options = ['variants' => '']) {
     $variants = array_keys($this->generator->getSitemapManager()->getSitemapVariants(NULL, FALSE));
diff --git a/src/Controller/SimplesitemapController.php b/src/Controller/SimplesitemapController.php
index 524287f..15d6b06 100644
--- a/src/Controller/SimplesitemapController.php
+++ b/src/Controller/SimplesitemapController.php
@@ -17,13 +17,13 @@ use Drupal\simple_sitemap\SimplesitemapManager;
 class SimplesitemapController extends ControllerBase {
 
   /**
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;
 
   /**
    * SimplesitemapController constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
+   * @param Simplesitemap $generator
    */
   public function __construct(Simplesitemap $generator) {
     $this->generator = $generator;
@@ -43,7 +43,7 @@ class SimplesitemapController extends ControllerBase {
    * or its sitemap index file.
    * Caches the response in case of expected output, prevents caching otherwise.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *  The request object.
    *
    * @param string $variant
@@ -52,7 +52,7 @@ class SimplesitemapController extends ControllerBase {
    *
    * @throws NotFoundHttpException
    *
-   * @return \Symfony\Component\HttpFoundation\Response|false
+   * @return Response|false
    *  Returns an XML response.
    */
   public function getSitemap(Request $request, $variant = NULL) {
@@ -70,12 +70,12 @@ class SimplesitemapController extends ControllerBase {
   /**
    * Returns the XML stylesheet for the sitemap.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function getSitemapXsl() {
 
     // Read the XSL content from the file.
-    $module_path = drupal_get_path('module', 'simple_sitemap');
+    $module_path = \Drupal::service('extension.list.module')->getPath('simple_sitemap');
     $xsl_content = file_get_contents($module_path . '/xsl/simple_sitemap.xsl');
 
     // Replace custom tokens in the XSL content with appropriate values.
diff --git a/src/EntityHelper.php b/src/EntityHelper.php
index b1bc875..c85e373 100644
--- a/src/EntityHelper.php
+++ b/src/EntityHelper.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simple_sitemap;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -20,25 +22,25 @@ class EntityHelper {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * EntityHelper constructor.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param ConfigFactoryInterface $configFactory
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, ConfigFactoryInterface $configFactory) {
     $this->entityTypeManager = $entity_type_manager;
@@ -70,7 +72,7 @@ class EntityHelper {
   /**
    * Gets an entity's bundle name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get the bundle name for.
    *
    * @return string
@@ -85,7 +87,7 @@ class EntityHelper {
   /**
    * Gets the entity type id for a bundle.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get an entity type id for a bundle.
    *
    * @return null|string
@@ -110,7 +112,7 @@ class EntityHelper {
   /**
    * Determines if an entity type is supported or not.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    * @return bool
    *   TRUE if entity type supported by Simple Sitemap, FALSE if not.
    */
@@ -152,14 +154,14 @@ class EntityHelper {
   /**
    * Gets the entity from URL object.
    *
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    *   The URL object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   An entity object. NULL if no matching entity is found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getEntityFromUrlObject(Url $url_object) {
     if ($url_object->isRouted()) {
@@ -191,8 +193,8 @@ class EntityHelper {
    * @return array
    *   An array of entity IDs
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getEntityInstanceIds($entity_type_id, $bundle_name = NULL) {
     $sitemap_entity_types = $this->getSupportedEntityTypes();
diff --git a/src/Form/FormHelper.php b/src/Form/FormHelper.php
index c3e0e95..676aee2 100644
--- a/src/Form/FormHelper.php
+++ b/src/Form/FormHelper.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\simple_sitemap\Form;
 
+use Drupal\Core\Form\FormState;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityType;
+use Drupal\Core\Entity\EntityBase;
+use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\simple_sitemap\EntityHelper;
@@ -19,22 +25,22 @@ class FormHelper {
   const PRIORITY_DIVIDER = 10;
 
   /**
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;
 
   /**
-   * @var \Drupal\simple_sitemap\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;
 
   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\Core\Form\FormState
+   * @var FormState
    */
   protected $formState;
 
@@ -102,9 +108,9 @@ class FormHelper {
 
   /**
    * FormHelper constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\EntityHelper $entityHelper
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param Simplesitemap $generator
+   * @param EntityHelper $entityHelper
+   * @param AccountProxyInterface $current_user
    */
   public function __construct(
     Simplesitemap $generator,
@@ -117,11 +123,10 @@ class FormHelper {
   }
 
   /**
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @return bool
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   *
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function processForm(FormStateInterface $form_state) {
     $this->formState = $form_state;
@@ -251,8 +256,8 @@ class FormHelper {
 
   /**
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function negotiateSettings() {
 
@@ -393,7 +398,7 @@ class FormHelper {
       $this->setEntityCategory('instance');
     }
     else {
-      /** @var \Drupal\Core\Entity\EntityType $sitemap_entity_type */
+      /** @var EntityType $sitemap_entity_type */
       foreach ($sitemap_entity_types as $sitemap_entity_type) {
         if ($sitemap_entity_type->getBundleEntityType() === $entity_type_id) {
           $this->setEntityCategory('bundle');
@@ -432,7 +437,7 @@ class FormHelper {
   /**
    * Gets the object entity of the form if available.
    *
-   * @return \Drupal\Core\Entity\EntityBase|false
+   * @return EntityBase|false
    *   Entity or FALSE if non-existent or if form operation is
    *   'delete'.
    */
@@ -592,7 +597,7 @@ class FormHelper {
    * @return array
    */
   public static function getCronIntervalOptions() {
-    /** @var \Drupal\Core\Datetime\DateFormatter $formatter */
+    /** @var DateFormatter $formatter */
     $formatter = \Drupal::service('date.formatter');
     $intervals = array_flip(self::$cronIntervals);
     foreach ($intervals as $interval => &$label) {
diff --git a/src/Form/SimplesitemapCustomLinksForm.php b/src/Form/SimplesitemapCustomLinksForm.php
index 5af8439..282d352 100644
--- a/src/Form/SimplesitemapCustomLinksForm.php
+++ b/src/Form/SimplesitemapCustomLinksForm.php
@@ -14,15 +14,15 @@ use Drupal\Core\Path\PathValidator;
 class SimplesitemapCustomLinksForm extends SimplesitemapFormBase {
 
   /**
-   * @var \Drupal\Core\Path\PathValidator
+   * @var PathValidator
    */
   protected $pathValidator;
 
   /**
    * SimplesitemapCustomLinksForm constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
-   * @param \Drupal\Core\Path\PathValidator $path_validator
+   * @param Simplesitemap $generator
+   * @param FormHelper $form_helper
+   * @param PathValidator $path_validator
    */
   public function __construct(
     Simplesitemap $generator,
diff --git a/src/Form/SimplesitemapEntitiesForm.php b/src/Form/SimplesitemapEntitiesForm.php
index 5bd498e..ca2f7aa 100644
--- a/src/Form/SimplesitemapEntitiesForm.php
+++ b/src/Form/SimplesitemapEntitiesForm.php
@@ -14,15 +14,15 @@ use Drupal\simple_sitemap\EntityHelper;
 class SimplesitemapEntitiesForm extends SimplesitemapFormBase {
 
   /**
-   * @var \Drupal\simple_sitemap\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;
 
   /**
    * SimplesitemapEntitiesForm constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
-   * @param \Drupal\simple_sitemap\EntityHelper $entity_helper
+   * @param Simplesitemap $generator
+   * @param FormHelper $form_helper
+   * @param EntityHelper $entity_helper
    */
   public function __construct(
     Simplesitemap $generator,
diff --git a/src/Form/SimplesitemapFormBase.php b/src/Form/SimplesitemapFormBase.php
index ac5118d..84457dd 100644
--- a/src/Form/SimplesitemapFormBase.php
+++ b/src/Form/SimplesitemapFormBase.php
@@ -13,19 +13,19 @@ use Drupal\simple_sitemap\Simplesitemap;
 abstract class SimplesitemapFormBase extends ConfigFormBase {
 
   /**
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;
 
   /**
-   * @var \Drupal\simple_sitemap\Form\FormHelper
+   * @var FormHelper
    */
   protected $formHelper;
 
   /**
    * SimplesitemapFormBase constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param Simplesitemap $generator
+   * @param FormHelper $form_helper
    */
   public function __construct(
     Simplesitemap $generator,
diff --git a/src/Form/SimplesitemapSettingsForm.php b/src/Form/SimplesitemapSettingsForm.php
index 3d65a9f..7dd9e7c 100644
--- a/src/Form/SimplesitemapSettingsForm.php
+++ b/src/Form/SimplesitemapSettingsForm.php
@@ -15,15 +15,15 @@ use Drupal\Core\Language\LanguageManagerInterface;
 class SimplesitemapSettingsForm extends SimplesitemapFormBase {
 
   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * SimplesitemapSettingsForm constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param Simplesitemap $generator
+   * @param FormHelper $form_helper
+   * @param LanguageManagerInterface $language_manager
    */
   public function __construct(
     Simplesitemap $generator,
diff --git a/src/Form/SimplesitemapSitemapsForm.php b/src/Form/SimplesitemapSitemapsForm.php
index 7a8d98a..9df4dc5 100644
--- a/src/Form/SimplesitemapSitemapsForm.php
+++ b/src/Form/SimplesitemapSitemapsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap\Form;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Datetime\DateFormatter;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -15,21 +16,21 @@ use Drupal\Core\Database\Connection;
 class SimplesitemapSitemapsForm extends SimplesitemapFormBase {
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $db;
 
   /**
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * SimplesitemapSitemapsForm constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param Simplesitemap $generator
+   * @param FormHelper $form_helper
+   * @param Connection $database
+   * @param DateFormatter $date_formatter
    */
   public function __construct(
     Simplesitemap $generator,
@@ -121,7 +122,7 @@ class SimplesitemapSitemapsForm extends SimplesitemapFormBase {
         '#percent' => $percent,
         '#message' => $this->t('@indexed out of @total queue items have been processed.<br>Each sitemap variant is published after all of its items have been processed.', ['@indexed' => $indexed_count, '@total' => $total_count]),
       ];
-      $form['simple_sitemap_settings']['status']['progress']['bar']['#markup'] = render($index_progress);
+      $form['simple_sitemap_settings']['status']['progress']['bar']['#markup'] = \Drupal::service('renderer')->render($index_progress);
     }
     else {
       $form['simple_sitemap_settings']['status']['progress']['bar']['#markup'] = '<div class="description">' . $this->t('There are no items to be indexed.') . '</div>';
@@ -235,8 +236,8 @@ class SimplesitemapSitemapsForm extends SimplesitemapFormBase {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @param FormStateInterface $form_state
+   * @throws PluginException
    */
   public function generateSitemap(array &$form, FormStateInterface $form_state) {
     $this->generator->generateSitemap();
@@ -244,8 +245,8 @@ class SimplesitemapSitemapsForm extends SimplesitemapFormBase {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @param FormStateInterface $form_state
+   * @throws PluginException
    */
   public function rebuildQueue(array &$form, FormStateInterface $form_state) {
     $this->generator->rebuildQueue();
diff --git a/src/Logger.php b/src/Logger.php
index 081c8ee..609f729 100644
--- a/src/Logger.php
+++ b/src/Logger.php
@@ -26,17 +26,17 @@ class Logger {
   const DISPLAY_MESSAGE_TYPE_DEFAULT = 'status';
 
   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -52,9 +52,9 @@ class Logger {
 
   /**
    * Logger constructor.
-   * @param \Psr\Log\LoggerInterface $logger
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param LoggerInterface $logger
+   * @param MessengerInterface $messenger
+   * @param AccountProxyInterface $current_user
    */
   public function __construct(
     LoggerInterface $logger,
diff --git a/src/Plugin/simple_sitemap/SimplesitemapPluginBase.php b/src/Plugin/simple_sitemap/SimplesitemapPluginBase.php
index 8f5142d..be36866 100644
--- a/src/Plugin/simple_sitemap/SimplesitemapPluginBase.php
+++ b/src/Plugin/simple_sitemap/SimplesitemapPluginBase.php
@@ -24,7 +24,7 @@ abstract class SimplesitemapPluginBase extends PluginBase implements PluginInspe
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
diff --git a/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorBase.php b/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorBase.php
index a5a88d7..3024daa 100644
--- a/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorBase.php
+++ b/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator;
 
+use Drupal\Core\GeneratedUrl;
+use Drupal\language\LanguageNegotiatorInterface;
 use Drupal\Core\Url;
 use Drupal\simple_sitemap\Plugin\simple_sitemap\SimplesitemapPluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -22,22 +24,22 @@ abstract class SitemapGeneratorBase extends SimplesitemapPluginBase implements S
   const XMLNS = 'http://www.sitemaps.org/schemas/sitemap/0.9';
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $db;
 
   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;
 
@@ -47,7 +49,7 @@ abstract class SitemapGeneratorBase extends SimplesitemapPluginBase implements S
   protected $settings;
 
   /**
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapWriter
+   * @var SitemapWriter
    */
   protected $writer;
 
@@ -73,11 +75,11 @@ abstract class SitemapGeneratorBase extends SimplesitemapPluginBase implements S
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Component\Datetime\Time $time
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapWriter $sitemap_writer
+   * @param Connection $database
+   * @param ModuleHandlerInterface $module_handler
+   * @param LanguageManagerInterface $language_manager
+   * @param Time $time
+   * @param SitemapWriter $sitemap_writer
    */
   public function __construct(
     array $configuration,
@@ -327,7 +329,7 @@ abstract class SitemapGeneratorBase extends SimplesitemapPluginBase implements S
 
   /**
    * @param null $delta
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    */
   public function getSitemapUrl($delta = NULL) {
     $parameters = NULL !== $delta ? ['page' => $delta] : [];
@@ -364,7 +366,7 @@ abstract class SitemapGeneratorBase extends SimplesitemapPluginBase implements S
       return FALSE;
     }
 
-    /** @var \Drupal\language\LanguageNegotiatorInterface $language_negotiator */
+    /** @var LanguageNegotiatorInterface $language_negotiator */
     $language_negotiator = \Drupal::service('language_negotiator');
 
     $url_negotiation_method_enabled = FALSE;
diff --git a/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorManager.php b/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorManager.php
index 8f7e2e3..d8993db 100644
--- a/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorManager.php
+++ b/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorManager.php
@@ -15,8 +15,8 @@ class SitemapGeneratorManager extends DefaultPluginManager {
   /**
    * SitemapGeneratorManager constructor.
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(
     \Traversable $namespaces,
diff --git a/src/Plugin/simple_sitemap/SitemapGenerator/SitemapWriter.php b/src/Plugin/simple_sitemap/SitemapGenerator/SitemapWriter.php
index bfec3e9..2de705f 100644
--- a/src/Plugin/simple_sitemap/SitemapGenerator/SitemapWriter.php
+++ b/src/Plugin/simple_sitemap/SitemapGenerator/SitemapWriter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator;
 
+use Drupal\Core\Routing\RouteProvider;
 use Drupal\Core\Routing\RouteProviderInterface;
 
 /**
@@ -15,7 +16,7 @@ class SitemapWriter extends \XMLWriter {
   const ENCODING = 'UTF-8';
 
   /**
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routeProvider;
 
diff --git a/src/Plugin/simple_sitemap/SitemapType/SitemapTypeManager.php b/src/Plugin/simple_sitemap/SitemapType/SitemapTypeManager.php
index 06b93b4..d52a51f 100644
--- a/src/Plugin/simple_sitemap/SitemapType/SitemapTypeManager.php
+++ b/src/Plugin/simple_sitemap/SitemapType/SitemapTypeManager.php
@@ -15,8 +15,8 @@ class SitemapTypeManager extends DefaultPluginManager {
   /**
    * SitemapTypeManager constructor.
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(
     \Traversable $namespaces,
diff --git a/src/Plugin/simple_sitemap/UrlGenerator/ArbitraryUrlGenerator.php b/src/Plugin/simple_sitemap/UrlGenerator/ArbitraryUrlGenerator.php
index 0a1253e..f56fa5c 100644
--- a/src/Plugin/simple_sitemap/UrlGenerator/ArbitraryUrlGenerator.php
+++ b/src/Plugin/simple_sitemap/UrlGenerator/ArbitraryUrlGenerator.php
@@ -26,9 +26,9 @@ class ArbitraryUrlGenerator extends UrlGeneratorBase {
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Logger $logger
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param Simplesitemap $generator
+   * @param Logger $logger
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(
     array $configuration,
diff --git a/src/Plugin/simple_sitemap/UrlGenerator/CustomUrlGenerator.php b/src/Plugin/simple_sitemap/UrlGenerator/CustomUrlGenerator.php
index 589d81f..fa14223 100644
--- a/src/Plugin/simple_sitemap/UrlGenerator/CustomUrlGenerator.php
+++ b/src/Plugin/simple_sitemap/UrlGenerator/CustomUrlGenerator.php
@@ -29,7 +29,7 @@ class CustomUrlGenerator extends EntityUrlGeneratorBase {
 
 
   /**
-   * @var \Drupal\Core\Path\PathValidator
+   * @var PathValidator
    */
   protected $pathValidator;
 
@@ -43,12 +43,12 @@ class CustomUrlGenerator extends EntityUrlGeneratorBase {
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Logger $logger
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\simple_sitemap\EntityHelper $entityHelper
-   * @param \Drupal\Core\Path\PathValidator $path_validator
+   * @param Simplesitemap $generator
+   * @param Logger $logger
+   * @param LanguageManagerInterface $language_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityHelper $entityHelper
+   * @param PathValidator $path_validator
    */
   public function __construct(
     array $configuration,
diff --git a/src/Plugin/simple_sitemap/UrlGenerator/EntityMenuLinkContentUrlGenerator.php b/src/Plugin/simple_sitemap/UrlGenerator/EntityMenuLinkContentUrlGenerator.php
index ca13615..233b95f 100644
--- a/src/Plugin/simple_sitemap/UrlGenerator/EntityMenuLinkContentUrlGenerator.php
+++ b/src/Plugin/simple_sitemap/UrlGenerator/EntityMenuLinkContentUrlGenerator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator;
 
+use Drupal\Core\Menu\MenuLinkTree;
 use Drupal\simple_sitemap\EntityHelper;
 use Drupal\simple_sitemap\Logger;
 use Drupal\simple_sitemap\Simplesitemap;
@@ -30,7 +31,7 @@ use Drupal\Core\Menu\MenuLinkBase;
 class EntityMenuLinkContentUrlGenerator extends EntityUrlGeneratorBase {
 
   /**
-   * @var \Drupal\Core\Menu\MenuLinkTree
+   * @var MenuLinkTree
    */
   protected $menuLinkTree;
 
@@ -39,12 +40,12 @@ class EntityMenuLinkContentUrlGenerator extends EntityUrlGeneratorBase {
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Logger $logger
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\simple_sitemap\EntityHelper $entityHelper
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_link_tree
+   * @param Simplesitemap $generator
+   * @param Logger $logger
+   * @param LanguageManagerInterface $language_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityHelper $entityHelper
+   * @param MenuLinkTreeInterface $menu_link_tree
    */
   public function __construct(
     array $configuration,
diff --git a/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGenerator.php b/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGenerator.php
index d703c4a..c770c77 100644
--- a/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGenerator.php
+++ b/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGenerator.php
@@ -24,7 +24,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class EntityUrlGenerator extends EntityUrlGeneratorBase {
 
   /**
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorManager
+   * @var UrlGeneratorManager
    */
   protected $urlGeneratorManager;
 
@@ -34,7 +34,7 @@ class EntityUrlGenerator extends EntityUrlGeneratorBase {
   protected $entitiesPerDataset;
 
   /**
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   protected $entityMemoryCache;
 
@@ -43,13 +43,13 @@ class EntityUrlGenerator extends EntityUrlGeneratorBase {
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Logger $logger
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\simple_sitemap\EntityHelper $entityHelper
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorManager $url_generator_manager
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param Simplesitemap $generator
+   * @param Logger $logger
+   * @param LanguageManagerInterface $language_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityHelper $entityHelper
+   * @param UrlGeneratorManager $url_generator_manager
+   * @param MemoryCacheInterface $memory_cache
    */
   public function __construct(
     array $configuration,
diff --git a/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGeneratorBase.php b/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGeneratorBase.php
index 8dd8e42..691e331 100644
--- a/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGeneratorBase.php
+++ b/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGeneratorBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator;
 
+use Drupal\Core\Language\LanguageInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -22,7 +26,7 @@ use Drupal\Core\Session\AnonymousUserSession;
 abstract class EntityUrlGeneratorBase extends UrlGeneratorBase {
 
   /**
-   * @var \Drupal\Core\Language\LanguageInterface[]
+   * @var LanguageInterface[]
    */
   protected $languages;
 
@@ -32,17 +36,17 @@ abstract class EntityUrlGeneratorBase extends UrlGeneratorBase {
   protected $defaultLanguageId;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $anonUser;
 
   /**
-   * @var \Drupal\simple_sitemap\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;
 
@@ -56,11 +60,11 @@ abstract class EntityUrlGeneratorBase extends UrlGeneratorBase {
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\simple_sitemap\Logger $logger
-   * @param \Drupal\simple_sitemap\EntityHelper $entityHelper
+   * @param Simplesitemap $generator
+   * @param LanguageManagerInterface $language_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param Logger $logger
+   * @param EntityHelper $entityHelper
    */
   public function __construct(
     array $configuration,
@@ -96,10 +100,10 @@ abstract class EntityUrlGeneratorBase extends UrlGeneratorBase {
 
   /**
    * @param array $path_data
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getUrlVariants(array $path_data, Url $url_object) {
     $url_variants = [];
@@ -142,7 +146,7 @@ abstract class EntityUrlGeneratorBase extends UrlGeneratorBase {
   }
 
   /**
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    * @return array
    */
   protected function getAlternateUrlsForDefaultLanguage(Url $url_object) {
@@ -157,8 +161,8 @@ abstract class EntityUrlGeneratorBase extends UrlGeneratorBase {
   }
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
-   * @param \Drupal\Core\Url $url_object
+   * @param ContentEntityInterface $entity
+   * @param Url $url_object
    * @return array
    */
   protected function getAlternateUrlsForTranslatedLanguages(ContentEntityInterface $entity, Url $url_object) {
@@ -179,7 +183,7 @@ abstract class EntityUrlGeneratorBase extends UrlGeneratorBase {
   }
 
   /**
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    * @return array
    */
   protected function getAlternateUrlsForAllLanguages(Url $url_object) {
@@ -200,8 +204,8 @@ abstract class EntityUrlGeneratorBase extends UrlGeneratorBase {
   /**
    * @param mixed $data_set
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function generate($data_set) {
     $path_data = $this->processDataSet($data_set);
@@ -215,7 +219,7 @@ abstract class EntityUrlGeneratorBase extends UrlGeneratorBase {
   }
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return array
    */
diff --git a/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorBase.php b/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorBase.php
index 297696e..4fa1916 100644
--- a/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorBase.php
+++ b/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorBase.php
@@ -14,12 +14,12 @@ use Drupal\simple_sitemap\Simplesitemap;
 abstract class UrlGeneratorBase extends SimplesitemapPluginBase implements UrlGeneratorInterface {
 
   /**
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;
 
   /**
-   * @var \Drupal\simple_sitemap\Logger
+   * @var Logger
    */
   protected $logger;
 
@@ -38,8 +38,8 @@ abstract class UrlGeneratorBase extends SimplesitemapPluginBase implements UrlGe
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Simplesitemap $generator
+   * @param Logger $logger
    */
   public function __construct(
     array $configuration,
diff --git a/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorManager.php b/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorManager.php
index 7fb08b6..8569fb0 100644
--- a/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorManager.php
+++ b/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorManager.php
@@ -15,8 +15,8 @@ class UrlGeneratorManager extends DefaultPluginManager {
   /**
    * UrlGeneratorManager constructor.
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(
     \Traversable $namespaces,
diff --git a/src/Queue/BatchTrait.php b/src/Queue/BatchTrait.php
index 77f5d9f..25b1df5 100644
--- a/src/Queue/BatchTrait.php
+++ b/src/Queue/BatchTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap\Queue;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
 trait BatchTrait {
@@ -53,13 +54,13 @@ trait BatchTrait {
 
   /**
    * @param $context
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @todo Variants into generateSitemap().
    */
   public static function doBatchGenerateSitemap(&$context) {
 
-    /** @var \Drupal\simple_sitemap\Queue\QueueWorker $queue_worker */
+    /** @var QueueWorker $queue_worker */
     $queue_worker = \Drupal::service('simple_sitemap.queue_worker');
 
     $queue_worker->generateSitemap();
diff --git a/src/Queue/QueueWorker.php b/src/Queue/QueueWorker.php
index 736fefd..c7ef639 100644
--- a/src/Queue/QueueWorker.php
+++ b/src/Queue/QueueWorker.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap\Queue;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Timer;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Lock\LockBackendInterface;
@@ -25,37 +26,37 @@ class QueueWorker {
   const GENERATE_LOCK_TIMEOUT = 3600;
 
   /**
-   * @var \Drupal\simple_sitemap\SimplesitemapSettings
+   * @var SimplesitemapSettings
    */
   protected $settings;
 
   /**
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   protected $manager;
 
   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
-   * @var \Drupal\simple_sitemap\Queue\SimplesitemapQueue
+   * @var SimplesitemapQueue
    */
   protected $queue;
 
   /**
-   * @var \Drupal\simple_sitemap\Logger
+   * @var Logger
    */
   protected $logger;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
@@ -106,13 +107,13 @@ class QueueWorker {
 
   /**
    * QueueWorker constructor.
-   * @param \Drupal\simple_sitemap\SimplesitemapSettings $settings
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $manager
-   * @param \Drupal\Core\State\StateInterface $state
-   * @param \Drupal\simple_sitemap\Queue\SimplesitemapQueue $element_queue
-   * @param \Drupal\simple_sitemap\Logger $logger
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param SimplesitemapSettings $settings
+   * @param SimplesitemapManager $manager
+   * @param StateInterface $state
+   * @param SimplesitemapQueue $element_queue
+   * @param Logger $logger
+   * @param ModuleHandlerInterface $module_handler
+   * @param LockBackendInterface $lock
    */
   public function __construct(SimplesitemapSettings $settings,
                               SimplesitemapManager $manager,
@@ -133,7 +134,7 @@ class QueueWorker {
   /**
    * @param string[]|string|null $variants
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function queue($variants = NULL) {
     $type_definitions = $this->manager->getSitemapTypes();
@@ -191,7 +192,7 @@ class QueueWorker {
   /**
    * @param string[]|string|null $variants
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function rebuildQueue($variants = NULL) {
     if (!$this->lock->acquire(static::LOCK_ID)) {
@@ -212,7 +213,7 @@ class QueueWorker {
   /**
    * @param string $from
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function generateSitemap($from = self::GENERATE_TYPE_FORM) {
 
@@ -288,7 +289,7 @@ class QueueWorker {
 
   /**
    * @param $element
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function generateResultsFromElement($element) {
     $results = $this->manager->getUrlGenerator($element->data['url_generator'])
@@ -319,7 +320,7 @@ class QueueWorker {
 
   /**
    * @param bool $complete
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function generateVariantChunksFromResults($complete = FALSE) {
     if (!empty($this->results)) {
diff --git a/src/Queue/SimplesitemapQueue.php b/src/Queue/SimplesitemapQueue.php
index 1d741da..1a35e2f 100644
--- a/src/Queue/SimplesitemapQueue.php
+++ b/src/Queue/SimplesitemapQueue.php
@@ -13,15 +13,15 @@ use Drupal\Component\Datetime\Time;
 class SimplesitemapQueue extends DatabaseQueue {
 
   /**
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;
 
   /**
    * SimplesitemapQueue constructor.
    * @param $name
-   * @param \Drupal\Core\Database\Connection $connection
-   * @param \Drupal\Component\Datetime\Time $time
+   * @param Connection $connection
+   * @param Time $time
    */
   public function __construct($name, Connection $connection, Time $time) {
     parent::__construct($name, $connection);
diff --git a/src/Simplesitemap.php b/src/Simplesitemap.php
index c86abcf..a7f7f71 100644
--- a/src/Simplesitemap.php
+++ b/src/Simplesitemap.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\simple_sitemap;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Lock\LockBackendInterface;
@@ -19,52 +22,52 @@ use Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGenerato
 class Simplesitemap {
 
   /**
-   * @var \Drupal\simple_sitemap\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;
 
   /**
-   * @var \Drupal\simple_sitemap\SimplesitemapSettings
+   * @var SimplesitemapSettings
    */
   protected $settings;
 
   /**
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   protected $manager;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $db;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Path\PathValidator
+   * @var PathValidator
    */
   protected $pathValidator;
 
   /**
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;
 
   /**
-   * @var \Drupal\simple_sitemap\Queue\QueueWorker
+   * @var QueueWorker
    */
   protected $queueWorker;
 
@@ -74,12 +77,12 @@ class Simplesitemap {
   protected $variants;
 
   /**
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
-   * @var \Drupal\simple_sitemap\Logger
+   * @var Logger
    */
   protected $logger;
 
@@ -103,18 +106,18 @@ class Simplesitemap {
 
   /**
    * Simplesitemap constructor.
-   * @param \Drupal\simple_sitemap\EntityHelper $entity_helper
-   * @param \Drupal\simple_sitemap\SimplesitemapSettings $settings
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $manager
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Path\PathValidator $path_validator
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
-   * @param \Drupal\Component\Datetime\Time $time
-   * @param \Drupal\simple_sitemap\Queue\QueueWorker $queue_worker
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param EntityHelper $entity_helper
+   * @param SimplesitemapSettings $settings
+   * @param SimplesitemapManager $manager
+   * @param ConfigFactory $config_factory
+   * @param Connection $database
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param PathValidator $path_validator
+   * @param DateFormatter $date_formatter
+   * @param Time $time
+   * @param QueueWorker $queue_worker
+   * @param LockBackendInterface $lock
+   * @param Logger $logger
    */
   public function __construct(
     EntityHelper $entity_helper,
@@ -187,14 +190,14 @@ class Simplesitemap {
   }
 
   /**
-   * @return \Drupal\simple_sitemap\Queue\QueueWorker
+   * @return QueueWorker
    */
   public function getQueueWorker() {
     return $this->queueWorker;
   }
 
   /**
-   * @return \Drupal\simple_sitemap\SimplesitemapManager
+   * @return SimplesitemapManager
    */
   public function getSitemapManager() {
     return $this->manager;
@@ -321,7 +324,7 @@ class Simplesitemap {
    * Removes sitemap instances for the currently set variants.
    *
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function removeSitemap() {
     $this->manager->removeSitemap($this->getVariants(FALSE));
@@ -337,7 +340,7 @@ class Simplesitemap {
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function generateSitemap($from = QueueWorker::GENERATE_TYPE_FORM) {
     if (!$this->lock->lockMayBeAvailable(QueueWorker::LOCK_ID)) {
@@ -363,7 +366,7 @@ class Simplesitemap {
    * Queues links from currently set variants.
    *
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function queue() {
     $this->queueWorker->queue($this->getVariants());
@@ -375,7 +378,7 @@ class Simplesitemap {
    * Deletes the queue and queues links from currently set variants.
    *
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function rebuildQueue() {
     if (!$this->lock->lockMayBeAvailable(QueueWorker::LOCK_ID)) {
@@ -470,8 +473,8 @@ class Simplesitemap {
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @todo multiple variants
    */
@@ -622,8 +625,8 @@ class Simplesitemap {
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function removeBundleSettings($entity_type_id = NULL, $bundle_name = NULL) {
     if (empty($variants = $this->getVariants(FALSE))) {
@@ -685,8 +688,8 @@ class Simplesitemap {
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function setEntityInstanceSettings($entity_type_id, $id, $settings) {
     if (empty($variants = $this->getVariants(FALSE))) {
@@ -752,8 +755,8 @@ class Simplesitemap {
    *  Array of entity instance settings or the settings of its bundle. False if
    *  entity type or variant does not exist.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @todo multiple variants
    * @todo: May want to use Simplesitemap::supplementDefaultSettings('entity', $settings) inside here instead of calling it everywhere this method is called.
diff --git a/src/SimplesitemapManager.php b/src/SimplesitemapManager.php
index a2fe3f5..efe5bf5 100644
--- a/src/SimplesitemapManager.php
+++ b/src/SimplesitemapManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_sitemap;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Database\Connection;
 use Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapType\SitemapTypeBase;
@@ -20,32 +21,32 @@ class SimplesitemapManager {
   const DEFAULT_SITEMAP_TYPE = 'default_hreflang';
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $db;
 
   /**
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapType\SitemapTypeManager
+   * @var SitemapTypeManager
    */
   protected $sitemapTypeManager;
 
   /**
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorManager
+   * @var UrlGeneratorManager
    */
   protected $urlGeneratorManager;
 
   /**
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorManager
+   * @var SitemapGeneratorManager
    */
   protected $sitemapGeneratorManager;
 
   /**
-   * @var \Drupal\simple_sitemap\SimplesitemapSettings
+   * @var SimplesitemapSettings
    */
   protected $settings;
 
@@ -66,12 +67,12 @@ class SimplesitemapManager {
 
   /**
    * SimplesitemapManager constructor.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapType\SitemapTypeManager $sitemap_type_manager
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorManager $url_generator_manager
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorManager $sitemap_generator_manager
-   * @param \Drupal\simple_sitemap\SimplesitemapSettings $settings
+   * @param ConfigFactory $config_factory
+   * @param Connection $database
+   * @param SitemapTypeManager $sitemap_type_manager
+   * @param UrlGeneratorManager $url_generator_manager
+   * @param SitemapGeneratorManager $sitemap_generator_manager
+   * @param SimplesitemapSettings $settings
    */
   public function __construct(
     ConfigFactory $config_factory,
@@ -91,8 +92,8 @@ class SimplesitemapManager {
 
   /**
    * @param string $sitemap_generator_id
-   * @return \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorBase
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @return SitemapGeneratorBase
+   * @throws PluginException
    */
   public function getSitemapGenerator($sitemap_generator_id) {
     if (!isset($this->sitemapGenerators[$sitemap_generator_id])) {
@@ -105,8 +106,8 @@ class SimplesitemapManager {
 
   /**
    * @param string $url_generator_id
-   * @return \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorBase
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @return UrlGeneratorBase
+   * @throws PluginException
    */
   public function getUrlGenerator($url_generator_id) {
     if (!isset($this->urlGenerators[$url_generator_id])) {
@@ -118,7 +119,7 @@ class SimplesitemapManager {
   }
 
   /**
-   * @return \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapType\SitemapTypeBase[]
+   * @return SitemapTypeBase[]
    */
   public function getSitemapTypes() {
     if (empty($this->sitemapTypes)) {
@@ -168,7 +169,7 @@ class SimplesitemapManager {
    * @param string $name
    * @param array $definition
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function addSitemapVariant($name, $definition = []) {
     $all_variants = $this->getSitemapVariants();
@@ -216,7 +217,7 @@ class SimplesitemapManager {
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function removeSitemap($variant_names = NULL) {
     if (NULL === $variant_names || !empty((array) $variant_names)) {
@@ -244,7 +245,7 @@ class SimplesitemapManager {
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function removeSitemapVariants($variant_names = NULL) {
     if (NULL === $variant_names || !empty((array) $variant_names)) {
diff --git a/src/SimplesitemapSettings.php b/src/SimplesitemapSettings.php
index 1654604..5d56d57 100644
--- a/src/SimplesitemapSettings.php
+++ b/src/SimplesitemapSettings.php
@@ -11,14 +11,14 @@ use Drupal\Core\Config\ConfigFactory;
 class SimplesitemapSettings {
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
 
   /**
    * SimplesitemapSettings constructor.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    */
   public function __construct(ConfigFactory $config_factory) {
     $this->configFactory = $config_factory;
diff --git a/tests/scripts/performance_test.php b/tests/scripts/performance_test.php
index bae01b8..cac691a 100644
--- a/tests/scripts/performance_test.php
+++ b/tests/scripts/performance_test.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Timer;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\Database\Database;
@@ -36,7 +37,7 @@ if (!function_exists('drush_backend_batch_process')) {
 include_once 'core/tests/Drupal/Tests/RandomGeneratorTrait.php';
 
 $module_handler = \Drupal::moduleHandler();
-/** @var \Psr\Log\LoggerInterface $logger */
+/** @var LoggerInterface $logger */
 $logger = Drush::service('logger');
 if (!(\Drupal::moduleHandler()->moduleExists('simple_sitemap'))) {
   $logger->error("In order to use this script, simple_sitemap must be installed.");
@@ -51,7 +52,7 @@ class Tester {
   private $timerKey = 0;
 
   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
@@ -116,7 +117,7 @@ class Tester {
   /**
    * @param bool $count_queries
    * @param $context
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function doBatchGenerateSitemap($count_queries = FALSE, &$context) {
     if ($count_queries) {
diff --git a/tests/src/Functional/SimplesitemapTest.php b/tests/src/Functional/SimplesitemapTest.php
index bdce5d2..1fcb332 100644
--- a/tests/src/Functional/SimplesitemapTest.php
+++ b/tests/src/Functional/SimplesitemapTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\simple_sitemap\Functional;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Url;
 use Drupal\node\Entity\Node;
@@ -17,8 +22,8 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * Verify sitemap.xml has the link to the front page after first generation.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testInitialGeneration() {
     $this->generator->generateSitemap(QueueWorker::GENERATE_TYPE_BACKEND);
@@ -34,8 +39,8 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * Test custom link.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testAddCustomLink() {
     $this->generator->addCustomLink(
@@ -69,8 +74,8 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * Test default settings of custom links.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testAddCustomLinkDefaults() {
     $this->generator->removeCustomLinks()
@@ -108,8 +113,8 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * Test removing custom paths from the sitemap settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testRemoveCustomLinks() {
 
@@ -134,8 +139,8 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * Tests setting bundle settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    *
    * @todo Add form tests
    */
@@ -215,8 +220,8 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * Test default settings of bundles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testSetBundleSettingsDefaults() {
     $this->generator->setBundleSettings('node', 'page')
@@ -232,10 +237,10 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * Test link count.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testLinkCount() {
     $this->generator->setBundleSettings('node', 'page')
@@ -269,8 +274,8 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * Test the lastmod parameter in different scenarios.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testLastmod() {
     // Entity links should have 'lastmod'.
@@ -301,7 +306,7 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * Tests the duplicate setting.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testRemoveDuplicatesSetting() {
     $this->generator->setBundleSettings('node', 'page')
@@ -322,8 +327,8 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * Test max links setting and the sitemap index.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testMaxLinksSetting() {
     $this->generator->setBundleSettings('node', 'page')
@@ -349,12 +354,11 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * @todo testGenerateDurationSetting
    */
-
   /**
    * Test setting the base URL.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testBaseUrlSetting() {
     $this->generator->setBundleSettings('node', 'page')
@@ -375,8 +379,8 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * Test overriding of bundle settings for a single entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    *
    * @todo: Use form testing instead of responseContains().
    */
@@ -468,6 +472,7 @@ class SimplesitemapTest extends SimplesitemapTestBase {
 
   /**
    * Tests that a page does not break if an entity has its id set.
+   * @doesNotPerformAssertions
    */
   public function testNewEntityWithIdSet() {
     $new_node = Node::create([
@@ -503,16 +508,14 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * @todo Test indexing menu.
    */
-
   /**
    * @todo Test deleting a bundle.
    */
-
   /**
    * Test disabling sitemap support for an entity type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testDisableEntityType() {
     $this->generator->setBundleSettings('node', 'page')
@@ -533,8 +536,8 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * Test enabling sitemap support for an entity type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    *
    * @todo Test admin/config/search/simplesitemap/entities form.
    */
@@ -558,12 +561,11 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   /**
    * @todo testSitemapLanguages
    */
-
   /**
    * Test adding and removing sitemap variants.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws ExpectationException
+   * @throws PluginException
    */
   public function testSitemapVariants() {
 
@@ -620,7 +622,7 @@ class SimplesitemapTest extends SimplesitemapTestBase {
   }
 
   /**
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @dataProvider generationResumeProvider
    */
diff --git a/tests/src/Functional/SimplesitemapTestBase.php b/tests/src/Functional/SimplesitemapTestBase.php
index c3fe6c1..aa27e96 100644
--- a/tests/src/Functional/SimplesitemapTestBase.php
+++ b/tests/src/Functional/SimplesitemapTestBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\simple_sitemap\Functional;
 
+use Drupal\simple_sitemap\Simplesitemap;
+use Drupal\Core\Database\Connection;
+use Drupal\user\Entity\User;
+use Drupal\node\Entity\Node;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ -27,35 +31,35 @@ abstract class SimplesitemapTestBase extends BrowserTestBase {
   /**
    * Simple sitemap generator.
    *
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;
 
   /**
    * Database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * A user with all the permissions.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $privilegedUser;
 
   /**
    * A node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
   /**
    * A node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node2;
 
@@ -78,7 +82,7 @@ abstract class SimplesitemapTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->generator = $this->container->get('simple_sitemap.generator');
