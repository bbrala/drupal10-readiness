modules/contrib/nodetype_access/nodetype_access.module
modules/contrib/nodetype_access/src/NodeTypeAccessService.php
modules/contrib/nodetype_access/tests/src/Functional/AdminPageTest.php

3 files with changes
====================

1) modules/contrib/nodetype_access/tests/src/Functional/AdminPageTest.php:32

    ---------- begin diff ----------
@@ @@
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/nodetype_access/src/NodeTypeAccessService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\nodetype_access;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Drupal\Core\Database\Query\SelectInterface;
@@ @@
 class NodeTypeAccessService {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * NodetypeAccessService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    */
   public function __construct(EntityTypeBundleInfoInterface $entityTypeBundleInfo) {
     $this->entityTypeBundleInfo = $entityTypeBundleInfo;
@@ @@
    * @see \Drupal\node\NodeAccessControlHandler::checkAccess
    * @see \Drupal\node\NodeGrantDatabaseStorage::access
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    * @param string $op
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   public function hookNodeAccess(NodeInterface $node, $op, AccountInterface $account) {
     if ($op === 'view') {
@@ @@
   /**
    * Extract base table alias.
    *
-   * @param \Drupal\Core\Database\Query\AlterableInterface $query
+   * @param AlterableInterface $query
    *
    * @return string|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Exception
    */
   private function extractBaseTableAlias(AlterableInterface $query) {
@@ @@
     $base_table = $query->getMetaData('base_table');
     // If the base table is not given, default to one of the node base tables.
     if (!$base_table) {
-      /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+      /** @var DefaultTableMapping $table_mapping */
       $table_mapping = \Drupal::entityTypeManager()->getStorage('node')->getTableMapping();
       $node_base_tables = $table_mapping->getTableNames();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/nodetype_access/nodetype_access.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\nodetype_access\NodeTypeAccessService;
 /**
  * @file
  *   Node access module file.
@@ @@
  * Implement hook_node_access().
  */
 function nodetype_access_node_access(NodeInterface $node, $op, AccountInterface $account) {
-  /** @var \Drupal\nodetype_access\NodeTypeAccessService $service */
+  /** @var NodeTypeAccessService $service */
   $service = \Drupal::service('nodetype_access.service');
   $accessResult = $service->hookNodeAccess($node, $op, $account);
   return $accessResult;
@@ @@
  * Implement hook_query_TAG_alter().
  */
 function nodetype_access_query_node_access_alter(AlterableInterface $query) {
-  /** @var \Drupal\nodetype_access\NodeTypeAccessService $service */
+  /** @var NodeTypeAccessService $service */
   $service = \Drupal::service('nodetype_access.service');
   $service->hookQueryNodeAccessAlter($query);
 }

 function nodetype_access_permissions_callback() {
-  /** @var \Drupal\nodetype_access\NodeTypeAccessService $service */
+  /** @var NodeTypeAccessService $service */
   $service = \Drupal::service('nodetype_access.service');
   return $service->permissions();
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

