modules/contrib/domain_route_redirect/domain_route_redirect.module
modules/contrib/domain_route_redirect/src/Controller/DomainRouteRedirectController.php
modules/contrib/domain_route_redirect/src/DomainRouteRedirectAccessControlHandler.php
modules/contrib/domain_route_redirect/src/DomainRouteRedirectForm.php
modules/contrib/domain_route_redirect/src/DomainRouteRedirectInterface.php
modules/contrib/domain_route_redirect/src/DomainRouteRedirectListBuilder.php
modules/contrib/domain_route_redirect/src/DomainRouteRedirectMatcherService.php
modules/contrib/domain_route_redirect/src/DomainRouteRedirectStorage.php
modules/contrib/domain_route_redirect/src/DomainRouteRedirectStorageInterface.php
modules/contrib/domain_route_redirect/src/Entity/DomainRouteRedirect.php
modules/contrib/domain_route_redirect/src/EventSubscriber/DomainRedirectSubscriber.php
modules/contrib/domain_route_redirect/src/Form/DomainRouteRedirectDeleteForm.php
modules/contrib/domain_route_redirect/src/HttpKernel/DomainRouteRedirectPathProcessor.php

9 files with changes
====================

1) modules/contrib/domain_route_redirect/src/HttpKernel/DomainRouteRedirectPathProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_route_redirect\HttpKernel;

+use Drupal\domain\DomainInterface;
 use Drupal\Core\PathProcessor\OutboundPathProcessorInterface;

 use Drupal\domain\DomainNegotiatorInterface;
@@ @@
   /**
    * The Domain negotiator.
    *
-   * @var \Drupal\domain\DomainNegotiatorInterface
+   * @var DomainNegotiatorInterface
    */
   protected $negotiator;

@@ @@
   /**
    * The domain_route_redirect matcher service.
    *
-   * @var \Drupal\domain_route_redirect\DomainRouteRedirectMatcherService
+   * @var DomainRouteRedirectMatcherService
    */
   protected $matcher;

@@ @@
   /**
    * The active domain request.
    *
-   * @var \Drupal\domain\DomainInterface
+   * @var DomainInterface
    */
   protected $activeDomain;

@@ @@
   /**
    * Constructs a DomainSourcePathProcessor object.
    *
-   * @param \Drupal\domain\DomainNegotiatorInterface $negotiator
+   * @param DomainNegotiatorInterface $negotiator
    *   The domain negotiator.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The path alias manager.
-   * @param Drupal\domain_route_redirect\DomainRouteRedirectMatcherService $matcher
+   * @param DomainRouteRedirectMatcherService $matcher
    *   The domain_route_redirect matcher service.
    */
   public function __construct(DomainNegotiatorInterface $negotiator, AliasManagerInterface $alias_manager, DomainRouteRedirectMatcherService $matcher) {
@@ @@
   /**
    * Gets the active domain.
    *
-   * @return \Drupal\domain\DomainInterface
+   * @return DomainInterface
    *   The active domain.
    */
   public function getActiveDomain() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/domain_route_redirect/src/EventSubscriber/DomainRedirectSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_route_redirect\EventSubscriber;

+use Drupal\Core\Access\AccessCheckInterface;
+use Symfony\Component\HttpKernel\Event\ControllerEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

 use Drupal\domain\DomainNegotiatorInterface;
@@ @@
 use Drupal\domain_route_redirect\DomainRouteRedirectMatcherService;

 use Symfony\Component\HttpKernel\KernelEvents;
-
-use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Symfony\Component\HttpFoundation\Response;

@@ @@
   /**
    * The domain negotiator service.
    *
-   * @var \Drupal\domain\DomainNegotiatorInterface
+   * @var DomainNegotiatorInterface
    */
   protected $domainNegotiator;

@@ @@
   /**
    * The core access check service.
    *
-   * @var \Drupal\Core\Access\AccessCheckInterface
+   * @var AccessCheckInterface
    */
   protected $accessCheck;

@@ @@
   /**
    * The current route match.
    *
-   * @var Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * Constructs a DomainSubscriber object.
    *
-   * @param \Drupal\domain\DomainNegotiatorInterface $negotiator
+   * @param DomainNegotiatorInterface $negotiator
    *   The domain negotiator service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The current route match.
-   * @param Drupal\domain_route_redirect\DomainRouteRedirectMatcherService $matcher
+   * @param DomainRouteRedirectMatcherService $matcher
    *   The domain_route_redirect matcher service.
    */
   public function __construct(DomainNegotiatorInterface $negotiator, CurrentRouteMatch $current_route_match, DomainRouteRedirectMatcherService $matcher) {
@@ @@
   /**
    * Decides whether to redirect depending on the identified route.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterControllerEvent $event
+   * @param ControllerEvent $event
    *   The Event to process.
    */
-  public function onKernelRouteDeterminedDomain(FilterControllerEvent $event) {
+  public function onKernelRouteDeterminedDomain(ControllerEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/domain_route_redirect/src/DomainRouteRedirectStorageInterface.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Loads a domain route redirect record by parent domain lookup.
    *
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   A domain entity.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/domain_route_redirect/src/DomainRouteRedirectStorage.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The typed config handler.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;

@@ @@
   /**
    * Constructs a DomainRouteRedirectStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
+   * @param TypedConfigManagerInterface $typed_config
    *   The typed config handler.
    */
   public function __construct(EntityTypeInterface $entity_type, ConfigFactoryInterface $config_factory, UuidInterface $uuid_service, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, TypedConfigManagerInterface $typed_config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/domain_route_redirect/src/DomainRouteRedirectMatcherService.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Path\PathMatcherInterface definition.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/domain_route_redirect/src/DomainRouteRedirectListBuilder.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * A domain object loaded from the controller.
    *
-   * @var \Drupal\domain\DomainInterface
+   * @var DomainInterface
    */
   protected $domain;

@@ @@
   /**
    * Sets the domain context for this list.
    *
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   The domain to set as context for the list.
    */
   public function setDomain(DomainInterface $domain) {
@@ @@
   /**
    * Gets the domain context for this list.
    *
-   * @return \Drupal\domain\DomainInterface
+   * @return DomainInterface
    *   The domain that is context for this list.
    */
   public function getDomainId() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/domain_route_redirect/src/DomainRouteRedirectInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_route_redirect;

+use Drupal\domain\Entity\Domain;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Get the parent domain entity for a route redirect record.
    *
-   * @return \Drupal\domain\Entity\Domain
+   * @return Domain
    *   The parent domain for the route redirect record or NULL if not set.
    */
   public function getDomain();
@@ @@
   /**
    * Get the domain target.
    *
-   * @return \Drupal\domain\Entity\Domain
+   * @return Domain
    *   The domain target to which to redirect.
    */
   public function getDomainTarget();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/domain_route_redirect/src/DomainRouteRedirectForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_route_redirect;

+use Drupal\domain\DomainAccessControlHandler;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The configuration factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The domain entity access control handler.
    *
-   * @var \Drupal\domain\DomainAccessControlHandler
+   * @var DomainAccessControlHandler
    */
   protected $accessHandler;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The domain route redirect storage manager.
    *
-   * @var \Drupal\domain_route_redirect\DomainRouteRedirectStorageInterface
+   * @var DomainRouteRedirectStorageInterface
    */
   protected $redirectStorage;

@@ @@
   /**
    * The domain storage manager.
    *
-   * @var \Drupal\domain\DomainStorageInterface
+   * @var DomainStorageInterface
    */
   protected $domainStorage;

@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelInterface definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannelDomainRedirect;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a DomainRouteRedirectForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The configuration factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\domain_route_redirect\DomainRouteRedirectStorageInterface $redirectStorage
+   * @param DomainRouteRedirectStorageInterface $redirectStorage
    *   The route redirect storage.
-   * @param \Drupal\domain\DomainStorageInterface $domain_storage
+   * @param DomainStorageInterface $domain_storage
    *   The domain storage manager.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger_channel
+   * @param LoggerChannelInterface $logger_channel
    *   The logger channel.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger.
    */
   public function __construct(ConfigFactoryInterface $config, EntityTypeManagerInterface $entity_type_manager, DomainRouteRedirectStorageInterface $redirectStorage, DomainStorageInterface $domain_storage, LoggerChannelInterface $logger_channel, Messenger $messenger) {
@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\domain_route_redirect\DomainRouteRedirectInterface $redirect */
+    /** @var DomainRouteRedirectInterface $redirect */
     $redirect = $this->entity;

     $form['domain_id'] = [
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\domain_route_redirect\DomainRouteRedirectInterface $redirect */
+    /** @var DomainRouteRedirectInterface $redirect */
     $redirect = $this->entity;
     $edit_link = $redirect->toLink($this->t('Edit'), 'edit-form')->toString();
     if ($redirect->save() == SAVED_NEW) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/domain_route_redirect/src/Controller/DomainRouteRedirectController.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Provides the domain route redirect submission form.
    *
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   An domain record entity.
    *
    * @return array
@@ @@
   /**
    * Provides the listing page for route redirects.
    *
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   An domain record entity.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

