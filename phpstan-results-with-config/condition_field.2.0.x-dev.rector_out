modules/contrib/condition_field/condition_field.install
modules/contrib/condition_field/condition_field.module
modules/contrib/condition_field/src/ConditionAccessResolver.php
modules/contrib/condition_field/src/Plugin/ConditionFieldData.php
modules/contrib/condition_field/src/Plugin/Field/FieldFormatter/ConditionFieldFormatter.php
modules/contrib/condition_field/src/Plugin/Field/FieldType/ConditionFieldItem.php
modules/contrib/condition_field/src/Plugin/Field/FieldWidget/ConditionFieldDefaultWidget.php
modules/contrib/condition_field/tests/src/Functional/LoadTest.php

5 files with changes
====================

1) modules/contrib/condition_field/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\condition_field\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/condition_field/src/Plugin/Field/FieldWidget/ConditionFieldDefaultWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\condition_field\Plugin\Field\FieldWidget;

+use Drupal\Core\Condition\ConditionManager;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\condition_field\Plugin\Field\FieldType\ConditionFieldItem;
 use Drupal\Core\Executable\ExecutableManagerInterface;
@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $manager;

@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $language;

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $condition_config
    *   An associative array containing the saved values.
@@ @@
       if (!isset($enabled_plugins[$condition_id]) || $enabled_plugins[$condition_id] === FALSE || in_array($condition_id, $skip_condition_ids)) {
         continue;
       }
-      /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+      /** @var ConditionInterface $condition */
       $condition = $this->manager->createInstance($condition_id, isset($condition_config[$condition_id]) ? $condition_config[$condition_id] : []);
       $form_state->set(['conditions', $condition_id], $condition);
       $condition_form = $condition->buildConfigurationForm([], $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/condition_field/src/Plugin/Field/FieldType/ConditionFieldItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\condition_field\Plugin\Field\FieldType;

+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Utility\DiffArray;
 use Drupal\condition_field\Plugin\ConditionFieldData;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
       if (in_array($condition_id, self::SKIP_CONDITION_IDS)) {
         continue;
       }
-      /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+      /** @var ConditionInterface $condition */
       $condition = $manager->createInstance($condition_id, []);

       $condition_plugins[$condition_id] = $condition->getPluginDefinition()['label'];
@@ @@
     $manager = \Drupal::service('plugin.manager.condition');
     $condition_configurations = [];
     foreach ($config_values as $condition_id => $values) {
-      /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+      /** @var ConditionInterface $condition */
       $condition = $manager->createInstance($condition_id, $values);
       $changed_config = FALSE;
       // Look for configuration settings.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/condition_field/src/Plugin/Field/FieldFormatter/ConditionFieldFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\condition_field\Plugin\Field\FieldFormatter;

+use Drupal\Core\Condition\ConditionManager;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemInterface;
@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $manager;

@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return array
@@ @@
     $summaries = [];
     $conditions = $item->conditions;
     foreach ($conditions as $condition_id => $config) {
-      /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+      /** @var ConditionInterface $condition */
       $condition = $this->manager->createInstance($condition_id, isset($config) ? $config : []);
       $label = $condition->getPluginDefinition()['label'];
       $summary = $condition->summary();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/condition_field/condition_field.install:30

    ---------- begin diff ----------
@@ @@
   foreach ($field_definitions as $entity_type_id => $field_list) {
     foreach ($field_list as $field_name => $field_definition) {
       foreach ($field_definition['bundles'] as $bundle) {
-        /** @var \Drupal\field\Entity\FieldConfig $field_config */
+        /** @var FieldConfig $field_config */
         $field_config = FieldConfig::loadByName($entity_type_id, $bundle, $field_name);
         $field_config->setSetting('enabled_plugins', $active_conditions);
         $field_config->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

