diff --git a/config_provider.info.yml b/config_provider.info.yml
index 58bb009..1ab1d51 100644
--- a/config_provider.info.yml
+++ b/config_provider.info.yml
@@ -1,8 +1,7 @@
 name: 'Configuration Provider'
 type: module
 description: 'Enables provision of configuration by extensions.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: Configuration
 dependencies:
  - 'drupal:config'
diff --git a/src/Annotation/ConfigProvider.php b/src/Annotation/ConfigProvider.php
index 8008fd5..0ba43c1 100644
--- a/src/Annotation/ConfigProvider.php
+++ b/src/Annotation/ConfigProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_provider\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class ConfigProvider extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/ConfigProviderConfigInstaller.php b/src/ConfigProviderConfigInstaller.php
index 71992f5..7390721 100644
--- a/src/ConfigProviderConfigInstaller.php
+++ b/src/ConfigProviderConfigInstaller.php
@@ -19,7 +19,7 @@ class ConfigProviderConfigInstaller extends ConfigInstaller implements ConfigIns
    *  The configuration collection to use.
    * @param string $prefix
    *   (optional) Limit to configuration starting with the provided string.
-   * @param \Drupal\Core\Config\StorageInterface[] $profile_storages
+   * @param StorageInterface[] $profile_storages
    *   An array of storage interfaces containing profile configuration to check
    *   for overrides.
    *
diff --git a/src/Plugin/ConfigCollector.php b/src/Plugin/ConfigCollector.php
index e4d7ffb..bd936df 100644
--- a/src/Plugin/ConfigCollector.php
+++ b/src/Plugin/ConfigCollector.php
@@ -14,35 +14,35 @@ class ConfigCollector implements ConfigCollectorInterface {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The active configuration storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $activeStorage;
 
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
 
   /**
    * The provider configuration storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $providerStorage;
 
   /**
    * The configuration provider manager.
    *
-   * @var \Drupal\config_provider\Plugin\ConfigProviderManager
+   * @var ConfigProviderManager
    */
   protected $configProviderManager;
 
@@ -63,15 +63,15 @@ class ConfigCollector implements ConfigCollectorInterface {
   /**
    * Constructor for ConfigCollector objects.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Config\StorageInterface $active_storage
+   * @param StorageInterface $active_storage
    *   The active configuration storage.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
-   * @param \Drupal\Core\Config\StorageInterface $provider_storage
+   * @param StorageInterface $provider_storage
    *   The provider configuration storage.
-   * @param \Drupal\config_provider\Plugin\ConfigProviderManager $config_provider_manager
+   * @param ConfigProviderManager $config_provider_manager
    *   The configuration provider manager.
    * @param string $install_profile
    *   (optional) The current installation profile. This parameter will be
diff --git a/src/Plugin/ConfigCollectorInterface.php b/src/Plugin/ConfigCollectorInterface.php
index 8d481b1..5b2330a 100644
--- a/src/Plugin/ConfigCollectorInterface.php
+++ b/src/Plugin/ConfigCollectorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_provider\Plugin;
 
+use Drupal\Core\Extension\Extension;
 /**
  * Class for invoking configuration providers..
  */
@@ -10,7 +11,7 @@ interface ConfigCollectorInterface {
   /**
    * Gets all configuration provider plugins.
    *
-   * @return \Drupal\config_provider\Plugin\ConfigProviderInterface[]
+   * @return ConfigProviderInterface[]
    *   An array of fully initialized configuration provider instances.
    */
   public function getConfigProviders();
@@ -18,7 +19,7 @@ interface ConfigCollectorInterface {
   /**
    * Adds installable configuration from all provider plugins.
    *
-   * @param \Drupal\Core\Extension\Extension[] $extensions
+   * @param Extension[] $extensions
    *   (Optional) An associative array of Extension objects, keyed by extension
    *   name. If provided, data loaded will be limited to these extensions.
    */
diff --git a/src/Plugin/ConfigProviderBase.php b/src/Plugin/ConfigProviderBase.php
index 61e1b68..d013b5e 100644
--- a/src/Plugin/ConfigProviderBase.php
+++ b/src/Plugin/ConfigProviderBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_provider\Plugin;
 
+use Drupal\Core\Extension\Extension;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -19,21 +20,21 @@ abstract class ConfigProviderBase extends PluginBase implements ConfigProviderIn
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The active configuration storages, keyed by collection.
    *
-   * @var \Drupal\Core\Config\StorageInterface[]
+   * @var StorageInterface[]
    */
   protected $activeStorages;
 
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
 
@@ -47,7 +48,7 @@ abstract class ConfigProviderBase extends PluginBase implements ConfigProviderIn
   /**
    * The provider configuration storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $providerStorage;
 
@@ -109,7 +110,7 @@ abstract class ConfigProviderBase extends PluginBase implements ConfigProviderIn
    *   (optional) The configuration collection. Defaults to the default
    *   collection.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The configuration storage that provides the default configuration.
    */
   protected function getExtensionInstallStorage($directory, $collection = StorageInterface::DEFAULT_COLLECTION) {
@@ -123,7 +124,7 @@ abstract class ConfigProviderBase extends PluginBase implements ConfigProviderIn
    *   (optional) The configuration collection. Defaults to the default
    *   collection.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The configuration storage that provides the default configuration.
    */
   protected function getActiveStorages($collection = StorageInterface::DEFAULT_COLLECTION) {
@@ -145,7 +146,7 @@ abstract class ConfigProviderBase extends PluginBase implements ConfigProviderIn
    * the core method, here we don't use an argument for the extension being
    * installed, since our usage isn't in the context of extension installation.
    *
-   * @return \Drupal\Core\Config\StorageInterface[]|null
+   * @return StorageInterface[]|null
    *   Storages to access configuration from the installation profile.
    */
   protected function getProfileStorages() {
@@ -238,9 +239,9 @@ abstract class ConfigProviderBase extends PluginBase implements ConfigProviderIn
   /**
    * Returns a list of all configuration items or those of extensions.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   A configuration storage.
-   * @param \Drupal\Core\Extension\Extension[] $extensions
+   * @param Extension[] $extensions
    *   An associative array of Extension objects, keyed by extension name.
    *
    * @return array
@@ -278,7 +279,9 @@ abstract class ConfigProviderBase extends PluginBase implements ConfigProviderIn
    *   found.
    */
   protected function drupalGetPath($type, $name) {
-    return drupal_get_path($type, $name);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+    return \Drupal::service('extension.path.resolver')->getPath($type, $name);
   }
 
   /**
diff --git a/src/Plugin/ConfigProviderInterface.php b/src/Plugin/ConfigProviderInterface.php
index 2939151..94cfbff 100644
--- a/src/Plugin/ConfigProviderInterface.php
+++ b/src/Plugin/ConfigProviderInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_provider\Plugin;
 
+use Drupal\Core\Extension\Extension;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ConfigManagerInterface;
@@ -36,7 +37,7 @@ interface ConfigProviderInterface extends PluginInspectionInterface {
   /**
    * Injects the active configuration storage.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory);
@@ -44,7 +45,7 @@ interface ConfigProviderInterface extends PluginInspectionInterface {
   /**
    * Injects the active configuration storage.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The configuration storage to read configuration from.
    */
   public function setActiveStorages(StorageInterface $active_storage);
@@ -52,7 +53,7 @@ interface ConfigProviderInterface extends PluginInspectionInterface {
   /**
    * Injects the active configuration storage.
    *
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
    */
   public function setConfigManager(ConfigManagerInterface $config_manager);
@@ -81,7 +82,7 @@ interface ConfigProviderInterface extends PluginInspectionInterface {
    *   The configuration collection to use.
    * @param string $prefix
    *   (optional) Limit to configuration starting with the provided string.
-   * @param \Drupal\Core\Config\StorageInterface[] $profile_storages
+   * @param StorageInterface[] $profile_storages
    *   An array of storage interfaces containing profile configuration to check
    *   for overrides.
    *
@@ -103,7 +104,7 @@ interface ConfigProviderInterface extends PluginInspectionInterface {
    * Implementing plugins should write configuration as appropriate to the
    * ::providerStorage storage.
    *
-   * @param \Drupal\Core\Extension\Extension[] $extensions
+   * @param Extension[] $extensions
    *   (Optional) An associative array of Extension objects, keyed by extension
    *   name. If provided, data loaded will be limited to these extensions.
    *
diff --git a/src/Plugin/ConfigProviderManager.php b/src/Plugin/ConfigProviderManager.php
index cffbf2e..8b41243 100644
--- a/src/Plugin/ConfigProviderManager.php
+++ b/src/Plugin/ConfigProviderManager.php
@@ -17,9 +17,9 @@ class ConfigProviderManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/ProxyClass/ConfigProviderConfigInstaller.php b/src/ProxyClass/ConfigProviderConfigInstaller.php
index 211f9c7..3076056 100644
--- a/src/ProxyClass/ConfigProviderConfigInstaller.php
+++ b/src/ProxyClass/ConfigProviderConfigInstaller.php
@@ -7,15 +7,19 @@
 
 namespace Drupal\config_provider\ProxyClass {
 
+    use Drupal\Core\Config\ConfigInstallerInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\Config\StorageInterface;
     /**
      * Provides a proxy class for \Drupal\config_provider\ConfigProviderConfigInstaller.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class ConfigProviderConfigInstaller implements \Drupal\Core\Config\ConfigInstallerInterface
+    class ConfigProviderConfigInstaller implements ConfigInstallerInterface
     {
 
-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;
 
         /**
          * The id of the original proxied service.
@@ -34,19 +38,19 @@ namespace Drupal\config_provider\ProxyClass {
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;
 
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ -78,7 +82,7 @@ namespace Drupal\config_provider\ProxyClass {
         /**
          * {@inheritdoc}
          */
-        public function installOptionalConfig(\Drupal\Core\Config\StorageInterface $storage = NULL, $dependency = array (
+        public function installOptionalConfig(StorageInterface $storage = NULL, $dependency = array (
         ))
         {
             return $this->lazyLoadItself()->installOptionalConfig($storage, $dependency);
@@ -95,7 +99,7 @@ namespace Drupal\config_provider\ProxyClass {
         /**
          * {@inheritdoc}
          */
-        public function setSourceStorage(\Drupal\Core\Config\StorageInterface $storage)
+        public function setSourceStorage(StorageInterface $storage)
         {
             return $this->lazyLoadItself()->setSourceStorage($storage);
         }
