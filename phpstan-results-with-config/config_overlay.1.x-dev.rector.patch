diff --git a/config_overlay.info.yml b/config_overlay.info.yml
index 2084298..7ae493e 100644
--- a/config_overlay.info.yml
+++ b/config_overlay.info.yml
@@ -1,7 +1,7 @@
 name: 'Config Overlay'
 description: 'Manages exported configuration as an overlay of the exported files with module-provided configuration.'
 type: module
-core_version_requirement: ^8.7.7 || ^9
+core_version_requirement: ^9.3 || ^10
 package: Config
 dependencies:
   - drupal:config_filter
diff --git a/src/Config/ExtensionOptionalStorage.php b/src/Config/ExtensionOptionalStorage.php
index 960dade..37e1c75 100644
--- a/src/Config/ExtensionOptionalStorage.php
+++ b/src/Config/ExtensionOptionalStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_overlay\Config;
 
+use Drupal\config_overlay\Exception\ConfigOverlayMissingExtensionListException;
 use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
 use Drupal\Core\Config\InstallStorage;
 use Drupal\Core\Config\StorageInterface;
@@ -18,17 +19,17 @@ class ExtensionOptionalStorage extends ExtensionInstallStorage {
   /**
    * The extension configuration storage for the 'config/install' directory.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $extensionInstallStorage;
 
   /**
    * Overrides \Drupal\Core\Config\InstallStorage::__construct().
    *
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The active configuration store where the list of enabled modules and
    *   themes is stored.
-   * @param \Drupal\Core\Config\StorageInterface $extension_install_storage
+   * @param StorageInterface $extension_install_storage
    *   The extension configuration storage for the 'config/install' directory.
    * @param string $profile
    *   The current installation profile.
@@ -78,7 +79,7 @@ class ExtensionOptionalStorage extends ExtensionInstallStorage {
    *   TRUE if there is valid optional configuration for the given name; FALSE
    *   otherwise.
    *
-   * @throws \Drupal\config_overlay\Exception\ConfigOverlayMissingExtensionListException
+   * @throws ConfigOverlayMissingExtensionListException
    *   If no storage with an extension could be found.
    */
   protected function isValidOptionalConfig($name) {
diff --git a/src/Config/ExtensionStorageFactory.php b/src/Config/ExtensionStorageFactory.php
index bbcbced..b037da3 100644
--- a/src/Config/ExtensionStorageFactory.php
+++ b/src/Config/ExtensionStorageFactory.php
@@ -19,10 +19,10 @@ class ExtensionStorageFactory {
    * The returned storage is similar to an ExtensionInstallStorage except that
    * it also supports optional extension configuration.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The base storage to read the extension list form.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The extension storage.
    */
   public function create(StorageInterface $storage) {
@@ -45,7 +45,7 @@ class ExtensionStorageFactory {
     // If the profile has a config/sync directory add that first, so that
     // configuration there can override module-provided configuration.
     /* @see install_profile_info() */
-    $profile_sync_path = drupal_get_path('profile', $profile) . '/config/sync';
+    $profile_sync_path = \Drupal::service('extension.list.profile')->getPath($profile) . '/config/sync';
     if (is_dir($profile_sync_path)) {
       $storages[] = new FileStorage($profile_sync_path, $storage->getCollectionName());
     }
diff --git a/src/Config/ReadOnlyUnionStorage.php b/src/Config/ReadOnlyUnionStorage.php
index 6e5bc6c..6278488 100644
--- a/src/Config/ReadOnlyUnionStorage.php
+++ b/src/Config/ReadOnlyUnionStorage.php
@@ -17,14 +17,14 @@ class ReadOnlyUnionStorage implements StorageInterface {
   /**
    * The storages that are part of the union.
    *
-   * @var \Drupal\Core\Config\StorageInterface[]
+   * @var StorageInterface[]
    */
   protected $storages = [];
 
   /**
    * Constructs a read-only union configuration storage.
    *
-   * @param \Drupal\Core\Config\StorageInterface[] $storages
+   * @param StorageInterface[] $storages
    *   The storages to form the union of.
    */
   public function __construct(array $storages) {
diff --git a/src/EventSubscriber/ConfigOverlayConfigSubscriber.php b/src/EventSubscriber/ConfigOverlayConfigSubscriber.php
index ae814f3..fa8c491 100644
--- a/src/EventSubscriber/ConfigOverlayConfigSubscriber.php
+++ b/src/EventSubscriber/ConfigOverlayConfigSubscriber.php
@@ -16,23 +16,23 @@ class ConfigOverlayConfigSubscriber implements EventSubscriberInterface {
   /**
    * The Configuration Overlay extension storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $extensionStorage;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a configuration subscriber for Configuration Overlay.
    *
-   * @param \Drupal\Core\Config\StorageInterface $extension_storage
+   * @param StorageInterface $extension_storage
    *   The Configuration Overlay extension storage.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(StorageInterface $extension_storage, ConfigFactoryInterface $config_factory) {
@@ -53,7 +53,7 @@ class ConfigOverlayConfigSubscriber implements EventSubscriberInterface {
   /**
    * Removes any re-added shipped configuration from the deletion list.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration save event.
    */
   public function onSave(ConfigCrudEvent $event) {
@@ -70,7 +70,7 @@ class ConfigOverlayConfigSubscriber implements EventSubscriberInterface {
   /**
    * Records any any shipped configuration that is deleted.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration deletion event.
    */
   public function onDelete(ConfigCrudEvent $event) {
diff --git a/src/Plugin/ConfigFilter/ConfigOverlayFilter.php b/src/Plugin/ConfigFilter/ConfigOverlayFilter.php
index 8cd2a9e..2db891d 100644
--- a/src/Plugin/ConfigFilter/ConfigOverlayFilter.php
+++ b/src/Plugin/ConfigFilter/ConfigOverlayFilter.php
@@ -58,14 +58,14 @@ class ConfigOverlayFilter extends ConfigFilterBase implements ContainerFactoryPl
   /**
    * The extension storage factory.
    *
-   * @var \Drupal\config_overlay\Config\ExtensionStorageFactory
+   * @var ExtensionStorageFactory
    */
   protected $extensionStorageFactory;
 
   /**
    * The active configuration storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $activeStorage;
 
@@ -87,7 +87,7 @@ class ConfigOverlayFilter extends ConfigFilterBase implements ContainerFactoryPl
    * 'config/install' directories and an extension storage for the
    * 'config/optional' directories.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    *
    * @see \Drupal\Core\Config\ExtensionInstallStorage
    * @see \Drupal\config_overlay\Config\ExtensionOptionalStorage
@@ -103,9 +103,9 @@ class ConfigOverlayFilter extends ConfigFilterBase implements ContainerFactoryPl
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\config_overlay\Config\ExtensionStorageFactory $extension_storage_factory
+   * @param ExtensionStorageFactory $extension_storage_factory
    *   The extension storage factory.
-   * @param \Drupal\Core\Config\StorageInterface $active_storage
+   * @param StorageInterface $active_storage
    *   The active configuration storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ExtensionStorageFactory $extension_storage_factory, StorageInterface $active_storage) {
@@ -152,7 +152,7 @@ class ConfigOverlayFilter extends ConfigFilterBase implements ContainerFactoryPl
   /**
    * Sets the extension install configuration storage.
    *
-   * @param \Drupal\Core\Config\StorageInterface $extension_storage
+   * @param StorageInterface $extension_storage
    *   The extension install configuration storage.
    */
   protected function setExtensionStorage(StorageInterface $extension_storage) {
@@ -340,10 +340,10 @@ class ConfigOverlayFilter extends ConfigFilterBase implements ContainerFactoryPl
    * exist either. In this case the extension list is read from the active
    * storage, so that this filter can work at all.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The storage that contains the extension list.
    *
-   * @throws \Drupal\config_overlay\Exception\ConfigOverlayMissingExtensionListException
+   * @throws ConfigOverlayMissingExtensionListException
    *   If no storage with an extension could be found.
    */
   protected function getStorageWithExtensionList() {
diff --git a/tests/src/Functional/ConfigOverlayFunctionalTestTrait.php b/tests/src/Functional/ConfigOverlayFunctionalTestTrait.php
index a6890c2..368db34 100644
--- a/tests/src/Functional/ConfigOverlayFunctionalTestTrait.php
+++ b/tests/src/Functional/ConfigOverlayFunctionalTestTrait.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\Tests\config_overlay\Functional;
 
+use Drupal\Core\Config\ConfigManagerInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Component\Serialization\SerializationInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ -26,14 +34,14 @@ trait ConfigOverlayFunctionalTestTrait {
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
 
   /**
    * The configuration storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;
 
@@ -47,35 +55,35 @@ trait ConfigOverlayFunctionalTestTrait {
   /**
    * The configuration synchronization storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configSyncStorage;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The serializer.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $serializer;
 
@@ -167,15 +175,15 @@ trait ConfigOverlayFunctionalTestTrait {
   /**
    * Tests recreating a shipped configuration entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $initial_entity
+   * @param ConfigEntityInterface $initial_entity
    *   The entity to recreate.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @return ConfigEntityInterface
    *   The recreated entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function doTestRecreateInitial(ConfigEntityInterface $initial_entity) {
     // Change some configuration and make sure that it is detected correctly.
@@ -212,10 +220,10 @@ trait ConfigOverlayFunctionalTestTrait {
   /**
    * Tests editing a configuration entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity to edit.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function doTestEdit(ConfigEntityInterface $entity) {
     // Edit the menu, so that it will be exported to the synchronization
@@ -237,12 +245,12 @@ trait ConfigOverlayFunctionalTestTrait {
   /**
    * Tests recreating a non-shipped configuration entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $recreated_entity
+   * @param ConfigEntityInterface $recreated_entity
    *   The entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function doTestRecreateAgain(ConfigEntityInterface $recreated_entity) {
     // Recreate the menu again with the same values (but for the UUID). Since
@@ -319,15 +327,15 @@ trait ConfigOverlayFunctionalTestTrait {
   /**
    * Recreates a given configuration entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @return ConfigEntityInterface
    *   The recreated entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function recreateEntity(ConfigEntityInterface $entity) {
     $entity->delete();
