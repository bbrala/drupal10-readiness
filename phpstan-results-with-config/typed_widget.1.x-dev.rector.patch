diff --git a/src/ElementBuilderInterface.php b/src/ElementBuilderInterface.php
index 9dd323d..7ae4628 100644
--- a/src/ElementBuilderInterface.php
+++ b/src/ElementBuilderInterface.php
@@ -13,7 +13,7 @@ interface ElementBuilderInterface {
   /**
    * Get the element type from the data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The data definition.
    *
    * @return string
@@ -26,7 +26,7 @@ interface ElementBuilderInterface {
    *
    * @param string $type
    *   The element type.
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The data definition.
    * @param string $parent_type
    *   An optional parent element type.
diff --git a/src/Form/TypedElementBuilder.php b/src/Form/TypedElementBuilder.php
index c86f9ef..be11c0c 100644
--- a/src/Form/TypedElementBuilder.php
+++ b/src/Form/TypedElementBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_widget\Form;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityStorageException;
@@ -50,7 +51,7 @@ class TypedElementBuilder {
   /**
    * Typed Data Manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    *   The typed data manager.
    */
   protected $typedDataManager;
@@ -58,7 +59,7 @@ class TypedElementBuilder {
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    *   The entity type manager.
    */
   protected $entityTypeManager;
@@ -66,7 +67,7 @@ class TypedElementBuilder {
   /**
    * Logger Channel for Typed Widget.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    *   The logger channel object.
    */
   protected $logger;
@@ -74,7 +75,7 @@ class TypedElementBuilder {
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    *   The module handler.
    */
   protected $moduleHandler;
@@ -96,13 +97,13 @@ class TypedElementBuilder {
   /**
    * Initialize method.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   The logger channel factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler service.
    */
   public function __construct(TypedDataManagerInterface $typedDataManager, EntityTypeManagerInterface $entityTypeManager, LoggerChannelFactoryInterface $loggerFactory, ModuleHandlerInterface $moduleHandler) {
@@ -119,7 +120,7 @@ class TypedElementBuilder {
   /**
    * Get the method for the appropriate typed data element builder.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The Typed Data definition.
    *
    * @return string
@@ -179,7 +180,7 @@ class TypedElementBuilder {
   /**
    * Create a render element for the given data type.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The typed data to generate a render element for.
    *
    * @return array
@@ -203,7 +204,7 @@ class TypedElementBuilder {
   /**
    * Get a single element from a data definition for a primitive type.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The typed data definition.
    *
    * @return array
@@ -226,7 +227,7 @@ class TypedElementBuilder {
   /**
    * Get the form element mapped to a complex data type.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataDefinitionInterface $parent_definition
+   * @param ComplexDataDefinitionInterface $parent_definition
    *   The complex data definition to render.
    * @param string $property_name
    *   (Optional) The property name to fetch from the complex data type.
@@ -236,7 +237,7 @@ class TypedElementBuilder {
    */
   public function getComplexElement(ComplexDataDefinitionInterface $parent_definition, $property_name = '') {
     if ($property_name) {
-      /** @var \Drupal\Core\TypedData\DataDefinitionInterface $definition */
+      /** @var DataDefinitionInterface $definition */
       $definition = $parent_definition->getPropertyDefinition($property_name);
       $method = $this->getMethod($definition);
       return $this->{$method}($definition);
@@ -250,7 +251,7 @@ class TypedElementBuilder {
       $element = $this->getParentContainer($parent_definition, 'fieldset');
     }
 
-    /** @var \Drupal\Core\TypedData\DataDefinitionInterface $definition */
+    /** @var DataDefinitionInterface $definition */
     foreach ($definitions as $name => $definition) {
       if ($this->shouldDisplay($definition)) {
         $method = $this->getMethod($definition);
@@ -264,7 +265,7 @@ class TypedElementBuilder {
   /**
    * Get an element for a field definition.
    *
-   * @param \Drupal\Core\Field\TypedData\FieldItemDataDefinition $field_definition
+   * @param FieldItemDataDefinition $field_definition
    *   The field item data definition.
    * @param string $property_name
    *   (Optional) A property name to restrict the form element return value.
@@ -277,7 +278,7 @@ class TypedElementBuilder {
    */
   public function getFieldElement(FieldItemDataDefinition $field_definition, $property_name = '') {
     if ($property_name) {
-      /** @var \Drupal\Core\TypedData\DataDefinitionInterface $definition */
+      /** @var DataDefinitionInterface $definition */
       $definition = $field_definition->getPropertyDefinition($property_name);
       $method = $this->getMethod($definition);
       return $this->{$method}($definition);
@@ -291,7 +292,7 @@ class TypedElementBuilder {
       $element = $this->getParentContainer($field_definition);
     }
 
-    /** @var \Drupal\Core\TypedData\DataDefinitionInterface $definition */
+    /** @var DataDefinitionInterface $definition */
     foreach ($definitions as $name => $definition) {
       if ($this->shouldDisplay($definition)) {
         $method = $this->getMethod($definition);
@@ -305,7 +306,7 @@ class TypedElementBuilder {
   /**
    * Get a form elemetn for a base field definition.
    *
-   * @param \Drupal\Core\Field\BaseFieldDefinition $definition
+   * @param BaseFieldDefinition $definition
    *   The base field definition.
    *
    * @return array
@@ -334,7 +335,7 @@ class TypedElementBuilder {
   /**
    * Get an element for an entity type.
    *
-   * @param \Drupal\Core\Entity\TypedData\EntityDataDefinition $entity_definition
+   * @param EntityDataDefinition $entity_definition
    *   The entity data definition.
    * @param string $property_name
    *   (Optional) an optional property name to restrict to.
@@ -437,7 +438,7 @@ class TypedElementBuilder {
   /**
    * Get an element container for a complex data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The data definition to generate a parent element for.
    * @param string $type
    *   The type of parent element to use such as fieldset or container.
@@ -469,7 +470,7 @@ class TypedElementBuilder {
   /**
    * Get an element container for a list of items.
    *
-   * @param \Drupal\Core\TypedData\ListDataDefinitionInterface $definition
+   * @param ListDataDefinitionInterface $definition
    *   The list data definition.
    *
    * @return array
@@ -490,7 +491,7 @@ class TypedElementBuilder {
   /**
    * Check whether or not to include the property in the returned element.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The data definition to check whether or not to display.
    *
    * @return bool
@@ -517,7 +518,7 @@ class TypedElementBuilder {
    *
    * @param string $type
    *   The form element type property.
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The data definition.
    * @param string $parent_type
    *   (Optional) The parent data type.
diff --git a/tests/src/Unit/TypedElementBuilderTest.php b/tests/src/Unit/TypedElementBuilderTest.php
index 0124a1e..3001392 100644
--- a/tests/src/Unit/TypedElementBuilderTest.php
+++ b/tests/src/Unit/TypedElementBuilderTest.php
@@ -3,6 +3,8 @@
 namespace Drupal\Tests\typed_widget\Unit;
 
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\TypedData\TypedDataManagerInterface;
 use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ -16,13 +18,14 @@ use Drupal\typed_widget\Form\TypedElementBuilder;
  */
 class TypedElementBuilderTest extends TypedElementTestBase {
 
+  use ProphecyTrait;
   protected $definition;
   protected $typedDataManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $requiredDefinition = DataDefinition::create('string')
       ->setRequired(TRUE)
       ->setClass('\Drupal\Core\TypedData\Plugin\DataType\StringData')
@@ -128,12 +131,12 @@ class TypedElementBuilderTest extends TypedElementTestBase {
    * It is not necessary to mock the createInstance methods at this time, but
    * maybe in the future?
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition to create.
    * @param array $constraints
    *   An array of constraint definitions keyed by constraint name.
    *
-   * @return \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @return TypedDataManagerInterface
    *   Typed Data Manager.
    */
   protected function getTypedDataMock(DataDefinitionInterface $definition, array $constraints = []) {
diff --git a/tests/src/Unit/TypedElementTestBase.php b/tests/src/Unit/TypedElementTestBase.php
index 7623ec5..5cd5b5d 100644
--- a/tests/src/Unit/TypedElementTestBase.php
+++ b/tests/src/Unit/TypedElementTestBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\typed_widget\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ -15,10 +19,11 @@ use Psr\Log\NullLogger;
  */
 abstract class TypedElementTestBase extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Set the container. Required in all child tests.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   Set the Drupal container with some useful services.
    */
   protected function setContainer(TypedDataManagerInterface $typedDataManager) {
@@ -33,7 +38,7 @@ abstract class TypedElementTestBase extends UnitTestCase {
   /**
    * Get a dummy entity type manager mock.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   protected function getEntityTypeManagerMock() {
@@ -44,7 +49,7 @@ abstract class TypedElementTestBase extends UnitTestCase {
   /**
    * Get a dummy logger channel mock.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @return LoggerChannelFactoryInterface
    *   The logger channel object.
    */
   protected function getLogger() {
@@ -56,7 +61,7 @@ abstract class TypedElementTestBase extends UnitTestCase {
   /**
    * Get a dummy module handler mock.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module_handler service.
    */
   protected function getModuleHandlerMock() {
@@ -70,12 +75,12 @@ abstract class TypedElementTestBase extends UnitTestCase {
    * It is not necessary to mock the createInstance methods at this time, but
    * maybe in the future?
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition to create.
    * @param array $constraints
    *   An array of constraint definitions keyed by constraint name.
    *
-   * @return \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @return TypedDataManagerInterface
    *   Typed Data Manager.
    */
   protected function getTypedDataMock(DataDefinitionInterface $definition, array $constraints = []) {
