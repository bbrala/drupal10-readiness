modules/contrib/dru_chat/dru_chat.module
modules/contrib/dru_chat/src/Commands/DruChatDrushCommands.php
modules/contrib/dru_chat/src/Controller/MessagesController.php
modules/contrib/dru_chat/src/Entity/DruChatConnections.php
modules/contrib/dru_chat/src/Entity/DruChatMessages.php
modules/contrib/dru_chat/src/Entity/Message.php
modules/contrib/dru_chat/src/Event/DruChatEvent.php
modules/contrib/dru_chat/src/Event/DruChatPresenceEvent.php
modules/contrib/dru_chat/src/Event/DruChatUserListEvent.php
modules/contrib/dru_chat/src/Examples/DruChatExampleSubscriber.php
modules/contrib/dru_chat/src/Form/PusherConfigForm.php
modules/contrib/dru_chat/src/Plugin/Block/DruChatBlock.php
modules/contrib/dru_chat/src/Service/Messages.php
modules/contrib/dru_chat/tests/Controller/ServerControllerTest.php
modules/contrib/dru_chat/tests/src/Functional/LoadTest.php
modules/contrib/dru_chat/tests/src/Unit/MessagesTest.php

9 files with changes
====================

1) modules/contrib/dru_chat/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\dru_chat\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/dru_chat/src/Service/Messages.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dru_chat\Service;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Session\AccountProxy;
+use Pusher\PusherException;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Pusher\ApiErrorException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\InvalidQueryException;
@@ @@
   /**
    * The EntityTypeManagerInterface class.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The ConfigFactoryInterface service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Setter for EntityTypeManagerInterface class.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The EntityTypeManagerInterface class.
    */
   public function setEntity(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Setter for the ConfigFactoryInterface service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The ConfigFactoryInterface service.
    */
   public function setConfig(ConfigFactoryInterface $configFactory) {
@@ @@
    * @param string $user_id
    *   User id.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of message entities, relating to
    *   current user and the user param passed.
    */
   public function getMessages($user_id) {

-    /** @var \Drupal\Core\Session\AccountProxy $current_user */
+    /** @var AccountProxy $current_user */
     $current_user = \Drupal::currentUser();

     // @todo for guests.
@@ @@
   /**
    * Returns a pusher instance we can reuse.
    *
-   * @return \Pusher\Pusher
-   * @throws \Pusher\PusherException
+   * @return Pusher
+   * @throws PusherException
    */
   public function pusherInstance() {
     $config = $this->configFactory->getEditable('dru_chat.settings');
@@ @@
    * @param string $message
    *   The message string to send.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Pusher\ApiErrorException
-   * @throws \Pusher\PusherException
+   * @return EntityStorageInterface|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws ApiErrorException
+   * @throws PusherException
    */
   public function createMessage($to, $message) {

-    /** @var \Drupal\Core\Session\AccountProxy $current_user */
+    /** @var AccountProxy $current_user */
     $current_user = \Drupal::currentUser();
     $from = $current_user->id();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/dru_chat/src/Plugin/Block/DruChatBlock.php:26

    ---------- begin diff ----------
@@ @@

   /**
    *
-   * @var \Drupal\dru_chat\Service\Messages
+   * @var Messages
    */
   private $messages;

@@ @@
   /**
    * The module_handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   private $accountProxy;

   /**
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   private $csrfToken;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\dru_chat\Service\Messages $messages
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
-   * @param \Drupal\Core\Session\AccountProxyInterface $accountProxy
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfToken
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param Messages $messages
+   * @param ConfigFactoryInterface $configFactory
+   * @param ModuleHandlerInterface $moduleHandler
+   * @param AccountProxyInterface $accountProxy
+   * @param CsrfTokenGenerator $csrfToken
+   * @param EntityTypeManagerInterface $entityTypeManager
    */
   public function __construct(array $configuration,
                               $plugin_id,
@@ @@
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/dru_chat/src/Examples/DruChatExampleSubscriber.php:22

    ---------- begin diff ----------
@@ @@
 class DruChatExampleSubscriber implements EventSubscriberInterface {

   /**
-   * @param \Drupal\dru_chat\Event\DruChatEvent $event
+   * @param DruChatEvent $event
    */
   public function druChatNewMessage(DruChatEvent $event){

@@ @@
   }

   /**
-   * @param \Drupal\dru_chat\Event\DruChatPresenceEvent $event
+   * @param DruChatPresenceEvent $event
    * "channelName" => "hohjohohohohoouxgsagF",
    * "socketId" => "KJHBCKJSGBKJDSBDJMAsgdsagdkasgddgk",
    * "userId" => 1629375665,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/dru_chat/src/Event/DruChatUserListEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dru_chat\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Defines DruChatUserListEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/dru_chat/src/Event/DruChatPresenceEvent.php:3

    ---------- begin diff ----------
@@ @@
 namespace Drupal\dru_chat\Event;


-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event fired when a new user presence is registered.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/dru_chat/src/Event/DruChatEvent.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace Drupal\dru_chat\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\dru_chat\Entity\Message;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines DruChatEvent class.
@@ @@
   /**
    * The current message instance.
    *
-   * @var \Drupal\dru_chat\Entity\Message
+   * @var Message
    */
   protected $msg_item;

@@ @@
   /**
    * DruChatEvent constructor.
    *
-   * @param \Drupal\dru_chat\Entity\Message $msg_item
+   * @param Message $msg_item
    *   The Message class.
    */
   public function __construct(Message $msg_item) {
@@ @@
   }

   /**
-   * @return \Drupal\dru_chat\Entity\Message
+   * @return Message
    *   The current message object instance.
    */
   public function getMessageItem(){
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/dru_chat/src/Controller/MessagesController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dru_chat\Controller;

+use Symfony\Component\HttpFoundation\Session\Session;
+use Pusher\Pusher;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Render\Renderer;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The dru_chat.messages service.
    *
-   * @var \Drupal\dru_chat\Service\Messages
+   * @var Messages
    */
   private $messages;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   private $renderer;

@@ @@
   /**
    * MessagesController constructor.
    *
-   * @param \Drupal\dru_chat\Service\Messages $messages
+   * @param Messages $messages
    *   The dru_chat.messages service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
    */
   public function __construct(Messages $messages, Renderer $renderer) {
@@ @@
   /**
    * Builds a messages view related to the two users.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   User Account entity.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Symfony Request object from ajax request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response.
    */
   public function getMessages(AccountInterface $user, Request $request) {
@@ @@
   /**
    * Returns a json response.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The symfony request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response, in json format.
    */
   public function newMessage(Request $request) {
@@ @@
    * Registers a user to pusher presence api.
    *   Easier to track online users this way, than implementing
    *   a custom session handler
-   * @throws \Pusher\PusherException
+   * @throws PusherException
    */
   public function presence(Request $request) {
     $channelName = $request->request->get('channel_name', NULL);
@@ @@
       throw new BadRequestHttpException('Bad request object');
     }

-    /** @var \Symfony\Component\HttpFoundation\Session\Session $session */
+    /** @var Session $session */
     $session = $request->getSession();
     if (!$session->get('dru_chat_user')) {
       $user_id = $session->getId();
@@ @@
       try {
         $pusher = \Drupal::service('dru_chat.messages');
         // @todo doesn't work!!! because of issue @ https://github.com/pusher/pusher-js/issues/485
-        /** @var \Pusher\Pusher $pusherInstance */
+        /** @var Pusher $pusherInstance */
         $pusherInstance = $pusher->pusherInstance();

         $presenceItem = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/dru_chat/dru_chat.module:50

    ---------- begin diff ----------
@@ @@
  * Implements hook_preprocess().
  */
 function dru_chat_preprocess(&$variables, $hook) {
-  $variables['dru_chat_missing_image'] = file_create_url(drupal_get_path('module', 'dru_chat') . '/images/missing_image.svg');
+  $variables['dru_chat_missing_image'] = \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('dru_chat') . '/images/missing_image.svg');
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector


 [WARNING] 3 nodes were removed                                                 

 [OK] 9 files have been changed by Rector                                       

