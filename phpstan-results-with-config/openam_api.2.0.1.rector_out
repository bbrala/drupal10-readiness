modules/contrib/openam_api/src/Event/PostUserCreateEvent.php
modules/contrib/openam_api/src/Event/PreUserCreateEvent.php
modules/contrib/openam_api/src/EventSubscriber/PostUserCreate.php
modules/contrib/openam_api/src/EventSubscriber/PreUserCreate.php
modules/contrib/openam_api/src/Form/SettingsForm.php
modules/contrib/openam_api/src/Service/OpenamApiClient.php
modules/contrib/openam_api/src/Service/Users.php

7 files with changes
====================

1) modules/contrib/openam_api/src/Service/Users.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openam_api\Service;

+use Psr\Http\Message\StreamInterface;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactory;
 use Exception;
@@ @@
   /**
    * OpenAM Client.
    *
-   * @var \Drupal\openam_api\Service\OpenamApiClient
+   * @var OpenamApiClient
    */
   public $openamApiClient;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Users constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   Config factory.
-   * @param \Drupal\openam_api\Service\OpenamApiClient $openamApiClient
+   * @param OpenamApiClient $openamApiClient
    *   OpenAM API Client.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(ConfigFactory $configFactory,
@@ @@
    * @param array $options
    *   Additional options for the guzzle request. e.g. proxy settings.
    *
-   * @return \Psr\Http\Message\StreamInterface
+   * @return StreamInterface
    *   Auth api response containing user id.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function isTokenValid($authToken, array $options = []) {
     try {
@@ @@
    * @param string $realm
    *   The domain/store to authenticate against, default Top Level Realm (/).
    *
-   * @return \Psr\Http\Message\StreamInterface
+   * @return StreamInterface
    *   A token if the username and password match. A string "NULL" if the
    *   username and password match, but when the user is locked out.
    *
@@ @@
    * @param array $options
    *   Additional options for the guzzle request. e.g. proxy settings.
    *
-   * @return \Psr\Http\Message\StreamInterface
+   * @return StreamInterface
    *   User attributes from openAM, if is successful.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function getUserData($username, $authToken, array $options = []) {
     $response = NULL;
@@ @@
    * @param array $options
    *   Additional options for the guzzle request. e.g. proxy settings.
    *
-   * @return \Psr\Http\Message\StreamInterface
+   * @return StreamInterface
    *   Success message response, if logout is successful.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function logoutUser($authToken, array $options = []) {
     try {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/openam_api/src/Service/OpenamApiClient.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openam_api\Service;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Psr\Http\Message\ResponseInterface;
+use GuzzleHttp\Exception\GuzzleException;
+use Drupal\Core\GeneratedUrl;
+use Psr\Http\Message\StreamInterface;
+use function GuzzleHttp\uri_template;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * An instance of Config Factory.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   private $config;

@@ @@
   /**
    * LoggerChannelFactory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   public $loggerFactory;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

@@ @@
   /**
    * The HTTP client to fetch the API data.
    *
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   private $httpClientFactory;

@@ @@
   /**
    * Create the OpenAM API client.
    *
-   * @param \Drupal\Core\Http\ClientFactory $httpClientFactory
+   * @param ClientFactory $httpClientFactory
    *   A Guzzle client object.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   An instance of Config Factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   LoggerChannelFactory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(ClientFactory $httpClientFactory,
@@ @@
    * @param array $options
    *   Request options with headers and post body etc.
    *
-   * @return mixed|\Psr\Http\Message\ResponseInterface
+   * @return mixed|ResponseInterface
    *   Guzzle response instance.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function callEndpoint(array $options = []) {
     $url = $this->requestUrl($options);
@@ @@
    * @param array $options
    *   Request options with headers and post body etc.
    *
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    *   Request url with replaced placeholder.
    */
   protected function requestUrl(array $options = []) {
     $baseUrl = $this->config->get('openam_api_url');
-    $uri = \GuzzleHttp\uri_template($options['uri'], $options['uri_template_options']);
+    $uri = uri_template($options['uri'], $options['uri_template_options']);
     return Url::fromUri($baseUrl . $uri)->toString();
   }

@@ @@
    * @param array $options
    *   for Url building.
    *
-   * @return mixed|null|\Psr\Http\Message\StreamInterface
+   * @return mixed|null|StreamInterface
    *   Returns response body to be used by caller.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function queryEndpoint(array $options = []) {
     $responseContents = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/openam_api/src/Form/SettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

@@ @@
   /**
    * Settings constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config Factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/openam_api/src/EventSubscriber/PreUserCreate.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Alter user before create.
    *
-   * @param \Drupal\openam_api\Event\PreUserCreateEvent $event
+   * @param PreUserCreateEvent $event
    *   Pre User Create Event.
    */
   public function doPreUserCreate(PreUserCreateEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/openam_api/src/EventSubscriber/PostUserCreate.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Alter user before post submit.
    *
-   * @param \Drupal\openam_api\Event\PostUserCreateEvent $event
+   * @param PostUserCreateEvent $event
    *   Post User Create Event.
    */
   public function doPostUserCreateSub(PostUserCreateEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/openam_api/src/Event/PreUserCreateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openam_api\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class PreUserCreateEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/openam_api/src/Event/PostUserCreateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openam_api\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class PostUserCreateEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 7 files have been changed by Rector                                       

