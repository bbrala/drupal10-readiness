diff --git a/modules/commerce_epayco/commerce_epayco.module b/modules/commerce_epayco/commerce_epayco.module
index 9659b1e..3592893 100755
--- a/modules/commerce_epayco/commerce_epayco.module
+++ b/modules/commerce_epayco/commerce_epayco.module
@@ -167,7 +167,7 @@ function commerce_epayco_cron() {
  *
  * And check if there is any ePayco payment gateway provided.
  *
- * @param \Drupal\user\Entity\User $user
+ * @param User $user
  *   - The user to check permissions to.
  *
  * @return bool
diff --git a/modules/commerce_epayco/src/CommerceGatewayHandler.php b/modules/commerce_epayco/src/CommerceGatewayHandler.php
index ef08277..fd96b29 100644
--- a/modules/commerce_epayco/src/CommerceGatewayHandler.php
+++ b/modules/commerce_epayco/src/CommerceGatewayHandler.php
@@ -15,18 +15,18 @@ class CommerceGatewayHandler extends GatewayHandler {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructor method.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger channel.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
    */
   public function __construct(ClientInterface $http_client, LoggerInterface $logger, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/epayco_api/src/Controller/Operation.php b/modules/epayco_api/src/Controller/Operation.php
index 9214769..aa983f8 100644
--- a/modules/epayco_api/src/Controller/Operation.php
+++ b/modules/epayco_api/src/Controller/Operation.php
@@ -18,14 +18,14 @@ class Operation extends ControllerBase {
   /**
    * The gateway handler.
    *
-   * @var \Drupal\epayco\GatewayHandlerInterface
+   * @var GatewayHandlerInterface
    */
   protected $gatewayHandler;
 
   /**
    * Class constructor.
    *
-   * @param \Drupal\epayco\GatewayHandlerInterface $gateway_handler
+   * @param GatewayHandlerInterface $gateway_handler
    *   The gateway handler.
    */
   public function __construct(GatewayHandlerInterface $gateway_handler) {
diff --git a/modules/epayco_business_rules/src/EventSubscriber/TransactionResponseListener.php b/modules/epayco_business_rules/src/EventSubscriber/TransactionResponseListener.php
index 04091a8..df620c0 100644
--- a/modules/epayco_business_rules/src/EventSubscriber/TransactionResponseListener.php
+++ b/modules/epayco_business_rules/src/EventSubscriber/TransactionResponseListener.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\epayco_business_rules\EventSubscriber;
 
+use Symfony\Component\EventDispatcher\EventDispatcher;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\epayco\Event\GatewayTransactionEvent;
 use Drupal\epayco\Event\GatewayTransactionEvents;
@@ -30,7 +31,7 @@ class TransactionResponseListener implements EventSubscriberInterface, Container
   /**
    * Create a new event for BusinessRules plugin GatewayTransactionResponse.
    *
-   * @param \Drupal\epayco\Event\GatewayTransactionEvent $event
+   * @param GatewayTransactionEvent $event
    *   The event.
    */
   public function onTransactionResponse(GatewayTransactionEvent $event) {
@@ -48,7 +49,7 @@ class TransactionResponseListener implements EventSubscriberInterface, Container
       'entity_unchanged' => NULL,
       'reacts_on' => $reacts_on_definition,
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcher $event_dispatcher */
+    /** @var EventDispatcher $event_dispatcher */
     $event_dispatcher = $this->container->get('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $new_event);
   }
diff --git a/src/Controller/FactoryListBuilder.php b/src/Controller/FactoryListBuilder.php
index 26d18ed..343f1bf 100644
--- a/src/Controller/FactoryListBuilder.php
+++ b/src/Controller/FactoryListBuilder.php
@@ -47,7 +47,7 @@ class FactoryListBuilder extends ConfigEntityListBuilder {
     foreach ($this->getVars($entity) as $key => $value) {
       array_push($row['info']['#items'], $key . ': ' . $value);
     }
-    $row['info'] = render($row['info']);
+    $row['info'] = \Drupal::service('renderer')->render($row['info']);
 
     return $row + parent::buildRow($entity);
   }
@@ -55,7 +55,7 @@ class FactoryListBuilder extends ConfigEntityListBuilder {
   /**
    * Get a list of available useful variables to be shown.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to fetch values from.
    */
   public function getVars(EntityInterface $entity) {
diff --git a/src/Controller/TransactionResponse.php b/src/Controller/TransactionResponse.php
index 69b0bfe..3b40000 100644
--- a/src/Controller/TransactionResponse.php
+++ b/src/Controller/TransactionResponse.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\epayco\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -28,34 +29,34 @@ class TransactionResponse implements ContainerInjectionInterface {
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs a new TransactionResponse controller.
    *
-   * @param \Drupal\epayco\GatewayHandlerInterface $gateway_handler
+   * @param GatewayHandlerInterface $gateway_handler
    *   The gateway handler.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(GatewayHandlerInterface $gateway_handler, EventDispatcherInterface $event_dispatcher, RequestStack $request_stack, LoggerInterface $logger) {
@@ -88,9 +89,9 @@ class TransactionResponse implements ContainerInjectionInterface {
         $data = $this->gatewayHandler->getReferenceRemoteData($remote_ref);
         // We'll dispatch event only if it's a valid transaction.
         if ($data['success']) {
-          /** @var \Drupal\epayco\Event\GatewayTransactionEvent $event */
+          /** @var GatewayTransactionEvent $event */
           $event = new GatewayTransactionEvent($data);
-          $this->eventDispatcher->dispatch(GatewayTransactionEvents::EPAYCO_TRANSACTION_RESPONSE, $event);
+          $this->eventDispatcher->dispatch($event, GatewayTransactionEvents::EPAYCO_TRANSACTION_RESPONSE);
         }
       }
     }
@@ -108,7 +109,7 @@ class TransactionResponse implements ContainerInjectionInterface {
   /**
    * Check access to the page, if needed conditions are met.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
    */
   public function checkAccess(AccountInterface $account) {
diff --git a/src/Event/GatewayTransactionEvent.php b/src/Event/GatewayTransactionEvent.php
index 9caecd3..f7362bb 100644
--- a/src/Event/GatewayTransactionEvent.php
+++ b/src/Event/GatewayTransactionEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\epayco\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class GatewayTransactionEvent.
diff --git a/src/Form/FactoryDeleteForm.php b/src/Form/FactoryDeleteForm.php
index 036944e..755a4f5 100644
--- a/src/Form/FactoryDeleteForm.php
+++ b/src/Form/FactoryDeleteForm.php
@@ -38,7 +38,7 @@ class FactoryDeleteForm extends EntityConfirmFormBase {
   /**
    * Gets the cancel URL.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to go to if the user cancels the deletion.
    */
   public function getCancelUrl() {
@@ -50,7 +50,7 @@ class FactoryDeleteForm extends EntityConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/FactoryFormBase.php b/src/Form/FactoryFormBase.php
index e65a441..7e2cdbc 100644
--- a/src/Form/FactoryFormBase.php
+++ b/src/Form/FactoryFormBase.php
@@ -108,7 +108,7 @@ class FactoryFormBase extends EntityForm {
    *   The entity ID.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ -127,7 +127,7 @@ class FactoryFormBase extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function save(array $form, FormStateInterface $form_state) {
diff --git a/src/GatewayHandler.php b/src/GatewayHandler.php
index 5c39625..d9d4bd4 100644
--- a/src/GatewayHandler.php
+++ b/src/GatewayHandler.php
@@ -26,16 +26,16 @@ class GatewayHandler implements GatewayHandlerInterface {
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructor method.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger channel.
    */
   public function __construct(ClientInterface $http_client, LoggerInterface $logger) {
@@ -75,7 +75,7 @@ class GatewayHandler implements GatewayHandlerInterface {
   /**
    * Method to execute any factory operation (Experimental).
    *
-   * @param \Epayco\Epayco $client_instance
+   * @param Epayco $client_instance
    *   The ePyco client instance.
    * @param string $element_name
    *   The initial object to perform operation.
diff --git a/src/Plugin/DataType/Factory.php b/src/Plugin/DataType/Factory.php
index f48d6d7..84bd922 100644
--- a/src/Plugin/DataType/Factory.php
+++ b/src/Plugin/DataType/Factory.php
@@ -19,7 +19,7 @@ class Factory extends TypedData {
   /**
    * The ePayco factory.
    *
-   * @var \Epayco\Epayco
+   * @var Epayco
    */
   protected $value;
 
