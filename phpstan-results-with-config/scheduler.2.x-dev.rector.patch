diff --git a/plugins/content_types/scheduler_form_pane.inc b/plugins/content_types/scheduler_form_pane.inc
index 2972187..9e6e978 100644
--- a/plugins/content_types/scheduler_form_pane.inc
+++ b/plugins/content_types/scheduler_form_pane.inc
@@ -18,7 +18,7 @@ $plugin = [
   'edit form' => 'scheduler_form_pane_node_form_menu_content_type_edit_form',
   'render callback' => 'scheduler_form_pane_content_type_render',
   'title' => t('Node form scheduler'),
-  'icon' => drupal_get_path('module', 'ctools') . '/plugins/content_types/node_form/icon_node_form.png',
+  'icon' => \Drupal::service('extension.list.module')->getPath('ctools') . '/plugins/content_types/node_form/icon_node_form.png',
   'description' => t('Scheduler date options on the Node form.'),
   'required context' => new ctools_context_required(t('Form'), 'node_form'),
   'category' => t('Form'),
diff --git a/scheduler.module b/scheduler.module
index f7897eb..77001e4 100644
--- a/scheduler.module
+++ b/scheduler.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Entity\ContentEntityTypeInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\scheduler\SchedulerManager;
 /**
  * @file
  * Scheduler publishes and unpublishes entities on dates specified by the user.
@@ -31,7 +34,7 @@ function scheduler_help($route_name, RouteMatchInterface $route_match) {
       $output = '<h3>' . t('About') . '</h3>';
       $output .= '<p>' . t('The Scheduler module provides the functionality for automatic publishing and unpublishing of entities, such and nodes and media items, at specified future dates.') . '</p>';
       $output .= '<p>' . t('You can read more in the <a href="@readme">readme</a> file or our <a href="@project">project page on Drupal.org</a>.', [
-        '@readme' => $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'scheduler') . '/README.md',
+        '@readme' => $GLOBALS['base_url'] . '/' . \Drupal::service('extension.list.module')->getPath('scheduler') . '/README.md',
         '@project' => 'https://drupal.org/project/scheduler',
       ]) . '</p>';
       break;
@@ -59,7 +62,7 @@ function scheduler_form_alter(&$form, FormStateInterface $form_state, $form_id)
   $scheduler_manager = \Drupal::service('scheduler.manager');
 
   if (in_array($form_id, $scheduler_manager->getEntityFormIds())) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $form_state->getFormObject()->getEntity();
     _scheduler_entity_form_alter($form, $form_state, $form_id, $entity);
   }
@@ -330,13 +333,13 @@ function _scheduler_entity_form_alter(&$form, FormStateInterface $form_state, $f
 function _scheduler_entity_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $config = \Drupal::config('scheduler.settings');
 
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+  /** @var EntityTypeInterface $type */
   $type = $form_state->getFormObject()->getEntity();
 
-  /** @var Drupal\Core\Entity\ContentEntityTypeInterface $contentEntityType */
+  /** @var ContentEntityTypeInterface $contentEntityType */
   $contentEntityType = \Drupal::entityTypeManager()->getDefinition($type->getEntityType()->getBundleOf());
 
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $contentEntity */
+  /** @var ContentEntityInterface $contentEntity */
   $contentEntity = \Drupal::entityTypeManager()->getStorage($contentEntityType->id())->create([$contentEntityType->getKey('bundle') => 'scaffold']);
 
   $params = [
@@ -654,7 +657,7 @@ function scheduler_form_language_content_settings_form_alter(array &$form, FormS
  */
 function _scheduler_translation_validate($form, FormStateInterface $form_state) {
   $settings = $form_state->getValues()['settings'];
-  /** @var \Drupal\scheduler\SchedulerManager $scheduler_manager */
+  /** @var SchedulerManager $scheduler_manager */
   $scheduler_manager = \Drupal::service('scheduler.manager');
   foreach ($settings as $entity_type => $content_types) {
     $publishing_enabled_types = $scheduler_manager->getEnabledTypes($entity_type, 'publish');
@@ -955,7 +958,7 @@ function scheduler_cron() {
   $scheduler_cron = &drupal_static(__FUNCTION__, FALSE);
   $scheduler_cron = TRUE;
 
-  /** @var \Drupal\scheduler\SchedulerManager $scheduler_manager */
+  /** @var SchedulerManager $scheduler_manager */
   $scheduler_manager = \Drupal::service('scheduler.manager');
   $scheduler_manager->publish();
   $scheduler_manager->unpublish();
@@ -1125,7 +1128,7 @@ function scheduler_feeds_set_target($source, $entity, $target, $value, $mapping)
  * Implements hook_modules_installed().
  */
 function scheduler_modules_installed($modules) {
-  /** @var \Drupal\scheduler\SchedulerManager $scheduler_manager */
+  /** @var SchedulerManager $scheduler_manager */
   $scheduler_manager = \Drupal::service('scheduler.manager');
   $scheduler_manager->invalidatePluginCache();
 
diff --git a/scheduler_rules_integration/scheduler_rules_integration.module b/scheduler_rules_integration/scheduler_rules_integration.module
index 1e8f38e..004451d 100644
--- a/scheduler_rules_integration/scheduler_rules_integration.module
+++ b/scheduler_rules_integration/scheduler_rules_integration.module
@@ -15,7 +15,7 @@ use Drupal\Core\Entity\EntityInterface;
 /**
  * Dispatch a Rules Integration event for an entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity object being processed.
  * @param string $event_id
  *   The internal event id, for example NEW_FOR_PUBLISHING or CRON_PUBLISHED.
@@ -39,7 +39,7 @@ function _scheduler_rules_integration_event(EntityInterface $entity, $event_id)
  * This function is called from the main Scheduler module publish() and
  * unpublish() functions in the SchedulerManager class.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity object being processed.
  * @param string $action
  *   The action being performed - 'publish' or 'unpublish'.
diff --git a/scheduler_rules_integration/src/Event/EventDeriver.php b/scheduler_rules_integration/src/Event/EventDeriver.php
index 402c0cd..7ed106c 100644
--- a/scheduler_rules_integration/src/Event/EventDeriver.php
+++ b/scheduler_rules_integration/src/Event/EventDeriver.php
@@ -29,25 +29,25 @@ class EventDeriver extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The scheduler manager.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;
 
   /**
    * Creates a new EventDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\scheduler\SchedulerManager $scheduler_manager
+   * @param SchedulerManager $scheduler_manager
    *   The scheduler manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation, SchedulerManager $scheduler_manager) {
diff --git a/scheduler_rules_integration/src/Event/RulesMediaEvent.php b/scheduler_rules_integration/src/Event/RulesMediaEvent.php
index a2e4f97..0fdfcfc 100644
--- a/scheduler_rules_integration/src/Event/RulesMediaEvent.php
+++ b/scheduler_rules_integration/src/Event/RulesMediaEvent.php
@@ -28,14 +28,14 @@ class RulesMediaEvent extends EventBase {
   /**
    * The media item which is being processed.
    *
-   * @var \Drupal\media\MediaInterface
+   * @var MediaInterface
    */
   public $media;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media item which is being processed.
    */
   public function __construct(MediaInterface $media) {
diff --git a/scheduler_rules_integration/src/Event/RulesNodeEvent.php b/scheduler_rules_integration/src/Event/RulesNodeEvent.php
index dfabe82..0a3d383 100644
--- a/scheduler_rules_integration/src/Event/RulesNodeEvent.php
+++ b/scheduler_rules_integration/src/Event/RulesNodeEvent.php
@@ -28,14 +28,14 @@ class RulesNodeEvent extends EventBase {
   /**
    * The node which is being processed.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   public $node;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node which is being processed.
    */
   public function __construct(NodeInterface $node) {
diff --git a/scheduler_rules_integration/src/Event/RulesTaxonomyTermEvent.php b/scheduler_rules_integration/src/Event/RulesTaxonomyTermEvent.php
index 932b3ba..7b6f80a 100644
--- a/scheduler_rules_integration/src/Event/RulesTaxonomyTermEvent.php
+++ b/scheduler_rules_integration/src/Event/RulesTaxonomyTermEvent.php
@@ -39,14 +39,14 @@ class RulesTaxonomyTermEvent extends EventBase {
    *
    * phpcs:disable Drupal.NamingConventions.ValidVariableName.LowerCamelName
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   public $taxonomy_term;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\taxonomy\TermInterface $taxonomy_term
+   * @param TermInterface $taxonomy_term
    *   The taxonomy term is being processed.
    */
   public function __construct(TermInterface $taxonomy_term) {
diff --git a/scheduler_rules_integration/src/Plugin/Condition/ConditionDeriver.php b/scheduler_rules_integration/src/Plugin/Condition/ConditionDeriver.php
index e99dfd5..5732448 100644
--- a/scheduler_rules_integration/src/Plugin/Condition/ConditionDeriver.php
+++ b/scheduler_rules_integration/src/Plugin/Condition/ConditionDeriver.php
@@ -21,25 +21,25 @@ class ConditionDeriver extends DeriverBase implements ContainerDeriverInterface
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The scheduler manager.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;
 
   /**
    * Creates a new deriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\scheduler\SchedulerManager $scheduler_manager
+   * @param SchedulerManager $scheduler_manager
    *   The scheduler manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation, SchedulerManager $scheduler_manager) {
diff --git a/scheduler_rules_integration/src/Plugin/RulesAction/SchedulerRulesActionDeriver.php b/scheduler_rules_integration/src/Plugin/RulesAction/SchedulerRulesActionDeriver.php
index eb6f43c..5591fd2 100644
--- a/scheduler_rules_integration/src/Plugin/RulesAction/SchedulerRulesActionDeriver.php
+++ b/scheduler_rules_integration/src/Plugin/RulesAction/SchedulerRulesActionDeriver.php
@@ -23,25 +23,25 @@ class SchedulerRulesActionDeriver extends DeriverBase implements ContainerDerive
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The scheduler manager.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;
 
   /**
    * Creates a new deriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\scheduler\SchedulerManager $scheduler_manager
+   * @param SchedulerManager $scheduler_manager
    *   The scheduler manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation, SchedulerManager $scheduler_manager) {
diff --git a/scheduler_rules_integration/tests/src/Functional/SchedulerRulesEventsTest.php b/scheduler_rules_integration/tests/src/Functional/SchedulerRulesEventsTest.php
index 62e1666..738ddcd 100644
--- a/scheduler_rules_integration/tests/src/Functional/SchedulerRulesEventsTest.php
+++ b/scheduler_rules_integration/tests/src/Functional/SchedulerRulesEventsTest.php
@@ -119,6 +119,7 @@ class SchedulerRulesEventsTest extends SchedulerBrowserTestBase {
    * Tests that no events are triggered when there are no scheduling dates.
    *
    * @dataProvider dataStandardEntityTypes()
+   * @doesNotPerformAssertions
    */
   public function testRulesEventsNone($entityTypeId, $bundle) {
     // Add and save an entity without any scheduled dates and check that no
@@ -140,6 +141,7 @@ class SchedulerRulesEventsTest extends SchedulerBrowserTestBase {
    * Tests the three events related to publishing an entity.
    *
    * @dataProvider dataStandardEntityTypes()
+   * @doesNotPerformAssertions
    */
   public function testRulesEventsPublish($entityTypeId, $bundle) {
     // Allow dates in the past.
@@ -175,6 +177,7 @@ class SchedulerRulesEventsTest extends SchedulerBrowserTestBase {
    * Tests the three events related to unpublishing an entity.
    *
    * @dataProvider dataStandardEntityTypes()
+   * @doesNotPerformAssertions
    */
   public function testRulesEventsUnpublish($entityTypeId, $bundle) {
     // Create an entity with an unpublish-on date, and check that only event 4
@@ -208,6 +211,7 @@ class SchedulerRulesEventsTest extends SchedulerBrowserTestBase {
    * Tests all six events related to publishing and unpublishing an entity.
    *
    * @dataProvider dataStandardEntityTypes()
+   * @doesNotPerformAssertions
    */
   public function testRulesEventsBoth($entityTypeId, $bundle) {
     // Allow dates in the past.
diff --git a/src/Access/SchedulerRouteAccess.php b/src/Access/SchedulerRouteAccess.php
index 31f6d63..f83755a 100644
--- a/src/Access/SchedulerRouteAccess.php
+++ b/src/Access/SchedulerRouteAccess.php
@@ -22,9 +22,9 @@ class SchedulerRouteAccess {
    * user profiles and view scheduled content, and the user they are viewing has
    * permission to schedule content or view scheduled content.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function access(AccountInterface $account, RouteMatchInterface $route_match) {
diff --git a/src/Annotation/SchedulerPlugin.php b/src/Annotation/SchedulerPlugin.php
index ce0fd2b..57da5e7 100644
--- a/src/Annotation/SchedulerPlugin.php
+++ b/src/Annotation/SchedulerPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\scheduler\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class SchedulerPlugin extends Plugin {
   /**
    * The readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -32,7 +33,7 @@ class SchedulerPlugin extends Plugin {
   /**
    * Description of plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Commands/SchedulerCommands.php b/src/Commands/SchedulerCommands.php
index e2cff3e..600e8fc 100644
--- a/src/Commands/SchedulerCommands.php
+++ b/src/Commands/SchedulerCommands.php
@@ -14,23 +14,23 @@ class SchedulerCommands extends DrushCommands {
   /**
    * The Scheduler manager service.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;
 
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * SchedulerCommands constructor.
    *
-   * @param \Drupal\scheduler\SchedulerManager $schedulerManager
+   * @param SchedulerManager $schedulerManager
    *   Scheduler manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
    */
   public function __construct(SchedulerManager $schedulerManager, MessengerInterface $messenger) {
diff --git a/src/Controller/LightweightCronController.php b/src/Controller/LightweightCronController.php
index 9b5fce8..3dcea4e 100644
--- a/src/Controller/LightweightCronController.php
+++ b/src/Controller/LightweightCronController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\scheduler\Controller;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\scheduler\SchedulerManager;
@@ -18,14 +19,14 @@ class LightweightCronController extends ControllerBase {
   /**
    * The scheduler manager.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;
 
   /**
    * LightweightCronController constructor.
    *
-   * @param \Drupal\scheduler\SchedulerManager $scheduler_manager
+   * @param SchedulerManager $scheduler_manager
    *   The scheduler manager.
    */
   public function __construct(SchedulerManager $scheduler_manager) {
@@ -44,7 +45,7 @@ class LightweightCronController extends ControllerBase {
   /**
    * Index.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response.
    */
   public function index() {
@@ -59,7 +60,7 @@ class LightweightCronController extends ControllerBase {
    * @param string $cron_key
    *   The cron key.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access($cron_key) {
diff --git a/src/Event/EventBase.php b/src/Event/EventBase.php
index ac4dd76..1289423 100644
--- a/src/Event/EventBase.php
+++ b/src/Event/EventBase.php
@@ -21,14 +21,14 @@ class EventBase extends Event {
   /**
    * The entity which is being processed.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $entity;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity which is being processed.
    */
   public function __construct(EntityInterface $entity) {
diff --git a/src/Event/SchedulerEvent.php b/src/Event/SchedulerEvent.php
index e9e7fa2..7374e84 100644
--- a/src/Event/SchedulerEvent.php
+++ b/src/Event/SchedulerEvent.php
@@ -12,7 +12,7 @@ class SchedulerEvent extends EventBase {
   /**
    * Gets the entity object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity object that caused the event to fire.
    */
   public function getEntity() {
@@ -22,7 +22,7 @@ class SchedulerEvent extends EventBase {
   /**
    * Sets the entity object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object that caused the event to fire.
    */
   public function setEntity(EntityInterface $entity) {
@@ -35,7 +35,7 @@ class SchedulerEvent extends EventBase {
    * This method is retained for backwards compatibility because implementations
    * of the event subscriber functions may be using $event->getNode().
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity object that caused the event to fire.
    */
   public function getNode() {
@@ -48,7 +48,7 @@ class SchedulerEvent extends EventBase {
    * This method is retained for backwards compatibility because implementations
    * of the event subscriber functions may be using $event->setNode().
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object that caused the event to fire.
    */
   public function setNode(EntityInterface $entity) {
diff --git a/src/Form/SchedulerAdminForm.php b/src/Form/SchedulerAdminForm.php
index 3933efe..dee6849 100644
--- a/src/Form/SchedulerAdminForm.php
+++ b/src/Form/SchedulerAdminForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\scheduler\Form;
 
+use Drupal\scheduler\SchedulerManager;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,21 +19,21 @@ class SchedulerAdminForm extends ConfigFormBase {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The scheduler manager service.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;
 
   /**
    * Entity Type Manager service object.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -48,7 +51,7 @@ class SchedulerAdminForm extends ConfigFormBase {
   /**
    * Sets the date formatter.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   protected function setDateFormatter(DateFormatterInterface $date_formatter) {
@@ -224,7 +227,7 @@ class SchedulerAdminForm extends ConfigFormBase {
    * @param string $key
    *   The key of the configuration.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The value of the config setting equested.
    */
   protected function setting($key) {
diff --git a/src/Form/SchedulerCronForm.php b/src/Form/SchedulerCronForm.php
index 41eef3b..9358ce8 100644
--- a/src/Form/SchedulerCronForm.php
+++ b/src/Form/SchedulerCronForm.php
@@ -18,25 +18,25 @@ class SchedulerCronForm extends ConfigFormBase {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The scheduler manager service.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;
 
   /**
    * Creates a SchedulerCronForm instance.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @var ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @var ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @var \Drupal\scheduler\SchedulerManager $scheduler_manager
+   * @var SchedulerManager $scheduler_manager
    *   The scheduler manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, SchedulerManager $scheduler_manager) {
@@ -134,7 +134,7 @@ class SchedulerCronForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function generateRandomKey(array &$form, FormStateInterface $form_state) {
@@ -151,7 +151,7 @@ class SchedulerCronForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function runLightweightCron(array &$form, FormStateInterface $form_state) {
diff --git a/src/Plugin/Derivative/DynamicLocalTasks.php b/src/Plugin/Derivative/DynamicLocalTasks.php
index 0b58e37..846ce1a 100644
--- a/src/Plugin/Derivative/DynamicLocalTasks.php
+++ b/src/Plugin/Derivative/DynamicLocalTasks.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\scheduler\Plugin\Derivative;
 
+use Drupal\views\ViewEntityInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -23,14 +24,14 @@ class DynamicLocalTasks extends DeriverBase implements ContainerDeriverInterface
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates a DynamicLocalTasks object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -55,7 +56,7 @@ class DynamicLocalTasks extends DeriverBase implements ContainerDeriverInterface
 
     // Define a local task for scheduled content (nodes) view, only when the
     // view can be loaded, is enabled and that the overview display exists.
-    /** @var \Drupal\views\ViewEntityInterface $view */
+    /** @var ViewEntityInterface $view */
     $view = $view_storage->load('scheduler_scheduled_content');
     if ($view && $view->status() && $view->getDisplay('overview')) {
       // The content overview has weight 0 and moderated content has weight 1
diff --git a/src/SchedulerManager.php b/src/SchedulerManager.php
index 9e84c75..6dbc436 100644
--- a/src/SchedulerManager.php
+++ b/src/SchedulerManager.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\scheduler;
 
+use Drupal\scheduler\Exception\SchedulerEntityTypeNotEnabledException;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\StorageInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Component\EventDispatcher\Event;
@@ -29,56 +32,56 @@ class SchedulerManager {
   /**
    * Date formatter service object.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Scheduler Logger service object.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Module handler service object.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Entity Type Manager service object.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Config Factory service object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The event dispatcher.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Entity Field Manager service object.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;
 
@@ -124,7 +127,7 @@ class SchedulerManager {
    * followed by the event name string. At 9.0 the existing signature has to be
    * used but from 9.1 the parameters must be switched.
    *
-   * @param \Drupal\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The event object.
    * @param string $event_name
    *   The text name for the event.
@@ -142,7 +145,7 @@ class SchedulerManager {
     }
     else {
       // Replicate the existing dispatch signature.
-      $this->eventDispatcher->dispatch($event_name, $event);
+      $this->eventDispatcher->dispatch($event, $event_name);
     }
   }
 
@@ -160,7 +163,7 @@ class SchedulerManager {
    * The $entity is passed by reference so that any changes made in the event
    * subscriber implementations are automatically stored and passed forward.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $event_id
    *   The short text id the event, for example 'PUBLISH' or 'PRE_UNPUBLISH'.
@@ -181,14 +184,14 @@ class SchedulerManager {
   /**
    * Handles throwing exceptions.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity causing the exepction.
    * @param string $exception_name
    *   Which exception to throw.
    * @param string $process
    *   The process being performed (publish|unpublish).
    *
-   * @throws \Drupal\scheduler\Exception\SchedulerEntityTypeNotEnabledException
+   * @throws SchedulerEntityTypeNotEnabledException
    */
   private function throwSchedulerException(EntityInterface $entity, $exception_name, $process) {
     $plugin = $this->getPlugin($entity->getEntityTypeId());
@@ -227,7 +230,7 @@ class SchedulerManager {
    * @return bool
    *   TRUE if any entity has been published, FALSE otherwise.
    *
-   * @throws \Drupal\scheduler\Exception\SchedulerEntityTypeNotEnabledException
+   * @throws SchedulerEntityTypeNotEnabledException
    */
   public function publish() {
     $result = FALSE;
@@ -278,7 +281,7 @@ class SchedulerManager {
       // unlike 7.x where each translation was a separate id. This means that
       // the list of ids returned above may have some translations that need
       // processing now and others that do not.
-      /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
+      /** @var EntityInterface[] $entities */
       $entities = $this->loadEntities($ids, $entityTypeId);
       foreach ($entities as $entity_multilingual) {
 
@@ -443,7 +446,7 @@ class SchedulerManager {
    * @return bool
    *   TRUE if any entity has been unpublished, FALSE otherwise.
    *
-   * @throws \Drupal\scheduler\Exception\SchedulerEntityTypeNotEnabledException
+   * @throws SchedulerEntityTypeNotEnabledException
    */
   public function unpublish() {
     $result = FALSE;
@@ -490,7 +493,7 @@ class SchedulerManager {
       // Finally ensure that there are no duplicates in the list of ids.
       $ids = array_unique($ids);
 
-      /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
+      /** @var EntityInterface[] $entities */
       $entities = $this->loadEntities($ids, $entityTypeId);
       foreach ($entities as $entity_multilingual) {
 
@@ -657,7 +660,7 @@ class SchedulerManager {
    *   hook_scheduler_{type}_publishing_allowed()
    *   hook_scheduler_{type}_unpublishing_allowed()
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity on which the process is to be performed.
    * @param string $process
    *   The process to be checked. Values are 'publish' or 'unpublish'.
@@ -693,7 +696,7 @@ class SchedulerManager {
    * @param string $hookType
    *   The identifier of the hook function, for example 'publish_process' or
    *   'unpublishing_allowed' or 'hide_publish_date'.
-   * @param \Drupal\Core\Entity\EntityInterface|string $entity
+   * @param EntityInterface|string $entity
    *   The entity object which is being processed, or a string containing the
    *   entity type id (for example 'node' or 'media').
    *
@@ -829,7 +832,7 @@ class SchedulerManager {
    * @param string $key
    *   The key of the configuration.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The value of the configuration item requested.
    */
   protected function setting($key) {
@@ -839,7 +842,7 @@ class SchedulerManager {
   /**
    * Get third-party setting for and entity type, via the entity object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $setting
    *   The setting to retrieve.
@@ -1189,10 +1192,10 @@ class SchedulerManager {
 
       // Read the view definition from the .yml file. First try the /optional
       // folder, then the main /config folder.
-      $optional_folder = drupal_get_path('module', 'scheduler') . '/config/optional';
+      $optional_folder = \Drupal::service('extension.list.module')->getPath('scheduler') . '/config/optional';
       $source_storage = new FileStorage($optional_folder);
       if (!$source = $source_storage->read($full_name)) {
-        $install_folder = drupal_get_path('module', 'scheduler') . '/config/install';
+        $install_folder = \Drupal::service('extension.list.module')->getPath('scheduler') . '/config/install';
         $source_storage = new FileStorage($install_folder);
         if (!$source = $source_storage->read($full_name)) {
           throw new \Exception(sprintf('Failed to read source file for %s from either %s or %s folders', $full_name, $install_folder, $optional_folder));
@@ -1200,7 +1203,7 @@ class SchedulerManager {
       }
 
       // Try to read the view definition from active config storage.
-      /** @var \Drupal\Core\Config\StorageInterface $config_storage */
+      /** @var StorageInterface $config_storage */
       $config_storage = \Drupal::service('config.storage');
       if ($config_storage->read($full_name)) {
         // The view does exist in active storage, so load it, then replace the
diff --git a/src/SchedulerPermissions.php b/src/SchedulerPermissions.php
index 0af7384..54cb6d4 100644
--- a/src/SchedulerPermissions.php
+++ b/src/SchedulerPermissions.php
@@ -24,16 +24,16 @@ class SchedulerPermissions implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a \Drupal\scheduler\SchedulerPermissions instance.
    *
-   * @param \Drupal\scheduler\SchedulerManager $scheduler_manager
+   * @param SchedulerManager $scheduler_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(SchedulerManager $scheduler_manager, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/SchedulerPluginBase.php b/src/SchedulerPluginBase.php
index bc197b4..0c51210 100644
--- a/src/SchedulerPluginBase.php
+++ b/src/SchedulerPluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\scheduler;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\PluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -13,7 +14,7 @@ abstract class SchedulerPluginBase extends PluginBase implements SchedulerPlugin
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/SchedulerPluginManager.php b/src/SchedulerPluginManager.php
index 5e215ae..b795d9a 100755
--- a/src/SchedulerPluginManager.php
+++ b/src/SchedulerPluginManager.php
@@ -18,7 +18,7 @@ class SchedulerPluginManager extends DefaultPluginManager {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/tests/modules/scheduler_api_test/src/EventSubscriber.php b/tests/modules/scheduler_api_test/src/EventSubscriber.php
index 1f9101e..012b730 100644
--- a/tests/modules/scheduler_api_test/src/EventSubscriber.php
+++ b/tests/modules/scheduler_api_test/src/EventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\scheduler_api_test;
 
+use Drupal\node\Entity\Node;
 use Drupal\scheduler\Event\SchedulerCommerceProductEvents;
 use Drupal\scheduler\Event\SchedulerMediaEvents;
 use Drupal\scheduler\Event\SchedulerNodeEvents;
@@ -84,7 +85,7 @@ class EventSubscriber implements EventSubscriberInterface {
    *   The scheduler event.
    */
   public function apiTestNodePrePublish(SchedulerEvent $event) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $event->getNode();
     // Before publishing a node make it sticky.
     if (!$node->isPublished() && strpos($node->title->value, 'API TEST') === 0) {
@@ -100,7 +101,7 @@ class EventSubscriber implements EventSubscriberInterface {
    *   The scheduler event.
    */
   public function apiTestNodePublish(SchedulerEvent $event) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $event->getNode();
     // After publishing a node promote it to the front page.
     if ($node->isPublished() && strpos($node->title->value, 'API TEST') === 0) {
@@ -116,7 +117,7 @@ class EventSubscriber implements EventSubscriberInterface {
    *   The scheduler event.
    */
   public function apiTestNodePreUnpublish(SchedulerEvent $event) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $event->getNode();
     // Before unpublishing a node make it unsticky.
     if ($node->isPublished() && strpos($node->title->value, 'API TEST') === 0) {
@@ -132,7 +133,7 @@ class EventSubscriber implements EventSubscriberInterface {
    *   The scheduler event.
    */
   public function apiTestNodeUnpublish(SchedulerEvent $event) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $event->getNode();
     // After unpublishing a node remove it from the front page.
     if (!$node->isPublished() && strpos($node->title->value, 'API TEST') === 0) {
@@ -148,7 +149,7 @@ class EventSubscriber implements EventSubscriberInterface {
    *   The scheduler event.
    */
   public function apiTestNodePrePublishImmediately(SchedulerEvent $event) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $event->getNode();
     // Before publishing immediately set the node to sticky.
     if (!$node->isPromoted() && strpos($node->title->value, 'API TEST') === 0) {
@@ -164,7 +165,7 @@ class EventSubscriber implements EventSubscriberInterface {
    *   The scheduler event.
    */
   public function apiTestNodePublishImmediately(SchedulerEvent $event) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $event->getNode();
     // After publishing immediately set the node to promoted and change the
     // title.
diff --git a/tests/src/Functional/SchedulerBasicNodeTest.php b/tests/src/Functional/SchedulerBasicNodeTest.php
index 3c4bd0f..6242d80 100644
--- a/tests/src/Functional/SchedulerBasicNodeTest.php
+++ b/tests/src/Functional/SchedulerBasicNodeTest.php
@@ -39,6 +39,7 @@ class SchedulerBasicNodeTest extends SchedulerBrowserTestBase {
 
   /**
    * Tests scheduled publishing/unpublishing of a node when actions are missing.
+   * @doesNotPerformAssertions
    */
   public function testMissingActionNodePublishingAndUnpublishing() {
     $this->deleteAction('node_scheduler', 'publish');
diff --git a/tests/src/Functional/SchedulerFieldsDisplayTest.php b/tests/src/Functional/SchedulerFieldsDisplayTest.php
index f1a2e59..79612a9 100644
--- a/tests/src/Functional/SchedulerFieldsDisplayTest.php
+++ b/tests/src/Functional/SchedulerFieldsDisplayTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\scheduler\Functional;
 
+use Drupal\Tests\WebAssert;
 use Drupal\Core\Url;
 
 /**
@@ -108,7 +109,7 @@ class SchedulerFieldsDisplayTest extends SchedulerBrowserTestBase {
     $this->drupalLogin($this->adminUser);
     $entityType = $this->entityTypeObject($entityTypeId, $bundle);
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
 
     // For rendering of vertical tabs, node and media entity forms have a div
@@ -220,7 +221,7 @@ class SchedulerFieldsDisplayTest extends SchedulerBrowserTestBase {
   public function testDisabledFields($entityTypeId, $bundle) {
     $this->drupalLogin($this->schedulerUser);
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
 
     // 1. Set the publish_on field to 'hidden' in the entity edit form.
diff --git a/tests/src/Functional/SchedulerHooksLegacyTest.php b/tests/src/Functional/SchedulerHooksLegacyTest.php
index 3178195..903cb02 100644
--- a/tests/src/Functional/SchedulerHooksLegacyTest.php
+++ b/tests/src/Functional/SchedulerHooksLegacyTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\scheduler\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\node\Entity\NodeType;
 
 /**
@@ -289,7 +291,7 @@ class SchedulerHooksLegacyTest extends SchedulerBrowserTestBase {
    * @param string $date_field
    *   The Scheduler date field to set, either 'publish_on' or 'unpublish_on'.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   A node object.
    */
   protected function createUnapprovedNode($date_field) {
@@ -350,7 +352,7 @@ class SchedulerHooksLegacyTest extends SchedulerBrowserTestBase {
     // Set the scheduler fieldset to always expand, for ease during development.
     $this->nodetype->setThirdPartySetting('scheduler', 'expand_fieldset', 'always')->save();
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
 
     // Node 1 'red' should have both fields displayed.
diff --git a/tests/src/Functional/SchedulerHooksTest.php b/tests/src/Functional/SchedulerHooksTest.php
index 858c8f8..18ab032 100644
--- a/tests/src/Functional/SchedulerHooksTest.php
+++ b/tests/src/Functional/SchedulerHooksTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\scheduler\Functional;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\commerce_product\Entity\ProductType;
 use Drupal\node\Entity\NodeType;
 use Drupal\media\Entity\MediaType;
@@ -372,7 +374,7 @@ class SchedulerHooksTest extends SchedulerBrowserTestBase {
    * @param string $date_field
    *   The Scheduler date field to set, either 'publish_on' or 'unpublish_on'.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The created entity object.
    */
   protected function createUnapprovedEntity($entityTypeId, $bundle, $date_field) {
@@ -438,7 +440,7 @@ class SchedulerHooksTest extends SchedulerBrowserTestBase {
     $bundle_field_name = $entity1->getEntityType()->get('entity_keys')['bundle'];
     $entity1->$bundle_field_name->entity->setThirdPartySetting('scheduler', 'expand_fieldset', 'always')->save();
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
 
     // Entity 1 'Red' should have both fields displayed.
diff --git a/tests/src/Functional/SchedulerMultilingualTest.php b/tests/src/Functional/SchedulerMultilingualTest.php
index 9a0b876..8d46140 100644
--- a/tests/src/Functional/SchedulerMultilingualTest.php
+++ b/tests/src/Functional/SchedulerMultilingualTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\scheduler\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 
 /**
@@ -21,7 +22,7 @@ class SchedulerMultilingualTest extends SchedulerBrowserTestBase {
   /**
    * A user with permission to translate content and use scheduler.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $translatorUser;
 
diff --git a/tests/src/Functional/SchedulerRevisioningTest.php b/tests/src/Functional/SchedulerRevisioningTest.php
index 29f16b5..e9add43 100644
--- a/tests/src/Functional/SchedulerRevisioningTest.php
+++ b/tests/src/Functional/SchedulerRevisioningTest.php
@@ -14,12 +14,12 @@ class SchedulerRevisioningTest extends SchedulerBrowserTestBase {
   /**
    * Simulates the scheduled (un)publication of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to schedule.
    * @param string $action
    *   The action to perform: either 'publish' or 'unpublish'.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The updated entity, after scheduled (un)publication via a cron run.
    */
   protected function scheduleAndRunCron(EntityInterface $entity, string $action) {
@@ -36,7 +36,7 @@ class SchedulerRevisioningTest extends SchedulerBrowserTestBase {
   /**
    * Check if the number of revisions for an entity matches a given value.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    * @param int $expected
    *   The expected number of revisions.
diff --git a/tests/src/Functional/SchedulerWorkbenchModerationTest.php b/tests/src/Functional/SchedulerWorkbenchModerationTest.php
index e7b5211..2e40899 100644
--- a/tests/src/Functional/SchedulerWorkbenchModerationTest.php
+++ b/tests/src/Functional/SchedulerWorkbenchModerationTest.php
@@ -57,6 +57,7 @@ class SchedulerWorkbenchModerationTest extends SchedulerBrowserTestBase {
 
   /**
    * Test when workbench_moderation_actions is also installed.
+   * @doesNotPerformAssertions
    */
   public function testWorkbenchModerationWithWorkbenchModerationActions() {
     // Install workbench_moderation_actions and run the same test as above.
diff --git a/tests/src/Kernel/MigrateSchedulerNodeTypeConfigTest.php b/tests/src/Kernel/MigrateSchedulerNodeTypeConfigTest.php
index 3e1f890..3205909 100644
--- a/tests/src/Kernel/MigrateSchedulerNodeTypeConfigTest.php
+++ b/tests/src/Kernel/MigrateSchedulerNodeTypeConfigTest.php
@@ -30,7 +30,7 @@ class MigrateSchedulerNodeTypeConfigTest extends MigrateDrupal7TestBase {
     parent::setUp();
     $this->loadFixture(implode(DIRECTORY_SEPARATOR, [
       DRUPAL_ROOT,
-      drupal_get_path('module', 'scheduler'),
+      \Drupal::service('extension.list.module')->getPath('scheduler'),
       'tests',
       'fixtures',
       'node_type_config.php',
diff --git a/tests/src/Kernel/MigrateSchedulerTest.php b/tests/src/Kernel/MigrateSchedulerTest.php
index 5f88574..7120ce1 100644
--- a/tests/src/Kernel/MigrateSchedulerTest.php
+++ b/tests/src/Kernel/MigrateSchedulerTest.php
@@ -26,7 +26,7 @@ class MigrateSchedulerTest extends MigrateDrupal7TestBase {
     parent::setUp();
     $this->loadFixture(implode(DIRECTORY_SEPARATOR, [
       DRUPAL_ROOT,
-      drupal_get_path('module', 'scheduler'),
+      \Drupal::service('extension.list.module')->getPath('scheduler'),
       'tests',
       'fixtures',
       'drupal7.php',
diff --git a/tests/src/Traits/SchedulerMediaSetupTrait.php b/tests/src/Traits/SchedulerMediaSetupTrait.php
index 6d6d310..c1ee83e 100644
--- a/tests/src/Traits/SchedulerMediaSetupTrait.php
+++ b/tests/src/Traits/SchedulerMediaSetupTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\scheduler\Traits;
 
+use Drupal\media\MediaTypeInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\media\MediaInterface;
 use Drupal\Tests\media\Traits\MediaTypeCreationTrait;
 
 /**
@@ -30,7 +33,7 @@ trait SchedulerMediaSetupTrait {
   /**
    * The media type object which is enabled for scheduling.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   protected $mediaType;
 
@@ -51,14 +54,14 @@ trait SchedulerMediaSetupTrait {
   /**
    * The media type object which is not enabled for scheduling.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   protected $nonSchedulerMediaType;
 
   /**
    * The media entity storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $mediaStorage;
 
@@ -139,7 +142,7 @@ trait SchedulerMediaSetupTrait {
    * @param array $values
    *   The values to use for the entity.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The created media object.
    */
   public function createMediaItem(array $values) {
@@ -150,7 +153,7 @@ trait SchedulerMediaSetupTrait {
       'bundle' => $this->mediaTypeName,
       'name' => $values['title'] ?? $this->randomstring(12),
     ];
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $this->mediaStorage->create($values);
     $media->save();
     return $media;
@@ -169,7 +172,7 @@ trait SchedulerMediaSetupTrait {
    *   Optional name text to match on. If given and no match, returns NULL.
    *   If no $name is given then returns the media with the highest id value.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The media object.
    */
   public function getMediaItem(string $name = NULL) {
diff --git a/tests/src/Traits/SchedulerSetupTrait.php b/tests/src/Traits/SchedulerSetupTrait.php
index 6422841..3d4198f 100644
--- a/tests/src/Traits/SchedulerSetupTrait.php
+++ b/tests/src/Traits/SchedulerSetupTrait.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\scheduler\Traits;
 
+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
@@ -30,14 +36,14 @@ trait SchedulerSetupTrait {
   /**
    * A user with administration rights.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
   /**
    * A user with permission to schedule content.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $schedulerUser;
 
@@ -58,7 +64,7 @@ trait SchedulerSetupTrait {
   /**
    * The node type object.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodetype;
 
@@ -79,7 +85,7 @@ trait SchedulerSetupTrait {
   /**
    * The node type object which is not enabled for scheduling.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nonSchedulerNodeType;
 
@@ -93,7 +99,7 @@ trait SchedulerSetupTrait {
   /**
    * The Database Connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -107,7 +113,7 @@ trait SchedulerSetupTrait {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -198,7 +204,7 @@ trait SchedulerSetupTrait {
    * role assigned when the user is created, and unique to that user. This is
    * the role to which these permissions are added.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user object.
    * @param array $permissions
    *   The machine names of new permissions to add to the user's unique role.
@@ -234,7 +240,7 @@ trait SchedulerSetupTrait {
    *   'title' can be used for all entity types, and will be converted to the
    *   necessary property name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The created entity object.
    */
   public function createEntity(string $entityTypeId, string $bundle = NULL, array $values = []) {
@@ -319,7 +325,7 @@ trait SchedulerSetupTrait {
    *   accepts the fixed string 'non-enabled' to indicate the non-enabled bundle
    *   for the entity type.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The stored entity type object.
    */
   public function entityTypeObject(string $entityTypeId, string $bundle = NULL) {
@@ -438,7 +444,7 @@ trait SchedulerSetupTrait {
    *   accepts the fixed string 'non-enabled' to indicate the non-enabled bundle
    *   for the entity type.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The url object for adding the required entity.
    */
   public function entityAddUrl(string $entityTypeId, string $bundle = NULL) {
@@ -531,7 +537,7 @@ trait SchedulerSetupTrait {
    * @param string $entityTypeId
    *   The machine id of the entity type.
    *
-   * @return \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @return ContentEntityStorageInterface
    *   The entity storage object.
    */
   public function entityStorageObject(string $entityTypeId) {
diff --git a/tests/src/Traits/SchedulerTaxonomyTermSetupTrait.php b/tests/src/Traits/SchedulerTaxonomyTermSetupTrait.php
index bf290f2..60ac1a4 100644
--- a/tests/src/Traits/SchedulerTaxonomyTermSetupTrait.php
+++ b/tests/src/Traits/SchedulerTaxonomyTermSetupTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\scheduler\Traits;
 
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\taxonomy\Entity\Vocabulary;
 
@@ -29,7 +32,7 @@ trait SchedulerTaxonomyTermSetupTrait {
   /**
    * The media type object which is enabled for scheduling.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;
 
@@ -50,14 +53,14 @@ trait SchedulerTaxonomyTermSetupTrait {
   /**
    * The media type object which is not enabled for scheduling.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $nonSchedulerVocabulary;
 
   /**
    * The taxonomy term storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $taxonomyTermStorage;
 
@@ -67,7 +70,7 @@ trait SchedulerTaxonomyTermSetupTrait {
   public function schedulerTaxonomyTermSetUp() {
 
     // Create a test vocabulary that is enabled for scheduling.
-    /** @var \Drupal\taxonomy\VocabularyInterface $vocabulary */
+    /** @var VocabularyInterface $vocabulary */
     $this->vocabulary = Vocabulary::create([
       'vid' => $this->vocabularyId,
       'name' => $this->vocabularyName,
@@ -80,7 +83,7 @@ trait SchedulerTaxonomyTermSetupTrait {
       ->save();
 
     // Create a vocabulary which is not enabled for scheduling.
-    /** @var \Drupal\taxonomy\VocabularyInterface $nonSchedulerVocabulary */
+    /** @var VocabularyInterface $nonSchedulerVocabulary */
     $this->nonSchedulerVocabulary = Vocabulary::create([
       'vid' => $this->nonSchedulerVocabularyId,
       'name' => $this->nonSchedulerVocabularyName,
@@ -118,7 +121,7 @@ trait SchedulerTaxonomyTermSetupTrait {
    * @param array $values
    *   The values to use for the entity.
    *
-   * @return \Drupal\taxonomy\TermInterface
+   * @return TermInterface
    *   The created taxonomy term object.
    */
   public function createTaxonomyTerm(array $values) {
@@ -128,7 +131,7 @@ trait SchedulerTaxonomyTermSetupTrait {
       // If no name is specified then use title, or default to a random name.
       'name' => $values['title'] ?? $this->randomMachineName(),
     ];
-    /** @var \Drupal\taxonomy\TermInterface $term */
+    /** @var TermInterface $term */
     $term = Term::create($values);
     $term->save();
     return $term;
@@ -141,7 +144,7 @@ trait SchedulerTaxonomyTermSetupTrait {
    *   Optional name text to match on. If given and no match, returns NULL.
    *   If no $name is given then returns the term with the highest id value.
    *
-   * @return \Drupal\taxonomy\Entity\Term
+   * @return Term
    *   The taxonomy term object.
    */
   public function getTaxonomyTerm(string $name = NULL) {
