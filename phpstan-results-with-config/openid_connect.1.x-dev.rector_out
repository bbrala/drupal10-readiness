modules/contrib/openid_connect/openid_connect.api.php
modules/contrib/openid_connect/openid_connect.install
modules/contrib/openid_connect/openid_connect.module
modules/contrib/openid_connect/src/Annotation/OpenIDConnectClient.php
modules/contrib/openid_connect/src/Authmap.php
modules/contrib/openid_connect/src/Claims.php
modules/contrib/openid_connect/src/Controller/OpenIDConnectRedirectController.php
modules/contrib/openid_connect/src/Controller/RedirectController.php
modules/contrib/openid_connect/src/Form/AccountsForm.php
modules/contrib/openid_connect/src/Form/LoginForm.php
modules/contrib/openid_connect/src/Form/OpenIDConnectAccountsForm.php
modules/contrib/openid_connect/src/Form/OpenIDConnectLoginForm.php
modules/contrib/openid_connect/src/Form/OpenIDConnectSettingsForm.php
modules/contrib/openid_connect/src/Form/SettingsForm.php
modules/contrib/openid_connect/src/OpenIDConnect.php
modules/contrib/openid_connect/src/OpenIDConnectAuthmap.php
modules/contrib/openid_connect/src/OpenIDConnectClaims.php
modules/contrib/openid_connect/src/OpenIDConnectSession.php
modules/contrib/openid_connect/src/OpenIDConnectStateToken.php
modules/contrib/openid_connect/src/OpenIDConnectStateTokenInterface.php
modules/contrib/openid_connect/src/Plugin/Block/LoginBlock.php
modules/contrib/openid_connect/src/Plugin/Block/OpenIDConnectLoginBlock.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClient/Facebook.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClient/Generic.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClient/Github.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClient/Google.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClient/Linkedin.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClient/OpenIDConnectFacebookClient.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClient/OpenIDConnectGenericClient.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClient/OpenIDConnectGithubClient.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClient/OpenIDConnectGoogleClient.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClient/OpenIDConnectLinkedinClient.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClient/OpenIDConnectOktaClient.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClientBase.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClientInterface.php
modules/contrib/openid_connect/src/Plugin/OpenIDConnectClientManager.php
modules/contrib/openid_connect/src/StateToken.php
modules/contrib/openid_connect/tests/src/Unit/OpenIDConnectAuthmapTest.php
modules/contrib/openid_connect/tests/src/Unit/OpenIDConnectStateTokenTest.php
modules/contrib/openid_connect/tests/src/Unit/OpenIDConnectTest.php
modules/contrib/openid_connect/tests/src/Unit/OpenIdConnectClaimsTest.php
modules/contrib/openid_connect/tests/src/Unit/OpenIdConnectSessionTest.php
modules/contrib/openid_connect/tests/src/Unit/UserPasswordFixture.php

22 files with changes
=====================

1) modules/contrib/openid_connect/tests/src/Unit/UserPasswordFixture.php:21

    ---------- begin diff ----------
@@ @@
 /**
  * Override the user_login_finalize function.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   The user account.
  */
 function user_login_finalize(UserInterface $account) {
@@ @@
  * @param int $replace
  *   Whether to replace the file or not.
  *
- * @return \PHPUnit\Framework\MockObject\MockObject
+ * @return MockObject
  *   Return a mock object that mimics the file_save_data.
  */
 function file_save_data(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/openid_connect/tests/src/Unit/OpenIdConnectSessionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\openid_connect\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\openid_connect\OpenIDConnectSession;
 use Drupal\Tests\UnitTestCase;
@@ @@
   /**
    * A mock of the current_path service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $currentPath;

@@ @@
   /**
    * A mock of the requestStack method for testing.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $requestStack;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Mock the currentPath service.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/openid_connect/tests/src/Unit/OpenIdConnectClaimsTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\openid_connect\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
   /**
    * A mock of the config.factory service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * A mock of the module_handler service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $moduleHandler;

@@ @@
   /**
    * The OpenIdConnectClaims class being tested.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectClaims
+   * @var OpenIDConnectClaims
    */
   protected $openIdConnectClaims;

@@ @@
   /**
    * Mock of the container for service calls.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/openid_connect/tests/src/Unit/OpenIDConnectTest.php:109

    ---------- begin diff ----------
@@ @@
   /**
    * The OpenIDConnect class being tested.
    *
-   * @var \Drupal\openid_connect\OpenIDConnect
+   * @var OpenIDConnect
    */
   protected $openIdConnect;

@@ @@
   /**
    * {@inheritDoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $oldFileMock = $this->createMock(File::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/openid_connect/tests/src/Unit/OpenIDConnectStateTokenTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Mock of the openid_connect.state_token service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectStateToken
+   * @var OpenIDConnectStateToken
    */
   protected $stateTokenService;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/openid_connect/tests/src/Unit/OpenIDConnectAuthmapTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\openid_connect\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * Mock of the EntityStorageInterface for User objects.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $userStorage;

@@ @@
   /**
    * Mock the database connection service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $connection;

@@ @@
   /**
    * Mock of the current_user service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $account;

@@ @@
   /**
    * Mock of the entity_type.manager service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritDoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->account = $this
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/openid_connect/src/Plugin/OpenIDConnectClientManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/openid_connect/src/Plugin/OpenIDConnectClientInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openid_connect\Plugin;

+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ @@
    *   Name of scope(s) that with user consent will provide access to otherwise
    *   restricted user data. Defaults to "openid email".
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A response object.
    */
   public function authorize($scope = 'openid email');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/openid_connect/src/Plugin/OpenIDConnectClientBase.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack used to access request globals.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The HTTP client to fetch the feed data with.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The logger factory used for logging.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The datetime.time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $dateTime;

@@ @@
   /**
    * Page cache kill switch.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $pageCacheKillSwitch;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The OpenID state token service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectStateTokenInterface
+   * @var OpenIDConnectStateTokenInterface
    */
   protected $stateToken;

@@ @@
    *   The plugin identifier.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The http client.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $datetime_time
+   * @param TimeInterface $datetime_time
    *   The datetime.time service.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $page_cache_kill_switch
+   * @param KillSwitch $page_cache_kill_switch
    *   Policy evaluating to static::DENY when the kill switch was triggered.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\openid_connect\OpenIDConnectStateTokenInterface $state_token
+   * @param OpenIDConnectStateTokenInterface $state_token
    *   The OpenID state token service.
    */
   public function __construct(
@@ @@
    *
    * @param string $scope
    *   A string of scopes.
-   * @param \Drupal\Core\GeneratedUrl $redirect_uri
+   * @param GeneratedUrl $redirect_uri
    *   URI to redirect for authorization.
    *
    * @return array
@@ @@
    * @param array $options
    *   See \Drupal\Core\Url::fromRoute() for details.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A new Url object for a routed (internal to Drupal) URL.
    *
    * @see \Drupal\Core\Url::fromRoute()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/openid_connect/src/Plugin/OpenIDConnectClient/OpenIDConnectFacebookClient.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openid_connect\Plugin\OpenIDConnectClient;

+use GuzzleHttp\Client;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\openid_connect\Plugin\OpenIDConnectClientBase;

@@ @@
     ];
     $endpoints = $this->getEndpoints();

-    /** @var \GuzzleHttp\Client $client */
+    /** @var Client $client */
     $client = $this->httpClient;
     try {
       $response = $client->get($endpoints['userinfo'], $request_options);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/openid_connect/src/Plugin/Block/OpenIDConnectLoginBlock.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\openid_connect\Plugin\OpenIDConnectClientManager definition.
    *
-   * @var \Drupal\openid_connect\Plugin\OpenIDConnectClientManager
+   * @var OpenIDConnectClientManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
+   * @param OpenIDConnectClientManager $plugin_manager
    *   The OpenID Connect client manager.
-   * @param \Drupal\Core\Form\FormBuilder $form_builder
+   * @param FormBuilder $form_builder
    *   The form builder.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/openid_connect/src/OpenIDConnectSession.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Construct an instance of the OpenID Connect session service.
    *
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/openid_connect/src/OpenIDConnectClaims.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandler definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler.
    */
   public function __construct(
@@ @@
   /**
    * Returns scopes that have to be requested based on the configured claims.
    *
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface|null $client
+   * @param OpenIDConnectClientInterface|null $client
    *   An optional client. If one is provided, it will be asked for scopes.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/openid_connect/src/OpenIDConnectAuthmap.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openid_connect;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\user\Entity\User;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The User entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * Constructs a OpenIDConnectAuthmap service object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   A database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   (optional) The entity manager. (deprecated) Will be mandatory in 2.0.
    */
   public function __construct(Connection $connection, EntityTypeManagerInterface $entity_type_manager = NULL) {
@@ @@
       ->condition('sub', $sub, '=')
       ->execute();
     foreach ($result as $record) {
-      /** @var \Drupal\user\Entity\User $account */
+      /** @var User $account */
       $account = $this->userStorage->load($record->uid);
       if (is_object($account)) {
         return $account;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/openid_connect/src/OpenIDConnect.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openid_connect;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The OpenID Connect authmap service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectAuthmap
+   * @var OpenIDConnectAuthmap
    */
   protected $authmap;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * The User entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The email validator service.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;

@@ @@
   /**
    * The OpenID Connect logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * File system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $fileSystem;

@@ @@
   /**
    * Construct an instance of the OpenID Connect service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\openid_connect\OpenIDConnectAuthmap $authmap
+   * @param OpenIDConnectAuthmap $authmap
    *   The OpenID Connect authmap service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Account proxy for the currently logged-in user.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   A logger channel factory instance.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system service.
    */
   public function __construct(
@@ @@
   /**
    * Fill the context array.
    *
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client
+   * @param OpenIDConnectClientInterface $client
    *   The client.
    * @param array $tokens
    *   The tokens as returned by OpenIDConnectClientInterface::retrieveTokens().
@@ @@
       return FALSE;
     }

-    /** @var \Drupal\user\UserInterface|bool $account */
+    /** @var UserInterface|bool $account */
     $account = $this->authmap->userLoadBySub($sub, $provider);
     $context = [
       'tokens' => $tokens,
@@ @@
   /**
    * Complete the authorization after tokens have been retrieved.
    *
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client
+   * @param OpenIDConnectClientInterface $client
    *   The client.
    * @param array $tokens
    *   The tokens as returned by OpenIDConnectClientInterface::retrieveTokens().
@@ @@
         'mail' => $email,
       ]);
       if ($accounts) {
-        /** @var \Drupal\user\UserInterface|bool $account */
+        /** @var UserInterface|bool $account */
         $account = reset($accounts);
         $connect_existing_users = $this->configFactory->get('openid_connect.settings')
           ->get('connect_existing_users');
@@ @@
   /**
    * Connect the current user's account to an external provider.
    *
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client
+   * @param OpenIDConnectClientInterface $client
    *   The client.
    * @param array $tokens
    *   The tokens as returned from
@@ @@
   /**
    * Find whether a user is allowed to change the own password.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Optional: Account to check the access for.
    *   Defaults to the currently logged-in user.
    *
@@ @@
    * @param int $status
    *   The initial user status.
    *
-   * @return \Drupal\user\UserInterface|false
+   * @return UserInterface|false
    *   The user object or FALSE on failure.
    */
   public function createUser($sub, array $userinfo, $client_name, $status = 1) {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $this->userStorage->create([
       'name' => $this->generateUsername($sub, $userinfo, $client_name),
-      'pass' => user_password(),
+      'pass' => \Drupal::service('password_generator')->generate(),
       'mail' => $userinfo['email'],
       'init' => $userinfo['email'],
       'status' => $status,
@@ @@
   /**
    * Log in a user.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account to login.
    */
   protected function loginUser(UserInterface $account) {
@@ @@
   /**
    * Save user profile information into a user account.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   An user account object.
    * @param array $context
    *   An associative array with context information:
@@ @@
                 $basename = explode('?', $this->fileSystem->basename($claim_value))[0];
                 $data = file_get_contents($claim_value);

-                $file = file_save_data(
-                  $data,
-                  'public://user-picture-' . $account->id() . '-' . $basename,
-                  FileSystemInterface::EXISTS_RENAME
-                );
+                $file = \Drupal::service('file.repository')->writeData($data, 'public://user-picture-' . $account->id() . '-' . $basename, FileSystemInterface::EXISTS_RENAME);

                 // Cleanup the old file.
                 if ($file) {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * UserPasswordRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/openid_connect/src/Form/OpenIDConnectSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openid_connect\Form;

+use Drupal\openid_connect\Plugin\OpenIDConnectClientInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The OpenID Connect service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnect
+   * @var OpenIDConnect
    */
   protected $openIDConnect;

@@ @@
   /**
    * Drupal\openid_connect\Plugin\OpenIDConnectClientManager definition.
    *
-   * @var \Drupal\openid_connect\Plugin\OpenIDConnectClientManager
+   * @var OpenIDConnectClientManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The OpenID Connect claims.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectClaims
+   * @var OpenIDConnectClaims
    */
   protected $claims;

@@ @@
   /**
    * OpenID Connect client plugins.
    *
-   * @var \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface[]
+   * @var OpenIDConnectClientInterface[]
    */
   protected static $clients;

@@ @@
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\openid_connect\OpenIDConnect $openid_connect
+   * @param OpenIDConnect $openid_connect
    *   The OpenID Connect service.
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
+   * @param OpenIDConnectClientManager $plugin_manager
    *   The plugin manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\openid_connect\OpenIDConnectClaims $claims
+   * @param OpenIDConnectClaims $claims
    *   The claims.
    */
   public function __construct(
@@ @@
    * we are using this little helper method and a static collection of
    * initialized client plugins for this form.
    *
-   * @return \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface[]
+   * @return OpenIDConnectClientInterface[]
    *   Associative array of OpenID Connect client plugins with client IDs
    *   as keys and the corresponding initialized client plugins as values.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getClients() {
     if (!isset(self::$clients)) {
@@ @@
           ->getEditable('openid_connect.settings.' . $client_name)
           ->get('settings');

-        /** @var \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client */
+        /** @var OpenIDConnectClientInterface $client */
         $client = $this->pluginManager->createInstance(
           $client_name,
           $configuration ?: []
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/openid_connect/src/Form/OpenIDConnectLoginForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openid_connect\Form;

+use Drupal\openid_connect\Plugin\OpenIDConnectClientInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The OpenID Connect session service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectSession
+   * @var OpenIDConnectSession
    */
   protected $session;

@@ @@
   /**
    * Drupal\openid_connect\Plugin\OpenIDConnectClientManager definition.
    *
-   * @var \Drupal\openid_connect\Plugin\OpenIDConnectClientManager
+   * @var OpenIDConnectClientManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The OpenID Connect claims.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectClaims
+   * @var OpenIDConnectClaims
    */
   protected $claims;

@@ @@
   /**
    * The constructor.
    *
-   * @param \Drupal\openid_connect\OpenIDConnectSession $session
+   * @param OpenIDConnectSession $session
    *   The OpenID Connect session service.
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
+   * @param OpenIDConnectClientManager $plugin_manager
    *   The plugin manager.
-   * @param \Drupal\openid_connect\OpenIDConnectClaims $claims
+   * @param OpenIDConnectClaims $claims
    *   The OpenID Connect claims.
    */
   public function __construct(
@@ @@

     $configuration = $this->config('openid_connect.settings.' . $client_name)
       ->get('settings');
-    /** @var \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client */
+    /** @var OpenIDConnectClientInterface $client */
     $client = $this->pluginManager->createInstance(
       $client_name,
       $configuration
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/openid_connect/src/Form/OpenIDConnectAccountsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openid_connect\Form;

+use Drupal\openid_connect\Plugin\OpenIDConnectClientInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * Drupal\Core\Session\AccountProxy definition.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * The OpenID Connect session service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectSession
+   * @var OpenIDConnectSession
    */
   protected $session;

@@ @@
   /**
    * The OpenID Connect authmap service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectAuthmap
+   * @var OpenIDConnectAuthmap
    */
   protected $authmap;

@@ @@
   /**
    * The OpenID Connect claims service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectClaims
+   * @var OpenIDConnectClaims
    */
   protected $claims;

@@ @@
   /**
    * The OpenID Connect client plugin manager.
    *
-   * @var \Drupal\openid_connect\Plugin\OpenIDConnectClientManager
+   * @var OpenIDConnectClientManager
    */
   protected $pluginManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The current user account.
-   * @param \Drupal\openid_connect\OpenIDConnectSession $session
+   * @param OpenIDConnectSession $session
    *   The OpenID Connect service.
-   * @param \Drupal\openid_connect\OpenIDConnectAuthmap $authmap
+   * @param OpenIDConnectAuthmap $authmap
    *   The authmap storage.
-   * @param \Drupal\openid_connect\OpenIDConnectClaims $claims
+   * @param OpenIDConnectClaims $claims
    *   The OpenID Connect claims.
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
+   * @param OpenIDConnectClientManager $plugin_manager
    *   The OpenID Connect client manager.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory.
    */
   public function __construct(
@@ @@

     $configuration = $this->config('openid_connect.settings.' . $client_name)
       ->get('settings');
-    /** @var \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client */
+    /** @var OpenIDConnectClientInterface $client */
     $client = $this->pluginManager->createInstance(
       $client_name,
       $configuration
@@ @@
   /**
    * Checks access for the OpenID-Connect accounts form.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user having accounts.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/openid_connect/src/Controller/OpenIDConnectRedirectController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openid_connect\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * The OpenID client plugin manager.
    *
-   * @var \Drupal\openid_connect\Plugin\OpenIDConnectClientManager
+   * @var OpenIDConnectClientManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The OpenID state token service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectStateTokenInterface
+   * @var OpenIDConnectStateTokenInterface
    */
   protected $stateToken;

@@ @@
   /**
    * The request stack used to access request globals.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The OpenID Connect service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnect
+   * @var OpenIDConnect
    */
   protected $openIDConnect;

@@ @@
   /**
    * The constructor.
    *
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
+   * @param OpenIDConnectClientManager $plugin_manager
    *   The OpenID client plugin manager.
-   * @param \Drupal\openid_connect\OpenIDConnect $openid_connect
+   * @param OpenIDConnect $openid_connect
    *   The OpenID Connect service.
-   * @param \Drupal\openid_connect\OpenIDConnectStateTokenInterface $state_token
+   * @param OpenIDConnectStateTokenInterface $state_token
    *   The OpenID state token service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
    */
   public function __construct(
@@ @@
   /**
    * Access callback: Redirect page.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Whether the state token matches the previously created one that is stored
    *   in the session.
    */
@@ @@
    * @param string $client_name
    *   The client name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response starting the authentication request.
    */
   public function authenticate($client_name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/openid_connect/src/Annotation/OpenIDConnectClient.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openid_connect\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the OpenID Connect Client plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


21) modules/contrib/openid_connect/openid_connect.module:151

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function _openid_connect_user_pass_form_validate(array &$form, FormStateInterface $form_state) {
@@ @@
 /**
  * Saves user profile information into a user account.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   An user account object.
  * @param array $userinfo
  *   An array with information about the user.
@@ @@
 /**
  * Logs in a user.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   The user account.
  *
  * @deprecated in openid_connect:8.x-1.0-beta6 and is removed from openid_connect:8.x-2.0.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


22) modules/contrib/openid_connect/openid_connect.api.php:126

    ---------- begin diff ----------
@@ @@
  * be authorized, or checking certain constraints before authorization and
  * distinctively allowing/denying authorization for the given account.
  *
- * @param \Drupal\user\UserInterface|bool $account
+ * @param UserInterface|bool $account
  *   User account identified using the "sub" provided by the identity provider,
  *   or FALSE, if no such account exists.
  * @param array $context
@@ @@
  *   - plugin_id:      The plugin identifier.
  *   - sub:            The remote user identifier.
  *
- * @return \Drupal\user\UserInterface|false
+ * @return UserInterface|false
  *   A user account for a certain user to authorize, FALSE, if the user shall
  *   not be logged in, or TRUE for successful hook execution.
  *
@@ @@
  * provider related information to the user's Drupal session (private temp
  * store).
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   User account object of the authorized user.
  * @param array $context
  *   An associative array with context information:
@@ @@
  * user roles or other complex claims provided by the identity provider, that
  * the OpenID Connect module has no mapping mechanisms for.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   A user account object.
  * @param array $context
  *   An associative array with context information:
@@ @@
  * user roles or other complex claims provided by the identity provider, that
  * the OpenID Connect module has no mapping mechanisms for.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   A user account object.
  * @param array $context
  *   An associative array with context information:
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 22 files have been changed by Rector                                      

