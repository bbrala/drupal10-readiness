modules/contrib/stacks/inc/admin.inc
modules/contrib/stacks/inc/cron.inc
modules/contrib/stacks/inc/form_alters.inc
modules/contrib/stacks/inc/theme.inc
modules/contrib/stacks/modules/stacks_content_feed/src/Controller/GridController.php
modules/contrib/stacks/modules/stacks_content_feed/src/Plugin/WidgetType/ContentFeed.php
modules/contrib/stacks/modules/stacks_content_feed/src/StacksQuery/StacksDatabaseQuery.php
modules/contrib/stacks/modules/stacks_content_feed/src/StacksQuery/StacksQueryBase.php
modules/contrib/stacks/modules/stacks_content_feed/src/StacksQuery/StacksSolrQuery.php
modules/contrib/stacks/modules/stacks_content_feed/stacks_content_feed.module
modules/contrib/stacks/modules/stacks_content_list/stacks_content_list.module
modules/contrib/stacks/modules/stacks_example_code_grids/src/Controller/ContentFeedController.php
modules/contrib/stacks/modules/stacks_example_code_grids/src/Plugin/WidgetType/ContentFeedCode.php
modules/contrib/stacks/modules/stacks_example_code_grids/stacks_example_code_grids.module
modules/contrib/stacks/modules/stacks_examples/src/Plugin/WidgetType/ArticleContent.php
modules/contrib/stacks/modules/stacks_examples/stacks_examples.module
modules/contrib/stacks/src/Ajax/AttachOnChangeEvents.php
modules/contrib/stacks/src/Ajax/CancelWidgetCommand.php
modules/contrib/stacks/src/Ajax/ReplaceWidgetCommand.php
modules/contrib/stacks/src/Ajax/UndoWidgetDeleteCommand.php
modules/contrib/stacks/src/Annotation/WidgetType.php
modules/contrib/stacks/src/Controller/WidgetEntityAddController.php
modules/contrib/stacks/src/Controller/WidgetExtendEntityAddController.php
modules/contrib/stacks/src/Controller/admin/StacksAdminController.php
modules/contrib/stacks/src/Entity/WidgetEntity.php
modules/contrib/stacks/src/Entity/WidgetEntityType.php
modules/contrib/stacks/src/Entity/WidgetEntityViewsData.php
modules/contrib/stacks/src/Entity/WidgetExtendEntity.php
modules/contrib/stacks/src/Entity/WidgetExtendEntityType.php
modules/contrib/stacks/src/Entity/WidgetExtendEntityViewsData.php
modules/contrib/stacks/src/Entity/WidgetInstanceEntity.php
modules/contrib/stacks/src/Entity/WidgetInstanceEntityViewsData.php
modules/contrib/stacks/src/Form/WidgetEntityDeleteForm.php
modules/contrib/stacks/src/Form/WidgetEntityDeleteFromContentForm.php
modules/contrib/stacks/src/Form/WidgetEntityForm.php
modules/contrib/stacks/src/Form/WidgetEntitySettingsForm.php
modules/contrib/stacks/src/Form/WidgetEntityTypeDeleteForm.php
modules/contrib/stacks/src/Form/WidgetEntityTypeForm.php
modules/contrib/stacks/src/Form/WidgetExtendEntityDeleteForm.php
modules/contrib/stacks/src/Form/WidgetExtendEntityForm.php
modules/contrib/stacks/src/Form/WidgetExtendEntityInlineForm.php
modules/contrib/stacks/src/Form/WidgetExtendEntitySettingsForm.php
modules/contrib/stacks/src/Form/WidgetExtendEntityTypeDeleteForm.php
modules/contrib/stacks/src/Form/WidgetExtendEntityTypeForm.php
modules/contrib/stacks/src/Form/WidgetInstanceEntityDeleteForm.php
modules/contrib/stacks/src/Form/WidgetInstanceEntityForm.php
modules/contrib/stacks/src/Form/WidgetInstanceEntitySettingsForm.php
modules/contrib/stacks/src/Plugin/Field/FieldFormatter/TestFormatter.php
modules/contrib/stacks/src/Plugin/Field/FieldFormatter/WidgetFormatterType.php
modules/contrib/stacks/src/Plugin/Field/FieldType/StacksType.php
modules/contrib/stacks/src/Plugin/Field/FieldWidget/FormWidgetType.php
modules/contrib/stacks/src/Plugin/WidgetType/DefaultWidget.php
modules/contrib/stacks/src/Plugin/WidgetTypeBase.php
modules/contrib/stacks/src/Plugin/WidgetTypeInterface.php
modules/contrib/stacks/src/Plugin/WidgetTypeManager.php
modules/contrib/stacks/src/Plugin/views/field/WidgetInstanceBulkForm.php
modules/contrib/stacks/src/Services/TaxonomyHelper.php
modules/contrib/stacks/src/TwigExtension/BlockEmbed.php
modules/contrib/stacks/src/TwigExtension/EmbedWidgetInstance.php
modules/contrib/stacks/src/TwigExtension/GetThemePath.php
modules/contrib/stacks/src/TwigExtension/ImageHtml.php
modules/contrib/stacks/src/TwigExtension/OutputView.php
modules/contrib/stacks/src/TwigExtension/Pagination.php
modules/contrib/stacks/src/TwigExtension/ViewMode.php
modules/contrib/stacks/src/Widget/WidgetAutomaticTitleHandler.php
modules/contrib/stacks/src/Widget/WidgetData.php
modules/contrib/stacks/src/Widget/WidgetFieldHandlers.php
modules/contrib/stacks/src/Widget/WidgetRequiredFields.php
modules/contrib/stacks/src/Widget/WidgetTemplates.php
modules/contrib/stacks/src/WidgetAdmin/Button/BaseButton.php
modules/contrib/stacks/src/WidgetAdmin/Button/ButtonInterface.php
modules/contrib/stacks/src/WidgetAdmin/Button/StepCancelButton.php
modules/contrib/stacks/src/WidgetAdmin/Button/StepExistingFinishButton.php
modules/contrib/stacks/src/WidgetAdmin/Button/StepOneNextButton.php
modules/contrib/stacks/src/WidgetAdmin/Button/StepTwoFinishButton.php
modules/contrib/stacks/src/WidgetAdmin/Button/StepTwoFinishEditButton.php
modules/contrib/stacks/src/WidgetAdmin/Button/StepTwoPreviousButton.php
modules/contrib/stacks/src/WidgetAdmin/Controller/WidgetAdmin.php
modules/contrib/stacks/src/WidgetAdmin/Form/WidgetFormAdmin.php
modules/contrib/stacks/src/WidgetAdmin/Manager/StepManager.php
modules/contrib/stacks/src/WidgetAdmin/Step/BaseStep.php
modules/contrib/stacks/src/WidgetAdmin/Step/StepFinalize.php
modules/contrib/stacks/src/WidgetAdmin/Step/StepInterface.php
modules/contrib/stacks/src/WidgetAdmin/Step/StepOne.php
modules/contrib/stacks/src/WidgetAdmin/Step/StepTwo.php
modules/contrib/stacks/src/WidgetAdmin/Step/StepsEnum.php
modules/contrib/stacks/src/WidgetAdmin/Validator/BaseValidator.php
modules/contrib/stacks/src/WidgetAdmin/Validator/ValidatorCustom.php
modules/contrib/stacks/src/WidgetAdmin/Validator/ValidatorInterface.php
modules/contrib/stacks/src/WidgetAdmin/Validator/ValidatorRegex.php
modules/contrib/stacks/src/WidgetAdmin/Validator/ValidatorRequired.php
modules/contrib/stacks/src/WidgetEntityAccessControlHandler.php
modules/contrib/stacks/src/WidgetEntityHtmlRouteProvider.php
modules/contrib/stacks/src/WidgetEntityInterface.php
modules/contrib/stacks/src/WidgetEntityListBuilder.php
modules/contrib/stacks/src/WidgetEntityTypeHtmlRouteProvider.php
modules/contrib/stacks/src/WidgetEntityTypeInterface.php
modules/contrib/stacks/src/WidgetEntityTypeListBuilder.php
modules/contrib/stacks/src/WidgetExtendEntityAccessControlHandler.php
modules/contrib/stacks/src/WidgetExtendEntityHtmlRouteProvider.php
modules/contrib/stacks/src/WidgetExtendEntityInterface.php
modules/contrib/stacks/src/WidgetExtendEntityListBuilder.php
modules/contrib/stacks/src/WidgetExtendEntityTypeHtmlRouteProvider.php
modules/contrib/stacks/src/WidgetExtendEntityTypeInterface.php
modules/contrib/stacks/src/WidgetExtendEntityTypeListBuilder.php
modules/contrib/stacks/src/WidgetInstanceEntityAccessControlHandler.php
modules/contrib/stacks/src/WidgetInstanceEntityHtmlRouteProvider.php
modules/contrib/stacks/src/WidgetInstanceEntityInterface.php
modules/contrib/stacks/src/WidgetInstanceEntityListBuilder.php
modules/contrib/stacks/stacks.api.php
modules/contrib/stacks/stacks.install
modules/contrib/stacks/stacks.module
modules/contrib/stacks/template_preprocess/widget_entity.page.inc
modules/contrib/stacks/template_preprocess/widget_extend.page.inc
modules/contrib/stacks/template_preprocess/widget_instance_entity.page.inc

30 files with changes
=====================

1) modules/contrib/stacks/stacks.install:97

    ---------- begin diff ----------
@@ @@

   $widget_instance_entities = WidgetInstanceEntity::loadMultiple($entities_id);

-  /** @var \Drupal\stacks\Entity\WidgetInstanceEntity $widget_instance_entity */
+  /** @var WidgetInstanceEntity $widget_instance_entity */
   foreach ($widget_instance_entities as $widget_instance_entity) {
     $widget_instance_entity->setStatus(TRUE)->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/stacks/src/WidgetInstanceEntityHtmlRouteProvider.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/stacks/src/WidgetInstanceEntityAccessControlHandler.php:17

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\stacks\WidgetInstanceEntityInterface $entity */
+    /** @var WidgetInstanceEntityInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view published widget instance entity entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/stacks/src/WidgetExtendEntityTypeHtmlRouteProvider.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/stacks/src/WidgetExtendEntityHtmlRouteProvider.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add page route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddPageRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/stacks/src/WidgetExtendEntityAccessControlHandler.php:17

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\stacks\WidgetExtendEntityInterface $entity */
+    /** @var WidgetExtendEntityInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view published Widget Extend entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/stacks/src/WidgetEntityTypeHtmlRouteProvider.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/stacks/src/WidgetEntityHtmlRouteProvider.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add page route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddPageRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/stacks/src/WidgetEntityAccessControlHandler.php:17

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\stacks\WidgetEntityInterface $entity */
+    /** @var WidgetEntityInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/stacks/src/WidgetAdmin/Step/StepOne.php:470

    ---------- begin diff ----------
@@ @@
                 'height' => 234,
                 'title' => '',
                 'alt' => '',
-                'src' => '/' . drupal_get_path('module', 'stacks') . '/images/no-preview-img.png',
+                'src' => '/' . \Drupal::service('extension.list.module')->getPath('stacks') . '/images/no-preview-img.png',
               ],
             ],
           ];
@@ @@
                   'width' => 100,
                   'title' => $option_value,
                   'alt' => $option_value,
-                  'src' => '/' . drupal_get_path('module', 'stacks') . '/images/no-preview-img.png',
+                  'src' => '/' . \Drupal::service('extension.list.module')->getPath('stacks') . '/images/no-preview-img.png',
                 ],
               ],
             ];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/stacks/src/WidgetAdmin/Step/BaseStep.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * BaseStep constructor.
    *
-   * @param \Drupal\stacks\WidgetAdmin\Manager\StepManager $stepManager
+   * @param StepManager $stepManager
    */
   public function __construct(StepManager $stepManager) {
     $this->stepManager = $stepManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/stacks/src/WidgetAdmin/Manager/StepManager.php:21

    ---------- begin diff ----------
@@ @@

   /**
    * Add a step to the steps property.
-   * @param \Drupal\stacks\WidgetAdmin\Step\StepInterface $step
+   * @param StepInterface $step
    */
   public function addStep(StepInterface $step) {
     $this->steps[$step->getStep()] = $step;
@@ @@
    * Fetches a step from the steps property.
    * If it doesn't exist, create step object.
    * @param $step_id
-   * @return \Drupal\stacks\WidgetAdmin\Step\StepInterface
+   * @return StepInterface
    */
   public function getStep($step_id) {
     if (isset($this->steps[$step_id])) {
@@ @@
     }
     else {

-      /** @var \Drupal\stacks\WidgetAdmin\Step\StepInterface $step */
+      /** @var StepInterface $step */
       $class = StepsEnum::map($step_id);
       $step = new $class($this);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/stacks/src/WidgetAdmin/Form/WidgetFormAdmin.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\stacks\WidgetAdmin\Form;


+use Drupal\stacks\WidgetAdmin\Button\ButtonInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\HtmlCommand;
 use Drupal\Core\Ajax\AlertCommand;
@@ @@

     $buttons = $this->step->getButtons();
     foreach ($buttons as $button) {
-      /** @var \Drupal\stacks\WidgetAdmin\Button\ButtonInterface $button */
+      /** @var ButtonInterface $button */
       $form[$wrapper]['actions'][$button->getKey()] = $button->build();

       if ($button->ajaxify()) {
@@ @@
    * Ajax callback to load new step.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @param FormStateInterface $form_state
+   * @return AjaxResponse
    */
   static public function loadStep(array &$form, FormStateInterface $form_state) {

@@ @@
   /**
    * Submit handler for last step of form.
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitValues(array &$form, FormStateInterface $form_state) {
     // Handle Inline Entity Form...create Widget Entity
@@ @@
   /**
    * Submit handler for last step of form with existing widgets
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitValuesExisting(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/stacks/src/WidgetAdmin/Controller/WidgetAdmin.php:132

    ---------- begin diff ----------
@@ @@

   /**
    * Undo delete.
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   static public function ajaxFormUndoDelete() {
     $delta = (int)$_GET['delta'];
@@ @@

   /**
    * Closes front-end editor dialog.
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   static public function ajaxModalClose($nid = "", $id = "", $field_name, $delta) {
     // Get entity
@@ @@

   /**
    * Opens front-end editor deletion modal.
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   static public function ajaxFormDeleteFromContent($nid = "", $id = "") {
     $form = new WidgetEntityDeleteFromContentForm();
@@ @@
   }

   static public function dGridPreview(&$form, $form_state) {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');

     $response = new AjaxResponse();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/stacks/src/Widget/WidgetTemplates.php:26

    ---------- begin diff ----------
@@ @@
     }

     // Look for the /stacks directory in the active theme.
-    $directory_path = drupal_get_path('theme', $default_active_theme) . '/stacks';
+    $directory_path = \Drupal::service('extension.list.theme')->getPath($default_active_theme) . '/stacks';

     if (is_dir($directory_path)) {
       return $directory_path;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/stacks/src/Widget/WidgetFieldHandlers.php:125

    ---------- begin diff ----------
@@ @@
     $uri = $this->field[$this->delta]->entity->getFileUri();

     return [
-      'url' => file_create_url($uri),
+      'url' => \Drupal::service('file_url_generator')->generateAbsoluteString($uri),
       'title' => isset($this->field[$this->delta]->title) ? $this->field[$this->delta]->title : '',
       'alt' => isset($this->field[$this->delta]->alt) ? $this->field[$this->delta]->alt : '',
       'uri' => $uri,
@@ @@
     $uri = $this->field[$this->delta]->entity->getFileUri();

     return [
-      'url' => file_create_url($uri),
+      'url' => \Drupal::service('file_url_generator')->generateAbsoluteString($uri),
       'description' => (isset($this->value['description']) ? $this->value['description'] : ''),
       'uri' => $uri,
     ];
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/stacks/src/Widget/WidgetData.php:240

    ---------- begin diff ----------
@@ @@
    * Takes a widget instance entity, and returns the label of the widget bundle
    * that is connected to that widget instance.
    *
-   * @param \Drupal\stacks\Entity\WidgetInstanceEntity $widget_instance
+   * @param WidgetInstanceEntity $widget_instance
    * @return string
    */
   static public function getWidgetType(WidgetInstanceEntity $widget_instance) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/stacks/src/Services/TaxonomyHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stacks\Services;

+use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\taxonomy\Entity\Vocabulary;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

   /**
    * TaxonomyHelper constructor.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
     $this->entityFieldManager = $entity_field_manager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/stacks/src/Plugin/WidgetTypeManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/stacks/src/Plugin/WidgetTypeInterface.php:24

    ---------- begin diff ----------
@@ @@

   /**
    * If this widget type is using an entity, set the entity object here.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @return
    */
   public function setEntity(EntityInterface $entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/stacks/src/Plugin/Field/FieldWidget/FormWidgetType.php:153

    ---------- begin diff ----------
@@ @@
   /**
    * Outputs the html for a widget row.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    * @param $delta
    * @param array $element
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param array $required_options
    */
   public function widgetRow(FieldItemListInterface $items, $delta, array &$element, array &$form, FormStateInterface $form_state, $required_options = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/stacks/src/Plugin/Field/FieldFormatter/WidgetFormatterType.php:66

    ---------- begin diff ----------
@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/stacks/src/Plugin/Field/FieldFormatter/TestFormatter.php:63

    ---------- begin diff ----------
@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/stacks/src/Form/WidgetInstanceEntitySettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/stacks/src/Form/WidgetExtendEntitySettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/stacks/src/Form/WidgetEntitySettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/stacks/src/Controller/WidgetExtendEntityAddController.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Displays add links for available bundles/types for entity widget_extend.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
@@ @@
    *
    * @param EntityInterface $widget_extend_type
    *   The custom bundle to add.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/stacks/src/Controller/WidgetEntityAddController.php:37

    ---------- begin diff ----------
@@ @@
     /**
      * Displays add links for available bundles/types for entity widget_entity .
      *
-     * @param \Symfony\Component\HttpFoundation\Request $request
+     * @param Request $request
      *   The current request object.
      *
      * @return array
@@ @@
      *
      * @param EntityInterface $widget_entity_type
      *   The custom bundle to add.
-     * @param \Symfony\Component\HttpFoundation\Request $request
+     * @param Request $request
      *   The current request object.
      *
      * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/stacks/src/Annotation/WidgetType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stacks\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


30) modules/contrib/stacks/modules/stacks_content_feed/src/Plugin/WidgetType/ContentFeed.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stacks_content_feed\Plugin\WidgetType;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\node\Entity\NodeType;
 use Drupal\stacks\Plugin\WidgetTypeBase;
 use Drupal\stacks_content_feed\StacksQuery\StacksDatabaseQuery;
@@ @@
    *
    * @param $options
    * @param bool $is_ajax
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    */
   public function getNodeResults($options, $is_ajax = FALSE) {
     $use_solr = FALSE;
@@ @@
    * Helper function for returning an ajax request. This makes it simpler to
    * debug AJAX issues. If user is logged in, displays $_POST variables.
    * @param $message
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   static public function postAjaxErrorMessage($message) {
     if (!\Drupal::currentUser()->isAnonymous()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 30 files have been changed by Rector                                      

