modules/contrib/entity_extender/entity_extender.module
modules/contrib/entity_extender/modules/entity_extender_group/src/Plugin/EntityTypeExtender/GroupEntityTypeExtender.php
modules/contrib/entity_extender/modules/entity_extender_group/src/Plugin/EntityTypeExtender/GroupHandlerAccess.php
modules/contrib/entity_extender/modules/entity_extender_group/src/Plugin/EntityTypeExtender/GroupHandlerStorage.php
modules/contrib/entity_extender/modules/entity_extender_group/src/Plugin/EntityTypeExtender/GroupHandlerView.php
modules/contrib/entity_extender/modules/entity_extender_group/tests/src/Kernel/EntityExtenderGroupKernelTest.php
modules/contrib/entity_extender/modules/entity_extender_node/src/Plugin/EntityTypeExtender/NodeEntityTypeExtender.php
modules/contrib/entity_extender/modules/entity_extender_node/src/Plugin/EntityTypeExtender/NodeHandlerAccess.php
modules/contrib/entity_extender/modules/entity_extender_node/src/Plugin/EntityTypeExtender/NodeHandlerStorage.php
modules/contrib/entity_extender/modules/entity_extender_node/src/Plugin/EntityTypeExtender/NodeHandlerView.php
modules/contrib/entity_extender/modules/entity_extender_node/tests/modules/entity_extender_node_lifecycle_test/entity_extender_node_lifecycle_test.module
modules/contrib/entity_extender/modules/entity_extender_node/tests/modules/entity_extender_node_lifecycle_test/src/Plugin/EntityExtender/NodeLifecycleTestEntityExtender.php
modules/contrib/entity_extender/modules/entity_extender_node/tests/src/Functional/NodeExtenderLifecycleTest.php
modules/contrib/entity_extender/modules/entity_extender_node/tests/src/Kernel/EntityExtenderNodeKernelTest.php
modules/contrib/entity_extender/modules/entity_extender_user/src/Plugin/EntityTypeExtender/UserEntityTypeExtender.php
modules/contrib/entity_extender/modules/entity_extender_user/src/Plugin/EntityTypeExtender/UserHandlerAccess.php
modules/contrib/entity_extender/modules/entity_extender_user/src/Plugin/EntityTypeExtender/UserHandlerStorage.php
modules/contrib/entity_extender/modules/entity_extender_user/src/Plugin/EntityTypeExtender/UserHandlerView.php
modules/contrib/entity_extender/modules/entity_extender_user/tests/src/Kernel/EntityExtenderUserKernelTest.php
modules/contrib/entity_extender/src/Access/AccessResultAllowedWithoutCoreAccessChecks.php
modules/contrib/entity_extender/src/Annotation/EntityExtenderPlugin.php
modules/contrib/entity_extender/src/Annotation/EntityStorageExtenderPlugin.php
modules/contrib/entity_extender/src/Annotation/EntityTypeExtenderPlugin.php
modules/contrib/entity_extender/src/Component/Memo.php
modules/contrib/entity_extender/src/EntityExtenderManager.php
modules/contrib/entity_extender/src/EntityExtenderManagerInterface.php
modules/contrib/entity_extender/src/EntityStorageExtenderManager.php
modules/contrib/entity_extender/src/EntityStorageExtenderManagerInterface.php
modules/contrib/entity_extender/src/EntityTypeExtenderManager.php
modules/contrib/entity_extender/src/EntityTypeExtenderManagerInterface.php
modules/contrib/entity_extender/src/Plugin/EntityExtender/EntityAccessInterface.php
modules/contrib/entity_extender/src/Plugin/EntityExtender/EntityExtender.php
modules/contrib/entity_extender/src/Plugin/EntityExtender/EntityExtenderHandlerInterface.php
modules/contrib/entity_extender/src/Plugin/EntityExtender/EntityFieldAccessInterface.php
modules/contrib/entity_extender/src/Plugin/EntityExtender/EntityLifecycleInterface.php
modules/contrib/entity_extender/src/Plugin/EntityExtender/EntityLifecycleTranslationInterface.php
modules/contrib/entity_extender/src/Plugin/EntityExtender/EntityViewInterface.php
modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityHandlerDefinition.php
modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityHandlerDefinitionAccess.php
modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityHandlerDefinitionStorage.php
modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityHandlerDefinitionView.php
modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityHandlerStorageLifecycles.php
modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityHandlerTrait.php
modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityHandlerTraitAccess.php
modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityHandlerTraitStorage.php
modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityHandlerTraitView.php
modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityTypeExtender.php
modules/contrib/entity_extender/tests/src/Kernel/EntityExtenderKernelTest.php
modules/contrib/entity_extender/tests/src/Unit/EntityExtenderUnitTest.php
modules/contrib/entity_extender/tests/src/Unit/MemoUnitTest.php

14 files with changes
=====================

1) modules/contrib/entity_extender/tests/src/Unit/EntityExtenderUnitTest.php:173

    ---------- begin diff ----------
@@ @@
   /**
    * Tests entity extender manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \ReflectionException
    */
   public function testEntityExtenderManager(): void {
@@ @@
    *   The user ID.
    * @param int $calls_ok
    *   The number of expected successful extenders' instances.
-   * @param \Drupal\entity_extender\Annotation\EntityTypeExtenderPlugin[] $definitions_type_extenders
+   * @param EntityTypeExtenderPlugin[] $definitions_type_extenders
    *   The list of entity type extenders' plugins.
-   * @param \Drupal\entity_extender\Annotation\EntityStorageExtenderPlugin[]|null $definitions_storage_extenders
+   * @param EntityStorageExtenderPlugin[]|null $definitions_storage_extenders
    *   The list of entity storage extenders' plugins.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject|\Drupal\entity_extender\EntityExtenderManagerInterface
+   * @return MockObject|EntityExtenderManagerInterface
    *   The mock of the entity extender manager.
    */
   public function getEntityExtenderManager(int $user_id, int $calls_ok, array $definitions_type_extenders, array $definitions_storage_extenders = NULL): EntityExtenderManagerInterface {
@@ @@
    *
    * @param string $class
    *   The plugin manager class.
-   * @param \Drupal\Component\Annotation\PluginID[]|null $plugins
+   * @param PluginID[]|null $plugins
    *   The list of plugins.
    * @param array $arguments
    *   The list of manager's arguments.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The mock of a plugin manager.
    */
   protected function getPluginManager(string $class, ?array $plugins, array $arguments): MockObject {
@@ @@
    * @param array $specs
    *   The method calls specifications.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The entity mock.
    */
   protected function getEntity(string $interface, array $specs): MockObject {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_extender/tests/src/Kernel/EntityExtenderKernelTest.php:253

    ---------- begin diff ----------
@@ @@
    * @param string $extender_plugin_class
    *   The extender's plugin class.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The entity type storage.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityTypeExtender.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the list of handler to override.
    *
-   * @return \Drupal\entity_extender\Plugin\EntityTypeExtender\EntityHandlerDefinition[]
+   * @return EntityHandlerDefinition[]
    *   The list of handlers to override.
    */
   abstract public function getHandlers(): array;
@@ @@
   /**
    * Applies the modifications for a given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The default entity type definition to modify.
    *
    * @see \Drupal\entity_extender\EntityTypeExtenderManagerInterface::extend()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityHandlerTraitAccess.php:22

    ---------- begin diff ----------
@@ @@
    *
    * @param class-string $interface
    *   The interface the entity extender class must implement.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to construct the extender for.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The account to check the access for.
    * @param bool $return_as_object
    *   The state of whether to return access check object or boolean.
@@ @@
    *   The access checker that takes the `$extender` and `$account`
    *   parameters and must return the {@see AccessResultInterface}.
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface|null
+   * @return bool|AccessResultInterface|null
    *   The access check result or `null` if there is no extender for
    *   an `$entity` or its extender class doesn't implement `$interface`.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/entity_extender/src/Plugin/EntityTypeExtender/EntityHandlerTrait.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * An instance of the "entity_extender.manager" service.
    *
-   * @var \Drupal\entity_extender\EntityExtenderManagerInterface
+   * @var EntityExtenderManagerInterface
    */
   protected EntityExtenderManagerInterface $entityExtenderManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/entity_extender/src/Plugin/EntityExtender/EntityViewInterface.php:18

    ---------- begin diff ----------
@@ @@
    *
    * @param array $build
    *   The renderable data to modify.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity display.
    * @param string $view_mode
    *   The view mode an entity is to be rendered with.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/entity_extender/src/Plugin/EntityExtender/EntityFieldAccessInterface.php:22

    ---------- begin diff ----------
@@ @@
    * @param string $operation
    *   The operation access should be checked for. Usually
    *   one of "view" or "edit".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account to check access for.
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field values for which to check access.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    *
    * @see \Drupal\Core\Entity\EntityAccessControlHandlerInterface::fieldAccess()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/entity_extender/src/Plugin/EntityExtender/EntityExtender.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * An instance of the entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected EntityInterface $entity;

@@ @@
   /**
    * A logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected LoggerChannelInterface $logger;

@@ @@
   /**
    * An instance of the "entity_extender.manager" service.
    *
-   * @var \Drupal\entity_extender\EntityExtenderManagerInterface
+   * @var EntityExtenderManagerInterface
    */
   protected EntityExtenderManagerInterface $entityExtenderManager;

@@ @@
    * @param string $field_name
    *   The name of the entity reference field.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The list of referenced entities within a field.
    *
    * @throws \InvalidArgumentException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_extender/src/Plugin/EntityExtender/EntityAccessInterface.php:20

    ---------- begin diff ----------
@@ @@
    * @param string $operation
    *   The operation access should be checked for. Usually
    *   one of "view", "view label", "update" or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account to check access for.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    *
    * @see \Drupal\Core\Entity\EntityAccessControlHandlerInterface::access()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/entity_extender/src/EntityTypeExtenderManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_extender;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;

 /**
@@ @@
   /**
    * Extends entity types.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   The associative array of entity type definitions.
    *
    * @see \entity_extender_entity_type_alter()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/entity_extender/src/EntityExtenderManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_extender;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * Returns an instance of the "entity_type.manager" service.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   An instance of the "entity_type.manager" service.
    */
   public function getEntityTypeManager(): EntityTypeManagerInterface;
@@ @@
    * @param string|null $bundle
    *   The entity bundle.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The entity storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   When the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   When the storage handler couldn't be loaded.
    */
   public function getStorage(string $entity_type_id, string $bundle = NULL): EntityStorageInterface;
@@ @@
    *
    * @template T of EntityExtender
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to create an extender for.
    * @param class-string<T>|null $class
    *   The fully-qualified class name to create an instance of. It must extend
@@ @@
    *
    * @param class-string $spec
    *   The interface/class the extender must implement/extend.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to create an extender for.
    * @param class-string<T>|null $class
    *   The fully-qualified class name to create an instance of. It must extend
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/entity_extender/src/EntityExtenderManager.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * An instance of the "entity_type.manager" service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * An instance of the "entity_extender.entity_type.manager" service.
    *
-   * @var \Drupal\entity_extender\EntityTypeExtenderManagerInterface
+   * @var EntityTypeExtenderManagerInterface
    */
   protected EntityTypeExtenderManagerInterface $entityTypeExtenderManager;

@@ @@
   /**
    * An instance of the "entity_extender.entity_storage.manager" service.
    *
-   * @var \Drupal\entity_extender\EntityStorageExtenderManagerInterface
+   * @var EntityStorageExtenderManagerInterface
    */
   protected EntityStorageExtenderManagerInterface $entityStorageExtenderManager;

@@ @@
    *
    * @param \Traversable $namespaces
    *   A list of namespaces to look the plugins at.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   An instance of the "cache.discovery" service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   An instance of the "module_handler" service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   An instance of the "entity_type.manager" service.
-   * @param \Drupal\entity_extender\EntityTypeExtenderManagerInterface $entity_type_extender_manager
+   * @param EntityTypeExtenderManagerInterface $entity_type_extender_manager
    *   An instance of the "entity_extender.entity_type.manager" service.
-   * @param \Drupal\entity_extender\EntityStorageExtenderManagerInterface $entity_storage_extender_manager
+   * @param EntityStorageExtenderManagerInterface $entity_storage_extender_manager
    *   An instance of the "entity_extender.entity_storage.manager" service.
    */
   public function __construct(
@@ @@
    *
    * @template T of EntityExtender
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to create an extender for.
    * @param string[] $specs
    *   The list of fully-qualified class/interface names the extender must
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_extender/src/Component/Memo.php:134

    ---------- begin diff ----------
@@ @@
   /**
    * Wipes out memoized values of computations where an entity object was used.
    *
-   * @param \Drupal\Core\Session\AccountInterface|\Drupal\Core\Entity\EntityInterface|\Drupal\entity_extender\Plugin\EntityExtender\EntityExtender $input
+   * @param AccountInterface|EntityInterface|EntityExtender $input
    *   The object to invalidate the memoized values of computations where
    *   it was used.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/entity_extender/modules/entity_extender_node/tests/modules/entity_extender_node_lifecycle_test/src/Plugin/EntityExtender/NodeLifecycleTestEntityExtender.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_extender_node_lifecycle_test\Plugin\EntityExtender;

+use Drupal\node\NodeInterface;
 use Drupal\entity_extender\Plugin\EntityExtender\EntityExtender;
 use Drupal\entity_extender\Plugin\EntityExtender\EntityLifecycleInterface;

@@ @@
  *
  * @EntityExtenderPlugin("node:node_lifecycle_test")
  *
- * @property \Drupal\node\NodeInterface $entity
- * @method \Drupal\node\NodeInterface getEntity()
+ * @property NodeInterface $entity
+ * @method NodeInterface getEntity()
  */
 class NodeLifecycleTestEntityExtender extends EntityExtender implements EntityLifecycleInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/entity_extender/modules/entity_extender_group/src/Plugin
         /EntityTypeExtender/GroupHandlerView.php" file, due to:                
         "Analyze error: "Class Drupal\group\Entity\ViewBuilder\GroupViewBuilder
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/entity_extender/modules/entity_extender_group/src/Plugin
         /EntityTypeExtender/GroupHandlerStorage.php" file, due to:             
         "Analyze error: "Class Drupal\group\Entity\Storage\GroupStorage not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/entity_extender/modules/entity_extender_group/src/Plugin
         /EntityTypeExtender/GroupHandlerAccess.php" file, due to:              
         "Analyze error: "Class                                                 
         Drupal\group\Entity\Access\GroupAccessControlHandler not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

