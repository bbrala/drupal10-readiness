diff --git a/modules/toc_api_example/toc_api_example.module b/modules/toc_api_example/toc_api_example.module
index eec948a..acefd2d 100755
--- a/modules/toc_api_example/toc_api_example.module
+++ b/modules/toc_api_example/toc_api_example.module
@@ -1,4 +1,8 @@
 <?php
+use Drupal\toc_api\TocTypeInterface;
+use Drupal\toc_api\TocManagerInterface;
+use Drupal\toc_api\TocInterface;
+use Drupal\toc_api\TocBuilderInterface;
 /**
  * @file
  * Example of a custom implementation of the TOC API that adds a table of contents to specified content types.
@@ -18,20 +22,20 @@ function toc_api_example_node_view(array &$build, NodeInterface $node, EntityVie
     $body = (string) \Drupal::service('renderer')->render($build['body'][0]);
 
     // Get 'default' TOC type options.
-    /** @var \Drupal\toc_api\TocTypeInterface $toc_type */
+    /** @var TocTypeInterface $toc_type */
     $toc_type = TocType::load('default');
     $options = ($toc_type) ? $toc_type->getOptions() : [];
 
     // Create a TOC instance using the TOC manager.
-    /** @var \Drupal\toc_api\TocManagerInterface $toc_manager */
+    /** @var TocManagerInterface $toc_manager */
     $toc_manager = \Drupal::service('toc_api.manager');
-    /** @var \Drupal\toc_api\TocInterface $toc */
+    /** @var TocInterface $toc */
     $toc = $toc_manager->create('toc_filter', $body, $options);
 
     // If the TOC is visible (ie has more than X headers), replace the body
     // render array with the TOC and update body content using the TOC builder.
     if ($toc->isVisible()) {
-      /** @var \Drupal\toc_api\TocBuilderInterface $toc_builder */
+      /** @var TocBuilderInterface $toc_builder */
       $toc_builder = \Drupal::service('toc_api.builder');
       $build['body'][0] = [
         'toc' => $toc_builder->buildToc($toc),
diff --git a/src/Plugin/Block/TocBlockBase.php b/src/Plugin/Block/TocBlockBase.php
index f5d4b9d..db18ec4 100755
--- a/src/Plugin/Block/TocBlockBase.php
+++ b/src/Plugin/Block/TocBlockBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\toc_api\Plugin\Block;
 
+use Drupal\toc_api\TocManagerInterface;
+use Drupal\toc_api\TocInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Session\AccountInterface;
@@ -37,7 +40,7 @@ abstract class TocBlockBase extends BlockBase {
    */
   protected function blockAccess(AccountInterface $account) {
     $this->getCurrentTocId();
-    /** @var \Drupal\toc_api\TocManagerInterface $toc_manager */
+    /** @var TocManagerInterface $toc_manager */
     $toc_manager = \Drupal::service('toc_api.manager');
 
     // Get the new TOC instance and see if it is visible and should be
@@ -83,11 +86,11 @@ abstract class TocBlockBase extends BlockBase {
   /**
    * Get the current request TOC object instance.
    *
-   * @return \Drupal\toc_api\TocInterface
+   * @return TocInterface
    *   A TOC object.
    */
   protected function getCurrentToc() {
-    /** @var \Drupal\toc_api\TocManagerInterface $toc_manager */
+    /** @var TocManagerInterface $toc_manager */
     $toc_manager = \Drupal::service('toc_api.manager');
 
     // Get the new TOC instance using the module name.
@@ -97,7 +100,7 @@ abstract class TocBlockBase extends BlockBase {
   /**
    * Load the node associated with the current request.
    *
-   * @return \Drupal\node\NodeInterface|null
+   * @return NodeInterface|null
    *   A node entity, or NULL if no node is not found.
    */
   protected function getCurrentNode() {
diff --git a/src/Toc.php b/src/Toc.php
index fa5eed4..c0e0ab6 100644
--- a/src/Toc.php
+++ b/src/Toc.php
@@ -336,11 +336,11 @@ class Toc implements TocInterface {
   }
 
   /**
-   * Gets the TOC formatter.
-   *
-   * @return \Drupal\toc_api\TocFormatter.
-   *   The TOC formatter
-   */
+  * Gets the TOC formatter.
+  *
+   * @return TocFormatter .
+    The TOC formatter
+  */
   protected function formatter() {
     return \Drupal::service('toc_api.formatter');
   }
diff --git a/src/TocBuilder.php b/src/TocBuilder.php
index ab0604f..3f284da 100644
--- a/src/TocBuilder.php
+++ b/src/TocBuilder.php
@@ -14,14 +14,14 @@ class TocBuilder implements TocBuilderInterface {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs a new TocBuilder.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(RendererInterface $renderer) {
diff --git a/src/TocBuilderInterface.php b/src/TocBuilderInterface.php
index fdd0c1d..577eb40 100644
--- a/src/TocBuilderInterface.php
+++ b/src/TocBuilderInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\toc_api;
 
+use Drupal\Component\Render\MarkupInterface;
 /**
  * Provides an interface defining a TOC builder.
  */
@@ -10,7 +11,7 @@ interface TocBuilderInterface {
   /**
    * Renders a table of contents' body.
    *
-   * @param \Drupal\toc_api\TocInterface $toc
+   * @param TocInterface $toc
    *   A TOC object.
    *
    * @return string
@@ -22,7 +23,7 @@ interface TocBuilderInterface {
   /**
    * Build a table of contents' body.
    *
-   * @param \Drupal\toc_api\TocInterface $toc
+   * @param TocInterface $toc
    *   A TOC object.
    *
    * @return array
@@ -34,10 +35,10 @@ interface TocBuilderInterface {
   /**
    * Renders a table of contents navigation.
    *
-   * @param \Drupal\toc_api\TocInterface $toc
+   * @param TocInterface $toc
    *   A TOC object.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered table of contents.
    */
   public function renderToc(TocInterface $toc);
@@ -45,7 +46,7 @@ interface TocBuilderInterface {
   /**
    * Builds a table of contents navigation.
    *
-   * @param \Drupal\toc_api\TocInterface $toc
+   * @param TocInterface $toc
    *   A TOC object.
    *
    * @return array
diff --git a/src/TocManager.php b/src/TocManager.php
index cdc7396..128e321 100644
--- a/src/TocManager.php
+++ b/src/TocManager.php
@@ -14,21 +14,21 @@ class TocManager implements TocManagerInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The TOC instances.
    *
-   * @var \Drupal\toc_api\Toc[]
+   * @var Toc[]
    */
   protected $tocs = [];
 
   /**
    * Constructs a new TocManager.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ -40,7 +40,7 @@ class TocManager implements TocManagerInterface {
    */
   public function create($id, $source, array $options = []) {
     // Merge default TOC type options with passed options.
-    /** @var \Drupal\toc_api\TocTypeInterface $default_toc */
+    /** @var TocTypeInterface $default_toc */
     if ($default_toc = TocType::load('default')) {
       $options = NestedArray::mergeDeep($default_toc->getOptions(), $options);
     }
diff --git a/src/TocManagerInterface.php b/src/TocManagerInterface.php
index 901048d..fca2004 100644
--- a/src/TocManagerInterface.php
+++ b/src/TocManagerInterface.php
@@ -20,7 +20,7 @@ interface TocManagerInterface {
    *   (optional) An associative array of options used to generate a table of
    *   contents and bookmarked headers.
    *
-   * @return \Drupal\toc_api\TocInterface
+   * @return TocInterface
    *   A new TOC object.
    */
   public function create($id, $source, array $options = []);
@@ -32,7 +32,7 @@ interface TocManagerInterface {
    *   ID used to track the TOC object's instance. Typically, the ID can be
    *   the TOC implementation's module name.
    *
-   * @return \Drupal\toc_api\TocInterface
+   * @return TocInterface
    *   The current TOC instance.
    */
   public function getToc($id);
diff --git a/src/TocTypeForm.php b/src/TocTypeForm.php
index 9c1012e..bde9c64 100644
--- a/src/TocTypeForm.php
+++ b/src/TocTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\toc_api;
 
+use Drupal\toc_api\Entity\TocType;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,40 +19,40 @@ class TocTypeForm extends EntityForm {
   /**
    * The entity type manager to create query factory.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The theme registry.
    *
-   * @var \Drupal\Core\Theme\Registry
+   * @var Registry
    */
   protected $themeRegistry;
 
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * The theme initialization logic.
    *
-   * @var \Drupal\Core\Theme\ThemeInitializationInterface
+   * @var ThemeInitializationInterface
    */
   protected $themeInitialization;
 
   /**
    * Constructs a new TocTypeForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity query factory.
    *
-   * @param \Drupal\Core\Theme\Registry $theme_registry
+   * @param Registry $theme_registry
    *   The theme registry.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Registry $theme_registry, ThemeManagerInterface $theme_manager, ThemeInitializationInterface $theme_initialization) {
@@ -368,7 +369,7 @@ class TocTypeForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\toc_api\Entity\TocType $toc_type */
+    /** @var TocType $toc_type */
     $toc_type = $this->getEntity();
     $toc_type->save();
 
diff --git a/tests/src/Unit/TocFormatterTest.php b/tests/src/Unit/TocFormatterTest.php
index e80fccb..d6aa3c0 100755
--- a/tests/src/Unit/TocFormatterTest.php
+++ b/tests/src/Unit/TocFormatterTest.php
@@ -22,14 +22,14 @@ class TocFormatterTest extends UnitTestCase {
   /**
    * The table of contents formatter.
    *
-   * @var \Drupal\toc_api\TocFormatter
+   * @var TocFormatter
    */
   protected $formatter;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->formatter = new TocFormatter();
diff --git a/tests/src/Unit/TocTest.php b/tests/src/Unit/TocTest.php
index 71d6f03..a611f43 100755
--- a/tests/src/Unit/TocTest.php
+++ b/tests/src/Unit/TocTest.php
@@ -25,14 +25,14 @@ class TocTest extends UnitTestCase {
   /**
    * The service container used for testing.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->container = new ContainerBuilder();
@@ -433,10 +433,10 @@ class TocTest extends UnitTestCase {
     // Check update content ids.
     $toc = new Toc('<h2>header 2</h2><h3 id="three" class="custom">header 3</h3><h4 id="four">header 4</h4><h4 id="four">header 4</h4><h2>header 2</h2>', []);
     $content = $toc->getContent();
-    $this->assertContains('<h2 id="header-2">', $content);
-    $this->assertContains('<h3 id="three" class="custom">', $content);
-    $this->assertContains('<h4 id="four">', $content);
-    $this->assertContains('<h4 id="four-01">', $content);
+    $this->assertStringContainsString('<h2 id="header-2">', $content);
+    $this->assertStringContainsString('<h3 id="three" class="custom">', $content);
+    $this->assertStringContainsString('<h4 id="four">', $content);
+    $this->assertStringContainsString('<h4 id="four-01">', $content);
   }
 
   /**
diff --git a/toc_api.module b/toc_api.module
index cdd60e1..4999210 100755
--- a/toc_api.module
+++ b/toc_api.module
@@ -1,4 +1,5 @@
 <?php
+use Drupal\toc_api\TocInterface;
 /**
  * @file
  * Converts header tags into a hierarchical table of contents.
@@ -62,7 +63,7 @@ function toc_api_theme() {
  *   - item: A table of contents header item.
  */
 function template_preprocess_toc_header(&$variables) {
-  /** @var \Drupal\toc_api\TocInterface $toc */
+  /** @var TocInterface $toc */
   $toc = $variables['toc'];
 
   $item = $variables['item'];
@@ -90,7 +91,7 @@ function template_preprocess_toc_header(&$variables) {
  *   - attributes: Attributes to be added to back to top link.
  */
 function template_preprocess_toc_back_to_top(&$variables) {
-  /** @var \Drupal\toc_api\TocInterface $toc */
+  /** @var TocInterface $toc */
   $toc = $variables['toc'];
 
   $options = $toc->getOptions();
@@ -111,7 +112,7 @@ function template_preprocess_toc_back_to_top(&$variables) {
  *   - attributes: Attributes to be added to back to top link.
  */
 function template_preprocess_toc_tree(&$variables) {
-  /** @var \Drupal\toc_api\TocInterface $toc */
+  /** @var TocInterface $toc */
   $toc = $variables['toc'];
 
   $variables['tree'] = $toc->getTree();
@@ -134,7 +135,7 @@ function template_preprocess_toc_tree(&$variables) {
  *   - attributes: Attributes to be added to back to top link.
  */
 function template_preprocess_toc_menu(&$variables) {
-  /** @var \Drupal\toc_api\TocInterface $toc */
+  /** @var TocInterface $toc */
   $toc = $variables['toc'];
 
   $options = $toc->getOptions();
