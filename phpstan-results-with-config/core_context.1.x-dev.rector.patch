diff --git a/core_context.module b/core_context.module
index cc4cc9f..2673c91 100644
--- a/core_context.module
+++ b/core_context.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\core_context\FieldContextHandler;
@@ -9,7 +10,7 @@ use Drupal\core_context\SettingsContextHandler;
  * Implements hook_entity_type_alter().
  */
 function core_context_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   foreach ($entity_types as $entity_type) {
     if ($entity_type->hasHandlerClass('context')) {
       continue;
diff --git a/src/CacheableContextTrait.php b/src/CacheableContextTrait.php
index b45f39c..fb7051e 100644
--- a/src/CacheableContextTrait.php
+++ b/src/CacheableContextTrait.php
@@ -15,7 +15,7 @@ trait CacheableContextTrait {
    *
    * @param \Drupal\Component\Plugin\Context\ContextInterface[] $contexts
    *   The contexts to which cache metadata should be added.
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $cache_metadata
+   * @param CacheableDependencyInterface $cache_metadata
    *   The object carrying the cache metadata.
    *
    * @return \Drupal\Component\Plugin\Context\ContextInterface[]
diff --git a/src/ContextProvider/CanonicalEntity.php b/src/ContextProvider/CanonicalEntity.php
index e386944..15933bb 100644
--- a/src/ContextProvider/CanonicalEntity.php
+++ b/src/ContextProvider/CanonicalEntity.php
@@ -14,14 +14,14 @@ final class CanonicalEntity extends RouteAwareContextProviderBase {
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   private $entityDisplayRepository;
 
   /**
    * CanonicalEntity constructor.
    *
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository service.
    * @param mixed ...$arguments
    *   Additional arguments to pass to the parent constructor.
@@ -41,7 +41,7 @@ final class CanonicalEntity extends RouteAwareContextProviderBase {
    * polyfills it by adding a _core_context_entity default containing the
    * required information.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The current route object.
    *
    * @see \Drupal\core_context\Routing\RouteSubscriber::alterRoutes()
diff --git a/src/ContextProvider/ContextProviderBase.php b/src/ContextProvider/ContextProviderBase.php
index 63bd1d5..08a709f 100644
--- a/src/ContextProvider/ContextProviderBase.php
+++ b/src/ContextProvider/ContextProviderBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\core_context\ContextProvider;
 
+use Drupal\Component\Plugin\Context\ContextInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Context\ContextProviderInterface;
@@ -14,14 +15,14 @@ abstract class ContextProviderBase implements ContextProviderInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * ContextProviderBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -31,10 +32,10 @@ abstract class ContextProviderBase implements ContextProviderInterface {
   /**
    * Extracts contexts from an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity from which to extract contexts.
    *
-   * @return \Drupal\Component\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    *   The contexts extracted from the entity.
    */
   protected function getContextsFromEntity(EntityInterface $entity) {
diff --git a/src/ContextProvider/Generic.php b/src/ContextProvider/Generic.php
index 2849c53..26e51fb 100644
--- a/src/ContextProvider/Generic.php
+++ b/src/ContextProvider/Generic.php
@@ -12,14 +12,14 @@ final class Generic implements ContextProviderInterface {
   /**
    * The provider services from which to expose contexts.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextProviderInterface[]
+   * @var ContextProviderInterface[]
    */
   private $providers = [];
 
   /**
    * Adds a provider service from which to expose contexts.
    *
-   * @param \Drupal\Core\Plugin\Context\ContextProviderInterface $provider
+   * @param ContextProviderInterface $provider
    *   The context provider to add.
    */
   public function addProvider(ContextProviderInterface $provider) {
diff --git a/src/ContextProvider/LayoutBuilder.php b/src/ContextProvider/LayoutBuilder.php
index a808b23..764931f 100644
--- a/src/ContextProvider/LayoutBuilder.php
+++ b/src/ContextProvider/LayoutBuilder.php
@@ -14,23 +14,23 @@ final class LayoutBuilder extends RouteAwareContextProviderBase {
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   private $entityDisplayRepository;
 
   /**
    * The 'core_context.canonical_entity' service.
    *
-   * @var \Drupal\core_context\ContextProvider\CanonicalEntity
+   * @var CanonicalEntity
    */
   private $canonical;
 
   /**
    * LayoutBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository service.
-   * @param \Drupal\core_context\ContextProvider\CanonicalEntity $canonical
+   * @param CanonicalEntity $canonical
    *   The 'core_context.canonical_entity' service.
    * @param mixed ...$arguments
    *   Additional arguments to pass to the parent constructor.
@@ -48,7 +48,7 @@ final class LayoutBuilder extends RouteAwareContextProviderBase {
    * _entity_form default, which will carry a value of
    * ENTITY_TYPE_ID.layout_builder.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The current route object.
    *
    * @see \Drupal\layout_builder\Routing\LayoutBuilderRoutesTrait
diff --git a/src/ContextProvider/RouteAwareContextProviderBase.php b/src/ContextProvider/RouteAwareContextProviderBase.php
index b743d16..a3db60a 100644
--- a/src/ContextProvider/RouteAwareContextProviderBase.php
+++ b/src/ContextProvider/RouteAwareContextProviderBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\core_context\ContextProvider;
 
+use Drupal\Component\Plugin\Context\ContextInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\core_context\CacheableContextTrait;
@@ -17,14 +18,14 @@ abstract class RouteAwareContextProviderBase extends ContextProviderBase {
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * RouteAwareContextProviderBase constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    * @param mixed ...$arguments
    *   Additional arguments to pass to the parent constructor.
@@ -37,7 +38,7 @@ abstract class RouteAwareContextProviderBase extends ContextProviderBase {
   /**
    * Determines if this provider can extract contexts from the current route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route object.
    *
    * @return bool
@@ -49,10 +50,10 @@ abstract class RouteAwareContextProviderBase extends ContextProviderBase {
   /**
    * Extracts contexts from the current route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route object.
    *
-   * @return \Drupal\Component\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    *   The contexts extracted from the route, keyed by name. Any contexts which
    *   can accept cache metadata will get the 'route' cache context applied.
    */
diff --git a/src/CoreContextServiceProvider.php b/src/CoreContextServiceProvider.php
index cacace1..1154413 100644
--- a/src/CoreContextServiceProvider.php
+++ b/src/CoreContextServiceProvider.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\core_context;
 
+use Drupal\core_context\EventSubscriber\SectionComponentRenderArray;
+use Drupal\core_context\ContextProvider\LayoutBuilder;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\DependencyInjection\ServiceProviderInterface;
 use Symfony\Component\DependencyInjection\Reference;
@@ -19,7 +21,7 @@ final class CoreContextServiceProvider implements ServiceProviderInterface {
 
     if (isset($modules['layout_builder'])) {
       $container->register('core_context.render_section_component_subscriber')
-        ->setClass(EventSubscriber\SectionComponentRenderArray::class)
+        ->setClass(SectionComponentRenderArray::class)
         ->setArguments([
           new Reference('plugin.manager.layout_builder.section_storage'),
           new Reference('entity_type.manager'),
@@ -27,7 +29,7 @@ final class CoreContextServiceProvider implements ServiceProviderInterface {
         ->addTag('event_subscriber');
 
       $container->register('core_context.layout_builder')
-        ->setClass(ContextProvider\LayoutBuilder::class)
+        ->setClass(LayoutBuilder::class)
         ->setArguments([
           new Reference('entity_display.repository'),
           new Reference('core_context.canonical_entity'),
diff --git a/src/EntityContextHandlerInterface.php b/src/EntityContextHandlerInterface.php
index e438613..caacc62 100644
--- a/src/EntityContextHandlerInterface.php
+++ b/src/EntityContextHandlerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\core_context;
 
+use Drupal\Component\Plugin\Context\ContextInterface;
 use Drupal\Core\Entity\EntityHandlerInterface;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -13,9 +14,9 @@ interface EntityContextHandlerInterface extends EntityHandlerInterface {
   /**
    * Returns all contexts attached to an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\Component\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   public function getContexts(EntityInterface $entity);
 
diff --git a/src/EventSubscriber/SectionComponentRenderArray.php b/src/EventSubscriber/SectionComponentRenderArray.php
index 5d2692c..112b1fc 100644
--- a/src/EventSubscriber/SectionComponentRenderArray.php
+++ b/src/EventSubscriber/SectionComponentRenderArray.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\core_context\EventSubscriber;
 
+use Drupal\Component\Plugin\Context\ContextInterface;
+use Drupal\layout_builder\SectionListInterface;
 use Drupal\Component\Plugin\ContextAwarePluginInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,23 +24,23 @@ final class SectionComponentRenderArray implements EventSubscriberInterface {
   /**
    * The section storage manager service.
    *
-   * @var \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface
+   * @var SectionStorageManagerInterface
    */
   private $sectionStorageManager;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * BlockComponentRenderArray constructor.
    *
-   * @param \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface $section_storage_manager
+   * @param SectionStorageManagerInterface $section_storage_manager
    *   The section storage manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(SectionStorageManagerInterface $section_storage_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -60,7 +62,7 @@ final class SectionComponentRenderArray implements EventSubscriberInterface {
   /**
    * Sets context values on a section component at render time.
    *
-   * @param \Drupal\layout_builder\Event\SectionComponentBuildRenderArrayEvent $event
+   * @param SectionComponentBuildRenderArrayEvent $event
    *   The event object.
    */
   public function setComponentContexts(SectionComponentBuildRenderArrayEvent $event) {
@@ -106,10 +108,10 @@ final class SectionComponentRenderArray implements EventSubscriberInterface {
   /**
    * Extracts contexts from a section storage plugin.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage plugin from which to extract contexts.
    *
-   * @return \Drupal\Component\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    *   The contexts extracted from the section storage.
    */
   private function getContextsFromSectionStorage(SectionStorageInterface $section_storage) {
@@ -120,7 +122,7 @@ final class SectionComponentRenderArray implements EventSubscriberInterface {
     if ($section_storage instanceof SectionStorageBase) {
       $method = new \ReflectionMethod($section_storage, 'getSectionList');
       $method->setAccessible(TRUE);
-      /** @var \Drupal\layout_builder\SectionListInterface $section_list */
+      /** @var SectionListInterface $section_list */
       $section_list = $method->invoke($section_storage);
     }
     else {
@@ -145,7 +147,7 @@ final class SectionComponentRenderArray implements EventSubscriberInterface {
       return [];
     }
 
-    /** @var \Drupal\Component\Plugin\Context\ContextInterface[] $contexts */
+    /** @var ContextInterface[] $contexts */
     return $this->entityTypeManager
       ->getHandler($section_list->getEntityTypeId(), 'context')
       ->getContexts($section_list);
diff --git a/src/FieldContextHandler.php b/src/FieldContextHandler.php
index 20b1060..d18881c 100644
--- a/src/FieldContextHandler.php
+++ b/src/FieldContextHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\core_context;
 
+use Drupal\core_context\Plugin\Field\FieldType\ContextItem;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -19,23 +20,23 @@ final class FieldContextHandler implements EntityContextHandlerInterface {
   /**
    * The context mapper service.
    *
-   * @var \Drupal\ctools\ContextMapperInterface
+   * @var ContextMapperInterface
    */
   private $contextMapper;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;
 
   /**
    * FieldContextHandler constructor.
    *
-   * @param \Drupal\ctools\ContextMapperInterface $context_mapper
+   * @param ContextMapperInterface $context_mapper
    *   The context mapper service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
    */
   public function __construct(ContextMapperInterface $context_mapper, EntityFieldManagerInterface $entity_field_manager) {
@@ -78,7 +79,7 @@ final class FieldContextHandler implements EntityContextHandlerInterface {
       return $contexts;
     }
 
-    /** @var \Drupal\core_context\Plugin\Field\FieldType\ContextItem $item */
+    /** @var ContextItem $item */
     foreach ($items as $item) {
       $contexts[$item->id] = $item->getValue();
     }
diff --git a/src/SettingsContextHandler.php b/src/SettingsContextHandler.php
index db32ee4..8a09ce1 100644
--- a/src/SettingsContextHandler.php
+++ b/src/SettingsContextHandler.php
@@ -18,14 +18,14 @@ final class SettingsContextHandler implements EntityContextHandlerInterface {
   /**
    * The context mapper service.
    *
-   * @var \Drupal\ctools\ContextMapperInterface
+   * @var ContextMapperInterface
    */
   private $contextMapper;
 
   /**
    * SettingsContextHandler constructor.
    *
-   * @param \Drupal\ctools\ContextMapperInterface $context_mapper
+   * @param ContextMapperInterface $context_mapper
    *   The context mapper service.
    */
   public function __construct(ContextMapperInterface $context_mapper) {
