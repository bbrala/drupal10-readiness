diff --git a/scripts/gen-theme-setting-docs.php b/scripts/gen-theme-setting-docs.php
index 9a3ce15..9be1bab 100755
--- a/scripts/gen-theme-setting-docs.php
+++ b/scripts/gen-theme-setting-docs.php
@@ -22,7 +22,7 @@ $kernel = require_once __DIR__ . '/bootstrap.php';
 
 $bootstrap = Bootstrap::getTheme('bootstrap');
 
-/** @var \Drupal\bootstrap\Plugin\Setting\SettingInterface[] $settings */
+/** @var SettingInterface[] $settings */
 $settings = array_filter($bootstrap->getSettingPlugin(NULL, TRUE), function (SettingInterface $setting) {
   return !!$setting->getGroups();
 });
diff --git a/src/Annotation/BootstrapSetting.php b/src/Annotation/BootstrapSetting.php
index 2d1e194..6b97cf6 100644
--- a/src/Annotation/BootstrapSetting.php
+++ b/src/Annotation/BootstrapSetting.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bootstrap\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -29,7 +30,7 @@ class BootstrapSetting extends Plugin {
   /**
    * The setting's description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
@@ -43,14 +44,14 @@ class BootstrapSetting extends Plugin {
   /**
    * The setting's groups.
    *
-   * @var \Drupal\Core\Annotation\Translation[]
+   * @var Translation[]
    */
   public $groups = [];
 
   /**
    * The setting's title.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $title;
 
diff --git a/src/Annotation/BootstrapUpdate.php b/src/Annotation/BootstrapUpdate.php
index 60928df..2e4562d 100644
--- a/src/Annotation/BootstrapUpdate.php
+++ b/src/Annotation/BootstrapUpdate.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bootstrap\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -29,14 +30,14 @@ class BootstrapUpdate extends Plugin {
   /**
    * A short human-readable label.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label = '';
 
   /**
    * A detailed description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description = '';
 
diff --git a/src/Annotation/PluginCallback.php b/src/Annotation/PluginCallback.php
index 48772ce..418d8c5 100644
--- a/src/Annotation/PluginCallback.php
+++ b/src/Annotation/PluginCallback.php
@@ -27,7 +27,7 @@ class PluginCallback extends PluginID {
   /**
    * Flag that determines how to add the plugin to a callback array.
    *
-   * @var \Drupal\bootstrap\Annotation\BootstrapConstant
+   * @var BootstrapConstant
    *
    * Must be one of the following constants:
    *   - \Drupal\bootstrap\Bootstrap::CALLBACK_APPEND
diff --git a/src/Bootstrap.php b/src/Bootstrap.php
index 7697735..b76f6d5 100644
--- a/src/Bootstrap.php
+++ b/src/Bootstrap.php
@@ -2,6 +2,17 @@
 
 namespace Drupal\bootstrap;
 
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\Messenger\MessengerInterface;
+use Drupal\Core\Render\Renderer;
+use Drupal\Core\Theme\Registry;
+use Drupal\Core\Template\TwigEnvironment;
+use Drupal\bootstrap\Plugin\Form\FormInterface;
+use Drupal\bootstrap\Plugin\Alter\AlterInterface;
+use GuzzleHttp\Client;
+use Drupal\Core\Theme\ThemeManager;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\bootstrap\Plugin\Preprocess\PreprocessInterface;
 use Drupal\bootstrap\Plugin\AlterManager;
 use Drupal\bootstrap\Plugin\FormManager;
 use Drupal\bootstrap\Plugin\PreprocessManager;
@@ -117,35 +128,35 @@ class Bootstrap {
   /**
    * The File System service, if it exists.
    *
-   * @var \Drupal\Core\File\FileSystemInterface|false
+   * @var FileSystemInterface|false
    */
   protected static $fileSystem;
 
   /**
    * The Messenger service, if it exists.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface|false
+   * @var MessengerInterface|false
    */
   protected static $messenger;
 
   /**
    * The Renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected static $renderer;
 
   /**
    * The Theme Registry service.
    *
-   * @var \Drupal\Core\Theme\Registry
+   * @var Registry
    */
   protected static $themeRegistry;
 
   /**
    * The Twig service.
    *
-   * @var \Drupal\Core\Template\TwigEnvironment
+   * @var TwigEnvironment
    */
   protected static $twig;
 
@@ -234,13 +245,13 @@ class Bootstrap {
       $drupal_static_fast['form_managers'] = &drupal_static(__METHOD__ . '__formManagers', []);
     }
 
-    /** @var \Drupal\bootstrap\Plugin\AlterManager[] $alter_managers */
+    /** @var AlterManager[] $alter_managers */
     $alter_managers = &$drupal_static_fast['alter_managers'];
     if (!isset($alter_managers[$theme_name])) {
       $alter_managers[$theme_name] = new AlterManager($theme);
     }
 
-    /** @var \Drupal\bootstrap\Plugin\FormManager[] $form_managers */
+    /** @var FormManager[] $form_managers */
     $form_managers = &$drupal_static_fast['form_managers'];
     if (!isset($form_managers[$theme_name])) {
       $form_managers[$theme_name] = new FormManager($theme);
@@ -288,7 +299,7 @@ class Bootstrap {
 
       // Iterate over each form identifier and look for a possible plugin.
       foreach ($ids as $id) {
-        /** @var \Drupal\bootstrap\Plugin\Form\FormInterface $form */
+        /** @var FormInterface $form */
         if ($form_manager->hasDefinition($id) && ($form = $form_manager->createInstance($id, ['theme' => $theme]))) {
           $data['#submit'][] = [get_class($form), 'submitForm'];
           $data['#validate'][] = [get_class($form), 'validateForm'];
@@ -298,7 +309,7 @@ class Bootstrap {
     }
     // Process hook alter normally.
     else {
-      /** @var \Drupal\bootstrap\Plugin\Alter\AlterInterface $class */
+      /** @var AlterInterface $class */
       if ($alter_manager->hasDefinition($hook) && ($class = $alter_manager->createInstance($hook, ['theme' => $theme]))) {
         $class->alter($data, $context1, $context2);
       }
@@ -311,7 +322,7 @@ class Bootstrap {
    * @param string $query
    *   The query to search for.
    *
-   * @return \Drupal\Component\Render\FormattableMarkup
+   * @return FormattableMarkup
    *   The complete URL to the documentation site.
    */
   public static function apiSearchUrl($query = '') {
@@ -367,7 +378,7 @@ class Bootstrap {
    * @param \Exception|null $exception
    *   Any Exceptions throw, passed by reference.
    *
-   * @return \Drupal\bootstrap\SerializedResponse
+   * @return SerializedResponse
    *   A SerializedResponse object.
    */
   public static function checkUrlIsReachable($url, array $options = [], &$exception = NULL) {
@@ -386,7 +397,7 @@ class Bootstrap {
    * @param \Exception|null $exception
    *   The exception thrown if there was an error, passed by reference.
    *
-   * @return \Drupal\bootstrap\SerializedResponse
+   * @return SerializedResponse
    *   A Response object.
    */
   public static function request($url, array $options = [], &$exception = NULL) {
@@ -409,7 +420,7 @@ class Bootstrap {
     $response = $cache->get($hash);
 
     if (!isset($response)) {
-      /** @var \GuzzleHttp\Client $client */
+      /** @var Client $client */
       $client = \Drupal::service('http_client_factory')->fromOptions($options);
       $request = new Request($options['method'], $url, $options['headers']);
 
@@ -530,7 +541,7 @@ class Bootstrap {
       ];
 
       // Allow sub-themes to alter this array of patterns.
-      /** @var \Drupal\Core\Theme\ThemeManager $theme_manager */
+      /** @var ThemeManager $theme_manager */
       $theme_manager = \Drupal::service('theme.manager');
       $theme_manager->alter('bootstrap_colorize_text', $data);
 
@@ -574,7 +585,7 @@ class Bootstrap {
    *   force show the message. If FALSE, it will only log the message. If not
    *   set, the message will be shown based on whether the current user is an
    *   administrator and if the theme has suppressed deprecated warnings.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $message
+   * @param TranslatableMarkup $message
    *   Optional. The message to show/log. If not set, it will be determined
    *   automatically based on the caller.
    */
@@ -637,7 +648,7 @@ class Bootstrap {
    *   Optional. A specific method on the file system service to check for
    *   its existance.
    *
-   * @return \Drupal\Core\File\FileSystemInterface
+   * @return FileSystemInterface
    *   The File System service, if it exists and if $method exists if it was
    *   passed.
    *
@@ -660,10 +671,10 @@ class Bootstrap {
    *
    * @param string $name
    *   The machine name of a theme. If omitted, the active theme will be used.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler object.
    *
-   * @return \Drupal\bootstrap\Theme
+   * @return Theme
    *   A theme object.
    */
   public static function getTheme($name = NULL, ThemeHandlerInterface $theme_handler = NULL) {
@@ -694,7 +705,7 @@ class Bootstrap {
   /**
    * Retrieves the theme handler instance.
    *
-   * @return \Drupal\Core\Extension\ThemeHandlerInterface
+   * @return ThemeHandlerInterface
    *   The theme handler instance.
    */
   public static function getThemeHandler() {
@@ -882,7 +893,7 @@ class Bootstrap {
       ];
 
       // Allow sub-themes to alter this array of patterns.
-      /** @var \Drupal\Core\Theme\ThemeManager $theme_manager */
+      /** @var ThemeManager $theme_manager */
       $theme_manager = \Drupal::service('theme.manager');
       $theme_manager->alter('bootstrap_iconize_text', $data);
 
@@ -1265,7 +1276,7 @@ class Bootstrap {
   /**
    * Checks whether a user is an administrator.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Optional. A specific account to check. If not set, the currently logged
    *   in user account will be used.
    *
@@ -1327,7 +1338,7 @@ class Bootstrap {
    * This is to help support older installations without trigger deprecation
    * notices for newer installations.
    *
-   * @param string|\Drupal\Component\Render\MarkupInterface $message
+   * @param string|MarkupInterface $message
    *   (optional) The translated message to be displayed to the user. For
    *   consistency with other messages, it should begin with a capital letter
    *   and end with a period.
@@ -1357,6 +1368,9 @@ class Bootstrap {
       static::$messenger->addMessage($message, $type, $repeat);
     }
     else {
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // This needs to be replaced, but Rector was not yet able to replace this because the type of message was set with a variable. If you need to continue to use a variable, you might consider using a switch statement.
+      // @noRector
       drupal_set_message($message, $type, $repeat);
     }
   }
@@ -1383,7 +1397,7 @@ class Bootstrap {
       $drupal_static_fast['theme_info'] = &drupal_static(__METHOD__ . '__themeInfo', []);
     }
 
-    /** @var \Drupal\bootstrap\Plugin\PreprocessManager[] $preprocess_managers */
+    /** @var PreprocessManager[] $preprocess_managers */
     $preprocess_managers = &$drupal_static_fast['preprocess_managers'];
     if (!isset($preprocess_managers[$theme_name])) {
       $preprocess_managers[$theme_name] = new PreprocessManager($theme);
@@ -1437,7 +1451,7 @@ class Bootstrap {
     if (isset($info['bootstrap preprocess'])) {
       if ($preprocess_manager->hasDefinition($info['bootstrap preprocess'])) {
         $class = $preprocess_manager->createInstance($info['bootstrap preprocess'], ['theme' => $theme]);
-        /** @var \Drupal\bootstrap\Plugin\Preprocess\PreprocessInterface $class */
+        /** @var PreprocessInterface $class */
         $class->preprocess($variables, $hook, $info);
       }
     }
@@ -1456,10 +1470,10 @@ class Bootstrap {
    *   The path to the template.
    * @param array $variables
    *   The variables to pass to the template.
-   * @param \Drupal\Core\Render\RenderContext $renderContext
+   * @param RenderContext $renderContext
    *   Optional. A RenderContext object to pass to the renderer.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered template.
    *
    * @throws \RuntimeException
@@ -1549,7 +1563,7 @@ class Bootstrap {
   /**
    * Retrieves the Renderer service.
    *
-   * @return \Drupal\Core\Render\Renderer
+   * @return Renderer
    *   The Renderer service.
    */
   public static function renderer() {
@@ -1562,7 +1576,7 @@ class Bootstrap {
   /**
    * Retrieves the Theme Registry service.
    *
-   * @return \Drupal\Core\Theme\Registry
+   * @return Registry
    *   The Theme Registry service.
    */
   public static function themeRegistry() {
@@ -1588,7 +1602,7 @@ class Bootstrap {
   /**
    * Retrieves the Twig service.
    *
-   * @return \Drupal\Core\Template\TwigEnvironment
+   * @return TwigEnvironment
    *   The Twig service.
    */
   public static function twig() {
diff --git a/src/DeprecatedInterface.php b/src/DeprecatedInterface.php
index 45f9b36..5049885 100644
--- a/src/DeprecatedInterface.php
+++ b/src/DeprecatedInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bootstrap;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * Interface DeprecatedInterface.
  */
@@ -10,7 +11,7 @@ interface DeprecatedInterface {
   /**
    * The reason for deprecation.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   A TranslatableMarkup object.
    */
   public function getDeprecatedReason();
diff --git a/src/Plugin/Alter/ThemeRegistry.php b/src/Plugin/Alter/ThemeRegistry.php
index 9961519..e15c6f4 100644
--- a/src/Plugin/Alter/ThemeRegistry.php
+++ b/src/Plugin/Alter/ThemeRegistry.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bootstrap\Plugin\Alter;
 
+use Drupal\bootstrap\Theme;
 use Drupal\bootstrap\Bootstrap;
 use Drupal\bootstrap\Plugin\PreprocessManager;
 use Drupal\Core\Theme\Registry;
@@ -25,7 +26,7 @@ class ThemeRegistry extends Registry implements AlterInterface {
    *
    * Cannot use "$theme" because this is the Registry's ActiveTheme object.
    *
-   * @var \Drupal\bootstrap\Theme
+   * @var Theme
    */
   protected $currentTheme;
 
diff --git a/src/Plugin/Alter/ThemeSuggestions.php b/src/Plugin/Alter/ThemeSuggestions.php
index 50983cc..eb34c3e 100644
--- a/src/Plugin/Alter/ThemeSuggestions.php
+++ b/src/Plugin/Alter/ThemeSuggestions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bootstrap\Plugin\Alter;
 
+use Drupal\bootstrap\Utility\Element;
 use Drupal\bootstrap\Bootstrap;
 use Drupal\bootstrap\Plugin\PluginBase;
 use Drupal\bootstrap\Utility\Variables;
@@ -26,7 +27,7 @@ class ThemeSuggestions extends PluginBase implements AlterInterface {
   /**
    * An element object provided in the variables array, may not be set.
    *
-   * @var \Drupal\bootstrap\Utility\Element|false
+   * @var Element|false
    */
   protected $element;
 
@@ -68,7 +69,7 @@ class ThemeSuggestions extends PluginBase implements AlterInterface {
   /**
    * The variables array object passed via hook_theme_suggestions_alter().
    *
-   * @var \Drupal\bootstrap\Utility\Variables
+   * @var Variables
    */
   protected $variables;
 
@@ -285,7 +286,7 @@ class ThemeSuggestions extends PluginBase implements AlterInterface {
    * @param string $entity_type
    *   Optional. The entity type to attempt to retrieve.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The extracted entity, NULL if entity could not be found.
    */
   protected function getEntityObject($entity_type = 'entity') {
@@ -326,13 +327,12 @@ class ThemeSuggestions extends PluginBase implements AlterInterface {
   /***************************************************************************
    * Deprecated methods (DO NOT USE).
    ***************************************************************************/
-
   /**
    * Adds "bundle" and "view mode" suggestions for an entity.
    *
    * @param array $suggestions
    *   The suggestions array, this is ignored.
-   * @param \Drupal\bootstrap\Utility\Variables $variables
+   * @param Variables $variables
    *   The variables object, this is ignored.
    * @param string $entity_type
    *   Optional. A specific type of entity to look for.
@@ -352,12 +352,12 @@ class ThemeSuggestions extends PluginBase implements AlterInterface {
   /**
    * Extracts the entity from the element(s) passed in the Variables object.
    *
-   * @param \Drupal\bootstrap\Utility\Variables $variables
+   * @param Variables $variables
    *   The Variables object, this is ignored.
    * @param string $entity_type
    *   Optional. The entity type to attempt to retrieve.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The extracted entity, NULL if entity could not be found.
    *
    * @deprecated Since 8.x-3.2. Will be removed in a future release.
diff --git a/src/Plugin/AlterManager.php b/src/Plugin/AlterManager.php
index e5aa219..dcdab26 100644
--- a/src/Plugin/AlterManager.php
+++ b/src/Plugin/AlterManager.php
@@ -14,7 +14,7 @@ class AlterManager extends PluginManager {
   /**
    * Constructs a new \Drupal\bootstrap\Plugin\AlterManager object.
    *
-   * @param \Drupal\bootstrap\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
diff --git a/src/Plugin/Form/FormInterface.php b/src/Plugin/Form/FormInterface.php
index 93d71db..c9bdd1d 100644
--- a/src/Plugin/Form/FormInterface.php
+++ b/src/Plugin/Form/FormInterface.php
@@ -17,7 +17,7 @@ interface FormInterface {
    *
    * @param array $form
    *   Nested array of form elements that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   String representing the name of the form itself. Typically this is the
@@ -28,9 +28,9 @@ interface FormInterface {
   /**
    * The alter method to store the code.
    *
-   * @param \Drupal\bootstrap\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   String representing the name of the form itself. Typically this is the
@@ -43,7 +43,7 @@ interface FormInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateForm(array &$form, FormStateInterface $form_state);
@@ -51,9 +51,9 @@ interface FormInterface {
   /**
    * Form validation handler.
    *
-   * @param \Drupal\bootstrap\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateFormElement(Element $form, FormStateInterface $form_state);
@@ -63,7 +63,7 @@ interface FormInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitForm(array &$form, FormStateInterface $form_state);
@@ -71,9 +71,9 @@ interface FormInterface {
   /**
    * Form submission handler.
    *
-   * @param \Drupal\bootstrap\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitFormElement(Element $form, FormStateInterface $form_state);
diff --git a/src/Plugin/Form/SystemThemeSettings.php b/src/Plugin/Form/SystemThemeSettings.php
index 7b13c85..46ce615 100644
--- a/src/Plugin/Form/SystemThemeSettings.php
+++ b/src/Plugin/Form/SystemThemeSettings.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bootstrap\Plugin\Form;
 
+use Drupal\bootstrap\Theme;
 use Drupal\bootstrap\Bootstrap;
 use Drupal\bootstrap\Plugin\Setting\DeprecatedSettingInterface;
 use Drupal\bootstrap\Utility\Element;
@@ -42,9 +43,9 @@ class SystemThemeSettings extends FormBase implements FormInterface {
   /**
    * Sets up the vertical tab groupings.
    *
-   * @param \Drupal\bootstrap\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function createGroups(Element $form, FormStateInterface $form_state) {
@@ -124,7 +125,7 @@ class SystemThemeSettings extends FormBase implements FormInterface {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitResetHttpRequestCache(array $form, FormStateInterface $form_state) {
@@ -139,7 +140,7 @@ class SystemThemeSettings extends FormBase implements FormInterface {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function ajaxResetHttpRequestCache(array $form, FormStateInterface $form_state) {
@@ -149,12 +150,12 @@ class SystemThemeSettings extends FormBase implements FormInterface {
   /**
    * Retrieves the currently selected theme on the settings form.
    *
-   * @param \Drupal\bootstrap\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\bootstrap\Theme|false
+   * @return Theme|false
    *   The currently selected theme object or FALSE if not a Bootstrap theme.
    */
   public static function getTheme(Element $form, FormStateInterface $form_state) {
diff --git a/src/Plugin/FormManager.php b/src/Plugin/FormManager.php
index 8de5879..981ed28 100644
--- a/src/Plugin/FormManager.php
+++ b/src/Plugin/FormManager.php
@@ -14,7 +14,7 @@ class FormManager extends PluginManager {
   /**
    * Constructs a new \Drupal\bootstrap\Plugin\FormManager object.
    *
-   * @param \Drupal\bootstrap\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
diff --git a/src/Plugin/PluginBase.php b/src/Plugin/PluginBase.php
index 1c8ca3d..677ce8f 100644
--- a/src/Plugin/PluginBase.php
+++ b/src/Plugin/PluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bootstrap\Plugin;
 
+use Drupal\bootstrap\Theme;
 use Drupal\Core\Plugin\PluginBase as CorePluginBase;
 use Drupal\bootstrap\Bootstrap;
 
@@ -15,7 +16,7 @@ class PluginBase extends CorePluginBase {
   /**
    * The currently set theme object.
    *
-   * @var \Drupal\bootstrap\Theme
+   * @var Theme
    */
   protected $theme;
 
diff --git a/src/Plugin/PluginManager.php b/src/Plugin/PluginManager.php
index b1e4b6a..286eace 100644
--- a/src/Plugin/PluginManager.php
+++ b/src/Plugin/PluginManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bootstrap\Plugin;
 
+use Drupal\Core\Extension\ThemeHandlerInterface;
+use Drupal\Core\Theme\ThemeManager;
 use Drupal\bootstrap\Bootstrap;
 use Drupal\bootstrap\Theme;
 use Drupal\Core\Plugin\DefaultPluginManager;
@@ -16,28 +18,28 @@ class PluginManager extends DefaultPluginManager {
   /**
    * The current theme.
    *
-   * @var \Drupal\bootstrap\Theme
+   * @var Theme
    */
   protected $theme;
 
   /**
    * The theme handler to check if theme exists.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The theme manager to invoke alter hooks.
    *
-   * @var \Drupal\Core\Theme\ThemeManager
+   * @var ThemeManager
    */
   protected $themeManager;
 
   /**
    * Creates the discovery object.
    *
-   * @param \Drupal\bootstrap\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    * @param string|bool $subdir
    *   The plugin's subdirectory, for example Plugin/views/filter.
diff --git a/src/Plugin/Preprocess/BootstrapDropdown.php b/src/Plugin/Preprocess/BootstrapDropdown.php
index cba2d20..cea34f0 100644
--- a/src/Plugin/Preprocess/BootstrapDropdown.php
+++ b/src/Plugin/Preprocess/BootstrapDropdown.php
@@ -44,7 +44,7 @@ class BootstrapDropdown extends PreprocessBase implements PreprocessInterface {
   /**
    * Preprocess links in the variables array to convert them from dropbuttons.
    *
-   * @param \Drupal\bootstrap\Utility\Variables $variables
+   * @param Variables $variables
    *   A variables object.
    */
   protected function preprocessLinks(Variables $variables) {
@@ -102,7 +102,7 @@ class BootstrapDropdown extends PreprocessBase implements PreprocessInterface {
 
       $items = Element::createStandalone();
 
-      /** @var \Drupal\bootstrap\Utility\Element $primary_action */
+      /** @var Element $primary_action */
       $primary_action = NULL;
       $links = Element::create($variables->links);
 
diff --git a/src/Plugin/Preprocess/FilterTips.php b/src/Plugin/Preprocess/FilterTips.php
index a41e4b3..5aeab5b 100644
--- a/src/Plugin/Preprocess/FilterTips.php
+++ b/src/Plugin/Preprocess/FilterTips.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bootstrap\Plugin\Preprocess;
 
+use Drupal\filter\FilterFormatInterface;
+use Drupal\filter\Plugin\FilterBase;
 use Drupal\bootstrap\Utility\Variables;
 use Drupal\Core\Url;
 
@@ -20,7 +22,7 @@ class FilterTips extends PreprocessBase implements PreprocessInterface {
    * {@inheritdoc}
    */
   public function preprocessVariables(Variables $variables) {
-    /** @var \Drupal\filter\FilterFormatInterface $current_format */
+    /** @var FilterFormatInterface $current_format */
     $current_format = \Drupal::routeMatch()->getParameter('filter_format');
     $current_format_id = $current_format ? $current_format->id() : FALSE;
 
@@ -66,7 +68,7 @@ class FilterTips extends PreprocessBase implements PreprocessInterface {
       $tips = [];
 
       // Iterate over each format's enabled filters.
-      /** @var \Drupal\filter\Plugin\FilterBase $filter */
+      /** @var FilterBase $filter */
       foreach ($format->filters() as $name => $filter) {
         // Ignore filters that are not enabled.
         if (!$filter->status) {
diff --git a/src/Plugin/Preprocess/PreprocessBase.php b/src/Plugin/Preprocess/PreprocessBase.php
index cf37f8a..1d7bfd2 100644
--- a/src/Plugin/Preprocess/PreprocessBase.php
+++ b/src/Plugin/Preprocess/PreprocessBase.php
@@ -31,7 +31,7 @@ class PreprocessBase extends PluginBase implements PreprocessInterface {
   /**
    * The Variables object.
    *
-   * @var \Drupal\bootstrap\Utility\Variables
+   * @var Variables
    */
   protected $variables;
 
@@ -95,9 +95,9 @@ class PreprocessBase extends PluginBase implements PreprocessInterface {
   /**
    * Preprocess the variables array if an element is present.
    *
-   * @param \Drupal\bootstrap\Utility\Element $element
+   * @param Element $element
    *   The Element object.
-   * @param \Drupal\bootstrap\Utility\Variables $variables
+   * @param Variables $variables
    *   The Variables object.
    */
   protected function preprocessElement(Element $element, Variables $variables) {}
@@ -105,7 +105,7 @@ class PreprocessBase extends PluginBase implements PreprocessInterface {
   /**
    * Preprocess the variables array.
    *
-   * @param \Drupal\bootstrap\Utility\Variables $variables
+   * @param Variables $variables
    *   The Variables object.
    */
   protected function preprocessVariables(Variables $variables) {}
diff --git a/src/Plugin/PreprocessManager.php b/src/Plugin/PreprocessManager.php
index 9ba36f3..a9712ea 100644
--- a/src/Plugin/PreprocessManager.php
+++ b/src/Plugin/PreprocessManager.php
@@ -14,7 +14,7 @@ class PreprocessManager extends PluginManager {
   /**
    * Constructs a new \Drupal\bootstrap\Plugin\PreprocessManager object.
    *
-   * @param \Drupal\bootstrap\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
diff --git a/src/Plugin/Prerender/PrerenderBase.php b/src/Plugin/Prerender/PrerenderBase.php
index 4299047..f601da8 100644
--- a/src/Plugin/Prerender/PrerenderBase.php
+++ b/src/Plugin/Prerender/PrerenderBase.php
@@ -23,7 +23,7 @@ class PrerenderBase implements PrerenderInterface, TrustedCallbackInterface {
   /**
    * Pre-render element callback.
    *
-   * @param \Drupal\bootstrap\Utility\Element $element
+   * @param Element $element
    *   The element object.
    */
   public static function preRenderElement(Element $element) {}
diff --git a/src/Plugin/PrerenderManager.php b/src/Plugin/PrerenderManager.php
index 890b0f9..bc73308 100644
--- a/src/Plugin/PrerenderManager.php
+++ b/src/Plugin/PrerenderManager.php
@@ -16,7 +16,7 @@ class PrerenderManager extends PluginManager implements TrustedCallbackInterface
   /**
    * Constructs a new \Drupal\bootstrap\Plugin\PrerenderManager object.
    *
-   * @param \Drupal\bootstrap\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
diff --git a/src/Plugin/Process/ProcessBase.php b/src/Plugin/Process/ProcessBase.php
index 77bb95e..562cb49 100644
--- a/src/Plugin/Process/ProcessBase.php
+++ b/src/Plugin/Process/ProcessBase.php
@@ -27,9 +27,9 @@ class ProcessBase extends PluginBase implements ProcessInterface {
   /**
    * Process a specific form element.
    *
-   * @param \Drupal\bootstrap\Utility\Element $element
+   * @param Element $element
    *   The element object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/Plugin/Process/ProcessInterface.php b/src/Plugin/Process/ProcessInterface.php
index 3473fbb..205af56 100644
--- a/src/Plugin/Process/ProcessInterface.php
+++ b/src/Plugin/Process/ProcessInterface.php
@@ -20,7 +20,7 @@ interface ProcessInterface {
    *
    * @param array $element
    *   The element render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/Plugin/ProcessManager.php b/src/Plugin/ProcessManager.php
index 5b82dc0..b767199 100644
--- a/src/Plugin/ProcessManager.php
+++ b/src/Plugin/ProcessManager.php
@@ -32,7 +32,7 @@ class ProcessManager extends PluginManager {
   /**
    * Constructs a new \Drupal\bootstrap\Plugin\ProcessManager object.
    *
-   * @param \Drupal\bootstrap\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
@@ -45,7 +45,7 @@ class ProcessManager extends PluginManager {
    *
    * @param array $element
    *   The element render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -115,9 +115,9 @@ class ProcessManager extends PluginManager {
   /**
    * Processes elements with AJAX properties.
    *
-   * @param \Drupal\bootstrap\Utility\Element $element
+   * @param Element $element
    *   The element object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -138,9 +138,9 @@ class ProcessManager extends PluginManager {
   /**
    * Processes elements that have input groups.
    *
-   * @param \Drupal\bootstrap\Utility\Element $element
+   * @param Element $element
    *   The element object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -190,10 +190,10 @@ class ProcessManager extends PluginManager {
   /**
    * Traverses an element to find the closest button.
    *
-   * @param \Drupal\bootstrap\Utility\Element $element
+   * @param Element $element
    *   The element to iterate over.
    *
-   * @return \Drupal\bootstrap\Utility\Element|false
+   * @return Element|false
    *   The first button element or FALSE if no button could be found.
    *
    * @deprecated Will be removed in a future release.
diff --git a/src/Plugin/Provider/ApiProviderBase.php b/src/Plugin/Provider/ApiProviderBase.php
index 2fbc95c..273a38d 100644
--- a/src/Plugin/Provider/ApiProviderBase.php
+++ b/src/Plugin/Provider/ApiProviderBase.php
@@ -115,7 +115,7 @@ abstract class ApiProviderBase extends ProviderBase {
    * @param array $info
    *   Additional information about the file, if any.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\CdnAsset
+   * @return CdnAsset
    *   A CDN Asset object, for a given URL.
    */
   protected function getCdnUrl($library, $version, $file, array $info = []) {
@@ -211,10 +211,10 @@ abstract class ApiProviderBase extends ProviderBase {
    *   should also include the version path prefix as well.
    * @param string $version
    *   A specific version to use.
-   * @param \Drupal\bootstrap\Plugin\Provider\CdnAssets $assets
+   * @param CdnAssets $assets
    *   An existing CdnAssets object, if chaining multiple requests together.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\CdnAssets
+   * @return CdnAssets
    *   A CdnAssets object containing the necessary assets.
    */
   protected function parseAssets(array $data, $library, $version, CdnAssets $assets = NULL) {
@@ -306,10 +306,10 @@ abstract class ApiProviderBase extends ProviderBase {
    *   The library to request.
    * @param string $version
    *   The version to request.
-   * @param \Drupal\bootstrap\Plugin\Provider\CdnAssets $assets
+   * @param CdnAssets $assets
    *   An existing CdnAssets object, if chaining multiple requests together.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\CdnAssets
+   * @return CdnAssets
    *   The CdnAssets provided by the API.
    */
   protected function requestApiAssets($library, $version, CdnAssets $assets = NULL) {
diff --git a/src/Plugin/Provider/CdnAsset.php b/src/Plugin/Provider/CdnAsset.php
index f167cdc..e32fe12 100644
--- a/src/Plugin/Provider/CdnAsset.php
+++ b/src/Plugin/Provider/CdnAsset.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bootstrap\Plugin\Provider;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\bootstrap\Bootstrap;
 use Drupal\bootstrap\Utility\Crypt;
 use Drupal\bootstrap\Utility\Unicode;
@@ -101,7 +102,7 @@ class CdnAsset {
   /**
    * A human readable label for the CDN Asset.
    *
-   * @var \Drupal\Component\Render\MarkupInterface
+   * @var MarkupInterface
    */
   protected $label;
 
@@ -286,7 +287,7 @@ class CdnAsset {
   /**
    * Retrieves the human readable label.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The label.
    */
   public function getLabel() {
diff --git a/src/Plugin/Provider/CdnAssets.php b/src/Plugin/Provider/CdnAssets.php
index 2296f23..d568105 100644
--- a/src/Plugin/Provider/CdnAssets.php
+++ b/src/Plugin/Provider/CdnAssets.php
@@ -13,14 +13,14 @@ class CdnAssets {
   /**
    * An array of CdnAsset objects.
    *
-   * @var \Drupal\bootstrap\Plugin\Provider\CdnAsset[]
+   * @var CdnAsset[]
    */
   protected $assets = [];
 
   /**
    * The human readable label for these assets.
    *
-   * @var \Drupal\Component\Render\MarkupInterface
+   * @var MarkupInterface
    */
   protected $label;
 
@@ -34,7 +34,7 @@ class CdnAssets {
   /**
    * CdnAssets constructor.
    *
-   * @param \Drupal\bootstrap\Plugin\Provider\CdnAsset[] $assets
+   * @param CdnAsset[] $assets
    *   Optional. An array of CdnAsset objects to set.
    */
   public function __construct(array $assets = []) {
@@ -51,7 +51,7 @@ class CdnAssets {
    *   that specific type. If not set, all assets are retrieved regardless
    *   if they are minified or not.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\CdnAsset[]
+   * @return CdnAsset[]
    *   An array of CdnAsset objects.
    */
   public function all($minified = NULL) {
@@ -68,7 +68,7 @@ class CdnAssets {
   /**
    * Appends a CdnAsset object to the list.
    *
-   * @param \Drupal\bootstrap\Plugin\Provider\CdnAsset $asset
+   * @param CdnAsset $asset
    *   A CdnAsset object.
    */
   public function append(CdnAsset $asset) {
@@ -83,7 +83,7 @@ class CdnAssets {
   /**
    * Appends an array of CdnAsset objects to the list.
    *
-   * @param \Drupal\bootstrap\Plugin\Provider\CdnAsset[] $assets
+   * @param CdnAsset[] $assets
    *   An array of CdnAsset objects.
    */
   public function appendAssets(array $assets) {
@@ -104,7 +104,7 @@ class CdnAssets {
    *   that specific type. If not set, all assets are retrieved regardless
    *   if they are minified or not.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\CdnAsset[]
+   * @return CdnAsset[]
    *   An array of CdnAsset objects.
    */
   public function get($type, $minified = NULL) {
@@ -129,7 +129,7 @@ class CdnAssets {
    * Note: if the label isn't yet set, it will attempt to retrieve the label
    * from the first available asset.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The label.
    */
   public function getLabel() {
@@ -146,7 +146,7 @@ class CdnAssets {
    * Note: if the library isn't yet set, it will attempt to retrieve the library
    * from the first available asset.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The library.
    */
   public function getLibrary() {
@@ -243,7 +243,7 @@ class CdnAssets {
   /**
    * Prepends a CdnAsset object to the list.
    *
-   * @param \Drupal\bootstrap\Plugin\Provider\CdnAsset $asset
+   * @param CdnAsset $asset
    *   A CdnAsset object.
    */
   public function prepend(CdnAsset $asset) {
@@ -258,7 +258,7 @@ class CdnAssets {
   /**
    * Prepends an array of CdnAsset objects to the list.
    *
-   * @param \Drupal\bootstrap\Plugin\Provider\CdnAsset[] $assets
+   * @param CdnAsset[] $assets
    *   An array of CdnAsset objects.
    */
   public function prependAssets(array $assets) {
@@ -270,7 +270,7 @@ class CdnAssets {
   /**
    * Retrieves all the set CDN Asset objects, as an array.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\CdnAsset[]
+   * @return CdnAsset[]
    *   The CDN Asset objects.
    */
   public function toArray() {
@@ -333,7 +333,7 @@ class CdnAssets {
   /**
    * Sets the label.
    *
-   * @param \Drupal\Component\Render\MarkupInterface $label
+   * @param MarkupInterface $label
    *   The label to set.
    *
    * @return static
diff --git a/src/Plugin/Provider/Custom.php b/src/Plugin/Provider/Custom.php
index d4c9888..5c32c75 100644
--- a/src/Plugin/Provider/Custom.php
+++ b/src/Plugin/Provider/Custom.php
@@ -138,7 +138,7 @@ class Custom extends ProviderBase {
    * @param string[] $urls
    *   An array of URLs to process.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\CdnAssets
+   * @return CdnAssets
    *   A CdnAssets object.
    */
   protected function parseAssets(array $urls) {
diff --git a/src/Plugin/Provider/ProviderBase.php b/src/Plugin/Provider/ProviderBase.php
index 8c94254..9956a74 100644
--- a/src/Plugin/Provider/ProviderBase.php
+++ b/src/Plugin/Provider/ProviderBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\bootstrap\Plugin\Provider;
 
+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
+use Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface;
+use Drupal\bootstrap\SerializedResponse;
+use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\bootstrap\Bootstrap;
 use Drupal\bootstrap\Plugin\PluginBase;
 use Drupal\bootstrap\Plugin\ProviderManager;
@@ -29,14 +33,14 @@ class ProviderBase extends PluginBase implements ProviderInterface {
   /**
    * The cache backend used for storing various permanent CDN Provider data.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected $keyValue;
 
   /**
    * The cache backend used for storing various expirable CDN Provider data.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $keyValueExpirable;
 
@@ -52,14 +56,14 @@ class ProviderBase extends PluginBase implements ProviderInterface {
   /**
    * The currently set CDN assets, keyed by a hash identifier.
    *
-   * @var \Drupal\bootstrap\Plugin\Provider\CdnAssets[]
+   * @var CdnAssets[]
    */
   protected $cdnAssets;
 
   /**
    * A list of currently set Exception objects.
    *
-   * @var \Drupal\bootstrap\Plugin\Provider\ProviderException[]
+   * @var ProviderException[]
    */
   protected $cdnExceptions = [];
 
@@ -202,7 +206,7 @@ class ProviderBase extends PluginBase implements ProviderInterface {
    * @param string $theme
    *   A specific set of themed assets to return, if any.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\CdnAssets
+   * @return CdnAssets
    *   A CdnAssets object.
    */
   protected function discoverCdnAssets($version, $theme = NULL) {
@@ -444,7 +448,7 @@ class ProviderBase extends PluginBase implements ProviderInterface {
   /**
    * Retrieves a permanent key/value storage instance.
    *
-   * @return \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @return KeyValueStoreInterface
    *   A permanent key/value storage instance.
    */
   protected function getKeyValue() {
@@ -457,7 +461,7 @@ class ProviderBase extends PluginBase implements ProviderInterface {
   /**
    * Retrieves a expirable key/value storage instance.
    *
-   * @return \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @return KeyValueStoreExpirableInterface
    *   An expirable key/value storage instance.
    */
   protected function getKeyValueExpirable() {
@@ -509,7 +513,7 @@ class ProviderBase extends PluginBase implements ProviderInterface {
    * @param array $options
    *   The options to pass to the HTTP client.
    *
-   * @return \Drupal\bootstrap\SerializedResponse
+   * @return SerializedResponse
    *   A SerializedResponse object.
    */
   protected function request($url, array $options = []) {
@@ -529,7 +533,7 @@ class ProviderBase extends PluginBase implements ProviderInterface {
 
     // Invalidate library info if this provider is the one currently used.
     if ($this->theme->getCdnProvider()->getPluginId() === $this->pluginId) {
-      /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $invalidator */
+      /** @var CacheTagsInvalidatorInterface $invalidator */
       $invalidator = \Drupal::service('cache_tags.invalidator');
       $invalidator->invalidateTags(['library_info']);
     }
@@ -649,7 +653,7 @@ class ProviderBase extends PluginBase implements ProviderInterface {
         $fileSystem->prepareDirectory($provider_path, $options);
       }
       else {
-        file_prepare_directory($provider_path, $options);
+        \Drupal::service('file_system')->prepareDirectory($provider_path, $options);
       }
 
       // Use manually imported API data, if it exists.
diff --git a/src/Plugin/Provider/ProviderException.php b/src/Plugin/Provider/ProviderException.php
index 24624f2..1696d4b 100644
--- a/src/Plugin/Provider/ProviderException.php
+++ b/src/Plugin/Provider/ProviderException.php
@@ -10,14 +10,14 @@ class ProviderException extends \RuntimeException {
   /**
    * The CDN Provider that threw the exception.
    *
-   * @var \Drupal\bootstrap\Plugin\Provider\ProviderInterface
+   * @var ProviderInterface
    */
   protected $provider;
 
   /**
    * ProviderException constructor.
    *
-   * @param \Drupal\bootstrap\Plugin\Provider\ProviderInterface $provider
+   * @param ProviderInterface $provider
    *   The CDN Provider that threw the exception.
    * @param string $message
    *   The exception message.
@@ -34,7 +34,7 @@ class ProviderException extends \RuntimeException {
   /**
    * Retrieves the CDN Provider instance.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\ProviderInterface
+   * @return ProviderInterface
    *   The CDN Provider instance.
    */
   public function getProvider() {
diff --git a/src/Plugin/Provider/ProviderInterface.php b/src/Plugin/Provider/ProviderInterface.php
index 4a19861..d24a32b 100644
--- a/src/Plugin/Provider/ProviderInterface.php
+++ b/src/Plugin/Provider/ProviderInterface.php
@@ -130,7 +130,7 @@ interface ProviderInterface extends PluginInspectionInterface, DerivativeInspect
    *   Optional. A specific set of themed assets to return, if any. If not set,
    *   the setting stored in the active theme will be used.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\CdnAssets
+   * @return CdnAssets
    *   A CdnAssets object.
    */
   public function getCdnAssets($version = NULL, $theme = NULL);
@@ -145,7 +145,7 @@ interface ProviderInterface extends PluginInspectionInterface, DerivativeInspect
    *   Flag indicating whether to remove the Exceptions once they have been
    *   retrieved.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\ProviderException[]
+   * @return ProviderException[]
    *   An array of CDN ProviderException objects, if any.
    */
   public function getCdnExceptions($reset = TRUE);
@@ -165,7 +165,7 @@ interface ProviderInterface extends PluginInspectionInterface, DerivativeInspect
    *   Optional. A specific version of themes to retrieve. If not set, the
    *   currently set CDN version of the active theme will be used.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\CdnAssets[]
+   * @return CdnAssets[]
    *   An associative array of CDN assets, similar to what is returned in
    *   \Drupal\bootstrap\Plugin\Provider\ProviderBase::getCdnAssets(), but
    *   keyed by individual theme names.
@@ -231,7 +231,7 @@ interface ProviderInterface extends PluginInspectionInterface, DerivativeInspect
    * @param callable $callable
    *   The callback to execute.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\ProviderException[]
+   * @return ProviderException[]
    *   An array of newly generated ProviderException objects, if any.
    */
   public function trackCdnExceptions(callable $callable);
diff --git a/src/Plugin/ProviderManager.php b/src/Plugin/ProviderManager.php
index 3e84e6c..43482a9 100644
--- a/src/Plugin/ProviderManager.php
+++ b/src/Plugin/ProviderManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bootstrap\Plugin;
 
+use Drupal\bootstrap\Plugin\Provider\Broken;
+use Drupal\bootstrap\Plugin\Provider\ProviderInterface;
 use Drupal\bootstrap\Bootstrap;
 use Drupal\bootstrap\Theme;
 use Drupal\Component\Plugin\FallbackPluginManagerInterface;
@@ -22,14 +24,14 @@ class ProviderManager extends PluginManager implements FallbackPluginManagerInte
   /**
    * The Broken CDN Provider.
    *
-   * @var \Drupal\bootstrap\Plugin\Provider\Broken
+   * @var Broken
    */
   protected static $broken;
 
   /**
    * Constructs a new \Drupal\bootstrap\Plugin\ProviderManager object.
    *
-   * @param \Drupal\bootstrap\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
@@ -46,7 +48,7 @@ class ProviderManager extends PluginManager implements FallbackPluginManagerInte
    * @param array $configuration
    *   Optional. An array of configuration relevant to the plugin instance.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\ProviderInterface
+   * @return ProviderInterface
    *   A CDN Provider instance.
    */
   public function get($provider, array $configuration = []) {
@@ -65,7 +67,7 @@ class ProviderManager extends PluginManager implements FallbackPluginManagerInte
    */
   public function processDefinition(&$definition, $plugin_id) {
     parent::processDefinition($definition, $plugin_id);
-    /** @var \Drupal\bootstrap\Plugin\Provider\ProviderInterface $provider */
+    /** @var ProviderInterface $provider */
     $provider = new $definition['class'](['theme' => $this->theme], $plugin_id, $definition);
     $provider->processDefinition($definition, $plugin_id);
   }
@@ -73,7 +75,7 @@ class ProviderManager extends PluginManager implements FallbackPluginManagerInte
   /**
    * Returns the Broken CDN Provider instance.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\Broken
+   * @return Broken
    *   The Broken CDN Provider.
    */
   public static function broken() {
@@ -86,7 +88,7 @@ class ProviderManager extends PluginManager implements FallbackPluginManagerInte
   /**
    * Loads a CDN Provider.
    *
-   * @param \Drupal\bootstrap\Theme|string $theme
+   * @param Theme|string $theme
    *   Optional. A theme to associate with the provider. If not set, the
    *   active theme will be used.
    * @param string $provider
@@ -95,7 +97,7 @@ class ProviderManager extends PluginManager implements FallbackPluginManagerInte
    * @param array $configuration
    *   Optional. An array of configuration relevant to the plugin instance.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\ProviderInterface
+   * @return ProviderInterface
    *   A CDN Provider instance.
    */
   public static function load($theme = NULL, $provider = NULL, array $configuration = []) {
diff --git a/src/Plugin/Setting/Advanced/Cdn/CdnCacheTtlBase.php b/src/Plugin/Setting/Advanced/Cdn/CdnCacheTtlBase.php
index 546b05c..e9073fa 100644
--- a/src/Plugin/Setting/Advanced/Cdn/CdnCacheTtlBase.php
+++ b/src/Plugin/Setting/Advanced/Cdn/CdnCacheTtlBase.php
@@ -7,7 +7,7 @@ namespace Drupal\bootstrap\Plugin\Setting\Advanced\Cdn;
  *
  * @todo Move namespace up one.
  */
-
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\bootstrap\Plugin\Provider\ProviderInterface;
 use Drupal\bootstrap\Utility\Element;
 use Drupal\Core\Form\FormStateInterface;
@@ -22,7 +22,7 @@ abstract class CdnCacheTtlBase extends CdnProviderBase {
   /**
    * The DateFormatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   static protected $dateFormatter;
 
@@ -84,7 +84,7 @@ abstract class CdnCacheTtlBase extends CdnProviderBase {
   /**
    * Retrieves the DateFormatter service.
    *
-   * @return \Drupal\Core\Datetime\DateFormatterInterface
+   * @return DateFormatterInterface
    *   The DateFormatter service.
    */
   protected function getDateFormatter() {
diff --git a/src/Plugin/Setting/Advanced/Cdn/CdnCustom.php b/src/Plugin/Setting/Advanced/Cdn/CdnCustom.php
index 538d369..060e2d6 100644
--- a/src/Plugin/Setting/Advanced/Cdn/CdnCustom.php
+++ b/src/Plugin/Setting/Advanced/Cdn/CdnCustom.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bootstrap\Plugin\Setting\Advanced\Cdn;
 
+use Drupal\bootstrap\Plugin\Provider\Custom;
 use Drupal\bootstrap\Plugin\Form\SystemThemeSettings;
 use Drupal\bootstrap\Plugin\ProviderManager;
 use Drupal\bootstrap\Utility\Element;
@@ -90,7 +91,7 @@ class CdnCustom extends CdnProviderBase {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitApplyCss(array $form, FormStateInterface $form_state) {
@@ -110,7 +111,7 @@ class CdnCustom extends CdnProviderBase {
 
     $theme = SystemThemeSettings::getTheme($form, $form_state);
 
-    /** @var \Drupal\bootstrap\Plugin\Provider\Custom $provider */
+    /** @var Custom $provider */
     $provider = ProviderManager::load($theme, 'custom');
 
     $urls = array_filter(array_map('trim', preg_split("/\r\n|\n/", $form_state->getValue('cdn_custom', ''))));
diff --git a/src/Plugin/Setting/Advanced/Cdn/CdnProvider.php b/src/Plugin/Setting/Advanced/Cdn/CdnProvider.php
index 5ad58bb..278e5b1 100644
--- a/src/Plugin/Setting/Advanced/Cdn/CdnProvider.php
+++ b/src/Plugin/Setting/Advanced/Cdn/CdnProvider.php
@@ -150,7 +150,7 @@ class CdnProvider extends CdnProviderBase {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitResetProviderCache(array $form, FormStateInterface $form_state) {
@@ -208,9 +208,9 @@ class CdnProvider extends CdnProviderBase {
   /**
    * Imports data for a provider that was manually uploaded in theme settings.
    *
-   * @param \Drupal\bootstrap\Utility\Element $group
+   * @param Element $group
    *   The setting group Element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @todo Import functionality is deprecated, remove in a future release.
diff --git a/src/Plugin/Setting/Advanced/Cdn/CdnProviderBase.php b/src/Plugin/Setting/Advanced/Cdn/CdnProviderBase.php
index 3b7d703..a95d6b1 100644
--- a/src/Plugin/Setting/Advanced/Cdn/CdnProviderBase.php
+++ b/src/Plugin/Setting/Advanced/Cdn/CdnProviderBase.php
@@ -31,7 +31,7 @@ abstract class CdnProviderBase extends SettingBase {
   /**
    * The active provider based on form value or theme setting.
    *
-   * @var \Drupal\bootstrap\Plugin\Provider\ProviderInterface
+   * @var ProviderInterface
    */
   protected $provider;
 
@@ -56,7 +56,7 @@ abstract class CdnProviderBase extends SettingBase {
   /**
    * Handles any CDN Provider exceptions that may have been thrown.
    *
-   * @param \Drupal\bootstrap\Plugin\Provider\ProviderInterface $provider
+   * @param ProviderInterface $provider
    *   A CDN Provider to check.
    * @param bool $reset
    *   Flag indicating whether to remove the Exceptions once they have been
@@ -84,7 +84,7 @@ abstract class CdnProviderBase extends SettingBase {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -104,7 +104,7 @@ abstract class CdnProviderBase extends SettingBase {
   /**
    * Retrieves the active CDN Provider.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\ProviderInterface
+   * @return ProviderInterface
    *   A CDN Provider.
    */
   protected function getProvider() {
@@ -117,10 +117,10 @@ abstract class CdnProviderBase extends SettingBase {
   /**
    * Sets the #ajax property to rebuild the entire CDN Providers container.
    *
-   * @param \Drupal\bootstrap\Utility\Element|array $element
+   * @param Element|array $element
    *   An Element to modify.
    *
-   * @return \Drupal\bootstrap\Utility\Element
+   * @return Element
    *   The Element passed.
    */
   protected function setCdnProvidersAjax($element) {
diff --git a/src/Plugin/Setting/DeprecatedSettingInterface.php b/src/Plugin/Setting/DeprecatedSettingInterface.php
index 72e7bed..1192f55 100644
--- a/src/Plugin/Setting/DeprecatedSettingInterface.php
+++ b/src/Plugin/Setting/DeprecatedSettingInterface.php
@@ -12,7 +12,7 @@ interface DeprecatedSettingInterface extends DeprecatedInterface, SettingInterfa
   /**
    * The setting that replaces the deprecated setting.
    *
-   * @return \Drupal\bootstrap\Plugin\Setting\SettingInterface
+   * @return SettingInterface
    *   The replacement setting.
    */
   public function getDeprecatedReplacementSetting();
diff --git a/src/Plugin/Setting/Schemas.php b/src/Plugin/Setting/Schemas.php
index 69f8b79..c88ab3f 100644
--- a/src/Plugin/Setting/Schemas.php
+++ b/src/Plugin/Setting/Schemas.php
@@ -79,7 +79,7 @@ class Schemas extends SettingBase {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function updateTheme(array $form, FormStateInterface $form_state) {
diff --git a/src/Plugin/Setting/SettingBase.php b/src/Plugin/Setting/SettingBase.php
index 3a48802..1a85c45 100644
--- a/src/Plugin/Setting/SettingBase.php
+++ b/src/Plugin/Setting/SettingBase.php
@@ -226,7 +226,7 @@ class SettingBase extends PluginBase implements SettingInterface {
   /**
    * Retrieves the setting value used to populate the form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return mixed
diff --git a/src/Plugin/Setting/SettingInterface.php b/src/Plugin/Setting/SettingInterface.php
index 9da31bf..461bebd 100644
--- a/src/Plugin/Setting/SettingInterface.php
+++ b/src/Plugin/Setting/SettingInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bootstrap\Plugin\Setting;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\bootstrap\Plugin\Form\FormInterface;
 use Drupal\bootstrap\Utility\Element;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -17,7 +19,7 @@ interface SettingInterface extends PluginInspectionInterface, FormInterface {
   /**
    * Indicates whether a setting is accessible.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The value to supply to the setting's #access property.
    */
   public function access();
@@ -64,7 +66,7 @@ interface SettingInterface extends PluginInspectionInterface, FormInterface {
   /**
    * Retrieves the setting's description, if any.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The setting description.
    */
   public function getDescription();
@@ -74,10 +76,10 @@ interface SettingInterface extends PluginInspectionInterface, FormInterface {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\bootstrap\Utility\Element
+   * @return Element
    *   The group element object.
    *
    * @deprecated Will be removed in a future release. Use \Drupal\bootstrap\Plugin\Setting\SettingInterface::getGroupElement
@@ -87,12 +89,12 @@ interface SettingInterface extends PluginInspectionInterface, FormInterface {
   /**
    * Retrieves the group form element the setting belongs to.
    *
-   * @param \Drupal\bootstrap\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\bootstrap\Utility\Element
+   * @return Element
    *   The group element object.
    */
   public function getGroupElement(Element $form, FormStateInterface $form_state);
@@ -110,10 +112,10 @@ interface SettingInterface extends PluginInspectionInterface, FormInterface {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\bootstrap\Utility\Element
+   * @return Element
    *   The setting element object.
    *
    * @deprecated Will be removed in a future release. Use \Drupal\bootstrap\Plugin\Setting\SettingInterface::getSettingElement
@@ -131,12 +133,12 @@ interface SettingInterface extends PluginInspectionInterface, FormInterface {
   /**
    * Retrieves the form element for the setting.
    *
-   * @param \Drupal\bootstrap\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\bootstrap\Utility\Element
+   * @return Element
    *   The setting element object.
    */
   public function getSettingElement(Element $form, FormStateInterface $form_state);
@@ -154,7 +156,7 @@ interface SettingInterface extends PluginInspectionInterface, FormInterface {
    *
    * @param array $values
    *   An array of values, keyed by deprecated setting name.
-   * @param \Drupal\bootstrap\Plugin\Setting\DeprecatedSettingInterface[] $deprecated
+   * @param DeprecatedSettingInterface[] $deprecated
    *   An array of deprecated Setting objects indicating this setting replaced
    *   theirs, keyed by deprecated setting name.
    *
diff --git a/src/Plugin/SettingManager.php b/src/Plugin/SettingManager.php
index f0b7e95..4888c44 100644
--- a/src/Plugin/SettingManager.php
+++ b/src/Plugin/SettingManager.php
@@ -28,7 +28,7 @@ class SettingManager extends PluginManager {
   /**
    * Constructs a new \Drupal\bootstrap\Plugin\SettingManager object.
    *
-   * @param \Drupal\bootstrap\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
diff --git a/src/Plugin/Update/UpdateInterface.php b/src/Plugin/Update/UpdateInterface.php
index 76720e6..181df5a 100644
--- a/src/Plugin/Update/UpdateInterface.php
+++ b/src/Plugin/Update/UpdateInterface.php
@@ -57,7 +57,7 @@ interface UpdateInterface {
    * Used to determine whether or not the update should apply only to itself
    * (the theme that implemented the plugin) and none of its sub-themes.
    *
-   * @return \Drupal\bootstrap\Theme
+   * @return Theme
    *   The theme.
    */
   public function getTheme();
@@ -82,7 +82,7 @@ interface UpdateInterface {
    * the update has failed, but do not wish to throw an exception, simply
    * return FALSE and a generic "Update failed" message will appear.
    *
-   * @param \Drupal\bootstrap\Theme $theme
+   * @param Theme $theme
    *   The theme that the update is being applied to.
    * @param array $context
    *   The Batch API context array, passed by reference. Note: be very careful
diff --git a/src/Plugin/UpdateManager.php b/src/Plugin/UpdateManager.php
index c0fd20d..bc143c5 100644
--- a/src/Plugin/UpdateManager.php
+++ b/src/Plugin/UpdateManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bootstrap\Plugin;
 
+use Drupal\bootstrap\Plugin\Update\UpdateInterface;
 use Drupal\bootstrap\Theme;
 use Drupal\Component\Utility\SortArray;
 
@@ -15,7 +16,7 @@ class UpdateManager extends PluginManager {
   /**
    * Constructs a new \Drupal\bootstrap\Plugin\UpdateManager object.
    *
-   * @param \Drupal\bootstrap\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
@@ -65,7 +66,7 @@ class UpdateManager extends PluginManager {
    *   Toggle determining whether or not to include private updates, intended
    *   for only the theme that created it. Defaults to: FALSE.
    *
-   * @return \Drupal\bootstrap\Plugin\Update\UpdateInterface[]
+   * @return UpdateInterface[]
    *   An associative array containing update objects, keyed by their version.
    */
   public function getPendingUpdates($private = FALSE) {
@@ -87,7 +88,7 @@ class UpdateManager extends PluginManager {
    *   Toggle determining whether or not to include private updates, intended
    *   for only the theme that created it. Defaults to: FALSE.
    *
-   * @return \Drupal\bootstrap\Plugin\Update\UpdateInterface[]
+   * @return UpdateInterface[]
    *   An associative array containing update objects, keyed by their version.
    */
   public function getUpdates($private = FALSE) {
diff --git a/src/SerializedResponse.php b/src/SerializedResponse.php
index 2464a9c..0a44680 100644
--- a/src/SerializedResponse.php
+++ b/src/SerializedResponse.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bootstrap;
 
+use Drupal\Component\Serialization\SerializationInterface;
 use GuzzleHttp\Psr7\Response as GuzzleResponse;
 use GuzzleHttp\Psr7\Request as GuzzleRequest;
 use Symfony\Component\HttpFoundation\Request;
@@ -36,7 +37,7 @@ class SerializedResponse extends Response {
   /**
    * A format specific Serialization service.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected static $serializer;
 
@@ -191,7 +192,7 @@ class SerializedResponse extends Response {
   /**
    * Retrieves a format specific Serialization service.
    *
-   * @return \Drupal\Component\Serialization\SerializationInterface|false
+   * @return SerializationInterface|false
    *   A format specific Serialization service.
    */
   protected function getSerializer() {
diff --git a/src/Theme.php b/src/Theme.php
index 2b42588..d09d1f9 100644
--- a/src/Theme.php
+++ b/src/Theme.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\bootstrap;
 
+use Drupal\bootstrap\Plugin\Provider\ProviderInterface;
+use Drupal\bootstrap\Plugin\Setting\SettingInterface;
+use Drupal\bootstrap\Plugin\Update\UpdateInterface;
 use Drupal\bootstrap\Plugin\ProviderManager;
 use Drupal\bootstrap\Plugin\SettingManager;
 use Drupal\bootstrap\Plugin\UpdateManager;
@@ -65,7 +68,7 @@ class Theme {
   /**
    * A list of available CDN Provider instances.
    *
-   * @var \Drupal\bootstrap\Plugin\Provider\ProviderInterface[]
+   * @var ProviderInterface[]
    */
   protected $cdnProviders;
 
@@ -119,14 +122,14 @@ class Theme {
   /**
    * An array of Setting instances.
    *
-   * @var \Drupal\bootstrap\Plugin\Setting\SettingInterface[]
+   * @var SettingInterface[]
    */
   protected $settings;
 
   /**
    * The current theme Extension object.
    *
-   * @var \Drupal\Core\Extension\Extension
+   * @var Extension
    */
   protected $theme;
 
@@ -140,23 +143,23 @@ class Theme {
   /**
    * Theme handler object.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The update plugin manager.
    *
-   * @var \Drupal\bootstrap\Plugin\UpdateManager
+   * @var UpdateManager
    */
   protected $updateManager;
 
   /**
    * Theme constructor.
    *
-   * @param \Drupal\Core\Extension\Extension $theme
+   * @param Extension $theme
    *   A theme \Drupal\Core\Extension\Extension object.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler object.
    */
   public function __construct(Extension $theme, ThemeHandlerInterface $theme_handler) {
@@ -390,7 +393,7 @@ class Theme {
    * @param mixed $default
    *   Optional. The default value to use if $name does not exist.
    *
-   * @return mixed|\Drupal\bootstrap\Utility\StorageItem
+   * @return mixed|StorageItem
    *   The cached value for $name.
    */
   public function getCache($name, array $context = [], $default = []) {
@@ -419,7 +422,7 @@ class Theme {
   /**
    * Retrieves the set CDN Provider instance for the theme.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\ProviderInterface
+   * @return ProviderInterface
    *   A CDN Provider instance.
    */
   public function getCdnProvider() {
@@ -431,7 +434,7 @@ class Theme {
   /**
    * Retrieves all available CDN Provider instances.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\ProviderInterface[]
+   * @return ProviderInterface[]
    *   All CDN Provider instances.
    */
   public function getCdnProviders() {
@@ -492,7 +495,7 @@ class Theme {
   /**
    * Retrieves pending updates for the theme.
    *
-   * @return \Drupal\bootstrap\Plugin\Update\UpdateInterface[]
+   * @return UpdateInterface[]
    *   An array of update plugin objects.
    */
   public function getPendingUpdates() {
@@ -552,7 +555,7 @@ class Theme {
    *   Flag indicating whether to reset any cached definitions and rebuild
    *   the settings.
    *
-   * @return \Drupal\bootstrap\Plugin\Setting\SettingInterface|\Drupal\bootstrap\Plugin\Setting\SettingInterface[]|null
+   * @return SettingInterface|SettingInterface[]|null
    *   If $name was provided, it will either return a specific setting plugin
    *   instance or NULL if not set. If $name was omitted it will return an array
    *   of setting plugin instances, keyed by their name.
@@ -585,7 +588,7 @@ class Theme {
   /**
    * Retrieves the theme's cache from the database.
    *
-   * @return \Drupal\bootstrap\Utility\Storage
+   * @return Storage
    *   The cache object.
    */
   public function getStorage() {
@@ -610,7 +613,7 @@ class Theme {
   /**
    * Retrieves the update plugin manager for the theme.
    *
-   * @return \Drupal\bootstrap\Plugin\UpdateManager|false
+   * @return UpdateManager|false
    *   The Update plugin manager or FALSE if theme is not Bootstrap based.
    */
   public function getUpdateManager() {
@@ -745,7 +748,7 @@ class Theme {
   /**
    * Retrieves the theme settings instance.
    *
-   * @return \Drupal\bootstrap\ThemeSettings
+   * @return ThemeSettings
    *   All settings.
    */
   public function settings() {
@@ -773,7 +776,6 @@ class Theme {
   /****************************************************************************
    * Deprecated methods.
    ***************************************************************************/
-
   /**
    * Retrieves the CDN Provider.
    *
@@ -781,7 +783,7 @@ class Theme {
    *   Optional. A CDN Provider name. If not set, defaults to the CDN
    *   provider set in the theme settings.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\ProviderInterface|false
+   * @return ProviderInterface|false
    *   A provider instance or FALSE if no provider is set.
    *
    * @deprecated in 8.x-3.18, will be removed in a future release.
@@ -801,7 +803,7 @@ class Theme {
   /**
    * Retrieves all CDN Providers.
    *
-   * @return \Drupal\bootstrap\Plugin\Provider\ProviderInterface[]
+   * @return ProviderInterface[]
    *   All provider instances.
    *
    * @deprecated in 8.x-3.18, will be removed in a future release.
@@ -815,7 +817,7 @@ class Theme {
   /**
    * Retrieves the theme's setting plugin instances.
    *
-   * @return \Drupal\bootstrap\Plugin\Setting\SettingInterface[]
+   * @return SettingInterface[]
    *   An associative array of setting objects, keyed by their name.
    *
    * @deprecated in 8.x-3.1, will be removed in a future release.
diff --git a/src/ThemeSettings.php b/src/ThemeSettings.php
index 64da947..80caa76 100644
--- a/src/ThemeSettings.php
+++ b/src/ThemeSettings.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bootstrap;
 
+use Drupal\bootstrap\Plugin\Setting\SettingInterface;
+use Drupal\Core\File\FileUrlGeneratorInterface;
 use Drupal\bootstrap\Plugin\Setting\DeprecatedSettingInterface;
 use Drupal\Core\Theme\ThemeSettings as CoreThemeSettings;
 use Drupal\Component\Utility\DiffArray;
@@ -36,14 +38,14 @@ class ThemeSettings extends Config {
   /**
    * The current theme object.
    *
-   * @var \Drupal\bootstrap\Theme
+   * @var Theme
    */
   protected $theme;
 
   /**
    * A list of available Setting plugins.
    *
-   * @var \Drupal\bootstrap\Plugin\Setting\SettingInterface[]
+   * @var SettingInterface[]
    */
   protected $settings;
 
@@ -58,7 +60,7 @@ class ThemeSettings extends Config {
     $this->settings = $theme->getSettingPlugin();
 
     // Filter out the deprecated settings.
-    /** @var \Drupal\bootstrap\Plugin\Setting\DeprecatedSettingInterface[] $deprecated */
+    /** @var DeprecatedSettingInterface[] $deprecated */
     $deprecated = array_filter($this->settings, function ($setting) {
       return $setting instanceof DeprecatedSettingInterface;
     });
@@ -235,7 +237,7 @@ class ThemeSettings extends Config {
   /**
    * Retrieves a specific theme's stored config settings.
    *
-   * @param \Drupal\bootstrap\Theme $theme
+   * @param Theme $theme
    *   A theme object.
    * @param bool $active_theme
    *   Flag indicating whether or not $theme is the active theme.
@@ -245,7 +247,7 @@ class ThemeSettings extends Config {
    */
   public function getThemeConfig(Theme $theme, $active_theme = FALSE) {
     $config = new CoreThemeSettings($theme->getName());
-    /** @var \Drupal\Core\File\FileUrlGeneratorInterface $file_url_generator */
+    /** @var FileUrlGeneratorInterface $file_url_generator */
     $file_url_generator = \Drupal::service('file_url_generator');
 
     // Retrieve configured theme-specific settings, if any.
diff --git a/src/Traits/FormAutoloadFixTrait.php b/src/Traits/FormAutoloadFixTrait.php
index a5f44b4..02f3fd0 100644
--- a/src/Traits/FormAutoloadFixTrait.php
+++ b/src/Traits/FormAutoloadFixTrait.php
@@ -15,7 +15,7 @@ trait FormAutoloadFixTrait {
    *
    * This may be necessary if you notice your AJAX callbacks not working.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public static function formAutoloadFix(FormStateInterface $form_state) {
diff --git a/src/Utility/ArrayObject.php b/src/Utility/ArrayObject.php
index 11d3963..2e47f3c 100644
--- a/src/Utility/ArrayObject.php
+++ b/src/Utility/ArrayObject.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bootstrap\Utility;
 
+use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Render\AttachmentsInterface;
@@ -134,7 +135,7 @@ class ArrayObject implements \IteratorAggregate, \ArrayAccess, \Serializable, \C
   /**
    * Merges an object's cacheable metadata into the variables array.
    *
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface|mixed $object
+   * @param CacheableDependencyInterface|mixed $object
    *   The object whose cacheability metadata to retrieve. If it implements
    *   CacheableDependencyInterface, its cacheability metadata will be used,
    *   otherwise, the passed in object must be assumed to be uncacheable, so
diff --git a/src/Utility/DrupalAttributes.php b/src/Utility/DrupalAttributes.php
index 5eb20a5..39036ae 100644
--- a/src/Utility/DrupalAttributes.php
+++ b/src/Utility/DrupalAttributes.php
@@ -109,7 +109,7 @@ class DrupalAttributes extends ArrayObject {
   /**
    * Stored attribute instances.
    *
-   * @var \Drupal\bootstrap\Utility\Attributes[]
+   * @var Attributes[]
    */
   protected $attributes = [];
 
@@ -168,7 +168,7 @@ class DrupalAttributes extends ArrayObject {
    * @param string $type
    *   (optional) The type of attributes to use for this method.
    *
-   * @return \Drupal\bootstrap\Utility\Attributes
+   * @return Attributes
    *   An attributes object for $type.
    */
   public function getAttributes($type = DrupalAttributes::ATTRIBUTES) {
diff --git a/src/Utility/Element.php b/src/Utility/Element.php
index cd34d7f..3e057bb 100644
--- a/src/Utility/Element.php
+++ b/src/Utility/Element.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bootstrap\Utility;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Render\Renderer;
 use Drupal\bootstrap\Bootstrap;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Render\MarkupInterface;
@@ -21,7 +23,7 @@ class Element extends DrupalAttributes {
   /**
    * The current state of the form.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;
 
@@ -42,7 +44,7 @@ class Element extends DrupalAttributes {
    *
    * @param array|string $element
    *   A render array element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function __construct(&$element = [], FormStateInterface $form_state = NULL) {
@@ -137,7 +139,7 @@ class Element extends DrupalAttributes {
   /**
    * Sets the #access property on an element.
    *
-   * @param bool|\Drupal\Core\Access\AccessResultInterface $access
+   * @param bool|AccessResultInterface $access
    *   The value to assign to #access.
    *
    * @return static
@@ -269,7 +271,7 @@ class Element extends DrupalAttributes {
    *
    * @param array|string $element
    *   A render array element or a string.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   A current FormState instance, if any.
    *
    * @return \Drupal\bootstrap\Utility\Element
@@ -287,7 +289,7 @@ class Element extends DrupalAttributes {
    *
    * @param array|string|\Drupal\bootstrap\Utility\Element $element
    *   A render array element, string or Element instance.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   A current FormState instance, if any.
    *
    * @return \Drupal\bootstrap\Utility\Element
@@ -566,11 +568,11 @@ class Element extends DrupalAttributes {
   /**
    * Renders the final element HTML.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML.
    */
   public function render() {
-    /** @var \Drupal\Core\Render\Renderer $renderer */
+    /** @var Renderer $renderer */
     $renderer = \Drupal::service('renderer');
     return $renderer->render($this->array);
   }
@@ -578,11 +580,11 @@ class Element extends DrupalAttributes {
   /**
    * Renders the final element HTML.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML.
    */
   public function renderPlain() {
-    /** @var \Drupal\Core\Render\Renderer $renderer */
+    /** @var Renderer $renderer */
     $renderer = \Drupal::service('renderer');
     return $renderer->renderPlain($this->array);
   }
@@ -592,11 +594,11 @@ class Element extends DrupalAttributes {
    *
    * (Cannot be executed within another render context.)
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML.
    */
   public function renderRoot() {
-    /** @var \Drupal\Core\Render\Renderer $renderer */
+    /** @var Renderer $renderer */
     $renderer = \Drupal::service('renderer');
     return $renderer->renderRoot($this->array);
   }
@@ -659,7 +661,7 @@ class Element extends DrupalAttributes {
    *
    * @param string $message
    *   (optional) The error message to present to the user.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Optional. The current state of the form. If not provided, it will attempt
    *   to use the form state passed when constructing the element.
    *
@@ -690,7 +692,7 @@ class Element extends DrupalAttributes {
   /**
    * Sets the current form state for the element.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Optional. The current state of the form.
    *
    * @return static
diff --git a/src/Utility/StorageItem.php b/src/Utility/StorageItem.php
index 841fe4f..5a37988 100644
--- a/src/Utility/StorageItem.php
+++ b/src/Utility/StorageItem.php
@@ -29,7 +29,7 @@ class StorageItem extends MemoryStorage implements \Iterator {
   /**
    * The \Drupal\bootstrap\Storage instance this item belongs to.
    *
-   * @var \Drupal\bootstrap\Utility\Storage
+   * @var Storage
    */
   protected $storage;
 
diff --git a/src/Utility/Variables.php b/src/Utility/Variables.php
index 4a7fd57..bb3abf0 100644
--- a/src/Utility/Variables.php
+++ b/src/Utility/Variables.php
@@ -12,7 +12,7 @@ class Variables extends DrupalAttributes {
   /**
    * An element object.
    *
-   * @var \Drupal\bootstrap\Utility\Element|false
+   * @var Element|false
    */
   public $element = FALSE;
 
