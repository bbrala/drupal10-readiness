modules/contrib/bookable_calendar/bookable_calendar.install
modules/contrib/bookable_calendar/bookable_calendar.module
modules/contrib/bookable_calendar/src/BookableCalendarAccessControlHandler.php
modules/contrib/bookable_calendar/src/BookableCalendarInterface.php
modules/contrib/bookable_calendar/src/BookableCalendarListBuilder.php
modules/contrib/bookable_calendar/src/BookableCalendarOpeningAccessControlHandler.php
modules/contrib/bookable_calendar/src/BookableCalendarOpeningInstanceAccessControlHandler.php
modules/contrib/bookable_calendar/src/BookableCalendarOpeningInstanceInterface.php
modules/contrib/bookable_calendar/src/BookableCalendarOpeningInstanceListBuilder.php
modules/contrib/bookable_calendar/src/BookableCalendarOpeningInstanceViewsData.php
modules/contrib/bookable_calendar/src/BookableCalendarOpeningInterface.php
modules/contrib/bookable_calendar/src/BookableCalendarOpeningListBuilder.php
modules/contrib/bookable_calendar/src/BookableCalendarOpeningViewsData.php
modules/contrib/bookable_calendar/src/BookingAccessControlHandler.php
modules/contrib/bookable_calendar/src/BookingContactAccessControlHandler.php
modules/contrib/bookable_calendar/src/BookingContactInterface.php
modules/contrib/bookable_calendar/src/BookingContactListBuilder.php
modules/contrib/bookable_calendar/src/BookingInterface.php
modules/contrib/bookable_calendar/src/BookingListBuilder.php
modules/contrib/bookable_calendar/src/BookingViewsData.php
modules/contrib/bookable_calendar/src/Controller/BookableCalendarApiController.php
modules/contrib/bookable_calendar/src/Controller/BookableCalendarCheckInController.php
modules/contrib/bookable_calendar/src/Controller/BookableCalendarController.php
modules/contrib/bookable_calendar/src/Controller/BookableCalendarListController.php
modules/contrib/bookable_calendar/src/Entity/BookableCalendar.php
modules/contrib/bookable_calendar/src/Entity/BookableCalendarOpening.php
modules/contrib/bookable_calendar/src/Entity/BookableCalendarOpeningInstance.php
modules/contrib/bookable_calendar/src/Entity/Booking.php
modules/contrib/bookable_calendar/src/Entity/BookingContact.php
modules/contrib/bookable_calendar/src/EventSubscriber/BookableCalendarRouteSubscriber.php
modules/contrib/bookable_calendar/src/Form/BookableCalendarForm.php
modules/contrib/bookable_calendar/src/Form/BookableCalendarOpeningForm.php
modules/contrib/bookable_calendar/src/Form/BookableCalendarOpeningInstanceForm.php
modules/contrib/bookable_calendar/src/Form/BookableCalendarOpeningInstanceSettingsForm.php
modules/contrib/bookable_calendar/src/Form/BookableCalendarOpeningSettingsForm.php
modules/contrib/bookable_calendar/src/Form/BookableCalendarSettingsForm.php
modules/contrib/bookable_calendar/src/Form/BookingContactCreateForm.php
modules/contrib/bookable_calendar/src/Form/BookingContactForm.php
modules/contrib/bookable_calendar/src/Form/BookingContactSettingsForm.php
modules/contrib/bookable_calendar/src/Form/BookingForm.php
modules/contrib/bookable_calendar/src/Form/BookingSettingsForm.php
modules/contrib/bookable_calendar/src/Form/SettingsForm.php
modules/contrib/bookable_calendar/src/Notification.php
modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningIsActive.php
modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningIsActiveValidator.php
modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningMaxPartySize.php
modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningMaxPartySizeValidator.php
modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningNotInPast.php
modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningNotInPastValidator.php
modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningTooFarAway.php
modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningTooFarAwayValidator.php
modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningTooSoon.php
modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningTooSoonValidator.php
modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningVacancy.php
modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningVacancyValidator.php

15 files with changes
=====================

1) modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningVacancyValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookable_calendar\Plugin\Validation\Constraint;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ @@
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->context->getRoot()->getValue();

     $parent_opening_instance = $entity->booking_instance->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningTooSoonValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookable_calendar\Plugin\Validation\Constraint;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ @@
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->context->getRoot()->getValue();

     $parent_opening_instance = $entity->booking_instance->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningTooFarAwayValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookable_calendar\Plugin\Validation\Constraint;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ @@
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->context->getRoot()->getValue();

     $parent_opening_instance = $entity->booking_instance->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningNotInPastValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookable_calendar\Plugin\Validation\Constraint;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ @@
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->context->getRoot()->getValue();

     $parent_opening_instance = $entity->booking_instance->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningMaxPartySizeValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookable_calendar\Plugin\Validation\Constraint;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ @@
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->context->getRoot()->getValue();

     $parent_opening_instance = $entity->booking_instance->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/bookable_calendar/src/Plugin/Validation/Constraint/CalendarOpeningIsActiveValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookable_calendar\Plugin\Validation\Constraint;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ @@
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->context->getRoot()->getValue();

     $parent_opening_instance = $entity->booking_instance->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/bookable_calendar/src/Notification.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookable_calendar;

+use Drupal\bookable_calendar\Entity\BookingContact;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Mail\MailManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * Undocumented variable
    *
-   * @var \Drupal\bookable_calendar\Entity\BookingContact
+   * @var BookingContact
    */
   protected $bookableContact;

@@ @@
   /**
    * Creates a new ModerationInformation instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MailManagerInterface $mail_manager, MessengerInterface $messenger) {
@@ @@
   /**
    * Notify the proper users of a new booking taking place
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity we need to send a notification on.
    *
    * @return void
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/bookable_calendar/src/Form/BookingContactForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New booking contact %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/bookable_calendar/src/Form/BookableCalendarOpeningForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New bookable calendar opening %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/bookable_calendar/src/Form/BookableCalendarForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New bookable calendar %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/bookable_calendar/src/BookingListBuilder.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new BookingListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/bookable_calendar/src/BookingContactListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new BookingContactListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    */
   public function buildRow(EntityInterface $entity) {
     /* @var $entity \Drupal\bookable_calendar\BookingContactInterface */
-    $row['id'] = $entity->link();
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Please confirm that `$entity` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+    $row['id'] = $entity->toLink()->toString();
     return $row + parent::buildRow($entity);
   }
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/bookable_calendar/src/BookingContactAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookable_calendar;

+use Drupal\bookable_calendar\Entity\BookingContact;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Entity\EntityAccessControlHandler;
@@ @@
    * Take a Booking Contact entity and check for query params
    * email and login_token and validate those match the Entity
    *
-   * @param Drupal\bookable_calendar\Entity\BookingContact $entity
+   * @param BookingContact $entity
    * @return boolean
    */
   protected function checkTokenAccess($entity) {
@@ @@
   /**
    * Check if tempstore allows user on this entity
    *
-   * @param Drupal\bookable_calendar\Entity\BookingContact $entity
+   * @param BookingContact $entity
    * @return boolean
    */
   protected function checkTempStore($entity) {
@@ @@
    * Check different methods whether this non logged in user
    * has access to this Entity
    *
-   * @param Drupal\bookable_calendar\Entity\BookingContact $entity
+   * @param BookingContact $entity
    * @return boolean
    */
   protected function checkAccessAlt($entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/bookable_calendar/src/BookableCalendarOpeningListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new BookableCalendarOpeningListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/bookable_calendar/src/BookableCalendarListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new BookableCalendarListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 15 files have been changed by Rector                                      

