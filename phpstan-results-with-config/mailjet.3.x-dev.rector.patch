diff --git a/lib/mailjet-api-php/src/MailjetApi.php b/lib/mailjet-api-php/src/MailjetApi.php
index a5be066..45e2918 100644
--- a/lib/mailjet-api-php/src/MailjetApi.php
+++ b/lib/mailjet-api-php/src/MailjetApi.php
@@ -2,6 +2,7 @@
 
 namespace MailjetTools;
 
+use MailjetIframe\MailjetIframe;
 use Exception;
 use Mailjet\Client;
 use Mailjet\Resources;
@@ -335,7 +336,7 @@ public static function getApiToken(string $id)
 
     public static function getMailjetIframe($username, $password)
     {
-      $mailjetIframe = new \MailjetIframe\MailjetIframe($username, $password, false);
+      $mailjetIframe = new MailjetIframe($username, $password, false);
 
       $language = \Drupal::languageManager()->getCurrentLanguage();
       $lang_codes_map = [
@@ -357,13 +358,13 @@ public static function getMailjetIframe($username, $password)
           'contacts',
           'stats',
         ))
-        ->turnDocumentationProperties(\MailjetIframe\MailjetIframe::OFF)
-        ->turnNewContactListCreation(\MailjetIframe\MailjetIframe::ON)
-        ->turnMenu(\MailjetIframe\MailjetIframe::OFF)
-        ->turnFooter(\MailjetIframe\MailjetIframe::ON)
-        ->turnBar(\MailjetIframe\MailjetIframe::ON)
-        ->turnCreateCampaignButton(\MailjetIframe\MailjetIframe::ON)
-        ->turnSendingPolicy(\MailjetIframe\MailjetIframe::ON);
+        ->turnDocumentationProperties(MailjetIframe::OFF)
+        ->turnNewContactListCreation(MailjetIframe::ON)
+        ->turnMenu(MailjetIframe::OFF)
+        ->turnFooter(MailjetIframe::ON)
+        ->turnBar(MailjetIframe::ON)
+        ->turnCreateCampaignButton(MailjetIframe::ON)
+        ->turnSendingPolicy(MailjetIframe::ON);
 
       return $mailjetIframe;
     }
diff --git a/mailjet.module b/mailjet.module
index 7cfa1d0..8d4e6d6 100644
--- a/mailjet.module
+++ b/mailjet.module
@@ -1,10 +1,13 @@
 <?php
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use MailjetTools\MailjetApi;
+use Drupal\Component\Utility\Html;
 /*
  * @file
  * code for Mailjet module
  */
 
-$path = drupal_get_path('module', 'mailjet');
+$path = \Drupal::service('extension.list.module')->getPath('mailjet');
 
 // Autoloading via composer
 require_once $path . '/vendor/autoload.php';
@@ -27,7 +30,7 @@ function mailjet_go_to_external_link($url) {
   }
   else {
     $redirect = $url;
-    $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url);
+    $response = new RedirectResponse($url);
     $response->send();
   }
 }
@@ -45,7 +48,7 @@ function _mailjet_register_alter_callback() {
     $config_mailjet->set('mailjet_password', $_POST['data']['secretkey']);
     $config_mailjet->save();
 
-    $mailjetApiClient = MailjetTools\MailjetApi::getApiClient($_POST['data']['apikey'], $_POST['data']['secretkey']);
+    $mailjetApiClient = MailjetApi::getApiClient($_POST['data']['apikey'], $_POST['data']['secretkey']);
     $params = [
       'AllowedAccess' => 'campaigns,contacts,stats,pricing,account,reports',
       'APIKeyALT' => $_POST['data']['apikey'],
@@ -53,7 +56,7 @@ function _mailjet_register_alter_callback() {
       'IsActive' => TRUE,
       'SentData' => serialize(['plugin' => 'drupal-3.0']),
     ];
-    $response = MailjetTools\MailjetApi::createApiToken($params);
+    $response = MailjetApi::createApiToken($params);
     if (false != $response) {
       $config_mailjet->set('APItoken', $response[0]['Token']);
       $config_mailjet->save();
@@ -98,7 +101,7 @@ function mailjet_new() {
     $key = trim($config_mailjet->get('mailjet_username'));
     $secret_key = trim($config_mailjet->get('mailjet_password'));
 
-    $mailjetApiClient = MailjetTools\MailjetApi::getApiClient($key, $secret_key);
+    $mailjetApiClient = MailjetApi::getApiClient($key, $secret_key);
     return $mailjetApiClient;
   }
   if (!($key) && !($secret_key)) {
@@ -147,7 +150,7 @@ function mailjet_mjuser_update($infos) {
 function mailjet_user_trackingcheck() {
   $mailjetApiClient = mailjet_new();
   $filters = [
-    'APIKey' => MailjetTools\MailjetApi::$mjApiKey,
+    'APIKey' => MailjetApi::$mjApiKey,
   ];
   $response = $mailjetApiClient->get(Resources::$Eventcallbackurl, ['filters' => $filters]);
   if ($response->success()) {
@@ -168,7 +171,7 @@ function mailjet_user_trackingupdate($tracking, $current_events) {
       if (in_array($key, $check)) {
         if ($value == 1 && !array_key_exists($key, $current_events)) {
           $body = [
-            'APIKeyALT' => MailjetTools\MailjetApi::$mjApiKey,
+            'APIKeyALT' => MailjetApi::$mjApiKey,
             'EventType' => $key,
             'Url' => $tracking['Url'],
           ];
@@ -317,7 +320,7 @@ function mailjet_properties_sync() {
   //add this property by default
   $user_fields[] = ["Name" => 'name', "Datatype" => 'str'];
 
-  $user_info = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
+  $user_info = User::load(\Drupal::currentUser()->id());
 
   foreach ($user_info as $propertyName => $propertyValue) {
     if (strpos($propertyName, "field_") !== FALSE) {
@@ -346,7 +349,7 @@ function mailjet_properties_sync() {
   //get existing contact properties from MailJet
   $properties = [];
   $mailjetApiClient = mailjet_new();
-  $response = MailjetTools\MailjetApi::getContactProperties();
+  $response = MailjetApi::getContactProperties();
   if (false !== $response) {
     foreach ($response as $property) {
       $properties[$property['Name']] = (array) $property;
@@ -360,7 +363,7 @@ function mailjet_properties_sync() {
 //        drupal_set_message(t('Field '.$field['Name'].' is already in your MailJet account.'),'status'); // no need of this message - too much spam :)
       }
       else {
-        $updateResponse = MailjetTools\MailjetApi::updateMailjetContactProperty($properties[$field['Name']]['ID'], $field['Name'], $field['Datatype']);
+        $updateResponse = MailjetApi::updateMailjetContactProperty($properties[$field['Name']]['ID'], $field['Name'], $field['Datatype']);
         if (false != $updateResponse) {
 //          drupal_set_message(t('Field ' . $field['Name'] . ' is now updated in your MailJet account!'), 'status');
           $properties[$field['Name']] = $field; // Add it here, so the next loop it wont be handled again
@@ -371,7 +374,7 @@ function mailjet_properties_sync() {
       }
     }
     else {
-      $insertResponse = MailjetTools\MailjetApi::createMailjetContactProperty($field['Name'], $field['Datatype']);
+      $insertResponse = MailjetApi::createMailjetContactProperty($field['Name'], $field['Datatype']);
       if (false != $insertResponse) {
 //        drupal_set_message(t('Field ' . $field['Name'] . ' is now inserted in your MailJet account!'), 'status');
         $properties[$field['Name']] = $field; // Add it here, so the next loop it wont be handled again
@@ -429,7 +432,7 @@ function processCustomFields($user)
 /**
  * Add a Mailjet user.
  *
- * @param \Drupal\user\Entity\User $user
+ * @param User $user
  *   The User object.
  */
 function mailjet_user_insert(User $user) {
@@ -442,7 +445,7 @@ function mailjet_user_insert(User $user) {
 /**
  * Update a Mailjet user.
  *
- * @param \Drupal\user\Entity\User $user
+ * @param User $user
  *   The User object.
  */
 function mailjet_user_update(User $user) {
@@ -460,7 +463,7 @@ function mailjet_user_update(User $user) {
 /**
  * Delete a Mailjet user.
  *
- * @param \Drupal\user\Entity\User $user
+ * @param User $user
  *   The User object.
  */
 function mailjet_user_delete(User $user) {
@@ -471,7 +474,7 @@ function mailjet_user_delete(User $user) {
 /**
  * Sync a single Mailjet user.
  *
- * @param \Drupal\user\Entity\User $user
+ * @param User $user
  *   The User object.
  * @param $action
  *   The action to send to Mailjet.
@@ -505,7 +508,7 @@ function mailjet_sync_single_user(User $user, $action) {
         mailjet_properties_sync();
 
         // Add new contact.
-        $response = MailjetTools\MailjetApi::syncMailjetContact($listId, $contact);
+        $response = MailjetApi::syncMailjetContact($listId, $contact);
 
         if ($response) {
           \Drupal::logger('mailjet_messages')
@@ -524,7 +527,7 @@ function mailjet_sync_single_user(User $user, $action) {
           'Email' => $user->get('mail')->value
         ];
         //add new email
-        $response = MailjetTools\MailjetApi::syncMailjetContact($listId, $contact, $action);
+        $response = MailjetApi::syncMailjetContact($listId, $contact, $action);
         if (false == $response) {
           \Drupal::logger('mailjet_messages')
             ->notice(t('The contact was unsubscribed from list #@list.', ['@list' => $listId]));
@@ -569,7 +572,7 @@ function is_batchjob_running($bjID) {
 function mailjet_get_default_list_id($mailjetApiClient) {
   $mailjetApiClient = mailjet_new();
   // Gets Mailjet contact list by name
-  $contactsList = MailjetTools\MailjetApi::getMailjetContactListByName(mailjet_get_default_list_name());
+  $contactsList = MailjetApi::getMailjetContactListByName(mailjet_get_default_list_name());
 
   if (false != $contactsList) {
     $def_list_id = $contactsList[0]['ID'];
@@ -586,7 +589,7 @@ function mailjet_get_default_list_name() {
  */
 function mailjet_create_default_list() {
   $mailjetApiClient = mailjet_new();
-  $responseNewContactsList = MailjetTools\MailjetApi::createMailjetContactList(mailjet_get_default_list_name());
+  $responseNewContactsList = MailjetApi::createMailjetContactList(mailjet_get_default_list_name());
   if (false != $responseNewContactsList) {
     $def_list_id = $responseNewContactsList[0]['ID'];
     \Drupal::messenger()->addStatus(t('Default list was created!'));
@@ -626,7 +629,7 @@ function mailjet_first_sync($list_id) {
 
   mailjet_properties_sync();
 
-  $responseInitialSync = MailjetTools\MailjetApi::syncMailjetContacts($list_id, $contacts);
+  $responseInitialSync = MailjetApi::syncMailjetContacts($list_id, $contacts);
   if (false == $responseInitialSync) {
       \Drupal::messenger()->addStatus(t('Could not create the contact list'));
   }
@@ -643,7 +646,7 @@ function mailjet_get_lists() {
   $contact_lists = [];
 
   $mailjetApiClient = mailjet_new();
-  $contactsListResponse = MailjetTools\MailjetApi::getMailjetContactLists(get_mailjet_get_lists_limit());
+  $contactsListResponse = MailjetApi::getMailjetContactLists(get_mailjet_get_lists_limit());
   if (false != $contactsListResponse) {
     foreach ($contactsListResponse as $list) {
       $contact_lists[$list['ID']] = $list['Name'];
@@ -657,7 +660,7 @@ function mailjet_get_properties() {
   //get existing contact properties from MailJet
   $properties = [];
   $mailjetApiClient = mailjet_new();
-  $response = MailjetTools\MailjetApi::getMailjetContactProperties();
+  $response = MailjetApi::getMailjetContactProperties();
   if (false != $response) {
     foreach ($response as $property) {
       $properties[$property['Name']] = $property['Name'];
@@ -686,7 +689,7 @@ function mailjet_mail($key, &$message, $params) {
   switch ($key) {
     case 'test_mail':
       $message['subject'] = t('Your test mail from Mailjet', $options);
-      $message['body'][] = Drupal\Component\Utility\Html::escape($params['message']);
+      $message['body'][] = Html::escape($params['message']);
       break;
     case 'activation_mail':
       $message['subject'] = t('Activation mail', $options);
@@ -771,7 +774,7 @@ function mailjet_get_propertiy_type($property_name) {
   //get existing contact properties from MailJet
   $properties = [];
   $mailjetApiClient = mailjet_new();
-  $response = MailjetTools\MailjetApi::getMailjetContactProperties();
+  $response = MailjetApi::getMailjetContactProperties();
   if (false != $response) {
     foreach ($response as $property) {
 
@@ -914,7 +917,7 @@ function accessProtected($obj, $prop) {
  */
 function mailjet_theme_registry_alter(&$theme_registry) {
 
-  $theme_registry['block__local_actions_block']['path'] = drupal_get_path('module', 'mailjet') . '/templates';
+  $theme_registry['block__local_actions_block']['path'] = \Drupal::service('extension.list.module')->getPath('mailjet') . '/templates';
 }
 
 function mailjet_theme($existing, $type, $theme, $path) {
diff --git a/modules/mailjet_campaign/src/Controller/CampaignAdminController.php b/modules/mailjet_campaign/src/Controller/CampaignAdminController.php
index 4dfbfa6..83f061d 100644
--- a/modules/mailjet_campaign/src/Controller/CampaignAdminController.php
+++ b/modules/mailjet_campaign/src/Controller/CampaignAdminController.php
@@ -6,6 +6,7 @@
 
 namespace Drupal\mailjet_campaign\Controller;
 
+use MailjetIframe\MailjetIframe;
 use Drupal\Core\Controller\ControllerBase;
 use MailjetTools\MailjetApi;
 use Symfony\Component\HttpFoundation\RedirectResponse;
@@ -24,7 +25,7 @@ public function content() {
     }
 
     $mailjetIframe = MailjetApi::getMailjetIframe($config_mailjet->get('mailjet_username'), $config_mailjet->get('mailjet_password'));
-    $mailjetIframe->setInitialPage(\MailjetIframe\MailjetIframe::PAGE_CAMPAIGNS);
+    $mailjetIframe->setInitialPage(MailjetIframe::PAGE_CAMPAIGNS);
     $callbackurl = urlencode($base_url . '/campaigncallback');
 //    $mailjetIframe->setCallback($callbackurl);
 
diff --git a/modules/mailjet_campaign/tests/src/Functional/MailjetCampaignTest.php b/modules/mailjet_campaign/tests/src/Functional/MailjetCampaignTest.php
index a7d5e60..4904917 100644
--- a/modules/mailjet_campaign/tests/src/Functional/MailjetCampaignTest.php
+++ b/modules/mailjet_campaign/tests/src/Functional/MailjetCampaignTest.php
@@ -23,7 +23,7 @@ class MailjetCampaignTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     parent::setUp();
 
diff --git a/modules/mailjet_event/tests/src/Functional/MailjetEventTest.php b/modules/mailjet_event/tests/src/Functional/MailjetEventTest.php
index 8331a40..59effe3 100644
--- a/modules/mailjet_event/tests/src/Functional/MailjetEventTest.php
+++ b/modules/mailjet_event/tests/src/Functional/MailjetEventTest.php
@@ -23,7 +23,7 @@ class MailjetEventTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     parent::setUp();
 
diff --git a/modules/mailjet_list/src/Controller/ListMailjetController.php b/modules/mailjet_list/src/Controller/ListMailjetController.php
index 26b478d..a49bde0 100644
--- a/modules/mailjet_list/src/Controller/ListMailjetController.php
+++ b/modules/mailjet_list/src/Controller/ListMailjetController.php
@@ -6,6 +6,7 @@
 
 namespace Drupal\mailjet_list\Controller;
 
+use MailjetIframe\MailjetIframe;
 use Drupal\Core\Controller\ControllerBase;
 use MailjetTools\MailjetApi;
 
@@ -23,7 +24,7 @@ public function content() {
     }
 
     $mailjetIframe = MailjetApi::getMailjetIframe($config_mailjet->get('mailjet_username'), $config_mailjet->get('mailjet_password'));
-    $mailjetIframe->setInitialPage(\MailjetIframe\MailjetIframe::PAGE_CONTACTS);
+    $mailjetIframe->setInitialPage(MailjetIframe::PAGE_CONTACTS);
 
     $build = [
       '#type' => 'inline_template',
diff --git a/modules/mailjet_stats/src/Controller/StatsAdminController.php b/modules/mailjet_stats/src/Controller/StatsAdminController.php
index d446be6..e2a3171 100644
--- a/modules/mailjet_stats/src/Controller/StatsAdminController.php
+++ b/modules/mailjet_stats/src/Controller/StatsAdminController.php
@@ -6,6 +6,7 @@
 
 namespace Drupal\mailjet_stats\Controller;
 
+use MailjetIframe\MailjetIframe;
 use Drupal\Core\Controller\ControllerBase;
 use MailjetTools\MailjetApi;
 
@@ -23,7 +24,7 @@ public function content() {
     }
 
     $mailjetIframe = MailjetApi::getMailjetIframe($config_mailjet->get('mailjet_username'), $config_mailjet->get('mailjet_password'));
-    $mailjetIframe->setInitialPage(\MailjetIframe\MailjetIframe::PAGE_STATS);
+    $mailjetIframe->setInitialPage(MailjetIframe::PAGE_STATS);
 
     $build = [
       '#type' => 'inline_template',
diff --git a/modules/mailjet_stats/src/EventSubscriber/OrderCompleteSubscriber.php b/modules/mailjet_stats/src/EventSubscriber/OrderCompleteSubscriber.php
index a2208fb..32af03e 100644
--- a/modules/mailjet_stats/src/EventSubscriber/OrderCompleteSubscriber.php
+++ b/modules/mailjet_stats/src/EventSubscriber/OrderCompleteSubscriber.php
@@ -16,7 +16,7 @@ class OrderCompleteSubscriber implements EventSubscriberInterface {
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
diff --git a/modules/mailjet_subscription/src/Plugin/Block/SubscriptionFormBlock.php b/modules/mailjet_subscription/src/Plugin/Block/SubscriptionFormBlock.php
index 6fa3780..6b030de 100644
--- a/modules/mailjet_subscription/src/Plugin/Block/SubscriptionFormBlock.php
+++ b/modules/mailjet_subscription/src/Plugin/Block/SubscriptionFormBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mailjet_subscription\Plugin\Block;
 
+use Drupal\mailjet_subscription\Form\SubscriptionSignupPageForm;
 use Drupal\Core\Block\BlockBase;
 
 /**
@@ -30,7 +31,7 @@ public function build() {
     $signup = mailjet_subscription_load($signup_id);
 
     if (!empty($signup) && !is_null($signup)) {
-      $form = new \Drupal\mailjet_subscription\Form\SubscriptionSignupPageForm();
+      $form = new SubscriptionSignupPageForm();
 
       $form_id = 'mailjet_signup_subscribe_block_' . $signup->id() . '_form';
       $form->setFormID($form_id);
diff --git a/src/Form/MailjetSettingsForm.php b/src/Form/MailjetSettingsForm.php
index c0112b3..a120293 100644
--- a/src/Form/MailjetSettingsForm.php
+++ b/src/Form/MailjetSettingsForm.php
@@ -230,7 +230,7 @@ public function buildForm(array $form, FormStateInterface $form_state) {
 
     // States only show up for US citizens
 
-    $path = drupal_get_path('module', 'mailjet');
+    $path = \Drupal::service('extension.list.module')->getPath('mailjet');
     include $path . '/lib/mailjet-api-php/src/UsStates.php';
     $form['infos']['address_state'] = [
       '#type' => 'select',
diff --git a/src/MailjetBreadcrumbBuilder.php b/src/MailjetBreadcrumbBuilder.php
index 29b2c8a..21a63f5 100644
--- a/src/MailjetBreadcrumbBuilder.php
+++ b/src/MailjetBreadcrumbBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mailjet;
 
+use Drupal\Core\Config\Config;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\Breadcrumb\Breadcrumb;
@@ -35,86 +36,86 @@ class MailjetBreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * The router request context.
    *
-   * @var \Drupal\Core\Routing\RequestContext
+   * @var RequestContext
    */
   protected $context;
 
   /**
    * The menu link access service.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;
 
   /**
    * The dynamic router service.
    *
-   * @var \Symfony\Component\Routing\Matcher\RequestMatcherInterface
+   * @var RequestMatcherInterface
    */
   protected $router;
 
   /**
    * The dynamic router service.
    *
-   * @var \Drupal\Core\PathProcessor\InboundPathProcessorInterface
+   * @var InboundPathProcessorInterface
    */
   protected $pathProcessor;
 
   /**
    * Site config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $siteConfig;
 
   /**
    * Breadcrumb config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * The title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;
 
   /**
    * The current user object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The menu link manager.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManager
+   * @var MenuLinkManager
    */
   protected $menuLinkManager;
 
   /**
    * Constructs the PathBasedBreadcrumbBuilder.
    *
-   * @param \Drupal\Core\Routing\RequestContext $context
+   * @param RequestContext $context
    *   The router request context.
-   * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The menu link access service.
-   * @param \Symfony\Component\Routing\Matcher\RequestMatcherInterface $router
+   * @param RequestMatcherInterface $router
    *   The dynamic router service.
-   * @param \Drupal\Core\PathProcessor\InboundPathProcessorInterface $path_processor
+   * @param InboundPathProcessorInterface $path_processor
    *   The inbound path processor.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Controller\TitleResolverInterface $title_resolver
+   * @param TitleResolverInterface $title_resolver
    *   The title resolver service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user object.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Menu\MenuLinkManager $menu_link_manager
+   * @param MenuLinkManager $menu_link_manager
    *   The menu link manager.
    */
   public function __construct(RequestContext $context, AccessManagerInterface $access_manager, RequestMatcherInterface $router, InboundPathProcessorInterface $path_processor, ConfigFactoryInterface $config_factory, TitleResolverInterface $title_resolver, AccountInterface $current_user, CurrentPathStack $current_path, MenuLinkManager $menu_link_manager) {
@@ -250,9 +251,9 @@ protected function removeRepeatedSegments(array $links) {
   /**
    * Compares two breadcrumb links for equality.
    *
-   * @param \Drupal\Core\Link $link1
+   * @param Link $link1
    *   The first link.
-   * @param \Drupal\Core\Link $link2
+   * @param Link $link2
    *   The second link.
    *
    * @return bool
@@ -281,7 +282,7 @@ protected function linksAreEqual(Link $link1, Link $link2) {
    * @param array $exclude
    *   An array of paths or system paths to skip.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   A populated request object or NULL if the path couldn't be matched.
    */
   protected function getRequestForPath($path, array $exclude) {
diff --git a/src/Plugin/Mail/MailjetMail.php b/src/Plugin/Mail/MailjetMail.php
index 9004fb1..3f9278a 100644
--- a/src/Plugin/Mail/MailjetMail.php
+++ b/src/Plugin/Mail/MailjetMail.php
@@ -491,7 +491,7 @@ public function mail(array $message) {
               }
 
               $attachment_new_filename = tempnam(realpath(\Drupal::service('file_system')->getTempDirectory()), 'smtp');
-              $file_path = file_save_data($attachment, $attachment_new_filename, FileSystemInterface::EXISTS_RENAME);
+              $file_path = \Drupal::service('file.repository')->writeData($attachment, $attachment_new_filename, FileSystemInterface::EXISTS_RENAME);
 
               if (!$mailer->AddAttachment($file_path, $file_name)) {
                 \Drupal::messenger()->addStatus(t('Attachment could not be found or accessed.'));
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 8ed8e52..8693d65 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\mailjet\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,14 +23,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ -40,7 +41,7 @@ protected function setUp() {
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
 } 
diff --git a/tests/src/Functional/MailjetApiFormTest.php b/tests/src/Functional/MailjetApiFormTest.php
index 45f0c1e..134976b 100644
--- a/tests/src/Functional/MailjetApiFormTest.php
+++ b/tests/src/Functional/MailjetApiFormTest.php
@@ -27,7 +27,7 @@ class MailjetApiFormTest extends BrowserTestBase {
   /**
    * Perform any initial set up tasks that run before every test method
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['access content']);
   }
@@ -36,18 +36,21 @@ public function setUp() {
   public function testApiForm() {
     $this->drupalLogin($this->user);
     $this->drupalGet('admin/config/system/mailjet/api');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $config = $this->config('mailjet.settings');
-    $this->assertFieldByName('mailjet_username', $config->get('mailjet.mailjet_username'), 'The field was found with the correct value.');
-    $this->assertFieldByName('mailjet_password', $config->get('mailjet.mailjet_password'), 'The field was found with the correct value.');
+    $this->assertSession()->fieldValueEquals('mailjet_username', $config->get('mailjet.mailjet_username'));
+    $this->assertSession()->fieldValueEquals('mailjet_password', $config->get('mailjet.mailjet_password'));
 
 
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'mailjet_username' => $config->get('mailjet_username'),
       'mailjet_username' => $config->get('mailjet_password'),
     ], t('Save configuration'));
-    $this->assertText('The configuration options have been saved.', 'The form was saved correctly.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
 
 
   }
diff --git a/tests/src/Functional/MailjetDomainFormTest.php b/tests/src/Functional/MailjetDomainFormTest.php
index bbb8773..9b41eab 100644
--- a/tests/src/Functional/MailjetDomainFormTest.php
+++ b/tests/src/Functional/MailjetDomainFormTest.php
@@ -27,7 +27,7 @@ class MailjetDomainFormTest extends BrowserTestBase {
   /**
    * Perform any initial set up tasks that run before every test method
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['access content']);
   }
@@ -36,15 +36,18 @@ public function setUp() {
   public function testApiForm() {
     $this->drupalLogin($this->user);
     $this->drupalGet('admin/config/system/mailjet/domains/add-domain');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
-    $this->assertFieldByName('domain', 'example.com', 'The field was found with the correct value.');
+    $this->assertSession()->fieldValueEquals('domain', 'example.com');
 
 
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'domain' => $config->get('example.com'),
     ], t('Save configuration'));
-    $this->assertText('The configuration options have been saved.', 'The form was saved correctly.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
 
 
   }
diff --git a/vendor/composer/autoload_real.php b/vendor/composer/autoload_real.php
index 58ba088..097e9b7 100644
--- a/vendor/composer/autoload_real.php
+++ b/vendor/composer/autoload_real.php
@@ -1,5 +1,7 @@
 <?php
 
+use Composer\Autoload\ClassLoader;
+use Composer\Autoload\ComposerStaticInit9f95350bff734ea50e86827e21cea0b8;
 // autoload_real.php @generated by Composer
 
 class ComposerAutoloaderInit9f95350bff734ea50e86827e21cea0b8
@@ -20,14 +22,14 @@ public static function getLoader()
         }
 
         spl_autoload_register(array('ComposerAutoloaderInit9f95350bff734ea50e86827e21cea0b8', 'loadClassLoader'), true, true);
-        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
+        self::$loader = $loader = new ClassLoader();
         spl_autoload_unregister(array('ComposerAutoloaderInit9f95350bff734ea50e86827e21cea0b8', 'loadClassLoader'));
 
         $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
         if ($useStaticLoader) {
             require_once __DIR__ . '/autoload_static.php';
 
-            call_user_func(\Composer\Autoload\ComposerStaticInit9f95350bff734ea50e86827e21cea0b8::getInitializer($loader));
+            call_user_func(ComposerStaticInit9f95350bff734ea50e86827e21cea0b8::getInitializer($loader));
         } else {
             $map = require __DIR__ . '/autoload_namespaces.php';
             foreach ($map as $namespace => $path) {
@@ -48,7 +50,7 @@ public static function getLoader()
         $loader->register(true);
 
         if ($useStaticLoader) {
-            $includeFiles = Composer\Autoload\ComposerStaticInit9f95350bff734ea50e86827e21cea0b8::$files;
+            $includeFiles = ComposerStaticInit9f95350bff734ea50e86827e21cea0b8::$files;
         } else {
             $includeFiles = require __DIR__ . '/autoload_files.php';
         }
diff --git a/vendor/guzzlehttp/guzzle/src/Client.php b/vendor/guzzlehttp/guzzle/src/Client.php
index 0f43c71..5789d5a 100644
--- a/vendor/guzzlehttp/guzzle/src/Client.php
+++ b/vendor/guzzlehttp/guzzle/src/Client.php
@@ -1,6 +1,15 @@
 <?php
 namespace GuzzleHttp;
 
+use GuzzleHttp\Psr7\Request;
+use GuzzleHttp\Psr7\UriResolver;
+use GuzzleHttp\Psr7\MultipartStream;
+use function GuzzleHttp\Psr7\uri_for;
+use function GuzzleHttp\Promise\promise_for;
+use function GuzzleHttp\Promise\rejection_for;
+use function GuzzleHttp\Psr7\_caseless_remove;
+use function GuzzleHttp\Psr7\stream_for;
+use function GuzzleHttp\Psr7\modify_request;
 use GuzzleHttp\Cookie\CookieJar;
 use GuzzleHttp\Promise;
 use GuzzleHttp\Psr7;
@@ -69,7 +78,7 @@ public function __construct(array $config = [])
 
         // Convert the base_uri to a UriInterface
         if (isset($config['base_uri'])) {
-            $config['base_uri'] = Psr7\uri_for($config['base_uri']);
+            $config['base_uri'] = uri_for($config['base_uri']);
         }
 
         $this->configureDefaults($config);
@@ -118,7 +127,7 @@ public function requestAsync($method, $uri = '', array $options = [])
         if (is_array($body)) {
             $this->invalidBody();
         }
-        $request = new Psr7\Request($method, $uri, $headers, $body, $version);
+        $request = new Request($method, $uri, $headers, $body, $version);
         // Remove the option so that they are not doubly-applied.
         unset($options['headers'], $options['body'], $options['version']);
 
@@ -141,10 +150,10 @@ public function getConfig($option = null)
     private function buildUri($uri, array $config)
     {
         // for BC we accept null which would otherwise fail in uri_for
-        $uri = Psr7\uri_for($uri === null ? '' : $uri);
+        $uri = uri_for($uri === null ? '' : $uri);
 
         if (isset($config['base_uri'])) {
-            $uri = Psr7\UriResolver::resolve(Psr7\uri_for($config['base_uri']), $uri);
+            $uri = UriResolver::resolve(uri_for($config['base_uri']), $uri);
         }
 
         return $uri->getScheme() === '' && $uri->getHost() !== '' ? $uri->withScheme('http') : $uri;
@@ -274,9 +283,9 @@ private function transfer(RequestInterface $request, array $options)
         $handler = $options['handler'];
 
         try {
-            return Promise\promise_for($handler($request, $options));
+            return promise_for($handler($request, $options));
         } catch (\Exception $e) {
-            return Promise\rejection_for($e);
+            return rejection_for($e);
         }
     }
 
@@ -310,20 +319,20 @@ private function applyOptions(RequestInterface $request, array &$options)
             $options['body'] = http_build_query($options['form_params'], '', '&');
             unset($options['form_params']);
             // Ensure that we don't have the header in different case and set the new value.
-            $options['_conditional'] = Psr7\_caseless_remove(['Content-Type'], $options['_conditional']);
+            $options['_conditional'] = _caseless_remove(['Content-Type'], $options['_conditional']);
             $options['_conditional']['Content-Type'] = 'application/x-www-form-urlencoded';
         }
 
         if (isset($options['multipart'])) {
-            $options['body'] = new Psr7\MultipartStream($options['multipart']);
+            $options['body'] = new MultipartStream($options['multipart']);
             unset($options['multipart']);
         }
 
         if (isset($options['json'])) {
-            $options['body'] = \GuzzleHttp\json_encode($options['json']);
+            $options['body'] = json_encode($options['json']);
             unset($options['json']);
             // Ensure that we don't have the header in different case and set the new value.
-            $options['_conditional'] = Psr7\_caseless_remove(['Content-Type'], $options['_conditional']);
+            $options['_conditional'] = _caseless_remove(['Content-Type'], $options['_conditional']);
             $options['_conditional']['Content-Type'] = 'application/json';
         }
 
@@ -331,7 +340,7 @@ private function applyOptions(RequestInterface $request, array &$options)
             && $options['decode_content'] !== true
         ) {
             // Ensure that we don't have the header in different case and set the new value.
-            $options['_conditional'] = Psr7\_caseless_remove(['Accept-Encoding'], $options['_conditional']);
+            $options['_conditional'] = _caseless_remove(['Accept-Encoding'], $options['_conditional']);
             $modify['set_headers']['Accept-Encoding'] = $options['decode_content'];
         }
 
@@ -339,7 +348,7 @@ private function applyOptions(RequestInterface $request, array &$options)
             if (is_array($options['body'])) {
                 $this->invalidBody();
             }
-            $modify['body'] = Psr7\stream_for($options['body']);
+            $modify['body'] = stream_for($options['body']);
             unset($options['body']);
         }
 
@@ -349,7 +358,7 @@ private function applyOptions(RequestInterface $request, array &$options)
             switch ($type) {
                 case 'basic':
                     // Ensure that we don't have the header in different case and set the new value.
-                    $modify['set_headers'] = Psr7\_caseless_remove(['Authorization'], $modify['set_headers']);
+                    $modify['set_headers'] = _caseless_remove(['Authorization'], $modify['set_headers']);
                     $modify['set_headers']['Authorization'] = 'Basic '
                         . base64_encode("$value[0]:$value[1]");
                     break;
@@ -385,11 +394,11 @@ private function applyOptions(RequestInterface $request, array &$options)
             }
         }
 
-        $request = Psr7\modify_request($request, $modify);
-        if ($request->getBody() instanceof Psr7\MultipartStream) {
+        $request = modify_request($request, $modify);
+        if ($request->getBody() instanceof MultipartStream) {
             // Use a multipart/form-data POST if a Content-Type is not set.
             // Ensure that we don't have the header in different case and set the new value.
-            $options['_conditional'] = Psr7\_caseless_remove(['Content-Type'], $options['_conditional']);
+            $options['_conditional'] = _caseless_remove(['Content-Type'], $options['_conditional']);
             $options['_conditional']['Content-Type'] = 'multipart/form-data; boundary='
                 . $request->getBody()->getBoundary();
         }
@@ -403,7 +412,7 @@ private function applyOptions(RequestInterface $request, array &$options)
                     $modify['set_headers'][$k] = $v;
                 }
             }
-            $request = Psr7\modify_request($request, $modify);
+            $request = modify_request($request, $modify);
             // Don't pass this internal value along to middleware/handlers.
             unset($options['_conditional']);
         }
diff --git a/vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php b/vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php
index 9887c1d..9115709 100644
--- a/vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php
+++ b/vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php
@@ -1,6 +1,7 @@
 <?php
 namespace GuzzleHttp\Cookie;
 
+use function GuzzleHttp\json_encode;
 /**
  * Persists non-session cookies using a JSON formatted file
  */
@@ -55,7 +56,7 @@ public function save($filename)
             }
         }
 
-        $jsonStr = \GuzzleHttp\json_encode($json);
+        $jsonStr = json_encode($json);
         if (false === file_put_contents($filename, $jsonStr)) {
             throw new \RuntimeException("Unable to save file {$filename}");
         }
diff --git a/vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php b/vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php
index ee4ec35..b15109f 100644
--- a/vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php
+++ b/vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php
@@ -1,6 +1,11 @@
 <?php
 namespace GuzzleHttp\Handler;
 
+use GuzzleHttp\Promise\PromiseInterface;
+use function GuzzleHttp\Promise\rejection_for;
+use function GuzzleHttp\Psr7\stream_for;
+use function GuzzleHttp\is_host_in_noproxy;
+use function GuzzleHttp\debug_resource;
 use GuzzleHttp\Exception\RequestException;
 use GuzzleHttp\Exception\ConnectException;
 use GuzzleHttp\Promise\FulfilledPromise;
@@ -87,7 +92,7 @@ public function release(EasyHandle $easy)
      * @param EasyHandle           $easy
      * @param CurlFactoryInterface $factory Dictates how the handle is released
      *
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public static function finish(
         callable $handler,
@@ -162,7 +167,7 @@ private static function createRejection(EasyHandle $easy, array $ctx)
         // If an exception was encountered during the onHeaders event, then
         // return a rejected promise that wraps that exception.
         if ($easy->onHeadersException) {
-            return \GuzzleHttp\Promise\rejection_for(
+            return rejection_for(
                 new RequestException(
                     'An error was encountered during the on_headers event',
                     $easy->request,
@@ -185,7 +190,7 @@ private static function createRejection(EasyHandle $easy, array $ctx)
             ? new ConnectException($message, $easy->request, null, $ctx)
             : new RequestException($message, $easy->request, $easy->response, null, $ctx);
 
-        return \GuzzleHttp\Promise\rejection_for($error);
+        return rejection_for($error);
     }
 
     private function getDefaultConf(EasyHandle $easy)
@@ -364,7 +369,7 @@ private function applyHandlerOptions(EasyHandle $easy, array &$conf)
         if (isset($options['sink'])) {
             $sink = $options['sink'];
             if (!is_string($sink)) {
-                $sink = \GuzzleHttp\Psr7\stream_for($sink);
+                $sink = stream_for($sink);
             } elseif (!is_dir(dirname($sink))) {
                 // Ensure that the directory exists before failing in curl.
                 throw new \RuntimeException(sprintf(
@@ -382,7 +387,7 @@ private function applyHandlerOptions(EasyHandle $easy, array &$conf)
         } else {
             // Use a default temp stream if no sink was set.
             $conf[CURLOPT_FILE] = fopen('php://temp', 'w+');
-            $easy->sink = Psr7\stream_for($conf[CURLOPT_FILE]);
+            $easy->sink = stream_for($conf[CURLOPT_FILE]);
         }
         $timeoutRequiresNoSignal = false;
         if (isset($options['timeout'])) {
@@ -416,7 +421,7 @@ private function applyHandlerOptions(EasyHandle $easy, array &$conf)
                 if (isset($options['proxy'][$scheme])) {
                     $host = $easy->request->getUri()->getHost();
                     if (!isset($options['proxy']['no']) ||
-                        !\GuzzleHttp\is_host_in_noproxy($host, $options['proxy']['no'])
+                        !is_host_in_noproxy($host, $options['proxy']['no'])
                     ) {
                         $conf[CURLOPT_PROXY] = $options['proxy'][$scheme];
                     }
@@ -471,7 +476,7 @@ private function applyHandlerOptions(EasyHandle $easy, array &$conf)
         }
 
         if (!empty($options['debug'])) {
-            $conf[CURLOPT_STDERR] = \GuzzleHttp\debug_resource($options['debug']);
+            $conf[CURLOPT_STDERR] = debug_resource($options['debug']);
             $conf[CURLOPT_VERBOSE] = true;
         }
     }
diff --git a/vendor/guzzlehttp/guzzle/src/Handler/EasyHandle.php b/vendor/guzzlehttp/guzzle/src/Handler/EasyHandle.php
index 7754e91..a1ea7f7 100644
--- a/vendor/guzzlehttp/guzzle/src/Handler/EasyHandle.php
+++ b/vendor/guzzlehttp/guzzle/src/Handler/EasyHandle.php
@@ -1,6 +1,8 @@
 <?php
 namespace GuzzleHttp\Handler;
 
+use function GuzzleHttp\headers_from_lines;
+use function GuzzleHttp\normalize_header_keys;
 use GuzzleHttp\Psr7\Response;
 use Psr\Http\Message\RequestInterface;
 use Psr\Http\Message\ResponseInterface;
@@ -50,8 +52,8 @@ public function createResponse()
 
         // HTTP-version SP status-code SP reason-phrase
         $startLine = explode(' ', array_shift($this->headers), 3);
-        $headers = \GuzzleHttp\headers_from_lines($this->headers);
-        $normalizedKeys = \GuzzleHttp\normalize_header_keys($headers);
+        $headers = headers_from_lines($this->headers);
+        $normalizedKeys = normalize_header_keys($headers);
 
         if (!empty($this->options['decode_content'])
             && isset($normalizedKeys['content-encoding'])
diff --git a/vendor/guzzlehttp/guzzle/src/Handler/MockHandler.php b/vendor/guzzlehttp/guzzle/src/Handler/MockHandler.php
index d892061..9b84f98 100644
--- a/vendor/guzzlehttp/guzzle/src/Handler/MockHandler.php
+++ b/vendor/guzzlehttp/guzzle/src/Handler/MockHandler.php
@@ -1,6 +1,10 @@
 <?php
 namespace GuzzleHttp\Handler;
 
+use Psr\Http\Message\StreamInterface;
+use function GuzzleHttp\Promise\rejection_for;
+use function GuzzleHttp\Promise\promise_for;
+use function GuzzleHttp\describe_type;
 use GuzzleHttp\Exception\RequestException;
 use GuzzleHttp\HandlerStack;
 use GuzzleHttp\Promise\PromiseInterface;
@@ -91,8 +95,8 @@ public function __invoke(RequestInterface $request, array $options)
         }
 
         $response = $response instanceof \Exception
-            ? \GuzzleHttp\Promise\rejection_for($response)
-            : \GuzzleHttp\Promise\promise_for($response);
+            ? rejection_for($response)
+            : promise_for($response);
 
         return $response->then(
             function ($value) use ($request, $options) {
@@ -108,7 +112,7 @@ function ($value) use ($request, $options) {
                         fwrite($sink, $contents);
                     } elseif (is_string($sink)) {
                         file_put_contents($sink, $contents);
-                    } elseif ($sink instanceof \Psr\Http\Message\StreamInterface) {
+                    } elseif ($sink instanceof StreamInterface) {
                         $sink->write($contents);
                     }
                 }
@@ -120,7 +124,7 @@ function ($reason) use ($request, $options) {
                 if ($this->onRejected) {
                     call_user_func($this->onRejected, $reason);
                 }
-                return \GuzzleHttp\Promise\rejection_for($reason);
+                return rejection_for($reason);
             }
         );
     }
@@ -140,7 +144,7 @@ public function append()
                 $this->queue[] = $value;
             } else {
                 throw new \InvalidArgumentException('Expected a response or '
-                    . 'exception. Found ' . \GuzzleHttp\describe_type($value));
+                    . 'exception. Found ' . describe_type($value));
             }
         }
     }
diff --git a/vendor/guzzlehttp/guzzle/src/Handler/StreamHandler.php b/vendor/guzzlehttp/guzzle/src/Handler/StreamHandler.php
index 741e02d..12c07fb 100644
--- a/vendor/guzzlehttp/guzzle/src/Handler/StreamHandler.php
+++ b/vendor/guzzlehttp/guzzle/src/Handler/StreamHandler.php
@@ -1,6 +1,17 @@
 <?php
 namespace GuzzleHttp\Handler;
 
+use GuzzleHttp\Psr7\Response;
+use GuzzleHttp\Psr7\LazyOpenStream;
+use GuzzleHttp\Psr7\InflateStream;
+use function GuzzleHttp\Promise\rejection_for;
+use function GuzzleHttp\headers_from_lines;
+use function GuzzleHttp\Psr7\stream_for;
+use function GuzzleHttp\normalize_header_keys;
+use function GuzzleHttp\Psr7\copy_to_stream;
+use function GuzzleHttp\is_host_in_noproxy;
+use function GuzzleHttp\default_ca_bundle;
+use function GuzzleHttp\debug_resource;
 use GuzzleHttp\Exception\RequestException;
 use GuzzleHttp\Exception\ConnectException;
 use GuzzleHttp\Promise\FulfilledPromise;
@@ -67,7 +78,7 @@ public function __invoke(RequestInterface $request, array $options)
             $e = RequestException::wrapException($request, $e);
             $this->invokeStats($options, $request, $startTime, null, $e);
 
-            return \GuzzleHttp\Promise\rejection_for($e);
+            return rejection_for($e);
         }
     }
 
@@ -102,16 +113,16 @@ private function createResponse(
         $ver = explode('/', $parts[0])[1];
         $status = $parts[1];
         $reason = isset($parts[2]) ? $parts[2] : null;
-        $headers = \GuzzleHttp\headers_from_lines($hdrs);
+        $headers = headers_from_lines($hdrs);
         list($stream, $headers) = $this->checkDecode($options, $headers, $stream);
-        $stream = Psr7\stream_for($stream);
+        $stream = stream_for($stream);
         $sink = $stream;
 
         if (strcasecmp('HEAD', $request->getMethod())) {
             $sink = $this->createSink($stream, $options);
         }
 
-        $response = new Psr7\Response($status, $headers, $sink, $ver, $reason);
+        $response = new Response($status, $headers, $sink, $ver, $reason);
 
         if (isset($options['on_headers'])) {
             try {
@@ -119,7 +130,7 @@ private function createResponse(
             } catch (\Exception $e) {
                 $msg = 'An error was encountered during the on_headers event';
                 $ex = new RequestException($msg, $request, $response, $e);
-                return \GuzzleHttp\Promise\rejection_for($ex);
+                return rejection_for($ex);
             }
         }
 
@@ -149,20 +160,20 @@ private function createSink(StreamInterface $stream, array $options)
             : fopen('php://temp', 'r+');
 
         return is_string($sink)
-            ? new Psr7\LazyOpenStream($sink, 'w+')
-            : Psr7\stream_for($sink);
+            ? new LazyOpenStream($sink, 'w+')
+            : stream_for($sink);
     }
 
     private function checkDecode(array $options, array $headers, $stream)
     {
         // Automatically decode responses when instructed.
         if (!empty($options['decode_content'])) {
-            $normalizedKeys = \GuzzleHttp\normalize_header_keys($headers);
+            $normalizedKeys = normalize_header_keys($headers);
             if (isset($normalizedKeys['content-encoding'])) {
                 $encoding = $headers[$normalizedKeys['content-encoding']];
                 if ($encoding[0] === 'gzip' || $encoding[0] === 'deflate') {
-                    $stream = new Psr7\InflateStream(
-                        Psr7\stream_for($stream)
+                    $stream = new InflateStream(
+                        stream_for($stream)
                     );
                     $headers['x-encoded-content-encoding']
                         = $headers[$normalizedKeys['content-encoding']];
@@ -207,7 +218,7 @@ private function drain(
         // that number of bytes has been read. This can prevent infinitely
         // reading from a stream when dealing with servers that do not honor
         // Connection: Close headers.
-        Psr7\copy_to_stream(
+        copy_to_stream(
             $source,
             $sink,
             (strlen($contentLength) > 0 && (int) $contentLength > 0) ? (int) $contentLength : -1
@@ -412,7 +423,7 @@ private function add_proxy(RequestInterface $request, &$options, $value, &$param
             $scheme = $request->getUri()->getScheme();
             if (isset($value[$scheme])) {
                 if (!isset($value['no'])
-                    || !\GuzzleHttp\is_host_in_noproxy(
+                    || !is_host_in_noproxy(
                         $request->getUri()->getHost(),
                         $value['no']
                     )
@@ -436,7 +447,7 @@ private function add_verify(RequestInterface $request, &$options, $value, &$para
             // PHP 5.6 or greater will find the system cert by default. When
             // < 5.6, use the Guzzle bundled cacert.
             if (PHP_VERSION_ID < 50600) {
-                $options['ssl']['cafile'] = \GuzzleHttp\default_ca_bundle();
+                $options['ssl']['cafile'] = default_ca_bundle();
             }
         } elseif (is_string($value)) {
             $options['ssl']['cafile'] = $value;
@@ -503,7 +514,7 @@ private function add_debug(RequestInterface $request, &$options, $value, &$param
         static $args = ['severity', 'message', 'message_code',
             'bytes_transferred', 'bytes_max'];
 
-        $value = \GuzzleHttp\debug_resource($value);
+        $value = debug_resource($value);
         $ident = $request->getMethod() . ' ' . $request->getUri()->withFragment('');
         $this->addNotification(
             $params,
diff --git a/vendor/guzzlehttp/guzzle/src/MessageFormatter.php b/vendor/guzzlehttp/guzzle/src/MessageFormatter.php
index 663ac73..ed14e33 100644
--- a/vendor/guzzlehttp/guzzle/src/MessageFormatter.php
+++ b/vendor/guzzlehttp/guzzle/src/MessageFormatter.php
@@ -1,6 +1,7 @@
 <?php
 namespace GuzzleHttp;
 
+use function GuzzleHttp\Psr7\str;
 use Psr\Http\Message\MessageInterface;
 use Psr\Http\Message\RequestInterface;
 use Psr\Http\Message\ResponseInterface;
@@ -80,10 +81,10 @@ function (array $matches) use ($request, $response, $error, &$cache) {
                 $result = '';
                 switch ($matches[1]) {
                     case 'request':
-                        $result = Psr7\str($request);
+                        $result = str($request);
                         break;
                     case 'response':
-                        $result = $response ? Psr7\str($response) : '';
+                        $result = $response ? str($response) : '';
                         break;
                     case 'req_headers':
                         $result = trim($request->getMethod()
diff --git a/vendor/guzzlehttp/guzzle/src/Middleware.php b/vendor/guzzlehttp/guzzle/src/Middleware.php
index 2d762a0..d9cedbc 100644
--- a/vendor/guzzlehttp/guzzle/src/Middleware.php
+++ b/vendor/guzzlehttp/guzzle/src/Middleware.php
@@ -1,6 +1,7 @@
 <?php
 namespace GuzzleHttp;
 
+use function GuzzleHttp\Promise\rejection_for;
 use GuzzleHttp\Cookie\CookieJarInterface;
 use GuzzleHttp\Exception\RequestException;
 use GuzzleHttp\Promise\RejectedPromise;
@@ -103,7 +104,7 @@ function ($reason) use ($request, &$container, $options) {
                             'error'    => $reason,
                             'options'  => $options
                         ];
-                        return \GuzzleHttp\Promise\rejection_for($reason);
+                        return rejection_for($reason);
                     }
                 );
             };
@@ -199,7 +200,7 @@ function ($reason) use ($logger, $request, $formatter) {
                             : null;
                         $message = $formatter->format($request, $response, $reason);
                         $logger->notice($message);
-                        return \GuzzleHttp\Promise\rejection_for($reason);
+                        return rejection_for($reason);
                     }
                 );
             };
diff --git a/vendor/guzzlehttp/guzzle/src/Pool.php b/vendor/guzzlehttp/guzzle/src/Pool.php
index 8f1be33..c1e2a43 100644
--- a/vendor/guzzlehttp/guzzle/src/Pool.php
+++ b/vendor/guzzlehttp/guzzle/src/Pool.php
@@ -1,6 +1,7 @@
 <?php
 namespace GuzzleHttp;
 
+use function GuzzleHttp\Promise\iter_for;
 use GuzzleHttp\Promise\PromisorInterface;
 use Psr\Http\Message\RequestInterface;
 use GuzzleHttp\Promise\EachPromise;
@@ -50,7 +51,7 @@ public function __construct(
             $opts = [];
         }
 
-        $iterable = \GuzzleHttp\Promise\iter_for($requests);
+        $iterable = iter_for($requests);
         $requests = function () use ($iterable, $client, $opts) {
             foreach ($iterable as $key => $rfn) {
                 if ($rfn instanceof RequestInterface) {
diff --git a/vendor/guzzlehttp/guzzle/src/PrepareBodyMiddleware.php b/vendor/guzzlehttp/guzzle/src/PrepareBodyMiddleware.php
index 2eb95f9..94b2987 100644
--- a/vendor/guzzlehttp/guzzle/src/PrepareBodyMiddleware.php
+++ b/vendor/guzzlehttp/guzzle/src/PrepareBodyMiddleware.php
@@ -1,6 +1,8 @@
 <?php
 namespace GuzzleHttp;
 
+use function GuzzleHttp\Psr7\mimetype_from_filename;
+use function GuzzleHttp\Psr7\modify_request;
 use GuzzleHttp\Promise\PromiseInterface;
 use GuzzleHttp\Psr7;
 use Psr\Http\Message\RequestInterface;
@@ -42,7 +44,7 @@ public function __invoke(RequestInterface $request, array $options)
         // Add a default content-type if possible.
         if (!$request->hasHeader('Content-Type')) {
             if ($uri = $request->getBody()->getMetadata('uri')) {
-                if ($type = Psr7\mimetype_from_filename($uri)) {
+                if ($type = mimetype_from_filename($uri)) {
                     $modify['set_headers']['Content-Type'] = $type;
                 }
             }
@@ -63,7 +65,7 @@ public function __invoke(RequestInterface $request, array $options)
         // Add the expect header if needed.
         $this->addExpectHeader($request, $options, $modify);
 
-        return $fn(Psr7\modify_request($request, $modify), $options);
+        return $fn(modify_request($request, $modify), $options);
     }
 
     private function addExpectHeader(
diff --git a/vendor/guzzlehttp/guzzle/src/RedirectMiddleware.php b/vendor/guzzlehttp/guzzle/src/RedirectMiddleware.php
index 131b771..c79f084 100644
--- a/vendor/guzzlehttp/guzzle/src/RedirectMiddleware.php
+++ b/vendor/guzzlehttp/guzzle/src/RedirectMiddleware.php
@@ -1,6 +1,10 @@
 <?php
 namespace GuzzleHttp;
 
+use GuzzleHttp\Psr7\UriResolver;
+use GuzzleHttp\Psr7\Uri;
+use function GuzzleHttp\Psr7\rewind_body;
+use function GuzzleHttp\Psr7\modify_request;
 use GuzzleHttp\Exception\BadResponseException;
 use GuzzleHttp\Exception\TooManyRedirectsException;
 use GuzzleHttp\Promise\PromiseInterface;
@@ -179,7 +183,7 @@ public function modifyRequest(
         }
 
         $modify['uri'] = $this->redirectUri($request, $response, $protocols);
-        Psr7\rewind_body($request);
+        rewind_body($request);
 
         // Add the Referer header if it is told to do so and only
         // add the header if we are not redirecting from https to http.
@@ -197,7 +201,7 @@ public function modifyRequest(
             $modify['remove_headers'][] = 'Authorization';
         }
 
-        return Psr7\modify_request($request, $modify);
+        return modify_request($request, $modify);
     }
 
     /**
@@ -214,9 +218,9 @@ private function redirectUri(
         ResponseInterface $response,
         array $protocols
     ) {
-        $location = Psr7\UriResolver::resolve(
+        $location = UriResolver::resolve(
             $request->getUri(),
-            new Psr7\Uri($response->getHeaderLine('Location'))
+            new Uri($response->getHeaderLine('Location'))
         );
 
         // Ensure that the redirect URI is allowed based on the protocols.
diff --git a/vendor/guzzlehttp/guzzle/src/RetryMiddleware.php b/vendor/guzzlehttp/guzzle/src/RetryMiddleware.php
index 7d40eca..7be418a 100644
--- a/vendor/guzzlehttp/guzzle/src/RetryMiddleware.php
+++ b/vendor/guzzlehttp/guzzle/src/RetryMiddleware.php
@@ -1,6 +1,7 @@
 <?php
 namespace GuzzleHttp;
 
+use function GuzzleHttp\Promise\rejection_for;
 use GuzzleHttp\Promise\PromiseInterface;
 use GuzzleHttp\Promise\RejectedPromise;
 use GuzzleHttp\Psr7;
@@ -100,7 +101,7 @@ private function onRejected(RequestInterface $req, array $options)
                 null,
                 $reason
             )) {
-                return \GuzzleHttp\Promise\rejection_for($reason);
+                return rejection_for($reason);
             }
             return $this->doRetry($req, $options);
         };
