modules/contrib/iots/iots/iots.module
modules/contrib/iots/iots/src/Controller/IotsDebug.php
modules/contrib/iots/iots/src/Controller/IotsPage.php
modules/contrib/iots/iots/src/Form/Settings.php
modules/contrib/iots/iots/src/Plugin/Field/FieldType/UuidItem.php
modules/contrib/iots/iots/src/Plugin/IotsDeviceType/Esp32.php
modules/contrib/iots/iots/src/PluginManager/DeviceTypeAnnotation.php
modules/contrib/iots/iots/src/PluginManager/DeviceTypeManager.php
modules/contrib/iots/iots/src/PluginManager/DeviceTypePluginBase.php
modules/contrib/iots/iots/src/PluginManager/DeviceTypePluginInterface.php
modules/contrib/iots/iots/src/Service/Iots.php
modules/contrib/iots/iots/src/Service/IotsName.php
modules/contrib/iots/iots/src/Utility/AjaxResult.php
modules/contrib/iots/iots/src/Utility/ContentEntity.php
modules/contrib/iots/iots/src/Utility/DrushExec.php
modules/contrib/iots/iots/src/Utility/FieldDefinition.php
modules/contrib/iots/iots/src/Utility/MigrationsSourceBase.php
modules/contrib/iots/iots_credentials/iots_credentials.module
modules/contrib/iots/iots_credentials/src/Entity/IotsCredentials.php
modules/contrib/iots/iots_credentials/src/Entity/IotsCredentialsInterface.php
modules/contrib/iots/iots_credentials/src/Entity/IotsCredentialsListBuilder.php
modules/contrib/iots/iots_credentials/src/Entity/IotsCredentialsViewBuilder.php
modules/contrib/iots/iots_credentials/src/Form/IotsCredentialsForm.php
modules/contrib/iots/iots_credentials/src/Form/IotsCredentialsSettingsForm.php
modules/contrib/iots/iots_credentials/src/Service/Certificate.php
modules/contrib/iots/iots_credentials/src/Service/Credentials.php
modules/contrib/iots/iots_deployment/iots_deployment.module
modules/contrib/iots/iots_deployment/src/Entity/IotsDeployment.php
modules/contrib/iots/iots_deployment/src/Form/IotsDeploymentForm.php
modules/contrib/iots/iots_deployment/src/Form/IotsDeploymentSettingsForm.php
modules/contrib/iots/iots_deployment/src/IotsDeploymentInterface.php
modules/contrib/iots/iots_deployment/src/IotsDeploymentListBuilder.php
modules/contrib/iots/iots_device/iots_device.module
modules/contrib/iots/iots_device/src/Entity/IotsDevice.php
modules/contrib/iots/iots_device/src/Entity/IotsDeviceInterface.php
modules/contrib/iots/iots_device/src/Entity/IotsDeviceListBuilder.php
modules/contrib/iots/iots_device/src/Entity/IotsDeviceViewBuilder.php
modules/contrib/iots/iots_device/src/Form/IotsDeviceForm.php
modules/contrib/iots/iots_device/src/Form/IotsDeviceSettingsForm.php
modules/contrib/iots/iots_device/src/Form/NewDeviceForm.php
modules/contrib/iots/iots_device/src/Service/Device.php
modules/contrib/iots/iots_layout/iots_layout.module
modules/contrib/iots/iots_layout/src/Entity/IotsLayout.php
modules/contrib/iots/iots_layout/src/Entity/IotsLayoutAccessControlHandler.php
modules/contrib/iots/iots_layout/src/Entity/IotsLayoutInterface.php
modules/contrib/iots/iots_layout/src/Entity/IotsLayoutListBuilder.php
modules/contrib/iots/iots_layout/src/Entity/IotsLayoutViewBuilder.php
modules/contrib/iots/iots_layout/src/Form/IotsLayoutForm.php
modules/contrib/iots/iots_layout/src/Form/IotsLayoutSettingsForm.php
modules/contrib/iots/iots_layout/src/Form/NewLayoutForm.php
modules/contrib/iots/iots_layout/src/Service/Layout.php
modules/contrib/iots/iots_layout/src/Service/LayoutData.php
modules/contrib/iots/iots_product/iots_product.module
modules/contrib/iots/iots_product/src/Entity/IotsProduct.php
modules/contrib/iots/iots_product/src/Entity/IotsProductInterface.php
modules/contrib/iots/iots_product/src/Entity/IotsProductListBuilder.php
modules/contrib/iots/iots_product/src/Entity/IotsProductViewBuilder.php
modules/contrib/iots/iots_product/src/Form/IotsProductForm.php
modules/contrib/iots/iots_product/src/Form/IotsProductSettingsForm.php
modules/contrib/iots/iots_registry/iots_registry.module
modules/contrib/iots/iots_registry/src/Entity/IotsRegistry.php
modules/contrib/iots/iots_registry/src/Entity/IotsRegistryInterface.php
modules/contrib/iots/iots_registry/src/Entity/IotsRegistryListBuilder.php
modules/contrib/iots/iots_registry/src/Entity/IotsRegistryViewBuilder.php
modules/contrib/iots/iots_registry/src/Form/IotsRegistryForm.php
modules/contrib/iots/iots_registry/src/Form/IotsRegistrySettingsForm.php
modules/contrib/iots/iots_registry/src/Service/Registry.php
modules/contrib/iots/iots_release/iots_release.module
modules/contrib/iots/iots_release/src/Entity/IotsRelease.php
modules/contrib/iots/iots_release/src/Entity/IotsReleaseAccessControlHandler.php
modules/contrib/iots/iots_release/src/Entity/IotsReleaseInterface.php
modules/contrib/iots/iots_release/src/Entity/IotsReleaseListBuilder.php
modules/contrib/iots/iots_release/src/Entity/IotsReleaseViewBuilder.php
modules/contrib/iots/iots_release/src/Form/IotsReleaseForm.php
modules/contrib/iots/iots_release/src/Form/IotsReleaseSettingsForm.php
modules/contrib/iots/iots_widget/iots_widget.module
modules/contrib/iots/iots_widget/src/Entity/IotsWidget.php
modules/contrib/iots/iots_widget/src/Entity/IotsWidgetAccessControlHandler.php
modules/contrib/iots/iots_widget/src/Entity/IotsWidgetInterface.php
modules/contrib/iots/iots_widget/src/Entity/IotsWidgetListBuilder.php
modules/contrib/iots/iots_widget/src/Entity/IotsWidgetType.php
modules/contrib/iots/iots_widget/src/Entity/IotsWidgetTypeListBuilder.php
modules/contrib/iots/iots_widget/src/Entity/IotsWidgetViewBuilder.php
modules/contrib/iots/iots_widget/src/Form/IotsWidgetForm.php
modules/contrib/iots/iots_widget/src/Form/IotsWidgetTypeForm.php
modules/contrib/iots/iots_widget/src/Service/Widget.php
modules/contrib/iots/iots_widget/src/Service/WidgetData.php

23 files with changes
=====================

1) modules/contrib/iots/iots_widget/src/Form/IotsWidgetForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New widget %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/iots/iots_widget/src/Entity/IotsWidgetListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new IotsDeviceListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\iots_widget\Entity\IotsWidgetInterface $entity */
+    /** @var IotsWidgetInterface $entity */
     $row['name'] = $entity->toLink();
     $row['uuid'] = $this->toCopyText($entity->uuid->value);
     // $row['layout'] = $entity->toLink();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/iots/iots_widget/src/Entity/IotsWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iots_widget\Entity;

+use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\RevisionLogEntityTrait;
 use Drupal\iots\Utility\FieldDefinition;
@@ @@
       'list' => 'List',
       'rgb' => 'RGB',
     ]);
-    /** @var \Drupal\Core\Field\BaseFieldDefinition $fields['type'] */
+    /** @var BaseFieldDefinition $fields ['type'] */
     $fields['type']->setDefaultValue('switch');
     $fields['key'] = FieldDefinition::string('Key');
     $fields['publish'] = FieldDefinition::string('Publish');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/iots/iots_release/src/Form/IotsReleaseForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New release %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/iots/iots_release/src/Entity/IotsReleaseListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new IotsReleaseListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/iots/iots_registry/src/Form/IotsRegistryForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New device registry %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/iots/iots_registry/src/Entity/IotsRegistryListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new IotsRegistryListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\iots_registry\Entity\IotsRegistryInterface $entity */
+    /** @var IotsRegistryInterface $entity */
     $row['name'] = $entity->toLink();
     $row['uuid'] = $entity->uuid->value;
     $row['description'] = $entity->description->value;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/iots/iots_product/src/Form/IotsProductForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New product %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/iots/iots_product/src/Entity/IotsProductListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new IotsDeviceListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\iots_product\Entity\IotsProductInterface $entity */
+    /** @var IotsProductInterface $entity */
     $row['name'] = $entity->toLink();
     $row['uuid'] = $this->toCopyText($entity->uuid->value);
     $status = $entity->isEnabled() ? '<i class="far fa-eye"></i>' : '<i class="far fa-eye-slash"></i>';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/iots/iots_layout/src/Service/LayoutData.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iots_layout\Service;

+use Drupal\iots_widget\Service\WidgetData;
 use Drupal\Core\Logger\LoggerChannelTrait;
 use Drupal\Core\Messenger\MessengerTrait;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The cml storage.
    *
-   * @var \Drupal\iots_widget\Service\WidgetData
+   * @var WidgetData
    */
   protected $widgetData;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/iots/iots_layout/src/Service/Layout.php:32

    ---------- begin diff ----------
@@ @@
     $rows = [];
     $no = 0;
     foreach ($this->query($registry_id) as $layout) {
-      /** @var \Drupal\iots_layout\Entity\IotsLayout $layout */
+      /** @var IotsLayout $layout */
       $rows[] = $this->buildRow($layout, ++$no);
     }
     $build['title'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/iots/iots_layout/src/Form/IotsLayoutForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New layout %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/iots/iots_layout/src/Entity/IotsLayoutListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new IotsLayoutListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/iots/iots_device/src/Service/Device.php:33

    ---------- begin diff ----------
@@ @@
     $rows = [];
     $no = 0;
     foreach ($this->query($registry_id) as $device) {
-      /** @var \Drupal\iots_device\Entity\IotsDevice $device */
+      /** @var IotsDevice $device */
       $rows[] = $this->buildRow($device, ++$no);
     }
     $build['title'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/iots/iots_device/src/Form/IotsDeviceForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New device %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/iots/iots_device/src/Entity/IotsDeviceListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new IotsDeviceListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\iots_device\Entity\IotsDeviceInterface $entity */
+    /** @var IotsDeviceInterface $entity */
     $row['name'] = $entity->toLink();
     $row['uuid'] = $this->toCopyText($entity->uuid->value);
     $row['registry'] = '-';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/iots/iots_deployment/src/IotsDeploymentListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new IotsDeploymentListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/iots/iots_deployment/src/Form/IotsDeploymentForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New deployment %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/iots/iots_credentials/src/Service/Credentials.php:35

    ---------- begin diff ----------
@@ @@
     ];
     $rows = [];
     foreach ($this->storage->loadMultiple($ids) as $credential) {
-      /** @var \Drupal\iots_credentials\Entity\IotsCredentials $credential */
+      /** @var IotsCredentials $credential */
       $rows[] = $this->buildRow($credential);
     }
     $build['table'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/iots/iots_credentials/src/Form/IotsCredentialsForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New device credentials %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/iots/iots_credentials/src/Entity/IotsCredentialsListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new IotsCredentialsListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\iots_credentials\Entity\IotsCredentialsInterface $entity */
+    /** @var IotsCredentialsInterface $entity */
     $row['uuid'] = $entity->uuid->value;
     $row['type'] = $entity->type->value;
     if ($entity->type->value == 'rsa') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/iots/iots/src/PluginManager/DeviceTypeManager.php:21

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/iots/iots/src/PluginManager/DeviceTypeAnnotation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iots\PluginManager;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the archiver plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 23 files have been changed by Rector                                      

