modules/contrib/context/context.install
modules/contrib/context/context.module
modules/contrib/context/modules/context_ui/context_ui.module
modules/contrib/context/modules/context_ui/src/ContextListBuilder.php
modules/contrib/context/modules/context_ui/src/Controller/ContextUIController.php
modules/contrib/context/modules/context_ui/src/Form/ConditionDeleteForm.php
modules/contrib/context/modules/context_ui/src/Form/ContextAddForm.php
modules/contrib/context/modules/context_ui/src/Form/ContextDeleteForm.php
modules/contrib/context/modules/context_ui/src/Form/ContextDisableForm.php
modules/contrib/context/modules/context_ui/src/Form/ContextDuplicateForm.php
modules/contrib/context/modules/context_ui/src/Form/ContextEditForm.php
modules/contrib/context/modules/context_ui/src/Form/ContextFormBase.php
modules/contrib/context/modules/context_ui/src/Form/ReactionDeleteForm.php
modules/contrib/context/modules/context_ui/src/MenuBuilder.php
modules/contrib/context/modules/context_ui/src/Plugin/Block/ContextInspector.php
modules/contrib/context/src/ContextInterface.php
modules/contrib/context/src/ContextManager.php
modules/contrib/context/src/ContextMenuActiveTrail.php
modules/contrib/context/src/ContextReactionInterface.php
modules/contrib/context/src/ContextReactionManager.php
modules/contrib/context/src/ContextReactionPluginBase.php
modules/contrib/context/src/ContextServiceProvider.php
modules/contrib/context/src/Entity/Context.php
modules/contrib/context/src/Entity/ContextAccess.php
modules/contrib/context/src/EventSubscriber/BlockPageDisplayVariantSubscriber.php
modules/contrib/context/src/Form/AjaxFormTrait.php
modules/contrib/context/src/Plugin/Condition/ContextAll.php
modules/contrib/context/src/Plugin/Condition/ContextAny.php
modules/contrib/context/src/Plugin/Condition/HttpStatusCode.php
modules/contrib/context/src/Plugin/Condition/RequestDomain.php
modules/contrib/context/src/Plugin/Condition/RequestPathExclusion.php
modules/contrib/context/src/Plugin/Condition/UserProfilePage.php
modules/contrib/context/src/Plugin/Condition/ViewInclusion.php
modules/contrib/context/src/Plugin/ContextReaction/Blocks.php
modules/contrib/context/src/Plugin/ContextReaction/BodyClass.php
modules/contrib/context/src/Plugin/ContextReaction/Menu.php
modules/contrib/context/src/Plugin/ContextReaction/PageTemplateSuggestions.php
modules/contrib/context/src/Plugin/ContextReaction/PageTitle.php
modules/contrib/context/src/Plugin/ContextReaction/Regions.php
modules/contrib/context/src/Plugin/ContextReaction/Theme.php
modules/contrib/context/src/Plugin/ContextReactionPluginCollection.php
modules/contrib/context/src/Plugin/DisplayVariant/ContextBlockPageVariant.php
modules/contrib/context/src/Reaction/Annotation/ContextReaction.php
modules/contrib/context/src/Reaction/Blocks/BlockCollection.php
modules/contrib/context/src/Reaction/Blocks/Controller/ContextReactionBlocksController.php
modules/contrib/context/src/Reaction/Blocks/Form/BlockAddForm.php
modules/contrib/context/src/Reaction/Blocks/Form/BlockDeleteForm.php
modules/contrib/context/src/Reaction/Blocks/Form/BlockEditForm.php
modules/contrib/context/src/Reaction/Blocks/Form/BlockFormBase.php
modules/contrib/context/src/Reaction/ContextReactionFormBase.php
modules/contrib/context/src/Theme/ThemeSwitcherNegotiator.php
modules/contrib/context/tests/src/Kernel/ContextAllAnyTest.php
modules/contrib/context/tests/src/Kernel/HttpStatusCodeTest.php
modules/contrib/context/tests/src/Kernel/RequestDomainTest.php
modules/contrib/context/tests/src/Kernel/RequestPathExclusionTest.php
modules/contrib/context/tests/src/Kernel/UserProfilePageTest.php
modules/contrib/context/tests/src/Kernel/ViewInclusionTest.php

43 files with changes
=====================

1) modules/contrib/context/tests/src/Kernel/ViewInclusionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\context\Kernel;

+use Drupal\Core\Condition\ConditionManager;
+use Drupal\context\Plugin\Condition\ViewInclusion;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The condition plugin manager used for testing.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The request stack used for testing.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
     $request->attributes->set('_route_object', new Route('/node/'));
     $this->requestStack->push($request);

-    /** @var \Drupal\context\Plugin\Condition\ViewInclusion $condition */
+    /** @var ViewInclusion $condition */
     $condition = $this->pluginManager->createInstance('view_inclusion');
     $condition->setConfig('view_inclusion', ['view-frontpage-page_1' => 'view-frontpage-page_1']);
     $this->assertTrue($condition->execute(), 'The path does not match');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/context/tests/src/Kernel/UserProfilePageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\context\Kernel;

+use Drupal\Core\Condition\ConditionManager;
+use Drupal\context\Plugin\Condition\UserProfilePage;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The condition plugin manager used for testing.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The request stack used for testing.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
     $request->attributes->set('_route_object', new Route('/node/'));
     $this->requestStack->push($request);

-    /** @var \Drupal\context\Plugin\Condition\UserProfilePage $condition */
+    /** @var UserProfilePage $condition */
     $condition = $this->pluginManager->createInstance('user_status');

     // Checks if viewing_profile is set to not work on nodes.
@@ @@
     $request->attributes->set('_route_object', new Route('/node/'));
     $this->requestStack->push($request);

-    /** @var \Drupal\context\Plugin\Condition\UserProfilePage $condition */
+    /** @var UserProfilePage $condition */
     $condition = $this->pluginManager->createInstance('user_status');
     $condition->setConfig('negate', 1);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/context/tests/src/Kernel/RequestPathExclusionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\context\Kernel;

+use Drupal\Core\Condition\ConditionManager;
+use Drupal\context\Plugin\Condition\RequestPathExclusion;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\system\Tests\Routing\MockAliasManager;
@@ @@
   /**
    * The condition plugin manager used for testing.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The path alias manager used for testing.
    *
-   * @var \Drupal\system\Tests\Routing\MockAliasManager
+   * @var MockAliasManager
    */
   protected $aliasManager;

@@ @@
   /**
    * The request stack used for testing.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
     $this->requestStack->push($request);

     // Test a standard path.
-    /** @var \Drupal\context\Plugin\Condition\RequestPathExclusion $condition */
+    /** @var RequestPathExclusion $condition */
     $condition = $this->pluginManager->createInstance('request_path_exclusion');
     $condition->setConfig('pages', $pages);
     $this->aliasManager->addAlias('/my/exclude/page2', '/my/exclude/page2');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/context/tests/src/Kernel/RequestDomainTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\context\Kernel;

+use Drupal\Core\Condition\ConditionManager;
+use Drupal\context\Plugin\Condition\RequestDomain;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The condition plugin manager used for testing.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The request stack used for testing.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
     $this->requestStack->push($request);
     $domain = $request->getHost();

-    /** @var \Drupal\context\Plugin\Condition\RequestDomain $condition */
+    /** @var RequestDomain $condition */
     $condition = $this->pluginManager->createInstance('request_domain');
     $condition->setConfig('domains', $domain);
     $this->assertTrue($condition->execute(), 'Domains match');
@@ @@
     $this->requestStack->push($request);
     $domain = $request->getHost();

-    /** @var \Drupal\context\Plugin\Condition\RequestDomain $condition */
+    /** @var RequestDomain $condition */
     $condition = $this->pluginManager->createInstance('request_domain');
     $condition->setConfig('negate', 1);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/context/tests/src/Kernel/HttpStatusCodeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\context\Kernel;

+use Drupal\Core\Condition\ConditionManager;
+use Drupal\path_alias\AliasManagerInterface;
+use Drupal\system\Plugin\Condition\RequestPath;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\system\Tests\Routing\MockAliasManager;
@@ @@
   /**
    * The condition plugin manager used for testing.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The path alias manager used for testing.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * The request stack used for testing.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Current path stack.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
     $request->attributes->set('exception', new HttpException(200));
     $this->requestStack->push($request);

-    /** @var \Drupal\system\Plugin\Condition\RequestPath $condition * */
+    /** @var RequestPath $condition * */
     $condition = $this->pluginManager->createInstance('http_status_code');
     $condition->setConfig('status_codes', $statusCodes);

@@ @@
     $request->attributes->set('exception', new HttpException(200));
     $this->requestStack->push($request);

-    /** @var \Drupal\system\Plugin\Condition\RequestPath $condition * */
+    /** @var RequestPath $condition * */
     $condition = $this->pluginManager->createInstance('http_status_code');
     $condition->setConfig('status_codes', $statusCodes);
     $condition->setConfig('negate', 1);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/context/tests/src/Kernel/ContextAllAnyTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\context\Kernel;

+use Drupal\Core\Condition\ConditionManager;
+use Drupal\path_alias\AliasManagerInterface;
+use Drupal\context\Plugin\Condition\RequestDomain;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The condition plugin manager used for testing.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The path alias manager used for testing.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * The request stack used for testing.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@

     $request = Request::create('/node/22');
     $this->requestStack->push($request);
-    /** @var \Drupal\context\Plugin\Condition\RequestDomain $condition */
+    /** @var RequestDomain $condition */
     $condition = $this->pluginManager->createInstance('context_all');

     $this->aliasManager->addAlias('/node/22', '/node/22');
@@ @@
   public function testContextAny() {
     $request = Request::create('/node/2');
     $this->requestStack->push($request);
-    /** @var \Drupal\context\Plugin\Condition\RequestDomain $condition */
+    /** @var RequestDomain $condition */
     $condition = $this->pluginManager->createInstance('context');

     $this->aliasManager->addAlias('/node/2', '/node/2');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/context/src/Theme/ThemeSwitcherNegotiator.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * ContextManager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   private $contextManager;

@@ @@
   /**
    * Service constructor.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   ContextManager.
    */
   public function __construct(ContextManager $contextManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/context/src/Reaction/ContextReactionFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context\Reaction;

+use Drupal\context\ContextReactionInterface;
 use Drupal\context\ContextInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The context.
    *
-   * @var \Drupal\context\ContextInterface
+   * @var ContextInterface
    */
   protected $context;

@@ @@
   /**
    * The context reaction.
    *
-   * @var \Drupal\context\ContextReactionInterface
+   * @var ContextReactionInterface
    */
   protected $reaction;

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context that contains the reaction.
    * @param int $reaction_id
    *   The id of the reaction that is being configured.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/context/src/Reaction/Blocks/Form/BlockFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context\Reaction\Blocks\Form;

+use Drupal\Core\Block\BlockPluginInterface;
+use Drupal\context\Plugin\ContextReaction\Blocks;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\block\BlockInterface;
 use Drupal\block\BlockRepositoryInterface;
 use Drupal\block\Entity\Block;
 use Drupal\context\ContextManager;
@@ @@
   /**
    * The plugin being configured.
    *
-   * @var \Drupal\Core\Block\BlockPluginInterface
+   * @var BlockPluginInterface
    */
   protected $block;

@@ @@
   /**
    * The context entity the reaction belongs to.
    *
-   * @var \Drupal\context\ContextInterface
+   * @var ContextInterface
    */
   protected $context;

@@ @@
   /**
    * The blocks reaction this block should be added to.
    *
-   * @var \Drupal\context\Plugin\ContextReaction\Blocks
+   * @var Blocks
    */
   protected $reaction;

@@ @@
   /**
    * The block manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * The Drupal context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The handler of the available themes.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The context reaction manager.
    *
-   * @var \Drupal\context\ContextReactionManager
+   * @var ContextReactionManager
    */
   protected $contextReactionManager;

@@ @@
   /**
    * The Context modules context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new VariantPluginFormBase.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $block_manager
+   * @param PluginManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $contextRepository
+   * @param ContextRepositoryInterface $contextRepository
    *   The Drupal context repository.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   * @param ThemeHandlerInterface $themeHandler
    *   The handler of the available themes.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The form builder.
-   * @param \Drupal\context\ContextReactionManager $contextReactionManager
+   * @param ContextReactionManager $contextReactionManager
    *   The context reaction manager.
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context modules context manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The current request.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(
@@ @@
    * @param string $block_id
    *   Either a block ID, or the plugin ID used to create a new block.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    *   The block plugin.
    */
   abstract protected function prepareBlock($block_id);
@@ @@
   /**
    * Get the value to use for the submit button.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   An object that, when cast to a string, returns the translated string.
    */
   abstract protected function getSubmitValue();
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context the reaction belongs to.
    * @param string|null $reaction_id
    *   The ID of the blocks reaction the block should be added to.
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Handle when the form is submitted trough AJAX.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    */
   public function submitFormAjax(array &$form, FormStateInterface $form_state) {
@@ @@
    * getEntity method is available. Since hook_form_block_form_alter is also
    * called in this form, this will break modules depending on this method.
    *
-   * @return \Drupal\block\BlockInterface
+   * @return BlockInterface
    *   A block entity.
    */
   public function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/context/src/Reaction/Blocks/Form/BlockDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context\Reaction\Blocks\Form;

+use Drupal\context\Plugin\ContextReaction\Blocks;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\context\ContextInterface;
 use Drupal\context\ContextManager;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   /**
    * The context that the block is being removed from.
    *
-   * @var \Drupal\context\ContextInterface
+   * @var ContextInterface
    */
   protected $context;

@@ @@
   /**
    * The blocks reaction.
    *
-   * @var \Drupal\context\Plugin\ContextReaction\Blocks
+   * @var Blocks
    */
   protected $reaction;

@@ @@
   /**
    * The block that is being removed.
    *
-   * @var \Drupal\Core\Block\BlockPluginInterface
+   * @var BlockPluginInterface
    */
   protected $block;

@@ @@
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;

@@ @@
   /**
    * Construct a condition delete form.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The context manager.
    */
   public function __construct(ContextManager $contextManager) {
@@ @@
   /**
    * Handle when the form is submitted trough AJAX.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function submitFormAjax() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/context/src/Reaction/Blocks/Controller/ContextReactionBlocksController.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * The Drupal context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The handler of the available themes.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The Context modules context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;

@@ @@
   /**
    * Constructs a new ContextReactionBlocksController object.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $blockManager
+   * @param BlockManagerInterface $blockManager
    *   The block manager.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $contextRepository
+   * @param ContextRepositoryInterface $contextRepository
    *   The Drupal context repository.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   * @param ThemeHandlerInterface $themeHandler
    *   The handler of the available themes.
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context modules context manager.
    */
   public function __construct(
@@ @@
   /**
    * Display a library of blocks that can be added to the context reaction.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context the blocks reaction belongs to.
    * @param string $reaction_id
    *   The ID of the blocks reaction that the selected block
@@ @@
   /**
    * Callback for the theme select list on the Context blocks reaction form.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context the block reaction is located on.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function blocksFormThemeSelect(Request $request, ContextInterface $context) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/context/src/Reaction/Blocks/BlockCollection.php:24

    ---------- begin diff ----------
@@ @@
    * @param string $theme
    *   The theme to get blocks for.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface[]
+   * @return BlockPluginInterface[]
    *   An associative array keyed by region, containing an associative array of
    *   block plugins.
    */
@@ @@
   public function getAllByRegion($theme) {
     $region_assignments = [];

-    /** @var \Drupal\Core\Block\BlockPluginInterface[] $this */
+    /** @var BlockPluginInterface[] $this */
     foreach ($this as $block_id => $block) {
       $configuration = $block->getConfiguration();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/context/src/Reaction/Annotation/ContextReaction.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context\Reaction\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the context reaction.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


14) modules/contrib/context/src/Plugin/DisplayVariant/ContextBlockPageVariant.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;

@@ @@
   /**
    * The display variant plugin manager.
    *
-   * @var \Drupal\Core\Display\VariantManager
+   * @var VariantManager
    */
   protected $displayVariant;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The context module manager.
-   * @param \Drupal\Core\Display\VariantManager $displayVariant
+   * @param VariantManager $displayVariant
    *   The variant manager.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   The Drupal theme manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ContextManager $contextManager, VariantManager $displayVariant, ThemeManagerInterface $themeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/context/src/Plugin/ContextReaction/Theme.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * The handler of the available themes.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/context/src/Plugin/ContextReaction/Regions.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * The handler of the available themes.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/context/src/Plugin/ContextReaction/Menu.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context\Plugin\ContextReaction;

+use Drupal\Core\Menu\MenuParentFormSelector;
 use Drupal\context\ContextReactionPluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Menu\MenuParentFormSelectorInterface;
@@ @@
   /**
    * The menu parent form selector service.
    *
-   * @var \Drupal\Core\Menu\MenuParentFormSelector
+   * @var MenuParentFormSelector
    */
   protected $menuParentFormSelector;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/context/src/Plugin/ContextReaction/Blocks.php:62

    ---------- begin diff ----------
@@ @@
   /**
    * Contains a temporary collection of blocks.
    *
-   * @var \Drupal\context\Reaction\Blocks\BlockCollection
+   * @var BlockCollection
    */
   protected $blocksCollection;

@@ @@
   /**
    * The Drupal UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * The handler of the available themes.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The Drupal context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
   /**
    * The current account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManager
+   * @var BlockManager
    */
   protected $blockManager;

@@ @@
   /**
    * Get all blocks as a collection.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface[]|BlockCollection
+   * @return BlockPluginInterface[]|BlockCollection
    *   The collection of blocks.
    */
   public function getBlocks() {
@@ @@
    * @param string $blockId
    *   The ID of the block to get.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    *   The specified block plugin.
    */
   public function getBlock($blockId) {
@@ @@

       // Add each block specified for the region if there are any.
       if (isset($blocks[$region])) {
-        /** @var \Drupal\Core\Block\BlockPluginInterface $block */
+        /** @var BlockPluginInterface $block */
         foreach ($blocks[$region] as $block_id => $block) {
           $configuration = $block->getConfiguration();

@@ @@
   /**
    * Check to see if the block should be uniquely placed.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $block
+   * @param BlockPluginInterface $block
    *   The block plugin.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/context/src/Plugin/Condition/ViewInclusion.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   private $currentRouteMatch;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   The current route match service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, CurrentRouteMatch $currentRouteMatch) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/context/src/Plugin/Condition/UserProfilePage.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Service current_route_match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   private $currentRouteMatch;

@@ @@
   /**
    * Service entity_field.manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   private $entityFieldManager;

@@ @@
   /**
    * Service current_user.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   private $currentUser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/context/src/Plugin/Condition/RequestDomain.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context\Plugin\Condition;

+use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Condition\ConditionPluginBase;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * Constructs a RequestPath condition plugin.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/context/src/Plugin/Condition/HttpStatusCode.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, RequestStack $request_stack) {
@@ @@
       return TRUE;
     }

-    /** @var \Symfony\Component\HttpKernel\Exception\HttpException $exception */
+    /** @var HttpException $exception */
     $exception = $this->requestStack->getCurrentRequest()->attributes->get('exception');

     if (!empty($exception) && $exception instanceof HttpException) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/context/src/Plugin/Condition/ContextAny.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context\Plugin\Condition;

+use Drupal\context\ContextInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\context\ContextManager;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Condition\ConditionPluginBase;
@@ @@
   /**
    * Context Manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   private $contextManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\context\ContextManager $context_manager
+   * @param ContextManager $context_manager
    *   A context manager for checking the current active contexts.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ContextManager $context_manager) {
@@ @@
       // Strip out `~` for negated contexts.
       $id = ltrim($id, '~');

-      /** @var \Drupal\context\ContextInterface $context */
+      /** @var ContextInterface $context */
       $context = $this->contextManager->getContext($id);
-      /** @var \Drupal\Core\Condition\ConditionInterface[] $context_conditions */
+      /** @var ConditionInterface[] $context_conditions */
       $context_conditions = $context->getConditions();
       foreach ($context_conditions as $condition) {
         $cache_contexts = Cache::mergeContexts($cache_contexts, $condition->getCacheContexts());
@@ @@

     // Handle negated contexts first.
     foreach ($negated_contexts as $name) {
-      /** @var \Drupal\context\ContextInterface $negated_context */
+      /** @var ContextInterface $negated_context */
       $negated_context = $this->contextManager->getContext($name);
       if ($this->contextManager->evaluateContextConditions($negated_context) && !$negated_context->disabled()) {
         return FALSE;
@@ @@

     // Now handle required contexts.
     foreach ($required_contexts as $name) {
-      /** @var \Drupal\context\ContextInterface $required_context */
+      /** @var ContextInterface $required_context */
       if ($required_context = $this->contextManager->getContext($name)) {
         if ($this->contextManager->evaluateContextConditions($required_context) && !$required_context->disabled()) {
           return TRUE;
@@ @@
     }

     // Handle the asterisks/wildcard contexts.
-    /** @var \Drupal\context\ContextInterface $asterisk_contexts */
+    /** @var ContextInterface $asterisk_contexts */
     if ($asterisk_contexts = $this->contextManager->getContext($asterisk_context)) {
       foreach ($asterisk_contexts as $context) {
         if ($this->contextManager->evaluateContextConditions($context) && !$context->disabled()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/context/src/Plugin/Condition/ContextAll.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context\Plugin\Condition;

+use Drupal\context\ContextInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\context\ContextManager;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Condition\ConditionPluginBase;
@@ @@
   /**
    * Context Manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   private $contextManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\context\ContextManager $context_manager
+   * @param ContextManager $context_manager
    *   A context manager for checking the current active contexts.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ContextManager $context_manager) {
@@ @@
       // Strip out `~` for negated contexts.
       $id = ltrim($id, '~');

-      /** @var \Drupal\context\ContextInterface $context */
+      /** @var ContextInterface $context */
       $context = $this->contextManager->getContext($id);
       if (empty($context)) {
         continue;
       }
-      /** @var \Drupal\Core\Condition\ConditionInterface[] $context_conditions */
+      /** @var ConditionInterface[] $context_conditions */
       $context_conditions = $context->getConditions();
       foreach ($context_conditions as $condition) {
         $cache_contexts = Cache::mergeContexts($cache_contexts, $condition->getCacheContexts());
@@ @@

     // Handle negated contexts first.
     foreach ($negated_contexts as $name) {
-      /** @var \Drupal\context\ContextInterface $negated_context */
+      /** @var ContextInterface $negated_context */
       $negated_context = $this->contextManager->getContext($name);
       if ($this->contextManager->evaluateContextConditions($negated_context) && !$negated_context->disabled()) {
         return FALSE;
@@ @@

     // Now handle required contexts.
     foreach ($required_contexts as $name) {
-      /** @var \Drupal\context\ContextInterface $required_context */
+      /** @var ContextInterface $required_context */
       if ($required_context = $this->contextManager->getContext($name)) {
         if (!$this->contextManager->evaluateContextConditions($required_context) && !$required_context->disabled()) {
           return FALSE;
@@ @@
     }

     // Handle the asterisks/wildcard contexts.
-    /** @var \Drupal\context\ContextInterface $asterisk_contexts */
+    /** @var ContextInterface $asterisk_contexts */
     if ($asterisk_contexts = $this->contextManager->getContext($asterisk_context)) {
       foreach ($asterisk_contexts as $context) {
         if (!$this->contextManager->evaluateContextConditions($context) && !$context->disabled()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/context/src/EventSubscriber/BlockPageDisplayVariantSubscriber.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   private $contextManager;

@@ @@
   /**
    * Construct a block page display variant.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context manager.
    */
   public function __construct(ContextManager $contextManager) {
@@ @@
   /**
    * Selects the context block page display variant.
    *
-   * @param \Drupal\Core\Render\PageDisplayVariantSelectionEvent $event
+   * @param PageDisplayVariantSelectionEvent $event
    *   The event to process.
    */
   public function onSelectPageDisplayVariant(PageDisplayVariantSelectionEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/context/src/Entity/ContextAccess.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs an access control handler instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    */
   public function __construct(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/context/src/Entity/Context.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context\Entity;

+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\context\ContextReactionPluginBase;
+use Drupal\Core\Condition\ConditionPluginBase;
 use Drupal;
 use InvalidArgumentException;
 use Drupal\context\ContextInterface;
@@ @@
   /**
    * The context conditions as a collection.
    *
-   * @var \Drupal\Core\Condition\ConditionPluginCollection
+   * @var ConditionPluginCollection
    */
   protected $conditionsCollection;

@@ @@
   /**
    * The context reactions as a collection.
    *
-   * @var \Drupal\context\Plugin\ContextReactionPluginCollection
+   * @var ContextReactionPluginCollection
    */
   protected $reactionsCollection;

@@ @@
   /**
    * Gets the plugin collections used by this entity.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection[]
+   * @return LazyPluginCollection[]
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
@@ @@
    */
   public function calculateDependencies() {
     $dependencies = parent::calculateDependencies();
-    /** @var \Drupal\context\Plugin\ContextReactionPluginCollection $reaction_collection */
+    /** @var ContextReactionPluginCollection $reaction_collection */
     $reaction_collection = $this->getReactions();
-    /** @var \Drupal\Core\Condition\ConditionPluginCollection $condition_collection */
+    /** @var ConditionPluginCollection $condition_collection */
     $condition_collection = $this->getConditions();
     if (empty($reaction_collection) && empty($condition_collection)) {
       return $dependencies;
@@ @@
   /**
    * Set context dependencies based on the reactions set.
    *
-   * @param \Drupal\context\Plugin\ContextReactionPluginCollection $reaction_collection
+   * @param ContextReactionPluginCollection $reaction_collection
    *   The Reaction Plugin collection.
    */
   public function calculateReactionDependencies(ContextReactionPluginCollection $reaction_collection) {
     $instance_ids = $reaction_collection->getInstanceIds();
     foreach ($instance_ids as $instance_id) {
-      /** @var \Drupal\context\ContextReactionPluginBase $plugin */
+      /** @var ContextReactionPluginBase $plugin */
       $plugin = $reaction_collection->get($instance_id);
       $plugin_dependencies = $this->getPluginDependencies($plugin);
       $this->addDependencies($plugin_dependencies);
@@ @@
   /**
    * Set context dependencies based on the conditions set.
    *
-   * @param \Drupal\Core\Condition\ConditionPluginCollection $condition_collection
+   * @param ConditionPluginCollection $condition_collection
    *   The Condition Plugin collection.
    */
   public function calculateConditionDependencies(ConditionPluginCollection $condition_collection) {
     $instance_ids = $condition_collection->getInstanceIds();
     foreach ($instance_ids as $instance_id) {
-      /** @var \Drupal\Core\Condition\ConditionPluginBase $plugin */
+      /** @var ConditionPluginBase $plugin */
       $plugin = $condition_collection->get($instance_id);
       $plugin_dependencies = $this->getPluginDependencies($plugin);
       $this->addDependencies($plugin_dependencies);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/context/src/ContextReactionInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Executable\ExecutableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
@@ @@
   /**
    * Provides a human readable summary of the condition's configuration.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   An object that, when cast to a string, returns the translated string.
    */
   public function summary();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/context/src/ContextMenuActiveTrail.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/context/src/ContextManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context;

+use Drupal\Context\ContextInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\context\Entity\Context;
 use Drupal\context\Plugin\ContextReaction\Blocks;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * Wraps the context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
   /**
    * An array of all contexts.
    *
-   * @var \Drupal\Context\ContextInterface[]
+   * @var ContextInterface[]
    */
   protected $contexts = [];

@@ @@
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   private $entityFormBuilder;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

   /** The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * Construct.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The Drupal entity manager service.
    * @param \Drupal\context\Entity\ContextRepositoryInterface $contextRepository
    *   The drupal context repository service.
    * @param \Drupal\context\Entity\ContextHandlerInterface $contextHandler
    *   The Drupal context handler service.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entityFormBuilder
+   * @param EntityFormBuilderInterface $entityFormBuilder
    *   The Drupal EntityFormBuilder service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   The Drupal theme manager service.
    */
   public function __construct(
@@ @@
   /**
    * Apply context to all the context aware conditions in the collection.
    *
-   * @param \Drupal\Core\Condition\ConditionPluginCollection $conditions
+   * @param ConditionPluginCollection $conditions
    *   A collection of conditions to apply context to.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


31) modules/contrib/context/src/ContextInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context;

+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;

@@ @@
   /**
    * Get a list of all conditions.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface[]|ConditionPluginCollection
+   * @return ConditionInterface[]|ConditionPluginCollection
    *   The plugin collection.
    */
   public function getConditions();
@@ @@
    * @param string $condition_id
    *   The condition to get.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    *   The specific Condition.
    */
   public function getCondition($condition_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


32) modules/contrib/context/modules/context_ui/src/Plugin/Block/ContextInspector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context_ui\Plugin\Block;

+use Drupal\Core\Extension\ModuleHandler;
+use Drupal\context\ContextManager;
 use Drupal\Core\Block\BlockBase;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Drupal\Core\Extension\ModuleHandler $moduleHandler */
+    /** @var ModuleHandler $moduleHandler */
     $moduleHandler = \Drupal::service('module_handler');
     $module = $moduleHandler->moduleExists('devel');
     $permission = \Drupal::currentUser()->hasPermission('access devel information');
     if ($module && $permission) {
-      /** @var \Drupal\context\ContextManager $context_manager */
+      /** @var ContextManager $context_manager */
       $context_manager = \Drupal::service('context.manager');
       /** @codingStandardsIgnoreStart * */
       $output = kpr($context_manager->getActiveContexts(), TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


33) modules/contrib/context/modules/context_ui/src/MenuBuilder.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The menu link plugin manager.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $menuLinkManager;

@@ @@
   /**
    * MenuBuilder constructor.
    *
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $menuLinkManager
+   * @param MenuLinkManagerInterface $menuLinkManager
    *   The menu link plugin manager.
    */
   public function __construct(MenuLinkManagerInterface $menuLinkManager) {
@@ @@
   /**
    * Adds a submenu item for the $entity item.
    *
-   * @param \Drupal\context\Entity\Context $entity
+   * @param Context $entity
    *   The given entity item.
    */
   public function addSubMenuItem(Context $entity) {
@@ @@
   /**
    * Updates the submenu item of the $entity item.
    *
-   * @param \Drupal\context\Entity\Context $entity
+   * @param Context $entity
    *   The given entity item.
    */
   public function updateSubMenuItem(Context $entity) {
@@ @@
   /**
    * Deletes the submenu item of the $entity item.
    *
-   * @param \Drupal\context\Entity\Context $entity
+   * @param Context $entity
    *   The given entity item.
    */
   public function deleteSubMenuItem(Context $entity) {
@@ @@
   /**
    * Return the URI string of the given context entity.
    *
-   * @param \Drupal\context\Entity\Context $entity
+   * @param Context $entity
    *   The context entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


34) modules/contrib/context/modules/context_ui/src/Form/ReactionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context_ui\Form;

+use Drupal\context\ContextReactionInterface;
+use Drupal\Core\Url;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\context\ContextManager;
 use Drupal\context\ContextInterface;
@@ @@
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextInterface
+   * @var ContextInterface
    */
   protected $context;

@@ @@
   /**
    * The context reaction.
    *
-   * @var \Drupal\context\ContextReactionInterface
+   * @var ContextReactionInterface
    */
   protected $reaction;

@@ @@
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;

@@ @@
   /**
    * Construct.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
    */
   public function __construct(ContextManager $contextManager) {
@@ @@
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ @@
   /**
    * Handle when the form is submitted through AJAX.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    */
   public function submitFormAjax() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/context/modules/context_ui/src/Form/ContextFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context_ui\Form;

+use Drupal\context\ContextInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\context\ContextManager;
 use Drupal\context\Entity\Context;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\context\ContextInterface
+   * @var ContextInterface
    */
   protected $entity;

@@ @@
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;

@@ @@
   /**
    * Construct a new context form.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
    * @param \Drupal\context\Entity\ContextRepositoryInterface $contextRepository
    *   The Drupal context repository.
@@ @@
    *
    * @param array $form
    *   The rendered form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   private function handleConditions(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The rendered form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   private function handleReactions(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The rendered form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   private function validateConditions(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The rendered form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   private function validateReactions(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/context/modules/context_ui/src/Form/ContextEditForm.php:76

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
    *
    * @param array $element
    *   The element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   Form object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return mixed
@@ @@
    *
    * @param array $form
    *   Form object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   From state object.
    */
   public function collection(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/context/modules/context_ui/src/Form/ContextDuplicateForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   Context manager.
    */
   public function __construct(ContextManager $contextManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/context/modules/context_ui/src/Form/ContextDisableForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;

@@ @@
   /**
    * The ContextDisableForm constructor.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
    */
   public function __construct(ContextManager $contextManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/context/modules/context_ui/src/Form/ContextDeleteForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;

@@ @@
   /**
    * ContextDeleteForm constructor.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
    */
   public function __construct(ContextManager $contextManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/context/modules/context_ui/src/Form/ConditionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context_ui\Form;

+use Drupal\context\Entity\Context;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\context\ContextManager;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\context\ContextInterface;
@@ @@
   /**
    * The context to delete a condition from.
    *
-   * @var \Drupal\context\Entity\Context
+   * @var Context
    */
   protected $context;

@@ @@
   /**
    * The condition to delete from the context.
    *
-   * @var \Drupal\Core\Condition\ConditionInterface
+   * @var ConditionInterface
    */
   protected $condition;

@@ @@
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;

@@ @@
   /**
    * Construct a condition delete form.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
    */
   public function __construct(ContextManager $contextManager) {
@@ @@
   /**
    * Handle when the form is submitted trough AJAX.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    */
   public function submitFormAjax() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/context/modules/context_ui/src/Controller/ContextUIController.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The context reaction manager.
    *
-   * @var \Drupal\context\ContextReactionManager
+   * @var ContextReactionManager
    */
   protected $contextReactionManager;

@@ @@
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;

@@ @@
   /**
    * The Drupal core condition manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * Construct a new context controller.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
-   * @param \Drupal\context\ContextReactionManager $contextReactionManager
+   * @param ContextReactionManager $contextReactionManager
    *   The Context module context reaction plugin manager.
-   * @param \Drupal\Core\Condition\ConditionManager $conditionManager
+   * @param ConditionManager $conditionManager
    *   The Drupal core condition manager.
    */
   public function __construct(
@@ @@
   /**
    * Retrieves group suggestions for a context.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response with groups matching the query.
    */
   public function groupsAutocomplete(Request $request) {
@@ @@
   /**
    * Displays a list of conditions that can be added to the context.
    *
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context to display available conditions for.
    *
    * @return array
@@ @@
   /**
    * Displays a list of reactions that can be added to the context.
    *
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context to display available.
    *
    * @return array
@@ @@
   /**
    * Add the specified reaction to the context.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context to add the reaction to.
    * @param string $reaction_id
    *   The ID of the reaction to add.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   An AJAX response or a redirect response.
    */
   public function addReaction(Request $request, ContextInterface $context, $reaction_id) {
@@ @@
   /**
    * Add the specified condition to the context.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context to add the condition to.
    * @param string $condition_id
    *   The ID of the condition to add.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   An AJAX response or A redirect response.
    */
   public function addCondition(Request $request, ContextInterface $context, $condition_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/context/modules/context_ui/src/ContextListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\context_ui;

+use Drupal\context\ContextInterface;
 use Drupal\context\ContextManager;
 use Drupal\context\Entity\Context;
 use Drupal\Component\Utility\Html;
@@ @@
   /**
    * The Context modules context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new ContextListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The Drupal form builder.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(
@@ @@
         ],
       ];

-      /** @var \Drupal\context\ContextInterface $context */
+      /** @var ContextInterface $context */
       foreach ($contexts as $context_id => $context) {
         $operations = [
           'edit' => [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/context/context.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\context\ContextManager;
 /**
  * @file
  * Defines Drupal hooks for context module.
@@ @@
  * classes to the page body.
  */
 function context_preprocess_html(&$variables) {
-  /** @var \Drupal\context\ContextManager $context_manager */
+  /** @var ContextManager $context_manager */
   $context_manager = \Drupal::service('context.manager');
   // Active theme for route.
   $current_theme = \Drupal::service('theme.negotiator')->determineActiveTheme(Drupal::routeMatch());
@@ @@
  * Implements hook_preprocess_HOOK().
  */
 function context_preprocess_page_title(&$variables) {
-  /** @var \Drupal\context\ContextManager $context_manager */
+  /** @var ContextManager $context_manager */
   $context_manager = \Drupal::service('context.manager');

   foreach ($context_manager->getActiveReactions('page_title') as $reaction) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 43 files have been changed by Rector                                      

