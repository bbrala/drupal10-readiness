diff --git a/composer.json b/composer.json
index f65bc40..7b58f2a 100644
--- a/composer.json
+++ b/composer.json
@@ -11,6 +11,6 @@
     "source": "http://cgit.drupalcode.org/map_widget"
   },
   "require": {
-    "drupal/core": "^8.8 || ^9.0@beta"
+    "drupal/core": "^9.1 || ^10"
   }
 }
diff --git a/map_widget.info.yml b/map_widget.info.yml
index 79f54db..6d3d789 100644
--- a/map_widget.info.yml
+++ b/map_widget.info.yml
@@ -1,5 +1,5 @@
 name: 'Map Widget'
 type: module
 description: 'A field widget plugin for MapItems.'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.1 || ^10
 package: 'Field'
diff --git a/map_widget.install b/map_widget.install
index df69f24..adac972 100644
--- a/map_widget.install
+++ b/map_widget.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 /**
  * @file
  * Install, update and uninstall functions for the map_widget module.
@@ -20,7 +21,7 @@ function map_widget_update_8101() {
       throw new UnexpectedValueException('Loaded display not an instance of EntityFormDisplay');
     }
     // Map fields are only base fields.
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $definitions */
+    /** @var FieldDefinitionInterface[] $definitions */
     $definitions = \Drupal::service('entity_field.manager')->getBaseFieldDefinitions($display->getTargetEntityTypeId());
     $components = $display->getComponents();
     foreach ($components as $field_name => $component) {
diff --git a/src/Plugin/Field/FieldWidget/AssociativeArrayWidget.php b/src/Plugin/Field/FieldWidget/AssociativeArrayWidget.php
index f47f9e7..9f1cf6c 100644
--- a/src/Plugin/Field/FieldWidget/AssociativeArrayWidget.php
+++ b/src/Plugin/Field/FieldWidget/AssociativeArrayWidget.php
@@ -208,7 +208,7 @@ class AssociativeArrayWidget extends WidgetBase {
    *   The item delta in the field.
    * @param array $value
    *   The value of the item.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return int
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 5437c35..9456f20 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\map_widget\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,7 +23,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
@@ -36,7 +37,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
diff --git a/tests/src/Functional/MapWidgetTest.php b/tests/src/Functional/MapWidgetTest.php
index 40ace76..107363f 100644
--- a/tests/src/Functional/MapWidgetTest.php
+++ b/tests/src/Functional/MapWidgetTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\map_widget\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\State\State;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\system\Functional\Entity\Traits\EntityDefinitionTestTrait;
@@ -26,7 +28,7 @@ class MapWidgetTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
@@ -40,14 +42,14 @@ class MapWidgetTest extends BrowserTestBase {
   /**
    * Container injected service.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->state = $this->container->get('state');
     // Create a field.
@@ -98,11 +100,11 @@ class MapWidgetTest extends BrowserTestBase {
   public function testMapWidget() {
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("map_test_field[0][value][0][key]", '');
-    $this->assertFieldByName("map_test_field[0][value][0][value]", '');
-    $this->assertRaw('placeholder="Key placeholder for map_assoc_widget"');
-    $this->assertRaw('placeholder="Value placeholder for map_assoc_widget"');
-    $this->assertRaw('Map Widget description');
+    $this->assertSession()->fieldValueEquals("map_test_field[0][value][0][key]", '');
+    $this->assertSession()->fieldValueEquals("map_test_field[0][value][0][value]", '');
+    $this->assertSession()->responseContains('placeholder="Key placeholder for map_assoc_widget"');
+    $this->assertSession()->responseContains('placeholder="Value placeholder for map_assoc_widget"');
+    $this->assertSession()->responseContains('Map Widget description');
 
     // Submit with some value.
     $key = $this->randomMachineName();
@@ -111,16 +113,19 @@ class MapWidgetTest extends BrowserTestBase {
       "map_test_field[0][value][0][key]" => $key,
       "map_test_field[0][value][0][value]" => $value,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
-    $this->assertText("entity_test $id has been created.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("entity_test $id has been created.");
     $testEntity = EntityTest::load($id);
     $storedValue = $testEntity->get('map_test_field')->value;
     $this->assertTrue(is_array($storedValue), 'map_test_field does not contain an array');
-    $this->assertEqual(count($storedValue), 1, 'Returned array does not have exactly one element.');
+    $this->assertEquals(count($storedValue), 1, 'Returned array does not have exactly one element.');
     $this->assertTrue(isset($storedValue[$key]), 'Test key not present in value array.');
-    $this->assertEqual($storedValue[$key], $value, 'The value stored for the test key in the MapItem does not match the test value.');
+    $this->assertEquals($storedValue[$key], $value, 'The value stored for the test key in the MapItem does not match the test value.');
     $this->assertSession()->fieldValueEquals('map_test_field[0][value][0][key]', $key);
     $this->assertSession()->fieldValueEquals('map_test_field[0][value][0][value]', $value);
   }
diff --git a/tests/src/FunctionalJavascript/MapWidgetAjaxTest.php b/tests/src/FunctionalJavascript/MapWidgetAjaxTest.php
index b8a4846..d342033 100644
--- a/tests/src/FunctionalJavascript/MapWidgetAjaxTest.php
+++ b/tests/src/FunctionalJavascript/MapWidgetAjaxTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\map_widget\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\State\State;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ -26,7 +28,7 @@ class MapWidgetAjaxTest extends WebDriverTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
@@ -40,14 +42,14 @@ class MapWidgetAjaxTest extends WebDriverTestBase {
   /**
    * Container injected service.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->state = $this->container->get('state');
     // Create a field.
@@ -98,9 +100,9 @@ class MapWidgetAjaxTest extends WebDriverTestBase {
   public function testMapWidgetAjax() {
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("map_test_field[0][value][0][key]", '');
-    $this->assertFieldByName("map_test_field[0][value][0][value]", '');
-    $this->assertElementPresent('input[name="map_test_field_0_add_more"]');
+    $this->assertSession()->fieldValueEquals("map_test_field[0][value][0][key]", '');
+    $this->assertSession()->fieldValueEquals("map_test_field[0][value][0][value]", '');
+    $this->assertSession()->elementExists('input[name="map_test_field_0_add_more"]');
     // Ajax test.
     $button = $this->getSession()->getPage()->find('css', 'input[name="map_test_field_0_add_more"]');
     $button->click();
@@ -118,16 +120,16 @@ class MapWidgetAjaxTest extends WebDriverTestBase {
       "map_test_field[0][value][1][key]" => $keys[1],
       "map_test_field[0][value][1][value]" => $values[1],
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
     $testEntity = EntityTest::load($id);
     $storedValue = $testEntity->get('map_test_field')->value;
     $this->assertTrue(is_array($storedValue), 'map_test_field does not contain an array');
-    $this->assertEqual(count($storedValue), 2, 'Returned array does not have exactly two elements.');
+    $this->assertEquals(count($storedValue), 2, 'Returned array does not have exactly two elements.');
     for ($index = 0; $index < 2; $index++) {
       $this->assertTrue(isset($storedValue[$keys[$index]]), "Test key $index not present in value array.");
-      $this->assertEqual($storedValue[$keys[$index]], $values[$index], "The value stored for the test key $index in the MapItem does not match the test value.");
+      $this->assertEquals($storedValue[$keys[$index]], $values[$index], "The value stored for the test key $index in the MapItem does not match the test value.");
     }
     $this->assertSession()->fieldValueEquals('map_test_field[0][value][0][key]', $keys[0]);
     $this->assertSession()->fieldValueEquals('map_test_field[0][value][0][value]', $values[0]);
