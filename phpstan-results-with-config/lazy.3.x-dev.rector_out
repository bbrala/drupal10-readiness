modules/contrib/lazy/lazy.api.php
modules/contrib/lazy/lazy.install
modules/contrib/lazy/lazy.module
modules/contrib/lazy/lazy.post_update.php
modules/contrib/lazy/src/Form/LazyForm.php
modules/contrib/lazy/src/Lazy.php
modules/contrib/lazy/src/LazyInterface.php
modules/contrib/lazy/src/Plugin/Field/FieldFormatter/LazyImageFormatter.php
modules/contrib/lazy/src/Plugin/Field/FieldFormatter/LazyResponsiveImageFormatter.php
modules/contrib/lazy/src/Plugin/Filter/LazyFilter.php

4 files with changes
====================

1) modules/contrib/lazy/src/Plugin/Filter/LazyFilter.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The Lazy-load service.
    *
-   * @var \Drupal\lazy\Lazy
+   * @var Lazy
    */
   protected $lazyLoad;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\lazy\Lazy $lazy_load
+   * @param Lazy $lazy_load
    *   The Lazy-load service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, Lazy $lazy_load) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/lazy/src/Lazy.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lazy;

+use Drupal\system\Plugin\Condition\RequestPath;
 use Drupal\Core\Condition\ConditionManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandler;
@@ @@
   /**
    * A config object for the module configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $lazySettings;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The route admin context to determine whether a route is an admin one.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;

@@ @@
   /**
    * The module manager.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * Lazy constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition plugins manager.
-   * @param \Drupal\Core\Routing\AdminContext $admin_context
+   * @param AdminContext $admin_context
    *   The route admin context service.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module manager.
    */
   public function __construct(
@@ @@
       return FALSE;
     }

-    /** @var \Drupal\system\Plugin\Condition\RequestPath $condition */
+    /** @var RequestPath $condition */
     $condition = $this->conditionManager->createInstance('request_path');
     if (is_null($condition)) {
       return FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/lazy/src/Form/LazyForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lazy\Form;

+use Drupal\lazy\Lazy;
+use Drupal\Core\Extension\ModuleHandler;
+use Drupal\system\Plugin\Condition\RequestPath;
+use Drupal\Core\Form\FormBase;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Condition\ConditionManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The Lazy-load service.
    *
-   * @var \Drupal\lazy\Lazy
+   * @var Lazy
    */
   protected $lazyLoad;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The 'request_path' condition.
    *
-   * @var \Drupal\system\Plugin\Condition\RequestPath
+   * @var RequestPath
    */
   protected $condition;

@@ @@
   /**
    * Constructs a LazyForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\lazy\LazyInterface $lazy_load
+   * @param LazyInterface $lazy_load
    *   The Lazy-load service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LazyInterface $lazy_load, ModuleHandlerInterface $module_handler, ConditionManager $condition_manager) {
@@ @@
   /**
    * Instantiates a new instance of this class.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this instance should use.
    *
-   * @return \Drupal\Core\Form\ConfigFormBase|\Drupal\Core\Form\FormBase|static
+   * @return ConfigFormBase|FormBase|static
    *   A static class.
    */
   public static function create(ContainerInterface $container) {
@@ @@
    *   The array of links.
    * @param string $type
    *   Can be 'filters' or 'fields'.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $message
+   * @param TranslatableMarkup $message
    *   The message.
    */
   private function addLazyStatusMessage(array $links, string $type, TranslatableMarkup $message): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/lazy/lazy.module:192

    ---------- begin diff ----------
@@ @@
       $placeholder_data_uri = $lazy['data_uri'] ?? FALSE;

       if ($placeholder_style && ($image_file_id > 0)) {
-        /** @var \Drupal\file\Entity\File $file */
+        /** @var File $file */
         $file = File::load($image_file_id);

-        /** @var \Drupal\image\Entity\ImageStyle $style */
+        /** @var ImageStyle $style */
         $style = ImageStyle::load($placeholder_style);

         // Build the derivative image URL.
@@ @@
           $placeholder_image_url = "data:${mime_type};base64," . base64_encode($content);
         }
         else {
-          $placeholder_image_url = file_url_transform_relative($placeholder_image_url);
+          $placeholder_image_url = \Drupal::service('file_url_generator')->transformRelative($placeholder_image_url);
         }
         $variables['attributes']['src'] = $placeholder_image_url;
       }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

