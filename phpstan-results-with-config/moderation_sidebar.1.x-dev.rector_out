modules/contrib/moderation_sidebar/moderation_sidebar.api.php
modules/contrib/moderation_sidebar/moderation_sidebar.module
modules/contrib/moderation_sidebar/src/Controller/ModerationSidebarController.php
modules/contrib/moderation_sidebar/src/Form/ModerationSidebarSettingsForm.php
modules/contrib/moderation_sidebar/src/Form/QuickTransitionForm.php
modules/contrib/moderation_sidebar/tests/src/Functional/AdminToolbarStateTaxonomyTermTest.php
modules/contrib/moderation_sidebar/tests/src/Functional/AdminToolbarStateTest.php
modules/contrib/moderation_sidebar/tests/src/Functional/ModerationSidebarTest.php
modules/contrib/moderation_sidebar/tests/src/FunctionalJavascript/ModerationSidebarTaxonomyTermTest.php
modules/contrib/moderation_sidebar/tests/src/FunctionalJavascript/ModerationSidebarTest.php

10 files with changes
=====================

1) modules/contrib/moderation_sidebar/tests/src/FunctionalJavascript/ModerationSidebarTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a Content Type with moderation enabled.
@@ @@

     // Enable admin theme for content forms.
     $edit = ['use_admin_theme' => TRUE];
-    $this->drupalPostForm('admin/appearance', $edit, 'Save configuration');
+    $this->drupalGet('admin/appearance');
+    $this->submitForm($edit, 'Save configuration');
     // Add German language.
     $edit = ['predefined_langcode' => 'de'];
-    $this->drupalPostForm('admin/config/regional/language/add', $edit, t('Add language'));
+    $this->drupalGet('admin/config/regional/language/add');
+    $this->submitForm($edit, t('Add language'));
     // Enable translations for nodes.
     $edit = ['entity_types[node]' => 'node', 'settings[node][article][translatable]' => TRUE];
-    $this->drupalPostForm('admin/config/regional/content-language', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/regional/content-language');
+    $this->submitForm($edit, 'Save configuration');

     drupal_flush_all_caches();
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/moderation_sidebar/tests/src/FunctionalJavascript/ModerationSidebarTaxonomyTermTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\moderation_sidebar\FunctionalJavascript;

+use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\taxonomy\Traits\TaxonomyTestTrait;
 if (!trait_exists('\Drupal\Tests\taxonomy\Traits\TaxonomyTestTrait')) {
@@ @@
   /**
    * The vocabulary to be used for the tests.
    *
-   * @var \Drupal\taxonomy\Entity\Vocabulary
+   * @var Vocabulary
    */
   protected $vocabulary;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a Content Type with moderation enabled.
@@ @@

     // Enable admin theme for content forms.
     $edit = ['use_admin_theme' => TRUE];
-    $this->drupalPostForm('admin/appearance', $edit, 'Save configuration');
+    $this->drupalGet('admin/appearance');
+    $this->submitForm($edit, 'Save configuration');

     drupal_flush_all_caches();
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/moderation_sidebar/tests/src/Functional/ModerationSidebarTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $workflow = $this->createEditorialWorkflow();
     $this->addEntityTypeAndBundleToWorkflow($workflow, 'entity_test_mulrevpub', 'entity_test_mulrevpub');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/moderation_sidebar/tests/src/Functional/AdminToolbarStateTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $node_type = $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/moderation_sidebar/tests/src/Functional/AdminToolbarStateTaxonomyTermTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\moderation_sidebar\Functional;

+use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;
 use Drupal\Tests\taxonomy\Traits\TaxonomyTestTrait;
@@ @@
   /**
    * Vocabulary to be used for tests.
    *
-   * @var \Drupal\taxonomy\Entity\Vocabulary
+   * @var Vocabulary
    */
   protected $vocabulary;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->vocabulary = $this->createVocabulary();
@@ @@

   /**
    * Tests state labels in admin toolbar with a moderated entity.
+   * @doesNotPerformAssertions
    */
   public function testModeratedEntity() {
     // This is empty because taxonomy_term can't be used in a moderation
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/moderation_sidebar/src/Form/QuickTransitionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moderation_sidebar\Form;

+use Drupal\content_moderation\StateTransitionValidation;
+use Drupal\content_moderation\Entity\ContentModerationStateInterface;
+use Drupal\workflows\TransitionInterface;
+use Drupal\content_moderation\ContentModerationState;
+use Drupal\workflows\StateInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\content_moderation\StateTransitionValidationInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;

@@ @@
   /**
    * The moderation state transition validation service.
    *
-   * @var \Drupal\content_moderation\StateTransitionValidation
+   * @var StateTransitionValidation
    */
   protected $validation;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * QuickDraftForm constructor.
    *
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_info
+   * @param ModerationInformationInterface $moderation_info
    *   The moderation information service.
-   * @param \Drupal\content_moderation\StateTransitionValidationInterface $validation
+   * @param StateTransitionValidationInterface $validation
    *   The moderation state transition validation service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ModerationInformationInterface $moderation_info, StateTransitionValidationInterface $validation, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
       ->get('workflows.' . $workflow->id() . '_workflow.disabled_transitions');

     // Exclude self-transitions.
-    /** @var \Drupal\content_moderation\Entity\ContentModerationStateInterface $current_state */
+    /** @var ContentModerationStateInterface $current_state */
     $current_state = $this->getModerationState($entity);

-    /** @var \Drupal\workflows\TransitionInterface[] $transitions */
+    /** @var TransitionInterface[] $transitions */
     $transitions = array_filter($transitions, function ($transition) use ($current_state) {
       return $transition->to()->id() != $current_state->id();
     });
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function discardDraft(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $form_state->get('entity');
     $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
     $default_revision_id = $this->moderationInformation->getDefaultRevisionId($entity->getEntityTypeId(), $entity->id());
@@ @@
    * {@inheritDoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $form_state->get('entity');

-    /** @var \Drupal\content_moderation\Entity\ContentModerationStateInterface[] $transitions */
+    /** @var ContentModerationStateInterface[] $transitions */
     $transitions = $this->validation->getValidTransitions($entity, $this->currentUser());
     // Add custom discard draft transition handled by ::discardDraft.
     $transitions['moderation-sidebar-discard-draft'] = '';
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $form_state->get('entity');

-    /** @var \Drupal\content_moderation\Entity\ContentModerationStateInterface[] $transitions */
+    /** @var ContentModerationStateInterface[] $transitions */
     $transitions = $this->validation->getValidTransitions($entity, $this->currentUser());

     $element = $form_state->getTriggeringElement();

-    /** @var \Drupal\content_moderation\ContentModerationState $state */
+    /** @var ContentModerationState $state */
     $state = $transitions[$element['#id']]->to();
     $state_id = $state->id();

@@ @@
   /**
    * Gets the Moderation State of a given Entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity.
    *
-   * @return \Drupal\workflows\StateInterface
+   * @return StateInterface
    *   The moderation state for the given entity.
    */
   protected function getModerationState(ContentEntityInterface $entity) {
@@ @@
   /**
    * Prepares a new revision of a given entity, if applicable.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $message
+   * @param string|TranslatableMarkup $message
    *   A revision log message to set.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The moderation state for the given entity.
    */
   protected function prepareNewRevision(EntityInterface $entity, $message) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/moderation_sidebar/src/Form/ModerationSidebarSettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a ModerationSidebarSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/moderation_sidebar/src/Controller/ModerationSidebarController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moderation_sidebar\Controller;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Routing\AccessAwareRouter;
+use Drupal\workflows\StateInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Component\Utility\Xss;
 use Drupal\content_moderation\ModerationInformation;
@@ @@
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformation
+   * @var ModerationInformation
    */
   protected $moderationInformation;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The local task manager.
    *
-   * @var \Drupal\Core\Menu\LocalTaskManagerInterface
+   * @var LocalTaskManagerInterface
    */
   protected $localTaskManager;

@@ @@
   /**
    * Creates a ModerationSidebarController instance.
    *
-   * @param \Drupal\content_moderation\ModerationInformation $moderation_information
+   * @param ModerationInformation $moderation_information
    *   The moderation information service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Menu\LocalTaskManagerInterface $local_task_manager
+   * @param LocalTaskManagerInterface $local_task_manager
    *   The local task manager.
    */
   public function __construct(ModerationInformation $moderation_information, RequestStack $request_stack, DateFormatterInterface $date_formatter, ModuleHandlerInterface $module_handler, LocalTaskManagerInterface $local_task_manager) {
@@ @@
     // entity. To accomplish this, we need to mock a request stack with a fake
     // request. This looks crazy, but there is no other way to render
     // Local Tasks for an arbitrary path without this.
-    /** @var \Symfony\Component\HttpFoundation\RequestStack $request_stack */
+    /** @var RequestStack $request_stack */
     $request_stack = $container->get('request_stack');

     $attributes = $request_stack->getCurrentRequest()->attributes;
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $attributes->has('node') ? $attributes->get('node') : $attributes->get('entity');
     $fake_request_stack = new RequestStack();
     $current_request = $container->get('request_stack')->getCurrentRequest();
     $request = Request::create($entity->toUrl()->getInternalPath(), 'GET', [], [], [], $current_request->server->all(), NULL);

-    /** @var \Drupal\Core\Routing\AccessAwareRouter $router */
+    /** @var AccessAwareRouter $router */
     $router = $container->get('router');
     $router->matchRequest($request);
     $fake_request_stack->push($request);
@@ @@
   /**
    * Displays information relevant to moderating an entity in-line.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   A moderated entity.
    *
    * @return array
@@ @@
     $langcode = $entity->language()->getId();
     $entity_type_id = $entity->getEntityTypeId();

-    /** @var \Drupal\Core\Entity\TranslatableRevisionableStorageInterface $storage */
+    /** @var TranslatableRevisionableStorageInterface $storage */
     // Figure ouf this is the latest revision of this entity for this language.
     $storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
     $is_latest = TRUE;
@@ @@
   /**
    * Renders the sidebar title for moderating this Entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   A moderated entity.
    *
    * @return string
@@ @@
   /**
    * Generates an simple list of revisions for a node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   A node object.
    *
    * @return array
@@ @@
       if ($count >= 5) {
         break;
       }
-      /** @var \Drupal\node\NodeInterface $revision */
+      /** @var NodeInterface $revision */
       $revision = $node_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
@@ @@
   /**
    * Generate a simple list of translations with quick-add buttons.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity.
    *
    * @return array
@@ @@
     $langcode = $entity->language()->getId();
     $entity_type_id = $entity->getEntityTypeId();

-    /** @var \Drupal\Core\Entity\TranslatableRevisionableStorageInterface $storage */
+    /** @var TranslatableRevisionableStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
     if ($storage instanceof TranslatableRevisionableStorageInterface) {
       $latest_revision_id = $storage->getLatestTranslationAffectedRevisionId($entity->id(), $langcode);
@@ @@
   /**
    * Gets the Moderation State of a given Entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity.
    *
-   * @return \Drupal\workflows\StateInterface
+   * @return StateInterface
    *   The moderation state for the given entity.
    */
   protected function getModerationState(ContentEntityInterface $entity) {
@@ @@
   /**
    * Gathers a list of non-duplicated tasks, themed like our other buttons.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity.
    *
    * @return array
@@ @@
    * @param int $time
    *   The revision timestamp.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Markup representing a presentable time.
    */
   protected function getPrettyTime($time) {
@@ @@
   /**
    * Generates the render array for an AJAX-enabled back button.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity.
    *
    * @return array
@@ @@
   /**
    * Gets the Moderation State label of a given Entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/moderation_sidebar/moderation_sidebar.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Routing\AdminContext;
+use Drupal\content_moderation\ModerationInformation;
 /**
  * @file
  * Contains hook implementations for moderation_sidebar.
@@ @@
     return $items;
   }

-  /** @var \Drupal\Core\Routing\AdminContext $admin_context */
+  /** @var AdminContext $admin_context */
   $admin_context = \Drupal::service('router.admin_context');

-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   $current_route = \Drupal::routeMatch();
   $entity = NULL;
   foreach ($current_route->getParameters() as $param) {
@@ @@

   $cacheability->addCacheableDependency($entity);

-  /** @var \Drupal\content_moderation\ModerationInformation $moderation_information */
+  /** @var ModerationInformation $moderation_information */
   $moderation_information = \Drupal::service('content_moderation.moderation_information');

   $params = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


10) modules/contrib/moderation_sidebar/moderation_sidebar.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Hooks related to moderation sidebar module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter the build rendered in the moderation sidebar.
  *
  * @param array $build
  *   The render array for the sidebar.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The default or latest revision of an entity being moderated.
  *
  * @see \Drupal\moderation_sidebar\Controller\ModerationSidebarController::sideBar()
  */
-function hook_moderation_sidebar_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity) {
+function hook_moderation_sidebar_alter(array &$build, EntityInterface $entity) {
   if ($entity->getEntityTypeId() === 'my_great_type') {
     $build['fun'] = [
       '#markup' => '<a href="#" class="button">This does nothing, suckers!</a>',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

