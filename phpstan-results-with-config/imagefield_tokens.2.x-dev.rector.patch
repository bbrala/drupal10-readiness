diff --git a/imagefield_tokens.info.yml b/imagefield_tokens.info.yml
index 8a04c86..cc83718 100644
--- a/imagefield_tokens.info.yml
+++ b/imagefield_tokens.info.yml
@@ -1,7 +1,7 @@
 name: Image Field Tokens
 type: module
 description: Provides new widget type for Image field to allow to use tokens for filling Alt and Title image attributes.
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: Image
 dependencies:
   - token:token
diff --git a/src/Plugin/Field/FieldFormatter/ImageFieldTokensFormatter.php b/src/Plugin/Field/FieldFormatter/ImageFieldTokensFormatter.php
index de260f5..4bd0313 100644
--- a/src/Plugin/Field/FieldFormatter/ImageFieldTokensFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/ImageFieldTokensFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\imagefield_tokens\Plugin\Field\FieldFormatter;
 
+use Drupal\image\ImageStyleStorageInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -35,28 +36,28 @@ class ImageFieldTokensFormatter extends ImageFormatter {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The image style entity storage.
    *
-   * @var \Drupal\image\ImageStyleStorageInterface
+   * @var ImageStyleStorageInterface
    */
   protected $imageStyleStorage;
 
   /**
    * RouteMatch service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;
 
   /**
    * Token service.
    *
-   * @var \Drupal\token\Token
+   * @var Token
    */
   protected $tokenService;
 
@@ -67,7 +68,7 @@ class ImageFieldTokensFormatter extends ImageFormatter {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -77,13 +78,13 @@ class ImageFieldTokensFormatter extends ImageFormatter {
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $image_style_storage
+   * @param EntityStorageInterface $image_style_storage
    *   The image style storage.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $routeMatch
+   * @param CurrentRouteMatch $routeMatch
    *   RouteMatch service.
-   * @param \Drupal\token\Token $tokenService
+   * @param Token $tokenService
    *   Token service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, EntityStorageInterface $image_style_storage, CurrentRouteMatch $routeMatch, Token $tokenService) {
@@ -155,7 +156,7 @@ class ImageFieldTokensFormatter extends ImageFormatter {
         // context to ensure different file URLs are generated for different
         // sites in a multisite setup, including HTTP and HTTPS versions of the
         // same site. Fix in https://www.drupal.org/node/2646744.
-        $url = Url::fromUri(file_create_url($image_uri));
+        $url = \Drupal::service('file_url_generator')->generate($image_uri);
         $cache_contexts[] = 'url.site';
       }
       $cache_tags = Cache::mergeTags($base_cache_tags, $file->getCacheTags());
diff --git a/src/Plugin/Field/FieldWidget/ImageFieldTokensWigdet.php b/src/Plugin/Field/FieldWidget/ImageFieldTokensWigdet.php
index 3c3af14..97c8dff 100644
--- a/src/Plugin/Field/FieldWidget/ImageFieldTokensWigdet.php
+++ b/src/Plugin/Field/FieldWidget/ImageFieldTokensWigdet.php
@@ -32,21 +32,21 @@ class ImageFieldTokensWigdet extends ImageWidget {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -57,21 +57,21 @@ class ImageFieldTokensWigdet extends ImageWidget {
    *   Plugin id.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field definition.
    * @param array $settings
    *   Field settings.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   The element info manager.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, ElementInfoManagerInterface $element_info, ImageFactory $image_factory, AccountInterface $current_user, ModuleHandlerInterface $module_handler, EntityRepositoryInterface $entity_repository) {
diff --git a/tests/src/Functional/ImageFieldTokensFormatterTest.php b/tests/src/Functional/ImageFieldTokensFormatterTest.php
index bfde736..a138b62 100644
--- a/tests/src/Functional/ImageFieldTokensFormatterTest.php
+++ b/tests/src/Functional/ImageFieldTokensFormatterTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\imagefield_tokens\Functional;
 
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Url;
 use Drupal\Tests\system\Functional\Cache\AssertPageCacheContextsAndTagsTrait;
 use Drupal\Tests\image\Functional\ImageFieldTestBase;
@@ -48,10 +52,10 @@ class ImageFieldTokensFormatterTest extends ImageFieldTestBase {
   /**
    * Test image formatters on node display.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testImageFieldFormatters() {
     $node_storage = $this->container->get('entity_type.manager')->getStorage('node');
@@ -63,7 +67,7 @@ class ImageFieldTokensFormatterTest extends ImageFieldTestBase {
     $this->drupalGet('admin/structure/types/manage/article/display');
 
     // Test for existence of link to image styles configuration.
-    $this->drupalPostForm(NULL, [], "{$field_name}_settings_edit");
+    $this->submitForm([], "{$field_name}_settings_edit");
     $this->assertSession()->linkByHrefExists(Url::fromRoute('entity.image_style.collection')->toString(), 0, 'Link to image styles configuration is found');
 
     // Remove 'administer image styles' permission from testing admin user.
@@ -74,7 +78,7 @@ class ImageFieldTokensFormatterTest extends ImageFieldTestBase {
     $this->drupalGet('admin/structure/types/manage/article/display');
 
     // Test for absence of link to image styles configuration.
-    $this->drupalPostForm(NULL, [], "{$field_name}_settings_edit");
+    $this->submitForm([], "{$field_name}_settings_edit");
     $this->assertSession()->linkByHrefNotExists(Url::fromRoute('entity.image_style.collection')->toString(), 'Link to image styles configuration is absent when permissions are insufficient');
 
     // Restore 'administer image styles' permission to testing admin user.
diff --git a/tests/src/Functional/ImageFieldTokensTestingTrait.php b/tests/src/Functional/ImageFieldTokensTestingTrait.php
index 92b4666..70c8fa1 100644
--- a/tests/src/Functional/ImageFieldTokensTestingTrait.php
+++ b/tests/src/Functional/ImageFieldTokensTestingTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\imagefield_tokens\Functional;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
@@ -35,10 +37,10 @@ trait ImageFieldTokensTestingTrait {
    * @param string $description
    *   (optional) A description for the field. Defaults to ''.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\field\Entity\FieldConfig
+   * @return EntityInterface|FieldConfig
    *   Returns field config object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createImageFieldTokensField($name, $type_name, array $storage_settings = [], array $field_settings = [], array $widget_settings = [], array $formatter_settings = [], $description = '') {
     FieldStorageConfig::create([
@@ -93,7 +95,7 @@ trait ImageFieldTokensTestingTrait {
    *   The view mode, or 'default' to retrieve the 'default' display object for
    *   this bundle.
    *
-   * @return \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @return EntityViewDisplayInterface
    *   The entity view display associated with the view mode.
    *
    * @see \Drupal\Core\Entity\EntityStorageInterface::create()
@@ -136,7 +138,7 @@ trait ImageFieldTokensTestingTrait {
    * @param string $form_mode
    *   The form mode.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @return EntityFormDisplayInterface
    *   The entity form display associated with the given form mode.
    *
    * @see \Drupal\Core\Entity\EntityStorageInterface::create()
diff --git a/tests/src/Functional/ImageFieldTokensWidgetTest.php b/tests/src/Functional/ImageFieldTokensWidgetTest.php
index 63f9023..07b82c0 100644
--- a/tests/src/Functional/ImageFieldTokensWidgetTest.php
+++ b/tests/src/Functional/ImageFieldTokensWidgetTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\imagefield_tokens\Functional;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\image\Functional\ImageFieldTestBase;
@@ -50,10 +54,10 @@ class ImageFieldTokensWidgetTest extends ImageFieldTestBase {
   /**
    * Tests file widget element.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws ResponseTextException
    */
   public function testWidgetElement() {
     // Check for image widget in add/node/article page.
@@ -69,8 +73,10 @@ class ImageFieldTokensWidgetTest extends ImageFieldTestBase {
 
     $this->createImageFieldTokensField($field_name, 'article', ['uri_scheme' => 'public'], $field_settings);
     $this->drupalGet('node/add/article');
-    $this->assertNotEqual(0, count($this->xpath('//div[contains(@class, "field--widget-imagefield-tokens")]')), 'Image field widget found on add/node page', 'Browser');
-    $this->assertNotEqual(0, count($this->xpath('//input[contains(@accept, "image/*")]')), 'Image field widget limits accepted files.', 'Browser');
+    $this->assertNotEquals(0, count($this->xpath('//div[contains(@class, "field--widget-imagefield-tokens")]')), 'Image field widget found on add/node page');
+    $this->assertEqualsWithDelta(0, count($this->xpath('//div[contains(@class, "field--widget-imagefield-tokens")]')), 'Browser', 'Image field widget found on add/node page');
+    $this->assertNotEquals(0, count($this->xpath('//input[contains(@accept, "image/*")]')), 'Image field widget limits accepted files.');
+    $this->assertEqualsWithDelta(0, count($this->xpath('//input[contains(@accept, "image/*")]')), 'Browser', 'Image field widget limits accepted files.');
     $this->assertSession()->pageTextNotContains('Image test on [site:name]');
 
     // Check for allowed image file extensions - default.
