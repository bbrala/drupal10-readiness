diff --git a/modules/rdf_draft/rdf_draft.module b/modules/rdf_draft/rdf_draft.module
index 58a7b32..47d1bb4 100644
--- a/modules/rdf_draft/rdf_draft.module
+++ b/modules/rdf_draft/rdf_draft.module
@@ -6,6 +6,8 @@
  */
 
 declare(strict_types = 1);
+use Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\sparql_entity_storage\SparqlEntityStorageInterface;
@@ -21,10 +23,10 @@ function rdf_draft_entity_type_alter(array &$entity_types) {
     return;
   }
 
-  /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface $graph_handler */
+  /** @var SparqlEntityStorageGraphHandlerInterface $graph_handler */
   $graph_handler = \Drupal::service('sparql.graph_handler');
 
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   foreach ($entity_types as $entity_type_id => $entity_type) {
     if ($entity_type->hasViewBuilderClass() && $entity_type->hasLinkTemplate('canonical')) {
       $recurse = TRUE;
@@ -45,7 +47,7 @@ function rdf_draft_entity_type_alter(array &$entity_types) {
 function rdf_draft_entity_operation(EntityInterface $entity) {
   $operations = [];
 
-  /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
+  /** @var SparqlEntityStorageInterface $storage */
   $storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());
 
   if ($storage instanceof SparqlEntityStorageInterface) {
diff --git a/modules/rdf_draft/src/Controller/RdfController.php b/modules/rdf_draft/src/Controller/RdfController.php
index 5c1afb5..930b606 100644
--- a/modules/rdf_draft/src/Controller/RdfController.php
+++ b/modules/rdf_draft/src/Controller/RdfController.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\rdf_draft\Controller;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\sparql_entity_storage\SparqlEntityStorageInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -20,23 +22,23 @@ class RdfController extends ControllerBase implements TrustedCallbackInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Creates an RdfController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer) {
@@ -57,7 +59,7 @@ class RdfController extends ControllerBase implements TrustedCallbackInterface {
   /**
    * Build the view draft page.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return array
@@ -68,9 +70,9 @@ class RdfController extends ControllerBase implements TrustedCallbackInterface {
    */
   public function view(RouteMatchInterface $route_match): array {
     $parameter_name = $route_match->getRouteObject()->getOption('entity_type_id');
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $route_match->getParameter($parameter_name);
-    /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
+    /** @var SparqlEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
     $graph_name = $route_match->getRouteObject()->getOption('graph_name');
     $draft_entity = $storage->load($entity->id(), [$graph_name]);
diff --git a/modules/rdf_draft/src/EventSubscriber/ActiveGraphSubscriber.php b/modules/rdf_draft/src/EventSubscriber/ActiveGraphSubscriber.php
index d0ea99d..fdffe3e 100644
--- a/modules/rdf_draft/src/EventSubscriber/ActiveGraphSubscriber.php
+++ b/modules/rdf_draft/src/EventSubscriber/ActiveGraphSubscriber.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\rdf_draft\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
+use Drupal\sparql_entity_storage\SparqlEntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\sparql_entity_storage\Event\ActiveGraphEvent;
 use Drupal\sparql_entity_storage\Event\SparqlEntityStorageEvents;
@@ -18,23 +20,23 @@ class ActiveGraphSubscriber implements EventSubscriberInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The SPARQL graph handler service.
    *
-   * @var \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface
+   * @var SparqlEntityStorageGraphHandlerInterface
    */
   protected $sparqlGraphHandler;
 
   /**
    * Constructs a new event subscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
+   * @param SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
    *   The SPARQL graph handler service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler) {
@@ -58,10 +60,10 @@ class ActiveGraphSubscriber implements EventSubscriberInterface {
    * - In any other case, like a 'view draft' tab view, the corresponding graph
    *   is loaded with no fallbacks.
    *
-   * @param \Drupal\sparql_entity_storage\Event\ActiveGraphEvent $event
+   * @param ActiveGraphEvent $event
    *   The event object to process.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when the access is denied and redirects to user login page.
    */
   public function graphForEntityConvert(ActiveGraphEvent $event) {
@@ -71,7 +73,7 @@ class ActiveGraphSubscriber implements EventSubscriberInterface {
       $default_graph_id = $this->sparqlGraphHandler->getDefaultGraphId($entity_type_id);
       $entity_type_has_draft = in_array('draft', $this->sparqlGraphHandler->getEntityTypeGraphIds($entity_type_id));
 
-      /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
+      /** @var SparqlEntityStorageInterface $storage */
       $storage = $this->entityTypeManager->getStorage($entity_type_id);
       $route_parts = explode('.', $defaults['_route']);
       // On the edit form, load from draft graph, if possible.
diff --git a/modules/rdf_draft/src/Plugin/Derivative/RdfDraftLocalTask.php b/modules/rdf_draft/src/Plugin/Derivative/RdfDraftLocalTask.php
index 9edb2a2..fd35619 100644
--- a/modules/rdf_draft/src/Plugin/Derivative/RdfDraftLocalTask.php
+++ b/modules/rdf_draft/src/Plugin/Derivative/RdfDraftLocalTask.php
@@ -22,16 +22,16 @@ class RdfDraftLocalTask extends DeriverBase implements ContainerDeriverInterface
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an RdfExportLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/modules/rdf_draft/src/RdfGraphAccessCheck.php b/modules/rdf_draft/src/RdfGraphAccessCheck.php
index 17742f8..d0ad274 100644
--- a/modules/rdf_draft/src/RdfGraphAccessCheck.php
+++ b/modules/rdf_draft/src/RdfGraphAccessCheck.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\rdf_draft;
 
+use Drupal\Core\Extension\ModuleHandler;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -21,23 +23,23 @@ class RdfGraphAccessCheck implements RdfGraphAccessCheckInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new access checker instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
@@ -116,10 +118,10 @@ class RdfGraphAccessCheck implements RdfGraphAccessCheckInterface {
    * - No modules say to deny access.
    * - At least one module says to grant access.
    *
-   * @param \Drupal\Core\Access\AccessResultInterface[] $access
+   * @param AccessResultInterface[] $access
    *   An array of access results of the fired access hook.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The combined result of the various access checks' results. All their
    *   cacheability metadata is merged as well.
    *
diff --git a/modules/rdf_draft/src/RdfGraphAccessCheckInterface.php b/modules/rdf_draft/src/RdfGraphAccessCheckInterface.php
index bd7dbcb..f834f2c 100644
--- a/modules/rdf_draft/src/RdfGraphAccessCheckInterface.php
+++ b/modules/rdf_draft/src/RdfGraphAccessCheckInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\rdf_draft;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -23,16 +24,16 @@ interface RdfGraphAccessCheckInterface extends AccessInterface {
   /**
    * A custom access check.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The current route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
-   * @param \Drupal\rdf_entity\RdfInterface $rdf_entity
+   * @param RdfInterface $rdf_entity
    *   The entity object.
    * @param string $operation
    *   The operation to check.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The result of the access check.
    */
   public function access(Route $route, AccountInterface $account, RdfInterface $rdf_entity, $operation);
@@ -40,18 +41,18 @@ interface RdfGraphAccessCheckInterface extends AccessInterface {
   /**
    * Performs further checking if required by the access method.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The current route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    * @param string $operation
    *   The operation to check.
    * @param string $graph_name
    *   The graph name.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The result of the access check.
    */
   public function checkAccess(EntityInterface $entity, Route $route, AccountInterface $account, $operation, $graph_name);
diff --git a/modules/rdf_draft/src/RdfGraphPermissions.php b/modules/rdf_draft/src/RdfGraphPermissions.php
index fc9a5b7..84859f9 100644
--- a/modules/rdf_draft/src/RdfGraphPermissions.php
+++ b/modules/rdf_draft/src/RdfGraphPermissions.php
@@ -21,14 +21,14 @@ class RdfGraphPermissions implements ContainerInjectionInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new dynamic permissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -69,7 +69,7 @@ class RdfGraphPermissions implements ContainerInjectionInterface {
   /**
    * Returns a list of permissions per entity type and graph.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $type
+   * @param EntityTypeInterface $type
    *   The entity type.
    * @param string $graph
    *   The machine name for the graph.
diff --git a/modules/rdf_draft/src/Routing/RouteSubscriber.php b/modules/rdf_draft/src/Routing/RouteSubscriber.php
index 8b948c3..a48227a 100644
--- a/modules/rdf_draft/src/Routing/RouteSubscriber.php
+++ b/modules/rdf_draft/src/Routing/RouteSubscriber.php
@@ -23,14 +23,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -60,12 +60,12 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Gets the devel load route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param array $graph_definition
    *   The graph definition.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRdfGraphRoute(EntityTypeInterface $entity_type, array $graph_definition) {
diff --git a/modules/rdf_export/src/Controller/RdfExportController.php b/modules/rdf_export/src/Controller/RdfExportController.php
index e440342..adab220 100644
--- a/modules/rdf_export/src/Controller/RdfExportController.php
+++ b/modules/rdf_export/src/Controller/RdfExportController.php
@@ -23,14 +23,14 @@ class RdfExportController extends ControllerBase {
   /**
    * The SPARQL serializer service.
    *
-   * @var \Drupal\sparql_entity_storage\SparqlSerializerInterface
+   * @var SparqlSerializerInterface
    */
   protected $sparqlSerializer;
 
   /**
    * Instantiates a new RdfExportController object.
    *
-   * @param \Drupal\sparql_entity_storage\SparqlSerializerInterface $sparql_serializer
+   * @param SparqlSerializerInterface $sparql_serializer
    *   The SPARQL serializer interface.
    */
   public function __construct(SparqlSerializerInterface $sparql_serializer) {
@@ -49,7 +49,7 @@ class RdfExportController extends ControllerBase {
   /**
    * Build an list of possible download links to RDF serialization methods.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The RouteMatch object.
    *
    * @return array
@@ -58,7 +58,7 @@ class RdfExportController extends ControllerBase {
   public function downloadLinks(RouteMatchInterface $route_match) {
     $parameter_name = $route_match->getRouteObject()
       ->getOption('entity_type_id');
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $route_match->getParameter($parameter_name);
     $list = ['#theme' => 'item_list'];
     foreach ($this->getSerializerFormats() as $format_type => $format) {
@@ -83,12 +83,12 @@ class RdfExportController extends ControllerBase {
   /**
    * Download callback for the exported RDF.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The RouteMatch object.
    * @param string $export_format
    *   The serialization format (e.g. turtle, rdfxml, ...).
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Response object with correct headers set.
    */
   public function download(RouteMatchInterface $route_match, $export_format) {
@@ -122,7 +122,7 @@ class RdfExportController extends ControllerBase {
     $white_list = $this->config('rdf_export.settings')->get('export_types');
     $list = [];
     $formats = Format::getFormats();
-    /** @var \EasyRdf\Format $format */
+    /** @var Format $format */
     foreach ($formats as $format) {
       if (!in_array($format->getName(), $white_list)) {
         continue;
diff --git a/modules/rdf_export/src/Form/SettingsForm.php b/modules/rdf_export/src/Form/SettingsForm.php
index 2cf6965..72a5d52 100644
--- a/modules/rdf_export/src/Form/SettingsForm.php
+++ b/modules/rdf_export/src/Form/SettingsForm.php
@@ -37,7 +37,7 @@ class SettingsForm extends ConfigFormBase {
     // @todo Check which format are supported by the server?
     $formats = Format::getFormats();
     $list = [];
-    /** @var \EasyRdf\Format $format */
+    /** @var Format $format */
     foreach ($formats as $format) {
       if ($format->getSerialiserClass()) {
         $list[$format->getName()] = $format->getLabel();
diff --git a/modules/rdf_export/src/Plugin/Derivative/RdfExportLocalTask.php b/modules/rdf_export/src/Plugin/Derivative/RdfExportLocalTask.php
index 4dce689..53afb6a 100644
--- a/modules/rdf_export/src/Plugin/Derivative/RdfExportLocalTask.php
+++ b/modules/rdf_export/src/Plugin/Derivative/RdfExportLocalTask.php
@@ -21,16 +21,16 @@ class RdfExportLocalTask extends DeriverBase implements ContainerDeriverInterfac
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an RdfExportLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/modules/rdf_export/src/Routing/RouteSubscriber.php b/modules/rdf_export/src/Routing/RouteSubscriber.php
index b55356a..19f0e61 100644
--- a/modules/rdf_export/src/Routing/RouteSubscriber.php
+++ b/modules/rdf_export/src/Routing/RouteSubscriber.php
@@ -19,14 +19,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -48,10 +48,10 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Gets the devel load route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRdfExportRoute(EntityTypeInterface $entity_type) {
diff --git a/modules/rdf_export/tests/src/Functional/RdfExportTest.php b/modules/rdf_export/tests/src/Functional/RdfExportTest.php
index 0739806..c87b5a1 100644
--- a/modules/rdf_export/tests/src/Functional/RdfExportTest.php
+++ b/modules/rdf_export/tests/src/Functional/RdfExportTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\rdf_export\Functional;
 
+use Drupal\rdf_entity\RdfInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\sparql_entity_storage\Traits\SparqlConnectionTrait;
 use Drupal\rdf_entity\Entity\Rdf;
@@ -35,7 +36,7 @@ class RdfExportTest extends BrowserTestBase {
   /**
    * Testing entity.
    *
-   * @var \Drupal\rdf_entity\RdfInterface
+   * @var RdfInterface
    */
   protected $entity;
 
diff --git a/modules/rdf_taxonomy/rdf_taxonomy.install b/modules/rdf_taxonomy/rdf_taxonomy.install
index 9ccdd15..b3bb1d6 100644
--- a/modules/rdf_taxonomy/rdf_taxonomy.install
+++ b/modules/rdf_taxonomy/rdf_taxonomy.install
@@ -6,6 +6,7 @@
  */
 
 declare(strict_types = 1);
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
 
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -25,7 +26,7 @@ function rdf_taxonomy_install() {
 
   // Remove revision fields created by taxonomy.module.
   $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
 
   $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions('taxonomy_term');
diff --git a/modules/rdf_taxonomy/rdf_taxonomy.module b/modules/rdf_taxonomy/rdf_taxonomy.module
index 947d133..8598c3a 100644
--- a/modules/rdf_taxonomy/rdf_taxonomy.module
+++ b/modules/rdf_taxonomy/rdf_taxonomy.module
@@ -44,7 +44,7 @@ function rdf_taxonomy_entity_base_field_info_alter(array &$fields, EntityTypeInt
     return;
   }
 
-  /** @var \Drupal\Core\Field\BaseFieldDefinition $original_tid */
+  /** @var BaseFieldDefinition $original_tid */
   $original_tid = $fields['tid'];
 
   // Change the tid type to string (RDF uri).
@@ -87,7 +87,7 @@ function rdf_taxonomy_taxonomy_term_create_access(AccountInterface $account, arr
  * Implements hook_form_BASE_FORM_ID_alter().
  */
 function rdf_taxonomy_form_taxonomy_term_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\taxonomy\TermInterface $term */
+  /** @var TermInterface $term */
   $term = $form_state->getFormObject()->getEntity();
 
   $sparql_mapping = SparqlMapping::loadByName('taxonomy_term', $term->bundle());
@@ -123,7 +123,7 @@ function rdf_taxonomy_form_taxonomy_term_form_alter(&$form, FormStateInterface $
  * @see template_preprocess_taxonomy_term()
  */
 function rdf_taxonomy_preprocess_taxonomy_term(&$variables) {
-  /** @var \Drupal\taxonomy\TermInterface $term */
+  /** @var TermInterface $term */
   $term = $variables['term'];
   $variables['page'] = $variables['view_mode'] == 'full' && rdf_taxonomy_term_is_page($term);
 }
@@ -133,7 +133,7 @@ function rdf_taxonomy_preprocess_taxonomy_term(&$variables) {
  *
  * Adapted from taxonomy_term_is_page().
  *
- * @param \Drupal\taxonomy\Entity\Term $term
+ * @param Term $term
  *   A taxonomy term entity.
  *
  * @see taxonomy_term_is_page()
diff --git a/modules/rdf_taxonomy/src/EventSubscriber/OutboundTermParentSubscriber.php b/modules/rdf_taxonomy/src/EventSubscriber/OutboundTermParentSubscriber.php
index 74ccadf..759d071 100644
--- a/modules/rdf_taxonomy/src/EventSubscriber/OutboundTermParentSubscriber.php
+++ b/modules/rdf_taxonomy/src/EventSubscriber/OutboundTermParentSubscriber.php
@@ -28,7 +28,7 @@ class OutboundTermParentSubscriber implements EventSubscriberInterface {
    * Drupal core uses taxonomy terms with numeric IDs. If case, we convert the
    * term ID, from a numeric type to string.
    *
-   * @param \Drupal\sparql_entity_storage\Event\OutboundValueEvent $event
+   * @param OutboundValueEvent $event
    *   The outbound value event.
    */
   public function fixParentTermId(OutboundValueEvent $event) {
diff --git a/modules/rdf_taxonomy/src/RdfTaxonomyTermListBuilder.php b/modules/rdf_taxonomy/src/RdfTaxonomyTermListBuilder.php
index 8327a22..22ace2b 100644
--- a/modules/rdf_taxonomy/src/RdfTaxonomyTermListBuilder.php
+++ b/modules/rdf_taxonomy/src/RdfTaxonomyTermListBuilder.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\rdf_taxonomy;
 
+use Drupal\taxonomy\VocabularyInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -20,34 +21,34 @@ class RdfTaxonomyTermListBuilder extends EntityListBuilder {
   /**
    * The current route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The vocabulary for this term listing.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;
 
   /**
    * Constructs a new RdfTaxonomyTermListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, RouteMatchInterface $route_match, RendererInterface $renderer) {
@@ -113,7 +114,7 @@ class RdfTaxonomyTermListBuilder extends EntityListBuilder {
   /**
    * Gets the vocabulary entity for this listing.
    *
-   * @return \Drupal\taxonomy\VocabularyInterface
+   * @return VocabularyInterface
    *   The vocabulary config entity.
    *
    * @throws \Exception
diff --git a/modules/rdf_taxonomy/src/TermRdfStorage.php b/modules/rdf_taxonomy/src/TermRdfStorage.php
index 9206c5b..b5209ae 100644
--- a/modules/rdf_taxonomy/src/TermRdfStorage.php
+++ b/modules/rdf_taxonomy/src/TermRdfStorage.php
@@ -34,7 +34,7 @@ class TermRdfStorage extends SparqlEntityStorage implements TermStorageInterface
   /**
    * The active database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -108,38 +108,38 @@ class TermRdfStorage extends SparqlEntityStorage implements TermStorageInterface
   /**
    * Ancestor entities.
    *
-   * @var \Drupal\taxonomy\TermInterface[][]
+   * @var TermInterface[][]
    */
   protected $ancestors;
 
   /**
    * Constructs a new term storage instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type this storage is about.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memory_cache
+   * @param MemoryCacheInterface|null $memory_cache
    *   The memory cache backend.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $sparql
+   * @param ConnectionInterface $sparql
    *   The connection object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
+   * @param SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
    *   The sPARQL graph helper service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
+   * @param SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
    *   The SPARQL field mapping service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageEntityIdPluginManager $entity_id_plugin_manager
+   * @param SparqlEntityStorageEntityIdPluginManager $entity_id_plugin_manager
    *   The entity ID generator plugin manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The active database connection.
    */
   public function __construct(
@@ -254,7 +254,7 @@ class TermRdfStorage extends SparqlEntityStorage implements TermStorageInterface
    */
   public function loadParents($tid) {
     $terms = [];
-    /** @var \Drupal\taxonomy\TermInterface $term */
+    /** @var TermInterface $term */
     if ($tid && $term = $this->load($tid)) {
       foreach ($this->getParents($term) as $id => $parent) {
         // This method currently doesn't return the <root> parent.
@@ -271,7 +271,7 @@ class TermRdfStorage extends SparqlEntityStorage implements TermStorageInterface
   /**
    * Returns a list of parents of this term.
    *
-   * @return \Drupal\taxonomy\TermInterface[]
+   * @return TermInterface[]
    *   The parent taxonomy term entities keyed by term ID. If this term has a
    *   <root> parent, that item is keyed with 0 and will have NULL as value.
    */
@@ -298,14 +298,14 @@ class TermRdfStorage extends SparqlEntityStorage implements TermStorageInterface
    * {@inheritdoc}
    */
   public function loadAllParents($tid) {
-    /** @var \Drupal\taxonomy\TermInterface $term */
+    /** @var TermInterface $term */
     return (!empty($tid) && $term = $this->load($tid)) ? $this->getAncestors($term) : [];
   }
 
   /**
    * Returns all ancestors of this term.
    *
-   * @return \Drupal\taxonomy\TermInterface[]
+   * @return TermInterface[]
    *   A list of ancestor taxonomy term entities keyed by term ID.
    *
    * @internal
@@ -332,14 +332,14 @@ class TermRdfStorage extends SparqlEntityStorage implements TermStorageInterface
    * {@inheritdoc}
    */
   public function loadChildren($tid, $vid = NULL) {
-    /** @var \Drupal\taxonomy\TermInterface $term */
+    /** @var TermInterface $term */
     return (!empty($tid) && $term = $this->load($tid)) ? $this->getChildren($term) : [];
   }
 
   /**
    * Returns all children terms of this term.
    *
-   * @return \Drupal\taxonomy\TermInterface[]
+   * @return TermInterface[]
    *   A list of children taxonomy term entities keyed by term ID.
    *
    * @internal
diff --git a/modules/rdf_taxonomy/tests/src/Functional/ManageUnlockedVocabularyTermsTest.php b/modules/rdf_taxonomy/tests/src/Functional/ManageUnlockedVocabularyTermsTest.php
index 056bde0..fcf63e6 100644
--- a/modules/rdf_taxonomy/tests/src/Functional/ManageUnlockedVocabularyTermsTest.php
+++ b/modules/rdf_taxonomy/tests/src/Functional/ManageUnlockedVocabularyTermsTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\rdf_taxonomy\Functional;
 
+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\sparql_entity_storage\Traits\SparqlConnectionTrait;
 use Drupal\filter\Entity\FilterFormat;
@@ -108,13 +110,13 @@ class ManageUnlockedVocabularyTermsTest extends BrowserTestBase {
     $this->submitForm($edit, 'Save');
     $assert_session->pageTextContains('Created new term Top Level Term.');
 
-    /** @var \Drupal\taxonomy\TermStorageInterface $storage */
+    /** @var TermStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('taxonomy_term');
     $terms = $storage->loadByProperties([
       'vid' => 'unlocked_vocab',
       'name' => 'Top Level Term',
     ]);
-    /** @var \Drupal\taxonomy\TermInterface $term */
+    /** @var TermInterface $term */
     $term = reset($terms);
 
     // Test term view.
diff --git a/modules/rdf_taxonomy/tests/src/Kernel/SparqlTaxonomyTest.php b/modules/rdf_taxonomy/tests/src/Kernel/SparqlTaxonomyTest.php
index 5eadfb8..8234f88 100644
--- a/modules/rdf_taxonomy/tests/src/Kernel/SparqlTaxonomyTest.php
+++ b/modules/rdf_taxonomy/tests/src/Kernel/SparqlTaxonomyTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\rdf_taxonomy\Tests;
 
+use Drupal\rdf_entity\RdfInterface;
 use Drupal\Tests\rdf_entity\Kernel\RdfKernelTestBase;
 use Drupal\taxonomy\Entity\Term;
 
@@ -46,7 +47,7 @@ class SparqlTaxonomyTest extends RdfKernelTestBase {
   /**
    * Dummy reference entities.
    *
-   * @var \Drupal\rdf_entity\RdfInterface[]
+   * @var RdfInterface[]
    */
   protected $dummyEntities;
 
diff --git a/modules/rdf_taxonomy/tests/src/Kernel/SparqlTermWeightTest.php b/modules/rdf_taxonomy/tests/src/Kernel/SparqlTermWeightTest.php
index f3e9bce..b6b2ad3 100644
--- a/modules/rdf_taxonomy/tests/src/Kernel/SparqlTermWeightTest.php
+++ b/modules/rdf_taxonomy/tests/src/Kernel/SparqlTermWeightTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\rdf_taxonomy\Kernel;
 
+use Drupal\rdf_taxonomy\TermRdfStorage;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\sparql_entity_storage\Traits\SparqlConnectionTrait;
 use Drupal\rdf_taxonomy\Entity\RdfTerm;
@@ -90,7 +91,7 @@ class SparqlTermWeightTest extends KernelTestBase {
    * Tests the RdfTerm weight.
    */
   public function testTermWeight(): void {
-    /** @var \Drupal\rdf_taxonomy\TermRdfStorage $storage */
+    /** @var TermRdfStorage $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('taxonomy_term');
 
     // Returns an ordered list of term labels from the backend.
@@ -125,7 +126,7 @@ class SparqlTermWeightTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     $this->emptyTestVocabulary();
     parent::tearDown();
   }
diff --git a/rdf_entity.install b/rdf_entity.install
index 5f6ae61..3aad408 100644
--- a/rdf_entity.install
+++ b/rdf_entity.install
@@ -6,6 +6,7 @@
  */
 
 declare(strict_types = 1);
+use Drupal\Core\Config\Entity\ConfigEntityBase;
 
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Serialization\Yaml;
@@ -39,7 +40,7 @@ function rdf_entity_update_8001() {
 
     if ($bundle_entity_type_id = $entity_type->getBundleEntityType()) {
       $bundle_storage = $entity_type_manager->getStorage($bundle_entity_type_id);
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $bundle_entity */
+      /** @var ConfigEntityBase $bundle_entity */
       foreach ($bundle_storage->loadMultiple() as $bundle => $bundle_entity) {
         $third_party_settings = $bundle_entity->getThirdPartySettings('rdf_entity');
         $values = [
@@ -116,7 +117,9 @@ function rdf_entity_update_8004() {
     foreach (['module', 'theme'] as $extension_type) {
       $extensions = array_keys($extensions_config->get($extension_type));
       foreach ($extensions as $extension_name) {
-        $extension_path = drupal_get_path($extension_type, $extension_name);
+        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+        // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+        $extension_path = \Drupal::service('extension.path.resolver')->getPath($extension_type, $extension_name);
         foreach (['install', 'optional'] as $sub_path) {
           try {
             foreach ($file_system->scanDirectory("$extension_path/config/$sub_path", $file_pattern) as $path => $file) {
diff --git a/rdf_entity.module b/rdf_entity.module
index c060e42..9e87678 100755
--- a/rdf_entity.module
+++ b/rdf_entity.module
@@ -46,7 +46,7 @@ function template_preprocess_rdf_entity(array &$variables) {
   // Provide a distinct $teaser boolean.
   $variables['teaser'] = $variables['view_mode'] == 'teaser';
   $variables['rdf_entity'] = $variables['elements']['#rdf_entity'];
-  /** @var \Drupal\rdf_entity\RdfInterface $rdf_entity */
+  /** @var RdfInterface $rdf_entity */
   $rdf_entity = $variables['rdf_entity'];
   $variables['date'] = $renderer->render($variables['elements']['created']);
   unset($variables['elements']['created']);
@@ -102,7 +102,7 @@ function template_preprocess_rdf_add_list(array &$variables) {
 /**
  * Is the current page the full page view of the passed-in RDF entity?
  *
- * @param \Drupal\rdf_entity\RdfInterface $rdf_entity
+ * @param RdfInterface $rdf_entity
  *   An RDF entity.
  *
  * @return int|false
diff --git a/src/ContextProvider/RdfEntityRouteContext.php b/src/ContextProvider/RdfEntityRouteContext.php
index b51849a..b02606f 100644
--- a/src/ContextProvider/RdfEntityRouteContext.php
+++ b/src/ContextProvider/RdfEntityRouteContext.php
@@ -22,14 +22,14 @@ class RdfEntityRouteContext implements ContextProviderInterface {
   /**
    * The route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Constructs a new RdfEntityRouteContext.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    */
   public function __construct(RouteMatchInterface $route_match) {
diff --git a/src/Controller/RdfController.php b/src/Controller/RdfController.php
index 52e0471..211b484 100644
--- a/src/Controller/RdfController.php
+++ b/src/Controller/RdfController.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\rdf_entity\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\rdf_entity\RdfEntityTypeInterface;
@@ -17,7 +18,7 @@ class RdfController extends ControllerBase {
   /**
    * Route title callback.
    *
-   * @param \Drupal\rdf_entity\RdfEntityTypeInterface $rdf_type
+   * @param RdfEntityTypeInterface $rdf_type
    *   The rdf type.
    *
    * @return array
@@ -33,7 +34,7 @@ class RdfController extends ControllerBase {
   /**
    * Route title callback.
    *
-   * @param \Drupal\rdf_entity\RdfInterface $rdf_entity
+   * @param RdfInterface $rdf_entity
    *   The rdf entity.
    *
    * @return array
@@ -49,7 +50,7 @@ class RdfController extends ControllerBase {
   /**
    * Provides the RDF submission form.
    *
-   * @param \Drupal\rdf_entity\RdfEntityTypeInterface $rdf_type
+   * @param RdfEntityTypeInterface $rdf_type
    *   The RDF bundle entity for the RDF entity.
    *
    * @return array
@@ -72,7 +73,7 @@ class RdfController extends ControllerBase {
    *
    * Redirects to rdf_entity/add/[type] if only one rdf type is available.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the rdf bundles that can be added; however,
    *   if there is only one rdf type defined for the site, the function
    *   will return a RedirectResponse to the rdf add page for that one rdf
diff --git a/src/Entity/Controller/RdfListBuilder.php b/src/Entity/Controller/RdfListBuilder.php
index 6d525ae..d22d237 100755
--- a/src/Entity/Controller/RdfListBuilder.php
+++ b/src/Entity/Controller/RdfListBuilder.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\rdf_entity\Entity\Controller;
 
+use Drupal\sparql_entity_storage\SparqlEntityStorageInterface;
+use Drupal\sparql_entity_storage\Entity\Query\Sparql\Query;
+use Drupal\rdf_entity\RdfInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -23,45 +26,45 @@ class RdfListBuilder extends EntityListBuilder {
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * Constructs a new NodeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
-   * @param \Symfony\Component\HttpFoundation\Request $current_request
+   * @param Request $current_request
    *   The current request.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, RedirectDestinationInterface $redirect_destination, Request $current_request, EntityTypeBundleInfoInterface $bundle_info, FormBuilderInterface $form_builder) {
@@ -97,9 +100,9 @@ class RdfListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   protected function getEntityIds() {
-    /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $sparql_storage */
+    /** @var SparqlEntityStorageInterface $sparql_storage */
     $sparql_storage = $this->getStorage();
-    /** @var \Drupal\sparql_entity_storage\Entity\Query\Sparql\Query $query */
+    /** @var Query $query */
     $query = $sparql_storage->getQuery();
 
     // If a graph type is set in the url, validate it, and use it in the query.
@@ -175,7 +178,7 @@ class RdfListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\rdf_entity\RdfInterface $entity */
+    /** @var RdfInterface $entity */
     $row['id'] = $entity->toLink();
     $row['rid'] = $entity->bundle();
     $row['status'] = $entity->isPublished() ? $this->t('Published') : $this->t('Unpublished');
diff --git a/src/Entity/Rdf.php b/src/Entity/Rdf.php
index 43c361d..596fcb3 100755
--- a/src/Entity/Rdf.php
+++ b/src/Entity/Rdf.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\rdf_entity\Entity;
 
+use Drupal\sparql_entity_storage\SparqlEntityStorageInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityChangedTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -254,7 +255,7 @@ class Rdf extends ContentEntityBase implements RdfInterface {
    * {@inheritdoc}
    */
   public function isPublished() {
-    /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
+    /** @var SparqlEntityStorageInterface $storage */
     $storage = $this->entityTypeManager()->getStorage($this->getEntityTypeId());
     $published_graph = $storage->getGraphHandler()->getBundleGraphUri($this->getEntityTypeId(), $this->bundle(), SparqlGraphInterface::DEFAULT);
     $entity_graph_name = $this->get('graph')->target_id;
@@ -329,7 +330,7 @@ class Rdf extends ContentEntityBase implements RdfInterface {
    */
   public function deleteFromGraph(string $graph_id): void {
     if (!$this->isNew()) {
-      /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
+      /** @var SparqlEntityStorageInterface $storage */
       $storage = $this->entityTypeManager()->getStorage($this->entityTypeId);
       $storage->deleteFromGraph([$this], $graph_id);
     }
@@ -373,7 +374,7 @@ class Rdf extends ContentEntityBase implements RdfInterface {
   public static function load($id, ?array $graph_ids = NULL) {
     $entity_type_repository = \Drupal::service('entity_type.repository');
     $entity_type_manager = \Drupal::entityTypeManager();
-    /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
+    /** @var SparqlEntityStorageInterface $storage */
     $storage = $entity_type_manager->getStorage($entity_type_repository->getEntityTypeFromClass(get_called_class()));
     return $storage->load($id, $graph_ids);
   }
@@ -384,7 +385,7 @@ class Rdf extends ContentEntityBase implements RdfInterface {
   public static function loadMultiple(?array $ids = NULL, ?array $graph_ids = NULL) {
     $entity_type_repository = \Drupal::service('entity_type.repository');
     $entity_type_manager = \Drupal::entityTypeManager();
-    /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
+    /** @var SparqlEntityStorageInterface $storage */
     $storage = $entity_type_manager->getStorage($entity_type_repository->getEntityTypeFromClass(get_called_class()));
     return $storage->loadMultiple($ids, $graph_ids);
   }
diff --git a/src/Form/RdfForm.php b/src/Form/RdfForm.php
index 78bed5b..c5dfb44 100755
--- a/src/Form/RdfForm.php
+++ b/src/Form/RdfForm.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\rdf_entity\Form;
 
+use Drupal\rdf_entity\RdfInterface;
+use Drupal\rdf_entity\Entity\Rdf;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\rdf_entity\Entity\RdfEntityType;
@@ -19,7 +21,7 @@ class RdfForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\rdf_entity\RdfInterface $entity */
+    /** @var RdfInterface $entity */
     $form = parent::buildForm($form, $form_state);
     $entity = $this->entity;
 
@@ -44,7 +46,7 @@ class RdfForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\rdf_entity\Entity\Rdf $entity */
+    /** @var Rdf $entity */
     $entity = $this->getEntity();
     $entity->save();
     if (!$form_state->getRedirect()) {
diff --git a/src/Form/RdfListBuilderFilterForm.php b/src/Form/RdfListBuilderFilterForm.php
index 0b8098a..938a46b 100644
--- a/src/Form/RdfListBuilderFilterForm.php
+++ b/src/Form/RdfListBuilderFilterForm.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\rdf_entity\Form;
 
+use Drupal\sparql_entity_storage\SparqlEntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ -18,23 +19,23 @@ class RdfListBuilderFilterForm extends FormBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new form instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeBundleInfoInterface $bundle_info, EntityTypeManagerInterface $entity_type_manager) {
@@ -61,7 +62,7 @@ class RdfListBuilderFilterForm extends FormBase {
       '#attributes' => ['class' => ['container-inline']],
     ];
 
-    /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
+    /** @var SparqlEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('rdf_entity');
     $graphs = array_map(function (array $definition) {
       return $definition['title'];
diff --git a/src/Form/RdfTypeForm.php b/src/Form/RdfTypeForm.php
index ae461c6..f739285 100644
--- a/src/Form/RdfTypeForm.php
+++ b/src/Form/RdfTypeForm.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\rdf_entity\Form;
 
+use Drupal\taxonomy\VocabularyStorageInterface;
+use Drupal\rdf_entity\RdfEntityTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -18,14 +20,14 @@ class RdfTypeForm extends BundleEntityFormBase {
   /**
    * The vocabulary storage.
    *
-   * @var \Drupal\taxonomy\VocabularyStorageInterface
+   * @var VocabularyStorageInterface
    */
   protected $rdfTypeStorage;
 
   /**
    * Constructs a new rdf type form.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $rdf_type_storage
+   * @param ConfigEntityStorageInterface $rdf_type_storage
    *   The rdf type storage.
    */
   public function __construct(ConfigEntityStorageInterface $rdf_type_storage) {
@@ -45,7 +47,7 @@ class RdfTypeForm extends BundleEntityFormBase {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\rdf_entity\RdfEntityTypeInterface $rdf_type */
+    /** @var RdfEntityTypeInterface $rdf_type */
     $rdf_type = $this->entity;
     if ($rdf_type->isNew()) {
       $form['#title'] = $this->t('Add rdf type');
diff --git a/src/Plugin/Condition/RdfEntityBundle.php b/src/Plugin/Condition/RdfEntityBundle.php
index 777e94a..dbf8c97 100644
--- a/src/Plugin/Condition/RdfEntityBundle.php
+++ b/src/Plugin/Condition/RdfEntityBundle.php
@@ -26,7 +26,7 @@ class RdfEntityBundle extends ConditionPluginBase implements ContainerFactoryPlu
   /**
    * The rdf type storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $rdfTypeStorage;
 
@@ -39,7 +39,7 @@ class RdfEntityBundle extends ConditionPluginBase implements ContainerFactoryPlu
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $rdf_type_storage
+   * @param ConfigEntityStorageInterface $rdf_type_storage
    *   The rdf type storage.
    *
    * @deprecated in rdf_entity:2.0.0-alpha2 and is removed from
diff --git a/src/RdfPermissions.php b/src/RdfPermissions.php
index 1e1e9de..687c0d0 100644
--- a/src/RdfPermissions.php
+++ b/src/RdfPermissions.php
@@ -33,7 +33,7 @@ class RdfPermissions {
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\rdf_entity\Entity\RdfEntityType $type
+   * @param RdfEntityType $type
    *   The RDF entity type.
    *
    * @return array
