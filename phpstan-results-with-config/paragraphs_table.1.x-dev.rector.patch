diff --git a/src/Controller/AjaxController.php b/src/Controller/AjaxController.php
index 34437d8..7b0d744 100644
--- a/src/Controller/AjaxController.php
+++ b/src/Controller/AjaxController.php
@@ -147,7 +147,7 @@ class AjaxController extends ControllerBase {
       $objectData = new \stdClass();
       foreach ($components as $field_name => $field) {
         $table_entity[$field_name]['#label_display'] = 'hidden';
-        $value = trim(strip_tags(render($table_entity[$field_name])));
+        $value = trim(strip_tags(\Drupal::service('renderer')->render($table_entity[$field_name])));
         if (in_array($this->fieldsDefinition[$field_name]->getType(), [
           'integer',
           'list_integer',
@@ -195,7 +195,7 @@ class AjaxController extends ControllerBase {
       $table_entity = $this->renderBuild->build($entity);
       foreach ($components as $field_name => $field) {
         $table_entity[$field_name]['#label_display'] = 'hidden';
-        $value = trim(render($table_entity[$field_name]));
+        $value = trim(\Drupal::service('renderer')->render($table_entity[$field_name]));
         if (!is_numeric($value) && empty($value) && !empty($setting["empty_cell_value"])) {
           $value = $setting["empty_cell_value"];
         }
@@ -224,7 +224,7 @@ class AjaxController extends ControllerBase {
 
       foreach ($components as $field_name => $field) {
         $table_entity[$field_name]['#label_display'] = 'hidden';
-        $value = trim(strip_tags(render($table_entity[$field_name])));
+        $value = trim(strip_tags(\Drupal::service('renderer')->render($table_entity[$field_name])));
         if (in_array($this->fieldsDefinition[$field_name]->getType(), [
           'integer',
           'list_integer',
@@ -300,7 +300,7 @@ class AjaxController extends ControllerBase {
     // Alter row operation.
     \Drupal::moduleHandler()
       ->alter('paragraphs_table_operations', $operation, $paragraphsId);
-    return render($operation);
+    return \Drupal::service('renderer')->render($operation);
   }
 
 }
diff --git a/src/Controller/ParagraphsItemController.php b/src/Controller/ParagraphsItemController.php
index bee47c9..3611ca2 100644
--- a/src/Controller/ParagraphsItemController.php
+++ b/src/Controller/ParagraphsItemController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\paragraphs_table\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\paragraphs\ParagraphInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxHelperTrait;
 use Drupal\Core\Ajax\AjaxResponse;
@@ -22,7 +25,7 @@ class ParagraphsItemController extends ControllerBase {
   /**
    * Provides the paragraphs item submission form.
    *
-   * @param \Drupal\paragraphs\Entity\ParagraphsType $paragraph_type
+   * @param ParagraphsType $paragraph_type
    *   The paragraphs entity for the paragraph item.
    * @param string $entity_type
    *   The type of the entity hosting the paragraph item.
@@ -34,8 +37,8 @@ class ParagraphsItemController extends ControllerBase {
    * @return array
    *   A paragraph item submission form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function add(ParagraphsType $paragraph_type, $entity_type, $entity_field, $entity_id) {
     $paragraph = $this->newParagraph($paragraph_type);
@@ -70,17 +73,17 @@ class ParagraphsItemController extends ControllerBase {
   /**
    * Creates a new, empty paragraph empty of the provided type.
    *
-   * @param \Drupal\paragraphs\ParagraphsTypeInterface $paragraph_type
+   * @param ParagraphsTypeInterface $paragraph_type
    *   The paragraph type.
    *
-   * @return \Drupal\paragraphs\ParagraphInterface
+   * @return ParagraphInterface
    *   The new paragraph.
    */
   protected function newParagraph(ParagraphsTypeInterface $paragraph_type) {
     $entityTypeManager = \Drupal::entityTypeManager();
     $entity_type = $entityTypeManager->getDefinition('paragraph');
     $bundle_key = $entity_type->getKey('bundle');
-    /** @var \Drupal\paragraphs\ParagraphInterface $paragraph_entity */
+    /** @var ParagraphInterface $paragraph_entity */
     $paragraph = $entityTypeManager->getStorage('paragraph')
       ->create([$bundle_key => $paragraph_type->id()]);
     return $paragraph;
@@ -89,7 +92,7 @@ class ParagraphsItemController extends ControllerBase {
   /**
    * The _title_callback for the paragraphs_item.add route.
    *
-   * @param \Drupal\paragraphs\Entity\ParagraphsType $paragraph_type
+   * @param ParagraphsType $paragraph_type
    *   The current paragraphs_type.
    *
    * @return string
@@ -102,7 +105,7 @@ class ParagraphsItemController extends ControllerBase {
   /**
    * Displays a paragraphs item.
    *
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The Paragraph item we are displaying.
    *
    * @return array
@@ -115,7 +118,7 @@ class ParagraphsItemController extends ControllerBase {
   /**
    * The _title_callback for the paragraphs_item.view route.
    *
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The current paragraphs_item.
    *
    * @return string
@@ -130,7 +133,7 @@ class ParagraphsItemController extends ControllerBase {
   /**
    * Builds a paragraph item page render array.
    *
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The field paragraph item we are displaying.
    *
    * @return array
diff --git a/src/Form/ParagraphAddForm.php b/src/Form/ParagraphAddForm.php
index 57b5f6c..3d14211 100644
--- a/src/Form/ParagraphAddForm.php
+++ b/src/Form/ParagraphAddForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\paragraphs_table\Form;
 
+use Drupal\paragraphs\ParagraphInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Symfony\Component\Validator\ConstraintViolationInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\ContentEntityForm;
@@ -34,7 +39,7 @@ class ParagraphAddForm extends ContentEntityForm {
   /**
    * The paragraph.
    *
-   * @var \Drupal\paragraphs\Entity\Paragraph
+   * @var Paragraph
    */
   protected $entity;
 
@@ -100,7 +105,7 @@ class ParagraphAddForm extends ContentEntityForm {
   /**
    * The entity being cloned by this form.
    *
-   * @var \Drupal\paragraphs\ParagraphInterface
+   * @var ParagraphInterface
    */
   protected $originalEntity;
 
@@ -127,9 +132,9 @@ class ParagraphAddForm extends ContentEntityForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The layout paragraphs layout object.
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph entity.
    * @param string $host_type
    *   The entity type.
@@ -141,8 +146,8 @@ class ParagraphAddForm extends ContentEntityForm {
    * @return array
    *   Return form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildForm(
     array $form,
@@ -166,7 +171,7 @@ class ParagraphAddForm extends ContentEntityForm {
   /**
    * Create the form title.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The form title.
    */
   protected function formTitle() {
@@ -181,7 +186,7 @@ class ParagraphAddForm extends ContentEntityForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param bool $formatTable
    *   Display form with table format.
@@ -290,7 +295,7 @@ class ParagraphAddForm extends ContentEntityForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
@@ -304,7 +309,7 @@ class ParagraphAddForm extends ContentEntityForm {
     $paragraph->setValidationRequired(FALSE);
     // Flag entity level violations.
     foreach ($violations->getEntityViolations() as $violation) {
-      /** @var \Symfony\Component\Validator\ConstraintViolationInterface $violation */
+      /** @var ConstraintViolationInterface $violation */
       $form_state->setErrorByName('', $violation->getMessage());
     }
     $form['#display']->flagWidgetsErrorsFromViolations($violations, $form, $form_state);
@@ -316,7 +321,7 @@ class ParagraphAddForm extends ContentEntityForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -349,14 +354,14 @@ class ParagraphAddForm extends ContentEntityForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\paragraphs\Entity\Paragraph
+   * @return Paragraph
    *   The paragraph entity.
    */
   public function buildParagraphComponent(array $form, FormStateInterface $form_state) {
-    /** @var Drupal\Core\Entity\Entity\EntityFormDisplay $display */
+    /** @var EntityFormDisplay $display */
     $display = $form['#display'];
 
     $paragraph = clone $this->entity;
@@ -369,17 +374,17 @@ class ParagraphAddForm extends ContentEntityForm {
   /**
    * Creates a new, empty paragraph empty of the provided type.
    *
-   * @param \Drupal\paragraphs\ParagraphsTypeInterface $paragraph_type
+   * @param ParagraphsTypeInterface $paragraph_type
    *   The paragraph type.
    *
-   * @return \Drupal\paragraphs\ParagraphInterface
+   * @return ParagraphInterface
    *   The new paragraph.
    */
   protected function newParagraph(ParagraphsTypeInterface $paragraph_type) {
     $entityTypeManager = \Drupal::entityTypeManager();
     $entity_type = $entityTypeManager->getDefinition('paragraph');
     $bundle_key = $entity_type->getKey('bundle');
-    /** @var \Drupal\paragraphs\ParagraphInterface $paragraph_entity */
+    /** @var ParagraphInterface $paragraph_entity */
     $paragraph = $entityTypeManager->getStorage('paragraph')
       ->create([$bundle_key => $paragraph_type->id()]);
     return $paragraph;
diff --git a/src/Form/ParagraphCloneForm.php b/src/Form/ParagraphCloneForm.php
index 1918463..dd05da6 100644
--- a/src/Form/ParagraphCloneForm.php
+++ b/src/Form/ParagraphCloneForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\paragraphs_table\Form;
 
+use Drupal\paragraphs\ParagraphInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -13,7 +15,7 @@ class ParagraphCloneForm extends ContentEntityForm {
   /**
    * The entity being cloned by this form.
    *
-   * @var \Drupal\paragraphs\ParagraphInterface
+   * @var ParagraphInterface
    */
   protected $originalEntity;
 
@@ -85,7 +87,7 @@ class ParagraphCloneForm extends ContentEntityForm {
     $destination_entity_id = $form_state->getValue(['parent']);
     $destination_field = $form_state->getValue(['field']);
     if ($destination_entity_id && $destination_field) {
-      /** @var \Drupal\Core\Entity\FieldableEntityInterface $destination_entity */
+      /** @var FieldableEntityInterface $destination_entity */
       $destination_entity = $this->entityTypeManager->getStorage($destination_entity_type)->load($destination_entity_id);
       if ($destination_entity) {
         if (!$destination_entity->access('update')) {
@@ -106,7 +108,7 @@ class ParagraphCloneForm extends ContentEntityForm {
     $destination_entity_type = $form_state->getValue(['entity_type']);
     $destination_entity_id = $form_state->getValue(['parent']);
     $destination_field = $form_state->getValue(['field']);
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $destination_entity */
+    /** @var FieldableEntityInterface $destination_entity */
     $destination_entity = $this->entityTypeManager->getStorage($destination_entity_type)->load($destination_entity_id);
     $destination_entity->get($destination_field)->appendItem($this->entity);
 
diff --git a/src/Form/ParagraphDeleteForm.php b/src/Form/ParagraphDeleteForm.php
index b165eae..f5fc044 100644
--- a/src/Form/ParagraphDeleteForm.php
+++ b/src/Form/ParagraphDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\paragraphs_table\Form;
 
+use Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -71,10 +72,10 @@ class ParagraphDeleteForm extends ContentEntityDeleteForm {
   /**
    * Gets the field the paragraph is referenced from.
    *
-   * @param \Drupal\paragraphs\ParagraphInterface $paragraph
+   * @param ParagraphInterface $paragraph
    *   Paragraph data.
    *
-   * @return \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList|null
+   * @return EntityReferenceRevisionsFieldItemList|null
    *   Parent field.
    */
   public function getParentField(ParagraphInterface $paragraph) {
@@ -88,12 +89,12 @@ class ParagraphDeleteForm extends ContentEntityDeleteForm {
   /**
    * Finds the field item the paragraph is referenced from.
    *
-   * @param \Drupal\paragraphs\ParagraphInterface $paragraph
+   * @param ParagraphInterface $paragraph
    *   Paragraph data.
-   * @param \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $field
+   * @param EntityReferenceRevisionsFieldItemList $field
    *   Field item.
    *
-   * @return \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem|null
+   * @return EntityReferenceRevisionsItem|null
    *   Referenced field item.
    */
   protected function findParentFieldItem(ParagraphInterface $paragraph, EntityReferenceRevisionsFieldItemList $field) {
@@ -111,7 +112,7 @@ class ParagraphDeleteForm extends ContentEntityDeleteForm {
   /**
    * Checks if a given entity should be saved as a new revision by default.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check for default new revision.
    *
    * @return bool
@@ -137,7 +138,7 @@ class ParagraphDeleteForm extends ContentEntityDeleteForm {
   /**
    * Saves all of given entity's lineage as new revisions.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity whose lineage to save as new revisions.
    *
    * @return int
@@ -163,7 +164,7 @@ class ParagraphDeleteForm extends ContentEntityDeleteForm {
   /**
    * Saves an entity as a new revision.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to save.
    *
    * @return int
diff --git a/src/Form/ParagraphEditForm.php b/src/Form/ParagraphEditForm.php
index affa1a1..06c033d 100644
--- a/src/Form/ParagraphEditForm.php
+++ b/src/Form/ParagraphEditForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\paragraphs_table\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -60,7 +61,7 @@ class ParagraphEditForm extends ContentEntityForm {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     return $this->entity->save();
diff --git a/src/Plugin/Field/FieldFormatter/ParagraphsTableFormatter.php b/src/Plugin/Field/FieldFormatter/ParagraphsTableFormatter.php
index 27cce2c..f0551f3 100644
--- a/src/Plugin/Field/FieldFormatter/ParagraphsTableFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/ParagraphsTableFormatter.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\paragraphs_table\Plugin\Field\FieldFormatter;
 
+use Drupal\paragraphs\ParagraphInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -53,7 +56,7 @@ class ParagraphsTableFormatter extends EntityReferenceFormatterBase {
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
@@ -64,7 +67,7 @@ class ParagraphsTableFormatter extends EntityReferenceFormatterBase {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -74,7 +77,7 @@ class ParagraphsTableFormatter extends EntityReferenceFormatterBase {
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityDisplayRepositoryInterface $entity_display_repository) {
@@ -331,7 +334,7 @@ class ParagraphsTableFormatter extends EntityReferenceFormatterBase {
     }
     foreach ($handler["target_bundles"] as $targetBundle) {
       $table = $table_header = $fields = [];
-      /** @var \Drupal\paragraphs\ParagraphInterface $paragraphs_entity */
+      /** @var ParagraphInterface $paragraphs_entity */
       $paragraphs_entity = \Drupal::entityTypeManager()->getStorage($targetType)
         ->create(['type' => $targetBundle]);
       $field_definitions = $paragraphs_entity->getFieldDefinitions();
@@ -586,7 +589,7 @@ class ParagraphsTableFormatter extends EntityReferenceFormatterBase {
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
@@ -601,14 +604,14 @@ class ParagraphsTableFormatter extends EntityReferenceFormatterBase {
   /**
    * Get the entities which will make up the table.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field items.
    *
    * @return array
    *   An array of loaded entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntities(FieldItemListInterface $items) {
     $entity_type = $this->fieldDefinition->getFieldStorageDefinition()
diff --git a/src/Plugin/Field/FieldWidget/ParagraphsTableWidget.php b/src/Plugin/Field/FieldWidget/ParagraphsTableWidget.php
index d28da4a..69d3565 100644
--- a/src/Plugin/Field/FieldWidget/ParagraphsTableWidget.php
+++ b/src/Plugin/Field/FieldWidget/ParagraphsTableWidget.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\paragraphs_table\Plugin\Field\FieldWidget;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\paragraphs\ParagraphInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\field\FieldConfigInterface;
@@ -104,8 +107,8 @@ class ParagraphsTableWidget extends ParagraphsWidget {
   /**
    * For multiple elements.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function formMultipleElements(FieldItemListInterface $items, array &$form, FormStateInterface $form_state) {
     $elements = parent::formMultipleElements($items, $form, $form_state);
@@ -135,7 +138,7 @@ class ParagraphsTableWidget extends ParagraphsWidget {
     $components = $formDisplay->getComponents();
     uasort($components, 'Drupal\Component\Utility\SortArray::sortByWeightElement');
 
-    /** @var \Drupal\paragraphs\ParagraphInterface $paragraphs_entity */
+    /** @var ParagraphInterface $paragraphs_entity */
     $paragraphs_entity = \Drupal::entityTypeManager()->getStorage($target_type)
       ->create(['type' => $default_type]);
     $field_definitions = $paragraphs_entity->getFieldDefinitions();
