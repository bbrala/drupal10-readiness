diff --git a/src/Plugin/views/display/StreamingDataExport.php b/src/Plugin/views/display/StreamingDataExport.php
index fb8b4bf..5e77c41 100644
--- a/src/Plugin/views/display/StreamingDataExport.php
+++ b/src/Plugin/views/display/StreamingDataExport.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\views_streaming_data\Plugin\views\display;
 
+use Drupal\Core\Authentication\AuthenticationCollectorInterface;
+use Drupal\views_streaming_data\StreamingViewExecutable;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\RenderContext;
@@ -73,14 +75,14 @@ class StreamingDataExport extends PathPluginBase implements StreamingDisplayInte
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The collector of authentication providers.
    *
-   * @var \Drupal\Core\Authentication\AuthenticationCollectorInterface
+   * @var AuthenticationCollectorInterface
    */
   protected $authenticationCollector;
 
@@ -124,11 +126,11 @@ class StreamingDataExport extends PathPluginBase implements StreamingDisplayInte
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    * @param string[] $authentication_providers
    *   The authentication providers, keyed by ID.
@@ -487,9 +489,9 @@ class StreamingDataExport extends PathPluginBase implements StreamingDisplayInte
    *
    * @param string $view_path
    *   The path of the view.
-   * @param \Symfony\Component\Routing\Route $view_route
+   * @param Route $view_route
    *   The route of the view.
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route itself.
    *
    * @return bool
@@ -506,13 +508,13 @@ class StreamingDataExport extends PathPluginBase implements StreamingDisplayInte
    * {@inheritdoc}
    */
   public static function buildResponse($view_id, $display_id, array $args = []) {
-    /** @var \Drupal\views_streaming_data\StreamingViewExecutable $view */
+    /** @var StreamingViewExecutable $view */
     $view = \Drupal::service('views_streaming_data.views.executable')->get($view_id);
     $view->setDisplay($display_id);
     // Call this init here so that the style can set the mime type and extension
     // on the display.
     $view->initStyle();
-    /** @var \Drupal\views_streaming_data\Plugin\views\display\StreamingDisplayInterface $display */
+    /** @var StreamingDisplayInterface $display */
     $display = $view->getDisplay();
 
     $filename = $display->getExportFileName();
@@ -520,7 +522,7 @@ class StreamingDataExport extends PathPluginBase implements StreamingDisplayInte
     $response = new StreamedResponse(function () use ($view, $display_id, $args) {
       if ($view->access($display_id)) {
         $build = $view->executeDisplay($display_id, $args);
-        /** @var \Drupal\views_streaming_data\Plugin\views\display\StreamingDisplayInterface $display */
+        /** @var StreamingDisplayInterface $display */
         $display = $view->getDisplay();
         $stream = $display->getOutputStream();
         // This is likely not needed, but just in case there is markup.
