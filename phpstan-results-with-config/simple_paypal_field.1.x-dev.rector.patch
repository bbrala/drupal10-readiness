diff --git a/modules/paypal_field_example/src/Entity/Builder/PaymentListBuilder.php b/modules/paypal_field_example/src/Entity/Builder/PaymentListBuilder.php
index e36c664..512dcf8 100644
--- a/modules/paypal_field_example/src/Entity/Builder/PaymentListBuilder.php
+++ b/modules/paypal_field_example/src/Entity/Builder/PaymentListBuilder.php
@@ -17,7 +17,7 @@ class PaymentListBuilder extends EntityListBuilder {
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
diff --git a/modules/paypal_field_example/src/EventSubscriber/PayPalFieldExampleSubscriber.php b/modules/paypal_field_example/src/EventSubscriber/PayPalFieldExampleSubscriber.php
index 79375df..96eefe1 100644
--- a/modules/paypal_field_example/src/EventSubscriber/PayPalFieldExampleSubscriber.php
+++ b/modules/paypal_field_example/src/EventSubscriber/PayPalFieldExampleSubscriber.php
@@ -15,14 +15,14 @@ class PayPalFieldExampleSubscriber implements EventSubscriberInterface {
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $manager;
 
   /**
    * Constructs event subscriber.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $manager
+   * @param EntityTypeManagerInterface $manager
    *   Entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $manager) {
@@ -41,7 +41,7 @@ class PayPalFieldExampleSubscriber implements EventSubscriberInterface {
   /**
    * Creates an payment entity.
    *
-   * @param \Drupal\simple_paypal_field\Event\PaypalSmartButtonsEvent $event
+   * @param PaypalSmartButtonsEvent $event
    *   The event.
    */
   public function createPaymentEntity(PaypalSmartButtonsEvent $event) {
diff --git a/simple_paypal_field.module b/simple_paypal_field.module
index 7d1ccd1..d3a00e0 100644
--- a/simple_paypal_field.module
+++ b/simple_paypal_field.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\simple_paypal_field\Plugin\Field\FieldType\SimplePayPalField;
 /**
  * @file
  * Module hooks and functions.
@@ -73,7 +74,7 @@ function template_preprocess_paypal_smart_buttons(&$variables) {
  * Implements template_preprocess_HOOK().
  */
 function template_preprocess_paypal_smart_buttons_formatter(&$variables) {
-  /** @var \Drupal\simple_paypal_field\Plugin\Field\FieldType\SimplePayPalField $field */
+  /** @var SimplePayPalField $field */
   $field = $variables['field'];
   $definition = $field->getFieldDefinition();
   $id = implode(
diff --git a/src/Controller/PayPalSmartButtonsController.php b/src/Controller/PayPalSmartButtonsController.php
index ed0a3e8..941e522 100644
--- a/src/Controller/PayPalSmartButtonsController.php
+++ b/src/Controller/PayPalSmartButtonsController.php
@@ -19,7 +19,7 @@ class PayPalSmartButtonsController extends ControllerBase {
   /**
    * Drupal event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -33,7 +33,7 @@ class PayPalSmartButtonsController extends ControllerBase {
   /**
    * PayPalSmartButtonsController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   Drupal event dispatcher.
    */
   public function __construct(EventDispatcherInterface $eventDispatcher) {
@@ -45,10 +45,10 @@ class PayPalSmartButtonsController extends ControllerBase {
    *
    * Dispatches the 'approve' event to Drupal.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Response for buttons.
    */
   public function approve(Request $request) {
@@ -72,8 +72,8 @@ class PayPalSmartButtonsController extends ControllerBase {
 
       $event = new PaypalSmartButtonsEvent($data['details'], $element);
       $this->eventDispatcher->dispatch(
-        PayPalSmartButtonsEvents::APPROVE_ORDER,
-        $event
+        $event,
+        PayPalSmartButtonsEvents::APPROVE_ORDER
       );
       return new JsonResponse('ok');
     }
diff --git a/src/Event/PaypalSmartButtonsEvent.php b/src/Event/PaypalSmartButtonsEvent.php
index ed5c2e9..75831f6 100644
--- a/src/Event/PaypalSmartButtonsEvent.php
+++ b/src/Event/PaypalSmartButtonsEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\simple_paypal_field\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * PayPal smart buttons event.
diff --git a/src/EventSubscriber/SimplePayPalFieldEventSubscriber.php b/src/EventSubscriber/SimplePayPalFieldEventSubscriber.php
index 83b84d4..98cd996 100644
--- a/src/EventSubscriber/SimplePayPalFieldEventSubscriber.php
+++ b/src/EventSubscriber/SimplePayPalFieldEventSubscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\simple_paypal_field\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
@@ -21,14 +24,14 @@ class SimplePayPalFieldEventSubscriber implements EventSubscriberInterface {
   /**
    * Drupal Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $log;
 
@@ -51,7 +54,7 @@ class SimplePayPalFieldEventSubscriber implements EventSubscriberInterface {
   /**
    * Update PayPal field value with data from PayPal.
    *
-   * @param \Drupal\simple_paypal_field\Event\PaypalSmartButtonsEvent $event
+   * @param PaypalSmartButtonsEvent $event
    *   Event object.
    */
   public function updateField(PaypalSmartButtonsEvent $event) {
@@ -77,9 +80,9 @@ class SimplePayPalFieldEventSubscriber implements EventSubscriberInterface {
    * @return array
    *   Entity and the field as list.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws MissingDataException
    */
   protected function collectInstances(array $fieldInfo): array {
     $entity = $this->entityTypeManager
diff --git a/src/Plugin/Field/FieldType/SimplePayPalField.php b/src/Plugin/Field/FieldType/SimplePayPalField.php
index eb99fc5..cd1d2a7 100644
--- a/src/Plugin/Field/FieldType/SimplePayPalField.php
+++ b/src/Plugin/Field/FieldType/SimplePayPalField.php
@@ -90,7 +90,7 @@ class SimplePayPalField extends FieldItemBase implements OptionsProviderInterfac
    *
    * @param array $element
    *   Element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   FormState instance.
    * @param array $form
    *   Form array.
diff --git a/src/Plugin/Field/FieldWidget/PayPalSmartButtonsWidget.php b/src/Plugin/Field/FieldWidget/PayPalSmartButtonsWidget.php
index b7d9754..f585ad6 100644
--- a/src/Plugin/Field/FieldWidget/PayPalSmartButtonsWidget.php
+++ b/src/Plugin/Field/FieldWidget/PayPalSmartButtonsWidget.php
@@ -28,7 +28,7 @@ class PayPalSmartButtonsWidget extends WidgetBase implements ContainerFactoryPlu
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -183,7 +183,7 @@ class PayPalSmartButtonsWidget extends WidgetBase implements ContainerFactoryPlu
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/tests/src/Functional/SimplePayPalFieldTest.php b/tests/src/Functional/SimplePayPalFieldTest.php
index 74c0531..d504db9 100644
--- a/tests/src/Functional/SimplePayPalFieldTest.php
+++ b/tests/src/Functional/SimplePayPalFieldTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\simple_paypal_field\Functional;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -23,7 +26,7 @@ class SimplePayPalFieldTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->webUser = $this->drupalCreateUser(
       [
@@ -49,7 +52,7 @@ class SimplePayPalFieldTest extends BrowserTestBase {
    * @return string
    *   Field name.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createField(string $field_type, string $widget_type, string $formatter) {
     // Create a field.
@@ -82,11 +85,11 @@ class SimplePayPalFieldTest extends BrowserTestBase {
     )
       ->save();
     // Widgets.
-    entity_get_form_display('entity_test', 'entity_test', 'default')
+    \Drupal::service('entity_display.repository')->getFormDisplay('entity_test', 'entity_test', 'default')
       ->setComponent($field_name, ['type' => $widget_type])
       ->save();
 
-    entity_get_display('entity_test', 'entity_test', 'full')
+    \Drupal::service('entity_display.repository')->getViewDisplay('entity_test', 'entity_test', 'full')
       ->setComponent($field_name, ['type' => $formatter])
       ->save();
     return $field_name;
@@ -105,7 +108,7 @@ class SimplePayPalFieldTest extends BrowserTestBase {
     $this->drupalGet('entity_test/add');
     $this->assertSession()->elementExists('css', '.paypal-button');
 
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
     $this->assertSession()->pageTextContains(
@@ -114,22 +117,18 @@ class SimplePayPalFieldTest extends BrowserTestBase {
 
     // Display the entity.
     $entity = EntityTest::load($id);
-    $display = entity_get_display(
-      $entity->getEntityTypeId(),
-      $entity->bundle(),
-      'full'
-    );
+    $display = \Drupal::service('entity_display.repository')->getViewDisplay($entity->getEntityTypeId(), $entity->bundle(), 'full');
     $content = $display->build($entity);
     $rendered_entity = $this->container->get('renderer')->renderRoot($content);
-    $this->assertContains('paypal-button', (string) $rendered_entity);
+    $this->assertStringContainsString('paypal-button', (string) $rendered_entity);
   }
 
   /**
    * Checks that the field can be disabled.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function testFieldCanBeDisabled() {
     $field_name = $this->createField(
@@ -141,7 +140,7 @@ class SimplePayPalFieldTest extends BrowserTestBase {
     $field_item = "{$field_name}[value]";
     $this->drupalGet('entity_test/add');
     $this->assertSession()->checkboxChecked($field_item);
-    $this->drupalPostForm(NULL, [$field_item => 0], t('Save'));
+    $this->submitForm([$field_item => 0], t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
     $this->assertSession()->pageTextContains(
