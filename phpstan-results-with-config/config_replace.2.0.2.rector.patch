diff --git a/config_replace.info.yml b/config_replace.info.yml
index 4ecf3a7..efc24b1 100644
--- a/config_replace.info.yml
+++ b/config_replace.info.yml
@@ -1,7 +1,7 @@
 name: Configuration Replace
 type: module
 description: Replaces existing configuration on module installation via using a "rewrite" folder in the config directory.
-core_version_requirement: '^8.8 || ^9'
+core_version_requirement: ^8.8 || ^9 || ^10
 package: Configuration
 
 # Information added by Drupal.org packaging script on 2020-09-24
diff --git a/src/ConfigReplacer.php b/src/ConfigReplacer.php
index 07ff626..6e06bb4 100644
--- a/src/ConfigReplacer.php
+++ b/src/ConfigReplacer.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\config_replace;
 
+use Drupal\language\Config\LanguageConfigFactoryOverrideInterface;
+use Drupal\Core\Extension\Extension;
+use Drupal\language\Config\LanguageConfigOverride;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -18,45 +21,45 @@ class ConfigReplacer implements ConfigReplacerInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The language config factory override service.
    *
-   * @var \Drupal\language\Config\LanguageConfigFactoryOverrideInterface|NULL
+   * @var LanguageConfigFactoryOverrideInterface|NULL
    */
   protected $languageConfigFactoryOverride;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * A logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
-  /** @var \Drupal\Core\File\FileSystemInterface */
+  /** @var FileSystemInterface */
   protected $fileSystem;
 
   /**
    * Constructs a new ConfigReplacer.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   A logger channel.
-   * @param \Drupal\language\Config\LanguageConfigFactoryOverrideInterface|NULL $language_config_factory_override
+   * @param LanguageConfigFactoryOverrideInterface|NULL $language_config_factory_override
    *   (Optional) The language config factory override service.
    */
   public function __construct(FileSystemInterface $fileSystem, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, LoggerChannelInterface $logger, $language_config_factory_override) {
@@ -94,7 +97,7 @@ class ConfigReplacer implements ConfigReplacerInterface {
   /**
    * Finds files in a given directory and uses them to rewrite active config.
    *
-   * @param \Drupal\Core\Extension\Extension $extension
+   * @param Extension $extension
    *   The extension that contains the config rewrites.
    * @param string $rewrite_dir
    *   The directory that contains config rewrites.
@@ -111,7 +114,7 @@ class ConfigReplacer implements ConfigReplacerInterface {
         // Parse the rewrites and retrieve the original config.
         $rewrite = Yaml::parse(file_get_contents($rewrite_dir . DIRECTORY_SEPARATOR . $file->name . '.yml'));
         if ($langcode) {
-          /** @var \Drupal\language\Config\LanguageConfigOverride $original_config */
+          /** @var LanguageConfigOverride $original_config */
           $config = $this->languageConfigFactoryOverride->getOverride($langcode, $file->name);
           $original_data = $config->get();
 
@@ -159,7 +162,7 @@ class ConfigReplacer implements ConfigReplacerInterface {
    * @param string $extensionName
    *
    * @return array
-   * @throws \Drupal\config_replace\Exception\NonexistentInitialConfigException
+   * @throws NonexistentInitialConfigException
    */
   public function rewriteConfig($original_config, $rewrite, $configName, $extensionName) {
     if (empty($original_config)) {
diff --git a/tests/src/Kernel/ConfigReplacerTest.php b/tests/src/Kernel/ConfigReplacerTest.php
index 47ab201..4d3b5dc 100644
--- a/tests/src/Kernel/ConfigReplacerTest.php
+++ b/tests/src/Kernel/ConfigReplacerTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\config_replace\Kernel;
 
+use Drupal\Core\Config\CachedStorage;
+use Drupal\config_replace\ConfigReplacerInterface;
+use Drupal\language\Config\LanguageConfigFactoryOverrideInterface;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -20,28 +23,28 @@ class ConfigReplacerTest extends KernelTestBase {
   /**
    * The active configuration storage.
    *
-   * @var \Drupal\Core\Config\CachedStorage
+   * @var CachedStorage
    */
   protected $activeConfigStorage;
 
   /**
    * The configuration rewriter.
    *
-   * @var \Drupal\config_replace\ConfigReplacerInterface
+   * @var ConfigReplacerInterface
    */
   protected $configRewriter;
 
   /**
    * The language config factory override service.
    *
-   * @var \Drupal\language\Config\LanguageConfigFactoryOverrideInterface
+   * @var LanguageConfigFactoryOverrideInterface
    */
   protected $languageConfigFactoryOverride;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->configRewriter = $this->container->get('config_replace.config_replacer');
@@ -67,8 +70,8 @@ class ConfigReplacerTest extends KernelTestBase {
 
     // Verify that the original configuration data exists.
     $data = $this->activeConfigStorage->read('user.role.test1');
-    $this->assertIdentical($data['label'], $expected_original_data['label']);
-    $this->assertIdentical($data['permissions'], $expected_original_data['permissions']);
+    $this->assertSame($data['label'], $expected_original_data['label']);
+    $this->assertSame($data['permissions'], $expected_original_data['permissions']);
 
     // Rewrite configuration.
     $this->configRewriter->rewriteModuleConfig('config_replace_test_rewrite');
diff --git a/tests/src/Kernel/NonexistentInitialConfigTest.php b/tests/src/Kernel/NonexistentInitialConfigTest.php
index a0e837a..8a065ce 100644
--- a/tests/src/Kernel/NonexistentInitialConfigTest.php
+++ b/tests/src/Kernel/NonexistentInitialConfigTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\config_replace\Kernel;
 
+use Drupal\Core\Config\CachedStorage;
+use Drupal\config_replace\ConfigReplacerInterface;
+use Drupal\language\Config\LanguageConfigFactoryOverrideInterface;
+use Drupal\config_replace\Exception\NonexistentInitialConfigException;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -20,28 +24,28 @@ class NonexistentInitialConfigTest extends KernelTestBase {
   /**
    * The active configuration storage.
    *
-   * @var \Drupal\Core\Config\CachedStorage
+   * @var CachedStorage
    */
   protected $activeConfigStorage;
 
   /**
    * The configuration rewriter.
    *
-   * @var \Drupal\config_replace\ConfigReplacerInterface
+   * @var ConfigReplacerInterface
    */
   protected $configRewriter;
 
   /**
    * The language config factory override service.
    *
-   * @var \Drupal\language\Config\LanguageConfigFactoryOverrideInterface
+   * @var LanguageConfigFactoryOverrideInterface
    */
   protected $languageConfigFactoryOverride;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->configRewriter = $this->container->get('config_replace.config_replacer');
@@ -54,9 +58,9 @@ class NonexistentInitialConfigTest extends KernelTestBase {
   /**
    * @covers ::rewriteModuleConfig
    * @covers ::rewriteConfig
-   * @expectedException \Drupal\config_replace\Exception\NonexistentInitialConfigException
    */
   function testConfigRewrite() {
+    $this->expectException(NonexistentInitialConfigException::class);
     $this->configRewriter->rewriteModuleConfig('config_replace_nonexisting');
   }
 
