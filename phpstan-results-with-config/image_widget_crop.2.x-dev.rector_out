modules/contrib/image_widget_crop/image_widget_crop.install
modules/contrib/image_widget_crop/image_widget_crop.module
modules/contrib/image_widget_crop/modules/image_widget_crop_examples/image_widget_crop_examples.install
modules/contrib/image_widget_crop/modules/image_widget_crop_examples/src/Controller/FrontPage.php
modules/contrib/image_widget_crop/modules/image_widget_crop_examples/src/Form/ImageWidgetCropExamplesForm.php
modules/contrib/image_widget_crop/modules/image_widget_crop_examples/tests/src/Functional/ImageWidgetCropExamplesTest.php
modules/contrib/image_widget_crop/src/Element/ImageCrop.php
modules/contrib/image_widget_crop/src/Form/CropWidgetForm.php
modules/contrib/image_widget_crop/src/ImageWidgetCropInterface.php
modules/contrib/image_widget_crop/src/ImageWidgetCropManager.php
modules/contrib/image_widget_crop/src/Plugin/Field/FieldWidget/ImageCropWidget.php
modules/contrib/image_widget_crop/tests/src/FunctionalJavascript/ImageWidgetCropTest.php

10 files with changes
=====================

1) modules/contrib/image_widget_crop/tests/src/FunctionalJavascript/ImageWidgetCropTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\image_widget_crop\FunctionalJavascript;

+use Drupal\user\Entity\User;
+use Drupal\file\FileUsage\FileUsageInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\TestFileCreationTrait;
@@ @@
   /**
    * User with permissions to create content.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * Prepares environment for the tests.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['name' => 'Crop test', 'type' => 'crop_test']);
@@ @@
       'title[0][value]' => $this->randomMachineName(),
     ];
     $this->getSession()->getPage()->attachFileToField('files[field_image_crop_test_0]', $this->container->get('file_system')->realpath('public://image-test.jpg'));
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     $node = Node::create([
       'title' => '2nd node using it',
@@ @@
     ]);
     $node->save();

-    /** @var \Drupal\file\FileUsage\FileUsageInterface $usage */
+    /** @var FileUsageInterface $usage */
     $usage = \Drupal::service('file.usage');
     $usage->add(\Drupal::service('entity_type.manager')->getStorage('file')->load(1), 'image_widget_crop', 'node', $node->id());

@@ @@
       'title[0][value]' => $title,
       'field_image_crop_test[0][alt]' => $this->randomMachineName(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->pageTextContains('Crop test ' . $title . ' has been created.');
     $url = $this->getUrl();
     $nid = substr($url, -1, strrpos($url, '/'));
@@ @@
     $this->getSession()->getPage()->attachFileToField('files[field_image_crop_test_0]', $this->container->get('file_system')->realpath('public://image-test.jpg'));

     // Verify that the 'Preview' button works properly.
-    $this->drupalPostForm(NULL, $edit, 'Preview');
+    $this->submitForm($edit, 'Preview');
     $assert_session->linkExists('Back to content editing');
     $this->clickLink('Back to content editing');

@@ @@
     ]);
     $field_config->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.' . $type_name . '.default');
     $form_display->setComponent($name, [
       'type' => $widget_name,
@@ @@
       'settings' => $widget_settings,
     ])->save();

-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
+    /** @var EntityViewDisplayInterface $view_display */
     $view_display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.' . $type_name . '.default');
     $view_display->setComponent($name)
       ->save();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/image_widget_crop/src/Plugin/Field/FieldWidget/ImageCropWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\image_widget_crop\Plugin\Field\FieldWidget;

+use Drupal\image\ImageStyleStorageInterface;
+use Drupal\Core\Image\Image;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Instance of ImageWidgetCropManager object.
    *
-   * @var \Drupal\image_widget_crop\ImageWidgetCropInterface
+   * @var ImageWidgetCropInterface
    */
   protected $imageWidgetCropManager;

@@ @@
   /**
    * The image style storage.
    *
-   * @var \Drupal\image\ImageStyleStorageInterface
+   * @var ImageStyleStorageInterface
    */
   protected $imageStyleStorage;

@@ @@
   /**
    * The crop type storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $cropTypeStorage;

@@ @@
    * directly. See \Drupal\Core\Form\ConfigFormBase::config() for an example of
    * this.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
       $variables['height'] = $element['#value']['height'];
     }
     else {
-      /** @var \Drupal\Core\Image\Image $image */
+      /** @var Image $image */
       $image = \Drupal::service('image.factory')->get($variables['uri']);
       if ($image->isValid()) {
         $variables['width'] = $image->getWidth();
@@ @@
    * @param array $element
    *   An associative array containing the properties and children of the
    *   form actions container.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The Ajax response.
    */
   public static function updateCropTypeRequiredOptions(array $form, FormStateInterface $form_state) {
@@ @@
       $crop_type_required_form = self::getImageCropWidgetElement($form_state, 'crop_types_required');
       $crop_type_required_form['#options'] = array_intersect_key($triggering_element['#options'], $triggering_element['#value']);

-      /** @var \Drupal\Core\Render\RendererInterface $renderer */
+      /** @var RendererInterface $renderer */
       $renderer = \Drupal::service('renderer');
       $output = $renderer->renderRoot($crop_type_required_form);

@@ @@
   /**
    * Return a specific of ImageCropWidget form element.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $key
    *   Name of element needed.
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   A short summary of the widget settings.
    */
   public function settingsSummary() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/image_widget_crop/src/ImageWidgetCropManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\image_widget_crop;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\crop\CropInterface;
+use Drupal\Core\Image\Image;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The crop storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $cropStorage;

@@ @@
   /**
    * The crop storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $cropTypeStorage;

@@ @@
   /**
    * The image style storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $imageStyleStorage;

@@ @@
   /**
    * The File storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fileStorage;

@@ @@
   /**
    * The ImageWidgetCrop general settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $imageWidgetCropSettings;

@@ @@
   /**
    * Constructs a ImageWidgetCropManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
         return;
       }

-      /** @var \Drupal\crop\Entity\Crop $crop */
+      /** @var Crop $crop */
       foreach ($crops as $crop) {
         if (!$this->cropHasChanged($crop_properties, array_merge($crop->position(), $crop->size()))) {
           return;
@@ @@
       'height' => $crop_properties['height'],
     ];

-    /** @var \Drupal\crop\CropInterface $crop */
+    /** @var CropInterface $crop */
     $crop = $this->cropStorage->create($values);
     $crop->save();

@@ @@
   public function getCropOriginalDimension(array $field_values, array $properties) {
     $crop_coordinates = [];

-    /** @var \Drupal\Core\Image\Image $image */
+    /** @var Image $image */
     $image = \Drupal::service('image.factory')->get($field_values['file-uri']);
     if (!$image->isValid()) {
       $this->messenger()->addError($this->t('The file "@file" is not valid, your crop is not applied.', [
@@ @@
     $styles = [];
     $image_styles = $this->imageStyleStorage->loadMultiple();

-    /** @var \Drupal\image\Entity\ImageStyle $image_style */
+    /** @var ImageStyle $image_style */
     foreach ($image_styles as $image_style) {
       $image_style_data = $this->getEffectData($image_style, 'crop_type');
       if (!empty($image_style_data) && ($image_style_data == $crop_type_name)) {
@@ @@
    * {@inheritdoc}
    */
   public function imageStylesOperations(array $image_styles, $file_uri, $create_derivative = FALSE) {
-    /** @var \Drupal\image\Entity\ImageStyle $image_style */
+    /** @var ImageStyle $image_style */
     foreach ($image_styles as $image_style) {
       if ($create_derivative) {
         // Generate the image derivative uri.
@@ @@
    */
   public function loadImageStyleByCrop(array $image_styles, CropType $crop_type, $file_uri) {
     $crops = [];
-    /** @var \Drupal\image\Entity\ImageStyle $image_style */
+    /** @var ImageStyle $image_style */
     foreach ($image_styles as $image_style) {
-      /** @var \Drupal\crop\Entity\Crop $crop */
+      /** @var Crop $crop */
       $crop = Crop::findCrop($file_uri, $crop_type->id());
       if (!empty($crop)) {
         $crops[$image_style->id()] = $crop;
@@ @@
                 // associate with her CropType.
                 foreach ($crop_element['crop_wrapper'] as $crop_type_name => $properties) {
                   $properties = $properties['crop_container']['values'];
-                  /** @var \Drupal\crop\Entity\CropType $crop_type */
+                  /** @var CropType $crop_type */
                   $crop_type = $this->cropTypeStorage->load($crop_type_name);

                   // If the crop type needed is disabled or delete.
@@ @@
         // Parse all values and get properties associate with the crop type.
         foreach ($form_state_values['image_crop']['crop_wrapper'] as $crop_type_name => $properties) {
           $properties = $properties['crop_container']['values'];
-          /** @var \Drupal\crop\Entity\CropType $crop_type */
+          /** @var CropType $crop_type */
           $crop_type = $this->cropTypeStorage->load($crop_type_name);

           // If the crop type needed is disabled or delete.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/image_widget_crop/src/ImageWidgetCropInterface.php:20

    ---------- begin diff ----------
@@ @@
    *   and the size of thumbnail image.
    * @param array|mixed $field_value
    *   An array of values for the contained properties of image_crop widget.
-   * @param \Drupal\crop\Entity\CropType $crop_type
+   * @param CropType $crop_type
    *   The entity CropType.
    */
   public function applyCrop(array $properties, $field_value, CropType $crop_type);
@@ @@
    *   and the size of thumbnail image.
    * @param array|mixed $field_value
    *   An array of values contain properties of image_crop widget.
-   * @param \Drupal\crop\Entity\CropType $crop_type
+   * @param CropType $crop_type
    *   The entity CropType.
    */
   public function updateCrop(array $properties, $field_value, CropType $crop_type);
@@ @@
    *   The properties of the crop applied to the original image (dimensions).
    * @param array|mixed $field_value
    *   An array of values for the contained properties of image_crop widget.
-   * @param \Drupal\crop\Entity\CropType $crop_type
+   * @param CropType $crop_type
    *   The entity CropType.
    * @param bool $notify
    *   Show notification after actions (default TRUE).
@@ @@
    *
    * @param string $file_uri
    *   Uri of image uploaded by user.
-   * @param \Drupal\crop\Entity\CropType $crop_type
+   * @param CropType $crop_type
    *   The CropType object.
    * @param int $file_id
    *   Id of image uploaded by user.
@@ @@
   /**
    * Get one effect instead of ImageStyle.
    *
-   * @param \Drupal\image\Entity\ImageStyle $image_style
+   * @param ImageStyle $image_style
    *   The ImageStyle to get data.
    * @param string $data_type
    *   The type of data needed in current ImageStyle.
@@ @@
   /**
    * Update existent crop entity properties.
    *
-   * @param \Drupal\crop\Entity\Crop $crop
+   * @param Crop $crop
    *   The crop object loaded.
    * @param array $crop_properties
    *   The machine name of ImageStyle.
@@ @@
    *
    * @param array $image_styles
    *   All ImageStyle for this current CROP.
-   * @param \Drupal\crop\Entity\CropType $crop_type
+   * @param CropType $crop_type
    *   The entity CropType.
    * @param string $file_uri
    *   Uri of uploaded file.
@@ @@
   /**
    * Get All sizes properties of the crops for an file.
    *
-   * @param \Drupal\crop\Entity\Crop $crop
+   * @param Crop $crop
    *   All crops attached to this file based on URI.
    *
    * @return arrayarray
@@ @@
   /**
    * Fetch all fields FileField and use "image_crop" element on an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    */
   public function buildCropToEntity(EntityInterface $entity);
@@ @@
   /**
    * Fetch all form elements using image_crop element.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function buildCropToForm(FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/image_widget_crop/src/Form/CropWidgetForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\image_widget_crop\Form;

+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * Instance of ImageWidgetCropManager object.
    *
-   * @var \Drupal\image_widget_crop\ImageWidgetCropInterface
+   * @var ImageWidgetCropInterface
    */
   protected $imageWidgetCropManager;

@@ @@
   /**
    * The module handler to use to load modules.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The HTTP client to fetch the feed data with.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * Constructs a CropWidgetForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\image_widget_crop\ImageWidgetCropInterface $iwc_manager
+   * @param ImageWidgetCropInterface $iwc_manager
    *   The ImageWidgetCrop manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to use to load modules.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The Guzzle HTTP client.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ImageWidgetCropInterface $iwc_manager, ModuleHandlerInterface $module_handler, ClientInterface $http_client) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
@@ @@
   /**
    * Set the default state of cropper libraries files url.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function setDefaultLibrariesUrls(FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/image_widget_crop/src/Element/ImageCrop.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\image_widget_crop\Element;

+use Drupal\file\Entity\File;
+use Drupal\Core\Image\Image;
+use Drupal\image_widget_crop\ImageWidgetCropInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorage;
+use Drupal\crop\CropInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Render\Element\FormElement;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * @param array $element
    *   An associative array containing the properties and children of the
    *   form actions container.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
    *   The processed element.
    */
   public static function processCrop(array &$element, FormStateInterface $form_state, array &$complete_form) {
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = $element['#file'];
     if (!empty($file) && preg_match('/image/', $file->getMimeType())) {
-      /** @var \Drupal\Core\Image\Image $image */
+      /** @var Image $image */
       $image = \Drupal::service('image.factory')->get($file->getFileUri());
       if (!$image->isValid()) {
         $element['message'] = [
@@ @@
       $crop_type_list = $element['#crop_type_list'];
       // Display all crop types if none is selected.
       if (empty($crop_type_list)) {
-        /** @var \Drupal\image_widget_crop\ImageWidgetCropInterface $iwc_manager */
+        /** @var ImageWidgetCropInterface $iwc_manager */
         $iwc_manager = \Drupal::service('image_widget_crop.manager');
         $available_crop_types = $iwc_manager->getAvailableCropType(CropType::getCropTypeNames());
         $crop_type_list = array_keys($available_crop_types);
@@ @@
         '#parents' => [$list_id],
       ];

-      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $crop_type_storage */
+      /** @var ConfigEntityStorage $crop_type_storage */
       $crop_type_storage = \Drupal::entityTypeManager()
         ->getStorage('crop_type');

-      /** @var \Drupal\crop\Entity\CropType[] $crop_types */
+      /** @var CropType[] $crop_types */
       if ($crop_types = $crop_type_storage->loadMultiple($crop_type_list)) {
         foreach ($crop_types as $type => $crop_type) {
           $ratio = $crop_type->getAspectRatio() ?: 'NaN';
@@ @@
             $properties = $form_state_properties;
           }

-          /** @var \Drupal\crop\CropInterface $crop */
+          /** @var CropInterface $crop */
           $crop = Crop::findCrop($file->getFileUri(), $type);
           if ($crop) {
             $edit = TRUE;
-            /** @var \Drupal\image_widget_crop\ImageWidgetCropInterface $iwc_manager */
+            /** @var ImageWidgetCropInterface $iwc_manager */
             $iwc_manager = \Drupal::service('image_widget_crop.manager');
             $original_properties = $iwc_manager->getCropProperties($crop);

@@ @@
   /**
    * Counts how many times a file has been used.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to check usages.
    *
    * @return int
@@ @@
    *
    * @param array $element
    *   All form elements without crop properties.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see ImageCrop::getCropFormElement()
    */
   public static function validateHardLimit(array $element, FormStateInterface $form_state) {
-    /** @var \Drupal\crop\Entity\CropType $crop_type */
+    /** @var CropType $crop_type */
     $crop_type = \Drupal::entityTypeManager()
       ->getStorage('crop_type')
       ->load($element['#crop_type']);
@@ @@
    *
    * @param array $element
    *   All form elements without crop properties.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see ImageCrop::getCropFormElement()
@@ @@
       $operation = ($action_button instanceof TranslatableMarkup) ? $action_button->getUntranslatedString() : $action_button;

       if (self::fileTriggered($form_state) && self::requiredApplicable($crop_applied, $operation)) {
-        /** @var \Drupal\crop\Entity\CropType $crop_type */
+        /** @var CropType $crop_type */
         $crop_type = \Drupal::entityTypeManager()
           ->getStorage('crop_type')
           ->load($crop_type_id);
@@ @@
   /**
    * Unsure we have triggered 'file_managed_file_submit' button.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
@@ @@
    *   form actions container.
    * @param string $type
    *   Id of current crop type.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/image_widget_crop/modules/image_widget_crop_examples/tests/src/Functional/ImageWidgetCropExamplesTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Theme needs to be set before enabling image_widget_crop_examples because
     // of dependency.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/image_widget_crop/modules/image_widget_crop_examples/src/Form/ImageWidgetCropExamplesForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * File usage interface to configure a file object.
    *
-   * @var Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected $fileUsage;

@@ @@
   /**
    * Created file entity.
    *
-   * @var \Drupal\file\Entity\File|null
+   * @var File|null
    */
   protected $file = NULL;

@@ @@
   /**
    * Instance of API ImageWidgetCropManager.
    *
-   * @var \Drupal\image_widget_crop\ImageWidgetCropInterface
+   * @var ImageWidgetCropInterface
    */
   protected $imageWidgetCropManager;

@@ @@
   /**
    * Constructs a CropWidgetForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\file\FileUsage\FileUsageInterface $file_usage
+   * @param FileUsageInterface $file_usage
    *   File usage service.
-   * @param \Drupal\image_widget_crop\ImageWidgetCropInterface $iwc_manager
+   * @param ImageWidgetCropInterface $iwc_manager
    *   The ImageWidgetCrop manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, FileUsageInterface $file_usage, ImageWidgetCropInterface $iwc_manager) {
@@ @@
    * This method is mandatory to works with "buildCropToForm",
    * for Uniqueness with File entity compatibility.
    *
-   * @return \Drupal\file\Entity\File|null
+   * @return File|null
    *   File saved by file_manager element.
    *
    * @see \Drupal\image_widget_crop\ImageWidgetCropManager::buildCropToForm
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/image_widget_crop/modules/image_widget_crop_examples/src/Controller/FrontPage.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a Form mode manager FrontPage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/image_widget_crop/image_widget_crop.module:192

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   The complete form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function image_widget_crop_form_submit(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

