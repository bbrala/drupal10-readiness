modules/contrib/cmis/cmis.install
modules/contrib/cmis/cmis.module
modules/contrib/cmis/modules/cmis_alfresco_auth_user/cmis_alfresco_auth_user.module
modules/contrib/cmis/modules/cmis_alfresco_auth_user/src/Form/CmisAlfrescoAuthUserSettingsForm.php
modules/contrib/cmis/src/CmisBrowser.php
modules/contrib/cmis/src/CmisConnectionApi.php
modules/contrib/cmis/src/CmisConnectionEntityListBuilder.php
modules/contrib/cmis/src/CmisElement.php
modules/contrib/cmis/src/CmisPermissions.php
modules/contrib/cmis/src/Controller/CmisRepositoryController.php
modules/contrib/cmis/src/Entity/CmisConnectionEntity.php
modules/contrib/cmis/src/Entity/CmisConnectionEntityInterface.php
modules/contrib/cmis/src/Form/CmisBrowserDocumentUploadForm.php
modules/contrib/cmis/src/Form/CmisConnectionEntityDeleteForm.php
modules/contrib/cmis/src/Form/CmisConnectionEntityForm.php
modules/contrib/cmis/src/Form/CmisCreateFolderForm.php
modules/contrib/cmis/src/Form/CmisQueryForm.php
modules/contrib/cmis/src/Plugin/Field/FieldFormatter/CmisFieldBrowser.php
modules/contrib/cmis/src/Plugin/Field/FieldFormatter/CmisFieldLink.php
modules/contrib/cmis/src/Plugin/Field/FieldType/CmisField.php
modules/contrib/cmis/src/Plugin/Field/FieldWidget/CmisFieldWidget.php
modules/contrib/cmis/src/Service/CmisFieldBrowserBuilder.php

11 files with changes
=====================

1) modules/contrib/cmis/src/Plugin/Field/FieldFormatter/CmisFieldLink.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cmis/src/Form/CmisQueryForm.php:187

    ---------- begin diff ----------
@@ @@
           '#elements' => $rows,
         ];

-        $content = render($table);
+        $content = \Drupal::service('renderer')->render($table);
       }
     }

@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cmis/src/Form/CmisCreateFolderForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cmis\Form;

+use Drupal\cmis\CmisConnectionApi;
 use Dkd\PhpCmis\PropertyIds;
 use Drupal\cmis\Controller\CmisRepositoryController;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * CMIS Connection API.
    *
-   * @var \Drupal\cmis\CmisConnectionApi
+   * @var CmisConnectionApi
    */
   protected $cmisConnectionApi;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cmis/src/Form/CmisBrowserDocumentUploadForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cmis\Form;

+use Drupal\Core\File\FileSystemInterface;
+use Drupal\cmis\CmisConnectionApi;
 use Dkd\PhpCmis\PropertyIds;
 use Drupal\cmis\Controller\CmisRepositoryController;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * CMIS Connection API.
    *
-   * @var \Drupal\cmis\CmisConnectionApi
+   * @var CmisConnectionApi
    */
   protected $cmisConnectionApi;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/cmis/src/Controller/CmisRepositoryController.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cmis\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\cmis\CmisConnectionApi;
@@ @@
   /**
    * Call the CmisConnectionApi class.
    *
-   * @var \Drupal\cmis\CmisConnectionApi
+   * @var CmisConnectionApi
    */
   private $connection;

@@ @@
     $link_options = ['query' => $parameters];
     $url->setOptions($link_options);
     $path = Link::fromTextAndUrl($this->t('Delete'), $url)->toRenderable();
-    $link = render($path);
+    $link = \Drupal::service('renderer')->render($path);

     return [
       '#theme' => 'cmis_object_delete_verify',
@@ @@
   /**
    * Check permission.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Get Account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cmis/src/CmisPermissions.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a CmisPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/cmis/src/CmisElement.php:81

    ---------- begin diff ----------
@@ @@
    *   Entity label.
    * @param bool $popup
    *   Get true if is a popup.
-   * @param \Dkd\PhpCmis\DataObjects\AbstractFileableCmisObject $parent
+   * @param AbstractFileableCmisObject $parent
    *   Get AbstractFileableCmisObject class.
    * @param string $query
    *   CMIS Query.
@@ @@
    *
    * @param string $type
    *   Controller type.
-   * @param \Dkd\PhpCmis\DataObjects\AbstractFileableCmisObject $element
+   * @param AbstractFileableCmisObject $element
    *   Get AbstractFileableCmisObject class.
    */
   public function setElement($type, AbstractFileableCmisObject $element) {
@@ @@
           '#element' => $name,
             // '#cache' => $this->cacheable,.
         ];
-        $this->data = [render($element)];
+        $this->data = [\Drupal::service('renderer')->render($element)];
     }
   }

@@ @@
         // '#cache' => $this->cacheable,.
     ];
     $this->data = [
-      render($element),
-      render($details),
+      \Drupal::service('renderer')->render($element),
+      \Drupal::service('renderer')->render($details),
       $author,
       $created,
       $description,
@@ @@
       ];
       $url->setOptions($link_options);
       $path = Link::fromTextAndUrl($this->t('Choose'), $url)->toRenderable();
-      $operations = render($path);
+      $operations = \Drupal::service('renderer')->render($path);
     }
     $url = Url::fromUserInput('/cmis/document/' . $this->config . '/' . $id);
     $path = Link::fromTextAndUrl($data, $url)->toRenderable();
-    $data = ['#markup' => render($path)];
+    $data = ['#markup' => \Drupal::service('renderer')->render($path)];
   }

   /**
@@ @@
       ];
       $url_operation->setOptions($link_options_operations);
       $path = Link::fromTextAndUrl($this->t('Choose folder'), $url_operation)->toRenderable();
-      $operations = render($path);
+      $operations = \Drupal::service('renderer')->render($path);
       $link_options['query'] = ['type' => 'popup'];
     }

@@ @@
     $url->setOptions($link_options);
     $path = Link::fromTextAndUrl($this->t('Properties'), $url)->toRenderable();
     $links[] = [
-      '#markup' => render($path),
+      '#markup' => \Drupal::service('renderer')->render($path),
       '#wrapper_attributes' => [
         'class' => [
           'object-properties',
@@ @@
       $url->setOptions($link_options);
       $path = Link::fromTextAndUrl($this->t('Delete'), $url)->toRenderable();
       $links[] = [
-        '#markup' => render($path),
+        '#markup' => \Drupal::service('renderer')->render($path),
         '#wrapper_attributes' => [
           'class' => [
             'object-delete',
@@ @@
       '#type' => 'ul',
     ];

-    $operations = render($list);
+    $operations = \Drupal::service('renderer')->render($list);
   }

 }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/cmis/src/CmisConnectionApi.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cmis;

+use Drupal\Core\Http\ClientFactory;
 use Dkd\PhpCmis\Enum\BindingType;
 use Dkd\PhpCmis\SessionFactory;
 use Dkd\PhpCmis\SessionParameter;
@@ @@
           ],
         ];
       }
-      /** @var \Drupal\Core\Http\ClientFactory $clientFactory */
+      /** @var ClientFactory $clientFactory */
       $clientFactory = \Drupal::service('http_client_factory');
       $this->httpInvoker = $clientFactory->fromOptions($auth);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/cmis/src/CmisBrowser.php:60

    ---------- begin diff ----------
@@ @@
   /**
    * Current object.
    *
-   * @var \Dkd\PhpCmis\Data\FolderInterface
+   * @var FolderInterface
    */
   protected $current;

@@ @@
     $this->init($config, $folder_id);
     if ($this->connection && !empty($this->current) && $browse = $this->browse()) {
       $response = new AjaxResponse();
-      $content = render($browse);
+      $content = \Drupal::service('renderer')->render($browse);
       $response->addCommand(new HtmlCommand('#cmis-browser-wrapper', $content));

       return $response;
@@ @@
       return [
         '#theme' => 'cmis_content_properties',
         '#object' => $this->current,
-        '#download' => render($path),
+        '#download' => \Drupal::service('renderer')->render($path),
       ];
     }
   }
@@ @@
         $url->setOptions($link_options);
         $path = Link::fromTextAndUrl($title, $url)->toRenderable();
         $links[] = [
-          '#markup' => render($path),
+          '#markup' => \Drupal::service('renderer')->render($path),
           '#wrapper_attributes' => [
             'class' => ['object-properties'],
           ],
@@ @@
         '#type' => 'ul',
       ];

-      return render($list);
+      return \Drupal::service('renderer')->render($list);
     }
   }

@@ @@
   /**
    * Add folder objects to render array.
    *
-   * @param \Dkd\PhpCmis\Data\FolderInterface $folder
+   * @param FolderInterface $folder
    *   A CMIS folder object.
    */
   protected function printFolderContent(FolderInterface $folder) {
@@ @@
   /**
    * Create breadcrumbs from parent folders.
    *
-   * @param \Dkd\PhpCmis\Data\FolderInterface $folder
+   * @param FolderInterface $folder
    *   Folder name.
    */
   protected function setBreadcrumbs(FolderInterface $folder) {
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/cmis/cmis.module:139

    ---------- begin diff ----------
@@ @@
       '#header' => [t('Property'), t('Value')],
       '#rows' => $rows,
     ];
-    $variables['properties'] = render($table);
+    $variables['properties'] = \Drupal::service('renderer')->render($table);
   }
 }

@@ @@
 /**
  * Helper function.
  *
- * @param \Dkd\PhpCmis\Data\PropertyInterface $property
+ * @param PropertyInterface $property
  *   The property to get values from.
  *
  * @return string
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


11) modules/contrib/cmis/cmis.install:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\user\RoleInterface;

 use Drupal\user\Entity\Role;

@@ @@
  * Add the new "administer cmis connection entity" permission.
  */
 function cmis_update_8201() {
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   foreach (Role::loadMultiple() as $role) {
     if ($role->hasPermission('administer site configuration')) {
       $role->grantPermission('administer cmis connection entity');
@@ @@
  * Add the new "access all cmis browsers" permission.
  */
 function cmis_update_8203() {
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   foreach (Role::loadMultiple() as $role) {
     if ($role->hasPermission('access cmis browser')) {
       $role->grantPermission('access all cmis browsers');
@@ @@
  * Revoke "access cmis operations" permission.
  */
 function cmis_update_8204() {
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   foreach (Role::loadMultiple() as $role) {
     if ($role->hasPermission('access cmis operations')) {
       $role->revokePermission('access cmis operations');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 11 files have been changed by Rector                                      

