diff --git a/pardot.info.yml b/pardot.info.yml
index 8b1bd2f..a7089c3 100644
--- a/pardot.info.yml
+++ b/pardot.info.yml
@@ -1,7 +1,7 @@
 name: 'Pardot'
 type: module
 description: 'Module to allow Pardot tracking for Drupal websites.'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Marketing Automation'
 dependencies:
   - token:token
diff --git a/pardot.module b/pardot.module
index 0f33537..56161f6 100644
--- a/pardot.module
+++ b/pardot.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\pardot\EntityTypeInfo;
+use Drupal\pardot\FormOperations;
 /**
  * @file
  * Contains pardot.module.
@@ -87,7 +89,7 @@ function pardot_page_attachments(array &$page) {
  */
 function pardot_entity_type_alter(array &$entity_types) {
   return \Drupal::service('class_resolver')
-    ->getInstanceFromDefinition(\Drupal\pardot\EntityTypeInfo::class)
+    ->getInstanceFromDefinition(EntityTypeInfo::class)
     ->entityTypeAlter($entity_types);
 }
 
@@ -95,13 +97,13 @@ function pardot_entity_type_alter(array &$entity_types) {
  * Implements hook_entity_operation_alter().
  *
  * @param array $operations
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
  * @return mixed
  */
 function pardot_entity_operation_alter(array &$operations, EntityInterface $entity) {
   return \Drupal::service('class_resolver')
-    ->getInstanceFromDefinition(\Drupal\pardot\EntityTypeInfo::class)
+    ->getInstanceFromDefinition(EntityTypeInfo::class)
     ->entityOperation($operations, $entity);
 }
 
@@ -109,7 +111,7 @@ function pardot_entity_operation_alter(array &$operations, EntityInterface $enti
 
 function pardot_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
   return \Drupal::service('class_resolver')
-    ->getInstanceFromDefinition(\Drupal\pardot\FormOperations::class)
+    ->getInstanceFromDefinition(FormOperations::class)
     ->getFormEntity($form, $form_state, WebformSubmissionForm::class, 'webform');
 }
 
@@ -120,6 +122,6 @@ function pardot_webform_submission_form_alter(array &$form, FormStateInterface $
  */
 function pardot_form_contact_message_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
   return \Drupal::service('class_resolver')
-    ->getInstanceFromDefinition(\Drupal\pardot\FormOperations::class)
+    ->getInstanceFromDefinition(FormOperations::class)
     ->getFormEntity($form, $form_state, MessageForm::class, 'contact_form');
 }
diff --git a/src/Annotation/PardotFieldFormatter.php b/src/Annotation/PardotFieldFormatter.php
index c864f33..256bbf7 100644
--- a/src/Annotation/PardotFieldFormatter.php
+++ b/src/Annotation/PardotFieldFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pardot\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class PardotFieldFormatter extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/PardotFormHandler.php b/src/Annotation/PardotFormHandler.php
index 52be705..22283aa 100644
--- a/src/Annotation/PardotFormHandler.php
+++ b/src/Annotation/PardotFormHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pardot\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class PardotFormHandler extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/AutoCompleteController.php b/src/Controller/AutoCompleteController.php
index da38b6e..b747aeb 100644
--- a/src/Controller/AutoCompleteController.php
+++ b/src/Controller/AutoCompleteController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\pardot\Controller;
 
+use Drupal\typed_data\DataFetcherInterface;
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
@@ -16,14 +18,14 @@ class AutoCompleteController extends ControllerBase {
   /**
    * Drupal\typed_data\DataFetcherInterface definition.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $typedDataDataFetcher;
 
   /**
    * Entity field manager to get the contact form field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
diff --git a/src/Controller/PardotFormMappingController.php b/src/Controller/PardotFormMappingController.php
index eff571a..feb438b 100644
--- a/src/Controller/PardotFormMappingController.php
+++ b/src/Controller/PardotFormMappingController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pardot\Controller;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\pardot\Form\PardotFormMappingForm;
@@ -13,7 +14,7 @@ class PardotFormMappingController extends ControllerBase {
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/EntityTypeInfo.php b/src/EntityTypeInfo.php
index e8d6b91..61b62f3 100644
--- a/src/EntityTypeInfo.php
+++ b/src/EntityTypeInfo.php
@@ -40,7 +40,7 @@ class EntityTypeInfo implements ContainerInjectionInterface {
 
   /**
    * @param array $operations
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public function entityOperation(array &$operations, EntityInterface $entity) {
     $has_permission = \Drupal::currentUser()
diff --git a/src/EventSubscriber/PardotEventSubscriber.php b/src/EventSubscriber/PardotEventSubscriber.php
index 48126b8..b056d68 100644
--- a/src/EventSubscriber/PardotEventSubscriber.php
+++ b/src/EventSubscriber/PardotEventSubscriber.php
@@ -2,12 +2,12 @@
 
 namespace Drupal\pardot\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Session\AccountInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -30,28 +30,28 @@ class PardotEventSubscriber implements EventSubscriberInterface {
   /**
    * The condition manager.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   private $condition_manager;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $account;
 
   /**
    * Creates a new PardotEventSubscriber.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    *
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $condition_manager
+   * @param ExecutableManagerInterface $condition_manager
    *   The condition manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AccountInterface $account, EntityTypeManagerInterface $entity_type_manager, ExecutableManagerInterface $condition_manager) {
@@ -72,9 +72,9 @@ class PardotEventSubscriber implements EventSubscriberInterface {
   /**
    * Evaluates tracking scoping conditions and sets state setting.
    *
-   * @param GetResponseEvent $event
+   * @param RequestEvent $event
    */
-  public function evaluateTrackingScope(GetResponseEvent $event) {
+  public function evaluateTrackingScope(RequestEvent $event) {
     // Check if Pardot is configured with an account ID.
     if (null !== $this->config->get('account_id')) {
       // Load use role condition configuration and current user.
diff --git a/src/Form/PardotFormMappingForm.php b/src/Form/PardotFormMappingForm.php
index adf52bb..aea8026 100644
--- a/src/Form/PardotFormMappingForm.php
+++ b/src/Form/PardotFormMappingForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\pardot\Form;
 
+use Drupal\pardot\Plugin\PardotFormHandlerManager;
+use Drupal\pardot\Plugin\PardotFormHandlerBase;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\pardot\PluginSubFormHelpers;
@@ -15,7 +17,7 @@ class PardotFormMappingForm extends FormBase {
   /**
    * Drupal\pardot\Plugin\FormMapHandlerPluginManager definition.
    *
-   * @var \Drupal\pardot\Plugin\PardotFormHandlerManager
+   * @var PardotFormHandlerManager
    */
   protected $pluginManagerFormMapHandlerPlugin;
 
@@ -80,7 +82,7 @@ class PardotFormMappingForm extends FormBase {
     $form_map_plugin_instance_id = $form_state->get('form_map_plugin_instance_id');
     if ($pardot_form_mapping && $form_map_plugin_instance_id && $entity) {
       $plugin = $this->pluginManagerFormMapHandlerPlugin;
-      /** @var \Drupal\pardot\Plugin\PardotFormHandlerBase $plugin */
+      /** @var PardotFormHandlerBase $plugin */
       $plugin = $plugin->createInstance($form_map_plugin_instance_id);
       $plugin->validateConfigurationForm($form, $form_state);
     }
diff --git a/src/Form/PardotSettingsForm.php b/src/Form/PardotSettingsForm.php
index 64664c3..4f681ee 100644
--- a/src/Form/PardotSettingsForm.php
+++ b/src/Form/PardotSettingsForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Pardot\Form;
 
+use Drupal\system\Plugin\Condition\RequestPath;
+use Drupal\user\Plugin\Condition\UserRole;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\salesforce\SalesforceAuthProviderPluginManager;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Executable\ExecutableManagerInterface;
@@ -24,35 +28,34 @@ class PardotSettingsForm extends ConfigFormBase {
   protected $settings;
 
   /**
-   * @var \Drupal\system\Plugin\Condition\RequestPath $path_condition .
+   * @var RequestPath $path_condition .
    */
   protected $path_condition;
 
   /**
-   * @var \Drupal\user\Plugin\Condition\UserRole $user_role_condition .
+   * @var UserRole $user_role_condition .
    */
   protected $user_role_condition;
 
   /**
    * Auth provider manager.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface
+   * @var SalesforceAuthProviderPluginManagerInterface
    */
   protected $authManager;
 
   /**
    * PardotSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $plugin_factory
+   * @param ExecutableManagerInterface $plugin_factory
    *   The condition plugin factory.
-   * @param \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $authManager
+   * @param SalesforceAuthProviderPluginManagerInterface $authManager
    *   Auth manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
-
   public function __construct(ConfigFactoryInterface $config_factory, ExecutableManagerInterface $plugin_factory, SalesforceAuthProviderPluginManagerInterface $authManager) {
     parent::__construct($config_factory);
     // Load from pardot.settings.yml.
@@ -241,7 +244,7 @@ class PardotSettingsForm extends ConfigFormBase {
     }
 
     //    $salesforce_auth_provider_value = $form_state->getValue('salesforce_auth_provider');
-    /** @var \Drupal\salesforce\SalesforceAuthProviderPluginManager $auth_provider_service */
+    /** @var SalesforceAuthProviderPluginManager $auth_provider_service */
     //    $auth_provider_service = \Drupal::service('plugin.manager.salesforce.auth_providers');
     //    $auth_providers = $auth_provider_service->getProviders();
     //    $salesforce_auth_provider = $auth_providers[$salesforce_auth_provider_value] ?? false;
@@ -250,7 +253,6 @@ class PardotSettingsForm extends ConfigFormBase {
     //      $form_state->setErrorByName('salesforce_auth_provider', $message);
     //      return;
     //    }
-
     parent::validateForm($form, $form_state);
   }
 
diff --git a/src/FormMap.php b/src/FormMap.php
index 2a520a7..bdf6158 100644
--- a/src/FormMap.php
+++ b/src/FormMap.php
@@ -163,7 +163,7 @@ class FormMap implements FormMapInterface {
    */
   public function disableMappedField(int $key) {
     if (isset($this->mapping[$key])) {
-      /** @var \Drupal\pardot\MappedFieldInterface $plugin */
+      /** @var MappedFieldInterface $plugin */
       $plugin = $this->mapping[$key];
       $plugin->setStatus(FALSE);
     }
@@ -177,7 +177,7 @@ class FormMap implements FormMapInterface {
    */
   public function enableMappedField(int $key) {
     if (isset($this->mapping[$key])) {
-      /** @var \Drupal\pardot\MappedFieldInterface $plugin */
+      /** @var MappedFieldInterface $plugin */
       $plugin = $this->mapping[$key];
       $plugin->setStatus(TRUE);
     }
@@ -191,7 +191,7 @@ class FormMap implements FormMapInterface {
    */
   public function requireMappedField(int $key) {
     if (isset($this->mapping[$key])) {
-      /** @var \Drupal\pardot\MappedFieldInterface $plugin */
+      /** @var MappedFieldInterface $plugin */
       $plugin = $this->mapping[$key];
       $plugin->setIsRequired(TRUE);
     }
diff --git a/src/FormMapForm.php b/src/FormMapForm.php
index 43ecfe7..cfb7659 100644
--- a/src/FormMapForm.php
+++ b/src/FormMapForm.php
@@ -26,23 +26,23 @@ class FormMapForm {
   /**
    * Entity field manager to get the contact form field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected EntityFieldManager $entityFieldManager;
 
   /**
    * Plugin factory to create instances of plugins for formatters.
    *
-   * @var \Drupal\pardot\Plugin\PardotFieldFormatterManager
+   * @var PardotFieldFormatterManager
    */
   protected PardotFieldFormatterManager $pardotFormMapFormatterManagerPlugin;
 
   /**
    * EntityTypeInfo constructor.
    *
-   * @param \Drupal\pardot\Plugin\PardotFieldFormatterManager $pardotFormMapFormatterManagerPlugin
+   * @param PardotFieldFormatterManager $pardotFormMapFormatterManagerPlugin
    *   The formatter plugins manager.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   The entity field manager for grabbing fields off entities.
    */
   public function __construct(PardotFieldFormatterManager $pardotFormMapFormatterManagerPlugin, EntityFieldManager $entityFieldManager, array $configuration) {
@@ -61,7 +61,7 @@ class FormMapForm {
   }
 
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\pardot\FormMap $pardot_form_map */
+    /** @var FormMap $pardot_form_map */
     if (empty($form_state->get('pardot_form_map'))) {
       $pardot_form_map = new FormMap($this->configuration);
       $form_state->set('pardot_form_map', $pardot_form_map);
@@ -144,11 +144,11 @@ class FormMapForm {
    *
    * @param array $form
    *   The form for creating the subform.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to use for creating the subform state.
    * @param int $key
    *   Row index.
-   * @param \Drupal\pardot\MappedFieldInterface $row
+   * @param MappedFieldInterface $row
    *   Row data.
    */
   public function buildRow(array &$form, FormStateInterface $form_state, int $key, MappedFieldInterface $row) {
@@ -256,7 +256,7 @@ class FormMapForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ -272,7 +272,7 @@ class FormMapForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function addFieldMapSubmit(array &$form, FormStateInterface $form_state) {
@@ -288,7 +288,7 @@ class FormMapForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ -304,7 +304,7 @@ class FormMapForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function pluginTypeChangeSubmit(array &$form, FormStateInterface $form_state) {
@@ -339,7 +339,7 @@ class FormMapForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ -355,7 +355,7 @@ class FormMapForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function removeFieldMapSubmit(array &$form, FormStateInterface $form_state) {
diff --git a/src/FormMapInterface.php b/src/FormMapInterface.php
index c3bf13e..841f0ca 100644
--- a/src/FormMapInterface.php
+++ b/src/FormMapInterface.php
@@ -43,7 +43,7 @@ interface FormMapInterface {
   /**
    * Get the array of MappedField instances.
    *
-   * @return \Drupal\pardot\MappedField[]
+   * @return MappedField[]
    *   The array of MappedField instances.
    */
   public function getMappedFieldCollection();
@@ -51,7 +51,7 @@ interface FormMapInterface {
   /**
    * Set the array of field map configurations.
    *
-   * @param \Drupal\pardot\MappedField[] $mapping
+   * @param MappedField[] $mapping
    *   The array of MappedField instances.
    */
   public function setMappedFieldCollection(array $mapping);
diff --git a/src/FormOperations.php b/src/FormOperations.php
index 936e4bb..2080bf5 100644
--- a/src/FormOperations.php
+++ b/src/FormOperations.php
@@ -3,6 +3,8 @@
 
 namespace Drupal\pardot;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -27,27 +29,27 @@ class FormOperations implements ContainerInjectionInterface {
   /**
    * State manager.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected State $state;
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private ImmutableConfig $pardotSettings;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private EntityTypeManagerInterface $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private LoggerChannelFactoryInterface $logger;
 
   /**
-   * @var \Drupal\pardot\Service\PardotClientInterface
+   * @var PardotClientInterface
    */
   private PardotClientInterface $pardotClient;
 
@@ -55,15 +57,15 @@ class FormOperations implements ContainerInjectionInterface {
   /**
    * Stuff.
    *
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   The core state.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Channel for logging messages.
-   * @param \Drupal\pardot\Service\PardotClientInterface $pardotClient
+   * @param PardotClientInterface $pardotClient
    *   Client to interact with salesforce/pardot endpoints.
    */
   public function __construct(State $state, ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager, LoggerChannelFactoryInterface $loggerChannelFactory, PardotClientInterface $pardotClient) {
@@ -92,15 +94,15 @@ class FormOperations implements ContainerInjectionInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $formClassName
    *   The Class string to check the form objects against.
    * @param string $entity_type_id
    *   The entity type id we should get the storage for.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getFormEntity(array &$form, FormStateInterface $form_state, string $formClassName, string $entity_type_id): void {
     // Get conditional state variable.
@@ -122,15 +124,15 @@ class FormOperations implements ContainerInjectionInterface {
   }
 
   /**
-   * Set Pardot form submit.
-   *
-   * @param object $entity
-   *   The entity (form) you want to attach the pardot form submit functionality.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   *   Form state interface.
-   *
-   * @see pardot_form_contact_message_form_alter()
-   */
+  * Set Pardot form submit.
+  *
+  * @param object $entity
+  *   The entity (form) you want to attach the pardot form submit functionality.
+  * @param FormStateInterface $form_state
+  *   Form state interface.
+  *
+  * @see pardot_form_contact_message_form_alter()
+  */
  public function setPardotFormSubmit(object $entity, &$form ,FormStateInterface $form_state): void {
     $pardot_form_map_plugin = $entity->getThirdPartySetting('pardot', 'pardot_form_mapping_plugin', FALSE);
     if ($pardot_form_map_plugin) {
@@ -150,7 +152,7 @@ class FormOperations implements ContainerInjectionInterface {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state interface.
    *
    * @see pardot_form_contact_message_form_alter()
@@ -163,7 +165,7 @@ class FormOperations implements ContainerInjectionInterface {
     if (isset($storage['pardot_form_map'])) {
 
 
-      /** @var \Drupal\pardot\FormMap $pardot_form_map */
+      /** @var FormMap $pardot_form_map */
       $pardot_form_map = $storage['pardot_form_map'];
       $post_url = $pardot_form_map->getPostUrl();
       $field_map_collection = $pardot_form_map->getMappedFieldCollection();
diff --git a/src/Plugin/PardotFieldFormatterBase.php b/src/Plugin/PardotFieldFormatterBase.php
index 70b203d..73ea064 100644
--- a/src/Plugin/PardotFieldFormatterBase.php
+++ b/src/Plugin/PardotFieldFormatterBase.php
@@ -20,7 +20,7 @@ abstract class PardotFieldFormatterBase extends ExecutablePluginBase implements
   /**
    * The condition manager to proxy execute calls through.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected ExecutableManagerInterface $executableManager;
 
diff --git a/src/Plugin/PardotFieldFormatterInterface.php b/src/Plugin/PardotFieldFormatterInterface.php
index 2cc33ec..2c28ad8 100644
--- a/src/Plugin/PardotFieldFormatterInterface.php
+++ b/src/Plugin/PardotFieldFormatterInterface.php
@@ -13,7 +13,7 @@ interface PardotFieldFormatterInterface extends PluginInspectionInterface {
   /**
    * Get the form field from the form state and apply formatting.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state that holds the input values.
    *
    * @return mixed
diff --git a/src/Plugin/PardotFieldFormatterManager.php b/src/Plugin/PardotFieldFormatterManager.php
index 18b3ae9..7ff519d 100644
--- a/src/Plugin/PardotFieldFormatterManager.php
+++ b/src/Plugin/PardotFieldFormatterManager.php
@@ -16,9 +16,9 @@ class PardotFieldFormatterManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/PardotFormHandlerBase.php b/src/Plugin/PardotFormHandlerBase.php
index a9a4c81..f096be4 100644
--- a/src/Plugin/PardotFormHandlerBase.php
+++ b/src/Plugin/PardotFormHandlerBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\pardot\Plugin;
 
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\pardot\Service\PardotClient;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Executable\ExecutableManagerInterface;
@@ -25,35 +27,35 @@ abstract class PardotFormHandlerBase extends ExecutablePluginBase implements Par
   /**
    * Entity field manager to get the contact form field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
   /**
    * Plugin factory to create instances of plugins for formatters.
    *
-   * @var \Drupal\pardot\Plugin\PardotFieldFormatterManager
+   * @var PardotFieldFormatterManager
    */
   protected $pardotFormMapFormatterManagerPlugin;
 
   /**
    * Pardot api client to interact with endpoints.
    *
-   * @var \Drupal\pardot\Service\PardotClient
+   * @var PardotClient
    */
   protected $pardotApiClient;
 
   /**
    * The condition manager to proxy execute calls through.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected ExecutableManagerInterface $executableManager;
 
   /**
    * Class that defines a form mapping.
    *
-   * @var \Drupal\pardot\FormMap
+   * @var FormMap
    */
   protected FormMap $formMap;
 
@@ -122,7 +124,7 @@ abstract class PardotFormHandlerBase extends ExecutablePluginBase implements Par
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\pardot\FormMap $pardot_form_map */
+    /** @var FormMap $pardot_form_map */
     if (empty($form_state->get('pardot_form_map'))) {
       $pardot_form_map = new FormMap($this->configuration['settings']);
       $form_state->set('pardot_form_map', $pardot_form_map);
@@ -243,11 +245,11 @@ abstract class PardotFormHandlerBase extends ExecutablePluginBase implements Par
    *
    * @param array $form
    *   The form for creating the subform.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to use for creating the subform state.
    * @param int $key
    *   Row index.
-   * @param \Drupal\pardot\MappedFieldInterface $row
+   * @param MappedFieldInterface $row
    *   Row data.
    * @param string $form_handler_id
    *   Form handler id.
@@ -361,7 +363,7 @@ abstract class PardotFormHandlerBase extends ExecutablePluginBase implements Par
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ -377,7 +379,7 @@ abstract class PardotFormHandlerBase extends ExecutablePluginBase implements Par
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function addFieldMapSubmit(array &$form, FormStateInterface $form_state) {
@@ -392,7 +394,7 @@ abstract class PardotFormHandlerBase extends ExecutablePluginBase implements Par
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ -408,7 +410,7 @@ abstract class PardotFormHandlerBase extends ExecutablePluginBase implements Par
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function pluginTypeChangeSubmit(array &$form, FormStateInterface $form_state) {
@@ -443,7 +445,7 @@ abstract class PardotFormHandlerBase extends ExecutablePluginBase implements Par
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ -459,7 +461,7 @@ abstract class PardotFormHandlerBase extends ExecutablePluginBase implements Par
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function removeFieldMapSubmit(array &$form, FormStateInterface $form_state) {
@@ -493,7 +495,7 @@ abstract class PardotFormHandlerBase extends ExecutablePluginBase implements Par
     $array_parents = $form['#array_parents'];
     $values = $form_state->getCompleteFormState()->getValue($array_parents);
     $settings = $values['settings_container']['settings'];
-    /** @var \Drupal\pardot\FormMap $pardot_form_map */
+    /** @var FormMap $pardot_form_map */
     $pardot_form_map = $form_state->get('pardot_form_map');
     $pardot_form_map->setPostUrl($values['post_url']);
     $pardot_form_map->setFormHandlerId((int) $values['form_handler_id']);
diff --git a/src/Plugin/PardotFormHandlerManager.php b/src/Plugin/PardotFormHandlerManager.php
index 1ab642c..332697e 100644
--- a/src/Plugin/PardotFormHandlerManager.php
+++ b/src/Plugin/PardotFormHandlerManager.php
@@ -18,9 +18,9 @@ class PardotFormHandlerManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/pardot/FieldFormatter/AutoPath.php b/src/Plugin/pardot/FieldFormatter/AutoPath.php
index aeba7ad..96f9d08 100644
--- a/src/Plugin/pardot/FieldFormatter/AutoPath.php
+++ b/src/Plugin/pardot/FieldFormatter/AutoPath.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\pardot\Plugin\pardot\FieldFormatter;
 
+use Drupal\typed_data\DataFetcherInterface;
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\contact\Entity\Message;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\pardot\Plugin\PardotFieldFormatterBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -23,14 +26,14 @@ class AutoPath extends PardotFieldFormatterBase implements ContainerFactoryPlugi
   /**
    * The data fetcher object.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;
 
   /**
    * Entity field manager to get the contact form field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -95,14 +98,14 @@ class AutoPath extends PardotFieldFormatterBase implements ContainerFactoryPlugi
   /**
    * Get the form field from the form state and apply formatting.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state that holds the input values.
    *
    * @return mixed
    *   The formatted value or null i guess.
    */
   public function getFormattedValue(FormStateInterface $form_state) {
-    /** @var \Drupal\contact\Entity\Message $form_entity */
+    /** @var Message $form_entity */
     $form_entity = $form_state->getFormObject()->getEntity();
     $path = $this->getConfiguration()['path'] ?? '';
     if ($path) {
diff --git a/src/Plugin/pardot/FieldFormatter/Cookie.php b/src/Plugin/pardot/FieldFormatter/Cookie.php
index 30a763d..460c6e9 100644
--- a/src/Plugin/pardot/FieldFormatter/Cookie.php
+++ b/src/Plugin/pardot/FieldFormatter/Cookie.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pardot\Plugin\pardot\FieldFormatter;
 
+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\pardot\Plugin\PardotFieldFormatterBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -24,7 +25,7 @@ class Cookie extends PardotFieldFormatterBase implements ContainerFactoryPluginI
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
@@ -87,7 +88,7 @@ class Cookie extends PardotFieldFormatterBase implements ContainerFactoryPluginI
   /**
    * Get the form field from the form state and apply formatting.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state that holds the input values.
    *
    * @return mixed
diff --git a/src/Plugin/pardot/FieldFormatter/DefaultValue.php b/src/Plugin/pardot/FieldFormatter/DefaultValue.php
index 9b75919..49b9397 100644
--- a/src/Plugin/pardot/FieldFormatter/DefaultValue.php
+++ b/src/Plugin/pardot/FieldFormatter/DefaultValue.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pardot\Plugin\pardot\FieldFormatter;
 
+use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\pardot\Plugin\PardotFieldFormatterBase;
@@ -24,7 +25,7 @@ class DefaultValue extends PardotFieldFormatterBase implements ContainerFactoryP
   /**
    * Entity field manager to get the contact form field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
@@ -140,7 +141,7 @@ class DefaultValue extends PardotFieldFormatterBase implements ContainerFactoryP
    *
    * @param string $field_name
    *   The name of the field we are looking at.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state that holds the input values.
    *
    * @return string
diff --git a/src/Plugin/pardot/FieldFormatter/Token.php b/src/Plugin/pardot/FieldFormatter/Token.php
index 97516f1..c2a1374 100644
--- a/src/Plugin/pardot/FieldFormatter/Token.php
+++ b/src/Plugin/pardot/FieldFormatter/Token.php
@@ -94,7 +94,7 @@ class Token extends PardotFieldFormatterBase implements ContainerFactoryPluginIn
   /**
    * Get the form field from the form state and apply formatting.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state that holds the input values.
    *
    * @return mixed
diff --git a/src/Plugin/pardot/FieldFormatter/WebformSubmissionValue.php b/src/Plugin/pardot/FieldFormatter/WebformSubmissionValue.php
index 8673ed8..ea82e24 100644
--- a/src/Plugin/pardot/FieldFormatter/WebformSubmissionValue.php
+++ b/src/Plugin/pardot/FieldFormatter/WebformSubmissionValue.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pardot\Plugin\pardot\FieldFormatter;
 
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\pardot\Plugin\PardotFieldFormatterBase;
@@ -28,7 +29,7 @@ class WebformSubmissionValue extends PardotFieldFormatterBase implements Contain
   /**
    * Entity field manager to get the contact form field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -231,7 +232,7 @@ class WebformSubmissionValue extends PardotFieldFormatterBase implements Contain
   /**
    * Get the form field from the form state and apply formatting.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return mixed
@@ -265,7 +266,7 @@ class WebformSubmissionValue extends PardotFieldFormatterBase implements Contain
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ -282,7 +283,7 @@ class WebformSubmissionValue extends PardotFieldFormatterBase implements Contain
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function pluginTypeChangeSubmit(array &$form, FormStateInterface $form_state) {
diff --git a/src/PluginSubFormHelpers.php b/src/PluginSubFormHelpers.php
index d599b9f..7a4dfba 100644
--- a/src/PluginSubFormHelpers.php
+++ b/src/PluginSubFormHelpers.php
@@ -14,16 +14,16 @@ class PluginSubFormHelpers {
   /**
    * Help Submit plugin forms.
    *
-   * @param \Drupal\Core\Plugin\PluginFormInterface $plugin
+   * @param PluginFormInterface $plugin
    *   The plugin instance.
    * @param array $form
    *   The form for creating the subform.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to use for creating the subform state.
    * @param array $parents
    *   The array parent. Where to get the plugin instance form.
    *
-   * @return array|\Drupal\Core\Plugin\PluginFormInterface
+   * @return array|PluginFormInterface
    *   Either return the plugin or an empty array.
    */
   public static function pluginSubmit($plugin, array &$form, FormStateInterface $form_state, array $parents) {
@@ -43,16 +43,16 @@ class PluginSubFormHelpers {
   /**
    * Help Submit plugin forms.
    *
-   * @param \Drupal\Core\Plugin\PluginFormInterface $plugin
+   * @param PluginFormInterface $plugin
    *   The plugin instance.
    * @param array $form
    *   The form for creating the subform.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to use for creating the subform state.
    * @param array $parents
    *   The array parent. Where to get the plugin instance form.
    *
-   * @return array|\Drupal\Core\Plugin\PluginFormInterface
+   * @return array|PluginFormInterface
    *   Either return the plugin or an empty array.
    */
   public static function buildPluginForm($plugin, array $form, FormStateInterface $form_state, array $parents) {
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index d31aed1..b03ecc7 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -20,14 +20,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -52,10 +52,10 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/Service/PardotClient.php b/src/Service/PardotClient.php
index d099302..05ce1f4 100644
--- a/src/Service/PardotClient.php
+++ b/src/Service/PardotClient.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\pardot\Service;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\State\StateInterface;
@@ -28,49 +30,49 @@ class PardotClient implements PardotClientInterface {
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * The Pardot settings configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $pardotSettings;
 
   /**
    * Logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
   /**
    * State storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Auth provider manager.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface
+   * @var SalesforceAuthProviderPluginManagerInterface
    */
   protected $authManager;
 
@@ -91,19 +93,19 @@ class PardotClient implements PardotClientInterface {
   /**
    * PersonifySsoClient constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The config factory service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger channel factory.
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   HTTP client.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State storage.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   Translation.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time service.
-   * @param \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $authManager
+   * @param SalesforceAuthProviderPluginManagerInterface $authManager
    *   Auth manager service.
    */
   public function __construct(
diff --git a/tests/Controller/AutoCompleteControllerTest.php b/tests/Controller/AutoCompleteControllerTest.php
index f11a074..2c3f171 100644
--- a/tests/Controller/AutoCompleteControllerTest.php
+++ b/tests/Controller/AutoCompleteControllerTest.php
@@ -13,7 +13,7 @@ class AutoCompleteControllerTest extends WebTestBase {
   /**
    * Drupal\typed_data\DataFetcherInterface definition.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $typedDataDataFetcher;
 
diff --git a/tests/Controller/PardotFormMappingControllerTest.php b/tests/Controller/PardotFormMappingControllerTest.php
index b3bc2cb..fd3aa85 100644
--- a/tests/Controller/PardotFormMappingControllerTest.php
+++ b/tests/Controller/PardotFormMappingControllerTest.php
@@ -21,7 +21,7 @@ class PardotFormMappingControllerTest extends WebTestBase {
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 94f14c7..0b5b1e4 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\pardot\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,14 +28,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
