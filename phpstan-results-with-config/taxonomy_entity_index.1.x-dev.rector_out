modules/contrib/taxonomy_entity_index/includes/taxonomy_entity_index.tokens.inc
modules/contrib/taxonomy_entity_index/src/BatchService.php
modules/contrib/taxonomy_entity_index/src/Commands/TaxonomyEntityIndexCommands.php
modules/contrib/taxonomy_entity_index/src/Form/TaxonomyEntityIndexAdminForm.php
modules/contrib/taxonomy_entity_index/src/Form/TaxonomyEntityIndexAdminReindexForm.php
modules/contrib/taxonomy_entity_index/src/Plugin/views/argument/TaxonomyEntityIndexDepth.php
modules/contrib/taxonomy_entity_index/src/Plugin/views/argument/TaxonomyEntityIndexTidDepth.php
modules/contrib/taxonomy_entity_index/src/Plugin/views/argument/TaxonomyEntityIndexUuidDepth.php
modules/contrib/taxonomy_entity_index/src/Plugin/views/field/TaxonomyEntityIndexTid.php
modules/contrib/taxonomy_entity_index/src/Plugin/views/filter/TaxonomyEntityIndexTidDepth.php
modules/contrib/taxonomy_entity_index/taxonomy_entity_index.drush.inc
modules/contrib/taxonomy_entity_index/taxonomy_entity_index.install
modules/contrib/taxonomy_entity_index/taxonomy_entity_index.module
modules/contrib/taxonomy_entity_index/taxonomy_entity_index.views.inc
modules/contrib/taxonomy_entity_index/tests/src/Functional/Views/TaxonomyEntityIndexTermArgumentDepthTest.php
modules/contrib/taxonomy_entity_index/tests/src/Functional/Views/TaxonomyEntityIndexTermFilterDepthTest.php
modules/contrib/taxonomy_entity_index/tests/src/Functional/Views/TaxonomyEntityIndexTestBase.php
modules/contrib/taxonomy_entity_index/tests/src/Functional/Views/TaxonomyEntityIndexUuidArgumentTest.php
modules/contrib/taxonomy_entity_index/tests/src/Kernel/TaxonomyEntityIndexEntityTest.php
modules/contrib/taxonomy_entity_index/tests/src/Kernel/TaxonomyEntityIndexFieldNamesTest.php
modules/contrib/taxonomy_entity_index/tests/src/Kernel/TaxonomyEntityIndexKernelTestBase.php

14 files with changes
=====================

1) modules/contrib/taxonomy_entity_index/tests/src/Kernel/TaxonomyEntityIndexKernelTestBase.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     foreach (array_merge($this->entityTypes, ['taxonomy_term', 'user']) as $entity_type_id) {
       $this->installEntitySchema($entity_type_id);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/taxonomy_entity_index/tests/src/Kernel/TaxonomyEntityIndexEntityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\taxonomy_entity_index\Kernel;

+use Drupal\Core\Database\Connection;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\taxonomy\TermInterface;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
@@ @@
   /**
    * DB Connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['node', 'filter']);
     $this->installEntitySchema('node');
@@ @@
   /**
    * Test that disabled entity types don't write to the index.
    *
-   * @param \Drupal\taxonomy\TermInterface[] $terms
+   * @param TermInterface[] $terms
    *   Terms to reference.
    */
   protected function assertThatDisabledEntityTypesDoNotWriteToTheIndex(array $terms) {
@@ @@
   /**
    * Test that entity creation writes to the index.
    *
-   * @param \Drupal\taxonomy\TermInterface[] $terms
+   * @param TermInterface[] $terms
    *   Terms to reference.
    *
-   * @return \Drupal\entity_test\Entity\EntityTest
+   * @return EntityTest
    *   Test entity.
    */
   protected function assertThatEntityInsertWritesToTheIndex(array $terms) {
@@ @@
   /**
    * Test that updates to entities modify the index.
    *
-   * @param \Drupal\entity_test\Entity\EntityTest $entity
+   * @param EntityTest $entity
    *   Entity to update.
-   * @param \Drupal\taxonomy\TermInterface[] $terms
+   * @param TermInterface[] $terms
    *   Terms to reference.
    *
-   * @return \Drupal\entity_test\Entity\EntityTest
+   * @return EntityTest
    *   Test entity.
    */
   protected function assertThatEntityUpdatesModifyTheIndex(EntityTest $entity, array $terms) {
@@ @@
   /**
    * Assert that deleting a term deletes the item from the index.
    *
-   * @param \Drupal\entity_test\Entity\EntityTest $entity
+   * @param EntityTest $entity
    *   Test entity.
    * @param array $expected_terms
    *   Expected terms.
@@ @@
   /**
    * Test that deleting an entity updates the index.
    *
-   * @param \Drupal\entity_test\Entity\EntityTest $entity
+   * @param EntityTest $entity
    *   Entity to update.
    */
   protected function assertThatEntityDeletionUpdatesTheIndex(EntityTest $entity) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/taxonomy_entity_index/tests/src/Functional/Views/TaxonomyEntityIndexUuidArgumentTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\taxonomy_entity_index\Functional\Views;

+use Drupal\taxonomy\TermInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\node\NodeInterface;
 use Drupal\views\Views;

@@ @@
   /**
    * An array of taxonomy term objects.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $terms = [];

@@ @@
   /**
    * The loaded View object.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);

     // Configure the eponymous Taxonomy Entity Index.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/taxonomy_entity_index/tests/src/Functional/Views/TaxonomyEntityIndexTestBase.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);

     if ($import_test_views) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/taxonomy_entity_index/tests/src/Functional/Views/TaxonomyEntityIndexTermFilterDepthTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\taxonomy_entity_index\Functional\Views;

+use Drupal\taxonomy\TermInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\node\NodeInterface;
 use Drupal\views\Views;

@@ @@
   /**
    * An array of taxonomy term objects.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $terms = [];

@@ @@
   /**
    * The loaded View object.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);

     // Create a hierarchy 3 deep. Note the parent setup function creates two
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/taxonomy_entity_index/tests/src/Functional/Views/TaxonomyEntityIndexTermArgumentDepthTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\taxonomy_entity_index\Functional\Views;

+use Drupal\taxonomy\TermInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\file\Entity\File;
 use Drupal\media\Entity\Media;
@@ @@
   /**
    * An array of taxonomy term objects.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $terms = [];

@@ @@
   /**
    * The loaded View object.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);

     // Enable indexing for node and media.
@@ @@
   public function testTermWithDepthArgument() {
     $this->drupalGet('test_argument_taxonomy_entity_index_index_tid_depth/' . $this->terms[0]->id());
     // "Node with Term" should be present on the page.
-    $this->assertText($this->nodes[2]->getTitle());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodes[2]->getTitle());

     // Media with the same numeric ID that is referencing the term should not
     // affect the results, thus ensuring that "Node without Term" should not be
     // present on the page.
-    $this->assertNoText($this->nodes[3]->getTitle());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodes[3]->getTitle());
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/taxonomy_entity_index/taxonomy_entity_index.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Module file for taxonomy_entity_index.
@@ @@
  * Therefore both the entity type has to be fieldable and the base table
  * has already a views integration.
  *
- * @return \Drupal\Core\Entity\EntityTypeInterface[]
+ * @return EntityTypeInterface[]
  *   An array of entity types.
  */
 function taxonomy_entity_index_entity_views_integrable() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


8) modules/contrib/taxonomy_entity_index/src/Plugin/views/filter/TaxonomyEntityIndexTidDepth.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The vocabulary storage.
    *
-   * @var \Drupal\taxonomy\VocabularyStorageInterface
+   * @var VocabularyStorageInterface
    */
   protected $vocabularyStorage;

@@ @@
   /**
    * The term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/taxonomy_entity_index/src/Plugin/views/field/TaxonomyEntityIndexTid.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The vocabulary storage.
    *
-   * @var \Drupal\taxonomy\VocabularyStorageInterface
+   * @var VocabularyStorageInterface
    */
   protected $vocabularyStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/taxonomy_entity_index/src/Plugin/views/argument/TaxonomyEntityIndexUuidDepth.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * A repository that allows us to load entities by their UUIDs.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/taxonomy_entity_index/src/Plugin/views/argument/TaxonomyEntityIndexDepth.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $termStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/taxonomy_entity_index/src/Form/TaxonomyEntityIndexAdminReindexForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Creates a TaxonomyEntityIndexAdminReindexForm form.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/taxonomy_entity_index/src/Form/TaxonomyEntityIndexAdminForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Creates a TaxonomyEntityIndexAdminForm form.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/taxonomy_entity_index/src/Commands/TaxonomyEntityIndexCommands.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a drush command object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, LoggerChannelFactoryInterface $logger_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 14 files have been changed by Rector                                      

