modules/contrib/node_layout_builder/node_layout_builder.data.templates.inc
modules/contrib/node_layout_builder/node_layout_builder.install
modules/contrib/node_layout_builder/node_layout_builder.module
modules/contrib/node_layout_builder/src/Controller/DataController.php
modules/contrib/node_layout_builder/src/Controller/LayoutElementController.php
modules/contrib/node_layout_builder/src/Entity/NodeLayoutBuilder.php
modules/contrib/node_layout_builder/src/Entity/NodeLayoutBuilderTemplate.php
modules/contrib/node_layout_builder/src/Form/AddElementForm.php
modules/contrib/node_layout_builder/src/Helpers/NodeLayoutBuilderHelper.php
modules/contrib/node_layout_builder/src/Helpers/NodeLayoutFileHelper.php
modules/contrib/node_layout_builder/src/NodeLayoutBuilderEditor.php
modules/contrib/node_layout_builder/src/NodeLayoutBuilderStyle.php
modules/contrib/node_layout_builder/src/Services/NodeLayoutBuilderManager.php

8 files with changes
====================

1) modules/contrib/node_layout_builder/src/Services/NodeLayoutBuilderManager.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Session\AccountProxy definition.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
   /**
    * Drupal\Core\Routing\CurrentRouteMatch definition.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Block\BlockManager
+   * @var BlockManager
    */
   protected $pluginManagerBlock;

@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelFactory definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $loggerFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/node_layout_builder/src/NodeLayoutBuilderStyle.php:69

    ---------- begin diff ----------
@@ @@
           $fid = $styles['background']['image'][0];
           $file = NodeLayoutFileHelper::loadFileByFid($fid);
           if ($file) {
-            $path = file_create_url($file->getFileUri());
+            $path = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
             $bg_img .= 'background-image: url(' . $path . ');';
           }
           if (!empty($styles['background']['img_style'])) {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/node_layout_builder/src/NodeLayoutBuilderEditor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\node_layout_builder;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The instantiated NodeLayoutBuilderManager class.
    *
-   * @var \Drupal\node_layout_builder\Services\NodeLayoutBuilderManager
+   * @var NodeLayoutBuilderManager
    */
   public $nodeLayoutBuilderManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
     $build[] = [
       '#theme' => 'node_layout_builder_ui',
       '#btns_import_export' => $list_btns_import_export,
-      '#btn_add_section' => render($btn_add_section),
-      '#btn_save_data' => render($btn_save_data),
+      '#btn_add_section' => \Drupal::service('renderer')->render($btn_add_section),
+      '#btn_save_data' => \Drupal::service('renderer')->render($btn_save_data),
       '#nid' => $nid,
       '#data' => 'data',
       '#btn_save_layout' => $btn_save_layout,
@@ @@
         $prefix = '<' . $tag_element . ' class="updated ' . $class . ' ' . $child['#type'] . ' ' . $child['#attributes']['container']['class'] . '" id="' . $id_element_child . '" data-id="' . $id_element_child . '" data-parent="' . $child['#parent'] . '" data-type="nlb_' . $child['#type'] . '" style="' . $styles_element . '">';
         $suffix = '</' . $tag_element . '>';

-        $children_output .= $prefix . render($children_theme) . $suffix;
+        $children_output .= $prefix . \Drupal::service('renderer')->render($children_theme) . $suffix;
       }
     }

@@ @@
       '#parent' => $values['parent'],
       '#settings' => $values['settings'],
       '#styles' => $styles_element,
-      '#content_element' => render($values['children']),
+      '#content_element' => \Drupal::service('renderer')->render($values['children']),
       '#editable' => $values['editable'],
       '#class' => $class,
       '#cache' => [
@@ @@
     $prefix = '<' . $tag_element . ' class="' . $class . ' ' . $values['type_element'] . '" id="' . $values['id_element'] . '" data-id="' . $values['id_element'] . '" data-parent="' . $values['parent'] . '" data-type="nlb_' . $values['type_element'] . '" style="' . $styles_element . '">';
     $suffix = '</' . $tag_element . '>';

-    $output = $prefix . render($element_tpl) . $suffix;
+    $output = $prefix . \Drupal::service('renderer')->render($element_tpl) . $suffix;

     return $output;
   }
@@ @@
    *
    * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
    * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function saveElementEntity($nid, $uuid, array $data) {
     // Clean data.
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/node_layout_builder/src/Helpers/NodeLayoutFileHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\node_layout_builder\Helpers;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\file\Entity\File;

 /**
@@ @@
    * @param int $fid
    *   ID file.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null|static
+   * @return EntityInterface|null|static
    *   File object or NULL.
    */
   public static function loadFileByFid($fid) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/node_layout_builder/src/Helpers/NodeLayoutBuilderHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\node_layout_builder\Helpers;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\block\Entity\Block;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    *
    * @param array $build
    *   Build entity.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   Display entity.
    * @param string $display_context
    *   Display context of entity.
@@ @@
   /**
    * Get arguments of form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   State form.
    *
    * @return array|mixed
@@ @@
    * @param string $view_mode
    *   View mode entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   View display.
    */
   public static function getEntityViewDiplay($entity_type, $bundle, $view_mode = 'default') {
@@ @@
    * @return array
    *   List styles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function loadImageStyles() {
     $style_options = ['' => t('None')];
@@ @@
             $renderer = \Drupal::service('renderer');
             $renderer->addCacheableDependency($image_theme, $file);

-            $variables['content_element'] = render($image_theme);
+            $variables['content_element'] = \Drupal::service('renderer')->render($image_theme);
           }
         }
         break;
@@ @@
           'responsive' => $values['video_youtube']['responsive'],
         ];
         $video = NodeLayoutBuilderHelper::embedVideoYoutube($url, $options);
-        $variables['content_element'] = render($video);
+        $variables['content_element'] = \Drupal::service('renderer')->render($video);
         break;

       case 'audio':
@@ @@
           '#style' => $style,
         ];

-        $variables['content_element'] = render($audio_player);
+        $variables['content_element'] = \Drupal::service('renderer')->render($audio_player);
         break;

       case 'block':
@@ @@
         $nid = !empty($values['node']) ? $values['node'] : NULL;
         $view_mode = !empty($values['view_mode']) ? $values['view_mode'] : 'teaser';
         $node_output = NodeLayoutBuilderHelper::loadNodeView($nid, $view_mode);
-        $variables['content_element'] = render($node_output);
+        $variables['content_element'] = \Drupal::service('renderer')->render($node_output);
         break;

       case 'field':
@@ @@
           $field_name = $values['entity_field'];
           $field_view = $node->$field_name
             ->view($values['view_mode']);
-          $variables['content_element'] = render($field_view);
+          $variables['content_element'] = \Drupal::service('renderer')->render($field_view);
         }
         else {
           $variables['content_element'] = '';
@@ @@
    * @param string $theme
    *   Name machien of theme.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   List blocks.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function getAllBlocksByTheme($theme = 'bartik') {
     $blocks = [];
@@ @@
   /**
    * Redirect after save node.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    *
-   * @return Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   redirect to url.
    */
   public static function redirectAfterSaveNode(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/node_layout_builder/src/Form/AddElementForm.php:5

    ---------- begin diff ----------
@@ @@
  * @file
  * AddElementForm.php
  */
-
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\AppendCommand;
 use Drupal\Core\Ajax\CloseDialogCommand;
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   For state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function submitAjax(array &$form, FormStateInterface $form_state) {
     // Get arguments.
@@ @@
     $prefix = '<' . $tag_element . ' class="updated ' . $class . ' ' . $type_element . ' ' . $attributes['class'] . '" id="' . $new_id_element . '" data-id="' . $new_id_element . '" data-parent="' . $parent . '" data-type="nlb_' . $type_element . '" style="' . $styles_element . '">';
     $suffix = '</' . $tag_element . '>';

-    $content = $prefix . render($element) . $suffix;
+    $content = $prefix . \Drupal::service('renderer')->render($element) . $suffix;

     // Response.
     $response = new AjaxResponse();
@@ @@
   /**
    * Close modal form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response.
    */
   public function closeModalForm() {
@@ @@
   /**
    * Get arguments of form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   State form.
    *
    * @return array|mixed
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/node_layout_builder/src/Controller/LayoutElementController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\node_layout_builder\Controller;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\AppendCommand;
 use Drupal\Core\Ajax\CloseDialogCommand;
@@ @@
   /**
    * Form builder interface.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The route match interface.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    *   The current route match.
    */
   protected $routeMatch;
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\node_layout_builder\NodeLayoutBuilderEditor
+   * @var NodeLayoutBuilderEditor
    */
   protected $nlbEditor;

@@ @@
    * @param int $id_element
    *   ID of element.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Title.
    */
   public function getTitle($nid, $type, $parent, $id_element) {
@@ @@
    * @param int|string $id_element
    *   ID element.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function duplicateElement($nid, $parent, $id_element) {
     $data = NodeLayoutBuilderManager::loadDataElement($nid);
@@ @@
     $prefix = '<' . $tag_element . ' class="updated ' . $class . ' ' . $element_duplicate['#type'] . ' ' . $element_duplicate['#attributes']['container']['class'] . '" id="' . $duplicate_id_element . '" data-id="' . $duplicate_id_element . '" data-parent="' . $element_duplicate['#parent'] . '" data-type="nlb_' . $element_duplicate['#type'] . '" style="' . $styles_element . '">';
     $suffix = '</' . $tag_element . '>';

-    $content = $prefix . render($element) . $suffix;
+    $content = $prefix . \Drupal::service('renderer')->render($element) . $suffix;

     $response = new AjaxResponse();
     if ($element_duplicate['#parent'] == 0) {
@@ @@
    * @param string $id_element
    *   Id element.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Data updated.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function removeElement($nid, $id_element) {
     $data = NodeLayoutBuilderManager::loadDataElement($nid);
@@ @@
    * @param int $nid
    *   ID element.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response width redirection to url.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException.
-   * @throws \Drupal\Core\Entity\EntityStorageException.
+   * @throws InvalidPluginDefinitionException .
+   * @throws PluginNotFoundException .
+   * @throws EntityStorageException .
    */
   public function saveDataElement($nid) {
     $uuid = $this->currentUser->id();
@@ @@
    * @param int|string $index
    *   Order of element.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Data updated with new position of element.
    */
   public function sortableDataElement($nid, $from, $to, $index) {
@@ @@
    * @param int $nid
    *   ID entity.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Popup to choose a template.
    */
   public function listTemplates($nid) {
@@ @@
     $response->addCommand(
       new OpenModalDialogCommand(
         $this->t('Choose a template'),
-        render($list_template),
+        \Drupal::service('renderer')->render($list_template),
         [
           'width' => '70%',
           'height' => 'auto',
@@ @@
    * @param int $tid
    *   ID template.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Hanlder ajax command.
    */
   public function addTemplate($nid, $tid) {
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/node_layout_builder/node_layout_builder.module:358

    ---------- begin diff ----------
@@ @@
           $renderer = \Drupal::service('renderer');
           $renderer->addCacheableDependency($image_theme, $file);

-          $variables['content_element'] = render($image_theme);
+          $variables['content_element'] = \Drupal::service('renderer')->render($image_theme);
         }
       }
       break;
@@ @@
         'responsive' => $values['video_youtube']['responsive'],
       ];
       $video = NodeLayoutBuilderHelper::embedVideoYoutube($url, $options);
-      $variables['content_element'] = render($video);
+      $variables['content_element'] = \Drupal::service('renderer')->render($video);
       break;

     case 'audio':
@@ @@
         '#url' => $url,
         '#style' => $style,
       ];
-      $variables['content_element'] = render($audio_player);
+      $variables['content_element'] = \Drupal::service('renderer')->render($audio_player);
       break;

     case 'block':
@@ @@
       $nid = !empty($values['node']) ? $values['node'] : NULL;
       $view_mode = !empty($values['view_mode']) ? $values['view_mode'] : 'teaser';
       $node_output = NodeLayoutBuilderHelper::loadNodeView($nid, $view_mode);
-      $variables['content_element'] = render($node_output);
+      $variables['content_element'] = \Drupal::service('renderer')->render($node_output);
       break;

     case 'field':
@@ @@
       $field_name = $values['entity_field'];
       $field_view = $node->$field_name
         ->view($values['view_mode']);
-      $variables['content_element'] = render($field_view);
+      $variables['content_element'] = \Drupal::service('renderer')->render($field_view);
       break;

     case 'views':
@@ @@
           ],
         ],
       ];
-      $variables['content_element'] = render($map);
+      $variables['content_element'] = \Drupal::service('renderer')->render($map);
       break;
   }
 }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

