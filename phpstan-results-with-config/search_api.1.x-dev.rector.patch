diff --git a/modules/search_api_db/search_api_db.api.php b/modules/search_api_db/search_api_db.api.php
index fcbc4597..c1d1619c 100644
--- a/modules/search_api_db/search_api_db.api.php
+++ b/modules/search_api_db/search_api_db.api.php
@@ -1,25 +1,25 @@
 <?php
 
+use Drupal\Core\Database\Query\SelectInterface;
+use Drupal\search_api\Query\QueryInterface;
 /**
  * @file
  * Hooks provided by the Database Search module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Preprocess a search's database query before it is executed.
  *
  * This allows other modules to alter the DB query before a count query (or
  * facet queries, or other related queries) are constructed from it.
  *
- * @param \Drupal\Core\Database\Query\SelectInterface $db_query
+ * @param SelectInterface $db_query
  *   The database query to be executed for the search. Will have "item_id" and
  *   "score" columns in its result.
- * @param \Drupal\search_api\Query\QueryInterface $query
+ * @param QueryInterface $query
  *   The search query that is being executed.
  *
  * @deprecated in search_api:8.x-1.16 and is removed from search_api:2.0.0.
@@ -28,7 +28,7 @@
  * @see https://www.drupal.org/node/3103591
  * @see \Drupal\search_api_db\Plugin\search_api\backend\Database::preQuery()
  */
-function hook_search_api_db_query_alter(\Drupal\Core\Database\Query\SelectInterface &$db_query, \Drupal\search_api\Query\QueryInterface $query) {
+function hook_search_api_db_query_alter(SelectInterface &$db_query, QueryInterface $query) {
   // If the option was set on the query, add additional SQL conditions.
   if ($custom = $query->getOption('custom_sql_conditions')) {
     foreach ($custom as $condition) {
diff --git a/modules/search_api_db/search_api_db_defaults/search_api_db_defaults.install b/modules/search_api_db/search_api_db_defaults/search_api_db_defaults.install
index e740fb67..97fc4917 100644
--- a/modules/search_api_db/search_api_db_defaults/search_api_db_defaults.install
+++ b/modules/search_api_db/search_api_db_defaults/search_api_db_defaults.install
@@ -18,7 +18,7 @@ function search_api_db_defaults_requirements($phase) {
     // itself, the class autoloader will not be able to find the
     // \Drupal\search_api\IndexListBuilder class on its own. Load it manually.
     if (!class_exists(IndexListBuilder::class)) {
-      $search_api_path = drupal_get_path('module', 'search_api');
+      $search_api_path = \Drupal::service('extension.list.module')->getPath('search_api');
       require_once $search_api_path . '/src/IndexListBuilder.php';
     }
 
diff --git a/modules/search_api_db/search_api_db_defaults/tests/src/Functional/IntegrationTest.php b/modules/search_api_db/search_api_db_defaults/tests/src/Functional/IntegrationTest.php
index 1da19bce..4ed57d83 100644
--- a/modules/search_api_db/search_api_db_defaults/tests/src/Functional/IntegrationTest.php
+++ b/modules/search_api_db/search_api_db_defaults/tests/src/Functional/IntegrationTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\search_api_db_defaults\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\comment\Tests\CommentTestTrait;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -29,21 +32,21 @@ class IntegrationTest extends BrowserTestBase {
   /**
    * A non-admin user used for this test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $authenticatedUser;
 
   /**
    * An admin user used for this test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create user with content access permission to see if the view is
@@ -165,10 +168,10 @@ class IntegrationTest extends BrowserTestBase {
       'search_api_server' => 'default_server',
       'view' => 'search_content',
     ];
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = \Drupal::service('entity_type.manager');
     foreach ($entities_to_remove as $entity_type => $entity_id) {
-      /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
+      /** @var EntityStorageInterface $entity_storage */
       $entity_storage = $entity_type_manager->getStorage($entity_type);
       $entity_storage->resetCache();
       $entities = $entity_storage->loadByProperties(['id' => $entity_id]);
diff --git a/modules/search_api_db/src/DatabaseCompatibility/DatabaseCompatibilityHandlerInterface.php b/modules/search_api_db/src/DatabaseCompatibility/DatabaseCompatibilityHandlerInterface.php
index e13211ca..42040af2 100644
--- a/modules/search_api_db/src/DatabaseCompatibility/DatabaseCompatibilityHandlerInterface.php
+++ b/modules/search_api_db/src/DatabaseCompatibility/DatabaseCompatibilityHandlerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_db\DatabaseCompatibility;
 
+use Drupal\search_api\SearchApiException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\SelectInterface;
 
@@ -17,7 +18,7 @@ interface DatabaseCompatibilityHandlerInterface {
   /**
    * Retrieves the database connection this compatibility handler is based upon.
    *
-   * @return \Drupal\Core\Database\Connection
+   * @return Connection
    *   The database connection.
    */
   public function getDatabase();
@@ -25,7 +26,7 @@ interface DatabaseCompatibilityHandlerInterface {
   /**
    * Creates a clone of this service for the given database.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database of a type compatible with this class.
    *
    * @return static
@@ -43,7 +44,7 @@ interface DatabaseCompatibilityHandlerInterface {
    *   for an entire index), "text" (for an index's fulltext data table) and
    *   "field" (for field-specific tables).
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if any error occurs that should abort the current action. Internal
    *   errors that can be ignored should just be logged.
    */
@@ -74,7 +75,7 @@ interface DatabaseCompatibilityHandlerInterface {
   /**
    * Applies a random sort to the query.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The search query.
    */
   public function orderByRandom(SelectInterface $query);
diff --git a/modules/search_api_db/src/DatabaseCompatibility/GenericDatabase.php b/modules/search_api_db/src/DatabaseCompatibility/GenericDatabase.php
index b083899f..7f72c925 100644
--- a/modules/search_api_db/src/DatabaseCompatibility/GenericDatabase.php
+++ b/modules/search_api_db/src/DatabaseCompatibility/GenericDatabase.php
@@ -14,23 +14,23 @@ class GenericDatabase implements DatabaseCompatibilityHandlerInterface {
   /**
    * The connection to the database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The transliteration service to use.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliterator;
 
   /**
    * Constructs a GenericDatabase object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The connection to the database.
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliterator
+   * @param TransliterationInterface $transliterator
    *   The transliteration service to use.
    */
   public function __construct(Connection $database, TransliterationInterface $transliterator) {
diff --git a/modules/search_api_db/src/Event/QueryPreExecuteEvent.php b/modules/search_api_db/src/Event/QueryPreExecuteEvent.php
index 1e1ff698..edcd8a6a 100644
--- a/modules/search_api_db/src/Event/QueryPreExecuteEvent.php
+++ b/modules/search_api_db/src/Event/QueryPreExecuteEvent.php
@@ -14,23 +14,23 @@ final class QueryPreExecuteEvent extends Event {
   /**
    * The database query to be executed for the search.
    *
-   * @var \Drupal\Core\Database\Query\SelectInterface
+   * @var SelectInterface
    */
   protected $dbQuery;
 
   /**
    * The search query that is being executed.
    *
-   * @var \Drupal\search_api\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $query;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $db_query
+   * @param SelectInterface $db_query
    *   The database query to be executed for the search.
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The search query that is being executed.
    */
   public function __construct(SelectInterface $db_query, QueryInterface $query) {
@@ -43,7 +43,7 @@ final class QueryPreExecuteEvent extends Event {
    *
    * Will have "item_id" and "score" columns in its result.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   The database query.
    */
   public function getDbQuery() {
@@ -53,7 +53,7 @@ final class QueryPreExecuteEvent extends Event {
   /**
    * Sets the database query.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $dbQuery
+   * @param SelectInterface $dbQuery
    *   The new database query.
    *
    * @return $this
@@ -66,7 +66,7 @@ final class QueryPreExecuteEvent extends Event {
   /**
    * Retrieves the search query being executed.
    *
-   * @return \Drupal\search_api\Query\QueryInterface
+   * @return QueryInterface
    *   The search query being executed.
    */
   public function getQuery() {
diff --git a/modules/search_api_db/src/Plugin/search_api/backend/Database.php b/modules/search_api_db/src/Plugin/search_api/backend/Database.php
index 0c2611a8..3ab8099b 100644
--- a/modules/search_api_db/src/Plugin/search_api/backend/Database.php
+++ b/modules/search_api_db/src/Plugin/search_api/backend/Database.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\search_api_db\Plugin\search_api\backend;
 
+use Drupal\Core\Database\Connection;
+use Drupal\search_api\Plugin\search_api\data_type\value\TextTokenInterface;
+use Drupal\search_api\Plugin\search_api\data_type\value\TextValueInterface;
+use Drupal\Core\Database\Query\ConditionInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Component\Utility\Unicode;
@@ -90,63 +94,63 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * The database connection to use for this server.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * DBMS compatibility handler for this type of database.
    *
-   * @var \Drupal\search_api_db\DatabaseCompatibility\DatabaseCompatibilityHandlerInterface
+   * @var DatabaseCompatibilityHandlerInterface
    */
   protected $dbmsCompatibility;
 
   /**
    * The module handler to use.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|null
+   * @var ModuleHandlerInterface|null
    */
   protected $moduleHandler;
 
   /**
    * The config factory to use.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|null
+   * @var ConfigFactoryInterface|null
    */
   protected $configFactory;
 
   /**
    * The data type plugin manager to use.
    *
-   * @var \Drupal\search_api\DataType\DataTypePluginManager
+   * @var DataTypePluginManager
    */
   protected $dataTypePluginManager;
 
   /**
    * The key-value store to use.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected $keyValueStore;
 
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface|null
+   * @var DateFormatterInterface|null
    */
   protected $dateFormatter;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface|null
+   * @var EventDispatcherInterface|null
    */
   protected $eventDispatcher;
 
   /**
    * The data type helper.
    *
-   * @var \Drupal\search_api\Utility\DataTypeHelper|null
+   * @var DataTypeHelper|null
    */
   protected $dataTypeHelper;
 
@@ -221,7 +225,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
         $database_type = $database->databaseType();
         $service_id = "$database_type.search_api_db.database_compatibility";
         if ($container->has($service_id)) {
-          /** @var \Drupal\search_api_db\DatabaseCompatibility\DatabaseCompatibilityHandlerInterface $dbms_compatibility_handler */
+          /** @var DatabaseCompatibilityHandlerInterface $dbms_compatibility_handler */
           $dbms_compatibility_handler = $container->get($service_id);
           $dbms_compatibility_handler = $dbms_compatibility_handler->getCloneForDatabase($database);
         }
@@ -238,7 +242,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Retrieves the database connection used by this backend.
    *
-   * @return \Drupal\Core\Database\Connection
+   * @return Connection
    *   The database connection.
    */
   public function getDatabase() {
@@ -248,7 +252,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Returns the module handler to use for this plugin.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler.
    */
   public function getModuleHandler() {
@@ -258,7 +262,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Sets the module handler to use for this plugin.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to use for this plugin.
    *
    * @return $this
@@ -271,7 +275,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Returns the config factory to use for this plugin.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config factory.
    */
   public function getConfigFactory() {
@@ -281,7 +285,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Sets the config factory to use for this plugin.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory to use for this plugin.
    *
    * @return $this
@@ -294,7 +298,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Retrieves the data type plugin manager.
    *
-   * @return \Drupal\search_api\DataType\DataTypePluginManager
+   * @return DataTypePluginManager
    *   The data type plugin manager.
    */
   public function getDataTypePluginManager() {
@@ -304,7 +308,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Sets the data type plugin manager.
    *
-   * @param \Drupal\search_api\DataType\DataTypePluginManager $data_type_plugin_manager
+   * @param DataTypePluginManager $data_type_plugin_manager
    *   The new data type plugin manager.
    *
    * @return $this
@@ -317,7 +321,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Retrieves the key-value store to use.
    *
-   * @return \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @return KeyValueStoreInterface
    *   The key-value store.
    */
   public function getKeyValueStore() {
@@ -327,7 +331,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Sets the key-value store to use.
    *
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreInterface $key_value_store
+   * @param KeyValueStoreInterface $key_value_store
    *   The key-value store.
    *
    * @return $this
@@ -340,7 +344,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Retrieves the date formatter.
    *
-   * @return \Drupal\Core\Datetime\DateFormatterInterface
+   * @return DateFormatterInterface
    *   The date formatter.
    */
   public function getDateFormatter() {
@@ -350,7 +354,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Sets the date formatter.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The new date formatter.
    *
    * @return $this
@@ -363,7 +367,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Retrieves the event dispatcher.
    *
-   * @return \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @return EventDispatcherInterface
    *   The event dispatcher.
    */
   public function getEventDispatcher() {
@@ -373,7 +377,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Sets the event dispatcher.
    *
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The new event dispatcher.
    *
    * @return $this
@@ -386,7 +390,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Retrieves the data type helper.
    *
-   * @return \Drupal\search_api\Utility\DataTypeHelper
+   * @return DataTypeHelper
    *   The data type helper.
    */
   public function getDataTypeHelper() {
@@ -396,7 +400,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Sets the data type helper.
    *
-   * @param \Drupal\search_api\Utility\DataTypeHelper $data_type_helper
+   * @param DataTypeHelper $data_type_helper
    *   The new data type helper.
    *
    * @return $this
@@ -409,7 +413,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Retrieves the DBMS compatibility handler.
    *
-   * @return \Drupal\search_api_db\DatabaseCompatibility\DatabaseCompatibilityHandlerInterface
+   * @return DatabaseCompatibilityHandlerInterface
    *   The DBMS compatibility handler.
    */
   public function getDbmsCompatibilityHandler() {
@@ -419,7 +423,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Sets the DBMS compatibility handler.
    *
-   * @param \Drupal\search_api_db\DatabaseCompatibility\DatabaseCompatibilityHandlerInterface $handler
+   * @param DatabaseCompatibilityHandlerInterface $handler
    *   The DBMS compatibility handler.
    *
    * @return $this
@@ -775,7 +779,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
    *
    * Used as a helper method in fieldsUpdated().
    *
-   * @param \Drupal\search_api\Item\FieldInterface|null $field
+   * @param FieldInterface|null $field
    *   The field to add. Or NULL if only the initial table with an "item_id"
    *   column should be created.
    * @param array $db
@@ -788,7 +792,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
    *   denormalized table for an entire index) or "field" (for field-specific
    *   tables).
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if creating the table failed.
    */
   protected function createFieldTable(FieldInterface $field = NULL, array $db = [], $type = 'field') {
@@ -896,7 +900,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
    * @return array
    *   Column configurations to use for the field's database column.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if $type is unknown.
    */
   protected function sqlType($type) {
@@ -940,13 +944,13 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Updates the storage tables when the field configuration changes.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index whose fields (might) have changed.
    *
    * @return bool
    *   TRUE if the data needs to be reindexed, FALSE otherwise.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if any exceptions occur internally – for example, in the database
    *   layer.
    */
@@ -1238,9 +1242,9 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
    *
    * Used as a helper method in indexItems().
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which the item is being indexed.
-   * @param \Drupal\search_api\Item\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to index.
    *
    * @throws \Exception
@@ -1327,7 +1331,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
 
           $unique_tokens = [];
           $denormalized_value = '';
-          /** @var \Drupal\search_api\Plugin\search_api\data_type\value\TextTokenInterface $token */
+          /** @var TextTokenInterface $token */
           foreach ($values as $token) {
             $word = $token->getText();
             $score = $token->getBoost() * $item->getBoost();
@@ -1470,13 +1474,13 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
    *   backend.)
    * @param string $original_type
    *   The value's original type.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which this conversion takes place.
    *
    * @return mixed
    *   The converted value.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if $type is unknown.
    */
   protected function convert($value, $type, $original_type, IndexInterface $index) {
@@ -1486,7 +1490,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
     }
     switch ($type) {
       case 'text':
-        /** @var \Drupal\search_api\Plugin\search_api\data_type\value\TextValueInterface $value */
+        /** @var TextValueInterface $value */
         $tokens = $value->getTokens();
         if ($tokens === NULL) {
           $tokens = [];
@@ -1743,16 +1747,16 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
    *
    * Used as a helper method in search() and getAutocompleteSuggestions().
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The search query for which to create the database query.
    * @param array $fields
    *   The internal field information to use.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   A database query object which will return the appropriate results (except
    *   for the range and sorting) for the given search query.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if some illegal query setting (unknown field, etc.) was
    *   encountered.
    */
@@ -1984,10 +1988,10 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
    *   to internal information about them.
    * @param array $all_fields
    *   Internal information about all indexed fields on the index.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index we're searching on.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   A SELECT query returning item_id and score (or only item_id, if
    *   $keys['#negation'] is set).
    */
@@ -2210,9 +2214,9 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Adds item language conditions to the condition group, if applicable.
    *
-   * @param \Drupal\search_api\Query\ConditionGroupInterface $condition_group
+   * @param ConditionGroupInterface $condition_group
    *   The condition group on which to set conditions.
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query to inspect for language settings.
    *
    * @see \Drupal\search_api\Query\QueryInterface::getLanguages()
@@ -2229,19 +2233,19 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
    *
    * Used as a helper method in createDbQuery().
    *
-   * @param \Drupal\search_api\Query\ConditionGroupInterface $conditions
+   * @param ConditionGroupInterface $conditions
    *   The conditions for which a condition should be created.
    * @param array $fields
    *   Internal information about the index's fields.
-   * @param \Drupal\Core\Database\Query\SelectInterface $db_query
+   * @param SelectInterface $db_query
    *   The database query to which the condition will be added.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index we're searching on.
    *
-   * @return \Drupal\Core\Database\Query\ConditionInterface|null
+   * @return ConditionInterface|null
    *   The condition to set on the query, or NULL if none is necessary.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an unknown field or operator was used in one of the contained
    *   conditions.
    */
@@ -2359,7 +2363,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
    * @param array $field
    *   The field information array. The "table" key should contain the table
    *   name to which a join should be made.
-   * @param \Drupal\Core\Database\Query\SelectInterface $db_query
+   * @param SelectInterface $db_query
    *   The database query used.
    * @param bool $new_join
    *   (optional) If TRUE, a join is done even if the table was already joined
@@ -2398,10 +2402,10 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
    * This allows subclasses to alter the DB query before a count query (or facet
    * queries, or other related queries) are constructed from it.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $db_query
+   * @param SelectInterface $db_query
    *   The database query to be executed for the search. Will have "item_id" and
    *   "score" columns in its result.
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The search query that is being executed.
    *
    * @see hook_search_api_db_query_alter()
@@ -2411,15 +2415,15 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Adds the appropriate "ORDER BY" statements to a search database query.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The search query whose sorts should be applied.
-   * @param \Drupal\Core\Database\Query\SelectInterface $db_query
+   * @param SelectInterface $db_query
    *   The database query constructed for the search.
    * @param string[][] $fields
    *   An array containing information about the internal server storage of the
    *   indexed fields.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an illegal sort was specified.
    */
   protected function setQuerySort(QueryInterface $query, SelectInterface $db_query, array $fields) {
@@ -2477,9 +2481,9 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Computes facets for a search query.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The search query for which facets should be computed.
-   * @param \Drupal\Core\Database\Query\SelectInterface $db_query
+   * @param SelectInterface $db_query
    *   A database select query which returns all results of that search query.
    * @param int|null $result_count
    *   (optional) The total number of results of the search query, if known.
@@ -2625,7 +2629,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
    * Will return the name of a table containing the item IDs of all results, or
    * FALSE on failure.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $db_query
+   * @param SelectInterface $db_query
    *   The select query whose results should be stored in the temporary table.
    *
    * @return string|false
@@ -2783,7 +2787,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
         continue;
       }
 
-      /** @var \Drupal\Core\Database\Query\SelectInterface|null $word_query */
+      /** @var SelectInterface|null $word_query */
       $word_query = NULL;
       foreach ($fulltext_fields as $field) {
         if (!isset($fields[$field]) || !$this->getDataTypeHelper()->isTextType($fields[$field]['type'])) {
@@ -2837,7 +2841,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Retrieves the internal field information.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index whose fields should be retrieved.
    *
    * @return array[]
@@ -2852,7 +2856,7 @@ class Database extends BackendPluginBase implements AutocompleteBackendInterface
   /**
    * Retrieves the database info for the given index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
    *
    * @return array
diff --git a/modules/search_api_db/src/Tests/Update/SearchApiDbUpdate8102Test.php b/modules/search_api_db/src/Tests/Update/SearchApiDbUpdate8102Test.php
index fc54329b..317704c0 100644
--- a/modules/search_api_db/src/Tests/Update/SearchApiDbUpdate8102Test.php
+++ b/modules/search_api_db/src/Tests/Update/SearchApiDbUpdate8102Test.php
@@ -20,7 +20,7 @@ class SearchApiDbUpdate8102Test extends UpdatePathTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // We need to manually set our entity types as "installed".
diff --git a/modules/search_api_db/tests/src/Kernel/AutocompleteTest.php b/modules/search_api_db/tests/src/Kernel/AutocompleteTest.php
index 8868d140..a3549e11 100644
--- a/modules/search_api_db/tests/src/Kernel/AutocompleteTest.php
+++ b/modules/search_api_db/tests/src/Kernel/AutocompleteTest.php
@@ -54,7 +54,7 @@ class AutocompleteTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->installSchema('search_api', ['search_api_item']);
@@ -92,7 +92,7 @@ class AutocompleteTest extends KernelTestBase {
     /** @var \Drupal\search_api_autocomplete\SearchInterface $autocomplete */
     $autocomplete = Search::load('search_api_db_test_autocomplete');
     $index = $autocomplete->getIndex();
-    /** @var \Drupal\search_api_db\Plugin\search_api\backend\Database $backend */
+    /** @var Database $backend */
     $backend = $index->getServerInstance()->getBackend();
 
     $this->assertInstanceOf(Database::class, $backend);
diff --git a/modules/search_api_db/tests/src/Kernel/BackendTest.php b/modules/search_api_db/tests/src/Kernel/BackendTest.php
index 68234e2c..2e63586c 100644
--- a/modules/search_api_db/tests/src/Kernel/BackendTest.php
+++ b/modules/search_api_db/tests/src/Kernel/BackendTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\search_api_db\Kernel;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\search_api\ServerInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Database\Database as CoreDatabase;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -57,14 +59,14 @@ class BackendTest extends BackendTestBase {
    *
    * Will throw expections whenever a warning or error is logged.
    *
-   * @var \Drupal\Tests\search_api\Kernel\TestLogger
+   * @var TestLogger
    */
   protected $logger;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create a dummy table that will cause a naming conflict with the backend's
@@ -202,7 +204,7 @@ class BackendTest extends BackendTestBase {
    * Checks whether changes to the index's fields are picked up by the server.
    */
   protected function updateIndex() {
-    /** @var \Drupal\search_api\IndexInterface $index */
+    /** @var IndexInterface $index */
     $index = $this->getIndex();
 
     // Remove a field from the index and check if the change is matched in the
@@ -277,7 +279,7 @@ class BackendTest extends BackendTestBase {
    * @param string $match_mode
    *   The matching mode to set – "words", "partial" or "prefix".
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setServerMatchMode($match_mode = 'partial') {
     $server = $this->getServer();
@@ -573,7 +575,7 @@ class BackendTest extends BackendTestBase {
    * {@inheritdoc}
    */
   protected function checkSecondServer() {
-    /** @var \Drupal\search_api\ServerInterface $second_server */
+    /** @var ServerInterface $second_server */
     $second_server = Server::create([
       'id' => 'test2',
       'backend' => 'search_api_db',
@@ -1102,15 +1104,15 @@ class BackendTest extends BackendTestBase {
   /**
    * Indexes an item directly.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index to index the item on.
-   * @param \Drupal\search_api\Item\ItemInterface $item
+   * @param ItemInterface $item
    *   The item.
    *
    * @return string[]
    *   The successfully indexed IDs.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if indexing failed.
    */
   protected function indexItemDirectly(IndexInterface $index, ItemInterface $item) {
diff --git a/search_api.api.php b/search_api.api.php
index 9e36b45c..f58a846c 100644
--- a/search_api.api.php
+++ b/search_api.api.php
@@ -1,5 +1,13 @@
 <?php
 
+use Drupal\search_api\ServerInterface;
+use Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend;
+use Drupal\search_api\IndexInterface;
+use Drupal\search_api\Item\ItemInterface;
+use Drupal\search_api\Utility\Utility;
+use Drupal\search_api\Query\QueryInterface;
+use Drupal\search_api\Query\ResultSetInterface;
+use Drupal\Core\Database\Database;
 /**
  * @file
  * Hooks provided by the Search API module.
@@ -39,7 +47,7 @@ function hook_search_api_backend_info_alter(array &$backend_info) {
  *
  * @param string[] $features
  *   The features supported by the server's backend.
- * @param \Drupal\search_api\ServerInterface $server
+ * @param ServerInterface $server
  *   The search server in question.
  *
  * @deprecated in search_api:8.x-1.14 and is removed from search_api:2.0.0.
@@ -48,8 +56,8 @@ function hook_search_api_backend_info_alter(array &$backend_info) {
  * @see https://www.drupal.org/node/3059866
  * @see \Drupal\search_api\Backend\BackendSpecificInterface::getSupportedFeatures()
  */
-function hook_search_api_server_features_alter(array &$features, \Drupal\search_api\ServerInterface $server) {
-  if ($server->getBackend() instanceof \Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend) {
+function hook_search_api_server_features_alter(array &$features, ServerInterface $server) {
+  if ($server->getBackend() instanceof SearchApiSolrBackend) {
     $features[] = 'my_custom_feature';
   }
 }
@@ -271,9 +279,9 @@ function hook_search_api_views_field_handler_mapping_alter(array &$mapping) {
  * If your module will use this hook to reject certain items from indexing,
  * please document this clearly to avoid confusion.
  *
- * @param \Drupal\search_api\IndexInterface $index
+ * @param IndexInterface $index
  *   The search index on which items will be indexed.
- * @param \Drupal\search_api\Item\ItemInterface[] $items
+ * @param ItemInterface[] $items
  *   The items that will be indexed.
  *
  * @deprecated in search_api:8.x-1.14 and is removed from search_api:2.0.0.
@@ -281,9 +289,9 @@ function hook_search_api_views_field_handler_mapping_alter(array &$mapping) {
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_index_items_alter(\Drupal\search_api\IndexInterface $index, array &$items) {
+function hook_search_api_index_items_alter(IndexInterface $index, array &$items) {
   foreach ($items as $item_id => $item) {
-    list(, $raw_id) = \Drupal\search_api\Utility\Utility::splitCombinedId($item->getId());
+    list(, $raw_id) = Utility::splitCombinedId($item->getId());
     if ($raw_id % 5 == 0) {
       unset($items[$item_id]);
     }
@@ -299,7 +307,7 @@ function hook_search_api_index_items_alter(\Drupal\search_api\IndexInterface $in
 /**
  * React after items were indexed.
  *
- * @param \Drupal\search_api\IndexInterface $index
+ * @param IndexInterface $index
  *   The used index.
  * @param array $item_ids
  *   An array containing the successfully indexed items' IDs.
@@ -309,7 +317,7 @@ function hook_search_api_index_items_alter(\Drupal\search_api\IndexInterface $in
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_items_indexed(\Drupal\search_api\IndexInterface $index, array $item_ids) {
+function hook_search_api_items_indexed(IndexInterface $index, array $item_ids) {
   if ($index->isValidDatasource('entity:node')) {
     // Note that this is just an example, and would only work if there are only
     // nodes indexed in that index (and even then the printed IDs would probably
@@ -324,7 +332,7 @@ function hook_search_api_items_indexed(\Drupal\search_api\IndexInterface $index,
  *
  * The hook is invoked after all enabled processors have preprocessed the query.
  *
- * @param \Drupal\search_api\Query\QueryInterface $query
+ * @param QueryInterface $query
  *   The query that will be executed.
  *
  * @deprecated in search_api:8.x-1.14 and is removed from search_api:2.0.0.
@@ -332,7 +340,7 @@ function hook_search_api_items_indexed(\Drupal\search_api\IndexInterface $index,
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_query_alter(\Drupal\search_api\Query\QueryInterface $query) {
+function hook_search_api_query_alter(QueryInterface $query) {
   // Do not run for queries with a certain tag.
   if ($query->hasTag('example_tag')) {
     return;
@@ -353,7 +361,7 @@ function hook_search_api_query_alter(\Drupal\search_api\Query\QueryInterface $qu
  *
  * The hook is invoked after all enabled processors have preprocessed the query.
  *
- * @param \Drupal\search_api\Query\QueryInterface $query
+ * @param QueryInterface $query
  *   The query that will be executed.
  *
  * @deprecated in search_api:8.x-1.14 and is removed from search_api:2.0.0.
@@ -361,7 +369,7 @@ function hook_search_api_query_alter(\Drupal\search_api\Query\QueryInterface $qu
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_query_TAG_alter(\Drupal\search_api\Query\QueryInterface $query) {
+function hook_search_api_query_TAG_alter(QueryInterface $query) {
   // Exclude the node with ID 10 from the search results.
   $fields = $query->getIndex()->getFields();
   foreach ($query->getIndex()->getDatasources() as $datasource_id => $datasource) {
@@ -379,7 +387,7 @@ function hook_search_api_query_TAG_alter(\Drupal\search_api\Query\QueryInterface
  * The hook is invoked after all enabled processors have postprocessed the
  * results.
  *
- * @param \Drupal\search_api\Query\ResultSetInterface $results
+ * @param ResultSetInterface $results
  *   The search results to alter.
  *
  * @deprecated in search_api:8.x-1.14 and is removed from search_api:2.0.0.
@@ -387,7 +395,7 @@ function hook_search_api_query_TAG_alter(\Drupal\search_api\Query\QueryInterface
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_results_alter(\Drupal\search_api\Query\ResultSetInterface &$results) {
+function hook_search_api_results_alter(ResultSetInterface &$results) {
   $results->setExtraData('example_hook_invoked', microtime(TRUE));
 }
 
@@ -397,7 +405,7 @@ function hook_search_api_results_alter(\Drupal\search_api\Query\ResultSetInterfa
  * The hook is invoked after all enabled processors have postprocessed the
  * results.
  *
- * @param \Drupal\search_api\Query\ResultSetInterface $results
+ * @param ResultSetInterface $results
  *   The search results to alter.
  *
  * @deprecated in search_api:8.x-1.14 and is removed from search_api:2.0.0.
@@ -405,14 +413,14 @@ function hook_search_api_results_alter(\Drupal\search_api\Query\ResultSetInterfa
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_results_TAG_alter(\Drupal\search_api\Query\ResultSetInterface &$results) {
+function hook_search_api_results_TAG_alter(ResultSetInterface &$results) {
   $results->setExtraData('example_hook_invoked', microtime(TRUE));
 }
 
 /**
  * React when a search index was scheduled for reindexing.
  *
- * @param \Drupal\search_api\IndexInterface $index
+ * @param IndexInterface $index
  *   The index scheduled for reindexing.
  * @param bool $clear
  *   Boolean indicating whether the index was also cleared.
@@ -422,8 +430,8 @@ function hook_search_api_results_TAG_alter(\Drupal\search_api\Query\ResultSetInt
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_index_reindex(\Drupal\search_api\IndexInterface $index, $clear = FALSE) {
-  \Drupal\Core\Database\Database::getConnection()->insert('example_search_index_reindexed')
+function hook_search_api_index_reindex(IndexInterface $index, $clear = FALSE) {
+  Database::getConnection()->insert('example_search_index_reindexed')
     ->fields([
       'index' => $index->id(),
       'clear' => $clear,
diff --git a/search_api.drush.inc b/search_api.drush.inc
index e1b72a94..73443b33 100644
--- a/search_api.drush.inc
+++ b/search_api.drush.inc
@@ -439,7 +439,7 @@ function drush_search_api_set_index_server($index_id = NULL, $server_id = NULL)
 /**
  * Returns an instance of the command helper.
  *
- * @return \Drupal\search_api\Utility\CommandHelper
+ * @return CommandHelper
  *   An instance of the command helper class.
  */
 function _search_api_drush_command_helper() {
diff --git a/search_api.install b/search_api.install
index 6eae352d..ed24cccf 100644
--- a/search_api.install
+++ b/search_api.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\search_api\ServerInterface;
 /**
  * @file
  * Install, update and uninstall functions for the Search API module.
@@ -86,7 +87,7 @@ function search_api_requirements($phase) {
       ];
     }
 
-    /** @var \Drupal\search_api\ServerInterface[] $servers */
+    /** @var ServerInterface[] $servers */
     $servers = Server::loadMultiple();
     $unavailable_servers = [];
     foreach ($servers as $server) {
diff --git a/search_api.module b/search_api.module
index ca17f687..ffe9a7e5 100644
--- a/search_api.module
+++ b/search_api.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\comment\CommentInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 /**
  * @file
  * Provides a rich framework for creating searches.
@@ -64,7 +66,7 @@ function search_api_cron() {
     'status' => TRUE,
   ];
   $index_storage = \Drupal::entityTypeManager()->getStorage('search_api_index');
-  /** @var \Drupal\search_api\IndexInterface[] $indexes */
+  /** @var IndexInterface[] $indexes */
   $indexes = $index_storage->loadByProperties($conditions);
   if (!$indexes) {
     return;
@@ -262,7 +264,7 @@ function search_api_entity_delete(EntityInterface $entity) {
  * access" processor.
  */
 function search_api_node_access_records_alter(array &$grants, NodeInterface $node) {
-  /** @var \Drupal\search_api\IndexInterface $index */
+  /** @var IndexInterface $index */
   foreach (Index::loadMultiple() as $index) {
     if (!$index->hasValidTracker() || !$index->status()) {
       continue;
@@ -291,7 +293,7 @@ function search_api_node_access_records_alter(array &$grants, NodeInterface $nod
               ->condition('entity_id', (int) $node->id())
               ->condition('entity_type', 'node')
               ->execute();
-            /** @var \Drupal\comment\CommentInterface[] $comments */
+            /** @var CommentInterface[] $comments */
             $comments = Comment::loadMultiple($comment_ids);
           }
           $item_ids = [];
@@ -466,7 +468,7 @@ function search_api_view_delete(ViewEntityInterface $view) {
 /**
  * Reacts to a view CRUD event.
  *
- * @param \Drupal\views\ViewEntityInterface $view
+ * @param ViewEntityInterface $view
  *   The view that was created, changed or deleted.
  */
 function _search_api_view_crud_event(ViewEntityInterface $view) {
@@ -498,7 +500,7 @@ function _search_api_views_get_allowed_values($entity_type, $bundle, $field_name
   $field_manager = \Drupal::getContainer()->get('entity_field.manager');
   $field_definitions = $field_manager->getFieldDefinitions($entity_type, $bundle);
   if (!empty($field_definitions[$field_name])) {
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+    /** @var FieldDefinitionInterface $field_definition */
     $field_definition = $field_definitions[$field_name];
     $options = $field_definition->getSetting('allowed_values');
     if ($options) {
diff --git a/search_api.theme.inc b/search_api.theme.inc
index bde23f87..41035dfe 100644
--- a/search_api.theme.inc
+++ b/search_api.theme.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\search_api\ServerInterface;
+use Drupal\search_api\IndexInterface;
 /**
  * @file
  * Defines theme functions for the Search API module.
@@ -31,7 +33,7 @@ function template_preprocess_search_api_admin_fields_table(array &$variables) {
     foreach (Element::children($form['fields']) as $name) {
       $row = [];
       foreach (Element::children($form['fields'][$name]) as $field) {
-        if ($cell = render($form['fields'][$name][$field])) {
+        if ($cell = \Drupal::service('renderer')->render($form['fields'][$name][$field])) {
           $row[] = $cell;
         }
       }
@@ -159,7 +161,7 @@ function template_preprocess_search_api_form_item_list(array &$variables) {
  */
 function template_preprocess_search_api_server(array &$variables) {
   // Get the search server.
-  /** @var \Drupal\search_api\ServerInterface $server */
+  /** @var ServerInterface $server */
   $server = $variables['server'];
 
   if (($description = $server->getDescription())) {
@@ -231,7 +233,7 @@ function template_preprocess_search_api_server(array &$variables) {
   // Check if the indexes variable contains links.
   if ($indexes['#links']) {
     $label = t('Search indexes');
-    $info = render($indexes);
+    $info = \Drupal::service('renderer')->render($indexes);
     $classes[] = 'search-api-server-summary--indexes';
     $rows[] = Utility::deepCopy($row);
     $classes = [];
@@ -272,7 +274,7 @@ function template_preprocess_search_api_server(array &$variables) {
  */
 function template_preprocess_search_api_index(array &$variables) {
   // Get the index.
-  /** @var \Drupal\search_api\IndexInterface $index */
+  /** @var IndexInterface $index */
   $index = $variables['index'];
   $server = $index->hasValidServer() ? $index->getServerInstance() : NULL;
   $tracker = $index->hasValidTracker() ? $index->getTrackerInstance() : NULL;
diff --git a/search_api.views.inc b/search_api.views.inc
index 4714a999..9ae943a3 100644
--- a/search_api.views.inc
+++ b/search_api.views.inc
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\search_api\DataType\DataTypeInterface;
+use Drupal\search_api\Item\Field;
+use Drupal\Core\Field\FieldDefinitionInterface;
 /**
  * @file
  * Views hook implementations for the Search API module.
@@ -39,7 +42,7 @@ use Drupal\search_api\Utility\Utility;
 function search_api_views_data() {
   $data = [];
 
-  /** @var \Drupal\search_api\IndexInterface $index */
+  /** @var IndexInterface $index */
   foreach (Index::loadMultiple() as $index) {
     try {
       // Fill in base data.
@@ -125,7 +128,7 @@ function search_api_views_data() {
 function search_api_views_plugins_cache_alter(array &$plugins) {
   // Collect all base tables provided by this module.
   $bases = [];
-  /** @var \Drupal\search_api\IndexInterface $index */
+  /** @var IndexInterface $index */
   foreach (Index::loadMultiple() as $index) {
     $bases[] = 'search_api_index_' . $index->id();
   }
@@ -147,7 +150,7 @@ function search_api_views_plugins_cache_alter(array &$plugins) {
 function search_api_views_plugins_row_alter(array &$plugins) {
   // Collect all base tables provided by this module.
   $bases = [];
-  /** @var \Drupal\search_api\IndexInterface $index */
+  /** @var IndexInterface $index */
   foreach (Index::loadMultiple() as $index) {
     $bases[] = 'search_api_index_' . $index->id();
   }
@@ -186,7 +189,7 @@ function _search_api_views_find_field_alias($field_id, array &$table) {
 /**
  * Returns the Views handlers to use for a given field.
  *
- * @param \Drupal\search_api\Item\FieldInterface $field
+ * @param FieldInterface $field
  *   The field to add to the definition.
  *
  * @return array
@@ -224,7 +227,7 @@ function _search_api_views_get_handlers(FieldInterface $field) {
     }
 
     $types[] = $field->getType();
-    /** @var \Drupal\search_api\DataType\DataTypeInterface $data_type */
+    /** @var DataTypeInterface $data_type */
     $data_type = \Drupal::service('plugin.manager.search_api.data_type')->createInstance($field->getType());
     if (!$data_type->isDefault()) {
       $types[] = $data_type->getFallbackType();
@@ -418,14 +421,14 @@ function _search_api_views_handler_mapping() {
  *
  * @param string $type
  *   The type of field, as defined in _search_api_views_handler_mapping().
- * @param \Drupal\search_api\Item\FieldInterface $field
+ * @param FieldInterface $field
  *   The field whose handler definitions are being created.
  * @param array $definitions
  *   The handler definitions for the field, as a reference.
  * @param string|null $sub_type
  *   (optional) If applicable, the field's sub-type.
  *
- * @throws \Drupal\search_api\SearchApiException
+ * @throws SearchApiException
  *   Thrown if the field's data definition could not be retrieved.
  */
 function _search_api_views_handler_adjustments($type, FieldInterface $field, array &$definitions, string $sub_type = NULL) {
@@ -479,7 +482,7 @@ function _search_api_views_handler_adjustments($type, FieldInterface $field, arr
  *
  * @param array $table
  *   The existing Views data table definition.
- * @param \Drupal\search_api\IndexInterface $index
+ * @param IndexInterface $index
  *   The index for which the Views data table is created.
  */
 function _search_api_views_data_special_fields(array &$table, IndexInterface $index) {
@@ -597,7 +600,7 @@ function _search_api_views_data_special_fields(array &$table, IndexInterface $in
   // whether they contain only terms of a certain vocabulary, keying that
   // information by vocabulary for later ease of use.
   $vocabulary_fields = [];
-  /** @var \Drupal\search_api\Item\Field $field */
+  /** @var Field $field */
   foreach ($index->getFields() as $field_id => $field) {
     // Search for taxonomy term reference fields, and catch problems early on.
     try {
@@ -629,7 +632,7 @@ function _search_api_views_data_special_fields(array &$table, IndexInterface $in
         ->getFieldDefinitions($entity_type_id, $bundle_id);
       // Check if this bundle has the taxonomy entity reference field.
       if (array_key_exists($field->getFieldIdentifier(), $bundle_fields)) {
-        /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+        /** @var FieldDefinitionInterface $field_definition */
         $field_definition = $bundle_fields[$field->getFieldIdentifier()];
         $bundle_settings = $field_definition->getSettings();
         if (!empty($bundle_settings['handler_settings']['target_bundles'])) {
@@ -675,7 +678,7 @@ function _search_api_views_data_special_fields(array &$table, IndexInterface $in
 /**
  * Creates a Views table definition for one datasource of an index.
  *
- * @param \Drupal\search_api\Datasource\DatasourceInterface $datasource
+ * @param DatasourceInterface $datasource
  *   The datasource for which to create a table definition.
  * @param array $data
  *   The existing Views data definitions. Passed by reference so additionally
@@ -763,7 +766,7 @@ function _search_api_views_entity_type_table($entity_type_id, array &$data) {
 /**
  * Adds field and relationship handlers for the given properties.
  *
- * @param \Drupal\Core\TypedData\DataDefinitionInterface[] $properties
+ * @param DataDefinitionInterface[] $properties
  *   The properties for which handlers should be added.
  * @param array $table
  *   The existing Views data table definition, passed by reference.
@@ -850,7 +853,7 @@ function _search_api_views_add_handlers_for_properties(array $properties, array
 /**
  * Computes a handler definition for the given property.
  *
- * @param \Drupal\Core\TypedData\DataDefinitionInterface $property
+ * @param DataDefinitionInterface $property
  *   The property definition.
  * @param string|null $property_path
  *   (optional) The property path of the property. If set, it will be used for
diff --git a/src/Annotation/SearchApiBackend.php b/src/Annotation/SearchApiBackend.php
index 7e1d2d76..0e231c87 100644
--- a/src/Annotation/SearchApiBackend.php
+++ b/src/Annotation/SearchApiBackend.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -28,7 +29,7 @@ class SearchApiBackend extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -37,7 +38,7 @@ class SearchApiBackend extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Annotation/SearchApiDataType.php b/src/Annotation/SearchApiDataType.php
index 73b3ee96..5eb25729 100644
--- a/src/Annotation/SearchApiDataType.php
+++ b/src/Annotation/SearchApiDataType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -28,7 +29,7 @@ class SearchApiDataType extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -37,7 +38,7 @@ class SearchApiDataType extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Annotation/SearchApiDatasource.php b/src/Annotation/SearchApiDatasource.php
index 127bc860..f48673b3 100644
--- a/src/Annotation/SearchApiDatasource.php
+++ b/src/Annotation/SearchApiDatasource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class SearchApiDatasource extends Plugin {
   /**
    * The human-readable name of the datasource plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -35,7 +36,7 @@ class SearchApiDatasource extends Plugin {
   /**
    * The description of the datasource.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/SearchApiDisplay.php b/src/Annotation/SearchApiDisplay.php
index 424c2656..b1a7c1e3 100644
--- a/src/Annotation/SearchApiDisplay.php
+++ b/src/Annotation/SearchApiDisplay.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -28,7 +29,7 @@ class SearchApiDisplay extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -37,7 +38,7 @@ class SearchApiDisplay extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Annotation/SearchApiParseMode.php b/src/Annotation/SearchApiParseMode.php
index 3a343ce3..cec790ad 100644
--- a/src/Annotation/SearchApiParseMode.php
+++ b/src/Annotation/SearchApiParseMode.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -28,7 +29,7 @@ class SearchApiParseMode extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -37,7 +38,7 @@ class SearchApiParseMode extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Annotation/SearchApiProcessor.php b/src/Annotation/SearchApiProcessor.php
index 79d92ea7..b87321f9 100644
--- a/src/Annotation/SearchApiProcessor.php
+++ b/src/Annotation/SearchApiProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -28,7 +29,7 @@ class SearchApiProcessor extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -37,7 +38,7 @@ class SearchApiProcessor extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Annotation/SearchApiTracker.php b/src/Annotation/SearchApiTracker.php
index 32accefa..2b44d3f8 100644
--- a/src/Annotation/SearchApiTracker.php
+++ b/src/Annotation/SearchApiTracker.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -28,7 +29,7 @@ class SearchApiTracker extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -37,7 +38,7 @@ class SearchApiTracker extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Backend/BackendInterface.php b/src/Backend/BackendInterface.php
index 75d7259f..08985d28 100644
--- a/src/Backend/BackendInterface.php
+++ b/src/Backend/BackendInterface.php
@@ -23,7 +23,7 @@ interface BackendInterface extends ConfigurablePluginInterface, BackendSpecificI
   /**
    * Retrieves the server entity for this backend.
    *
-   * @return \Drupal\search_api\ServerInterface
+   * @return ServerInterface
    *   The server entity.
    */
   public function getServer();
@@ -31,7 +31,7 @@ interface BackendInterface extends ConfigurablePluginInterface, BackendSpecificI
   /**
    * Sets the server entity for this backend.
    *
-   * @param \Drupal\search_api\ServerInterface $server
+   * @param ServerInterface $server
    *   The server entity.
    *
    * @return $this
diff --git a/src/Backend/BackendPluginBase.php b/src/Backend/BackendPluginBase.php
index bf4b5754..273705dd 100644
--- a/src/Backend/BackendPluginBase.php
+++ b/src/Backend/BackendPluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Backend;
 
+use Drupal\search_api\Item\FieldInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\search_api\Entity\Server;
 use Drupal\search_api\Item\ItemInterface;
@@ -48,7 +49,7 @@ abstract class BackendPluginBase extends ConfigurablePluginBase implements Backe
   /**
    * The server this backend is configured for.
    *
-   * @var \Drupal\search_api\ServerInterface
+   * @var ServerInterface
    */
   protected $server;
 
@@ -64,14 +65,14 @@ abstract class BackendPluginBase extends ConfigurablePluginBase implements Backe
   /**
    * The fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelper|null
+   * @var FieldsHelper|null
    */
   protected $fieldsHelper;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface|null
+   * @var MessengerInterface|null
    */
   protected $messenger;
 
@@ -102,7 +103,7 @@ abstract class BackendPluginBase extends ConfigurablePluginBase implements Backe
   /**
    * Retrieves the fields helper.
    *
-   * @return \Drupal\search_api\Utility\FieldsHelper
+   * @return FieldsHelper
    *   The fields helper.
    */
   public function getFieldsHelper() {
@@ -112,7 +113,7 @@ abstract class BackendPluginBase extends ConfigurablePluginBase implements Backe
   /**
    * Sets the fields helper.
    *
-   * @param \Drupal\search_api\Utility\FieldsHelper $fields_helper
+   * @param FieldsHelper $fields_helper
    *   The new fields helper.
    *
    * @return $this
@@ -125,7 +126,7 @@ abstract class BackendPluginBase extends ConfigurablePluginBase implements Backe
   /**
    * Retrieves the messenger.
    *
-   * @return \Drupal\Core\Messenger\MessengerInterface
+   * @return MessengerInterface
    *   The messenger.
    */
   public function getMessenger() {
@@ -135,7 +136,7 @@ abstract class BackendPluginBase extends ConfigurablePluginBase implements Backe
   /**
    * Sets the messenger.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The new messenger.
    *
    * @return $this
@@ -270,14 +271,14 @@ abstract class BackendPluginBase extends ConfigurablePluginBase implements Backe
   /**
    * Creates dummy field objects for the "magic" fields present for every index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to create the fields. (Needed since field objects
    *   always need an index set.)
-   * @param \Drupal\search_api\Item\ItemInterface|null $item
+   * @param ItemInterface|null $item
    *   (optional) If given, an item whose data should be used for the fields'
    *   values.
    *
-   * @return \Drupal\search_api\Item\FieldInterface[]
+   * @return FieldInterface[]
    *   An array of field objects for all "magic" fields, keyed by field IDs.
    */
   protected function getSpecialFields(IndexInterface $index, ItemInterface $item = NULL) {
@@ -307,7 +308,7 @@ abstract class BackendPluginBase extends ConfigurablePluginBase implements Backe
    * @param string $operator
    *   The operator in question.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the operator is not known.
    *
    * @see \Drupal\search_api\Query\ConditionSetInterface::addCondition()
@@ -367,7 +368,7 @@ abstract class BackendPluginBase extends ConfigurablePluginBase implements Backe
    * If a specific backend supports any "virtual" fulltext fields not listed in
    * the index, it should override this method to add them, if appropriate.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The search query.
    *
    * @return string[]
diff --git a/src/Backend/BackendPluginManager.php b/src/Backend/BackendPluginManager.php
index 135e42b4..81bad72f 100644
--- a/src/Backend/BackendPluginManager.php
+++ b/src/Backend/BackendPluginManager.php
@@ -25,11 +25,11 @@ class BackendPluginManager extends SearchApiPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EventDispatcherInterface $eventDispatcher) {
diff --git a/src/Backend/BackendSpecificInterface.php b/src/Backend/BackendSpecificInterface.php
index 393e4451..6b5bc13f 100644
--- a/src/Backend/BackendSpecificInterface.php
+++ b/src/Backend/BackendSpecificInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api\Backend;
 
+use Drupal\search_api\Item\FieldInterface;
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api\Item\ItemInterface;
 use Drupal\search_api\IndexInterface;
 use Drupal\search_api\Query\QueryInterface;
 
@@ -97,10 +100,10 @@ interface BackendSpecificInterface {
    * Fields returned here are expected to work correctly with this server when
    * used in query conditions, sorts or similar places.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which fields are being determined.
    *
-   * @return \Drupal\search_api\Item\FieldInterface[]
+   * @return FieldInterface[]
    *   An array of additional fields that are available for this index, keyed by
    *   their field IDs. The field IDs should always start with "search_api_"
    *   (avoiding the special field IDs defined by
@@ -115,10 +118,10 @@ interface BackendSpecificInterface {
    * If the index was already added to the server, the object should treat this
    * as if removeIndex() and then addIndex() were called.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index to add.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurred while adding the index.
    */
   public function addIndex(IndexInterface $index);
@@ -129,10 +132,10 @@ interface BackendSpecificInterface {
    * If any user action is necessary as a result of this, the method should
    * set a message to notify the user.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The updated index.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurred while reacting to the change.
    */
   public function updateIndex(IndexInterface $index);
@@ -150,11 +153,11 @@ interface BackendSpecificInterface {
    * Implementations of this method should also check whether
    * $index->isReadOnly() and don't delete any indexed data if it is.
    *
-   * @param \Drupal\search_api\IndexInterface|string $index
+   * @param IndexInterface|string $index
    *   Either an object representing the index to remove, or its ID (if the
    *   index was completely deleted).
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurred while removing the index.
    */
   public function removeIndex($index);
@@ -162,15 +165,15 @@ interface BackendSpecificInterface {
   /**
    * Indexes the specified items.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index for which items should be indexed.
-   * @param \Drupal\search_api\Item\ItemInterface[] $items
+   * @param ItemInterface[] $items
    *   An array of items to be indexed, keyed by their item IDs.
    *
    * @return string[]
    *   The IDs of all items that were successfully indexed.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if indexing was prevented by a fundamental configuration error.
    */
   public function indexItems(IndexInterface $index, array $items);
@@ -178,12 +181,12 @@ interface BackendSpecificInterface {
   /**
    * Deletes the specified items from the index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index from which items should be deleted.
    * @param string[] $item_ids
    *   The IDs of the deleted items.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurred while trying to delete the items.
    */
   public function deleteItems(IndexInterface $index, array $item_ids);
@@ -191,13 +194,13 @@ interface BackendSpecificInterface {
   /**
    * Deletes all the items from the index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which items should be deleted.
    * @param string|null $datasource_id
    *   (optional) If given, only delete items from the datasource with the
    *   given ID.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurred while trying to delete indexed items.
    */
   public function deleteAllIndexItems(IndexInterface $index, $datasource_id = NULL);
@@ -205,10 +208,10 @@ interface BackendSpecificInterface {
   /**
    * Executes a search on this server.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query to execute.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error prevented the search from completing.
    */
   public function search(QueryInterface $query);
diff --git a/src/Commands/SearchApiCommands.php b/src/Commands/SearchApiCommands.php
index 978042cc..e5697101 100644
--- a/src/Commands/SearchApiCommands.php
+++ b/src/Commands/SearchApiCommands.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\search_api\Commands;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api\ConsoleException;
+use Drupal\Core\Entity\EntityStorageException;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -19,24 +24,24 @@ class SearchApiCommands extends DrushCommands {
   /**
    * The command helper.
    *
-   * @var \Drupal\search_api\Utility\CommandHelper
+   * @var CommandHelper
    */
   protected $commandHelper;
 
   /**
    * Constructs a SearchApiCommands object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the "search_api_index" or "search_api_server" entity types'
    *   storage handlers couldn't be loaded.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the "search_api_index" or "search_api_server" entity types are
    *   unknown.
    */
@@ -57,10 +62,10 @@ class SearchApiCommands extends DrushCommands {
   /**
    * Lists all search indexes.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The table rows.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an index has a server which couldn't be loaded.
    *
    * @command search-api:list
@@ -94,7 +99,7 @@ class SearchApiCommands extends DrushCommands {
    * @param string $indexId
    *   A search index ID.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if no indexes could be loaded.
    *
    * @command search-api:enable
@@ -111,7 +116,7 @@ class SearchApiCommands extends DrushCommands {
   /**
    * Enables all disabled search indexes.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if no indexes could be loaded.
    *
    * @command search-api:enable-all
@@ -152,7 +157,7 @@ class SearchApiCommands extends DrushCommands {
   /**
    * Disables all enabled search indexes.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if no indexes could be loaded.
    *
    * @command search-api:disable-all
@@ -174,10 +179,10 @@ class SearchApiCommands extends DrushCommands {
    * @param string|null $indexId
    *   (optional) A search index ID, or NULL to show the status of all indexes.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The table rows.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if one of the affected indexes had an invalid tracker set.
    *
    * @command search-api:status
@@ -257,7 +262,7 @@ class SearchApiCommands extends DrushCommands {
    * @param array $options
    *   An array of options.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if one of the affected indexes had an invalid tracker set, or some
    *   other internal error occurred.
    *
@@ -308,7 +313,7 @@ class SearchApiCommands extends DrushCommands {
    *   The machine name of an index. Optional. If missed all search indexes will
    *   be cleared.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if one of the affected indexes had an invalid tracker set, or some
    *   other internal error occurred.
    *
@@ -335,13 +340,13 @@ class SearchApiCommands extends DrushCommands {
    * @param string $keyword
    *   The keyword to look for.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The table rows.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if no search query could be created for the given index, for
    *   example because it is disabled or its server could not be loaded.
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if searching failed for any reason.
    *
    * @command search-api:search
@@ -366,10 +371,10 @@ class SearchApiCommands extends DrushCommands {
   /**
    * Lists all search servers.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The table rows.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if no servers could be loaded.
    *
    * @command search-api:server-list
@@ -398,9 +403,9 @@ class SearchApiCommands extends DrushCommands {
    * @param string $serverId
    *   The machine name of a server.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if the server couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown if an internal error occurred when saving the server.
    *
    * @command search-api:server-enable
@@ -422,9 +427,9 @@ class SearchApiCommands extends DrushCommands {
    * @param string $serverId
    *   The machine name of a server.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if the server couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown if an internal error occurred when saving the server.
    *
    * @command search-api:server-disable
@@ -446,9 +451,9 @@ class SearchApiCommands extends DrushCommands {
    * @param string $serverId
    *   The machine name of a server.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if the server couldn't be loaded.
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if one of the affected indexes had an invalid tracker set, or some
    *   other internal error occurred.
    *
diff --git a/src/Contrib/AutocompleteBackendInterface.php b/src/Contrib/AutocompleteBackendInterface.php
index 3ae7654f..a32f8bad 100644
--- a/src/Contrib/AutocompleteBackendInterface.php
+++ b/src/Contrib/AutocompleteBackendInterface.php
@@ -20,7 +20,7 @@ interface AutocompleteBackendInterface extends BackendInterface {
   /**
    * Retrieves autocompletion suggestions for some user input.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   A query representing the base search, with all completely entered words
    *   in the user input so far as the search keys.
    * @param \Drupal\search_api_autocomplete\SearchInterface $search
diff --git a/src/Controller/IndexController.php b/src/Controller/IndexController.php
index d9872d48..aa873a5d 100644
--- a/src/Controller/IndexController.php
+++ b/src/Controller/IndexController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\RemoveCommand;
@@ -22,14 +24,14 @@ class IndexController extends ControllerBase {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack|null
+   * @var RequestStack|null
    */
   protected $requestStack;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface|null
+   * @var MessengerInterface|null
    */
   protected $messenger;
 
@@ -49,7 +51,7 @@ class IndexController extends ControllerBase {
   /**
    * Retrieves the request stack.
    *
-   * @return \Symfony\Component\HttpFoundation\RequestStack
+   * @return RequestStack
    *   The request stack.
    */
   public function getRequestStack() {
@@ -59,7 +61,7 @@ class IndexController extends ControllerBase {
   /**
    * Retrieves the current request.
    *
-   * @return \Symfony\Component\HttpFoundation\Request|null
+   * @return Request|null
    *   The current request.
    */
   public function getRequest() {
@@ -69,7 +71,7 @@ class IndexController extends ControllerBase {
   /**
    * Sets the request stack.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The new request stack.
    *
    * @return $this
@@ -82,7 +84,7 @@ class IndexController extends ControllerBase {
   /**
    * Retrieves the messenger.
    *
-   * @return \Drupal\Core\Messenger\MessengerInterface
+   * @return MessengerInterface
    *   The messenger.
    */
   public function getMessenger() {
@@ -92,7 +94,7 @@ class IndexController extends ControllerBase {
   /**
    * Sets the messenger.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The new messenger.
    *
    * @return $this
@@ -105,7 +107,7 @@ class IndexController extends ControllerBase {
   /**
    * Displays information about a search index.
    *
-   * @param \Drupal\search_api\IndexInterface $search_api_index
+   * @param IndexInterface $search_api_index
    *   The index to display.
    *
    * @return array
@@ -130,7 +132,7 @@ class IndexController extends ControllerBase {
   /**
    * Returns the page title for an index's "View" tab.
    *
-   * @param \Drupal\search_api\IndexInterface $search_api_index
+   * @param IndexInterface $search_api_index
    *   The index that is displayed.
    *
    * @return string
@@ -143,10 +145,10 @@ class IndexController extends ControllerBase {
   /**
    * Enables a search index without a confirmation form.
    *
-   * @param \Drupal\search_api\IndexInterface $search_api_index
+   * @param IndexInterface $search_api_index
    *   The index to be enabled.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response to send to the browser.
    */
   public function indexBypassEnable(IndexInterface $search_api_index) {
@@ -172,15 +174,15 @@ class IndexController extends ControllerBase {
   /**
    * Removes a field from a search index.
    *
-   * @param \Drupal\search_api\IndexInterface $search_api_index
+   * @param IndexInterface $search_api_index
    *   The search index.
    * @param string $field_id
    *   The ID of the field to remove.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response to send to the browser.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown when the field was not found.
    */
   public function removeField(IndexInterface $search_api_index, $field_id) {
diff --git a/src/Controller/ServerController.php b/src/Controller/ServerController.php
index d17bcbf9..a7f39189 100644
--- a/src/Controller/ServerController.php
+++ b/src/Controller/ServerController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Controller;
 
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -16,7 +17,7 @@ class ServerController extends ControllerBase {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface|null
+   * @var MessengerInterface|null
    */
   protected $messenger;
 
@@ -35,7 +36,7 @@ class ServerController extends ControllerBase {
   /**
    * Retrieves the messenger.
    *
-   * @return \Drupal\Core\Messenger\MessengerInterface
+   * @return MessengerInterface
    *   The messenger.
    */
   public function getMessenger() {
@@ -45,7 +46,7 @@ class ServerController extends ControllerBase {
   /**
    * Sets the messenger.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The new messenger.
    *
    * @return $this
@@ -58,7 +59,7 @@ class ServerController extends ControllerBase {
   /**
    * Displays information about a search server.
    *
-   * @param \Drupal\search_api\ServerInterface $search_api_server
+   * @param ServerInterface $search_api_server
    *   The server to display.
    *
    * @return array
@@ -86,7 +87,7 @@ class ServerController extends ControllerBase {
   /**
    * Returns the page title for a server's "View" tab.
    *
-   * @param \Drupal\search_api\ServerInterface $search_api_server
+   * @param ServerInterface $search_api_server
    *   The server that is displayed.
    *
    * @return string
@@ -99,10 +100,10 @@ class ServerController extends ControllerBase {
   /**
    * Enables a search server without a confirmation form.
    *
-   * @param \Drupal\search_api\ServerInterface $search_api_server
+   * @param ServerInterface $search_api_server
    *   The server to be enabled.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response to send to the browser.
    */
   public function serverBypassEnable(ServerInterface $search_api_server) {
diff --git a/src/Controller/TaskController.php b/src/Controller/TaskController.php
index 0fa3b735..05be67dc 100644
--- a/src/Controller/TaskController.php
+++ b/src/Controller/TaskController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Controller;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Session\AccountInterface;
@@ -17,7 +18,7 @@ class TaskController extends ControllerBase {
   /**
    * The server task manager.
    *
-   * @var \Drupal\search_api\Task\TaskManagerInterface|null
+   * @var TaskManagerInterface|null
    */
   protected $taskManager;
 
@@ -36,7 +37,7 @@ class TaskController extends ControllerBase {
   /**
    * Retrieves the task manager.
    *
-   * @return \Drupal\search_api\Task\TaskManagerInterface
+   * @return TaskManagerInterface
    *   The task manager.
    */
   public function getTaskManager() {
@@ -46,7 +47,7 @@ class TaskController extends ControllerBase {
   /**
    * Sets the task manager.
    *
-   * @param \Drupal\search_api\Task\TaskManagerInterface $task_manager
+   * @param TaskManagerInterface $task_manager
    *   The new task manager.
    *
    * @return $this
@@ -67,10 +68,10 @@ class TaskController extends ControllerBase {
   /**
    * Checks access for executing pending tasks.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function executeTasksAccess(AccountInterface $account) {
diff --git a/src/DataType/DataTypePluginManager.php b/src/DataType/DataTypePluginManager.php
index f4de2b38..f0cc140f 100644
--- a/src/DataType/DataTypePluginManager.php
+++ b/src/DataType/DataTypePluginManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\DataType;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\search_api\Event\SearchApiEvents;
@@ -21,7 +22,7 @@ class DataTypePluginManager extends SearchApiPluginManager {
   /**
    * Static cache for the data type definitions.
    *
-   * @var \Drupal\search_api\DataType\DataTypeInterface[]
+   * @var DataTypeInterface[]
    *
    * @see \Drupal\search_api\DataType\DataTypePluginManager::createInstance()
    * @see \Drupal\search_api\DataType\DataTypePluginManager::getInstances()
@@ -43,11 +44,11 @@ class DataTypePluginManager extends SearchApiPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EventDispatcherInterface $eventDispatcher) {
@@ -67,10 +68,10 @@ class DataTypePluginManager extends SearchApiPluginManager {
    *   (optional) An array of configuration relevant to the plugin instance.
    *   Ignored for data type plugins.
    *
-   * @return \Drupal\search_api\DataType\DataTypeInterface
+   * @return DataTypeInterface
    *   The requested data type plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []) {
@@ -83,7 +84,7 @@ class DataTypePluginManager extends SearchApiPluginManager {
   /**
    * Returns all known data types.
    *
-   * @return \Drupal\search_api\DataType\DataTypeInterface[]
+   * @return DataTypeInterface[]
    *   An array of data type plugins, keyed by type identifier.
    */
   public function getInstances() {
diff --git a/src/Datasource/DatasourceInterface.php b/src/Datasource/DatasourceInterface.php
index 1df6301c..e26a8862 100644
--- a/src/Datasource/DatasourceInterface.php
+++ b/src/Datasource/DatasourceInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api\Datasource;
 
+use Drupal\Core\TypedData\DataDefinitionInterface;
+use Drupal\Core\Url;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\TypedData\ComplexDataInterface;
@@ -38,7 +41,7 @@ interface DatasourceInterface extends IndexPluginInterface {
    * Property names have to start with a letter or an underscore, followed by
    * any number of letters, numbers and underscores.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface[]
+   * @return DataDefinitionInterface[]
    *   An associative array of property data types, keyed by the property name.
    */
   public function getPropertyDefinitions();
@@ -49,7 +52,7 @@ interface DatasourceInterface extends IndexPluginInterface {
    * @param mixed $id
    *   The datasource-specific ID of the item.
    *
-   * @return \Drupal\Core\TypedData\ComplexDataInterface|null
+   * @return ComplexDataInterface|null
    *   The loaded item if it could be found, NULL otherwise.
    */
   public function load($id);
@@ -60,7 +63,7 @@ interface DatasourceInterface extends IndexPluginInterface {
    * @param array $ids
    *   An array of datasource-specific item IDs.
    *
-   * @return \Drupal\Core\TypedData\ComplexDataInterface[]
+   * @return ComplexDataInterface[]
    *   An associative array of loaded items, keyed by their
    *   (datasource-specific) IDs.
    */
@@ -69,7 +72,7 @@ interface DatasourceInterface extends IndexPluginInterface {
   /**
    * Retrieves the unique ID of an object from this datasource.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $item
+   * @param ComplexDataInterface $item
    *   An object from this datasource.
    *
    * @return string|null
@@ -81,7 +84,7 @@ interface DatasourceInterface extends IndexPluginInterface {
   /**
    * Retrieves a human-readable label for an item.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $item
+   * @param ComplexDataInterface $item
    *   An item of this controller's type.
    *
    * @return string|null
@@ -92,7 +95,7 @@ interface DatasourceInterface extends IndexPluginInterface {
   /**
    * Retrieves the item's bundle.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $item
+   * @param ComplexDataInterface $item
    *   An item of this datasource's type.
    *
    * @return string
@@ -107,7 +110,7 @@ interface DatasourceInterface extends IndexPluginInterface {
   /**
    * Retrieves the item's language.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $item
+   * @param ComplexDataInterface $item
    *   An item of this datasource's type.
    *
    * @return string
@@ -118,10 +121,10 @@ interface DatasourceInterface extends IndexPluginInterface {
   /**
    * Retrieves a URL at which the item can be viewed on the web.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $item
+   * @param ComplexDataInterface $item
    *   An item of this datasource's type.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   Either an object representing the URL of the given item, or NULL if the
    *   item has no URL of its own.
    */
@@ -130,9 +133,9 @@ interface DatasourceInterface extends IndexPluginInterface {
   /**
    * Checks whether a user has permission to view the given item.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $item
+   * @param ComplexDataInterface $item
    *   An item of this datasource's type.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   (optional) The user session for which to check access, or NULL to check
    *   access for the current user.
    *
@@ -149,13 +152,13 @@ interface DatasourceInterface extends IndexPluginInterface {
   /**
    * Checks whether a user has permission to view the given item.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $item
+   * @param ComplexDataInterface $item
    *   An item of this datasource's type.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   (optional) The user session for which to check access, or NULL to check
    *   access for the current user.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function getItemAccessResult(ComplexDataInterface $item, AccountInterface $account = NULL);
@@ -187,7 +190,7 @@ interface DatasourceInterface extends IndexPluginInterface {
   /**
    * Returns the render array for the provided item and view mode.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $item
+   * @param ComplexDataInterface $item
    *   The item to render.
    * @param string $view_mode
    *   (optional) The view mode that should be used to render the item.
@@ -203,7 +206,7 @@ interface DatasourceInterface extends IndexPluginInterface {
   /**
    * Returns the render array for the provided items and view mode.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface[] $items
+   * @param ComplexDataInterface[] $items
    *   The items to render.
    * @param string $view_mode
    *   (optional) The view mode that should be used to render the items.
@@ -282,14 +285,14 @@ interface DatasourceInterface extends IndexPluginInterface {
    * This method will only be called if this datasource plugin returns TRUE in
    * canContainEntityReferences().
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity that just got changed.
    * @param array[] $foreign_entity_relationship_map
    *   Map of known entity relationships that exist in the index. Its structure
    *   is identical to the return value of the
    *   \Drupal\search_api\Utility\TrackingHelper::getForeignEntityRelationsMap()
    *   method.
-   * @param \Drupal\Core\Entity\EntityInterface|null $original_entity
+   * @param EntityInterface|null $original_entity
    *   (optional) The original entity before the change. If this argument is
    *   NULL, it means the entity got deleted.
    *
diff --git a/src/Datasource/DatasourcePluginManager.php b/src/Datasource/DatasourcePluginManager.php
index 49641fde..29e1ad9d 100644
--- a/src/Datasource/DatasourcePluginManager.php
+++ b/src/Datasource/DatasourcePluginManager.php
@@ -24,11 +24,11 @@ class DatasourcePluginManager extends SearchApiPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EventDispatcherInterface $eventDispatcher) {
diff --git a/src/Display/DisplayDeriverBase.php b/src/Display/DisplayDeriverBase.php
index cd338729..cb8e7da6 100644
--- a/src/Display/DisplayDeriverBase.php
+++ b/src/Display/DisplayDeriverBase.php
@@ -23,7 +23,7 @@ abstract class DisplayDeriverBase extends DeriverBase implements ContainerDerive
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -45,7 +45,7 @@ abstract class DisplayDeriverBase extends DeriverBase implements ContainerDerive
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ -55,7 +55,7 @@ abstract class DisplayDeriverBase extends DeriverBase implements ContainerDerive
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
diff --git a/src/Display/DisplayInterface.php b/src/Display/DisplayInterface.php
index c62c642e..f012f2c8 100644
--- a/src/Display/DisplayInterface.php
+++ b/src/Display/DisplayInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Display;
 
+use Drupal\search_api\IndexInterface;
+use Drupal\Core\Url;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -37,7 +39,7 @@ interface DisplayInterface extends HideablePluginInterface, PluginInspectionInte
   /**
    * Returns the index used by this display.
    *
-   * @return \Drupal\search_api\IndexInterface
+   * @return IndexInterface
    *   The search index used by this display.
    */
   public function getIndex();
@@ -45,7 +47,7 @@ interface DisplayInterface extends HideablePluginInterface, PluginInspectionInte
   /**
    * Returns the URL of this display.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The URL of the display, or NULL if there is no specific URL for it.
    *
    * @deprecated in search_api:8.x-1.0-beta5 and is removed from
diff --git a/src/Display/DisplayPluginBase.php b/src/Display/DisplayPluginBase.php
index 58270364..19afb1b5 100644
--- a/src/Display/DisplayPluginBase.php
+++ b/src/Display/DisplayPluginBase.php
@@ -38,14 +38,14 @@ abstract class DisplayPluginBase extends HideablePluginBase implements DisplayIn
   /**
    * The current path service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack|null
+   * @var CurrentPathStack|null
    */
   protected $currentPath;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -64,7 +64,7 @@ abstract class DisplayPluginBase extends HideablePluginBase implements DisplayIn
   /**
    * Retrieves the current path service.
    *
-   * @return \Drupal\Core\Path\CurrentPathStack
+   * @return CurrentPathStack
    *   The current path service.
    */
   public function getCurrentPath() {
@@ -74,7 +74,7 @@ abstract class DisplayPluginBase extends HideablePluginBase implements DisplayIn
   /**
    * Sets the current path service.
    *
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The new current path service.
    *
    * @return $this
@@ -87,7 +87,7 @@ abstract class DisplayPluginBase extends HideablePluginBase implements DisplayIn
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ -97,7 +97,7 @@ abstract class DisplayPluginBase extends HideablePluginBase implements DisplayIn
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
diff --git a/src/Display/DisplayPluginManager.php b/src/Display/DisplayPluginManager.php
index f87a6c52..3c44f3e7 100644
--- a/src/Display/DisplayPluginManager.php
+++ b/src/Display/DisplayPluginManager.php
@@ -21,7 +21,7 @@ class DisplayPluginManager extends SearchApiPluginManager implements DisplayPlug
   /**
    * Static cache for the display plugins.
    *
-   * @var \Drupal\search_api\Display\DisplayInterface[]|null
+   * @var DisplayInterface[]|null
    *
    * @see \Drupal\search_api\Display\DisplayPluginManager::getInstances()
    */
@@ -33,11 +33,11 @@ class DisplayPluginManager extends SearchApiPluginManager implements DisplayPlug
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EventDispatcherInterface $eventDispatcher) {
diff --git a/src/Display/DisplayPluginManagerInterface.php b/src/Display/DisplayPluginManagerInterface.php
index a1d4c49d..a06d8a28 100644
--- a/src/Display/DisplayPluginManagerInterface.php
+++ b/src/Display/DisplayPluginManagerInterface.php
@@ -12,7 +12,7 @@ interface DisplayPluginManagerInterface extends PluginManagerInterface {
   /**
    * Returns all known displays.
    *
-   * @return \Drupal\search_api\Display\DisplayInterface[]
+   * @return DisplayInterface[]
    *   An array of display plugins, keyed by type identifier.
    */
   public function getInstances();
diff --git a/src/Entity/Index.php b/src/Entity/Index.php
index 50013547..8a454b47 100644
--- a/src/Entity/Index.php
+++ b/src/Entity/Index.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\search_api\Entity;
 
+use Drupal\Core\TypedData\DataDefinitionInterface;
+use Drupal\search_api\Item\ItemInterface;
+use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\TempStore\SharedTempStore;
+use Drupal\search_api\Plugin\IndexPluginInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\Cache;
@@ -145,7 +150,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
    * $field_settings array. When adding, removing or changing configuration we
    * should always use these.
    *
-   * @var \Drupal\search_api\Item\FieldInterface[]|null
+   * @var FieldInterface[]|null
    */
   protected $fieldInstances;
 
@@ -184,7 +189,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
    * we should therefore always manipulate this property instead of the stored
    * one.
    *
-   * @var \Drupal\search_api\Datasource\DatasourceInterface[]|null
+   * @var DatasourceInterface[]|null
    *
    * @see getDatasources()
    */
@@ -217,7 +222,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
    * we should therefore always manipulate this property instead of the stored
    * one.
    *
-   * @var \Drupal\search_api\Tracker\TrackerInterface|null
+   * @var TrackerInterface|null
    *
    * @see getTrackerInstance()
    */
@@ -233,7 +238,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
   /**
    * The server entity belonging to this index.
    *
-   * @var \Drupal\search_api\ServerInterface
+   * @var ServerInterface
    *
    * @see getServerInstance()
    */
@@ -266,14 +271,14 @@ class Index extends ConfigEntityBase implements IndexInterface {
    * we should therefore always manipulate this property instead of the stored
    * one.
    *
-   * @var \Drupal\search_api\Processor\ProcessorInterface[]|null
+   * @var ProcessorInterface[]|null
    */
   protected $processorInstances;
 
   /**
    * Static cache of retrieved property definitions, grouped by datasource.
    *
-   * @var \Drupal\Core\TypedData\DataDefinitionInterface[][]
+   * @var DataDefinitionInterface[][]
    *
    * @see \Drupal\search_api\Entity\Index::getPropertyDefinitions()
    */
@@ -949,7 +954,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
       throw new SearchApiException("Couldn't index values on index '$index_label' (index is disabled)");
     }
 
-    /** @var \Drupal\search_api\Item\ItemInterface[] $items */
+    /** @var ItemInterface[] $items */
     $items = [];
     foreach ($search_objects as $item_id => $object) {
       $items[$item_id] = \Drupal::getContainer()
@@ -1125,7 +1130,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
       $this->getTrackerInstance()->trackAllItemsUpdated();
       $description = 'This hook is deprecated in search_api:8.x-1.14 and is removed from search_api:2.0.0. Please use the "search_api.reindex_scheduled" event instead. See https://www.drupal.org/node/3059866';
       \Drupal::moduleHandler()->invokeAllDeprecated($description, 'search_api_index_reindex', [$this, FALSE]);
-      /** @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $dispatcher */
+      /** @var EventDispatcherInterface $dispatcher */
       $dispatcher = \Drupal::getContainer()->get('event_dispatcher');
       $dispatcher->dispatch(new ReindexScheduledEvent($this, FALSE), SearchApiEvents::REINDEX_SCHEDULED);
     }
@@ -1154,7 +1159,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
       $description = 'This hook is deprecated in search_api:8.x-1.14 and is removed from search_api:2.0.0. Please use the "search_api.reindex_scheduled" event instead. See https://www.drupal.org/node/3059866';
       \Drupal::moduleHandler()->invokeAllDeprecated($description, 'search_api_index_reindex', [$this, !$this->isReadOnly()]);
 
-      /** @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $dispatcher */
+      /** @var EventDispatcherInterface $dispatcher */
       $dispatcher = \Drupal::getContainer()->get('event_dispatcher');
       $dispatcher->dispatch(new ReindexScheduledEvent($this, !$this->isReadOnly()), SearchApiEvents::REINDEX_SCHEDULED);
     }
@@ -1176,7 +1181,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
     $description = 'This hook is deprecated in search_api:8.x-1.14 and is removed from search_api:2.0.0. Please use the "search_api.reindex_scheduled" event instead. See https://www.drupal.org/node/3059866';
     \Drupal::moduleHandler()
       ->invokeAllDeprecated($description, 'search_api_index_reindex', [$this, FALSE]);
-    /** @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $dispatcher */
+    /** @var EventDispatcherInterface $dispatcher */
     $dispatcher = \Drupal::getContainer()->get('event_dispatcher');
     $dispatcher->dispatch(new ReindexScheduledEvent($this, FALSE), SearchApiEvents::REINDEX_SCHEDULED);
     $index_task_manager->addItemsBatch($this);
@@ -1380,7 +1385,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
 
     try {
       // Fake an original for inserts to make code cleaner.
-      /** @var \Drupal\search_api\IndexInterface $original */
+      /** @var IndexInterface $original */
       $original = $update ? $this->original : static::create(['status' => FALSE]);
       $index_task_manager = \Drupal::getContainer()
         ->get('search_api.index_task_manager');
@@ -1443,7 +1448,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
    * Used as a helper method in postSave(). Should only be called when the index
    * was enabled before the change and remained so.
    *
-   * @param \Drupal\search_api\IndexInterface $original
+   * @param IndexInterface $original
    *   The previous version of the index.
    */
   protected function reactToServerSwitch(IndexInterface $original) {
@@ -1473,7 +1478,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
    * Used as a helper method in postSave(). Should only be called when the index
    * was enabled before the change and remained so.
    *
-   * @param \Drupal\search_api\IndexInterface $original
+   * @param IndexInterface $original
    *   The previous version of the index.
    */
   protected function reactToDatasourceSwitch(IndexInterface $original) {
@@ -1489,7 +1494,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
       $index_task_manager = \Drupal::getContainer()->get('search_api.index_task_manager');
       $index_task_manager->stopTracking($this, $removed);
       if ($this->hasValidServer()) {
-        /** @var \Drupal\search_api\ServerInterface $server */
+        /** @var ServerInterface $server */
         $server = $this->getServerInstance();
         foreach ($removed as $datasource_id) {
           $server->deleteAllIndexItems($this, $datasource_id);
@@ -1505,7 +1510,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
    * Used as a helper method in postSave(). Should only be called when the index
    * was enabled before the change and remained so.
    *
-   * @param \Drupal\search_api\IndexInterface $original
+   * @param IndexInterface $original
    *   The previous version of the index.
    */
   protected function reactToTrackerSwitch(IndexInterface $original) {
@@ -1528,7 +1533,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
   /**
    * Reacts to changes in processor configuration.
    *
-   * @param \Drupal\search_api\IndexInterface $original
+   * @param IndexInterface $original
    *   The previous version of the index.
    */
   protected function reactToProcessorChanges(IndexInterface $original) {
@@ -1579,7 +1584,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
 
     $index_task_manager = \Drupal::getContainer()
       ->get('search_api.index_task_manager');
-    /** @var \Drupal\search_api\IndexInterface[] $entities */
+    /** @var IndexInterface[] $entities */
     foreach ($entities as $index) {
       if ($index->status()) {
         $index_task_manager->stopTracking($index);
@@ -1603,7 +1608,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
       \Drupal::cache('discovery')->delete('views:wizard');
     }
 
-    /** @var \Drupal\Core\TempStore\SharedTempStore $temp_store */
+    /** @var SharedTempStore $temp_store */
     $temp_store = \Drupal::service('tempstore.shared')->get('search_api_index');
     foreach ($entities as $entity) {
       try {
@@ -1833,7 +1838,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
             if ($plugin_type == 'fields') {
               // Remove a field from the index that is being removed from the
               // system.
-              /** @var \Drupal\search_api\Item\FieldInterface $field */
+              /** @var FieldInterface $field */
               foreach ($plugins as $field_id => $field) {
                 // In case the field is locked, unlock it before removing.
                 if ($field->isIndexedLocked()) {
@@ -1957,7 +1962,7 @@ class Index extends ConfigEntityBase implements IndexInterface {
   /**
    * Retrieves all the plugins contained in this index.
    *
-   * @return \Drupal\search_api\Plugin\IndexPluginInterface[][]
+   * @return IndexPluginInterface[][]
    *   All plugins contained in this index, keyed by their property on the index
    *   and their plugin ID.
    */
diff --git a/src/Entity/SearchApiConfigEntityStorage.php b/src/Entity/SearchApiConfigEntityStorage.php
index 1505b084..557f401b 100644
--- a/src/Entity/SearchApiConfigEntityStorage.php
+++ b/src/Entity/SearchApiConfigEntityStorage.php
@@ -32,7 +32,7 @@ class SearchApiConfigEntityStorage extends ConfigEntityStorage {
       // rename-free fields on the passed index ($entity) so a subsequent save
       // won't false detect field renames.
       if ($entity instanceof IndexInterface) {
-        /** @var \Drupal\search_api\IndexInterface $overridden_entity */
+        /** @var IndexInterface $overridden_entity */
         $old_fields = $entity->original->getFields();
         $new_fields = $entity->getFields();
         $saved_fields = $overridden_entity->getFields();
diff --git a/src/Entity/Server.php b/src/Entity/Server.php
index 1cc5820d..811df3bf 100644
--- a/src/Entity/Server.php
+++ b/src/Entity/Server.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Entity;
 
+use Drupal\search_api\Backend\BackendInterface;
+use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -105,7 +107,7 @@ class Server extends ConfigEntityBase implements ServerInterface {
   /**
    * The backend plugin instance.
    *
-   * @var \Drupal\search_api\Backend\BackendInterface
+   * @var BackendInterface
    */
   protected $backendPlugin;
 
@@ -217,7 +219,7 @@ class Server extends ConfigEntityBase implements ServerInterface {
       $description = 'This hook is deprecated in search_api:8.x-1.14 and is removed from search_api:2.0.0. Please use the "search_api.determining_server_features" event instead. See https://www.drupal.org/node/3059866';
       \Drupal::moduleHandler()
         ->alterDeprecated($description, 'search_api_server_features', $this->features, $this);
-      /** @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher */
+      /** @var EventDispatcherInterface $eventDispatcher */
       $eventDispatcher = \Drupal::getContainer()->get('event_dispatcher');
       $eventDispatcher->dispatch(new DeterminingServerFeaturesEvent($this->features, $this), SearchApiEvents::DETERMINING_SERVER_FEATURES);
     }
@@ -517,7 +519,7 @@ class Server extends ConfigEntityBase implements ServerInterface {
         && !$this->status()
         && $this->original->status()) {
       foreach ($this->getIndexes(['status' => TRUE]) as $index) {
-        /** @var \Drupal\search_api\IndexInterface $index */
+        /** @var IndexInterface $index */
         $index->setStatus(FALSE)->save();
       }
     }
@@ -558,7 +560,7 @@ class Server extends ConfigEntityBase implements ServerInterface {
     // Iterate through the servers, executing the backends' preDelete() methods
     // and removing all their pending server tasks.
     foreach ($entities as $server) {
-      /** @var \Drupal\search_api\ServerInterface $server */
+      /** @var ServerInterface $server */
       if ($server->hasValidBackend()) {
         $server->getBackend()->preDelete();
       }
diff --git a/src/Entity/Task.php b/src/Entity/Task.php
index db93d4f1..3f761a67 100644
--- a/src/Entity/Task.php
+++ b/src/Entity/Task.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Entity;
 
+use Drupal\search_api\ServerInterface;
+use Drupal\search_api\IndexInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -34,21 +36,21 @@ class Task extends ContentEntityBase implements TaskInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
   /**
    * The search server, if this task is associated with a server.
    *
-   * @var \Drupal\search_api\ServerInterface|null
+   * @var ServerInterface|null
    */
   protected $serverInstance;
 
   /**
    * The search index, if this task is associated with a index.
    *
-   * @var \Drupal\search_api\IndexInterface|null
+   * @var IndexInterface|null
    */
   protected $indexInstance;
 
@@ -154,7 +156,7 @@ class Task extends ContentEntityBase implements TaskInterface {
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
+    /** @var BaseFieldDefinition[] $fields */
     $fields = parent::baseFieldDefinitions($entity_type);
 
     $fields['type'] = BaseFieldDefinition::create('string')
diff --git a/src/Event/DeterminingServerFeaturesEvent.php b/src/Event/DeterminingServerFeaturesEvent.php
index 223b6a42..ddade82a 100644
--- a/src/Event/DeterminingServerFeaturesEvent.php
+++ b/src/Event/DeterminingServerFeaturesEvent.php
@@ -20,7 +20,7 @@ final class DeterminingServerFeaturesEvent extends Event {
   /**
    * The search server in question.
    *
-   * @var \Drupal\search_api\ServerInterface
+   * @var ServerInterface
    */
   protected $server;
 
@@ -29,7 +29,7 @@ final class DeterminingServerFeaturesEvent extends Event {
    *
    * @param array $features
    *   Reference to the features supported by the server's backend.
-   * @param \Drupal\search_api\ServerInterface $server
+   * @param ServerInterface $server
    *   The search server in question.
    */
   public function __construct(array &$features, ServerInterface $server) {
@@ -50,7 +50,7 @@ final class DeterminingServerFeaturesEvent extends Event {
   /**
    * Retrieves the search server in question.
    *
-   * @return \Drupal\search_api\ServerInterface
+   * @return ServerInterface
    *   The search server in question.
    */
   public function getServer(): ServerInterface {
diff --git a/src/Event/IndexingItemsEvent.php b/src/Event/IndexingItemsEvent.php
index 2418fa87..8cf60fae 100644
--- a/src/Event/IndexingItemsEvent.php
+++ b/src/Event/IndexingItemsEvent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Event;
 
+use Drupal\search_api\Item\ItemInterface;
 use Drupal\search_api\IndexInterface;
 use Drupal\Component\EventDispatcher\Event;
 
@@ -13,23 +14,23 @@ final class IndexingItemsEvent extends Event {
   /**
    * The index on which items will be indexed.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $index;
 
   /**
    * The items that will be indexed.
    *
-   * @var \Drupal\search_api\Item\ItemInterface[]
+   * @var ItemInterface[]
    */
   protected $items;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index on which items will be indexed.
-   * @param \Drupal\search_api\Item\ItemInterface[] $items
+   * @param ItemInterface[] $items
    *   The items that will be indexed.
    */
   public function __construct(IndexInterface $index, array $items) {
@@ -40,7 +41,7 @@ final class IndexingItemsEvent extends Event {
   /**
    * Retrieves the index on which items will be indexed.
    *
-   * @return \Drupal\search_api\IndexInterface
+   * @return IndexInterface
    *   The index on which items will be indexed.
    */
   public function getIndex(): IndexInterface {
@@ -50,7 +51,7 @@ final class IndexingItemsEvent extends Event {
   /**
    * Retrieves the items that will be indexed.
    *
-   * @return \Drupal\search_api\Item\ItemInterface[]
+   * @return ItemInterface[]
    *   The items that will be indexed.
    */
   public function getItems(): array {
@@ -60,7 +61,7 @@ final class IndexingItemsEvent extends Event {
   /**
    * Sets the items that will be indexed.
    *
-   * @param \Drupal\search_api\Item\ItemInterface[] $items
+   * @param ItemInterface[] $items
    *   The new items that will be indexed.
    */
   public function setItems(array $items) {
diff --git a/src/Event/ItemsIndexedEvent.php b/src/Event/ItemsIndexedEvent.php
index 77244f1c..1674eaa6 100644
--- a/src/Event/ItemsIndexedEvent.php
+++ b/src/Event/ItemsIndexedEvent.php
@@ -13,7 +13,7 @@ final class ItemsIndexedEvent extends Event {
   /**
    * The index that indexed the items.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $index;
 
@@ -27,7 +27,7 @@ final class ItemsIndexedEvent extends Event {
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index that indexed the items.
    * @param int[] $processedIds
    *   The processed IDs.
@@ -40,7 +40,7 @@ final class ItemsIndexedEvent extends Event {
   /**
    * Retrieves the index that indexed the items.
    *
-   * @return \Drupal\search_api\IndexInterface
+   * @return IndexInterface
    *   The used index.
    */
   public function getIndex(): IndexInterface {
diff --git a/src/Event/MappingForeignRelationshipsEvent.php b/src/Event/MappingForeignRelationshipsEvent.php
index 4f6464c9..705977c2 100644
--- a/src/Event/MappingForeignRelationshipsEvent.php
+++ b/src/Event/MappingForeignRelationshipsEvent.php
@@ -16,7 +16,7 @@ final class MappingForeignRelationshipsEvent extends Event {
   /**
    * The index whose foreign relationships are mapped.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $index;
 
@@ -30,18 +30,18 @@ final class MappingForeignRelationshipsEvent extends Event {
   /**
    * Cacheability associated with the foreign relationships mapping.
    *
-   * @var \Drupal\Core\Cache\RefinableCacheableDependencyInterface
+   * @var RefinableCacheableDependencyInterface
    */
   protected $cacheability;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index whose foreign relationships are mapped.
    * @param array $foreign_relationships_mapping
    *   The foreign relationships that were already found.
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $cacheability
+   * @param RefinableCacheableDependencyInterface $cacheability
    *   The cacheability associated with the foreign relationships mapping.
    */
   public function __construct(IndexInterface $index, array &$foreign_relationships_mapping, RefinableCacheableDependencyInterface $cacheability) {
@@ -53,7 +53,7 @@ final class MappingForeignRelationshipsEvent extends Event {
   /**
    * Retrieves the index whose foreign relationships are mapped.
    *
-   * @return \Drupal\search_api\IndexInterface
+   * @return IndexInterface
    *   The index whose foreign relationships are mapped.
    */
   public function getIndex(): IndexInterface {
@@ -85,7 +85,7 @@ final class MappingForeignRelationshipsEvent extends Event {
   /**
    * Retrieves cacheability associated with the foreign relationships mapping.
    *
-   * @return \Drupal\Core\Cache\RefinableCacheableDependencyInterface
+   * @return RefinableCacheableDependencyInterface
    *   Cacheability associated with the foreign relationships mapping.
    */
   public function getCacheability(): RefinableCacheableDependencyInterface {
diff --git a/src/Event/ProcessingResultsEvent.php b/src/Event/ProcessingResultsEvent.php
index 31ca9b31..bb90691d 100644
--- a/src/Event/ProcessingResultsEvent.php
+++ b/src/Event/ProcessingResultsEvent.php
@@ -13,14 +13,14 @@ final class ProcessingResultsEvent extends Event {
   /**
    * The search results.
    *
-   * @var \Drupal\search_api\Query\ResultSetInterface
+   * @var ResultSetInterface
    */
   protected $results;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\search_api\Query\ResultSetInterface $results
+   * @param ResultSetInterface $results
    *   The search results.
    */
   public function __construct(ResultSetInterface $results) {
@@ -30,7 +30,7 @@ final class ProcessingResultsEvent extends Event {
   /**
    * Retrieves the search results.
    *
-   * @return \Drupal\search_api\Query\ResultSetInterface
+   * @return ResultSetInterface
    *   The search results to alter.
    */
   public function getResults(): ResultSetInterface {
@@ -49,7 +49,7 @@ final class ProcessingResultsEvent extends Event {
    * side effects (in case of modules that assume the results object will stay
    * unchanged).
    *
-   * @param \Drupal\search_api\Query\ResultSetInterface $results
+   * @param ResultSetInterface $results
    *   The new search results.
    */
   public function setResults(ResultSetInterface $results) {
diff --git a/src/Event/QueryPreExecuteEvent.php b/src/Event/QueryPreExecuteEvent.php
index fc9a4106..1a724d32 100644
--- a/src/Event/QueryPreExecuteEvent.php
+++ b/src/Event/QueryPreExecuteEvent.php
@@ -13,14 +13,14 @@ final class QueryPreExecuteEvent extends Event {
   /**
    * The created query.
    *
-   * @var \Drupal\search_api\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $query;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The created query.
    */
   public function __construct(QueryInterface $query) {
@@ -30,7 +30,7 @@ final class QueryPreExecuteEvent extends Event {
   /**
    * Retrieves the created query.
    *
-   * @return \Drupal\search_api\Query\QueryInterface
+   * @return QueryInterface
    *   The created query.
    */
   public function getQuery(): QueryInterface {
diff --git a/src/Event/ReindexScheduledEvent.php b/src/Event/ReindexScheduledEvent.php
index d4a1fe63..772c462a 100644
--- a/src/Event/ReindexScheduledEvent.php
+++ b/src/Event/ReindexScheduledEvent.php
@@ -13,7 +13,7 @@ final class ReindexScheduledEvent extends Event {
   /**
    * The index scheduled for reindexing.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $index;
 
@@ -27,7 +27,7 @@ final class ReindexScheduledEvent extends Event {
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index scheduled for reindexing.
    * @param bool $clear
    *   Boolean indicating whether the index was also cleared.
@@ -40,7 +40,7 @@ final class ReindexScheduledEvent extends Event {
   /**
    * Retrieves the index scheduled for reindexing.
    *
-   * @return \Drupal\search_api\IndexInterface
+   * @return IndexInterface
    *   The index scheduled for reindexing.
    */
   public function getIndex(): IndexInterface {
diff --git a/src/Form/FieldConfigurationForm.php b/src/Form/FieldConfigurationForm.php
index eba9f6af..8b552897 100644
--- a/src/Form/FieldConfigurationForm.php
+++ b/src/Form/FieldConfigurationForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\search_api\IndexInterface;
+use Drupal\search_api\Item\FieldInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -26,14 +28,14 @@ class FieldConfigurationForm extends EntityForm {
   /**
    * The index for which the fields are configured.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $entity;
 
   /**
    * The field whose configuration is edited.
    *
-   * @var \Drupal\search_api\Item\FieldInterface
+   * @var FieldInterface
    */
   protected $field;
 
@@ -47,22 +49,22 @@ class FieldConfigurationForm extends EntityForm {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a FieldConfigurationForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer to use.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, DateFormatterInterface $date_formatter, RequestStack $request_stack, MessengerInterface $messenger) {
@@ -148,7 +150,7 @@ class FieldConfigurationForm extends EntityForm {
     $form = parent::form($form, $form_state);
 
     $field = $this->getField();
-    /** @var \Drupal\search_api\Processor\ConfigurablePropertyInterface $property */
+    /** @var ConfigurablePropertyInterface $property */
     $property = $field->getDataDefinition();
 
     $form = $property->buildConfigurationForm($field, $form, $form_state);
@@ -184,7 +186,7 @@ class FieldConfigurationForm extends EntityForm {
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $field = $this->getField();
-    /** @var \Drupal\search_api\Processor\ConfigurablePropertyInterface $property */
+    /** @var ConfigurablePropertyInterface $property */
     $property = $field->getDataDefinition();
     $property->validateConfigurationForm($field, $form, $form_state);
   }
@@ -194,7 +196,7 @@ class FieldConfigurationForm extends EntityForm {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $field = $this->getField();
-    /** @var \Drupal\search_api\Processor\ConfigurablePropertyInterface $property */
+    /** @var ConfigurablePropertyInterface $property */
     $property = $field->getDataDefinition();
     $property->submitConfigurationForm($field, $form, $form_state);
 
@@ -222,7 +224,7 @@ class FieldConfigurationForm extends EntityForm {
   /**
    * Retrieves the field that is being edited.
    *
-   * @return \Drupal\search_api\Item\FieldInterface|null
+   * @return FieldInterface|null
    *   The field, if it exists.
    */
   protected function getField() {
diff --git a/src/Form/IndexAddFieldsForm.php b/src/Form/IndexAddFieldsForm.php
index b31bfdbe..0cfe7215 100644
--- a/src/Form/IndexAddFieldsForm.php
+++ b/src/Form/IndexAddFieldsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\search_api\IndexInterface;
+use Drupal\Core\TypedData\DataDefinitionInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -33,21 +35,21 @@ class IndexAddFieldsForm extends EntityForm {
   /**
    * The fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface
+   * @var FieldsHelperInterface
    */
   protected $fieldsHelper;
 
   /**
    * The data type helper.
    *
-   * @var \Drupal\search_api\Utility\DataTypeHelperInterface|null
+   * @var DataTypeHelperInterface|null
    */
   protected $dataTypeHelper;
 
   /**
    * The index for which the fields are configured.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $entity;
 
@@ -78,24 +80,24 @@ class IndexAddFieldsForm extends EntityForm {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs an IndexAddFieldsForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fields_helper
+   * @param FieldsHelperInterface $fields_helper
    *   The fields helper.
-   * @param \Drupal\search_api\Utility\DataTypeHelperInterface $data_type_helper
+   * @param DataTypeHelperInterface $data_type_helper
    *   The data type helper.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer to use.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    * @param array $parameters
    *   The parameters for this page request.
@@ -219,7 +221,7 @@ class IndexAddFieldsForm extends EntityForm {
   /**
    * Creates a list item for one datasource.
    *
-   * @param \Drupal\search_api\Datasource\DatasourceInterface|null $datasource
+   * @param DatasourceInterface|null $datasource
    *   The datasource, or NULL for general properties.
    *
    * @return array
@@ -251,11 +253,11 @@ class IndexAddFieldsForm extends EntityForm {
   /**
    * Creates an items list for the given properties.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface[] $properties
+   * @param DataDefinitionInterface[] $properties
    *   The property definitions, keyed by their property names.
    * @param string $active_property_path
    *   The relative property path to the active property.
-   * @param \Drupal\Core\Url $base_url
+   * @param Url $base_url
    *   The base URL to which property path parameters should be added for
    *   the navigation links.
    * @param string|null $datasource_id
@@ -470,7 +472,7 @@ class IndexAddFieldsForm extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function addField(array $form, FormStateInterface $form_state) {
@@ -479,7 +481,7 @@ class IndexAddFieldsForm extends EntityForm {
       return;
     }
 
-    /** @var \Drupal\Core\TypedData\DataDefinitionInterface $property */
+    /** @var DataDefinitionInterface $property */
     $property = $button['#property'];
 
     list($datasource_id, $property_path) = Utility::splitCombinedId($button['#name']);
diff --git a/src/Form/IndexBreakLockForm.php b/src/Form/IndexBreakLockForm.php
index 82714f95..637c31ea 100644
--- a/src/Form/IndexBreakLockForm.php
+++ b/src/Form/IndexBreakLockForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\Core\TempStore\SharedTempStore;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,41 +19,41 @@ class IndexBreakLockForm extends EntityConfirmFormBase {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The shared temporary storage for unsaved search indexes.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStore
+   * @var SharedTempStore
    */
   protected $tempStore;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs an IndexBreakLockForm object.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $temp_store_factory
+   * @param SharedTempStoreFactory $temp_store_factory
    *   The factory for shared temporary storages.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer to use.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(SharedTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, MessengerInterface $messenger) {
diff --git a/src/Form/IndexClearConfirmForm.php b/src/Form/IndexClearConfirmForm.php
index 5c497d19..23ce0a14 100644
--- a/src/Form/IndexClearConfirmForm.php
+++ b/src/Form/IndexClearConfirmForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\search_api\IndexInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -50,7 +51,7 @@ class IndexClearConfirmForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\search_api\IndexInterface $index */
+    /** @var IndexInterface $index */
     $index = $this->getEntity();
 
     try {
diff --git a/src/Form/IndexDeleteConfirmForm.php b/src/Form/IndexDeleteConfirmForm.php
index 99fd8fa2..86a7f0c9 100644
--- a/src/Form/IndexDeleteConfirmForm.php
+++ b/src/Form/IndexDeleteConfirmForm.php
@@ -16,14 +16,14 @@ class IndexDeleteConfirmForm extends EntityDeleteForm {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs an IndexDeleteConfirmForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(MessengerInterface $messenger) {
diff --git a/src/Form/IndexDisableConfirmForm.php b/src/Form/IndexDisableConfirmForm.php
index ad00bde2..0237aed4 100644
--- a/src/Form/IndexDisableConfirmForm.php
+++ b/src/Form/IndexDisableConfirmForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\search_api\IndexInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -16,14 +17,14 @@ class IndexDisableConfirmForm extends EntityConfirmFormBase {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs an IndexDisableConfirmForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(MessengerInterface $messenger) {
@@ -71,7 +72,7 @@ class IndexDisableConfirmForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\search_api\IndexInterface $entity */
+    /** @var IndexInterface $entity */
     $entity = $this->entity;
 
     $entity->setStatus(FALSE)->save();
diff --git a/src/Form/IndexFieldsForm.php b/src/Form/IndexFieldsForm.php
index 067860af..8b618d7a 100644
--- a/src/Form/IndexFieldsForm.php
+++ b/src/Form/IndexFieldsForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\search_api\IndexInterface;
+use Drupal\Core\TempStore\SharedTempStore;
+use Drupal\search_api\Item\FieldInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -31,63 +34,63 @@ class IndexFieldsForm extends EntityForm {
   /**
    * The index for which the fields are configured.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $entity;
 
   /**
    * The shared temporary storage for unsaved search indexes.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStore
+   * @var SharedTempStore
    */
   protected $tempStore;
 
   /**
    * The data type plugin manager.
    *
-   * @var \Drupal\search_api\DataType\DataTypePluginManager
+   * @var DataTypePluginManager
    */
   protected $dataTypePluginManager;
 
   /**
    * The data type helper.
    *
-   * @var \Drupal\search_api\Utility\DataTypeHelperInterface|null
+   * @var DataTypeHelperInterface|null
    */
   protected $dataTypeHelper;
 
   /**
    * The fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface|null
+   * @var FieldsHelperInterface|null
    */
   protected $fieldsHelper;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs an IndexFieldsForm object.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $temp_store_factory
+   * @param SharedTempStoreFactory $temp_store_factory
    *   The factory for shared temporary storages.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\search_api\DataType\DataTypePluginManager $data_type_plugin_manager
+   * @param DataTypePluginManager $data_type_plugin_manager
    *   The data type plugin manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer to use.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Drupal\search_api\Utility\DataTypeHelperInterface $data_type_helper
+   * @param DataTypeHelperInterface $data_type_helper
    *   The data type helper.
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fields_helper
+   * @param FieldsHelperInterface $fields_helper
    *   The fields helper.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(SharedTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $entity_type_manager, DataTypePluginManager $data_type_plugin_manager, RendererInterface $renderer, DateFormatterInterface $date_formatter, DataTypeHelperInterface $data_type_helper, FieldsHelperInterface $fields_helper, MessengerInterface $messenger) {
@@ -216,7 +219,7 @@ class IndexFieldsForm extends EntityForm {
   /**
    * Builds the form fields for a set of fields.
    *
-   * @param \Drupal\search_api\Item\FieldInterface[] $fields
+   * @param FieldInterface[] $fields
    *   List of fields to display.
    *
    * @return array
@@ -507,7 +510,7 @@ class IndexFieldsForm extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function cancel(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/IndexForm.php b/src/Form/IndexForm.php
index 7bb843e1..2edf1634 100644
--- a/src/Form/IndexForm.php
+++ b/src/Form/IndexForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\search_api\ServerInterface;
+use Drupal\search_api\Tracker\TrackerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -30,39 +32,39 @@ class IndexForm extends EntityForm {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The plugin helper.
    *
-   * @var \Drupal\search_api\Utility\PluginHelperInterface
+   * @var PluginHelperInterface
    */
   protected $pluginHelper;
 
   /**
    * The index before the changes.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $originalEntity;
 
   /**
    * Constructs an IndexForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\search_api\Utility\PluginHelperInterface $plugin_helper
+   * @param PluginHelperInterface $plugin_helper
    *   The plugin helper.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, PluginHelperInterface $plugin_helper, MessengerInterface $messenger) {
@@ -90,7 +92,7 @@ class IndexForm extends EntityForm {
    */
   protected function getServerOptions() {
     $options = [];
-    /** @var \Drupal\search_api\ServerInterface[] $servers */
+    /** @var ServerInterface[] $servers */
     $servers = $this->entityTypeManager
       ->getStorage('search_api_server')
       ->loadMultiple();
@@ -119,7 +121,7 @@ class IndexForm extends EntityForm {
 
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\search_api\IndexInterface $index */
+    /** @var IndexInterface $index */
     $index = $this->getEntity();
     if ($index->isNew()) {
       $form['#title'] = $this->t('Add search index');
@@ -139,9 +141,9 @@ class IndexForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index that is being created or edited.
    */
   public function buildEntityForm(array &$form, FormStateInterface $form_state, IndexInterface $index) {
@@ -342,9 +344,9 @@ class IndexForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index being created or edited.
    */
   public function buildDatasourcesConfigForm(array &$form, FormStateInterface $form_state, IndexInterface $index) {
@@ -392,9 +394,9 @@ class IndexForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index being created or edited.
    */
   public function buildTrackerConfigForm(array &$form, FormStateInterface $form_state, IndexInterface $index) {
@@ -449,7 +451,7 @@ class IndexForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function submitAjaxDatasourceConfigForm(array $form, FormStateInterface $form_state) {
@@ -462,7 +464,7 @@ class IndexForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ -479,7 +481,7 @@ class IndexForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function submitAjaxTrackerConfigForm(array $form, FormStateInterface $form_state) {
@@ -492,7 +494,7 @@ class IndexForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ -508,7 +510,7 @@ class IndexForm extends EntityForm {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\search_api\IndexInterface $index */
+    /** @var IndexInterface $index */
     $index = $this->getEntity();
 
     $storage = $this->entityTypeManager->getStorage('search_api_index');
@@ -583,7 +585,7 @@ class IndexForm extends EntityForm {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
 
-    /** @var \Drupal\search_api\IndexInterface $index */
+    /** @var IndexInterface $index */
     $index = $this->getEntity();
     $index->setOptions($form_state->getValue('options', []) + $this->originalEntity->getOptions());
 
@@ -607,7 +609,7 @@ class IndexForm extends EntityForm {
         $tracker->submitConfigurationForm($form['tracker_config'], $tracker_form_state);
       }
     }
-    /** @var \Drupal\search_api\Tracker\TrackerInterface $tracker */
+    /** @var TrackerInterface $tracker */
     $index->setTracker($tracker);
   }
 
@@ -620,7 +622,7 @@ class IndexForm extends EntityForm {
     // Only save the index if the form doesn't need to be rebuilt.
     if (!$form_state->isRebuilding()) {
       try {
-        /** @var \Drupal\search_api\IndexInterface $index */
+        /** @var IndexInterface $index */
         $index = $this->getEntity();
         $index->save();
         $this->messenger->addStatus($this->t('The index was successfully saved.'));
diff --git a/src/Form/IndexProcessorsForm.php b/src/Form/IndexProcessorsForm.php
index 57db41e4..e83e9e78 100644
--- a/src/Form/IndexProcessorsForm.php
+++ b/src/Form/IndexProcessorsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\search_api\IndexInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,48 +23,48 @@ class IndexProcessorsForm extends EntityForm {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The index being configured.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $entity;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The datasource manager.
    *
-   * @var \Drupal\search_api\Processor\ProcessorPluginManager
+   * @var ProcessorPluginManager
    */
   protected $processorPluginManager;
 
   /**
    * The logger to use.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs an IndexProcessorsForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\search_api\Processor\ProcessorPluginManager $processor_plugin_manager
+   * @param ProcessorPluginManager $processor_plugin_manager
    *   The processor plugin manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ProcessorPluginManager $processor_plugin_manager, LoggerInterface $logger, MessengerInterface $messenger) {
@@ -112,7 +113,7 @@ class IndexProcessorsForm extends EntityForm {
     }
 
     $stages = $this->processorPluginManager->getProcessingStages();
-    /** @var \Drupal\search_api\Processor\ProcessorInterface[][] $processors_by_stage */
+    /** @var ProcessorInterface[][] $processors_by_stage */
     $processors_by_stage = [];
     foreach ($all_processors as $processor_id => $processor) {
       foreach ($stages as $stage => $definition) {
@@ -369,7 +370,7 @@ class IndexProcessorsForm extends EntityForm {
       }
       elseif (class_exists($processor_definition['class'])) {
         if (call_user_func([$processor_definition['class'], 'supportsIndex'], $this->entity)) {
-          /** @var \Drupal\search_api\Processor\ProcessorInterface $processor */
+          /** @var ProcessorInterface $processor */
           $processor = $this->processorPluginManager->createInstance($name, $settings);
           $processors[$name] = $processor;
         }
diff --git a/src/Form/IndexRebuildTrackerConfirmForm.php b/src/Form/IndexRebuildTrackerConfirmForm.php
index 5f652a12..c7405660 100644
--- a/src/Form/IndexRebuildTrackerConfirmForm.php
+++ b/src/Form/IndexRebuildTrackerConfirmForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\search_api\IndexInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -48,7 +49,7 @@ class IndexRebuildTrackerConfirmForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\search_api\IndexInterface $index */
+    /** @var IndexInterface $index */
     $index = $this->getEntity();
     $index->rebuildTracker();
     $this->messenger()
diff --git a/src/Form/IndexReindexConfirmForm.php b/src/Form/IndexReindexConfirmForm.php
index 9d6ac006..427a7640 100644
--- a/src/Form/IndexReindexConfirmForm.php
+++ b/src/Form/IndexReindexConfirmForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\search_api\IndexInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -18,14 +19,14 @@ class IndexReindexConfirmForm extends EntityConfirmFormBase {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs an IndexReindexConfirmForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(MessengerInterface $messenger) {
@@ -66,7 +67,7 @@ class IndexReindexConfirmForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\search_api\IndexInterface $index */
+    /** @var IndexInterface $index */
     $index = $this->getEntity();
 
     try {
diff --git a/src/Form/IndexStatusForm.php b/src/Form/IndexStatusForm.php
index d13e7f93..ba35f077 100644
--- a/src/Form/IndexStatusForm.php
+++ b/src/Form/IndexStatusForm.php
@@ -19,14 +19,14 @@ class IndexStatusForm extends FormBase {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs an IndexStatusForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(MessengerInterface $messenger) {
@@ -45,14 +45,14 @@ class IndexStatusForm extends FormBase {
   /**
    * The index task manager.
    *
-   * @var \Drupal\search_api\Task\IndexTaskManagerInterface|null
+   * @var IndexTaskManagerInterface|null
    */
   protected $indexTaskManager;
 
   /**
    * Retrieves the index task manager.
    *
-   * @return \Drupal\search_api\Task\IndexTaskManagerInterface
+   * @return IndexTaskManagerInterface
    *   The index task manager.
    */
   public function getIndexTaskManager() {
@@ -62,7 +62,7 @@ class IndexStatusForm extends FormBase {
   /**
    * Sets the index task manager.
    *
-   * @param \Drupal\search_api\Task\IndexTaskManagerInterface $index_task_manager
+   * @param IndexTaskManagerInterface $index_task_manager
    *   The new index task manager.
    *
    * @return $this
@@ -237,7 +237,7 @@ class IndexStatusForm extends FormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\search_api\IndexInterface $index */
+    /** @var IndexInterface $index */
     $index = $form['#index'];
 
     switch ($form_state->getTriggeringElement()['#name']) {
diff --git a/src/Form/ServerClearConfirmForm.php b/src/Form/ServerClearConfirmForm.php
index 4e452ad9..90cebe29 100644
--- a/src/Form/ServerClearConfirmForm.php
+++ b/src/Form/ServerClearConfirmForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\search_api\ServerInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -18,14 +19,14 @@ class ServerClearConfirmForm extends EntityConfirmFormBase {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a ServerClearConfirmForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(MessengerInterface $messenger) {
@@ -66,7 +67,7 @@ class ServerClearConfirmForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->getEntity();
 
     try {
diff --git a/src/Form/ServerDeleteConfirmForm.php b/src/Form/ServerDeleteConfirmForm.php
index b861648b..cdb5e27f 100644
--- a/src/Form/ServerDeleteConfirmForm.php
+++ b/src/Form/ServerDeleteConfirmForm.php
@@ -16,14 +16,14 @@ class ServerDeleteConfirmForm extends EntityDeleteForm {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a ServerDeleteConfirmForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(MessengerInterface $messenger) {
diff --git a/src/Form/ServerDisableConfirmForm.php b/src/Form/ServerDisableConfirmForm.php
index b2fb63b9..10acf503 100644
--- a/src/Form/ServerDisableConfirmForm.php
+++ b/src/Form/ServerDisableConfirmForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\search_api\ServerInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -16,14 +17,14 @@ class ServerDisableConfirmForm extends EntityConfirmFormBase {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a ServerDisableConfirmForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(MessengerInterface $messenger) {
@@ -71,7 +72,7 @@ class ServerDisableConfirmForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->entity;
     $server->setStatus(FALSE)->save();
 
diff --git a/src/Form/ServerForm.php b/src/Form/ServerForm.php
index 683c6978..6ccdf1a6 100644
--- a/src/Form/ServerForm.php
+++ b/src/Form/ServerForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\search_api\Backend\BackendInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityStorageException;
@@ -24,23 +25,23 @@ class ServerForm extends EntityForm {
   /**
    * The backend plugin manager.
    *
-   * @var \Drupal\search_api\Backend\BackendPluginManager
+   * @var BackendPluginManager
    */
   protected $backendPluginManager;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a ServerForm object.
    *
-   * @param \Drupal\search_api\Backend\BackendPluginManager $backend_plugin_manager
+   * @param BackendPluginManager $backend_plugin_manager
    *   The backend plugin manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(BackendPluginManager $backend_plugin_manager, MessengerInterface $messenger) {
@@ -70,7 +71,7 @@ class ServerForm extends EntityForm {
 
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->getEntity();
 
     // Set the page title according to whether we are creating or editing the
@@ -97,9 +98,9 @@ class ServerForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
-   * @param \Drupal\search_api\ServerInterface $server
+   * @param ServerInterface $server
    *   The server that is being created or edited.
    */
   public function buildEntityForm(array &$form, FormStateInterface $form_state, ServerInterface $server) {
@@ -143,7 +144,7 @@ class ServerForm extends EntityForm {
       $config = $backend_id === $server->getBackendId() ? $server->getBackendConfig() : [];
       $config['#server'] = $server;
       try {
-        /** @var \Drupal\search_api\Backend\BackendInterface $backend */
+        /** @var BackendInterface $backend */
         $backend = $this->backendPluginManager
           ->createInstance($backend_id, $config);
       }
@@ -203,9 +204,9 @@ class ServerForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
-   * @param \Drupal\search_api\ServerInterface $server
+   * @param ServerInterface $server
    *   The server that is being created or edited.
    */
   public function buildBackendConfigForm(array &$form, FormStateInterface $form_state, ServerInterface $server) {
@@ -245,7 +246,7 @@ class ServerForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ -265,7 +266,7 @@ class ServerForm extends EntityForm {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->getEntity();
 
     // Check if the backend plugin changed.
@@ -298,7 +299,7 @@ class ServerForm extends EntityForm {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
 
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->getEntity();
     // Check before loading the backend plugin so we don't throw an exception.
     if ($server->hasValidBackend()) {
diff --git a/src/Form/ServerStatusForm.php b/src/Form/ServerStatusForm.php
index 895a37cb..7c04420d 100644
--- a/src/Form/ServerStatusForm.php
+++ b/src/Form/ServerStatusForm.php
@@ -16,7 +16,7 @@ class ServerStatusForm extends FormBase {
   /**
    * The server task manager.
    *
-   * @var \Drupal\search_api\Task\ServerTaskManagerInterface|null
+   * @var ServerTaskManagerInterface|null
    */
   protected $serverTaskManager;
 
@@ -35,7 +35,7 @@ class ServerStatusForm extends FormBase {
   /**
    * Retrieves the server task manager.
    *
-   * @return \Drupal\search_api\Task\ServerTaskManagerInterface
+   * @return ServerTaskManagerInterface
    *   The server task manager.
    */
   public function getServerTaskManager() {
@@ -45,7 +45,7 @@ class ServerStatusForm extends FormBase {
   /**
    * Sets the server task manager.
    *
-   * @param \Drupal\search_api\Task\ServerTaskManagerInterface $server_task_manager
+   * @param ServerTaskManagerInterface $server_task_manager
    *   The new server task manager.
    *
    * @return $this
@@ -105,7 +105,7 @@ class ServerStatusForm extends FormBase {
    * {@inheritdoc}
    */
   public function executeTasks(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $form['#server'];
     $this->getServerTaskManager()->setExecuteBatch($server);
   }
@@ -115,7 +115,7 @@ class ServerStatusForm extends FormBase {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     // Redirect to the "Clear server" confirmation form.
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $form['#server'];
     $form_state->setRedirect('entity.search_api_server.clear', ['search_api_server' => $server->id()]);
   }
diff --git a/src/Form/UnsavedConfigurationFormTrait.php b/src/Form/UnsavedConfigurationFormTrait.php
index 6b90121c..ccacd028 100644
--- a/src/Form/UnsavedConfigurationFormTrait.php
+++ b/src/Form/UnsavedConfigurationFormTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Form;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\search_api\UnsavedConfigurationInterface;
 
 /**
@@ -12,21 +14,21 @@ trait UnsavedConfigurationFormTrait {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Retrieves the renderer.
    *
-   * @return \Drupal\Core\Render\RendererInterface
+   * @return RendererInterface
    *   The renderer.
    */
   public function getRenderer() {
@@ -36,7 +38,7 @@ trait UnsavedConfigurationFormTrait {
   /**
    * Retrieves the date formatter.
    *
-   * @return \Drupal\Core\Datetime\DateFormatterInterface
+   * @return DateFormatterInterface
    *   The date formatter.
    */
   public function getDateFormatter() {
diff --git a/src/IndexBatchHelper.php b/src/IndexBatchHelper.php
index 28e44739..eff82734 100644
--- a/src/IndexBatchHelper.php
+++ b/src/IndexBatchHelper.php
@@ -12,14 +12,14 @@ class IndexBatchHelper {
   /**
    * The translation manager service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected static $translationManager;
 
   /**
    * Gets the translation manager.
    *
-   * @return \Drupal\Core\StringTranslation\TranslationInterface
+   * @return TranslationInterface
    *   The translation manager.
    */
   protected static function getStringTranslation() {
@@ -32,7 +32,7 @@ class IndexBatchHelper {
   /**
    * Sets the translation manager.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation_manager
+   * @param TranslationInterface $translation_manager
    *   The new translation manager.
    */
   public static function setStringTranslation(TranslationInterface $translation_manager) {
@@ -60,7 +60,7 @@ class IndexBatchHelper {
   /**
    * Creates an indexing batch for a given search index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index for which items should be indexed.
    * @param int|null $batch_size
    *   (optional) Number of items to index per batch. Defaults to the cron limit
@@ -69,7 +69,7 @@ class IndexBatchHelper {
    *   (optional) Maximum number of items to index. Defaults to indexing all
    *   remaining items.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the batch could not be created.
    */
   public static function create(IndexInterface $index, $batch_size = NULL, $limit = -1) {
@@ -100,7 +100,7 @@ class IndexBatchHelper {
   /**
    * Processes an index batch operation.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index on which items should be indexed.
    * @param int $batch_size
    *   The maximum number of items to index per batch pass.
diff --git a/src/IndexInterface.php b/src/IndexInterface.php
index e502f257..5618ea00 100644
--- a/src/IndexInterface.php
+++ b/src/IndexInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api;
 
+use Drupal\search_api\Item\ItemInterface;
+use Drupal\Core\TypedData\DataDefinitionInterface;
+use Drupal\Core\TypedData\ComplexDataInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\search_api\Datasource\DatasourceInterface;
 use Drupal\search_api\Item\FieldInterface;
@@ -114,7 +117,7 @@ interface IndexInterface extends ConfigEntityInterface {
   /**
    * Retrieves this index's datasource plugins.
    *
-   * @return \Drupal\search_api\Datasource\DatasourceInterface[]
+   * @return DatasourceInterface[]
    *   The datasource plugins used by this index, keyed by plugin ID.
    */
   public function getDatasources();
@@ -149,10 +152,10 @@ interface IndexInterface extends ConfigEntityInterface {
    * @param string $datasource_id
    *   The ID of the datasource plugin to return.
    *
-   * @return \Drupal\search_api\Datasource\DatasourceInterface
+   * @return DatasourceInterface
    *   The datasource plugin with the given ID.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the specified datasource isn't enabled for this index, or
    *   couldn't be loaded.
    */
@@ -163,7 +166,7 @@ interface IndexInterface extends ConfigEntityInterface {
    *
    * An existing datasource with the same ID will be replaced.
    *
-   * @param \Drupal\search_api\Datasource\DatasourceInterface $datasource
+   * @param DatasourceInterface $datasource
    *   The datasource to be added.
    *
    * @return $this
@@ -183,7 +186,7 @@ interface IndexInterface extends ConfigEntityInterface {
   /**
    * Sets this index's datasource plugins.
    *
-   * @param \Drupal\search_api\Datasource\DatasourceInterface[] $datasources
+   * @param DatasourceInterface[] $datasources
    *   An array of datasources.
    *
    * @return $this
@@ -218,10 +221,10 @@ interface IndexInterface extends ConfigEntityInterface {
   /**
    * Retrieves the tracker plugin.
    *
-   * @return \Drupal\search_api\Tracker\TrackerInterface
+   * @return TrackerInterface
    *   The index's tracker plugin.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the tracker couldn't be instantiated.
    */
   public function getTrackerInstance();
@@ -229,7 +232,7 @@ interface IndexInterface extends ConfigEntityInterface {
   /**
    * Sets the tracker the index uses.
    *
-   * @param \Drupal\search_api\Tracker\TrackerInterface $tracker
+   * @param TrackerInterface $tracker
    *   The new tracker for the index.
    *
    * @return $this
@@ -263,11 +266,11 @@ interface IndexInterface extends ConfigEntityInterface {
   /**
    * Retrieves the server the index is attached to.
    *
-   * @return \Drupal\search_api\ServerInterface|null
+   * @return ServerInterface|null
    *   The server this index is linked to, or NULL if the index doesn't have a
    *   server.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the server couldn't be loaded.
    */
   public function getServerInstance();
@@ -275,7 +278,7 @@ interface IndexInterface extends ConfigEntityInterface {
   /**
    * Sets the server the index is attached to.
    *
-   * @param \Drupal\search_api\ServerInterface|null $server
+   * @param ServerInterface|null $server
    *   The server to move this index to, or NULL.
    *
    * @return $this
@@ -285,7 +288,7 @@ interface IndexInterface extends ConfigEntityInterface {
   /**
    * Retrieves this index's processors.
    *
-   * @return \Drupal\search_api\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   An array of all enabled processors for this index.
    */
   public function getProcessors();
@@ -300,7 +303,7 @@ interface IndexInterface extends ConfigEntityInterface {
    *   (optional) Overrides to apply to the index's processors, keyed by
    *   processor IDs with their respective overridden settings as values.
    *
-   * @return \Drupal\search_api\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   An array of all enabled processors that support the given stage, ordered
    *   by the weight for that stage.
    */
@@ -328,10 +331,10 @@ interface IndexInterface extends ConfigEntityInterface {
    * @param string $processor_id
    *   The ID of the processor plugin to return.
    *
-   * @return \Drupal\search_api\Processor\ProcessorInterface
+   * @return ProcessorInterface
    *   The processor plugin with the given ID.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the specified processor isn't enabled for this index, or
    *   couldn't be loaded.
    */
@@ -342,7 +345,7 @@ interface IndexInterface extends ConfigEntityInterface {
    *
    * An existing processor with the same ID will be replaced.
    *
-   * @param \Drupal\search_api\Processor\ProcessorInterface $processor
+   * @param ProcessorInterface $processor
    *   The processor to be added.
    *
    * @return $this
@@ -362,7 +365,7 @@ interface IndexInterface extends ConfigEntityInterface {
   /**
    * Sets this index's processor plugins.
    *
-   * @param \Drupal\search_api\Processor\ProcessorInterface[] $processors
+   * @param ProcessorInterface[] $processors
    *   An array of processors.
    *
    * @return $this
@@ -374,7 +377,7 @@ interface IndexInterface extends ConfigEntityInterface {
    *
    * Lets all enabled processors for this index alter the indexed items.
    *
-   * @param \Drupal\search_api\Item\ItemInterface[] $items
+   * @param ItemInterface[] $items
    *   An array of items to be indexed, passed by reference.
    */
   public function alterIndexedItems(array &$items);
@@ -384,7 +387,7 @@ interface IndexInterface extends ConfigEntityInterface {
    *
    * Lets all enabled processors for this index preprocess the indexed data.
    *
-   * @param \Drupal\search_api\Item\ItemInterface[] $items
+   * @param ItemInterface[] $items
    *   An array of items to be preprocessed for indexing.
    */
   public function preprocessIndexItems(array $items);
@@ -394,7 +397,7 @@ interface IndexInterface extends ConfigEntityInterface {
    *
    * Lets all enabled processors for this index preprocess the search query.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The search query to be executed.
    */
   public function preprocessSearchQuery(QueryInterface $query);
@@ -406,7 +409,7 @@ interface IndexInterface extends ConfigEntityInterface {
    * same object will be used for both calls (so preserving some data or state
    * locally is possible).
    *
-   * @param \Drupal\search_api\Query\ResultSetInterface $results
+   * @param ResultSetInterface $results
    *   The search results.
    */
   public function postprocessSearchResults(ResultSetInterface $results);
@@ -414,12 +417,12 @@ interface IndexInterface extends ConfigEntityInterface {
   /**
    * Adds a field to this index.
    *
-   * @param \Drupal\search_api\Item\FieldInterface $field
+   * @param FieldInterface $field
    *   The field to add.
    *
    * @return $this
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the field could not be added, either because a field with the
    *   same field ID already exists, or because the field identifier is one of
    *   the reserved field IDs of pseudo-fields that can be used in search
@@ -437,7 +440,7 @@ interface IndexInterface extends ConfigEntityInterface {
    *
    * @return $this
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if no field with the old ID exists, or because the new ID is
    *   already taken, or because the new field ID is one of the pseudo-fields
    *   that can be used in search queries.
@@ -454,7 +457,7 @@ interface IndexInterface extends ConfigEntityInterface {
    *
    * @return $this
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the field is locked.
    */
   public function removeField($field_id);
@@ -467,7 +470,7 @@ interface IndexInterface extends ConfigEntityInterface {
    * easily possible (such as when renaming multiple fields at once might cause
    * conflicts).
    *
-   * @param \Drupal\search_api\Item\FieldInterface[] $fields
+   * @param FieldInterface[] $fields
    *   An array of fields for this index, keyed by field IDs.
    *
    * @return $this
@@ -482,7 +485,7 @@ interface IndexInterface extends ConfigEntityInterface {
    *   backend. For more information, see
    *   \Drupal\search_api\Backend\BackendSpecificInterface::getBackendDefinedFields().
    *
-   * @return \Drupal\search_api\Item\FieldInterface[]
+   * @return FieldInterface[]
    *   An array of all indexed fields for this index, keyed by field identifier.
    */
   public function getFields($include_server_defined = FALSE);
@@ -493,7 +496,7 @@ interface IndexInterface extends ConfigEntityInterface {
    * @param string $field_id
    *   The field identifier.
    *
-   * @return \Drupal\search_api\Item\FieldInterface|null
+   * @return FieldInterface|null
    *   The field with the given field identifier, or NULL if there is no such
    *   field.
    */
@@ -506,7 +509,7 @@ interface IndexInterface extends ConfigEntityInterface {
    *   The ID of the datasource whose fields should be retrieved, or NULL to
    *   retrieve all datasource-independent fields.
    *
-   * @return \Drupal\search_api\Item\FieldInterface[]
+   * @return FieldInterface[]
    *   An array of all indexed fields for the given datasource, keyed by field
    *   identifier.
    */
@@ -543,11 +546,11 @@ interface IndexInterface extends ConfigEntityInterface {
    *   The ID of the datasource for which the properties should be retrieved. Or
    *   NULL to retrieve all datasource-independent properties.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface[]
+   * @return DataDefinitionInterface[]
    *   The properties belonging to the given datasource that are available in
    *   this index, keyed by their property names (not the complete field IDs).
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the specified datasource isn't enabled for this index, or
    *   couldn't be loaded.
    */
@@ -559,7 +562,7 @@ interface IndexInterface extends ConfigEntityInterface {
    * @param string $item_id
    *   The internal item ID of the object, with datasource prefix.
    *
-   * @return \Drupal\Core\TypedData\ComplexDataInterface|null
+   * @return ComplexDataInterface|null
    *   The loaded object, or NULL if the item does not exist.
    */
   public function loadItem($item_id);
@@ -570,7 +573,7 @@ interface IndexInterface extends ConfigEntityInterface {
    * @param array $item_ids
    *   The internal item IDs of the objects, with datasource prefix.
    *
-   * @return \Drupal\Core\TypedData\ComplexDataInterface[]
+   * @return ComplexDataInterface[]
    *   The loaded items, keyed by their internal item IDs.
    */
   public function loadItemsMultiple(array $item_ids);
@@ -601,13 +604,13 @@ interface IndexInterface extends ConfigEntityInterface {
    * that were either rejected from indexing (by a processor or alter hook) or
    * were successfully indexed.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface[] $search_objects
+   * @param ComplexDataInterface[] $search_objects
    *   An array of search objects to be indexed, keyed by their item IDs.
    *
    * @return string[]
    *   The IDs of all items that should be marked as indexed.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if any error occurred during indexing.
    */
   public function indexSpecificItems(array $search_objects);
@@ -644,7 +647,7 @@ interface IndexInterface extends ConfigEntityInterface {
    *
    * @return $this
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the index wasn't in "batch tracking" mode before.
    *
    * @see \Drupal\search_api\IndexInterface::startBatchTracking
@@ -693,7 +696,7 @@ interface IndexInterface extends ConfigEntityInterface {
   /**
    * Marks all items in this index for reindexing.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an internal error prevented the operation from succeeding – for
    *   example, if the tracker couldn't be loaded.
    */
@@ -702,7 +705,7 @@ interface IndexInterface extends ConfigEntityInterface {
   /**
    * Clears all indexed data from this index and marks it for reindexing.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the server couldn't be loaded, for example.
    */
   public function clear();
@@ -732,10 +735,10 @@ interface IndexInterface extends ConfigEntityInterface {
    * @param array $options
    *   (optional) Associative array of options configuring this query.
    *
-   * @return \Drupal\search_api\Query\QueryInterface
+   * @return QueryInterface
    *   A query object for searching this index.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the index is currently disabled or its server doesn't exist.
    *
    * @see \Drupal\search_api\Query\QueryInterface::create()
diff --git a/src/IndexListBuilder.php b/src/IndexListBuilder.php
index f285ccf4..89047549 100644
--- a/src/IndexListBuilder.php
+++ b/src/IndexListBuilder.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ -21,18 +24,18 @@ class IndexListBuilder extends ConfigEntityListBuilder {
   /**
    * The entity storage class for the 'search_api_server' entity type.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $serverStorage;
 
   /**
    * Constructs an IndexListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $server_storage
+   * @param EntityStorageInterface $server_storage
    *   The entity storage class for the 'search_api_server' entity type.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, EntityStorageInterface $server_storage) {
@@ -55,7 +58,7 @@ class IndexListBuilder extends ConfigEntityListBuilder {
   /**
    * Determines whether the "Database Search Defaults" module can be installed.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   An array of error messages describing why the module cannot be installed,
    *   keyed by a short, machine name-like identifier for the kind of error. If
    *   the array is empty, the module can be installed.
@@ -75,7 +78,7 @@ class IndexListBuilder extends ConfigEntityListBuilder {
       'page' => ['body'],
     ];
 
-    /** @var \Drupal\Core\Entity\EntityFieldManager $entity_field_manager */
+    /** @var EntityFieldManager $entity_field_manager */
     $entity_field_manager = \Drupal::service('entity_field.manager');
 
     foreach ($required_types as $required_type_id => $required_fields) {
@@ -103,7 +106,7 @@ class IndexListBuilder extends ConfigEntityListBuilder {
         'view' => 'search_content',
       ];
 
-      /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
+      /** @var EntityTypeManager $entity_type_manager */
       $entity_type_manager = \Drupal::service('entity_type.manager');
       foreach ($entities_to_check as $entity_type => $entity_id) {
         try {
@@ -165,7 +168,7 @@ class IndexListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $row = parent::buildRow($entity);
 
     $status = $entity->status();
@@ -233,7 +236,7 @@ class IndexListBuilder extends ConfigEntityListBuilder {
       ],
     ];
     foreach ($entity_groups['servers'] as $server_groups) {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+      /** @var ConfigEntityInterface $entity */
       foreach ($server_groups as $entity) {
         $list['servers']['#rows'][$entity->getEntityTypeId() . '.' . $entity->id()] = $this->buildRow($entity);
       }
@@ -274,7 +277,7 @@ class IndexListBuilder extends ConfigEntityListBuilder {
   /**
    * Loads search servers and indexes, grouped by servers.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface[][]
+   * @return ConfigEntityInterface[][]
    *   An associative array with two keys:
    *   - servers: All available search servers, each followed by all search
    *     indexes attached to it.
@@ -282,7 +285,7 @@ class IndexListBuilder extends ConfigEntityListBuilder {
    */
   public function loadGroups() {
     $indexes = $this->storage->loadMultiple();
-    /** @var \Drupal\search_api\ServerInterface[] $servers */
+    /** @var ServerInterface[] $servers */
     $servers = $this->serverStorage->loadMultiple();
 
     $this->sortByStatusThenAlphabetically($indexes);
@@ -315,7 +318,7 @@ class IndexListBuilder extends ConfigEntityListBuilder {
    *
    * Will preserve the key/value association of the array.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface[] $entities
+   * @param ConfigEntityInterface[] $entities
    *   An array of config entities.
    */
   protected function sortByStatusThenAlphabetically(array &$entities) {
diff --git a/src/Item/Field.php b/src/Item/Field.php
index cbef8d17..54cd83c1 100644
--- a/src/Item/Field.php
+++ b/src/Item/Field.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Item;
 
+use Drupal\search_api\Datasource\DatasourceInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\TypedData\DataDefinitionInterface;
 use Drupal\search_api\DataType\DataTypePluginManager;
@@ -21,7 +22,7 @@ class Field implements \IteratorAggregate, FieldInterface {
   /**
    * The index this field is attached to.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $index;
 
@@ -60,7 +61,7 @@ class Field implements \IteratorAggregate, FieldInterface {
   /**
    * The field's datasource.
    *
-   * @var \Drupal\search_api\Datasource\DatasourceInterface|null
+   * @var DatasourceInterface|null
    */
   protected $datasource;
 
@@ -74,7 +75,7 @@ class Field implements \IteratorAggregate, FieldInterface {
   /**
    * This field's data definition.
    *
-   * @var \Drupal\Core\TypedData\DataDefinitionInterface
+   * @var DataDefinitionInterface
    */
   protected $dataDefinition;
 
@@ -167,21 +168,21 @@ class Field implements \IteratorAggregate, FieldInterface {
   /**
    * The data type manager.
    *
-   * @var \Drupal\search_api\DataType\DataTypePluginManager|null
+   * @var DataTypePluginManager|null
    */
   protected $dataTypeManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a Field object.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The field's index.
    * @param string $field_identifier
    *   The field's identifier.
@@ -194,7 +195,7 @@ class Field implements \IteratorAggregate, FieldInterface {
   /**
    * Retrieves the data type manager.
    *
-   * @return \Drupal\search_api\DataType\DataTypePluginManager
+   * @return DataTypePluginManager
    *   The data type manager.
    */
   public function getDataTypeManager() {
@@ -204,7 +205,7 @@ class Field implements \IteratorAggregate, FieldInterface {
   /**
    * Sets the data type manager.
    *
-   * @param \Drupal\search_api\DataType\DataTypePluginManager $data_type_manager
+   * @param DataTypePluginManager $data_type_manager
    *   The new data type manager.
    *
    * @return $this
@@ -217,7 +218,7 @@ class Field implements \IteratorAggregate, FieldInterface {
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager(): EntityTypeManagerInterface {
@@ -227,7 +228,7 @@ class Field implements \IteratorAggregate, FieldInterface {
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
@@ -492,7 +493,7 @@ class Field implements \IteratorAggregate, FieldInterface {
    * This should mainly be used only when creating a new field object. Calling
    * this on an existing field object might not work as expected.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The field's new data definition.
    *
    * @return $this
diff --git a/src/Item/FieldInterface.php b/src/Item/FieldInterface.php
index d840032c..a0f96f7d 100644
--- a/src/Item/FieldInterface.php
+++ b/src/Item/FieldInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\search_api\Item;
 
+use Drupal\search_api\Datasource\DatasourceInterface;
+use Drupal\search_api\SearchApiException;
+use Drupal\Core\TypedData\DataDefinitionInterface;
+use Drupal\search_api\DataType\DataTypeInterface;
 use Drupal\search_api\IndexInterface;
 
 /**
@@ -14,7 +18,7 @@ interface FieldInterface extends \Traversable {
   /**
    * Returns the index of this field.
    *
-   * @return \Drupal\search_api\IndexInterface
+   * @return IndexInterface
    *   The index to which this field belongs.
    */
   public function getIndex();
@@ -26,7 +30,7 @@ interface FieldInterface extends \Traversable {
    * set to the same object that is returning them. The method shouldn't be used
    * in any other case.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index to which this field belongs.
    *
    * @return $this
@@ -98,11 +102,11 @@ interface FieldInterface extends \Traversable {
   /**
    * Returns the datasource of this field.
    *
-   * @return \Drupal\search_api\Datasource\DatasourceInterface|null
+   * @return DatasourceInterface|null
    *   The datasource to which this field belongs. NULL if the field is
    *   datasource-independent.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the field's datasource couldn't be loaded.
    */
   public function getDatasource();
@@ -232,10 +236,10 @@ interface FieldInterface extends \Traversable {
   /**
    * Retrieves this field's data definition.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   The data definition object for this field.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the field's data definition is unknown.
    */
   public function getDataDefinition();
@@ -251,7 +255,7 @@ interface FieldInterface extends \Traversable {
   /**
    * Retrieves the Search API data type plugin for this field's type.
    *
-   * @return \Drupal\search_api\DataType\DataTypeInterface|null
+   * @return DataTypeInterface|null
    *   The data type plugin, or NULL if the type is unknown.
    */
   public function getDataTypePlugin();
@@ -264,7 +268,7 @@ interface FieldInterface extends \Traversable {
    *
    * @return $this
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the type of this field is locked.
    */
   public function setType($type);
diff --git a/src/Item/Item.php b/src/Item/Item.php
index 3be37185..eb2e6232 100644
--- a/src/Item/Item.php
+++ b/src/Item/Item.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Item;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\TypedData\ComplexDataInterface;
@@ -23,7 +24,7 @@ class Item implements \IteratorAggregate, ItemInterface {
   /**
    * The search index with which this item is associated.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $index;
 
@@ -47,7 +48,7 @@ class Item implements \IteratorAggregate, ItemInterface {
   /**
    * The complex data item this Search API item is based on.
    *
-   * @var \Drupal\Core\TypedData\ComplexDataInterface
+   * @var ComplexDataInterface
    */
   protected $originalObject;
 
@@ -61,7 +62,7 @@ class Item implements \IteratorAggregate, ItemInterface {
   /**
    * The datasource of this item.
    *
-   * @var \Drupal\search_api\Datasource\DatasourceInterface
+   * @var DatasourceInterface
    */
   protected $datasource;
 
@@ -75,7 +76,7 @@ class Item implements \IteratorAggregate, ItemInterface {
   /**
    * The extracted fields of this item.
    *
-   * @var \Drupal\search_api\Item\FieldInterface[]
+   * @var FieldInterface[]
    */
   protected $fields = [];
 
@@ -117,7 +118,7 @@ class Item implements \IteratorAggregate, ItemInterface {
   /**
    * Cached access results for the item, keyed by user ID.
    *
-   * @var \Drupal\Core\Access\AccessResultInterface[]
+   * @var AccessResultInterface[]
    *
    * @see getAccessResult()
    */
@@ -126,11 +127,11 @@ class Item implements \IteratorAggregate, ItemInterface {
   /**
    * Constructs an Item object.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The item's search index.
    * @param string $id
    *   The ID of this item.
-   * @param \Drupal\search_api\Datasource\DatasourceInterface|null $datasource
+   * @param DatasourceInterface|null $datasource
    *   (optional) The datasource of this item. If not set, it will be determined
    *   from the ID and loaded from the index.
    */
@@ -320,7 +321,7 @@ class Item implements \IteratorAggregate, ItemInterface {
   public function setFields(array $fields) {
     // Make sure that all fields have the same index object set as we. This
     // might otherwise cause impossibly hard-to-detect bugs.
-    /** @var \Drupal\search_api\Item\FieldInterface $field */
+    /** @var FieldInterface $field */
     foreach ($fields as $field) {
       $field->setIndex($this->index);
     }
diff --git a/src/Item/ItemInterface.php b/src/Item/ItemInterface.php
index f7c70830..7e77367c 100644
--- a/src/Item/ItemInterface.php
+++ b/src/Item/ItemInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\search_api\Item;
 
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api\Datasource\DatasourceInterface;
+use Drupal\search_api\IndexInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\TypedData\ComplexDataInterface;
 
@@ -27,11 +31,11 @@ interface ItemInterface extends \Traversable {
    *   (optional) If TRUE, the object will be loaded if necessary. Otherwise,
    *   NULL will be returned if the object isn't available.
    *
-   * @return \Drupal\Core\TypedData\ComplexDataInterface|null
+   * @return ComplexDataInterface|null
    *   The wrapped object if it was previously set or could be loaded. NULL
    *   if it wasn't set previously and $load is FALSE.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if $load is TRUE but the object could not be loaded.
    */
   public function getOriginalObject($load = TRUE);
@@ -39,7 +43,7 @@ interface ItemInterface extends \Traversable {
   /**
    * Sets the original complex data object this item should be based on.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $original_object
+   * @param ComplexDataInterface $original_object
    *   The object that should be wrapped.
    *
    * @return $this
@@ -57,10 +61,10 @@ interface ItemInterface extends \Traversable {
   /**
    * Returns the datasource of this item.
    *
-   * @return \Drupal\search_api\Datasource\DatasourceInterface
+   * @return DatasourceInterface
    *   The datasource to which this item belongs.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the item's datasource wasn't set before and couldn't be loaded.
    */
   public function getDatasource();
@@ -68,7 +72,7 @@ interface ItemInterface extends \Traversable {
   /**
    * Returns the index of this item.
    *
-   * @return \Drupal\search_api\IndexInterface
+   * @return IndexInterface
    *   The index to which this item belongs.
    */
   public function getIndex();
@@ -101,7 +105,7 @@ interface ItemInterface extends \Traversable {
    *   extracted. Defaults to extracting all fields from the original object if
    *   necessary.
    *
-   * @return \Drupal\search_api\Item\FieldInterface|null
+   * @return FieldInterface|null
    *   The field object with this identifier, or NULL if the field is unknown.
    */
   public function getField($field_id, $extract = TRUE);
@@ -114,7 +118,7 @@ interface ItemInterface extends \Traversable {
    *   extracted. Defaults to extracting the fields from the original object if
    *   necessary.
    *
-   * @return \Drupal\search_api\Item\FieldInterface[]
+   * @return FieldInterface[]
    *   An array with the fields of this item, keyed by field identifier.
    */
   public function getFields($extract = TRUE);
@@ -124,7 +128,7 @@ interface ItemInterface extends \Traversable {
    *
    * @param string $field_id
    *   The field's identifier.
-   * @param \Drupal\search_api\Item\FieldInterface|null $field
+   * @param FieldInterface|null $field
    *   (optional) The information and contents of this field. Or NULL to remove
    *   the field from the item.
    *
@@ -139,7 +143,7 @@ interface ItemInterface extends \Traversable {
   /**
    * Sets the item's fields.
    *
-   * @param \Drupal\search_api\Item\FieldInterface[] $fields
+   * @param FieldInterface[] $fields
    *   An array with the fields of this item, keyed by field identifier.
    *
    * @return $this
@@ -289,7 +293,7 @@ interface ItemInterface extends \Traversable {
   /**
    * Checks whether a user has permission to view this item.
    *
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   (optional) The user session for which to check access, or NULL to check
    *   access for the current user.
    *
@@ -306,11 +310,11 @@ interface ItemInterface extends \Traversable {
   /**
    * Checks whether a user has permission to view this item.
    *
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   (optional) The user for which to check access, or NULL to check access
    *   for the current user.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function getAccessResult(AccountInterface $account = NULL);
diff --git a/src/LoggerTrait.php b/src/LoggerTrait.php
index b958db56..cdb039c1 100644
--- a/src/LoggerTrait.php
+++ b/src/LoggerTrait.php
@@ -14,14 +14,14 @@ trait LoggerTrait {
   /**
    * The logging channel to use.
    *
-   * @var \Psr\Log\LoggerInterface|null
+   * @var LoggerInterface|null
    */
   protected $logger;
 
   /**
    * Retrieves the logger.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger.
    */
   public function getLogger() {
@@ -31,7 +31,7 @@ trait LoggerTrait {
   /**
    * Sets the logger.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The new logger.
    *
    * @return $this
diff --git a/src/ParamConverter/SearchApiConverter.php b/src/ParamConverter/SearchApiConverter.php
index f9fa697e..5b53629c 100644
--- a/src/ParamConverter/SearchApiConverter.php
+++ b/src/ParamConverter/SearchApiConverter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\ParamConverter;
 
+use Drupal\search_api\IndexInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
@@ -27,29 +28,28 @@ class SearchApiConverter extends EntityConverter implements ParamConverterInterf
   /**
    * The shared temporary storage factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The currently logged-in user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   // phpcs:disable Drupal.Commenting.FunctionComment.TypeHintMissing
-
   /**
    * Constructs a new SearchApiConverter.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $temp_store_factory
+   * @param SharedTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The current user.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, $entity_repository, $temp_store_factory, $user = NULL) {
@@ -85,7 +85,7 @@ class SearchApiConverter extends EntityConverter implements ParamConverterInterf
    * {@inheritdoc}
    */
   public function convert($value, $definition, $name, array $defaults) {
-    /** @var \Drupal\search_api\IndexInterface $entity */
+    /** @var IndexInterface $entity */
     try {
       $storage = $this->entityTypeManager->getStorage('search_api_index');
     }
@@ -108,7 +108,7 @@ class SearchApiConverter extends EntityConverter implements ParamConverterInterf
     // store the lock metadata.
     $store = $this->tempStoreFactory->get('search_api_index');
     $current_user_id = $this->currentUser->id() ?: session_id();
-    /** @var \Drupal\search_api\IndexInterface|\Drupal\search_api\UnsavedIndexConfiguration $index */
+    /** @var IndexInterface|UnsavedIndexConfiguration $index */
     $index = $store->get($value);
     if ($index) {
       $index = new UnsavedIndexConfiguration($index, $store, $current_user_id);
diff --git a/src/ParseMode/ParseModePluginManager.php b/src/ParseMode/ParseModePluginManager.php
index 35151ef1..828aa8a6 100644
--- a/src/ParseMode/ParseModePluginManager.php
+++ b/src/ParseMode/ParseModePluginManager.php
@@ -24,11 +24,11 @@ class ParseModePluginManager extends SearchApiPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EventDispatcherInterface $eventDispatcher) {
@@ -42,7 +42,7 @@ class ParseModePluginManager extends SearchApiPluginManager {
   /**
    * Returns all known parse modes.
    *
-   * @return \Drupal\search_api\ParseMode\ParseModeInterface[]
+   * @return ParseModeInterface[]
    *   An array of parse mode plugins, keyed by type identifier.
    */
   public function getInstances() {
diff --git a/src/Plugin/ConfigurablePluginBase.php b/src/Plugin/ConfigurablePluginBase.php
index da836e8e..45719474 100644
--- a/src/Plugin/ConfigurablePluginBase.php
+++ b/src/Plugin/ConfigurablePluginBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api\Plugin;
 
+use Drupal\Core\StringTranslation\TranslationInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\PluginDependencyTrait;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -38,7 +41,7 @@ abstract class ConfigurablePluginBase extends HideablePluginBase implements Conf
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     $plugin = new static($configuration, $plugin_id, $plugin_definition);
 
-    /** @var \Drupal\Core\StringTranslation\TranslationInterface $translation */
+    /** @var TranslationInterface $translation */
     $translation = $container->get('string_translation');
     $plugin->setStringTranslation($translation);
 
@@ -106,7 +109,7 @@ abstract class ConfigurablePluginBase extends HideablePluginBase implements Conf
    * method, if it implements
    * \Drupal\Component\Plugin\DependentPluginInterface.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $instance
+   * @param PluginInspectionInterface $instance
    *   The plugin instance.
    *
    * @return array
@@ -131,7 +134,7 @@ abstract class ConfigurablePluginBase extends HideablePluginBase implements Conf
    * method, if it implements
    * \Drupal\Component\Plugin\DependentPluginInterface.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $instance
+   * @param PluginInspectionInterface $instance
    *   The plugin instance.
    *
    * @deprecated in search_api:8.x-1.16 and is removed from search_api:2.0.0.
@@ -148,7 +151,7 @@ abstract class ConfigurablePluginBase extends HideablePluginBase implements Conf
   /**
    * Wraps the module handler.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler.
    *
    * @deprecated in search_api:8.x-1.16 and is removed from search_api:2.0.0.
@@ -165,7 +168,7 @@ abstract class ConfigurablePluginBase extends HideablePluginBase implements Conf
   /**
    * Wraps the theme handler.
    *
-   * @return \Drupal\Core\Extension\ThemeHandlerInterface
+   * @return ThemeHandlerInterface
    *   The theme handler.
    *
    * @deprecated in search_api:8.x-1.16 and is removed from search_api:2.0.0.
diff --git a/src/Plugin/IndexPluginBase.php b/src/Plugin/IndexPluginBase.php
index 16ce639c..9300c879 100644
--- a/src/Plugin/IndexPluginBase.php
+++ b/src/Plugin/IndexPluginBase.php
@@ -12,7 +12,7 @@ abstract class IndexPluginBase extends ConfigurablePluginBase implements IndexPl
   /**
    * The index this processor is configured for.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $index;
 
diff --git a/src/Plugin/IndexPluginInterface.php b/src/Plugin/IndexPluginInterface.php
index b42db65c..e2e4d81f 100644
--- a/src/Plugin/IndexPluginInterface.php
+++ b/src/Plugin/IndexPluginInterface.php
@@ -12,7 +12,7 @@ interface IndexPluginInterface extends ConfigurablePluginInterface {
   /**
    * Retrieves the index this plugin is configured for.
    *
-   * @return \Drupal\search_api\IndexInterface
+   * @return IndexInterface
    *   The index this plugin is configured for.
    */
   public function getIndex();
@@ -20,7 +20,7 @@ interface IndexPluginInterface extends ConfigurablePluginInterface {
   /**
    * Sets the index this plugin is configured for.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index this plugin is configured for.
    */
   public function setIndex(IndexInterface $index);
diff --git a/src/Plugin/PluginFormTrait.php b/src/Plugin/PluginFormTrait.php
index e9bb8ec8..f806321a 100644
--- a/src/Plugin/PluginFormTrait.php
+++ b/src/Plugin/PluginFormTrait.php
@@ -19,7 +19,7 @@ trait PluginFormTrait {
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @see \Drupal\Core\Plugin\PluginFormInterface::validateConfigurationForm()
@@ -33,7 +33,7 @@ trait PluginFormTrait {
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @see \Drupal\Core\Plugin\PluginFormInterface::submitConfigurationForm()
diff --git a/src/Plugin/search_api/data_type/value/TextValue.php b/src/Plugin/search_api/data_type/value/TextValue.php
index bb5d3ff9..3754d90b 100644
--- a/src/Plugin/search_api/data_type/value/TextValue.php
+++ b/src/Plugin/search_api/data_type/value/TextValue.php
@@ -24,7 +24,7 @@ class TextValue implements TextValueInterface {
   /**
    * The tokens created for this text value (if any).
    *
-   * @var \Drupal\search_api\Plugin\search_api\data_type\value\TextTokenInterface[]|null
+   * @var TextTokenInterface[]|null
    */
   protected $tokens;
 
diff --git a/src/Plugin/search_api/data_type/value/TextValueInterface.php b/src/Plugin/search_api/data_type/value/TextValueInterface.php
index 2b4b601b..9f3a61c5 100644
--- a/src/Plugin/search_api/data_type/value/TextValueInterface.php
+++ b/src/Plugin/search_api/data_type/value/TextValueInterface.php
@@ -59,7 +59,7 @@ interface TextValueInterface {
   /**
    * Retrieves the text tokens this text value was split into, if any.
    *
-   * @return \Drupal\search_api\Plugin\search_api\data_type\value\TextTokenInterface[]|null
+   * @return TextTokenInterface[]|null
    *   The text tokens this text value was split into, or NULL if the value has
    *   not been tokenized in any way yet.
    */
@@ -68,7 +68,7 @@ interface TextValueInterface {
   /**
    * Sets the text tokens for the text value.
    *
-   * @param \Drupal\search_api\Plugin\search_api\data_type\value\TextTokenInterface[]|null $tokens
+   * @param TextTokenInterface[]|null $tokens
    *   The new text tokens, or NULL to remove them.
    *
    * @return $this
diff --git a/src/Plugin/search_api/datasource/ContentEntity.php b/src/Plugin/search_api/datasource/ContentEntity.php
index d401da39..91435454 100644
--- a/src/Plugin/search_api/datasource/ContentEntity.php
+++ b/src/Plugin/search_api/datasource/ContentEntity.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api\Plugin\search_api\datasource;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\TypedData\DataDefinitionInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\Cache;
@@ -61,77 +64,77 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The entity memory cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $memoryCache;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface|null
+   * @var EntityFieldManagerInterface|null
    */
   protected $entityFieldManager;
 
   /**
    * The entity display repository manager.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface|null
+   * @var EntityDisplayRepositoryInterface|null
    */
   protected $entityDisplayRepository;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null
+   * @var EntityTypeBundleInfoInterface|null
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface|null
+   * @var TypedDataManagerInterface|null
    */
   protected $typedDataManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|null
+   * @var ConfigFactoryInterface|null
    */
   protected $configFactory;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface|null
+   * @var FieldsHelperInterface|null
    */
   protected $fieldsHelper;
 
@@ -178,7 +181,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the database connection.
    *
-   * @return \Drupal\Core\Database\Connection
+   * @return Connection
    *   The database connection.
    */
   public function getDatabaseConnection(): Connection {
@@ -188,7 +191,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Sets the database connection.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The new database connection.
    *
    * @return $this
@@ -201,7 +204,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ -211,7 +214,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the entity storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The entity storage.
    */
   protected function getEntityStorage() {
@@ -221,7 +224,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Returns the definition of this datasource's entity type.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity type definition.
    */
   protected function getEntityType() {
@@ -232,7 +235,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
@@ -245,7 +248,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the entity field manager.
    *
-   * @return \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @return EntityFieldManagerInterface
    *   The entity field manager.
    */
   public function getEntityFieldManager() {
@@ -255,7 +258,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Sets the entity field manager.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The new entity field manager.
    *
    * @return $this
@@ -268,7 +271,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the entity display repository.
    *
-   * @return \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @return EntityDisplayRepositoryInterface
    *   The entity entity display repository.
    */
   public function getEntityDisplayRepository() {
@@ -278,7 +281,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Sets the entity display repository.
    *
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The new entity display repository.
    *
    * @return $this
@@ -291,7 +294,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the entity display repository.
    *
-   * @return \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @return EntityTypeBundleInfoInterface
    *   The entity entity display repository.
    */
   public function getEntityTypeBundleInfo() {
@@ -301,7 +304,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Sets the entity type bundle info.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The new entity type bundle info.
    *
    * @return $this
@@ -314,7 +317,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the typed data manager.
    *
-   * @return \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @return TypedDataManagerInterface
    *   The typed data manager.
    */
   public function getTypedDataManager() {
@@ -324,7 +327,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Sets the typed data manager.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The new typed data manager.
    *
    * @return $this
@@ -337,7 +340,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the config factory.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config factory.
    */
   public function getConfigFactory() {
@@ -360,7 +363,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Sets the config factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The new config factory.
    *
    * @return $this
@@ -373,7 +376,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the language manager.
    *
-   * @return \Drupal\Core\Language\LanguageManagerInterface
+   * @return LanguageManagerInterface
    *   The language manager.
    */
   public function getLanguageManager() {
@@ -383,7 +386,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Sets the language manager.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The new language manager.
    */
   public function setLanguageManager(LanguageManagerInterface $language_manager) {
@@ -393,7 +396,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the fields helper.
    *
-   * @return \Drupal\search_api\Utility\FieldsHelperInterface
+   * @return FieldsHelperInterface
    *   The fields helper.
    */
   public function getFieldsHelper() {
@@ -403,7 +406,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Sets the fields helper.
    *
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fields_helper
+   * @param FieldsHelperInterface $fields_helper
    *   The new fields helper.
    *
    * @return $this
@@ -416,7 +419,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the state service.
    *
-   * @return \Drupal\Core\State\StateInterface
+   * @return StateInterface
    *   The entity type manager.
    */
   public function getState() {
@@ -426,7 +429,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Sets the state service.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    *
    * @return $this
@@ -439,7 +442,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the entity memory cache service.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface|null
+   * @return CacheBackendInterface|null
    *   The memory cache, or NULL.
    */
   public function getEntityMemoryCache() {
@@ -449,7 +452,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Sets the entity memory cache service.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $memory_cache
+   * @param CacheBackendInterface $memory_cache
    *   The memory cache.
    *
    * @return $this
@@ -507,7 +510,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
       }
     }
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface[] $entities */
+    /** @var ContentEntityInterface[] $entities */
     $entities = $this->getEntityStorage()->loadMultiple(array_keys($entity_ids));
     $items = [];
     $allowed_bundles = $this->getBundles();
@@ -655,10 +658,10 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the entity from a search item.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $item
+   * @param ComplexDataInterface $item
    *   An item of this datasource's type.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity object represented by that item, or NULL if none could be
    *   found.
    */
@@ -905,7 +908,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
       $enabled_languages = array_unique(array_merge($languages, $enabled_languages));
     }
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     foreach ($this->getEntityStorage()->loadMultiple($entity_ids) as $entity_id => $entity) {
       $translations = array_keys($entity->getTranslationLanguages());
       $translations = array_intersect($translations, $enabled_languages);
@@ -959,7 +962,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
   /**
    * Retrieves the enabled languages, including "not applicable/specified".
    *
-   * @return \Drupal\Core\Language\LanguageInterface[]
+   * @return LanguageInterface[]
    *   All languages that should be processed for this datasource, keyed by
    *   language code.
    */
@@ -1182,7 +1185,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
    *
    * @param string $property_path
    *   The property path of the property.
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface[] $properties
+   * @param DataDefinitionInterface[] $properties
    *   The properties which form the basis for the property path.
    *
    * @return string[][]
@@ -1249,7 +1252,7 @@ class ContentEntity extends DatasourcePluginBase implements PluginFormInterface
    * entity with that ID actually exists, or whether it has a bundle included
    * for that datasource, is not verified.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to validate.
    * @param string $datasource_id
    *   The ID of the datasource on the index for which to validate.
diff --git a/src/Plugin/search_api/datasource/ContentEntityDeriver.php b/src/Plugin/search_api/datasource/ContentEntityDeriver.php
index 7f6318fb..9ebde8d1 100644
--- a/src/Plugin/search_api/datasource/ContentEntityDeriver.php
+++ b/src/Plugin/search_api/datasource/ContentEntityDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\search_api\datasource;
 
+use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -26,7 +27,7 @@ class ContentEntityDeriver extends DeriverBase implements ContainerDeriverInterf
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -36,11 +37,11 @@ class ContentEntityDeriver extends DeriverBase implements ContainerDeriverInterf
   public static function create(ContainerInterface $container, $base_plugin_id) {
     $deriver = new static();
 
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
     $deriver->setEntityTypeManager($entity_type_manager);
 
-    /** @var \Drupal\Core\StringTranslation\TranslationInterface $translation */
+    /** @var TranslationInterface $translation */
     $translation = $container->get('string_translation');
     $deriver->setStringTranslation($translation);
 
@@ -50,7 +51,7 @@ class ContentEntityDeriver extends DeriverBase implements ContainerDeriverInterf
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ -60,7 +61,7 @@ class ContentEntityDeriver extends DeriverBase implements ContainerDeriverInterf
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
    * @return $this
diff --git a/src/Plugin/search_api/datasource/ContentEntityTaskManager.php b/src/Plugin/search_api/datasource/ContentEntityTaskManager.php
index 17bdaa1e..a3691343 100644
--- a/src/Plugin/search_api/datasource/ContentEntityTaskManager.php
+++ b/src/Plugin/search_api/datasource/ContentEntityTaskManager.php
@@ -27,23 +27,23 @@ class ContentEntityTaskManager implements EventSubscriberInterface {
   /**
    * The Search API task manager.
    *
-   * @var \Drupal\search_api\Task\TaskManagerInterface
+   * @var TaskManagerInterface
    */
   protected $taskManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a ContentEntityTaskManager object.
    *
-   * @param \Drupal\search_api\Task\TaskManagerInterface $task_manager
+   * @param TaskManagerInterface $task_manager
    *   The Search API task manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(TaskManagerInterface $task_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -64,7 +64,7 @@ class ContentEntityTaskManager implements EventSubscriberInterface {
   /**
    * Processes a datasource tracking event.
    *
-   * @param \Drupal\search_api\Task\TaskEvent $event
+   * @param TaskEvent $event
    *   The task event.
    * @param string $event_name
    *   The name of the event.
@@ -90,7 +90,7 @@ class ContentEntityTaskManager implements EventSubscriberInterface {
     $datasource_id = $data['datasource'];
     $reschedule = FALSE;
     if ($index->isValidDatasource($datasource_id)) {
-      /** @var \Drupal\search_api\Plugin\search_api\datasource\ContentEntity $datasource */
+      /** @var ContentEntity $datasource */
       $datasource = $index->getDatasource($datasource_id);
       $raw_ids = $datasource->getPartialItemIds($data['page'], $data['bundles'], $data['languages']);
       if ($raw_ids !== NULL) {
diff --git a/src/Plugin/search_api/datasource/ContentEntityTrackingManager.php b/src/Plugin/search_api/datasource/ContentEntityTrackingManager.php
index 957aaa6d..75e62970 100644
--- a/src/Plugin/search_api/datasource/ContentEntityTrackingManager.php
+++ b/src/Plugin/search_api/datasource/ContentEntityTrackingManager.php
@@ -26,32 +26,32 @@ class ContentEntityTrackingManager {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The Search API task manager.
    *
-   * @var \Drupal\search_api\Task\TaskManagerInterface
+   * @var TaskManagerInterface
    */
   protected $taskManager;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\search_api\Task\TaskManagerInterface $taskManager
+   * @param TaskManagerInterface $taskManager
    *   The task manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager, TaskManagerInterface $taskManager) {
@@ -70,7 +70,7 @@ class ContentEntityTrackingManager {
    * value before this hook is invoked, you can prevent this behavior and make the
    * Search API ignore this new entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The new entity.
    *
    * @see search_api_entity_insert()
@@ -93,7 +93,7 @@ class ContentEntityTrackingManager {
    * value before this hook is invoked, you can prevent this behavior and make the
    * Search API ignore this update.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The updated entity.
    *
    * @see search_api_entity_update()
@@ -115,7 +115,7 @@ class ContentEntityTrackingManager {
    * only be recognized if an appropriate @code $entity->original @endcode value
    * is set.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity to be indexed.
    * @param bool $new
    *   (optional) TRUE if this is a new entity, FALSE if it already existed (and
@@ -189,7 +189,7 @@ class ContentEntityTrackingManager {
    * the tracking table or on the server, since the item will not removed from
    * there (if it has been added before).)
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The deleted entity.
    *
    * @see search_api_entity_delete()
@@ -221,10 +221,10 @@ class ContentEntityTrackingManager {
   /**
    * Retrieves all indexes that are configured to index the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity for which to check.
    *
-   * @return \Drupal\search_api\IndexInterface[]
+   * @return IndexInterface[]
    *   All indexes that are configured to index the given entity (using the
    *   default Content Entity datasource plugin).
    */
@@ -235,7 +235,7 @@ class ContentEntityTrackingManager {
     $entity_bundle = $entity->bundle();
     $has_bundles = $entity->getEntityType()->hasKey('bundle');
 
-    /** @var \Drupal\search_api\IndexInterface[] $indexes */
+    /** @var IndexInterface[] $indexes */
     $indexes = [];
     try {
       $indexes = $this->entityTypeManager->getStorage('search_api_index')
@@ -281,12 +281,12 @@ class ContentEntityTrackingManager {
    * Detects changes in the selected bundles or languages and adds/removes items
    * to/from tracking accordingly.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index that was updated.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if a datasource referenced an unknown entity type.
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Never thrown, but static analysis tools think it could be.
    *
    * @see search_api_search_api_index_update()
@@ -295,7 +295,7 @@ class ContentEntityTrackingManager {
     if (!$index->status()) {
       return;
     }
-    /** @var \Drupal\search_api\IndexInterface $original */
+    /** @var IndexInterface $original */
     $original = $index->original ?? NULL;
     if (!$original || !$original->status()) {
       return;
@@ -382,7 +382,7 @@ class ContentEntityTrackingManager {
    * entity with that ID actually exists, or whether it has a bundle included
    * for that datasource, is not verified.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to validate.
    * @param string $datasource_id
    *   The ID of the datasource on the index for which to validate.
diff --git a/src/Plugin/search_api/datasource/EntityDatasourceInterface.php b/src/Plugin/search_api/datasource/EntityDatasourceInterface.php
index 3805ddeb..ef3134d4 100644
--- a/src/Plugin/search_api/datasource/EntityDatasourceInterface.php
+++ b/src/Plugin/search_api/datasource/EntityDatasourceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\search_api\datasource;
 
+use Drupal\search_api\IndexInterface;
 @trigger_error('\Drupal\search_api\Plugin\search_api\datasource\EntityDatasourceInterface is deprecated in search_api:8.x-1.16 and is removed from search_api:2.0.0. There is no replacement. See https://www.drupal.org/node/3103584.', E_USER_DEPRECATED);
 
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -20,10 +21,10 @@ interface EntityDatasourceInterface extends DatasourceInterface {
   /**
    * Retrieves all indexes that are configured to index the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity for which to check.
    *
-   * @return \Drupal\search_api\IndexInterface[]
+   * @return IndexInterface[]
    *   All indexes that are configured to index the given entity (using this
    *   datasource class).
    */
diff --git a/src/Plugin/search_api/display/ViewsDisplayBase.php b/src/Plugin/search_api/display/ViewsDisplayBase.php
index 04fec188..3c7a87ba 100644
--- a/src/Plugin/search_api/display/ViewsDisplayBase.php
+++ b/src/Plugin/search_api/display/ViewsDisplayBase.php
@@ -14,7 +14,7 @@ abstract class ViewsDisplayBase extends DisplayPluginBase {
   /**
    * The current route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface|null
+   * @var RouteMatchInterface|null
    */
   protected $currentRouteMatch;
 
@@ -33,7 +33,7 @@ abstract class ViewsDisplayBase extends DisplayPluginBase {
   /**
    * Retrieves the current route match service.
    *
-   * @return \Drupal\Core\Routing\RouteMatchInterface
+   * @return RouteMatchInterface
    *   The current route match service.
    */
   public function getCurrentRouteMatch() {
@@ -43,7 +43,7 @@ abstract class ViewsDisplayBase extends DisplayPluginBase {
   /**
    * Sets the current route match service.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $current_route_match
+   * @param RouteMatchInterface $current_route_match
    *   The new current route match service.
    *
    * @return $this
diff --git a/src/Plugin/search_api/display/ViewsDisplayDeriver.php b/src/Plugin/search_api/display/ViewsDisplayDeriver.php
index 8ed5701a..1f01075b 100644
--- a/src/Plugin/search_api/display/ViewsDisplayDeriver.php
+++ b/src/Plugin/search_api/display/ViewsDisplayDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Plugin\search_api\display;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\views\Entity\View;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\search_api\Display\DisplayDeriverBase;
 use Drupal\search_api\IndexInterface;
@@ -25,7 +27,7 @@ class ViewsDisplayDeriver extends DisplayDeriverBase {
       $this->derivatives = [];
 
       try {
-        /** @var \Drupal\Core\Entity\EntityStorageInterface $views_storage */
+        /** @var EntityStorageInterface $views_storage */
         $views_storage = $this->entityTypeManager->getStorage('view');
         $all_views = $views_storage->loadMultiple();
       }
@@ -33,7 +35,7 @@ class ViewsDisplayDeriver extends DisplayDeriverBase {
         return $this->derivatives;
       }
 
-      /** @var \Drupal\views\Entity\View $view */
+      /** @var View $view */
       foreach ($all_views as $view) {
         $this->derivatives += $this->getDisplaysForView($base_plugin_definition, $view, $this->derivatives);
       }
@@ -47,7 +49,7 @@ class ViewsDisplayDeriver extends DisplayDeriverBase {
    *
    * @param array $base_plugin_definition
    *   The plugin definition for this plugin.
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *   The view to create plugin definitions for.
    * @param array $plugin_derivatives
    *   An array of already existing derived plugin definitions.
diff --git a/src/Plugin/search_api/processor/AddHierarchy.php b/src/Plugin/search_api/processor/AddHierarchy.php
index 56466f30..e5c56ffa 100644
--- a/src/Plugin/search_api/processor/AddHierarchy.php
+++ b/src/Plugin/search_api/processor/AddHierarchy.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\search_api\Plugin\search_api\processor;
 
+use Drupal\search_api\Item\ItemInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\taxonomy\TermStorageInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface;
@@ -45,7 +49,7 @@ class AddHierarchy extends ProcessorPluginBase implements PluginFormInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -64,7 +68,7 @@ class AddHierarchy extends ProcessorPluginBase implements PluginFormInterface {
   /**
    * Retrieves the entity type manager service.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   public function getEntityTypeManager() {
@@ -74,7 +78,7 @@ class AddHierarchy extends ProcessorPluginBase implements PluginFormInterface {
   /**
    * Sets the entity type manager service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    *
    * @return $this
@@ -150,7 +154,7 @@ class AddHierarchy extends ProcessorPluginBase implements PluginFormInterface {
   /**
    * Finds all hierarchical properties nested on an entity-typed property.
    *
-   * @param \Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface $property
+   * @param EntityDataDefinitionInterface $property
    *   The property to be searched for hierarchical nested properties.
    * @param string $property_label
    *   The property's label.
@@ -266,7 +270,7 @@ class AddHierarchy extends ProcessorPluginBase implements PluginFormInterface {
    * {@inheritdoc}
    */
   public function preprocessIndexItems(array $items) {
-    /** @var \Drupal\search_api\Item\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($items as $item) {
       foreach ($this->configuration['fields'] as $field_id => $property_specifier) {
         $field = $item->getField($field_id);
@@ -310,17 +314,17 @@ class AddHierarchy extends ProcessorPluginBase implements PluginFormInterface {
    * @param string $property
    *   The name of the property on the entity type which contains the references
    *   to the parent entities.
-   * @param \Drupal\search_api\Item\FieldInterface $field
+   * @param FieldInterface $field
    *   The field to which values should be added.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if a referenced entity type does not exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if a referenced entity's storage handler couldn't be loaded.
    */
   protected function addHierarchyValues($entityTypeId, $entityId, $property, FieldInterface $field) {
     if ("$entityTypeId-$property" == 'taxonomy_term-parent') {
-      /** @var \Drupal\taxonomy\TermStorageInterface $entity_storage */
+      /** @var TermStorageInterface $entity_storage */
       $entity_storage = $this->getEntityTypeManager()
         ->getStorage('taxonomy_term');
       $parents = [];
diff --git a/src/Plugin/search_api/processor/ContentAccess.php b/src/Plugin/search_api/processor/ContentAccess.php
index d3154396..da415ace 100644
--- a/src/Plugin/search_api/processor/ContentAccess.php
+++ b/src/Plugin/search_api/processor/ContentAccess.php
@@ -40,14 +40,14 @@ class ContentAccess extends ProcessorPluginBase {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection|null
+   * @var Connection|null
    */
   protected $database;
 
   /**
    * The current_user service used by this plugin.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface|null
+   * @var AccountProxyInterface|null
    */
   protected $currentUser;
 
@@ -68,7 +68,7 @@ class ContentAccess extends ProcessorPluginBase {
   /**
    * Retrieves the database connection.
    *
-   * @return \Drupal\Core\Database\Connection
+   * @return Connection
    *   The database connection.
    */
   public function getDatabase() {
@@ -78,7 +78,7 @@ class ContentAccess extends ProcessorPluginBase {
   /**
    * Sets the database connection.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The new database connection.
    *
    * @return $this
@@ -91,7 +91,7 @@ class ContentAccess extends ProcessorPluginBase {
   /**
    * Retrieves the current user.
    *
-   * @return \Drupal\Core\Session\AccountProxyInterface
+   * @return AccountProxyInterface
    *   The current user.
    */
   public function getCurrentUser() {
@@ -101,7 +101,7 @@ class ContentAccess extends ProcessorPluginBase {
   /**
    * Sets the current user.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    *
    * @return $this
@@ -212,10 +212,10 @@ class ContentAccess extends ProcessorPluginBase {
    *
    * Will be either the node itself, or the node the comment is attached to.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $item
+   * @param ComplexDataInterface $item
    *   A search object that is being indexed.
    *
-   * @return \Drupal\node\NodeInterface|null
+   * @return NodeInterface|null
    *   The node related to that search object.
    */
   protected function getNode(ComplexDataInterface $item) {
@@ -258,9 +258,9 @@ class ContentAccess extends ProcessorPluginBase {
   /**
    * Adds a node access filter to a search query, if applicable.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query to which a node access filter should be added, if applicable.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for whom the search is executed.
    */
   protected function addNodeAccess(QueryInterface $query, AccountInterface $account) {
diff --git a/src/Plugin/search_api/processor/EntityStatus.php b/src/Plugin/search_api/processor/EntityStatus.php
index 98627c1b..a4dc522c 100644
--- a/src/Plugin/search_api/processor/EntityStatus.php
+++ b/src/Plugin/search_api/processor/EntityStatus.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\search_api\processor;
 
+use Drupal\search_api\Item\ItemInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Drupal\search_api\IndexInterface;
 use Drupal\search_api\Processor\ProcessorPluginBase;
@@ -51,7 +52,7 @@ class EntityStatus extends ProcessorPluginBase {
   public function alterIndexedItems(array &$items) {
     // Annoyingly, this doc comment is needed for PHPStorm. See
     // http://youtrack.jetbrains.com/issue/WI-23586
-    /** @var \Drupal\search_api\Item\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($items as $item_id => $item) {
       $object = $item->getOriginalObject()->getValue();
       $enabled = TRUE;
diff --git a/src/Plugin/search_api/processor/Highlight.php b/src/Plugin/search_api/processor/Highlight.php
index de813085..6cca586d 100644
--- a/src/Plugin/search_api/processor/Highlight.php
+++ b/src/Plugin/search_api/processor/Highlight.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\search_api\processor;
 
+use Drupal\search_api\Item\ItemInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Form\FormStateInterface;
@@ -55,7 +56,7 @@ class Highlight extends ProcessorPluginBase implements PluginFormInterface {
   /**
    * The data type helper.
    *
-   * @var \Drupal\search_api\Utility\DataTypeHelperInterface|null
+   * @var DataTypeHelperInterface|null
    */
   protected $dataTypeHelper;
 
@@ -79,7 +80,7 @@ class Highlight extends ProcessorPluginBase implements PluginFormInterface {
   /**
    * Retrieves the data type helper.
    *
-   * @return \Drupal\search_api\Utility\DataTypeHelperInterface
+   * @return DataTypeHelperInterface
    *   The data type helper.
    */
   public function getDataTypeHelper() {
@@ -89,7 +90,7 @@ class Highlight extends ProcessorPluginBase implements PluginFormInterface {
   /**
    * Sets the data type helper.
    *
-   * @param \Drupal\search_api\Utility\DataTypeHelperInterface $data_type_helper
+   * @param DataTypeHelperInterface $data_type_helper
    *   The new data type helper.
    *
    * @return $this
@@ -277,7 +278,7 @@ class Highlight extends ProcessorPluginBase implements PluginFormInterface {
   /**
    * Adds excerpts to all results, if possible.
    *
-   * @param \Drupal\search_api\Item\ItemInterface[] $results
+   * @param ItemInterface[] $results
    *   The result items to which excerpts should be added.
    * @param string[] $fulltext_fields
    *   The fulltext fields from which the excerpt should be created.
@@ -316,7 +317,7 @@ class Highlight extends ProcessorPluginBase implements PluginFormInterface {
   /**
    * Retrieves highlighted field values for the given result items.
    *
-   * @param \Drupal\search_api\Item\ItemInterface[] $results
+   * @param ItemInterface[] $results
    *   The result items whose fields should be highlighted.
    * @param array $keys
    *   The search keys to use for highlighting.
@@ -357,7 +358,7 @@ class Highlight extends ProcessorPluginBase implements PluginFormInterface {
   /**
    * Retrieves the fulltext fields of the given result items.
    *
-   * @param \Drupal\search_api\Item\ItemInterface[] $result_items
+   * @param ItemInterface[] $result_items
    *   The results for which fulltext data should be extracted, keyed by item
    *   ID.
    * @param string[]|null $fulltext_fields
@@ -390,7 +391,7 @@ class Highlight extends ProcessorPluginBase implements PluginFormInterface {
   /**
    * Extracts the positive keywords used in a search query.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query from which to extract the keywords.
    *
    * @return string[]
diff --git a/src/Plugin/search_api/processor/HtmlFilter.php b/src/Plugin/search_api/processor/HtmlFilter.php
index a375694b..ff44b066 100644
--- a/src/Plugin/search_api/processor/HtmlFilter.php
+++ b/src/Plugin/search_api/processor/HtmlFilter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\search_api\processor;
 
+use Drupal\search_api\Plugin\search_api\data_type\value\TextTokenInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
@@ -34,14 +35,14 @@ class HtmlFilter extends FieldsProcessorPluginBase {
   /**
    * The data type helper.
    *
-   * @var \Drupal\search_api\Utility\DataTypeHelperInterface|null
+   * @var DataTypeHelperInterface|null
    */
   protected $dataTypeHelper;
 
   /**
    * Retrieves the data type helper.
    *
-   * @return \Drupal\search_api\Utility\DataTypeHelperInterface
+   * @return DataTypeHelperInterface
    *   The data type helper.
    */
   public function getDataTypeHelper() {
@@ -51,7 +52,7 @@ class HtmlFilter extends FieldsProcessorPluginBase {
   /**
    * Sets the data type helper.
    *
-   * @param \Drupal\search_api\Utility\DataTypeHelperInterface $data_type_helper
+   * @param DataTypeHelperInterface $data_type_helper
    *   The new data type helper.
    *
    * @return $this
@@ -240,7 +241,7 @@ class HtmlFilter extends FieldsProcessorPluginBase {
    * @param float $boost
    *   (optional) The currently active boost value. Internal use only.
    *
-   * @return \Drupal\search_api\Plugin\search_api\data_type\value\TextTokenInterface[]
+   * @return TextTokenInterface[]
    *   Tokenized text with appropriate scores.
    */
   protected function parseHtml(&$text, $active_tag = NULL, $boost = 1.0) {
diff --git a/src/Plugin/search_api/processor/LanguageWithFallback.php b/src/Plugin/search_api/processor/LanguageWithFallback.php
index cbc745a2..cac2dc64 100644
--- a/src/Plugin/search_api/processor/LanguageWithFallback.php
+++ b/src/Plugin/search_api/processor/LanguageWithFallback.php
@@ -31,14 +31,14 @@ class LanguageWithFallback extends ProcessorPluginBase {
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -58,7 +58,7 @@ class LanguageWithFallback extends ProcessorPluginBase {
   /**
    * Retrieves the entity repository.
    *
-   * @return \Drupal\Core\Entity\EntityRepositoryInterface
+   * @return EntityRepositoryInterface
    *   The entity repository.
    */
   public function getEntityRepository() {
@@ -68,7 +68,7 @@ class LanguageWithFallback extends ProcessorPluginBase {
   /**
    * Sets the entity repository.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The new entity repository.
    *
    * @return $this
@@ -81,7 +81,7 @@ class LanguageWithFallback extends ProcessorPluginBase {
   /**
    * Retrieves the language manager.
    *
-   * @return \Drupal\Core\Language\LanguageManagerInterface
+   * @return LanguageManagerInterface
    *   The language manager.
    */
   public function getLanguageManager() {
@@ -91,7 +91,7 @@ class LanguageWithFallback extends ProcessorPluginBase {
   /**
    * Sets the language manager.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The new language manager.
    *
    * @return $this
@@ -152,7 +152,7 @@ class LanguageWithFallback extends ProcessorPluginBase {
   /**
    * Retrieves all langcodes that fall back to the given entity translation.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity translation.
    *
    * @return string[]
diff --git a/src/Plugin/search_api/processor/NumberFieldBoost.php b/src/Plugin/search_api/processor/NumberFieldBoost.php
index aa51a77c..26e88888 100644
--- a/src/Plugin/search_api/processor/NumberFieldBoost.php
+++ b/src/Plugin/search_api/processor/NumberFieldBoost.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\search_api\processor;
 
+use Drupal\search_api\Item\ItemInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\search_api\Plugin\PluginFormTrait;
@@ -112,7 +113,7 @@ class NumberFieldBoost extends ProcessorPluginBase implements PluginFormInterfac
   public function preprocessIndexItems(array $items) {
     $boosts = $this->configuration['boosts'];
 
-    /** @var \Drupal\search_api\Item\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($items as $item) {
       foreach ($boosts as $field_id => $settings) {
         if ($field = $item->getField($field_id)) {
diff --git a/src/Plugin/search_api/processor/Property/AggregatedFieldProperty.php b/src/Plugin/search_api/processor/Property/AggregatedFieldProperty.php
index 1e5de063..e551ee0f 100644
--- a/src/Plugin/search_api/processor/Property/AggregatedFieldProperty.php
+++ b/src/Plugin/search_api/processor/Property/AggregatedFieldProperty.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\search_api\processor\Property;
 
+use Drupal\Core\TypedData\DataDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\search_api\IndexInterface;
@@ -190,7 +191,7 @@ class AggregatedFieldProperty extends ConfigurablePropertyBase {
   /**
    * Retrieves label prefixes for an index's datasources.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
    *
    * @return string[]
@@ -216,10 +217,10 @@ class AggregatedFieldProperty extends ConfigurablePropertyBase {
    * datasource ID and the property path. This is used internally in this class
    * to easily identify any property on the index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface[]
+   * @return DataDefinitionInterface[]
    *   All the properties available on the index, keyed by combined ID.
    *
    * @see \Drupal\search_api\Utility::createCombinedId()
diff --git a/src/Plugin/search_api/processor/RenderedItem.php b/src/Plugin/search_api/processor/RenderedItem.php
index 3ca7c56b..217ad2cd 100644
--- a/src/Plugin/search_api/processor/RenderedItem.php
+++ b/src/Plugin/search_api/processor/RenderedItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\search_api\processor;
 
+use Drupal\Core\Entity\EntityViewModeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\Entity\EntityViewMode;
 use Drupal\Core\Link;
@@ -42,35 +43,35 @@ class RenderedItem extends ProcessorPluginBase {
   /**
    * The current_user service used by this plugin.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface|null
+   * @var AccountSwitcherInterface|null
    */
   protected $accountSwitcher;
 
   /**
    * The renderer to use.
    *
-   * @var \Drupal\Core\Render\RendererInterface|null
+   * @var RendererInterface|null
    */
   protected $renderer;
 
   /**
    * Theme manager service.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * Theme initialization service.
    *
-   * @var \Drupal\Core\Theme\ThemeInitializationInterface
+   * @var ThemeInitializationInterface
    */
   protected $themeInitialization;
 
   /**
    * Theme settings config.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -94,7 +95,7 @@ class RenderedItem extends ProcessorPluginBase {
   /**
    * Retrieves the account switcher service.
    *
-   * @return \Drupal\Core\Session\AccountSwitcherInterface
+   * @return AccountSwitcherInterface
    *   The account switcher service.
    */
   public function getAccountSwitcher() {
@@ -104,7 +105,7 @@ class RenderedItem extends ProcessorPluginBase {
   /**
    * Sets the account switcher service.
    *
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $current_user
+   * @param AccountSwitcherInterface $current_user
    *   The account switcher service.
    *
    * @return $this
@@ -117,7 +118,7 @@ class RenderedItem extends ProcessorPluginBase {
   /**
    * Retrieves the renderer.
    *
-   * @return \Drupal\Core\Render\RendererInterface
+   * @return RendererInterface
    *   The renderer.
    */
   public function getRenderer() {
@@ -127,7 +128,7 @@ class RenderedItem extends ProcessorPluginBase {
   /**
    * Sets the renderer.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The new renderer.
    *
    * @return $this
@@ -140,7 +141,7 @@ class RenderedItem extends ProcessorPluginBase {
   /**
    * Retrieves the theme manager.
    *
-   * @return \Drupal\Core\Theme\ThemeManagerInterface
+   * @return ThemeManagerInterface
    *   The theme manager.
    */
   protected function getThemeManager() {
@@ -150,7 +151,7 @@ class RenderedItem extends ProcessorPluginBase {
   /**
    * Sets the theme manager.
    *
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
    *
    * @return $this
@@ -163,7 +164,7 @@ class RenderedItem extends ProcessorPluginBase {
   /**
    * Retrieves the theme initialization service.
    *
-   * @return \Drupal\Core\Theme\ThemeInitializationInterface
+   * @return ThemeInitializationInterface
    *   The theme initialization service.
    */
   protected function getThemeInitializer() {
@@ -173,7 +174,7 @@ class RenderedItem extends ProcessorPluginBase {
   /**
    * Sets the theme initialization service.
    *
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $theme_initialization
+   * @param ThemeInitializationInterface $theme_initialization
    *   The theme initialization service.
    *
    * @return $this
@@ -186,7 +187,7 @@ class RenderedItem extends ProcessorPluginBase {
   /**
    * Retrieves the config factory service.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config factory.
    */
   protected function getConfigFactory() {
@@ -196,7 +197,7 @@ class RenderedItem extends ProcessorPluginBase {
   /**
    * Sets the config factory service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    *
    * @return $this
@@ -352,7 +353,7 @@ class RenderedItem extends ProcessorPluginBase {
         if (($entity_type_id = $datasource->getEntityTypeId()) && !empty($view_modes[$datasource_id])) {
           foreach ($view_modes[$datasource_id] as $view_mode) {
             if ($view_mode) {
-              /** @var \Drupal\Core\Entity\EntityViewModeInterface $view_mode_entity */
+              /** @var EntityViewModeInterface $view_mode_entity */
               $view_mode_entity = EntityViewMode::load($entity_type_id . '.' . $view_mode);
               if ($view_mode_entity) {
                 $this->addDependency($view_mode_entity->getConfigDependencyKey(), $view_mode_entity->getConfigDependencyName());
@@ -389,7 +390,7 @@ class RenderedItem extends ProcessorPluginBase {
         }
         foreach ($view_modes[$datasource_id] ?? [] as $bundle => $view_mode_id) {
           if ($view_mode_id) {
-            /** @var \Drupal\Core\Entity\EntityViewModeInterface $view_mode */
+            /** @var EntityViewModeInterface $view_mode */
             $view_mode = EntityViewMode::load($entity_type_id . '.' . $view_mode_id);
             if ($view_mode) {
               $dependency_key = $view_mode->getConfigDependencyKey();
diff --git a/src/Plugin/search_api/processor/ReverseEntityReferences.php b/src/Plugin/search_api/processor/ReverseEntityReferences.php
index 7243530b..75b928b4 100644
--- a/src/Plugin/search_api/processor/ReverseEntityReferences.php
+++ b/src/Plugin/search_api/processor/ReverseEntityReferences.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Plugin\search_api\processor;
 
+use Drupal\search_api\Item\FieldInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\Cache;
@@ -47,35 +49,35 @@ class ReverseEntityReferences extends ProcessorPluginBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager|null
+   * @var EntityFieldManager|null
    */
   protected $entityFieldManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null
+   * @var EntityTypeBundleInfoInterface|null
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|null
+   * @var LanguageManagerInterface|null
    */
   protected $languageManager;
 
   /**
    * The cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|null
+   * @var CacheBackendInterface|null
    */
   protected $cache;
 
@@ -98,7 +100,7 @@ class ReverseEntityReferences extends ProcessorPluginBase {
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ -108,7 +110,7 @@ class ReverseEntityReferences extends ProcessorPluginBase {
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
@@ -121,7 +123,7 @@ class ReverseEntityReferences extends ProcessorPluginBase {
   /**
    * Retrieves the entity field manager.
    *
-   * @return \Drupal\Core\Entity\EntityFieldManager
+   * @return EntityFieldManager
    *   The entity field manager.
    */
   public function getEntityFieldManager() {
@@ -131,7 +133,7 @@ class ReverseEntityReferences extends ProcessorPluginBase {
   /**
    * Sets the entity field manager.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The new entity field manager.
    *
    * @return $this
@@ -144,7 +146,7 @@ class ReverseEntityReferences extends ProcessorPluginBase {
   /**
    * Retrieves the entity type bundle info.
    *
-   * @return \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @return EntityTypeBundleInfoInterface
    *   The entity type bundle info.
    */
   public function getEntityTypeBundleInfo() {
@@ -154,7 +156,7 @@ class ReverseEntityReferences extends ProcessorPluginBase {
   /**
    * Sets the entity type bundle info.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The new entity type bundle info.
    *
    * @return $this
@@ -167,7 +169,7 @@ class ReverseEntityReferences extends ProcessorPluginBase {
   /**
    * Retrieves the language manager.
    *
-   * @return \Drupal\Core\Language\LanguageManagerInterface
+   * @return LanguageManagerInterface
    *   The language manager.
    */
   public function getLanguageManager() {
@@ -177,7 +179,7 @@ class ReverseEntityReferences extends ProcessorPluginBase {
   /**
    * Sets the language manager.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The new language manager.
    *
    * @return $this
@@ -190,7 +192,7 @@ class ReverseEntityReferences extends ProcessorPluginBase {
   /**
    * Retrieves the cache.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The cache.
    */
   public function getCache() {
@@ -200,7 +202,7 @@ class ReverseEntityReferences extends ProcessorPluginBase {
   /**
    * Sets the cache.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The new cache.
    *
    * @return $this
@@ -285,7 +287,7 @@ class ReverseEntityReferences extends ProcessorPluginBase {
     $langcode = $entity->language()->getId();
     $datasource_id = $item->getDatasourceId();
 
-    /** @var \Drupal\search_api\Item\FieldInterface[][][] $to_extract */
+    /** @var FieldInterface[][][] $to_extract */
     $to_extract = [];
     $prefix = 'search_api_reverse_entity_references_';
     $prefix_length = strlen($prefix);
@@ -380,7 +382,7 @@ class ReverseEntityReferences extends ProcessorPluginBase {
         if (!($entity_type instanceof ContentEntityTypeInterface)) {
           continue;
         }
-        /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $properties */
+        /** @var FieldDefinitionInterface[] $properties */
         $properties = $field_manager->getBaseFieldDefinitions($entity_type_id);
         $bundles = $entity_type_bundle_info->getBundleInfo($entity_type_id);
         foreach ($bundles as $bundle => $info) {
diff --git a/src/Plugin/search_api/processor/RoleAccess.php b/src/Plugin/search_api/processor/RoleAccess.php
index ac350f0a..12b03ab5 100644
--- a/src/Plugin/search_api/processor/RoleAccess.php
+++ b/src/Plugin/search_api/processor/RoleAccess.php
@@ -42,7 +42,7 @@ class RoleAccess extends ProcessorPluginBase {
   /**
    * The current user service used by this plugin.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface|null
+   * @var AccountProxyInterface|null
    */
   protected $currentUser;
 
@@ -56,7 +56,7 @@ class RoleAccess extends ProcessorPluginBase {
   /**
    * The dummy accounts created so far, keyed by role ID.
    *
-   * @var \Drupal\Core\Session\AccountInterface[]
+   * @var AccountInterface[]
    */
   protected static $roleDummyAccounts = [];
 
@@ -76,7 +76,7 @@ class RoleAccess extends ProcessorPluginBase {
   /**
    * Retrieves the current user.
    *
-   * @return \Drupal\Core\Session\AccountProxyInterface
+   * @return AccountProxyInterface
    *   The current user.
    */
   public function getCurrentUser() {
@@ -86,7 +86,7 @@ class RoleAccess extends ProcessorPluginBase {
   /**
    * Sets the current user.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    *
    * @return $this
@@ -142,10 +142,10 @@ class RoleAccess extends ProcessorPluginBase {
    *
    * No user entity will be created or saved.
    *
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    *   The ID of the role for which to create a user session.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   A representation of a user account with the given role.
    */
   protected function createTransientAccountWithRole(RoleInterface $role): AccountInterface {
diff --git a/src/Plugin/search_api/processor/RoleFilter.php b/src/Plugin/search_api/processor/RoleFilter.php
index 673032f1..840eef7b 100644
--- a/src/Plugin/search_api/processor/RoleFilter.php
+++ b/src/Plugin/search_api/processor/RoleFilter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\search_api\processor;
 
+use Drupal\search_api\Item\ItemInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\search_api\IndexInterface;
@@ -97,7 +98,7 @@ class RoleFilter extends ProcessorPluginBase implements PluginFormInterface {
     $selected_roles = array_combine($this->configuration['roles'], $this->configuration['roles']);
     $default = (bool) $this->configuration['default'];
 
-    /** @var \Drupal\search_api\Item\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($items as $item_id => $item) {
       $account = $item->getOriginalObject()->getValue();
       if (!($account instanceof UserInterface)) {
diff --git a/src/Plugin/search_api/processor/Transliteration.php b/src/Plugin/search_api/processor/Transliteration.php
index 5ea85b21..6bcc335b 100644
--- a/src/Plugin/search_api/processor/Transliteration.php
+++ b/src/Plugin/search_api/processor/Transliteration.php
@@ -26,14 +26,14 @@ class Transliteration extends FieldsProcessorPluginBase {
   /**
    * The transliteration service to use.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliterator;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|null
+   * @var LanguageManagerInterface|null
    */
   protected $languageManager;
 
@@ -62,7 +62,7 @@ class Transliteration extends FieldsProcessorPluginBase {
   /**
    * Retrieves the transliterator.
    *
-   * @return \Drupal\Component\Transliteration\TransliterationInterface
+   * @return TransliterationInterface
    *   The transliterator.
    */
   public function getTransliterator() {
@@ -72,7 +72,7 @@ class Transliteration extends FieldsProcessorPluginBase {
   /**
    * Sets the transliterator.
    *
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliterator
+   * @param TransliterationInterface $transliterator
    *   The new transliterator.
    *
    * @return $this
@@ -85,7 +85,7 @@ class Transliteration extends FieldsProcessorPluginBase {
   /**
    * Retrieves the language manager.
    *
-   * @return \Drupal\Core\Language\LanguageManagerInterface
+   * @return LanguageManagerInterface
    *   The language manager.
    */
   public function getLanguageManager() {
@@ -95,7 +95,7 @@ class Transliteration extends FieldsProcessorPluginBase {
   /**
    * Sets the language manager.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The new language manager.
    *
    * @return $this
diff --git a/src/Plugin/search_api/processor/TypeBoost.php b/src/Plugin/search_api/processor/TypeBoost.php
index c911e4e2..8d2a47d0 100644
--- a/src/Plugin/search_api/processor/TypeBoost.php
+++ b/src/Plugin/search_api/processor/TypeBoost.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\search_api\processor;
 
+use Drupal\search_api\Item\ItemInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\search_api\Plugin\PluginFormTrait;
@@ -124,7 +125,7 @@ class TypeBoost extends ProcessorPluginBase implements PluginFormInterface {
   public function preprocessIndexItems(array $items) {
     $boosts = $this->configuration['boosts'];
 
-    /** @var \Drupal\search_api\Item\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($items as $item) {
       $datasource_id = $item->getDatasourceId();
       $bundle = $item->getDatasource()->getItemBundle($item->getOriginalObject());
diff --git a/src/Plugin/search_api/tracker/Basic.php b/src/Plugin/search_api/tracker/Basic.php
index 697574aa..c654e43d 100644
--- a/src/Plugin/search_api/tracker/Basic.php
+++ b/src/Plugin/search_api/tracker/Basic.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\search_api\Plugin\search_api\tracker;
 
+use Drupal\Core\Database\Query\SelectInterface;
+use Drupal\Core\Database\Query\Insert;
+use Drupal\Core\Database\Query\Update;
+use Drupal\Core\Database\Query\Delete;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\FormStateInterface;
@@ -39,14 +43,14 @@ class Basic extends TrackerPluginBase implements PluginFormInterface {
   /**
    * The database connection used by this plugin.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface|null
+   * @var TimeInterface|null
    */
   protected $timeService;
 
@@ -66,7 +70,7 @@ class Basic extends TrackerPluginBase implements PluginFormInterface {
   /**
    * Retrieves the database connection.
    *
-   * @return \Drupal\Core\Database\Connection
+   * @return Connection
    *   The database connection used by this plugin.
    */
   public function getDatabaseConnection() {
@@ -76,7 +80,7 @@ class Basic extends TrackerPluginBase implements PluginFormInterface {
   /**
    * Sets the database connection.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    *
    * @return $this
@@ -89,7 +93,7 @@ class Basic extends TrackerPluginBase implements PluginFormInterface {
   /**
    * Retrieves the time service.
    *
-   * @return \Drupal\Component\Datetime\TimeInterface
+   * @return TimeInterface
    *   The time service.
    */
   public function getTimeService() {
@@ -99,7 +103,7 @@ class Basic extends TrackerPluginBase implements PluginFormInterface {
   /**
    * Sets the time service.
    *
-   * @param \Drupal\Component\Datetime\TimeInterface $time_service
+   * @param TimeInterface $time_service
    *   The new time service.
    *
    * @return $this
@@ -137,7 +141,7 @@ class Basic extends TrackerPluginBase implements PluginFormInterface {
   /**
    * Creates a SELECT statement for this tracker.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   A SELECT statement.
    */
   protected function createSelectStatement() {
@@ -149,7 +153,7 @@ class Basic extends TrackerPluginBase implements PluginFormInterface {
   /**
    * Creates an INSERT statement for this tracker.
    *
-   * @return \Drupal\Core\Database\Query\Insert
+   * @return Insert
    *   An INSERT statement.
    */
   protected function createInsertStatement() {
@@ -160,7 +164,7 @@ class Basic extends TrackerPluginBase implements PluginFormInterface {
   /**
    * Creates an UPDATE statement for this tracker.
    *
-   * @return \Drupal\Core\Database\Query\Update
+   * @return Update
    *   An UPDATE statement.
    */
   protected function createUpdateStatement() {
@@ -171,7 +175,7 @@ class Basic extends TrackerPluginBase implements PluginFormInterface {
   /**
    * Creates a DELETE statement for this tracker.
    *
-   * @return \Drupal\Core\Database\Query\Delete
+   * @return Delete
    *   A DELETE Statement.
    */
   protected function createDeleteStatement() {
@@ -186,7 +190,7 @@ class Basic extends TrackerPluginBase implements PluginFormInterface {
    *   (optional) If specified, only items of the datasource with that ID are
    *   retrieved.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   A SELECT statement.
    */
   protected function createRemainingItemsStatement($datasource_id = NULL) {
diff --git a/src/Plugin/views/EntityFieldRenderer.php b/src/Plugin/views/EntityFieldRenderer.php
index 7d159ee7..7f9f845c 100644
--- a/src/Plugin/views/EntityFieldRenderer.php
+++ b/src/Plugin/views/EntityFieldRenderer.php
@@ -81,7 +81,7 @@ class EntityFieldRenderer extends ViewsEntityFieldRenderer {
   /**
    * Determines whether this renderer can handle the given field.
    *
-   * @param \Drupal\views\Plugin\views\field\FieldHandlerInterface $field
+   * @param FieldHandlerInterface $field
    *   The field for which to check compatibility.
    *
    * @return bool
diff --git a/src/Plugin/views/ResultRow.php b/src/Plugin/views/ResultRow.php
index 615ed6a5..b0557572 100644
--- a/src/Plugin/views/ResultRow.php
+++ b/src/Plugin/views/ResultRow.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api\Plugin\views;
 
+use Drupal\search_api\Item\ItemInterface;
+use Drupal\Core\TypedData\ComplexDataInterface;
+use Drupal\Core\TypedData\TypedDataInterface;
 use Drupal\views\ResultRow as ViewsResultRow;
 use Drupal\views\ViewExecutable;
 
@@ -30,25 +33,24 @@ class ResultRow extends ViewsResultRow {
   ];
 
   // @codingStandardsIgnoreStart PSR2.Classes.PropertyDeclaration.Underscore
-
   /**
    * The Search API result item for this row.
    *
-   * @var \Drupal\search_api\Item\ItemInterface
+   * @var ItemInterface
    */
   public $_item;
 
   /**
    * The original object for this row's result item, if retrieved.
    *
-   * @var \Drupal\Core\TypedData\ComplexDataInterface|null
+   * @var ComplexDataInterface|null
    */
   public $_object;
 
   /**
    * Extracted property values this result row, keyed by combined property path.
    *
-   * @var \Drupal\Core\TypedData\TypedDataInterface[][]
+   * @var TypedDataInterface[][]
    */
   public $_relationship_objects = [];
 
diff --git a/src/Plugin/views/SearchApiHandlerTrait.php b/src/Plugin/views/SearchApiHandlerTrait.php
index 276e089e..50dd17be 100644
--- a/src/Plugin/views/SearchApiHandlerTrait.php
+++ b/src/Plugin/views/SearchApiHandlerTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\views;
 
+use Drupal\search_api\IndexInterface;
 use Drupal\search_api\Plugin\views\query\SearchApiQuery;
 
 /**
@@ -37,7 +38,7 @@ trait SearchApiHandlerTrait {
   /**
    * Returns the active search index.
    *
-   * @return \Drupal\search_api\IndexInterface|null
+   * @return IndexInterface|null
    *   The search index to use with this filter, or NULL if none could be
    *   loaded.
    */
@@ -52,7 +53,7 @@ trait SearchApiHandlerTrait {
   /**
    * Retrieves the query plugin.
    *
-   * @return \Drupal\search_api\Plugin\views\query\SearchApiQuery|null
+   * @return SearchApiQuery|null
    *   The query plugin, or NULL if there is no query or it is no Search API
    *   query.
    */
diff --git a/src/Plugin/views/argument/SearchApiAllTerms.php b/src/Plugin/views/argument/SearchApiAllTerms.php
index babf7e6e..0bdfefc9 100644
--- a/src/Plugin/views/argument/SearchApiAllTerms.php
+++ b/src/Plugin/views/argument/SearchApiAllTerms.php
@@ -24,7 +24,7 @@ class SearchApiAllTerms extends SearchApiTerm {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -42,7 +42,7 @@ class SearchApiAllTerms extends SearchApiTerm {
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager(): EntityTypeManagerInterface {
@@ -52,7 +52,7 @@ class SearchApiAllTerms extends SearchApiTerm {
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
diff --git a/src/Plugin/views/argument/SearchApiDate.php b/src/Plugin/views/argument/SearchApiDate.php
index b17a975a..2d2b4b07 100644
--- a/src/Plugin/views/argument/SearchApiDate.php
+++ b/src/Plugin/views/argument/SearchApiDate.php
@@ -18,7 +18,7 @@ class SearchApiDate extends SearchApiStandard {
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface|null
+   * @var DateFormatterInterface|null
    */
   protected $dateFormatter;
 
@@ -37,7 +37,7 @@ class SearchApiDate extends SearchApiStandard {
   /**
    * Retrieves the date formatter.
    *
-   * @return \Drupal\Core\Datetime\DateFormatterInterface
+   * @return DateFormatterInterface
    *   The date formatter.
    */
   public function getDateFormatter() {
@@ -47,7 +47,7 @@ class SearchApiDate extends SearchApiStandard {
   /**
    * Sets the date formatter.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The new date formatter.
    *
    * @return $this
diff --git a/src/Plugin/views/argument/SearchApiFulltext.php b/src/Plugin/views/argument/SearchApiFulltext.php
index b1db7102..c8555285 100644
--- a/src/Plugin/views/argument/SearchApiFulltext.php
+++ b/src/Plugin/views/argument/SearchApiFulltext.php
@@ -19,7 +19,7 @@ class SearchApiFulltext extends SearchApiStandard {
   /**
    * The parse mode manager.
    *
-   * @var \Drupal\search_api\ParseMode\ParseModePluginManager|null
+   * @var ParseModePluginManager|null
    */
   protected $parseModeManager;
 
@@ -38,7 +38,7 @@ class SearchApiFulltext extends SearchApiStandard {
   /**
    * Retrieves the parse mode manager.
    *
-   * @return \Drupal\search_api\ParseMode\ParseModePluginManager
+   * @return ParseModePluginManager
    *   The parse mode manager.
    */
   public function getParseModeManager() {
@@ -48,7 +48,7 @@ class SearchApiFulltext extends SearchApiStandard {
   /**
    * Sets the parse mode manager.
    *
-   * @param \Drupal\search_api\ParseMode\ParseModePluginManager $parse_mode_manager
+   * @param ParseModePluginManager $parse_mode_manager
    *   The new parse mode manager.
    *
    * @return $this
diff --git a/src/Plugin/views/argument/SearchApiStandard.php b/src/Plugin/views/argument/SearchApiStandard.php
index 3146478f..b8b615c3 100644
--- a/src/Plugin/views/argument/SearchApiStandard.php
+++ b/src/Plugin/views/argument/SearchApiStandard.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\views\argument;
 
+use Drupal\search_api\Plugin\views\query\SearchApiQuery;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 
@@ -21,7 +22,7 @@ class SearchApiStandard extends ArgumentPluginBase {
   /**
    * The Views query object used by this contextual filter.
    *
-   * @var \Drupal\search_api\Plugin\views\query\SearchApiQuery
+   * @var SearchApiQuery
    */
   public $query;
 
diff --git a/src/Plugin/views/argument/SearchApiTerm.php b/src/Plugin/views/argument/SearchApiTerm.php
index c2d38d8d..b48b524d 100644
--- a/src/Plugin/views/argument/SearchApiTerm.php
+++ b/src/Plugin/views/argument/SearchApiTerm.php
@@ -24,14 +24,14 @@ class SearchApiTerm extends SearchApiStandard {
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
@@ -52,7 +52,7 @@ class SearchApiTerm extends SearchApiStandard {
   /**
    * Retrieves the entity repository.
    *
-   * @return \Drupal\Core\Entity\EntityRepositoryInterface
+   * @return EntityRepositoryInterface
    *   The entity repository.
    */
   public function getEntityRepository() {
@@ -62,7 +62,7 @@ class SearchApiTerm extends SearchApiStandard {
   /**
    * Sets the entity repository.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    *
    * @return $this
@@ -75,7 +75,7 @@ class SearchApiTerm extends SearchApiStandard {
   /**
    * Retrieves the term storage.
    *
-   * @return \Drupal\taxonomy\TermStorageInterface
+   * @return TermStorageInterface
    *   The term storage.
    */
   public function getTermStorage() {
@@ -86,7 +86,7 @@ class SearchApiTerm extends SearchApiStandard {
   /**
    * Sets the term storage.
    *
-   * @param \Drupal\taxonomy\TermStorageInterface $term_storage
+   * @param TermStorageInterface $term_storage
    *   The term storage.
    *
    * @return $this
diff --git a/src/Plugin/views/cache/SearchApiCachePluginTrait.php b/src/Plugin/views/cache/SearchApiCachePluginTrait.php
index 9d1a2e36..24589fce 100644
--- a/src/Plugin/views/cache/SearchApiCachePluginTrait.php
+++ b/src/Plugin/views/cache/SearchApiCachePluginTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Plugin\views\cache;
 
+use Drupal\search_api\Query\ResultSetInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -19,28 +21,28 @@ trait SearchApiCachePluginTrait {
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|null
+   * @var CacheBackendInterface|null
    */
   protected $cacheBackend;
 
   /**
    * The cache contexts manager.
    *
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager|null
+   * @var CacheContextsManager|null
    */
   protected $cacheContextsManager;
 
   /**
    * The query helper.
    *
-   * @var \Drupal\search_api\Utility\QueryHelperInterface|null
+   * @var QueryHelperInterface|null
    */
   protected $queryHelper;
 
   /**
    * Retrieves the cache backend.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The cache backend.
    */
   public function getCacheBackend() {
@@ -50,7 +52,7 @@ trait SearchApiCachePluginTrait {
   /**
    * Sets the cache backend.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The new cache backend.
    *
    * @return $this
@@ -63,7 +65,7 @@ trait SearchApiCachePluginTrait {
   /**
    * Retrieves the cache contexts manager.
    *
-   * @return \Drupal\Core\Cache\Context\CacheContextsManager
+   * @return CacheContextsManager
    *   The cache contexts manager.
    */
   public function getCacheContextsManager() {
@@ -73,7 +75,7 @@ trait SearchApiCachePluginTrait {
   /**
    * Sets the cache contexts manager.
    *
-   * @param \Drupal\Core\Cache\Context\CacheContextsManager $cache_contexts_manager
+   * @param CacheContextsManager $cache_contexts_manager
    *   The new cache contexts manager.
    *
    * @return $this
@@ -86,7 +88,7 @@ trait SearchApiCachePluginTrait {
   /**
    * Retrieves the query helper.
    *
-   * @return \Drupal\search_api\Utility\QueryHelperInterface
+   * @return QueryHelperInterface
    *   The query helper.
    */
   public function getQueryHelper() {
@@ -96,7 +98,7 @@ trait SearchApiCachePluginTrait {
   /**
    * Sets the query helper.
    *
-   * @param \Drupal\search_api\Utility\QueryHelperInterface $query_helper
+   * @param QueryHelperInterface $query_helper
    *   The new query helper.
    *
    * @return $this
@@ -155,7 +157,7 @@ trait SearchApiCachePluginTrait {
 
         // Trick Search API into believing a search happened, to make faceting
         // et al. work.
-        /** @var \Drupal\search_api\Query\ResultSetInterface $results */
+        /** @var ResultSetInterface $results */
         $results = $cache->data['search_api results'];
         $this->getQueryHelper()->addResults($results);
 
@@ -210,7 +212,7 @@ trait SearchApiCachePluginTrait {
   /**
    * Retrieves the view to which this plugin belongs.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The view.
    */
   protected function getView() {
@@ -225,10 +227,10 @@ trait SearchApiCachePluginTrait {
    *   Should only be used in the context of a view being saved, never when the
    *   view is actually being executed.
    *
-   * @return \Drupal\search_api\Plugin\views\query\SearchApiQuery
+   * @return SearchApiQuery
    *   The Search API Views query associated with the current view.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if there is no current Views query, or it is no Search API query.
    */
   protected function getQuery(bool $reset = FALSE): SearchApiQuery {
diff --git a/src/Plugin/views/cache/SearchApiTagCache.php b/src/Plugin/views/cache/SearchApiTagCache.php
index 9527c82a..3d963ca5 100644
--- a/src/Plugin/views/cache/SearchApiTagCache.php
+++ b/src/Plugin/views/cache/SearchApiTagCache.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\views\cache;
 
+use Drupal\Core\TypedData\ComplexDataInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -34,7 +35,7 @@ class SearchApiTagCache extends Tag {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -53,7 +54,7 @@ class SearchApiTagCache extends Tag {
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ -63,7 +64,7 @@ class SearchApiTagCache extends Tag {
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
@@ -103,7 +104,7 @@ class SearchApiTagCache extends Tag {
     $tags = [];
 
     foreach ($row->_relationship_objects as $objects) {
-      /** @var \Drupal\Core\TypedData\ComplexDataInterface $object */
+      /** @var ComplexDataInterface $object */
       foreach ($objects as $object) {
         $entity = $object->getValue();
         if ($entity instanceof EntityInterface) {
diff --git a/src/Plugin/views/field/SearchApiBulkForm.php b/src/Plugin/views/field/SearchApiBulkForm.php
index 48260a9c..8cb9c8ac 100644
--- a/src/Plugin/views/field/SearchApiBulkForm.php
+++ b/src/Plugin/views/field/SearchApiBulkForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Plugin\views\field;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -105,7 +107,6 @@ class SearchApiBulkForm extends BulkForm {
   }
 
   // phpcs:disable Drupal.Commenting.FunctionComment.TypeHintMissing
-
   /**
    * Form constructor for the bulk form.
    *
@@ -115,7 +116,7 @@ class SearchApiBulkForm extends BulkForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function viewsForm(&$form, FormStateInterface $form_state) {
@@ -254,13 +255,13 @@ class SearchApiBulkForm extends BulkForm {
    *   The bulk form key representing the entity's id, language and revision (if
    *   applicable) as one string.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity loaded in the state (language, optionally revision) specified
    *   as part of the bulk form key.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   protected function loadEntityFromBulkFormKey($bulk_form_key) {
diff --git a/src/Plugin/views/field/SearchApiEntity.php b/src/Plugin/views/field/SearchApiEntity.php
index 11bb9263..72748b50 100644
--- a/src/Plugin/views/field/SearchApiEntity.php
+++ b/src/Plugin/views/field/SearchApiEntity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\views\field;
 
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfo;
@@ -25,14 +26,14 @@ class SearchApiEntity extends SearchApiStandard {
   /**
    * The entity display repository manager.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface|null
+   * @var EntityDisplayRepositoryInterface|null
    */
   protected $entityDisplayRepository;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo|null
+   * @var EntityTypeBundleInfo|null
    */
   protected $entityTypeBundleInfo;
 
@@ -52,7 +53,7 @@ class SearchApiEntity extends SearchApiStandard {
   /**
    * Retrieves the entity display repository.
    *
-   * @return \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @return EntityDisplayRepositoryInterface
    *   The entity entity display repository.
    */
   public function getEntityDisplayRepository() {
@@ -62,7 +63,7 @@ class SearchApiEntity extends SearchApiStandard {
   /**
    * Sets the entity display repository.
    *
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The new entity display repository.
    *
    * @return $this
@@ -75,7 +76,7 @@ class SearchApiEntity extends SearchApiStandard {
   /**
    * Retrieves the entity type bundle info.
    *
-   * @return \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @return EntityTypeBundleInfo
    *   The entity type bundle info.
    */
   public function getEntityTypeBundleInfo() {
@@ -85,7 +86,7 @@ class SearchApiEntity extends SearchApiStandard {
   /**
    * Sets the entity type bundle info.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bundle_info
+   * @param EntityTypeBundleInfo $entity_type_bundle_info
    *   The new entity type bundle info.
    *
    * @return $this
@@ -284,7 +285,7 @@ class SearchApiEntity extends SearchApiStandard {
   /**
    * Creates an item for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array|null
@@ -292,7 +293,7 @@ class SearchApiEntity extends SearchApiStandard {
    *   array with at least "value" set, to either a string or a render array,
    *   and possibly also additional alter options.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    *   Thrown if the entity is malformed and a URL needs to be generated.
    */
   protected function getItem(EntityInterface $entity) {
diff --git a/src/Plugin/views/field/SearchApiEntityField.php b/src/Plugin/views/field/SearchApiEntityField.php
index 515f64ea..53bc090e 100644
--- a/src/Plugin/views/field/SearchApiEntityField.php
+++ b/src/Plugin/views/field/SearchApiEntityField.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\views\field;
 
+use Drupal\views\Plugin\views\field\FieldHandlerInterface;
 use Drupal\Core\Form\FormHelper;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\search_api\Plugin\views\EntityFieldRenderer;
@@ -38,7 +39,7 @@ class SearchApiEntityField extends EntityField {
   /**
    * Fallback handler for this field, if Field API rendering should not be used.
    *
-   * @var \Drupal\views\Plugin\views\field\FieldHandlerInterface
+   * @var FieldHandlerInterface
    */
   protected $fallbackHandler;
 
diff --git a/src/Plugin/views/field/SearchApiEntityOperations.php b/src/Plugin/views/field/SearchApiEntityOperations.php
index d9b8fa79..d4e37e69 100644
--- a/src/Plugin/views/field/SearchApiEntityOperations.php
+++ b/src/Plugin/views/field/SearchApiEntityOperations.php
@@ -64,10 +64,10 @@ class SearchApiEntityOperations extends EntityOperations {
   /**
    * Retrieves the entity from a search item.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $item
+   * @param ComplexDataInterface $item
    *   An item of this datasource's type.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity object represented by that item, or NULL if none could be
    *   found.
    */
diff --git a/src/Plugin/views/field/SearchApiFieldTrait.php b/src/Plugin/views/field/SearchApiFieldTrait.php
index 04cd43a9..b5928bf1 100644
--- a/src/Plugin/views/field/SearchApiFieldTrait.php
+++ b/src/Plugin/views/field/SearchApiFieldTrait.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\search_api\Plugin\views\field;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\TypedData\TypedDataInterface;
+use Drupal\Core\TypedData\DataReferenceDefinitionInterface;
+use Drupal\search_api\Item\ItemInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Url;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -86,7 +93,7 @@ trait SearchApiFieldTrait {
   /**
    * The account to use for access checks for this search.
    *
-   * @var \Drupal\Core\Session\AccountInterface|false|null
+   * @var AccountInterface|false|null
    *
    * @see \Drupal\search_api\Plugin\views\field\SearchApiFieldTrait::checkEntityAccess()
    */
@@ -113,28 +120,28 @@ trait SearchApiFieldTrait {
   /**
    * The fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface|null
+   * @var FieldsHelperInterface|null
    */
   protected $fieldsHelper;
 
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface|null
+   * @var TypedDataManagerInterface|null
    */
   protected $typedDataManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Retrieves the typed data manager.
    *
-   * @return \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @return TypedDataManagerInterface
    *   The typed data manager.
    */
   public function getTypedDataManager() {
@@ -144,7 +151,7 @@ trait SearchApiFieldTrait {
   /**
    * Sets the typed data manager.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The new typed data manager.
    *
    * @return $this
@@ -157,7 +164,7 @@ trait SearchApiFieldTrait {
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ -167,7 +174,7 @@ trait SearchApiFieldTrait {
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
    * @return $this
@@ -180,7 +187,7 @@ trait SearchApiFieldTrait {
   /**
    * Retrieves the fields helper.
    *
-   * @return \Drupal\search_api\Utility\FieldsHelperInterface
+   * @return FieldsHelperInterface
    *   The fields helper.
    */
   public function getFieldsHelper() {
@@ -190,7 +197,7 @@ trait SearchApiFieldTrait {
   /**
    * Sets the fields helper.
    *
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fields_helper
+   * @param FieldsHelperInterface $fields_helper
    *   The new fields helper.
    *
    * @return $this
@@ -240,7 +247,7 @@ trait SearchApiFieldTrait {
    *
    * @param array|\ArrayAccess $form
    *   The existing form structure, passed by reference.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @see \Drupal\views\Plugin\views\ViewsPluginInterface::buildOptionsForm()
@@ -370,10 +377,10 @@ trait SearchApiFieldTrait {
   /**
    * Gets the entity matching the current row and relationship.
    *
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    *   An object containing all retrieved values.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Returns the entity matching the values.
    *
    * @see \Drupal\views\Plugin\views\field\FieldHandlerInterface::getEntity()
@@ -392,7 +399,7 @@ trait SearchApiFieldTrait {
     $levels = 2;
     while ($levels--) {
       if (!empty($values->_relationship_objects[$combined_property_path][$value_index])) {
-        /** @var \Drupal\Core\TypedData\TypedDataInterface $object */
+        /** @var TypedDataInterface $object */
         $object = $values->_relationship_objects[$combined_property_path][$value_index];
         $value = $object->getValue();
         if ($value instanceof EntityInterface) {
@@ -424,7 +431,7 @@ trait SearchApiFieldTrait {
    * Overridden here to provide an easy way to let this method return arbitrary
    * values, without actually touching the $values array.
    *
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    *   An object containing all retrieved values.
    * @param string $field
    *   Optional name of the field where the value is stored.
@@ -444,7 +451,7 @@ trait SearchApiFieldTrait {
    * This gives the handlers some time to set up before any handler has
    * been rendered.
    *
-   * @param \Drupal\views\ResultRow[]|\ArrayAccess $values
+   * @param ResultRow[]|\ArrayAccess $values
    *   An array of all ResultRow objects returned from the query.
    *
    * @see \Drupal\views\Plugin\views\field\FieldHandlerInterface::preRender()
@@ -539,7 +546,7 @@ trait SearchApiFieldTrait {
   /**
    * Pre-loads the result objects, where necessary.
    *
-   * @param \Drupal\views\ResultRow[] $values
+   * @param ResultRow[] $values
    *   The Views result rows for which result objects should be loaded.
    * @param string[] $dependents
    *   The actually required properties (as combined property paths) that
@@ -592,7 +599,7 @@ trait SearchApiFieldTrait {
   /**
    * Determines and prepares the property values that need to be extracted.
    *
-   * @param \Drupal\views\ResultRow[] $values
+   * @param ResultRow[] $values
    *   The Views result rows from which property values should be extracted.
    * @param string|null $datasource_id
    *   The datasource ID of the property to extract (or NULL for datasource-
@@ -605,7 +612,7 @@ trait SearchApiFieldTrait {
    *   The actually required properties (as combined property paths) that
    *   depend on this property.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface[][]
+   * @return TypedDataInterface[][]
    *   The values of the property for each result row, keyed by result row
    *   index.
    */
@@ -629,7 +636,7 @@ trait SearchApiFieldTrait {
     // Now go through all rows and add the property to them, if necessary.
     // We then extract the actual values in a second pass in order to be
     // able to use multi-loading for any encountered entities.
-    /** @var \Drupal\Core\TypedData\TypedDataInterface[][] $property_values */
+    /** @var TypedDataInterface[][] $property_values */
     $property_values = [];
     $entities_to_load = [];
     foreach ($values as $i => $row) {
@@ -706,7 +713,7 @@ trait SearchApiFieldTrait {
             // Remember any encountered entity references so we can
             // multi-load them.
             if ($typed_data instanceof DataReferenceInterface) {
-              /** @var \Drupal\Core\TypedData\DataReferenceDefinitionInterface $definition */
+              /** @var DataReferenceDefinitionInterface $definition */
               $definition = $typed_data->getDataDefinition();
               $definition = $definition->getTargetDefinition();
               if ($definition instanceof EntityDataDefinitionInterface) {
@@ -746,9 +753,9 @@ trait SearchApiFieldTrait {
   /**
    * Extracts a processor-based property from an item.
    *
-   * @param \Drupal\search_api\Processor\ProcessorPropertyInterface $property
+   * @param ProcessorPropertyInterface $property
    *   The property definition.
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   The Views result row.
    * @param string|null $datasource_id
    *   The datasource ID of the property to extract (or NULL for datasource-
@@ -790,7 +797,7 @@ trait SearchApiFieldTrait {
       $dummy_field = $this->getFieldsHelper()
         ->createFieldFromProperty($index, $property, $datasource_id, $property_path, 'tmp', 'string');
     }
-    /** @var \Drupal\search_api\Item\ItemInterface $dummy_item */
+    /** @var ItemInterface $dummy_item */
     $dummy_item = clone $row->_item;
     $dummy_item->setFields([
       'tmp' => $dummy_field,
@@ -823,11 +830,11 @@ trait SearchApiFieldTrait {
   /**
    * Places extracted property values and objects into the result row.
    *
-   * @param \Drupal\views\ResultRow[] $values
+   * @param ResultRow[] $values
    *   The Views result rows from which property values should be extracted.
    * @param string $combined_property_path
    *   The combined property path of the property to extract.
-   * @param \Drupal\Core\TypedData\TypedDataInterface[][] $property_values
+   * @param TypedDataInterface[][] $property_values
    *   The values of the property for each result row, keyed by result row
    *   index.
    * @param string[] $dependents
@@ -856,7 +863,7 @@ trait SearchApiFieldTrait {
               // PhpStorm isn't able to keep both interfaces in mind at the same
               // time, so we need to use a third interface here that combines
               // both.
-              /** @var \Drupal\Core\Entity\ContentEntityInterface $value */
+              /** @var ContentEntityInterface $value */
               $typed_data = $value->getTranslation($row->search_api_language)
                 ->getTypedData();
             }
@@ -910,7 +917,7 @@ trait SearchApiFieldTrait {
   /**
    * Replaces extracted property values with highlighted field values.
    *
-   * @param \Drupal\views\ResultRow[] $values
+   * @param ResultRow[] $values
    *   The Views result rows for which highlighted field values should be added
    *   where applicable and possible.
    * @param string|null $datasource_id
@@ -1033,7 +1040,7 @@ trait SearchApiFieldTrait {
    *
    * This is usually determined by the row's datasource.
    *
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   The result row.
    *
    * @return bool
@@ -1181,7 +1188,7 @@ trait SearchApiFieldTrait {
    * "query", etc. Additionally, items that might be turned into tokens should
    * also be in this array.
    *
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    *   The result row object containing the values.
    *
    * @return array[]
@@ -1260,7 +1267,7 @@ trait SearchApiFieldTrait {
    *   (optional) The type of sanitization needed. If not provided,
    *   \Drupal\Component\Utility\Html::escape() is used.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   Returns the safe value.
    *
    * @see \Drupal\views\Plugin\views\HandlerBase::sanitizeValue()
@@ -1276,13 +1283,13 @@ trait SearchApiFieldTrait {
   /**
    * Retrieves an alter options array for linking the given value to its item.
    *
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   The Views result row object.
    * @param int $i
    *   The index in this field's values for which the item link should be
    *   retrieved.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The URL for the specified item, or NULL if it couldn't be found.
    */
   protected function getItemUrl(ResultRow $row, $i) {
@@ -1309,7 +1316,7 @@ trait SearchApiFieldTrait {
   /**
    * Returns the Render API renderer.
    *
-   * @return \Drupal\Core\Render\RendererInterface
+   * @return RendererInterface
    *   The renderer.
    *
    * @see \Drupal\views\Plugin\views\field\FieldPluginBase::getRenderer()
diff --git a/src/Plugin/views/field/SearchApiRenderedItem.php b/src/Plugin/views/field/SearchApiRenderedItem.php
index e5f0b3f9..f5d0ac58 100644
--- a/src/Plugin/views/field/SearchApiRenderedItem.php
+++ b/src/Plugin/views/field/SearchApiRenderedItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\views\field;
 
+use Drupal\search_api\IndexInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\TypedData\ComplexDataInterface;
 use Drupal\search_api\Plugin\views\query\SearchApiQuery;
@@ -26,7 +27,7 @@ class SearchApiRenderedItem extends FieldPluginBase {
   /**
    * The search index.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $index;
 
diff --git a/src/Plugin/views/filter/SearchApiDate.php b/src/Plugin/views/filter/SearchApiDate.php
index bc83a399..f643ddca 100644
--- a/src/Plugin/views/filter/SearchApiDate.php
+++ b/src/Plugin/views/filter/SearchApiDate.php
@@ -19,14 +19,14 @@ class SearchApiDate extends Date {
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface|null
+   * @var TimeInterface|null
    */
   protected $timeService;
 
   /**
    * Retrieves the time service.
    *
-   * @return \Drupal\Component\Datetime\TimeInterface
+   * @return TimeInterface
    *   The time service.
    */
   public function getTimeService() {
@@ -36,7 +36,7 @@ class SearchApiDate extends Date {
   /**
    * Sets the time service.
    *
-   * @param \Drupal\Component\Datetime\TimeInterface $time_service
+   * @param TimeInterface $time_service
    *   The new time service.
    *
    * @return $this
diff --git a/src/Plugin/views/filter/SearchApiFilterTrait.php b/src/Plugin/views/filter/SearchApiFilterTrait.php
index 060e5f2e..2b68135a 100644
--- a/src/Plugin/views/filter/SearchApiFilterTrait.php
+++ b/src/Plugin/views/filter/SearchApiFilterTrait.php
@@ -20,7 +20,7 @@ trait SearchApiFilterTrait {
    *
    * @param array $form
    *   The form array, passed by reference.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see \Drupal\views\Plugin\views\filter\FilterPluginBase::valueForm()
diff --git a/src/Plugin/views/filter/SearchApiFulltext.php b/src/Plugin/views/filter/SearchApiFulltext.php
index e31f3dbe..ff659d2a 100644
--- a/src/Plugin/views/filter/SearchApiFulltext.php
+++ b/src/Plugin/views/filter/SearchApiFulltext.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Plugin\views\filter;
 
+use Drupal\search_api\ParseMode\ParseModeInterface;
+use Drupal\search_api\IndexInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\search_api\Entity\Index;
 use Drupal\search_api\ParseMode\ParseModePluginManager;
@@ -29,7 +31,7 @@ class SearchApiFulltext extends FilterPluginBase {
   /**
    * The parse mode manager.
    *
-   * @var \Drupal\search_api\ParseMode\ParseModePluginManager|null
+   * @var ParseModePluginManager|null
    */
   protected $parseModeManager;
 
@@ -48,7 +50,7 @@ class SearchApiFulltext extends FilterPluginBase {
   /**
    * Retrieves the parse mode manager.
    *
-   * @return \Drupal\search_api\ParseMode\ParseModePluginManager
+   * @return ParseModePluginManager
    *   The parse mode manager.
    */
   public function getParseModeManager() {
@@ -58,7 +60,7 @@ class SearchApiFulltext extends FilterPluginBase {
   /**
    * Sets the parse mode manager.
    *
-   * @param \Drupal\search_api\ParseMode\ParseModePluginManager $parse_mode_manager
+   * @param ParseModePluginManager $parse_mode_manager
    *   The new parse mode manager.
    *
    * @return $this
@@ -390,7 +392,7 @@ class SearchApiFulltext extends FilterPluginBase {
     $old_original = $query->getOriginalKeys();
 
     if ($this->options['parse_mode']) {
-      /** @var \Drupal\search_api\ParseMode\ParseModeInterface $parse_mode */
+      /** @var ParseModeInterface $parse_mode */
       $parse_mode = $this->getParseModeManager()
         ->createInstance($this->options['parse_mode']);
       $query->setParseMode($parse_mode);
@@ -486,7 +488,7 @@ class SearchApiFulltext extends FilterPluginBase {
    */
   protected function getFulltextFields() {
     $fields = [];
-    /** @var \Drupal\search_api\IndexInterface $index */
+    /** @var IndexInterface $index */
     $index = Index::load(substr($this->table, 17));
 
     $fields_info = $index->getFields();
diff --git a/src/Plugin/views/query/SearchApiQuery.php b/src/Plugin/views/query/SearchApiQuery.php
index 0b945540..b9412d3b 100644
--- a/src/Plugin/views/query/SearchApiQuery.php
+++ b/src/Plugin/views/query/SearchApiQuery.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api\Plugin\views\query;
 
+use Drupal\search_api\IndexInterface;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -60,14 +63,14 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * The index this view accesses.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $index;
 
   /**
    * The query that will be executed.
    *
-   * @var \Drupal\search_api\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $query;
 
@@ -112,14 +115,14 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|null
+   * @var ModuleHandlerInterface|null
    */
   protected $moduleHandler;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface|null
+   * @var MessengerInterface|null
    */
   protected $messenger;
 
@@ -142,10 +145,10 @@ class SearchApiQuery extends QueryPluginBase {
    *
    * @param string $table
    *   The Views base table ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   (optional) The entity type manager to use.
    *
-   * @return \Drupal\search_api\IndexInterface|null
+   * @return IndexInterface|null
    *   The requested search index, or NULL if it could not be found and loaded.
    */
   public static function getIndexFromTable($table, EntityTypeManagerInterface $entity_type_manager = NULL) {
@@ -166,14 +169,14 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Retrieves the contained entity from a Views result row.
    *
-   * @param \Drupal\search_api\Plugin\views\ResultRow $row
+   * @param ResultRow $row
    *   The Views result row.
    * @param string $relationship_id
    *   The ID of the view relationship to use.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The current view object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity contained in the result row, if any.
    */
   public static function getEntityFromRow(ResultRow $row, $relationship_id, ViewExecutable $view) {
@@ -202,7 +205,7 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Retrieves the module handler.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler.
    */
   public function getModuleHandler() {
@@ -212,7 +215,7 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Sets the module handler.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The new module handler.
    *
    * @return $this
@@ -225,7 +228,7 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Retrieves the messenger.
    *
-   * @return \Drupal\Core\Messenger\MessengerInterface
+   * @return MessengerInterface
    *   The messenger.
    */
   public function getMessenger() {
@@ -235,7 +238,7 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Sets the messenger.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The new messenger.
    *
    * @return $this
@@ -637,7 +640,7 @@ class SearchApiQuery extends QueryPluginBase {
    * Used by handlers to flag a fatal error which shouldn't be displayed but
    * still lead to the view returning empty and the search not being executed.
    *
-   * @param \Drupal\Component\Render\MarkupInterface|string|null $msg
+   * @param MarkupInterface|string|null $msg
    *   Optionally, a translated, unescaped error message to display.
    */
   public function abort($msg = NULL) {
@@ -665,9 +668,9 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Adds Search API result items to a view's result set.
    *
-   * @param \Drupal\search_api\Query\ResultSetInterface $result_set
+   * @param ResultSetInterface $result_set
    *   The search results.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The executed view.
    */
   protected function addResults(ResultSetInterface $result_set, ViewExecutable $view) {
@@ -806,7 +809,7 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Retrieves the account object to use for access checks for this query.
    *
-   * @return \Drupal\Core\Session\AccountInterface|null
+   * @return AccountInterface|null
    *   The account for which to check access to returned or displayed entities.
    *   Or NULL to use the currently logged-in user.
    */
@@ -821,7 +824,7 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Returns the Search API query object used by this Views query.
    *
-   * @return \Drupal\search_api\Query\QueryInterface|null
+   * @return QueryInterface|null
    *   The search query object used internally by this plugin, if any has been
    *   successfully created. NULL otherwise.
    */
@@ -836,7 +839,7 @@ class SearchApiQuery extends QueryPluginBase {
    * (such as for caching purposes) it might be necessary to set it from
    * outside.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The new query.
    *
    * @return $this
@@ -849,7 +852,7 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Retrieves the Search API result set returned for this query.
    *
-   * @return \Drupal\search_api\Query\ResultSetInterface
+   * @return ResultSetInterface
    *   The result set of this query. Might not contain the actual results yet if
    *   the query hasn't been executed yet.
    */
@@ -869,11 +872,10 @@ class SearchApiQuery extends QueryPluginBase {
   //
   // Query interface methods (proxy to $this->query)
   //
-
   /**
    * Retrieves the parse mode.
    *
-   * @return \Drupal\search_api\ParseMode\ParseModeInterface
+   * @return ParseModeInterface
    *   The parse mode.
    *
    * @see \Drupal\search_api\Query\QueryInterface::getParseMode()
@@ -888,7 +890,7 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Sets the parse mode.
    *
-   * @param \Drupal\search_api\ParseMode\ParseModeInterface $parse_mode
+   * @param ParseModeInterface $parse_mode
    *   The parse mode.
    *
    * @return $this
@@ -944,7 +946,7 @@ class SearchApiQuery extends QueryPluginBase {
    * @param string[] $tags
    *   (optional) Tags to set on the condition group.
    *
-   * @return \Drupal\search_api\Query\ConditionGroupInterface
+   * @return ConditionGroupInterface
    *   A condition group object that is set to use the specified conjunction.
    *
    * @see \Drupal\search_api\Query\QueryInterface::createConditionGroup()
@@ -1003,7 +1005,7 @@ class SearchApiQuery extends QueryPluginBase {
    * If $group is given, the filter is added to the relevant filter group
    * instead.
    *
-   * @param \Drupal\search_api\Query\ConditionGroupInterface $condition_group
+   * @param ConditionGroupInterface $condition_group
    *   A condition group that should be added.
    * @param string|null $group
    *   (optional) The Views query filter group to add this filter to.
@@ -1086,7 +1088,7 @@ class SearchApiQuery extends QueryPluginBase {
    *   The condition group to add these to; groups are used to create AND/OR
    *   sections. Groups cannot be nested. Use 0 as the default group.
    *   If the group does not yet exist it will be created as an AND group.
-   * @param string|\Drupal\Core\Database\Query\ConditionInterface|\Drupal\search_api\Query\ConditionGroupInterface $field
+   * @param string|ConditionInterface|ConditionGroupInterface $field
    *   The ID of the field to check; or a filter object to add to the query; or,
    *   for compatibility purposes, a database condition object to transform into
    *   a search filter object and add to the query. If a field ID is passed and
@@ -1174,10 +1176,10 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Transforms a database condition to an equivalent search filter.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface $db_condition
+   * @param ConditionInterface $db_condition
    *   The condition to transform.
    *
-   * @return \Drupal\search_api\Query\ConditionGroupInterface|null
+   * @return ConditionGroupInterface|null
    *   A search filter equivalent to $condition, or NULL if the transformation
    *   failed.
    */
@@ -1298,7 +1300,7 @@ class SearchApiQuery extends QueryPluginBase {
    *   (optional) For sorting randomly, additional random sort parameters can be
    *   passed through here. Otherwise, the parameter is ignored.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the searched index's server couldn't be loaded.
    *
    * @see \Drupal\views\Plugin\views\query\Sql::addOrderBy()
@@ -1348,7 +1350,7 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Retrieves the index associated with this search.
    *
-   * @return \Drupal\search_api\IndexInterface
+   * @return IndexInterface
    *   The search index this query should be executed on.
    *
    * @see \Drupal\search_api\Query\QueryInterface::getIndex()
@@ -1416,7 +1418,7 @@ class SearchApiQuery extends QueryPluginBase {
   /**
    * Retrieves the filter object associated with this search query.
    *
-   * @return \Drupal\search_api\Query\ConditionGroupInterface
+   * @return ConditionGroupInterface
    *   This object's associated filter object.
    *
    * @see \Drupal\search_api\Query\QueryInterface::getConditionGroup()
diff --git a/src/Plugin/views/relationship/SearchApiRelationship.php b/src/Plugin/views/relationship/SearchApiRelationship.php
index 0db9e44b..19eed976 100644
--- a/src/Plugin/views/relationship/SearchApiRelationship.php
+++ b/src/Plugin/views/relationship/SearchApiRelationship.php
@@ -18,14 +18,14 @@ class SearchApiRelationship extends RelationshipPluginBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ -35,7 +35,7 @@ class SearchApiRelationship extends RelationshipPluginBase {
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
diff --git a/src/Plugin/views/row/SearchApiDataRow.php b/src/Plugin/views/row/SearchApiDataRow.php
index 327c197c..a1361df1 100644
--- a/src/Plugin/views/row/SearchApiDataRow.php
+++ b/src/Plugin/views/row/SearchApiDataRow.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Plugin\views\row;
 
+use Drupal\search_api\IndexInterface;
+use Drupal\search_api\Plugin\views\ResultRow;
 use Drupal\Core\TypedData\ComplexDataInterface;
 use Drupal\rest\Plugin\views\row\DataEntityRow;
 use Drupal\search_api\LoggerTrait;
@@ -33,7 +35,7 @@ class SearchApiDataRow extends DataEntityRow {
   /**
    * The search index associated with the current view.
    *
-   * @var \Drupal\search_api\IndexInterface|null
+   * @var IndexInterface|null
    */
   protected $index;
 
@@ -58,7 +60,7 @@ class SearchApiDataRow extends DataEntityRow {
     parent::preRender($result);
 
     $this->getQuery()->getSearchApiResults()->preLoadResultItems();
-    /** @var \Drupal\search_api\Plugin\views\ResultRow $row */
+    /** @var ResultRow $row */
     foreach ($result as $row) {
       if (!$row->_object) {
         try {
@@ -76,7 +78,7 @@ class SearchApiDataRow extends DataEntityRow {
    * {@inheritdoc}
    */
   public function render($row) {
-    /** @var \Drupal\search_api\Plugin\views\ResultRow $row */
+    /** @var ResultRow $row */
     if (!($row->_object instanceof ComplexDataInterface)) {
       $context = [
         '%item_id' => $row->search_api_id,
diff --git a/src/Plugin/views/row/SearchApiRow.php b/src/Plugin/views/row/SearchApiRow.php
index 6c6c88ec..45f110b0 100644
--- a/src/Plugin/views/row/SearchApiRow.php
+++ b/src/Plugin/views/row/SearchApiRow.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\views\row;
 
+use Drupal\search_api\IndexInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -32,14 +33,14 @@ class SearchApiRow extends RowPluginBase {
   /**
    * The search index.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $index;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -59,7 +60,7 @@ class SearchApiRow extends RowPluginBase {
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ -69,7 +70,7 @@ class SearchApiRow extends RowPluginBase {
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
diff --git a/src/Plugin/views/sort/SearchApiSort.php b/src/Plugin/views/sort/SearchApiSort.php
index bf27c08c..63613860 100644
--- a/src/Plugin/views/sort/SearchApiSort.php
+++ b/src/Plugin/views/sort/SearchApiSort.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Plugin\views\sort;
 
+use Drupal\search_api\Plugin\views\query\SearchApiQuery;
 use Drupal\views\Plugin\views\sort\SortPluginBase;
 
 /**
@@ -14,7 +15,7 @@ class SearchApiSort extends SortPluginBase {
   /**
    * The associated views query object.
    *
-   * @var \Drupal\search_api\Plugin\views\query\SearchApiQuery
+   * @var SearchApiQuery
    */
   public $query;
 
diff --git a/src/Processor/ConfigurablePropertyInterface.php b/src/Processor/ConfigurablePropertyInterface.php
index 9938da95..c35109bd 100644
--- a/src/Processor/ConfigurablePropertyInterface.php
+++ b/src/Processor/ConfigurablePropertyInterface.php
@@ -21,11 +21,11 @@ interface ConfigurablePropertyInterface extends ProcessorPropertyInterface {
   /**
    * Constructs a configuration form for a field based on this property.
    *
-   * @param \Drupal\search_api\Item\FieldInterface $field
+   * @param FieldInterface $field
    *   The field for which the configuration form is constructed.
    * @param array $form
    *   An associative array containing the initial structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @return array
@@ -36,12 +36,12 @@ interface ConfigurablePropertyInterface extends ProcessorPropertyInterface {
   /**
    * Validates a configuration form for a field based on this property.
    *
-   * @param \Drupal\search_api\Item\FieldInterface $field
+   * @param FieldInterface $field
    *   The field for which the configuration form is validated.
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateConfigurationForm(FieldInterface $field, array &$form, FormStateInterface $form_state);
@@ -49,12 +49,12 @@ interface ConfigurablePropertyInterface extends ProcessorPropertyInterface {
   /**
    * Submits a configuration form for a field based on this property.
    *
-   * @param \Drupal\search_api\Item\FieldInterface $field
+   * @param FieldInterface $field
    *   The field for which the configuration form is submitted.
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitConfigurationForm(FieldInterface $field, array &$form, FormStateInterface $form_state);
@@ -62,7 +62,7 @@ interface ConfigurablePropertyInterface extends ProcessorPropertyInterface {
   /**
    * Retrieves the description for a field based on this property.
    *
-   * @param \Drupal\search_api\Item\FieldInterface $field
+   * @param FieldInterface $field
    *   The field.
    *
    * @return string|null
diff --git a/src/Processor/FieldsProcessorPluginBase.php b/src/Processor/FieldsProcessorPluginBase.php
index bcba3aef..698096e8 100644
--- a/src/Processor/FieldsProcessorPluginBase.php
+++ b/src/Processor/FieldsProcessorPluginBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Processor;
 
+use Drupal\search_api\Item\ItemInterface;
+use Drupal\search_api\Plugin\search_api\data_type\value\TextTokenInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ -49,14 +51,14 @@ abstract class FieldsProcessorPluginBase extends ProcessorPluginBase implements
   /**
    * The data type helper.
    *
-   * @var \Drupal\search_api\Utility\DataTypeHelperInterface|null
+   * @var DataTypeHelperInterface|null
    */
   protected $dataTypeHelper;
 
   /**
    * The element info manager.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface|null
+   * @var ElementInfoManagerInterface|null
    */
   protected $elementInfoManager;
 
@@ -76,7 +78,7 @@ abstract class FieldsProcessorPluginBase extends ProcessorPluginBase implements
   /**
    * Retrieves the data type helper.
    *
-   * @return \Drupal\search_api\Utility\DataTypeHelperInterface
+   * @return DataTypeHelperInterface
    *   The data type helper.
    */
   public function getDataTypeHelper() {
@@ -86,7 +88,7 @@ abstract class FieldsProcessorPluginBase extends ProcessorPluginBase implements
   /**
    * Sets the data type helper.
    *
-   * @param \Drupal\search_api\Utility\DataTypeHelperInterface $data_type_helper
+   * @param DataTypeHelperInterface $data_type_helper
    *   The new data type helper.
    *
    * @return $this
@@ -99,7 +101,7 @@ abstract class FieldsProcessorPluginBase extends ProcessorPluginBase implements
   /**
    * Retrieves the element info manager.
    *
-   * @return \Drupal\Core\Render\ElementInfoManagerInterface
+   * @return ElementInfoManagerInterface
    *   The element info manager.
    */
   public function getElementInfoManager() {
@@ -109,7 +111,7 @@ abstract class FieldsProcessorPluginBase extends ProcessorPluginBase implements
   /**
    * Sets the element info manager.
    *
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info_manager
+   * @param ElementInfoManagerInterface $element_info_manager
    *   The new element info manager.
    *
    * @return $this
@@ -289,7 +291,7 @@ abstract class FieldsProcessorPluginBase extends ProcessorPluginBase implements
   public function preprocessIndexItems(array $items) {
     // Annoyingly, this doc comment is needed for PHPStorm. See
     // http://youtrack.jetbrains.com/issue/WI-23586
-    /** @var \Drupal\search_api\Item\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($items as $item) {
       foreach ($item->getFields() as $name => $field) {
         if ($this->testField($name, $field)) {
@@ -318,7 +320,7 @@ abstract class FieldsProcessorPluginBase extends ProcessorPluginBase implements
    * type. Also takes care of extracting list values and of fusing returned
    * tokens back into a one-dimensional array.
    *
-   * @param \Drupal\search_api\Item\FieldInterface $field
+   * @param FieldInterface $field
    *   The field to process.
    */
   protected function processField(FieldInterface $field) {
@@ -343,7 +345,7 @@ abstract class FieldsProcessorPluginBase extends ProcessorPluginBase implements
             }
             else {
               $base_boost = $token->getBoost();
-              /** @var \Drupal\search_api\Plugin\search_api\data_type\value\TextTokenInterface $new_token */
+              /** @var TextTokenInterface $new_token */
               foreach ($token_text as $new_token) {
                 if ($new_token->getText() !== '') {
                   $new_token->setBoost($new_token->getBoost() * $base_boost);
@@ -409,7 +411,7 @@ abstract class FieldsProcessorPluginBase extends ProcessorPluginBase implements
   /**
    * Preprocesses the query conditions.
    *
-   * @param \Drupal\search_api\Query\ConditionInterface[]|\Drupal\search_api\Query\ConditionGroupInterface[] $conditions
+   * @param ConditionInterface[]|ConditionGroupInterface[] $conditions
    *   An array of conditions, as returned by
    *   \Drupal\search_api\Query\ConditionGroupInterface::getConditions(),
    *   passed by reference.
@@ -463,7 +465,7 @@ abstract class FieldsProcessorPluginBase extends ProcessorPluginBase implements
    *
    * @param string $name
    *   The field's ID.
-   * @param \Drupal\search_api\Item\FieldInterface $field
+   * @param FieldInterface $field
    *   The field's information.
    *
    * @return bool
diff --git a/src/Processor/ProcessorInterface.php b/src/Processor/ProcessorInterface.php
index 61bfaeaa..f872b40b 100644
--- a/src/Processor/ProcessorInterface.php
+++ b/src/Processor/ProcessorInterface.php
@@ -78,7 +78,7 @@ interface ProcessorInterface extends IndexPluginInterface {
    * index configurations and at least throw an exception with a descriptive
    * error message if this is violated on runtime.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index to check for.
    *
    * @return bool
@@ -140,11 +140,11 @@ interface ProcessorInterface extends IndexPluginInterface {
    * also recommended to prefix the property name with the identifier of the
    * module defining the processor.
    *
-   * @param \Drupal\search_api\Datasource\DatasourceInterface|null $datasource
+   * @param DatasourceInterface|null $datasource
    *   (optional) The datasource this set of properties belongs to. If NULL, the
    *   datasource-independent properties should be added (or modified).
    *
-   * @return \Drupal\search_api\Processor\ProcessorPropertyInterface[]
+   * @return ProcessorPropertyInterface[]
    *   An array of property definitions for that datasource, keyed by
    *   property names.
    */
@@ -153,7 +153,7 @@ interface ProcessorInterface extends IndexPluginInterface {
   /**
    * Adds the values of properties defined by this processor to the item.
    *
-   * @param \Drupal\search_api\Item\ItemInterface $item
+   * @param ItemInterface $item
    *   The item whose field values should be added.
    */
   public function addFieldValues(ItemInterface $item);
@@ -169,7 +169,7 @@ interface ProcessorInterface extends IndexPluginInterface {
   /**
    * Alter the items to be indexed.
    *
-   * @param \Drupal\search_api\Item\ItemInterface[] $items
+   * @param ItemInterface[] $items
    *   An array of items to be indexed, passed by reference.
    */
   public function alterIndexedItems(array &$items);
@@ -177,7 +177,7 @@ interface ProcessorInterface extends IndexPluginInterface {
   /**
    * Preprocesses search items for indexing.
    *
-   * @param \Drupal\search_api\Item\ItemInterface[] $items
+   * @param ItemInterface[] $items
    *   An array of items to be preprocessed for indexing.
    */
   public function preprocessIndexItems(array $items);
@@ -185,7 +185,7 @@ interface ProcessorInterface extends IndexPluginInterface {
   /**
    * Preprocesses a search query.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The object representing the query to be executed.
    */
   public function preprocessSearchQuery(QueryInterface $query);
@@ -197,7 +197,7 @@ interface ProcessorInterface extends IndexPluginInterface {
    * the same object will be used for both calls (so preserving some data or
    * state locally is possible).
    *
-   * @param \Drupal\search_api\Query\ResultSetInterface $results
+   * @param ResultSetInterface $results
    *   The search results.
    */
   public function postprocessSearchResults(ResultSetInterface $results);
diff --git a/src/Processor/ProcessorPluginBase.php b/src/Processor/ProcessorPluginBase.php
index a7b5ef4e..939a9637 100644
--- a/src/Processor/ProcessorPluginBase.php
+++ b/src/Processor/ProcessorPluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Processor;
 
+use Drupal\search_api\Item\FieldInterface;
 use Drupal\search_api\Datasource\DatasourceInterface;
 use Drupal\search_api\IndexInterface;
 use Drupal\search_api\Item\ItemInterface;
@@ -54,7 +55,7 @@ abstract class ProcessorPluginBase extends IndexPluginBase implements ProcessorI
   /**
    * The fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface|null
+   * @var FieldsHelperInterface|null
    */
   protected $fieldsHelper;
 
@@ -73,7 +74,7 @@ abstract class ProcessorPluginBase extends IndexPluginBase implements ProcessorI
   /**
    * Retrieves the fields helper.
    *
-   * @return \Drupal\search_api\Utility\FieldsHelperInterface
+   * @return FieldsHelperInterface
    *   The fields helper.
    */
   public function getFieldsHelper() {
@@ -83,7 +84,7 @@ abstract class ProcessorPluginBase extends IndexPluginBase implements ProcessorI
   /**
    * Sets the fields helper.
    *
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fields_helper
+   * @param FieldsHelperInterface $fields_helper
    *   The new fields helper.
    *
    * @return $this
@@ -201,11 +202,11 @@ abstract class ProcessorPluginBase extends IndexPluginBase implements ProcessorI
    * @param string|null $type
    *   (optional) If set, the field should have this type.
    *
-   * @return \Drupal\search_api\Item\FieldInterface
+   * @return FieldInterface
    *   A field on the index, possibly newly added, with the specified
    *   properties.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if there is no property with the specified path, or no type is
    *   given and no default could be determined for the property.
    */
@@ -244,7 +245,7 @@ abstract class ProcessorPluginBase extends IndexPluginBase implements ProcessorI
    * @param string|null $type
    *   (optional) If set, only return a field if it has this type.
    *
-   * @return \Drupal\search_api\Item\FieldInterface|null
+   * @return FieldInterface|null
    *   A field on the index with the desired properties, or NULL if none could
    *   be found.
    */
diff --git a/src/Processor/ProcessorPluginManager.php b/src/Processor/ProcessorPluginManager.php
index 56573f56..9f9800d6 100644
--- a/src/Processor/ProcessorPluginManager.php
+++ b/src/Processor/ProcessorPluginManager.php
@@ -28,13 +28,13 @@ class ProcessorPluginManager extends SearchApiPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EventDispatcherInterface $eventDispatcher, TranslationInterface $translation) {
diff --git a/src/ProxyClass/ParamConverter/SearchApiConverter.php b/src/ProxyClass/ParamConverter/SearchApiConverter.php
index 56e452fa..1bdb1266 100644
--- a/src/ProxyClass/ParamConverter/SearchApiConverter.php
+++ b/src/ProxyClass/ParamConverter/SearchApiConverter.php
@@ -38,14 +38,14 @@ class SearchApiConverter implements ParamConverterInterface {
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
    * Constructs a ProxyClass Drupal proxy object.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    * @param string $drupal_proxy_original_service_id
    *   The service ID of the original service.
diff --git a/src/Query/ConditionGroupInterface.php b/src/Query/ConditionGroupInterface.php
index 661559df..63c56f5c 100644
--- a/src/Query/ConditionGroupInterface.php
+++ b/src/Query/ConditionGroupInterface.php
@@ -21,7 +21,7 @@ interface ConditionGroupInterface extends ConditionSetInterface {
   /**
    * Retrieves all conditions and nested condition groups of this object.
    *
-   * @return \Drupal\search_api\Query\ConditionInterface[]|\Drupal\search_api\Query\ConditionGroupInterface[]
+   * @return ConditionInterface[]|\Drupal\search_api\Query\ConditionGroupInterface[]
    *   An array containing this object's conditions. Each of these is either a
    *   simple condition, represented as an object of type
    *   \Drupal\search_api\Query\ConditionInterface, or a nested condition group,
diff --git a/src/Query/ConditionSetInterface.php b/src/Query/ConditionSetInterface.php
index 88daa9fc..7eff6319 100644
--- a/src/Query/ConditionSetInterface.php
+++ b/src/Query/ConditionSetInterface.php
@@ -45,7 +45,7 @@ interface ConditionSetInterface {
   /**
    * Adds a nested condition group.
    *
-   * @param \Drupal\search_api\Query\ConditionGroupInterface $condition_group
+   * @param ConditionGroupInterface $condition_group
    *   A condition group that should be added.
    *
    * @return $this
diff --git a/src/Query/Query.php b/src/Query/Query.php
index 77eca053..7dde1fd6 100644
--- a/src/Query/Query.php
+++ b/src/Query/Query.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Query;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
@@ -34,7 +35,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * The index on which the query will be executed.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $index;
 
@@ -50,7 +51,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * The search results.
    *
-   * @var \Drupal\search_api\Query\ResultSetInterface
+   * @var ResultSetInterface
    */
   protected $results;
 
@@ -64,7 +65,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * The parse mode to use for fulltext search keys.
    *
-   * @var \Drupal\search_api\ParseMode\ParseModeInterface|null
+   * @var ParseModeInterface|null
    */
   protected $parseMode;
 
@@ -110,7 +111,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * The root condition group associated with this query.
    *
-   * @var \Drupal\search_api\Query\ConditionGroupInterface
+   * @var ConditionGroupInterface
    */
   protected $conditionGroup;
 
@@ -124,7 +125,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * Information about whether the query has been aborted or not.
    *
-   * @var \Drupal\Component\Render\MarkupInterface|string|true|null
+   * @var MarkupInterface|string|true|null
    */
   protected $aborted;
 
@@ -159,35 +160,35 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|null
+   * @var ModuleHandlerInterface|null
    */
   protected $moduleHandler;
 
   /**
    * The event dispatcher.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher|null
+   * @var ContainerAwareEventDispatcher|null
    */
   protected $eventDispatcher;
 
   /**
    * The parse mode manager.
    *
-   * @var \Drupal\search_api\ParseMode\ParseModePluginManager|null
+   * @var ParseModePluginManager|null
    */
   protected $parseModeManager;
 
   /**
    * The display plugin manager.
    *
-   * @var \Drupal\search_api\Display\DisplayPluginManagerInterface|null
+   * @var DisplayPluginManagerInterface|null
    */
   protected $displayPluginManager;
 
   /**
    * The result cache service.
    *
-   * @var \Drupal\search_api\Utility\QueryHelperInterface|null
+   * @var QueryHelperInterface|null
    */
   protected $queryHelper;
 
@@ -201,14 +202,14 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * Constructs a Query object.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index the query should be executed on.
    * @param array $options
    *   (optional) Associative array of options configuring this query. See
    *   \Drupal\search_api\Query\QueryInterface::setOption() for a list of
    *   options that are recognized by default.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if a search on that index (or with those options) won't be
    *   possible.
    */
@@ -233,7 +234,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * Retrieves the module handler.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler.
    */
   public function getModuleHandler() {
@@ -243,7 +244,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * Sets the module handler.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The new module handler.
    *
    * @return $this
@@ -256,7 +257,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * Retrieves the event dispatcher.
    *
-   * @return \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @return ContainerAwareEventDispatcher
    *   The event dispatcher.
    */
   public function getEventDispatcher() {
@@ -266,7 +267,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * Sets the event dispatcher.
    *
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher
+   * @param ContainerAwareEventDispatcher $event_dispatcher
    *   The new event dispatcher.
    *
    * @return $this
@@ -279,7 +280,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * Retrieves the parse mode manager.
    *
-   * @return \Drupal\search_api\ParseMode\ParseModePluginManager
+   * @return ParseModePluginManager
    *   The parse mode manager.
    */
   public function getParseModeManager() {
@@ -289,7 +290,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * Sets the parse mode manager.
    *
-   * @param \Drupal\search_api\ParseMode\ParseModePluginManager $parse_mode_manager
+   * @param ParseModePluginManager $parse_mode_manager
    *   The new parse mode manager.
    *
    * @return $this
@@ -302,7 +303,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * Retrieves the display plugin manager.
    *
-   * @return \Drupal\search_api\Display\DisplayPluginManagerInterface
+   * @return DisplayPluginManagerInterface
    *   The display plugin manager.
    */
   public function getDisplayPluginManager() {
@@ -312,7 +313,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * Sets the display plugin manager.
    *
-   * @param \Drupal\search_api\Display\DisplayPluginManagerInterface $display_plugin_manager
+   * @param DisplayPluginManagerInterface $display_plugin_manager
    *   The new display plugin manager.
    *
    * @return $this
@@ -325,7 +326,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * Retrieves the query helper.
    *
-   * @return \Drupal\search_api\Utility\QueryHelperInterface
+   * @return QueryHelperInterface
    *   The query helper.
    */
   public function getQueryHelper() {
@@ -335,7 +336,7 @@ class Query implements QueryInterface, RefinableCacheableDependencyInterface {
   /**
    * Sets the query helper.
    *
-   * @param \Drupal\search_api\Utility\QueryHelperInterface $query_helper
+   * @param QueryHelperInterface $query_helper
    *   The new query helper.
    *
    * @return $this
diff --git a/src/Query/QueryInterface.php b/src/Query/QueryInterface.php
index 03506ff2..11a63a61 100644
--- a/src/Query/QueryInterface.php
+++ b/src/Query/QueryInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api\Query;
 
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api\Display\DisplayInterface;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\search_api\IndexInterface;
 use Drupal\search_api\ParseMode\ParseModeInterface;
 
@@ -53,7 +56,7 @@ interface QueryInterface extends ConditionSetInterface {
   /**
    * Instantiates a new instance of this query class.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which the query should be created.
    * @param array $options
    *   (optional) The options to set for the query.
@@ -61,7 +64,7 @@ interface QueryInterface extends ConditionSetInterface {
    * @return static
    *   A query object to use.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if a search on that index (or with those options) won't be
    *   possible.
    */
@@ -107,7 +110,7 @@ interface QueryInterface extends ConditionSetInterface {
    * If the search ID set for this query corresponds to a display plugin ID,
    * that display will be returned. Otherwise, NULL is returned.
    *
-   * @return \Drupal\search_api\Display\DisplayInterface|null
+   * @return DisplayInterface|null
    *   The search display associated with this query, if any; NULL otherwise.
    */
   public function getDisplayPlugin();
@@ -115,7 +118,7 @@ interface QueryInterface extends ConditionSetInterface {
   /**
    * Retrieves the parse mode.
    *
-   * @return \Drupal\search_api\ParseMode\ParseModeInterface
+   * @return ParseModeInterface
    *   The parse mode.
    */
   public function getParseMode();
@@ -123,7 +126,7 @@ interface QueryInterface extends ConditionSetInterface {
   /**
    * Sets the parse mode.
    *
-   * @param \Drupal\search_api\ParseMode\ParseModeInterface $parse_mode
+   * @param ParseModeInterface $parse_mode
    *   The parse mode.
    *
    * @return $this
@@ -158,7 +161,7 @@ interface QueryInterface extends ConditionSetInterface {
    * @param string[] $tags
    *   (optional) Tags to set on the condition group.
    *
-   * @return \Drupal\search_api\Query\ConditionGroupInterface
+   * @return ConditionGroupInterface
    *   A condition group object that is set to use the specified conjunction.
    *
    * @todo Add $add_directly = TRUE parameter.
@@ -260,7 +263,7 @@ interface QueryInterface extends ConditionSetInterface {
    * This will mean that, while the query object otherwise acts normally, it
    * won't be passed to the server and won't return any results.
    *
-   * @param \Drupal\Component\Render\MarkupInterface|string|null $error_message
+   * @param MarkupInterface|string|null $error_message
    *   (optional) A translated error message explaining the reason why the
    *   query was aborted.
    *
@@ -279,7 +282,7 @@ interface QueryInterface extends ConditionSetInterface {
   /**
    * Retrieves the error message explaining why this query was aborted, if any.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string|null
+   * @return MarkupInterface|string|null
    *   An error message, if set, or NULL if none was set. Please be aware that
    *   a NULL message does not have to mean that the query was not aborted.
    */
@@ -293,10 +296,10 @@ interface QueryInterface extends ConditionSetInterface {
    * were changed in between). If you want to re-execute a query, use
    * getOriginalQuery().
    *
-   * @return \Drupal\search_api\Query\ResultSetInterface
+   * @return ResultSetInterface
    *   The results of the search.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurred during the search.
    */
   public function execute();
@@ -331,7 +334,7 @@ interface QueryInterface extends ConditionSetInterface {
    *
    * If this query hasn't been executed yet, the results will be incomplete.
    *
-   * @return \Drupal\search_api\Query\ResultSetInterface
+   * @return ResultSetInterface
    *   The results of the search.
    *
    * @see \Drupal\search_api\Query\QueryInterface::hasExecuted()
@@ -341,7 +344,7 @@ interface QueryInterface extends ConditionSetInterface {
   /**
    * Retrieves the index associated with this search.
    *
-   * @return \Drupal\search_api\IndexInterface
+   * @return IndexInterface
    *   The search index this query should be executed on.
    */
   public function getIndex();
@@ -383,7 +386,7 @@ interface QueryInterface extends ConditionSetInterface {
   /**
    * Retrieves the condition group object associated with this search query.
    *
-   * @return \Drupal\search_api\Query\ConditionGroupInterface
+   * @return ConditionGroupInterface
    *   This object's associated condition group object.
    */
   public function getConditionGroup();
@@ -527,7 +530,7 @@ interface QueryInterface extends ConditionSetInterface {
    *
    * Will be a clone of this query if preprocessing has not already run.
    *
-   * @return \Drupal\search_api\Query\Query
+   * @return Query
    *   The original, unpreprocessed version of this query.
    */
   public function getOriginalQuery();
diff --git a/src/Query/ResultSet.php b/src/Query/ResultSet.php
index 705c1822..817a24df 100644
--- a/src/Query/ResultSet.php
+++ b/src/Query/ResultSet.php
@@ -13,7 +13,7 @@ class ResultSet implements \IteratorAggregate, ResultSetInterface {
   /**
    * The executed query.
    *
-   * @var \Drupal\search_api\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $query;
 
@@ -27,7 +27,7 @@ class ResultSet implements \IteratorAggregate, ResultSetInterface {
   /**
    * The result items.
    *
-   * @var \Drupal\search_api\Item\ItemInterface[]
+   * @var ItemInterface[]
    */
   protected $resultItems = [];
 
@@ -55,7 +55,7 @@ class ResultSet implements \IteratorAggregate, ResultSetInterface {
   /**
    * Constructs a ResultSet object.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The executed query.
    */
   public function __construct(QueryInterface $query) {
diff --git a/src/Query/ResultSetInterface.php b/src/Query/ResultSetInterface.php
index a32a46ee..bfd7c2f1 100644
--- a/src/Query/ResultSetInterface.php
+++ b/src/Query/ResultSetInterface.php
@@ -15,7 +15,7 @@ interface ResultSetInterface extends \Traversable {
   /**
    * Retrieves the query executed for this search result.
    *
-   * @return \Drupal\search_api\Query\QueryInterface
+   * @return QueryInterface
    *   The executed query.
    */
   public function getQuery();
@@ -41,7 +41,7 @@ interface ResultSetInterface extends \Traversable {
   /**
    * Retrieves the query result items.
    *
-   * @return \Drupal\search_api\Item\ItemInterface[]
+   * @return ItemInterface[]
    *   The query result items, keyed by item ID.
    */
   public function getResultItems();
@@ -52,7 +52,7 @@ interface ResultSetInterface extends \Traversable {
    * This method has to be invoked in the correct order, with the first-ordered
    * item being added first and so on.
    *
-   * @param \Drupal\search_api\Item\ItemInterface $result_item
+   * @param ItemInterface $result_item
    *   One of the search results.
    *
    * @return $this
@@ -62,7 +62,7 @@ interface ResultSetInterface extends \Traversable {
   /**
    * Sets the query result items.
    *
-   * @param \Drupal\search_api\Item\ItemInterface[] $result_items
+   * @param ItemInterface[] $result_items
    *   The query result items, keyed by item ID.
    *
    * @return $this
@@ -189,7 +189,7 @@ interface ResultSetInterface extends \Traversable {
   /**
    * Creates a clone of this result set based on the given query.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query for the new result set.
    *
    * @return static
diff --git a/src/SearchApiPluginManager.php b/src/SearchApiPluginManager.php
index c18b4972..6d148a67 100644
--- a/src/SearchApiPluginManager.php
+++ b/src/SearchApiPluginManager.php
@@ -15,7 +15,7 @@ class SearchApiPluginManager extends DefaultPluginManager {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -34,9 +34,9 @@ class SearchApiPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    * @param string|null $plugin_interface
    *   (optional) The interface each plugin should implement.
diff --git a/src/ServerInterface.php b/src/ServerInterface.php
index 52cf3b3c..6befb4a6 100644
--- a/src/ServerInterface.php
+++ b/src/ServerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api;
 
+use Drupal\search_api\Backend\BackendInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\search_api\Backend\BackendSpecificInterface;
 
@@ -48,10 +49,10 @@ interface ServerInterface extends ConfigEntityInterface, BackendSpecificInterfac
   /**
    * Retrieves the backend.
    *
-   * @return \Drupal\search_api\Backend\BackendInterface
+   * @return BackendInterface
    *   This server's backend plugin.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if the backend plugin could not be retrieved.
    */
   public function getBackend();
@@ -80,7 +81,7 @@ interface ServerInterface extends ConfigEntityInterface, BackendSpecificInterfac
    * @param array $properties
    *   (optional) Additional properties that the indexes should have.
    *
-   * @return \Drupal\search_api\IndexInterface[]
+   * @return IndexInterface[]
    *   An array of all matching search indexes.
    */
   public function getIndexes(array $properties = []);
@@ -88,7 +89,7 @@ interface ServerInterface extends ConfigEntityInterface, BackendSpecificInterfac
   /**
    * Deletes all items on this server, except those from read-only indexes.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an error occurred while trying to delete the items.
    */
   public function deleteAllItems();
diff --git a/src/Task/IndexTaskManager.php b/src/Task/IndexTaskManager.php
index eba0ec3e..7c4e73d1 100644
--- a/src/Task/IndexTaskManager.php
+++ b/src/Task/IndexTaskManager.php
@@ -26,23 +26,23 @@ class IndexTaskManager implements IndexTaskManagerInterface, EventSubscriberInte
   /**
    * The Search API task manager.
    *
-   * @var \Drupal\search_api\Task\TaskManagerInterface
+   * @var TaskManagerInterface
    */
   protected $taskManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an IndexTaskManager object.
    *
-   * @param \Drupal\search_api\Task\TaskManagerInterface $task_manager
+   * @param TaskManagerInterface $task_manager
    *   The Search API task manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(TaskManagerInterface $task_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -64,7 +64,7 @@ class IndexTaskManager implements IndexTaskManagerInterface, EventSubscriberInte
    *
    * @param array|\ArrayAccess $context
    *   The current batch context.
-   * @param \Drupal\Core\Config\ConfigImporter $config_importer
+   * @param ConfigImporter $config_importer
    *   The config importer.
    */
   public static function processIndexTasks(&$context, ConfigImporter $config_importer) {
@@ -81,7 +81,7 @@ class IndexTaskManager implements IndexTaskManagerInterface, EventSubscriberInte
         ]);
       $deleted = $config_importer->getUnprocessedConfiguration('delete');
 
-      /** @var \Drupal\search_api\IndexInterface $index */
+      /** @var IndexInterface $index */
       foreach ($indexes as $index_id => $index) {
         if (!$index_task_manager->isTrackingComplete($index) && !in_array($index->getConfigDependencyName(), $deleted)) {
           $context['sandbox']['indexes'][] = $index_id;
@@ -124,7 +124,7 @@ class IndexTaskManager implements IndexTaskManagerInterface, EventSubscriberInte
   /**
    * Tracks items according to the given event.
    *
-   * @param \Drupal\search_api\Task\TaskEvent $event
+   * @param TaskEvent $event
    *   The task event.
    */
   public function trackItems(TaskEvent $event) {
@@ -178,7 +178,7 @@ class IndexTaskManager implements IndexTaskManagerInterface, EventSubscriberInte
   /**
    * Gets a set of conditions for finding the tracking tasks of the given index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to retrieve tasks.
    *
    * @return array
diff --git a/src/Task/IndexTaskManagerInterface.php b/src/Task/IndexTaskManagerInterface.php
index 410fb81f..870eef00 100644
--- a/src/Task/IndexTaskManagerInterface.php
+++ b/src/Task/IndexTaskManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Task;
 
+use Drupal\search_api\SearchApiException;
 use Drupal\search_api\IndexInterface;
 
 /**
@@ -12,7 +13,7 @@ interface IndexTaskManagerInterface {
   /**
    * Creates a task to start tracking for the given index, or some datasources.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
    * @param string[]|null $datasource_ids
    *   (optional) The IDs of specific datasources for which tracking should
@@ -23,13 +24,13 @@ interface IndexTaskManagerInterface {
   /**
    * Adds a single page of items to the tracker.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
    *
    * @return bool
    *   TRUE if tracking for this index has been finished, FALSE otherwise.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if any error occurred while tracking items.
    */
   public function addItemsOnce(IndexInterface $index);
@@ -37,7 +38,7 @@ interface IndexTaskManagerInterface {
   /**
    * Sets a batch to track all remaining items for the given index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
    */
   public function addItemsBatch(IndexInterface $index);
@@ -48,10 +49,10 @@ interface IndexTaskManagerInterface {
    * Since no kind of batch processing is used, this might run out of memory or
    * execution time on larger sites.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if any error occurred while tracking items.
    */
   public function addItemsAll(IndexInterface $index);
@@ -62,7 +63,7 @@ interface IndexTaskManagerInterface {
    * Will delete any remaining tracking tasks and also remove all items from
    * tracking for this index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
    * @param string[]|null $datasource_ids
    *   (optional) The IDs of the datasources for which to stop tracking. Or NULL
@@ -73,7 +74,7 @@ interface IndexTaskManagerInterface {
   /**
    * Checks whether tracking has already been completed for the given index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
    *
    * @return bool
diff --git a/src/Task/ServerTaskManager.php b/src/Task/ServerTaskManager.php
index 6c2fbeff..1497cf55 100644
--- a/src/Task/ServerTaskManager.php
+++ b/src/Task/ServerTaskManager.php
@@ -21,23 +21,23 @@ class ServerTaskManager implements ServerTaskManagerInterface, EventSubscriberIn
   /**
    * The Search API task manager.
    *
-   * @var \Drupal\search_api\Task\TaskManagerInterface
+   * @var TaskManagerInterface
    */
   protected $taskManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a ServerTaskManager object.
    *
-   * @param \Drupal\search_api\Task\TaskManagerInterface $task_manager
+   * @param TaskManagerInterface $task_manager
    *   The Search API task manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(TaskManagerInterface $task_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -102,7 +102,7 @@ class ServerTaskManager implements ServerTaskManagerInterface, EventSubscriberIn
   /**
    * Processes a single server task.
    *
-   * @param \Drupal\search_api\Task\TaskEvent $event
+   * @param TaskEvent $event
    *   The task event.
    */
   public function processEvent(TaskEvent $event) {
@@ -124,14 +124,14 @@ class ServerTaskManager implements ServerTaskManagerInterface, EventSubscriberIn
   /**
    * Executes a single server task.
    *
-   * @param \Drupal\search_api\Task\TaskInterface $task
+   * @param TaskInterface $task
    *   The task to execute.
    *
    * @return bool
    *   TRUE if the task was successfully executed, FALSE if the task type was
    *   unknown.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   If any error occurred while executing the task.
    */
   protected function executeTask(TaskInterface $task) {
@@ -203,7 +203,7 @@ class ServerTaskManager implements ServerTaskManagerInterface, EventSubscriberIn
   /**
    * Gets a set of conditions for finding the tracking tasks of the given index.
    *
-   * @param \Drupal\search_api\ServerInterface $server
+   * @param ServerInterface $server
    *   The server for which to retrieve tasks.
    *
    * @return array
diff --git a/src/Task/ServerTaskManagerInterface.php b/src/Task/ServerTaskManagerInterface.php
index 5f9031ab..cd948e4c 100644
--- a/src/Task/ServerTaskManagerInterface.php
+++ b/src/Task/ServerTaskManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Task;
 
+use Drupal\search_api\IndexInterface;
 use Drupal\search_api\ServerInterface;
 
 /**
@@ -12,7 +13,7 @@ interface ServerTaskManagerInterface {
   /**
    * Retrieves the number of pending server tasks.
    *
-   * @param \Drupal\search_api\ServerInterface|null $server
+   * @param ServerInterface|null $server
    *   (optional) The server whose tasks should be counted, or NULL to count all
    *   tasks.
    *
@@ -24,7 +25,7 @@ interface ServerTaskManagerInterface {
   /**
    * Checks for pending tasks on one or all enabled search servers.
    *
-   * @param \Drupal\search_api\ServerInterface|null $server
+   * @param ServerInterface|null $server
    *   (optional) The server whose tasks should be executed. If not given, the
    *   tasks for all enabled servers are executed.
    *
@@ -38,7 +39,7 @@ interface ServerTaskManagerInterface {
   /**
    * Sets a batch for executing server tasks.
    *
-   * @param \Drupal\search_api\ServerInterface|null $server
+   * @param ServerInterface|null $server
    *   (optional) The server whose tasks should be executed. If not given, the
    *   tasks for all enabled servers are executed.
    */
@@ -47,10 +48,10 @@ interface ServerTaskManagerInterface {
   /**
    * Removes pending server tasks from the list.
    *
-   * @param \Drupal\search_api\ServerInterface|null $server
+   * @param ServerInterface|null $server
    *   (optional) A server for which the tasks should be deleted. Set to NULL to
    *   delete tasks from all servers.
-   * @param \Drupal\search_api\IndexInterface|string|null $index
+   * @param IndexInterface|string|null $index
    *   (optional) An index (or its ID) for which the tasks should be deleted.
    *   Set to NULL to delete tasks for all indexes.
    * @param string[]|null $types
diff --git a/src/Task/TaskEvent.php b/src/Task/TaskEvent.php
index 5109aefd..0eb6d8ee 100644
--- a/src/Task/TaskEvent.php
+++ b/src/Task/TaskEvent.php
@@ -20,21 +20,21 @@ class TaskEvent extends Event {
   /**
    * The task being executed.
    *
-   * @var \Drupal\search_api\Task\TaskInterface
+   * @var TaskInterface
    */
   protected $task;
 
   /**
    * The exception that stopped execution of the task, if any.
    *
-   * @var \Drupal\search_api\SearchApiException|null
+   * @var SearchApiException|null
    */
   protected $exception;
 
   /**
    * Constructs a TaskEvent object.
    *
-   * @param \Drupal\search_api\Task\TaskInterface $task
+   * @param TaskInterface $task
    *   The task being executed.
    */
   public function __construct(TaskInterface $task) {
@@ -44,7 +44,7 @@ class TaskEvent extends Event {
   /**
    * Retrieves the executed task.
    *
-   * @return \Drupal\search_api\Task\TaskInterface
+   * @return TaskInterface
    *   The task being executed.
    */
   public function getTask() {
@@ -54,7 +54,7 @@ class TaskEvent extends Event {
   /**
    * Retrieves any exception that stopped the execution of the task.
    *
-   * @return \Drupal\search_api\SearchApiException|null
+   * @return SearchApiException|null
    *   The exception, if any.
    */
   public function getException() {
@@ -64,7 +64,7 @@ class TaskEvent extends Event {
   /**
    * Sets the exception that stopped the execution of the task.
    *
-   * @param \Drupal\search_api\SearchApiException|null $exception
+   * @param SearchApiException|null $exception
    *   The exception that occurred.
    *
    * @return $this
diff --git a/src/Task/TaskInterface.php b/src/Task/TaskInterface.php
index 5512da0b..7be07a49 100644
--- a/src/Task/TaskInterface.php
+++ b/src/Task/TaskInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api\Task;
 
+use Drupal\search_api\ServerInterface;
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api\IndexInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 
@@ -29,10 +32,10 @@ interface TaskInterface extends ContentEntityInterface {
   /**
    * Retrieves the search server associated with this task, if any.
    *
-   * @return \Drupal\search_api\ServerInterface|null
+   * @return ServerInterface|null
    *   The search server, or NULL if there is none.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if a server was set, but it could not be loaded.
    */
   public function getServer();
@@ -48,10 +51,10 @@ interface TaskInterface extends ContentEntityInterface {
   /**
    * Retrieves the search index associated with this task, if any.
    *
-   * @return \Drupal\search_api\IndexInterface|null
+   * @return IndexInterface|null
    *   The search index, or NULL if there is none.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an index was set, but it could not be loaded.
    */
   public function getIndex();
@@ -67,7 +70,7 @@ interface TaskInterface extends ContentEntityInterface {
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager();
@@ -75,7 +78,7 @@ interface TaskInterface extends ContentEntityInterface {
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    *
    * @return $this
diff --git a/src/Task/TaskManager.php b/src/Task/TaskManager.php
index 9347b27a..c18aa90c 100644
--- a/src/Task/TaskManager.php
+++ b/src/Task/TaskManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Task;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -48,34 +50,34 @@ class TaskManager implements TaskManagerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a TaskManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, TranslationInterface $translation, MessengerInterface $messenger) {
@@ -88,7 +90,7 @@ class TaskManager implements TaskManagerInterface {
   /**
    * Returns the entity storage for search tasks.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The storage handler.
    */
   protected function getTaskStorage() {
@@ -103,7 +105,7 @@ class TaskManager implements TaskManagerInterface {
    *   property names keyed to the value (or values, for multiple possibilities)
    *   that the property should have.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   An entity query for search tasks.
    */
   protected function getTasksQuery(array $conditions = []) {
@@ -228,7 +230,7 @@ class TaskManager implements TaskManagerInterface {
     $task_id = $this->getTasksQuery($conditions)->range(0, 1)->execute();
     if ($task_id) {
       $task_id = reset($task_id);
-      /** @var \Drupal\search_api\Task\TaskInterface $task */
+      /** @var TaskInterface $task */
       $task = $this->getTaskStorage()->load($task_id);
       $this->executeSpecificTask($task);
       return TRUE;
@@ -258,7 +260,7 @@ class TaskManager implements TaskManagerInterface {
       // We can't use multi-load here as a task might delete other tasks, so we
       // have to make sure each tasks still exists right before it is executed.
       foreach ($task_ids as $task_id) {
-        /** @var \Drupal\search_api\Task\TaskInterface $task */
+        /** @var TaskInterface $task */
         $task = $this->getTaskStorage()->load($task_id);
         if ($task) {
           $this->executeSpecificTask($task);
@@ -336,7 +338,7 @@ class TaskManager implements TaskManagerInterface {
    *   The context of the current batch, as defined in the @link batch Batch
    *   operations @endlink documentation.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if any error occurred while processing the task.
    */
   public function processBatch(array $task_ids, array $conditions, &$context) {
@@ -349,7 +351,7 @@ class TaskManager implements TaskManagerInterface {
     }
 
     $task_id = array_shift($context['sandbox']['task_ids']);
-    /** @var \Drupal\search_api\Task\TaskInterface $task */
+    /** @var TaskInterface $task */
     $task = $this->getTaskStorage()->load($task_id);
 
     if ($task) {
diff --git a/src/Task/TaskManagerInterface.php b/src/Task/TaskManagerInterface.php
index 8dc261b0..758338f6 100644
--- a/src/Task/TaskManagerInterface.php
+++ b/src/Task/TaskManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Task;
 
+use Drupal\search_api\SearchApiException;
 use Drupal\search_api\IndexInterface;
 use Drupal\search_api\ServerInterface;
 
@@ -31,14 +32,14 @@ interface TaskManagerInterface {
    *
    * @param string $type
    *   The type of task.
-   * @param \Drupal\search_api\ServerInterface|null $server
+   * @param ServerInterface|null $server
    *   (optional) The search server associated with the task, if any.
-   * @param \Drupal\search_api\IndexInterface|null $index
+   * @param IndexInterface|null $index
    *   (optional) The search index associated with the task, if any.
    * @param mixed|null $data
    *   (optional) Additional, type-specific data to save with the task.
    *
-   * @return \Drupal\search_api\Task\TaskInterface
+   * @return TaskInterface
    *   The new task, or an identical existing task.
    */
   public function addTask($type, ServerInterface $server = NULL, IndexInterface $index = NULL, $data = NULL);
@@ -51,7 +52,7 @@ interface TaskManagerInterface {
    *   property names mapped to the value (or values, for multiple
    *   possibilities) that the property should have.
    *
-   * @return \Drupal\search_api\Task\TaskInterface[]
+   * @return TaskInterface[]
    *   The loaded tasks, keyed by task ID.
    */
   public function loadTasks(array $conditions = []);
@@ -78,10 +79,10 @@ interface TaskManagerInterface {
   /**
    * Executes and deletes the given task.
    *
-   * @param \Drupal\search_api\Task\TaskInterface $task
+   * @param TaskInterface $task
    *   The task to execute.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if any error occurred while processing the task.
    */
   public function executeSpecificTask(TaskInterface $task);
@@ -98,7 +99,7 @@ interface TaskManagerInterface {
    *   TRUE if a task was successfully executed, FALSE if there was no matching
    *   task.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if any error occurred while processing the task.
    */
   public function executeSingleTask(array $conditions = []);
@@ -118,7 +119,7 @@ interface TaskManagerInterface {
    *   $limit was given and lower than the total count of pending tasks matching
    *   the conditions.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if any error occurred while processing a task.
    */
   public function executeAllTasks(array $conditions = [], $limit = NULL);
diff --git a/src/Tracker/TrackerPluginManager.php b/src/Tracker/TrackerPluginManager.php
index 6b5171b3..9833278e 100644
--- a/src/Tracker/TrackerPluginManager.php
+++ b/src/Tracker/TrackerPluginManager.php
@@ -26,11 +26,11 @@ class TrackerPluginManager extends SearchApiPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EventDispatcherInterface $eventDispatcher) {
diff --git a/src/UnsavedConfigurationInterface.php b/src/UnsavedConfigurationInterface.php
index 6cb77a0a..1ee6c58c 100644
--- a/src/UnsavedConfigurationInterface.php
+++ b/src/UnsavedConfigurationInterface.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\search_api;
 
+use Drupal\user\UserInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TempStore\TempStoreException;
 /**
  * Represents a piece of configuration that was not permanently saved yet.
  */
@@ -38,7 +43,7 @@ interface UnsavedConfigurationInterface {
   /**
    * Retrieves the owner of the lock on this configuration, if any.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The lock's owner; or NULL if this object represents the still unchanged
    *   configuration that is currently stored.
    */
@@ -68,13 +73,13 @@ interface UnsavedConfigurationInterface {
   /**
    * Saves the changes represented by this object permanently.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the "search_api_index" storage handler couldn't be loaded.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the "search_api_index" entity type doesn't exist.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown if saving the index failed.
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    *   Thrown when a lock for the temp storage could not be acquired.
    */
   public function savePermanent();
@@ -82,7 +87,7 @@ interface UnsavedConfigurationInterface {
   /**
    * Discards the changes represented by this object.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    *   Thrown when a lock for the temp storage could not be acquired.
    */
   public function discardChanges();
diff --git a/src/UnsavedIndexConfiguration.php b/src/UnsavedIndexConfiguration.php
index 8ec5b0bd..1c877015 100644
--- a/src/UnsavedIndexConfiguration.php
+++ b/src/UnsavedIndexConfiguration.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api;
 
+use Drupal\Core\TempStore\Lock;
+use Drupal\search_api\Entity\SearchApiConfigEntityStorage;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityStorageException;
@@ -26,14 +28,14 @@ class UnsavedIndexConfiguration implements IndexInterface, UnsavedConfigurationI
   /**
    * The proxied index.
    *
-   * @var \Drupal\search_api\IndexInterface
+   * @var IndexInterface
    */
   protected $entity;
 
   /**
    * The shared temporary storage to use.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStore
+   * @var SharedTempStore
    */
   protected $tempStore;
 
@@ -47,23 +49,23 @@ class UnsavedIndexConfiguration implements IndexInterface, UnsavedConfigurationI
   /**
    * The lock information for this configuration.
    *
-   * @var \Drupal\Core\TempStore\Lock|null
+   * @var Lock|null
    */
   protected $lock;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new UnsavedIndexConfiguration.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index to proxy.
-   * @param \Drupal\Core\TempStore\SharedTempStore $temp_store
+   * @param SharedTempStore $temp_store
    *   The shared temporary storage to use.
    * @param int|string $current_user_id
    *   Either the UID of the currently logged-in user, or the session ID (for
@@ -78,7 +80,7 @@ class UnsavedIndexConfiguration implements IndexInterface, UnsavedConfigurationI
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ -88,7 +90,7 @@ class UnsavedIndexConfiguration implements IndexInterface, UnsavedConfigurationI
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
@@ -165,10 +167,10 @@ class UnsavedIndexConfiguration implements IndexInterface, UnsavedConfigurationI
     // Unlike the Views UI, we have several separate pages for editing index
     // entities, and only one of them is locked. Therefore, this extra step is
     // necessary, we can't just call $this->entity->save().
-    /** @var \Drupal\search_api\Entity\SearchApiConfigEntityStorage $storage */
+    /** @var SearchApiConfigEntityStorage $storage */
     $storage = $this->getEntityTypeManager()->getStorage('search_api_index');
     $storage->resetCache([$this->entity->id()]);
-    /** @var \Drupal\search_api\IndexInterface $original */
+    /** @var IndexInterface $original */
     $original = $storage->loadOverrideFree($this->entity->id());
     $fields = $this->entity->getFields();
     // Set the correct index object on the field objects.
diff --git a/src/Utility/CommandHelper.php b/src/Utility/CommandHelper.php
index d284b64f..285d0ab1 100644
--- a/src/Utility/CommandHelper.php
+++ b/src/Utility/CommandHelper.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\search_api\Utility;
 
+use Drupal\search_api\Entity\SearchApiConfigEntityStorage;
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\search_api\ServerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityStorageException;
@@ -29,35 +35,35 @@ class CommandHelper implements LoggerAwareInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The storage for search index entities.
    *
-   * @var \Drupal\search_api\Entity\SearchApiConfigEntityStorage
+   * @var SearchApiConfigEntityStorage
    */
   protected $indexStorage;
 
   /**
    * The storage for search server entities.
    *
-   * @var \Drupal\search_api\Entity\SearchApiConfigEntityStorage
+   * @var SearchApiConfigEntityStorage
    */
   protected $serverStorage;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The event dispatcher.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher|null
+   * @var ContainerAwareEventDispatcher|null
    */
   protected $eventDispatcher;
 
@@ -71,19 +77,19 @@ class CommandHelper implements LoggerAwareInterface {
   /**
    * Constructs a CommandHelper object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    * @param string|callable $translation_function
    *   (optional) A callable for translating strings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the "search_api_index" or "search_api_server" entity types'
    *   storage handlers couldn't be loaded.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the "search_api_index" or "search_api_server" entity types are
    *   unknown.
    */
@@ -113,7 +119,7 @@ class CommandHelper implements LoggerAwareInterface {
    *   - status: Either "enabled" or "disabled".
    *   - limit: The number of items that are processed in a single cron run.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an index has a server which couldn't be loaded.
    */
   public function indexListCommand() {
@@ -165,7 +171,7 @@ class CommandHelper implements LoggerAwareInterface {
    *   - indexed: The amount of indexed items.
    *   - total: The total amount of items.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if one of the affected indexes had an invalid tracker set.
    */
   public function indexStatusCommand(array $indexId = NULL) {
@@ -203,7 +209,7 @@ class CommandHelper implements LoggerAwareInterface {
    *   (optional) An array of machine names of indexes to enable. If omitted all
    *   indexes will be enabled.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if no indexes could be loaded.
    */
   public function enableIndexCommand(array $index_ids = NULL) {
@@ -231,7 +237,7 @@ class CommandHelper implements LoggerAwareInterface {
    *   (optional) An array of machine names of indexes to disable. If omitted
    *   all indexes will be disabled.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if no indexes could be loaded.
    */
   public function disableIndexCommand(array $index_ids = NULL) {
@@ -268,9 +274,9 @@ class CommandHelper implements LoggerAwareInterface {
    * @return bool
    *   TRUE if indexing for any index was queued, FALSE otherwise.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if an indexing batch process could not be created.
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if one of the affected indexes had an invalid tracker set.
    */
   public function indexItemsToIndexCommand(array $indexIds = NULL, $limit = NULL, $batchSize = NULL) {
@@ -352,7 +358,7 @@ class CommandHelper implements LoggerAwareInterface {
    * @return bool
    *   TRUE if any index was affected, FALSE otherwise.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if one of the affected indexes had an invalid tracker set, or some
    *   other internal error occurred.
    */
@@ -430,7 +436,7 @@ class CommandHelper implements LoggerAwareInterface {
    * @return bool
    *   TRUE when the clearing was successful, FALSE when no indexes were found.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if one of the affected indexes had an invalid tracker set, or some
    *   other internal error occurred.
    */
@@ -463,9 +469,9 @@ class CommandHelper implements LoggerAwareInterface {
    *   - id: The internal ID of the item.
    *   - label: The label of the item, or NULL if it could not be determined.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if searching failed for any reason.
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if no search query could be created for the given index, for
    *   example because it is disabled or its server could not be loaded.
    */
@@ -516,7 +522,7 @@ class CommandHelper implements LoggerAwareInterface {
    *   - name: The human readable name of the search server.
    *   - status: The enabled status of the server.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if no servers could be loaded.
    */
   public function serverListCommand() {
@@ -543,9 +549,9 @@ class CommandHelper implements LoggerAwareInterface {
    * @param string $serverId
    *   The server's ID.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if the server couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown if an internal error occurred when saving the server.
    */
   public function enableServerCommand($serverId) {
@@ -553,7 +559,7 @@ class CommandHelper implements LoggerAwareInterface {
     if (empty($servers)) {
       throw new ConsoleException($this->t('The server could not be loaded.'));
     }
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->reloadEntityOverrideFree(reset($servers));
     $server->setStatus(TRUE)->save();
   }
@@ -564,9 +570,9 @@ class CommandHelper implements LoggerAwareInterface {
    * @param string $serverId
    *   The server's ID.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if the server couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown if an internal error occurred when saving the server.
    */
   public function disableServerCommand($serverId) {
@@ -574,7 +580,7 @@ class CommandHelper implements LoggerAwareInterface {
     if (empty($servers)) {
       throw new ConsoleException($this->t('The server could not be loaded.'));
     }
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->reloadEntityOverrideFree(reset($servers));
     $server->setStatus(FALSE)->save();
   }
@@ -585,9 +591,9 @@ class CommandHelper implements LoggerAwareInterface {
    * @param string $serverId
    *   The ID of the server to clear.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   Thrown if the server couldn't be loaded.
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if one of the affected indexes had an invalid tracker set, or some
    *   other internal error occurred.
    */
@@ -596,7 +602,7 @@ class CommandHelper implements LoggerAwareInterface {
     if (empty($servers)) {
       throw new ConsoleException($this->t('The server could not be loaded.'));
     }
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->reloadEntityOverrideFree(reset($servers));
 
     foreach ($server->getIndexes() as $index) {
@@ -612,7 +618,7 @@ class CommandHelper implements LoggerAwareInterface {
    * @param string $serverId
    *   The ID of the index's new server.
    *
-   * @throws \Drupal\search_api\ConsoleException
+   * @throws ConsoleException
    *   If either the index or the server couldn't be loaded.
    */
   public function setIndexServerCommand($indexId, $serverId) {
@@ -632,7 +638,7 @@ class CommandHelper implements LoggerAwareInterface {
 
     // Set the new server on the index.
     try {
-      /** @var \Drupal\search_api\IndexInterface $index */
+      /** @var IndexInterface $index */
       $index = $this->reloadEntityOverrideFree($index);
       $index->setServer($server);
       $index->save();
@@ -652,7 +658,7 @@ class CommandHelper implements LoggerAwareInterface {
    *   indexes. An array with a single NULL value is interpreted the same way as
    *   passing NULL.
    *
-   * @return \Drupal\search_api\IndexInterface[]
+   * @return IndexInterface[]
    *   An array of search indexes.
    */
   public function loadIndexes(array $indexIds = NULL) {
@@ -669,7 +675,7 @@ class CommandHelper implements LoggerAwareInterface {
    *   (optional) The IDs of the search servers to return, or NULL to load all
    *   servers.
    *
-   * @return \Drupal\search_api\ServerInterface[]
+   * @return ServerInterface[]
    *   An array of search servers.
    */
   public function loadServers(array $serverIds = NULL) {
@@ -689,7 +695,7 @@ class CommandHelper implements LoggerAwareInterface {
   /**
    * Changes the state of a single index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index to be enabled.
    * @param bool $enable
    *   (optional) TRUE to enable, FALSE to disable the index.
@@ -715,16 +721,16 @@ class CommandHelper implements LoggerAwareInterface {
   /**
    * Loads an override-free copy of a config entity, for saving.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity to reload.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The override-free version of the entity, or NULL if it couldn't be
    *   loaded.
    */
   public function reloadEntityOverrideFree(ConfigEntityInterface $entity) {
     try {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
+      /** @var ConfigEntityStorageInterface $storage */
       $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
       return $storage->loadOverrideFree($entity->id());
     }
diff --git a/src/Utility/DataTypeHelper.php b/src/Utility/DataTypeHelper.php
index f2f8fbb8..e4d29bde 100644
--- a/src/Utility/DataTypeHelper.php
+++ b/src/Utility/DataTypeHelper.php
@@ -18,21 +18,21 @@ class DataTypeHelper implements DataTypeHelperInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The data type plugin manager.
    *
-   * @var \Drupal\search_api\DataType\DataTypePluginManager
+   * @var DataTypePluginManager
    */
   protected $dataTypeManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -57,11 +57,11 @@ class DataTypeHelper implements DataTypeHelperInterface {
   /**
    * Constructs a DataTypeHelper object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\search_api\DataType\DataTypePluginManager $dataTypeManager
+   * @param DataTypePluginManager $dataTypeManager
    *   The data type plugin manager.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, EventDispatcherInterface $eventDispatcher, DataTypePluginManager $dataTypeManager) {
diff --git a/src/Utility/DataTypeHelperInterface.php b/src/Utility/DataTypeHelperInterface.php
index ecd63592..817021e8 100644
--- a/src/Utility/DataTypeHelperInterface.php
+++ b/src/Utility/DataTypeHelperInterface.php
@@ -37,7 +37,7 @@ interface DataTypeHelperInterface {
   /**
    * Retrieves the necessary type fallbacks for an index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to return the type fallbacks.
    *
    * @return string[]
diff --git a/src/Utility/FieldsHelper.php b/src/Utility/FieldsHelper.php
index da43cd3f..a44dadb8 100644
--- a/src/Utility/FieldsHelper.php
+++ b/src/Utility/FieldsHelper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Utility;
 
+use Drupal\search_api\Item\ItemInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -37,28 +38,28 @@ class FieldsHelper implements FieldsHelperInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;
 
   /**
    * The data type plugin manager.
    *
-   * @var \Drupal\search_api\Utility\DataTypeHelperInterface
+   * @var DataTypeHelperInterface
    */
   protected $dataTypeHelper;
 
@@ -83,13 +84,13 @@ class FieldsHelper implements FieldsHelperInterface {
   /**
    * Constructs a FieldsHelper object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityBundleInfo
    *   The entity type bundle info service.
-   * @param \Drupal\search_api\Utility\DataTypeHelperInterface $dataTypeHelper
+   * @param DataTypeHelperInterface $dataTypeHelper
    *   The data type helper service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entityFieldManager, EntityTypeBundleInfoInterface $entityBundleInfo, DataTypeHelperInterface $dataTypeHelper) {
@@ -220,11 +221,11 @@ class FieldsHelper implements FieldsHelperInterface {
   public function extractItemValues(array $items, array $required_properties, $load = TRUE) {
     $extracted_values = [];
 
-    /** @var \Drupal\search_api\Item\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($items as $i => $item) {
       $index = $item->getIndex();
       $item_values = [];
-      /** @var \Drupal\search_api\Item\FieldInterface[][] $missing_fields */
+      /** @var FieldInterface[][] $missing_fields */
       $missing_fields = [];
       $processor_fields = [];
       $needed_processors = [];
diff --git a/src/Utility/FieldsHelperInterface.php b/src/Utility/FieldsHelperInterface.php
index 4612ac0c..829e23fc 100644
--- a/src/Utility/FieldsHelperInterface.php
+++ b/src/Utility/FieldsHelperInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api\Utility;
 
+use Drupal\search_api\Item\ItemInterface;
+use Drupal\search_api\SearchApiException;
 use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\Core\TypedData\ComplexDataInterface;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ -21,9 +23,9 @@ interface FieldsHelperInterface {
    * The values will be set directly on the given field objects, nothing is
    * returned.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $item
+   * @param ComplexDataInterface $item
    *   The item from which fields should be extracted.
-   * @param \Drupal\search_api\Item\FieldInterface[][] $fields
+   * @param FieldInterface[][] $fields
    *   An associative array, keyed by property paths, mapped to field objects
    *   with that property path.
    * @param string|null $langcode
@@ -34,9 +36,9 @@ interface FieldsHelperInterface {
   /**
    * Extracts value and original type from a single piece of data.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The piece of data from which to extract information.
-   * @param \Drupal\search_api\Item\FieldInterface $field
+   * @param FieldInterface $field
    *   The field into which to put the extracted data.
    */
   public function extractField(TypedDataInterface $data, FieldInterface $field);
@@ -44,7 +46,7 @@ interface FieldsHelperInterface {
   /**
    * Extracts field values from a typed data object.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The typed data object.
    *
    * @return array
@@ -58,7 +60,7 @@ interface FieldsHelperInterface {
    * Values are taken from existing fields on the item, where present, and are
    * otherwise extracted from the item's underlying object.
    *
-   * @param \Drupal\search_api\Item\ItemInterface[] $items
+   * @param ItemInterface[] $items
    *   The items from which properties should be extracted.
    * @param string[][] $required_properties
    *   The properties that should be extracted, keyed by datasource ID and
@@ -80,14 +82,14 @@ interface FieldsHelperInterface {
    *
    * Array keys will be preserved.
    *
-   * @param \Drupal\search_api\Item\FieldInterface[] $fields
+   * @param FieldInterface[] $fields
    *   The fields to filter.
    * @param string|null $datasource_id
    *   The datasource ID of the fields that should be returned.
    * @param string $property_path
    *   The searched property path on the item.
    *
-   * @return \Drupal\search_api\Item\FieldInterface[]
+   * @return FieldInterface[]
    *   All fields with the given property path.
    */
   public function filterForPropertyPath(array $fields, $datasource_id, $property_path);
@@ -98,10 +100,10 @@ interface FieldsHelperInterface {
    * Takes care of including bundle-specific properties for entity reference
    * properties.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataDefinitionInterface $property
+   * @param ComplexDataDefinitionInterface $property
    *   The base definition.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface[]
+   * @return DataDefinitionInterface[]
    *   The nested properties, keyed by property name.
    */
   public function getNestedProperties(ComplexDataDefinitionInterface $property);
@@ -109,12 +111,12 @@ interface FieldsHelperInterface {
   /**
    * Retrieves a nested property from a list of properties.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface[] $properties
+   * @param DataDefinitionInterface[] $properties
    *   The base properties, keyed by property name.
    * @param string $propertyPath
    *   The property path of the property to retrieve.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface|null
+   * @return DataDefinitionInterface|null
    *   The requested property, or NULL if it couldn't be found.
    */
   public function retrieveNestedProperty(array $properties, $propertyPath);
@@ -125,10 +127,10 @@ interface FieldsHelperInterface {
    * This will retrieve the list item type from a list data definition or the
    * definition of the referenced data from a reference data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $property
+   * @param DataDefinitionInterface $property
    *   The original property definition.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   The inner property definition.
    */
   public function getInnerProperty(DataDefinitionInterface $property);
@@ -162,15 +164,15 @@ interface FieldsHelperInterface {
   /**
    * Creates a search item object.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The item's search index.
    * @param string $id
    *   The item's (combined) ID.
-   * @param \Drupal\search_api\Datasource\DatasourceInterface|null $datasource
+   * @param DatasourceInterface|null $datasource
    *   (optional) The datasource of the item. If not set, it will be determined
    *   from the ID and loaded from the index if needed.
    *
-   * @return \Drupal\search_api\Item\ItemInterface
+   * @return ItemInterface
    *   A search item with the given values.
    */
   public function createItem(IndexInterface $index, $id, DatasourceInterface $datasource = NULL);
@@ -178,19 +180,19 @@ interface FieldsHelperInterface {
   /**
    * Creates a search item object by wrapping an existing complex data object.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The item's search index.
-   * @param \Drupal\Core\TypedData\ComplexDataInterface $originalObject
+   * @param ComplexDataInterface $originalObject
    *   The original object to wrap.
    * @param string $id
    *   (optional) The item's (combined) ID. If not set, it will be determined
    *   with the \Drupal\search_api\Datasource\DatasourceInterface::getItemId()
    *   method of $datasource. In this case, $datasource must not be NULL.
-   * @param \Drupal\search_api\Datasource\DatasourceInterface|null $datasource
+   * @param DatasourceInterface|null $datasource
    *   (optional) The datasource of the item. If not set, it will be determined
    *   from the ID and loaded from the index if needed.
    *
-   * @return \Drupal\search_api\Item\ItemInterface
+   * @return ItemInterface
    *   A search item with the given values.
    *
    * @throws \InvalidArgumentException
@@ -201,14 +203,14 @@ interface FieldsHelperInterface {
   /**
    * Creates a new field object wrapping a field of the given index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index to which this field should be attached.
    * @param string $fieldIdentifier
    *   The field identifier.
    * @param array $fieldInfo
    *   (optional) An array with further configuration for the field.
    *
-   * @return \Drupal\search_api\Item\FieldInterface
+   * @return FieldInterface
    *   A new field object.
    */
   public function createField(IndexInterface $index, $fieldIdentifier, array $fieldInfo = []);
@@ -218,9 +220,9 @@ interface FieldsHelperInterface {
    *
    * Will find and set a new unique field identifier for the field on the index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $property
+   * @param DataDefinitionInterface $property
    *   The data definition of the property.
    * @param string|null $datasourceId
    *   The ID of the index's datasource this property belongs to, or NULL if it
@@ -235,10 +237,10 @@ interface FieldsHelperInterface {
    *   (optional) The type to set for the field, or NULL to determine a default
    *   type automatically.
    *
-   * @return \Drupal\search_api\Item\FieldInterface
+   * @return FieldInterface
    *   A new field object for the index, based on the given property.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if no type was given and no default could be determined.
    */
   public function createFieldFromProperty(IndexInterface $index, DataDefinitionInterface $property, $datasourceId, $propertyPath, $fieldId = NULL, $type = NULL);
@@ -246,7 +248,7 @@ interface FieldsHelperInterface {
   /**
    * Finds a new unique field identifier on the given index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index.
    * @param string $propertyPath
    *   The property path on which the field identifier should be based. Only the
@@ -260,9 +262,9 @@ interface FieldsHelperInterface {
   /**
    * Compares two fields for alphabetic sorting according to their labels.
    *
-   * @param \Drupal\search_api\Item\FieldInterface $a
+   * @param FieldInterface $a
    *   The first field.
-   * @param \Drupal\search_api\Item\FieldInterface $b
+   * @param FieldInterface $b
    *   The second field.
    *
    * @return int
diff --git a/src/Utility/PluginHelper.php b/src/Utility/PluginHelper.php
index 1373376e..5da3eb38 100644
--- a/src/Utility/PluginHelper.php
+++ b/src/Utility/PluginHelper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Utility;
 
+use Drupal\search_api\Plugin\IndexPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\search_api\Datasource\DatasourcePluginManager;
 use Drupal\search_api\IndexInterface;
@@ -17,7 +18,7 @@ class PluginHelper implements PluginHelperInterface {
   /**
    * The datasource plugin manager.
    *
-   * @var \Drupal\search_api\Datasource\DatasourcePluginManager
+   * @var DatasourcePluginManager
    */
   protected $datasourcePluginManager;
 
@@ -38,11 +39,11 @@ class PluginHelper implements PluginHelperInterface {
   /**
    * Constructs a PluginHelper object.
    *
-   * @param \Drupal\search_api\Datasource\DatasourcePluginManager $datasource_plugin_manager
+   * @param DatasourcePluginManager $datasource_plugin_manager
    *   The datasource plugin manager.
-   * @param \Drupal\search_api\Processor\ProcessorPluginManager $processor_plugin_manager
+   * @param ProcessorPluginManager $processor_plugin_manager
    *   The processor plugin manager.
-   * @param \Drupal\search_api\Tracker\TrackerPluginManager $tracker_plugin_manager
+   * @param TrackerPluginManager $tracker_plugin_manager
    *   The tracker plugin manager.
    */
   public function __construct(DatasourcePluginManager $datasource_plugin_manager, ProcessorPluginManager $processor_plugin_manager, TrackerPluginManager $tracker_plugin_manager) {
@@ -54,7 +55,7 @@ class PluginHelper implements PluginHelperInterface {
   /**
    * Creates a plugin object for the given index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to create the plugins.
    * @param string $type
    *   The type of plugin to create: "datasource", "processor" or "tracker".
@@ -63,10 +64,10 @@ class PluginHelper implements PluginHelperInterface {
    * @param array $configuration
    *   (optional) The configuration to set for the plugin.
    *
-   * @return \Drupal\search_api\Plugin\IndexPluginInterface
+   * @return IndexPluginInterface
    *   The new plugin object.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an unknown $type or $plugin_id is given.
    */
   protected function createIndexPlugin(IndexInterface $index, $type, $plugin_id, array $configuration = []) {
@@ -85,7 +86,7 @@ class PluginHelper implements PluginHelperInterface {
   /**
    * Creates multiple plugin objects for the given index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to create the plugins.
    * @param string $type
    *   The type of plugin to create: "datasource", "processor" or "tracker".
@@ -97,10 +98,10 @@ class PluginHelper implements PluginHelperInterface {
    *   Missing configurations are either taken from the index's stored settings,
    *   if they are present there, or default to an empty array.
    *
-   * @return \Drupal\search_api\Plugin\IndexPluginInterface[]
+   * @return IndexPluginInterface[]
    *   The created plugin objects.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an unknown $type or plugin ID is given.
    */
   protected function createIndexPlugins(IndexInterface $index, $type, array $plugin_ids = NULL, array $configurations = []) {
diff --git a/src/Utility/PluginHelperInterface.php b/src/Utility/PluginHelperInterface.php
index bd414152..a2d77649 100644
--- a/src/Utility/PluginHelperInterface.php
+++ b/src/Utility/PluginHelperInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\search_api\Utility;
 
+use Drupal\search_api\Datasource\DatasourceInterface;
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api\processor\ProcessorInterface;
+use Drupal\search_api\tracker\TrackerInterface;
 use Drupal\search_api\IndexInterface;
 
 /**
@@ -12,17 +16,17 @@ interface PluginHelperInterface {
   /**
    * Creates a datasource plugin object for this index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to create the plugin.
    * @param string $plugin_id
    *   The plugin's ID.
    * @param array $configuration
    *   (optional) The configuration to set for the plugin.
    *
-   * @return \Drupal\search_api\Datasource\DatasourceInterface
+   * @return DatasourceInterface
    *   The new datasource plugin object.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an unknown $type or $plugin_id is given.
    */
   public function createDatasourcePlugin(IndexInterface $index, $plugin_id, array $configuration = []);
@@ -30,17 +34,17 @@ interface PluginHelperInterface {
   /**
    * Creates a processor plugin object for this index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to create the plugin.
    * @param string $plugin_id
    *   The plugin's ID.
    * @param array $configuration
    *   (optional) The configuration to set for the plugin.
    *
-   * @return \Drupal\search_api\processor\ProcessorInterface
+   * @return ProcessorInterface
    *   The new processor plugin object.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an unknown $type or $plugin_id is given.
    */
   public function createProcessorPlugin(IndexInterface $index, $plugin_id, array $configuration = []);
@@ -48,17 +52,17 @@ interface PluginHelperInterface {
   /**
    * Creates a processor plugin object for this index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to create the plugin.
    * @param string $plugin_id
    *   The plugin's ID.
    * @param array $configuration
    *   (optional) The configuration to set for the plugin.
    *
-   * @return \Drupal\search_api\tracker\TrackerInterface
+   * @return TrackerInterface
    *   The new tracker plugin object.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an unknown $type or $plugin_id is given.
    */
   public function createTrackerPlugin(IndexInterface $index, $plugin_id, array $configuration = []);
@@ -66,7 +70,7 @@ interface PluginHelperInterface {
   /**
    * Creates multiple datasource plugin objects for this index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to create the plugins.
    * @param string[]|null $plugin_ids
    *   (optional) The IDs of the plugins to create, or NULL to create instances
@@ -76,10 +80,10 @@ interface PluginHelperInterface {
    *   Missing configurations are either taken from the index's stored settings,
    *   if they are present there, or default to an empty array.
    *
-   * @return \Drupal\search_api\Datasource\DatasourceInterface[]
+   * @return DatasourceInterface[]
    *   The created datasource plugin objects.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an unknown plugin ID is given.
    */
   public function createDatasourcePlugins(IndexInterface $index, array $plugin_ids = NULL, array $configurations = []);
@@ -87,7 +91,7 @@ interface PluginHelperInterface {
   /**
    * Creates multiple processor plugin objects for this index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to create the plugins.
    * @param string[]|null $plugin_ids
    *   (optional) The IDs of the processors to create, or NULL to create
@@ -97,10 +101,10 @@ interface PluginHelperInterface {
    *   Missing configurations are either taken from the index's stored settings,
    *   if they are present there, or default to an empty array.
    *
-   * @return \Drupal\search_api\processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   The created processor plugin objects.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an unknown plugin ID is given.
    */
   public function createProcessorPlugins(IndexInterface $index, array $plugin_ids = NULL, array $configurations = []);
@@ -108,7 +112,7 @@ interface PluginHelperInterface {
   /**
    * Creates multiple tracker plugin objects for this index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to create the plugins.
    * @param string[]|null $plugin_ids
    *   (optional) The IDs of the plugins to create, or NULL to create instances
@@ -118,10 +122,10 @@ interface PluginHelperInterface {
    *   Missing configurations are either taken from the index's stored settings,
    *   if they are present there, or default to an empty array.
    *
-   * @return \Drupal\search_api\tracker\TrackerInterface[]
+   * @return TrackerInterface[]
    *   The created tracker plugin objects.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if an unknown plugin ID is given.
    */
   public function createTrackerPlugins(IndexInterface $index, array $plugin_ids = NULL, array $configurations = []);
diff --git a/src/Utility/PostRequestIndexing.php b/src/Utility/PostRequestIndexing.php
index 37ef9f64..6b8e1dcb 100644
--- a/src/Utility/PostRequestIndexing.php
+++ b/src/Utility/PostRequestIndexing.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Utility;
 
+use Drupal\search_api\IndexInterface;
 use Drupal\Core\DestructableInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\search_api\LoggerTrait;
@@ -36,14 +37,14 @@ class PostRequestIndexing implements PostRequestIndexingInterface, DestructableI
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -67,7 +68,7 @@ class PostRequestIndexing implements PostRequestIndexingInterface, DestructableI
         return;
       }
 
-      /** @var \Drupal\search_api\IndexInterface $index */
+      /** @var IndexInterface $index */
       $index = $storage->load($index_id);
       // It's possible that the index was deleted in the meantime, so make sure
       // it's actually there.
diff --git a/src/Utility/QueryHelper.php b/src/Utility/QueryHelper.php
index f82c7970..9c3b3e4c 100644
--- a/src/Utility/QueryHelper.php
+++ b/src/Utility/QueryHelper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Utility;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\search_api\IndexInterface;
 use Drupal\search_api\ParseMode\ParseModePluginManager;
@@ -17,21 +18,21 @@ class QueryHelper implements QueryHelperInterface {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The parse mode manager.
    *
-   * @var \Drupal\search_api\ParseMode\ParseModePluginManager
+   * @var ParseModePluginManager
    */
   protected $parseModeManager;
 
@@ -52,11 +53,11 @@ class QueryHelper implements QueryHelperInterface {
   /**
    * Constructs a QueryHelper object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\search_api\ParseMode\ParseModePluginManager $parseModeManager
+   * @param ParseModePluginManager $parseModeManager
    *   The parse mode manager.
    */
   public function __construct(RequestStack $requestStack, ModuleHandlerInterface $moduleHandler, ParseModePluginManager $parseModeManager) {
@@ -130,7 +131,7 @@ class QueryHelper implements QueryHelperInterface {
    * If there is no current request, instead of returning NULL this will instead
    * return a unique object to be used in lieu of a NULL key.
    *
-   * @return \Symfony\Component\HttpFoundation\Request|object
+   * @return Request|object
    *   The current request, if present; or this object's representation of the
    *   NULL key.
    */
diff --git a/src/Utility/QueryHelperInterface.php b/src/Utility/QueryHelperInterface.php
index 62404531..20a95475 100644
--- a/src/Utility/QueryHelperInterface.php
+++ b/src/Utility/QueryHelperInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Utility;
 
+use Drupal\search_api\Query\QueryInterface;
 use Drupal\search_api\IndexInterface;
 use Drupal\search_api\Query\ResultSetInterface;
 
@@ -13,14 +14,14 @@ interface QueryHelperInterface {
   /**
    * Creates a new search query object.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index on which to search.
    * @param array $options
    *   (optional) The options to set for the query. See
    *   \Drupal\search_api\Query\QueryInterface::setOption() for a list of
    *   options that are recognized by default.
    *
-   * @return \Drupal\search_api\Query\QueryInterface
+   * @return QueryInterface
    *   A search query object to use.
    */
   public function createQuery(IndexInterface $index, array $options = []);
@@ -28,7 +29,7 @@ interface QueryHelperInterface {
   /**
    * Adds a result set to the cache.
    *
-   * @param \Drupal\search_api\Query\ResultSetInterface $results
+   * @param ResultSetInterface $results
    *   The search results to cache.
    */
   public function addResults(ResultSetInterface $results);
@@ -39,7 +40,7 @@ interface QueryHelperInterface {
    * @param string $search_id
    *   The search ID of the results to retrieve.
    *
-   * @return \Drupal\search_api\Query\ResultSetInterface|null
+   * @return ResultSetInterface|null
    *   The results with the given search ID, if present; NULL otherwise.
    */
   public function getResults($search_id);
@@ -47,7 +48,7 @@ interface QueryHelperInterface {
   /**
    * Retrieves all results data cached in this request.
    *
-   * @return \Drupal\search_api\Query\ResultSetInterface[]
+   * @return ResultSetInterface[]
    *   The results of all searches cached in this service, keyed by their
    *   search IDs.
    */
diff --git a/src/Utility/TrackingHelper.php b/src/Utility/TrackingHelper.php
index 93512eca..12b95bbd 100644
--- a/src/Utility/TrackingHelper.php
+++ b/src/Utility/TrackingHelper.php
@@ -30,50 +30,50 @@ class TrackingHelper implements TrackingHelperInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface
+   * @var FieldsHelperInterface
    */
   protected $fieldsHelper;
 
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fieldsHelper
+   * @param FieldsHelperInterface $fieldsHelper
    *   The fields helper.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager, EventDispatcherInterface $eventDispatcher, FieldsHelperInterface $fieldsHelper, CacheBackendInterface $cache) {
@@ -88,7 +88,7 @@ class TrackingHelper implements TrackingHelperInterface {
    * {@inheritdoc}
    */
   public function trackReferencedEntityUpdate(EntityInterface $entity, bool $deleted = FALSE) {
-    /** @var \Drupal\search_api\IndexInterface[] $indexes */
+    /** @var IndexInterface[] $indexes */
     $indexes = [];
     try {
       $indexes = $this->entityTypeManager->getStorage('search_api_index')
@@ -142,7 +142,7 @@ class TrackingHelper implements TrackingHelperInterface {
    * indexed by the given index. (That is, what items' indexed contents might be
    * affected by a given entity being updated or deleted.)
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which to create the map.
    *
    * @return array[]
@@ -263,9 +263,9 @@ class TrackingHelper implements TrackingHelperInterface {
   /**
    * Determines whether the given property is a reference to an entity.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $property_definition
+   * @param DataDefinitionInterface $property_definition
    *   The property to test.
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $cacheability
+   * @param RefinableCacheableDependencyInterface $cacheability
    *   A cache metadata object to track any caching information necessary in
    *   this method call.
    *
diff --git a/src/Utility/TrackingHelperInterface.php b/src/Utility/TrackingHelperInterface.php
index a7df0cd4..40ae7908 100644
--- a/src/Utility/TrackingHelperInterface.php
+++ b/src/Utility/TrackingHelperInterface.php
@@ -17,7 +17,7 @@ interface TrackingHelperInterface {
    * Determines whether this entity is indirectly referenced in any search index
    * and, if so, marks all items referencing it as updated.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity that just got changed (updated or deleted).
    * @param bool $deleted
    *   (optional) TRUE if the entity was deleted, FALSE if it was updated.
diff --git a/src/Utility/Utility.php b/src/Utility/Utility.php
index b623c7da..7cf03b42 100644
--- a/src/Utility/Utility.php
+++ b/src/Utility/Utility.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api\Utility;
 
+use Drupal\search_api\Plugin\search_api\data_type\value\TextTokenInterface;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
@@ -25,7 +26,7 @@ class Utility {
    * @param float $score
    *   (optional) The token's score.
    *
-   * @return \Drupal\search_api\Plugin\search_api\data_type\value\TextTokenInterface
+   * @return TextTokenInterface
    *   A text token object.
    */
   public static function createTextToken($value, $score = 1.0) {
@@ -156,7 +157,7 @@ class Utility {
   /**
    * Retrieves all overridden property values for the given config entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The config entity to check for overrides.
    *
    * @return array
@@ -180,7 +181,7 @@ class Utility {
   /**
    * Collects overrides from a config object.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The config object.
    * @param array $values
    *   The array of values for the given $prefix.
@@ -254,10 +255,10 @@ class Utility {
   /**
    * Escapes HTML special characters in plain text, if necessary.
    *
-   * @param string|\Drupal\Component\Render\MarkupInterface $text
+   * @param string|MarkupInterface $text
    *   The text to escape.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   If a markup object was passed as $text, it is returned as-is. Otherwise,
    *   the text is escaped and returned
    */
diff --git a/tests/modules/search_api_test/search_api_test.module b/tests/modules/search_api_test/search_api_test.module
index e8cab50e..92f6c7f6 100644
--- a/tests/modules/search_api_test/search_api_test.module
+++ b/tests/modules/search_api_test/search_api_test.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\search_api\ServerInterface;
 /**
  * @file
  * Provides a fake search server and other help for testing purposes.
@@ -69,7 +70,7 @@ function search_api_test_entity_access(EntityInterface $entity, $operation, Acco
  * Implements hook_ENTITY_TYPE_load() for "search_api_server".
  */
 function search_api_test_search_api_server_load($servers) {
-  /** @var \Drupal\search_api\ServerInterface $server */
+  /** @var ServerInterface $server */
   foreach ($servers as $server) {
     if ($server->hasValidBackend()) {
       $server->getBackend();
diff --git a/tests/modules/search_api_test/src/MethodOverrides.php b/tests/modules/search_api_test/src/MethodOverrides.php
index c2eac6ef..ed4f5096 100644
--- a/tests/modules/search_api_test/src/MethodOverrides.php
+++ b/tests/modules/search_api_test/src/MethodOverrides.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_test;
 
+use Drupal\search_api\Item\ItemInterface;
 use Drupal\search_api\Backend\BackendInterface;
 use Drupal\search_api\IndexInterface;
 
@@ -13,7 +14,7 @@ class MethodOverrides {
   /**
    * Provides a generic method override for the test backend.
    *
-   * @param \Drupal\search_api\Backend\BackendInterface $backend
+   * @param BackendInterface $backend
    *   The backend plugin on which the method was called.
    *
    * @return true
@@ -30,11 +31,11 @@ class MethodOverrides {
   /**
    * Provides an override for the test backend's indexItems() method.
    *
-   * @param \Drupal\search_api\Backend\BackendInterface $backend
+   * @param BackendInterface $backend
    *   The backend plugin on which the method was called.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index for which items should be indexed.
-   * @param \Drupal\search_api\Item\ItemInterface[] $items
+   * @param ItemInterface[] $items
    *   An array of items to be indexed, keyed by their item IDs.
    *
    * @return string[]
diff --git a/tests/modules/search_api_test/src/Plugin/search_api/backend/TestBackend.php b/tests/modules/search_api_test/src/Plugin/search_api/backend/TestBackend.php
index 21e5ccf4..c414dcae 100644
--- a/tests/modules/search_api_test/src/Plugin/search_api/backend/TestBackend.php
+++ b/tests/modules/search_api_test/src/Plugin/search_api/backend/TestBackend.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_test\Plugin\search_api\backend;
 
+use Drupal\search_api\Item\ItemInterface;
+use Drupal\search_api\Datasource\DatasourceInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\search_api\Backend\BackendPluginBase;
@@ -130,7 +132,7 @@ class TestBackend extends BackendPluginBase implements PluginFormInterface {
     $indexed_values = $state->get($key, []);
     $skip = $state->get('search_api_test.backend.indexItems.skip', []);
     $skip = array_flip($skip);
-    /** @var \Drupal\search_api\Item\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($items as $id => $item) {
       if (isset($skip[$id])) {
         unset($items[$id]);
@@ -193,7 +195,7 @@ class TestBackend extends BackendPluginBase implements PluginFormInterface {
     $state = \Drupal::state();
     $key = 'search_api_test.backend.indexed.' . $index->id();
     $indexed_values = $state->get($key, []);
-    /** @var \Drupal\search_api\Item\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($item_ids as $item_id) {
       unset($indexed_values[$item_id]);
     }
@@ -217,7 +219,7 @@ class TestBackend extends BackendPluginBase implements PluginFormInterface {
     }
 
     $indexed = \Drupal::state()->get($key, []);
-    /** @var \Drupal\search_api\Item\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach (array_keys($indexed) as $item_id) {
       list($item_datasource_id) = Utility::splitCombinedId($item_id);
       if ($item_datasource_id == $datasource_id) {
@@ -240,7 +242,7 @@ class TestBackend extends BackendPluginBase implements PluginFormInterface {
     $results = $query->getResults();
     $result_items = [];
     $datasources = $query->getIndex()->getDatasources();
-    /** @var \Drupal\search_api\Datasource\DatasourceInterface $datasource */
+    /** @var DatasourceInterface $datasource */
     $datasource = reset($datasources);
     $datasource_id = $datasource->getPluginId();
     $fields_helper = \Drupal::getContainer()->get('search_api.fields_helper');
diff --git a/tests/modules/search_api_test/src/TestPluginTrait.php b/tests/modules/search_api_test/src/TestPluginTrait.php
index 1bce7a17..3228fffe 100644
--- a/tests/modules/search_api_test/src/TestPluginTrait.php
+++ b/tests/modules/search_api_test/src/TestPluginTrait.php
@@ -22,7 +22,7 @@ trait TestPluginTrait {
    * @param string $method
    *   The method on this object from which this method was called.
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    *   Thrown if state "search_api_test.TYPE.exception.$method" is TRUE.
    */
   protected function checkError($method) {
diff --git a/tests/modules/search_api_test_db/src/EventListener.php b/tests/modules/search_api_test_db/src/EventListener.php
index 02515ab5..f8e88e57 100644
--- a/tests/modules/search_api_test_db/src/EventListener.php
+++ b/tests/modules/search_api_test_db/src/EventListener.php
@@ -25,7 +25,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the query pre-execute event.
    *
-   * @param \Drupal\search_api_db\Event\QueryPreExecuteEvent $event
+   * @param QueryPreExecuteEvent $event
    *   The query pre-execute event.
    */
   public function queryPreExecute(QueryPreExecuteEvent $event) {
diff --git a/tests/modules/search_api_test_events/src/EventListener.php b/tests/modules/search_api_test_events/src/EventListener.php
index 75699f06..2c5e39da 100644
--- a/tests/modules/search_api_test_events/src/EventListener.php
+++ b/tests/modules/search_api_test_events/src/EventListener.php
@@ -25,14 +25,14 @@ class EventListener implements EventSubscriberInterface {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(MessengerInterface $messenger) {
@@ -66,7 +66,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the backend info alter event.
    *
-   * @param \Drupal\search_api\Event\GatheringPluginInfoEvent $event
+   * @param GatheringPluginInfoEvent $event
    *   The backend info alter event.
    */
   public function backendInfoAlter(GatheringPluginInfoEvent $event) {
@@ -77,7 +77,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the data type info alter event.
    *
-   * @param \Drupal\search_api\Event\GatheringPluginInfoEvent $event
+   * @param GatheringPluginInfoEvent $event
    *   The data type info alter event.
    */
   public function dataTypeInfoAlter(GatheringPluginInfoEvent $event) {
@@ -90,7 +90,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the data source info alter event.
    *
-   * @param \Drupal\search_api\Event\GatheringPluginInfoEvent $event
+   * @param GatheringPluginInfoEvent $event
    *   The data source info alter event.
    */
   public function dataSourceInfoAlter(GatheringPluginInfoEvent $event) {
@@ -103,7 +103,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the displays alter event.
    *
-   * @param \Drupal\search_api\Event\GatheringPluginInfoEvent $event
+   * @param GatheringPluginInfoEvent $event
    *   The displays alter event.
    */
   public function displaysAlter(GatheringPluginInfoEvent $event) {
@@ -116,7 +116,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the field type mapping alter event.
    *
-   * @param \Drupal\search_api\Event\MappingFieldTypesEvent $event
+   * @param MappingFieldTypesEvent $event
    *   The field type mapping alter event.
    */
   public function fieldTypeMappingAlter(MappingFieldTypesEvent $event) {
@@ -128,7 +128,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the indexing items event.
    *
-   * @param \Drupal\search_api\Event\IndexingItemsEvent $event
+   * @param IndexingItemsEvent $event
    *   The indexing items event.
    */
   public function indexingItems(IndexingItemsEvent $event) {
@@ -141,7 +141,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the items indexed event.
    *
-   * @param \Drupal\search_api\Event\ItemsIndexedEvent $event
+   * @param ItemsIndexedEvent $event
    *   The items indexed event.
    */
   public function itemsIndexed(ItemsIndexedEvent $event) {
@@ -151,7 +151,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the parse mode info alter event.
    *
-   * @param \Drupal\search_api\Event\GatheringPluginInfoEvent $event
+   * @param GatheringPluginInfoEvent $event
    *   The parse mode plugin info alter event.
    */
   public function parseModeInfoAlter(GatheringPluginInfoEvent $event) {
@@ -164,7 +164,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the processor info alter event.
    *
-   * @param \Drupal\search_api\Event\GatheringPluginInfoEvent $event
+   * @param GatheringPluginInfoEvent $event
    *   The processor plugin info alter event.
    */
   public function processorInfoAlter(GatheringPluginInfoEvent $event) {
@@ -175,7 +175,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the query alter event.
    *
-   * @param \Drupal\search_api\Event\QueryPreExecuteEvent $event
+   * @param QueryPreExecuteEvent $event
    *   The query alter event.
    */
   public function queryAlter(QueryPreExecuteEvent $event) {
@@ -188,7 +188,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the query TAG alter event.
    *
-   * @param \Drupal\search_api\Event\QueryPreExecuteEvent $event
+   * @param QueryPreExecuteEvent $event
    *   The query alter event.
    */
   public function queryTagAlter(QueryPreExecuteEvent $event) {
@@ -211,7 +211,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the reindex event.
    *
-   * @param \Drupal\search_api\Event\ReindexScheduledEvent $event
+   * @param ReindexScheduledEvent $event
    *   The reindex index event.
    */
   public function reindex(ReindexScheduledEvent $event) {
@@ -221,7 +221,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the results alter event.
    *
-   * @param \Drupal\search_api\Event\ProcessingResultsEvent $event
+   * @param ProcessingResultsEvent $event
    *   The results alter event.
    */
   public function resultsAlter(ProcessingResultsEvent $event) {
@@ -231,7 +231,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the results TAG alter event.
    *
-   * @param \Drupal\search_api\Event\ProcessingResultsEvent $event
+   * @param ProcessingResultsEvent $event
    *   The results alter event.
    */
   public function resultsTagAlter(ProcessingResultsEvent $event) {
@@ -241,7 +241,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the server features alter event.
    *
-   * @param \Drupal\search_api\Event\DeterminingServerFeaturesEvent $event
+   * @param DeterminingServerFeaturesEvent $event
    *   The server features alter event.
    */
   public function serverFeaturesAlter(DeterminingServerFeaturesEvent $event) {
@@ -255,7 +255,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Reacts to the tracker info alter event.
    *
-   * @param \Drupal\search_api\Event\GatheringPluginInfoEvent $event
+   * @param GatheringPluginInfoEvent $event
    *   The tracker plugin info alter event.
    */
   public function trackerInfoAlter(GatheringPluginInfoEvent $event) {
diff --git a/tests/modules/search_api_test_extraction/src/Plugin/search_api/processor/SoulMate.php b/tests/modules/search_api_test_extraction/src/Plugin/search_api/processor/SoulMate.php
index 73d3b0ad..3f5852b2 100644
--- a/tests/modules/search_api_test_extraction/src/Plugin/search_api/processor/SoulMate.php
+++ b/tests/modules/search_api_test_extraction/src/Plugin/search_api/processor/SoulMate.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_test_extraction\Plugin\search_api\processor;
 
+use Drupal\search_api\Item\FieldInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\search_api\Datasource\DatasourceInterface;
@@ -32,14 +33,14 @@ class SoulMate extends ProcessorPluginBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
   /**
    * The fields helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface|null
+   * @var FieldsHelperInterface|null
    */
   protected $fieldsHelper;
 
@@ -59,7 +60,7 @@ class SoulMate extends ProcessorPluginBase {
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ -69,7 +70,7 @@ class SoulMate extends ProcessorPluginBase {
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
@@ -82,7 +83,7 @@ class SoulMate extends ProcessorPluginBase {
   /**
    * Retrieves the fields helper.
    *
-   * @return \Drupal\search_api\Utility\FieldsHelperInterface
+   * @return FieldsHelperInterface
    *   The fields helper.
    */
   public function getFieldsHelper() {
@@ -92,7 +93,7 @@ class SoulMate extends ProcessorPluginBase {
   /**
    * Sets the fields helper.
    *
-   * @param \Drupal\search_api\Utility\FieldsHelperInterface $fields_helper
+   * @param FieldsHelperInterface $fields_helper
    *   The new fields helper.
    *
    * @return $this
@@ -150,7 +151,7 @@ class SoulMate extends ProcessorPluginBase {
       return;
     }
 
-    /** @var \Drupal\search_api\Item\FieldInterface[][] $to_extract */
+    /** @var FieldInterface[][] $to_extract */
     $to_extract = [];
     foreach ($item->getFields() as $field) {
       if (!$field->getDatasourceId()) {
diff --git a/tests/modules/search_api_test_tasks/src/TestTaskWorker.php b/tests/modules/search_api_test_tasks/src/TestTaskWorker.php
index 91a4b582..79e6c221 100644
--- a/tests/modules/search_api_test_tasks/src/TestTaskWorker.php
+++ b/tests/modules/search_api_test_tasks/src/TestTaskWorker.php
@@ -15,7 +15,7 @@ class TestTaskWorker implements EventSubscriberInterface {
   /**
    * The Search API task manager.
    *
-   * @var \Drupal\search_api\Task\TaskManagerInterface
+   * @var TaskManagerInterface
    */
   protected $taskManager;
 
@@ -40,7 +40,7 @@ class TestTaskWorker implements EventSubscriberInterface {
   /**
    * Constructs an IndexTaskManager object.
    *
-   * @param \Drupal\search_api\Task\TaskManagerInterface $task_manager
+   * @param TaskManagerInterface $task_manager
    *   The Search API task manager.
    */
   public function __construct(TaskManagerInterface $task_manager) {
@@ -50,7 +50,7 @@ class TestTaskWorker implements EventSubscriberInterface {
   /**
    * Handles a task event successfully.
    *
-   * @param \Drupal\search_api\Task\TaskEvent $event
+   * @param TaskEvent $event
    *   The task event.
    */
   public function success(TaskEvent $event) {
@@ -61,7 +61,7 @@ class TestTaskWorker implements EventSubscriberInterface {
   /**
    * Handles a task event with an exception.
    *
-   * @param \Drupal\search_api\Task\TaskEvent $event
+   * @param TaskEvent $event
    *   The task event.
    */
   public function fail(TaskEvent $event) {
@@ -74,7 +74,7 @@ class TestTaskWorker implements EventSubscriberInterface {
   /**
    * Ignores a task event.
    *
-   * @param \Drupal\search_api\Task\TaskEvent $event
+   * @param TaskEvent $event
    *   The task event.
    */
   public function ignore(TaskEvent $event) {
@@ -95,7 +95,7 @@ class TestTaskWorker implements EventSubscriberInterface {
   /**
    * Logs an event.
    *
-   * @param \Drupal\search_api\Task\TaskEvent $event
+   * @param TaskEvent $event
    *   The event.
    */
   protected function logEvent(TaskEvent $event) {
diff --git a/tests/modules/search_api_test_views/src/EventListener.php b/tests/modules/search_api_test_views/src/EventListener.php
index 5eff1dda..90dab9ca 100644
--- a/tests/modules/search_api_test_views/src/EventListener.php
+++ b/tests/modules/search_api_test_views/src/EventListener.php
@@ -16,14 +16,14 @@ class EventListener implements EventSubscriberInterface {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(MessengerInterface $messenger) {
diff --git a/tests/src/Functional/AddServerFormTest.php b/tests/src/Functional/AddServerFormTest.php
index 79cdeb19..df0ea3fb 100644
--- a/tests/src/Functional/AddServerFormTest.php
+++ b/tests/src/Functional/AddServerFormTest.php
@@ -30,7 +30,7 @@ class AddServerFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create the users used for the tests.
diff --git a/tests/src/Functional/CacheabilityTest.php b/tests/src/Functional/CacheabilityTest.php
index 654e7e9b..75752884 100644
--- a/tests/src/Functional/CacheabilityTest.php
+++ b/tests/src/Functional/CacheabilityTest.php
@@ -29,7 +29,7 @@ class CacheabilityTest extends SearchApiBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Set up example structure and content and populate the test index with
diff --git a/tests/src/Functional/ConfigOverrideIntegrationTest.php b/tests/src/Functional/ConfigOverrideIntegrationTest.php
index 4f595cad..a04b1f32 100644
--- a/tests/src/Functional/ConfigOverrideIntegrationTest.php
+++ b/tests/src/Functional/ConfigOverrideIntegrationTest.php
@@ -17,7 +17,7 @@ class ConfigOverrideIntegrationTest extends SearchApiBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Set up overrides.
