diff --git a/contact_storage_export.info.yml b/contact_storage_export.info.yml
index e1e1837..1462478 100644
--- a/contact_storage_export.info.yml
+++ b/contact_storage_export.info.yml
@@ -1,8 +1,7 @@
 name: Contact Storage Export
 type: module
 description: Provides a way to export Contact Form submissions to CSV.
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - drupal:contact
   - contact_storage:contact_storage
diff --git a/src/ContactStorageExportBatches.php b/src/ContactStorageExportBatches.php
index ada4195..b713640 100644
--- a/src/ContactStorageExportBatches.php
+++ b/src/ContactStorageExportBatches.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\contact_storage_export;
 
+use Drupal\file\FileInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\contact\MessageInterface;
+use Drupal\Core\TempStore\TempStoreException;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Url;
 use Drupal\contact\Entity\Message;
@@ -17,7 +21,7 @@ class ContactStorageExportBatches {
   /**
    * The temp file.
    *
-   * @var null|\Drupal\file\FileInterface
+   * @var null|FileInterface
    */
   protected static $tempFile = NULL;
 
@@ -29,7 +33,7 @@ class ContactStorageExportBatches {
    * @param array $context
    *   The batch context.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function processBatch(array $settings, array &$context) {
     if (empty($context['sandbox'])) {
@@ -139,13 +143,13 @@ class ContactStorageExportBatches {
    * @param array $context
    *   The batch context.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private static function prepareMessages(array $messages, array $settings, array &$context) {
-    /** @var \Drupal\contact_storage_export\ContactStorageExportService $exporter */
+    /** @var ContactStorageExportService $exporter */
     $exporter = \Drupal::service('contact_storage_export.exporter');
 
-    /** @var \Drupal\contact\MessageInterface $message */
+    /** @var MessageInterface $message */
     $message = reset($messages);
 
     // Prepare message labels.
@@ -186,10 +190,10 @@ class ContactStorageExportBatches {
    * @param array $operations
    *   The batch operations.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirection.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public static function finishBatch($success, array $results, array $operations) {
     if ($success) {
@@ -235,10 +239,10 @@ class ContactStorageExportBatches {
   /**
    * Get the temp file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The temporary file.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected static function getTempFile() {
     if (!self::$tempFile) {
@@ -250,10 +254,10 @@ class ContactStorageExportBatches {
   /**
    * Create the temporary file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected static function createTempFile() {
     // Get file temp name.
@@ -277,7 +281,7 @@ class ContactStorageExportBatches {
    * @param string $data
    *   The data to add to the file.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected static function writeToTempFile($data) {
     $file = self::getTempFile();
diff --git a/src/ContactStorageExportService.php b/src/ContactStorageExportService.php
index f3004c8..acdd887 100644
--- a/src/ContactStorageExportService.php
+++ b/src/ContactStorageExportService.php
@@ -22,23 +22,23 @@ class ContactStorageExportService implements ContainerInjectionInterface {
   /**
    * The CSV encoder.
    *
-   * @var \Drupal\csv_serialization\Encoder\CsvEncoder
+   * @var CsvEncoder
    */
   protected $csvEncoder;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Creates a new ContactStorageExportService object.
    *
-   * @param \Drupal\csv_serialization\Encoder\CsvEncoder $csv_encoder
+   * @param CsvEncoder $csv_encoder
    *   The CSV encoder.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(CsvEncoder $csv_encoder, RendererInterface $renderer) {
@@ -59,7 +59,7 @@ class ContactStorageExportService implements ContainerInjectionInterface {
   /**
    * Returns a serialized message.
    *
-   * @param \Drupal\contact\MessageInterface $message
+   * @param MessageInterface $message
    *   The message to serialize.
    * @param string[] $settings
    *   (optional) A settings array containing:
@@ -97,7 +97,7 @@ class ContactStorageExportService implements ContainerInjectionInterface {
   /**
    * Formats values of the given field.
    *
-   * @param \Drupal\contact\MessageInterface $message
+   * @param MessageInterface $message
    *   A message entity.
    * @param string $field
    *   A field name.
@@ -114,11 +114,11 @@ class ContactStorageExportService implements ContainerInjectionInterface {
     $values = [];
 
     // Iterate over field items and format its values.
-    /** @var \Drupal\Core\Field\FieldItemInterface $item */
+    /** @var FieldItemInterface $item */
     foreach ($message->$field as $item) {
       switch ($type) {
         case 'link':
-          /** @var \Drupal\link\LinkItemInterface $item */
+          /** @var LinkItemInterface $item */
           $values[] = $this->formatLink($item);
           break;
 
@@ -131,7 +131,7 @@ class ContactStorageExportService implements ContainerInjectionInterface {
           break;
 
         case 'entity_reference':
-          /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $item */
+          /** @var EntityReferenceItem $item */
           $values[] = $this->formatEntityReference($item, $storage_definition->getMainPropertyName());
           break;
 
@@ -148,7 +148,7 @@ class ContactStorageExportService implements ContainerInjectionInterface {
   /**
    * Returns an absolute URL as a string value.
    *
-   * @param \Drupal\link\LinkItemInterface $link_item
+   * @param LinkItemInterface $link_item
    *   The link item to format.
    *
    * @return string
@@ -174,7 +174,7 @@ class ContactStorageExportService implements ContainerInjectionInterface {
   /**
    * Formats a date-time field item with a given format.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   Afield item to format.
    * @param string $format
    *   A date format. Defaults to short format (m/d/Y - H:i).
@@ -206,7 +206,7 @@ class ContactStorageExportService implements ContainerInjectionInterface {
   /**
    * Formats entity reference value.
    *
-   * @param \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $entity_reference_item
+   * @param EntityReferenceItem $entity_reference_item
    *   The entity reference item.
    * @param string $property
    *   The main property.
@@ -231,7 +231,7 @@ class ContactStorageExportService implements ContainerInjectionInterface {
   /**
    * Returns labels from the field definitions.
    *
-   * @param \Drupal\contact\MessageInterface $message
+   * @param MessageInterface $message
    *   A contact message object to get labels for.
    *
    * @return array
@@ -253,7 +253,7 @@ class ContactStorageExportService implements ContainerInjectionInterface {
   /**
    * Returns the encoded contact messages.
    *
-   * @param \Drupal\contact\MessageInterface[] $messages
+   * @param MessageInterface[] $messages
    *   The messages.
    * @param string[] $settings
    *   The settings array.
diff --git a/src/ContactStorageExportTempstore.php b/src/ContactStorageExportTempstore.php
index 7cded5f..9f8940e 100644
--- a/src/ContactStorageExportTempstore.php
+++ b/src/ContactStorageExportTempstore.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\contact_storage_export;
 
+use Drupal\Core\TempStore\TempStoreException;
+use Drupal\Core\Tempstore\PrivateTempStore;
 /**
  * Class ContactStorageExportTempstore.
  *
@@ -20,10 +22,10 @@ class ContactStorageExportTempstore {
    * @return int|mixed
    *   The tempstore key.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public static function setTempstore($fid, $filename) {
-    /** @var \Drupal\Core\Tempstore\PrivateTempStore $tempstore */
+    /** @var PrivateTempStore $tempstore */
     $tempstore = \Drupal::service('tempstore.private')
       ->get('contact_storage_export');
 
diff --git a/src/Form/ContactStorageExportForm.php b/src/Form/ContactStorageExportForm.php
index a129e91..fa00306 100644
--- a/src/Form/ContactStorageExportForm.php
+++ b/src/Form/ContactStorageExportForm.php
@@ -42,7 +42,7 @@ class ContactStorageExportForm extends FormBase {
    *   The machine name of the contact form.
    * @param array $form
    *   The Drupal form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ -134,7 +134,7 @@ class ContactStorageExportForm extends FormBase {
    *
    * @param array $form
    *   The Drupal form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ -224,7 +224,7 @@ class ContactStorageExportForm extends FormBase {
   public function submitForm(array &$form, FormStateInterface $form_state) {
 
     // Path to the batch processing.
-    $path = drupal_get_path('module', 'contact_storage_export');
+    $path = \Drupal::service('extension.list.module')->getPath('contact_storage_export');
     $path .= '/src/ContactStorageExportBatches.php';
 
     // Information to pass to the batch processing.
@@ -251,7 +251,7 @@ class ContactStorageExportForm extends FormBase {
    * @param int $since_last_id
    *   Function getSingleMessage integer since_last_id.
    *
-   * @return bool|\Drupal\contact\Entity\Message
+   * @return bool|Message
    *   False or a single contact_message entity.
    */
   protected function getSingleMessage($contact_form, $since_last_id = 0) {
diff --git a/tests/src/Kernel/ContactStorageExportBrowserTest.php b/tests/src/Kernel/ContactStorageExportBrowserTest.php
index 6f706a7..516f1a4 100644
--- a/tests/src/Kernel/ContactStorageExportBrowserTest.php
+++ b/tests/src/Kernel/ContactStorageExportBrowserTest.php
@@ -63,9 +63,12 @@ class ContactStorageExportBrowserTest extends BrowserTestBase {
       'columns[id]' => 1,
       'filename' => 'test.csv',
     ];
-    $this->drupalPostForm(NULL, [], t('Export'));
+    $this->submitForm([], t('Export'));
     $this->drupalGet("admin/structure/contact/manage/export-download/$contact_form_id/0");
-    $this->assertText(t('Your export is ready for download.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Your export is ready for download.'));
   }
 
 }
diff --git a/tests/src/Kernel/ContactStorageExportServiceKernelTest.php b/tests/src/Kernel/ContactStorageExportServiceKernelTest.php
index 7ce5c56..53c98a9 100644
--- a/tests/src/Kernel/ContactStorageExportServiceKernelTest.php
+++ b/tests/src/Kernel/ContactStorageExportServiceKernelTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\contact_storage_export\Kernel;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\contact\Entity\ContactForm;
 use Drupal\contact\Entity\Message;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ -36,7 +37,7 @@ class ContactStorageExportServiceKernelTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('contact_message');
     $this->installEntitySchema('user');
@@ -46,7 +47,7 @@ class ContactStorageExportServiceKernelTest extends KernelTestBase {
   /**
    * Tests contact storage export.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException]
+   * @throws EntityStorageException ]
    */
   public function testContactStorageExport() {
     // Create a sample form.
@@ -137,7 +138,7 @@ class ContactStorageExportServiceKernelTest extends KernelTestBase {
    * @param array $instance_configuration
    *   (optional) Field instance configuration.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function addField($name, $type, $bundle, array $storage_configuration = [], array $instance_configuration = []) {
     $field_storage = FieldStorageConfig::create([
