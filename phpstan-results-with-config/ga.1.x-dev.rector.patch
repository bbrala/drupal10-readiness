diff --git a/ga.module b/ga.module
index 953c4ed..fc37cb4 100644
--- a/ga.module
+++ b/ga.module
@@ -18,7 +18,7 @@ function ga_page_attachments(array &$attachments) {
     return;
   }
 
-  /** @var \Drupal\ga\Event\CollectEvent $event */
+  /** @var CollectEvent $event */
   $event = \Drupal::service('event_dispatcher')
     ->dispatch(AnalyticsEvents::COLLECT, new CollectEvent());
 
diff --git a/modules/ga_tokens/src/EventSubscriber/AnalyticsSubscriber.php b/modules/ga_tokens/src/EventSubscriber/AnalyticsSubscriber.php
index a69001f..e69160c 100644
--- a/modules/ga_tokens/src/EventSubscriber/AnalyticsSubscriber.php
+++ b/modules/ga_tokens/src/EventSubscriber/AnalyticsSubscriber.php
@@ -18,14 +18,14 @@ class AnalyticsSubscriber implements EventSubscriberInterface {
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
@@ -43,9 +43,9 @@ class AnalyticsSubscriber implements EventSubscriberInterface {
   /**
    * DefaultCommandSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The Token service.
    */
   public function __construct(
@@ -59,7 +59,7 @@ class AnalyticsSubscriber implements EventSubscriberInterface {
   /**
    * Add global dimensions and metrics.
    *
-   * @param \Drupal\ga\Event\CollectEvent $event
+   * @param CollectEvent $event
    *   The AnalyticsEvents::COLLECT event.
    */
   public function onCollectGlobalProperties(CollectEvent $event) {
diff --git a/modules/ga_tokens/src/Form/GlobalForm.php b/modules/ga_tokens/src/Form/GlobalForm.php
index 39feb6c..82f43f9 100644
--- a/modules/ga_tokens/src/Form/GlobalForm.php
+++ b/modules/ga_tokens/src/Form/GlobalForm.php
@@ -16,16 +16,16 @@ class GlobalForm extends ConfigFormBase {
   /**
    * The Module Handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
   /**
    * GlobalForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Config Factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The Module Handler service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $moduleHandler) {
diff --git a/src/AnalyticsCommand/Group.php b/src/AnalyticsCommand/Group.php
index 13c73e7..fa36175 100644
--- a/src/AnalyticsCommand/Group.php
+++ b/src/AnalyticsCommand/Group.php
@@ -52,7 +52,7 @@ class Group implements DrupalSettingCommandsInterface, GroupInterface, \Iterator
   /**
    * Add a command to the group.
    *
-   * @param \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface $command
+   * @param DrupalSettingCommandsInterface $command
    *   A command.
    */
   public function addCommand(DrupalSettingCommandsInterface $command) {
diff --git a/src/CommandRegistryService.php b/src/CommandRegistryService.php
index 6a56961..d7f1627 100644
--- a/src/CommandRegistryService.php
+++ b/src/CommandRegistryService.php
@@ -12,7 +12,7 @@ class CommandRegistryService {
   /**
    * The registered analytics commands.
    *
-   * @var \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface[]
+   * @var DrupalSettingCommandsInterface[]
    */
   protected $commands;
 
@@ -26,7 +26,7 @@ class CommandRegistryService {
   /**
    * Add a command to the registry.
    *
-   * @param \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface $command
+   * @param DrupalSettingCommandsInterface $command
    *   An analytics command.
    *
    * @deprecated Use addCommand() instead.
@@ -38,7 +38,7 @@ class CommandRegistryService {
   /**
    * Add a command to the registry.
    *
-   * @param \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface $command
+   * @param DrupalSettingCommandsInterface $command
    *   An analytics command.
    */
   public function addCommand(DrupalSettingCommandsInterface $command) {
@@ -48,7 +48,7 @@ class CommandRegistryService {
   /**
    * Get all commands registered.
    *
-   * @return \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface[]
+   * @return DrupalSettingCommandsInterface[]
    *   The array of registered commands.
    */
   public function getCommands() {
diff --git a/src/Event/CollectEvent.php b/src/Event/CollectEvent.php
index 136e614..b2b2154 100644
--- a/src/Event/CollectEvent.php
+++ b/src/Event/CollectEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\ga\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class CollectEvent.
@@ -13,7 +13,7 @@ class CollectEvent extends Event {
   /**
    * The registered analytics commands.
    *
-   * @var \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface[]
+   * @var DrupalSettingCommandsInterface[]
    */
   protected $commands;
 
@@ -27,7 +27,7 @@ class CollectEvent extends Event {
   /**
    * Add a command.
    *
-   * @param \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface $command
+   * @param DrupalSettingCommandsInterface $command
    *   An analytics command.
    */
   public function addCommand(DrupalSettingCommandsInterface $command) {
diff --git a/src/EventSubscriber/DefaultCommandSubscriber.php b/src/EventSubscriber/DefaultCommandSubscriber.php
index 53bdaa5..86091e8 100644
--- a/src/EventSubscriber/DefaultCommandSubscriber.php
+++ b/src/EventSubscriber/DefaultCommandSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ga\EventSubscriber;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -23,28 +24,28 @@ class DefaultCommandSubscriber implements EventSubscriberInterface {
   /**
    * The ga Command Registry service.
    *
-   * @var \Drupal\ga\CommandRegistryService
+   * @var CommandRegistryService
    */
   protected $commandRegistry;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * User Entity Storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;
 
@@ -63,13 +64,13 @@ class DefaultCommandSubscriber implements EventSubscriberInterface {
   /**
    * DefaultCommandSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
-   * @param \Drupal\ga\CommandRegistryService $commandRegistry
+   * @param CommandRegistryService $commandRegistry
    *   The command registry service.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(
@@ -87,7 +88,7 @@ class DefaultCommandSubscriber implements EventSubscriberInterface {
   /**
    * Add commands registered with the command registry service.
    *
-   * @param \Drupal\ga\Event\CollectEvent $event
+   * @param CollectEvent $event
    *   The AnalyticsEvents::COLLECT event.
    */
   public function onCollectRegisteredCommands(CollectEvent $event) {
@@ -99,7 +100,7 @@ class DefaultCommandSubscriber implements EventSubscriberInterface {
   /**
    * Add default events according to configuration.
    *
-   * @param \Drupal\ga\Event\CollectEvent $event
+   * @param CollectEvent $event
    *   The AnalyticsEvents::COLLECT event.
    */
   public function onCollectDefaultCommands(CollectEvent $event) {
diff --git a/tests/src/Unit/AnalyticsCommand/DimensionTest.php b/tests/src/Unit/AnalyticsCommand/DimensionTest.php
index b2fbba6..47c7675 100644
--- a/tests/src/Unit/AnalyticsCommand/DimensionTest.php
+++ b/tests/src/Unit/AnalyticsCommand/DimensionTest.php
@@ -31,28 +31,25 @@ class DimensionTest extends UnitTestCase {
 
   /**
    * Test an invalid index of type string.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testStringIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Dimension('index', 'value');
   }
 
   /**
    * Test an invalid index of type float.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testFloatIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Dimension(4.2, 'value');
   }
 
   /**
    * Test an index greater than the valid range.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testOutOfBoundsIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Dimension(420, 'value');
   }
 
diff --git a/tests/src/Unit/AnalyticsCommand/EventTest.php b/tests/src/Unit/AnalyticsCommand/EventTest.php
index b4fa86d..6036e30 100644
--- a/tests/src/Unit/AnalyticsCommand/EventTest.php
+++ b/tests/src/Unit/AnalyticsCommand/EventTest.php
@@ -83,33 +83,33 @@ class EventTest extends UnitTestCase {
   /**
    * Test with a float event value.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Event value must be a positive integer
    */
   public function testWithFloatValue() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Event value must be a positive integer');
     $command = new Event('category', 'action', NULL, 1.5);
   }
 
   /**
    * Test with a negative integer event value.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Event value must be a positive integer
    */
   public function testWithNegativeIntegerValue() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Event value must be a positive integer');
     $command = new Event('category', 'action', NULL, -1);
   }
 
   /**
    * Test with a string event value.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Event value must be a positive integer
    */
   public function testWithStringValue() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Event value must be a positive integer');
     $command = new Event('category', 'action', NULL, '1');
   }
 
diff --git a/tests/src/Unit/AnalyticsCommand/MetricTest.php b/tests/src/Unit/AnalyticsCommand/MetricTest.php
index 0ab91c1..6dadfda 100644
--- a/tests/src/Unit/AnalyticsCommand/MetricTest.php
+++ b/tests/src/Unit/AnalyticsCommand/MetricTest.php
@@ -44,37 +44,33 @@ class MetricTest extends UnitTestCase {
 
   /**
    * Test an invalid index of type string.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testStringIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric('index', 123);
   }
 
   /**
    * Test an invalid index of type float.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testFloatIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric(4.2, 123);
   }
 
   /**
    * Test an index greater than the valid range.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testOutOfBoundsIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric(420, 123);
   }
 
   /**
    * Test a string value.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testStringValue() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric(42, 'value');
   }
 
diff --git a/tests/src/Unit/AnalyticsCommand/SendTest.php b/tests/src/Unit/AnalyticsCommand/SendTest.php
index 109a78b..59ed167 100644
--- a/tests/src/Unit/AnalyticsCommand/SendTest.php
+++ b/tests/src/Unit/AnalyticsCommand/SendTest.php
@@ -32,11 +32,11 @@ class SendTest extends UnitTestCase {
   /**
    * Test specifying an invalid hit type.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Invalid hit type specified.
    */
   public function testInvalidHitType() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Invalid hit type specified.');
     $command = new Send('badtype');
   }
 
diff --git a/tests/src/Unit/EventSubscriber/CspSubscriberTest.php b/tests/src/Unit/EventSubscriber/CspSubscriberTest.php
index 494d961..a7dbae6 100644
--- a/tests/src/Unit/EventSubscriber/CspSubscriberTest.php
+++ b/tests/src/Unit/EventSubscriber/CspSubscriberTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ga\Unit\EventSubscriber;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\csp\Csp;
 use Drupal\csp\CspEvents;
@@ -21,23 +22,21 @@ class CspSubscriberTest extends UnitTestCase {
   /**
    * The response object.
    *
-   * @var \Drupal\Core\Render\HtmlResponse|\PHPUnit\Framework\MockObject\MockObject
+   * @var HtmlResponse|MockObject
    */
   private $response;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     if (!class_exists(Csp::class)) {
       $this->markTestSkipped('Content Security Policy module is not available.');
     }
 
-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);
   }
 
   /**
