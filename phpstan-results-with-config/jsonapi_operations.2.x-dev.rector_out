modules/contrib/jsonapi_operations/src/Controller/OperationsHandler.php
modules/contrib/jsonapi_operations/src/Exception/OperationException.php
modules/contrib/jsonapi_operations/src/Routing/Routes.php
modules/contrib/jsonapi_operations/tests/src/Functional/OperationsHandlerTransactionalTest.php
modules/contrib/jsonapi_operations/tests/src/Kernel/OperationsHandlerTest.php

3 files with changes
====================

1) modules/contrib/jsonapi_operations/tests/src/Kernel/OperationsHandlerTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
    */
   protected $operationHandler;

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Add the entity schemas.
@@ @@
     $this->assertEquals(200, $response->getStatusCode());
     $node = Node::load(count(static::$nodeUuid)+1);
     $this->assertNotNull($node);
-    $this->assertEqual('JSON:API', $node->getTitle());
+    $this->assertEquals('JSON:API', $node->getTitle());
   }

   function testUpdate(){
@@ @@
     $this->assertEquals(200, $response->getStatusCode());
     $node = Node::load(1);
     $this->assertNotNull($node);
-    $this->assertEqual('JSON:API Operations', $node->getTitle());
+    $this->assertEquals('JSON:API Operations', $node->getTitle());
   }

   function testDelete(){
@@ @@
     $this->assertEquals(200, $response->getStatusCode());
     $node = Node::load(count(static::$nodeUuid)+1);
     $this->assertNotNull($node);
-    $this->assertEqual('JSON:API', $node->getTitle());
+    $this->assertEquals('JSON:API', $node->getTitle());
     $node = Node::load(count(static::$nodeUuid)+2);
     $this->assertNotNull($node);
-    $this->assertEqual('GraphQL', $node->getTitle());
+    $this->assertEquals('GraphQL', $node->getTitle());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/jsonapi_operations/tests/src/Functional/OperationsHandlerTransactionalTest.php:18

    ---------- begin diff ----------
@@ @@
     'jsonapi_operations',
   ];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->grantPermissions(Role::load(RoleInterface::ANONYMOUS_ID), [
       'create article content',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/jsonapi_operations/src/Controller/OperationsHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_operations\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Url;
 use Drupal\jsonapi\JsonApiResource\ErrorCollection;
@@ @@
  */
 class OperationsHandler {

-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface */
+  /** @var EntityTypeManagerInterface */
   protected $entityTypeManager;

-  /** @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface */
+  /** @var ResourceTypeRepositoryInterface */
   protected $resourceTypeRepository;

-  /** @var \Drupal\Core\Database\Connection */
+  /** @var Connection */
   protected $databaseConnection;

-  /** @var \Symfony\Component\HttpKernel\HttpKernelInterface */
+  /** @var HttpKernelInterface */
   protected $httpKernel;

   /**
    * Construct a new OperationsHandler.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   the Drupal entity type manager
    * @param $resourceTypeRepository
    *   the JSON:API resource type repository
@@ @@
   /**
    * Handles JSON:API Operations incoming HTTP requests.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   the HTTP request
    *
-   * @return \Drupal\jsonapi\ResourceResponse|\Symfony\Component\HttpFoundation\Response
+   * @return ResourceResponse|Response
    *   the HTTP response
    */
   function handleOperations(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 3 files have been changed by Rector                                       

