modules/contrib/micon/micon.module
modules/contrib/micon/micon.theme.inc
modules/contrib/micon/micon_content_type/micon_content_type.module
modules/contrib/micon/micon_content_type/src/MiconContentTypeListBuilder.php
modules/contrib/micon/micon_link/micon_link.module
modules/contrib/micon/micon_link/src/Plugin/Field/FieldFormatter/MiconLinkFormatter.php
modules/contrib/micon/micon_link/src/Plugin/Field/FieldWidget/MiconLinkWidget.php
modules/contrib/micon/micon_link/src/Plugin/Field/FieldWidget/MiconLinkWidgetTrait.php
modules/contrib/micon/micon_linkit/micon_linkit.module
modules/contrib/micon/micon_linkit/src/Plugin/Field/FieldWidget/MiconLinkitWidget.php
modules/contrib/micon/micon_local_task/micon_local_task.module
modules/contrib/micon/micon_local_task/src/Form/MiconLocalTaskConfigForm.php
modules/contrib/micon/micon_menu/micon_menu.module
modules/contrib/micon/micon_menu/src/Form/MiconMenuConfigForm.php
modules/contrib/micon/micon_menu/src/MiconLoginLogoutMenuLink.php
modules/contrib/micon/micon_menu/src/MiconMenuLinkDefault.php
modules/contrib/micon/micon_menu/src/MiconMenuLinkManager.php
modules/contrib/micon/micon_menu/src/MiconMenuServiceProvider.php
modules/contrib/micon/micon_menu/src/MiconStaticMenuLinkOverrides.php
modules/contrib/micon/micon_menu/src/Plugin/Field/FieldWidget/MiconMenuWidget.php
modules/contrib/micon/micon_paragraphs/micon_paragraphs.module
modules/contrib/micon/micon_paragraphs/src/MiconParagraphsTypeListBuilder.php
modules/contrib/micon/micon_vocabulary/micon_vocabulary.module
modules/contrib/micon/src/Commands/MiconCommands.php
modules/contrib/micon/src/Element/Micon.php
modules/contrib/micon/src/Entity/Micon.php
modules/contrib/micon/src/Entity/MiconInterface.php
modules/contrib/micon/src/Form/MiconDeleteForm.php
modules/contrib/micon/src/Form/MiconForm.php
modules/contrib/micon/src/MiconDiscoveryManager.php
modules/contrib/micon/src/MiconHtmlRouteProvider.php
modules/contrib/micon/src/MiconIcon.php
modules/contrib/micon/src/MiconIconInterface.php
modules/contrib/micon/src/MiconIconManager.php
modules/contrib/micon/src/MiconIconize.php
modules/contrib/micon/src/MiconIconizeTrait.php
modules/contrib/micon/src/MiconListBuilder.php
modules/contrib/micon/src/MiconViewBuilder.php
modules/contrib/micon/src/Plugin/Field/FieldFormatter/EntityReferenceMiconFormatter.php
modules/contrib/micon/src/Plugin/Field/FieldFormatter/FileMiconFormatter.php
modules/contrib/micon/src/Plugin/Field/FieldFormatter/StringMiconFormatter.php
modules/contrib/micon/src/Plugin/Field/FieldType/StringMiconItem.php
modules/contrib/micon/src/Plugin/Field/FieldWidget/StringMiconWidget.php
modules/contrib/micon/src/Plugin/SocialMediaLinks/Iconset/Micon.php
modules/contrib/micon/src/TwigExtension/Micon.php
modules/contrib/micon/tests/src/Functional/MiconFunctionalTest.php

20 files with changes
=====================

1) modules/contrib/micon/tests/src/Functional/MiconFunctionalTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\micon\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A user with authenticated permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;

@@ @@
   /**
    * A user with admin permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/micon/src/Plugin/Field/FieldFormatter/StringMiconFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micon\Plugin\Field\FieldFormatter;

+use Drupal\micon\MiconIcon;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
-   * @return \Drupal\micon\MiconIcon|null
+   * @return MiconIcon|null
    *   The Micon icon matching the icon_id.
    */
   protected function viewIcon(FieldItemInterface $item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/micon/src/Plugin/Field/FieldFormatter/FileMiconFormatter.php:116

    ---------- begin diff ----------
@@ @@

     foreach ($this->getEntitiesToView($items, $langcode) as $delta => $file) {
       $item = $file->_referringItem;
-      $url = file_create_url($file->getFileUri());
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
       $options = [];
       if ($this->getSetting('target')) {
         $options['attributes']['target'] = '_blank';
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/micon/src/MiconListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micon;

+use Drupal\micon\Entity\Micon;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\micon\Entity\Micon $entity */
+    /** @var Micon $entity */
     $preview = [];
     if ($icons = $entity->getIcons()) {
       $count = count($icons) >= 12 ? 12 : count($icons);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/micon/src/MiconIconizeTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micon;

+use Drupal\Core\Render\Markup;
 use Drupal\Core\StringTranslation\TranslationInterface;

 /**
@@ @@
    *   - 'context' (defaults to the empty context): The context the source
    *     string belongs to.
    *
-   * @return \Drupal\Core\Render\Markup
+   * @return Markup
    *   An object that, when cast to a string, returns the icon markup and
    *   translated string.
    *
@@ @@
   /**
    * Gets the string translation service.
    *
-   * @return \Drupal\Core\StringTranslation\TranslationInterface
+   * @return TranslationInterface
    *   The string translation service.
    */
   protected function getMiconStringTranslation() {
@@ @@
   /**
    * Sets the string translation service to use.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation service.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/micon/src/MiconIconize.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micon;

+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ @@
   /**
    * The Micon icon management service.
    *
-   * @var \Drupal\micon\MiconIconManager
+   * @var MiconIconManager
    */
   protected $miconDiscoveryManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The MiconIcon object.
    *
-   * @var \Drupal\micon\MiconIcon|null
+   * @var MiconIcon|null
    */
   protected $icon;

@@ @@
    * @param bool $force_match
    *   Force a match lookup even if $this->icon is already set.
    *
-   * @return \Drupal\micon\MiconIcon|null
+   * @return MiconIcon|null
    *   The MiconIcon if found, else null.
    */
   public function getIcon($force_match = FALSE) {
@@ @@
    *   A string that will be used to search through the icon definitions as well
    *   as the Micon icons to return a confirmed match.
    *
-   * @return \Drupal\micon\MiconIcon|null
+   * @return MiconIcon|null
    *   The MiconIcon if found, else null.
    */
   public function getMatch($string) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/micon/src/MiconIconManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micon;

+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Component\Assertion\Inspector;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityManager;

@@ @@
    * @param string $icon_id
    *   The icon id as specified within the IcoMoon selection.json file.
    *
-   * @return \Drupal\micon\MiconIcon|null
+   * @return MiconIcon|null
    *   The found MiconIcon.
    */
   public function getIconMatch($icon_id) {
@@ @@
    * Plugin icons are cached using the provided cache backend. The
    * interface language is added as a suffix to the cache key.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
    * @param string $cache_key
    *   Cache key prefix to use, the language code will be appended
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/micon/src/MiconIconInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micon;

+use Drupal\Core\Render\Markup;
 /**
  * Defines an object which can be rendered by the Render API.
  */
@@ @@
   /**
    * Returns a fully rendered Markup representation of the object.
    *
-   * @return \Drupal\Core\Render\Markup
+   * @return Markup
    *   A Markup object.
    */
   public function toMarkup();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/micon/src/MiconIcon.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The Attribute object.
    *
-   * @var \Drupal\Core\Template\Attribute
+   * @var Attribute
    */
   protected $attributes;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/micon/src/MiconHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/micon/src/MiconDiscoveryManager.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Constructs a MiconDiscoveryManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, CacheBackendInterface $cache_backend) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/micon/src/Form/MiconForm.php:76

    ---------- begin diff ----------
@@ @@
    *   The micon updated with the submitted values.
    * @param array $form
    *   The complete form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see \Drupal\micon\MiconForm::form()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/micon/src/Entity/Micon.php:164

    ---------- begin diff ----------
@@ @@

         $icon['tags'] = implode(",", $icon['icon']['tags']);
         $icon['prefix'] = $this->getPrefix();
-        $icon['directory'] = file_create_url($this->getDirectory());
+        $icon['directory'] = \Drupal::service('file_url_generator')->generateAbsoluteString($this->getDirectory());
         $icon['package_id'] = $this->id();
         $icon['package_label'] = $this->label();
         $micon_icon = new MiconIcon($this->type(), $icon);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/micon/src/Element/Micon.php:57

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/micon/src/Commands/MiconCommands.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The Micon icon manager.
    *
-   * @var \Drupal\micon\MiconIconManager
+   * @var MiconIconManager
    */
   protected $miconIconManager;

@@ @@
   /**
    * Constructs a new MiconCommands object.
    *
-   * @param \Drupal\micon\MiconIconManager $micon_icon_manager
+   * @param MiconIconManager $micon_icon_manager
    *   The active configuration storage.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/micon/micon_vocabulary/micon_vocabulary.module:16

    ---------- begin diff ----------
@@ @@
  * @see VocabularyForm::form()
  */
 function micon_vocabulary_form_taxonomy_vocabulary_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\taxonomy\VocabularyInterface $type */
+  /** @var VocabularyInterface $type */
   $type = $form_state->getFormObject()->getEntity();

   $form['icon'] = [
@@ @@
 /**
  * Helper function for retrieving the icon from a vocabulary.
  *
- * @var \Drupal\taxonomy\VocabularyInterface $type
+ * @var VocabularyInterface $type
  *   The taxonomy vocabulary.
  */
 function micon_vocabulary_icon(VocabularyInterface $type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


17) modules/contrib/micon/micon_paragraphs/micon_paragraphs.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Contains micon_paragraphs.module.
@@ @@
  * Implements hook_entity_type_alter().
  */
 function micon_paragraphs_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['paragraphs_type']->setListBuilderClass('Drupal\micon_paragraphs\MiconParagraphsTypeListBuilder');
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


18) modules/contrib/micon/micon_menu/micon_menu.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\menu_link_content\MenuLinkContentInterface;
 /**
  * @file
  * Contains micon_menu.module.
@@ @@
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  *
  * @see menu_ui_form_node_form_submit()
@@ @@
 /**
  * Helper function to create or update a menu link for a node.
  *
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   Node entity.
  * @param array $values
  *   Values for the menu link.
@@ @@
  * @see _menu_ui_node_save()
  */
 function _micon_menu_menu_ui_node_save(NodeInterface $node, array $values) {
-  /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
+  /** @var MenuLinkContentInterface $entity */
   if (!empty($values['entity_id'])) {
     $entity = MenuLinkContent::load($values['entity_id']);
     if ($entity->isTranslatable()) {
@@ @@
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function _micon_menu_form_menu_link_edit_alter_submit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


19) modules/contrib/micon/micon_link/src/Plugin/Field/FieldFormatter/MiconLinkFormatter.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/micon/micon_content_type/micon_content_type.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Contains micon_content_type.module.
@@ @@
  * @see menu_ui_form_node_type_form_submit()
  */
 function micon_content_type_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\node\NodeTypeInterface $type */
+  /** @var NodeTypeInterface $type */
   $type = $form_state->getFormObject()->getEntity();

   $form['icon'] = [
@@ @@
 /**
  * Helper function for retrieving the icon from a node type.
  *
- * @var \Drupal\node\NodeTypeInterface $type
+ * @var NodeTypeInterface $type
  *   The content type.
  */
 function micon_content_type_icon(NodeTypeInterface $type) {
@@ @@
  * Implements hook_entity_type_alter().
  */
 function micon_content_type_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['node_type']->setListBuilderClass('Drupal\micon_content_type\MiconContentTypeListBuilder');
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/micon/src/Plugin/SocialMediaLinks/Iconset/Micon.php"  
         file, due to:                                                          
         "Analyze error: "Class Drupal\social_media_links\IconsetBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/micon/micon_paragraphs/src/MiconParagraphsTypeListBuilde
         r.php" file, due to:                                                   
         "Analyze error: "Class                                                 
         Drupal\paragraphs\Controller\ParagraphsTypeListBuilder not found.".    
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/micon/micon_linkit/src/Plugin/Field/FieldWidget/MiconLin
         kitWidget.php" file, due to:                                           
         "Analyze error: "Class                                                 
         Drupal\linkit\Plugin\Field\FieldWidget\LinkitWidget not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

