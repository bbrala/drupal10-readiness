diff --git a/composer.json b/composer.json
index efdbd46..d9d9efd 100644
--- a/composer.json
+++ b/composer.json
@@ -4,7 +4,7 @@
   "type": "drupal-module",
   "require": {
     "galbar/jsonpath": "^1.0",
-    "drupal/core": "^8 || ^9"
+    "drupal/core": "^8 || ^9 || ^10"
   },
   "require-dev": {
     "justinrainbow/json-schema": "^5.2"
diff --git a/src/Blueprint/BlueprintManager.php b/src/Blueprint/BlueprintManager.php
index 2098706..3ea973d 100644
--- a/src/Blueprint/BlueprintManager.php
+++ b/src/Blueprint/BlueprintManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\subrequests\Blueprint;
 
+use Symfony\Component\Serializer\SerializerInterface;
 use Drupal\Core\Cache\CacheableResponse;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\subrequests\SubrequestsTree;
@@ -14,7 +15,7 @@ class BlueprintManager {
   /**
    * The deserializer.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;
 
@@ -28,10 +29,10 @@ class BlueprintManager {
    * @param string $input
    *   The input from the user.
    *
-   * @return \Drupal\subrequests\SubrequestsTree
+   * @return SubrequestsTree
    */
   public function parse($input, Request $request) {
-    /** @var \Drupal\subrequests\SubrequestsTree $output */
+    /** @var SubrequestsTree $output */
     $output = $this->serializer
       ->deserialize($input, SubrequestsTree::class, 'json');
     $output->setMasterRequest($request);
@@ -41,12 +42,12 @@ class BlueprintManager {
   }
 
   /**
-   * @param \Symfony\Component\HttpFoundation\Response[] $responses
+   * @param Response[] $responses
    *   The responses to combine.
    * @param string $format
    *   The format to combine the responses on. Default is multipart/related.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The combined response with a 207.
    */
   public function combineResponses(array $responses, $format) {
@@ -73,7 +74,7 @@ class BlueprintManager {
    * Checks if all responses have the same Content-Type header. If they do, then
    * it returns that one. If not, it defaults to 'application/json'.
    *
-   * @param \Symfony\Component\HttpFoundation\Response[] $responses
+   * @param Response[] $responses
    *   The responses.
    *
    * @return string
@@ -99,9 +100,9 @@ class BlueprintManager {
    *
    * @param string $name
    *   The header name to forward.
-   * @param \Symfony\Component\HttpFoundation\Request $from
+   * @param Request $from
    *   The request to copy headers from.
-   * @param \Drupal\subrequests\SubrequestsTree $tree
+   * @param SubrequestsTree $tree
    *   The target request to copy headers to.
    */
   protected function forwardHeader($name, Request $from, SubrequestsTree $tree) {
diff --git a/src/Controller/FrontController.php b/src/Controller/FrontController.php
index ae79339..75b2bca 100644
--- a/src/Controller/FrontController.php
+++ b/src/Controller/FrontController.php
@@ -17,12 +17,12 @@ use Symfony\Component\HttpKernel\HttpKernelInterface;
 class FrontController extends ControllerBase {
 
   /**
-   * @var \Drupal\subrequests\Blueprint\BlueprintManager
+   * @var BlueprintManager
    */
   protected $blueprintManager;
 
   /**
-   * @var \Drupal\subrequests\SubrequestsManager
+   * @var SubrequestsManager
    */
   protected $subrequestsManager;
 
diff --git a/src/JsonPathReplacer.php b/src/JsonPathReplacer.php
index f6fe863..0cc7cbb 100644
--- a/src/JsonPathReplacer.php
+++ b/src/JsonPathReplacer.php
@@ -12,12 +12,12 @@ class JsonPathReplacer {
   /**
    * Performs the JSON Path replacements in the whole batch.
    *
-   * @param \Drupal\subrequests\Subrequest[] $batch
+   * @param Subrequest[] $batch
    *   The subrequests that contain replacement tokens.
-   * @param \Symfony\Component\HttpFoundation\Response[] $responses
+   * @param Response[] $responses
    *   The accumulated responses from previous requests.
    *
-   * @return \Drupal\subrequests\Subrequest[]
+   * @return Subrequest[]
    *   An array of subrequests. Note that one input subrequest can generate N
    *   output subrequests. This is because JSON path expressinos can return
    *   multiple values.
@@ -35,9 +35,9 @@ class JsonPathReplacer {
    * Searches for JSONPath tokens in the request and replaces it with the values
    * from previous responses.
    *
-   * @param \Drupal\subrequests\Subrequest $subrequest
+   * @param Subrequest $subrequest
    *   The list of requests that can contain tokens.
-   * @param \Symfony\Component\HttpFoundation\Response[] $pool
+   * @param Response[] $pool
    *   The pool of responses that can content the values to replace.
    *
    * @returns \Drupal\subrequests\Subrequest[]
@@ -73,7 +73,7 @@ class JsonPathReplacer {
    *
    * @param array $token_replacements
    *   Holds the info to replace text.
-   * @param \Drupal\subrequests\Subrequest $tokenized_subrequest
+   * @param Subrequest $tokenized_subrequest
    *   The original copy of the subrequest.
    * @param string $token_location
    *   Either 'body' or 'uri'.
@@ -239,7 +239,7 @@ class JsonPathReplacer {
    * a response for the initial request, given a particular subject for a
    * particular JSONPath replacement.
    *
-   * @param \Drupal\subrequests\Subrequest $subrequest
+   * @param Subrequest $subrequest
    *   The subrequest that contains the tokens.
    * @param string $token_location
    *   Indicates if we are dealing with body or URI replacements.
@@ -305,7 +305,7 @@ class JsonPathReplacer {
    *
    * Removes all the derived indicators and the surrounding angles.
    *
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   The response to extract the Content ID from.
    *
    * @returns string
@@ -351,7 +351,7 @@ class JsonPathReplacer {
    *
    * @param array $match
    *   The structured replacement token.
-   * @param \Symfony\Component\HttpFoundation\Response $subject
+   * @param Response $subject
    *   The response object the token refers to.
    * @param array $token_replacements
    *   The accumulated replacements. Adds items onto the array.
@@ -378,7 +378,7 @@ class JsonPathReplacer {
    * @param array $to_replace
    *   The replacement candidates.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   When the replacements are not valid.
    */
   protected function validateJsonPathReplacements($to_replace) {
diff --git a/src/Normalizer/JsonBlueprintDenormalizer.php b/src/Normalizer/JsonBlueprintDenormalizer.php
index 32fe7cd..bbfa360 100644
--- a/src/Normalizer/JsonBlueprintDenormalizer.php
+++ b/src/Normalizer/JsonBlueprintDenormalizer.php
@@ -21,14 +21,14 @@ use Symfony\Component\Serializer\Serializer;
 class JsonBlueprintDenormalizer implements DenormalizerInterface, SerializerAwareInterface {
 
   /**
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
   /**
    * The Subrequests logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -37,7 +37,7 @@ class JsonBlueprintDenormalizer implements DenormalizerInterface, SerializerAwar
    *
    * This property will only be set if the validator library is available.
    *
-   * @var \JsonSchema\Validator|null
+   * @var Validator|null
    */
   protected $validator;
 
@@ -207,7 +207,7 @@ class JsonBlueprintDenormalizer implements DenormalizerInterface, SerializerAwar
    * executed. All the IDs in the same position in the sequence can be executed
    * in parallel.
    *
-   * @param \Drupal\subrequests\Subrequest[] $parsed
+   * @param Subrequest[] $parsed
    *   The parsed requests.
    *
    * @return SubrequestsTree
diff --git a/src/Normalizer/JsonSubrequestDenormalizer.php b/src/Normalizer/JsonSubrequestDenormalizer.php
index 75ef331..610f502 100644
--- a/src/Normalizer/JsonSubrequestDenormalizer.php
+++ b/src/Normalizer/JsonSubrequestDenormalizer.php
@@ -27,7 +27,7 @@ class JsonSubrequestDenormalizer implements DenormalizerInterface {
    * @return object
    */
   public function denormalize($data, $class, $format = NULL, array $context = []) {
-    /** @var \Drupal\subrequests\Subrequest $data */
+    /** @var Subrequest $data */
     $path = parse_url($data->uri, PHP_URL_PATH);
     $query = parse_url($data->uri, PHP_URL_QUERY) ?: [];
     if (isset($query) && !is_array($query)) {
@@ -36,7 +36,7 @@ class JsonSubrequestDenormalizer implements DenormalizerInterface {
       $query = $_query;
     }
 
-    /** @var \Symfony\Component\HttpFoundation\Request $master_request */
+    /** @var Request $master_request */
     $master_request = $context['master_request'];
 
     $request = Request::create(
@@ -121,7 +121,7 @@ class JsonSubrequestDenormalizer implements DenormalizerInterface {
   /**
    * Adds the decoded username and password headers for Basic Auth.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request to fix.
    */
   protected static function fixBasicAuth(Request $request) {
diff --git a/src/SubrequestsManager.php b/src/SubrequestsManager.php
index 460ee11..b87583d 100644
--- a/src/SubrequestsManager.php
+++ b/src/SubrequestsManager.php
@@ -12,21 +12,21 @@ class SubrequestsManager {
   /**
    * The kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $serializer;
 
   /**
    * The path replacer.
    *
-   * @var \Drupal\subrequests\JsonPathReplacer
+   * @var JsonPathReplacer
    */
   protected $replacer;
 
@@ -42,18 +42,18 @@ class SubrequestsManager {
   }
 
   /**
-   * Processes all the Subrequests until produce a collection of responses.
-   *
-   * @param \Drupal\subrequests\SubrequestsTree $tree
-   *   The request tree that contains the requesting structure.
-   * @param int $_sequence
-   *   (internal) The current index in the sequential chain.
-   * @param \Symfony\Component\HttpFoundation\Response[] $_responses
-   *   (internal) The list of responses accumulated so far.
-   *
-   * @return \Symfony\Component\HttpFoundation\Response[]
-   *   An array of responses when everything has been resolved.
-   */
+    * Processes all the Subrequests until produce a collection of responses.
+    *
+    * @param SubrequestsTree $tree
+    *   The request tree that contains the requesting structure.
+    * @param int $_sequence
+    *   (internal) The current index in the sequential chain.
+    * @param Response[] $_responses
+    *   (internal) The list of responses accumulated so far.
+    *
+    * @return Response[]
+    *   An array of responses when everything has been resolved.
+    */
    protected function processBatchesSequence($tree, $_sequence = 0, array $_responses = []) {
      $batch = $tree[$_sequence];
      // Perform all the necessary replacements for the elements in the batch.
@@ -61,7 +61,7 @@ class SubrequestsManager {
      $results = array_map(function (Subrequest $subrequest) use ($tree) {
        $master_request = $tree->getMasterRequest();
        // Create a Symfony Request object based on the Subrequest.
-       /** @var \Symfony\Component\HttpFoundation\Request $request */
+       /** @var Request $request */
        $request = $this->serializer->denormalize(
          $subrequest,
          Request::class,
diff --git a/src/SubrequestsTree.php b/src/SubrequestsTree.php
index 07edeec..ab07d1a 100644
--- a/src/SubrequestsTree.php
+++ b/src/SubrequestsTree.php
@@ -12,14 +12,14 @@ class SubrequestsTree extends \ArrayObject {
   /**
    * The master request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $masterRequest;
 
   /**
    * Adds a sequence of subrequests to the stack.
    *
-   * @param \Drupal\subrequests\Subrequest[] $subrequests
+   * @param Subrequest[] $subrequests
    */
   public function stack($subrequests) {
     // Make sure we only push Subrequest objects.
@@ -40,7 +40,7 @@ class SubrequestsTree extends \ArrayObject {
   /**
    * Gets the lowest level.
    *
-   * @return \Drupal\subrequests\Subrequest[]
+   * @return Subrequest[]
    *   The subrequests in the level.
    */
   public function getLowestLevel() {
@@ -48,11 +48,11 @@ class SubrequestsTree extends \ArrayObject {
   }
 
   /**
-   * Gets the master request.
-   *
-   * @return \Symfony\Component\HttpFoundation\Request $request
-   *   The request.
-   */
+  * Gets the master request.
+  *
+   * @return Request $request
+    The request.
+  */
   public function getMasterRequest() {
     return $this->masterRequest;
   }
@@ -60,7 +60,7 @@ class SubrequestsTree extends \ArrayObject {
   /**
    * Sets the master request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    */
   public function setMasterRequest(Request $request) {
@@ -70,7 +70,7 @@ class SubrequestsTree extends \ArrayObject {
   /**
    * Gets all the subrequest IDs.
    *
-   * @return \Drupal\subrequests\Subrequest[]
+   * @return Subrequest[]
    *   All the subrequests in all levels.
    */
   public function allIds() {
diff --git a/subrequests.info.yml b/subrequests.info.yml
index 0442e96..673bbe4 100644
--- a/subrequests.info.yml
+++ b/subrequests.info.yml
@@ -1,8 +1,7 @@
 name: Subrequests
 type: module
 description: 'Add a front controller that you can use to make subrequests.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 dependencies:
   - drupal:serialization
 package: Web services
diff --git a/tests/src/Unit/Blueprint/BlueprintManagerTest.php b/tests/src/Unit/Blueprint/BlueprintManagerTest.php
index 93c8397..9886715 100644
--- a/tests/src/Unit/Blueprint/BlueprintManagerTest.php
+++ b/tests/src/Unit/Blueprint/BlueprintManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\subrequests\Unit\Blueprint;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\CacheableResponse;
 use Drupal\subrequests\Blueprint\BlueprintManager;
 use Drupal\subrequests\Normalizer\JsonBlueprintDenormalizer;
@@ -20,12 +21,13 @@ use Symfony\Component\Serializer\Serializer;
  */
 class BlueprintManagerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\subrequests\Blueprint\BlueprintManager
+   * @var BlueprintManager
    */
   protected $sut;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $denormalizer = $this->prophesize(JsonBlueprintDenormalizer::class);
     $denormalizer->denormalize(Argument::type('array'), SubrequestsTree::class, 'json', [])
diff --git a/tests/src/Unit/JsonPathReplacerTest.php b/tests/src/Unit/JsonPathReplacerTest.php
index caa8736..337815d 100644
--- a/tests/src/Unit/JsonPathReplacerTest.php
+++ b/tests/src/Unit/JsonPathReplacerTest.php
@@ -14,11 +14,11 @@ use Symfony\Component\HttpFoundation\Response;
 class JsonPathReplacerTest extends UnitTestCase {
 
   /**
-   * @var \Drupal\subrequests\JsonPathReplacer
+   * @var JsonPathReplacer
    */
   protected $sut;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->sut = new JsonPathReplacer();
   }
@@ -140,11 +140,11 @@ class JsonPathReplacerTest extends UnitTestCase {
 
     $actual = $this->sut->replaceBatch($batch, $responses);
 
-    $this->assertInternalType('int', $actual[0]->body['You are number']);
-    $this->assertInternalType('string', $actual[0]->body['Where am I']);
-    $this->assertInternalType('boolean', $actual[0]->body['World of number two']);
-    $this->assertInternalType('string', $actual[0]->body['Question']);
-    $this->assertInternalType('float', $actual[0]->body['Michael']);
+    $this->assertIsInt($actual[0]->body['You are number']);
+    $this->assertIsString($actual[0]->body['Where am I']);
+    $this->assertIsBool($actual[0]->body['World of number two']);
+    $this->assertIsString($actual[0]->body['Question']);
+    $this->assertIsFloat($actual[0]->body['Michael']);
   }
 
 }
diff --git a/tests/src/Unit/Normalizer/JsonBlueprintDenormalizerTest.php b/tests/src/Unit/Normalizer/JsonBlueprintDenormalizerTest.php
index 572ee6a..baadc2f 100644
--- a/tests/src/Unit/Normalizer/JsonBlueprintDenormalizerTest.php
+++ b/tests/src/Unit/Normalizer/JsonBlueprintDenormalizerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\subrequests\Normalizer;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\subrequests\Normalizer\JsonBlueprintDenormalizer;
 use Drupal\subrequests\Subrequest;
 use Drupal\subrequests\SubrequestsTree;
@@ -14,12 +15,13 @@ use Psr\Log\LoggerInterface;
  */
 class JsonBlueprintDenormalizerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\subrequests\Normalizer\JsonBlueprintDenormalizer
+   * @var JsonBlueprintDenormalizer
    */
   protected $sut;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $logger = $this->prophesize(LoggerInterface::class);
     $this->sut = new JsonBlueprintDenormalizer($logger->reveal());
diff --git a/tests/src/Unit/Normalizer/JsonSubrequestDenormalizerTest.php b/tests/src/Unit/Normalizer/JsonSubrequestDenormalizerTest.php
index 77e54a3..5b1a9be 100644
--- a/tests/src/Unit/Normalizer/JsonSubrequestDenormalizerTest.php
+++ b/tests/src/Unit/Normalizer/JsonSubrequestDenormalizerTest.php
@@ -16,11 +16,11 @@ use Symfony\Component\HttpFoundation\Session\Session;
 class JsonSubrequestDenormalizerTest extends UnitTestCase {
 
   /**
-   * @var \Drupal\subrequests\Normalizer\JsonSubrequestDenormalizer
+   * @var JsonSubrequestDenormalizer
    */
   protected $sut;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->sut = new JsonSubrequestDenormalizer();
   }
diff --git a/tests/src/Unit/Normalizer/MultiresponseJsonNormalizerTest.php b/tests/src/Unit/Normalizer/MultiresponseJsonNormalizerTest.php
index 80110c8..5b6e95e 100644
--- a/tests/src/Unit/Normalizer/MultiresponseJsonNormalizerTest.php
+++ b/tests/src/Unit/Normalizer/MultiresponseJsonNormalizerTest.php
@@ -14,11 +14,11 @@ use Symfony\Component\HttpFoundation\Response;
 class MultiresponseJsonNormalizerTest extends UnitTestCase {
 
   /**
-   * @var \Drupal\subrequests\Normalizer\MultiresponseJsonNormalizer
+   * @var MultiresponseJsonNormalizer
    */
   protected $sut;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->sut = new MultiresponseJsonNormalizer();
   }
diff --git a/tests/src/Unit/Normalizer/MultiresponseNormalizerTest.php b/tests/src/Unit/Normalizer/MultiresponseNormalizerTest.php
index f717722..7a08f2f 100644
--- a/tests/src/Unit/Normalizer/MultiresponseNormalizerTest.php
+++ b/tests/src/Unit/Normalizer/MultiresponseNormalizerTest.php
@@ -13,11 +13,11 @@ use Symfony\Component\HttpFoundation\Response;
 class MultiresponseNormalizerTest extends UnitTestCase {
 
   /**
-   * @var \Drupal\subrequests\Normalizer\MultiresponseNormalizer
+   * @var MultiresponseNormalizer
    */
   protected $sut;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->sut = new MultiresponseNormalizer();
   }
@@ -53,8 +53,8 @@ class MultiresponseNormalizerTest extends UnitTestCase {
     $delimiter = substr($parts['boundary'], 1, strlen($parts['boundary']) - 2);
     $this->assertStringStartsWith('--' . $delimiter, $actual['content']);
     $this->assertStringEndsWith('--' . $delimiter . '--', $actual['content']);
-    $this->assertRegExp("/\r\nFoo!\r\n/", $actual['content']);
-    $this->assertRegExp("/\r\nBar\r\n/", $actual['content']);
+    $this->assertMatchesRegularExpression("/\r\nFoo!\r\n/", $actual['content']);
+    $this->assertMatchesRegularExpression("/\r\nBar\r\n/", $actual['content']);
   }
 
 }
diff --git a/tests/src/Unit/SubrequestsManagerTest.php b/tests/src/Unit/SubrequestsManagerTest.php
index 679fc61..5e6ec6f 100644
--- a/tests/src/Unit/SubrequestsManagerTest.php
+++ b/tests/src/Unit/SubrequestsManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\subrequests\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\subrequests\JsonPathReplacer;
 use Drupal\subrequests\Normalizer\JsonSubrequestDenormalizer;
 use Drupal\subrequests\Subrequest;
@@ -21,12 +22,13 @@ use Symfony\Component\Serializer\Serializer;
  */
 class SubrequestsManagerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\subrequests\SubrequestsManager
+   * @var SubrequestsManager
    */
   protected $sut;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $http_kernel = $this->prophesize(HttpKernelInterface::class);
     $http_kernel
