modules/contrib/entity_tools/entity_tools.module
modules/contrib/entity_tools/entity_tools_example/entity_tools_example.module
modules/contrib/entity_tools/entity_tools_example/src/Controller/EntityExampleController.php
modules/contrib/entity_tools/entity_tools_example/src/Controller/TwigExampleController.php
modules/contrib/entity_tools/entity_tools_example/src/Plugin/Block/NodeBlock.php
modules/contrib/entity_tools/entity_tools_example/src/Plugin/Block/PromotedNodesBlock.php
modules/contrib/entity_tools/entity_tools_example/src/Plugin/Block/PromotedViewsBlock.php
modules/contrib/entity_tools/entity_tools_example/tests/src/Functional/LoadTest.php
modules/contrib/entity_tools/src/AbstractEntityQuery.php
modules/contrib/entity_tools/src/BlockContentQuery.php
modules/contrib/entity_tools/src/CacheTools.php
modules/contrib/entity_tools/src/EntityQueryInterface.php
modules/contrib/entity_tools/src/EntityTools.php
modules/contrib/entity_tools/src/FieldTools.php
modules/contrib/entity_tools/src/FileTools.php
modules/contrib/entity_tools/src/GenericQuery.php
modules/contrib/entity_tools/src/LinkTools.php
modules/contrib/entity_tools/src/NodeQuery.php
modules/contrib/entity_tools/src/TermQuery.php
modules/contrib/entity_tools/src/TwigExtension.php
modules/contrib/entity_tools/src/UserQuery.php

10 files with changes
=====================

1) modules/contrib/entity_tools/src/TwigExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_tools;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Menu\MenuLinkTreeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;

@@ @@
   /**
    * Drupal\entity_tools\EntityTools definition.
    *
-   * @var \Drupal\entity_tools\EntityTools
+   * @var EntityTools
    */
   protected $entityTools;

@@ @@
    *   A render array for the field or NULL if the value does not exist.
    */
   public function getField($field_name, $entity_type, $id = NULL, $view_mode = 'default', $langcode = NULL) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $id
       ? \Drupal::entityTypeManager()->getStorage($entity_type)->load($id)
       : \Drupal::routeMatch()->getParameter($entity_type);
@@ @@
    *   A render array for the menu.
    */
   public function getMenu($menu_name, $level = 1, $depth = 0) {
-    /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menu_tree */
+    /** @var MenuLinkTreeInterface $menu_tree */
     $menu_tree = \Drupal::service('menu.link_tree');
     $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);

@@ @@
    * @param array $options
    *   (optional) An array of options.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A new Url object based on user input.
    *
    * @see \Drupal\Core\Url::fromUserInput()
@@ @@
   /**
    * Checks view access to a given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to check access.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_tools/src/LinkTools.php:18

    ---------- begin diff ----------
@@ @@
    *
    * @param string $label
    *   The link label.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url.
    * @param array $attributes
    *   Optional attributes like ['class' => ['internal']];.
@@ @@
     $link = Link::fromTextAndUrl($label, $url);
     $link = $link->toRenderable();
     $link['#attributes'] = $attributes;
-    $output = render($link);
+    $output = \Drupal::service('renderer')->render($link);
     return $output;
   }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/entity_tools/src/FileTools.php:50

    ---------- begin diff ----------
@@ @@
   /**
    * Returns image validation errors from a File.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File instance.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/entity_tools/src/FieldTools.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Get a field name from an entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   Fieldable entity.
    * @param string $field_type
    *   Field type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/entity_tools/src/EntityTools.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_tools;

+use Drupal\Core\Plugin\Context\ContextRepositoryInterface;
 use Drupal\user\Entity\Role;
 use Drupal\block\Entity\Block;
 use Drupal\block_content\Entity\BlockContent;
@@ @@
   // @todo use other "display" : json, xls, ... rename Display into Html or Build?
   // @todo provide facade on most commonly used caching (including max-age 0)
   // @todo check access
-
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Language\LanguageManagerInterface definition.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Drupal\Core\Render\Renderer definition.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
    * @param string $entity_type_id
    *   Entity type id.
    *
-   * @return \Drupal\entity_tools\EntityQueryInterface
+   * @return EntityQueryInterface
    *   Entity query.
    */
   public function getEntityQuery($entity_type_id) {
@@ @@
    *   Content (node, term, view, ...) or configuration (vocabulary, ...) entity.
    * @param string|null $type
    *   Optional Content Entity type.
-   * @param \Drupal\entity_tools\EntityQueryInterface|null $query
+   * @param EntityQueryInterface|null $query
    *   Optional query to filter and sort the entity selection.
    *
    * @return array
@@ @@
    *
    * @param string $content_type
    *   Content type, also known as bundle.
-   * @param \Drupal\entity_tools\EntityQueryInterface|null $query
+   * @param EntityQueryInterface|null $query
    *   Entity query.
    *
    * @return array
@@ @@
    *
    * @param string $vocabulary
    *   Vocabulary name.
-   * @param \Drupal\entity_tools\EntityQueryInterface|null $query
+   * @param EntityQueryInterface|null $query
    *   Entity query.
    *
    * @return array
@@ @@
    * @param array $entity_ids
    *   Array of entity ids.
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
+   * @return array|EntityInterface[]
    */
   public function entityLoadMultiple($entity_type_id, array $entity_ids) {
     $entities = $this->entityTypeManager->getStorage($entity_type_id)->loadMultiple($entity_ids);
@@ @@
    * @param $entity_type_id
    * @param $entity_id
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   public function entityLoad($entity_type_id, $entity_id) {
     $entity = $this->entityTypeManager->getStorage($entity_type_id)->load($entity_id);
@@ @@
    *
    * @param array $node_ids
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
+   * @return array|EntityInterface[]
    */
   public function nodeLoadMultiple(array $node_ids) {
     return $this->entityLoadMultiple(self::ENTITY_NODE, $node_ids);
@@ @@
    * @param int $id
    *   The Node Entity id.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|mixed
+   * @return EntityInterface|mixed
    */
   public function nodeLoad($id) {
     return $this->entityLoad(self::ENTITY_NODE, $id);
@@ @@
    * @param int $id
    *   The Term Entity id.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|mixed
+   * @return EntityInterface|mixed
    */
   public function termLoad($id) {
     return $this->entityLoad(self::ENTITY_TERM, $id);
@@ @@
    * @param $id
    *   The Block machine name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    */
   public function blockLoad($id) {
     // @todo translation
@@ @@
    * @param int $id
    *   The BlockContent instance id.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    */
   public function blockContentLoad($id) {
     // @todo set title
@@ @@
   /**
    * Loads paragraphs from a Content Entity field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    * @param $paragraph_field_name
    *
    * @return null
@@ @@
   /**
    * Loads and builds a render array of an Entity, using a view mode.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string|null $view_mode
    *
    * @return array
@@ @@
   public function getBlockPluginsDefinitions() {
     $blockManager = \Drupal::service('plugin.manager.block');
     $contextRepository = \Drupal::service('context.repository');
-    /** @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface $contextRepository */
+    /** @var ContextRepositoryInterface $contextRepository */
     $definitions = $blockManager->getDefinitionsForContexts($contextRepository->getAvailableContexts());
     return $definitions;
   }
@@ @@
    * Translates a Content or Config Entity, with a fallback to the current interface
    * language if no language id defined.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param null $language_id
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface|\Drupal\Core\Entity\EntityInterface|\Drupal\entity_tools\EntityTools|null
+   * @return ConfigEntityInterface|EntityInterface|\Drupal\entity_tools\EntityTools|null
    */
   public function entityTranslate(EntityInterface $entity, $language_id = NULL) {
     $result = $entity;
@@ @@
    * Translates an Entity, with a fallback to the current interface
    * language if no language id defined.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param null $language
    *
-   * @return $this|\Drupal\Core\Entity\EntityInterface|null
+   * @return $this|EntityInterface|null
    */
   private function contentEntityTranslate(ContentEntityInterface $entity, $language_id = NULL) {
     // @todo run extra checks to know if content translation is available for nodes, ...
@@ @@
   /**
    * Tries to get the current Node instance.
    *
-   * @return \Drupal\node\NodeInterface|null
+   * @return NodeInterface|null
    */
   public function getCurrentNode() {
     $result = NULL;
@@ @@
   /**
    * Tries to get the current Term instance.
    *
-   * @return \Drupal\taxonomy\Entity\Term|mixed|null
+   * @return Term|mixed|null
    */
   public function getCurrentTerm() {
     // @todo review multiplicity
@@ @@
   /**
    * Checks view access to a given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to check access.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/entity_tools/entity_tools_example/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_tools_example\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_tools/entity_tools_example/src/Plugin/Block/PromotedViewsBlock.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\entity_tools\EntityTools definition.
    *
-   * @var \Drupal\entity_tools\EntityTools
+   * @var EntityTools
    */
   protected $entityTools;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_tools/entity_tools_example/src/Plugin/Block/PromotedNodesBlock.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\entity_tools\EntityTools definition.
    *
-   * @var \Drupal\entity_tools\EntityTools
+   * @var EntityTools
    */
   protected $entityTools;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_tools/entity_tools_example/src/Plugin/Block/NodeBlock.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\entity_tools\EntityTools definition.
    *
-   * @var \Drupal\entity_tools\EntityTools
+   * @var EntityTools
    */
   protected $entityTools;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_tools/entity_tools_example/src/Controller/EntityExampleController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\entity_tools\EntityTools definition.
    *
-   * @var \Drupal\entity_tools\EntityTools
+   * @var EntityTools
    */
   protected $entityTools;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 10 files have been changed by Rector                                      

