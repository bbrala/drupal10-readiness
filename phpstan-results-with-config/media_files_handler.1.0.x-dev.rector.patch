diff --git a/composer.json b/composer.json
index 53dd0fc..be86deb 100644
--- a/composer.json
+++ b/composer.json
@@ -6,6 +6,6 @@
     ],
     "minimum-stability": "dev",
     "require": {
-        "drupal/core": "^8 || ^9"
+        "drupal/core": "^9.3 || ^10"
     }
 }
diff --git a/media_files_handler.info.yml b/media_files_handler.info.yml
index 07edc69..62430c9 100644
--- a/media_files_handler.info.yml
+++ b/media_files_handler.info.yml
@@ -1,5 +1,5 @@
 name: 'Media Files Handler'
 type: module
 description: 'Make sure all files get deleted on updates of a media entity'
-core_version_requirement: 8.x || 9.x
+core_version_requirement: ^9.3 || ^10
 package: 'Media'
diff --git a/src/Service/HandlerService.php b/src/Service/HandlerService.php
index 38a7785..3fa3b80 100644
--- a/src/Service/HandlerService.php
+++ b/src/Service/HandlerService.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\media_files_handler\Service;
 
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\file\Entity\File;
@@ -16,7 +20,7 @@ class HandlerService {
   /**
    * The default delete action.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    *
    * @todo Expose as Configuration.
    */
@@ -25,48 +29,48 @@ class HandlerService {
   /**
    * Drupal file_system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The media storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $mediaStorage;
 
   /**
    * The file storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $fileStorage;
 
   /**
    * The Media Files Handler logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs a new HandlerService object.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(FileSystemInterface $file_system, EntityTypeManagerInterface $entity_type_manager, LoggerInterface $logger) {
     $this->fileSystem = $file_system;
@@ -79,7 +83,7 @@ class HandlerService {
   /**
    * Loop through all fields to find those which reference a file entity.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    *
    * @return array
@@ -105,7 +109,7 @@ class HandlerService {
    * This can be many files depending on usage of
    * translations and revisions. The default revision is not included!
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current media entity.
    * @param array $excluded_languages
    *   Languages to skip deletion.
@@ -124,7 +128,7 @@ class HandlerService {
    * This can be many files depending on usage of
    * translations and revisions. The default revision is not included!
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current media entity.
    * @param array $excluded_languages
    *   Languages to skip deletion.
@@ -188,10 +192,10 @@ class HandlerService {
   /**
    * Delete or mark file as temporary.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The file.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function deleteFile(File $file): void {
     $uri = $file->getFileUri();
@@ -233,7 +237,7 @@ class HandlerService {
   /**
    * Loop through all languages of the current entity to find all used files.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    * @param array $excluded_languages
    *   Languages to skip deletion.
@@ -277,7 +281,7 @@ class HandlerService {
    * E.g. if the media entity is unpublished, a user can only access
    * the file, if permission to view the unpublished media entity is granted.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The file.
    */
   private function moveFileToPrivateStorage(File $file): void {
@@ -297,7 +301,7 @@ class HandlerService {
     }
 
     // Move file. This will also delete image styles.
-    $result = file_move($file, $new_uri);
+    $result = \Drupal::service('file.repository')->move($file, $new_uri);
 
     $this->logger->info(
       'Moved file ' . $file->id() . ' to private storage.'
@@ -309,13 +313,13 @@ class HandlerService {
    *
    * E.g. when a media entity is unpublished.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    */
   public function moveAllFilesToPrivate(MediaInterface $entity) :void {
     $files_to_move = $this->getAllFiles($entity);
 
-    /** @var \Drupal\file\Entity\File[] $files */
+    /** @var File[] $files */
     $files = $this->fileStorage->loadMultiple($files_to_move);
     foreach ($files as $file) {
       $this->moveFileToPrivateStorage($file);
@@ -327,15 +331,15 @@ class HandlerService {
    *
    * E.g. when a media entity is deleted.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function removeAllFilesOfEntity(MediaInterface $entity) :void {
     $files_to_delete = $this->getAllFiles($entity);
 
-    /** @var \Drupal\file\Entity\File[] $files */
+    /** @var File[] $files */
     $files = $this->fileStorage->loadMultiple($files_to_delete);
     foreach ($files as $file) {
       $this->deleteFile($file);
@@ -347,7 +351,7 @@ class HandlerService {
    *
    * E.g. when a media entity is published.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    */
   public function moveDefaultRevisionFilesToPublic(MediaInterface $entity): void {
@@ -386,7 +390,7 @@ class HandlerService {
         }
 
         // Move file.
-        file_move($file, $new_uri);
+        \Drupal::service('file.repository')->move($file, $new_uri);
 
         $this->logger->info(
           'Moved file ' . $file->id() . ' to public storage.'
@@ -398,10 +402,10 @@ class HandlerService {
   /**
    * Handle the replacement of files in an entity.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function handleNewFiles(MediaInterface $entity): void {
     // Check if the entity has a new file.
@@ -454,10 +458,10 @@ class HandlerService {
   /**
    * Remove files of specific revision.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function removeFilesOfEntityRevision(MediaInterface $entity) :void {
     $fields = $this->getAllFieldsWithFiles($entity);
@@ -487,10 +491,10 @@ class HandlerService {
   /**
    * Remove files of specific revision.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function removeAllFilesOfTranslation(MediaInterface $entity) :void {
     $current_translation_to_delete = $entity->language()->getId();
@@ -524,7 +528,7 @@ class HandlerService {
   /**
    * Get all files used by Media entity.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The Media Entity.
    * @param array $excluded_languages
    *   Languages to skip deletion.
diff --git a/tests/src/Kernel/HandlerServiceMultilanguageTest.php b/tests/src/Kernel/HandlerServiceMultilanguageTest.php
index 8eb7fb9..9b04d82 100644
--- a/tests/src/Kernel/HandlerServiceMultilanguageTest.php
+++ b/tests/src/Kernel/HandlerServiceMultilanguageTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\media_files_handler\Kernel;
 
+use Drupal\Core\State\StateInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\file\Entity\File;
 use Drupal\file\FileInterface;
@@ -20,14 +24,14 @@ class HandlerServiceMultilanguageTest extends MediaKernelTestBase {
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The auto created media type.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   private $mediaType;
 
@@ -41,14 +45,14 @@ class HandlerServiceMultilanguageTest extends MediaKernelTestBase {
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The media storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $mediaStorage;
 
@@ -125,15 +129,15 @@ class HandlerServiceMultilanguageTest extends MediaKernelTestBase {
    *
    * @param string $filename
    *   String filename with extension.
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type.
    * @param bool $status
    *   The status of the created entity.
    *
-   * @return \Drupal\media\Entity\Media
+   * @return Media
    *   A media item.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function generateMedia($filename, MediaTypeInterface $media_type, $status = TRUE): Media {
     file_put_contents('public://' . $filename, NULL);
@@ -290,10 +294,10 @@ class HandlerServiceMultilanguageTest extends MediaKernelTestBase {
   /**
    * Get specific file of media entity.
    *
-   * @param \Drupal\media\Entity\Media $media
+   * @param Media $media
    *   The Media entity.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file.
    */
   private function getFile(Media $media): FileInterface {
diff --git a/tests/src/Kernel/HandlerServiceTest.php b/tests/src/Kernel/HandlerServiceTest.php
index a7c1dd8..b7f1570 100644
--- a/tests/src/Kernel/HandlerServiceTest.php
+++ b/tests/src/Kernel/HandlerServiceTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\media_files_handler\Kernel;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\file\Entity\File;
 use Drupal\file\FileInterface;
@@ -35,14 +37,14 @@ class HandlerServiceTest extends MediaKernelTestBase {
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The media storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $mediaStorage;
 
@@ -74,12 +76,12 @@ class HandlerServiceTest extends MediaKernelTestBase {
    *
    * @param string $filename
    *   String filename with extension.
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type.
    * @param bool $status
    *   The status of created entity.
    *
-   * @return \Drupal\media\Entity\Media
+   * @return Media
    *   A media item.
    */
   protected function generateMedia($filename, MediaTypeInterface $media_type, $status = TRUE): Media {
@@ -202,7 +204,7 @@ class HandlerServiceTest extends MediaKernelTestBase {
 
     // File should have moved to private.
     $this->assertFileExists('private://text.txt');
-    $this->assertFileNotExists('public://text.txt');
+    $this->assertFileDoesNotExist('public://text.txt');
   }
 
   /**
@@ -321,7 +323,7 @@ class HandlerServiceTest extends MediaKernelTestBase {
     $media->save();
 
     $this->assertFileExists('private://' . $filename);
-    $this->assertFileNotExists('public://' . $filename);
+    $this->assertFileDoesNotExist('public://' . $filename);
   }
 
   /**
@@ -340,7 +342,7 @@ class HandlerServiceTest extends MediaKernelTestBase {
 
     // Make sure the file is initially stored as private.
     $this->assertFileExists('private://' . $filename);
-    $this->assertFileNotExists('public://' . $filename);
+    $this->assertFileDoesNotExist('public://' . $filename);
 
     // Set Media Entity status to published.
     $media->setPublished();
@@ -348,18 +350,18 @@ class HandlerServiceTest extends MediaKernelTestBase {
 
     // The file should no be public.
     $this->assertFileExists('public://' . $filename);
-    $this->assertFileNotExists('private://' . $filename);
+    $this->assertFileDoesNotExist('private://' . $filename);
   }
 
   /**
    * Get specific file of media entity.
    *
-   * @param \Drupal\media\MediaTypeInterface $mediaType
+   * @param MediaTypeInterface $mediaType
    *   The bundle.
-   * @param \Drupal\media\Entity\Media $media
+   * @param Media $media
    *   The Media entity.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file.
    */
   private function getFile(MediaTypeInterface $mediaType, Media $media): FileInterface {
