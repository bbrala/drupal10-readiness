diff --git a/rules_scheduler/src/Commands/RulesSchedulerCommands.php b/rules_scheduler/src/Commands/RulesSchedulerCommands.php
index 4a02db4..68e1c27 100644
--- a/rules_scheduler/src/Commands/RulesSchedulerCommands.php
+++ b/rules_scheduler/src/Commands/RulesSchedulerCommands.php
@@ -17,32 +17,32 @@ class RulesSchedulerCommands extends DrushCommands {
   /**
    * The queue factory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * The queue worker manager service.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorkerManager;
 
   /**
    * The rules scheduler manager.
    *
-   * @var \Drupal\rules_scheduler\SchedulerManagerInterface
+   * @var SchedulerManagerInterface
    */
   protected $rulesSchedulerManager;
 
   /**
    * RulesSchedulerCommands constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory service.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_worker_manager
+   * @param QueueWorkerManagerInterface $queue_worker_manager
    *   The queue worker manager service.
-   * @param \Drupal\rules_scheduler\SchedulerManagerInterface $rules_scheduler_manager
+   * @param SchedulerManagerInterface $rules_scheduler_manager
    *   The rules scheduler manager.
    */
   public function __construct(QueueFactory $queue_factory, QueueWorkerManagerInterface $queue_worker_manager, SchedulerManagerInterface $rules_scheduler_manager) {
diff --git a/rules_scheduler/src/Controller/SchedulerPageController.php b/rules_scheduler/src/Controller/SchedulerPageController.php
index 5b29dfa..3ead4ec 100644
--- a/rules_scheduler/src/Controller/SchedulerPageController.php
+++ b/rules_scheduler/src/Controller/SchedulerPageController.php
@@ -17,23 +17,23 @@ class SchedulerPageController extends ControllerBase {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * Constructs a SchedulePageController object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
    */
   public function __construct(ModuleHandlerInterface $module_handler, FormBuilderInterface $form_builder) {
diff --git a/rules_scheduler/src/DefaultTaskHandler.php b/rules_scheduler/src/DefaultTaskHandler.php
index e91717f..cdc712a 100644
--- a/rules_scheduler/src/DefaultTaskHandler.php
+++ b/rules_scheduler/src/DefaultTaskHandler.php
@@ -12,7 +12,7 @@ class DefaultTaskHandler implements TaskHandlerInterface {
   /**
    * The task.
    *
-   * @var \Drupal\rules_scheduler\Entity\TaskInterface
+   * @var TaskInterface
    */
   protected $task;
 
diff --git a/rules_scheduler/src/Form/DeleteTaskConfirmForm.php b/rules_scheduler/src/Form/DeleteTaskConfirmForm.php
index 814f015..0cb0edb 100644
--- a/rules_scheduler/src/Form/DeleteTaskConfirmForm.php
+++ b/rules_scheduler/src/Form/DeleteTaskConfirmForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\rules_scheduler\Form;
 
+use Drupal\rules\Entity\RulesComponentConfig;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -18,28 +19,28 @@ class DeleteTaskConfirmForm extends ConfirmFormBase {
   /**
    * The task to delete.
    *
-   * @var \Drupal\rules_scheduler\Entity\TaskInterface
+   * @var TaskInterface
    */
   protected $task;
 
   /**
    * The rules configuration.
    *
-   * @var \Drupal\rules\Entity\RulesComponentConfig
+   * @var RulesComponentConfig
    */
   protected $config;
 
   /**
    * The date.formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The rules_config entity storage class.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $configStorage;
 
@@ -53,9 +54,9 @@ class DeleteTaskConfirmForm extends ConfirmFormBase {
   /**
    * Form constructor.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date.formatter service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The rules_config entity storage class.
    */
   public function __construct(DateFormatterInterface $date_formatter, EntityStorageInterface $storage) {
diff --git a/rules_scheduler/src/Form/SchedulerFormBase.php b/rules_scheduler/src/Form/SchedulerFormBase.php
index 14c837e..371f17f 100644
--- a/rules_scheduler/src/Form/SchedulerFormBase.php
+++ b/rules_scheduler/src/Form/SchedulerFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\rules_scheduler\Form;
 
+use Drupal\Core\TypedData\TypedDataInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\FormBase;
@@ -17,41 +18,41 @@ abstract class SchedulerFormBase extends FormBase {
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * The config entity storage that holds Rules components.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $componentStorage;
 
   /**
    * The Rules action plugin manager.
    *
-   * @var \Drupal\rules\Core\RulesActionManagerInterface
+   * @var RulesActionManagerInterface
    */
   protected $actionManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $componentStorage
+   * @param EntityStorageInterface $componentStorage
    *   The config entity storage that holds Rules components.
-   * @param \Drupal\rules\Core\RulesActionManagerInterface $actionManager
+   * @param RulesActionManagerInterface $actionManager
    *   The Rules action plugin manager.
    */
   public function __construct(Connection $database, TypedDataManagerInterface $typedDataManager, EntityStorageInterface $componentStorage, RulesActionManagerInterface $actionManager) {
@@ -83,7 +84,7 @@ abstract class SchedulerFormBase extends FormBase {
    * @param mixed $value
    *   The value to set.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The created object.
    */
   protected function getTypedData($data_type, $value) {
diff --git a/rules_scheduler/src/Plugin/QueueWorker/TaskWorker.php b/rules_scheduler/src/Plugin/QueueWorker/TaskWorker.php
index 809a35c..ff84809 100644
--- a/rules_scheduler/src/Plugin/QueueWorker/TaskWorker.php
+++ b/rules_scheduler/src/Plugin/QueueWorker/TaskWorker.php
@@ -25,7 +25,7 @@ class TaskWorker extends QueueWorkerBase {
   /**
    * Queue worker callback for running a single task.
    *
-   * @param \Drupal\rules_scheduler\Entity\TaskInterface $task
+   * @param TaskInterface $task
    *   The task to process.
    */
   public function processItem($task) {
diff --git a/rules_scheduler/src/Plugin/RulesAction/ScheduleDelete.php b/rules_scheduler/src/Plugin/RulesAction/ScheduleDelete.php
index 47c172f..f3f9abe 100644
--- a/rules_scheduler/src/Plugin/RulesAction/ScheduleDelete.php
+++ b/rules_scheduler/src/Plugin/RulesAction/ScheduleDelete.php
@@ -35,7 +35,7 @@ class ScheduleDelete extends RulesActionBase implements ContainerFactoryPluginIn
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -48,7 +48,7 @@ class ScheduleDelete extends RulesActionBase implements ContainerFactoryPluginIn
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database) {
diff --git a/rules_scheduler/src/Plugin/views/filter/ComponentInOperator.php b/rules_scheduler/src/Plugin/views/filter/ComponentInOperator.php
index 4cae8cc..b1b754d 100644
--- a/rules_scheduler/src/Plugin/views/filter/ComponentInOperator.php
+++ b/rules_scheduler/src/Plugin/views/filter/ComponentInOperator.php
@@ -18,7 +18,7 @@ class ComponentInOperator extends InOperator {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
diff --git a/rules_scheduler/src/SchedulerManager.php b/rules_scheduler/src/SchedulerManager.php
index e74fade..c24e6a0 100644
--- a/rules_scheduler/src/SchedulerManager.php
+++ b/rules_scheduler/src/SchedulerManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\rules_scheduler;
 
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\rules_scheduler\Entity\Task;
 
@@ -13,14 +14,14 @@ class SchedulerManager implements SchedulerManagerInterface {
   /**
    * The execution queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
   /**
    * Constructs a new SchedulerManager.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
    */
   public function __construct(QueueFactory $queue_factory) {
diff --git a/rules_scheduler/src/TaskHandlerInterface.php b/rules_scheduler/src/TaskHandlerInterface.php
index a25173c..e2d2dad 100644
--- a/rules_scheduler/src/TaskHandlerInterface.php
+++ b/rules_scheduler/src/TaskHandlerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\rules_scheduler;
 
+use Drupal\rules\Exception\EvaluationException;
+use Drupal\rules_scheduler\Entity\TaskInterface;
 /**
  * Interface for scheduled task handlers.
  *
@@ -17,7 +19,7 @@ interface TaskHandlerInterface {
   /**
    * Processes a queue item.
    *
-   * @throws \Drupal\rules\Exception\EvaluationException
+   * @throws EvaluationException
    *   If there are any problems executing the task.
    *
    * @see rules_scheduler_run_task()
@@ -34,7 +36,7 @@ interface TaskHandlerInterface {
   /**
    * Returns the task associated with the task handler.
    *
-   * @return \Drupal\rules_scheduler\Entity\TaskInterface
+   * @return TaskInterface
    *   The task.
    */
   public function getTask();
diff --git a/rules_scheduler/src/TypedData/Options/RulesComponentOptions.php b/rules_scheduler/src/TypedData/Options/RulesComponentOptions.php
index ef24d80..dfd6763 100644
--- a/rules_scheduler/src/TypedData/Options/RulesComponentOptions.php
+++ b/rules_scheduler/src/TypedData/Options/RulesComponentOptions.php
@@ -16,14 +16,14 @@ class RulesComponentOptions extends OptionsProviderBase implements ContainerInje
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a RulesComponentOptions object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/rules_scheduler/tests/src/Functional/RulesSchedulerTestCase.php b/rules_scheduler/tests/src/Functional/RulesSchedulerTestCase.php
index 1cf489d..28a7541 100644
--- a/rules_scheduler/tests/src/Functional/RulesSchedulerTestCase.php
+++ b/rules_scheduler/tests/src/Functional/RulesSchedulerTestCase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\rules_scheduler\Functional;
 
+use Drupal\rules\Logger\RulesDebugLoggerChannel;
 use Drupal\Tests\Traits\Core\CronRunTrait;
 use Drupal\Tests\rules\Functional\RulesBrowserTestBase;
 use Drupal\rules_scheduler\Entity\Task;
@@ -26,7 +27,7 @@ class RulesSchedulerTestCase extends RulesBrowserTestBase {
   /**
    * Rules debug logger channel.
    *
-   * @var \Drupal\rules\Logger\RulesDebugLoggerChannel
+   * @var RulesDebugLoggerChannel
    */
   protected $logger;
 
diff --git a/rules_scheduler/tests/src/Kernel/OptionsProvider/OptionsProviderTest.php b/rules_scheduler/tests/src/Kernel/OptionsProvider/OptionsProviderTest.php
index 2f48198..b72125f 100644
--- a/rules_scheduler/tests/src/Kernel/OptionsProvider/OptionsProviderTest.php
+++ b/rules_scheduler/tests/src/Kernel/OptionsProvider/OptionsProviderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\rules_scheduler\Kernel\OptionsProvider;
 
+use Drupal\Core\DependencyInjection\ClassResolver;
 use Drupal\Core\Form\OptGroup;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\rules_scheduler\TypedData\Options\RulesComponentOptions;
@@ -26,7 +27,7 @@ class OptionsProviderTest extends KernelTestBase {
   /**
    * The class resolver service used to instantiate options providers.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolver
+   * @var ClassResolver
    */
   protected $classResolver;
 
diff --git a/src/Controller/RulesComponentController.php b/src/Controller/RulesComponentController.php
index 06a9103..5ba9ab2 100644
--- a/src/Controller/RulesComponentController.php
+++ b/src/Controller/RulesComponentController.php
@@ -13,7 +13,7 @@ class RulesComponentController extends ControllerBase {
   /**
    * Clones a rules component.
    *
-   * @param \Drupal\rules\Entity\RulesComponentConfig $rules_component
+   * @param RulesComponentConfig $rules_component
    *   The rules component configuration entity.
    */
   public function saveClone(RulesComponentConfig $rules_component) {
diff --git a/src/Controller/RulesComponentListBuilder.php b/src/Controller/RulesComponentListBuilder.php
index f585cc1..c4a38a2 100644
--- a/src/Controller/RulesComponentListBuilder.php
+++ b/src/Controller/RulesComponentListBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tr_rulez\Controller;
 
+use Drupal\Core\Form\FormBuilderInterface;
+use Drupal\rules\Entity\RulesComponentConfig;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -22,25 +24,25 @@ class RulesComponentListBuilder extends ConfigEntityListBuilder implements FormI
   /**
    * The expression manager.
    *
-   * @var \Drupal\rules\Engine\ExpressionManagerInterface
+   * @var ExpressionManagerInterface
    */
   protected $expressionManager;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * Constructs a new RulesComponentListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\rules\Engine\ExpressionManagerInterface $expression_manager
+   * @param ExpressionManagerInterface $expression_manager
    *   The rules expression plugin manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ExpressionManagerInterface $expression_manager) {
@@ -92,7 +94,7 @@ class RulesComponentListBuilder extends ConfigEntityListBuilder implements FormI
     $definition = $this->expressionManager->getDefinition($expression_config['id']);
     $plugin_type = $definition['label'];
 
-    /** @var \Drupal\rules\Entity\RulesComponentConfig $entity */
+    /** @var RulesComponentConfig $entity */
     $details = $this->t('Machine name: @name', ['@name' => $entity->id()]);
     if ($entity->hasTags()) {
       $details = $details . '<br />' . $this->t('Tags: @tags', ['@tags' => implode(', ', $entity->getTags())]);
@@ -283,7 +285,7 @@ class RulesComponentListBuilder extends ConfigEntityListBuilder implements FormI
   /**
    * Returns the form builder.
    *
-   * @return \Drupal\Core\Form\FormBuilderInterface
+   * @return FormBuilderInterface
    *   The form builder.
    */
   protected function formBuilder() {
diff --git a/src/Controller/RulesReactionController.php b/src/Controller/RulesReactionController.php
index b91d5fd..9d01613 100644
--- a/src/Controller/RulesReactionController.php
+++ b/src/Controller/RulesReactionController.php
@@ -13,7 +13,7 @@ class RulesReactionController extends ControllerBase {
   /**
    * Clones a reaction rule.
    *
-   * @param \Drupal\rules\Entity\ReactionRuleConfig $rules_reaction_rule
+   * @param ReactionRuleConfig $rules_reaction_rule
    *   The reaction rule configuration entity.
    */
   public function saveClone(ReactionRuleConfig $rules_reaction_rule) {
diff --git a/src/Controller/RulesReactionListBuilder.php b/src/Controller/RulesReactionListBuilder.php
index b5a578a..4d69643 100644
--- a/src/Controller/RulesReactionListBuilder.php
+++ b/src/Controller/RulesReactionListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tr_rulez\Controller;
 
+use Drupal\rules\Entity\ReactionRuleConfig;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -28,9 +29,9 @@ class RulesReactionListBuilder extends ConfigEntityListBuilder {
   /**
    * Constructs a new RulesReactionListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    * @param \Drupal\Core\RulesEventManager $eventManager
    *   The Rules event plugin manager.
@@ -100,7 +101,7 @@ class RulesReactionListBuilder extends ConfigEntityListBuilder {
       $event_labels[] = $event_definition['label'];
     }
 
-    /** @var \Drupal\rules\Entity\ReactionRuleConfig $entity */
+    /** @var ReactionRuleConfig $entity */
     $details = $this->t('Machine name: @name', ['@name' => $entity->id()]);
     if ($entity->hasTags()) {
       $details = $details . '<br />' . $this->t('Tags: @tags', ['@tags' => implode(', ', $entity->getTags())]);
diff --git a/src/Event/UserWasBlockedEvent.php b/src/Event/UserWasBlockedEvent.php
index 77b44c9..a7e0d03 100644
--- a/src/Event/UserWasBlockedEvent.php
+++ b/src/Event/UserWasBlockedEvent.php
@@ -17,14 +17,14 @@ class UserWasBlockedEvent extends Event {
   /**
    * The user account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   public $account;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The account of the user after being blocked.
    */
   public function __construct(UserInterface $account) {
diff --git a/src/Event/UserWasUnblockedEvent.php b/src/Event/UserWasUnblockedEvent.php
index e0d03bf..68a546b 100644
--- a/src/Event/UserWasUnblockedEvent.php
+++ b/src/Event/UserWasUnblockedEvent.php
@@ -17,14 +17,14 @@ class UserWasUnblockedEvent extends Event {
   /**
    * The user account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   public $account;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The account of the user after unblocking.
    */
   public function __construct(UserInterface $account) {
diff --git a/src/Form/Expression/ActionContainerForm.php b/src/Form/Expression/ActionContainerForm.php
index 0ced70e..5b6c2c8 100644
--- a/src/Form/Expression/ActionContainerForm.php
+++ b/src/Form/Expression/ActionContainerForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tr_rulez\Form\Expression;
 
+use Drupal\rules\Engine\ExpressionInterface;
+use Drupal\rules\Plugin\RulesExpression\RuleExpression;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\rules\Engine\ActionExpressionContainerInterface;
@@ -15,7 +17,7 @@ class ActionContainerForm extends ExpressionContainerFormBase {
   /**
    * The rule expression object this form is for.
    *
-   * @var \Drupal\rules\Engine\ActionExpressionContainerInterface
+   * @var ActionExpressionContainerInterface
    */
   protected $actionSet;
 
@@ -55,7 +57,7 @@ class ActionContainerForm extends ExpressionContainerFormBase {
       '#empty' => $this->t('None'),
     ];
 
-    /** @var \Drupal\rules\Engine\ExpressionInterface $action */
+    /** @var ExpressionInterface $action */
     foreach ($this->actionSet as $action) {
       $uuid = $action->getUuid();
       $configuration = $action->getConfiguration();
@@ -150,7 +152,7 @@ class ActionContainerForm extends ExpressionContainerFormBase {
       return;
     }
     $component = $this->getRulesUiHandler()->getComponent();
-    /** @var \Drupal\rules\Plugin\RulesExpression\RuleExpression $rule_expression */
+    /** @var RuleExpression $rule_expression */
     $rule_expression = $component->getExpression();
 
     foreach ($values as $uuid => $expression) {
diff --git a/src/Form/Expression/ConditionContainerForm.php b/src/Form/Expression/ConditionContainerForm.php
index c85120d..076d3f7 100644
--- a/src/Form/Expression/ConditionContainerForm.php
+++ b/src/Form/Expression/ConditionContainerForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tr_rulez\Form\Expression;
 
+use Drupal\rules\Engine\ExpressionInterface;
+use Drupal\rules\Plugin\RulesExpression\RuleExpression;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\rules\Engine\ConditionExpressionContainerInterface;
 use Drupal\rules\Form\Expression\ExpressionContainerFormBase;
@@ -14,7 +16,7 @@ class ConditionContainerForm extends ExpressionContainerFormBase {
   /**
    * The rule expression object this form is for.
    *
-   * @var \Drupal\rules\Engine\ConditionExpressionContainerInterface
+   * @var ConditionExpressionContainerInterface
    */
   protected $conditionContainer;
 
@@ -54,7 +56,7 @@ class ConditionContainerForm extends ExpressionContainerFormBase {
       '#empty' => $this->t('None'),
     ];
 
-    /** @var \Drupal\rules\Engine\ExpressionInterface $condition */
+    /** @var ExpressionInterface $condition */
     foreach ($this->conditionContainer as $condition) {
       $uuid = $condition->getUuid();
       $configuration = $condition->getConfiguration();
@@ -154,7 +156,7 @@ class ConditionContainerForm extends ExpressionContainerFormBase {
       return;
     }
     $component = $this->getRulesUiHandler()->getComponent();
-    /** @var \Drupal\rules\Plugin\RulesExpression\RuleExpression $rule_expression */
+    /** @var RuleExpression $rule_expression */
     $rule_expression = $component->getExpression();
 
     foreach ($values as $uuid => $expression) {
diff --git a/src/Form/ReactionRuleEditForm.php b/src/Form/ReactionRuleEditForm.php
index f5b2e51..22a8f82 100644
--- a/src/Form/ReactionRuleEditForm.php
+++ b/src/Form/ReactionRuleEditForm.php
@@ -18,23 +18,23 @@ class ReactionRuleEditForm extends RulesComponentFormBase {
   /**
    * The Rules event plugin manager.
    *
-   * @var \Drupal\rules\Core\RulesEventManager
+   * @var RulesEventManager
    */
   protected $eventManager;
 
   /**
    * The RulesUI handler of the currently active UI.
    *
-   * @var \Drupal\rules\Ui\RulesUiConfigHandler
+   * @var RulesUiConfigHandler
    */
   protected $rulesUiHandler;
 
   /**
    * Constructs a new reaction rule edit form.
    *
-   * @param \Drupal\rules\Engine\ExpressionManagerInterface $expression_manager
+   * @param ExpressionManagerInterface $expression_manager
    *   The expression manager.
-   * @param \Drupal\rules\Core\RulesEventManager $event_manager
+   * @param RulesEventManager $event_manager
    *   The Rules event plugin manager.
    */
   public function __construct(ExpressionManagerInterface $expression_manager, RulesEventManager $event_manager) {
diff --git a/src/Plugin/Condition/FloodIsAllowed.php b/src/Plugin/Condition/FloodIsAllowed.php
index 2a6b9bd..f98fc58 100644
--- a/src/Plugin/Condition/FloodIsAllowed.php
+++ b/src/Plugin/Condition/FloodIsAllowed.php
@@ -43,7 +43,7 @@ class FloodIsAllowed extends RulesConditionBase implements ContainerFactoryPlugi
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;
 
@@ -68,7 +68,7 @@ class FloodIsAllowed extends RulesConditionBase implements ContainerFactoryPlugi
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Flood\FloodInterface $flood
+   * @param FloodInterface $flood
    *   The flood service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FloodInterface $flood) {
diff --git a/src/Plugin/Condition/PathContainsText.php b/src/Plugin/Condition/PathContainsText.php
index b759d3d..f139112 100644
--- a/src/Plugin/Condition/PathContainsText.php
+++ b/src/Plugin/Condition/PathContainsText.php
@@ -29,7 +29,7 @@ class PathContainsText extends RulesConditionBase implements ContainerFactoryPlu
   /**
    * The current path service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPathStack;
 
@@ -42,7 +42,7 @@ class PathContainsText extends RulesConditionBase implements ContainerFactoryPlu
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path_stack
+   * @param CurrentPathStack $current_path_stack
    *   The current path stack service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, CurrentPathStack $current_path_stack) {
diff --git a/src/Plugin/Condition/PathTextComparison.php b/src/Plugin/Condition/PathTextComparison.php
index 6bd61b0..c4f16ce 100644
--- a/src/Plugin/Condition/PathTextComparison.php
+++ b/src/Plugin/Condition/PathTextComparison.php
@@ -35,7 +35,7 @@ class PathTextComparison extends RulesConditionBase implements ContainerFactoryP
   /**
    * The current path service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPathStack;
 
@@ -48,7 +48,7 @@ class PathTextComparison extends RulesConditionBase implements ContainerFactoryP
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path_stack
+   * @param CurrentPathStack $current_path_stack
    *   The current path stack service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, CurrentPathStack $current_path_stack) {
diff --git a/src/Plugin/Condition/SiteIsInMaintenanceMode.php b/src/Plugin/Condition/SiteIsInMaintenanceMode.php
index f4b9d42..138696c 100644
--- a/src/Plugin/Condition/SiteIsInMaintenanceMode.php
+++ b/src/Plugin/Condition/SiteIsInMaintenanceMode.php
@@ -23,7 +23,7 @@ class SiteIsInMaintenanceMode extends RulesConditionBase implements ContainerFac
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $stateService;
 
@@ -36,7 +36,7 @@ class SiteIsInMaintenanceMode extends RulesConditionBase implements ContainerFac
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\State\StateInterface $state_service
+   * @param StateInterface $state_service
    *   The state service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, StateInterface $state_service) {
diff --git a/src/Plugin/RulesAction/CacheTagInvalidator.php b/src/Plugin/RulesAction/CacheTagInvalidator.php
index 0c96d07..24913cb 100644
--- a/src/Plugin/RulesAction/CacheTagInvalidator.php
+++ b/src/Plugin/RulesAction/CacheTagInvalidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tr_rulez\Plugin\RulesAction;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -28,14 +29,14 @@ class CacheTagInvalidator extends RulesActionBase implements ContainerFactoryPlu
   /**
    * The logger for the rules channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The cache_tags.invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
@@ -48,9 +49,9 @@ class CacheTagInvalidator extends RulesActionBase implements ContainerFactoryPlu
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   The cache_tags.invalidator service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerChannelFactoryInterface $logger_factory, CacheTagsInvalidatorInterface $cacheTagsInvalidator) {
diff --git a/src/Plugin/RulesAction/RulesFloodActionBase.php b/src/Plugin/RulesAction/RulesFloodActionBase.php
index 9cc3857..15d8c3f 100644
--- a/src/Plugin/RulesAction/RulesFloodActionBase.php
+++ b/src/Plugin/RulesAction/RulesFloodActionBase.php
@@ -16,14 +16,14 @@ abstract class RulesFloodActionBase extends RulesActionBase implements Container
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;
 
   /**
    * The logger channel the action will write log messages to.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
@@ -36,9 +36,9 @@ abstract class RulesFloodActionBase extends RulesActionBase implements Container
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Flood\FloodInterface $flood
+   * @param FloodInterface $flood
    *   The flood service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The Rules logger channel.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FloodInterface $flood, LoggerChannelInterface $logger) {
diff --git a/src/Plugin/RulesExpression/RuleExpression.php b/src/Plugin/RulesExpression/RuleExpression.php
index 217de7a..dc50e68 100644
--- a/src/Plugin/RulesExpression/RuleExpression.php
+++ b/src/Plugin/RulesExpression/RuleExpression.php
@@ -28,7 +28,7 @@ class RuleExpression extends CoreRuleExpression {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -41,11 +41,11 @@ class RuleExpression extends CoreRuleExpression {
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\rules\Engine\ExpressionManagerInterface $expression_manager
+   * @param ExpressionManagerInterface $expression_manager
    *   The rules expression plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The Rules debug logger channel.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ExpressionManagerInterface $expression_manager, EntityTypeManagerInterface $entity_type_manager, LoggerChannelInterface $logger) {
diff --git a/tests/src/Functional/ConfigureAndExecuteTest.php b/tests/src/Functional/ConfigureAndExecuteTest.php
index d696d80..2bf71a9 100644
--- a/tests/src/Functional/ConfigureAndExecuteTest.php
+++ b/tests/src/Functional/ConfigureAndExecuteTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\tr_rulez\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\Tests\rules\Functional\RulesBrowserTestBase;
 
 /**
@@ -26,7 +28,7 @@ class ConfigureAndExecuteTest extends RulesBrowserTestBase {
   /**
    * A user account with administration permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
@@ -88,7 +90,7 @@ class ConfigureAndExecuteTest extends RulesBrowserTestBase {
     // One more save to permanently store the rule.
     $this->pressButton('Save');
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
 
     // Add a node now and check if our rule triggers.
diff --git a/tests/src/Functional/UiPageTest.php b/tests/src/Functional/UiPageTest.php
index 8206a88..7ddeab6 100644
--- a/tests/src/Functional/UiPageTest.php
+++ b/tests/src/Functional/UiPageTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tr_rulez\Functional;
 
+use Drupal\Tests\WebAssert;
 use Drupal\Tests\rules\Functional\RulesBrowserTestBase;
 
 /**
@@ -32,7 +33,7 @@ class UiPageTest extends RulesBrowserTestBase {
 
     $this->drupalGet('admin/config/workflow/rules');
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->statusCodeEquals(200);
 
@@ -56,7 +57,7 @@ class UiPageTest extends RulesBrowserTestBase {
 
     $this->pressButton('Save');
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->statusCodeEquals(200);
     $assert->pageTextContains('Reaction rule Test rule has been created.');
@@ -84,7 +85,7 @@ class UiPageTest extends RulesBrowserTestBase {
     $this->testCreateReactionRule();
     $this->drupalGet('admin/config/workflow/rules');
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
 
     // Test disabling.
@@ -110,7 +111,7 @@ class UiPageTest extends RulesBrowserTestBase {
     $this->fillField('context_definitions[node][setting]', 'node');
     $this->pressButton('Save');
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->pageTextContains('You have unsaved changes.');
 
@@ -129,7 +130,7 @@ class UiPageTest extends RulesBrowserTestBase {
     // Setup a rule with one condition.
     $this->testCreateReactionRule();
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
 
     $this->clickLink('Delete');
@@ -166,7 +167,7 @@ class UiPageTest extends RulesBrowserTestBase {
     // Setup a rule with one condition.
     $this->testCreateReactionRule();
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     // Check that the label shows up on the Rule edit page.
     $assert->pageTextContains('Node is promoted');
@@ -208,7 +209,7 @@ class UiPageTest extends RulesBrowserTestBase {
     $this->fillField('context_definitions[message][setting]', 'message');
     $this->pressButton('Save');
 
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->statusCodeEquals(200);
   }
diff --git a/tests/src/Kernel/DataFilterTest.php b/tests/src/Kernel/DataFilterTest.php
index d39be03..03003a3 100644
--- a/tests/src/Kernel/DataFilterTest.php
+++ b/tests/src/Kernel/DataFilterTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\tr_rulez\Kernel;
 
+use Drupal\Core\TypedData\TypedDataManagerInterface;
+use Drupal\typed_data\DataFilterManagerInterface;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -17,14 +19,14 @@ class DataFilterTest extends KernelTestBase {
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * The data filter manager.
    *
-   * @var \Drupal\typed_data\DataFilterManagerInterface
+   * @var DataFilterManagerInterface
    */
   protected $dataFilterManager;
 
diff --git a/tests/src/Kernel/EventIntegrationTest.php b/tests/src/Kernel/EventIntegrationTest.php
index dfbc8ef..94d8b64 100644
--- a/tests/src/Kernel/EventIntegrationTest.php
+++ b/tests/src/Kernel/EventIntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tr_rulez\Kernel;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\rules\Context\ContextConfig;
 use Drupal\user\Entity\User;
 use Drupal\Tests\rules\Kernel\RulesKernelTestBase;
@@ -16,7 +17,7 @@ class EventIntegrationTest extends RulesKernelTestBase {
   /**
    * The entity storage for Rules config entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
diff --git a/tests/src/Kernel/FloodTest.php b/tests/src/Kernel/FloodTest.php
index 32e2fb7..b580614 100644
--- a/tests/src/Kernel/FloodTest.php
+++ b/tests/src/Kernel/FloodTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\tr_rulez\Kernel;
 
+use Drupal\Core\Flood\FloodInterface;
+use Drupal\rules\Core\RulesConditionInterface;
+use Drupal\rules\Core\RulesActionInterface;
 use Drupal\Tests\rules\Kernel\RulesKernelTestBase;
 
 /**
@@ -19,7 +22,7 @@ class FloodTest extends RulesKernelTestBase {
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;
 
@@ -45,7 +48,7 @@ class FloodTest extends RulesKernelTestBase {
 
     $cron = $this->container->get('cron');
 
-    /** @var \Drupal\rules\Core\RulesConditionInterface $condition */
+    /** @var RulesConditionInterface $condition */
     $is_allowed_condition = $this->container->get('plugin.manager.condition')
       ->createInstance('rules_flood_is_allowed');
     $is_allowed_condition->setContextValue('name', $name)
@@ -88,7 +91,7 @@ class FloodTest extends RulesKernelTestBase {
 
     $cron = $this->container->get('cron');
 
-    /** @var \Drupal\rules\Core\RulesActionInterface $register_action */
+    /** @var RulesActionInterface $register_action */
     $register_action = \Drupal::service('plugin.manager.rules_action')
       ->createInstance('rules_flood_register_event');
     $register_action->setContextValue('name', $name)
@@ -133,7 +136,7 @@ class FloodTest extends RulesKernelTestBase {
     $threshold = 1;
     $window_expired = -1;
 
-    /** @var \Drupal\rules\Core\RulesActionInterface $clear_action */
+    /** @var RulesActionInterface $clear_action */
     $clear_action = \Drupal::service('plugin.manager.rules_action')
       ->createInstance('rules_flood_clear_event');
     $clear_action->setContextValue('name', $name);
diff --git a/tests/src/Unit/Integration/Condition/PathTextComparisonTest.php b/tests/src/Unit/Integration/Condition/PathTextComparisonTest.php
index 92cc178..83e4616 100644
--- a/tests/src/Unit/Integration/Condition/PathTextComparisonTest.php
+++ b/tests/src/Unit/Integration/Condition/PathTextComparisonTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\tr_rulez\Unit\Integration\Condition;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
+use Drupal\rules\Core\RulesConditionInterface;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Tests\rules\Unit\Integration\RulesIntegrationTestBase;
 
@@ -11,17 +14,18 @@ use Drupal\Tests\rules\Unit\Integration\RulesIntegrationTestBase;
  */
 class PathTextComparisonTest extends RulesIntegrationTestBase {
 
+  use ProphecyTrait;
   /**
    * The mocked current path stack service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack|\Prophecy\Prophecy\ProphecyInterface
+   * @var CurrentPathStack|ProphecyInterface
    */
   protected $currentPathStack;
 
   /**
    * The condition to be tested.
    *
-   * @var \Drupal\rules\Core\RulesConditionInterface
+   * @var RulesConditionInterface
    */
   protected $condition;
 
diff --git a/tests/src/Unit/Integration/Condition/SiteIsInMaintenanceModeTest.php b/tests/src/Unit/Integration/Condition/SiteIsInMaintenanceModeTest.php
index 2d13502..52cfcf4 100644
--- a/tests/src/Unit/Integration/Condition/SiteIsInMaintenanceModeTest.php
+++ b/tests/src/Unit/Integration/Condition/SiteIsInMaintenanceModeTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\tr_rulez\Unit\Integration\Condition;
 
+use Drupal\rules\Core\RulesConditionInterface;
+use Drupal\Core\State\StateInterface;
 use Drupal\Core\KeyValueStore\KeyValueMemoryFactory;
 use Drupal\Core\State\State;
 use Drupal\Tests\rules\Unit\Integration\RulesIntegrationTestBase;
@@ -15,14 +17,14 @@ class SiteIsInMaintenanceModeTest extends RulesIntegrationTestBase {
   /**
    * The condition to be tested.
    *
-   * @var \Drupal\rules\Core\RulesConditionInterface
+   * @var RulesConditionInterface
    */
   protected $condition;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
diff --git a/tests/src/Unit/Integration/RulesAction/CacheTagInvalidatorTest.php b/tests/src/Unit/Integration/RulesAction/CacheTagInvalidatorTest.php
index a48d6fc..4c00c0e 100644
--- a/tests/src/Unit/Integration/RulesAction/CacheTagInvalidatorTest.php
+++ b/tests/src/Unit/Integration/RulesAction/CacheTagInvalidatorTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\tr_rulez\Unit\Integration\RulesAction;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\rules\Core\RulesActionInterface;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Tests\rules\Unit\Integration\RulesIntegrationTestBase;
@@ -14,24 +17,25 @@ use Psr\Log\LoggerInterface;
  * @requires module rules
  */
 class CacheTagInvalidatorTest extends RulesIntegrationTestBase {
+  use ProphecyTrait;
   /**
    * The action to be tested.
    *
-   * @var \Drupal\rules\Core\RulesActionInterface
+   * @var RulesActionInterface
    */
   protected $action;
 
   /**
    * The Rules logger channel.
    *
-   * @var \Psr\Log\LoggerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var LoggerInterface|ProphecyInterface
    */
   protected $logger;
 
   /**
    * The cache_tags.invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var CacheTagsInvalidatorInterface|ProphecyInterface
    */
   protected $cacheTagsInvalidator;
 
diff --git a/tests/src/Unit/XorExpressionTest.php b/tests/src/Unit/XorExpressionTest.php
index 1274511..bfd7962 100644
--- a/tests/src/Unit/XorExpressionTest.php
+++ b/tests/src/Unit/XorExpressionTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\tr_rulez\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\rules\Engine\ConditionExpressionContainerInterface;
 use Drupal\Tests\rules\Unit\RulesUnitTestBase;
 use Drupal\rules\Context\ExecutionStateInterface;
 use Drupal\rules\Engine\ConditionExpressionInterface;
@@ -14,10 +16,11 @@ use Prophecy\Argument;
  */
 class XorExpressionTest extends RulesUnitTestBase {
 
+  use ProphecyTrait;
   /**
    * The 'xor' condition container being tested.
    *
-   * @var \Drupal\rules\Engine\ConditionExpressionContainerInterface
+   * @var ConditionExpressionContainerInterface
    */
   protected $xor;
 
diff --git a/tr_rulez.module b/tr_rulez.module
index d8b9493..e41fae5 100644
--- a/tr_rulez.module
+++ b/tr_rulez.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * The tr_rulez module.
@@ -32,7 +33,7 @@ function tr_rulez_help($route_name, RouteMatchInterface $route_match) {
 function tr_rulez_entity_type_alter(array &$entity_types) {
   $config = \Drupal::config('tr_rulez.settings');
   if ($config->get('ui_choice') == 1) {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+    /** @var EntityTypeInterface[] $entity_types */
     $entity_types['rules_reaction_rule']->setListBuilderClass('Drupal\tr_rulez\Controller\RulesReactionListBuilder');
     $entity_types['rules_reaction_rule']->setFormClass('edit', 'Drupal\tr_rulez\Form\ReactionRuleEditForm');
     $entity_types['rules_reaction_rule']->setLinkTemplate('clone', '/admin/config/workflow/rules/reactions/clone/{rules_reaction_rule}');
@@ -132,7 +133,7 @@ function tr_rulez_entity_bundle_delete($entity_type_name, $bundle_name) {
  * Implements hook_ENTITY_TYPE_update() for the User entity.
  */
 function tr_rulez_user_update(UserInterface $account) {
-  /** @var \Drupal\user\UserInterface $original */
+  /** @var UserInterface $original */
   $original = $account->original;
 
   if (!$original->isBlocked() && $account->isBlocked()) {
