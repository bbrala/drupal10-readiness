diff --git a/inc/cron_pull.inc b/inc/cron_pull.inc
index 095c0ad..8aa8767 100644
--- a/inc/cron_pull.inc
+++ b/inc/cron_pull.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\file\FileInterface;
 /**
  * @file
  * Pull cron function for Loco Translate module.
@@ -34,8 +35,8 @@ function loco_translate_cron_pull($langcode, array $settings) {
     throw new \RuntimeException(sprintf('Download error. Could not move downloaded file from Loco to destination %s.', $destination_directory));
   }
 
-  /** @var \Drupal\file\FileInterface $file */
-  $file = file_save_data($response->__toString(), $destination_directory);
+  /** @var FileInterface $file */
+  $file = \Drupal::service('file.repository')->writeData($response->__toString(), $destination_directory);
   $path = $file_system->realPath($file->getFileUri());
   $report = $translations_import->fromFile($path, $langcode);
 
diff --git a/src/Commands/PullCommand.php b/src/Commands/PullCommand.php
index 98cc9a0..5156ecc 100644
--- a/src/Commands/PullCommand.php
+++ b/src/Commands/PullCommand.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\loco_translate\Commands;
 
+use Drupal\loco_translate\Exception\LocoApiException;
+use Drupal\loco_translate\Exception\LocoTranslateException;
+use Drupal\file\FileInterface;
 use Drupal\loco_translate\Loco\Pull;
 use Drupal\loco_translate\TranslationsImport;
 use Drush\Commands\DrushCommands;
@@ -15,32 +18,32 @@ class PullCommand extends DrushCommands {
   /**
    * Loco Pull Api Wrapper.
    *
-   * @var \Drupal\loco_translate\Loco\Pull
+   * @var Pull
    */
   private $locoPull;
 
   /**
    * The Translation importer.
    *
-   * @var \Drupal\loco_translate\TranslationsImport
+   * @var TranslationsImport
    */
   protected $translationsImport;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * PullCommand constructor.
    *
-   * @param \Drupal\loco_translate\Loco\Pull $locoPull
+   * @param Pull $locoPull
    *   The Loco Push Api Wrapper.
-   * @param \Drupal\loco_translate\TranslationsImport $translations_import
+   * @param TranslationsImport $translations_import
    *   The translation import service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(Pull $locoPull, TranslationsImport $translations_import, FileSystemInterface $file_system) {
@@ -58,8 +61,8 @@ class PullCommand extends DrushCommands {
    * @param array $options
    *   (Optional) An array of options.
    *
-   * @throws \Drupal\loco_translate\Exception\LocoApiException
-   * @throws \Drupal\loco_translate\Exception\LocoTranslateException
+   * @throws LocoApiException
+   * @throws LocoTranslateException
    *
    * @command loco_translate:pull
    *
@@ -94,8 +97,8 @@ class PullCommand extends DrushCommands {
       throw new \RuntimeException(sprintf('Download error. Could not move downloaded file from Loco to destination %s.', $destination_directory));
     }
 
-    /** @var \Drupal\file\FileInterface $file */
-    $file = file_save_data($response->__toString(), $destination_directory);
+    /** @var FileInterface $file */
+    $file = \Drupal::service('file.repository')->writeData($response->__toString(), $destination_directory);
 
     // Be sure the file is temporary, so will be garbage collected.
     $file->setTemporary();
diff --git a/src/Commands/PushCommand.php b/src/Commands/PushCommand.php
index 3807477..8154bdd 100644
--- a/src/Commands/PushCommand.php
+++ b/src/Commands/PushCommand.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\loco_translate\Commands;
 
+use Drupal\loco_translate\Exception\LocoApiException;
+use Drupal\loco_translate\Exception\LocoTranslateException;
 use Drush\Commands\DrushCommands;
 use Drupal\loco_translate\Loco\Push;
 use Drupal\loco_translate\Utility;
@@ -14,23 +16,23 @@ class PushCommand extends DrushCommands {
   /**
    * Loco Push Api Wrapper.
    *
-   * @var \Drupal\loco_translate\Loco\Push
+   * @var Push
    */
   private $locoPush;
 
   /**
    * The Utility service of Loco Translate.
    *
-   * @var \Drupal\loco_translate\Utility
+   * @var Utility
    */
   private $utility;
 
   /**
    * PushCommand constructor.
    *
-   * @param \Drupal\loco_translate\Loco\Push $locoPush
+   * @param Push $locoPush
    *   The Loco Push Api Wrapper.
-   * @param \Drupal\loco_translate\Utility $utility
+   * @param Utility $utility
    *   The Utility service of Loco Translate.
    */
   public function __construct(Push $locoPush, Utility $utility) {
@@ -46,8 +48,8 @@ class PushCommand extends DrushCommands {
    * @param array $options
    *   (Optional) An array of options.
    *
-   * @throws \Drupal\loco_translate\Exception\LocoApiException
-   * @throws \Drupal\loco_translate\Exception\LocoTranslateException
+   * @throws LocoApiException
+   * @throws LocoTranslateException
    *
    * @command loco_translate:push
    *
diff --git a/src/Controller/OverviewController.php b/src/Controller/OverviewController.php
index 24355b7..7d7d05f 100644
--- a/src/Controller/OverviewController.php
+++ b/src/Controller/OverviewController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\loco_translate\Controller;
 
+use GuzzleHttp\Command\Result;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\State\StateInterface;
@@ -20,41 +21,41 @@ class OverviewController extends ControllerBase {
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Cache backend service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * Construct a OverviewController object.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The configuration factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache backend.
    */
   public function __construct(StateInterface $state, ConfigFactoryInterface $config_factory, DateFormatterInterface $date_formatter, CacheBackendInterface $cache) {
@@ -191,7 +192,7 @@ class OverviewController extends ControllerBase {
       $this->cache->set('loco_translate.cache.api.assets', $assets, CacheBackendInterface::CACHE_PERMANENT);
 
       // Get the Loco Status.
-      /** @var \GuzzleHttp\Command\Result $result */
+      /** @var Result $result */
       $result = $client->ping();
       $this->cache->set('loco_translate.cache.versions', [
         'api' => $result->offsetGet('version'),
diff --git a/src/Exception/LocoApiException.php b/src/Exception/LocoApiException.php
index 05952e3..0928e76 100644
--- a/src/Exception/LocoApiException.php
+++ b/src/Exception/LocoApiException.php
@@ -13,7 +13,7 @@ class LocoApiException extends \Exception {
   /**
    * The upload to Loco API has failed.
    *
-   * @param \GuzzleHttp\Command\Result $result
+   * @param Result $result
    *   A Loco response message.
    *
    * @return LocoApiException
@@ -36,7 +36,7 @@ class LocoApiException extends \Exception {
   /**
    * Download from Loco API has failed.
    *
-   * @param Loco\Http\Result\RawResult $raw_result
+   * @param RawResult $raw_result
    *   A Loco response message.
    *
    * @return LocoApiException
diff --git a/src/Form/PullForm.php b/src/Form/PullForm.php
index 365aa84..c5dd43f 100644
--- a/src/Form/PullForm.php
+++ b/src/Form/PullForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\loco_translate\Form;
 
+use Drupal\file\FileInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\loco_translate\Utility;
@@ -21,21 +22,21 @@ class PullForm extends FormBase {
   /**
    * The Utility service of Loco Translate.
    *
-   * @var \Drupal\loco_translate\Utility
+   * @var Utility
    */
   protected $utility;
 
   /**
    * The configurable language manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
@@ -49,7 +50,7 @@ class PullForm extends FormBase {
   /**
    * The Translation importer.
    *
-   * @var \Drupal\loco_translate\TranslationsImport
+   * @var TranslationsImport
    */
   protected $translationsImport;
 
@@ -69,15 +70,15 @@ class PullForm extends FormBase {
   /**
    * Constructs a form for language pull.
    *
-   * @param \Drupal\loco_translate\Utility $utility
+   * @param Utility $utility
    *   The Utility service of Loco Translate.
-   * @param \Drupal\language\ConfigurableLanguageManagerInterface $language_manager
+   * @param ConfigurableLanguageManagerInterface $language_manager
    *   The configurable language manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    * @param \Drupal\loco_translate\Loco\Pull $loco_pull
    *   The Loco translations pull manager.
-   * @param \Drupal\loco_translate\TranslationsImport $translatons_import
+   * @param TranslationsImport $translatons_import
    *   The Translation importer.
    */
   public function __construct(Utility $utility, ConfigurableLanguageManagerInterface $language_manager, FileSystemInterface $file_system, LocoPull $loco_pull, TranslationsImport $translatons_import) {
@@ -163,8 +164,8 @@ class PullForm extends FormBase {
           throw new \RuntimeException(sprintf('Download error. Could not move downloaded file from Loco to destination %s.', $destination_directory));
         }
 
-        /** @var \Drupal\file\FileInterface $file */
-        $file = file_save_data($response->__toString(), $destination_directory);
+        /** @var FileInterface $file */
+        $file = \Drupal::service('file.repository')->writeData($response->__toString(), $destination_directory);
         $form_state->setValue('files[' . $langcode . ']', $this->fileSystem->realPath($file->getFileUri()));
       }
       catch (\Exception $e) {
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index e200aff..9842270 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\loco_translate\Form;
 
+use GuzzleHttp\Command\Result;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -20,16 +21,16 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The configurable language manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a loco translate settings form object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\language\ConfigurableLanguageManagerInterface $language_manager
+   * @param ConfigurableLanguageManagerInterface $language_manager
    *   The configurable language manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConfigurableLanguageManagerInterface $language_manager) {
@@ -229,7 +230,7 @@ class SettingsForm extends ConfigFormBase {
    *   The API Key to validate.
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   private function validateKey($key, array &$form, FormStateInterface $form_state) {
@@ -242,7 +243,7 @@ class SettingsForm extends ConfigFormBase {
     ]);
 
     try {
-      /** @var \GuzzleHttp\Command\Result */
+      /** @var Result */
       $client->authVerify();
     }
     catch (\Exception $e) {
@@ -257,7 +258,7 @@ class SettingsForm extends ConfigFormBase {
    *   An associative array containing the values to validate.
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   private function validatePushAutomation(array $values, array &$form, FormStateInterface $form_state) {
@@ -285,7 +286,7 @@ class SettingsForm extends ConfigFormBase {
    *   An associative array containing the values to validate.
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   private function validatePullAutomation(array $values, array &$form, FormStateInterface $form_state) {
diff --git a/src/Loco/ApiClientFactory.php b/src/Loco/ApiClientFactory.php
index 1d59158..c2ee81c 100644
--- a/src/Loco/ApiClientFactory.php
+++ b/src/Loco/ApiClientFactory.php
@@ -13,10 +13,10 @@ class ApiClientFactory {
   /**
    * Get the Loco API Client with a full access key.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Drupal Config Factory.
    *
-   * @return \Loco\Http\ApiClient
+   * @return ApiClient
    *   The Loco ApiClient.
    */
   public static function withFullAccess(ConfigFactoryInterface $config_factory) {
@@ -31,10 +31,10 @@ class ApiClientFactory {
   /**
    * Get the Loco API Client with a read-only access key.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Drupal Config Factory.
    *
-   * @return \Loco\Http\ApiClient
+   * @return ApiClient
    *   The Loco ApiClient.
    */
   public static function withReadOnlyAccess(ConfigFactoryInterface $config_factory) {
diff --git a/src/Loco/Pull.php b/src/Loco/Pull.php
index f12925b..b75eb5c 100644
--- a/src/Loco/Pull.php
+++ b/src/Loco/Pull.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\loco_translate\Loco;
 
+use Loco\Http\Result\RawResult;
 use Loco\Http\ApiClient;
 use Drupal\loco_translate\Utility;
 use Drupal\loco_translate\Exception\LocoTranslateException;
@@ -15,23 +16,23 @@ class Pull {
   /**
    * The Loco SDK HTTP client.
    *
-   * @var \Loco\Http\ApiClient
+   * @var ApiClient
    */
   private $client;
 
   /**
    * The Utility service of Loco Translate.
    *
-   * @var \Drupal\loco_translate\Utility
+   * @var Utility
    */
   protected $utility;
 
   /**
    * Constructor.
    *
-   * @param \Loco\Http\ApiClient $api_client
+   * @param ApiClient $api_client
    *   Loco Api Client.
-   * @param \Drupal\loco_translate\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Loco Translate.
    */
   public function __construct(ApiClient $api_client, Utility $utility) {
@@ -42,7 +43,7 @@ class Pull {
   /**
    * Set the API Client.
    *
-   * @param \Loco\Http\ApiClient $api_client
+   * @param ApiClient $api_client
    *   Loco Api Client.
    */
   public function setApiClient(ApiClient $api_client) {
@@ -59,11 +60,11 @@ class Pull {
    * @param string $index
    *   Override lookup key for the file format: "id", "text" or a custom alias.
    *
-   * @return \Loco\Http\Result\RawResult
+   * @return RawResult
    *   The result of the query.
    *
-   * @throws \Drupal\loco_translate\Exception\LocoApiException
-   * @throws \Drupal\loco_translate\Exception\LocoTranslateException
+   * @throws LocoApiException
+   * @throws LocoTranslateException
    *
    * @see https://localise.biz/api/#!/import/import
    */
@@ -74,7 +75,7 @@ class Pull {
     }
 
     try {
-      /** @var \Loco\Http\Result\RawResult */
+      /** @var RawResult */
       $result = $this->client->exportLocale([
         'ext' => 'po',
         'index' => $index,
diff --git a/src/Loco/Push.php b/src/Loco/Push.php
index bdf2177..88ad3cc 100644
--- a/src/Loco/Push.php
+++ b/src/Loco/Push.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\loco_translate\Loco;
 
+use GuzzleHttp\Command\Result;
 use Loco\Http\ApiClient;
 use Drupal\loco_translate\Exception\LocoTranslateException;
 use Drupal\loco_translate\Exception\LocoApiException;
@@ -14,14 +15,14 @@ class Push {
   /**
    * The Loco SDK HTTP client.
    *
-   * @var \Loco\Http\ApiClient
+   * @var ApiClient
    */
   private $client;
 
   /**
    * Constructor.
    *
-   * @param \Loco\Http\ApiClient $api_client
+   * @param ApiClient $api_client
    *   Loco Api Client.
    */
   public function __construct(ApiClient $api_client) {
@@ -31,7 +32,7 @@ class Push {
   /**
    * Set the API Client.
    *
-   * @param \Loco\Http\ApiClient $api_client
+   * @param ApiClient $api_client
    *   Loco Api Client.
    */
   public function setApiClient(ApiClient $api_client) {
@@ -65,7 +66,7 @@ class Push {
     $data = file_get_contents($file);
 
     try {
-      /** @var \GuzzleHttp\Command\Result */
+      /** @var Result */
       $result = $this->client->import([
         'data' => $data,
         'locale' => $locale,
diff --git a/src/TranslationsImport.php b/src/TranslationsImport.php
index d9621d0..3d7f03f 100644
--- a/src/TranslationsImport.php
+++ b/src/TranslationsImport.php
@@ -15,32 +15,32 @@ class TranslationsImport {
   /**
    * The Utility service of Loco Translate.
    *
-   * @var \Drupal\loco_translate\Utility
+   * @var Utility
    */
   protected $utility;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Class constructor.
    *
-   * @param \Drupal\loco_translate\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Loco Translate.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(Utility $utility, ModuleHandlerInterface $module_handler, FileSystemInterface $file_system) {
diff --git a/src/TwigExtension/LocoExport.php b/src/TwigExtension/LocoExport.php
index 8c53eea..cbb23f7 100644
--- a/src/TwigExtension/LocoExport.php
+++ b/src/TwigExtension/LocoExport.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\loco_translate\TwigExtension;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Symfony\Component\DependencyInjection\ContainerAwareTrait;
 
 /**
@@ -36,7 +37,7 @@ class LocoExport extends \Twig_Extension {
    *   The export GET link for Loco API.
    */
   public function exportLink($locale) {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $this->container->get('config.factory');
 
     $config = $config_factory->get('loco_translate.settings');
diff --git a/src/Utility.php b/src/Utility.php
index 86a6b8f..e4e82f9 100644
--- a/src/Utility.php
+++ b/src/Utility.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\loco_translate;
 
+use Drupal\language\ConfigurableLanguageManager;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\State\StateInterface;
 
@@ -12,23 +13,23 @@ class Utility {
   /**
    * The language Manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManager
+   * @var ConfigurableLanguageManager
    */
   protected $languageManager;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(LanguageManagerInterface $language_manager, StateInterface $state) {
diff --git a/tests/src/Kernel/Cron/CronPullTest.php b/tests/src/Kernel/Cron/CronPullTest.php
index e87cf17..8acc96c 100644
--- a/tests/src/Kernel/Cron/CronPullTest.php
+++ b/tests/src/Kernel/Cron/CronPullTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\loco_translate\Kernel\Cron;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Config\Config;
+use Drupal\Core\State\StateInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\loco_translate\Loco\Pull as LocoPull;
 use Drupal\loco_translate\TranslationsImport;
@@ -21,17 +24,18 @@ use org\bovigo\vfs\vfsStream;
  */
 class CronPullTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * An editable config object for access to 'loco_translate.settings'.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $cronConfig;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -77,7 +81,7 @@ class CronPullTest extends KernelTestBase {
     $this->cronConfig->set('automation.pull.interval', 3600)->save();
     $this->cronConfig->set('automation.pull.langcodes', ['en' => 'en'])->save();
 
-    /** @var \Drupal\Core\State\StateInterface $state */
+    /** @var StateInterface $state */
     $this->state = $this->container->get('state');
 
     // Pretend that cron(s) has never been run.
@@ -90,7 +94,7 @@ class CronPullTest extends KernelTestBase {
    * @dataProvider goodIntervalProvider
    */
   public function testCronPullGoodInterval($langcode, $last_run, $interval) {
-    $data = file_get_contents(drupal_get_path('module', 'loco_translate_test') . '/responses/export-200.po');
+    $data = file_get_contents(\Drupal::service('extension.list.module')->getPath('loco_translate_test') . '/responses/export-200.po');
     $response = new Response(200, [], $data);
     $response = RawResult::fromResponse($response);
 
@@ -205,7 +209,7 @@ class CronPullTest extends KernelTestBase {
       ->set('translation.path', '')
       ->save();
 
-    $data = file_get_contents(drupal_get_path('module', 'loco_translate_test') . '/responses/export-200.po');
+    $data = file_get_contents(\Drupal::service('extension.list.module')->getPath('loco_translate_test') . '/responses/export-200.po');
     $response = new Response(200, [], $data);
     $response = RawResult::fromResponse($response);
 
@@ -238,7 +242,7 @@ class CronPullTest extends KernelTestBase {
       ->set('translation.path', '')
       ->save();
 
-    $data = file_get_contents(drupal_get_path('module', 'loco_translate_test') . '/responses/export-200.po');
+    $data = file_get_contents(\Drupal::service('extension.list.module')->getPath('loco_translate_test') . '/responses/export-200.po');
     $response = new Response(200, [], $data);
     $response = RawResult::fromResponse($response);
 
diff --git a/tests/src/Kernel/Cron/CronPushTest.php b/tests/src/Kernel/Cron/CronPushTest.php
index 445acba..f90595c 100644
--- a/tests/src/Kernel/Cron/CronPushTest.php
+++ b/tests/src/Kernel/Cron/CronPushTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\loco_translate\Kernel\Cron;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Config\Config;
+use Drupal\Core\State\StateInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\loco_translate\Loco\Push as LocoPush;
 use Prophecy\Argument;
@@ -17,6 +20,7 @@ use Prophecy\Argument;
  */
 class CronPushTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * The directory of tests .po files.
    *
@@ -29,14 +33,14 @@ class CronPushTest extends KernelTestBase {
   /**
    * An editable config object for access to 'loco_translate.settings'.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $cronConfig;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -61,14 +65,14 @@ class CronPushTest extends KernelTestBase {
     $this->cronConfig = \Drupal::configFactory()->getEditable('loco_translate.settings');
 
     /** @var string $translationsPath */
-    $this->translationsPath = drupal_get_path('module', 'loco_translate_test') . DIRECTORY_SEPARATOR . 'assets';
+    $this->translationsPath = \Drupal::service('extension.list.module')->getPath('loco_translate_test') . DIRECTORY_SEPARATOR . 'assets';
 
     // Save the default push configurations.
     $this->cronConfig->set('automation.push.interval', 3600)->save();
     $this->cronConfig->set('automation.push.template', $this->translationsPath . '/en.po')->save();
     $this->cronConfig->set('automation.push.langcodes', ['en' => 'en'])->save();
 
-    /** @var \Drupal\Core\State\StateInterface $state */
+    /** @var StateInterface $state */
     $this->state = $this->container->get('state');
 
     // Pretend that cron(s) has never been run.
diff --git a/tests/src/Kernel/PullCommandTest.php b/tests/src/Kernel/PullCommandTest.php
index 6655990..fcca99a 100644
--- a/tests/src/Kernel/PullCommandTest.php
+++ b/tests/src/Kernel/PullCommandTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\loco_translate\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 /**
  * @coversDefaultClass \Drupal\loco_translate\Commands\PullCommand
  *
@@ -12,6 +13,7 @@ namespace Drupal\Tests\loco_translate\Kernel;
  */
 final class PullCommandTest extends TranslationsTestsBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -83,7 +85,7 @@ final class PullCommandTest extends TranslationsTestsBase {
    */
   public function testPull(): void {
     // Mock the Loco Response export response.
-    $data = file_get_contents(drupal_get_path('module', 'loco_translate_test') . '/responses/export-200.po');
+    $data = file_get_contents(\Drupal::service('extension.list.module')->getPath('loco_translate_test') . '/responses/export-200.po');
     $response = new Response(200, [], $data);
     $response = RawResult::fromResponse($response);
     $this->locoPull->fromLocoToDrupal('en', NULL, NULL)
diff --git a/tests/src/Kernel/TranslationsImportTest.php b/tests/src/Kernel/TranslationsImportTest.php
index 6359b7e..f8b122c 100644
--- a/tests/src/Kernel/TranslationsImportTest.php
+++ b/tests/src/Kernel/TranslationsImportTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\loco_translate\Kernel;
 
+use Drupal\loco_translate\TranslationsImport;
 use Drupal\loco_translate\Exception\LocoTranslateException;
 
 /**
@@ -23,7 +24,7 @@ class TranslationsImportTest extends TranslationsTestsBase {
   /**
    * The Translation importer.
    *
-   * @var \Drupal\loco_translate\TranslationsImport
+   * @var TranslationsImport
    */
   protected $translationsImport;
 
@@ -43,11 +44,11 @@ class TranslationsImportTest extends TranslationsTestsBase {
   protected function setUp(): void {
     parent::setUp();
 
-    /** @var \Drupal\loco_translate\TranslationsImport $translationsImport */
+    /** @var TranslationsImport $translationsImport */
     $this->translationsImport = $this->container->get('loco_translate.translations.import');
 
     /** @var string $translationsPath */
-    $this->translationsPath = drupal_get_path('module', 'loco_translate_test') . DIRECTORY_SEPARATOR . 'assets';
+    $this->translationsPath = \Drupal::service('extension.list.module')->getPath('loco_translate_test') . DIRECTORY_SEPARATOR . 'assets';
   }
 
   /**
diff --git a/tests/src/Kernel/TranslationsTest.php b/tests/src/Kernel/TranslationsTest.php
index 686cdba..2cdf290 100644
--- a/tests/src/Kernel/TranslationsTest.php
+++ b/tests/src/Kernel/TranslationsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\loco_translate\Kernel;
 
+use Drupal\loco_translate\TranslationsImport;
 /**
  * Cover default behaviors of translations.
  *
@@ -14,7 +15,7 @@ class TranslationsTest extends TranslationsTestsBase {
   /**
    * The Translation importer.
    *
-   * @var \Drupal\loco_translate\TranslationsImport
+   * @var TranslationsImport
    */
   protected $translationsImport;
 
diff --git a/tests/src/Kernel/TranslationsTestsBase.php b/tests/src/Kernel/TranslationsTestsBase.php
index 8b7a2e8..0f3e92b 100644
--- a/tests/src/Kernel/TranslationsTestsBase.php
+++ b/tests/src/Kernel/TranslationsTestsBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\loco_translate\Kernel;
 
+use Drupal\locale\TranslationString;
+use Drupal\locale\StringStorageInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
 
@@ -13,14 +15,14 @@ abstract class TranslationsTestsBase extends KernelTestBase {
   /**
    * Collection of tests translations strings.
    *
-   * @var \Drupal\locale\TranslationString[]
+   * @var TranslationString[]
    */
   protected $translationsStrings;
 
   /**
    * String translation storage object.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $localStorage;
 
@@ -38,7 +40,7 @@ abstract class TranslationsTestsBase extends KernelTestBase {
 
     $this->setUpLanguages();
 
-    /** @var \Drupal\locale\StringStorageInterface $localStorage */
+    /** @var StringStorageInterface $localStorage */
     $this->localStorage = $this->container->get('locale.storage');
   }
 
diff --git a/tests/src/Unit/LocoPullTest.php b/tests/src/Unit/LocoPullTest.php
index 53969a0..51a8dbd 100644
--- a/tests/src/Unit/LocoPullTest.php
+++ b/tests/src/Unit/LocoPullTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\loco_translate\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\loco_translate\Loco\Pull as locoPull;
 use Loco\Http\ApiClient;
@@ -20,6 +22,7 @@ use Prophecy\Argument;
  */
 class LocoPullTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The Loco translations pull manager.
    *
@@ -30,7 +33,7 @@ class LocoPullTest extends UnitTestCase {
   /**
    * A mock of Loco SDK API client.
    *
-   * @var \Loco\Http\ApiClient
+   * @var ApiClient
    */
   private $apiClient;
 
@@ -38,7 +41,7 @@ class LocoPullTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function setUp(): void {
-    /** @var \Drupal\loco_translate\Utility|\Prophecy\Prophecy\ProphecyInterface $language_manager */
+    /** @var Utility|ProphecyInterface $language_manager */
     $utility = $this->prophesize(Utility::class);
     $utility->isLangcodeEnabled(Argument::any())
       ->willReturn(TRUE);
diff --git a/tests/src/Unit/LocoPushTest.php b/tests/src/Unit/LocoPushTest.php
index 7ed51c6..d943433 100644
--- a/tests/src/Unit/LocoPushTest.php
+++ b/tests/src/Unit/LocoPushTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\loco_translate\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\loco_translate\Loco\Push as LocoPush;
 use Loco\Http\ApiClient;
@@ -17,6 +18,7 @@ use Drupal\loco_translate\Exception\LocoApiException;
  */
 class LocoPushTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Uploader to Loco.
    *
@@ -27,7 +29,7 @@ class LocoPushTest extends UnitTestCase {
   /**
    * A mock of Loco SDK API client.
    *
-   * @var \Loco\Http\ApiClient
+   * @var ApiClient
    */
   private $apiClient;
 
diff --git a/tests/src/Unit/UtilityTestBase.php b/tests/src/Unit/UtilityTestBase.php
index 155c331..31fce46 100644
--- a/tests/src/Unit/UtilityTestBase.php
+++ b/tests/src/Unit/UtilityTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\loco_translate\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\loco_translate\Utility;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -13,17 +15,18 @@ use Drupal\Core\Language\Language;
  */
 abstract class UtilityTestBase extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The Utility service of Loco Translate.
    *
-   * @var \Drupal\loco_translate\Utility
+   * @var Utility
    */
   protected $utility;
 
   /**
    * The state mocked service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -49,9 +52,9 @@ abstract class UtilityTestBase extends UnitTestCase {
       'locked'    => FALSE,
     ]);
 
-    /** @var \Drupal\Core\Language\LanguageManagerInterface|\Prophecy\Prophecy\ProphecyInterface $language_manager */
+    /** @var LanguageManagerInterface|ProphecyInterface $language_manager */
     $language_manager = $this->prophesize(LanguageManagerInterface::class);
-    /** @var \Drupal\Core\State\StateInterface|\Prophecy\Prophecy\ProphecyInterface $state */
+    /** @var StateInterface|ProphecyInterface $state */
     $this->state = $this->prophesize(StateInterface::class);
 
     $this->utility = new Utility($language_manager->reveal(), $this->state->reveal());
