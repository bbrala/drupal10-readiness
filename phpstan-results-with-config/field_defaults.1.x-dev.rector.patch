diff --git a/field_defaults.info.yml b/field_defaults.info.yml
index e22083e..52b30f0 100644
--- a/field_defaults.info.yml
+++ b/field_defaults.info.yml
@@ -1,8 +1,7 @@
 name: Field Defaults
 description: Adds and overwrites default field values on existing content.
 type: module
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 configure: field_defaults.field_defaults_settings_form
 dependencies:
   - drupal:field_ui
diff --git a/field_defaults.module b/field_defaults.module
index 4afc49b..8ad95c5 100644
--- a/field_defaults.module
+++ b/field_defaults.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\field\FieldConfigInterface;
+use Drupal\Core\Entity\ContentEntityBase;
 /**
  * @file
  * Allows updating existing content with default values.
@@ -32,7 +34,7 @@ function field_defaults_form_field_config_edit_form_alter(&$form, FormStateInter
   if (\Drupal::currentUser()->hasPermission('administer field defaults')) {
     if (isset($form['default_value'])) {
 
-      /** @var \Drupal\field\FieldConfigInterface $field */
+      /** @var FieldConfigInterface $field */
       $field = $form_state->getFormObject()->getEntity();
       $field_language = $field->language();
 
@@ -86,7 +88,7 @@ function field_defaults_form_field_config_edit_form_alter(&$form, FormStateInter
 function _field_defaults_ui_submit(&$form, FormStateInterface $form_state) {
   $values = $form_state->getValue(['default_value_input', 'field_defaults'], FALSE);
   if (!empty($values['update_defaults'])) {
-    /** @var \Drupal\field\FieldConfigInterface $entity */
+    /** @var FieldConfigInterface $entity */
     $entity = $form_state->getFormObject()->getEntity();
     $field_name = $entity->getName();
 
@@ -156,7 +158,7 @@ function _field_defaults_ui_submit(&$form, FormStateInterface $form_state) {
 function field_defaults_update_default($type, $id, $field_name, $field_value, $languages, $no_overwrite, &$context) {
   $has_changed = FALSE;
 
-  /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+  /** @var ContentEntityBase $entity */
   $entity = \Drupal::entityTypeManager()->getStorage($type)->load($id);
 
   // First set the default on the current language.
diff --git a/src/Commands/FieldDefaultsBulkCommands.php b/src/Commands/FieldDefaultsBulkCommands.php
index e58b403..2efb2a6 100644
--- a/src/Commands/FieldDefaultsBulkCommands.php
+++ b/src/Commands/FieldDefaultsBulkCommands.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\field_defaults\Commands;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drush\Commands\DrushCommands;
@@ -15,23 +17,23 @@ class FieldDefaultsBulkCommands extends DrushCommands {
   /**
    * Entity type service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * Logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private $loggerChannelFactory;
 
   /**
    * Construct for field defaults drush commands.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Logger service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LoggerChannelFactoryInterface $loggerChannelFactory) {
@@ -56,9 +58,9 @@ class FieldDefaultsBulkCommands extends DrushCommands {
    * @param bool $no_overwrite
    *   Whether to overwrite existing data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws UserAbortException
    */
   public function fieldDefaultsBulkUpdate($entity_type, $entity_bundle, $field_name, $lang = '', $no_overwrite = TRUE) {
     $no_overwrite = filter_var($no_overwrite, FILTER_VALIDATE_BOOLEAN);
@@ -164,7 +166,7 @@ class FieldDefaultsBulkCommands extends DrushCommands {
       'title' => dt('Processing default values'),
       'operations' => $operations,
       'finished' => 'field_defaults_batch_finished',
-      'file' => drupal_get_path('module', 'field_defaults') . '/field_defaults.module',
+      'file' => \Drupal::service('extension.list.module')->getPath('field_defaults') . '/field_defaults.module',
     ];
 
     batch_set($batch);
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index f41d9f0..77afcd2 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -16,14 +16,14 @@ class SettingsForm extends FormBase {
   /**
    * Config Factory.
    *
-   * @var Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Messenger Service.
    *
-   * @var Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
diff --git a/src/Tests/BooleanTest.php b/src/Tests/BooleanTest.php
index c6797e0..3c567a8 100644
--- a/src/Tests/BooleanTest.php
+++ b/src/Tests/BooleanTest.php
@@ -18,7 +18,7 @@ class BooleanTest extends FieldDefaultsTestBase {
 
     // Ensure value is checked on any random node.
     $this->drupalGet('node/' . rand(1, 20) . '/edit');
-    $this->assertFieldChecked('edit-field-' . $fieldName . '-value');
+    $this->assertSession()->checkboxChecked('edit-field-' . $fieldName . '-value');
   }
 
 }
diff --git a/src/Tests/FieldDefaultsTestBase.php b/src/Tests/FieldDefaultsTestBase.php
index cdba8c0..0bc0706 100644
--- a/src/Tests/FieldDefaultsTestBase.php
+++ b/src/Tests/FieldDefaultsTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\field_defaults\Tests;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -12,7 +13,7 @@ class FieldDefaultsTestBase extends BrowserTestBase {
   /**
    * The administrator account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $administratorAccount;
 
@@ -35,7 +36,7 @@ class FieldDefaultsTestBase extends BrowserTestBase {
    *
    * Once installed, a content type with the desired field is created.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Install Drupal.
     parent::setUp();
 
@@ -96,7 +97,7 @@ class FieldDefaultsTestBase extends BrowserTestBase {
       'field_name' => $field_name,
       'label' => $field_name,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save and continue'));
+    $this->submitForm($edit, t('Save and continue'));
 
     // Fill out the $cardinality form as if we're not using an unlimited values.
     $edit = [
@@ -112,12 +113,18 @@ class FieldDefaultsTestBase extends BrowserTestBase {
     }
 
     // And now we save the cardinality settings.
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
-    $this->assertText(t('Updated field @name field settings.', ['@name' => $field_name]));
+    $this->submitForm($edit, t('Save field settings'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Updated field @name field settings.', ['@name' => $field_name]));
 
     // Save.
-    $this->drupalPostForm(NULL, [], t('Save settings'));
-    $this->assertText(t('Saved @name configuration.', ['@name' => $field_name]));
+    $this->submitForm([], t('Save settings'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Saved @name configuration.', ['@name' => $field_name]));
 
     return $field_name;
   }
@@ -140,11 +147,11 @@ class FieldDefaultsTestBase extends BrowserTestBase {
     ];
 
     // Run batch.
-    $this->drupalPostForm(NULL, $edit, t('Save settings'));
-    $this->assertNoRaw('&amp;nbsp;', 'Initial progress message is not double escaped.');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->responseNotContains('&amp;nbsp;');
     // Now also go to the next step.
     $this->maximumMetaRefreshCount = 1;
-    $this->assertRaw('<li class="messages__item">Default values were updated for 20 entities.</li>');
+    $this->assertSession()->responseContains('<li class="messages__item">Default values were updated for 20 entities.</li>');
   }
 
   /**
diff --git a/src/Tests/StringTest.php b/src/Tests/StringTest.php
index 401ba45..8119985 100644
--- a/src/Tests/StringTest.php
+++ b/src/Tests/StringTest.php
@@ -20,7 +20,7 @@ class StringTest extends FieldDefaultsTestBase {
     $this->drupalGet('node/' . rand(1, 20) . '/edit');
 
     $field_setup = $this->setupFieldByType('string');
-    $this->assertFieldByName('field_' . $fieldName . $field_setup['structure'], $field_setup['value']);
+    $this->assertSession()->fieldValueEquals('field_' . $fieldName . $field_setup['structure'], $field_setup['value']);
   }
 
 }
