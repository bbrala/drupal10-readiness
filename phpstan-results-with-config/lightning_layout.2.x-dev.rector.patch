diff --git a/lightning_layout.install b/lightning_layout.install
index 77c9426..be354c0 100644
--- a/lightning_layout.install
+++ b/lightning_layout.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\user\RoleInterface;
 /**
  * @file
  * Contains installation and update routines for Lightning Layout.
@@ -69,7 +70,7 @@ function lightning_layout_update_8005() {
 function lightning_layout_update_8006() {
   $role_storage = \Drupal::entityTypeManager()->getStorage('user_role');
 
-  /** @var \Drupal\user\RoleInterface[] $roles */
+  /** @var RoleInterface[] $roles */
   $roles = $role_storage->loadByProperties([
     'is_admin' => TRUE,
   ]);
diff --git a/lightning_layout.module b/lightning_layout.module
index b51591a..edbf61d 100644
--- a/lightning_layout.module
+++ b/lightning_layout.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Contains layout functionality for Lightning.
@@ -73,14 +75,14 @@ function lightning_layout_form_entity_view_display_edit_form_alter(array &$form,
  *
  * @param array $element
  *   The form element containing Layout Builder's entity view display options.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current form state.
  *
  * @return array
  *   The processed element.
  */
 function lightning_layout_tweak_layout_builder_ui(array $element, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+  /** @var EntityViewDisplayInterface $display */
   $display = $form_state->getFormObject()->getEntity();
 
   $layout_builder_enabled = $display->getThirdPartySetting('layout_builder', 'enable', FALSE);
@@ -146,7 +148,7 @@ function lightning_layout_field_widget_form_alter(&$element, FormStateInterface
  *   The view mode, or 'default' to retrieve the 'default' display object for
  *   this bundle.
  *
- * @return \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+ * @return EntityViewDisplayInterface
  *   The entity view display associated with the view mode.
  *
  * @see \Drupal\Core\Entity\EntityStorageInterface::create()
@@ -190,7 +192,7 @@ function lightning_layout_entity_get_display($entity_type, $bundle, $view_mode =
  * @param string $form_mode
  *   The form mode.
  *
- * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+ * @return EntityFormDisplayInterface
  *   The entity form display associated with the given form mode.
  *
  * @see \Drupal\Core\Entity\EntityStorageInterface::create()
@@ -252,10 +254,10 @@ function lightning_layout_layout_alter(array &$definitions) {
       continue;
     }
     if (in_array($layout_name, $core_layouts) && empty($definitions[$layout_name]->getIcon())) {
-      $definitions[$layout_name]->setIconPath(drupal_get_path('module', 'panels') . '/layouts/'.$layout_name.'/'.$layout_name.'.png');
+      $definitions[$layout_name]->setIconPath(\Drupal::service('extension.list.module')->getPath('panels') . '/layouts/'.$layout_name.'/'.$layout_name.'.png');
     }
     if (empty($definitions[$layout_name]->getIcon())) {
-      $definitions[$layout_name]->setIconPath(drupal_get_path('module', 'panels') . '/layouts/no-layout-preview.png');
+      $definitions[$layout_name]->setIconPath(\Drupal::service('extension.list.module')->getPath('panels') . '/layouts/no-layout-preview.png');
     }
   }
 }
diff --git a/modules/lightning_banner_block/lightning_banner_block.module b/modules/lightning_banner_block/lightning_banner_block.module
index e01b78f..b00c25e 100644
--- a/modules/lightning_banner_block/lightning_banner_block.module
+++ b/modules/lightning_banner_block/lightning_banner_block.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\block\BlockForm;
+use Drupal\block\BlockInterface;
+use Drupal\Core\Block\BlockPluginInterface;
 /**
  * @file
  * Contains hook implementations for Lightning Banner Block.
@@ -11,11 +14,11 @@ use Drupal\Core\Form\FormStateInterface;
  * Implements hook_form_FORM_ID_alter().
  */
 function lightning_banner_block_form_block_form_alter(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\block\BlockForm $form_object */
+  /** @var BlockForm $form_object */
   $form_object = $form_state->getFormObject();
-  /** @var \Drupal\block\BlockInterface $block */
+  /** @var BlockInterface $block */
   $block = $form_object->getEntity();
-  /** @var \Drupal\Core\Block\BlockPluginInterface $plugin */
+  /** @var BlockPluginInterface $plugin */
   $plugin = $block->getPlugin();
 
   if ($block->isNew() && $plugin->getBaseId() === 'block_content') {
diff --git a/modules/lightning_landing_page/tests/src/Kernel/InstallTest.php b/modules/lightning_landing_page/tests/src/Kernel/InstallTest.php
index b82af47..838a397 100644
--- a/modules/lightning_landing_page/tests/src/Kernel/InstallTest.php
+++ b/modules/lightning_landing_page/tests/src/Kernel/InstallTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_landing_page\Kernel;
 
+use Drupal\content_moderation\Plugin\WorkflowType\ContentModerationInterface;
 use Drupal\Core\Cache\NullBackend;
 use Drupal\Core\Extension\ModuleHandler;
 use Drupal\KernelTests\KernelTestBase;
@@ -51,13 +52,14 @@ class InstallTest extends KernelTestBase {
       'type' => 'content_moderation',
     ])->save();
 
-    /** @var \Drupal\content_moderation\Plugin\WorkflowType\ContentModerationInterface $type_plugin */
+    /** @var ContentModerationInterface $type_plugin */
     $type_plugin = Workflow::load('editorial')->getTypePlugin();
     $this->assertSame($should_apply, $type_plugin->appliesToEntityTypeAndBundle('node', 'landing_page'));
   }
 
   /**
    * Tests installing Lightning Workflow during config sync.
+   * @doesNotPerformAssertions
    */
   public function testInstallWorkflowDuringSync() {
     $this->container->get('config.installer')->setSyncing(TRUE);
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index fdc971b..aa4d2cb 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lightning_layout\Form;
 
+use Drupal\Core\Block\BlockManager;
+use Drupal\entity_block\Plugin\Derivative\EntityBlock;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -19,34 +22,34 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The block plugin manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface|\Drupal\Core\Block\BlockManager
+   * @var BlockManagerInterface|BlockManager
    */
   protected $blockManager;
 
   /**
    * The entity block deriver.
    *
-   * @var \Drupal\entity_block\Plugin\Derivative\EntityBlock
+   * @var EntityBlock
    */
   protected $deriver;
 
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block plugin manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translator
+   * @param TranslationInterface $translator
    *   The string translation service.
    * @param mixed $deriver
    *   (optional) The entity block deriver. If passed, must be an instance of
@@ -99,7 +102,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Allows access if the Entity Block deriver is available.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Whether access is allowed.
    */
   public function access() {
@@ -119,7 +122,7 @@ class SettingsForm extends ConfigFormBase {
     ];
 
     // Get the definitions of all entity types supported by Entity Block.
-    /** @var \Drupal\Core\Entity\EntityTypeInterface[] $available_types */
+    /** @var EntityTypeInterface[] $available_types */
     $available_types = array_intersect_key(
       $this->entityTypeManager->getDefinitions(),
       $this->deriver->getDerivativeDefinitions([])
diff --git a/tests/src/Functional/LayoutBuilderIntegrationTest.php b/tests/src/Functional/LayoutBuilderIntegrationTest.php
index ae419ae..a1e9873 100644
--- a/tests/src/Functional/LayoutBuilderIntegrationTest.php
+++ b/tests/src/Functional/LayoutBuilderIntegrationTest.php
@@ -30,7 +30,7 @@ class LayoutBuilderIntegrationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
   }
diff --git a/tests/src/Functional/UpdatePathTest.php b/tests/src/Functional/UpdatePathTest.php
index af01b04..fd85751 100644
--- a/tests/src/Functional/UpdatePathTest.php
+++ b/tests/src/Functional/UpdatePathTest.php
@@ -43,6 +43,7 @@ class UpdatePathTest extends UpdatePathTestBase {
 
   /**
    * Tests Lightning Layout's database update path.
+   * @doesNotPerformAssertions
    */
   public function testUpdatePath() {
     $this->runUpdates();
diff --git a/tests/src/Kernel/HooksTest.php b/tests/src/Kernel/HooksTest.php
index 19139d1..e928ec7 100644
--- a/tests/src/Kernel/HooksTest.php
+++ b/tests/src/Kernel/HooksTest.php
@@ -20,6 +20,7 @@ class HooksTest extends KernelTestBase {
 
   /**
    * Tests lightning_layout_block_alter().
+   * @doesNotPerformAssertions
    */
   public function testBlockAlter() {
     $this->expectNotToPerformAssertions();
diff --git a/tests/src/Kernel/LayoutAlterHookTest.php b/tests/src/Kernel/LayoutAlterHookTest.php
index 588e922..d85eb29 100644
--- a/tests/src/Kernel/LayoutAlterHookTest.php
+++ b/tests/src/Kernel/LayoutAlterHookTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_layout\Kernel;
 
+use Drupal\Core\Layout\LayoutDefinition;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -27,7 +28,7 @@ class LayoutAlterHookTest extends KernelTestBase {
    * Tests that Panels correctly modifies layout icons.
    */
   public function testIconPath() {
-    /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
+    /** @var LayoutDefinition $layout */
     $layout = $this->container->get('plugin.manager.core.layout')
       ->getDefinition('layout_onecol');
 
