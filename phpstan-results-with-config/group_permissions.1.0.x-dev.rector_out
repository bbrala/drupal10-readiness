modules/contrib/group_permissions/group_permissions.install
modules/contrib/group_permissions/group_permissions.module
modules/contrib/group_permissions/src/Access/GroupPermissionCalculator.php
modules/contrib/group_permissions/src/Access/GroupPermissionsChainGroupPermissionCalculator.php
modules/contrib/group_permissions/src/Access/GroupPermissionsRefinableCalculatedGroupPermissions.php
modules/contrib/group_permissions/src/Controller/GroupPermissionsController.php
modules/contrib/group_permissions/src/Entity/GroupPermission.php
modules/contrib/group_permissions/src/Entity/GroupPermissionInterface.php
modules/contrib/group_permissions/src/Entity/Storage/GroupPermissionStorage.php
modules/contrib/group_permissions/src/Entity/Storage/GroupPermissionStorageInterface.php
modules/contrib/group_permissions/src/Form/GroupPermissionDeleteForm.php
modules/contrib/group_permissions/src/Form/GroupPermissionRevisionDeleteForm.php
modules/contrib/group_permissions/src/Form/GroupPermissionRevisionRevertForm.php
modules/contrib/group_permissions/src/Form/GroupPermissionsForm.php
modules/contrib/group_permissions/src/GroupPermissionAccessControlHandler.php
modules/contrib/group_permissions/src/GroupPermissionHtmlRouteProvider.php
modules/contrib/group_permissions/src/GroupPermissionStorageSchema.php
modules/contrib/group_permissions/src/GroupPermissionsManager.php
modules/contrib/group_permissions/src/GroupPermissionsManagerInterface.php
modules/contrib/group_permissions/src/Plugin/Validation/Constraint/UniqueEntityReferenceConstraint.php
modules/contrib/group_permissions/src/Plugin/Validation/Constraint/UniqueReferenceFieldValidator.php

15 files with changes
=====================

1) modules/contrib/group_permissions/src/Plugin/Validation/Constraint/UniqueReferenceFieldValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_permissions\Plugin\Validation\Constraint;

+use Drupal\Core\Entity\EntityInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;

@@ @@
       return;
     }
     $field_name = $items->getFieldDefinition()->getName();
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $items->getEntity();
     $entity_type_id = $entity->getEntityTypeId();
     $id_key = $entity->getEntityType()->getKey('id');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/group_permissions/src/GroupPermissionsManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_permissions;

+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\group_permissions\Entity\GroupPermission;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\group_permissions\Entity\GroupPermissionInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\group\Entity\GroupInterface;

@@ @@
   /**
    * Helper function to get custom group permissions.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    *
    * @return array
    *   Permissions array.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function getCustomPermissions(GroupInterface $group);

@@ @@
   /**
    * Get group permission object.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    *
-   * @return \Drupal\group_permissions\Entity\GroupPermission|null
+   * @return GroupPermission|null
    *   Group permission.
    */
   public function getGroupPermission(GroupInterface $group);
@@ @@
   /**
    * Get outsider roles.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Current user.
    *
    * @return mixed
    *   List of outsider roles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getOutsiderRoles(GroupInterface $group, AccountInterface $account);

@@ @@
   /**
    * Get all group permissions objects.
    *
-   * @return \Drupal\group_permissions\Entity\GroupPermissionInterface[]
+   * @return GroupPermissionInterface[]
    *   Group permissions list.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getAll();

@@ @@
   /**
    * Get group roles.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    *
    * @return array
@@ @@
   /**
    * Retrieves Group permission entity for a group.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group entity to load the group content entities for.
    *
    * @return \Drupal\group\Entity\GroupPermissiontInterface|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/group_permissions/src/GroupPermissionsManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_permissions;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The cache backend to use.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The group role synchronizer service.
    *
-   * @var \Drupal\group\GroupRoleSynchronizerInterface
+   * @var GroupRoleSynchronizerInterface
    */
   protected $groupRoleSynchronizer;

@@ @@
   /**
    * Group role storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $groupRoleStorage;

@@ @@
   /**
    * Group permissions storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $groupPermissionStorage;

@@ @@
       $cid = "custom_group_permissions:$group_id";
       $data_cached = $this->cacheBackend->get($cid);
       if (!$data_cached) {
-        /** @var \Drupal\group_permissions\Entity\GroupPermission $group_permission */
+        /** @var GroupPermission $group_permission */
         $group_permission = $this->loadByGroup($group);
         if (!empty($group_permission) && $group_permission->isPublished()) {
           $this->groupPermissions[$group_id] = $group_permission;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/group_permissions/src/GroupPermissionHtmlRouteProvider.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/group_permissions/src/GroupPermissionAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_permissions;

+use Drupal\group_permissions\Entity\GroupPermissionInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\group_permissions\Entity\GroupPermissionInterface $entity */
+    /** @var GroupPermissionInterface $entity */
     switch ($operation) {
       case 'update':
         return AccessResult::allowedIfHasPermission($account, 'edit group permission entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/group_permissions/src/Form/GroupPermissionsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_permissions\Form;

+use Drupal\Component\Datetime\Time;
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group\Entity\GroupRoleInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * Group.
    *
-   * @var \Drupal\group\Entity\Group
+   * @var Group
    */
   protected $group;

@@ @@
   /**
    * GroupPermission.
    *
-   * @var \Drupal\group_permissions\Entity\GroupPermission
+   * @var GroupPermission
    */
   protected $groupPermission;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;

@@ @@
   /**
    * The Current User object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The group permissions manager.
    *
-   * @var \Drupal\group_permissions\GroupPermissionsManagerInterface
+   * @var GroupPermissionsManagerInterface
    */
   protected $groupPermissionsManager;

@@ @@
   /**
    * Constructs a new GroupPermissionsTypeSpecificForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\group\Access\GroupPermissionHandlerInterface $permission_handler
+   * @param GroupPermissionHandlerInterface $permission_handler
    *   The group permission handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\group_permissions\GroupPermissionsManagerInterface $group_permission_manager
+   * @param GroupPermissionsManagerInterface $group_permission_manager
    *   The group permissions manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, GroupPermissionHandlerInterface $permission_handler, ModuleHandlerInterface $module_handler, TimeInterface $time, AccountInterface $current_user, GroupPermissionsManagerInterface $group_permission_manager) {
@@ @@
   /**
    * Gets the group type to build the form for.
    *
-   * @return \Drupal\group\Entity\GroupTypeInterface
+   * @return GroupTypeInterface
    *   The group type some or more roles belong to.
    */
   protected function getGroupType() {
@@ @@

     $permissions = [];
     foreach ($this->groupPermissionsManager->getGroupRoles($this->group) as $role_name => $group_role) {
-      /** @var \Drupal\group\Entity\GroupRoleInterface $group_role */
+      /** @var GroupRoleInterface $group_role */
       $permissions[$role_name] = array_keys(array_filter($form_state->getValue($role_name)));
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/group_permissions/src/Form/GroupPermissionRevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_permissions\Form;

+use Drupal\group_permissions\Entity\Storage\GroupPermissionStorageInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The group permission revision.
    *
-   * @var \Drupal\group_permissions\Entity\GroupPermissionInterface
+   * @var GroupPermissionInterface
    */
   protected $revision;

@@ @@
   /**
    * The group permission storage.
    *
-   * @var \Drupal\group_permissions\Entity\Storage\GroupPermissionStorageInterface
+   * @var GroupPermissionStorageInterface
    */
   protected $groupPermissionStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new GroupPermissionRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $group_permission_storage
+   * @param EntityStorageInterface $group_permission_storage
    *   The group permission storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $group_permission_storage, DateFormatterInterface $date_formatter, TimeInterface $time) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\group_permissions\Entity\GroupPermissionInterface $revision
+   * @param GroupPermissionInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\group_permissions\Entity\GroupPermissionInterface
+   * @return GroupPermissionInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GroupPermissionInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/group_permissions/src/Form/GroupPermissionRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_permissions\Form;

+use Drupal\group_permissions\Entity\GroupPermissionInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The group permissions revision.
    *
-   * @var \Drupal\group_permissions\Entity\GroupPermissionInterface
+   * @var GroupPermissionInterface
    */
   protected $revision;

@@ @@
   /**
    * The group permissions storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $groupPermissionStorage;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/group_permissions/src/Form/GroupPermissionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_permissions\Form;

+use Drupal\group_permissions\Entity\GroupPermissionInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\group_permissions\GroupPermissionsManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The group permissions revision.
    *
-   * @var \Drupal\group_permissions\Entity\GroupPermissionInterface
+   * @var GroupPermissionInterface
    */
   protected $groupPermission;

@@ @@
   /**
    * The group permissions storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $groupPermissionStorage;

@@ @@
   /**
    * The group permissions manager.
    *
-   * @var \Drupal\group_permissions\GroupPermissionsManagerInterface
+   * @var GroupPermissionsManagerInterface
    */
   protected $groupPermissionsManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/group_permissions/src/Entity/Storage/GroupPermissionStorageInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Retrieves Group permission entity for a group.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group entity to load the group content entities for.
    *
    * @return \Drupal\group\Entity\GroupPermissiontInterface[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/group_permissions/src/Entity/GroupPermissionInterface.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the Group.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The Group.
    */
   public function setGroup(GroupInterface $group);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/group_permissions/src/Entity/GroupPermission.php:149

    ---------- begin diff ----------
@@ @@
   /**
    * Retrieves Group permission entity for a group.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group entity to load the group content entities for.
    *
    * @return \Drupal\group\Entity\GroupPermissiontInterface|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/group_permissions/src/Controller/GroupPermissionsController.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $groupPermissionStorage;

@@ @@
   /**
    * The group permissions manager.
    *
-   * @var \Drupal\group_permissions\GroupPermissionsManagerInterface
+   * @var GroupPermissionsManagerInterface
    */
   protected $groupPermissionsManager;

@@ @@
   /**
    * The permission handler.
    *
-   * @var \Drupal\group\Access\GroupPermissionHandlerInterface
+   * @var GroupPermissionHandlerInterface
    */
   protected $groupPermissionHandler;

@@ @@
    *   Renderer.
    * @param \Drupal\group_permissions\Controller\FormBuilderInterface $form_builder
    *   Entity form builder.
-   * @param \Drupal\group_permissions\Entity\Storage\GroupPermissionStorageInterface $group_permission_storage
+   * @param GroupPermissionStorageInterface $group_permission_storage
    *   Group permission storage.
-   * @param \Drupal\group_permissions\GroupPermissionsManagerInterface $group_permission_manager
+   * @param GroupPermissionsManagerInterface $group_permission_manager
    *   The group permissions manager.
-   * @param \Drupal\group\Access\GroupPermissionHandlerInterface $permission_handler
+   * @param GroupPermissionHandlerInterface $permission_handler
    *   The permission handler.
    */
   public function __construct(DateFormatter $date_formatter, Renderer $renderer, FormBuilderInterface $form_builder, GroupPermissionStorageInterface $group_permission_storage, GroupPermissionsManagerInterface $group_permission_manager, GroupPermissionHandlerInterface $permission_handler) {
@@ @@
   /**
    * Displays a group permissions revision.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    * @param int $group_permission_revision
    *   The group permissions revision ID.
@@ @@

     return [
       '#type' => '#markup',
-      '#markup' => render($build),
+      '#markup' => \Drupal::service('renderer')->render($build),
     ];
   }

@@ @@
   /**
    * Generates an overview table of older revisions.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    *
    * @return array
@@ @@
         'group_permission' => $group_permission->id(),
         'group' => $group_permission->getGroup()->id(),
       ];
-      /** @var \Drupal\group_permissions\Entity\GroupPermissionInterface $revision */
+      /** @var GroupPermissionInterface $revision */
       $revision = $this->groupPermissionStorage->loadRevision($vid);
       $username = [
         '#theme' => 'username',
@@ @@
   /**
    * Gets a list of revisions IDs for a specific group permission.
    *
-   * @param \Drupal\group_permissions\Entity\GroupPermissionInterface $group_permission
+   * @param GroupPermissionInterface $group_permission
    *   The group permission entity.
    *
    * @return int[]
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/group_permissions/src/Access/GroupPermissionsChainGroupPermissionCalculator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_permissions\Access;

+use Drupal\group\Access\CalculatedGroupPermissionsInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\group\Access\CalculatedGroupPermissions;
 use Drupal\group\Access\ChainGroupPermissionCalculator;
@@ @@
    * @param array $args
    *   The arguments to pass to the calculator method.
    *
-   * @return \Drupal\group\Access\CalculatedGroupPermissionsInterface
+   * @return CalculatedGroupPermissionsInterface
    *   The calculated group permissions, potentially served from a cache.
    */
   protected function doCacheableCalculation(array $cache_keys, array $persistent_cache_contexts, $method, array $args = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/group_permissions/src/Access/GroupPermissionCalculator.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The membership loader service.
    *
-   * @var \Drupal\group\GroupMembershipLoaderInterface
+   * @var GroupMembershipLoaderInterface
    */
   protected $membershipLoader;

@@ @@
   /**
    * The group permissions manager.
    *
-   * @var \Drupal\group_permissions\GroupPermissionsManager
+   * @var GroupPermissionsManager
    */
   protected $groupPermissionsManager;

@@ @@
   /**
    * Constructs a DefaultGroupPermissionCalculator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\group\GroupMembershipLoaderInterface $membership_loader
+   * @param GroupMembershipLoaderInterface $membership_loader
    *   The group membership loader service.
-   * @param \Drupal\group_permissions\GroupPermissionsManager $group_permissions_manager
+   * @param GroupPermissionsManager $group_permissions_manager
    *   The group permissions manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, GroupMembershipLoaderInterface $membership_loader, GroupPermissionsManager $group_permissions_manager) {
@@ @@
   /**
    * Gets account outsider roles.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User account.
-   * @param \Drupal\group\Entity\GroupType $group_type
+   * @param GroupType $group_type
    *   Group type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 15 files have been changed by Rector                                      

