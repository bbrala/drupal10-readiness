diff --git a/og_sm.admin.inc b/og_sm.admin.inc
index 299dec4..f8766c8 100644
--- a/og_sm.admin.inc
+++ b/og_sm.admin.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityFormInterface;
 /**
  * @file
  * Admin pages & functionality.
@@ -14,16 +15,16 @@ use Drupal\og_sm\OgSm;
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  *
  * @see og_sm_form_node_type_form_alter()
  */
 function _og_sm_form_node_type_form_alter(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+  /** @var EntityFormInterface $form_object */
   $form_object = $form_state->getFormObject();
 
-  /** @var \Drupal\node\NodeTypeInterface $type */
+  /** @var NodeTypeInterface $type */
   $type = $form_object->getEntity();
 
   $form['og_sm'] = [
@@ -61,7 +62,7 @@ function _og_sm_form_node_type_form_alter(array &$form, FormStateInterface $form
  *
  * @param array $element
  *   The form element to validate.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  * @param array $form
  *   The complete form structure.
@@ -79,11 +80,11 @@ function og_sm_node_type_form_field_validate(array $element, FormStateInterface
  *
  * @param string $entity_type
  *   The entity type identifier.
- * @param \Drupal\node\NodeTypeInterface $type
+ * @param NodeTypeInterface $type
  *   The node type updated with the submitted values.
  * @param array $form
  *   The complete form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function og_sm_node_type_form_builder($entity_type, NodeTypeInterface $type, array &$form, FormStateInterface $form_state) {
diff --git a/og_sm.api.php b/og_sm.api.php
index 9c0366b..4cacbea 100644
--- a/og_sm.api.php
+++ b/og_sm.api.php
@@ -1,15 +1,15 @@
 <?php
 
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 /**
  * @file
  * API documentation about the og_sm module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Act on a Site node being viewed.
  *
@@ -24,9 +24,9 @@
  *   A renderable array representing the entity content. The module may add
  *   elements to $build prior to rendering. The structure of $build is a
  *   renderable array as expected by drupal_render().
- * @param \Drupal\node\NodeInterface $site
+ * @param NodeInterface $site
  *   The site node.
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityViewDisplayInterface $display
  *   The entity view display holding the display options configured for the
  *   entity components.
  * @param string $view_mode
@@ -34,7 +34,7 @@
  *
  * @see hook_node_view()
  */
-function hook_og_sm_site_view(array &$build, \Drupal\node\NodeInterface $site, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
+function hook_og_sm_site_view(array &$build, NodeInterface $site, EntityViewDisplayInterface $display, $view_mode) {
 
 }
 
@@ -50,14 +50,14 @@ function hook_og_sm_site_view(array &$build, \Drupal\node\NodeInterface $site, \
  *
  * This alter function allows modules to alter the route name and parameters.
  *
- * @param \Drupal\node\NodeInterface $site
+ * @param NodeInterface $site
  *   The entity object.
  * @param string $route_name
  *   The route name.
  * @param array $route_parameters
  *   The route parameters.
  */
-function hook_og_sm_site_homepage_alter(\Drupal\node\NodeInterface $site, &$route_name, array &$route_parameters) {
+function hook_og_sm_site_homepage_alter(NodeInterface $site, &$route_name, array &$route_parameters) {
   $route_name = 'og_sm.site.dashboard';
 }
 
diff --git a/og_sm.module b/og_sm.module
index 0f994cb..d5b423a 100644
--- a/og_sm.module
+++ b/og_sm.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\og\OgGroupAudienceHelperInterface;
+use Drupal\og\OgAccess;
 /**
  * @file
  * Base module for the Organic Groups Sites functionality.
@@ -52,7 +54,7 @@ function og_sm_entity_field_values_init(FieldableEntityInterface $entity) {
     return;
   }
 
-  /** @var \Drupal\og\OgGroupAudienceHelperInterface $groupAudienceHelper */
+  /** @var OgGroupAudienceHelperInterface $groupAudienceHelper */
   $groupAudienceHelper = Drupal::service('og.group_audience_helper');
 
   $fields = $groupAudienceHelper->getAllGroupAudienceFields(
@@ -130,7 +132,7 @@ function og_sm_node_type_insert(NodeTypeInterface $node_type) {
 /**
  * Helper function called when a node type is either inserted or updated.
  *
- * @param \Drupal\node\NodeTypeInterface $node_type
+ * @param NodeTypeInterface $node_type
  *   The node type.
  */
 function _og_sm_node_type_save(NodeTypeInterface $node_type) {
@@ -186,7 +188,7 @@ function og_sm_entity_field_access($operation, FieldDefinitionInterface $field_d
  *
  * @param string $operation
  *   The entity operation being checked for.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   (optional) The user to check. Defaults to the current user.
  *
  * @return bool
@@ -202,7 +204,7 @@ function og_sm_site_user_access($operation, AccountInterface $account = NULL) {
     return FALSE;
   }
 
-  /** @var \Drupal\og\OgAccess $og_access */
+  /** @var OgAccess $og_access */
   $og_access = \Drupal::service('og.access');
   return $og_access->userAccess($site, $operation, $account)->isAllowed();
 }
diff --git a/og_sm_admin_menu/src/Controller/SiteAdminController.php b/og_sm_admin_menu/src/Controller/SiteAdminController.php
index 842a0b8..b4e40ba 100644
--- a/og_sm_admin_menu/src/Controller/SiteAdminController.php
+++ b/og_sm_admin_menu/src/Controller/SiteAdminController.php
@@ -18,34 +18,34 @@ class SiteAdminController extends ControllerBase {
   /**
    * The menu link plugin manager.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $menuLinkManager;
 
   /**
    * The route match object for the current page.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * System Manager Service.
    *
-   * @var \Drupal\system\SystemManager
+   * @var SystemManager
    */
   protected $systemManager;
 
   /**
    * Constructs a \Drupal\Core\Menu\MenuActiveTrail object.
    *
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager
+   * @param MenuLinkManagerInterface $menu_link_manager
    *   The menu link plugin manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   A route match object for finding the active link.
-   * @param \Drupal\system\SystemManager $systemManager
+   * @param SystemManager $systemManager
    *   System manager service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(MenuLinkManagerInterface $menu_link_manager, RouteMatchInterface $route_match, SystemManager $systemManager, TranslationInterface $string_translation) {
@@ -70,7 +70,7 @@ class SiteAdminController extends ControllerBase {
   /**
    * Title callback for the overview pages.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The Site node to use to add the Site name to the title.
    * @param array $_title_arguments
    *   Optional array from the route defaults.
diff --git a/og_sm_admin_menu/src/Controller/ToolbarController.php b/og_sm_admin_menu/src/Controller/ToolbarController.php
index 0dc87b5..91e9cad 100644
--- a/og_sm_admin_menu/src/Controller/ToolbarController.php
+++ b/og_sm_admin_menu/src/Controller/ToolbarController.php
@@ -16,23 +16,23 @@ class ToolbarController extends ToolbarControllerBase {
   /**
    * The site manager.
    *
-   * @var \Drupal\og_sm\SiteManagerInterface
+   * @var SiteManagerInterface
    */
   protected $siteManager;
 
   /**
    * The of access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
   /**
    * Constructs ToolbarController object.
    *
-   * @param \Drupal\og_sm\SiteManagerInterface $site_manager
+   * @param SiteManagerInterface $site_manager
    *   The site manager.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The og access service.
    */
   public function __construct(SiteManagerInterface $site_manager, OgAccessInterface $og_access) {
diff --git a/og_sm_admin_menu/src/EventSubscriber/GroupPermissionEventSubscriber.php b/og_sm_admin_menu/src/EventSubscriber/GroupPermissionEventSubscriber.php
index d7de399..b524727 100644
--- a/og_sm_admin_menu/src/EventSubscriber/GroupPermissionEventSubscriber.php
+++ b/og_sm_admin_menu/src/EventSubscriber/GroupPermissionEventSubscriber.php
@@ -22,7 +22,7 @@ class GroupPermissionEventSubscriber implements EventSubscriberInterface, Contai
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation service.
    */
   public function __construct(TranslationInterface $translation) {
@@ -41,7 +41,7 @@ class GroupPermissionEventSubscriber implements EventSubscriberInterface, Contai
   /**
    * Provides default OG permissions.
    *
-   * @param \Drupal\og\Event\PermissionEventInterface $event
+   * @param PermissionEventInterface $event
    *   The OG permission event.
    */
   public function provideDefaultOgPermissions(PermissionEventInterface $event) {
diff --git a/og_sm_admin_menu/src/Render/Element/SiteManagerAdminToolbar.php b/og_sm_admin_menu/src/Render/Element/SiteManagerAdminToolbar.php
index 01b2589..b41c42f 100644
--- a/og_sm_admin_menu/src/Render/Element/SiteManagerAdminToolbar.php
+++ b/og_sm_admin_menu/src/Render/Element/SiteManagerAdminToolbar.php
@@ -4,6 +4,7 @@ declare(strict_types=1);
 
 namespace Drupal\og_sm_admin_menu\Render\Element;
 
+use Drupal\Core\Menu\MenuLinkTreeInterface;
 use Drupal\admin_toolbar\Render\Element\AdminToolbar;
 use Drupal\Core\Menu\MenuTreeParameters;
 use Drupal\Core\Security\TrustedCallbackInterface;
@@ -45,7 +46,7 @@ class SiteManagerAdminToolbar implements TrustedCallbackInterface {
 
     // @todo This can be simplified once https://www.drupal.org/node/1869638 has
     // been implemented in core and the "admin_toolbar" module.
-    /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menuTree */
+    /** @var MenuLinkTreeInterface $menuTree */
     $menuTree = \Drupal::service('toolbar.menu_tree');
     $parameters = new MenuTreeParameters();
     // Depending on whether the 'admin_toolbar' module exists we should change
diff --git a/og_sm_admin_menu/src/Routing/RouteSubscriber.php b/og_sm_admin_menu/src/Routing/RouteSubscriber.php
index cff683a..bc73b4b 100644
--- a/og_sm_admin_menu/src/Routing/RouteSubscriber.php
+++ b/og_sm_admin_menu/src/Routing/RouteSubscriber.php
@@ -16,14 +16,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    */
   public function __construct(RouteProviderInterface $route_provider) {
diff --git a/og_sm_config/src/Config/SiteConfigCollectionNameTrait.php b/og_sm_config/src/Config/SiteConfigCollectionNameTrait.php
index 5eedcbd..116b58b 100644
--- a/og_sm_config/src/Config/SiteConfigCollectionNameTrait.php
+++ b/og_sm_config/src/Config/SiteConfigCollectionNameTrait.php
@@ -12,7 +12,7 @@ trait SiteConfigCollectionNameTrait {
   /**
    * Creates a configuration collection name based on a site node.
    *
-   * @param \Drupal\node\NodeInterface $site
+   * @param NodeInterface $site
    *   The site node.
    *
    * @return string
diff --git a/og_sm_config/src/Config/SiteConfigFactoryOverride.php b/og_sm_config/src/Config/SiteConfigFactoryOverride.php
index 9f30306..820c636 100644
--- a/og_sm_config/src/Config/SiteConfigFactoryOverride.php
+++ b/og_sm_config/src/Config/SiteConfigFactoryOverride.php
@@ -32,37 +32,37 @@ class SiteConfigFactoryOverride extends ConfigFactoryOverrideBase implements Sit
    * Do not access this directly. Should be accessed through self::getStorage()
    * so that the cache of storages per langcode is used.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $baseStorage;
 
   /**
    * An array of configuration storages keyed by langcode.
    *
-   * @var \Drupal\Core\Config\StorageInterface[]
+   * @var StorageInterface[]
    */
   protected $storages;
 
   /**
    * The typed config manager.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;
 
   /**
    * The site node used to override configuration data.
    *
-   * @var \Drupal\node\NodeInterface|null
+   * @var NodeInterface|null
    */
   protected $site;
 
   /**
    * Constructs the LanguageConfigFactoryOverride object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The configuration storage engine.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typedConfig
+   * @param TypedConfigManagerInterface $typedConfig
    *   The typed configuration manager.
    */
   public function __construct(StorageInterface $storage, TypedConfigManagerInterface $typedConfig) {
@@ -185,7 +185,7 @@ class SiteConfigFactoryOverride extends ConfigFactoryOverrideBase implements Sit
   /**
    * Sets the default site when the request dispatching has started.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The Event to process.
    */
   public function onKernelRequestSetSite(RequestEvent $event) {
@@ -201,7 +201,7 @@ class SiteConfigFactoryOverride extends ConfigFactoryOverrideBase implements Sit
   /**
    * Removes the site override collection when the site has been deleted.
    *
-   * @param \Drupal\og_sm\Event\SiteEvent $event
+   * @param SiteEvent $event
    *   The site Event.
    */
   public function onSiteDelete(SiteEvent $event) {
diff --git a/og_sm_config/src/Config/SiteConfigFactoryOverrideInterface.php b/og_sm_config/src/Config/SiteConfigFactoryOverrideInterface.php
index faf2751..e1660b4 100644
--- a/og_sm_config/src/Config/SiteConfigFactoryOverrideInterface.php
+++ b/og_sm_config/src/Config/SiteConfigFactoryOverrideInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\og_sm_config\Config;
 
+use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\Config\ConfigFactoryOverrideInterface;
 use Drupal\node\NodeInterface;
 
@@ -13,12 +14,12 @@ interface SiteConfigFactoryOverrideInterface extends ConfigFactoryOverrideInterf
   /**
    * Get language override for given site and configuration name.
    *
-   * @param \Drupal\node\NodeInterface $site
+   * @param NodeInterface $site
    *   The site node.
    * @param string $name
    *   Configuration name.
    *
-   * @return \Drupal\og_sm_config\Config\SiteConfigOverride
+   * @return SiteConfigOverride
    *   Configuration override object.
    */
   public function getOverride(NodeInterface $site, $name);
@@ -26,10 +27,10 @@ interface SiteConfigFactoryOverrideInterface extends ConfigFactoryOverrideInterf
   /**
    * Returns the storage instance for a particular site.
    *
-   * @param \Drupal\node\NodeInterface $site
+   * @param NodeInterface $site
    *   The site node.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The storage instance for a particular site.
    */
   public function getStorage(NodeInterface $site);
@@ -37,7 +38,7 @@ interface SiteConfigFactoryOverrideInterface extends ConfigFactoryOverrideInterf
   /**
    * Gets the site node used to override configuration data.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The site node.
    */
   public function getSite();
@@ -45,7 +46,7 @@ interface SiteConfigFactoryOverrideInterface extends ConfigFactoryOverrideInterf
   /**
    * Sets the site to be used in configuration overrides.
    *
-   * @param \Drupal\node\NodeInterface $site
+   * @param NodeInterface $site
    *   The site node.
    */
   public function setSite(NodeInterface $site = NULL);
diff --git a/og_sm_config/src/Config/SiteConfigOverride.php b/og_sm_config/src/Config/SiteConfigOverride.php
index 9b8f203..00e2a5f 100644
--- a/og_sm_config/src/Config/SiteConfigOverride.php
+++ b/og_sm_config/src/Config/SiteConfigOverride.php
@@ -19,10 +19,10 @@ class SiteConfigOverride extends StorableConfigBase {
    *
    * @param string $name
    *   The name of the configuration object being overridden.
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   A storage controller object to use for reading and writing the
    *   configuration override.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typedConfig
+   * @param TypedConfigManagerInterface $typedConfig
    *   The typed configuration manager service.
    */
   public function __construct($name, StorageInterface $storage, TypedConfigManagerInterface $typedConfig) {
diff --git a/og_sm_config/src/Form/SiteConfigFormBase.php b/og_sm_config/src/Form/SiteConfigFormBase.php
index bdc6a52..c549f33 100644
--- a/og_sm_config/src/Form/SiteConfigFormBase.php
+++ b/og_sm_config/src/Form/SiteConfigFormBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\og_sm_config\Form;
 
+use Drupal\node\NodeInterface;
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\og_sm_config\Config\SiteConfigOverride;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\og_sm\SiteManagerInterface;
@@ -16,32 +20,32 @@ abstract class SiteConfigFormBase extends ConfigFormBase {
   /**
    * The site configuration override service.
    *
-   * @var \Drupal\og_sm_config\Config\SiteConfigFactoryOverrideInterface
+   * @var SiteConfigFactoryOverrideInterface
    */
   protected $configOverride;
 
   /**
    * The site manager.
    *
-   * @var \Drupal\og_sm\SiteManagerInterface
+   * @var SiteManagerInterface
    */
   protected $siteManager;
 
   /**
    * The current site.
    *
-   * @var \Drupal\node\NodeInterface|null
+   * @var NodeInterface|null
    */
   protected $currentSite;
 
   /**
    * Constructs a \Drupal\system\SiteConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The factory for configuration objects.
-   * @param \Drupal\og_sm_config\Config\SiteConfigFactoryOverrideInterface $configOverride
+   * @param SiteConfigFactoryOverrideInterface $configOverride
    *   The site configuration override service.
-   * @param \Drupal\og_sm\SiteManagerInterface $siteManager
+   * @param SiteManagerInterface $siteManager
    *   The site manager.
    */
   public function __construct(
@@ -64,7 +68,7 @@ abstract class SiteConfigFormBase extends ConfigFormBase {
    *   the config object returned will contain the contents of book.admin
    *   configuration file.
    *
-   * @return \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @return Config|ImmutableConfig
    *   An editable configuration object if the given name is listed in the
    *   getEditableConfigNames() method or an immutable configuration object if
    *   not.
@@ -79,7 +83,7 @@ abstract class SiteConfigFormBase extends ConfigFormBase {
    * @param string $name
    *   The name of the configuration object to retrieve.
    *
-   * @return \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig|\Drupal\og_sm_config\Config\SiteConfigOverride
+   * @return Config|ImmutableConfig|SiteConfigOverride
    *   An configuration object.
    */
   protected function config($name) {
diff --git a/og_sm_config/src/OgSmConfig.php b/og_sm_config/src/OgSmConfig.php
index 14e7b33..cd1ec67 100644
--- a/og_sm_config/src/OgSmConfig.php
+++ b/og_sm_config/src/OgSmConfig.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\og_sm_config;
 
+use Drupal\og_sm_config\Config\SiteConfigOverride;
+use Drupal\og_sm_config\Config\SiteConfigFactoryOverrideInterface;
 use Drupal\node\NodeInterface;
 
 /**
@@ -12,12 +14,12 @@ class OgSmConfig {
   /**
    * Gets the site config override object for the passed configuration name.
    *
-   * @param \Drupal\node\NodeInterface $site
+   * @param NodeInterface $site
    *   The site node.
    * @param string $name
    *   Configuration name.
    *
-   * @return \Drupal\og_sm_config\Config\SiteConfigOverride
+   * @return SiteConfigOverride
    *   Configuration override object.
    */
   public static function getOverride(NodeInterface $site, $name) {
@@ -27,7 +29,7 @@ class OgSmConfig {
   /**
    * Returns the site config override instance.
    *
-   * @return \Drupal\og_sm_config\Config\SiteConfigFactoryOverrideInterface
+   * @return SiteConfigFactoryOverrideInterface
    *   The site configuration override service.
    */
   public static function siteConfigOverride() {
diff --git a/og_sm_config/tests/src/Kernel/ConfigDefaultsTest.php b/og_sm_config/tests/src/Kernel/ConfigDefaultsTest.php
index 9d66320..0545d6f 100644
--- a/og_sm_config/tests/src/Kernel/ConfigDefaultsTest.php
+++ b/og_sm_config/tests/src/Kernel/ConfigDefaultsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\og_sm_config\Kernel;
 
+use Drupal\og_sm_config\Config\SiteConfigFactoryOverrideInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\og_sm\OgSm;
 use Drupal\Tests\og_sm\Kernel\OgSmKernelTestBase;
 
@@ -23,7 +25,7 @@ class ConfigDefaultsTest extends OgSmKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig(['og_sm_config_test']);
   }
@@ -38,7 +40,7 @@ class ConfigDefaultsTest extends OgSmKernelTestBase {
     $type->save();
     $site = $this->createGroup($type->id());
 
-    /** @var \Drupal\og_sm_config\Config\SiteConfigFactoryOverrideInterface $config_factory_override */
+    /** @var SiteConfigFactoryOverrideInterface $config_factory_override */
     $config_factory_override = $this->container->get('og_sm.config_factory_override');
 
     // Get the default variables as they should be have set during Site insert.
@@ -86,7 +88,7 @@ class ConfigDefaultsTest extends OgSmKernelTestBase {
    *   The config object.
    */
   protected function assertConfig(array $expected, $config_name) {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $this->container->get('config.factory');
     $config_factory->reset();
     $config = $config_factory->get($config_name);
diff --git a/og_sm_config/tests/src/Kernel/ConfigTest.php b/og_sm_config/tests/src/Kernel/ConfigTest.php
index bffa10a..a1f1481 100644
--- a/og_sm_config/tests/src/Kernel/ConfigTest.php
+++ b/og_sm_config/tests/src/Kernel/ConfigTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\og_sm_config\Kernel;
 
+use Drupal\og_sm_config\Config\SiteConfigFactoryOverrideInterface;
+use Drupal\node\NodeInterface;
 use Drupal\og_sm\OgSm;
 use Drupal\Tests\og_sm\Kernel\OgSmKernelTestBase;
 
@@ -23,28 +25,28 @@ class ConfigTest extends OgSmKernelTestBase {
   /**
    * The configuration override object.
    *
-   * @var \Drupal\og_sm_config\Config\SiteConfigFactoryOverrideInterface
+   * @var SiteConfigFactoryOverrideInterface
    */
   protected $configFactoryOverride;
 
   /**
    * Site node 1.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $site1;
 
   /**
    * Site node 2.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $site2;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->configFactoryOverride = $this->container->get('og_sm.config_factory_override');
diff --git a/og_sm_content/og_sm_content.module b/og_sm_content/og_sm_content.module
index 6fbf695..06ba1ba 100644
--- a/og_sm_content/og_sm_content.module
+++ b/og_sm_content/og_sm_content.module
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\og\OgAccessInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\Core\Utility\LinkGeneratorInterface;
+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Site content creation and administration functionality.
@@ -40,7 +45,7 @@ function og_sm_content_entity_field_access($operation, FieldDefinitionInterface
     return AccessResult::neutral();
   }
 
-  /** @var \Drupal\og\OgAccessInterface $og_access */
+  /** @var OgAccessInterface $og_access */
   $og_access = \Drupal::service('og.access');
 
   // Normally the permission "administer nodes" is required to change the node
@@ -79,7 +84,7 @@ function og_sm_content_entity_field_access($operation, FieldDefinitionInterface
           $bundle_ids = array_intersect($bundle_ids, $handler_settings['target_bundles']);
         }
 
-        /** @var \Drupal\og\GroupTypeManagerInterface $group_type_manager */
+        /** @var GroupTypeManagerInterface $group_type_manager */
         $group_type_manager = Drupal::service('og.group_type_manager');
 
         // Get the group content bundles of $entity_type.
@@ -126,10 +131,10 @@ function og_sm_content_preprocess_node_add_list(&$variables) {
     return;
   }
 
-  /** @var \Drupal\Core\Utility\LinkGeneratorInterface $link_generator */
+  /** @var LinkGeneratorInterface $link_generator */
   $link_generator = \Drupal::service('link_generator');
   foreach ($variables['content'] as $type) {
-    /** @var \Drupal\node\NodeTypeInterface $type */
+    /** @var NodeTypeInterface $type */
     $url = new Url('og_sm.site_content.add', [
       'node' => $site->id(),
       'node_type' => $type->id(),
@@ -145,6 +150,6 @@ function og_sm_content_preprocess_node_add_list(&$variables) {
  * Implements hook_entity_type_alter().
  */
 function og_sm_content_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['node']->setListBuilderClass('Drupal\og_sm_content\NodeListBuilder');
 }
diff --git a/og_sm_content/src/Access/SiteContentAddAccessCheck.php b/og_sm_content/src/Access/SiteContentAddAccessCheck.php
index fdf97f5..95d02e8 100644
--- a/og_sm_content/src/Access/SiteContentAddAccessCheck.php
+++ b/og_sm_content/src/Access/SiteContentAddAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\og_sm_content\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -19,32 +20,32 @@ class SiteContentAddAccessCheck implements AccessInterface {
   /**
    * The site type manager.
    *
-   * @var \Drupal\og_sm\SiteTypeManagerInterface
+   * @var SiteTypeManagerInterface
    */
   protected $siteTypeManager;
 
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a SiteContentAddAccessCheck object.
    *
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
-   * @param \Drupal\og_sm\SiteTypeManagerInterface $site_type_manager
+   * @param SiteTypeManagerInterface $site_type_manager
    *   The site type manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(OgAccessInterface $og_access, SiteTypeManagerInterface $site_type_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -56,15 +57,15 @@ class SiteContentAddAccessCheck implements AccessInterface {
   /**
    * Checks access to the node add page for the node type.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The site node.
-   * @param \Drupal\node\NodeTypeInterface $node_type
+   * @param NodeTypeInterface $node_type
    *   (optional) The node type. If not specified, access is allowed if there
    *   exists at least one node type for which the user may create a node.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, NodeInterface $node, NodeTypeInterface $node_type = NULL) {
diff --git a/og_sm_content/src/Controller/SiteContentController.php b/og_sm_content/src/Controller/SiteContentController.php
index 8945468..4572fdc 100644
--- a/og_sm_content/src/Controller/SiteContentController.php
+++ b/og_sm_content/src/Controller/SiteContentController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\og_sm_content\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Render\RendererInterface;
@@ -19,34 +20,34 @@ class SiteContentController extends ControllerBase {
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The site type manager service.
    *
-   * @var \Drupal\og_sm\SiteTypeManagerInterface
+   * @var SiteTypeManagerInterface
    */
   protected $siteTypeManager;
 
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
   /**
    * Constructs a NodeController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\og_sm\SiteTypeManagerInterface $site_type_manager
+   * @param SiteTypeManagerInterface $site_type_manager
    *   The site type manager service.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(RendererInterface $renderer, SiteTypeManagerInterface $site_type_manager, OgAccessInterface $og_access, EntityTypeManagerInterface $entity_type_manager) {
@@ -74,10 +75,10 @@ class SiteContentController extends ControllerBase {
    * Redirects to /group/{entity_type_id}/{node}/content/add/[type] if only one
    * content type is available.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The site node.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the node types that can be added; however,
    *   if there is only one node type defined for the site, the function
    *   will return a RedirectResponse to the node add page for that one node
@@ -118,7 +119,7 @@ class SiteContentController extends ControllerBase {
   /**
    * Provides the node submission form.
    *
-   * @param \Drupal\node\NodeTypeInterface $node_type
+   * @param NodeTypeInterface $node_type
    *   The node type entity for the node.
    *
    * @return array
diff --git a/og_sm_content/src/EventSubscriber/GroupPermissionEventSubscriber.php b/og_sm_content/src/EventSubscriber/GroupPermissionEventSubscriber.php
index 9489104..4c26643 100644
--- a/og_sm_content/src/EventSubscriber/GroupPermissionEventSubscriber.php
+++ b/og_sm_content/src/EventSubscriber/GroupPermissionEventSubscriber.php
@@ -27,7 +27,7 @@ class GroupPermissionEventSubscriber implements EventSubscriberInterface {
   /**
    * Provides default OG permissions.
    *
-   * @param \Drupal\og\Event\PermissionEventInterface $event
+   * @param PermissionEventInterface $event
    *   The OG permission event.
    */
   public function provideDefaultOgPermissions(PermissionEventInterface $event) {
diff --git a/og_sm_content/src/NodeListBuilder.php b/og_sm_content/src/NodeListBuilder.php
index 9c45f5c..f904942 100644
--- a/og_sm_content/src/NodeListBuilder.php
+++ b/og_sm_content/src/NodeListBuilder.php
@@ -26,40 +26,40 @@ class NodeListBuilder extends NodeListBuilderBase {
   /**
    * The site manager.
    *
-   * @var \Drupal\og_sm\SiteManagerInterface
+   * @var SiteManagerInterface
    */
   protected $siteManager;
 
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Constructs a new NodeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
-   * @param \Drupal\og_sm\SiteManagerInterface $site_manager
+   * @param SiteManagerInterface $site_manager
    *   The site manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination, SiteManagerInterface $site_manager, RouteMatchInterface $route_match, AccountInterface $current_user) {
diff --git a/og_sm_content/src/PathProcessor/SiteContentPathProcessor.php b/og_sm_content/src/PathProcessor/SiteContentPathProcessor.php
index b4c8b90..b50a572 100644
--- a/og_sm_content/src/PathProcessor/SiteContentPathProcessor.php
+++ b/og_sm_content/src/PathProcessor/SiteContentPathProcessor.php
@@ -17,23 +17,23 @@ class SiteContentPathProcessor implements InboundPathProcessorInterface, Outboun
   /**
    * The site path manager.
    *
-   * @var \Drupal\og_sm_path\SitePathManagerInterface
+   * @var SitePathManagerInterface
    */
   protected $sitePathManager;
 
   /**
    * The site manager.
    *
-   * @var \Drupal\og_sm\SiteManagerInterface
+   * @var SiteManagerInterface
    */
   protected $siteManager;
 
   /**
    * Constructs a SiteContentPathProcessor object.
    *
-   * @param \Drupal\og_sm_path\SitePathManagerInterface $site_path_manager
+   * @param SitePathManagerInterface $site_path_manager
    *   The site path manager.
-   * @param \Drupal\og_sm\SiteManagerInterface $site_manager
+   * @param SiteManagerInterface $site_manager
    *   The site manager.
    */
   public function __construct(SitePathManagerInterface $site_path_manager, SiteManagerInterface $site_manager) {
