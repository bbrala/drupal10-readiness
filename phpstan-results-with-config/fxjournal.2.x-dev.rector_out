modules/contrib/fxjournal/fxjournal.module
modules/contrib/fxjournal/src/Controller/FxjournalAccountController.php
modules/contrib/fxjournal/src/Controller/FxjournalDashboardController.php
modules/contrib/fxjournal/src/Controller/FxjournalEventController.php
modules/contrib/fxjournal/src/Controller/FxjournalSymbolController.php
modules/contrib/fxjournal/src/Entity/FxjournalAccount.php
modules/contrib/fxjournal/src/Entity/FxjournalEvent.php
modules/contrib/fxjournal/src/Entity/FxjournalRecord.php
modules/contrib/fxjournal/src/Entity/FxjournalSymbol.php
modules/contrib/fxjournal/src/Form/FxjournalAccountForm.php
modules/contrib/fxjournal/src/Form/FxjournalAccountSettingsForm.php
modules/contrib/fxjournal/src/Form/FxjournalEventForm.php
modules/contrib/fxjournal/src/Form/FxjournalEventSettingsForm.php
modules/contrib/fxjournal/src/Form/FxjournalRecordForm.php
modules/contrib/fxjournal/src/Form/FxjournalRecordSettingsForm.php
modules/contrib/fxjournal/src/Form/FxjournalRecordUserSettingsForm.php
modules/contrib/fxjournal/src/Form/FxjournalSymbolForm.php
modules/contrib/fxjournal/src/Form/FxjournalSymbolSettingsForm.php
modules/contrib/fxjournal/src/FxjournalAccountAccessControlHandler.php
modules/contrib/fxjournal/src/FxjournalAccountInterface.php
modules/contrib/fxjournal/src/FxjournalAccountListBuilder.php
modules/contrib/fxjournal/src/FxjournalEntityListBuilderTrait.php
modules/contrib/fxjournal/src/FxjournalEventAccessControlHandler.php
modules/contrib/fxjournal/src/FxjournalEventInterface.php
modules/contrib/fxjournal/src/FxjournalEventListBuilder.php
modules/contrib/fxjournal/src/FxjournalRecordAccessControlHandler.php
modules/contrib/fxjournal/src/FxjournalRecordInterface.php
modules/contrib/fxjournal/src/FxjournalRecordListBuilder.php
modules/contrib/fxjournal/src/FxjournalSymbolAccessControlHandler.php
modules/contrib/fxjournal/src/FxjournalSymbolInterface.php
modules/contrib/fxjournal/src/FxjournalSymbolListBuilder.php
modules/contrib/fxjournal/src/Processor.php
modules/contrib/fxjournal/src/ProcessorInterface.php
modules/contrib/fxjournal/tests/src/Functional/FxjournalAccountTest.php
modules/contrib/fxjournal/tests/src/Functional/FxjournalDashboardTest.php
modules/contrib/fxjournal/tests/src/Functional/FxjournalEntityTrait.php
modules/contrib/fxjournal/tests/src/Functional/FxjournalEventTest.php
modules/contrib/fxjournal/tests/src/Functional/FxjournalRecordTest.php
modules/contrib/fxjournal/tests/src/Functional/FxjournalSymbolTest.php

20 files with changes
=====================

1) modules/contrib/fxjournal/tests/src/Functional/FxjournalRecordTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fxjournal\Functional;

+use Drupal\user\Entity\User;
+use Drupal\fxjournal\Entity\FxjournalEvent;
+use Drupal\fxjournal\Entity\FxjournalAccount;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\Url;
 use Drupal\fxjournal\Entity\FxjournalSymbol;
@@ @@
    * Tests the Record related functionality.
    */
   public function testRecord() {
-    /** @var \Drupal\user\Entity\User $trader */
+    /** @var User $trader */
     $trader = $this->createTrader();

     $session = $this->assertSession();
@@ @@
       'fxjournal_record' => $record->id(),
     ];

-    /** @var \Drupal\user\Entity\User $bad_trader */
+    /** @var User $bad_trader */
     $bad_trader = $this->createTrader();
     $this->drupalLogin($bad_trader);

-    /** @var \Drupal\fxjournal\Entity\FxjournalEvent $external_event */
+    /** @var FxjournalEvent $external_event */
     $external_event = $this->createEvent($bad_trader->id());

-    /** @var \Drupal\fxjournal\Entity\FxjournalAccount $external_account */
+    /** @var FxjournalAccount $external_account */
     $external_account = $this->createAccount($bad_trader->id());

-    /** @var \Drupal\fxjournal\Entity\FxjournalSymbol $external_symbol */
+    /** @var FxjournalSymbol $external_symbol */
     $external_symbol = $this->createSymbol($bad_trader->id());

     // Access Denied for the "bad" trader.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/fxjournal/tests/src/Functional/FxjournalEntityTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fxjournal\Functional;

+use Drupal\fxjournal\FxjournalAccountInterface;
+use Drupal\fxjournal\FxjournalSymbolInterface;
+use Drupal\fxjournal\FxjournalEventInterface;
+use Drupal\fxjournal\FxjournalRecordInterface;
 use Drupal\fxjournal\Entity\FxjournalAccount;
 use Drupal\fxjournal\Entity\FxjournalSymbol;
 use Drupal\fxjournal\Entity\FxjournalEvent;
@@ @@
    * @param array $values
    *   The account values.
    *
-   * @return \Drupal\fxjournal\FxjournalAccountInterface
+   * @return FxjournalAccountInterface
    *   The newly created account.
    */
   protected function createAccount(int $owner, array $values = []) {
@@ @@
       $values = $this->generateAccountValues();
     }

-    /** @var \Drupal\fxjournal\Entity\FxjournalAccount $account */
+    /** @var FxjournalAccount $account */
     $account = FxjournalAccount::create();

     $account->setLogin($values['login']);
@@ @@
    * @param array $values
    *   The Symbol values.
    *
-   * @return \Drupal\fxjournal\FxjournalSymbolInterface
+   * @return FxjournalSymbolInterface
    *   The newly created Symbol.
    */
   protected function createSymbol(int $owner, array $values = []) {
@@ @@
       $values = $this->generateSymbolValues();
     }

-    /** @var \Drupal\fxjournal\Entity\FxjournalSymbol $symbol */
+    /** @var FxjournalSymbol $symbol */
     $symbol = FxjournalSymbol::create();

     $symbol->setTitle($values['title']);
@@ @@
    * @param array $values
    *   The Event values.
    *
-   * @return \Drupal\fxjournal\FxjournalEventInterface
+   * @return FxjournalEventInterface
    *   The newly created Event.
    */
   protected function createEvent(int $owner, array $values = []) {
@@ @@
       $values = $this->generateEventValues();
     }

-    /** @var \Drupal\fxjournal\Entity\FxjournalEvent $event */
+    /** @var FxjournalEvent $event */
     $event = FxjournalEvent::create();

     $event->setTitle($values['title']);
@@ @@
    * @param array $values
    *   The Record values.
    *
-   * @return \Drupal\fxjournal\FxjournalRecordInterface
+   * @return FxjournalRecordInterface
    *   The newly created Record.
    */
   protected function createRecord(int $owner, array $values = []) {
@@ @@
     $symbol = $this->createSymbol($owner);
     $event = $this->createEvent($owner);

-    /** @var \Drupal\fxjournal\Entity\FxjournalRecord $record */
+    /** @var FxjournalRecord $record */
     $record = FxjournalRecord::create();

     $record->addEvent($event);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/fxjournal/tests/src/Functional/FxjournalDashboardTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fxjournal\Functional;

+use Drupal\user\Entity\User;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\Url;
 use Drupal\fxjournal\Entity\FxjournalSymbol;
@@ @@
    * Tests the Dashboard related functionality.
    */
   public function testDashboard() {
-    /** @var \Drupal\user\Entity\User $trader */
+    /** @var User $trader */
     $trader = $this->createTrader();

     $session = $this->assertSession();
@@ @@

     $record = $this->createRecord($trader->id());

-    /** @var \Drupal\user\Entity\User $bad_trader */
+    /** @var User $bad_trader */
     $bad_trader = $this->createTrader();
     $this->drupalLogin($bad_trader);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/fxjournal/src/Processor.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The user data instance.
    *
-   * @var \Drupal\user\UserData
+   * @var UserData
    */
   protected $userData;

@@ @@
   /**
    * Constructs a Processor object.
    *
-   * @param \Drupal\user\UserData $user_data
+   * @param UserData $user_data
    *   The user data instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager instance.
    */
   public function __construct(UserData $user_data, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/fxjournal/src/FxjournalSymbolListBuilder.php:29

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\fxjournal\FxjournalSymbolInterface $entity */
-
+    /** @var FxjournalSymbolInterface $entity */
     if (!$this->ownDashboard()) {
       $owner = $entity->getOwner();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/fxjournal/src/FxjournalRecordListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fxjournal;

+use Drupal\fxjournal\Entity\FxjournalRecord;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\fxjournal\FxjournalEntityListBuilderTrait;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\fxjournal\Entity\FxjournalRecord $entity */
-
+    /** @var FxjournalRecord $entity */
     if ($this->ownDashboard() == FALSE) {
       $owner = $entity->getOwner();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/fxjournal/src/FxjournalRecordInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fxjournal;

+use Drupal\fxjournal\Entity\FxjournalEvent;
+use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\user\EntityOwnerInterface;
 use Drupal\user\UserInterface;
@@ @@
   /**
    * Gets the trade symbol events.
    *
-   * @return \Drupal\fxjournal\Entity\FxjournalEvent[]
+   * @return FxjournalEvent[]
    *   The trade symbol events.
    */
   public function getEvents();
@@ @@
   /**
    * Adds a forex journal record event.
    *
-   * @param \Drupal\fxjournal\FxjournalEventInterface $event
+   * @param FxjournalEventInterface $event
    *   The event entity.
    *
    * @return \Drupal\fxjournal\FxjournalRecordInterface
@@ @@
   /**
    * Gets the trade account entity.
    *
-   * @return \Drupal\fxjournal\FxjournalAccountInterface
+   * @return FxjournalAccountInterface
    *   The trade account entity.
    */
   public function getTradeAccount();
@@ @@
   /**
    * Sets the forex journal record trade account.
    *
-   * @param \Drupal\fxjournal\FxjournalAccountInterface $account
+   * @param FxjournalAccountInterface $account
    *   The trade account entity.
    *
    * @return \Drupal\fxjournal\FxjournalRecordInterface
@@ @@
   /**
    * Gets the forex journal record open datetime.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The forex journal record open datetime object.
    */
   public function getOpenDateTime();
@@ @@
   /**
    * Sets the forex journal record symbol.
    *
-   * @param \Drupal\fxjournal\FxjournalSymbolInterface $symbol
+   * @param FxjournalSymbolInterface $symbol
    *   The symbol entity.
    *
    * @return \Drupal\fxjournal\FxjournalRecordInterface
@@ @@
   /**
    * Gets the forex journal record close datetime.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The forex journal record close datetime object.
    */
   public function getCloseDateTime();
@@ @@
   /**
    * Sets the forex journal owner.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account.
    *
    * @return \Drupal\fxjournal\FxjournalRecordInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/fxjournal/src/FxjournalEventListBuilder.php:29

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\fxjournal\FxjournalEventInterface $entity */
-
+    /** @var FxjournalEventInterface $entity */
     if (!$this->ownDashboard()) {
       $owner = $entity->getOwner();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/fxjournal/src/FxjournalEntityListBuilderTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fxjournal;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
   protected function fxJournalEntityQuery() {
     $query = $this->getStorage()->getQuery();

-    /** @var \Drupal\Core\Session\AccountInterface $account */
+    /** @var AccountInterface $account */
     $account = \Drupal::service('current_user');

     if (
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/fxjournal/src/FxjournalAccountListBuilder.php:32

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\fxjournal\FxjournalAccountInterface $entity */
-
+    /** @var FxjournalAccountInterface $entity */
     if (!$this->ownDashboard()) {
       $owner = $entity->getOwner();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/fxjournal/src/Form/FxjournalSymbolForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New forex journal symbol %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/fxjournal/src/Form/FxjournalRecordUserSettingsForm.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The renderer instance.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/fxjournal/src/Form/FxjournalRecordForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New forex journal record %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/fxjournal/src/Form/FxjournalEventForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New forex journal event %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/fxjournal/src/Form/FxjournalAccountForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New forex journal account %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/fxjournal/src/Controller/FxjournalSymbolController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fxjournal\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $typeManager;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $type_manager
+   * @param EntityTypeManager $type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManager $type_manager) {
@@ @@
   /**
    * Checks access for a specific request.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $user) {
@@ @@
   /**
    * Generates the dashboard render content.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user object.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/fxjournal/src/Controller/FxjournalEventController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fxjournal\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $typeManager;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $type_manager
+   * @param EntityTypeManager $type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManager $type_manager) {
@@ @@
   /**
    * Checks access for a specific request.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $user) {
@@ @@
   /**
    * Generates the dashboard render content.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user object.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/fxjournal/src/Controller/FxjournalDashboardController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fxjournal\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $typeManager;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $type_manager
+   * @param EntityTypeManager $type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManager $type_manager) {
@@ @@
   /**
    * Checks access for a specific request.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $user) {
@@ @@
   /**
    * Generates the dashboard render content.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user object.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/fxjournal/src/Controller/FxjournalAccountController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fxjournal\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $typeManager;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $type_manager
+   * @param EntityTypeManager $type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManager $type_manager) {
@@ @@
   /**
    * Checks access for a specific request.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $user) {
@@ @@
   /**
    * Generates the dashboard render content.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user object.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/fxjournal/fxjournal.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\fxjournal\Processor;
+use Drupal\Core\Session\AccountProxyInterface;
 /**
  * @file
  * Provides a forex journal record entity type.
@@ @@
 function fxjournal_form_fxjournal_record_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $user = \Drupal::currentUser();

-  /** @var \Drupal\fxjournal\Processor $processor */
+  /** @var Processor $processor */
   $processor = \Drupal::service('fxjournal.processor');

   $trade_accounts = $processor->getAccounts($user->id());
@@ @@
   $record = $form_state->getFormObject()->getEntity();
   $author_id = $record->getOwnerId();

-  /** @var \Drupal\fxjournal\Processor $processor */
+  /** @var Processor $processor */
   $processor = \Drupal::service('fxjournal.processor');

   // Set the trade account select options to belong to the record author only.
@@ @@
  *
  * @param mixed $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state instance.
  */
 function fxjournal_record_form_submit_handler(&$form, FormStateInterface $form_state) {
@@ @@
  *
  * @param mixed $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state instance.
  */
 function fxjournal_account_form_submit_handler(&$form, FormStateInterface $form_state) {
@@ @@
  *
  * @param mixed $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state instance.
  */
 function fxjournal_symbol_form_submit_handler(&$form, FormStateInterface $form_state) {
@@ @@
  *
  * @param mixed $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state instance.
  */
 function fxjournal_event_form_submit_handler(&$form, FormStateInterface $form_state) {
@@ @@
 /**
  * Gets the allowed values for the record entity references.
  *
- * @param \Drupal\field\Entity\FieldStorageConfig $definition
+ * @param FieldStorageConfig $definition
  *   The field definition object.
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The entity instance.
  *
  * @return array
@@ @@
  *   The allowed values.
  */
 function fxjournal_allowed_values_callback(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL): array {
-  /** @var \Drupal\Core\Session\AccountProxyInterface $user */
+  /** @var AccountProxyInterface $user */
   $user = \Drupal::currentUser();

-  /** @var \Drupal\fxjournal\Processor $processor */
+  /** @var Processor $processor */
   $processor = \Drupal::service('fxjournal.processor');

   switch ($entity->bundle()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 20 files have been changed by Rector                                      

