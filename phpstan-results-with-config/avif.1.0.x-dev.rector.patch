diff --git a/avif.module b/avif.module
index ac4e0ca..652422f 100644
--- a/avif.module
+++ b/avif.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Template\Attribute;
 /**
  * @file
  * Contains avif.module.
@@ -37,8 +38,7 @@ function avif_preprocess_responsive_image(&$variables) {
   $avif = \Drupal::service('avif.avif');
 
   foreach ($variables['sources'] as $source) {
-    /** @var \Drupal\Core\Template\Attribute $source */
-
+    /** @var Attribute $source */
     // Blazy module is using another srcset attribute.
     $srcset_attribute_key = FALSE;
     if ($source->offsetExists('data-srcset')) {
diff --git a/src/Annotation/AvifProcessor.php b/src/Annotation/AvifProcessor.php
index 49b0918..307ee53 100644
--- a/src/Annotation/AvifProcessor.php
+++ b/src/Annotation/AvifProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\avif\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class AvifProcessor extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Avif.php b/src/Avif.php
index f7a2ad5..dc377bb 100644
--- a/src/Avif.php
+++ b/src/Avif.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\avif;
 
+use Psr\Log\LoggerInterface;
+use GuzzleHttp\Client;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\Exception\FileException;
 use Drupal\Core\File\FileSystem;
@@ -24,14 +26,14 @@ class Avif {
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -45,14 +47,14 @@ class Avif {
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;
 
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
@@ -66,17 +68,17 @@ class Avif {
   /**
    * Avif constructor.
    *
-   * @param \Drupal\Core\Image\ImageFactory $imageFactory
+   * @param ImageFactory $imageFactory
    *   Image factory to be used.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   Logger channel factory.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   * @param TranslationInterface $stringTranslation
    *   String translation interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Configuration factory.
-   * @param \Drupal\Core\File\FileSystem $fileSystem
+   * @param FileSystem $fileSystem
    *   The file system service.
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   The HTTP client.
    */
   public function __construct(ImageFactory $imageFactory, LoggerChannelFactoryInterface $loggerFactory, TranslationInterface $stringTranslation, ConfigFactoryInterface $configFactory, FileSystem $fileSystem, ClientInterface $httpClient) {
diff --git a/src/Controller/ImageStyleDownloadController.php b/src/Controller/ImageStyleDownloadController.php
index bd749b8..cbb939c 100644
--- a/src/Controller/ImageStyleDownloadController.php
+++ b/src/Controller/ImageStyleDownloadController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\avif\Controller;
 
+use Psr\Log\LoggerInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Image\Image;
 use Drupal\Core\Image\ImageFactory;
@@ -25,48 +26,48 @@ class ImageStyleDownloadController extends FileDownloadController {
   /**
    * The lock backend.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Avif driver.
    *
-   * @var \Drupal\avif\Avif
+   * @var Avif
    */
   protected $avif;
 
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * Constructs a ImageStyleDownloadController object.
    *
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock backend.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\avif\Avif $avif
+   * @param Avif $avif
    *   Avif driver.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
    */
   public function __construct(LockBackendInterface $lock, ImageFactory $image_factory, Avif $avif, StreamWrapperManagerInterface $stream_wrapper_manager) {
@@ -94,19 +95,19 @@ class ImageStyleDownloadController extends FileDownloadController {
    *
    * After generating an image, transfer it to the requesting agent.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param string $scheme
    *   The file scheme, defaults to 'private'.
-   * @param \Drupal\image\ImageStyleInterface $image_style
+   * @param ImageStyleInterface $image_style
    *   The image style to deliver.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse|\Symfony\Component\HttpFoundation\Response
+   * @return BinaryFileResponse|Response
    *   The transferred file as response or some error response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when the user does not have access to the file.
-   * @throws \Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException
+   * @throws ServiceUnavailableHttpException
    *   Thrown when the file is still being generated.
    */
   public function deliver(Request $request, $scheme, ImageStyleInterface $image_style) {
@@ -227,7 +228,7 @@ class ImageStyleDownloadController extends FileDownloadController {
    * @param string $scheme
    *   The file scheme, defaults to 'private'.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The transferred file as response.
    */
   protected function avifResponse($file, array $headers, $scheme) {
@@ -245,14 +246,14 @@ class ImageStyleDownloadController extends FileDownloadController {
   /**
    * Returns an image style derivative as response.
    *
-   * @param \Drupal\Core\Image\Image $image
+   * @param Image $image
    *   The image style derivation.
    * @param array $headers
    *   Response headers.
    * @param string $scheme
    *   The file scheme, defaults to 'private'.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The transferred file as response.
    */
   protected function response(Image $image, array $headers, $scheme) {
diff --git a/src/Plugin/AvifProcessorManager.php b/src/Plugin/AvifProcessorManager.php
index 9358123..36d7459 100644
--- a/src/Plugin/AvifProcessorManager.php
+++ b/src/Plugin/AvifProcessorManager.php
@@ -18,9 +18,9 @@ class AvifProcessorManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
