diff --git a/micro_menu.info.yml b/micro_menu.info.yml
index 89e0df6..6f6d467 100644
--- a/micro_menu.info.yml
+++ b/micro_menu.info.yml
@@ -1,7 +1,7 @@
 name: Micro Menu
 type: module
 description: 'Manage menu per micro site.'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
 package: 'Micro Site'
 dependencies:
   - micro_site:micro_site
diff --git a/micro_menu.module b/micro_menu.module
index 25229e4..6b71ee3 100644
--- a/micro_menu.module
+++ b/micro_menu.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\menu_link_content\Entity\MenuLinkContent;
+use Drupal\node\NodeTypeInterface;
+use Drupal\micro_site\SiteNegotiatorInterface;
 /**
  * @file
  * Contains micro_menu.module.
@@ -41,13 +44,13 @@ function micro_menu_help($route_name, RouteMatchInterface $route_match) {
  * Implements hook_ENTITY_TYPE_insert().
  */
 function micro_menu_site_insert(EntityInterface $entity) {
-  /** @var \Drupal\micro_site\Entity\SiteInterface $entity */
+  /** @var SiteInterface $entity */
   if (!$entity->hasMenu()) {
     return;
   }
   $site_menu = $entity->getSiteMenu();
   if (empty($site_menu)) {
-    /** @var \Drupal\system\Entity\Menu $menu */
+    /** @var Menu $menu */
     $menu = Menu::create([
       'id' => 'site-' . $entity->id(),
       'label' => 'Menu ' . $entity->label(),
@@ -71,13 +74,13 @@ function micro_menu_site_insert(EntityInterface $entity) {
  * Implements hook_ENTITY_TYPE_insert().
  */
 function micro_menu_site_update(EntityInterface $entity) {
-  /** @var \Drupal\micro_site\Entity\SiteInterface $entity */
+  /** @var SiteInterface $entity */
   if (!$entity->hasMenu()) {
     return;
   }
   $site_menu = $entity->getSiteMenu();
   if (empty($site_menu)) {
-    /** @var \Drupal\system\Entity\Menu $menu */
+    /** @var Menu $menu */
     $menu = Menu::create([
       'id' => 'site-' . $entity->id(),
       'label' => 'Menu ' . $entity->label(),
@@ -120,7 +123,7 @@ function _micro_menu_generate_simple_sitemap_settings(MenuInterface $menu) {
  */
 function micro_menu_menu_link_content_access(EntityInterface $entity, $operation, AccountInterface $account) {
   $site = NULL;
-  /** @var \Drupal\menu_link_content\Entity\MenuLinkContent $entity */
+  /** @var MenuLinkContent $entity */
   $menu_name = $entity->getMenuName();
   $menu = Menu::load($menu_name);
   if ($menu instanceof MenuInterface) {
@@ -224,9 +227,9 @@ function micro_menu_filter_menu_parent_options_per_site(&$element, $menu_id) {
 function micro_menu_form_node_form_alter(&$form, FormStateInterface $form_state) {
   $account = \Drupal::currentUser();
   $node = $form_state->getFormObject()->getEntity();
-  /** @var \Drupal\node\NodeTypeInterface $node_type */
+  /** @var NodeTypeInterface $node_type */
   $node_type = $node->type->entity;
-  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+  /** @var SiteNegotiatorInterface $negotiator */
   $negotiator = \Drupal::service('micro_site.negotiator');
   $site = $negotiator->getSite();
   if (!$site instanceof SiteInterface) {
diff --git a/src/Access/SiteMenuAccess.php b/src/Access/SiteMenuAccess.php
index e7541e9..8e43471 100644
--- a/src/Access/SiteMenuAccess.php
+++ b/src/Access/SiteMenuAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micro_menu\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -21,18 +22,18 @@ class SiteMenuAccess {
   /**
    * Checks access to the entity operation on the given route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\system\MenuInterface $menu
+   * @param MenuInterface $menu
    *   The menu on which check access.
-   * @param \Drupal\micro_site\Entity\SiteInterface $site
+   * @param SiteInterface $site
    *   The site entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account, MenuInterface $menu, SiteInterface $site = NULL) {
diff --git a/src/Form/SiteMenuForm.php b/src/Form/SiteMenuForm.php
index 3879f5a..f30870b 100644
--- a/src/Form/SiteMenuForm.php
+++ b/src/Form/SiteMenuForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\micro_menu\Form;
 
+use Drupal\micro_site\Entity\SiteInterface;
+use Drupal\system\MenuInterface;
+use Drupal\menu_link_content\Plugin\Menu\MenuLinkContent;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Url;
@@ -16,7 +19,7 @@ class SiteMenuForm extends MenuForm {
   /**
    * The site entity.
    *
-   * @var \Drupal\micro_site\Entity\SiteInterface|NULL
+   * @var SiteInterface|NULL
    */
   protected $site;
 
@@ -25,7 +28,7 @@ class SiteMenuForm extends MenuForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\system\MenuInterface $menu */
+    /** @var MenuInterface $menu */
     $menu = $this->entity;
     // We check if we are in a site entity context, and so get the site
     // parameter into the route, which is the site id.
@@ -60,7 +63,7 @@ class SiteMenuForm extends MenuForm {
     $elements = &$form['links']['links'];
     foreach (Element::children($elements) as $key) {
       if (isset($elements[$key]['#item'])) {
-        /** @var \Drupal\menu_link_content\Plugin\Menu\MenuLinkContent $menu_link_plugin */
+        /** @var MenuLinkContent $menu_link_plugin */
         $menu_link_plugin = $elements[$key]['#item']->link;
         $uuid = $menu_link_plugin->getDerivativeId();
         $entity = $this->entityManager->loadEntityByUuid('menu_link_content', $uuid);
diff --git a/src/Plugin/Block/MicroMenuBlock.php b/src/Plugin/Block/MicroMenuBlock.php
index ff1aabd..6a8ab26 100644
--- a/src/Plugin/Block/MicroMenuBlock.php
+++ b/src/Plugin/Block/MicroMenuBlock.php
@@ -23,7 +23,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class MicroMenuBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuTree;
 
@@ -33,7 +33,7 @@ class MicroMenuBlock extends BlockBase implements ContainerFactoryPluginInterfac
   protected $menuName;
 
   /**
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
@@ -43,8 +43,8 @@ class MicroMenuBlock extends BlockBase implements ContainerFactoryPluginInterfac
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menuTree
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param MenuLinkTreeInterface $menuTree
+   * @param SiteNegotiatorInterface $site_negotiator
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MenuLinkTreeInterface $menuTree, SiteNegotiatorInterface $site_negotiator)  {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/ResponsiveMenuConfigOverrides.php b/src/ResponsiveMenuConfigOverrides.php
index 367ffc3..0f1db69 100644
--- a/src/ResponsiveMenuConfigOverrides.php
+++ b/src/ResponsiveMenuConfigOverrides.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micro_menu;
 
+use Drupal\micro_site\SiteNegotiatorInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryOverrideInterface;
@@ -17,7 +18,7 @@ class ResponsiveMenuConfigOverrides implements ConfigFactoryOverrideInterface {
   /**
    * The active micro site or NULL.
    *
-   * @var \Drupal\micro_site\Entity\SiteInterface|NULL
+   * @var SiteInterface|NULL
    */
   protected $activeSite = NULL;
 
@@ -46,9 +47,9 @@ class ResponsiveMenuConfigOverrides implements ConfigFactoryOverrideInterface {
     // I don't use here a dependency injection because of a
     // CircularReferenceException thrown when injecting the negotiator.
     if (is_null($this->activeSite)) {
-      /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+      /** @var SiteNegotiatorInterface $negotiator */
       $negotiator = \Drupal::service('micro_site.negotiator');
-      /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+      /** @var SiteInterface $site */
       $this->activeSite = $negotiator->getActiveSite();
     }
     return $this->activeSite;
diff --git a/src/Routing/RouteProcessor.php b/src/Routing/RouteProcessor.php
index 22d354a..eb31098 100644
--- a/src/Routing/RouteProcessor.php
+++ b/src/Routing/RouteProcessor.php
@@ -19,7 +19,7 @@ class RouteProcessor implements OutboundRouteProcessorInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -33,18 +33,18 @@ class RouteProcessor implements OutboundRouteProcessorInterface {
   /**
    * The request stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a RouteProcessor object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack object.
    */
   function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, RequestStack $requestStack) {
@@ -75,9 +75,9 @@ class RouteProcessor implements OutboundRouteProcessorInterface {
 
     if (in_array($route_name, $routes_to_check)) {
       $request = $this->requestStack->getCurrentRequest();
-      /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+      /** @var SiteInterface $site */
       $site = $request->get('site');
-      /** @var \Drupal\system\MenuInterface $menu */
+      /** @var MenuInterface $menu */
       $menu = $request->get('menu');
 
       // @TODO test if the active site is retrieved when we are on the site url.
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index c69b743..9141e68 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\micro_menu\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\micro_site\Functional\MicroSiteBase;
@@ -30,7 +31,7 @@ class LoadTest extends MicroSiteBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
@@ -46,7 +47,7 @@ class LoadTest extends MicroSiteBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ -57,7 +58,7 @@ class LoadTest extends MicroSiteBase {
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
 }
