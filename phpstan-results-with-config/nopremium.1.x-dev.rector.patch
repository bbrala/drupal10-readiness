diff --git a/nopremium.install b/nopremium.install
index fce445a..41004af 100644
--- a/nopremium.install
+++ b/nopremium.install
@@ -1,15 +1,15 @@
 <?php
 
+use Drupal\Core\Config\StorageInterface;
 /**
  * @file
  * Install, update and uninstall functions for the nopremium module.
  */
-
 /**
  * Implements hook_uninstall().
  */
 function nopremium_uninstall() {
-  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
+  /** @var StorageInterface $config_storage */
   $config_storage = \Drupal::service('config.storage');
 
   // Get a list of all content types.
diff --git a/nopremium.module b/nopremium.module
index e0879bc..e8a30f4 100644
--- a/nopremium.module
+++ b/nopremium.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\nopremium\NodeOptionPremiumHelperInterface;
+use Drupal\node\NodeInterface;
 /**
  * @file
  * Hook implementations.
@@ -111,11 +115,11 @@ function nopremium_entity_base_field_info(EntityTypeInterface $entity_type) {
  * Implements entity_view_mode_alter().
  */
 function nopremium_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
-  /** @var \Drupal\Core\Session\AccountInterface $user */
+  /** @var AccountInterface $user */
   $user = \Drupal::currentUser();
-  /** @var \Drupal\Core\Config\ImmutableConfig $config */
+  /** @var ImmutableConfig $config */
   $config = \Drupal::config('nopremium.settings');
-  /** @var \Drupal\nopremium\NodeOptionPremiumHelperInterface $helper */
+  /** @var NodeOptionPremiumHelperInterface $helper */
   $helper = \Drupal::service('nopremium.helper');
 
   // Check if premium access applies for the current view mode.
@@ -203,7 +207,7 @@ function nopremium_node_view(array &$build, EntityInterface $entity, EntityViewD
  * Implements template_preprocess_node().
  */
 function nopremium_preprocess_node(&$variables) {
-  /** @var \Drupal\node\NodeInterface $node */
+  /** @var NodeInterface $node */
   $node = $variables['elements']['#node'];
 
   if (!empty($node->original_view_mode)) {
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index d94d0d5..02ceafa 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -18,32 +18,32 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new SettingsForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository, ModuleHandlerInterface $module_handler) {
diff --git a/src/NodeOptionPremiumHelperInterface.php b/src/NodeOptionPremiumHelperInterface.php
index 0339f31..70c8f50 100644
--- a/src/NodeOptionPremiumHelperInterface.php
+++ b/src/NodeOptionPremiumHelperInterface.php
@@ -13,9 +13,9 @@ interface NodeOptionPremiumHelperInterface {
   /**
    * Checks if the given user has full access to the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to check for premium access.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The operating account.
    */
   public function hasFullAccess(ContentEntityInterface $entity, AccountInterface $account);
diff --git a/src/NodeOptionPremiumPermissions.php b/src/NodeOptionPremiumPermissions.php
index f0e4877..bc81efd 100644
--- a/src/NodeOptionPremiumPermissions.php
+++ b/src/NodeOptionPremiumPermissions.php
@@ -33,7 +33,7 @@ class NodeOptionPremiumPermissions {
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\node\Entity\NodeType $type
+   * @param NodeType $type
    *   The node type.
    *
    * @return array
diff --git a/tests/src/Functional/Form/NodeTypeFormTest.php b/tests/src/Functional/Form/NodeTypeFormTest.php
index 129a748..5eab51d 100644
--- a/tests/src/Functional/Form/NodeTypeFormTest.php
+++ b/tests/src/Functional/Form/NodeTypeFormTest.php
@@ -23,7 +23,8 @@ class NodeTypeFormTest extends NopremiumBrowserTestBase {
       'type' => 'foo',
       'options[premium]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/types/add', $edit, 'Save content type');
+    $this->drupalGet('admin/structure/types/add');
+    $this->submitForm($edit, 'Save content type');
 
     // Assert that premium was enabled for this content type.
     $config = $this->config('core.base_field_override.node.foo.premium');
@@ -45,7 +46,8 @@ class NodeTypeFormTest extends NopremiumBrowserTestBase {
     $edit = [
       'options[premium]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/types/manage/foo', $edit, 'Save content type');
+    $this->drupalGet('admin/structure/types/manage/foo');
+    $this->submitForm($edit, 'Save content type');
 
     // Assert that premium was enabled for this content type.
     $config = $this->config('core.base_field_override.node.foo.premium');
diff --git a/tests/src/Functional/Form/SettingsFormTest.php b/tests/src/Functional/Form/SettingsFormTest.php
index e3297eb..ba5abc8 100644
--- a/tests/src/Functional/Form/SettingsFormTest.php
+++ b/tests/src/Functional/Form/SettingsFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\nopremium\Functional\Form;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\nopremium\Functional\NopremiumBrowserTestBase;
 
 /**
@@ -14,14 +15,14 @@ class SettingsFormTest extends NopremiumBrowserTestBase {
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create an user with admin privileges.
@@ -43,9 +44,10 @@ class SettingsFormTest extends NopremiumBrowserTestBase {
    */
   public function testNew() {
     $this->drupalLogin($this->adminUser);
+    $this->drupalGet('/admin/config/content/nopremium');
 
     // Test submitting form without changing anything.
-    $this->drupalPostForm('/admin/config/content/nopremium', [], 'Save configuration');
+    $this->submitForm([], 'Save configuration');
 
     $expected = [
       'default_message' => 'The full content of this page is available to premium users only.',
@@ -71,7 +73,8 @@ class SettingsFormTest extends NopremiumBrowserTestBase {
       'view_modes[teaser]' => '',
       'teaser_view_mode' => 'rss',
     ];
-    $this->drupalPostForm('/admin/config/content/nopremium', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/content/nopremium');
+    $this->submitForm($edit, 'Save configuration');
 
     $expected = [
       'default_message' => 'This is premium content.',
@@ -95,9 +98,10 @@ class SettingsFormTest extends NopremiumBrowserTestBase {
     // Create two content types.
     $this->drupalCreateContentType(['type' => 'bar']);
     $this->drupalCreateContentType(['type' => 'foo']);
+    $this->drupalGet('/admin/config/content/nopremium');
 
     // Test submitting form without changing anything.
-    $this->drupalPostForm('/admin/config/content/nopremium', [], 'Save configuration');
+    $this->submitForm([], 'Save configuration');
 
     $expected = [
       'default_message' => 'The full content of this page is available to premium users only.',
@@ -129,7 +133,8 @@ class SettingsFormTest extends NopremiumBrowserTestBase {
       'message_bar' => 'This is the message for the bar content type.',
       'message_foo' => 'This is the message for the foo content type.',
     ];
-    $this->drupalPostForm('/admin/config/content/nopremium', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/content/nopremium');
+    $this->submitForm($edit, 'Save configuration');
 
     $expected = [
       'default_message' => 'This is premium content.',
@@ -167,9 +172,10 @@ class SettingsFormTest extends NopremiumBrowserTestBase {
       ])
       ->set('teaser_view_mode', 'rss')
       ->save();
+    $this->drupalGet('/admin/config/content/nopremium');
 
     // Test submitting form without changing anything.
-    $this->drupalPostForm('/admin/config/content/nopremium', [], 'Save configuration');
+    $this->submitForm([], 'Save configuration');
 
     // Assert that the configuration stayed the same.
     $expected = [
diff --git a/tests/src/Functional/InstallTest.php b/tests/src/Functional/InstallTest.php
index 1a12d7d..cd31cb1 100644
--- a/tests/src/Functional/InstallTest.php
+++ b/tests/src/Functional/InstallTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\nopremium\Functional;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Extension\ModuleInstallerInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -24,21 +26,21 @@ class InstallTest extends BrowserTestBase {
   /**
    * Module handler to ensure installed modules.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   public $moduleHandler;
 
   /**
    * Module installer.
    *
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   public $moduleInstaller;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->moduleHandler = $this->container->get('module_handler');
     $this->moduleInstaller = $this->container->get('module_installer');
