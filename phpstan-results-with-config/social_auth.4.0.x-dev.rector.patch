diff --git a/social_auth.module b/social_auth.module
index 9839530..ddc8231 100755
--- a/social_auth.module
+++ b/social_auth.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\social_auth\Entity\SocialAuth;
 /**
  * @file
  * Allows login using different social networking services.
@@ -37,7 +38,7 @@ function social_auth_user_delete(EntityInterface $account) {
     $storage = \Drupal::entityTypeManager()
       ->getStorage('social_auth');
 
-    /** @var \Drupal\social_auth\Entity\SocialAuth[] $socialAuthUser */
+    /** @var SocialAuth[] $socialAuthUser */
     $users = $storage->loadByProperties([
       'user_id' => $account->id(),
     ]);
diff --git a/social_auth.post_update.php b/social_auth.post_update.php
index 1da7e4b..63a7c6e 100644
--- a/social_auth.post_update.php
+++ b/social_auth.post_update.php
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\social_auth\Entity\SocialAuth;
 /**
  * @file
  * Method hook_post_update_NAME.
  */
-
 /**
  * Encrypts all tokens currently stored by Social Auth.
  */
@@ -17,7 +17,7 @@ function social_auth_post_update_encrypt_tokens(&$sandbox = NULL) {
   }
 
   $ids = $storage->getQuery()->range($sandbox['progress'], 50)->execute();
-  /** @var \Drupal\social_auth\Entity\SocialAuth[] $social_auth_users */
+  /** @var SocialAuth[] $social_auth_users */
   $social_auth_users = $storage->loadMultiple($ids);
   foreach ($social_auth_users as $user) {
     $token = $user->get('token')->value;
diff --git a/src/Controller/OAuth2ControllerBase.php b/src/Controller/OAuth2ControllerBase.php
index 0444be9..8f9d0ae 100644
--- a/src/Controller/OAuth2ControllerBase.php
+++ b/src/Controller/OAuth2ControllerBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\social_auth\Controller;
 
+use League\OAuth2\Client\Provider\AbstractProvider;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ -29,49 +30,49 @@ class OAuth2ControllerBase extends ControllerBase {
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The network plugin manager.
    *
-   * @var \Drupal\social_api\Plugin\NetworkManager
+   * @var NetworkManager
    */
   protected NetworkManager $networkManager;
 
   /**
    * The Social Auth user authenticator..
    *
-   * @var \Drupal\social_auth\User\UserAuthenticator
+   * @var UserAuthenticator
    */
   protected UserAuthenticator $userAuthenticator;
 
   /**
    * The provider authentication manager.
    *
-   * @var \Drupal\social_auth\AuthManager\OAuth2ManagerInterface|null
+   * @var OAuth2ManagerInterface|null
    */
   protected ?OAuth2ManagerInterface $providerManager = NULL;
 
   /**
    * Used to access GET parameters.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected RequestStack $request;
 
   /**
    * The Social Auth data handler.
    *
-   * @var \Drupal\social_auth\SocialAuthDataHandler
+   * @var SocialAuthDataHandler
    */
   protected SocialAuthDataHandler $dataHandler;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected RendererInterface $renderer;
 
@@ -92,17 +93,17 @@ class OAuth2ControllerBase extends ControllerBase {
   /**
    * OAuth2ControllerBase constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\social_api\Plugin\NetworkManager $network_manager
+   * @param NetworkManager $network_manager
    *   Used to get an instance of the network plugin.
-   * @param \Drupal\social_auth\User\UserAuthenticator $user_authenticator
+   * @param UserAuthenticator $user_authenticator
    *   Used to manage user authentication/registration.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   Used to access GET parameters.
-   * @param \Drupal\social_auth\SocialAuthDataHandler $data_handler
+   * @param SocialAuthDataHandler $data_handler
    *   The Social Auth data handler.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Used to handle metadata for redirection to authentication URL.
    */
   public function __construct(ConfigFactoryInterface $config_factory,
@@ -142,7 +143,7 @@ public static function create(ContainerInterface $container): static {
   /**
    * Sets up the class for the provided network.
    *
-   * @param \Drupal\social_auth\Plugin\Network\NetworkInterface $network
+   * @param NetworkInterface $network
    *   Network.
    */
   private function setUp(NetworkInterface $network): void {
@@ -194,10 +195,10 @@ public function redirectToProvider(NetworkInterface $network): Response {
     $this->setUp($network);
     $context = new RenderContext();
 
-    /** @var \Drupal\Core\Routing\TrustedRedirectResponse|\Symfony\Component\HttpFoundation\RedirectResponse $response */
+    /** @var TrustedRedirectResponse|RedirectResponse $response */
     $response = $this->renderer->executeInRenderContext($context, function () {
       try {
-        /** @var \League\OAuth2\Client\Provider\AbstractProvider|false $client */
+        /** @var AbstractProvider|false $client */
         $client = $this->networkManager->createInstance($this->pluginId)->getSdk();
 
         // If provider client could not be obtained.
@@ -252,7 +253,7 @@ public function redirectToProvider(NetworkInterface $network): Response {
   /**
    * Process implementer callback path.
    *
-   * @return \Drupal\social_auth\User\SocialAuthUserInterface|null
+   * @return SocialAuthUserInterface|null
    *   The user info if successful. Null otherwise.
    */
   private function processCallback(): ?SocialAuthUserInterface {
@@ -303,7 +304,7 @@ private function processCallback(): ?SocialAuthUserInterface {
    * @param string $key
    *   The query parameter key to check for authentication error.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   Redirect response object that may be returned by the controller or null.
    */
   protected function checkAuthError(string $key = 'error'): ?RedirectResponse {
diff --git a/src/Event/BeforeRedirectEvent.php b/src/Event/BeforeRedirectEvent.php
index 4c8e8c7..f680a92 100644
--- a/src/Event/BeforeRedirectEvent.php
+++ b/src/Event/BeforeRedirectEvent.php
@@ -14,7 +14,7 @@ class BeforeRedirectEvent extends SocialAuthEventBase {
   /**
    * The Social Auth data handler.
    *
-   * @var \Drupal\social_auth\SocialAuthDataHandler
+   * @var SocialAuthDataHandler
    */
   protected SocialAuthDataHandler $dataHandler;
 
@@ -28,7 +28,7 @@ class BeforeRedirectEvent extends SocialAuthEventBase {
   /**
    * BeforeRedirectEvent constructor.
    *
-   * @param \Drupal\social_auth\SocialAuthDataHandler $data_handler
+   * @param SocialAuthDataHandler $data_handler
    *   The Social Auth data handler.
    * @param string $plugin_id
    *   The plugin ID dispatching this event.
@@ -44,7 +44,7 @@ public function __construct(SocialAuthDataHandler $data_handler, string $plugin_
   /**
    * Gets the Social Auth data handler object.
    *
-   * @return \Drupal\social_auth\SocialAuthDataHandler
+   * @return SocialAuthDataHandler
    *   The Social Auth data handler.
    */
   public function getDataHandler(): SocialAuthDataHandler {
diff --git a/src/Event/FailedAuthenticationEvent.php b/src/Event/FailedAuthenticationEvent.php
index f9c9eb4..48155fa 100644
--- a/src/Event/FailedAuthenticationEvent.php
+++ b/src/Event/FailedAuthenticationEvent.php
@@ -15,7 +15,7 @@ class FailedAuthenticationEvent extends SocialAuthEventBase {
   /**
    * The Social Auth data handler.
    *
-   * @var \Drupal\social_auth\SocialAuthDataHandler
+   * @var SocialAuthDataHandler
    */
   protected SocialAuthDataHandler $dataHandler;
 
@@ -29,14 +29,14 @@ class FailedAuthenticationEvent extends SocialAuthEventBase {
   /**
    * RedirectResponse object.
    *
-   * @var \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @var RedirectResponse|null
    */
   protected ?RedirectResponse $response;
 
   /**
    * FailedAuthenticationEvent constructor.
    *
-   * @param \Drupal\social_auth\SocialAuthDataHandler $data_handler
+   * @param SocialAuthDataHandler $data_handler
    *   The Social Auth data handler.
    * @param string $plugin_id
    *   The plugin ID dispatching this event.
@@ -52,7 +52,7 @@ public function __construct(SocialAuthDataHandler $data_handler, string $plugin_
   /**
    * Gets the Social Auth data handler object.
    *
-   * @return \Drupal\social_auth\SocialAuthDataHandler
+   * @return SocialAuthDataHandler
    *   The Social Auth data handler.
    */
   public function getDataHandler(): SocialAuthDataHandler {
@@ -72,7 +72,7 @@ public function getError(): string {
   /**
    * Returns the current redirect response object.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response from the provider.
    */
   public function getResponse(): RedirectResponse {
@@ -82,7 +82,7 @@ public function getResponse(): RedirectResponse {
   /**
    * Sets a new redirect response object.
    *
-   * @param \Symfony\Component\HttpFoundation\RedirectResponse $response
+   * @param RedirectResponse $response
    *   The response from the provider.
    */
   public function setResponse(RedirectResponse $response): void {
diff --git a/src/Event/UserEvent.php b/src/Event/UserEvent.php
index 4215af6..5132be2 100644
--- a/src/Event/UserEvent.php
+++ b/src/Event/UserEvent.php
@@ -15,25 +15,25 @@ class UserEvent extends SocialAuthEventBase {
   /**
    * The user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $user;
 
   /**
    * The user's data passed by Social Auth.
    *
-   * @var \Drupal\social_auth\User\SocialAuthUserInterface|null
+   * @var SocialAuthUserInterface|null
    */
   protected ?SocialAuthUserInterface $socialAuthUser;
 
   /**
    * UserEvent constructor.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user.
    * @param string $plugin_id
    *   The plugin Id dispatching this event.
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface|null $social_auth_user
+   * @param SocialAuthUserInterface|null $social_auth_user
    *   The user's data passed by Social Auth.
    */
   public function __construct(UserInterface $user, string $plugin_id, SocialAuthUserInterface $social_auth_user = NULL) {
@@ -45,7 +45,7 @@ public function __construct(UserInterface $user, string $plugin_id, SocialAuthUs
   /**
    * Gets the user.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user.
    */
   public function getUser(): UserInterface {
@@ -55,7 +55,7 @@ public function getUser(): UserInterface {
   /**
    * Gets user's data passed by Social Auth.
    *
-   * @return \Drupal\social_auth\User\SocialAuthUserInterface
+   * @return SocialAuthUserInterface
    *   The user's data.
    */
   public function getSocialAuthUser(): SocialAuthUserInterface {
diff --git a/src/Event/UserFieldsEvent.php b/src/Event/UserFieldsEvent.php
index 91eaf63..9a48a34 100644
--- a/src/Event/UserFieldsEvent.php
+++ b/src/Event/UserFieldsEvent.php
@@ -23,7 +23,7 @@ class UserFieldsEvent extends SocialAuthEventBase {
   /**
    * The data of the user to be created.
    *
-   * @var \Drupal\social_auth\User\SocialAuthUserInterface
+   * @var SocialAuthUserInterface
    */
   protected SocialAuthUserInterface $user;
 
@@ -34,7 +34,7 @@ class UserFieldsEvent extends SocialAuthEventBase {
    *   Initial user fields to populate the newly created user.
    * @param string $plugin_id
    *   The plugin ID dispatching this event.
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface $user
+   * @param SocialAuthUserInterface $user
    *   The data of the user to be created.
    */
   public function __construct(array $user_fields, string $plugin_id, SocialAuthUserInterface $user) {
@@ -66,7 +66,7 @@ public function setUserFields(array $user_fields): void {
   /**
    * Gets the data of the user to be created.
    *
-   * @return \Drupal\social_auth\User\SocialAuthUserInterface
+   * @return SocialAuthUserInterface
    *   The user's data.
    */
   public function getSocialAuthUser(): SocialAuthUserInterface {
diff --git a/src/Form/SocialAuthSettingsForm.php b/src/Form/SocialAuthSettingsForm.php
index ae884cd..477be29 100755
--- a/src/Form/SocialAuthSettingsForm.php
+++ b/src/Form/SocialAuthSettingsForm.php
@@ -18,16 +18,16 @@ class SocialAuthSettingsForm extends ConfigFormBase {
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected RouteProviderInterface $routeProvider;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   Used to check if route exists.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteProviderInterface $route_provider) {
@@ -207,7 +207,7 @@ public function submitForm(array &$form, FormStateInterface $form_state): void {
       ->set('disabled_roles', $values['disabled_roles'])
       ->save();
 
-    /** @var \Drupal\social_auth\Plugin\Network\NetworkInterface $network */
+    /** @var NetworkInterface $network */
     $network = $form_state->get('network');
     $this->configFactory->getEditable("{$network->getPluginId()}.settings")
       ->set('client_id', $values['client_id'])
diff --git a/src/ParamConverter/NetworkConverter.php b/src/ParamConverter/NetworkConverter.php
index c448b40..aaa61c4 100644
--- a/src/ParamConverter/NetworkConverter.php
+++ b/src/ParamConverter/NetworkConverter.php
@@ -16,14 +16,14 @@ class NetworkConverter implements ParamConverterInterface {
   /**
    * Network manager.
    *
-   * @var \Drupal\social_api\Plugin\NetworkManager
+   * @var NetworkManager
    */
   protected NetworkManager $networkManager;
 
   /**
    * Constructs a NetworkConverter instance.
    *
-   * @param \Drupal\social_api\Plugin\NetworkManager $network_manager
+   * @param NetworkManager $network_manager
    */
   public function __construct(NetworkManager $network_manager) {
     $this->networkManager = $network_manager;
diff --git a/src/Plugin/Block/SocialAuthLoginBlock.php b/src/Plugin/Block/SocialAuthLoginBlock.php
index 65c9ec1..7e39757 100755
--- a/src/Plugin/Block/SocialAuthLoginBlock.php
+++ b/src/Plugin/Block/SocialAuthLoginBlock.php
@@ -21,14 +21,14 @@ class SocialAuthLoginBlock extends BlockBase implements ContainerFactoryPluginIn
   /**
    * The network manager.
    *
-   * @var \Drupal\social_api\Plugin\NetworkManager
+   * @var NetworkManager
    */
   private NetworkManager $networkManager;
 
   /**
    * Immutable configuration for social_auth.settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private ImmutableConfig $socialAuthConfig;
 
@@ -41,9 +41,9 @@ class SocialAuthLoginBlock extends BlockBase implements ContainerFactoryPluginIn
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ImmutableConfig $social_auth_config
+   * @param ImmutableConfig $social_auth_config
    *   The Immutable configuration for social_oauth.settings.
-   * @param \Drupal\social_api\Plugin\NetworkManager $network_manager
+   * @param NetworkManager $network_manager
    *   The Social API network manager.
    */
   public function __construct(
diff --git a/src/Plugin/Network/NetworkBase.php b/src/Plugin/Network/NetworkBase.php
index 8e2cf6a..addfd5e 100755
--- a/src/Plugin/Network/NetworkBase.php
+++ b/src/Plugin/Network/NetworkBase.php
@@ -43,7 +43,7 @@ protected function initSdk(): mixed {
   /**
    * Checks that module is configured.
    *
-   * @param \Drupal\social_auth\Settings\SettingsBase $settings
+   * @param SettingsBase $settings
    *   Social Auth implementor settings.
    *
    * @return bool
@@ -97,7 +97,7 @@ public function getProviderLogoPath(): string {
    * @param array $route_options
    *   Route options.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   URL object for the requested route type.
    */
   private function getUrlFromDefaultRoute(string $type, array $route_options = []): Url {
diff --git a/src/Plugin/Network/NetworkInterface.php b/src/Plugin/Network/NetworkInterface.php
index 395cb1f..be4309f 100755
--- a/src/Plugin/Network/NetworkInterface.php
+++ b/src/Plugin/Network/NetworkInterface.php
@@ -16,7 +16,7 @@ interface NetworkInterface extends NetworkInterfaceBase {
    * @param array $route_options
    *   Additional options for the route.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getRedirectUrl(array $route_options = []): Url;
 
@@ -26,7 +26,7 @@ public function getRedirectUrl(array $route_options = []): Url;
    * @param array $route_options
    *   Additional options for the route.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getCallbackUrl(array $route_options = []): Url;
 
@@ -36,7 +36,7 @@ public function getCallbackUrl(array $route_options = []): Url;
    * @param array $route_options
    *   Additional options for the route.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getSettingsFormUrl(array $route_options = []): Url;
 
diff --git a/src/SettingsTrait.php b/src/SettingsTrait.php
index df6fb91..01d159d 100644
--- a/src/SettingsTrait.php
+++ b/src/SettingsTrait.php
@@ -17,21 +17,21 @@ trait SettingsTrait {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * Used to check if route path exists.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected RouteProviderInterface $routeProvider;
 
   /**
    * The Social Auth data handler.
    *
-   * @var \Drupal\social_api\SocialApiDataHandler
+   * @var SocialApiDataHandler
    */
   protected SocialApiDataHandler $dataHandler;
 
@@ -63,7 +63,7 @@ protected function isApprovalRequired(): bool {
   /**
    * Checks if Admin (user 1) can log in.
    *
-   * @param \Drupal\user\UserInterface $drupal_user
+   * @param UserInterface $drupal_user
    *   User object to check if user is admin.
    *
    * @return bool
@@ -78,7 +78,7 @@ protected function isAdminDisabled(UserInterface $drupal_user): bool {
   /**
    * Checks if User with specific roles is allowed to log in.
    *
-   * @param \Drupal\user\UserInterface $drupal_user
+   * @param UserInterface $drupal_user
    *   User object to check if user has a specific role.
    *
    * @return string|false
@@ -98,10 +98,10 @@ protected function isUserRoleDisabled(UserInterface $drupal_user): bool {
   /**
    * Checks if User should be redirected to User Form after creation.
    *
-   * @param \Drupal\user\UserInterface $drupal_user
+   * @param UserInterface $drupal_user
    *   User object to get the id of user.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|false
+   * @return RedirectResponse|false
    *   A redirect response to user form, if option is enabled.
    *   False otherwise
    */
@@ -133,7 +133,7 @@ protected function getNewUserStatus(): int {
   /**
    * Returns the Post Login redirection.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Post Login Path to which the user would be redirected after login.
    */
   protected function getPostLoginRedirection(): RedirectResponse {
diff --git a/src/User/UserAuthenticator.php b/src/User/UserAuthenticator.php
index caf6079..851b8f4 100644
--- a/src/User/UserAuthenticator.php
+++ b/src/User/UserAuthenticator.php
@@ -32,42 +32,42 @@ class UserAuthenticator extends SocialApiUserAuthenticator {
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
   /**
    * The Social Auth user manager.
    *
-   * @var \Drupal\social_api\User\UserManagerInterface
+   * @var UserManagerInterface
    */
   protected UserManagerInterface $userManager;
 
   /**
    * The redirection response to be returned.
    *
-   * @var \Symfony\Component\HttpFoundation\RedirectResponse
+   * @var RedirectResponse
    */
   protected RedirectResponse $response;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Used to get current active user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Used to display messages to user.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Used for logging errors.
-   * @param \Drupal\social_auth\User\UserManager $user_manager
+   * @param UserManager $user_manager
    *   The Social API user manager.
-   * @param \Drupal\social_auth\SocialAuthDataHandler $data_handler
+   * @param SocialAuthDataHandler $data_handler
    *   Used to interact with session.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Used for accessing Drupal configuration.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   Used to check if route path exists.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Used for dispatching social auth events.
    */
   public function __construct(AccountProxyInterface $current_user,
@@ -99,10 +99,10 @@ public function setDestination(string $destination): void {
   /**
    * Authenticates a user.
    *
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface $user
+   * @param SocialAuthUserInterface $user
    *   Social Auth user instance.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function authenticateUser(SocialAuthUserInterface $user): RedirectResponse {
     // Checks for record in Social Auth entity.
@@ -243,7 +243,7 @@ public function authenticateWithEmail(string $email, string $provider_user_id, s
   /**
    * Authenticates and redirects existing users in authentication process.
    *
-   * @param \Drupal\user\UserInterface $drupal_user
+   * @param UserInterface $drupal_user
    *   User object to authenticate.
    */
   public function authenticateExistingUser(UserInterface $drupal_user): void {
@@ -277,7 +277,7 @@ public function authenticateExistingUser(UserInterface $drupal_user): void {
   /**
    * Authenticates and redirects new users in authentication process.
    *
-   * @param \Drupal\user\UserInterface|null $drupal_user
+   * @param UserInterface|null $drupal_user
    *   User object to log in.
    */
   public function authenticateNewUser(?UserInterface $drupal_user = NULL): void {
@@ -319,7 +319,7 @@ public function authenticateNewUser(?UserInterface $drupal_user = NULL): void {
   /**
    * Logs the user in.
    *
-   * @param \Drupal\user\UserInterface $drupal_user
+   * @param UserInterface $drupal_user
    *   User object.
    *
    * @return bool
@@ -361,7 +361,7 @@ public function checkProviderIsAssociated(string $provider_user_id): int|false {
   /**
    * Returns redirection to user login form.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirection response.
    */
   protected function getLoginFormRedirection(): RedirectResponse {
@@ -390,7 +390,7 @@ protected function userLoginFinalize(UserInterface $account): void {
    * @param string|null $error
    *   The error string/code from provider.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   Return redirect response.
    */
   public function dispatchAuthenticationError(?string $error = NULL): ?RedirectResponse {
diff --git a/src/User/UserManager.php b/src/User/UserManager.php
index 97df2e6..b47dbe9 100644
--- a/src/User/UserManager.php
+++ b/src/User/UserManager.php
@@ -36,76 +36,76 @@ class UserManager extends SocialApiUserManager {
   /**
    * Used for access Drupal user field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected EntityFieldManagerInterface $entityFieldManager;
 
   /**
    * Used for user picture directory and file transliteration.
    *
-   * @var \Drupal\Core\Transliteration\PhpTransliteration
+   * @var PhpTransliteration
    */
   protected PhpTransliteration $transliteration;
 
   /**
    * Used to get the current UI language.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected LanguageManagerInterface $languageManager;
 
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
   /**
    * Used for token support in Drupal user picture directory.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;
 
   /**
    * Used for saving the profile picture of the users.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;
 
   /**
    * Password generator.
    *
-   * @var \Drupal\Core\Password\PasswordGeneratorInterface
+   * @var PasswordGeneratorInterface
    */
   protected PasswordGeneratorInterface $passwordGenerator;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Used for loading and creating Drupal user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Used to display messages to user.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Used for logging errors.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Used for accessing Drupal configuration.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Used for access Drupal user field definitions.
-   * @param \Drupal\Core\Transliteration\PhpTransliteration $transliteration
+   * @param PhpTransliteration $transliteration
    *   Used for user picture directory and file transliteration.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Used to get current UI language.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Used for dispatching social auth events.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Used for token support in Drupal user picture directory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   Used for saving the profile picture of the users.
-   * @param \Drupal\Core\Password\PasswordGeneratorInterface $password_generator
+   * @param PasswordGeneratorInterface $password_generator
    *   Used for generating a new usr password randomly.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager,
@@ -135,10 +135,10 @@ public function __construct(EntityTypeManagerInterface $entity_type_manager,
   /**
    * Creates a new user.
    *
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface $user
+   * @param SocialAuthUserInterface $user
    *   The data of the user to be created.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The Drupal user if successful
    *   Null otherwise.
    */
@@ -168,10 +168,10 @@ public function createNewUser(SocialAuthUserInterface $user): ?UserInterface {
   /**
    * Create a new user account.
    *
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface $user
+   * @param SocialAuthUserInterface $user
    *   The data of the user to be created.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   Drupal user account if user was created
    *   False otherwise
    */
@@ -207,7 +207,7 @@ public function createUser(SocialAuthUserInterface $user): User|false {
       // Initializes the user fields.
       $fields = $this->getUserFields($user, $langcode);
 
-      /** @var \Drupal\user\Entity\User $new_user */
+      /** @var User $new_user */
       $new_user = $this->entityTypeManager
         ->getStorage('user')
         ->create($fields);
@@ -317,7 +317,7 @@ public function addUserRecord(int $user_id, string $provider_user_id, string $to
    * @param string $value
    *   Value to search for.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   Drupal user account if found
    *   False otherwise
    */
@@ -370,7 +370,7 @@ protected function saveUser(UserInterface $drupal_user): bool {
   /**
    * Downloads and sets user profile picture.
    *
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface $user
+   * @param SocialAuthUserInterface $user
    *   The Social Auth User object.
    *
    * @return bool
@@ -400,7 +400,7 @@ protected function setProfilePic(SocialAuthUserInterface $user): bool {
    * @param string $id
    *   Social network ID of the user.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   FileInterface object if file was successfully downloaded
    *   False otherwise
    */
@@ -495,7 +495,7 @@ protected function generateUniqueUsername(string $name): string {
   /**
    * Returns an array of fields to initialize the creation of the user.
    *
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface $user
+   * @param SocialAuthUserInterface $user
    *   The data of the user to be created.
    * @param string $langcode
    *   The current UI language.
diff --git a/tests/src/Functional/SocialAuthLoginBlockTest.php b/tests/src/Functional/SocialAuthLoginBlockTest.php
index fc897cd..ee96bc4 100644
--- a/tests/src/Functional/SocialAuthLoginBlockTest.php
+++ b/tests/src/Functional/SocialAuthLoginBlockTest.php
@@ -14,6 +14,7 @@ class SocialAuthLoginBlockTest extends SocialAuthTestBase {
    *
    * No need to specify a provider since it is by default NULL and Social Auth
    * does not have any authentication route by itself.
+   * @doesNotPerformAssertions
    */
   public function testBlockExists() {
     parent::checkLinkToProviderExists();
diff --git a/tests/src/Functional/SocialAuthTestBase.php b/tests/src/Functional/SocialAuthTestBase.php
index cd0d4bf..7f8cf54 100644
--- a/tests/src/Functional/SocialAuthTestBase.php
+++ b/tests/src/Functional/SocialAuthTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\social_auth\Functional;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\block\Entity\Block;
 use Drupal\Core\Url;
 use Drupal\Tests\social_api\Functional\SocialApiTestBase;
@@ -21,7 +22,7 @@ abstract class SocialAuthTestBase extends SocialApiTestBase {
   /**
    * The block entity.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected Block $socialAuthLoginBlock;
 
@@ -35,7 +36,7 @@ abstract class SocialAuthTestBase extends SocialApiTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
 
diff --git a/tests/src/Functional/UserTest.php b/tests/src/Functional/UserTest.php
index 5471364..51a4938 100644
--- a/tests/src/Functional/UserTest.php
+++ b/tests/src/Functional/UserTest.php
@@ -32,28 +32,28 @@ class UserTest extends BrowserTestBase {
   /**
    * The Drupal user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $user;
 
   /**
    * The Social Auth user authenticator.
    *
-   * @var \Drupal\social_auth\User\UserAuthenticator
+   * @var UserAuthenticator
    */
   protected UserAuthenticator $userAuthenticator;
 
   /**
    * The Drupal entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * Social Auth data handler.
    *
-   * @var \Drupal\social_auth\SocialAuthDataHandler
+   * @var SocialAuthDataHandler
    */
   protected SocialAuthDataHandler $dataHandler;
 
diff --git a/tests/src/Kernel/SocialAuthEntityTest.php b/tests/src/Kernel/SocialAuthEntityTest.php
index 4a17880..1a5e96d 100644
--- a/tests/src/Kernel/SocialAuthEntityTest.php
+++ b/tests/src/Kernel/SocialAuthEntityTest.php
@@ -17,14 +17,14 @@ class SocialAuthEntityTest extends EntityKernelTestBase {
   /**
    * The social_auth entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   private EntityInterface $entity;
 
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private EntityStorageInterface $entityStorage;
 
