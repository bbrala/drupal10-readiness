diff --git a/entity_generic.module b/entity_generic.module
index d4fd919..8814233 100644
--- a/entity_generic.module
+++ b/entity_generic.module
@@ -84,7 +84,7 @@ function entity_generic_types() {
 /**
  * Checks whether the current page is the full page view of the passed-in entity.
  *
- * @param \Drupal\entity_generic\Entity\BasicInterface $entity
+ * @param BasicInterface $entity
  *   An entity.
  *
  * @return int|false
@@ -113,14 +113,14 @@ function entity_generic_is_generic(EntityInterface $entity) {
  * Implements hook_entity_view_alter().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  */
 function entity_generic_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   // Generalize the entity-type-specific defaults for easier default theming.
   if ($entity instanceof BasicInterface) {
     $app_root = \Drupal::service('app.root');
-    $file_path = $app_root . '/' . drupal_get_path('module', $entity->getEntityType()->getProvider()) . '/templates/entity-generic--' . strtr($entity->getEntityTypeId(), '_', '-') . '.html.twig';
+    $file_path = $app_root . '/' . \Drupal::service('extension.list.module')->getPath($entity->getEntityType()->getProvider()) . '/templates/entity-generic--' . strtr($entity->getEntityTypeId(), '_', '-') . '.html.twig';
     if (file_exists($file_path)) {
       $build['#theme'] = 'entity_generic__' . $entity->getEntityTypeId();
     }
@@ -136,7 +136,7 @@ function entity_generic_entity_view_alter(array &$build, EntityInterface $entity
  * @param array $variables
  */
 function entity_generic_theme_suggestions_entity_generic_alter(array &$suggestions, array $variables) {
-  /** @var \Drupal\entity_generic\Entity\BasicInterface $entity */
+  /** @var BasicInterface $entity */
   $entity = $variables['elements']['#entity_generic'];
   $sanitized_view_mode = 'vm-' . strtr($variables['elements']['#view_mode'], '.', '_');
 
@@ -158,10 +158,10 @@ function entity_generic_theme_suggestions_entity_generic_alter(array &$suggestio
 function entity_generic_theme_registry_alter(&$theme_registry) {
   $app_root = \Drupal::service('app.root');
   foreach (entity_generic_types() as $type => $definition) {
-    $file_path = $app_root . '/' . drupal_get_path('module', $definition->getProvider()) . '/templates/entity-generic--' . strtr($type, '_', '-') . '.html.twig';
+    $file_path = $app_root . '/' . \Drupal::service('extension.list.module')->getPath($definition->getProvider()) . '/templates/entity-generic--' . strtr($type, '_', '-') . '.html.twig';
     if (file_exists($file_path)) {
       $theme_registry['entity_generic__' . $type] = [
-        'path' => drupal_get_path('module', $definition->getProvider()) . '/templates',
+        'path' => \Drupal::service('extension.list.module')->getPath($definition->getProvider()) . '/templates',
         'preprocess functions' => [
           'template_preprocess',
           'template_preprocess_entity_generic',
@@ -169,7 +169,7 @@ function entity_generic_theme_registry_alter(&$theme_registry) {
         ],
         'render element' => 'elements',
         'template' => 'entity-generic--' . strtr($type, '_', '-'),
-        'theme path' => drupal_get_path('module', $definition->getProvider()),
+        'theme path' => \Drupal::service('extension.list.module')->getPath($definition->getProvider()),
         'type' => 'module',
       ];
     }
diff --git a/src/Controller/GenericController.php b/src/Controller/GenericController.php
index cf1ba71..271ba05 100644
--- a/src/Controller/GenericController.php
+++ b/src/Controller/GenericController.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_generic\Controller;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Render\RendererInterface;
@@ -16,7 +21,7 @@ class GenericController extends ControllerBase {
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface|null
+   * @var EntityTypeInterface|null
    */
   protected $entityType;
 
@@ -30,7 +35,7 @@ class GenericController extends ControllerBase {
   /**
    * The entity type bundle.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $entityTypeBundle;
 
@@ -44,28 +49,28 @@ class GenericController extends ControllerBase {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   public $renderer;
 
   /**
    * Creates class instance.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, RequestStack $request_stack) {
     $this->dateFormatter = $date_formatter;
@@ -98,14 +103,14 @@ class GenericController extends ControllerBase {
    *
    * Redirects to specific add form if only one entity type is available.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the entity types that can be added; however,
    *   if there is only one entity type defined, the function
    *   will return a RedirectResponse to the entity add page for that one entity
    *   type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function addPage() {
     $bundles = array();
@@ -154,8 +159,8 @@ class GenericController extends ControllerBase {
    * @return array
    *   Entity submission form array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function addGenericEntity() {
     $entity_type_definition = $this->entityTypeBundle->getEntityType();
diff --git a/src/Controller/GenericModalController.php b/src/Controller/GenericModalController.php
index 8a37f5f..ff6fc43 100644
--- a/src/Controller/GenericModalController.php
+++ b/src/Controller/GenericModalController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Controller;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -21,16 +22,16 @@ class GenericModalController extends GenericController {
   /**
    * Creates a class instance.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, RequestStack $request_stack, EntityFormBuilderInterface $entity_form_builder) {
     parent::__construct($date_formatter, $renderer, $request_stack);
@@ -52,14 +53,14 @@ class GenericModalController extends GenericController {
   /**
    * Callback for composing the new entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity_class
+   * @param EntityInterface $entity_class
    *   Entity class to be created.
    * @param array $values
    *   Values array.
    * @param array $args
    *   Arguments array.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Created entity.
    */
   public function composeEntity(EntityInterface $entity_class, array $values, array $args = []) {
@@ -72,10 +73,10 @@ class GenericModalController extends GenericController {
    * @param array $args
    *   Arguments array.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   A response with modal window.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function addGenericEntityModal(array $args = []) {
     if (!isset($args['entity_type'])) {
@@ -129,10 +130,10 @@ class GenericModalController extends GenericController {
   /**
    * Callback for editing the entity using modal form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity that will be edited.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   A response with entity edit form in a modal.
    */
   public function editGenericEntityModal(EntityInterface $entity) {
@@ -158,10 +159,10 @@ class GenericModalController extends GenericController {
   /**
    * Callback for editing the entity using modal form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity being operated on.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response with modal window.
    */
   public function toggleStatusModal(EntityInterface $entity) {
@@ -187,10 +188,10 @@ class GenericModalController extends GenericController {
   /**
    * Callback for deleting the entity using modal form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity being operated on.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response with modal window.
    */
   public function deleteGenericEntityModal(EntityInterface $entity) {
diff --git a/src/Entity/GenericType.php b/src/Entity/GenericType.php
index 5dfb263..895a46e 100644
--- a/src/Entity/GenericType.php
+++ b/src/Entity/GenericType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Entity;
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 
@@ -104,7 +105,7 @@ abstract class GenericType extends ConfigEntityBundleBase implements GenericType
   /**
    * Gets the entity field manager.
    *
-   * @return \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @return EntityFieldManagerInterface
    *   The entity field manager service.
    */
   protected function entityFieldManager() {
diff --git a/src/Form/GenericConfigDeleteForm.php b/src/Form/GenericConfigDeleteForm.php
index 10b9d8c..43b3785 100644
--- a/src/Form/GenericConfigDeleteForm.php
+++ b/src/Form/GenericConfigDeleteForm.php
@@ -15,14 +15,14 @@ class GenericConfigDeleteForm extends EntityDeleteForm {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Form/GenericConfigForm.php b/src/Form/GenericConfigForm.php
index ed7e91c..55ceff3 100644
--- a/src/Form/GenericConfigForm.php
+++ b/src/Form/GenericConfigForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_generic\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -16,7 +18,7 @@ class GenericConfigForm extends EntityForm {
   /**
    * Creates a class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -110,8 +112,8 @@ class GenericConfigForm extends EntityForm {
    * @return bool
    *   TRUE if given entity exists.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exists($id) {
     return !empty($this->entityTypeManager->getStorage($this->entity->getEntityType()->id())->load($id));
diff --git a/src/Form/GenericDeleteModalForm.php b/src/Form/GenericDeleteModalForm.php
index c78dfe8..0411eeb 100755
--- a/src/Form/GenericDeleteModalForm.php
+++ b/src/Form/GenericDeleteModalForm.php
@@ -67,10 +67,10 @@ class GenericDeleteModalForm extends ContentEntityConfirmFormBase {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response that either displays errors or closes the modal.
    */
   public function submitModalFormAjax(array $form, FormStateInterface $form_state) {
@@ -98,11 +98,11 @@ class GenericDeleteModalForm extends ContentEntityConfirmFormBase {
   /**
    * AJAX callback handler failed submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   Response with failed submission.
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function submitModalAjaxFail(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
@@ -112,11 +112,11 @@ class GenericDeleteModalForm extends ContentEntityConfirmFormBase {
   /**
    * AJAX callback handler successful submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   Response with success submission.
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function submitModalAjaxSuccess(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
diff --git a/src/Form/GenericModalForm.php b/src/Form/GenericModalForm.php
index 89b4385..c216d82 100644
--- a/src/Form/GenericModalForm.php
+++ b/src/Form/GenericModalForm.php
@@ -77,10 +77,10 @@ class GenericModalForm extends GenericForm {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response with either errors or success.
    */
   public function submitModalAjax(array $form, FormStateInterface $form_state) {
@@ -108,11 +108,11 @@ class GenericModalForm extends GenericForm {
   /**
    * AJAX callback handler failed submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   Response with failed submission.
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function submitModalAjaxFail(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
@@ -122,11 +122,11 @@ class GenericModalForm extends GenericForm {
   /**
    * AJAX callback handler successful submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   Response with successful submission.
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function submitModalAjaxSuccess(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
diff --git a/src/Form/GenericToggleStatusModalForm.php b/src/Form/GenericToggleStatusModalForm.php
index 9c6e234..2b11cbf 100755
--- a/src/Form/GenericToggleStatusModalForm.php
+++ b/src/Form/GenericToggleStatusModalForm.php
@@ -72,10 +72,10 @@ class GenericToggleStatusModalForm extends ContentEntityConfirmFormBase {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response with form submission result.
    */
   public function submitModalFormAjax(array $form, FormStateInterface $form_state) {
@@ -103,11 +103,11 @@ class GenericToggleStatusModalForm extends ContentEntityConfirmFormBase {
   /**
    * AJAX callback handler failed submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   Response with failed submission.
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function submitModalAjaxFail(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
@@ -117,11 +117,11 @@ class GenericToggleStatusModalForm extends ContentEntityConfirmFormBase {
   /**
    * AJAX callback handler successful submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   Response with successful submission.
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function submitModalAjaxSuccess(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
diff --git a/src/Form/GenericTypeDeleteForm.php b/src/Form/GenericTypeDeleteForm.php
index ff8c857..8b63fdd 100644
--- a/src/Form/GenericTypeDeleteForm.php
+++ b/src/Form/GenericTypeDeleteForm.php
@@ -15,14 +15,14 @@ class GenericTypeDeleteForm extends EntityDeleteForm {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates a class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/src/Form/GenericTypeForm.php b/src/Form/GenericTypeForm.php
index 27d8702..21e6e03 100644
--- a/src/Form/GenericTypeForm.php
+++ b/src/Form/GenericTypeForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_generic\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -15,14 +17,14 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class GenericTypeForm extends BundleEntityFormBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates a class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -198,7 +200,7 @@ class GenericTypeForm extends BundleEntityFormBase {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function redirectToFieldUI(array $form, FormStateInterface $form_state) {
@@ -216,8 +218,8 @@ class GenericTypeForm extends BundleEntityFormBase {
    * @return bool
    *   TRUE if entity exits.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exists($id) {
     return !empty($this->entityTypeManager->getStorage($this->entity->getEntityType()->id())->load($id));
diff --git a/src/Generic/EntityApprovedInterface.php b/src/Generic/EntityApprovedInterface.php
index 58caf81..779d98c 100644
--- a/src/Generic/EntityApprovedInterface.php
+++ b/src/Generic/EntityApprovedInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Generic;
 
+use Drupal\entity_generic\Entity\GenericInterface;
 /**
  * Defines an interface for approved and approved_time fields.
  */
@@ -39,7 +40,7 @@ interface EntityApprovedInterface {
    * @param bool $approved
    *   TRUE to set this entity to approved, FALSE to set it to unapproved.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setApproved($approved);
@@ -58,7 +59,7 @@ interface EntityApprovedInterface {
    * @param int $timestamp
    *   The entity approved timestamp.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setApprovedTime($timestamp);
diff --git a/src/Generic/EntityArchivedInterface.php b/src/Generic/EntityArchivedInterface.php
index 57ce0aa..c077440 100644
--- a/src/Generic/EntityArchivedInterface.php
+++ b/src/Generic/EntityArchivedInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Generic;
 
+use Drupal\entity_generic\Entity\GenericInterface;
 /**
  * Defines an interface for archived and archived_time field.
  */
@@ -39,7 +40,7 @@ interface EntityArchivedInterface {
    * @param bool $archived
    *   TRUE to set this entity to archived, FALSE to set it to unarchived.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setArchived($archived);
@@ -58,7 +59,7 @@ interface EntityArchivedInterface {
    * @param int $timestamp
    *   The entity archived timestamp.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setArchivedTime($timestamp);
diff --git a/src/Generic/EntityCreatedInterface.php b/src/Generic/EntityCreatedInterface.php
index 53c5226..4a735c0 100644
--- a/src/Generic/EntityCreatedInterface.php
+++ b/src/Generic/EntityCreatedInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Generic;
 
+use Drupal\entity_generic\Entity\BasicInterface;
 /**
  * Defines an interface for created field.
  */
@@ -21,7 +22,7 @@ interface EntityCreatedInterface {
    * @param int $timestamp
    *   The entity creation timestamp.
    *
-   * @return \Drupal\entity_generic\Entity\BasicInterface
+   * @return BasicInterface
    *   The called entity.
    */
   public function setCreatedTime($timestamp);
diff --git a/src/Generic/EntityDeletedInterface.php b/src/Generic/EntityDeletedInterface.php
index fe84bb1..8d1ecad 100644
--- a/src/Generic/EntityDeletedInterface.php
+++ b/src/Generic/EntityDeletedInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Generic;
 
+use Drupal\entity_generic\Entity\GenericInterface;
 /**
  * Defines an interface for "flag qs deleted" and flag_deleted_time fields.
  */
@@ -40,7 +41,7 @@ interface EntityDeletedInterface {
    *   TRUE to set this entity to be flagged as deleted, FALSE to set it to
    *   unflagged as deleted.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setDeleted($flag_deleted);
@@ -59,7 +60,7 @@ interface EntityDeletedInterface {
    * @param int $timestamp
    *   The entity deleted timestamp.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setDeletedTime($timestamp);
diff --git a/src/Generic/EntityHiddenInterface.php b/src/Generic/EntityHiddenInterface.php
index fa41f48..7d681db 100644
--- a/src/Generic/EntityHiddenInterface.php
+++ b/src/Generic/EntityHiddenInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Generic;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Provides an interface defining a "hidden" flow.
  */
@@ -20,7 +21,7 @@ interface EntityHiddenInterface {
    *
    * @param bool $status
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The called entity.
    */
   public function setHidden($status);
diff --git a/src/Generic/EntityLabelInterface.php b/src/Generic/EntityLabelInterface.php
index 09086dd..2254f24 100644
--- a/src/Generic/EntityLabelInterface.php
+++ b/src/Generic/EntityLabelInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Generic;
 
+use Drupal\entity_generic\Entity\SimpleInterface;
 /**
  * Defines an interface for label.
  */
@@ -21,7 +22,7 @@ interface EntityLabelInterface {
    * @param string $label
    *   The entity label.
    *
-   * @return \Drupal\entity_generic\Entity\SimpleInterface
+   * @return SimpleInterface
    *   The called entity.
    */
   public function setLabel($label);
diff --git a/src/Generic/EntityLockedInterface.php b/src/Generic/EntityLockedInterface.php
index 6bfe973..3514b1f 100644
--- a/src/Generic/EntityLockedInterface.php
+++ b/src/Generic/EntityLockedInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Generic;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Provides an interface defining a "locked" flow.
  */
@@ -20,7 +21,7 @@ interface EntityLockedInterface {
    *
    * @param $locker
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The called entity.
    */
   public function setLock($locker);
@@ -28,7 +29,7 @@ interface EntityLockedInterface {
   /**
    * Releases the "lock".
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The called entity.
    */
   public function releaseLock();
diff --git a/src/Generic/EntityStatusInterface.php b/src/Generic/EntityStatusInterface.php
index 552c377..d59e033 100644
--- a/src/Generic/EntityStatusInterface.php
+++ b/src/Generic/EntityStatusInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Generic;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Defines an interface for statuses.
  */
@@ -39,7 +40,7 @@ interface EntityStatusInterface {
    * @param bool $status
    *   TRUE to set this entity to active, FALSE to set it to inactive.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The called entity.
    */
   public function setStatus($status);
diff --git a/src/Generic/EntityTypedInterface.php b/src/Generic/EntityTypedInterface.php
index 7eec5ea..13fd867 100644
--- a/src/Generic/EntityTypedInterface.php
+++ b/src/Generic/EntityTypedInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Generic;
 
+use Drupal\entity_generic\Entity\GenericInterface;
 /**
  * Defines an interface for label.
  */
@@ -18,7 +19,7 @@ interface EntityTypedInterface {
    * @param string $type
    *   The entity type.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setType($type);
diff --git a/src/GenericConfigManager.php b/src/GenericConfigManager.php
index 8ca64ed..d002509 100644
--- a/src/GenericConfigManager.php
+++ b/src/GenericConfigManager.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_generic;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -13,32 +17,32 @@ class GenericConfigManager implements GenericConfigManagerInterface {
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
diff --git a/src/GenericConfigManagerInterface.php b/src/GenericConfigManagerInterface.php
index 657a191..1fee4b8 100644
--- a/src/GenericConfigManagerInterface.php
+++ b/src/GenericConfigManagerInterface.php
@@ -12,7 +12,7 @@ interface GenericConfigManagerInterface {
   /**
    * Instantiates a new instance of this entity handler.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this object should use.
    *
    * @return static
diff --git a/src/GenericListBuilder.php b/src/GenericListBuilder.php
index b353f34..4fdd42e 100644
--- a/src/GenericListBuilder.php
+++ b/src/GenericListBuilder.php
@@ -26,27 +26,27 @@ class GenericListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Creates a class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
diff --git a/src/GenericManager.php b/src/GenericManager.php
index d39fe96..13cd08f 100644
--- a/src/GenericManager.php
+++ b/src/GenericManager.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_generic;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Link;
@@ -27,25 +30,25 @@ abstract class GenericManager implements GenericManagerInterface {
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
diff --git a/src/GenericManagerInterface.php b/src/GenericManagerInterface.php
index 85cde4f..170222e 100644
--- a/src/GenericManagerInterface.php
+++ b/src/GenericManagerInterface.php
@@ -13,7 +13,7 @@ interface GenericManagerInterface {
   /**
    * Instantiates a new instance of this entity handler.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this object should use.
    *
    * @return static
@@ -32,7 +32,7 @@ interface GenericManagerInterface {
   /**
    * Returns the list of available entities for specific user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   User object.
    *
    * @return array
@@ -45,7 +45,7 @@ interface GenericManagerInterface {
    *
    * Only returns entities available for specific user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   User object.
    *
    * @return array
@@ -58,7 +58,7 @@ interface GenericManagerInterface {
    *
    * Only returns available entities for specific user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   User object.
    *
    * @return array
diff --git a/src/GenericStorageInterface.php b/src/GenericStorageInterface.php
index 53b6394..0fcb195 100644
--- a/src/GenericStorageInterface.php
+++ b/src/GenericStorageInterface.php
@@ -15,7 +15,7 @@ interface GenericStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of entity revision IDs for a specific entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return int[]
@@ -26,7 +26,7 @@ interface GenericStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as entity owner.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -37,7 +37,7 @@ interface GenericStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return int
@@ -61,7 +61,7 @@ interface GenericStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all entities with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/GenericViewBuilder.php b/src/GenericViewBuilder.php
index 63f17aa..ab20908 100644
--- a/src/GenericViewBuilder.php
+++ b/src/GenericViewBuilder.php
@@ -40,7 +40,7 @@ class GenericViewBuilder extends EntityViewBuilder {
   /**
    * Provides entity-specific defaults to the build process.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the defaults should be provided.
    * @param string $view_mode
    *   The view mode that should be used.
diff --git a/src/Plugin/LocalTask/Derivative/LocalTaskDeriver.php b/src/Plugin/LocalTask/Derivative/LocalTaskDeriver.php
index 8ad4331..27f805b 100644
--- a/src/Plugin/LocalTask/Derivative/LocalTaskDeriver.php
+++ b/src/Plugin/LocalTask/Derivative/LocalTaskDeriver.php
@@ -19,16 +19,16 @@ class LocalTaskDeriver extends DeriverBase implements ContainerDeriverInterface
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an local task object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/src/Plugin/views/field/GenericEditModal.php b/src/Plugin/views/field/GenericEditModal.php
index 5c7308d..284f7a1 100644
--- a/src/Plugin/views/field/GenericEditModal.php
+++ b/src/Plugin/views/field/GenericEditModal.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Plugin\views\field;
 
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\views\ResultRow;
@@ -39,7 +40,7 @@ class GenericEditModal extends GenericOperationModalBase {
    * {@inheritdoc}
    */
   public function buildOptionsForm(&$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepository */
+    /** @var EntityDisplayRepositoryInterface $entityDisplayRepository */
     $entityDisplayRepository = \Drupal::service('entity_display.repository');
     $options = $entityDisplayRepository->getFormModeOptions($this->getEntityType());
     $form['form_mode'] = [
diff --git a/src/Plugin/views/filter/IdSelect.php b/src/Plugin/views/filter/IdSelect.php
index 7587abd..dee13ce 100644
--- a/src/Plugin/views/filter/IdSelect.php
+++ b/src/Plugin/views/filter/IdSelect.php
@@ -30,7 +30,7 @@ class IdSelect extends InOperator {
       ->sort(\Drupal::entityTypeManager()->getDefinition($this->getEntityType())->getKey('label'));
     $entities = \Drupal::entityTypeManager()->getStorage($this->getEntityType())->loadMultiple($query->execute());
     foreach ($entities as $entity) {
-      $options[$entity->id()] = \Drupal::entityManager()->getTranslationFromContext($entity)->label();
+      $options[$entity->id()] = \Drupal::service('entity.repository')->getTranslationFromContext($entity)->label();
     }
 
     $default_value = (array) $this->value;
diff --git a/tmp/Access/GenericAccessCheck.php b/tmp/Access/GenericAccessCheck.php
index e04925e..2d61c83 100644
--- a/tmp/Access/GenericAccessCheck.php
+++ b/tmp/Access/GenericAccessCheck.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_generic\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -17,14 +20,14 @@ class GenericAccessCheck implements AccessInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates a class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -34,18 +37,18 @@ class GenericAccessCheck implements AccessInterface {
   /**
    * Checks access to the entity add page for the entity type.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\entity_generic\Entity\GenericTypeInterface $entity_generic_type
+   * @param GenericTypeInterface $entity_generic_type
    *   The type entity.
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResultInterface
    *   The access result.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function access(Route $route, AccountInterface $account, GenericTypeInterface $entity_generic_type = NULL) {
     if (!$entity_generic_type) {
diff --git a/tmp/Controller/GenericViewController.php b/tmp/Controller/GenericViewController.php
index c29815b..2926557 100644
--- a/tmp/Controller/GenericViewController.php
+++ b/tmp/Controller/GenericViewController.php
@@ -13,7 +13,7 @@ class GenericViewController extends EntityViewController {
   /**
    * The _title_callback for the page that renders a single entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
    *
    * @return string
