diff --git a/eca.install b/eca.install
index 9ece14a..35267a1 100644
--- a/eca.install
+++ b/eca.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\eca\Entity\Eca;
 /**
  * @file
  * ECA install file.
@@ -144,7 +145,7 @@ function eca_update_8005() {
  */
 function eca_update_8006() {
   $storage = \Drupal::entityTypeManager()->getStorage('eca');
-  /** @var \Drupal\eca\Entity\Eca $eca */
+  /** @var Eca $eca */
   foreach ($storage->loadMultiple() as $eca) {
     $model = $eca->getModel();
     $xml = $model->getModeldata();
diff --git a/eca.tokens.inc b/eca.tokens.inc
index 30c44dd..3668fc6 100644
--- a/eca.tokens.inc
+++ b/eca.tokens.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\eca\Token\TokenInterface;
+use Drupal\eca\Plugin\DataType\DataTransferObject;
 /**
  * @file
  * Tokens provided by ECA.
@@ -43,9 +45,9 @@ function eca_tokens($type, $tokens, array $data, array $options, BubbleableMetad
   $replacements = [];
 
   if ($type === 'dto' && !empty($data['dto'])) {
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\eca\Plugin\DataType\DataTransferObject $dto */
+    /** @var DataTransferObject $dto */
     $dto = $data['dto'];
     foreach ($tokens as $name => $original) {
       $access_allowed = TRUE;
diff --git a/modules/access/eca_access.module b/modules/access/eca_access.module
index 806adae..3507039 100644
--- a/modules/access/eca_access.module
+++ b/modules/access/eca_access.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\eca_access\Event\EntityAccess;
 /**
  * @file
  * ECA Access module file.
@@ -16,7 +17,7 @@ use Drupal\eca_access\HookHandler;
 /**
  * Helper function to return the hook handler service.
  *
- * @return \Drupal\eca_access\HookHandler
+ * @return HookHandler
  *   The hook handler service.
  */
 function _eca_access_hook_handler(): HookHandler {
@@ -27,7 +28,7 @@ function _eca_access_hook_handler(): HookHandler {
  * Implements hook_entity_access().
  */
 function eca_access_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\eca_access\Event\EntityAccess $event */
+  /** @var EntityAccess $event */
   if ($event = _eca_access_hook_handler()->entityAccess($entity, $operation, $account)) {
     if ($result = $event->getAccessResult()) {
       if ($result instanceof RefinableCacheableDependencyInterface) {
@@ -46,7 +47,7 @@ function eca_access_entity_access(EntityInterface $entity, $operation, AccountIn
  */
 function eca_access_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
   // Need the field item list to retreive the according entity.
-  /** @var \Drupal\eca_access\Event\EntityAccess $event */
+  /** @var EntityAccess $event */
   if ($items && ($event = _eca_access_hook_handler()->fieldAccess($items->getEntity(), $operation, $account, $field_definition->getName()))) {
     if ($result = $event->getAccessResult()) {
       if ($result instanceof RefinableCacheableDependencyInterface) {
diff --git a/modules/access/src/Event/EntityAccess.php b/modules/access/src/Event/EntityAccess.php
index 306ac9e..48151dd 100644
--- a/modules/access/src/Event/EntityAccess.php
+++ b/modules/access/src/Event/EntityAccess.php
@@ -22,7 +22,7 @@ class EntityAccess extends Event implements ConditionalApplianceInterface, Entit
   /**
    * The entity being asked for access.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected EntityInterface $entity;
 
@@ -36,25 +36,25 @@ class EntityAccess extends Event implements ConditionalApplianceInterface, Entit
   /**
    * The account that asks for access.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected AccountInterface $account;
 
   /**
    * The access result.
    *
-   * @var \Drupal\Core\Access\AccessResultInterface|null
+   * @var AccessResultInterface|null
    */
   protected ?AccessResultInterface $accessResult = NULL;
 
   /**
    * Constructs a new EntityAccess object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being asked for access.
    * @param string $operation
    *   The operation to perform.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account that asks for access.
    */
   public function __construct(EntityInterface $entity, string $operation, AccountInterface $account) {
@@ -83,7 +83,7 @@ class EntityAccess extends Event implements ConditionalApplianceInterface, Entit
   /**
    * Get the account that asks for access.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The account.
    */
   public function getAccount(): AccountInterface {
@@ -163,7 +163,7 @@ class EntityAccess extends Event implements ConditionalApplianceInterface, Entit
   /**
    * Get the access result.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface|null
+   * @return AccessResultInterface|null
    *   The access result, or NULL if no result was calculated.
    */
   public function getAccessResult(): ?AccessResultInterface {
@@ -173,7 +173,7 @@ class EntityAccess extends Event implements ConditionalApplianceInterface, Entit
   /**
    * Set the access result.
    *
-   * @param \Drupal\Core\Access\AccessResultInterface $result
+   * @param AccessResultInterface $result
    *   The access result to set.
    *
    * @return $this
diff --git a/modules/access/src/Event/FieldAccess.php b/modules/access/src/Event/FieldAccess.php
index 105fc76..5503eef 100644
--- a/modules/access/src/Event/FieldAccess.php
+++ b/modules/access/src/Event/FieldAccess.php
@@ -24,11 +24,11 @@ class FieldAccess extends EntityAccess {
   /**
    * Constructs a new FieldAccess object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being asked for access.
    * @param string $operation
    *   The operation to perform.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account that asks for access.
    * @param string $field_name
    *   The field name.
diff --git a/modules/access/src/HookHandler.php b/modules/access/src/HookHandler.php
index 8df432c..2dda3d8 100644
--- a/modules/access/src/HookHandler.php
+++ b/modules/access/src/HookHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_access;
 
+use Drupal\Component\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\eca\Event\BaseHookHandler;
@@ -18,14 +19,14 @@ class HookHandler extends BaseHookHandler {
   /**
    * Trigger entity access.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being asked for access.
    * @param string $operation
    *   The operation to perform.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account that asks for access.
    *
-   * @return \Drupal\Component\EventDispatcher\Event|\Symfony\Contracts\EventDispatcher\Event|null
+   * @return Event|\Symfony\Contracts\EventDispatcher\Event|null
    *   The dispatched event, nor NULL if no event was dispatched.
    */
   public function entityAccess(EntityInterface $entity, string $operation, AccountInterface $account): ?object {
@@ -35,16 +36,16 @@ class HookHandler extends BaseHookHandler {
   /**
    * Trigger entity field access.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being asked for access.
    * @param string $operation
    *   The operation to perform.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account that asks for access.
    * @param string $field_name
    *   The field name.
    *
-   * @return \Drupal\Component\EventDispatcher\Event|\Symfony\Contracts\EventDispatcher\Event|null
+   * @return Event|\Symfony\Contracts\EventDispatcher\Event|null
    *   The dispatched event, nor NULL if no event was dispatched.
    */
   public function fieldAccess(EntityInterface $entity, string $operation, AccountInterface $account, string $field_name): ?object {
diff --git a/modules/access/tests/src/Kernel/AccessExecutionChainTest.php b/modules/access/tests/src/Kernel/AccessExecutionChainTest.php
index bad5d97..41fe37c 100644
--- a/modules/access/tests/src/Kernel/AccessExecutionChainTest.php
+++ b/modules/access/tests/src/Kernel/AccessExecutionChainTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\eca_access\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
 use Drupal\eca\Entity\Eca;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
@@ -55,7 +57,7 @@ class AccessExecutionChainTest extends KernelTestBase {
     ]);
 
     // Create an Article content type.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'article',
       'name' => 'Article',
@@ -64,7 +66,7 @@ class AccessExecutionChainTest extends KernelTestBase {
     $node_type->save();
     node_add_body_field($node_type);
     // Create a Page content type.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'page',
       'name' => 'Basic page',
@@ -78,7 +80,7 @@ class AccessExecutionChainTest extends KernelTestBase {
    * Tests entity access using eca_access plugins.
    */
   public function testEntityAccess(): void {
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
     $account_switcher->switchTo(User::load(2));
 
@@ -156,7 +158,7 @@ class AccessExecutionChainTest extends KernelTestBase {
       'administer nodes',
       'bypass node access',
     ]);
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
     $account_switcher->switchTo(User::load(2));
 
diff --git a/modules/base/eca_base.install b/modules/base/eca_base.install
index ff431fe..28c992e 100644
--- a/modules/base/eca_base.install
+++ b/modules/base/eca_base.install
@@ -1,17 +1,17 @@
 <?php
 
+use Drupal\eca\Entity\Eca;
 /**
  * @file
  * ECA base install file.
  */
-
 /**
  * Update last cron run times for existing eca config entities.
  */
 function eca_base_update_8001() {
   $state = \Drupal::service('eca.state');
   $storage = \Drupal::entityTypeManager()->getStorage('eca');
-  /** @var \Drupal\eca\Entity\Eca $eca */
+  /** @var Eca $eca */
   foreach ($storage->loadMultiple() as $eca) {
     foreach ($eca->getUsedEvents() as $event) {
       if ($event->getPlugin()->getPluginId() === 'eca_base:eca_cron') {
diff --git a/modules/base/eca_base.module b/modules/base/eca_base.module
index 9272792..9524a11 100644
--- a/modules/base/eca_base.module
+++ b/modules/base/eca_base.module
@@ -10,7 +10,7 @@ use Drupal\eca_base\HookHandler;
 /**
  * Helper method return hook handler service.
  *
- * @return \Drupal\eca_base\HookHandler
+ * @return HookHandler
  *   The hook handler service.
  */
 function _eca_base_hook_handler(): HookHandler {
diff --git a/modules/base/src/Commands/EcaBaseCommands.php b/modules/base/src/Commands/EcaBaseCommands.php
index b7a6999..8898655 100644
--- a/modules/base/src/Commands/EcaBaseCommands.php
+++ b/modules/base/src/Commands/EcaBaseCommands.php
@@ -15,14 +15,14 @@ class EcaBaseCommands extends DrushCommands {
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
   /**
    * EcaBaseCommand constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $eventDispatcher) {
diff --git a/modules/base/src/Event/CronEvent.php b/modules/base/src/Event/CronEvent.php
index b6f4802..660870c 100644
--- a/modules/base/src/Event/CronEvent.php
+++ b/modules/base/src/Event/CronEvent.php
@@ -21,14 +21,14 @@ class CronEvent extends Event implements ConditionalApplianceInterface {
   /**
    * ECA state service.
    *
-   * @var \Drupal\eca\EcaState
+   * @var EcaState
    */
   protected EcaState $state;
 
   /**
    * Constructs a new CronEvent object.
    *
-   * @param \Drupal\eca\EcaState $state
+   * @param EcaState $state
    *   The ECA state service.
    */
   public function __construct(EcaState $state) {
diff --git a/modules/base/src/HookHandler.php b/modules/base/src/HookHandler.php
index d73db68..b94209e 100644
--- a/modules/base/src/HookHandler.php
+++ b/modules/base/src/HookHandler.php
@@ -17,14 +17,14 @@ class HookHandler extends BaseHookHandler {
   /**
    * The ECA state service.
    *
-   * @var \Drupal\eca\EcaState
+   * @var EcaState
    */
   protected EcaState $state;
 
   /**
    * Set the ECA state service.
    *
-   * @param \Drupal\eca\EcaState $state
+   * @param EcaState $state
    *   The ECA state service.
    */
   public function setState(EcaState $state) {
diff --git a/modules/base/src/Plugin/Action/EcaStateWrite.php b/modules/base/src/Plugin/Action/EcaStateWrite.php
index e2ff852..d51c8cf 100644
--- a/modules/base/src/Plugin/Action/EcaStateWrite.php
+++ b/modules/base/src/Plugin/Action/EcaStateWrite.php
@@ -22,7 +22,7 @@ class EcaStateWrite extends ConfigurableActionBase {
   /**
    * The YAML parser.
    *
-   * @var \Drupal\eca\Service\YamlParser
+   * @var YamlParser
    */
   protected YamlParser $yamlParser;
 
@@ -109,7 +109,7 @@ class EcaStateWrite extends ConfigurableActionBase {
   /**
    * Set the YAML parser.
    *
-   * @param \Drupal\eca\Service\YamlParser $yaml_parser
+   * @param YamlParser $yaml_parser
    *   The YAML parser.
    */
   public function setYamlParser(YamlParser $yaml_parser): void {
diff --git a/modules/base/src/Plugin/Action/TokenSetValue.php b/modules/base/src/Plugin/Action/TokenSetValue.php
index b249c8d..a4345d3 100644
--- a/modules/base/src/Plugin/Action/TokenSetValue.php
+++ b/modules/base/src/Plugin/Action/TokenSetValue.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_base\Plugin\Action;
 
+use Drupal\eca_config\Plugin\Action\ConfigWrite;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\eca\Plugin\Action\ActionBase;
 use Drupal\eca\Plugin\Action\ConfigurableActionBase;
@@ -22,7 +23,7 @@ class TokenSetValue extends ConfigurableActionBase {
   /**
    * The YAML parser.
    *
-   * @var \Drupal\eca\Service\YamlParser
+   * @var YamlParser
    */
   protected YamlParser $yamlParser;
 
@@ -30,7 +31,7 @@ class TokenSetValue extends ConfigurableActionBase {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): ActionBase {
-    /** @var \Drupal\eca_config\Plugin\Action\ConfigWrite $instance */
+    /** @var ConfigWrite $instance */
     $instance = parent::create($container, $configuration, $plugin_id, $plugin_definition);
     $instance->setYamlParser($container->get('eca.service.yaml_parser'));
     return $instance;
@@ -112,7 +113,7 @@ class TokenSetValue extends ConfigurableActionBase {
   /**
    * Set the YAML parser.
    *
-   * @param \Drupal\eca\Service\YamlParser $yaml_parser
+   * @param YamlParser $yaml_parser
    *   The YAML parser.
    */
   public function setYamlParser(YamlParser $yaml_parser): void {
diff --git a/modules/base/tests/src/Kernel/BaseEventsTest.php b/modules/base/tests/src/Kernel/BaseEventsTest.php
index 06fd352..9125ea0 100644
--- a/modules/base/tests/src/Kernel/BaseEventsTest.php
+++ b/modules/base/tests/src/Kernel/BaseEventsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\eca_base\Kernel;
 
+use Drupal\Core\Cron;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\eca\Entity\Eca;
 use Drupal\eca_array\Plugin\Action\ArrayIncrement;
 use Drupal\eca_base\BaseEvents;
@@ -115,14 +117,14 @@ class BaseEventsTest extends KernelTestBase {
 
     unset(ArrayIncrement::$array['base_inc']);
 
-    /** @var \Drupal\Core\Cron $cron */
+    /** @var Cron $cron */
     $cron = \Drupal::service('cron');
     $cron->run();
     $this->assertSame(1, ArrayIncrement::$array['base_inc'], "Only one event must match up as configured.");
 
     ArrayIncrement::$array['base_inc'] = 0;
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
 
     ArrayIncrement::$array['base_inc'] = 0;
diff --git a/modules/base/tests/src/Kernel/CompareListCountTest.php b/modules/base/tests/src/Kernel/CompareListCountTest.php
index feab9d5..8377a30 100644
--- a/modules/base/tests/src/Kernel/CompareListCountTest.php
+++ b/modules/base/tests/src/Kernel/CompareListCountTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\eca_base\Kernel;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\eca_base\Plugin\ECA\Condition\ListCountComparison;
 use Drupal\eca\Plugin\ECA\Condition\StringComparisonBase;
 use Drupal\eca\PluginManager\Condition;
 use Drupal\eca\Token\TokenInterface;
@@ -26,14 +28,14 @@ class CompareListCountTest extends KernelTestBase {
   /**
    * ECA condition plugin manager.
    *
-   * @var \Drupal\eca\PluginManager\Condition|null
+   * @var Condition|null
    */
   protected ?Condition $conditionManager;
 
   /**
    * ECA token service.
    *
-   * @var \Drupal\eca\Token\TokenInterface|null
+   * @var TokenInterface|null
    */
   protected ?TokenInterface $tokenServices;
 
@@ -52,7 +54,7 @@ class CompareListCountTest extends KernelTestBase {
    *
    * @dataProvider listDataProvider
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testListItemCountValues($list, $right, $operator, $negate, $message, $assertTrue = TRUE): void {
     $this->tokenServices->addTokenData('list', $list);
@@ -64,7 +66,7 @@ class CompareListCountTest extends KernelTestBase {
       'type' => StringComparisonBase::COMPARE_TYPE_NUMERIC,
       'negate' => $negate,
     ];
-    /** @var \Drupal\eca_base\Plugin\ECA\Condition\ListCountComparison $condition */
+    /** @var ListCountComparison $condition */
     $condition = $this->conditionManager->createInstance('eca_count', $config);
     if ($assertTrue) {
       $this->assertTrue($condition->evaluate(), $message);
diff --git a/modules/base/tests/src/Kernel/CompareScalarTest.php b/modules/base/tests/src/Kernel/CompareScalarTest.php
index baa2f9b..8eae83a 100644
--- a/modules/base/tests/src/Kernel/CompareScalarTest.php
+++ b/modules/base/tests/src/Kernel/CompareScalarTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\eca_base\Kernel;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\eca_base\Plugin\ECA\Condition\ScalarComparison;
 use Drupal\eca\Plugin\ECA\Condition\StringComparisonBase;
 use Drupal\eca\PluginManager\Condition;
 use Drupal\KernelTests\KernelTestBase;
@@ -25,7 +27,7 @@ class CompareScalarTest extends KernelTestBase {
   /**
    * ECA condition plugin manager.
    *
-   * @var \Drupal\eca\PluginManager\Condition|null
+   * @var Condition|null
    */
   protected ?Condition $conditionManager;
 
@@ -44,7 +46,7 @@ class CompareScalarTest extends KernelTestBase {
    * @dataProvider stringDataProvider
    * @dataProvider numericDataProvider
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testScalarValues($left, $right, $operator, $type, $case, $negate, $message, $assertTrue = TRUE): void {
     // Configure default settings for condition.
@@ -56,7 +58,7 @@ class CompareScalarTest extends KernelTestBase {
       'case' => $case,
       'negate' => $negate,
     ];
-    /** @var \Drupal\eca_base\Plugin\ECA\Condition\ScalarComparison $condition */
+    /** @var ScalarComparison $condition */
     $condition = $this->conditionManager->createInstance('eca_scalar', $config);
     if ($assertTrue) {
       $this->assertTrue($condition->evaluate(), $message);
diff --git a/modules/base/tests/src/Kernel/CompareStateValueTest.php b/modules/base/tests/src/Kernel/CompareStateValueTest.php
index bb69794..a96c616 100644
--- a/modules/base/tests/src/Kernel/CompareStateValueTest.php
+++ b/modules/base/tests/src/Kernel/CompareStateValueTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\eca_base\Kernel;
 
+use Drupal\eca\EcaState;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\eca_form\Plugin\ECA\Condition\FormFieldValue;
 use Drupal\eca\Plugin\ECA\Condition\StringComparisonBase;
 use Drupal\eca\PluginManager\Condition;
 use Drupal\KernelTests\KernelTestBase;
@@ -26,14 +29,14 @@ class CompareStateValueTest extends KernelTestBase {
   /**
    * ECA condition plugin manager.
    *
-   * @var \Drupal\eca\PluginManager\Condition|null
+   * @var Condition|null
    */
   protected ?Condition $conditionManager;
 
   /**
    * ECA state service.
    *
-   * @var \Drupal\eca\EcaState
+   * @var EcaState
    */
   protected $state;
 
@@ -50,7 +53,7 @@ class CompareStateValueTest extends KernelTestBase {
   /**
    * Tests form field comparison.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testFormField(): void {
     $key = 'eca_state_key';
@@ -64,7 +67,7 @@ class CompareStateValueTest extends KernelTestBase {
       'case' => FALSE,
       'negate' => FALSE,
     ];
-    /** @var \Drupal\eca_form\Plugin\ECA\Condition\FormFieldValue $condition */
+    /** @var FormFieldValue $condition */
     $condition = $this->conditionManager->createInstance('eca_state', $config);
     $this->assertTrue($condition->evaluate(), 'State value equals expected value.');
   }
diff --git a/modules/base/tests/src/Kernel/EcaStateReadTest.php b/modules/base/tests/src/Kernel/EcaStateReadTest.php
index b0bd66d..7ca280d 100644
--- a/modules/base/tests/src/Kernel/EcaStateReadTest.php
+++ b/modules/base/tests/src/Kernel/EcaStateReadTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\eca_base\Kernel;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\eca\EcaState;
+use Drupal\eca_base\Plugin\Action\EcaStateRead;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -35,18 +40,18 @@ class EcaStateReadTest extends KernelTestBase {
   /**
    * Tests read value and add token.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testAddToken(): void {
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\eca\EcaState $eca_state */
+    /** @var EcaState $eca_state */
     $eca_state = \Drupal::service('eca.state');
     $eca_state->set('myKey', 'my_token');
 
-    /** @var \Drupal\eca_base\Plugin\Action\EcaStateRead $action */
+    /** @var EcaStateRead $action */
     $action = $action_manager->createInstance('eca_state_read', [
       'key' => 'myKey',
       'token_name' => 'my_custom_token:value1',
diff --git a/modules/base/tests/src/Kernel/EcaStateWriteTest.php b/modules/base/tests/src/Kernel/EcaStateWriteTest.php
index b6c10db..1739134 100644
--- a/modules/base/tests/src/Kernel/EcaStateWriteTest.php
+++ b/modules/base/tests/src/Kernel/EcaStateWriteTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\eca_base\Kernel;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\eca\EcaState;
+use Drupal\eca_base\Plugin\Action\EcaStateWrite;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -35,19 +40,19 @@ class EcaStateWriteTest extends KernelTestBase {
   /**
    * Tests EcaStateWrite.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testEcaStateWrite(): void {
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\eca\EcaState $eca_state */
+    /** @var EcaState $eca_state */
     $eca_state = \Drupal::service('eca.state');
 
     $token_services->addTokenData('my_custom_token:value1', 'my_custom_value');
 
-    /** @var \Drupal\eca_base\Plugin\Action\EcaStateWrite $action */
+    /** @var EcaStateWrite $action */
     $action = $action_manager->createInstance('eca_state_write', [
       'key' => 'my_key',
       'value' => '[my_custom_token:value1]',
@@ -61,7 +66,7 @@ class EcaStateWriteTest extends KernelTestBase {
     $this->assertEquals('', $eca_state->get('my_key1'));
 
     $token_services->clearTokenData();
-    /** @var \Drupal\eca_base\Plugin\Action\EcaStateWrite $action */
+    /** @var EcaStateWrite $action */
     $action = $action_manager->createInstance('eca_state_write', [
       'key' => 'my_key1',
       'value' => <<<YAML
diff --git a/modules/base/tests/src/Kernel/ListCountTest.php b/modules/base/tests/src/Kernel/ListCountTest.php
index 5e29e3d..86c8fdb 100644
--- a/modules/base/tests/src/Kernel/ListCountTest.php
+++ b/modules/base/tests/src/Kernel/ListCountTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\eca_base\Kernel;
 
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\eca_base\Plugin\Action\ListCount;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -36,15 +39,15 @@ class ListCountTest extends KernelTestBase {
    * Tests TokenSetValue.
    */
   public function testTokenSetValue(): void {
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
 
     $count = 3;
     $list = (array) $this->randomObject($count);
     $token_services->addTokenData('list', $list);
-    /** @var \Drupal\eca_base\Plugin\Action\ListCount $action */
+    /** @var ListCount $action */
     $action = $action_manager->createInstance('eca_count', [
       'token_name' => 'my_custom_token:value1',
       'list_token' => 'list',
diff --git a/modules/base/tests/src/Kernel/TokenSetValueTest.php b/modules/base/tests/src/Kernel/TokenSetValueTest.php
index e01b434..badc1ee 100644
--- a/modules/base/tests/src/Kernel/TokenSetValueTest.php
+++ b/modules/base/tests/src/Kernel/TokenSetValueTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\eca_base\Kernel;
 
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\eca_base\Plugin\Action\TokenSetValue;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -37,13 +40,13 @@ class TokenSetValueTest extends KernelTestBase {
    * Tests TokenSetValue.
    */
   public function testTokenSetValue(): void {
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
 
     $random_string = $this->randomString();
-    /** @var \Drupal\eca_base\Plugin\Action\TokenSetValue $action */
+    /** @var TokenSetValue $action */
     $action = $action_manager->createInstance('eca_token_set_value', [
       'token_name' => 'my_custom_token:value1',
       'token_value' => $random_string,
@@ -54,7 +57,7 @@ class TokenSetValueTest extends KernelTestBase {
     $this->assertEquals($random_string, $token_services->replaceClear('[my_custom_token:value1]'));
     $this->assertEquals('', $token_services->replaceClear('[my_custom_token:value2]'));
 
-    /** @var \Drupal\eca_base\Plugin\Action\TokenSetValue $action */
+    /** @var TokenSetValue $action */
     $action = $action_manager->createInstance('eca_token_set_value', [
       'token_name' => 'my_custom_token:value2',
       'token_value' => $random_string . '123',
@@ -75,7 +78,7 @@ class TokenSetValueTest extends KernelTestBase {
 1: "[my_custom_token:value1]"
 YAML;
 
-    /** @var \Drupal\eca_base\Plugin\Action\TokenSetValue $action */
+    /** @var TokenSetValue $action */
     $action = $action_manager->createInstance('eca_token_set_value', [
       'token_name' => 'object_token',
       'token_value' => $yaml_string,
diff --git a/modules/base/tests/src/Unit/CronEventTest.php b/modules/base/tests/src/Unit/CronEventTest.php
index 1ff794d..9a6637f 100644
--- a/modules/base/tests/src/Unit/CronEventTest.php
+++ b/modules/base/tests/src/Unit/CronEventTest.php
@@ -202,7 +202,7 @@ class CronEventTest extends UnitTestCase {
    * @param int $returnGetCurrentTimestamp
    *   The return value of ::getCurrentTimestamp.
    *
-   * @return \Drupal\eca\EcaState
+   * @return EcaState
    *   The mock.
    */
   private function getStateMock(int $returnGetTimestamp, $returnGetCurrentTimestamp): EcaState {
diff --git a/modules/cache/src/Plugin/Action/CacheActionBase.php b/modules/cache/src/Plugin/Action/CacheActionBase.php
index ab73ef3..9057547 100644
--- a/modules/cache/src/Plugin/Action/CacheActionBase.php
+++ b/modules/cache/src/Plugin/Action/CacheActionBase.php
@@ -68,7 +68,7 @@ abstract class CacheActionBase extends ConfigurableActionBase {
   /**
    * Get the cache backend used by this plugin.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface|null
+   * @return CacheBackendInterface|null
    *   The cache backend, or NULL if not configured or does not exist.
    */
   public function getCacheBackend(): ?CacheBackendInterface {
diff --git a/modules/cache/src/Plugin/Action/CacheWrite.php b/modules/cache/src/Plugin/Action/CacheWrite.php
index 0341a12..f84ec55 100644
--- a/modules/cache/src/Plugin/Action/CacheWrite.php
+++ b/modules/cache/src/Plugin/Action/CacheWrite.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_cache\Plugin\Action;
 
+use Drupal\eca_config\Plugin\Action\ConfigWrite;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\eca\Plugin\Action\ActionBase;
 use Drupal\eca\Service\YamlParser;
@@ -22,7 +23,7 @@ class CacheWrite extends CacheActionBase {
   /**
    * The YAML parser.
    *
-   * @var \Drupal\eca\Service\YamlParser
+   * @var YamlParser
    */
   protected YamlParser $yamlParser;
 
@@ -30,7 +31,7 @@ class CacheWrite extends CacheActionBase {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): ActionBase {
-    /** @var \Drupal\eca_config\Plugin\Action\ConfigWrite $instance */
+    /** @var ConfigWrite $instance */
     $instance = parent::create($container, $configuration, $plugin_id, $plugin_definition);
     $instance->setYamlParser($container->get('eca.service.yaml_parser'));
     return $instance;
@@ -129,7 +130,7 @@ class CacheWrite extends CacheActionBase {
   /**
    * Set the YAML parser.
    *
-   * @param \Drupal\eca\Service\YamlParser $yaml_parser
+   * @param YamlParser $yaml_parser
    *   The YAML parser.
    */
   public function setYamlParser(YamlParser $yaml_parser): void {
diff --git a/modules/cache/tests/src/Kernel/CacheTest.php b/modules/cache/tests/src/Kernel/CacheTest.php
index 1e6af19..ca96662 100644
--- a/modules/cache/tests/src/Kernel/CacheTest.php
+++ b/modules/cache/tests/src/Kernel/CacheTest.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\Tests\eca_cache\Kernel;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\eca_cache\Plugin\Action\CacheWrite;
+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\eca_cache\Plugin\Action\CacheRead;
+use Drupal\eca_cache\Plugin\Action\CacheInvalidate;
 use Drupal\eca\Plugin\DataType\DataTransferObject;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -26,7 +33,7 @@ class CacheTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function setUp(): void {
     parent::setUp();
@@ -38,9 +45,9 @@ class CacheTest extends KernelTestBase {
    * Tests actions of eca_cache.
    */
   public function testCacheActions(): void {
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
 
     $cache_key = 'eca_cache:' . $this->randomMachineName();
@@ -55,7 +62,7 @@ key1: value1
 key2: value2
 YAML;
 
-    /** @var \Drupal\eca_cache\Plugin\Action\CacheWrite $action */
+    /** @var CacheWrite $action */
     $action = $action_manager->createInstance('eca_cache_write', [
       'value' => $yaml,
       'expire' => '-1',
@@ -65,7 +72,7 @@ YAML;
     $this->assertTrue($action->access(NULL));
     $action->execute();
 
-    /** @var \Drupal\Core\Cache\CacheBackendInterface $cache */
+    /** @var CacheBackendInterface $cache */
     $cache = \Drupal::service('cache.eca_chained');
 
     $cached = $cache->get($cache_key);
@@ -73,7 +80,7 @@ YAML;
 
     $this->assertTrue(['key1' => 'value1', 'key2' => 'value2'] === $cached->data);
 
-    /** @var \Drupal\eca_cache\Plugin\Action\CacheRead $action */
+    /** @var CacheRead $action */
     $action = $action_manager->createInstance('eca_cache_read', [
       'token_name' => 'mytoken',
     ] + $defaults);
@@ -85,7 +92,7 @@ YAML;
     $this->assertTrue($token_services->getTokenData('mytoken') instanceof DataTransferObject);
     $this->assertSame(['key1' => 'value1', 'key2' => 'value2'], $token_services->getTokenData('mytoken')->toArray());
 
-    /** @var \Drupal\eca_cache\Plugin\Action\CacheInvalidate $action */
+    /** @var CacheInvalidate $action */
     $action = $action_manager->createInstance('eca_cache_invalidate', [
       'tags' => 'mytag3',
     ] + $defaults);
@@ -96,7 +103,7 @@ YAML;
     $this->assertFalse($cached === FALSE);
     $this->assertTrue(['key1' => 'value1', 'key2' => 'value2'] === $cached->data);
 
-    /** @var \Drupal\eca_cache\Plugin\Action\CacheInvalidate $action */
+    /** @var CacheInvalidate $action */
     $action = $action_manager->createInstance('eca_cache_invalidate', [
       'tags' => 'mytag2',
     ] + $defaults);
diff --git a/modules/config/src/EventSubscriber/EcaExecutionConfigSubscriber.php b/modules/config/src/EventSubscriber/EcaExecutionConfigSubscriber.php
index c8d757d..c8a43dc 100644
--- a/modules/config/src/EventSubscriber/EcaExecutionConfigSubscriber.php
+++ b/modules/config/src/EventSubscriber/EcaExecutionConfigSubscriber.php
@@ -15,7 +15,7 @@ class EcaExecutionConfigSubscriber extends EcaBase {
   /**
    * Subscriber method before initial execution.
    *
-   * @param \Drupal\eca\Event\BeforeInitialExecutionEvent $before_event
+   * @param BeforeInitialExecutionEvent $before_event
    *   The according event.
    */
   public function onBeforeInitialExecution(BeforeInitialExecutionEvent $before_event): void {
diff --git a/modules/config/src/Plugin/Action/ConfigActionBase.php b/modules/config/src/Plugin/Action/ConfigActionBase.php
index 4503c91..637a0cd 100644
--- a/modules/config/src/Plugin/Action/ConfigActionBase.php
+++ b/modules/config/src/Plugin/Action/ConfigActionBase.php
@@ -18,7 +18,7 @@ abstract class ConfigActionBase extends ConfigurableActionBase {
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|null
+   * @var ConfigFactoryInterface|null
    */
   protected ?ConfigFactoryInterface $configFactory;
 
@@ -88,7 +88,7 @@ abstract class ConfigActionBase extends ConfigurableActionBase {
   /**
    * Get the config factory.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config factory.
    */
   public function getConfigFactory(): ConfigFactoryInterface {
@@ -101,7 +101,7 @@ abstract class ConfigActionBase extends ConfigurableActionBase {
   /**
    * Set the config factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory): void {
diff --git a/modules/config/src/Plugin/Action/ConfigWrite.php b/modules/config/src/Plugin/Action/ConfigWrite.php
index 8666fbd..5e1aa18 100644
--- a/modules/config/src/Plugin/Action/ConfigWrite.php
+++ b/modules/config/src/Plugin/Action/ConfigWrite.php
@@ -25,7 +25,7 @@ class ConfigWrite extends ConfigActionBase {
   /**
    * The YAML parser.
    *
-   * @var \Drupal\eca\Service\YamlParser
+   * @var YamlParser
    */
   protected YamlParser $yamlParser;
 
@@ -139,7 +139,7 @@ class ConfigWrite extends ConfigActionBase {
   /**
    * Set the YAML parser.
    *
-   * @param \Drupal\eca\Service\YamlParser $yaml_parser
+   * @param YamlParser $yaml_parser
    *   The YAML parser.
    */
   public function setYamlParser(YamlParser $yaml_parser): void {
diff --git a/modules/config/tests/src/Kernel/Base.php b/modules/config/tests/src/Kernel/Base.php
index 3c547d4..50999ef 100644
--- a/modules/config/tests/src/Kernel/Base.php
+++ b/modules/config/tests/src/Kernel/Base.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\eca_config\Kernel;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\NodeType;
 use Drupal\user\Entity\Role;
@@ -29,7 +30,7 @@ abstract class Base extends KernelTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function setUp(): void {
     parent::setUp();
diff --git a/modules/config/tests/src/Kernel/ConfigEventsTest.php b/modules/config/tests/src/Kernel/ConfigEventsTest.php
index c51fb41..86ce87b 100644
--- a/modules/config/tests/src/Kernel/ConfigEventsTest.php
+++ b/modules/config/tests/src/Kernel/ConfigEventsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\eca_config\Kernel;
 
+use Drupal\Core\Config\ConfigManager;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Config\ConfigEvents;
 use Drupal\Core\Config\ConfigImporter;
 use Drupal\Core\Config\ConfigImporterEvent;
@@ -148,7 +150,7 @@ class ConfigEventsTest extends KernelTestBase {
 
     ArrayIncrement::$array['inc'] = 0;
 
-    /** @var \Drupal\Core\Config\ConfigManager $config_manager */
+    /** @var ConfigManager $config_manager */
     $config_manager = \Drupal::service('config.manager');
     // Set the collection info to NULL so that the event is being triggered
     // again by ::getConfigCollectionInfo().
@@ -270,7 +272,7 @@ class ConfigEventsTest extends KernelTestBase {
       $this->container->get('extension.list.module')
     );
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
 
     // Fake a configuration import.
diff --git a/modules/config/tests/src/Kernel/ConfigReadTest.php b/modules/config/tests/src/Kernel/ConfigReadTest.php
index e94e78f..df93251 100644
--- a/modules/config/tests/src/Kernel/ConfigReadTest.php
+++ b/modules/config/tests/src/Kernel/ConfigReadTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\eca_config\Kernel;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\eca_config\Plugin\Action\ConfigRead;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\eca\Plugin\DataType\DataTransferObject;
 use Drupal\user\Entity\User;
@@ -17,14 +22,14 @@ class ConfigReadTest extends Base {
   /**
    * Tests ConfigRead.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testConfigRead(): void {
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     $config = \Drupal::configFactory()->getEditable('system.site');
@@ -33,7 +38,7 @@ class ConfigReadTest extends Base {
 
     // Create an action that reads from system site config.
     $defaults = [];
-    /** @var \Drupal\eca_config\Plugin\Action\ConfigRead $action */
+    /** @var ConfigRead $action */
     $action = $action_manager->createInstance('eca_config_read', [
       'config_name' => 'system.site',
       'config_key' => 'page.front',
@@ -42,7 +47,7 @@ class ConfigReadTest extends Base {
     ] + $defaults);
     $this->assertFalse($action->access(NULL), 'User without permissions must not have access.');
 
-    /** @var \Drupal\eca_config\Plugin\Action\ConfigRead $action */
+    /** @var ConfigRead $action */
     $action = $action_manager->createInstance('eca_config_read', [
       'config_name' => 'node.type.article',
       'config_key' => 'name',
@@ -54,7 +59,7 @@ class ConfigReadTest extends Base {
     // Now switching to user with permissions.
     $account_switcher->switchTo(User::load(2));
 
-    /** @var \Drupal\eca_config\Plugin\Action\ConfigRead $action */
+    /** @var ConfigRead $action */
     $action = $action_manager->createInstance('eca_config_read', [
       'config_name' => 'system.site',
       'config_key' => 'page.front',
@@ -66,7 +71,7 @@ class ConfigReadTest extends Base {
 
     $this->assertEquals('/node', $token_services->replace('[my_config_value]'));
 
-    /** @var \Drupal\eca_config\Plugin\Action\ConfigRead $action */
+    /** @var ConfigRead $action */
     $action = $action_manager->createInstance('eca_config_read', [
       'config_name' => 'node.type.article',
       'config_key' => 'name',
diff --git a/modules/config/tests/src/Kernel/ConfigWriteTest.php b/modules/config/tests/src/Kernel/ConfigWriteTest.php
index c020fc4..44bf6b0 100644
--- a/modules/config/tests/src/Kernel/ConfigWriteTest.php
+++ b/modules/config/tests/src/Kernel/ConfigWriteTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\eca_config\Kernel;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Action\ActionManager;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\eca_config\Plugin\Action\ConfigRead;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\user\Entity\User;
 
@@ -16,12 +20,12 @@ class ConfigWriteTest extends Base {
   /**
    * Tests ConfigWrite.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testConfigWrite(): void {
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     $config = \Drupal::configFactory()->getEditable('system.site');
@@ -30,7 +34,7 @@ class ConfigWriteTest extends Base {
 
     // Create an action that reads from system site config.
     $defaults = [];
-    /** @var \Drupal\eca_config\Plugin\Action\ConfigRead $action */
+    /** @var ConfigRead $action */
     $action = $action_manager->createInstance('eca_config_write', [
       'config_name' => 'system.site',
       'config_key' => 'page.front',
@@ -40,7 +44,7 @@ class ConfigWriteTest extends Base {
     ] + $defaults);
     $this->assertFalse($action->access(NULL), 'User without permissions must not have access.');
 
-    /** @var \Drupal\eca_config\Plugin\Action\ConfigRead $action */
+    /** @var ConfigRead $action */
     $action = $action_manager->createInstance('eca_config_write', [
       'config_name' => 'node.type.article',
       'config_key' => 'name',
@@ -53,7 +57,7 @@ class ConfigWriteTest extends Base {
     // Now switching to user with permissions.
     $account_switcher->switchTo(User::load(2));
 
-    /** @var \Drupal\eca_config\Plugin\Action\ConfigRead $action */
+    /** @var ConfigRead $action */
     $action = $action_manager->createInstance('eca_config_write', [
       'config_name' => 'system.site',
       'config_key' => 'page.front',
@@ -83,7 +87,7 @@ YAML;
 
     $this->assertEquals('/another-frontpage', \Drupal::configFactory()->get('system.site')->get('page.front'));
 
-    /** @var \Drupal\eca_config\Plugin\Action\ConfigRead $action */
+    /** @var ConfigRead $action */
     $action = $action_manager->createInstance('eca_config_write', [
       'config_name' => 'node.type.article',
       'config_key' => 'name',
diff --git a/modules/content/eca_content.module b/modules/content/eca_content.module
index 0076752..99d9d2b 100644
--- a/modules/content/eca_content.module
+++ b/modules/content/eca_content.module
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\field\FieldConfigInterface;
+use Drupal\eca\Entity\Eca;
 /**
  * @file
  * ECA Content submodule.
@@ -20,7 +25,7 @@ use Drupal\eca_content\HookHandler;
 /**
  * Eca content hooh handler.
  *
- * @return \Drupal\eca_content\HookHandler
+ * @return HookHandler
  *   The content hook handler.
  */
 function _eca_content_hook_handler(): HookHandler {
@@ -173,9 +178,9 @@ function eca_content_entity_field_values_init(FieldableEntityInterface $entity)
  * Updates existing ECA configuration dependencies that already refer to field
  * configurations having the same field name.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws EntityStorageException
  */
 function eca_content_field_config_insert(EntityInterface $entity) {
   $eca_configs = \Drupal::entityTypeManager()->getStorage('eca')->loadMultiple();
@@ -187,14 +192,14 @@ function eca_content_field_config_insert(EntityInterface $entity) {
   // List of updated ECA configs that need to be saved.
   $to_save = [];
 
-  /** @var \Drupal\field\FieldConfigInterface $field_config */
+  /** @var FieldConfigInterface $field_config */
   $field_config = $entity;
   $field_name = $field_config->getName();
   $entity_type_id = $field_config->getTargetEntityTypeId();
   $field_storage_config_id = "field.storage.$entity_type_id.$field_name";
   $field_field_config_id = 'field.field.' . $field_config->id();
 
-  /** @var \Drupal\eca\Entity\Eca $eca */
+  /** @var Eca $eca */
   foreach ($eca_configs as $eca) {
     $eca_dependencies = $eca->getDependencies();
     foreach ($eca_dependencies as $type => $dependencies) {
@@ -209,7 +214,7 @@ function eca_content_field_config_insert(EntityInterface $entity) {
     }
   }
 
-  /** @var \Drupal\eca\Entity\Eca $eca */
+  /** @var Eca $eca */
   foreach ($to_save as $eca) {
     $eca->save();
   }
diff --git a/modules/content/src/Event/ContentEntityBaseBundle.php b/modules/content/src/Event/ContentEntityBaseBundle.php
index ed63673..5576349 100644
--- a/modules/content/src/Event/ContentEntityBaseBundle.php
+++ b/modules/content/src/Event/ContentEntityBaseBundle.php
@@ -16,7 +16,7 @@ abstract class ContentEntityBaseBundle extends ContentEntityBase {
   /**
    * The entity type service.
    *
-   * @var \Drupal\eca\Service\ContentEntityTypes
+   * @var ContentEntityTypes
    */
   protected ContentEntityTypes $entityTypes;
 
@@ -41,7 +41,7 @@ abstract class ContentEntityBaseBundle extends ContentEntityBase {
    *   The entity type id.
    * @param string $bundle
    *   The bundle.
-   * @param \Drupal\eca\Service\ContentEntityTypes $entity_types
+   * @param ContentEntityTypes $entity_types
    *   The entity type service.
    */
   public function __construct(string $entity_type_id, string $bundle, ContentEntityTypes $entity_types) {
diff --git a/modules/content/src/Event/ContentEntityBaseEntity.php b/modules/content/src/Event/ContentEntityBaseEntity.php
index 54c2bac..ee7e6aa 100644
--- a/modules/content/src/Event/ContentEntityBaseEntity.php
+++ b/modules/content/src/Event/ContentEntityBaseEntity.php
@@ -19,23 +19,23 @@ abstract class ContentEntityBaseEntity extends ContentEntityBase implements Enti
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected EntityInterface $entity;
 
   /**
    * The entity type service.
    *
-   * @var \Drupal\eca\Service\ContentEntityTypes
+   * @var ContentEntityTypes
    */
   protected ContentEntityTypes $entityTypes;
 
   /**
    * ContentEntityBaseEntity constructor.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\eca\Service\ContentEntityTypes $entity_types
+   * @param ContentEntityTypes $entity_types
    *   The entity type service.
    */
   public function __construct(ContentEntityInterface $entity, ContentEntityTypes $entity_types) {
diff --git a/modules/content/src/Event/ContentEntityCustomEvent.php b/modules/content/src/Event/ContentEntityCustomEvent.php
index ca5b7a7..f788622 100644
--- a/modules/content/src/Event/ContentEntityCustomEvent.php
+++ b/modules/content/src/Event/ContentEntityCustomEvent.php
@@ -37,9 +37,9 @@ class ContentEntityCustomEvent extends ContentEntityBaseEntity implements TokenR
   /**
    * Provides a custom event that is entity aware.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity for which the custom event got triggered.
-   * @param \Drupal\eca\Service\ContentEntityTypes $entity_types
+   * @param ContentEntityTypes $entity_types
    *   The entity service.
    * @param string $event_id
    *   The (optional) ID for this event, so that it only applies, if it matches
diff --git a/modules/content/src/Event/ContentEntityPreLoad.php b/modules/content/src/Event/ContentEntityPreLoad.php
index 16dfce4..0d47f79 100644
--- a/modules/content/src/Event/ContentEntityPreLoad.php
+++ b/modules/content/src/Event/ContentEntityPreLoad.php
@@ -33,7 +33,7 @@ class ContentEntityPreLoad extends ContentEntityBase implements DataProviderInte
   /**
    * An instance holding event data accessible as Token.
    *
-   * @var \Drupal\eca\Plugin\DataType\DataTransferObject|null
+   * @var DataTransferObject|null
    */
   protected ?DataTransferObject $eventData = NULL;
 
diff --git a/modules/content/src/Event/ContentEntityPrepareForm.php b/modules/content/src/Event/ContentEntityPrepareForm.php
index c915305..37ba914 100644
--- a/modules/content/src/Event/ContentEntityPrepareForm.php
+++ b/modules/content/src/Event/ContentEntityPrepareForm.php
@@ -28,20 +28,20 @@ class ContentEntityPrepareForm extends ContentEntityBaseEntity implements FormEv
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected FormStateInterface $formState;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\eca\Service\ContentEntityTypes $entity_types
+   * @param ContentEntityTypes $entity_types
    *   The entity types.
    * @param string $operation
    *   The operation.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function __construct(ContentEntityInterface $entity, ContentEntityTypes $entity_types, string $operation, FormStateInterface $form_state) {
diff --git a/modules/content/src/Event/ContentEntityPrepareView.php b/modules/content/src/Event/ContentEntityPrepareView.php
index ffd2a1d..7a02afd 100644
--- a/modules/content/src/Event/ContentEntityPrepareView.php
+++ b/modules/content/src/Event/ContentEntityPrepareView.php
@@ -33,9 +33,9 @@ class ContentEntityPrepareView extends ContentEntityBaseEntity {
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\eca\Service\ContentEntityTypes $entity_types
+   * @param ContentEntityTypes $entity_types
    *   The entity types.
    * @param array $displays
    *   The displays.
diff --git a/modules/content/src/Event/ContentEntityRevisionCreate.php b/modules/content/src/Event/ContentEntityRevisionCreate.php
index b0e68bb..4180d24 100644
--- a/modules/content/src/Event/ContentEntityRevisionCreate.php
+++ b/modules/content/src/Event/ContentEntityRevisionCreate.php
@@ -19,7 +19,7 @@ class ContentEntityRevisionCreate extends ContentEntityBaseEntity {
   /**
    * The original entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected ContentEntityInterface $original;
 
@@ -33,11 +33,11 @@ class ContentEntityRevisionCreate extends ContentEntityBaseEntity {
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $new_revision
+   * @param ContentEntityInterface $new_revision
    *   The new revision.
-   * @param \Drupal\eca\Service\ContentEntityTypes $entity_types
+   * @param ContentEntityTypes $entity_types
    *   The entity types.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The original entity.
    * @param bool|null $keep_untranslatable_fields
    *   The flag to keep untranslatable fields.
@@ -52,7 +52,7 @@ class ContentEntityRevisionCreate extends ContentEntityBaseEntity {
   /**
    * Gets the new revision.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The new revision.
    */
   public function getNewRevision(): ContentEntityInterface {
@@ -62,7 +62,7 @@ class ContentEntityRevisionCreate extends ContentEntityBaseEntity {
   /**
    * Get the original entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The original entity.
    */
   public function getOriginalEntity(): ContentEntityInterface {
diff --git a/modules/content/src/Event/OptionsSelection.php b/modules/content/src/Event/OptionsSelection.php
index bc8dab7..6be5501 100644
--- a/modules/content/src/Event/OptionsSelection.php
+++ b/modules/content/src/Event/OptionsSelection.php
@@ -29,14 +29,14 @@ class OptionsSelection extends FieldSelectionBase {
   /**
    * The field storage definition.
    *
-   * @var \Drupal\Core\Field\FieldStorageDefinitionInterface
+   * @var FieldStorageDefinitionInterface
    */
   public FieldStorageDefinitionInterface $fieldStorageDefinition;
 
   /**
    * The according entity.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface|null
+   * @var FieldableEntityInterface|null
    */
   public ?FieldableEntityInterface $entity;
 
@@ -50,9 +50,9 @@ class OptionsSelection extends FieldSelectionBase {
   /**
    * Constructs a new event.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition
+   * @param FieldStorageDefinitionInterface $field_storage_definition
    *   The field storage definition.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
+   * @param FieldableEntityInterface|null $entity
    *   The according entity.
    * @param array $allowed_values
    *   The current list of allowed values.
@@ -67,7 +67,7 @@ class OptionsSelection extends FieldSelectionBase {
    * {@inheritdoc}
    */
   public function applies(string $id, array $arguments): bool {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->entity ?? NULL;
     $field_name = $this->fieldStorageDefinition->getName();
     if (!$entity || !$field_name) {
@@ -90,7 +90,7 @@ class OptionsSelection extends FieldSelectionBase {
    * {@inheritdoc}
    */
   public function appliesForLazyLoadingWildcard(string $wildcard): bool {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->entity ?? NULL;
     $field_name = $this->fieldStorageDefinition->getName();
     if (!$entity || !$field_name) {
diff --git a/modules/content/src/Event/ReferenceSelection.php b/modules/content/src/Event/ReferenceSelection.php
index a28815f..68af315 100644
--- a/modules/content/src/Event/ReferenceSelection.php
+++ b/modules/content/src/Event/ReferenceSelection.php
@@ -28,14 +28,14 @@ class ReferenceSelection extends FieldSelectionBase {
   /**
    * The selection plugin instance.
    *
-   * @var \Drupal\eca_content\Plugin\EntityReferenceSelection\EventBasedSelection
+   * @var EventBasedSelection
    */
   public EventBasedSelection $selection;
 
   /**
    * Constructs a new ReferenceSelection object.
    *
-   * @param \Drupal\eca_content\Plugin\EntityReferenceSelection\EventBasedSelection $selection
+   * @param EventBasedSelection $selection
    *   The selection plugin instance.
    */
   public function __construct(EventBasedSelection $selection) {
@@ -47,7 +47,7 @@ class ReferenceSelection extends FieldSelectionBase {
    */
   public function applies(string $id, array $arguments): bool {
     $config = $this->selection->getConfiguration();
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $config['entity'] ?? NULL;
     $field_name = $config['field_name'] ?? NULL;
     if (empty($config['target_type']) || !$entity || !$field_name) {
@@ -71,7 +71,7 @@ class ReferenceSelection extends FieldSelectionBase {
    */
   public function appliesForLazyLoadingWildcard(string $wildcard): bool {
     $config = $this->selection->getConfiguration();
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $config['entity'] ?? NULL;
     $field_name = $config['field_name'] ?? NULL;
     if (!$entity || !$field_name) {
diff --git a/modules/content/src/FieldOptions.php b/modules/content/src/FieldOptions.php
index f2d9e55..db05aa8 100644
--- a/modules/content/src/FieldOptions.php
+++ b/modules/content/src/FieldOptions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_content;
 
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\eca_content\Event\ContentEntityEvents;
@@ -30,9 +31,9 @@ final class FieldOptions {
   /**
    * Allowed values callback that triggers an event for collecting values.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition
+   * @param FieldStorageDefinitionInterface $field_storage_definition
    *   The field storage definition.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
+   * @param FieldableEntityInterface|null $entity
    *   The according entity.
    * @param bool &$cacheable
    *   The cacheable flag.
@@ -40,7 +41,7 @@ final class FieldOptions {
   public static function eventBasedValues(FieldStorageDefinitionInterface $field_storage_definition, ?FieldableEntityInterface $entity, bool &$cacheable): array {
     $cacheable = FALSE;
     $values = [];
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event = new OptionsSelection($field_storage_definition, $entity, $values);
     $event_dispatcher->dispatch($event, ContentEntityEvents::OPTIONS_SELECTION);
diff --git a/modules/content/src/HookHandler.php b/modules/content/src/HookHandler.php
index 75e3b80..de85462 100644
--- a/modules/content/src/HookHandler.php
+++ b/modules/content/src/HookHandler.php
@@ -23,16 +23,16 @@ class HookHandler extends BaseHookHandler {
   /**
    * The entity types service.
    *
-   * @var \Drupal\eca\Service\ContentEntityTypes
+   * @var ContentEntityTypes
    */
   protected ContentEntityTypes $entityTypes;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\eca\Event\TriggerEvent $trigger_event
+   * @param TriggerEvent $trigger_event
    *   The trigger event.
-   * @param \Drupal\eca\Service\ContentEntityTypes $entityTypes
+   * @param ContentEntityTypes $entityTypes
    *   The entity types Service.
    */
   public function __construct(TriggerEvent $trigger_event, ContentEntityTypes $entityTypes) {
@@ -67,7 +67,7 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event create.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function create(EntityInterface $entity): void {
@@ -79,7 +79,7 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event delete.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function delete(EntityInterface $entity): void {
@@ -91,7 +91,7 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event field values init.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity.
    */
   public function fieldValuesInit(FieldableEntityInterface $entity): void {
@@ -103,7 +103,7 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event insert.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function insert(EntityInterface $entity): void {
@@ -131,7 +131,7 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event pre delete.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function predelete(EntityInterface $entity): void {
@@ -155,11 +155,11 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event prepare form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $operation
    *   The operation.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function prepareForm(EntityInterface $entity, string $operation, FormStateInterface $form_state): void {
@@ -191,7 +191,7 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event pre save.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function presave(EntityInterface $entity): void {
@@ -203,9 +203,9 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event revision create.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $new_revision
+   * @param EntityInterface $new_revision
    *   The new revision.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param bool|null $keep_untranslatable_fields
    *   The untranslatable fields.
@@ -219,7 +219,7 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event revision delete.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function revisionDelete(EntityInterface $entity): void {
@@ -247,7 +247,7 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event translation create.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $translation
+   * @param EntityInterface $translation
    *   The translation.
    */
   public function translationCreate(EntityInterface $translation): void {
@@ -259,7 +259,7 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event translation delete.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $translation
+   * @param EntityInterface $translation
    *   The translation.
    */
   public function translationDelete(EntityInterface $translation): void {
@@ -271,7 +271,7 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event translation insert.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $translation
+   * @param EntityInterface $translation
    *   The translation.
    */
   public function translationInsert(EntityInterface $translation): void {
@@ -283,7 +283,7 @@ class HookHandler extends BaseHookHandler {
   /**
    * Dispatches event update.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function update(EntityInterface $entity): void {
@@ -303,9 +303,9 @@ class HookHandler extends BaseHookHandler {
    *
    * @param array $build
    *   The build.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The display.
    * @param string $view_mode
    *   The view mode.
diff --git a/modules/content/src/Plugin/Action/FieldUpdateActionBase.php b/modules/content/src/Plugin/Action/FieldUpdateActionBase.php
index 09dd23a..7e0d55b 100644
--- a/modules/content/src/Plugin/Action/FieldUpdateActionBase.php
+++ b/modules/content/src/Plugin/Action/FieldUpdateActionBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\eca_content\Plugin\Action;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Access\AccessibleInterface;
@@ -121,10 +124,10 @@ abstract class FieldUpdateActionBase extends ActionBase implements ConfigurableI
    * <p>Helper function to save the entity only outside ECA context or when
    * requested explicitly.</p>
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity which might have to be saved.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function save(FieldableEntityInterface $entity): void {
     if (empty($entity->eca_context) || !empty($this->configuration['save_entity'])) {
@@ -208,7 +211,7 @@ abstract class FieldUpdateActionBase extends ActionBase implements ConfigurableI
       // do actually want to have an incomplete instermediary state of a field
       // value, that would be then completed by a subsequent action. Therefore
       // a manual filter is performed here.
-      /** @var \Drupal\Core\Field\FieldItemListInterface $update_target */
+      /** @var FieldItemListInterface $update_target */
       $current_values = array_filter($update_target->getValue(), function ($value) {
         if (is_array($value)) {
           foreach ($value as $v) {
@@ -431,11 +434,11 @@ abstract class FieldUpdateActionBase extends ActionBase implements ConfigurableI
       return $return_as_object ? $result : $result->isAllowed();
     }
 
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $object;
     $entity_op = 'update';
 
-    /** @var \Drupal\Core\Access\AccessResultInterface $result */
+    /** @var AccessResultInterface $result */
     $result = $entity->access($entity_op, $account, TRUE);
 
     $options = ['auto_append' => TRUE, 'access' => 'update'];
diff --git a/modules/content/src/Plugin/Action/GetFieldValue.php b/modules/content/src/Plugin/Action/GetFieldValue.php
index 1ece585..e562b6b 100644
--- a/modules/content/src/Plugin/Action/GetFieldValue.php
+++ b/modules/content/src/Plugin/Action/GetFieldValue.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_content\Plugin\Action;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessibleInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
@@ -82,10 +83,10 @@ class GetFieldValue extends ConfigurableActionBase {
       return $return_as_object ? $result : $result->isAllowed();
     }
 
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $object;
 
-    /** @var \Drupal\Core\Access\AccessResultInterface $result */
+    /** @var AccessResultInterface $result */
     $result = $entity->access('view', $account, TRUE);
 
     $options = ['access' => 'view'];
diff --git a/modules/content/src/Plugin/Action/LoadEntity.php b/modules/content/src/Plugin/Action/LoadEntity.php
index 00aa5c0..e343c06 100644
--- a/modules/content/src/Plugin/Action/LoadEntity.php
+++ b/modules/content/src/Plugin/Action/LoadEntity.php
@@ -26,14 +26,14 @@ class LoadEntity extends ConfigurableActionBase {
   /**
    * The entity loader.
    *
-   * @var \Drupal\eca_content\Service\EntityLoader|null
+   * @var EntityLoader|null
    */
   protected ?EntityLoader $entityLoader;
 
   /**
    * The loaded entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected ?EntityInterface $entity;
 
@@ -118,10 +118,10 @@ class LoadEntity extends ConfigurableActionBase {
   /**
    * Loads the entity by using the currently given plugin configuration.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   (Optional) A passed through entity object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The loaded entity, or NULL if not found.
    *
    * @throws \InvalidArgumentException
@@ -135,7 +135,7 @@ class LoadEntity extends ConfigurableActionBase {
   /**
    * Get the entity loader.
    *
-   * @return \Drupal\eca_content\Service\EntityLoader
+   * @return EntityLoader
    *   The entity loader.
    */
   public function entityLoader(): EntityLoader {
@@ -145,7 +145,7 @@ class LoadEntity extends ConfigurableActionBase {
   /**
    * Set the entity loader.
    *
-   * @param \Drupal\eca_content\Service\EntityLoader $entity_loader
+   * @param EntityLoader $entity_loader
    *   The entity loader.
    */
   public function setEntityLoader(EntityLoader $entity_loader) {
diff --git a/modules/content/src/Plugin/Action/NewEntity.php b/modules/content/src/Plugin/Action/NewEntity.php
index 2dfa17a..4a51112 100644
--- a/modules/content/src/Plugin/Action/NewEntity.php
+++ b/modules/content/src/Plugin/Action/NewEntity.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\eca_content\Plugin\Action;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -24,14 +26,14 @@ class NewEntity extends ConfigurableActionBase {
   /**
    * The entity type service.
    *
-   * @var \Drupal\eca\Service\ContentEntityTypes
+   * @var ContentEntityTypes
    */
   protected ContentEntityTypes $entityTypes;
 
   /**
    * The instantiated entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected ?EntityInterface $entity;
 
@@ -120,7 +122,7 @@ class NewEntity extends ConfigurableActionBase {
    * {@inheritdoc}
    */
   public function access($object, ?AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\Core\Access\AccessResultInterface $access_result */
+    /** @var AccessResultInterface $access_result */
     $access_result = parent::access($object, $account, TRUE);
     if ($access_result->isAllowed() && !empty($this->configuration['type'])) {
       $account = $account ?? $this->currentUser;
@@ -136,7 +138,7 @@ class NewEntity extends ConfigurableActionBase {
         $access_result = AccessResult::forbidden('Cannot determine access without an access handler.');
       }
       else {
-        /** @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface $access_handler */
+        /** @var EntityAccessControlHandlerInterface $access_handler */
         $access_handler = $this->entityTypeManager->getHandler($entity_type_id, 'access');
         $access_result = $access_handler->createAccess($bundle, $account, [], TRUE);
       }
diff --git a/modules/content/src/Plugin/Action/SaveEntity.php b/modules/content/src/Plugin/Action/SaveEntity.php
index c7c2c1f..a93760e 100644
--- a/modules/content/src/Plugin/Action/SaveEntity.php
+++ b/modules/content/src/Plugin/Action/SaveEntity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_content\Plugin\Action;
 
+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,7 +25,7 @@ class SaveEntity extends ConfigurableActionBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
@@ -46,7 +47,7 @@ class SaveEntity extends ConfigurableActionBase {
       $access_result = AccessResult::forbidden();
     }
     elseif ($object->isNew()) {
-      /** @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface $access_handler */
+      /** @var EntityAccessControlHandlerInterface $access_handler */
       $access_handler = $this->entityTypeManager->getHandler($object->getEntityTypeId(), 'access');
       $access_result = $access_handler->createAccess($object->bundle(), $account, [], TRUE);
     }
diff --git a/modules/content/src/Plugin/Action/SetFormDisplay.php b/modules/content/src/Plugin/Action/SetFormDisplay.php
index abd3f22..db61643 100644
--- a/modules/content/src/Plugin/Action/SetFormDisplay.php
+++ b/modules/content/src/Plugin/Action/SetFormDisplay.php
@@ -59,7 +59,7 @@ class SetFormDisplay extends ConfigurableActionBase {
   /**
    * Get the targeted entity form display.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface|null
+   * @return EntityFormDisplayInterface|null
    *   The entity form display, or NULL if not available.
    */
   protected function getFormDisplay(): ?EntityFormDisplayInterface {
diff --git a/modules/content/src/Plugin/Action/SetNewRevision.php b/modules/content/src/Plugin/Action/SetNewRevision.php
index e10e1df..72048bf 100644
--- a/modules/content/src/Plugin/Action/SetNewRevision.php
+++ b/modules/content/src/Plugin/Action/SetNewRevision.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\eca_content\Plugin\Action;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessibleInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\RevisionableInterface;
@@ -60,11 +62,11 @@ class SetNewRevision extends ConfigurableActionBase {
       return $return_as_object ? $result : $result->isAllowed();
     }
 
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $object;
     $entity_op = 'update';
 
-    /** @var \Drupal\Core\Access\AccessResultInterface $result */
+    /** @var AccessResultInterface $result */
     $result = $entity->access($entity_op, $account, TRUE);
 
     return $return_as_object ? $result : $result->isAllowed();
diff --git a/modules/content/src/Plugin/Action/TriggerContentEntityCustomEvent.php b/modules/content/src/Plugin/Action/TriggerContentEntityCustomEvent.php
index 18ac139..8f6cde5 100644
--- a/modules/content/src/Plugin/Action/TriggerContentEntityCustomEvent.php
+++ b/modules/content/src/Plugin/Action/TriggerContentEntityCustomEvent.php
@@ -27,14 +27,14 @@ class TriggerContentEntityCustomEvent extends ConfigurableActionBase {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
   /**
    * The entity types service.
    *
-   * @var \Drupal\eca\Service\ContentEntityTypes
+   * @var ContentEntityTypes
    */
   protected ContentEntityTypes $entityTypes;
 
diff --git a/modules/content/src/Plugin/ECA/Condition/EntityExists.php b/modules/content/src/Plugin/ECA/Condition/EntityExists.php
index 0686952..1ddd1e8 100644
--- a/modules/content/src/Plugin/ECA/Condition/EntityExists.php
+++ b/modules/content/src/Plugin/ECA/Condition/EntityExists.php
@@ -24,7 +24,7 @@ class EntityExists extends ConditionBase {
   /**
    * The entity loader.
    *
-   * @var \Drupal\eca_content\Service\EntityLoader|null
+   * @var EntityLoader|null
    */
   protected ?EntityLoader $entityLoader;
 
@@ -82,7 +82,7 @@ class EntityExists extends ConditionBase {
   /**
    * Get the entity loader.
    *
-   * @return \Drupal\eca_content\Service\EntityLoader
+   * @return EntityLoader
    *   The entity loader.
    */
   public function entityLoader(): EntityLoader {
@@ -92,7 +92,7 @@ class EntityExists extends ConditionBase {
   /**
    * Set the entity loader.
    *
-   * @param \Drupal\eca_content\Service\EntityLoader $entity_loader
+   * @param EntityLoader $entity_loader
    *   The entity loader.
    */
   public function setEntityLoader(EntityLoader $entity_loader) {
diff --git a/modules/content/src/Plugin/ECA/Condition/EntityFieldValue.php b/modules/content/src/Plugin/ECA/Condition/EntityFieldValue.php
index 8508590..cf1bc75 100644
--- a/modules/content/src/Plugin/ECA/Condition/EntityFieldValue.php
+++ b/modules/content/src/Plugin/ECA/Condition/EntityFieldValue.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_content\Plugin\ECA\Condition;
 
+use Drupal\Core\TypedData\TypedDataInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Entity\Plugin\DataType\EntityAdapter;
@@ -170,7 +171,7 @@ class EntityFieldValue extends StringComparisonBase {
       if (!($list instanceof ListInterface)) {
         $list = [$list];
       }
-      /** @var \Drupal\Core\TypedData\TypedDataInterface $property */
+      /** @var TypedDataInterface $property */
       foreach ($list as $property) {
         if ($property instanceof ComplexDataInterface) {
           $main_property = $property->getDataDefinition()->getMainPropertyName();
@@ -227,7 +228,7 @@ class EntityFieldValue extends StringComparisonBase {
   /**
    * Get the entity to act upon.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity, or NULL if not found.
    */
   public function getEntity(): ?EntityInterface {
diff --git a/modules/content/src/Plugin/ECA/Condition/EntityTypeAndBundle.php b/modules/content/src/Plugin/ECA/Condition/EntityTypeAndBundle.php
index e22ef18..a1ca18d 100644
--- a/modules/content/src/Plugin/ECA/Condition/EntityTypeAndBundle.php
+++ b/modules/content/src/Plugin/ECA/Condition/EntityTypeAndBundle.php
@@ -24,7 +24,7 @@ class EntityTypeAndBundle extends ConditionBase {
   /**
    * The entity types service.
    *
-   * @var \Drupal\eca\Service\ContentEntityTypes
+   * @var ContentEntityTypes
    */
   protected ContentEntityTypes $entityTypes;
 
diff --git a/modules/content/src/Plugin/ECA/Event/ContentEntityEvent.php b/modules/content/src/Plugin/ECA/Event/ContentEntityEvent.php
index df7b34c..cfc3436 100644
--- a/modules/content/src/Plugin/ECA/Event/ContentEntityEvent.php
+++ b/modules/content/src/Plugin/ECA/Event/ContentEntityEvent.php
@@ -51,7 +51,7 @@ class ContentEntityEvent extends EventBase implements CleanupInterface {
   /**
    * The entity type service.
    *
-   * @var \Drupal\eca\Service\ContentEntityTypes
+   * @var ContentEntityTypes
    */
   protected ContentEntityTypes $entityTypes;
 
@@ -287,7 +287,7 @@ class ContentEntityEvent extends EventBase implements CleanupInterface {
    * {@inheritdoc}
    */
   public function lazyLoadingWildcard(string $eca_config_id, EcaEvent $ecaEvent): string {
-    /** @var \Drupal\eca\Plugin\ECA\Event\EventBase $plugin */
+    /** @var EventBase $plugin */
     $plugin = $ecaEvent->getPlugin();
     switch ($plugin->getDerivativeId()) {
 
diff --git a/modules/content/src/Plugin/EntityReferenceSelection/EventBasedSelection.php b/modules/content/src/Plugin/EntityReferenceSelection/EventBasedSelection.php
index 92ab215..660175c 100644
--- a/modules/content/src/Plugin/EntityReferenceSelection/EventBasedSelection.php
+++ b/modules/content/src/Plugin/EntityReferenceSelection/EventBasedSelection.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\eca_content\Plugin\EntityReferenceSelection;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityFormInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginBase;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -27,21 +30,21 @@ class EventBasedSelection extends SelectionPluginBase implements ContainerFactor
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected EntityRepositoryInterface $entityRepository;
 
   /**
    * Holds the initialized list of referencable entities.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|null
+   * @var EntityInterface[]|null
    */
   public ?iterable $referencableEntities;
 
@@ -67,9 +70,9 @@ class EventBasedSelection extends SelectionPluginBase implements ContainerFactor
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityRepositoryInterface $entity_repository) {
@@ -85,7 +88,7 @@ class EventBasedSelection extends SelectionPluginBase implements ContainerFactor
     $this->initializeReferencableEntities();
     $target_type = $this->configuration['target_type'];
     $referencable = [];
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     foreach ($this->referencableEntities as $entity) {
       if ($entity->getEntityTypeId() === $target_type) {
         $referencable[$entity->bundle()][$entity->id()] = Html::escape($this->entityRepository->getTranslationFromContext($entity)->label() ?? '');
@@ -129,9 +132,9 @@ class EventBasedSelection extends SelectionPluginBase implements ContainerFactor
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+    /** @var EntityFormInterface $form_object */
     $form_object = $form_state->getFormObject();
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $entity */
+    /** @var FieldDefinitionInterface $entity */
     $entity = $form_object->getEntity();
     // We need to know the field name later on, therefore pass it along.
     $form['field_name'] = [
diff --git a/modules/content/src/Service/EntityLoader.php b/modules/content/src/Service/EntityLoader.php
index c75076a..d05ab36 100644
--- a/modules/content/src/Service/EntityLoader.php
+++ b/modules/content/src/Service/EntityLoader.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_content\Service;
 
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -25,34 +26,34 @@ class EntityLoader {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The Token services.
    *
-   * @var \Drupal\eca\Token\TokenInterface
+   * @var TokenInterface
    */
   protected TokenInterface $tokenServices;
 
   /**
    * The YAML parser.
    *
-   * @var \Drupal\eca\Service\YamlParser
+   * @var YamlParser
    */
   protected YamlParser $yamlParser;
 
   /**
    * Constructs a new EntityLoader object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\eca\Token\TokenInterface $token_services
+   * @param TokenInterface $token_services
    *   The Token services.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\eca\Service\YamlParser $yaml_parser
+   * @param YamlParser $yaml_parser
    *   The YAML parser.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TokenInterface $token_services, TranslationInterface $string_translation, YamlParser $yaml_parser) {
@@ -88,7 +89,7 @@ class EntityLoader {
    *   The plugin configuration.
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -156,7 +157,7 @@ class EntityLoader {
    *   The plugin configuration where to put in the submitted form values.
    * @param array &$form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateConfigurationForm(array &$plugin_configuration, array &$form, FormStateInterface $form_state): void {}
@@ -168,7 +169,7 @@ class EntityLoader {
    *   The plugin configuration where to put in the submitted form values.
    * @param array &$form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitConfigurationForm(array &$plugin_configuration, array &$form, FormStateInterface $form_state): void {
@@ -223,12 +224,12 @@ class EntityLoader {
   /**
    * Loads the entity by using the currently given plugin configuration.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   (Optional) A passed through entity object.
    * @param array $plugin_configuration
    *   (Optional) The plugin configuration values.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The loaded entity, or NULL if not found.
    *
    * @throws \InvalidArgumentException
@@ -280,7 +281,7 @@ class EntityLoader {
 
     if ($config['unchanged']) {
       if (!isset($entity->original) && !$entity->isNew()) {
-        /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+        /** @var ContentEntityStorageInterface $storage */
         $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
         $entity->original = $storage->loadUnchanged($entity->id());
       }
@@ -300,7 +301,7 @@ class EntityLoader {
     }
 
     if ($entity instanceof RevisionableInterface) {
-      /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+      /** @var ContentEntityStorageInterface $storage */
       $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
       if ($config['latest_revision'] && !$entity->isLatestRevision()) {
         $entity = $storage->loadRevision($storage->getLatestRevisionId($entity->id()));
diff --git a/modules/content/tests/src/Kernel/CompareFieldValueTest.php b/modules/content/tests/src/Kernel/CompareFieldValueTest.php
index 64cfdcc..6ae3d1a 100644
--- a/modules/content/tests/src/Kernel/CompareFieldValueTest.php
+++ b/modules/content/tests/src/Kernel/CompareFieldValueTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\ContextException;
+use Drupal\eca_content\Plugin\ECA\Condition\EntityFieldValue;
 use Drupal\eca\Plugin\ECA\Condition\StringComparisonBase;
 use Drupal\eca\PluginManager\Condition;
 use Drupal\KernelTests\KernelTestBase;
@@ -39,21 +43,21 @@ class CompareFieldValueTest extends KernelTestBase {
   /**
    * The condition manager.
    *
-   * @var \Drupal\eca\PluginManager\Condition|null
+   * @var Condition|null
    */
   protected ?Condition $conditionManager;
 
   /**
    * The node.
    *
-   * @var \Drupal\node\NodeInterface|null
+   * @var NodeInterface|null
    */
   protected ?NodeInterface $node;
 
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function setUp(): void {
     parent::setUp();
@@ -76,8 +80,8 @@ class CompareFieldValueTest extends KernelTestBase {
    *
    * @dataProvider fieldValueDataProvider
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
+   * @throws PluginException
+   * @throws ContextException
    */
   public function testNodeTitle(string $field_value, string $operator, string $message): void {
     $config = [
@@ -88,7 +92,7 @@ class CompareFieldValueTest extends KernelTestBase {
       'case' => FALSE,
       'negate' => FALSE,
     ];
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldValue $condition */
+    /** @var EntityFieldValue $condition */
     $condition = $this->conditionManager->createInstance('eca_entity_field_value', $config);
     $condition->setContextValue('entity', $this->node);
     $this->assertTrue($condition->evaluate(), $message);
@@ -97,9 +101,9 @@ class CompareFieldValueTest extends KernelTestBase {
   /**
    * Tests the original title method.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
+   * @throws EntityStorageException
+   * @throws PluginException
+   * @throws ContextException
    */
   public function testNodeOriginalTitle(): void {
     $modifiedTitle = 'Modified title';
@@ -116,7 +120,7 @@ class CompareFieldValueTest extends KernelTestBase {
       ->save();
 
     // Test modified node title.
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldValue $condition */
+    /** @var EntityFieldValue $condition */
     $condition = $this->conditionManager->createInstance('eca_entity_field_value', $config);
     $condition->setContextValue('entity', $this->node);
     $this->assertTrue($condition->evaluate(), 'Node title should be modified.');
diff --git a/modules/content/tests/src/Kernel/ContentEventsTest.php b/modules/content/tests/src/Kernel/ContentEventsTest.php
index bb3f6bb..63a6d11 100644
--- a/modules/content/tests/src/Kernel/ContentEventsTest.php
+++ b/modules/content/tests/src/Kernel/ContentEventsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\node\NodeStorageInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\eca\Entity\Eca;
 use Drupal\eca_array\Plugin\Action\ArrayWrite;
@@ -71,7 +73,7 @@ class ContentEventsTest extends KernelTestBase {
     $config = $this->config('language.negotiation');
 
     // Create the Article content type with revisioning and translation enabled.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'article',
       'name' => 'Article',
@@ -149,7 +151,7 @@ class ContentEventsTest extends KernelTestBase {
     $ecaConfig = Eca::create($eca_config_values);
     $ecaConfig->trustData()->save();
 
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'type1',
       'name' => 'Type one',
@@ -160,7 +162,7 @@ class ContentEventsTest extends KernelTestBase {
     $this->assertTrue(!isset(ArrayWrite::$array['bundlecreate']), "The configuration only listens for type2, not type1.");
     $this->assertTrue(!isset(ArrayWrite::$array['bundledelete']), "The configuration only listens for type2, not type1.");
 
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'type2',
       'name' => 'Type two',
@@ -534,7 +536,7 @@ class ContentEventsTest extends KernelTestBase {
     $this->assertEquals('presave English node', ArrayWrite::$array['presave']);
     $this->assertEquals('insert English node', ArrayWrite::$array['insert']);
 
-    /** @var \Drupal\node\NodeStorageInterface $node_storage */
+    /** @var NodeStorageInterface $node_storage */
     $node_storage = \Drupal::entityTypeManager()->getStorage('node');
     $node->setNewRevision(TRUE);
     $revision = $node_storage->createRevision($node);
diff --git a/modules/content/tests/src/Kernel/ContentExecutionChainTest.php b/modules/content/tests/src/Kernel/ContentExecutionChainTest.php
index 93d6e03..5dc2e13 100644
--- a/modules/content/tests/src/Kernel/ContentExecutionChainTest.php
+++ b/modules/content/tests/src/Kernel/ContentExecutionChainTest.php
@@ -2,6 +2,15 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\eca_content\Plugin\Action\NewEntity;
+use Drupal\eca_content\Plugin\Action\SaveEntity;
+use Drupal\eca_content\Plugin\Action\DeleteEntity;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Extension\ModuleInstaller;
 use Drupal\Core\Entity\ContentEntityFormInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Form\FormState;
@@ -60,7 +69,7 @@ class ContentExecutionChainTest extends KernelTestBase {
     User::create(['uid' => 1, 'name' => 'admin'])->save();
     User::create(['uid' => 2, 'name' => 'authenticated'])->save();
     // Create the Article content type with revisioning and translation enabled.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'article',
       'name' => 'Article',
@@ -77,7 +86,7 @@ class ContentExecutionChainTest extends KernelTestBase {
    * Tests execution chains using plugins of eca_content.
    */
   public function testExecutionChain() {
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     $published_node = Node::create([
@@ -313,7 +322,7 @@ class ContentExecutionChainTest extends KernelTestBase {
    * Tests an execution chain of multiple saving operations.
    */
   public function testEntitySaving() {
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
     $account_switcher->switchTo(User::load(1));
 
@@ -463,11 +472,11 @@ class ContentExecutionChainTest extends KernelTestBase {
    * Tests CRUD actions on a content entity.
    */
   public function testCrudActions(): void {
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     $node = Node::create([
@@ -476,7 +485,7 @@ class ContentExecutionChainTest extends KernelTestBase {
     ]);
     $node->save();
 
-    /** @var \Drupal\eca_content\Plugin\Action\NewEntity $new_action */
+    /** @var NewEntity $new_action */
     $title = $this->randomMachineName();
     $new_action = $action_manager->createInstance('eca_new_entity', [
       'token_name' => 'node',
@@ -486,11 +495,11 @@ class ContentExecutionChainTest extends KernelTestBase {
       'published' => TRUE,
       'owner' => '1',
     ]);
-    /** @var \Drupal\eca_content\Plugin\Action\SaveEntity $save_action */
+    /** @var SaveEntity $save_action */
     $save_action = $action_manager->createInstance('eca_save_entity', [
       'object' => 'node',
     ]);
-    /** @var \Drupal\eca_content\Plugin\Action\DeleteEntity $delete_action */
+    /** @var DeleteEntity $delete_action */
     $delete_action = $action_manager->createInstance('eca_delete_entity', [
       'object' => 'node',
     ]);
@@ -578,7 +587,7 @@ class ContentExecutionChainTest extends KernelTestBase {
     $ecaConfig = Eca::create($eca_config_values);
     $ecaConfig->trustData()->save();
 
-    /** @var \Drupal\node\NodeInterface $article */
+    /** @var NodeInterface $article */
     $article = Node::create([
       'type' => 'article',
       'tnid' => 0,
@@ -590,11 +599,11 @@ class ContentExecutionChainTest extends KernelTestBase {
 
     // Add a listener to the kernel response event, so that we can assert
     // for an existing redirect.
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $response = NULL;
     $event_dispatcher->addListener(KernelEvents::RESPONSE, static function ($event) use (&$response) {
-      /** @var \Symfony\Component\HttpKernel\Event\ResponseEvent $event */
+      /** @var ResponseEvent $event */
       $response = $event->getResponse();
     }, -1000);
 
@@ -603,7 +612,7 @@ class ContentExecutionChainTest extends KernelTestBase {
     $event_dispatcher->dispatch($response_event, KernelEvents::RESPONSE);
 
     $this->assertTrue($response instanceof RedirectResponse);
-    /** @var \Symfony\Component\HttpFoundation\RedirectResponse $response */
+    /** @var RedirectResponse $response */
     $this->assertEquals("/eca-redirect/{$article->id()}", mb_substr($response->getTargetUrl(), -15));
   }
 
@@ -613,7 +622,7 @@ class ContentExecutionChainTest extends KernelTestBase {
   public function testEntityFormComponents(): void {
     // Install the base module for executing "eca_token_set_value".
     // Also install the form module for reacting upon form processing.
-    /** @var \Drupal\Core\Extension\ModuleInstaller $module_installer */
+    /** @var ModuleInstaller $module_installer */
     $module_installer = \Drupal::service('module_installer');
     $module_installer->install(['eca_base', 'eca_form', 'options']);
 
@@ -831,7 +840,7 @@ YAML,
     // Saving the new article executes above ECA configuration.
     $article->save();
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
diff --git a/modules/content/tests/src/Kernel/EntityAccessibleTest.php b/modules/content/tests/src/Kernel/EntityAccessibleTest.php
index 23d5262..a29242c 100644
--- a/modules/content/tests/src/Kernel/EntityAccessibleTest.php
+++ b/modules/content/tests/src/Kernel/EntityAccessibleTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\eca\PluginManager\Condition;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible;
+use Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -55,7 +60,7 @@ class EntityAccessibleTest extends KernelTestBase {
       'roles' => ['test_role_eca'],
     ])->save();
     // Create the Article content type with a standard body field.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'article',
       'name' => 'Article',
@@ -68,9 +73,9 @@ class EntityAccessibleTest extends KernelTestBase {
    * Tests EntityIsAccessible.
    */
   public function testEntityIsAccessible() {
-    /** @var \Drupal\eca\PluginManager\Condition $condition_manager */
+    /** @var Condition $condition_manager */
     $condition_manager = \Drupal::service('plugin.manager.eca.condition');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     // Create a node that is not published.
@@ -91,17 +96,17 @@ class EntityAccessibleTest extends KernelTestBase {
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'Create access on a non-new node is not possible.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'view']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'update']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'delete']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access.');
@@ -116,17 +121,17 @@ class EntityAccessibleTest extends KernelTestBase {
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'Create access on a non-new node is not possible.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'view']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'update']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'delete']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access.');
@@ -136,17 +141,17 @@ class EntityAccessibleTest extends KernelTestBase {
     \Drupal::entityTypeManager()->getHandler('node', 'access')->resetCache();
     $node = Node::load($node->id());
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'view']);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'User is authenticated and thus must have acccess to the content.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'update']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'delete']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access.');
@@ -154,17 +159,17 @@ class EntityAccessibleTest extends KernelTestBase {
     // Now grant permission to update the node.
     user_role_grant_permissions('test_role_eca', ['edit any article content']);
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'view']);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'User is authenticated and thus must have acccess to the content.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'update']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User has permission to update the node.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'delete']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access to delete the node.');
@@ -186,17 +191,17 @@ class EntityAccessibleTest extends KernelTestBase {
     $condition->setContextValue('entity', Node::create(['type' => 'article']));
     $this->assertTrue($condition->evaluate(), 'Create access on a new node must be possible for priviledged user.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'view']);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'Priviledged user must have view acccess.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'update']);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'Priviledged user must have update acccess.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityIsAccessible $condition */
+    /** @var EntityIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_is_accessible', ['operation' => 'delete']);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'Priviledged user must have delete acccess.');
@@ -208,9 +213,9 @@ class EntityAccessibleTest extends KernelTestBase {
    * Tests EntityFieldIsAccessible.
    */
   public function testEntityFieldIsAccessible() {
-    /** @var \Drupal\eca\PluginManager\Condition $condition_manager */
+    /** @var Condition $condition_manager */
     $condition_manager = \Drupal::service('plugin.manager.eca.condition');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     // Create a node that is not published.
@@ -227,25 +232,25 @@ class EntityAccessibleTest extends KernelTestBase {
     $account_switcher->switchTo(User::load(2));
 
     // Create a plugin for evaluating entity field is accessible.
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'field_i_dont_exist', 'operation' => 'view']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'Non-existent field must always evaluate to false.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'body', 'operation' => 'view']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'body', 'operation' => 'edit']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'body', 'operation' => 'delete']);
     $condition->setContextValue('entity', $node);
@@ -256,19 +261,19 @@ class EntityAccessibleTest extends KernelTestBase {
     \Drupal::entityTypeManager()->getHandler('node', 'access')->resetCache();
     $node = Node::load($node->id());
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'body', 'operation' => 'view']);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'User is authenticated and thus must have acccess to the content.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'body', 'operation' => 'edit']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'body', 'operation' => 'delete']);
     $condition->setContextValue('entity', $node);
@@ -277,19 +282,19 @@ class EntityAccessibleTest extends KernelTestBase {
     // Now grant permission to update the node.
     user_role_grant_permissions('test_role_eca', ['edit any article content']);
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'body', 'operation' => 'view']);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'User is authenticated and thus must have acccess to the content.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'body', 'operation' => 'edit']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User has permission to update the node.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'body', 'operation' => 'delete']);
     $condition->setContextValue('entity', $node);
@@ -301,25 +306,25 @@ class EntityAccessibleTest extends KernelTestBase {
     // Now switch to priviledged user.
     $account_switcher->switchTo(User::load(1));
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'field_i_dont_exist', 'operation' => 'view']);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'Non-existent field must always evaluate to false.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'body', 'operation' => 'view']);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'Priviledged user must have view acccess.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'body', 'operation' => 'edit']);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'Priviledged user must have update acccess.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldIsAccessible $condition */
+    /** @var EntityFieldIsAccessible $condition */
     $condition = $condition_manager->createInstance('eca_entity_field_is_accessible',
       ['field_name' => 'body', 'operation' => 'delete']);
     $condition->setContextValue('entity', $node);
diff --git a/modules/content/tests/src/Kernel/EntityExistsTest.php b/modules/content/tests/src/Kernel/EntityExistsTest.php
index ec42ce9..6613a36 100644
--- a/modules/content/tests/src/Kernel/EntityExistsTest.php
+++ b/modules/content/tests/src/Kernel/EntityExistsTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\eca\PluginManager\Condition;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\node\NodeInterface;
+use Drupal\eca_content\Plugin\ECA\Condition\EntityExists;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ -74,7 +80,7 @@ class EntityExistsTest extends KernelTestBase {
    */
   public function testEntityExists() {
     // Create the Article content type with revisioning and translation enabled.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'article',
       'name' => 'Article',
@@ -89,14 +95,14 @@ class EntityExistsTest extends KernelTestBase {
       'language_alterable' => TRUE,
     ])->save();
 
-    /** @var \Drupal\eca\PluginManager\Condition $condition_manager */
+    /** @var Condition $condition_manager */
     $condition_manager = \Drupal::service('plugin.manager.eca.condition');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
       'type' => 'article',
       'title' => '123',
@@ -121,7 +127,7 @@ class EntityExistsTest extends KernelTestBase {
       'latest_revision' => FALSE,
       'unchanged' => FALSE,
     ];
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityExists $condition */
+    /** @var EntityExists $condition */
     $condition = $condition_manager->createInstance('eca_entity_exists', [] + $defaults);
     $condition->setContextValue('entity', $node);
     $this->assertFalse($condition->evaluate(), 'User without permissions must not have access.');
@@ -129,26 +135,26 @@ class EntityExistsTest extends KernelTestBase {
     // Now switch to priviledged user.
     $account_switcher->switchTo(User::load(1));
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityExists $condition */
+    /** @var EntityExists $condition */
     $condition = $condition_manager->createInstance('eca_entity_exists', [] + $defaults);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'User with permissions must have access.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityExists $condition */
+    /** @var EntityExists $condition */
     $condition = $condition_manager->createInstance('eca_entity_exists', [
       'revision_id' => $first_vid,
     ] + $defaults);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'Node must be available.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityExists $condition */
+    /** @var EntityExists $condition */
     $condition = $condition_manager->createInstance('eca_entity_exists', [
       'langcode' => 'en',
     ] + $defaults);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'Node must be available.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityExists $condition */
+    /** @var EntityExists $condition */
     $condition = $condition_manager->createInstance('eca_entity_exists', [
       'langcode' => 'de',
     ] + $defaults);
@@ -162,14 +168,14 @@ class EntityExistsTest extends KernelTestBase {
       'uid' => 1,
       'status' => 0,
     ])->save();
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityExists $condition */
+    /** @var EntityExists $condition */
     $condition = $condition_manager->createInstance('eca_entity_exists', [
       'langcode' => 'de',
     ] + $defaults);
     $condition->setContextValue('entity', $node);
     $this->assertTrue($condition->evaluate(), 'Node must exist now because the translation is now available.');
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityExists $condition */
+    /** @var EntityExists $condition */
     $condition = $condition_manager->createInstance('eca_entity_exists', [
       'langcode' => 'en',
       'from' => 'id',
diff --git a/modules/content/tests/src/Kernel/EntityFieldValueChangedTest.php b/modules/content/tests/src/Kernel/EntityFieldValueChangedTest.php
index ac0d91c..4dc583f 100644
--- a/modules/content/tests/src/Kernel/EntityFieldValueChangedTest.php
+++ b/modules/content/tests/src/Kernel/EntityFieldValueChangedTest.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\eca\PluginManager\Condition;
@@ -41,38 +48,38 @@ class EntityFieldValueChangedTest extends KernelTestBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected ?EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The condition manager.
    *
-   * @var \Drupal\eca\PluginManager\Condition|null
+   * @var Condition|null
    */
   protected ?Condition $conditionManager;
 
   /**
    * The entity field value changed condition.
    *
-   * @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldValueChanged|null
+   * @var EntityFieldValueChanged|null
    */
   protected ?EntityFieldValueChanged $condition;
 
   /**
    * The node.
    *
-   * @var \Drupal\node\NodeInterface|null
+   * @var NodeInterface|null
    */
   protected ?NodeInterface $node;
 
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws PluginException
    */
   public function setUp(): void {
     parent::setUp();
@@ -85,7 +92,7 @@ class EntityFieldValueChangedTest extends KernelTestBase {
     $this->conditionManager = \Drupal::service('plugin.manager.eca.condition');
 
     // Create the Article content type with a standard body field.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create(['type' => 'article', 'name' => 'Article']);
     $node_type->save();
     node_add_body_field($node_type);
@@ -97,7 +104,7 @@ class EntityFieldValueChangedTest extends KernelTestBase {
     ]);
     $this->node->save();
 
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($this->node->getEntityTypeId());
     $this->node->original = $storage->loadUnchanged($this->node->id());
   }
@@ -105,11 +112,11 @@ class EntityFieldValueChangedTest extends KernelTestBase {
   /**
    * Tests an entity, where the title has changed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws ContextException
+   * @throws PluginException
    */
   public function testValueChanged(): void {
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldValueChanged $condition */
+    /** @var EntityFieldValueChanged $condition */
     $this->condition = $this->conditionManager->createInstance('eca_entity_field_value_changed', [
       'field_name' => 'title',
     ]);
@@ -122,11 +129,11 @@ class EntityFieldValueChangedTest extends KernelTestBase {
   /**
    * Tests an entity, where the title has changed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws ContextException
+   * @throws PluginException
    */
   public function testNoTokenFound(): void {
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldValueChanged $condition */
+    /** @var EntityFieldValueChanged $condition */
     $this->condition = $this->conditionManager->createInstance('eca_entity_field_value_changed', [
       'field_name' => '[custom_token]',
     ]);
@@ -137,8 +144,8 @@ class EntityFieldValueChangedTest extends KernelTestBase {
   /**
    * Tests an entity, where the title has changed, but with negation.
    *
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws ContextException
+   * @throws PluginException
    */
   public function testValueChangedWithNegation(): void {
     $this->condition = $this->conditionManager->createInstance('eca_entity_field_value_changed', [
@@ -154,11 +161,11 @@ class EntityFieldValueChangedTest extends KernelTestBase {
   /**
    * Tests an entity, where the title has not changed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws ContextException
+   * @throws PluginException
    */
   public function testNoValueChanged(): void {
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldValueChanged $condition */
+    /** @var EntityFieldValueChanged $condition */
     $this->condition = $this->conditionManager->createInstance('eca_entity_field_value_changed', [
       'field_name' => 'title',
     ]);
@@ -170,11 +177,11 @@ class EntityFieldValueChangedTest extends KernelTestBase {
   /**
    * Tests an entity, where the original property is missing.
    *
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws ContextException
+   * @throws PluginException
    */
   public function testNoOriginalProperty(): void {
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldValueChanged $condition */
+    /** @var EntityFieldValueChanged $condition */
     $this->condition = $this->conditionManager->createInstance('eca_entity_field_value_changed', [
       'field_name' => 'title',
     ]);
@@ -188,9 +195,9 @@ class EntityFieldValueChangedTest extends KernelTestBase {
   /**
    * Tests a multi value field, that changed.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws EntityStorageException
+   * @throws ContextException
+   * @throws PluginException
    */
   public function testMultiFieldValueChanged(): void {
     FieldStorageConfig::create([
@@ -215,12 +222,12 @@ class EntityFieldValueChangedTest extends KernelTestBase {
     ]);
     $multiFieldNode->save();
 
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldValueChanged $condition */
+    /** @var EntityFieldValueChanged $condition */
     $this->condition = $this->conditionManager->createInstance('eca_entity_field_value_changed', [
       'field_name' => 'field_string_multi',
     ]);
 
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($multiFieldNode->getEntityTypeId());
     $multiFieldNode->original = $storage->loadUnchanged($multiFieldNode->id());
 
@@ -236,11 +243,11 @@ class EntityFieldValueChangedTest extends KernelTestBase {
   /**
    * Tests, if the body value has changed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws ContextException
+   * @throws PluginException
    */
   public function testBodyValueChanged(): void {
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldValueChanged $condition */
+    /** @var EntityFieldValueChanged $condition */
     $this->condition = $this->conditionManager->createInstance('eca_entity_field_value_changed', [
       'field_name' => 'body',
     ]);
@@ -253,11 +260,11 @@ class EntityFieldValueChangedTest extends KernelTestBase {
   /**
    * Tests, if a referenced entity field has changed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws ContextException
+   * @throws PluginException
    */
   public function testReferencedEntityFieldChanged(): void {
-    /** @var \Drupal\eca_content\Plugin\ECA\Condition\EntityFieldValueChanged $condition */
+    /** @var EntityFieldValueChanged $condition */
     $this->condition = $this->conditionManager->createInstance('eca_entity_field_value_changed', [
       'field_name' => 'uid',
     ]);
diff --git a/modules/content/tests/src/Kernel/EntityLoaderTest.php b/modules/content/tests/src/Kernel/EntityLoaderTest.php
index 94ec4ad..7e8f845 100644
--- a/modules/content/tests/src/Kernel/EntityLoaderTest.php
+++ b/modules/content/tests/src/Kernel/EntityLoaderTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\eca_content\Service\EntityLoader;
+use Drupal\eca\Token\TokenInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ -73,7 +76,7 @@ class EntityLoaderTest extends KernelTestBase {
    */
   public function testEntityLoader() {
     // Create the Article content type with revisioning and translation enabled.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'article',
       'name' => 'Article',
@@ -88,12 +91,12 @@ class EntityLoaderTest extends KernelTestBase {
       'language_alterable' => TRUE,
     ])->save();
 
-    /** @var \Drupal\eca_content\Service\EntityLoader $entity_loader */
+    /** @var EntityLoader $entity_loader */
     $entity_loader = \Drupal::service('eca_content.service.entity_loader');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
       'type' => 'article',
       'title' => '123',
diff --git a/modules/content/tests/src/Kernel/GetFieldValueTest.php b/modules/content/tests/src/Kernel/GetFieldValueTest.php
index 118882f..9ccd6a7 100644
--- a/modules/content/tests/src/Kernel/GetFieldValueTest.php
+++ b/modules/content/tests/src/Kernel/GetFieldValueTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\node\NodeInterface;
+use Drupal\eca_content\Plugin\Action\GetFieldValue;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ -47,7 +53,7 @@ class GetFieldValueTest extends KernelTestBase {
     User::create(['uid' => 1, 'name' => 'admin'])->save();
 
     // Create the Article content type with a standard body field.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create(['type' => 'article', 'name' => 'Article']);
     $node_type->save();
     node_add_body_field($node_type);
@@ -70,17 +76,17 @@ class GetFieldValueTest extends KernelTestBase {
    * Tests GetFieldValue on a node.
    */
   public function testGetFieldValueNode(): void {
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     $string = $this->randomMachineName(32);
     $text = $this->randomMachineName(32);
     $summary = $this->randomMachineName(16);
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
       'type' => 'article',
       'uid' => 1,
@@ -90,7 +96,7 @@ class GetFieldValueTest extends KernelTestBase {
     ]);
     $node->save();
 
-    /** @var \Drupal\eca_content\Plugin\Action\GetFieldValue $action */
+    /** @var GetFieldValue $action */
     $action = $action_manager->createInstance('eca_get_field_value', [
       'token_name' => 'my_custom_token:bodyvalue',
       'field_name' => 'body.value',
@@ -99,7 +105,7 @@ class GetFieldValueTest extends KernelTestBase {
 
     // Now switching to priviledged user.
     $account_switcher->switchTo(User::load(1));
-    /** @var \Drupal\eca_content\Plugin\Action\GetFieldValue $action */
+    /** @var GetFieldValue $action */
     $action = $action_manager->createInstance('eca_get_field_value', [
       'token_name' => 'my_custom_token:bodyvalue',
       'field_name' => 'body.value',
@@ -109,7 +115,7 @@ class GetFieldValueTest extends KernelTestBase {
     $this->assertEquals($text, $token_services->replaceClear('[my_custom_token:bodyvalue]'));
     $this->assertEquals('', $token_services->replaceClear('[my_custom_token:body]'));
 
-    /** @var \Drupal\eca_content\Plugin\Action\GetFieldValue $action */
+    /** @var GetFieldValue $action */
     $action = $action_manager->createInstance('eca_get_field_value', [
       'token_name' => 'my_custom_token:body',
       'field_name' => 'body',
@@ -118,7 +124,7 @@ class GetFieldValueTest extends KernelTestBase {
     $this->assertEquals($text, $token_services->replaceClear('[my_custom_token:bodyvalue]'));
     $this->assertEquals($text, $token_services->replaceClear('[my_custom_token:body]'));
 
-    /** @var \Drupal\eca_content\Plugin\Action\GetFieldValue $action */
+    /** @var GetFieldValue $action */
     $action = $action_manager->createInstance('eca_get_field_value', [
       'token_name' => 'my_custom_token:body_summary',
       'field_name' => 'body.0.summary',
@@ -126,7 +132,7 @@ class GetFieldValueTest extends KernelTestBase {
     $action->execute($node);
     $this->assertEquals($summary, $token_services->replaceClear('[my_custom_token:body_summary]'));
 
-    /** @var \Drupal\eca_content\Plugin\Action\GetFieldValue $action */
+    /** @var GetFieldValue $action */
     $action = $action_manager->createInstance('eca_get_field_value', [
       'token_name' => 'another_one:string_2',
       'field_name' => 'field_string_multi:1:value',
@@ -134,7 +140,7 @@ class GetFieldValueTest extends KernelTestBase {
     $action->execute($node);
     $this->assertEquals($string . '2', $token_services->replaceClear('[another_one:string_2]'));
 
-    /** @var \Drupal\eca_content\Plugin\Action\GetFieldValue $action */
+    /** @var GetFieldValue $action */
     $action = $action_manager->createInstance('eca_get_field_value', [
       'token_name' => 'a_root_token',
       'field_name' => 'field_string_multi.value',
diff --git a/modules/content/tests/src/Kernel/LoadEntityRefTest.php b/modules/content/tests/src/Kernel/LoadEntityRefTest.php
index 978eb52..f9b5552 100644
--- a/modules/content/tests/src/Kernel/LoadEntityRefTest.php
+++ b/modules/content/tests/src/Kernel/LoadEntityRefTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\eca_content\Plugin\Action\SetFieldValue;
+use Drupal\eca_content\Plugin\Action\LoadEntity;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -76,7 +82,7 @@ class LoadEntityRefTest extends KernelTestBase {
    */
   public function testLoadEntityRef() {
     // Create the Article content type with revisioning and translation enabled.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'article',
       'name' => 'Article',
@@ -109,11 +115,11 @@ class LoadEntityRefTest extends KernelTestBase {
     ]);
     $field->save();
 
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     $referenced = Node::create([
@@ -139,7 +145,7 @@ class LoadEntityRefTest extends KernelTestBase {
     $node->save();
 
     // Create an action that that loads the referenced entity.
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $defaults = [
       'token_name' => 'mynode',
       'from' => 'current',
@@ -152,14 +158,14 @@ class LoadEntityRefTest extends KernelTestBase {
       'unchanged' => FALSE,
       'field_name_entity_ref' => 'field_node_ref',
     ];
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity_ref', [] + $defaults);
     $this->assertFalse($action->access($node), 'User without permissions must not have access.');
 
     // Now switch to priviledged user.
     $account_switcher->switchTo(User::load(1));
 
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity_ref', [] + $defaults);
     $this->assertTrue($action->access($node), 'User with permissions must have access.');
     $this->assertFalse($token_services->hasTokenData('mynode'), 'Token must not yet be defined.');
@@ -167,14 +173,14 @@ class LoadEntityRefTest extends KernelTestBase {
     $this->assertTrue($token_services->hasTokenData('mynode'), 'Token must be defined.');
     $this->assertSame($referenced->id(), $token_services->getTokenData('mynode')->id());
 
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity_ref', [
       'revision_id' => $first_vid,
     ] + $defaults);
     $action->execute($node);
     $this->assertFalse($token_services->hasTokenData('mynode'), 'Token must not be defined, because the reference does not exist in the first revision.');
 
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity_ref', [
       'langcode' => 'en',
     ] + $defaults);
@@ -182,7 +188,7 @@ class LoadEntityRefTest extends KernelTestBase {
     $this->assertTrue($token_services->hasTokenData('mynode'), 'Token must be defined.');
     $this->assertSame($referenced->id(), $token_services->getTokenData('mynode')->id());
 
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity_ref', [
       'langcode' => 'de',
     ] + $defaults);
@@ -196,14 +202,14 @@ class LoadEntityRefTest extends KernelTestBase {
       'uid' => 1,
       'status' => 0,
     ])->save();
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity_ref', [
       'langcode' => 'de',
     ] + $defaults);
     $action->execute($node);
     $this->assertFalse($token_services->hasTokenData('mynode'), 'Token must not be defined because the translation has no reference.');
 
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $token_services->addTokenData('mynode', $node);
     $action = $action_manager->createInstance('eca_token_load_entity_ref', [
       'token_name' => 'english',
diff --git a/modules/content/tests/src/Kernel/LoadEntityTest.php b/modules/content/tests/src/Kernel/LoadEntityTest.php
index e70f4e8..fecdcc8 100644
--- a/modules/content/tests/src/Kernel/LoadEntityTest.php
+++ b/modules/content/tests/src/Kernel/LoadEntityTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\node\NodeInterface;
+use Drupal\eca_content\Plugin\Action\LoadEntity;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ -74,7 +80,7 @@ class LoadEntityTest extends KernelTestBase {
    */
   public function testLoadEntity(): void {
     // Create the Article content type with revisioning and translation enabled.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'article',
       'name' => 'Article',
@@ -89,14 +95,14 @@ class LoadEntityTest extends KernelTestBase {
       'language_alterable' => TRUE,
     ])->save();
 
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
       'type' => 'article',
       'title' => '123',
@@ -123,14 +129,14 @@ class LoadEntityTest extends KernelTestBase {
       'latest_revision' => FALSE,
       'unchanged' => FALSE,
     ];
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity', [] + $defaults);
     $this->assertFalse($action->access($node), 'User without permissions must not have access.');
 
     // Now switch to priviledged user.
     $account_switcher->switchTo(User::load(1));
 
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity', [] + $defaults);
     $this->assertTrue($action->access($node), 'User with permissions must have access.');
     $this->assertFalse($token_services->hasTokenData('mynode'), 'Token must not yet be defined.');
@@ -138,7 +144,7 @@ class LoadEntityTest extends KernelTestBase {
     $this->assertTrue($token_services->hasTokenData('mynode'), 'Token must be defined.');
     $this->assertSame($node, $token_services->getTokenData('mynode'));
 
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity', [
       'revision_id' => $first_vid,
     ] + $defaults);
@@ -147,7 +153,7 @@ class LoadEntityTest extends KernelTestBase {
     $this->assertSame($first_vid, $token_services->getTokenData('mynode')->getRevisionId(), 'Loaded node must be the first revision.');
     $this->assertNotSame($second_vid, $token_services->getTokenData('mynode')->getRevisionId(), 'Loaded node must not match up with the second revision.');
 
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity', [
       'langcode' => 'en',
     ] + $defaults);
@@ -156,7 +162,7 @@ class LoadEntityTest extends KernelTestBase {
     $this->assertNotSame($first_vid, $token_services->getTokenData('mynode')->getRevisionId(), 'Loaded node must be the first revision.');
     $this->assertSame($second_vid, $token_services->getTokenData('mynode')->getRevisionId(), 'Loaded node must not match up with the second revision.');
 
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity', [
       'langcode' => 'de',
     ] + $defaults);
@@ -170,7 +176,7 @@ class LoadEntityTest extends KernelTestBase {
       'uid' => 1,
       'status' => 0,
     ])->save();
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity', [
       'langcode' => 'de',
     ] + $defaults);
@@ -179,7 +185,7 @@ class LoadEntityTest extends KernelTestBase {
     $this->assertEquals('de', $token_services->getTokenData('mynode')->language()->getId());
     $this->assertEquals('ECA ist super!', (string) $token_services->replace('[mynode:title]'));
 
-    /** @var \Drupal\eca_content\Plugin\Action\LoadEntity $action */
+    /** @var LoadEntity $action */
     $action = $action_manager->createInstance('eca_token_load_entity', [
       'token_name' => 'english',
       'langcode' => 'en',
diff --git a/modules/content/tests/src/Kernel/MapFieldTest.php b/modules/content/tests/src/Kernel/MapFieldTest.php
index 7974425..bbf6763 100644
--- a/modules/content/tests/src/Kernel/MapFieldTest.php
+++ b/modules/content/tests/src/Kernel/MapFieldTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\eca_content\Plugin\Action\GetFieldValue;
+use Drupal\eca_content\Plugin\Action\SetFieldValue;
 use Drupal\entity_test\Entity\EntityTestMapField;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\user\Entity\User;
@@ -45,11 +50,11 @@ class MapFieldTest extends KernelTestBase {
    * Tests GetFieldValue on an entity that contains a map field.
    */
   public function testGetFieldValueMapEntity(): void {
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     // Now switching to priviledged user.
@@ -68,14 +73,14 @@ class MapFieldTest extends KernelTestBase {
     ]);
     $entity->save();
 
-    /** @var \Drupal\eca_content\Plugin\Action\GetFieldValue $action */
+    /** @var GetFieldValue $action */
     $action = $action_manager->createInstance('eca_get_field_value', [
       'token_name' => 'my_custom_token:random_string',
       'field_name' => 'data.random_string',
     ]);
     $this->assertSame($entity->access('view'), $action->access($entity));
 
-    /** @var \Drupal\eca_content\Plugin\Action\GetFieldValue $action */
+    /** @var GetFieldValue $action */
     $action = $action_manager->createInstance('eca_get_field_value', [
       'token_name' => 'my_custom_token:random_string',
       'field_name' => 'data.random_string',
@@ -85,7 +90,7 @@ class MapFieldTest extends KernelTestBase {
     $this->assertEquals($random_string, (string) $token_services->replaceClear('[my_custom_token:random_string]'));
     $this->assertEquals('', $token_services->replaceClear('[my_custom_token:another_value]'));
 
-    /** @var \Drupal\eca_content\Plugin\Action\GetFieldValue $action */
+    /** @var GetFieldValue $action */
     $action = $action_manager->createInstance('eca_get_field_value', [
       'token_name' => 'another_token',
       'field_name' => 'data',
@@ -102,11 +107,11 @@ class MapFieldTest extends KernelTestBase {
    * Tests SetFieldValue on an entity that contains a map field.
    */
   public function testSetFieldValueMapEntity(): void {
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     // Now switching to priviledged user.
@@ -132,7 +137,7 @@ class MapFieldTest extends KernelTestBase {
       'save_entity' => FALSE,
     ];
 
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $action = $action_manager->createInstance('eca_set_field_value', [
       'method' => 'set:clear',
       'field_name' => 'data.another_value',
@@ -141,7 +146,7 @@ class MapFieldTest extends KernelTestBase {
     $this->assertSame($entity->access('update'), $action->access($entity));
     $this->assertEquals('Hello', $entity->data->another_value);
 
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $action = $action_manager->createInstance('eca_set_field_value', [
       'method' => 'set:clear',
       'field_name' => 'data.another_value',
@@ -153,7 +158,7 @@ class MapFieldTest extends KernelTestBase {
     $this->assertEquals($random_string, $entity->data->random_string);
     $this->assertEquals(123, $entity->data->a_number);
 
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $action = $action_manager->createInstance('eca_set_field_value', [
       'method' => 'set:clear',
       'field_name' => 'data.a_new_one',
diff --git a/modules/content/tests/src/Kernel/SetFieldValueTest.php b/modules/content/tests/src/Kernel/SetFieldValueTest.php
index b596c8a..2702712 100644
--- a/modules/content/tests/src/Kernel/SetFieldValueTest.php
+++ b/modules/content/tests/src/Kernel/SetFieldValueTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\node\NodeInterface;
+use Drupal\eca_content\Plugin\Action\SetFieldValue;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ -51,21 +57,21 @@ class SetFieldValueTest extends KernelTestBase {
    */
   public function testNodeBody() {
     // Create the Article content type with a standard body field.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create(['type' => 'article', 'name' => 'Article']);
     $node_type->save();
     node_add_body_field($node_type);
 
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     $body = $this->randomMachineName(32);
     $summary = $this->randomMachineName(16);
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
       'type' => 'article',
       'uid' => 0,
@@ -81,7 +87,7 @@ class SetFieldValueTest extends KernelTestBase {
     $node->save();
 
     // Create an action that sets the body value of the node.
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $defaults = [
       'strip_tags' => FALSE,
       'trim' => FALSE,
@@ -104,7 +110,7 @@ class SetFieldValueTest extends KernelTestBase {
     // Now switching to priviledged user.
     $account_switcher->switchTo(User::load(1));
     // Create an action that sets the body value of the node.
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $action = $action_manager->createInstance('eca_set_field_value', [
       'method' => 'set:clear',
       'field_name' => 'body',
@@ -296,7 +302,7 @@ class SetFieldValueTest extends KernelTestBase {
    */
   public function testNodeStringMultiple() {
     // Create the Article content type.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create(['type' => 'article', 'name' => 'Article']);
     $node_type->save();
     // Create the multi-value string field, using cardinality 3.
@@ -330,17 +336,17 @@ class SetFieldValueTest extends KernelTestBase {
     ]);
     $instance->save();
 
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     $string = $this->randomMachineName(32);
     $text = $this->randomMachineName(32);
     $summary = $this->randomMachineName(16);
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
       'type' => 'article',
       'uid' => 0,
@@ -367,7 +373,7 @@ class SetFieldValueTest extends KernelTestBase {
     $node->save();
 
     // Create an action that sets a string value of the node.
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $defaults = [
       'strip_tags' => FALSE,
       'trim' => FALSE,
@@ -390,7 +396,7 @@ class SetFieldValueTest extends KernelTestBase {
     // Now switching to priviledged user.
     $account_switcher->switchTo(User::load(1));
     // Create an action that sets the body value of the node.
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $action = $action_manager->createInstance('eca_set_field_value', [
       'method' => 'set:clear',
       'field_name' => 'field_string_multi',
@@ -630,7 +636,7 @@ class SetFieldValueTest extends KernelTestBase {
     $account_switcher->switchBack();
 
     // Create an action that sets a string value of the node.
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $defaults = [
       'strip_tags' => FALSE,
       'trim' => FALSE,
@@ -653,7 +659,7 @@ class SetFieldValueTest extends KernelTestBase {
     // Now switching to priviledged user.
     $account_switcher->switchTo(User::load(1));
     // Create an action that sets the text value of the node.
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $action = $action_manager->createInstance('eca_set_field_value', [
       'method' => 'set:clear',
       'field_name' => 'field_text_multi',
@@ -824,7 +830,7 @@ class SetFieldValueTest extends KernelTestBase {
     $string = $this->randomMachineName(32);
     $text = $this->randomMachineName(32);
     $summary = $this->randomMachineName(16);
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $another_node = Node::create([
       'type' => 'article',
       'uid' => 0,
@@ -981,7 +987,7 @@ class SetFieldValueTest extends KernelTestBase {
    */
   public function testNodeReferenceSingle() {
     // Create the Article content type with a standard body field.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create(['type' => 'article', 'name' => 'Article']);
     $node_type->save();
     // Create the single-value reference field.
@@ -1016,18 +1022,18 @@ class SetFieldValueTest extends KernelTestBase {
     ]);
     $node2->save();
 
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     $token_services->addTokenData('node1', $node1);
     $token_services->addTokenData('node2', $node2);
 
     // Create an action that sets a target of the node.
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $defaults = [
       'strip_tags' => FALSE,
       'trim' => FALSE,
@@ -1050,7 +1056,7 @@ class SetFieldValueTest extends KernelTestBase {
     // Now switching to priviledged user.
     $account_switcher->switchTo(User::load(1));
     // Create an action that sets the target of the node.
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $action = $action_manager->createInstance('eca_set_field_value', [
       'method' => 'set:clear',
       'field_name' => 'field_node_single.target_id',
@@ -1097,7 +1103,7 @@ class SetFieldValueTest extends KernelTestBase {
    */
   public function testNodeReferenceMulti() {
     // Create the Article content type.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create(['type' => 'article', 'name' => 'Article']);
     $node_type->save();
     // Create the multi-value reference, using inlimited cardinality.
@@ -1138,11 +1144,11 @@ class SetFieldValueTest extends KernelTestBase {
     ]);
     $node3->save();
 
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     $token_services->addTokenData('node1', $node1);
@@ -1150,7 +1156,7 @@ class SetFieldValueTest extends KernelTestBase {
     $token_services->addTokenData('node3', $node3);
 
     // Create an action that sets a target of the node.
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $defaults = [
       'strip_tags' => FALSE,
       'trim' => FALSE,
@@ -1173,7 +1179,7 @@ class SetFieldValueTest extends KernelTestBase {
     // Now switching to priviledged user.
     $account_switcher->switchTo(User::load(1));
     // Create an action that sets the target of the node.
-    /** @var \Drupal\eca_content\Plugin\Action\SetFieldValue $action */
+    /** @var SetFieldValue $action */
     $action = $action_manager->createInstance('eca_set_field_value', [
       'method' => 'set:clear',
       'field_name' => 'field_node_multi.target_id',
diff --git a/modules/content/tests/src/Kernel/TriggerContentEntityCustomEventTest.php b/modules/content/tests/src/Kernel/TriggerContentEntityCustomEventTest.php
index 8df16c4..54648ad 100644
--- a/modules/content/tests/src/Kernel/TriggerContentEntityCustomEventTest.php
+++ b/modules/content/tests/src/Kernel/TriggerContentEntityCustomEventTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Action\ActionManager;
+use Drupal\eca\Token\TokenInterface;
+use Drupal\eca_content\Plugin\Action\TriggerContentEntityCustomEvent;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\eca_content\Event\ContentEntityCustomEvent;
 use Drupal\eca_content\Event\ContentEntityEvents;
 use Drupal\eca_content\Event\ContentEntityPreSave;
@@ -40,7 +45,7 @@ class TriggerContentEntityCustomEventTest extends KernelTestBase {
   /**
    * The node.
    *
-   * @var \Drupal\node\NodeInterface|null
+   * @var NodeInterface|null
    */
   protected ?NodeInterface $node = NULL;
 
@@ -55,7 +60,7 @@ class TriggerContentEntityCustomEventTest extends KernelTestBase {
     $this->installConfig(static::$modules);
     User::create(['uid' => 0, 'name' => 'anonymous'])->save();
     // Create an article content type.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create([
       'type' => 'article',
       'name' => 'Article',
@@ -76,12 +81,12 @@ class TriggerContentEntityCustomEventTest extends KernelTestBase {
    * Tests triggering an entity-aware custom event.
    */
   public function testTriggerAction() {
-    /** @var \Drupal\Core\Action\ActionManager $action_manager */
+    /** @var ActionManager $action_manager */
     $action_manager = \Drupal::service('plugin.manager.action');
-    /** @var \Drupal\eca\Token\TokenInterface $token_services */
+    /** @var TokenInterface $token_services */
     $token_services = \Drupal::service('eca.token_services');
 
-    /** @var \Drupal\eca_content\Plugin\Action\TriggerContentEntityCustomEvent $action */
+    /** @var TriggerContentEntityCustomEvent $action */
     $action = $action_manager->createInstance('eca_trigger_content_entity_custom_event', [
       'event_id' => 'my_custom_event',
       'tokens' => '',
@@ -91,7 +96,7 @@ class TriggerContentEntityCustomEventTest extends KernelTestBase {
     $this->assertFalse($action->access(NULL), 'Access must be revoked when no entity is provided.');
     $this->assertTrue($action->access($this->node), 'Access must be granted when an entity is provided.');
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $received_event = NULL;
     $event_dispatcher->addListener(ContentEntityEvents::CUSTOM, static function ($event) use (&$received_event) {
@@ -101,14 +106,14 @@ class TriggerContentEntityCustomEventTest extends KernelTestBase {
     $action->execute($this->node);
     $this->assertNotNull($received_event);
     $this->assertTrue($received_event instanceof ContentEntityCustomEvent);
-    /** @var \Drupal\eca_content\Event\ContentEntityCustomEvent $received_event */
+    /** @var ContentEntityCustomEvent $received_event */
     $this->assertSame($this->node, $received_event->getEntity());
 
     // Now test with additional Tokens to forward.
     $token_services->addTokenData('my_tokens_1', $this->node);
     $token_services->addTokenData('my_tokens_2', [1, 2]);
     $token_services->addTokenData('my_tokens_3', 'I will not be forwarded.');
-    /** @var \Drupal\eca_content\Plugin\Action\TriggerContentEntityCustomEvent $action */
+    /** @var TriggerContentEntityCustomEvent $action */
     $action = $action_manager->createInstance('eca_trigger_content_entity_custom_event', [
       'event_id' => 'my_custom_event',
       'tokens' => 'my_tokens_1, my_tokens_2',
@@ -118,7 +123,7 @@ class TriggerContentEntityCustomEventTest extends KernelTestBase {
     $this->assertFalse($action->access(NULL), 'Access must be revoked when no entity is provided.');
     $this->assertTrue($action->access($this->node), 'Access must be granted when an entity is provided.');
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $received_event = NULL;
     $event_dispatcher->addListener(ContentEntityEvents::CUSTOM, static function ($event) use (&$received_event) {
@@ -128,7 +133,7 @@ class TriggerContentEntityCustomEventTest extends KernelTestBase {
     $action->execute($this->node);
     $this->assertNotNull($received_event);
     $this->assertTrue($received_event instanceof ContentEntityCustomEvent);
-    /** @var \Drupal\eca_content\Event\ContentEntityCustomEvent $received_event */
+    /** @var ContentEntityCustomEvent $received_event */
     $this->assertSame($this->node, $received_event->getEntity());
     $this->assertSame($this->node, $token_services->getTokenData('my_tokens_1'));
     $this->assertTrue($token_services->hasTokenData('my_tokens_2'));
diff --git a/modules/content/tests/src/Unit/EntityTypesTest.php b/modules/content/tests/src/Unit/EntityTypesTest.php
index 556f228..c096e8c 100644
--- a/modules/content/tests/src/Unit/EntityTypesTest.php
+++ b/modules/content/tests/src/Unit/EntityTypesTest.php
@@ -20,14 +20,14 @@ class EntityTypesTest extends TestCase {
   /**
    * The entity type manager mock.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The entity type bundle info mock.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected EntityTypeBundleInfoInterface $entityTypeBundleInfo;
 
diff --git a/modules/development/src/Commands/DocsCommands.php b/modules/development/src/Commands/DocsCommands.php
index 22b0106..b5f4d8a 100644
--- a/modules/development/src/Commands/DocsCommands.php
+++ b/modules/development/src/Commands/DocsCommands.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\eca_development\Commands;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\Core\Action\ActionInterface;
@@ -44,42 +46,42 @@ class DocsCommands extends DrushCommands {
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * ECA Action service.
    *
-   * @var \Drupal\eca\Service\Actions
+   * @var Actions
    */
   protected Actions $actionServices;
 
   /**
    * ECA Condition service.
    *
-   * @var \Drupal\eca\Service\Conditions
+   * @var Conditions
    */
   protected Conditions $conditionServices;
 
   /**
    * ECA Modeller service.
    *
-   * @var \Drupal\eca\Service\Modellers
+   * @var Modellers
    */
   protected Modellers $modellerServices;
 
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;
 
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;
 
@@ -141,11 +143,11 @@ class DocsCommands extends DrushCommands {
    *
    * @command eca:doc:models
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function models(): void {
-    /** @var \Drupal\eca\Entity\Eca $eca */
+    /** @var Eca $eca */
     foreach ($this->entityTypeManager
       ->getStorage('eca')
       ->loadMultiple() as $eca) {
@@ -191,7 +193,7 @@ class DocsCommands extends DrushCommands {
   /**
    * Prepare documentation for given plugin.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $plugin
+   * @param PluginInspectionInterface $plugin
    *   The ECA plugin for which documentation should be created.
    */
   private function pluginDoc(PluginInspectionInterface $plugin): void {
@@ -217,7 +219,7 @@ class DocsCommands extends DrushCommands {
   /**
    * Extracts all required values from the given plugin.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $plugin
+   * @param PluginInspectionInterface $plugin
    *   The ECA plugin for which values should be extracted.
    *
    * @return array
@@ -279,7 +281,7 @@ class DocsCommands extends DrushCommands {
   /**
    * Creates documentation for the given ECA model.
    *
-   * @param \Drupal\eca\Entity\Eca $eca
+   * @param Eca $eca
    *   The ECA config entity for which documentation should be created.
    */
   private function modelDoc(Eca $eca): void {
diff --git a/modules/form/eca_form.module b/modules/form/eca_form.module
index 35e18f0..73944cd 100644
--- a/modules/form/eca_form.module
+++ b/modules/form/eca_form.module
@@ -11,7 +11,7 @@ use Drupal\eca_form\HookHandler;
 /**
  * Helper function to return the hook handler service.
  *
- * @return \Drupal\eca_form\HookHandler
+ * @return HookHandler
  *   The hook handler service.
  */
 function _eca_form_hook_handler(): HookHandler {
diff --git a/modules/form/src/Event/FormBase.php b/modules/form/src/Event/FormBase.php
index c5b4891..68379bd 100644
--- a/modules/form/src/Event/FormBase.php
+++ b/modules/form/src/Event/FormBase.php
@@ -32,7 +32,7 @@ abstract class FormBase extends Event implements ConditionalApplianceInterface,
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected FormStateInterface $formState;
 
@@ -41,7 +41,7 @@ abstract class FormBase extends Event implements ConditionalApplianceInterface,
    *
    * @param array &$form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function __construct(array &$form, FormStateInterface $form_state) {
@@ -67,7 +67,7 @@ abstract class FormBase extends Event implements ConditionalApplianceInterface,
       }
     }
 
-    /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+    /** @var EntityFormInterface $form_object */
     $is_entity_form = ($form_object instanceof EntityFormInterface);
 
     if ($w_entity_type_ids !== '*') {
@@ -124,7 +124,7 @@ abstract class FormBase extends Event implements ConditionalApplianceInterface,
       }
     }
 
-    /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+    /** @var EntityFormInterface $form_object */
     $is_entity_form = ($form_object instanceof EntityFormInterface);
 
     if (!empty($arguments['entity_type_id']) && $arguments['entity_type_id'] !== '*') {
diff --git a/modules/form/src/HookHandler.php b/modules/form/src/HookHandler.php
index 3180751..907182e 100644
--- a/modules/form/src/HookHandler.php
+++ b/modules/form/src/HookHandler.php
@@ -30,7 +30,7 @@ class HookHandler extends BaseHookHandler {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function alter(array &$form, FormStateInterface $form_state): void {
@@ -69,7 +69,7 @@ class HookHandler extends BaseHookHandler {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -85,7 +85,7 @@ class HookHandler extends BaseHookHandler {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -101,7 +101,7 @@ class HookHandler extends BaseHookHandler {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validate(array $form, FormStateInterface $form_state): void {
@@ -113,7 +113,7 @@ class HookHandler extends BaseHookHandler {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function submit(array $form, FormStateInterface $form_state): void {
diff --git a/modules/form/src/Plugin/Action/FormAddAjax.php b/modules/form/src/Plugin/Action/FormAddAjax.php
index 05c347e..09b53db 100644
--- a/modules/form/src/Plugin/Action/FormAddAjax.php
+++ b/modules/form/src/Plugin/Action/FormAddAjax.php
@@ -153,7 +153,7 @@ class FormAddAjax extends FormFieldActionBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -181,7 +181,7 @@ class FormAddAjax extends FormFieldActionBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function ajaxSubmit(array $form, FormStateInterface $form_state): void {
diff --git a/modules/form/src/Plugin/Action/FormAddFieldActionBase.php b/modules/form/src/Plugin/Action/FormAddFieldActionBase.php
index 9fbf9b9..999e616 100644
--- a/modules/form/src/Plugin/Action/FormAddFieldActionBase.php
+++ b/modules/form/src/Plugin/Action/FormAddFieldActionBase.php
@@ -18,7 +18,7 @@ abstract class FormAddFieldActionBase extends FormActionBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;
 
diff --git a/modules/form/src/Plugin/Action/FormAddGroupElement.php b/modules/form/src/Plugin/Action/FormAddGroupElement.php
index 49b6cf5..f44a6c0 100644
--- a/modules/form/src/Plugin/Action/FormAddGroupElement.php
+++ b/modules/form/src/Plugin/Action/FormAddGroupElement.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_form\Plugin\Action;
 
+use Drupal\Core\Render\ElementInfoManager;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\RenderElement;
 use Drupal\eca\Plugin\DataType\DataTransferObject;
@@ -74,7 +75,7 @@ class FormAddGroupElement extends FormActionBase {
           // @todo Remove this workaround once #2190333 got fixed.
           if (empty($field_element['#process']) && empty($field_element['#pre_render']) && isset($field_element['#type'])) {
             $type = $field_element['#type'];
-            /** @var \Drupal\Core\Render\ElementInfoManager $element_info */
+            /** @var ElementInfoManager $element_info */
             $element_info = \Drupal::service('plugin.manager.element_info');
             if ($element_info->hasDefinition($type)) {
               $field_element += $element_info->getInfo($type);
diff --git a/modules/form/src/Plugin/Action/FormFieldSetOptionsTrait.php b/modules/form/src/Plugin/Action/FormFieldSetOptionsTrait.php
index 60ce6b0..c8c55c5 100644
--- a/modules/form/src/Plugin/Action/FormFieldSetOptionsTrait.php
+++ b/modules/form/src/Plugin/Action/FormFieldSetOptionsTrait.php
@@ -20,7 +20,7 @@ trait FormFieldSetOptionsTrait {
   /**
    * The YAML parser.
    *
-   * @var \Drupal\eca\Service\YamlParser
+   * @var YamlParser
    */
   protected YamlParser $yamlParser;
 
@@ -28,7 +28,7 @@ trait FormFieldSetOptionsTrait {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): ActionBase {
-    /** @var \Drupal\eca_form\Plugin\Action\FormFieldSetOptions $instance */
+    /** @var FormFieldSetOptions $instance */
     $instance = parent::create($container, $configuration, $plugin_id, $plugin_definition);
     $instance->setYamlParser($container->get('eca.service.yaml_parser'));
     return $instance;
@@ -139,7 +139,7 @@ trait FormFieldSetOptionsTrait {
   /**
    * Set the YAML parser.
    *
-   * @param \Drupal\eca\Service\YamlParser $yaml_parser
+   * @param YamlParser $yaml_parser
    *   The YAML parser.
    */
   public function setYamlParser(YamlParser $yaml_parser): void {
diff --git a/modules/form/src/Plugin/Action/FormFieldSetValue.php b/modules/form/src/Plugin/Action/FormFieldSetValue.php
index 6cee463..972201f 100644
--- a/modules/form/src/Plugin/Action/FormFieldSetValue.php
+++ b/modules/form/src/Plugin/Action/FormFieldSetValue.php
@@ -28,7 +28,7 @@ class FormFieldSetValue extends ConfigurableActionBase {
   /**
    * The YAML parser.
    *
-   * @var \Drupal\eca\Service\YamlParser
+   * @var YamlParser
    */
   protected YamlParser $yamlParser;
 
@@ -137,7 +137,7 @@ class FormFieldSetValue extends ConfigurableActionBase {
   /**
    * Set the YAML parser.
    *
-   * @param \Drupal\eca\Service\YamlParser $yaml_parser
+   * @param YamlParser $yaml_parser
    *   The YAML parser.
    */
   public function setYamlParser(YamlParser $yaml_parser): void {
diff --git a/modules/form/src/Plugin/Action/FormFieldValidateActionBase.php b/modules/form/src/Plugin/Action/FormFieldValidateActionBase.php
index a37fa22..c1531a8 100644
--- a/modules/form/src/Plugin/Action/FormFieldValidateActionBase.php
+++ b/modules/form/src/Plugin/Action/FormFieldValidateActionBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_form\Plugin\Action;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * Base class for form field validation actions.
  */
@@ -17,7 +18,7 @@ abstract class FormFieldValidateActionBase extends FormFieldActionBase {
   /**
    * Set a form error to the configured field.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|string $message
+   * @param TranslatableMarkup|string $message
    *   The error message.
    */
   protected function setError($message): void {
diff --git a/modules/form/src/Plugin/Action/FormFlagFieldActionBase.php b/modules/form/src/Plugin/Action/FormFlagFieldActionBase.php
index 45ef46a..c140fdf 100644
--- a/modules/form/src/Plugin/Action/FormFlagFieldActionBase.php
+++ b/modules/form/src/Plugin/Action/FormFlagFieldActionBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_form\Plugin\Action;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element;
 
@@ -24,7 +25,7 @@ abstract class FormFlagFieldActionBase extends FormFieldActionBase {
    *   Whether a human-readable name should be returned. When set to TRUE,
    *   then a translatable markup object is being returned. Default is FALSE.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The flag as machine name or human-readable name.
    */
   abstract protected function getFlagName(bool $human_readable = FALSE);
diff --git a/modules/form/src/Plugin/Action/FormStateSetPropertyValue.php b/modules/form/src/Plugin/Action/FormStateSetPropertyValue.php
index c4c1a5d..4e6043c 100644
--- a/modules/form/src/Plugin/Action/FormStateSetPropertyValue.php
+++ b/modules/form/src/Plugin/Action/FormStateSetPropertyValue.php
@@ -23,7 +23,7 @@ class FormStateSetPropertyValue extends FormStatePropertyActionBase {
   /**
    * The YAML parser.
    *
-   * @var \Drupal\eca\Service\YamlParser
+   * @var YamlParser
    */
   protected YamlParser $yamlParser;
 
@@ -115,7 +115,7 @@ class FormStateSetPropertyValue extends FormStatePropertyActionBase {
   /**
    * Set the YAML parser.
    *
-   * @param \Drupal\eca\Service\YamlParser $yaml_parser
+   * @param YamlParser $yaml_parser
    *   The YAML parser.
    */
   public function setYamlParser(YamlParser $yaml_parser): void {
diff --git a/modules/form/src/Token/CurrentFormDataProvider.php b/modules/form/src/Token/CurrentFormDataProvider.php
index 9968a8b..de5bd43 100644
--- a/modules/form/src/Token/CurrentFormDataProvider.php
+++ b/modules/form/src/Token/CurrentFormDataProvider.php
@@ -18,7 +18,7 @@ class CurrentFormDataProvider implements DataProviderInterface {
   /**
    * The ECA form event subscriber.
    *
-   * @var \Drupal\eca\EventSubscriber\EcaExecutionFormSubscriber
+   * @var EcaExecutionFormSubscriber
    */
   protected EcaExecutionFormSubscriber $subscriber;
 
@@ -32,7 +32,7 @@ class CurrentFormDataProvider implements DataProviderInterface {
   /**
    * Constructs a new FormDataProvider object.
    *
-   * @param \Drupal\eca\EventSubscriber\EcaExecutionFormSubscriber $subscriber
+   * @param EcaExecutionFormSubscriber $subscriber
    *   The ECA form event subscriber.
    */
   public function __construct(EcaExecutionFormSubscriber $subscriber) {
diff --git a/modules/form/tests/src/Kernel/FormActionsTest.php b/modules/form/tests/src/Kernel/FormActionsTest.php
index c17abf3..5cd1a39 100644
--- a/modules/form/tests/src/Kernel/FormActionsTest.php
+++ b/modules/form/tests/src/Kernel/FormActionsTest.php
@@ -2,6 +2,28 @@
 
 namespace Drupal\Tests\eca_form\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
+use Drupal\eca_form\Plugin\Action\FormAddAjax;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\eca_form\Plugin\Action\FormAddContainerElement;
+use Drupal\eca_form\Plugin\Action\FormAddGroupElement;
+use Drupal\eca_form\Plugin\Action\FormAddHiddenfield;
+use Drupal\eca_form\Plugin\Action\FormAddOptionsfield;
+use Drupal\eca_form\Plugin\Action\FormAddSubmitButton;
+use Drupal\eca_form\Plugin\Action\FormAddTextfield;
+use Drupal\eca_form\Plugin\Action\FormBuildEntity;
+use Drupal\eca_form\Plugin\Action\FormFieldAccess;
+use Drupal\eca_form\Plugin\Action\FormFieldDefaultValue;
+use Drupal\eca_form\Plugin\Action\FormFieldDisable;
+use Drupal\eca_form\Plugin\Action\FormFieldGetValue;
+use Drupal\eca_form\Plugin\Action\FormFieldRequire;
+use Drupal\eca_form\Plugin\Action\FormFieldSetError;
+use Drupal\eca_form\Plugin\Action\FormFieldSetOptions;
+use Drupal\eca_form\Plugin\Action\FormFieldSetValue;
+use Drupal\eca_form\Plugin\Action\FormGetErrors;
+use Drupal\eca_form\Plugin\Action\FormStateGetPropertyValue;
+use Drupal\eca_form\Plugin\Action\FormStateSetPropertyValue;
 use Drupal\Core\Action\ActionManager;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Form\FormState;
@@ -47,14 +69,14 @@ class FormActionsTest extends KernelTestBase {
   /**
    * Core action manager.
    *
-   * @var \Drupal\Core\Action\ActionManager|null
+   * @var ActionManager|null
    */
   protected ?ActionManager $actionManager;
 
   /**
    * Token services.
    *
-   * @var \Drupal\eca\Token\TokenInterface|null
+   * @var TokenInterface|null
    */
   protected ?TokenInterface $tokenServices;
 
@@ -71,7 +93,7 @@ class FormActionsTest extends KernelTestBase {
     User::create(['uid' => 1, 'name' => 'admin'])->save();
 
     // Create the Article content type with a standard body field.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create(['type' => 'article', 'name' => 'Article']);
     $node_type->save();
     node_add_body_field($node_type);
@@ -113,7 +135,7 @@ class FormActionsTest extends KernelTestBase {
 
     $request = Request::create('/');
     $request->setSession(new Session());
-    /** @var \Symfony\Component\HttpFoundation\RequestStack $stack */
+    /** @var RequestStack $stack */
     $stack = $this->container->get('request_stack');
     $stack->pop();
     $stack->push($request);
@@ -126,14 +148,14 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_add_ajax".
    */
   public function testFormAddAjax(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormAddAjax $action */
+    /** @var FormAddAjax $action */
     $action = $this->actionManager->createInstance('eca_form_add_ajax', [
       'disable_validation_errors' => TRUE,
       'validate_fields' => '',
       'field_name' => 'submit',
       'target' => '',
     ]);
-    /** @var \Drupal\eca_form\Plugin\Action\FormAddAjax $action_not_existing */
+    /** @var FormAddAjax $action_not_existing */
     $action_not_existing = $this->actionManager->createInstance('eca_form_add_ajax', [
       'disable_validation_errors' => TRUE,
       'validate_fields' => '',
@@ -141,7 +163,7 @@ class FormActionsTest extends KernelTestBase {
       'target' => '',
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -179,14 +201,14 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_add_container_element".
    */
   public function testFormAddContainerElement(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormAddContainerElement $action */
+    /** @var FormAddContainerElement $action */
     $action = $this->actionManager->createInstance('eca_form_add_container_element', [
       'name' => 'my][container',
       'optional' => FALSE,
       'weight' => '12',
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -219,7 +241,7 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_add_group_element".
    */
   public function testFormAddGroupElement(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormAddGroupElement $action */
+    /** @var FormAddGroupElement $action */
     $action = $this->actionManager->createInstance('eca_form_add_group_element', [
       'name' => 'my_group',
       'title' => 'Group title',
@@ -230,7 +252,7 @@ class FormActionsTest extends KernelTestBase {
       'summary_value' => 'A summary value.',
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -268,13 +290,13 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_add_hiddenfield".
    */
   public function testFormAddHiddenfield(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormAddHiddenfield $action */
+    /** @var FormAddHiddenfield $action */
     $action = $this->actionManager->createInstance('eca_form_add_hiddenfield', [
       'name' => 'myhidden_field',
       'value' => 'hidden_value',
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -306,7 +328,7 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_add_optionsfield".
    */
   public function testFormAddOptionsfield(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormAddOptionsfield $action */
+    /** @var FormAddOptionsfield $action */
     $action = $this->actionManager->createInstance('eca_form_add_optionsfield', [
       'name' => 'myoptions',
       'type' => 'select',
@@ -315,7 +337,7 @@ class FormActionsTest extends KernelTestBase {
       'use_yaml' => FALSE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -351,7 +373,7 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_add_optionsfield".
    */
   public function testFormAddSubmitButton(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormAddSubmitButton $action */
+    /** @var FormAddSubmitButton $action */
     $action = $this->actionManager->createInstance('eca_form_add_submit_button', [
       'name' => 'custom_send',
       'value' => 'Send',
@@ -359,7 +381,7 @@ class FormActionsTest extends KernelTestBase {
       'button_type' => 'primary',
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -394,7 +416,7 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_add_textfield".
    */
   public function testFormAddTextfield(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormAddTextfield $action */
+    /** @var FormAddTextfield $action */
     $action = $this->actionManager->createInstance('eca_form_add_textfield', [
       'type' => 'textfield',
       'name' => 'my[custom_textfield]',
@@ -405,7 +427,7 @@ class FormActionsTest extends KernelTestBase {
       'default_value' => 'Default text.',
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -442,12 +464,12 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_build_entity".
    */
   public function testFormBuildEntity(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormBuildEntity $action */
+    /** @var FormBuildEntity $action */
     $action = $this->actionManager->createInstance('eca_form_build_entity', [
       'token_name' => 'mynode',
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -516,25 +538,25 @@ class FormActionsTest extends KernelTestBase {
 
     $this->assertFalse($build_access_result, "First access attempt must fail, because the form is not submitted on first build.");
     $this->assertTrue($build_node instanceof NodeInterface);
-    /** @var \Drupal\node\NodeInterface $build_node */
+    /** @var NodeInterface $build_node */
     $this->assertEquals($title_value, $build_node->label());
     $this->assertEquals($body_value, $build_node->body->value);
     $this->assertEquals($field_string_multi_value, $build_node->field_string_multi->value);
 
     $this->assertTrue($process_node instanceof NodeInterface);
-    /** @var \Drupal\node\NodeInterface $process_node */
+    /** @var NodeInterface $process_node */
     $this->assertEquals($title_value, $process_node->label());
     $this->assertEquals($body_value, $process_node->body->value);
     $this->assertEquals($field_string_multi_value, $process_node->field_string_multi->value);
 
     $this->assertTrue($validate_node instanceof NodeInterface);
-    /** @var \Drupal\node\NodeInterface $validate_node */
+    /** @var NodeInterface $validate_node */
     $this->assertEquals($title_value, $validate_node->label());
     $this->assertEquals($body_value, $validate_node->body->value);
     $this->assertEquals($field_string_multi_value, $process_node->field_string_multi->value);
 
     $this->assertTrue($submit_node instanceof NodeInterface);
-    /** @var \Drupal\node\NodeInterface $submit_node */
+    /** @var NodeInterface $submit_node */
     $this->assertEquals($title_value, $submit_node->label());
     $this->assertEquals($body_value, $submit_node->body->value);
     $this->assertEquals('Original string multi value', $submit_node->field_string_multi->value, "The original value must remain after submission, because field_string_multi is not shown in the default node form, and is being filtered out during validation.");
@@ -544,13 +566,13 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_field_access".
    */
   public function testFormFieldAccess(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormFieldAccess $action */
+    /** @var FormFieldAccess $action */
     $action = $this->actionManager->createInstance('eca_form_field_access', [
       'field_name' => 'title',
       'flag' => FALSE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -582,7 +604,7 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_field_default_value".
    */
   public function testFormFieldDefaultValue(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormFieldDefaultValue $action */
+    /** @var FormFieldDefaultValue $action */
     $action = $this->actionManager->createInstance('eca_form_field_default_value', [
       'value' => 'Default title value',
       'field_name' => 'title',
@@ -591,7 +613,7 @@ class FormActionsTest extends KernelTestBase {
       'xss_filter' => FALSE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -623,13 +645,13 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_field_disable".
    */
   public function testFormFieldDisable(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormFieldDisable $action */
+    /** @var FormFieldDisable $action */
     $action = $this->actionManager->createInstance('eca_form_field_disable', [
       'field_name' => 'title',
       'flag' => TRUE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -661,7 +683,7 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_field_get_value".
    */
   public function testFormFieldGetValue(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormFieldGetValue $action */
+    /** @var FormFieldGetValue $action */
     $action = $this->actionManager->createInstance('eca_form_field_get_value', [
       'field_name' => 'title',
       'token_name' => 'submitted_title',
@@ -670,7 +692,7 @@ class FormActionsTest extends KernelTestBase {
       'xss_filter' => FALSE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -705,13 +727,13 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_field_require".
    */
   public function testFormFieldRequire(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormFieldRequire $action */
+    /** @var FormFieldRequire $action */
     $action = $this->actionManager->createInstance('eca_form_field_require', [
       'field_name' => 'body',
       'flag' => TRUE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -743,13 +765,13 @@ class FormActionsTest extends KernelTestBase {
    * Tests the action plugin "eca_form_field_set_error".
    */
   public function testFormFieldSetError(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormFieldSetError $action */
+    /** @var FormFieldSetError $action */
     $action = $this->actionManager->createInstance('eca_form_field_set_error', [
       'field_name' => 'title',
       'message' => 'Custom title error',
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -787,14 +809,14 @@ custom1: Custom One
 custom2: Custom Two
 key1: Value One
 YAML;
-    /** @var \Drupal\eca_form\Plugin\Action\FormFieldSetOptions $action */
+    /** @var FormFieldSetOptions $action */
     $action = $this->actionManager->createInstance('eca_form_field_set_options', [
       'field_name' => 'field_selection',
       'options' => $options,
       'use_yaml' => TRUE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -830,14 +852,14 @@ YAML;
    * Tests the action plugin "eca_form_field_set_value".
    */
   public function testFormFieldSetValue(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormFieldSetValue $action */
+    /** @var FormFieldSetValue $action */
     $action = $this->actionManager->createInstance('eca_form_field_set_value', [
       'field_name' => 'custom_value',
       'field_value' => 'Automatically set value',
       'use_yaml' => FALSE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -870,12 +892,12 @@ YAML;
    * Tests the action plugin "eca_form_get_errors".
    */
   public function testFormGetErrors(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormGetErrors $action */
+    /** @var FormGetErrors $action */
     $action = $this->actionManager->createInstance('eca_form_get_errors', [
       'token_name' => 'loaded_errors',
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -910,13 +932,13 @@ YAML;
    * Tests the action plugin "eca_form_state_get_property_value".
    */
   public function testFormStateGetPropertyValue(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormStateGetPropertyValue $action */
+    /** @var FormStateGetPropertyValue $action */
     $action = $this->actionManager->createInstance('eca_form_state_get_property_value', [
       'property_name' => 'someprop',
       'token_name' => 'fs_property',
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -947,14 +969,14 @@ YAML;
    * Tests the action plugin "eca_form_state_set_property_value".
    */
   public function testFormStateSetPropertyValue(): void {
-    /** @var \Drupal\eca_form\Plugin\Action\FormStateSetPropertyValue $action */
+    /** @var FormStateSetPropertyValue $action */
     $action = $this->actionManager->createInstance('eca_form_state_set_property_value', [
       'property_name' => 'someprop',
       'property_value' => 'Hello from the outside!',
       'use_yaml' => FALSE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
diff --git a/modules/form/tests/src/Kernel/FormConditionsTest.php b/modules/form/tests/src/Kernel/FormConditionsTest.php
index ea163da..2b8ee5f 100644
--- a/modules/form/tests/src/Kernel/FormConditionsTest.php
+++ b/modules/form/tests/src/Kernel/FormConditionsTest.php
@@ -2,6 +2,15 @@
 
 namespace Drupal\Tests\eca_form\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
+use Drupal\eca_form\Plugin\ECA\Condition\FormFieldExists;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\eca_form\Plugin\ECA\Condition\FormFieldValue;
+use Drupal\eca_form\Plugin\ECA\Condition\FormHasErrors;
+use Drupal\eca_form\Plugin\ECA\Condition\FormOperation;
+use Drupal\eca_form\Plugin\ECA\Condition\FormSubmitted;
+use Drupal\eca_form\Plugin\ECA\Condition\FormTriggered;
 use Drupal\Core\Form\FormState;
 use Drupal\eca\Plugin\ECA\Condition\StringComparisonBase;
 use Drupal\eca\PluginManager\Condition;
@@ -44,7 +53,7 @@ class FormConditionsTest extends KernelTestBase {
   /**
    * ECA condition plugin manager.
    *
-   * @var \Drupal\eca\PluginManager\Condition|null
+   * @var Condition|null
    */
   protected ?Condition $conditionManager;
 
@@ -61,7 +70,7 @@ class FormConditionsTest extends KernelTestBase {
     User::create(['uid' => 1, 'name' => 'admin'])->save();
 
     // Create the Article content type with a standard body field.
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = NodeType::create(['type' => 'article', 'name' => 'Article']);
     $node_type->save();
     node_add_body_field($node_type);
@@ -81,7 +90,7 @@ class FormConditionsTest extends KernelTestBase {
 
     $request = Request::create('/');
     $request->setSession(new Session());
-    /** @var \Symfony\Component\HttpFoundation\RequestStack $stack */
+    /** @var RequestStack $stack */
     $stack = $this->container->get('request_stack');
     $stack->pop();
     $stack->push($request);
@@ -93,18 +102,18 @@ class FormConditionsTest extends KernelTestBase {
    * Tests the condition plugin "eca_form_field_exists".
    */
   public function testFormFieldExists(): void {
-    /** @var \Drupal\eca_form\Plugin\ECA\Condition\FormFieldExists $true_condition */
+    /** @var FormFieldExists $true_condition */
     $true_condition = $this->conditionManager->createInstance('eca_form_field_exists', [
       'field_name' => 'body',
       'negate' => FALSE,
     ]);
-    /** @var \Drupal\eca_form\Plugin\ECA\Condition\FormFieldExists $false_condition */
+    /** @var FormFieldExists $false_condition */
     $false_condition = $this->conditionManager->createInstance('eca_form_field_exists', [
       'field_name' => 'not_existing',
       'negate' => FALSE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -175,7 +184,7 @@ class FormConditionsTest extends KernelTestBase {
       'case' => FALSE,
       'negate' => FALSE,
     ];
-    /** @var \Drupal\eca_form\Plugin\ECA\Condition\FormFieldValue $condition */
+    /** @var FormFieldValue $condition */
     $condition = $this->conditionManager->createInstance('eca_form_field_value', $config);
     $form_state = new FormState();
     $form_state->setValue('test_field', 'Test value');
@@ -191,12 +200,12 @@ class FormConditionsTest extends KernelTestBase {
    * Tests the condition plugin "eca_form_has_errors".
    */
   public function testFormHasErrors(): void {
-    /** @var \Drupal\eca_form\Plugin\ECA\Condition\FormHasErrors $condition */
+    /** @var FormHasErrors $condition */
     $condition = $this->conditionManager->createInstance('eca_form_has_errors', [
       'negate' => FALSE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -256,18 +265,18 @@ class FormConditionsTest extends KernelTestBase {
    * Tests the condition plugin "eca_form_has_errors".
    */
   public function testFormOperation(): void {
-    /** @var \Drupal\eca_form\Plugin\ECA\Condition\FormOperation $true_condition */
+    /** @var FormOperation $true_condition */
     $true_condition = $this->conditionManager->createInstance('eca_form_operation', [
       'operation' => 'default',
       'negate' => FALSE,
     ]);
-    /** @var \Drupal\eca_form\Plugin\ECA\Condition\FormOperation $false_condition */
+    /** @var FormOperation $false_condition */
     $false_condition = $this->conditionManager->createInstance('eca_form_operation', [
       'operation' => 'edit',
       'negate' => FALSE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -296,12 +305,12 @@ class FormConditionsTest extends KernelTestBase {
    * Tests the condition plugin "eca_form_submitted".
    */
   public function testFormSubmitted(): void {
-    /** @var \Drupal\eca_form\Plugin\ECA\Condition\FormSubmitted $condition */
+    /** @var FormSubmitted $condition */
     $condition = $this->conditionManager->createInstance('eca_form_submitted', [
       'negate' => FALSE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
@@ -348,18 +357,18 @@ class FormConditionsTest extends KernelTestBase {
    * Tests the condition plugin "eca_form_triggered".
    */
   public function testFormTriggered(): void {
-    /** @var \Drupal\eca_form\Plugin\ECA\Condition\FormTriggered $true_condition */
+    /** @var FormTriggered $true_condition */
     $true_condition = $this->conditionManager->createInstance('eca_form_triggered', [
       'trigger_name' => 'submit',
       'negate' => FALSE,
     ]);
-    /** @var \Drupal\eca_form\Plugin\ECA\Condition\FormTriggered $false_condition */
+    /** @var FormTriggered $false_condition */
     $false_condition = $this->conditionManager->createInstance('eca_form_triggered', [
       'trigger_name' => 'something',
       'negate' => FALSE,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $form_builder = \Drupal::formBuilder();
 
diff --git a/modules/form/tests/src/Kernel/FormExecutionChainTest.php b/modules/form/tests/src/Kernel/FormExecutionChainTest.php
index 4a96361..573e935 100644
--- a/modules/form/tests/src/Kernel/FormExecutionChainTest.php
+++ b/modules/form/tests/src/Kernel/FormExecutionChainTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\eca_content\Kernel;
 
+use Symfony\Component\HttpFoundation\RequestStack;
+use Drupal\Core\Session\AccountSwitcherInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\eca\Entity\Eca;
 use Drupal\KernelTests\KernelTestBase;
@@ -46,7 +48,7 @@ class FormExecutionChainTest extends KernelTestBase {
 
     $request = Request::create('/');
     $request->setSession(new Session());
-    /** @var \Symfony\Component\HttpFoundation\RequestStack $stack */
+    /** @var RequestStack $stack */
     $stack = $this->container->get('request_stack');
     $stack->pop();
     $stack->push($request);
@@ -56,7 +58,7 @@ class FormExecutionChainTest extends KernelTestBase {
    * Tests an execution chain setting form state property values.
    */
   public function testFormPropertyValues(): void {
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
 
     // This config does the following:
diff --git a/modules/log/src/Logger/EcaLog.php b/modules/log/src/Logger/EcaLog.php
index 947f733..cd26024 100644
--- a/modules/log/src/Logger/EcaLog.php
+++ b/modules/log/src/Logger/EcaLog.php
@@ -20,14 +20,14 @@ class EcaLog implements LoggerInterface {
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
   /**
    * Construct the EcaLog class.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
diff --git a/modules/log/tests/src/Kernel/LogTest.php b/modules/log/tests/src/Kernel/LogTest.php
index 7cc8529..9c67397 100644
--- a/modules/log/tests/src/Kernel/LogTest.php
+++ b/modules/log/tests/src/Kernel/LogTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\eca_log\Kernel;
 
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\eca\Entity\Eca;
 use Drupal\eca_log\Event\LogMessageEvent;
@@ -81,7 +82,7 @@ class LogTest extends KernelTestBase {
     $ecaConfig = Eca::create($eca_config_values);
     $ecaConfig->trustData()->save();
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
 
     $received = NULL;
diff --git a/modules/migrate/tests/src/Kernel/MigrateEventTest.php b/modules/migrate/tests/src/Kernel/MigrateEventTest.php
index 395ad11..34c8cb8 100644
--- a/modules/migrate/tests/src/Kernel/MigrateEventTest.php
+++ b/modules/migrate/tests/src/Kernel/MigrateEventTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\eca_migrate\Kernel;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\eca\PluginManager\Event;
+use Drupal\eca_migrate\Plugin\ECA\Event\MigrateEvent;
+use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\eca\Entity\Eca;
 use Drupal\eca_array\Plugin\Action\ArrayIncrement;
 use Drupal\KernelTests\KernelTestBase;
@@ -45,13 +49,13 @@ class MigrateEventTest extends KernelTestBase {
   /**
    * Tests list item count comparison.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testProperInstantiation(): void {
-    /** @var \Drupal\eca\PluginManager\Event $eventManager */
+    /** @var Event $eventManager */
     $eventManager = \Drupal::service('plugin.manager.eca.event');
 
-    /** @var \Drupal\eca_migrate\Plugin\ECA\Event\MigrateEvent $event */
+    /** @var MigrateEvent $event */
     $event = $eventManager->createInstance('migrate:map_save', []);
     $this->assertEquals('migrate', $event->getBaseId());
   }
@@ -287,7 +291,7 @@ class MigrateEventTest extends KernelTestBase {
     ];
 
     // Run the invalid migration, which should produce one message.
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = \Drupal::service('plugin.manager.migration')->createStubMigration($definition);
     (new MigrateExecutable($migration))->import();
 
@@ -296,7 +300,7 @@ class MigrateEventTest extends KernelTestBase {
 
     // Now run a valid migration.
     $definition['source']['data_rows'][0]['name'] = $this->randomMachineName(8);
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = \Drupal::service('plugin.manager.migration')->createStubMigration($definition);
     $executable = new MigrateExecutable($migration);
     $executable->import();
diff --git a/modules/miscellaneous/src/Event/RequestEventFacade.php b/modules/miscellaneous/src/Event/RequestEventFacade.php
index 028a4e2..55e6d84 100644
--- a/modules/miscellaneous/src/Event/RequestEventFacade.php
+++ b/modules/miscellaneous/src/Event/RequestEventFacade.php
@@ -19,21 +19,21 @@ class RequestEventFacade extends Event implements DataProviderInterface {
   /**
    * The request event.
    *
-   * @var \Symfony\Component\HttpKernel\Event\RequestEvent
+   * @var RequestEvent
    */
   protected RequestEvent $event;
 
   /**
    * An instance holding event data accessible as Token.
    *
-   * @var \Drupal\eca\Plugin\DataType\DataTransferObject|null
+   * @var DataTransferObject|null
    */
   protected ?DataTransferObject $eventData = NULL;
 
   /**
    * Constructs a new RequestEventFacade object.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The event to decorate.
    */
   public function __construct(RequestEvent $event) {
diff --git a/modules/miscellaneous/src/EventSubscriber/EcaMisc.php b/modules/miscellaneous/src/EventSubscriber/EcaMisc.php
index 8d6aa51..6ba6601 100644
--- a/modules/miscellaneous/src/EventSubscriber/EcaMisc.php
+++ b/modules/miscellaneous/src/EventSubscriber/EcaMisc.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_misc\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\eca\EventSubscriber\EcaBase;
 use Drupal\eca_misc\Event\RequestEventFacade;
 use Drupal\eca_misc\Plugin\ECA\Event\DrupalCoreEvent;
@@ -38,7 +39,7 @@ class EcaMisc extends EcaBase {
     switch ($event_name) {
 
       case KernelEvents::REQUEST:
-        /** @var \Symfony\Component\HttpKernel\Event\RequestEvent $event */
+        /** @var RequestEvent $event */
         return new RequestEventFacade($event);
 
     }
diff --git a/modules/miscellaneous/src/Plugin/RouteTrait.php b/modules/miscellaneous/src/Plugin/RouteTrait.php
index c983884..15e177c 100644
--- a/modules/miscellaneous/src/Plugin/RouteTrait.php
+++ b/modules/miscellaneous/src/Plugin/RouteTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_misc\Plugin;
 
+use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\Core\Routing\RouteMatchInterface;
 
 /**
@@ -15,11 +16,11 @@ trait RouteTrait {
   /**
    * Builds and returns the route match depending on the plugin configuration.
    *
-   * @return \Drupal\Core\Routing\RouteMatchInterface
+   * @return RouteMatchInterface
    *   The route match applicable to the current configuration.
    */
   protected function getRouteMatch(): RouteMatchInterface {
-    /** @var \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch */
+    /** @var CurrentRouteMatch $currentRouteMatch */
     $currentRouteMatch = \Drupal::service('current_route_match');
     switch ($this->configuration['request']) {
       case RouteInterface::ROUTE_MAIN:
diff --git a/modules/miscellaneous/tests/src/Kernel/DrupalCoreEventTest.php b/modules/miscellaneous/tests/src/Kernel/DrupalCoreEventTest.php
index 6f53e37..e4cec53 100644
--- a/modules/miscellaneous/tests/src/Kernel/DrupalCoreEventTest.php
+++ b/modules/miscellaneous/tests/src/Kernel/DrupalCoreEventTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\eca_misc\Kernel;
 
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\block_content\BlockContentEvents;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\block_content\Entity\BlockContentType;
@@ -205,7 +206,7 @@ class DrupalCoreEventTest extends KernelTestBase {
     $ecaConfig = Eca::create($eca_config_values);
     $ecaConfig->trustData()->save();
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
 
     BlockContentType::create([
diff --git a/modules/miscellaneous/tests/src/Kernel/KernelEventTest.php b/modules/miscellaneous/tests/src/Kernel/KernelEventTest.php
index a71cd9a..3434322 100644
--- a/modules/miscellaneous/tests/src/Kernel/KernelEventTest.php
+++ b/modules/miscellaneous/tests/src/Kernel/KernelEventTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\eca_misc\Kernel;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\eca_misc\Plugin\ECA\Event\KernelEvent;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Component\EventDispatcher\Event;
 use Drupal\Core\DrupalKernelInterface;
 use Drupal\eca\Entity\Eca;
@@ -54,13 +57,13 @@ class KernelEventTest extends KernelTestBase {
   /**
    * Tests proper instantiation.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testProperInstantiation(): void {
     /** @var \Drupal\eca\PluginManager\Event $eventManager */
     $eventManager = \Drupal::service('plugin.manager.eca.event');
 
-    /** @var \Drupal\eca_misc\Plugin\ECA\Event\KernelEvent $event */
+    /** @var KernelEvent $event */
     $event = $eventManager->createInstance('kernel:view', []);
     $this->assertEquals('kernel', $event->getBaseId());
   }
@@ -243,7 +246,7 @@ class KernelEventTest extends KernelTestBase {
     $ecaConfig = Eca::create($eca_config_values);
     $ecaConfig->trustData()->save();
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
 
     $event_dispatcher->dispatch(new Event(), DrupalKernelInterface::CONTAINER_INITIALIZE_SUBREQUEST_FINISHED);
