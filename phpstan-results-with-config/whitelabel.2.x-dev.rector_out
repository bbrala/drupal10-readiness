modules/contrib/whitelabel/src/Cache/Context/WhiteLabelCacheContext.php
modules/contrib/whitelabel/src/ContextProvider/CurrentWhiteLabelContext.php
modules/contrib/whitelabel/src/Entity/WhiteLabel.php
modules/contrib/whitelabel/src/Entity/WhiteLabelInterface.php
modules/contrib/whitelabel/src/EventSubscriber/WhiteLabelCacheConfigInvalidator.php
modules/contrib/whitelabel/src/Form/WhiteLabelConfigurationForm.php
modules/contrib/whitelabel/src/PathProcessor/WhiteLabelPathProcessor.php
modules/contrib/whitelabel/src/Plugin/Action/ClearWhiteLabel.php
modules/contrib/whitelabel/src/Plugin/Action/SetWhiteLabel.php
modules/contrib/whitelabel/src/Plugin/Condition/WhiteLabel.php
modules/contrib/whitelabel/src/Plugin/EntityReferenceSelection/WhiteLabelSelection.php
modules/contrib/whitelabel/src/Plugin/Field/FieldFormatter/WhiteLabelPreviewFormatter.php
modules/contrib/whitelabel/src/Plugin/Field/FieldWidget/InlineWhiteLabelWidget.php
modules/contrib/whitelabel/src/Plugin/Validation/Constraint/WhiteLabelNotUsernameConstraint.php
modules/contrib/whitelabel/src/Plugin/Validation/Constraint/WhiteLabelNotUsernameConstraintValidator.php
modules/contrib/whitelabel/src/Plugin/views/argument_default/CurrentWhiteLabel.php
modules/contrib/whitelabel/src/Plugin/views/argument_default/CurrentWhiteLabelUid.php
modules/contrib/whitelabel/src/Resolver/WhiteLabelStoreResolver.php
modules/contrib/whitelabel/src/Theme/WhiteLabelNegotiator.php
modules/contrib/whitelabel/src/WhiteLabelAccessControlHandler.php
modules/contrib/whitelabel/src/WhiteLabelBlockAlter.php
modules/contrib/whitelabel/src/WhiteLabelConfigOverride.php
modules/contrib/whitelabel/src/WhiteLabelProvider.php
modules/contrib/whitelabel/src/WhiteLabelProviderInterface.php
modules/contrib/whitelabel/src/WhiteLabelSession.php
modules/contrib/whitelabel/src/WhiteLabelSessionInterface.php
modules/contrib/whitelabel/src/WhiteLabelSystemBrandingBlockAlter.php
modules/contrib/whitelabel/tests/modules/whitelabel_test/src/Controller/WhiteLabelTestController.php
modules/contrib/whitelabel/tests/src/Functional/WhiteLabelCacheTest.php
modules/contrib/whitelabel/tests/src/Functional/WhiteLabelFeatureToggleTest.php
modules/contrib/whitelabel/tests/src/Functional/WhiteLabelPermissionRevokeTest.php
modules/contrib/whitelabel/tests/src/Functional/WhiteLabelTestBase.php
modules/contrib/whitelabel/tests/src/Functional/WhiteLabelThemeNegotiatorTest.php
modules/contrib/whitelabel/tests/src/FunctionalJavascript/WhiteLabelFieldTest.php
modules/contrib/whitelabel/tests/src/FunctionalJavascript/WhiteLabelJavascriptTestBase.php
modules/contrib/whitelabel/tests/src/FunctionalJavascript/WhiteLabelStyleSheetTest.php
modules/contrib/whitelabel/tests/src/Kernel/WhiteLabelAccessTest.php
modules/contrib/whitelabel/tests/src/Kernel/WhiteLabelConditionTest.php
modules/contrib/whitelabel/tests/src/Kernel/WhiteLabelConfigOverrideTest.php
modules/contrib/whitelabel/tests/src/Kernel/WhiteLabelInboundPathProcessingTest.php
modules/contrib/whitelabel/tests/src/Kernel/WhiteLabelOutboundPathProcessingTest.php
modules/contrib/whitelabel/tests/src/Kernel/WhiteLabelValidatorTest.php
modules/contrib/whitelabel/tests/src/Traits/WhiteLabelCreationTrait.php
modules/contrib/whitelabel/whitelabel.install
modules/contrib/whitelabel/whitelabel.module
modules/contrib/whitelabel/whitelabel.views.inc

36 files with changes
=====================

1) modules/contrib/whitelabel/whitelabel.module:18

    ---------- begin diff ----------
@@ @@
  * Implements hook_css_alter().
  */
 function whitelabel_css_alter(&$css, AttachedAssetsInterface $assets) {
-  /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+  /** @var WhiteLabelInterface $whitelabel */
   if ($whitelabel = \Drupal::service('whitelabel.whitelabel_provider')->getWhiteLabel()) {
     // If a white label library is requested, inject the associated stylesheets.
     if (in_array('whitelabel/whitelabel.' . $whitelabel->getToken(), $assets->getLibraries())) {
       $stylesheets = $whitelabel->getStylesheets();
       foreach ($stylesheets as $i => $stylesheet) {
-        $url = file_create_url($stylesheet);
-        $path = file_url_transform_relative($url);
+        $url = \Drupal::service('file_url_generator')->generateAbsoluteString($stylesheet);
+        $path = \Drupal::service('file_url_generator')->transformRelative($url);

         // Insert a new stylesheet and hash with the palette to be able to
         // update the cached version once the file is regenerated.
@@ @@
   // Add the white label cache context.
   $attachments['#cache']['contexts'][] = 'whitelabel';

-  /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+  /** @var WhiteLabelInterface $whitelabel */
   if ($whitelabel = \Drupal::service('whitelabel.whitelabel_provider')->getWhiteLabel()) {
     // Fetch from build array.
     $cacheable_metadata = CacheableMetadata::createFromRenderArray($attachments);
@@ @@
  *
  * @param string $theme
  *   The machine name of the theme whose color settings are being configured.
- * @param \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel
+ * @param WhiteLabelInterface $whitelabel
  *   An white label entity (used to extract current color scheme).
  *
  * @return array
@@ @@
  *   - whitelabel: A white label entity.
  */
 function template_preprocess_whitelabel_preview(array &$variables) {
-  /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+  /** @var WhiteLabelInterface $whitelabel */
   $whitelabel = &$variables['whitelabel'];

   // Get the default theme.
@@ @@
   }

   // Attempt to load preview HTML if the theme provides it.
-  $preview_html_path = \Drupal::root() . '/' . (isset($info['preview_html']) ? drupal_get_path('theme', $theme) . '/' . $info['preview_html'] : drupal_get_path('module', 'color') . '/preview.html');
+  $preview_html_path = \Drupal::root() . '/' . (isset($info['preview_html']) ? \Drupal::service('extension.list.theme')->getPath($theme) . '/' . $info['preview_html'] : \Drupal::service('extension.list.module')->getPath('color') . '/preview.html');
   $variables['html_preview']['#markup'] = file_get_contents($preview_html_path);

   // Add hidden form elements mimicing the color form so the preview library can
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector


2) modules/contrib/whitelabel/tests/src/Traits/WhiteLabelCreationTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\whitelabel\Traits;

+use Drupal\whitelabel\WhiteLabelProviderInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * Holds the white label provider.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;

@@ @@
   /**
    * Sets the provided white label.
    *
-   * @param \Drupal\whitelabel\Entity\WhiteLabelInterface $white_label
+   * @param WhiteLabelInterface $white_label
    *   The white label entity.
    */
   protected function setCurrentWhiteLabel(WhiteLabelInterface $white_label) {
@@ @@
    *     @endcode
    *   - uid: The currently logged in user, or anonymous.
    *
-   * @return \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @return WhiteLabelInterface
    *   The created white label entity.
    */
   protected function createWhiteLabel(array $settings = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/whitelabel/tests/src/Kernel/WhiteLabelValidatorTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('system', ['sequences']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/whitelabel/tests/src/Kernel/WhiteLabelOutboundPathProcessingTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\whitelabel\Kernel;

+use Drupal\whitelabel\Entity\WhiteLabelInterface;
 use Drupal\Core\Url;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
   /**
    * Holds the generated white label throughout the different tests.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   private $whiteLabel;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('system', ['sequences']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/whitelabel/tests/src/Kernel/WhiteLabelInboundPathProcessingTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\whitelabel\Kernel;

+use Drupal\whitelabel\Entity\WhiteLabelInterface;
+use Drupal\Core\PathProcessor\PathProcessorManager;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 use Drupal\Tests\whitelabel\Traits\WhiteLabelCreationTrait;
@@ @@
   /**
    * Holds the generated white label throughout the different tests.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   private $whiteLabel;

@@ @@
   /**
    * The PathProcessorManager.
    *
-   * @var \Drupal\Core\PathProcessor\PathProcessorManager
+   * @var PathProcessorManager
    */
   private $pathProcessorManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('system', ['sequences']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/whitelabel/tests/src/Kernel/WhiteLabelConfigOverrideTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\whitelabel\Kernel;

+use Drupal\whitelabel\Entity\WhiteLabelInterface;
 use Drupal\file\Entity\File;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
@@ @@
   /**
    * Holds the generated white label throughout the different tests.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   private $whiteLabel;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('system', ['sequences']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/whitelabel/tests/src/Kernel/WhiteLabelConditionTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('whitelabel');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/whitelabel/tests/src/Kernel/WhiteLabelAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\whitelabel\Kernel;

+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * Access handler.
    *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $accessHandler;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('system', ['sequences']);
     $this->installEntitySchema('user');
@@ @@
    *   and account, with each key as the name of an operation (e.g. 'view',
    *   'delete') and each value a Boolean indicating whether access to that
    *   operation should be granted.
-   * @param \Drupal\whitelabel\Entity\WhiteLabelInterface $white_label
+   * @param WhiteLabelInterface $white_label
    *   The white label object to check.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account for which to check access.
    */
   public function assertWhiteLabelAccess(array $ops, WhiteLabelInterface $white_label, AccountInterface $account) {
@@ @@
    *
    * @param bool $result
    *   Whether access should be granted or not.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account for which to check access.
    * @param string|null $langcode
    *   (optional) The language code indicating which translation of the node
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/whitelabel/tests/src/FunctionalJavascript/WhiteLabelStyleSheetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\whitelabel\FunctionalJavascript;

+use Drupal\whitelabel\Entity\WhiteLabelInterface;
 /**
  * Tests added style sheets on white labeled pages.
  *
@@ @@
   /**
    * Holds the second generated white label throughout the different tests.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   private $whiteLabel2;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a secondary white label.
@@ @@

     // Get path.
     $file_path = 'public://whitelabel/' . $this->whiteLabel->getToken() . '/colors.css';
-    $url = file_create_url($file_path);
-    $html_path = file_url_transform_relative($url);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file_path);
+    $html_path = \Drupal::service('file_url_generator')->transformRelative($url);

     // Assert stylesheet is not on the page.
     $this->drupalGet('<front>');
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/whitelabel/tests/src/FunctionalJavascript/WhiteLabelJavascriptTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\whitelabel\FunctionalJavascript;

+use Drupal\user\Entity\User;
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
+use Behat\Mink\Exception\ElementTextException;
+use Behat\Mink\Exception\ElementHtmlException;
 use Drupal\file\Entity\File;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\TestFileCreationTrait;
@@ @@
   /**
    * Holds the white label owner.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   public $whiteLabelOwner;

@@ @@
   /**
    * Holds the white label.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   public $whiteLabel;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->whiteLabelOwner = $this->drupalCreateUser(['serve white label pages']);
@@ @@
    * @param string $text
    *   The text to look for.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
+   * @throws ElementTextException
    */
   public function inBrandingBlock($text) {
     $this->assertSession()->elementTextContains('css', '.block-system-branding-block', $text);
@@ @@
    * @param string $text
    *   The text to look for.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
+   * @throws ElementTextException
    */
   public function notInBrandingBlock($text) {
     $this->assertSession()->elementTextNotContains('css', '.block-system-branding-block', $text);
@@ @@
    * @param string $src
    *   The value that should be present in the src attribute.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    */
   public function inImagePath($src) {
     $this->assertSession()->elementAttributeContains('css', '.block-system-branding-block img', 'src', $src);
@@ @@
    * @param string $src
    *   The value that should not be present in the src attribute.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    */
   public function notInImagePath($src) {
     $this->assertSession()->elementAttributeNotContains('css', '.block-system-branding-block img', 'src', $src);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/whitelabel/tests/src/FunctionalJavascript/WhiteLabelFieldTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Make sure everything is disabled by default.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/whitelabel/tests/src/Functional/WhiteLabelThemeNegotiatorTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->container->get('theme_installer')->install(['seven']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/whitelabel/tests/src/Functional/WhiteLabelTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\whitelabel\Functional;

+use Drupal\user\Entity\User;
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
+use Behat\Mink\Exception\ElementTextException;
+use Behat\Mink\Exception\ElementHtmlException;
 use Drupal\file\Entity\File;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\TestFileCreationTrait;
@@ @@
   /**
    * Holds the white label owner.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   public $whiteLabelOwner;

@@ @@
   /**
    * Holds the white label.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   public $whiteLabel;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->whiteLabelOwner = $this->drupalCreateUser(['serve white label pages']);
@@ @@
    * @param string $text
    *   The text to look for.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
+   * @throws ElementTextException
    */
   public function inBrandingBlock($text) {
     $this->assertSession()->elementTextContains('css', '.block-system-branding-block', $text);
@@ @@
    * @param string $text
    *   The text to look for.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
+   * @throws ElementTextException
    */
   public function notInBrandingBlock($text) {
     $this->assertSession()->elementTextNotContains('css', '.block-system-branding-block', $text);
@@ @@
    * @param string $src
    *   The value that should be present in the src attribute.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    */
   public function inImagePath($src) {
     $this->assertSession()->elementAttributeContains('css', '.block-system-branding-block img', 'src', $src);
@@ @@
    * @param string $src
    *   The value that should not be present in the src attribute.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    */
   public function notInImagePath($src) {
     $this->assertSession()->elementAttributeNotContains('css', '.block-system-branding-block img', 'src', $src);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/whitelabel/tests/src/Functional/WhiteLabelPermissionRevokeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\whitelabel\Functional;

+use Drupal\user\RoleInterface;
 use Drupal\user\Entity\Role;

 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->defaultName = $this->config('system.site')->get('name');
@@ @@
     $this->setCurrentWhiteLabel($this->whiteLabel);

     // Assert that the view white label permission was provided during install.
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load(Role::AUTHENTICATED_ID);
     $this->assertTrue($role->hasPermission('view white label pages'), 'The Authenticated role has the "view white label pages" permission.');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/whitelabel/tests/src/Functional/WhiteLabelFeatureToggleTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Make sure everything is disabled by default.
@@ @@
    *
    * @see \Drupal\Tests\whitelabel\Functional\WhiteLabelStyleSheetTest
    * @see \Drupal\Tests\whitelabel\Functional\WhiteLabelThemeNegotiatorTest
+   * @doesNotPerformAssertions
    */
   public function testPage() {
     // Place branding block with site name and slogan into header region.
@@ @@
         $this->notInBrandingBlock($this->whiteLabel->getSlogan());

       $config_key == 'site_logo' ?
-        $this->inImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri()))) :
-        $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+        $this->inImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri())) :
+        $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));
     }

     // Finally test the site name display option.
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/whitelabel/tests/src/Functional/WhiteLabelCacheTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\whitelabel\Functional;

+use Drupal\whitelabel\Entity\WhiteLabelInterface;
 use Drupal\file\Entity\File;

 /**
@@ @@
   /**
    * Holds the second generated white label throughout the different tests.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   private $whiteLabel2;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $image_files = $this->drupalGetTestFiles('image');
@@ @@
     // Should not contain.
     $this->notInBrandingBlock($this->whiteLabel->getName());
     $this->notInBrandingBlock($this->whiteLabel->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));
     $this->notInBrandingBlock($this->whiteLabel2->getName());
     $this->notInBrandingBlock($this->whiteLabel2->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel2->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel2->getLogo()->getFileUri()));

     // White label 1.
     $this->setCurrentWhiteLabel($this->whiteLabel);
@@ @@
     // Should contain.
     $this->inBrandingBlock($this->whiteLabel->getName());
     $this->inBrandingBlock($this->whiteLabel->getSlogan());
-    $this->inImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+    $this->inImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));
     // Should not contain.
     $this->notInBrandingBlock($this->defaultName);
     $this->notInBrandingBlock($this->whiteLabel2->getName());
     $this->notInBrandingBlock($this->whiteLabel2->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel2->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel2->getLogo()->getFileUri()));

     // White label 2.
     $this->setCurrentWhiteLabel($this->whiteLabel2);
@@ @@
     // Should contain.
     $this->inBrandingBlock($this->whiteLabel2->getName());
     $this->inBrandingBlock($this->whiteLabel2->getSlogan());
-    $this->inImagePath(file_url_transform_relative(file_create_url($this->whiteLabel2->getLogo()->getFileUri())));
+    $this->inImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel2->getLogo()->getFileUri()));
     // Should not contain.
     $this->notInBrandingBlock($this->defaultName);
     $this->notInBrandingBlock($this->whiteLabel->getName());
     $this->notInBrandingBlock($this->whiteLabel->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));

     // White label 2 (updated).
     $this->whiteLabel2
@@ @@
     // Should contain.
     $this->inBrandingBlock($this->whiteLabel2->getName());
     $this->inBrandingBlock($this->whiteLabel2->getSlogan());
-    $this->inImagePath(file_url_transform_relative(file_create_url($this->whiteLabel2->getLogo()->getFileUri())));
+    $this->inImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel2->getLogo()->getFileUri()));
     // Should not contain.
     $this->notInBrandingBlock($this->defaultName);
     $this->notInBrandingBlock($this->whiteLabel->getName());
     $this->notInBrandingBlock($this->whiteLabel->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));

     // White label 1 (again).
     $this->setCurrentWhiteLabel($this->whiteLabel);
@@ @@
     // Should contain.
     $this->inBrandingBlock($this->whiteLabel->getName());
     $this->inBrandingBlock($this->whiteLabel->getSlogan());
-    $this->inImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+    $this->inImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));
     // Should not contain.
     $this->notInBrandingBlock($this->defaultName);
     $this->notInBrandingBlock($this->whiteLabel2->getName());
     $this->notInBrandingBlock($this->whiteLabel2->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel2->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel2->getLogo()->getFileUri()));

     // No white label (again).
     $this->resetWhiteLabel();
@@ @@
     // Should not contain.
     $this->notInBrandingBlock($this->whiteLabel->getName());
     $this->notInBrandingBlock($this->whiteLabel->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));
     $this->notInBrandingBlock($this->whiteLabel2->getName());
     $this->notInBrandingBlock($this->whiteLabel2->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel2->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel2->getLogo()->getFileUri()));
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/whitelabel/tests/modules/whitelabel_test/src/Controller/WhiteLabelTestController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Holds the white label provider.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * WhiteLabelPathProcessor constructor.
    *
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(WhiteLabelProviderInterface $white_label_provider, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/whitelabel/src/WhiteLabelSystemBrandingBlockAlter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\whitelabel;

+use Drupal\whitelabel\Entity\WhiteLabelInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Render\Element\RenderCallbackInterface;

 /**
@@ @@
    * Sets the site name visibility based on white label specific configuration.
    */
   public static function preRender(array $build) {
-    /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+    /** @var WhiteLabelInterface $whitelabel */
     if ($whitelabel = \Drupal::service('whitelabel.whitelabel_provider')->getWhiteLabel()) {
-      /** @var \Drupal\Core\Field\FieldItemListInterface $fields */
+      /** @var FieldItemListInterface $fields */
       $fields = $whitelabel->getFields(FALSE);

       if ($fields['name_display']->access()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/whitelabel/src/WhiteLabelSession.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;

@@ @@
   /**
    * Constructs a new WhiteLabelSession object.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
    */
   public function __construct(SessionInterface $session) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/whitelabel/src/WhiteLabelProviderInterface.php:16

    ---------- begin diff ----------
@@ @@
    * @param string $token
    *   The token to fetch the white label for.
    *
-   * @return \Drupal\whitelabel\Entity\WhiteLabelInterface|null
+   * @return WhiteLabelInterface|null
    *   The loaded white label entity or NULL if it could not be presented.
    */
   public function getWhiteLabelByToken($token);
@@ @@
   /**
    * Returns the white label associated with this session.
    *
-   * @return \Drupal\whitelabel\Entity\WhiteLabelInterface|null
+   * @return WhiteLabelInterface|null
    *   The loaded white label entity or NULL if it could not be presented.
    */
   public function getWhiteLabel();
@@ @@
   /**
    * Sets a new white label entity for this session.
    *
-   * @param \Drupal\whitelabel\Entity\WhiteLabelInterface $white_label
+   * @param WhiteLabelInterface $white_label
    *   The white label object to set.
    */
   public function setWhiteLabel(WhiteLabelInterface $white_label);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/whitelabel/src/WhiteLabelProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\whitelabel;

+use Drupal\whitelabel\Entity\WhiteLabel;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\whitelabel\Entity\WhiteLabelInterface;

@@ @@
   /**
    * The order storage.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The session.
    *
-   * @var \Drupal\whitelabel\WhiteLabelSessionInterface
+   * @var WhiteLabelSessionInterface
    */
   protected $whiteLabelSession;

@@ @@
   /**
    * The stored white label entity, for fast serve.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabel
+   * @var WhiteLabel
    */
   protected $whiteLabel = NULL;

@@ @@
   /**
    * Constructs a new WhiteLabelProvider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\whitelabel\WhiteLabelSessionInterface $whitelabel_session
+   * @param WhiteLabelSessionInterface $whitelabel_session
    *   The white label session.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, WhiteLabelSessionInterface $whitelabel_session) {
@@ @@
     }

     if ($whitelabels = $this->entityTypeManager->getStorage('whitelabel')->loadByProperties(['token' => $token])) {
-      /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+      /** @var WhiteLabelInterface $whitelabel */
       $this->whiteLabel = reset($whitelabels);
       return $this->getWhiteLabel();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/whitelabel/src/WhiteLabelConfigOverride.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\whitelabel;

+use Drupal\whitelabel\Entity\WhiteLabelInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryOverrideInterface;
 use Drupal\Core\Config\StorageInterface;
@@ @@
   public function loadOverrides($names) {
     $overrides = [];

-    /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+    /** @var WhiteLabelInterface $whitelabel */
     if (
       (in_array('system.site', $names) || in_array('system.theme.global', $names)) &&
       ($whitelabel = \Drupal::service('whitelabel.whitelabel_provider')->getWhiteLabel())
     ) {

-      /** @var \Drupal\Core\Field\FieldItemListInterface $fields */
+      /** @var FieldItemListInterface $fields */
       $fields = $whitelabel->getFields(FALSE);

       if (in_array('system.site', $names)) {
@@ @@
       // Include a no-white label page variant.
       $metadata->addCacheContexts(['whitelabel']);

-      /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+      /** @var WhiteLabelInterface $whitelabel */
       if ($whitelabel = \Drupal::service('whitelabel.whitelabel_provider')->getWhiteLabel()) {
         // Here we add the cache tags, so we are aware when the entity updates.
         $metadata->addCacheableDependency($whitelabel);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/whitelabel/src/WhiteLabelAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\whitelabel;

+use Drupal\whitelabel\Entity\WhiteLabelInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account = NULL) {
     $account = $this->prepareUser($account);

-    /** @var \Drupal\Core\Access\AccessResult $result */
+    /** @var AccessResult $result */
     $result = parent::checkAccess($entity, $operation, $account);

     if ($result->isNeutral()) {
       // Owner can view and update with the right permissions.
-      /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $entity */
+      /** @var WhiteLabelInterface $entity */
       if (($operation == 'view' || $operation == 'update' || $operation == 'serve') && !empty($account) && $account->id() == $entity->getOwnerId()) {
         return AccessResult::allowedIfHasPermission($account, 'serve white label pages')->cachePerPermissions()->cachePerUser()->addCacheableDependency($entity);
       }
@@ @@
    * {@inheritdoc}
    */
   protected function checkCreateAccess(AccountInterface $account = NULL, array $context = [], $entity_bundle = NULL) {
-    /** @var \Drupal\Core\Access\AccessResult $result */
+    /** @var AccessResult $result */
     // Have the admin permission checked by parent.
     $result = parent::checkCreateAccess($account, $context, $entity_bundle);
     if ($result->isNeutral()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/whitelabel/src/Theme/WhiteLabelNegotiator.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Holds the white label.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * WhiteLabelNegotiator constructor.
    *
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(WhiteLabelProviderInterface $white_label_provider, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/whitelabel/src/Plugin/views/argument_default/CurrentWhiteLabelUid.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Holds the white label provider.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, WhiteLabelProviderInterface $white_label_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/whitelabel/src/Plugin/views/argument_default/CurrentWhiteLabel.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Holds the white label provider.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, WhiteLabelProviderInterface $white_label_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/whitelabel/src/Plugin/Field/FieldWidget/InlineWhiteLabelWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\whitelabel\Plugin\Field\FieldWidget;

+use Drupal\file\FileInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ @@
    * {@inheritdoc}
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel_entity */
+    /** @var WhiteLabelInterface $whitelabel_entity */
     if (!$whitelabel_entity = $items[$delta]->entity) {
       $whitelabel_entity = WhiteLabel::create();
     }
@@ @@
       ];

       $logo_value = $form_state->getValue([$field_name, $delta, 'logo', 0, 'fids', 0]);
-      /** @var \Drupal\file\FileInterface $logo */
+      /** @var FileInterface $logo */
       $logo = !empty($logo_value) ? File::load($logo_value) : $whitelabel_entity->getLogo();
       if ($logo) {
         $logo_path = $logo->createFileUrl();
@@ @@

     foreach ($values as $delta => &$item) {
       if (isset($widget_state['whitelabel'][$item['_original_delta']]['entity'])) {
-        /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel_entity */
+        /** @var WhiteLabelInterface $whitelabel_entity */
         $whitelabel_entity = $widget_state['whitelabel'][$item['_original_delta']]['entity'];

-        /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+        /** @var EntityFormDisplayInterface $form_display */
         $form_display = $widget_state['whitelabel'][$item['_original_delta']]['display'];
         $form_display->extractFormValues($whitelabel_entity, $element[$item['_original_delta']], $form_state);

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response.
    */
   public function ajaxCallback(array $form, FormStateInterface &$form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/whitelabel/src/Plugin/Field/FieldFormatter/WhiteLabelPreviewFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\whitelabel\Plugin\Field\FieldFormatter;

+use Drupal\whitelabel\Entity\WhiteLabelInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];

-    /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $entity */
+    /** @var WhiteLabelInterface $entity */
     foreach ($this->getEntitiesToView($items, $langcode) as $delta => $entity) {

       $preview['container'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/whitelabel/src/Plugin/Action/SetWhiteLabel.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The current white label.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, WhiteLabelProviderInterface $white_label_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/whitelabel/src/Plugin/Action/ClearWhiteLabel.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The current white label.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, WhiteLabelProviderInterface $white_label_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/whitelabel/src/PathProcessor/WhiteLabelPathProcessor.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Holds the white label provider.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * WhiteLabelPathProcessor constructor.
    *
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(WhiteLabelProviderInterface $white_label_provider, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


32) modules/contrib/whitelabel/src/EventSubscriber/WhiteLabelCacheConfigInvalidator.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * Constructs a WhiteLabelCacheConfigInvalidator object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(CacheTagsInvalidatorInterface $cache_tags_invalidator) {
@@ @@
   /**
    * Invalidate cache tags when a white label config object changes.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onChange(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/whitelabel/src/Entity/WhiteLabelInterface.php:87

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a white label logo.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The image file entity.
    */
   public function getLogo();
@@ @@
   /**
    * Sets a white label logo.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The image file entity.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/whitelabel/src/Entity/WhiteLabel.php:406

    ---------- begin diff ----------
@@ @@
         }
         $paths['target'] = $paths['target'] . '/';
         $paths['id'] = $id;
-        $paths['source'] = drupal_get_path('theme', $theme) . '/';
+        $paths['source'] = \Drupal::service('extension.list.theme')->getPath($theme) . '/';
         $paths['files'] = $paths['map'] = [];

         // Rewrite theme stylesheets.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/whitelabel/src/ContextProvider/CurrentWhiteLabelContext.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The current white label.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;

@@ @@
   /**
    * CurrentWhiteLabelContext constructor.
    *
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
    */
   public function __construct(WhiteLabelProviderInterface $white_label_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


36) modules/contrib/whitelabel/src/Cache/Context/WhiteLabelCacheContext.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Holds the white label.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;

@@ @@
   /**
    * WhiteLabelCacheContext constructor.
    *
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
    */
   public function __construct(WhiteLabelProviderInterface $white_label_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process                                                      
         "modules/contrib/whitelabel/src/Resolver/WhiteLabelStoreResolver.php"  
         file, due to:                                                          
         "Analyze error: "Class                                                 
         Drupal\commerce_store\Resolver\StoreResolverInterface not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

