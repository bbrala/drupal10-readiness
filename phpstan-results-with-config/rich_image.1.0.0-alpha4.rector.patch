diff --git a/rich_image.module b/rich_image.module
index 69aebd9..87cd791 100644
--- a/rich_image.module
+++ b/rich_image.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Template\Attribute;
+use Drupal\rich_image\Plugin\Field\FieldType\RichImageItem;
 /**
  * @file
  * This is the Rich Image module.
@@ -29,7 +31,7 @@ function rich_image_field_info_alter(&$info) {
  */
 function rich_image_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
   // If field type is not image, then bypass this hook.
-  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
+  /** @var FieldConfig $field_definition */
   $field_definition = $context['items']->getFieldDefinition();
   if ($field_definition->getType() !== 'image') {
     return;
@@ -51,7 +53,7 @@ function rich_image_field_widget_form_alter(&$element, FormStateInterface $form_
  * Custom callback function for the #process of an image field type.
  */
 function _rich_image_widget_process($element, FormStateInterface &$form_state, $form) {
-  /** @var Drupal\field\Entity\FieldConfig $field_definition */
+  /** @var FieldConfig $field_definition */
   $field_definition = FieldConfig::loadByName($element['#entity_type'], $element['#bundle'], $element['#field_name']);
   $settings = !empty($field_definition) ? $field_definition->getSettings() : [];
 
@@ -279,7 +281,7 @@ function rich_image_preprocess_field(&$variables) {
     if ($variables['multiple']) {
       $variables['attributes']['class'][] = 'has-rich-image';
       foreach ($variables['items'] as $i => $item) {
-        /** @var \Drupal\Core\Template\Attribute $attribute_obj */
+        /** @var Attribute $attribute_obj */
         $attributes = $item['attributes'];
         $attributes->addClass('is-rich-image');
       }
@@ -312,7 +314,7 @@ function template_preprocess_rich_image_formatter(array &$variables) {
 
   $formatter_settings = $variables['rich_image_formatter_settings'];
 
-  /** @var \Drupal\rich_image\Plugin\Field\FieldType\RichImageItem $richImageItem */
+  /** @var RichImageItem $richImageItem */
   $richImageItem = $variables['item'];
   $properties = $richImageItem->getValue();
 
@@ -336,7 +338,7 @@ function template_preprocess_rich_image_formatter(array &$variables) {
 function rich_image_entity_storage_load(array $entities, $entity_type_id) {
   $richImageStorage = \Drupal::service('rich_image.storage');
 
-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
+  /** @var EntityInterface $entity */
   foreach ($entities as $entity) {
     $image_field_names = _rich_image_get_image_field_names($entity);
     // If entity does not contain any image field, then pass.
@@ -460,7 +462,7 @@ function rich_image_help($route_name, RouteMatchInterface $route_match) {
 /**
  * Determines the image fields of an entity.
  *
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   An entity whose fields to analyze.
  *
  * @return array
@@ -488,7 +490,7 @@ function _rich_image_get_image_field_names(FieldableEntityInterface $entity) {
  *
  * @param mixed $element
  *   The current element for which this validator was called.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The state of the form when this validator was called.
  * @param mixed $form
  *   The form without changes when this validator was called.
@@ -524,7 +526,7 @@ function _rich_image_validate_link($element, FormStateInterface $form_state, $fo
  *
  * @param mixed $element
  *   The current element for which this validator was called.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The state of the form when this validator was called.
  * @param mixed $form
  *   The form without changes when this validator was called.
@@ -580,7 +582,7 @@ function _rich_image_validate_link_type($element, FormStateInterface $form_state
  *
  * @param mixed $element
  *   The current element for which this validator was called.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The state of the form when this validator was called.
  * @param mixed $form
  *   The form without changes when this validator was called.
diff --git a/src/Module.php b/src/Module.php
index c0e6414..22edbfa 100644
--- a/src/Module.php
+++ b/src/Module.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\rich_image;
 
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Entity\Element\EntityAutocomplete;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\RevisionableInterface;
@@ -143,7 +144,7 @@ class Module {
   /**
    * Gets common values used across multiple methods in this class.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which common values are to be retrieved.
    * @param string $field_name
    *   The field name for which common values are to be retrieved.
@@ -166,7 +167,7 @@ class Module {
 
     if (!isset($static[$static_key])) {
 
-      /** @var \Drupal\Core\Field\FieldItemListInterface $field */
+      /** @var FieldItemListInterface $field */
       $field = $entity->get($field_name);
 
       $static[$static_key] = [
diff --git a/src/RichImageStorage.php b/src/RichImageStorage.php
index f859225..6c836df 100644
--- a/src/RichImageStorage.php
+++ b/src/RichImageStorage.php
@@ -16,21 +16,21 @@ class RichImageStorage {
   /**
    * The Cache Backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
   /**
    * The Cache Tags Invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -51,11 +51,11 @@ class RichImageStorage {
   /**
    * AbstractService constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The Cache Backend.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The Database.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The Database.
    */
   public function __construct(
@@ -71,7 +71,7 @@ class RichImageStorage {
   /**
    * Check if attributes are already defined for the specified arguments.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which rich attributes are to be retrieved.
    * @param string $field_name
    *   The field name of the image field, like 'field_image' or
@@ -89,7 +89,7 @@ class RichImageStorage {
   /**
    * Get attributes from the database for the specified arguments.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which rich attributes are to be retrieved.
    * @param string $field_name
    *   The field name of the image field, like 'field_image' or
@@ -178,7 +178,7 @@ class RichImageStorage {
   /**
    * Insert rich attributes for all deltas of the entity and field_name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which rich attributes are to be inserted.
    * @param string $field_name
    *   The field name of the image field, like 'field_image' or
@@ -236,7 +236,7 @@ class RichImageStorage {
    * - from revision table
    *     for entity_type+entity_id+langcode+field_name+revision_id.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which rich attributes are to be deleted.
    * @param string $field_name
    *   The field name of the image field, like 'field_image' or
@@ -259,7 +259,7 @@ class RichImageStorage {
   /**
    * Delete all deltas of a revision.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which rich attributes are to be deleted.
    * @param string $field_name
    *   The field name of the image field, like 'field_image' or
@@ -285,7 +285,7 @@ class RichImageStorage {
   /**
    * Delete attributes row from the database for the entity+field_name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which rich attributes are to be deleted.
    * @param string $field_name
    *   The field name of the image field, like 'field_image' or
