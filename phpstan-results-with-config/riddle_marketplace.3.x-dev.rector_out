modules/contrib/riddle_marketplace/modules/media_riddle_marketplace/media_riddle_marketplace.install
modules/contrib/riddle_marketplace/modules/media_riddle_marketplace/media_riddle_marketplace.module
modules/contrib/riddle_marketplace/modules/media_riddle_marketplace/src/Controller/RiddleImportController.php
modules/contrib/riddle_marketplace/modules/media_riddle_marketplace/src/Plugin/Field/FieldFormatter/RiddleEmbedFormatter.php
modules/contrib/riddle_marketplace/modules/media_riddle_marketplace/src/Plugin/media/Source/Riddle.php
modules/contrib/riddle_marketplace/modules/media_riddle_marketplace/src/RiddleMediaService.php
modules/contrib/riddle_marketplace/modules/media_riddle_marketplace/src/RiddleMediaServiceInterface.php
modules/contrib/riddle_marketplace/riddle_marketplace.install
modules/contrib/riddle_marketplace/riddle_marketplace.module
modules/contrib/riddle_marketplace/riddle_marketplace.post_update.php
modules/contrib/riddle_marketplace/src/Controller/RiddleController.php
modules/contrib/riddle_marketplace/src/Exception/NoApiKeyException.php
modules/contrib/riddle_marketplace/src/Form/SettingsForm.php
modules/contrib/riddle_marketplace/src/Plugin/CKEditorPlugin/RiddleButton.php
modules/contrib/riddle_marketplace/src/RiddleFeedService.php
modules/contrib/riddle_marketplace/src/RiddleFeedServiceInterface.php
modules/contrib/riddle_marketplace/tests/src/Unit/RiddleFeedServiceTest.php

8 files with changes
====================

1) modules/contrib/riddle_marketplace/tests/src/Unit/RiddleFeedServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\riddle_marketplace\Unit;

+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\Config\Config;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
   /**
    * Cache Service Mock.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheServiceMock;

@@ @@
   /**
    * Config Factory Mock -> provides base configuration required for Testing.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactoryMock;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->cacheServiceMock = $this->createMock('Drupal\Core\Cache\CacheBackendInterface');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/riddle_marketplace/src/RiddleFeedService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\riddle_marketplace;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ @@
   /**
    * Cache Service to store Riddle Feed.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $cacheService;

@@ @@
   /**
    * Riddle Marketplace Module configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $moduleSettings;

@@ @@
    *
    * Constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheService
+   * @param CacheBackendInterface $cacheService
    *   Cache service created for caching of Riddle Feed.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configService
+   * @param ConfigFactoryInterface $configService
    *   Configuration Factory.
    */
   public function __construct(CacheBackendInterface $cacheService, ConfigFactoryInterface $configService) {
@@ @@
    * @return string
    *   Riddle API Url.
    *
-   * @throws \Drupal\riddle_marketplace\Exception\NoApiKeyException
+   * @throws NoApiKeyException
    */
   private function getApiUrl() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/riddle_marketplace/src/Plugin/CKEditorPlugin/RiddleButton.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\riddle_marketplace\Plugin\CKEditorPlugin;

+use Drupal\riddle_marketplace\RiddleFeedServiceInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\ckeditor\CKEditorPluginInterface;
 use Drupal\ckeditor\CKEditorPluginButtonsInterface;
 use Drupal\editor\Entity\Editor;
@@ @@
   /**
    * Riddle Feed Service.
    *
-   * @var \Drupal\riddle_marketplace\RiddleFeedServiceInterface
+   * @var RiddleFeedServiceInterface
    */
   private $riddleFeedService;

@@ @@
   /**
    * Riddle Marketplace Module configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $moduleSettings;

@@ @@
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'riddle_marketplace') . '/src/Plugin/CKEditorPlugin/editor_plugin.js';
+    return \Drupal::service('extension.list.module')->getPath('riddle_marketplace') . '/src/Plugin/CKEditorPlugin/editor_plugin.js';
   }

   /**
@@ @@
     return [
       'RiddleButton' => [
         'label' => 'Riddles',
-        'image' => drupal_get_path('module', 'riddle_marketplace') . '/images/riddle.jpg',
+        'image' => \Drupal::service('extension.list.module')->getPath('riddle_marketplace') . '/images/riddle.jpg',
         'image_alternative' => 'Riddles',
         'attributes' => [],
       ],
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/riddle_marketplace/modules/media_riddle_marketplace/src/RiddleMediaService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_riddle_marketplace;

+use Drupal\media\MediaTypeInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\riddle_marketplace\RiddleFeedServiceInterface;
@@ @@
   /**
    * The riddle feed service.
    *
-   * @var \Drupal\riddle_marketplace\RiddleFeedServiceInterface
+   * @var RiddleFeedServiceInterface
    */
   protected $feedService;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
    *
    * Constructor.
    *
-   * @param \Drupal\riddle_marketplace\RiddleFeedServiceInterface $feedService
+   * @param RiddleFeedServiceInterface $feedService
    *   Riddle Feed service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database service.
    */
   public function __construct(RiddleFeedServiceInterface $feedService, EntityTypeManagerInterface $entityTypeManager, Connection $database) {
@@ @@
   public function createMediaEntities() {

     foreach ($this->getNewRiddles() as $type => $riddles) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       $type = $this->entityTypeManager->getStorage('media_type')
         ->load($type);
       $sourceField = $type->get('source_configuration')['source_field'];
@@ @@
       return [];
     }

-    /** @var \Drupal\media\MediaTypeInterface[] $riddleBundles */
+    /** @var MediaTypeInterface[] $riddleBundles */
     $riddleBundles = $this->entityTypeManager->getStorage('media_type')
       ->loadByProperties([
         'source' => 'riddle_marketplace',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/riddle_marketplace/modules/media_riddle_marketplace/src/Plugin/media/Source/Riddle.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * The HTTP client to fetch the feed data with.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * Riddle feed service.
    *
-   * @var \Drupal\riddle_marketplace\RiddleFeedServiceInterface
+   * @var RiddleFeedServiceInterface
    */
   protected $riddleFeed;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager service.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type plugin manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\File\FileSystem $file_system
+   * @param FileSystem $file_system
    *   The file system service.
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   The http client service.
-   * @param \Drupal\riddle_marketplace\RiddleFeedServiceInterface $riddleFeed
+   * @param RiddleFeedServiceInterface $riddleFeed
    *   Riddle feed service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, FileSystem $file_system, Client $http_client, RiddleFeedServiceInterface $riddleFeed) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/riddle_marketplace/modules/media_riddle_marketplace/src/Plugin/Field/FieldFormatter/RiddleEmbedFormatter.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Extracts the embed code from a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/riddle_marketplace/modules/media_riddle_marketplace/src/Controller/RiddleImportController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_riddle_marketplace\Controller;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\media\Entity\MediaType;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\media\Entity\Media;
 use Drupal\media_riddle_marketplace\RiddleMediaServiceInterface;
@@ @@
   /**
    * The riddle media service.
    *
-   * @var \Drupal\media_riddle_marketplace\RiddleMediaServiceInterface
+   * @var RiddleMediaServiceInterface
    */
   protected $riddleMediaService;

@@ @@
   /**
    * The current request.
    *
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   protected $request;

@@ @@
   /**
    * RiddleImportController constructor.
    *
-   * @param \Drupal\media_riddle_marketplace\RiddleMediaServiceInterface $riddleMediaService
+   * @param RiddleMediaServiceInterface $riddleMediaService
    *   The riddle media service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(RiddleMediaServiceInterface $riddleMediaService, RequestStack $requestStack) {
@@ @@
   /**
    * The controller route.
    *
-   * @return null|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return null|RedirectResponse
    *   Return a batch.
    */
   public function content() {
@@ @@

     try {
       foreach ($this->riddleMediaService->getNewRiddles() as $type => $riddles) {
-        /** @var \Drupal\media\Entity\MediaType $type */
+        /** @var MediaType $type */
         $type = $this->entityTypeManager()->getStorage('media_type')
           ->load($type);
         $sourceField = $type->get('source_configuration')['source_field'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/riddle_marketplace/modules/media_riddle_marketplace/media_riddle_marketplace.install:10

    ---------- begin diff ----------
@@ @@
  * Implements hook_install().
  */
 function media_riddle_marketplace_install() {
-  /** @var \Drupal\Core\File\FileSystemInterface $filesystem */
+  /** @var FileSystemInterface $filesystem */
   $filesystem = \Drupal::service('file_system');
-  $source = drupal_get_path('module', 'media_riddle_marketplace') . '/images';
+  $source = \Drupal::service('extension.list.module')->getPath('media_riddle_marketplace') . '/images';
   $destination = \Drupal::config('media.settings')->get('icon_base_uri');
   $filesystem->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

