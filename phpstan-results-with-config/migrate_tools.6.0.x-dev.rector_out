modules/contrib/migrate_tools/migrate_tools.module
modules/contrib/migrate_tools/src/Commands/MigrateToolsCommands.php
modules/contrib/migrate_tools/src/Controller/MessageController.php
modules/contrib/migrate_tools/src/Controller/MigrationController.php
modules/contrib/migrate_tools/src/Controller/MigrationGroupListBuilder.php
modules/contrib/migrate_tools/src/Controller/MigrationListBuilder.php
modules/contrib/migrate_tools/src/Drush9LogMigrateMessage.php
modules/contrib/migrate_tools/src/DrushLogMigrateMessage.php
modules/contrib/migrate_tools/src/EventSubscriber/MigrationDrushCommandProgress.php
modules/contrib/migrate_tools/src/EventSubscriber/MigrationImportSync.php
modules/contrib/migrate_tools/src/Form/MigrationAddForm.php
modules/contrib/migrate_tools/src/Form/MigrationDeleteForm.php
modules/contrib/migrate_tools/src/Form/MigrationEditForm.php
modules/contrib/migrate_tools/src/Form/MigrationExecuteForm.php
modules/contrib/migrate_tools/src/Form/MigrationFormBase.php
modules/contrib/migrate_tools/src/Form/MigrationGroupAddForm.php
modules/contrib/migrate_tools/src/Form/MigrationGroupDeleteForm.php
modules/contrib/migrate_tools/src/Form/MigrationGroupEditForm.php
modules/contrib/migrate_tools/src/Form/MigrationGroupFormBase.php
modules/contrib/migrate_tools/src/IdMapFilter.php
modules/contrib/migrate_tools/src/MigrateBatchExecutable.php
modules/contrib/migrate_tools/src/MigrateExecutable.php
modules/contrib/migrate_tools/src/MigrateIncludeHandler.php
modules/contrib/migrate_tools/src/MigrateSharedConfigDefault.php
modules/contrib/migrate_tools/src/MigrateSharedConfigInterface.php
modules/contrib/migrate_tools/src/MigrateSharedConfigPluginManager.php
modules/contrib/migrate_tools/src/MigrateTools.php
modules/contrib/migrate_tools/src/Routing/RouteProcessor.php
modules/contrib/migrate_tools/src/SourceFilter.php
modules/contrib/migrate_tools/tests/modules/migrate_tools_test/src/Commands/MigrateToolsTestCommands.php
modules/contrib/migrate_tools/tests/modules/migrate_tools_test/src/Plugin/migrate/source/ExceptionThrowingTestSource.php
modules/contrib/migrate_tools/tests/src/Functional/DrushBatchImportTest.php
modules/contrib/migrate_tools/tests/src/Functional/DrushCommandsGeneratorTest.php
modules/contrib/migrate_tools/tests/src/Functional/DrushCommandsTest.php
modules/contrib/migrate_tools/tests/src/Functional/MigrateExecutionFormTest.php
modules/contrib/migrate_tools/tests/src/Functional/MigrateListBuilderTest.php
modules/contrib/migrate_tools/tests/src/Functional/SourceUrlFormTest.php
modules/contrib/migrate_tools/tests/src/Kernel/DrushTest.php
modules/contrib/migrate_tools/tests/src/Kernel/MigrateImportTest.php
modules/contrib/migrate_tools/tests/src/Kernel/MigrateRollbackTest.php
modules/contrib/migrate_tools/tests/src/Kernel/MigrateSharedConfigTest.php
modules/contrib/migrate_tools/tests/src/Unit/MigrateToolsTest.php

29 files with changes
=====================

1) modules/contrib/migrate_tools/tests/src/Kernel/MigrateRollbackTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_tools\Kernel;

+use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\migrate_tools\MigrateExecutable;
 use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\taxonomy\VocabularyInterface;
@@ @@
       'destination' => ['plugin' => 'entity:taxonomy_vocabulary'],
     ];

-    /** @var \Drupal\migrate\Plugin\MigrationInterface $vocabulary_migration */
+    /** @var MigrationInterface $vocabulary_migration */
     $vocabulary_migration = \Drupal::service('plugin.manager.migration')->createStubMigration($definition);
     $vocabulary_id_map = $vocabulary_migration->getIdMap();

@@ @@
     $executable = new MigrateExecutable($vocabulary_migration, $this, []);
     $executable->import();
     foreach ($vocabulary_data_rows as $row) {
-      /** @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
+      /** @var Vocabulary $vocabulary */
       $vocabulary = Vocabulary::load($row['id']);
       $this->assertInstanceOf(VocabularyInterface::class, $vocabulary);
       $map_row = $vocabulary_id_map->getRowBySource(['id' => $row['id']]);
@@ @@
     // Test id list rollback.
     $rollback_executable = new MigrateExecutable($vocabulary_migration, $this, ['idlist' => 1]);
     $rollback_executable->rollback();
-    /** @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
+    /** @var Vocabulary $vocabulary */
     $vocabulary = Vocabulary::load(1);
     $this->assertEmpty($vocabulary);
     $map_row = $vocabulary_id_map->getRowBySource(['id' => 1]);
     $this->assertEmpty($map_row);

-    /** @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
+    /** @var Vocabulary $vocabulary */
     $vocabulary = Vocabulary::load(2);
     $this->assertInstanceOf(VocabularyInterface::class, $vocabulary);
     $map_row = $vocabulary_id_map->getRowBySource(['id' => 2]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/migrate_tools/tests/src/Kernel/MigrateImportTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_tools\Kernel;

+use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\migrate_tools\MigrateExecutable;
 use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\taxonomy\VocabularyInterface;
@@ @@
       'destination' => ['plugin' => 'entity:taxonomy_vocabulary'],
     ];

-    /** @var \Drupal\migrate\Plugin\MigrationInterface $vocabulary_migration */
+    /** @var MigrationInterface $vocabulary_migration */
     $vocabulary_migration = \Drupal::service('plugin.manager.migration')->createStubMigration($definition);
     $vocabulary_id_map = $vocabulary_migration->getIdMap();

@@ @@
     $executable = new MigrateExecutable($vocabulary_migration, $this, ['idlist' => 2]);
     $executable->import();

-    /** @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
+    /** @var Vocabulary $vocabulary */
     $vocabulary = Vocabulary::load(1);
     $this->assertEmpty($vocabulary);
     $map_row = $vocabulary_id_map->getRowBySource(['id' => 1]);
     $this->assertEmpty($map_row);
-    /** @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
+    /** @var Vocabulary $vocabulary */
     $vocabulary = Vocabulary::load(2);
     $this->assertInstanceOf(VocabularyInterface::class, $vocabulary);
     $map_row = $vocabulary_id_map->getRowBySource(['id' => 2]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/migrate_tools/tests/src/Kernel/DrushTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_tools\Kernel {

+  use Prophecy\PhpUnit\ProphecyTrait;
+  use Drupal\Component\Plugin\Exception\PluginException;
+  use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
   use Drupal\migrate\Plugin\MigrationInterface;
   use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
   use Drupal\migrate_tools\Commands\MigrateToolsCommands;
@@ @@
    */
   final class DrushTest extends MigrateTestBase {

+    use ProphecyTrait;
     /**
      * {@inheritdoc}
      */
@@ @@
     /**
      * Tests drush mim.
      *
-     * @throws \Drupal\Component\Plugin\Exception\PluginException
+     * @throws PluginException
      */
     public function testImport(): void {
-      /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+      /** @var MigrationInterface $migration */
       $migration = $this->migrationPluginManager->createInstance('fruit_terms');
       $id_map = $migration->getIdMap();
       $this->commands->import('fruit_terms', array_merge($this->importBaseOptions, ['idlist' => 'Apple']));
@@ @@
     /**
      * Tests drush mmsg.
      *
-     * @throws \Drupal\Component\Plugin\Exception\PluginException
+     * @throws PluginException
      */
     public function testMessages(): void {
       $this->executeMigration('fruit_terms');
       $message = $this->getRandomGenerator()->string(16);
-      /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+      /** @var MigrationInterface $migration */
       $migration = $this->migrationPluginManager->createInstance('fruit_terms');
       $id_map = $migration->getIdMap();
       $id_map->saveMessage(['name' => 'Apple'], $message);
-      /** @var \Consolidation\OutputFormatters\StructuredData\RowsOfFields $result */
+      /** @var RowsOfFields $result */
       $result = $this->commands->messages('fruit_terms', [
         'csv' => FALSE,
         'idlist' => NULL,
@@ @@
      */
     public function testRollback(): void {
       $this->executeMigration('fruit_terms');
-      /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+      /** @var MigrationInterface $migration */
       $migration = $this->migrationPluginManager->createInstance('fruit_terms');
       $id_map = $migration->getIdMap();
       $this->assertSame(3, $id_map->importedCount());
@@ @@
     public function testFailingRollbackThrowsException(): void {
       $this->expectException(\Exception::class);
       $this->expectExceptionMessage('source_exception migration failed');
-      /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+      /** @var MigrationInterface $migration */
       $migration = $this->migrationPluginManager->createInstance('source_exception');
       $migration->setStatus(MigrationInterface::STATUS_IMPORTING);
       $this->commands->rollback('source_exception', $this->importBaseOptions);
@@ @@
     /**
      * Tests drush mrs.
      *
-     * @throws \Drupal\Component\Plugin\Exception\PluginException
+     * @throws PluginException
      */
     public function testReset(): void {
-      /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+      /** @var MigrationInterface $migration */
       $migration = $this->migrationPluginManager->createInstance('fruit_terms');
       $migration->setStatus(MigrationInterface::STATUS_IMPORTING);
       $status = $this->commands->status('fruit_terms', [
@@ @@
     /**
      * Tests drush mst.
      *
-     * @throws \Drupal\Component\Plugin\Exception\PluginException
+     * @throws PluginException
      */
     public function testStop(): void {
-      /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+      /** @var MigrationInterface $migration */
       $migration = $this->migrationPluginManager->createInstance('fruit_terms');
       $migration->setStatus(MigrationInterface::STATUS_IMPORTING);
       $this->commands->stop('fruit_terms');
@@ @@
      * Tests drush mfs.
      */
     public function testFieldsSource(): void {
-      /** @var \Consolidation\OutputFormatters\StructuredData\RowsOfFields $result */
+      /** @var RowsOfFields $result */
       $result = $this->commands->fieldsSource('fruit_terms');
       $rows = $result->getArrayCopy();
       $this->assertCount(1, $rows);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/migrate_tools/tests/src/Functional/SourceUrlFormTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_tools\Functional;

+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * Tests the form ensure graceful 404 handling.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testSourceUrl404Form(): void {
     // Assert the test migration is listed.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/migrate_tools/tests/src/Functional/MigrateExecutionFormTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_tools\Functional;

+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\taxonomy\Entity\Vocabulary;
@@ @@
   /**
    * Tests execution of import and rollback of a migration.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testExecution(): void {
     $group = 'default';
@@ @@
    *   An array of settings to change from the defaults.
    *   Example: 'vid' => 'foo'.
    *
-   * @return \Drupal\taxonomy\VocabularyInterface
+   * @return VocabularyInterface
    *   Created vocabulary.
    */
   protected function createVocabulary(array $values = []): VocabularyInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/migrate_tools/tests/src/Functional/DrushCommandsTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_tools\Functional;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\migrate\Plugin\MigrateIdMapInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drush\TestTraits\DrushTestTrait;

@@ @@
   /**
    * Tests migrate:import with feedback.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testFeedback(): void {
     $this->drush('mim', ['fruit_terms'], ['feedback' => 2]);
@@ @@
     $this->drush('mim', ['fruit_terms']);
     $this->drush('mmsg', ['fruit_terms']);
     $this->assertErrorOutputEquals('[notice] No messages for this migration');
-    /** @var \Drupal\migrate\Plugin\MigrateIdMapInterface $id_map */
+    /** @var MigrateIdMapInterface $id_map */
     $id_map = $this->container->get('plugin.manager.migration')->createInstance('fruit_terms')->getIdMap();
     $id_map->saveMessage(['name' => 'Apple'], 'You picked a bad one.');
     $this->drush('mmsg', ['fruit_terms'], ['format' => 'json']);
@@ @@
     $this->assertEquals(3, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->getQuery()->accessCheck(TRUE)->count()->execute());
     $this->assertEmpty(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->load(2));

-    /** @var \Drupal\migrate\Plugin\MigrateIdMapInterface $id_map */
+    /** @var MigrateIdMapInterface $id_map */
     $id_map = $this->container->get('plugin.manager.migration')->createInstance('fruit_terms')->getIdMap();
     $this->assertCount(3, $id_map);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/migrate_tools/tests/src/Functional/DrushCommandsGeneratorTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_tools\Functional;

+use Drupal\migrate\Plugin\MigrateIdMapInterface;
 use Drupal\Core\StreamWrapper\PublicStream;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\Tests\BrowserTestBase;
@@ @@
     drupal_flush_all_caches();
     $this->assertEmpty(\Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->load('genre'));

-    /** @var \Drupal\migrate\Plugin\MigrateIdMapInterface $id_map */
+    /** @var MigrateIdMapInterface $id_map */
     $id_map = $this->container->get('plugin.manager.migration')->createInstance('csv_source_test')->getIdMap();
     $this->assertCount(4, $id_map);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/migrate_tools/tests/modules/migrate_tools_test/src/Commands/MigrateToolsTestCommands.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * MigrateToolsTestCommands constructor.
    *
-   * @param \Drupal\migrate\Plugin\MigrationPluginManager $migrationPluginManager
+   * @param MigrationPluginManager $migrationPluginManager
    *   The Migration Plugin Manager.
    */
   public function __construct(MigrationPluginManager $migrationPluginManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/migrate_tools/src/SourceFilter.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * SourceFilter constructor.
    *
-   * @param \Drupal\migrate\Plugin\MigrateSourceInterface $source
+   * @param MigrateSourceInterface $source
    *   The ID map.
    * @param array $id_list
    *   The id list to use in the filter.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/migrate_tools/src/MigrateExecutable.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_tools;

+use Drupal\migrate\MigrateSkipRowException;
 use Drupal\migrate\Event\MigrateEvents;
 use Drupal\migrate\Event\MigrateImportEvent;
 use Drupal\migrate\Event\MigrateMapDeleteEvent;
@@ @@
   /**
    * Count up any map save events.
    *
-   * @param \Drupal\migrate\Event\MigrateMapSaveEvent $event
+   * @param MigrateMapSaveEvent $event
    *   The map event.
    */
   public function onMapSave(MigrateMapSaveEvent $event) {
@@ @@
   /**
    * Count up any rollback events.
    *
-   * @param \Drupal\migrate\Event\MigrateMapDeleteEvent $event
+   * @param MigrateMapDeleteEvent $event
    *   The map event.
    */
   public function onMapDelete(MigrateMapDeleteEvent $event) {
@@ @@
   /**
    * React to migration completion.
    *
-   * @param \Drupal\migrate\Event\MigrateImportEvent $event
+   * @param MigrateImportEvent $event
    *   The map event.
    */
   public function onPostImport(MigrateImportEvent $event) {
@@ @@
   /**
    * React to rollback completion.
    *
-   * @param \Drupal\migrate\Event\MigrateRollbackEvent $event
+   * @param MigrateRollbackEvent $event
    *   The map event.
    */
   public function onPostRollback(MigrateRollbackEvent $event) {
@@ @@
   /**
    * React to an item about to be imported.
    *
-   * @param \Drupal\migrate\Event\MigratePreRowSaveEvent $event
+   * @param MigratePreRowSaveEvent $event
    *   The pre-save event.
    */
   public function onPreRowSave(MigratePreRowSaveEvent $event) {
@@ @@
   /**
    * React to item rollback.
    *
-   * @param \Drupal\migrate\Event\MigrateRowDeleteEvent $event
+   * @param MigrateRowDeleteEvent $event
    *   The post-save event.
    */
   public function onPostRowDelete(MigrateRowDeleteEvent $event) {
@@ @@
    * @param \Drupal\migrate_plus\Event\MigratePrepareRowEvent $event
    *   The prepare-row event.
    *
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateSkipRowException
    */
   public function onPrepareRow(MigratePrepareRowEvent $event) {
     if ($this->feedback && $this->counter && $this->counter % $this->feedback == 0) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/migrate_tools/src/MigrateBatchExecutable.php:114

    ---------- begin diff ----------
@@ @@
   /**
    * Helper to generate the batch operations for importing migrations.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface[] $migrations
+   * @param MigrationInterface[] $migrations
    *   The migrations.
    * @param string $operation
    *   The batch operation to perform.
@@ @@

     // Prepare the migration executable.
     $message = new MigrateMessage();
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = \Drupal::getContainer()->get('plugin.manager.migration')->createInstance($migration_id, $options['configuration'] ?? []);
     unset($options['configuration']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/migrate_tools/src/IdMapFilter.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * IdMapFilter constructor.
    *
-   * @param \Drupal\migrate\Plugin\MigrateIdMapInterface $id_map
+   * @param MigrateIdMapInterface $id_map
    *   The ID map.
    * @param array $id_list
    *   The id list to use in the filter.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/migrate_tools/src/Form/MigrationGroupFormBase.php:22

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
@@ @@
    *   The entity ID.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/migrate_tools/src/Form/MigrationGroupEditForm.php:21

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/migrate_tools/src/Form/MigrationGroupDeleteForm.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the cancel URL.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to go to if the user cancels the deletion.
    */
   public function getCancelUrl(): Url {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/migrate_tools/src/Form/MigrationGroupAddForm.php:23

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/migrate_tools/src/Form/MigrationFormBase.php:24

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
@@ @@
    *   The entity ID.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/migrate_tools/src/Form/MigrationExecuteForm.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new MigrationExecuteForm object.
    *
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   The plugin manager for config entity-based migrations.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(MigrationPluginManagerInterface $migration_plugin_manager, RouteMatchInterface $route_match) {
@@ @@
    *
    * @param array $form
    *   The execution form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The execution form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
     $migration = $this->getRouteMatch()->getParameter('migration');
     if ($migration) {
       $migration_id = $migration->id();
-      /** @var \Drupal\migrate\Plugin\MigrationInterface $migration_plugin */
+      /** @var MigrationInterface $migration_plugin */
       $migration_plugin = $this->migrationPluginManager->createInstance($migration_id, $migration->toArray());
       $migrateMessage = new MigrateMessage();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/migrate_tools/src/Form/MigrationEditForm.php:22

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
@@ @@
   /**
    * Add group route parameter.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL associated with an operation.
    * @param string $migration_group
    *   The migration's parent group.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/migrate_tools/src/Form/MigrationDeleteForm.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the cancel URL.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to go to if the user cancels the deletion.
    */
   public function getCancelUrl(): Url {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/migrate_tools/src/Form/MigrationAddForm.php:23

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/migrate_tools/src/EventSubscriber/MigrationImportSync.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * MigrationImportSync constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $dispatcher) {
@@ @@
   /**
    * Event callback to sync source and destination.
    *
-   * @param \Drupal\migrate\Event\MigrateImportEvent $event
+   * @param MigrateImportEvent $event
    *   The migration import event.
    */
   public function sync(MigrateImportEvent $event): void {
@@ @@
    *
    * @param string $event_name
    *   The event name to dispatch.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The active migration.
    * @param array $destination_ids
    *   The destination identifier values of the record.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/migrate_tools/src/EventSubscriber/MigrationDrushCommandProgress.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * MigrationDrushCommandProgress constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger service.
    */
   public function __construct(LoggerInterface $logger) {
@@ @@
    *
    * This must be called before the progress bar can be used.
    *
-   * @param \Symfony\Component\Console\Output\OutputInterface $output
+   * @param OutputInterface $output
    *   The output.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration.
    * @param array $options
    *   Additional options of the command.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/migrate_tools/src/Controller/MigrationListBuilder.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_tools\Controller;

+use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityHandlerInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The current route match service.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   The plugin manager for config entity-based migrations.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, CurrentRouteMatch $current_route_match, MigrationPluginManagerInterface $migration_plugin_manager, LoggerInterface $logger) {
@@ @@
   /**
    * Builds a row for a migration plugin.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The migration plugin for which to build the row.
    *
    * @return array
@@ @@
       $migrate_last_imported_store = \Drupal::keyValue('migrate_last_imported');
       $last_imported = $migrate_last_imported_store->get($migration->id(), FALSE);
       if ($last_imported) {
-        /** @var \Drupal\Core\Datetime\DateFormatter $date_formatter */
+        /** @var DateFormatter $date_formatter */
         $date_formatter = \Drupal::service('date.formatter');
         $row['last_imported'] = $date_formatter->format((int) ($last_imported / 1000),
           'custom', 'Y-m-d H:i:s');
@@ @@
   /**
    * Add group route parameter.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL associated with an operation.
    * @param string $migration_group
    *   The migration's parent group.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/migrate_tools/src/Controller/MigrationGroupListBuilder.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a row for an entity in the entity listing.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to build the row.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/migrate_tools/src/Controller/MigrationController.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new MigrationController object.
    *
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   The plugin manager for config entity-based migrations.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   The current route match.
    */
   public function __construct(MigrationPluginManagerInterface $migration_plugin_manager, CurrentRouteMatch $currentRouteMatch) {
@@ @@
    * @param \Drupal\migrate_plus\Entity\MigrationInterface $migration
    *   The $migration.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   A redirect response if the batch is progressive. Else no return value.
    */
   public function run(MigrationGroupInterface $migration_group, MigrationInterface $migration): ?RedirectResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/migrate_tools/src/Controller/MessageController.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a MessageController object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   The migration plugin manager.
    */
   public function __construct(Connection $database, MigrationPluginManagerInterface $migration_plugin_manager) {
@@ @@
    * @param \Drupal\migrate_plus\Entity\MigrationInterface $migration
    *   The $migration.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated title.
    */
   public function title(MigrationGroupInterface $migration_group, MigratePlusMigrationInterface $migration): TranslatableMarkup {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/migrate_tools/src/Commands/MigrateToolsCommands.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_tools\Commands;

+use Drupal\migrate\Plugin\MigrateIdMapInterface;
+use Drupal\migrate\Plugin\Migration;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Component\Graph\Graph;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ @@
   /**
    * MigrateToolsCommands constructor.
    *
-   * @param \Drupal\migrate\Plugin\MigrationPluginManager $migrationPluginManager
+   * @param MigrationPluginManager $migrationPluginManager
    *   Migration Plugin Manager service.
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   Date formatter service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $keyValue
+   * @param KeyValueFactoryInterface $keyValue
    *   Key-value store service.
    */
   public function __construct(MigrationPluginManager $migrationPluginManager, DateFormatter $dateFormatter, EntityTypeManagerInterface $entityTypeManager, KeyValueFactoryInterface $keyValue) {
@@ @@
    * @aliases mst, migrate-stop
    */
   public function stop($migration_id): void {
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->migrationPluginManager->createInstance(
       $migration_id
     );
@@ @@
    * @aliases mrs, migrate-reset-status
    */
   public function resetStatus($migration_id = ''): void {
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->migrationPluginManager->createInstance(
       $migration_id
     );
@@ @@
     'idlist' => self::REQ,
     'idlist-delimiter' => MigrateTools::DEFAULT_ID_LIST_DELIMITER,
   ]): ?RowsOfFields {
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->migrationPluginManager->createInstance(
       $migration_id
     );
@@ @@
       throw new \Exception($error);
     }
     $id_list = MigrateTools::buildIdList($options);
-    /** @var \Drupal\migrate\Plugin\MigrateIdMapInterface|\Drupal\migrate_tools\IdMapFilter $map */
+    /** @var MigrateIdMapInterface|IdMapFilter $map */
     $map = new IdMapFilter($migration->getIdMap(), $id_list);
     $source_id_keys = $this->getSourceIdKeys($map);
     if ($source_id_keys === NULL) {
@@ @@
   /**
    * Get the source ID keys.
    *
-   * @param \Drupal\migrate_tools\IdMapFilter $map
+   * @param IdMapFilter $map
    *   The migration ID map.
    *
    *   The source ID keys.
@@ @@
    *   description: Description
    * @default-fields machine_name,description
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   Source fields of the given migration formatted as a table.
    */
   public function fieldsSource($migration_id): RowsOfFields {
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->migrationPluginManager->createInstance(
       $migration_id
     );
@@ @@
    *
    * @default $options []
    *
-   * @return \Drupal\migrate\Plugin\MigrationInterface[][]
+   * @return MigrationInterface[][]
    *   An array keyed by migration group, each value containing an array of
    *   migrations or an empty array if no migrations match the input criteria.
    */
@@ @@
     }

     // Do not return any migrations which fail to meet requirements.
-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     foreach ($matched_migrations as $id => $migration) {
       try {
         if ($migration->getSourcePlugin() instanceof RequirementsInterface) {
@@ @@
    * If the --execute-dependencies option was given,
    * the migration's dependencies will also be executed first.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration to execute.
    * @param string $migration_id
    *   The migration ID (not used, just an artifact of array_walk()).
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/migrate_tools/migrate_tools.module:0

    ---------- begin diff ----------
@@ @@
 <?php

 declare(strict_types = 1);
+use Drupal\Core\Config\Entity\ConfigEntityType;

 /**
  * @file
@@ @@
 function migrate_tools_entity_type_build(array &$entity_types): void {
   // Inject our UI into the general migration and migration group config
   // entities.
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityType[] $entity_types */
+  /** @var ConfigEntityType[] $entity_types */
   if (array_key_exists('migration', $entity_types)) {
     $entity_types['migration']
       ->set('admin_permission', 'administer migrations')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 29 files have been changed by Rector                                      

