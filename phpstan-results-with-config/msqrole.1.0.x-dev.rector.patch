diff --git a/msqrole.module b/msqrole.module
index 70b2a15..a90ed21 100644
--- a/msqrole.module
+++ b/msqrole.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\msqrole\RoleManagerInterface;
+use Drupal\user\Entity\Role;
 use Drupal\Core\Render\Renderer;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Url;
@@ -48,7 +50,7 @@ function msqrole_user_logout($account) {
  */
 function msqrole_page_attachments(array &$page) {
   /**
-   * @var \Drupal\msqrole\RoleManagerInterface $roleManager
+   * @var RoleManagerInterface $roleManager
    */
   if (!$role_manager = Drupal::service('msqrole.manager')) {
     return;
@@ -64,7 +66,7 @@ function msqrole_page_attachments(array &$page) {
     if ($role === 'authenticated') {
       continue;
     }
-    $current = \Drupal\user\Entity\Role::load($role);
+    $current = Role::load($role);
     $roles[$role] = $current->label();
   }
 
diff --git a/src/Controller/MasqueradeRoleReset.php b/src/Controller/MasqueradeRoleReset.php
index d49376e..dc77dac 100644
--- a/src/Controller/MasqueradeRoleReset.php
+++ b/src/Controller/MasqueradeRoleReset.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\msqrole\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
@@ -22,23 +24,23 @@ class MasqueradeRoleReset extends ControllerBase {
   /**
    * The role manager.
    *
-   * @var \Drupal\msqrole\RoleManagerInterface
+   * @var RoleManagerInterface
    */
   protected $roleManager;
 
   /**
    * The redirect destination object.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $destination;
 
   /**
    * MasqueradeRoleReset constructor.
    *
-   * @param \Drupal\msqrole\RoleManagerInterface $role_manager
+   * @param RoleManagerInterface $role_manager
    *   The role manager.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $destination
+   * @param RedirectDestinationInterface $destination
    *   The redirect destination object.
    */
   public function __construct(RoleManagerInterface $role_manager, RedirectDestinationInterface $destination) {
@@ -60,7 +62,7 @@ class MasqueradeRoleReset extends ControllerBase {
    * Resets msqrole data and redirects back to front.
    *
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response object.
    */
   public function reset() {
@@ -85,10 +87,10 @@ class MasqueradeRoleReset extends ControllerBase {
   /**
    * Checks whether msqrole is active or not.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account) {
diff --git a/src/DynamicRolePermissions.php b/src/DynamicRolePermissions.php
index d17337a..ec4bfb1 100644
--- a/src/DynamicRolePermissions.php
+++ b/src/DynamicRolePermissions.php
@@ -19,14 +19,14 @@ class DynamicRolePermissions {
    */
   public static function callback() {
     /**
-     * @var \Drupal\msqrole\RoleManagerInterface $role_manager
+     * @var RoleManagerInterface $role_manager
      */
     $role_manager = \Drupal::service('msqrole.manager');
     $roles = $role_manager->getConfigurableRoles();
     $permissions = [];
 
     /**
-     * @var \Drupal\user\RoleInterface $role
+     * @var RoleInterface $role
      */
     foreach ($roles as $role) {
       $permissions['masquerade as ' . $role->id()] = [
diff --git a/src/Form/MasqueradeRoleForm.php b/src/Form/MasqueradeRoleForm.php
index 4fd430d..9bd7b57 100644
--- a/src/Form/MasqueradeRoleForm.php
+++ b/src/Form/MasqueradeRoleForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\msqrole\Form;
 
+use Drupal\user\RoleInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -20,14 +21,14 @@ class MasqueradeRoleForm extends FormBase implements ContainerInjectionInterface
   /**
    * The role manager.
    *
-   * @var \Drupal\msqrole\RoleManagerInterface
+   * @var RoleManagerInterface
    */
   protected $roleManager;
 
   /**
    * MasqueradeRoleForm constructor.
    *
-   * @param \Drupal\msqrole\RoleManagerInterface $role_manager
+   * @param RoleManagerInterface $role_manager
    *   The role manager.
    */
   public function __construct(RoleManagerInterface $role_manager) {
@@ -58,7 +59,7 @@ class MasqueradeRoleForm extends FormBase implements ContainerInjectionInterface
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -72,7 +73,7 @@ class MasqueradeRoleForm extends FormBase implements ContainerInjectionInterface
     /**
      * @var string $id
      *   The role ID.
-     * @var \Drupal\user\RoleInterface $role
+     * @var RoleInterface $role
      *   The role object.
      */
     foreach ($roles as $id => &$role) {
@@ -123,7 +124,7 @@ The authenticated role is always automatically selected.',
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
@@ -144,7 +145,7 @@ The authenticated role is always automatically selected.',
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/MasqueradeAccountProxy.php b/src/MasqueradeAccountProxy.php
index 90641a6..f07e59a 100644
--- a/src/MasqueradeAccountProxy.php
+++ b/src/MasqueradeAccountProxy.php
@@ -19,16 +19,16 @@ class MasqueradeAccountProxy extends AccountProxy implements AccountProxyInterfa
   /**
    * The role manager.
    *
-   * @var \Drupal\msqrole\RoleManagerInterface
+   * @var RoleManagerInterface
    */
   protected $roleManager;
 
   /**
    * AccountProxy constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface|null $event_dispatcher
+   * @param EventDispatcherInterface|null $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\msqrole\RoleManagerInterface $role_manager
+   * @param RoleManagerInterface $role_manager
    *   The role manager.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher, RoleManagerInterface $role_manager) {
@@ -39,11 +39,11 @@ class MasqueradeAccountProxy extends AccountProxy implements AccountProxyInterfa
   /**
    * Returns the role storage object.
    *
-   * @return \Drupal\user\RoleStorageInterface
+   * @return RoleStorageInterface
    *   The role storage object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getRoleStorage(): RoleStorageInterface {
     return $this->entityTypeManager->getStorage('user_role');
diff --git a/src/RoleManager.php b/src/RoleManager.php
index eba6e56..c946290 100644
--- a/src/RoleManager.php
+++ b/src/RoleManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\msqrole;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\user\RoleInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -17,32 +19,32 @@ class RoleManager implements RoleManagerInterface {
   /**
    * The user data instance.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * RoleManager constructor.
    *
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(UserDataInterface $user_data, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
@@ -60,7 +62,7 @@ class RoleManager implements RoleManagerInterface {
       return FALSE;
     }
 
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     foreach ($roles as $role) {
       if ($role->hasPermission($permission)) {
         return TRUE;
diff --git a/src/RoleManagerInterface.php b/src/RoleManagerInterface.php
index 9194094..2d01840 100644
--- a/src/RoleManagerInterface.php
+++ b/src/RoleManagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\msqrole;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * Interface RoleManagerInterface.
  *
@@ -140,8 +142,8 @@ interface RoleManagerInterface {
    * @param string|int $uid
    *   The user ID to reset cache tags for.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function invalidateTags($uid);
 
