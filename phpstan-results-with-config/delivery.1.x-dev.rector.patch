diff --git a/delivery.install b/delivery.install
index fcbf47e..5c7fe3a 100644
--- a/delivery.install
+++ b/delivery.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\workspaces\WorkspaceManagerInterface;
 function delivery_install() {
   // Drop the menu tree table so it gets recreated with the new workspace field.
   \Drupal::database()->schema()->dropTable('menu_tree');
@@ -15,7 +16,7 @@ function delivery_module_preinstall($module) {
     return;
   }
 
-  /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager */
+  /** @var WorkspaceManagerInterface $workspace_manager */
   $workspace_manager = \Drupal::service('workspaces.manager');
   $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
   foreach ($entity_definition_update_manager->getEntityTypes() as $entity_type) {
diff --git a/delivery.module b/delivery.module
index 9b97b2b..4538cf8 100644
--- a/delivery.module
+++ b/delivery.module
@@ -1,5 +1,12 @@
 <?php
 
+use Drupal\workspaces\WorkspaceManagerInterface;
+use Drupal\workspaces\WorkspaceAssociationInterface;
+use Drupal\field\FieldConfigInterface;
+use Drupal\system\Entity\Menu;
+use Drupal\content_moderation\ModerationInformationInterface;
+use Drupal\workspaces\WorkspaceInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 /**
  * @file
  * Drupal hooks and helper functions.
@@ -65,9 +72,9 @@ function delivery_query_workspace_sensitive_alter(AlterableInterface $query) {
  * Implements hook_entity_access().
  */
 function delivery_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspacesManager */
+  /** @var WorkspaceManagerInterface $workspacesManager */
   $workspacesManager = \Drupal::service('workspaces.manager');
-  /** @var \Drupal\workspaces\WorkspaceAssociationInterface $workspaceAssociation */
+  /** @var WorkspaceAssociationInterface $workspaceAssociation */
   $workspaceAssociation = \Drupal::service('workspaces.association');
   if ($operation == 'deliver') {
     if ($account->hasPermission('deliver items')) {
@@ -102,10 +109,10 @@ function delivery_entity_access(EntityInterface $entity, $operation, AccountInte
 /**
  * Implements hook_entity_type_build().
  *
- * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+ * @param EntityTypeInterface[] $entity_types
  */
 function delivery_entity_type_build(array &$entity_types) {
-  /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspacesManager */
+  /** @var WorkspaceManagerInterface $workspacesManager */
   $workspacesManager = \Drupal::service('workspaces.manager');
   $entity_types['menu_link_content']->setHandlerClass('storage', MenuLinkContentStorage::class);
   $entity_types['menu_link_content']->setClass(MenuLinkContent::class);
@@ -154,7 +161,7 @@ function delivery_delivery_view_alter(array &$build, EntityInterface $entity, En
 }
 
 function delivery_form_field_config_edit_form_alter(&$form, FormStateInterface $formState) {
-  /** @var \Drupal\field\FieldConfigInterface $entity */
+  /** @var FieldConfigInterface $entity */
   $entity = $formState->getFormObject()->getEntity();
   $form['third_party_settings']['delivery'] = [
     '#type' => 'details',
@@ -186,7 +193,7 @@ function delivery_form_alter(&$form, FormStateInterface $formState, $formId) {
   ) {
     $form['langcode']['#access'] = $formObject->getEntity()->isNew();
     if ($formObject->getEntity()->isNew()) {
-      /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager */
+      /** @var WorkspaceManagerInterface $workspaceManager */
       $workspaceManager = \Drupal::service('workspaces.manager');
       $workspace = $workspaceManager->getActiveWorkspace();
       if (!empty($workspace->primary_language) && $defaultLanguage = $workspace->primary_language->value) {
@@ -203,9 +210,9 @@ function delivery_form_alter(&$form, FormStateInterface $formState, $formId) {
  * Implements hook_form_FORM_ID_alter().
  */
 function delivery_form_menu_edit_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\workspaces\WorkspaceManagerInterface $manager */
+  /** @var WorkspaceManagerInterface $manager */
   $workspacesManager = \Drupal::service('workspaces.manager');
-  /** @var \Drupal\system\Entity\Menu $menu */
+  /** @var Menu $menu */
   $menu = $form_state->getFormObject()->getEntity();
   $currentUser = \Drupal::currentUser();
   $activeWorkspace = $workspacesManager->getActiveWorkspace();
@@ -292,7 +299,7 @@ function delivery_entity_base_field_info_alter(&$fields, EntityTypeInterface $en
 /**
  * Implements hook_entity_base_field_info().
  *
- * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+ * @param EntityTypeInterface $entity_type
  */
 function delivery_entity_base_field_info(EntityTypeInterface $entity_type) {
   $fields = [];
@@ -339,7 +346,7 @@ function delivery_entity_base_field_info(EntityTypeInterface $entity_type) {
       ->setDisplayConfigurable('form', TRUE);
   }
 
-  /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager */
+  /** @var WorkspaceManagerInterface $workspaceManager */
   $workspaceManager = \Drupal::service('workspaces.manager');
   // Attach a revisionable "deleted" field.
   if ($workspaceManager->isEntityTypeSupported($entity_type)) {
@@ -358,7 +365,7 @@ function delivery_entity_update(EntityInterface $entity) {
   if ($entity instanceof ContentEntityInterface && !$entity->isSyncing()) {
     $entityType = $entity->getEntityType();
 
-    /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager */
+    /** @var WorkspaceManagerInterface $workspaceManager */
     $workspaceManager = \Drupal::service('workspaces.manager');
     if (!$workspaceManager->isEntityTypeSupported($entityType)) {
       return;
@@ -369,7 +376,7 @@ function delivery_entity_update(EntityInterface $entity) {
       return;
     }
 
-    /** @var \Drupal\content_moderation\ModerationInformationInterface $content_moderation_info */
+    /** @var ModerationInformationInterface $content_moderation_info */
     $content_moderation_info = \Drupal::service('content_moderation.moderation_information');
     $workflow = $content_moderation_info->getWorkflowForEntity($entity);
     if (!($workflow && $workflow->getTypePlugin()->hasState($entity->moderation_state->value))) {
@@ -381,11 +388,11 @@ function delivery_entity_update(EntityInterface $entity) {
       return;
     }
 
-    /** @var \Drupal\workspaces\WorkspaceAssociationInterface $workspaceAssiociaton */
+    /** @var WorkspaceAssociationInterface $workspaceAssiociaton */
     $workspaceAssiociaton = \Drupal::service('workspaces.association');
-    /** @var \Drupal\workspaces\WorkspaceInterface $parentWorkspace */
+    /** @var WorkspaceInterface $parentWorkspace */
     $parentWorkspace = $activeWorkspace->parent->entity;
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());
 
     $parentRevisions = $workspaceAssiociaton->getTrackedEntities(
@@ -425,10 +432,10 @@ function delivery_entity_update(EntityInterface $entity) {
  */
 function delivery_entity_load(array $entities, $entity_type_id) {
   $entityType = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
-  /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager */
+  /** @var WorkspaceManagerInterface $workspaceManager */
   $workspaceManager = \Drupal::service('workspaces.manager');
   if ($workspaceManager->isEntityTypeSupported($entityType)) {
-    /** @var \Drupal\workspaces\WorkspaceAssociationInterface $workspaceAssociation */
+    /** @var WorkspaceAssociationInterface $workspaceAssociation */
     $workspaceAssociation = \Drupal::service('workspaces.association');
     $active_workspace = $workspaceManager->getActiveWorkspace();
     if (!$active_workspace) {
@@ -439,7 +446,7 @@ function delivery_entity_load(array $entities, $entity_type_id) {
       return;
     }
     foreach ($entities as $entity) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity->isDefaultRevision(array_key_exists($entity->getRevisionId(), $tracking[$entity_type_id]));
     }
   }
@@ -449,11 +456,11 @@ function delivery_entity_load(array $entities, $entity_type_id) {
  * Implements hook_entity_predelete().
  */
 function delivery_entity_predelete(EntityInterface $entity) {
-  /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager */
+  /** @var WorkspaceManagerInterface $workspaceManager */
   $workspaceManager = \Drupal::service('workspaces.manager');
   $entityType = $entity->getEntityType();
   if ($workspaceManager->isEntityTypeSupported($entityType) && $entity instanceof RevisionableInterface) {
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage($entityType->id());
     $deleted = $storage->createRevision($entity);
     $deleted->deleted = \Drupal::time()->getRequestTime();
diff --git a/delivery.post_update.php b/delivery.post_update.php
index d949786..89c1fa8 100644
--- a/delivery.post_update.php
+++ b/delivery.post_update.php
@@ -1,6 +1,7 @@
 <?php
 
 
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
 /**
  * Add the auto-push property to workspaces.
  */
@@ -19,7 +20,7 @@ function delivery_post_update_auto_push_field() {
  */
 function delivery_post_update_revisionable_menu_tree(&$sandbox) {
   $updateManager = \Drupal::entityDefinitionUpdateManager();
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $lastInstalledSchemaRepository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $lastInstalledSchemaRepository */
   $lastInstalledSchemaRepository = \Drupal::service('entity.last_installed_schema.repository');
 
   $fields = $lastInstalledSchemaRepository->getLastInstalledFieldStorageDefinitions('menu_link_content');
diff --git a/modules/delivery_update/delivery_update.install b/modules/delivery_update/delivery_update.install
index 3ab93c5..4aab9e5 100644
--- a/modules/delivery_update/delivery_update.install
+++ b/modules/delivery_update/delivery_update.install
@@ -1,8 +1,9 @@
 <?php
 
+use Drupal\workspaces\WorkspaceManagerInterface;
 function deliver_update_post_update_migrate() {
   \Drupal::database()->query('UPDATE {workspace} set parent = parent_workspace')->execute();
-  /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspacesManager */
+  /** @var WorkspaceManagerInterface $workspacesManager */
   $workspacesManager = \Drupal::service('workspaces.manager');
 
   foreach (\Drupal::entityTypeManager()->getDefinitions() as $entityType) {
diff --git a/modules/delivery_update/src/Plugin/Field/FieldType/RevisionTreeItem.php b/modules/delivery_update/src/Plugin/Field/FieldType/RevisionTreeItem.php
index d267100..d93fc68 100644
--- a/modules/delivery_update/src/Plugin/Field/FieldType/RevisionTreeItem.php
+++ b/modules/delivery_update/src/Plugin/Field/FieldType/RevisionTreeItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\delivery_update\Plugin\Field\FieldType;
 
+use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ -135,7 +136,7 @@ class RevisionTreeItem extends FieldItemBase {
    * {@inheritdoc}
    */
   public function preSave() {
-    /** @var \Drupal\Core\Entity\RevisionableInterface $entity */
+    /** @var RevisionableInterface $entity */
     $entity = $this->getEntity();
 
     // Set the parent revision ID automatically when we create a new revision.
diff --git a/modules/workspaces_allowed_languages/src/RedirectListener.php b/modules/workspaces_allowed_languages/src/RedirectListener.php
index 6ee0ada..9dfeb9f 100644
--- a/modules/workspaces_allowed_languages/src/RedirectListener.php
+++ b/modules/workspaces_allowed_languages/src/RedirectListener.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workspaces_allowed_languages;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Routing\TrustedRedirectResponse;
@@ -10,7 +11,6 @@ use Drupal\Core\Url;
 use Drupal\workspaces\WorkspaceManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\Routing\Exception\ResourceNotFoundException;
@@ -22,25 +22,25 @@ use Symfony\Component\Routing\Exception\ResourceNotFoundException;
 class RedirectListener implements EventSubscriberInterface {
 
   /**
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    *  The workspace manager service.
    */
   protected $workspaceManger;
 
   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    * The language manager service.
    */
   protected $languageManager;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    * The module handler service.
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    *  The current user.
    */
   protected $currentUser;
@@ -66,7 +66,7 @@ class RedirectListener implements EventSubscriberInterface {
    * Performs a redirect in case the workspace and the language of the site do
    * not match.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     // Skip any checks for subrequests
     if (!$event->isMasterRequest()) {
       return;
diff --git a/modules/workspaces_allowed_languages/workspaces_allowed_languages.module b/modules/workspaces_allowed_languages/workspaces_allowed_languages.module
index 28953b9..bdf202f 100644
--- a/modules/workspaces_allowed_languages/workspaces_allowed_languages.module
+++ b/modules/workspaces_allowed_languages/workspaces_allowed_languages.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\workspaces\WorkspaceManagerInterface;
 /**
  * @file
  * Provides a language field on workspaces to restrict the languages which can
@@ -113,7 +114,7 @@ function workspaces_allowed_languages_element_info_alter(array &$info) {
  * the current workspace.
  */
 function workspaces_allowed_languages_process_language_select($element) {
-  /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager */
+  /** @var WorkspaceManagerInterface $workspaceManager */
   $workspaceManager = \Drupal::service('workspaces.manager');
   $workspace = $workspaceManager->getActiveWorkspace();
 
diff --git a/modules/workspaces_negotiator_path/src/EventSubscriber/WorkspaceRedirectSubscriber.php b/modules/workspaces_negotiator_path/src/EventSubscriber/WorkspaceRedirectSubscriber.php
index 4980fb2..f1a600a 100644
--- a/modules/workspaces_negotiator_path/src/EventSubscriber/WorkspaceRedirectSubscriber.php
+++ b/modules/workspaces_negotiator_path/src/EventSubscriber/WorkspaceRedirectSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\workspaces_negotiator_path\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\workspaces_negotiator_path\PathPrefixWorkspaceNegotiator;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 
 /**
  * Class EventSubscriber.
@@ -55,7 +55,7 @@ class WorkspaceRedirectSubscriber implements EventSubscriberInterface {
   /**
    * Constructs a new EventSubscriber object.
    *
-   * @param \Drupal\workspaces_negotiator_path\PathPrefixWorkspaceNegotiator $pathPrefixWorkspaceNegotiator
+   * @param PathPrefixWorkspaceNegotiator $pathPrefixWorkspaceNegotiator
    *   The workspace negotiator service for path prefix.
    */
   public function __construct(PathPrefixWorkspaceNegotiator $pathPrefixWorkspaceNegotiator) {
@@ -65,10 +65,10 @@ class WorkspaceRedirectSubscriber implements EventSubscriberInterface {
   /**
    * This method is called whenever the kernel.response event is dispatched.
    *
-   * @param FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event object.
    */
-  public function checkRedirection(FilterResponseEvent $event) {
+  public function checkRedirection(ResponseEvent $event) {
     $response = $event->getResponse();
     if (($prefix = $this->pathPrefixWorkspaceNegotiator->getRedirectPrefix())
       && $response instanceOf RedirectResponse
diff --git a/modules/workspaces_negotiator_path/src/PathPrefixWorkspaceNegotiator.php b/modules/workspaces_negotiator_path/src/PathPrefixWorkspaceNegotiator.php
index 3500959..544b9f3 100644
--- a/modules/workspaces_negotiator_path/src/PathPrefixWorkspaceNegotiator.php
+++ b/modules/workspaces_negotiator_path/src/PathPrefixWorkspaceNegotiator.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\workspaces_negotiator_path;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -36,33 +40,33 @@ class PathPrefixWorkspaceNegotiator implements WorkspaceNegotiatorInterface {
   /**
    * The workspace storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $workspaceStorage;
 
   /**
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;
 
   /**
    * The workspaces' logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Return the path prefix for a given workspace, without the leading slash.
    *
-   * @param \Drupal\workspaces\WorkspaceInterface $workspace
+   * @param WorkspaceInterface $workspace
    *   The given workspace.
    * @param bool $stripSlash
    *   Whether to remove the leading slash. Defaults to false.
@@ -80,17 +84,17 @@ class PathPrefixWorkspaceNegotiator implements WorkspaceNegotiatorInterface {
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   The temp store factory.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The workspaces' logger channel.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, PrivateTempStoreFactory $tempStoreFactory, LoggerChannelInterface $logger, MessengerInterface $messenger) {
     $this->workspaceStorage = $entity_type_manager->getStorage('workspace');
@@ -215,7 +219,7 @@ class PathPrefixWorkspaceNegotiator implements WorkspaceNegotiatorInterface {
       return '';
     }
 
-    /** @var \Drupal\workspaces\WorkspaceInterface $workspace */
+    /** @var WorkspaceInterface $workspace */
     foreach ($this->getValidWorkspaces() as $workspace) {
       $prefix = self::getPrefix($workspace, TRUE);
 
diff --git a/modules/workspaces_negotiator_path/src/PathProcessor.php b/modules/workspaces_negotiator_path/src/PathProcessor.php
index 8df24c4..042cd85 100644
--- a/modules/workspaces_negotiator_path/src/PathProcessor.php
+++ b/modules/workspaces_negotiator_path/src/PathProcessor.php
@@ -15,12 +15,12 @@ use Symfony\Component\HttpFoundation\Request;
 class PathProcessor implements InboundPathProcessorInterface, OutboundPathProcessorInterface {
 
   /**
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
-   * @var \Drupal\workspaces_negotiator_path\PathPrefixWorkspaceNegotiator
+   * @var PathPrefixWorkspaceNegotiator
    */
   protected $pathPrefixWorkspaceNegotiator;
 
diff --git a/modules/workspaces_negotiator_path/src/Plugin/LanguageNegotiation/LanguageNegotiationWorkspaceAndUrl.php b/modules/workspaces_negotiator_path/src/Plugin/LanguageNegotiation/LanguageNegotiationWorkspaceAndUrl.php
index bdd84a8..ae9e740 100644
--- a/modules/workspaces_negotiator_path/src/Plugin/LanguageNegotiation/LanguageNegotiationWorkspaceAndUrl.php
+++ b/modules/workspaces_negotiator_path/src/Plugin/LanguageNegotiation/LanguageNegotiationWorkspaceAndUrl.php
@@ -31,7 +31,7 @@ class LanguageNegotiationWorkspaceAndUrl extends LanguageNegotiationUrl implemen
   const METHOD_ID = 'language-workspace-and-url';
 
   /**
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    * The workspace manager service.
    */
   protected $workspaceManager;
diff --git a/src/ConflictResolution/MergeBlacklistedFields.php b/src/ConflictResolution/MergeBlacklistedFields.php
index c343231..e3c6d33 100644
--- a/src/ConflictResolution/MergeBlacklistedFields.php
+++ b/src/ConflictResolution/MergeBlacklistedFields.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\delivery\ConflictResolution;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\conflict\ConflictResolution\MergeStrategyBase;
 use Drupal\conflict\Event\EntityConflictResolutionEvent;
 use Drupal\Core\Entity\EntityInterface;
@@ -19,12 +22,12 @@ use Drupal\Core\Entity\EntityTypeManagerInterface;
 class MergeBlacklistedFields extends MergeStrategyBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fieldConfig;
 
@@ -46,10 +49,10 @@ class MergeBlacklistedFields extends MergeStrategyBase {
   /**
    * MergeBlacklistedFields constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ -69,7 +72,7 @@ class MergeBlacklistedFields extends MergeStrategyBase {
   /**
    * Removes any conflicts marked as black listed.
    *
-   * @param \Drupal\conflict\Event\EntityConflictResolutionEvent $event
+   * @param EntityConflictResolutionEvent $event
    *   Resolution event.
    */
   public function resolveConflictsContentEntity(EntityConflictResolutionEvent $event) {
@@ -123,10 +126,10 @@ class MergeBlacklistedFields extends MergeStrategyBase {
   /**
    * Returns the field config for the conflicted property.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $property
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    */
   protected function getFieldConflictConfig(EntityInterface $entity, $property) {
     return $this->fieldConfig->load($entity->getEntityTypeId() . '.' . $entity->bundle() . '.' . $property);
diff --git a/src/Controller/DeliveryContentTranslationController.php b/src/Controller/DeliveryContentTranslationController.php
index b28b303..ee62498 100644
--- a/src/Controller/DeliveryContentTranslationController.php
+++ b/src/Controller/DeliveryContentTranslationController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\delivery\Controller;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Language\LanguageInterface;
@@ -13,7 +17,7 @@ use Drupal\Core\Url;
 class DeliveryContentTranslationController extends ContentTranslationController {
 
   public function overview(RouteMatchInterface $route_match, $entity_type_id = NULL) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $route_match->getParameter($entity_type_id);
     $account = $this->currentUser();
     $handler = $this->entityTypeManager()->getHandler($entity_type_id, 'translation');
@@ -32,7 +36,7 @@ class DeliveryContentTranslationController extends ContentTranslationController
 
     $rows = [];
     $show_source_column = FALSE;
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->entityTypeManager()->getStorage($entity_type_id);
     $default_revision = $storage->load($entity->id());
 
@@ -65,7 +69,7 @@ class DeliveryContentTranslationController extends ContentTranslationController
           $entity = $default_revision;
           $latest_revision_id = $this->getLatestTranslationAffectedRevisionId($entity->id(), $langcode, $entity_type);
           if ($latest_revision_id) {
-            /** @var \Drupal\Core\Entity\ContentEntityInterface $latest_revision */
+            /** @var ContentEntityInterface $latest_revision */
             $latest_revision = $storage->loadRevision($latest_revision_id);
             // Make sure we do not list removed translations, i.e. translations
             // that have been part of a default revision but no longer are.
@@ -144,7 +148,7 @@ class DeliveryContentTranslationController extends ContentTranslationController
             $source_name = $this->t('n/a');
           }
           else {
-            /** @var \Drupal\Core\Access\AccessResultInterface $delete_route_access */
+            /** @var AccessResultInterface $delete_route_access */
             $delete_route_access = \Drupal::service('content_translation.delete_access')->checkAccess($translation);
             $cacheability->addCacheableDependency($delete_route_access);
 
@@ -306,7 +310,7 @@ class DeliveryContentTranslationController extends ContentTranslationController
   /**
    * Returns the language manager service.
    *
-   * @return \Drupal\Core\Language\LanguageManagerInterface
+   * @return LanguageManagerInterface
    *   The language manager.
    */
   protected function languageManager() {
diff --git a/src/Controller/DeliveryItemStatusController.php b/src/Controller/DeliveryItemStatusController.php
index 1c4adef..92c2f69 100644
--- a/src/Controller/DeliveryItemStatusController.php
+++ b/src/Controller/DeliveryItemStatusController.php
@@ -12,20 +12,20 @@ use Symfony\Component\HttpFoundation\JsonResponse;
 class DeliveryItemStatusController extends ControllerBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\delivery\DeliveryService
+   * @var DeliveryService
    */
   protected $deliveryService;
 
   /**
    * DeliveryStatusController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\delivery\DeliveryService $delivery_service
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param DeliveryService $delivery_service
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, DeliveryService $delivery_service) {
     $this->entityTypeManager = $entity_type_manager;
diff --git a/src/Controller/DeliveryListUsageController.php b/src/Controller/DeliveryListUsageController.php
index 78093e0..7dea3d9 100644
--- a/src/Controller/DeliveryListUsageController.php
+++ b/src/Controller/DeliveryListUsageController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\delivery\Controller;
 
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -62,7 +63,7 @@ class DeliveryListUsageController extends LocalTaskUsageController {
       // results every time records are added/removed to the same target entity.
     }
     $rows = [];
-    /** @var  \Drupal\Core\Entity\ContentEntityStorageInterface $workspaceStorage */
+    /** @var ContentEntityStorageInterface $workspaceStorage */
     $workspaceStorage = $this->entityTypeManager->getStorage('workspace');
     $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
     if (!$entity) {
diff --git a/src/Controller/DeliveryStatusController.php b/src/Controller/DeliveryStatusController.php
index 6e40750..ee3fb70 100644
--- a/src/Controller/DeliveryStatusController.php
+++ b/src/Controller/DeliveryStatusController.php
@@ -18,20 +18,20 @@ use Symfony\Component\HttpFoundation\JsonResponse;
 class DeliveryStatusController extends ControllerBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\delivery\DeliveryService
+   * @var DeliveryService
    */
   protected $deliveryService;
 
   /**
    * DeliveryStatusController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\delivery\DeliveryService $delivery_service
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param DeliveryService $delivery_service
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, DeliveryService $delivery_service) {
     $this->entityTypeManager = $entity_type_manager;
@@ -54,7 +54,7 @@ class DeliveryStatusController extends ControllerBase {
    * @param $workspace
    * @param $delivery
    *
-   * @return array|\Symfony\Component\HttpFoundation\JsonResponse
+   * @return array|JsonResponse
    */
   public function getAction(WorkspaceInterface $workspace, DeliveryInterface $delivery) {
     $response_code = 200;
diff --git a/src/Controller/NodeController.php b/src/Controller/NodeController.php
index a2e7c46..c57fa86 100644
--- a/src/Controller/NodeController.php
+++ b/src/Controller/NodeController.php
@@ -18,7 +18,7 @@ class NodeController extends OriginalNodeController {
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -78,7 +78,7 @@ class NodeController extends OriginalNodeController {
    * Returns an array with all the ancestors of a node revision, using only the
    * target_id of the revision parent field, not the merge_target_id.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node revision.
    *
    * @return array
diff --git a/src/DeliveryEntityOperations.php b/src/DeliveryEntityOperations.php
index 97ae953..e57941a 100644
--- a/src/DeliveryEntityOperations.php
+++ b/src/DeliveryEntityOperations.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\delivery;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityPublishedInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -23,7 +25,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class DeliveryEntityOperations extends EntityOperations {
 
   /**
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
@@ -100,8 +102,7 @@ class DeliveryEntityOperations extends EntityOperations {
     // if (!$this->workspaceManager->isEntityTypeSupported($entity_type)) {
     //   throw new \RuntimeException('This entity can only be saved in the default workspace.');
     // }
-
-    /** @var \Drupal\Core\Entity\ContentEntityInterface|\Drupal\Core\Entity\EntityPublishedInterface $entity */
+    /** @var ContentEntityInterface|EntityPublishedInterface $entity */
     if (!$entity->isNew() && !$entity->isSyncing()) {
       // Force a new revision if the entity is not replicating.
       $entity->setNewRevision(TRUE);
diff --git a/src/DeliveryService.php b/src/DeliveryService.php
index 3d93d27..a47f43a 100644
--- a/src/DeliveryService.php
+++ b/src/DeliveryService.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\delivery;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\revision_tree\EntityRevisionTreeHandlerInterface;
 use Drupal\conflict\ConflictResolver\ConflictResolverManager;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -23,38 +28,38 @@ class DeliveryService {
   use EntityDeliveryStatusTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
-   * @var \Drupal\conflict\ConflictResolver\ConflictResolverManager
+   * @var ConflictResolverManager
    */
   protected $conflictResolverManager;
 
   /**
-   * @var \Drupal\workspaces\WorkspaceAssociationInterface
+   * @var WorkspaceAssociationInterface
    */
   protected $workspaceAssociation;
 
   /**
    * DeliveryService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
-   * @param \Drupal\conflict\ConflictResolver\ConflictResolverManager $conflictResolverManager
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspaceAssociation
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param WorkspaceManagerInterface $workspaceManager
+   * @param EntityRepositoryInterface $entityRepository
+   * @param ConflictResolverManager $conflictResolverManager
+   * @param WorkspaceAssociationInterface $workspaceAssociation
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ -73,14 +78,14 @@ class DeliveryService {
   /**
    * Forwards a delivery using a delivery entity and a workspace target ID.
    *
-   * @param \Drupal\delivery\DeliveryInterface $delivery
+   * @param DeliveryInterface $delivery
    * @param $target_ids
    * @param int $source_id
    *
-   * @return \Drupal\delivery\DeliveryInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return DeliveryInterface
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function forwardDelivery(DeliveryInterface $delivery, $target_ids, $source_id = 0) {
     $forwarded = $delivery->createDuplicate();
@@ -125,8 +130,8 @@ class DeliveryService {
    * Returns an array of possible target workspaces, keyed by workspace IDs.
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getTargetWorkspaces() {
     $list = [];
@@ -144,7 +149,7 @@ class DeliveryService {
   /**
    * Checks if there are conflicts.
    *
-   * @param \Drupal\delivery\DeliveryInterface $delivery
+   * @param DeliveryInterface $delivery
    *
    * @return bool
    *
@@ -180,7 +185,7 @@ class DeliveryService {
   /**
    * Checks if a delivery has pending changes.
    *
-   * @param \Drupal\delivery\DeliveryInterface $delivery
+   * @param DeliveryInterface $delivery
    *
    * @return bool
    *
@@ -202,8 +207,8 @@ class DeliveryService {
    * Checks if the delivery has any kind of changes (conflict, pending changes,
    * outdated content).
    *
-   * @param \Drupal\delivery\DeliveryInterface $delivery
-   * @param \Drupal\workspaces\WorkspaceInterface $targetWorkspace | NULL
+   * @param DeliveryInterface $delivery
+   * @param WorkspaceInterface $targetWorkspace | NULL
    *
    * @return bool.
    *
@@ -239,7 +244,7 @@ class DeliveryService {
   /**
    * Returns an array of modified entity IDs.
    *
-   * @param \Drupal\delivery\DeliveryInterface $delivery
+   * @param DeliveryInterface $delivery
    *
    * @return array
    */
@@ -283,7 +288,7 @@ class DeliveryService {
   /**
    * Returns true if a delivery can be safely forwarded, otherwise false.
    *
-   * @param \Drupal\delivery\DeliveryInterface $delivery
+   * @param DeliveryInterface $delivery
    *
    * @return bool
    */
@@ -303,7 +308,7 @@ class DeliveryService {
   /**
    * Get an array of node IDs and node revision IDs.
    *
-   * @param \Drupal\delivery\DeliveryInterface $delivery
+   * @param DeliveryInterface $delivery
    *
    * @return array
    */
@@ -318,7 +323,7 @@ class DeliveryService {
   /**
    * Get an array of media IDs and media revision IDs.
    *
-   * @param \Drupal\delivery\DeliveryInterface $delivery
+   * @param DeliveryInterface $delivery
    *
    * @return array
    */
@@ -333,12 +338,12 @@ class DeliveryService {
   /**
    * Pulls all updates from a delivery into the current workspace.
    *
-   * @param \Drupal\delivery\DeliveryInterface $delivery
-   * @param \Drupal\workspaces\WorkspaceInterface $workspace
+   * @param DeliveryInterface $delivery
+   * @param WorkspaceInterface $workspace
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function pullChangesFromDeliveryToWorkspace(DeliveryInterface $delivery, WorkspaceInterface $workspace) {
     $skipped = 0;
@@ -365,9 +370,9 @@ class DeliveryService {
   /**
    * @param $entityType
    *
-   * @return \Drupal\Core\Entity\ContentEntityStorageInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ContentEntityStorageInterface
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getContentEntityStorage($entityType) {
     return $this->entityTypeManager->getStorage($entityType);
@@ -375,15 +380,15 @@ class DeliveryService {
 
   public function deliverItemHasConflicts($deliveryItem) {
 
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($deliveryItem->getTargetType());
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $sourceEntity */
+    /** @var ContentEntityInterface $sourceEntity */
     $sourceEntity = $storage->loadRevision($deliveryItem->getSourceRevision());
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $targetEntity */
+    /** @var ContentEntityInterface $targetEntity */
     $targetEntity = $storage->loadRevision($this->getActiveRevision($deliveryItem));
 
-    /** @var \Drupal\revision_tree\EntityRevisionTreeHandlerInterface $revisionTreeHandler */
+    /** @var EntityRevisionTreeHandlerInterface $revisionTreeHandler */
     $revisionTreeHandler = $this->entityTypeManager->getHandler($sourceEntity->getEntityTypeId(), 'revision_tree');
     $parentEntityRevision = $revisionTreeHandler
       ->getLowestCommonAncestorId($sourceEntity->getRevisionId(), $targetEntity->getRevisionId(), $deliveryItem->getTargetId());
@@ -393,7 +398,7 @@ class DeliveryService {
       return FALSE;
     }
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $parentEntity */
+    /** @var ContentEntityInterface $parentEntity */
     $parentEntity = $storage->loadRevision($parentEntityRevision);
 
     // If there is no common ancestor it means that the entity has not been
@@ -434,13 +439,13 @@ class DeliveryService {
    *
    * Resolve a merge conflict preferring the source version of an entity.
    *
-   * @param \Drupal\delivery\Entity\DeliveryItem $deliveryItem
+   * @param DeliveryItem $deliveryItem
    *   The delivery item to force push.
    */
   public function acceptDeliveryItem(DeliveryItem $deliveryItem, $state = 'draft') {
     $entityType = $this->entityTypeManager->getDefinition($deliveryItem->getTargetType());
     $storage = $this->getContentEntityStorage($deliveryItem->getTargetType());
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $source */
+    /** @var ContentEntityInterface $source */
     $source = $storage->loadRevision($deliveryItem->getSourceRevision());
 
     $activeRevisionId = $this->getActiveRevision($deliveryItem);
@@ -480,7 +485,7 @@ class DeliveryService {
    *
    * Resolve a merge conflict preferring the target version of an entity.
    *
-   * @param \Drupal\delivery\Entity\DeliveryItem $deliveryItem
+   * @param DeliveryItem $deliveryItem
    */
   public function declineDeliveryItem(DeliveryItem $deliveryItem) {
     $entityType = $this->entityTypeManager->getDefinition($deliveryItem->getTargetType());
@@ -608,7 +613,7 @@ class DeliveryService {
   /**
    * Helper method to return the current active workspace.
    *
-   * @return \Drupal\workspaces\WorkspaceInterface
+   * @return WorkspaceInterface
    */
   public function getActiveWorkspace() {
     return $this->workspaceManager->getActiveWorkspace();
@@ -617,7 +622,7 @@ class DeliveryService {
   /**
    * Returns an array of workspace IDs referenced by a given delivery.
    *
-   * @param \Drupal\delivery\DeliveryInterface $delivery
+   * @param DeliveryInterface $delivery
    *
    * @return array
    */
@@ -633,7 +638,7 @@ class DeliveryService {
   /**
    * Get the delivery target workspace IDs.
    *
-   * @param \Drupal\delivery\DeliveryInterface $delivery
+   * @param DeliveryInterface $delivery
    *
    * @return array
    */
@@ -648,7 +653,7 @@ class DeliveryService {
   /**
    * Returns true if a delivery can be pulled into the active workspace.
    *
-   * @param \Drupal\delivery\DeliveryInterface $delivery
+   * @param DeliveryInterface $delivery
    *
    * @return bool
    */
@@ -672,8 +677,8 @@ class DeliveryService {
   /**
    * Returns an array containing an entity, conflict and update count.
    *
-   * @param \Drupal\workspaces\WorkspaceInterface $workspace
-   * @param \Drupal\delivery\DeliveryInterface $delivery
+   * @param WorkspaceInterface $workspace
+   * @param DeliveryInterface $delivery
    *
    * @return array
    */
@@ -725,7 +730,7 @@ class DeliveryService {
 
   /**
    * Returns true if the entity passed belongs the the current / active workspace
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return bool
    */
diff --git a/src/DeliveryWorkspaceManager.php b/src/DeliveryWorkspaceManager.php
index 67ba8bc..fe2d6dc 100644
--- a/src/DeliveryWorkspaceManager.php
+++ b/src/DeliveryWorkspaceManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\delivery;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\workspaces\WorkspaceInterface;
 use Drupal\workspaces\WorkspaceManager;
 use Drupal\workspaces\Entity\Workspace;
@@ -16,7 +18,7 @@ class DeliveryWorkspaceManager extends WorkspaceManager {
   /**
    * Switches the current workspace without any access checks.
    *
-   * @param \Drupal\workspaces\WorkspaceInterface $workspace
+   * @param WorkspaceInterface $workspace
    *   The workspace to set as active.
    *
    * @return void
@@ -47,13 +49,13 @@ class DeliveryWorkspaceManager extends WorkspaceManager {
    * @return mixed
    *   The callable's return value.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @see WorkspaceManager::executeInWorkspace()
    */
   public function unsafeExecuteInWorkspace($workspace_id, callable $function) {
-    /** @var \Drupal\workspaces\WorkspaceInterface $workspace */
+    /** @var WorkspaceInterface $workspace */
     $workspace = $this->entityTypeManager->getStorage('workspace')
       ->load($workspace_id);
 
diff --git a/src/Entity/DeliveryItem.php b/src/Entity/DeliveryItem.php
index b008779..9a66f0b 100644
--- a/src/Entity/DeliveryItem.php
+++ b/src/Entity/DeliveryItem.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\delivery\Entity;
 
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\workspaces\WorkspaceManagerInterface;
+use Drupal\revision_tree\EntityRevisionTreeHandlerInterface;
+use Drupal\conflict\ConflictResolver\ConflictResolverManager;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -197,9 +202,9 @@ class DeliveryItem extends ContentEntityBase implements DeliveryItemInterface {
       $this->status = $this->calculateStatus();
     }
     $workspaceStorage = \Drupal::entityTypeManager()->getStorage('workspace');
-    /** @var \Drupal\workspaces\WorkspaceInterface $sourceWorkspace */
+    /** @var WorkspaceInterface $sourceWorkspace */
     $sourceWorkspace = $workspaceStorage->load($this->getSourceWorkspace());
-    /** @var \Drupal\workspaces\WorkspaceInterface $targetWorkspace */
+    /** @var WorkspaceInterface $targetWorkspace */
     $targetWorkspace = $workspaceStorage->load($this->getTargetWorkspace());
     return [
       'status' => $this->status,
@@ -209,24 +214,24 @@ class DeliveryItem extends ContentEntityBase implements DeliveryItemInterface {
 
   protected function calculateStatus() {
     $workspaceStorage = \Drupal::entityTypeManager()->getStorage('workspace');
-    /** @var \Drupal\workspaces\WorkspaceInterface $sourceWorkspace */
+    /** @var WorkspaceInterface $sourceWorkspace */
     $sourceWorkspace = $workspaceStorage->load($this->getSourceWorkspace());
-    /** @var \Drupal\workspaces\WorkspaceInterface $targetWorkspace */
+    /** @var WorkspaceInterface $targetWorkspace */
     $targetWorkspace = $workspaceStorage->load($this->getTargetWorkspace());
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage($this->getTargetType());
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $sourceRevision */
+    /** @var ContentEntityInterface $sourceRevision */
     $sourceRevision = $storage->loadRevision($this->getSourceRevision());
     $resolution = $this->getResolution();
 
-    /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager */
+    /** @var WorkspaceManagerInterface $workspaceManager */
     $workspaceManager = \Drupal::service('workspaces.manager');
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $currentTargetRevision */
+    /** @var ContentEntityInterface $currentTargetRevision */
     $currentTargetRevision = $workspaceManager->executeInWorkspace(
       $this->getTargetWorkspace(),
       function () use ($sourceRevision) {
-        /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+        /** @var ContentEntityStorageInterface $storage */
         $storage = \Drupal::entityTypeManager()->getStorage($sourceRevision->getEntityTypeId());
         $query = $storage->getQuery();
         $query->condition($sourceRevision->getEntityType()->getKey('id'), $sourceRevision->id());
@@ -252,7 +257,7 @@ class DeliveryItem extends ContentEntityBase implements DeliveryItemInterface {
     }
 
     if ($resolution) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $targetRevision */
+      /** @var ContentEntityInterface $targetRevision */
       $targetRevision = $storage->loadRevision($this->getResultRevision());
       if ($currentTargetRevision->getRevisionId() !== $targetRevision->getRevisionId()) {
         return static::STATUS_MODIFIED_BY_TARGET;
@@ -269,14 +274,14 @@ class DeliveryItem extends ContentEntityBase implements DeliveryItemInterface {
       if ($currentTargetRevision->deleted->value) {
         return static::STATUS_RESTORED_BY_SOURCE;
       }
-      /** @var \Drupal\revision_tree\EntityRevisionTreeHandlerInterface $revisionTreeHandler */
+      /** @var EntityRevisionTreeHandlerInterface $revisionTreeHandler */
       $revisionTreeHandler = \Drupal::entityTypeManager()->getHandler($this->getTargetType(), 'revision_tree');
       $parentEntityRevision = $revisionTreeHandler->getLowestCommonAncestorId(
         $this->getSourceRevision(),
         $currentTargetRevision->getRevisionId(),
         $this->getTargetId()
       );
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $parentRevision */
+        /** @var ContentEntityInterface $parentRevision */
       $parentRevision = $storage->loadRevision($parentEntityRevision);
 
       if (!empty($targetWorkspace->primary_language)) {
@@ -289,7 +294,7 @@ class DeliveryItem extends ContentEntityBase implements DeliveryItemInterface {
         }
       }
       $hadConflicts = FALSE;
-      /** @var \Drupal\conflict\ConflictResolver\ConflictResolverManager $conflictResolver */
+      /** @var ConflictResolverManager $conflictResolver */
       $conflictResolver = \Drupal::service('conflict_resolver.manager');
 
       if ($sourceRevision->isTranslatable()) {
diff --git a/src/FilteredLanguageManager.php b/src/FilteredLanguageManager.php
index 0e6c612..62c9c32 100644
--- a/src/FilteredLanguageManager.php
+++ b/src/FilteredLanguageManager.php
@@ -10,7 +10,7 @@ use Drupal\workspaces\WorkspaceManagerInterface;
 class FilteredLanguageManager extends ConfigurableLanguageManager {
 
   /**
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
diff --git a/src/Form/DeliveryForwardForm.php b/src/Form/DeliveryForwardForm.php
index 9637700..b7c3352 100644
--- a/src/Form/DeliveryForwardForm.php
+++ b/src/Form/DeliveryForwardForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\delivery\Form;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -20,20 +22,20 @@ use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 class DeliveryForwardForm extends FormBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $deliveryService;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $messenger;
 
   /**
    * DeliveryForwardForm constructor.
    *
-   * @param \Drupal\delivery\DeliveryService $delivery_service
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param DeliveryService $delivery_service
+   * @param MessengerInterface $messenger
    */
   public function __construct(DeliveryService $delivery_service, MessengerInterface $messenger) {
     $this->deliveryService = $delivery_service;
diff --git a/src/Form/DeliveryFromWorkspaceForm.php b/src/Form/DeliveryFromWorkspaceForm.php
index 9625ca0..9e6db2f 100644
--- a/src/Form/DeliveryFromWorkspaceForm.php
+++ b/src/Form/DeliveryFromWorkspaceForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\delivery\Form;
 
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\RevisionableStorageInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Form\FormBase;
@@ -21,17 +25,17 @@ class DeliveryFromWorkspaceForm extends FormBase {
   /**
    * The entity type manager to create, load and save entities.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $workspaceStorage;
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $deliveryStorage;
 
@@ -41,22 +45,22 @@ class DeliveryFromWorkspaceForm extends FormBase {
   protected $database;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannel;
 
   /**
    * DeliveryFromWorkspaceForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $loggerChannel
+   * @param LoggerChannelInterface $loggerChannel
    *   The module's logger channel.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManager $entityTypeManager, Connection $database, LoggerChannelInterface $loggerChannel) {
     $this->database = $database;
@@ -87,7 +91,7 @@ class DeliveryFromWorkspaceForm extends FormBase {
   /**
    * Retrieve the forms page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function title() {
     $source = $this->workspaceStorage->load($this->getRequest()->get('workspace'));
@@ -110,14 +114,14 @@ class DeliveryFromWorkspaceForm extends FormBase {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $request = $this->getRequest();
-    /** @var \Drupal\workspaces\WorkspaceInterface $source */
+    /** @var WorkspaceInterface $source */
     $source = $this->workspaceStorage->load($request->get('workspace'));
     if (!$source) {
       // TODO: Proper error handling.
       return;
     }
 
-    /** @var \Drupal\workspaces\WorkspaceInterface $target */
+    /** @var WorkspaceInterface $target */
     $target = $source->parent->entity;
     if (!$target) {
       // TODO: Proper error handling.
@@ -179,7 +183,7 @@ class DeliveryFromWorkspaceForm extends FormBase {
 
     foreach ($revisionsByEntityType as $entityTypeId => $revisions) {
       try {
-        /** @var \Drupal\Core\Entity\RevisionableStorageInterface $storage */
+        /** @var RevisionableStorageInterface $storage */
         $storage = $this->entityTypeManager->getStorage($entityTypeId);
         $entityType = $this->entityTypeManager->getDefinition($entityTypeId);
         $entityTypeLabel = (string) $entityType->getLabel();
diff --git a/src/Form/DeliveryItemPushForm.php b/src/Form/DeliveryItemPushForm.php
index e100e3b..e241ae3 100644
--- a/src/Form/DeliveryItemPushForm.php
+++ b/src/Form/DeliveryItemPushForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\delivery\Form;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -20,40 +22,40 @@ class DeliveryItemPushForm extends ConfirmFormBase {
   public static $BATCH_THRESHOLD = 10;
 
   /**
-   * @var \Drupal\delivery\DeliveryInterface
+   * @var DeliveryInterface
    *  The delivery object.
    */
   protected $delivery;
 
   /**
-   * @var \Drupal\delivery\Entity\DeliveryItem
+   * @var DeliveryItem
    */
   protected $deliveryItem;
 
   /**
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $sourceEntity;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    *  The entity type manager service.
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @var EntityRepositoryInterface $entityRepository
    *  The entity repository service.
    */
   protected $entityRepository;
 
   /**
-   * @var \Drupal\delivery\DeliveryService
+   * @var DeliveryService
    */
   protected $deliveryService;
 
   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    *  The messenger service.
    */
   protected $messenger;
@@ -61,10 +63,10 @@ class DeliveryItemPushForm extends ConfirmFormBase {
   /**
    * DeliveryPushConfirmFom constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
-   * @param \Drupal\delivery\DeliveryService $deliveryService
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param MessengerInterface $messenger
+   * @param EntityRepositoryInterface $entity_repository
+   * @param DeliveryService $deliveryService
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ -102,7 +104,7 @@ class DeliveryItemPushForm extends ConfirmFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function getCancelUrl() {
     return $this->delivery->toUrl();
diff --git a/src/Form/DeliveryItemResolveForm.php b/src/Form/DeliveryItemResolveForm.php
index 5248405..7025e2f 100644
--- a/src/Form/DeliveryItemResolveForm.php
+++ b/src/Form/DeliveryItemResolveForm.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\delivery\Form;
 
+use Drupal\Core\Render\Renderer;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\revision_tree\EntityRevisionTreeHandlerInterface;
+use Drupal\Core\Field\WidgetPluginManager;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Field\WidgetInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\conflict\ConflictResolver\ConflictResolverManagerInterface;
 use Drupal\Core\Access\AccessResult;
@@ -34,84 +41,84 @@ use Symfony\Component\HttpFoundation\ParameterBag;
 class DeliveryItemResolveForm extends FormBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    *  The entity type manager service.
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @var EntityRepositoryInterface $entityRepository
    *  The entity repository service.
    */
   protected $entityRepository;
 
   /**
-   * @var \Drupal\delivery\DeliveryService
+   * @var DeliveryService
    */
   protected $deliveryService;
 
   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    *  The messenger service.
    */
   protected $messenger;
 
   /**
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
-   * @var \Drupal\conflict\ConflictResolver\ConflictResolverManagerInterface
+   * @var ConflictResolverManagerInterface
    */
   protected $conflictResolverManager;
 
   /**
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
-   * @var \Drupal\delivery\Entity\DeliveryItem
+   * @var DeliveryItem
    */
   protected $deliveryItem;
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $sourceEntity;
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $targetEntity;
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $parentEntity;
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $resultEntity;
 
   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * DeliveryPushConfirmFom constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
-   * @param \Drupal\delivery\DeliveryService $deliveryService
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\conflict\ConflictResolver\ConflictResolverManagerInterface $conflictResolverManager
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param MessengerInterface $messenger
+   * @param EntityRepositoryInterface $entity_repository
+   * @param DeliveryService $deliveryService
+   * @param RendererInterface $renderer
+   * @param ConflictResolverManagerInterface $conflictResolverManager
+   * @param WorkspaceManagerInterface $workspaceManager
+   * @param LanguageManagerInterface $languageManager
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ -146,9 +153,9 @@ class DeliveryItemResolveForm extends FormBase {
   }
 
   public function title(DeliveryItem $delivery_item) {
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($delivery_item->getTargetType());
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $this->sourceEntity */
+    /** @var ContentEntityInterface $this ->sourceEntity */
     $sourceEntity = $storage->loadRevision($delivery_item->getSourceRevision());
     return $this->t('Resolve conflict. <a href="@href" target="_blank">@label</a>', [
       '@href' => $sourceEntity->toUrl()->toString(),
@@ -191,12 +198,12 @@ class DeliveryItemResolveForm extends FormBase {
   public function buildForm(array $form, FormStateInterface $form_state, DeliveryItem $delivery_item = NULL) {
     $form['#attached']['library'][] = 'delivery/conflict-resolution';
     $this->deliveryItem = $delivery_item;
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($delivery_item->getTargetType());
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $this->sourceEntity */
+    /** @var ContentEntityInterface $this ->sourceEntity */
     $this->sourceEntity = $storage->loadRevision($delivery_item->getSourceRevision());
     $this->sourceEntity = $this->sourceEntity;
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $this->targetEntity */
+    /** @var ContentEntityInterface $this ->targetEntity */
     $this->targetEntity = $storage->loadRevision($this->deliveryService->getActiveRevision($delivery_item));
 
     $this->resultEntity = $storage->createRevision($this->sourceEntity);
@@ -210,11 +217,11 @@ class DeliveryItemResolveForm extends FormBase {
     $this->resultEntity->{$revisionParentField}->target_revision_id = $this->targetEntity->{$revisionField}->value;
     $this->resultEntity->workspace = $this->deliveryItem->getTargetWorkspace();
 
-    /** @var \Drupal\revision_tree\EntityRevisionTreeHandlerInterface $revisionTreeHandler */
+    /** @var EntityRevisionTreeHandlerInterface $revisionTreeHandler */
     $revisionTreeHandler = $this->entityTypeManager->getHandler($this->sourceEntity->getEntityTypeId(), 'revision_tree');
     $parentEntityRevision = $revisionTreeHandler->getLowestCommonAncestorId($this->sourceEntity->getRevisionId(), $this->targetEntity->getRevisionId(), $delivery_item->getTargetId());
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $parentEntity */
+    /** @var ContentEntityInterface $parentEntity */
     $parentEntity = $storage->loadRevision($parentEntityRevision);
     $this->parentEntity = $parentEntity;
 
@@ -413,9 +420,9 @@ class DeliveryItemResolveForm extends FormBase {
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $formDisplay = EntityFormDisplay::collectRenderDisplay($this->resultEntity, 'merge');
-    /** @var \Drupal\Core\Field\WidgetPluginManager $widgetPluginManager */
+    /** @var WidgetPluginManager $widgetPluginManager */
     $widgetPluginManager = \Drupal::service('plugin.manager.field.widget');
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
+    /** @var EntityFieldManagerInterface $entityFieldManager */
     $entityFieldManager = \Drupal::service('entity_field.manager');
 
     $targetWorkspace = $this->entityTypeManager->getStorage('workspace')
@@ -471,7 +478,7 @@ class DeliveryItemResolveForm extends FormBase {
         $entityType = $this->sourceEntity->getEntityType();
         $bundle = $this->sourceEntity->bundle();
         $definitions = $entityFieldManager->getFieldDefinitions($entityType->id(), $bundle);
-        /** @var \Drupal\Core\Field\WidgetInterface $widget */
+        /** @var WidgetInterface $widget */
         $widget = $widgetPluginManager->getInstance([
           'field_definition' => $definitions[$field],
           'form_mode' => 'merge',
@@ -482,7 +489,7 @@ class DeliveryItemResolveForm extends FormBase {
         $customValues[$field] = $widget->massageFormValues($input, $form, $form_state);
       }
       $context->set('resolution_custom_values', $customValues);
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $resultTranslation */
+      /** @var ContentEntityInterface $resultTranslation */
       $resultTranslation = $this->getTranslation($this->resultEntity, $language->getId());
       $this->conflictResolverManager->resolveConflicts(
         $this->getTranslation($this->targetEntity, $language->getId()),
diff --git a/src/Form/DeliveryPullForm.php b/src/Form/DeliveryPullForm.php
index f8ebf2e..6201e07 100644
--- a/src/Form/DeliveryPullForm.php
+++ b/src/Form/DeliveryPullForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\delivery\Form;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
+use Drupal\workspaces\WorkspaceInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -20,30 +23,30 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class DeliveryPullForm extends ConfirmFormBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $deliveryService;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $messenger;
 
   /**
-   * @var \Drupal\delivery\DeliveryInterface
+   * @var DeliveryInterface
    */
   protected $delivery;
 
   /**
-   * @var \Drupal\workspaces\WorkspaceInterface
+   * @var WorkspaceInterface
    */
   protected $workspace;
 
   /**
    * DeliveryForwardForm constructor.
    *
-   * @param \Drupal\delivery\DeliveryService $delivery_service
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param DeliveryService $delivery_service
+   * @param MessengerInterface $messenger
    */
   public function __construct(DeliveryService $delivery_service, MessengerInterface $messenger) {
     $this->deliveryService = $delivery_service;
diff --git a/src/Form/DeliveryPushForm.php b/src/Form/DeliveryPushForm.php
index 4fa171b..643be5f 100644
--- a/src/Form/DeliveryPushForm.php
+++ b/src/Form/DeliveryPushForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\delivery\Form;
 
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -17,30 +18,30 @@ class DeliveryPushForm extends ConfirmFormBase {
   public static $BATCH_THRESHOLD = 10;
 
   /**
-   * @var \Drupal\delivery\DeliveryInterface
+   * @var DeliveryInterface
    *  The delivery object.
    */
   protected $delivery;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    *  The entity type manager service.
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @var EntityRepositoryInterface $entityRepository
    *  The entity repository service.
    */
   protected $entityRepository;
 
   /**
-   * @var \Drupal\delivery\DeliveryService
+   * @var DeliveryService
    */
   protected $deliveryService;
 
   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    *  The messenger service.
    */
   protected $messenger;
@@ -48,10 +49,10 @@ class DeliveryPushForm extends ConfirmFormBase {
   /**
    * DeliveryPushConfirmFom constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
-   * @param \Drupal\delivery\DeliveryService $deliveryService
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param MessengerInterface $messenger
+   * @param EntityRepositoryInterface $entity_repository
+   * @param DeliveryService $deliveryService
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ -87,7 +88,7 @@ class DeliveryPushForm extends ConfirmFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function getCancelUrl() {
     return $this->delivery->toUrl();
diff --git a/src/Form/MenuPushForm.php b/src/Form/MenuPushForm.php
index f7bf59c..768fb6a 100644
--- a/src/Form/MenuPushForm.php
+++ b/src/Form/MenuPushForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\delivery\Form;
 
+use Drupal\workspaces\WorkspaceManagerInterface;
+use Drupal\workspaces\WorkspaceAssociationInterface;
+use Drupal\workspaces\WorkspaceInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -55,16 +59,16 @@ class MenuPushForm extends ConfirmFormBase {
   }
 
   public function process($entityId) {
-    /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager */
+    /** @var WorkspaceManagerInterface $workspaceManager */
     $workspaceManager = \Drupal::service('workspaces.manager');
 
     $activeWorkspace = $workspaceManager->getActiveWorkspace();
 
-    /** @var \Drupal\workspaces\WorkspaceAssociationInterface $workspaceAssiociaton */
+    /** @var WorkspaceAssociationInterface $workspaceAssiociaton */
     $workspaceAssiociaton = \Drupal::service('workspaces.association');
-    /** @var \Drupal\workspaces\WorkspaceInterface $parentWorkspace */
+    /** @var WorkspaceInterface $parentWorkspace */
     $parentWorkspace = $activeWorkspace->parent->entity;
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
 
     $entity = $storage->load($entityId);
@@ -102,7 +106,7 @@ class MenuPushForm extends ConfirmFormBase {
   }
 
   public static function differences($menu) {
-    /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager */
+    /** @var WorkspaceManagerInterface $workspaceManager */
     $workspaceManager = \Drupal::service('workspaces.manager');
 
     $source = $workspaceManager->getActiveWorkspace();
diff --git a/src/MenuLinkManager.php b/src/MenuLinkManager.php
index 58e36eb..7261b04 100644
--- a/src/MenuLinkManager.php
+++ b/src/MenuLinkManager.php
@@ -14,23 +14,23 @@ class MenuLinkManager implements MenuLinkManagerInterface {
   /**
    * The decorated menu link manager.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $innerMenuLinkManager;
 
   /**
    * The workspace manager service.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
    * Constructs a MenuLinkManager object.
    *
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager
+   * @param MenuLinkManagerInterface $menu_link_manager
    *   The menu link manager.
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager service.
    */
   public function __construct(MenuLinkManagerInterface $menu_link_manager, WorkspaceManagerInterface $workspace_manager) {
diff --git a/src/MenuTreeStorage.php b/src/MenuTreeStorage.php
index 89431e7..391375f 100644
--- a/src/MenuTreeStorage.php
+++ b/src/MenuTreeStorage.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\delivery;
 
+use Drupal\menu_link_content\MenuLinkContentInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Database\Connection;
@@ -21,38 +23,38 @@ class MenuTreeStorage extends CoreMenuTreeStorage {
   /**
    * The workspace manager service.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The workspace association service.
    *
-   * @var \Drupal\workspaces\WorkspaceAssociationInterface
+   * @var WorkspaceAssociationInterface
    */
   protected $workspaceAssociation;
 
   /**
    * MenuTreeStorage constructor.
    *
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   A Database connection to use for reading and writing configuration data.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $menu_cache_backend
+   * @param CacheBackendInterface $menu_cache_backend
    *   Cache backend instance for the extracted tree data.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspace_association
+   * @param WorkspaceAssociationInterface $workspace_association
    *   The workspace association service.
    * @param string $table
    *   A database table name to store configuration data in.
@@ -107,7 +109,7 @@ class MenuTreeStorage extends CoreMenuTreeStorage {
       $localLinks = parent::loadLinks($menu_name, $parameters);
       $this->currentWorkspace = NULL;
 
-      /** @var \Drupal\menu_link_content\MenuLinkContentInterface[] $workspace_revisions */
+      /** @var MenuLinkContentInterface[] $workspace_revisions */
       $workspace_revisions = isset($tracked_revisions['menu_link_content'])
         ? $this->entityTypeManager
           ->getStorage('menu_link_content')
@@ -164,7 +166,7 @@ class MenuTreeStorage extends CoreMenuTreeStorage {
     $affected_menus = parent::doSave($link);
     if ($link['provider'] === 'menu_link_content') {
       $entityId = $link['metadata']['entity_id'];
-      /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+      /** @var ContentEntityStorageInterface $storage */
       $storage = $this->entityTypeManager->getStorage('menu_link_content');
       // TODO: Integrate this into WorkspaceAssociation.
       $result = \Drupal::database()->select('workspace_association', 'wa')
@@ -174,7 +176,7 @@ class MenuTreeStorage extends CoreMenuTreeStorage {
         ->execute();
       while($row = $result->fetch()) {
         $this->currentWorkspace = $row->workspace;
-        /** @var \Drupal\menu_link_content\MenuLinkContentInterface $localLinkEntity */
+        /** @var MenuLinkContentInterface $localLinkEntity */
         $localLinkEntity = $storage->loadRevision($row->target_entity_revision_id);
         $pluginDefinition = $localLinkEntity->getPluginDefinition();
         $pluginDefinition['workspace'] = $row->workspace;
diff --git a/src/ParamConverter/DeliveryEntityConverter.php b/src/ParamConverter/DeliveryEntityConverter.php
index 76b317e..e91e704 100644
--- a/src/ParamConverter/DeliveryEntityConverter.php
+++ b/src/ParamConverter/DeliveryEntityConverter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\delivery\ParamConverter;
 
+use Drupal\workspaces\WorkspaceManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\ParamConverter\EntityConverter;
 
 /**
@@ -23,9 +25,9 @@ class DeliveryEntityConverter extends EntityConverter {
       unset($definition['load_latest_revision']);
     }
 
-    /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspacesManager */
+    /** @var WorkspaceManagerInterface $workspacesManager */
     $workspacesManager = \Drupal::service('workspaces.manager');
-    /** @var \Drupal\Core\Entity\EntityInterface $result */
+    /** @var EntityInterface $result */
     $result = parent::convert($value, $definition, $name, $defaults);
 
    if (
diff --git a/src/Plugin/views/field/DeliveryItemLabel.php b/src/Plugin/views/field/DeliveryItemLabel.php
index bfac1fc..17c8e70 100644
--- a/src/Plugin/views/field/DeliveryItemLabel.php
+++ b/src/Plugin/views/field/DeliveryItemLabel.php
@@ -18,7 +18,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class DeliveryItemLabel extends FieldPluginBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/views/field/DeliveryItemUrl.php b/src/Plugin/views/field/DeliveryItemUrl.php
index 522d335..9151796 100644
--- a/src/Plugin/views/field/DeliveryItemUrl.php
+++ b/src/Plugin/views/field/DeliveryItemUrl.php
@@ -20,17 +20,17 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class DeliveryItemUrl extends FieldPluginBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\workspaces\WorkspaceManagerInterface 
+   * @var WorkspaceManagerInterface 
    */
   protected $workspaceManager;
 
   /**
-   * @var \Drupal\workspaces\WorkspaceAssociationInterface 
+   * @var WorkspaceAssociationInterface 
    */
   protected $workspaceAssociation;
 
@@ -59,9 +59,9 @@ class DeliveryItemUrl extends FieldPluginBase implements ContainerFactoryPluginI
    * @param array $configuration
    * @param string $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspaceAssociation
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param WorkspaceManagerInterface $workspaceManager
+   * @param WorkspaceAssociationInterface $workspaceAssociation
    */
   public function __construct(
     array $configuration,
diff --git a/src/Plugin/views/field/InheritedContentField.php b/src/Plugin/views/field/InheritedContentField.php
index b48a9cf..8d8d1e6 100644
--- a/src/Plugin/views/field/InheritedContentField.php
+++ b/src/Plugin/views/field/InheritedContentField.php
@@ -24,12 +24,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class InheritedContentField extends FieldPluginBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
-   * @var \Drupal\delivery\DeliveryService
+   * @var DeliveryService
    */
   protected $deliveryService;
 
@@ -39,7 +39,7 @@ class InheritedContentField extends FieldPluginBase implements ContainerFactoryP
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition ,WorkspaceManagerInterface $workspace_manager, DeliveryService $delivery_service) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/views/filter/DeliveryWorkspaceFilter.php b/src/Plugin/views/filter/DeliveryWorkspaceFilter.php
index 841a605..c5c9214 100644
--- a/src/Plugin/views/filter/DeliveryWorkspaceFilter.php
+++ b/src/Plugin/views/filter/DeliveryWorkspaceFilter.php
@@ -24,12 +24,12 @@ class DeliveryWorkspaceFilter extends InOperator {
   const TARGET = 'workspaces_target_id';
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
@@ -39,8 +39,8 @@ class DeliveryWorkspaceFilter extends InOperator {
    * @param array $configuration
    * @param string $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    */
   public function __construct(array $configuration, string $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, WorkspaceManagerInterface $workspace_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/views/filter/RelevantDeliveryItems.php b/src/Plugin/views/filter/RelevantDeliveryItems.php
index 301f1c6..c81f69a 100644
--- a/src/Plugin/views/filter/RelevantDeliveryItems.php
+++ b/src/Plugin/views/filter/RelevantDeliveryItems.php
@@ -18,12 +18,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class RelevantDeliveryItems extends FilterPluginBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
@@ -33,8 +33,8 @@ class RelevantDeliveryItems extends FilterPluginBase {
    * @param array $configuration
    * @param string $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    */
   public function __construct(array $configuration, string $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, WorkspaceManagerInterface $workspace_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/views/filter/WorkspacesList.php b/src/Plugin/views/filter/WorkspacesList.php
index 78c9efc..da22303 100644
--- a/src/Plugin/views/filter/WorkspacesList.php
+++ b/src/Plugin/views/filter/WorkspacesList.php
@@ -20,7 +20,7 @@ class WorkspacesList extends InOperator {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -30,7 +30,7 @@ class WorkspacesList extends InOperator {
    * @param array $configuration
    * @param string $plugin_id
    * @param \Drupal\delivery\Plugin\views\filter\mixed $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(array $configuration, string $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/views/relationship/WorkspaceRevision.php b/src/Plugin/views/relationship/WorkspaceRevision.php
index 5f41d28..738c1ee 100644
--- a/src/Plugin/views/relationship/WorkspaceRevision.php
+++ b/src/Plugin/views/relationship/WorkspaceRevision.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\delivery\Plugin\views\relationship;
 
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Annotation\ViewsRelationship;
@@ -17,17 +18,17 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class WorkspaceRevision extends RelationshipPluginBase {
 
   /**
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\views\Plugin\ViewsHandlerManager
+   * @var ViewsHandlerManager
    */
   protected $joinHandler;
 
@@ -94,7 +95,7 @@ class WorkspaceRevision extends RelationshipPluginBase {
     }
 
 
-    /** @var \Drupal\views\Plugin\views\query\Sql $query */
+    /** @var Sql $query */
     $query = $this->query;
     $query_base_table = $this->relationship ?: $this->view->storage->get('base_table');
 
diff --git a/src/Plugin/views/traits/CurrentWorkspaceViewsFilterTrait.php b/src/Plugin/views/traits/CurrentWorkspaceViewsFilterTrait.php
index 4661a4a..a4a5575 100644
--- a/src/Plugin/views/traits/CurrentWorkspaceViewsFilterTrait.php
+++ b/src/Plugin/views/traits/CurrentWorkspaceViewsFilterTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\delivery\Plugin\views\traits;
 
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\views\Plugin\ViewsHandlerManager;
 use Drupal\workspaces\WorkspaceManagerInterface;
@@ -9,21 +10,21 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 
 trait CurrentWorkspaceViewsFilterTrait {
   /**
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
   /**
    * Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Views Handler Plugin Manager.
    *
-   * @var \Drupal\views\Plugin\ViewsHandlerManager
+   * @var ViewsHandlerManager
    */
   protected $joinHandler;
 
@@ -36,11 +37,11 @@ trait CurrentWorkspaceViewsFilterTrait {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager Service.
-   * @param \Drupal\views\Plugin\ViewsHandlerManager $join_handler
+   * @param ViewsHandlerManager $join_handler
    *   Views Handler Plugin Manager.
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   Workspace manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ViewsHandlerManager $join_handler, WorkspaceManagerInterface $workspace_manager) {
@@ -65,7 +66,7 @@ trait CurrentWorkspaceViewsFilterTrait {
    * {@inheritdoc}
    */
   public function query() {
-    /** @var \Drupal\views\Plugin\views\query\Sql $query */
+    /** @var Sql $query */
     $query = $this->query;
     $query_base_table = $this->relationship ?: $this->view->storage->get('base_table');
 
diff --git a/src/Plugin/views/traits/EntityDeliveryStatusTrait.php b/src/Plugin/views/traits/EntityDeliveryStatusTrait.php
index 925d510..8d4b91a 100644
--- a/src/Plugin/views/traits/EntityDeliveryStatusTrait.php
+++ b/src/Plugin/views/traits/EntityDeliveryStatusTrait.php
@@ -24,21 +24,21 @@ trait EntityDeliveryStatusTrait {
   /**
    * Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Views Handler Plugin Manager.
    *
-   * @var \Drupal\views\Plugin\ViewsHandlerManager
+   * @var ViewsHandlerManager
    */
   protected $joinHandler;
 
   /**
    * The workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
 
@@ -100,11 +100,11 @@ trait EntityDeliveryStatusTrait {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager Service.
-   * @param \Drupal\views\Plugin\ViewsHandlerManager $join_handler
+   * @param ViewsHandlerManager $join_handler
    *   Views Handler Plugin Manager.
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager
+   * @param WorkspaceManagerInterface $workspaceManager
    *   The workspace manager.
    * @param string $defaultWorkspace
    *   The default workspace id.
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 91f877a..ad192ce 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -18,23 +18,23 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory service.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, ConfigFactoryInterface $config) {
diff --git a/src/WorkspaceAssigment.php b/src/WorkspaceAssigment.php
index a57462c..d3b884f 100644
--- a/src/WorkspaceAssigment.php
+++ b/src/WorkspaceAssigment.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\delivery;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
 
@@ -14,7 +16,7 @@ class WorkspaceAssigment {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -27,7 +29,7 @@ class WorkspaceAssigment {
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ -36,11 +38,11 @@ class WorkspaceAssigment {
   /**
    * Return workspaces ids.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getUserWorkspaces(AccountInterface $account) {
     if (!isset($this->userWorkspaces[$account->id()])) {
diff --git a/src/WorkspaceListBuilder.php b/src/WorkspaceListBuilder.php
index afd483d..0878567 100644
--- a/src/WorkspaceListBuilder.php
+++ b/src/WorkspaceListBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\delivery;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Render\RendererInterface;
@@ -22,26 +24,26 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class WorkspaceListBuilder extends OriginalWorkspaceListBuilder {
 
   /**
-   * @var \Drupal\delivery\WorkspaceAssigment
+   * @var WorkspaceAssigment
    */
   protected $workspaceAssigment;
 
   /**
    * The workspace repository service.
    *
-   * @var \Drupal\workspaces\WorkspaceRepositoryInterface
+   * @var WorkspaceRepositoryInterface
    */
   protected $workspaceRepository;
 
   /**
    * WorkspaceListBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\delivery\WorkspaceAssigment $workspace_assigment
-   * @param \Drupal\workspaces\WorkspaceRepositoryInterface $workspace_repository
+   * @param EntityTypeInterface $entity_type
+   * @param EntityStorageInterface $storage
+   * @param WorkspaceManagerInterface $workspace_manager
+   * @param RendererInterface $renderer
+   * @param WorkspaceAssigment $workspace_assigment
+   * @param WorkspaceRepositoryInterface $workspace_repository
    */
   public function __construct(
     EntityTypeInterface $entity_type,
@@ -76,8 +78,8 @@ class WorkspaceListBuilder extends OriginalWorkspaceListBuilder {
    * @return array
    *   An array of entity IDs.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntityIds() {
     $query = $this->getStorage()->getQuery()
@@ -148,8 +150,8 @@ class WorkspaceListBuilder extends OriginalWorkspaceListBuilder {
    * Return workpsaces ids.
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getUserWorkspaces() {
     $account = \Drupal::currentUser();
diff --git a/tests/src/Kernel/MergeBlacklistedFieldsTest.php b/tests/src/Kernel/MergeBlacklistedFieldsTest.php
index 1608d0e..e211f98 100644
--- a/tests/src/Kernel/MergeBlacklistedFieldsTest.php
+++ b/tests/src/Kernel/MergeBlacklistedFieldsTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\delivery\Kernel;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\conflict\ConflictResolver\ConflictResolverManagerInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
@@ -44,7 +48,7 @@ class MergeBlacklistedFieldsTest extends KernelTestBase {
   ];
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -61,7 +65,7 @@ class MergeBlacklistedFieldsTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', ['key_value_expire', 'sequences']);
@@ -129,10 +133,10 @@ class MergeBlacklistedFieldsTest extends KernelTestBase {
    * Test blacklisted fields merge.
    */
   public function testBlacklistFieldsMerge() {
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('entity_test_revpub');
 
-    /** @var \Drupal\conflict\ConflictResolver\ConflictResolverManagerInterface $conflictManager */
+    /** @var ConflictResolverManagerInterface $conflictManager */
     $conflictManager = $this->container->get('conflict_resolver.manager');
 
     $this->switchToWorkspace('live');
@@ -143,7 +147,7 @@ class MergeBlacklistedFieldsTest extends KernelTestBase {
       'field_test_blacklisted' => 'test live value',
     ]);
     $a->save();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $x */
+    /** @var ContentEntityInterface $x */
     $this->switchToWorkspace('stage');
 
     $b = $storage->createRevision($a);
@@ -164,7 +168,7 @@ class MergeBlacklistedFieldsTest extends KernelTestBase {
     $d->save();
 
     $conflicts = $conflictManager->resolveConflicts($c, $d, $a);
-    $this->assertEqual($conflicts, ['field_test' => 'conflict_local_remote']);
+    $this->assertEquals($conflicts, ['field_test' => 'conflict_local_remote']);
   }
 
 }
diff --git a/tests/src/Unit/MissingMethodTest.php b/tests/src/Unit/MissingMethodTest.php
index 6dad053..f1821b0 100644
--- a/tests/src/Unit/MissingMethodTest.php
+++ b/tests/src/Unit/MissingMethodTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\delivery\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\delivery\Form\DeliveryPushForm;
 use Drupal\Tests\UnitTestCase;
 
@@ -10,34 +11,34 @@ class MissingMethodTest extends UnitTestCase {
   const METHOD = 'pushChangesBatch';
 
   /**
-   * @var \Drupal\delivery\Form\DeliveryPushForm
+   * @var DeliveryPushForm
    */
   protected $form;
 
   /**
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $entityTypeManager;
 
   /**
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $messenger;
 
   /**
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $entityRepository;
 
   /**
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $deliveryService;
 
   /**
    * Set up the form class.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->createMock('Drupal\Core\Entity\EntityTypeManagerInterface');
     $this->messenger = $this->createMock('Drupal\Core\Messenger\MessengerInterface');
