diff --git a/cmrf_call_report/src/Controller/CMRFCallreportController.php b/cmrf_call_report/src/Controller/CMRFCallreportController.php
index c61b042..b121590 100644
--- a/cmrf_call_report/src/Controller/CMRFCallreportController.php
+++ b/cmrf_call_report/src/Controller/CMRFCallreportController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cmrf_call_report\Controller;
 
+use Drupal\Core\Database\Driver\mysql\Connection;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -13,7 +14,7 @@ class CMRFCallreportController extends ControllerBase {
   /**
    * Drupal\Core\Database\Driver\mysql\Connection definition.
    *
-   * @var \Drupal\Core\Database\Driver\mysql\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -48,7 +49,7 @@ class CMRFCallreportController extends ControllerBase {
       $scheduled_date = '';
       if (!empty($call->scheduled_date)) {
         $scheduled_date = new \DateTime($call->scheduled_date);
-        $scheduled_date = format_date($scheduled_date->getTimestamp());
+        $scheduled_date = \Drupal::service('date.formatter')->format($scheduled_date->getTimestamp());
       }
       $caching_until = '';
       if (!empty($call->cached_until)) {
diff --git a/cmrf_call_report/src/Form/CMRFCallreportPurgeForm.php b/cmrf_call_report/src/Form/CMRFCallreportPurgeForm.php
index 79d88d9..b4ffc17 100644
--- a/cmrf_call_report/src/Form/CMRFCallreportPurgeForm.php
+++ b/cmrf_call_report/src/Form/CMRFCallreportPurgeForm.php
@@ -13,14 +13,14 @@ class CMRFCallreportPurgeForm  extends ConfirmFormBase {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a new DblogClearLogConfirmForm.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(Connection $connection) {
diff --git a/cmrf_core.module b/cmrf_core.module
index 643f703..66af39f 100644
--- a/cmrf_core.module
+++ b/cmrf_core.module
@@ -1,4 +1,5 @@
 <?php
+use Drupal\cmrf_core\Core;
 if (!class_exists('\CMRF\PersistenceLayer\SQLPersistingCallFactory')) {
   require_once dirname(__FILE__) . '/vendor/autoload.php';
 }
@@ -12,13 +13,13 @@ if (!class_exists('\CMRF\PersistenceLayer\SQLPersistingCallFactory')) {
  * Implements hook_cache_flush().
  */
 function cmrf_core_cache_flush() {
-  /** @var \Drupal\cmrf_core\Core $core */
+  /** @var Core $core */
   $core = Drupal::service('cmrf_core.core');
   $core->getFactory()->purgeCachedCalls();
 }
 
 function cmrf_core_cron() {
-  /** @var \Drupal\cmrf_core\Core $core */
+  /** @var Core $core */
   $core = Drupal::service('cmrf_core.core');
   $core->getFactory()->purgeCachedCalls();
 }
diff --git a/cmrf_example/cmrf_example.install b/cmrf_example/cmrf_example.install
index 498f6d2..97e1fb7 100644
--- a/cmrf_example/cmrf_example.install
+++ b/cmrf_example/cmrf_example.install
@@ -1,8 +1,9 @@
 <?php
 
+use Drupal\cmrf_core\Core;
 function cmrf_example_install() {
   $config=\Drupal::configFactory()->getEditable('cmrf_example.settings');
-  /** @var \Drupal\cmrf_core\Core $core */
+  /** @var Core $core */
   $core=\Drupal::service('cmrf_core.core');
   $identifier=$core->registerConnector('cmrf_example','default');
   $config->set('connector',$identifier);
@@ -11,7 +12,7 @@ function cmrf_example_install() {
 
 function cmrf_example_uninstall() {
   $config=\Drupal::config('cmrf_example.settings');
-  /** @var \Drupal\cmrf_core\Core $core */
+  /** @var Core $core */
   $core=\Drupal::service('cmrf_core.core');
   $core->unregisterConnector($config->get('connector'));
 }
diff --git a/cmrf_example/tests/src/Functional/LoadTest.php b/cmrf_example/tests/src/Functional/LoadTest.php
index c559a65..db038e4 100644
--- a/cmrf_example/tests/src/Functional/LoadTest.php
+++ b/cmrf_example/tests/src/Functional/LoadTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\cmrf_example\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\cmrf_example\CiviClient;
 use Drupal\cmrf_core\Entity\CMRFProfile;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
@@ -23,14 +25,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $entity=CMRFProfile::load('default');
     //this test will fail until you set up those properties correctly.
@@ -42,7 +44,7 @@ class LoadTest extends BrowserTestBase {
 
   public function testService() {
 
-    /** @var \Drupal\cmrf_example\CiviClient $client */
+    /** @var CiviClient $client */
     $client = \Drupal::service('cmrf_example.client');
     $this->assertTrue($client != NULL);
     $this->assertTrue($client->core != NULL);
diff --git a/cmrf_views/src/Entity/CMRFDatasetRelationship.php b/cmrf_views/src/Entity/CMRFDatasetRelationship.php
index a0d8496..752bdb3 100644
--- a/cmrf_views/src/Entity/CMRFDatasetRelationship.php
+++ b/cmrf_views/src/Entity/CMRFDatasetRelationship.php
@@ -43,7 +43,7 @@ use Drupal\Core\Config\Entity\ConfigEntityBase;
 class CMRFDatasetRelationship extends ConfigEntityBase implements CMRFDatasetRelationshipInterface {
 
   /**
-   * @var \Drupal\cmrf_views\Entity\CMRFDataset
+   * @var CMRFDataset
    */
   public $referencing_dataset;
 
diff --git a/cmrf_views/src/Plugin/views/field/File.php b/cmrf_views/src/Plugin/views/field/File.php
index 013b850..3cf783a 100644
--- a/cmrf_views/src/Plugin/views/field/File.php
+++ b/cmrf_views/src/Plugin/views/field/File.php
@@ -1,5 +1,7 @@
 <?php namespace Drupal\cmrf_views\Plugin\views\field;
 
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\cmrf_core\Core;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Form\FormStateInterface;
@@ -24,7 +26,7 @@ class File extends FieldPluginBase {
    * @param array                                      $configuration
    * @param string                                     $plugin_id
    * @param mixed                                      $plugin_definition
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Core $core) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -32,7 +34,7 @@ class File extends FieldPluginBase {
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array                                                     $configuration
    * @param string                                                    $plugin_id
    * @param mixed                                                     $plugin_definition
@@ -211,7 +213,7 @@ class File extends FieldPluginBase {
           $file_uri_path  = $uri_path . '/' . $attachment['id'] . '.' . $file['extension'];
           $file_real_path = $real_path . '/' . $attachment['id'] . '.' . $file['extension'];
           if (!file_exists($file_real_path)) {
-            system_retrieve_file($attachment['url'], $file_uri_path, FALSE, FILE_EXISTS_REPLACE);
+            system_retrieve_file($attachment['url'], $file_uri_path, FALSE, FileSystemInterface::EXISTS_REPLACE);
           }
           if (file_exists($file_real_path)) {
             // Load the image style.
diff --git a/cmrf_views/src/Plugin/views/field/JSON.php b/cmrf_views/src/Plugin/views/field/JSON.php
index 1af4534..2c7584b 100644
--- a/cmrf_views/src/Plugin/views/field/JSON.php
+++ b/cmrf_views/src/Plugin/views/field/JSON.php
@@ -4,6 +4,7 @@
 namespace Drupal\cmrf_views\Plugin\views\field;
 
 
+use Drupal\views\Plugin\views\field\Standard;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
@@ -18,7 +19,7 @@ use Drupal\views\ViewExecutable;
  *
  * @ViewsField("cmrf_views_json")
  */
-class JSON extends \Drupal\views\Plugin\views\field\Standard implements MultiItemsFieldHandlerInterface {
+class JSON extends Standard implements MultiItemsFieldHandlerInterface {
 
   /**
    * Does the field supports multiple field values.
@@ -68,7 +69,7 @@ class JSON extends \Drupal\views\Plugin\views\field\Standard implements MultiIte
       // Render an item list from the JSON structure as default markup.
       '#item_list' => $this->render_item_item_list($item),
     ];
-    return render($render);
+    return \Drupal::service('renderer')->render($render);
   }
 
   public function render_item_item_list($item) {
diff --git a/cmrf_views/src/Plugin/views/field/OptionList.php b/cmrf_views/src/Plugin/views/field/OptionList.php
index cbe7010..57f67a4 100644
--- a/cmrf_views/src/Plugin/views/field/OptionList.php
+++ b/cmrf_views/src/Plugin/views/field/OptionList.php
@@ -1,5 +1,6 @@
 <?php namespace Drupal\cmrf_views\Plugin\views\field;
 
+use Drupal\views\Plugin\views\field\Standard;
 use Drupal\views\ResultRow;
 
 /**
@@ -9,7 +10,7 @@ use Drupal\views\ResultRow;
  *
  * @ViewsField("cmrf_views_optionlist")
  */
-class OptionList extends \Drupal\views\Plugin\views\field\Standard {
+class OptionList extends Standard {
 
   public function getValue(ResultRow $values, $field = NULL) {
     $alias = isset($field) ? $this->aliases[$field] : $this->field_alias;
diff --git a/cmrf_views/src/Plugin/views/query/API.php b/cmrf_views/src/Plugin/views/query/API.php
index bda06b6..4482a89 100644
--- a/cmrf_views/src/Plugin/views/query/API.php
+++ b/cmrf_views/src/Plugin/views/query/API.php
@@ -23,12 +23,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class API extends QueryPluginBase {
 
   /**
-   * @var \Drupal\cmrf_core\Core
+   * @var Core
    */
   protected $core;
 
   /**
-   * @var \Drupal\views\ViewsData
+   * @var ViewsData
    */
   protected $viewsData;
 
@@ -38,8 +38,8 @@ class API extends QueryPluginBase {
    * @param array                   $configuration
    * @param                         $plugin_id
    * @param                         $plugin_definition
-   * @param \Drupal\cmrf_core\Core  $core
-   * @param \Drupal\views\ViewsData $views_data
+   * @param Core $core
+   * @param ViewsData $views_data
    */
   public function __construct(
     array $configuration,
diff --git a/cmrf_webform/cmrf_webform.module b/cmrf_webform/cmrf_webform.module
index 6884998..4a60892 100644
--- a/cmrf_webform/cmrf_webform.module
+++ b/cmrf_webform/cmrf_webform.module
@@ -92,7 +92,7 @@ function cmrf_webform_webform_delete(WebformInterface $entity) {
 /**
  * Implements hook_form_alter.
  */
-function cmrf_webform_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function cmrf_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $webform = $form_state->getFormObject();
   if ($webform instanceof EntityFormInterface) {
     $service = \Drupal::service('cmrf_webform.defaults_manager');
diff --git a/cmrf_webform/src/Form/CMRFWebformFormBase.php b/cmrf_webform/src/Form/CMRFWebformFormBase.php
index bb82f6f..f1d588e 100644
--- a/cmrf_webform/src/Form/CMRFWebformFormBase.php
+++ b/cmrf_webform/src/Form/CMRFWebformFormBase.php
@@ -11,7 +11,7 @@ abstract class CMRFWebformFormBase extends EntityForm {
   /**
    * Constructs a Option Set object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/src/CallFactory.php b/src/CallFactory.php
index 42aa8c2..50bf99f 100644
--- a/src/CallFactory.php
+++ b/src/CallFactory.php
@@ -8,7 +8,7 @@ use CMRF\PersistenceLayer\SQLPersistingCallFactory;
 class CallFactory extends SQLPersistingCallFactory {
 
   /**
-   * @var \Drupal\cmrf_core\Core;
+   * @var Core ;
    */
   private $core;
   protected $table_name;
@@ -31,14 +31,14 @@ class CallFactory extends SQLPersistingCallFactory {
   }
 
   /**
-   * @return \Drupal\cmrf_core\Core
+   * @return Core
    */
   public function getCore(): Core {
     return $this->core;
   }
 
   /**
-   * @param \Drupal\cmrf_core\Core $core
+   * @param Core $core
    */
   public function setCore(Core $core): void {
     $this->core = $core;
diff --git a/tests/src/Functional/InstantiationTests.php b/tests/src/Functional/InstantiationTests.php
index f9754dd..9178c5f 100644
--- a/tests/src/Functional/InstantiationTests.php
+++ b/tests/src/Functional/InstantiationTests.php
@@ -25,7 +25,7 @@ class InstantiationTests extends KernelTestBase {
   protected $profile = 'minimal';
   public static $modules = ['cmrf_core'];
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['cmrf_core']);
   }
@@ -36,7 +36,7 @@ class InstantiationTests extends KernelTestBase {
     $prop=new \ReflectionProperty('\Drupal\cmrf_core\Core','callfactory');
     $prop->setAccessible(true);
     $factory=$prop->getValue($core);
-    $this->assertNotEqual($factory,null);
+    $this->assertNotEquals($factory, null);
     $prop=new \ReflectionProperty('\CMRF\PersistenceLayer\SQLPersistingCallFactory','table_name');
     $prop->setAccessible(true);
     $table=$prop->getValue($factory);
