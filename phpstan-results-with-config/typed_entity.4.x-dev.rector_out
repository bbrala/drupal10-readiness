modules/contrib/typed_entity/modules/typed_entity_example/src/Plugin/TypedRepositories/ArticleRepository.php
modules/contrib/typed_entity/modules/typed_entity_example/src/Plugin/TypedRepositories/UserRepository.php
modules/contrib/typed_entity/modules/typed_entity_example/src/Render/Article/Full.php
modules/contrib/typed_entity/modules/typed_entity_example/src/WrappedEntities/Article.php
modules/contrib/typed_entity/modules/typed_entity_example/src/WrappedEntities/BakingArticle.php
modules/contrib/typed_entity/modules/typed_entity_example/src/WrappedEntities/User.php
modules/contrib/typed_entity/modules/typed_entity_example/tests/src/Unit/Render/Article/FullTest.php
modules/contrib/typed_entity/modules/typed_entity_example/tests/src/Unit/WrappedEntities/UserTest.php
modules/contrib/typed_entity/modules/typed_entity_example/typed_entity_example.module
modules/contrib/typed_entity/modules/typed_entity_ui/src/Controller/ExploreDetails.php
modules/contrib/typed_entity/modules/typed_entity_ui/src/Form/ExploreForm.php
modules/contrib/typed_entity/modules/typed_entity_ui/src/Form/RepositoryTable/BuildRepositoryTableService.php
modules/contrib/typed_entity/modules/typed_entity_ui/src/Form/RepositoryTable/RepositoryTableRequest.php
modules/contrib/typed_entity/modules/typed_entity_ui/src/Form/RepositoryTable/RepositoryTableResponse.php
modules/contrib/typed_entity/modules/typed_entity_ui/tests/src/Functional/ExploreDetailsTest.php
modules/contrib/typed_entity/modules/typed_entity_ui/typed_entity_ui.install
modules/contrib/typed_entity/modules/typed_entity_ui/typed_entity_ui.module
modules/contrib/typed_entity/src/Annotation/ClassWithVariants.php
modules/contrib/typed_entity/src/Annotation/ClassWithVariantsInterface.php
modules/contrib/typed_entity/src/Annotation/TypedRepository.php
modules/contrib/typed_entity/src/Annotation/VariantInterface.php
modules/contrib/typed_entity/src/EntityWrapperInterface.php
modules/contrib/typed_entity/src/InvalidValueException.php
modules/contrib/typed_entity/src/Render/TypedEntityRendererBase.php
modules/contrib/typed_entity/src/Render/TypedEntityRendererInterface.php
modules/contrib/typed_entity/src/RepositoryManager.php
modules/contrib/typed_entity/src/TypedEntityContext.php
modules/contrib/typed_entity/src/TypedRepositories/TypedRepositoryBase.php
modules/contrib/typed_entity/src/TypedRepositories/TypedRepositoryInterface.php
modules/contrib/typed_entity/src/TypedRepositoryPluginManager.php
modules/contrib/typed_entity/src/WrappedEntities/WrappedEntityBase.php
modules/contrib/typed_entity/src/WrappedEntities/WrappedEntityInterface.php
modules/contrib/typed_entity/src/WrappedEntityVariants/EmptyFieldVariantCondition.php
modules/contrib/typed_entity/src/WrappedEntityVariants/FieldValueVariantCondition.php
modules/contrib/typed_entity/src/WrappedEntityVariants/VariantConditionBase.php
modules/contrib/typed_entity/src/WrappedEntityVariants/VariantConditionInterface.php
modules/contrib/typed_entity/tests/modules/typed_entity_test/src/Plugin/TypedRepositories/ArticleRepository.php
modules/contrib/typed_entity/tests/modules/typed_entity_test/src/Plugin/TypedRepositories/NodeRepository.php
modules/contrib/typed_entity/tests/modules/typed_entity_test/src/Plugin/TypedRepositories/PageRepository.php
modules/contrib/typed_entity/tests/modules/typed_entity_test/src/Plugin/TypedRepositories/UserRepository.php
modules/contrib/typed_entity/tests/modules/typed_entity_test/src/Render/Article/ConditionalRenderer.php
modules/contrib/typed_entity/tests/modules/typed_entity_test/src/Render/Article/Teaser.php
modules/contrib/typed_entity/tests/modules/typed_entity_test/src/Render/Page/Base.php
modules/contrib/typed_entity/tests/modules/typed_entity_test/src/WrappedEntities/Article.php
modules/contrib/typed_entity/tests/modules/typed_entity_test/src/WrappedEntities/NewsArticle.php
modules/contrib/typed_entity/tests/modules/typed_entity_test/src/WrappedEntities/Node.php
modules/contrib/typed_entity/tests/modules/typed_entity_test/src/WrappedEntities/Page.php
modules/contrib/typed_entity/tests/modules/typed_entity_test/src/WrappedEntities/User.php
modules/contrib/typed_entity/tests/src/Kernel/EmptyFieldVariantConditionTest.php
modules/contrib/typed_entity/tests/src/Kernel/FieldValueVariantConditionTest.php
modules/contrib/typed_entity/tests/src/Kernel/KernelTestBase.php
modules/contrib/typed_entity/tests/src/Kernel/RepositoryManagerTest.php
modules/contrib/typed_entity/tests/src/Kernel/TypedEntityRendererTest.php
modules/contrib/typed_entity/tests/src/Kernel/TypedEntityRepositoryTest.php
modules/contrib/typed_entity/tests/src/Kernel/WrappedEntityBaseTest.php
modules/contrib/typed_entity/tests/src/Unit/RepositoryManagerTest.php
modules/contrib/typed_entity/typed_entity.module

35 files with changes
=====================

1) modules/contrib/typed_entity/typed_entity.module:55

    ---------- begin diff ----------
@@ @@
 /**
  * A type hinted helper for .module files to get the repository manager.
  *
- * @return \Drupal\typed_entity\RepositoryManager
+ * @return RepositoryManager
  *   The repository manager.
  */
 function typed_entity_repository_manager(): RepositoryManager {
@@ @@
 /**
  * Finds the renderer for the entity with the render array.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  * @param array $build
  *   The render array.
@@ @@
  *
  * @param array $variables
  *   The variables array.
- * @param \Drupal\Core\Entity\EntityInterface|null $entity
+ * @param EntityInterface|null $entity
  *   The entity.
  *
- * @return \Drupal\typed_entity\TypedEntityContext
+ * @return TypedEntityContext
  *   The render context.
  */
 function _typed_entity_build_render_context(array $variables, EntityInterface $entity = NULL): TypedEntityContext {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/typed_entity/tests/src/Unit/RepositoryManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_entity\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class RepositoryManagerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::get
    * @dataProvider getDataProvider
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function testGet($entity_type_id, $bundle, $times): void {
     $plugin_manager = $this->prophesize(TypedRepositoryPluginManager::class);
@@ @@
   /**
    * @covers ::get
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function testGetNull(): void {
     $plugin_manager = $this->prophesize(TypedRepositoryPluginManager::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/typed_entity/tests/src/Kernel/WrappedEntityBaseTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_entity\Kernel;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\typed_entity_test\WrappedEntities\Article;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\field\Traits\EntityReferenceTestTrait;
 use Drupal\typed_entity_test\WrappedEntities\Page;
@@ @@
   /**
    * A test node.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   private $node;

@@ @@
   /**
    * A test entity wrapper.
    *
-   * @var \Drupal\typed_entity_test\WrappedEntities\Article
+   * @var Article
    */
   private $wrapper;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ @@
    *
    * @covers ::wrapReferences
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testWrapReferences(): void {
     $page = Node::create([
@@ @@
    *
    * @covers ::wrapReference
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testWrapReference(): void {
     static::assertNull($this->wrapper->wrapReference('field_related_pages'));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/typed_entity/tests/src/Kernel/TypedEntityRepositoryTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_entity\Kernel;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\node\Entity\Node as DrupalNode;
 use Drupal\typed_entity_test\WrappedEntities\Article;
 use Drupal\typed_entity_test\WrappedEntities\NewsArticle;
@@ @@
    *
    * @covers ::wrap
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testWrap(): void {
     $article = DrupalNode::create([
@@ @@
    *
    * @covers ::wrapMultiple
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testWrapMultiple(): void {
     $repository = typed_entity_repository_manager()->get('node.article');
@@ @@
    *
    * @covers ::getQuery
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws EntityStorageException
+   * @throws PluginException
    */
   public function testGetQuery(): void {
     $repository = typed_entity_repository_manager()->get('node.article');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/typed_entity/tests/src/Kernel/TypedEntityRendererTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_entity\Kernel;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * A test article.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   private FieldableEntityInterface $article;

@@ @@
   /**
    * A test entity wrapper.
    *
-   * @var \Drupal\typed_entity_test\Plugin\TypedRepositories\ArticleRepository
+   * @var ArticleRepository
    */
   private ArticleRepository $articleRepository;

@@ @@
   /**
    * A test entity wrapper.
    *
-   * @var \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface|null
+   * @var TypedRepositoryInterface|null
    */
   private ?TypedRepositoryInterface $pageRepository;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
+   * @throws EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/typed_entity/tests/src/Kernel/RepositoryManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_entity\Kernel;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\node\Entity\Node;
 use Drupal\typed_entity\TypedRepositories\TypedRepositoryBase;
 use Drupal\typed_entity_test\Plugin\TypedRepositories\ArticleRepository;
@@ @@
    *
    * @covers ::repositoryFromEntity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testRepositoryFromEntity(): void {
     $node = Node::create([
@@ @@
    *
    * @covers ::wrap
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testWrap(): void {
     $node = Node::create([
@@ @@
    *
    * @covers ::wrapMultiple
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testWrapMultiple(): void {
     $manager = typed_entity_repository_manager();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/typed_entity/tests/src/Kernel/KernelTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_entity\Kernel;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase as BaseTestsKernelTestBase;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ @@
    * @return array
    *   An array of article nodes.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createArticles(): array {
     $node = Node::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/typed_entity/tests/src/Kernel/FieldValueVariantConditionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_entity\Kernel;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\node\Entity\Node;
 use Drupal\typed_entity\InvalidValueException;
 use Drupal\typed_entity\TypedEntityContext;
@@ @@
    *
    * @covers ::evaluate
    *
-   * @throws \Drupal\typed_entity\InvalidValueException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidValueException
+   * @throws EntityStorageException
    */
   public function testEvalutate(): void {
     $article = Node::create([
@@ @@
    *
    * @covers ::validateContext
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testValidateContextNoField(): void {
     $node = Node::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/typed_entity/tests/src/Kernel/EmptyFieldVariantConditionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_entity\Kernel;

+use Drupal\typed_entity\InvalidValueException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\node\Entity\Node;
 use Drupal\typed_entity\TypedEntityContext;
 use Drupal\typed_entity\WrappedEntityVariants\EmptyFieldVariantCondition;
@@ @@
    *
    * @covers ::evaluate
    *
-   * @throws \Drupal\typed_entity\InvalidValueException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\typed_entity\InvalidValueException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidValueException
+   * @throws EntityStorageException
+   * @throws InvalidValueException
+   * @throws EntityStorageException
    */
   public function testEvalutate(): void {
     $article = Node::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/typed_entity/tests/modules/typed_entity_test/src/Render/Article/ConditionalRenderer.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The state manager.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   private StateInterface $state;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/typed_entity/src/WrappedEntityVariants/VariantConditionInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_entity\WrappedEntityVariants;

+use Drupal\typed_entity\InvalidValueException;
 use Drupal\Core\StringTranslation\TranslatableMarkup;

 /**
@@ @@
    * @return bool
    *   TRUE if the condition is fulfilled.
    *
-   * @throws \Drupal\typed_entity\InvalidValueException
+   * @throws InvalidValueException
    */
   public function evaluate(): bool;

@@ @@
   /**
    * A human readable summary of the condition. Used for interface purposes.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The summary.
    */
   public function summary(): TranslatableMarkup;
@@ @@
   /**
    * Validates the context.
    *
-   * @throws \Drupal\typed_entity\InvalidValueException
+   * @throws InvalidValueException
    */
   public function validateContext(): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/typed_entity/src/WrappedEntityVariants/VariantConditionBase.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The context.
    *
-   * @var \Drupal\typed_entity\TypedEntityContext
+   * @var TypedEntityContext
    */
   protected TypedEntityContext $context;

@@ @@
   /**
    * VariantConditionBase constructor.
    *
-   * @param \Drupal\typed_entity\TypedEntityContext|null $context
+   * @param TypedEntityContext|null $context
    *   The context.
    * @param bool $is_negated
    *   Inverse the result of the evaluation.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/typed_entity/src/WrappedEntityVariants/FieldValueVariantCondition.php:34

    ---------- begin diff ----------
@@ @@
    *   Name of the field that contains the data.
    * @param mixed $value
    *   The value to check for.
-   * @param \Drupal\typed_entity\TypedEntityContext $context
+   * @param TypedEntityContext $context
    *   The context.
    * @param bool $is_negated
    *   Inverse the result of the evaluation.
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\typed_entity\InvalidValueException
+   * @throws InvalidValueException
    *
    * @SuppressWarnings(PHPMD.StaticAccess)
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/typed_entity/src/WrappedEntityVariants/EmptyFieldVariantCondition.php:15

    ---------- begin diff ----------
@@ @@
    *
    * @param string $field_name
    *   Name of the field that contains the data.
-   * @param \Drupal\typed_entity\TypedEntityContext $context
+   * @param TypedEntityContext $context
    *   The context.
    * @param bool $is_negated
    *   Inverse the result of the evaluation.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/typed_entity/src/WrappedEntities/WrappedEntityInterface.php:17

    ---------- begin diff ----------
@@ @@
    * entity. In code you maintain/control you should always pass a wrapper and
    * work with its methods.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The wrapped entity.
    */
   public function getEntity(): EntityInterface;
@@ @@
    * class, but not the container itself. Every call to this method must return
    * a new instance of this class; that is, it may not implement a singleton.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this instance should use.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to wrap.
    */
   public static function create(ContainerInterface $container, EntityInterface $entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/typed_entity/src/WrappedEntities/WrappedEntityBase.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected EntityInterface $entity;

@@ @@
   /**
    * The view builder.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface|null
+   * @var EntityViewBuilderInterface|null
    */
   protected ?EntityViewBuilderInterface $viewBuilder;

@@ @@
   /**
    * The repository manager.
    *
-   * @var \Drupal\typed_entity\RepositoryManager|null
+   * @var RepositoryManager|null
    */
   protected ?RepositoryManager $repositoryManager;

@@ @@
   /**
    * WrappedEntityBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to wrap.
    */
   public function __construct(EntityInterface $entity) {
@@ @@
    * @param string $field_name
    *   The name of the entity reference field.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface[]
+   * @return WrappedEntityInterface[]
    *   The wrapped referenced entities.
    */
   public function wrapReferences(string $field_name): array {
@@ @@
    * @param string $field_name
    *   The name of the entity reference field.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface|null
+   * @return WrappedEntityInterface|null
    *   The wrapped referenced entity.
    */
   public function wrapReference(string $field_name): ?WrappedEntityInterface {
@@ @@
   /**
    * Lazy initialized of the repository manager.
    *
-   * @return \Drupal\typed_entity\RepositoryManager
+   * @return RepositoryManager
    *   The repository manager.
    */
   protected function repositoryManager(): RepositoryManager {
@@ @@
   /**
    * Lazy initialized of the view builder.
    *
-   * @return \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @return EntityViewBuilderInterface
    *   The repository manager.
    *
    * @SuppressWarnings(PHPMD.StaticAccess)
@@ @@
    *
    * This is mostly here for testing ergonomics.
    *
-   * @param \Drupal\Core\Entity\EntityViewBuilderInterface $view_builder
+   * @param EntityViewBuilderInterface $view_builder
    *   The view builder.
    */
   public function setViewBuilder(EntityViewBuilderInterface $view_builder): void {
@@ @@
    *
    * This is mostly here for testing ergonomics.
    *
-   * @param \Drupal\typed_entity\RepositoryManager $repository_manager
+   * @param RepositoryManager $repository_manager
    *   The manager.
    */
   public function setRepositoryManager(RepositoryManager $repository_manager): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/typed_entity/src/TypedRepositoryPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/typed_entity/src/TypedRepositories/TypedRepositoryInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_entity\TypedRepositories;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\typed_entity\EntityWrapperInterface;
@@ @@
   /**
    * Gets a query to start finding items.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The query to execute.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getQuery(): QueryInterface;

@@ @@
    * Override this method in your repository for more nuanced rules on when to
    * use a wrapper or another.
    *
-   * @param \Drupal\typed_entity\TypedEntityContext $context
+   * @param TypedEntityContext $context
    *   The context used for render.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface|null
+   * @return WrappedEntityInterface|null
    *   The first renderer that applies.
    */
   public function wrapperFactory(TypedEntityContext $context): ?WrappedEntityInterface;
@@ @@
    * Override this method in your repository for more nuanced rules on when to
    * use a renderer or another.
    *
-   * @param \Drupal\typed_entity\TypedEntityContext $context
+   * @param TypedEntityContext $context
    *   The context used for render.
    *
-   * @return \Drupal\typed_entity\Render\TypedEntityRendererInterface|null
+   * @return TypedEntityRendererInterface|null
    *   The first renderer that applies.
    */
   public function rendererFactory(TypedEntityContext $context): ?TypedEntityRendererInterface;
@@ @@
   /**
    * Get the entity type.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity type.
    */
   public function getEntityType(): EntityTypeInterface;
@@ @@
    *   The bundle is automatically set, if the entity supports it and the typed
    *   repository has one set.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface
+   * @return WrappedEntityInterface
    *   The wrapped entity.
    */
   public function createEntity(array $values = []): WrappedEntityInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/typed_entity/src/TypedRepositories/TypedRepositoryBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_entity\TypedRepositories;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected ContainerInterface $container;

@@ @@
   /**
    * The entity type for this repository.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;

@@ @@
   /**
    * The renderers for this repository.
    *
-   * @var \Drupal\typed_entity\Annotation\ClassWithVariantsInterface
+   * @var ClassWithVariantsInterface
    */
   protected $renderers;

@@ @@
   /**
    * The wrappers for this repository.
    *
-   * @var \Drupal\typed_entity\Annotation\ClassWithVariantsInterface
+   * @var ClassWithVariantsInterface
    */
   protected $wrappers;

@@ @@
    *   Plugin ID.
    * @param array $plugin_definition
    *   Plugin definition.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
    *
    * @throws \UnexpectedValueException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, string $plugin_id, array $plugin_definition, ContainerInterface $container) {
     $this->container = $container;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     return new static($configuration, $plugin_id, $plugin_definition, $container);
@@ @@
    * @param array $items
    *   The array containing the IDs of the entities to wrap.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface[]
+   * @return WrappedEntityInterface[]
    *   The wrapped entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function wrapMultipleById(array $items): array {
     // Load all the entities that we found.
@@ @@
    * @param string $operation
    *   The entity operation to use this for. Defaults to 'view'.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface[]
+   * @return WrappedEntityInterface[]
    *   The wrapped entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function wrapAll(string $operation = 'view'): array {
     $bundle_key = $this->entityType->getKey('bundle');
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function createEntity(array $values = []): WrappedEntityInterface {
     // Autoset the bundle key, if the typed repository has a bundle and the
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/typed_entity/src/RepositoryManager.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\typed_entity\TypedRepositoryPluginManager
+   * @var TypedRepositoryPluginManager
    */
   private TypedRepositoryPluginManager $pluginManager;

@@ @@
   /**
    * RepositoryManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\typed_entity\TypedRepositoryPluginManager $plugin_manager
+   * @param TypedRepositoryPluginManager $plugin_manager
    *   The plugin manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TypedRepositoryPluginManager $plugin_manager) {
@@ @@
   /**
    * Get all the repositories.
    *
-   * @return \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface[]
+   * @return TypedRepositoryInterface[]
    *   The repositories.
    *
    * @see get
@@ @@
    * @param string $repository_id
    *   The repository identifier.
    *
-   * @return \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface|null
+   * @return TypedRepositoryInterface|null
    *   The repository.
    */
   public function get(string $repository_id): ?TypedRepositoryInterface {
@@ @@
    * @param string $repository_id
    *   The repository ID.
    *
-   * @return \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface|null
+   * @return TypedRepositoryInterface|null
    *   The plugin object.
    */
   private function deriverPluginReducer(
@@ @@
   /**
    * Gets the entity repository based on the entity information and the variant.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to extract info for.
    *
-   * @return \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface|null
+   * @return TypedRepositoryInterface|null
    *   The repository for the entity.
    */
   public function repositoryFromEntity(EntityInterface $entity): ?TypedRepositoryInterface {
@@ @@
    * @param string $bundle
    *   The bundle machine name.
    *
-   * @return \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface|null
+   * @return TypedRepositoryInterface|null
    *   The repository for the entity.
    */
   public function repository(string $entity_type_id, string $bundle = ''): ?TypedRepositoryInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/typed_entity/src/Render/TypedEntityRendererInterface.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a render array representation of the wrapped entity.
    *
-   * @param \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface $wrapped_entity
+   * @param WrappedEntityInterface $wrapped_entity
    *   The wrapped entity to render.
-   * @param \Drupal\typed_entity\TypedEntityContext $context
+   * @param TypedEntityContext $context
    *   The context this entity is rendered in. This contains arbitrary
    *   information on how to render the entity. Special keys:
    *     - 'view_mode': The view mode to use to render the entity. Leave it
@@ @@
    *
    * @param array $build
    *   The render array being preprocessed.
-   * @param \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface $wrapped_entity
+   * @param WrappedEntityInterface $wrapped_entity
    *   The wrapped entity.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity view display.
    *
    * @see ::preprocess()
@@ @@
    *
    * @param array $build
    *   The renderable array generated by the EntityDisplay.
-   * @param \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface $wrapped_entity
+   * @param WrappedEntityInterface $wrapped_entity
    *   The wrapped entity.
    * @param array $context
    *   An associative array containing:
@@ @@
    *
    * @param array $variables
    *   The render array passed by reference.
-   * @param \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface $wrapped_entity
+   * @param WrappedEntityInterface $wrapped_entity
    *   The typed entity being processed. It is only here for context. It is not
    *   recommended to extract data from the entity directly without passing it
    *   through the render pipeline.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/typed_entity/src/Render/TypedEntityRendererBase.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * TypedEntityRendererBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/typed_entity/src/EntityWrapperInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Wraps an entity with business logic.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to wrap.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface|null
+   * @return WrappedEntityInterface|null
    *   The wrapped entity.
    */
   public function wrap(EntityInterface $entity): ?WrappedEntityInterface;
@@ @@
   /**
    * Wraps an entities with business logic.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entity to wrap.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface[]
+   * @return WrappedEntityInterface[]
    *   The wrapped entities.
    */
   public function wrapMultiple(array $entities): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/typed_entity/src/Annotation/VariantInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Checks if a variant should be used in a given context.
    *
-   * @param \Drupal\typed_entity\TypedEntityContext $context
+   * @param TypedEntityContext $context
    *   The context.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/typed_entity/src/Annotation/TypedRepository.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_entity\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 use Drupal\typed_entity\TypedRepositories\TypedRepositoryBase;

@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
-  public \Drupal\Core\Annotation\Translation $description;
+  public Translation $description;

   /**
    * The available wrappers.
    *
-   * @var \Drupal\typed_entity\Annotation\ClassWithVariants
+   * @var ClassWithVariants
    *   The wrapper with the variants.
    */
   public ClassWithVariants $wrappers;
@@ @@
   /**
    * The available renderers.
    *
-   * @var \Drupal\typed_entity\Annotation\ClassWithVariants
+   * @var ClassWithVariants
    *   The wrapper with the variants.
    */
   public ClassWithVariants $renderers;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/typed_entity/src/Annotation/ClassWithVariantsInterface.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Given a context, negotiate a variant while falling back if none applies.
    *
-   * @param \Drupal\typed_entity\TypedEntityContext|null $context
+   * @param TypedEntityContext|null $context
    *   The context object.
    * @param string $base_class
    *   A FQN for a base class the variants should extend.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/typed_entity/modules/typed_entity_ui/tests/src/Functional/ExploreDetailsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_entity_ui\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Url;
 use Drupal\node\Entity\NodeType;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * An admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ @@
   /**
    * Test the detail page for the Article.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ResponseTextException
+   * @throws ExpectationException
    */
   public function testDetailPageForArticle(): void {
     $page = $this->getSession()->getPage();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/typed_entity/modules/typed_entity_ui/src/Form/RepositoryTable/RepositoryTableRequest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\typed_entity\RepositoryManager
+   * @var RepositoryManager
    */
   protected RepositoryManager $repositoryManager;

@@ @@
   /**
    * RepositoryTableRequest constructor.
    *
-   * @param \Drupal\typed_entity\RepositoryManager $repository_manager
+   * @param RepositoryManager $repository_manager
    *   The plugin manager.
    */
   public function __construct(RepositoryManager $repository_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/typed_entity/modules/typed_entity_ui/src/Form/RepositoryTable/BuildRepositoryTableService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_entity_ui\Form\RepositoryTable;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
@@ @@
   /**
    * Application service executor.
    *
-   * @param \Drupal\typed_entity_ui\Form\RepositoryTable\RepositoryTableRequest $request
+   * @param RepositoryTableRequest $request
    *   The request object.
    *
-   * @return \Drupal\typed_entity_ui\Form\RepositoryTable\RepositoryTableResponse
+   * @return RepositoryTableResponse
    *   The response object.
    */
   public function execute(RepositoryTableRequest $request): RepositoryTableResponse {
@@ @@
   /**
    * Builds the table header.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   The structured array with the header values.
    */
   protected function buildHeader(): array {
@@ @@
   /**
    * Builds a row of the table.
    *
-   * @param \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface $repository
+   * @param TypedRepositoryInterface $repository
    *   The repository to build the row for.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


30) modules/contrib/typed_entity/modules/typed_entity_ui/src/Form/ExploreForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager to manage entity type plugin definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The entity type bundle service to discover & retrieve entity type bundles.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected EntityTypeBundleInfoInterface $bundleInfo;

@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\typed_entity\RepositoryManager
+   * @var RepositoryManager
    */
   protected RepositoryManager $repositoryManager;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   private StateInterface $state;

@@ @@
   /**
    * Constructs a new Explore form.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo
+   * @param EntityTypeBundleInfoInterface $bundleInfo
    *   The entity type bundle info service for discovering entity type bundles.
-   * @param \Drupal\typed_entity\RepositoryManager $repository_manager
+   * @param RepositoryManager $repository_manager
    *   The plugin manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state interface.
    */
-  public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $bundleInfo, RepositoryManager $repository_manager, StateInterface $state) {
+  public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $bundleInfo, RepositoryManager $repository_manager, StateInterface $state, RepositoryManager $repositoryManager) {
     $this->entityTypeManager = $entityTypeManager;
     $this->bundleInfo = $bundleInfo;
     $this->repositoryManager = $repository_manager;
     $this->state = $state;
+    $this->repositoryManager = $repositoryManager;
   }

   /**
@@ @@
     return new static(
       $container->get('entity_type.manager'),
       $container->get('entity_type.bundle.info'),
-      $container->get(RepositoryManager::class),
+      $this->repositoryManager,
       $container->get('state')
     );
   }
@@ @@
    *
    * @param array $form
    *   The render array of the currently built form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Object describing the current state of the form.
    *
    * @SuppressWarnings(PHPMD.UnusedFormalParameter)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/typed_entity/modules/typed_entity_ui/src/Controller/ExploreDetails.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type bundle service to discover & retrieve entity type bundles.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected EntityTypeBundleInfoInterface $bundleInfo;

@@ @@
   /**
    * The repository manager.
    *
-   * @var \Drupal\typed_entity\RepositoryManager
+   * @var RepositoryManager
    */
   protected RepositoryManager $repositoryManager;

@@ @@
   /**
    * Constructs a new EntityBundlePicker form.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The entity type bundle info service for discovering entity type bundles.
-   * @param \Drupal\typed_entity\RepositoryManager $repository_manager
+   * @param RepositoryManager $repository_manager
    *   The repository manager.
    */
-  public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $bundle_info, RepositoryManager $repository_manager) {
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $bundle_info, RepositoryManager $repository_manager, RepositoryManager $repositoryManager) {
     $this->entityTypeManager = $entity_type_manager;
     $this->bundleInfo = $bundle_info;
     $this->repositoryManager = $repository_manager;
+    $this->repositoryManager = $repositoryManager;
   }

   /**
@@ @@
     return new static(
       $container->get('entity_type.manager'),
       $container->get('entity_type.bundle.info'),
-      $container->get(RepositoryManager::class)
+      $this->repositoryManager
     );
   }

@@ @@
    * @param string $typed_entity_id
    *   The typed entity ID.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The title.
    */
   public function title(string $typed_entity_id): MarkupInterface {
@@ @@
   /**
    * Hides the video thumbnail for admin interfaces.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response.
    */
   public function hideVideo(): AjaxResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/typed_entity/modules/typed_entity_example/tests/src/Unit/WrappedEntities/UserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_entity_example\Unit\WrappedEntities;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\typed_entity_example\WrappedEntities\User;
@@ @@
  */
 class UserTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests the nickname.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


33) modules/contrib/typed_entity/modules/typed_entity_example/tests/src/Unit/Render/Article/FullTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_entity_example\Unit\Render\Article;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\typed_entity\WrappedEntities\WrappedEntityInterface;
@@ @@
  */
 class FullTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests the preprocessing for articles with the full view mode.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


34) modules/contrib/typed_entity/modules/typed_entity_example/src/WrappedEntities/Article.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   private MessengerInterface $messenger;

@@ @@
   /**
    * Article constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to wrap.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(EntityInterface $entity, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/typed_entity/modules/typed_entity_example/src/Plugin/TypedRepositories/ArticleRepository.php:45

    ---------- begin diff ----------
@@ @@
    * @param string[] $tags
    *   The tags to search for.
    *
-   * @return \Drupal\typed_entity_example\WrappedEntities\Article[]
+   * @return Article[]
    *   The wrapped entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function findByTags(array $tags): array {
     $items = $this->findItemsByTags($tags);
@@ @@
    * @return array
    *   The result of the execution of the query.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private function findItemsByTags(array $tags): array {
     $query = $this->getQuery();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 35 files have been changed by Rector                                      

