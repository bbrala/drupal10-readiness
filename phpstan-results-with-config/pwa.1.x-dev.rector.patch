diff --git a/pwa.api.php b/pwa.api.php
index 8b208a6..ea25682 100644
--- a/pwa.api.php
+++ b/pwa.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\node\Entity\Node;
 /**
  * @file
  * Hooks provided by the Progressive Web App module.
@@ -11,7 +12,6 @@ use Drupal\Core\Cache\CacheableMetadata;
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alters cached urls list for the service worker file.
  *
@@ -25,12 +25,12 @@ use Drupal\Core\Cache\CacheableMetadata;
  *
  * @param array &$cacheUrls
  *   List of urls to cache.
- * @param \Drupal\Core\Cache\CacheableMetadata $cacheableMetadata
+ * @param CacheableMetadata $cacheableMetadata
  *   Cacheability metadata.
  */
 function hook_pwa_cache_urls_alter(&$cacheUrls, CacheableMetadata &$cacheableMetadata) {
   // Get a node URL and its cacheability metadata.
-  $generated_url = \Drupal\node\Entity\Node::load('1')->toUrl()->toString(TRUE);
+  $generated_url = Node::load('1')->toUrl()->toString(TRUE);
   // Add the URL to the list.
   $cacheUrls[] = $generated_url->getGeneratedUrl();
   // Merge the cacheability metadata.
@@ -51,7 +51,7 @@ function hook_pwa_cache_urls_alter(&$cacheUrls, CacheableMetadata &$cacheableMet
  * @param array &$excludeUrls
  *   List of url to cache. Paths matching these patterns will not be cached by
  *   the Service Worker. Can be JavaScript regex.
- * @param \Drupal\Core\Cache\CacheableMetadata $cacheableMetadata
+ * @param CacheableMetadata $cacheableMetadata
  *   Cacheability metadata.
  */
 function hook_pwa_exclude_urls_alter(&$excludeUrls, CacheableMetadata &$cacheableMetadata) {
@@ -70,7 +70,7 @@ function hook_pwa_exclude_urls_alter(&$excludeUrls, CacheableMetadata &$cacheabl
  * @see hook_pwa_cache_urls_assets_page_alter()
  */
 function hook_pwa_cache_urls_assets_alter(&$resources) {
-  $module_path = drupal_get_path('module', 'pwa');
+  $module_path = \Drupal::service('extension.list.module')->getPath('pwa');
   $resources[] = "/$module_path/assets/loading.gif";
 }
 
diff --git a/src/Controller/PWAController.php b/src/Controller/PWAController.php
index 3bce084..b47f4a2 100644
--- a/src/Controller/PWAController.php
+++ b/src/Controller/PWAController.php
@@ -31,35 +31,35 @@ class PWAController implements ContainerInjectionInterface {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;
 
   /**
    * The Guzzle HTTP client instance.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   private $httpClient;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   private $languageManager;
 
   /**
    * The manifest service.
    *
-   * @var \Drupal\pwa\ManifestInterface
+   * @var ManifestInterface
    */
   private $manifest;
 
   /**
    * The module extension list.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    *
    * @see https://www.drupal.org/project/drupal/issues/2940481
    *   This service is currently still marked as @internal as of Drupal core
@@ -70,48 +70,48 @@ class PWAController implements ContainerInjectionInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
   /**
    * The state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   private $state;
 
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   private $themeManager;
 
   /**
    * Constructor; saves dependencies.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
    *
-   * @param \GuzzleHttp\Client $httpClient
+   * @param Client $httpClient
    *   The Guzzle HTTP client instance.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    *
-   * @param \Drupal\pwa\ManifestInterface $manifest
+   * @param ManifestInterface $manifest
    *   The manifest service.
    *
-   * @param \Drupal\Core\Extension\ModuleExtensionList $moduleExtensionList
+   * @param ModuleExtensionList $moduleExtensionList
    *   The module extension list.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The system state.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   The theme manager.
    */
   public function __construct(
@@ -153,10 +153,10 @@ class PWAController implements ContainerInjectionInterface {
   /**
    * Fetch the manifest content.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The manifest file as a response object.
    */
   public function pwa_manifest(Request $request) {
@@ -248,13 +248,13 @@ class PWAController implements ContainerInjectionInterface {
   /**
    * Replace the serviceworker file with variables from Drupal config.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return mixed
    */
   public function pwa_serviceworker_file_data(Request $request) {
-    $path = drupal_get_path('module', 'pwa');
+    $path = \Drupal::service('extension.list.module')->getPath('pwa');
 
     $sw = file_get_contents($path . '/js/serviceworker.js');
 
diff --git a/src/EventSubscriber/ResponseSubscriber.php b/src/EventSubscriber/ResponseSubscriber.php
index 4fe5457..37dd9da 100644
--- a/src/EventSubscriber/ResponseSubscriber.php
+++ b/src/EventSubscriber/ResponseSubscriber.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\pwa\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -34,12 +34,12 @@ class ResponseSubscriber implements EventSubscriberInterface {
   /**
    * Clear serviceworker cache on user change.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    *
    * @see pwa_user_login()
    */
-  public function processResponse(FilterResponseEvent $event) {
+  public function processResponse(ResponseEvent $event) {
     $response = $event->getResponse();
 
     if ($event->getRequest()->get('_route') === 'user.logout') {
diff --git a/src/Form/ManifestConfigurationForm.php b/src/Form/ManifestConfigurationForm.php
index f0a4d03..47231a3 100644
--- a/src/Form/ManifestConfigurationForm.php
+++ b/src/Form/ManifestConfigurationForm.php
@@ -23,70 +23,70 @@ class ManifestConfigurationForm extends ConfigFormBase {
   /**
    * The cache tags invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The file entity storage.
    *
-   * @var \Drupal\file\FileStorageInterface
+   * @var FileStorageInterface
    */
   protected $fileStorage;
 
   /**
    * The file system helper service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The file usage backend.
    *
-   * @var \Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected $fileUsage;
 
   /**
    * The manifest service.
    *
-   * @var \Drupal\pwa\ManifestInterface
+   * @var ManifestInterface
    */
   protected $manifest;
 
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * Constructor; saves dependencies.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   The cache tags invalidator service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The factory for configuration objects.
    *
-   * @param \Drupal\file\FileStorageInterface $fileStorage
+   * @param FileStorageInterface $fileStorage
    *   The file entity storage.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system helper service.
    *
-   * @param \Drupal\file\FileUsage\FileUsageInterface $fileUsage
+   * @param FileUsageInterface $fileUsage
    *   The file usage backend.
    *
-   * @param \Drupal\pwa\ManifestInterface $manifest
+   * @param ManifestInterface $manifest
    *   The manifest service.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    *
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $streamWrapperManager
+   * @param StreamWrapperManagerInterface $streamWrapperManager
    *   The stream wrapper manager.
    */
   public function __construct(
@@ -155,7 +155,7 @@ class ManifestConfigurationForm extends ConfigFormBase {
   public function buildForm(array $form, FormStateInterface $form_state) {
 
     $host = $this->getRequest()->server->get('HTTP_HOST');
-    $files_path = file_create_url("public://pwa") . '/';
+    $files_path = \Drupal::service('file_url_generator')->generateAbsoluteString("public://pwa") . '/';
     if (substr($files_path, 0, 7) == 'http://') {
       $files_path = str_replace('http://', '', $files_path);
     }
diff --git a/src/Manifest.php b/src/Manifest.php
index 39b8432..f1343ac 100644
--- a/src/Manifest.php
+++ b/src/Manifest.php
@@ -18,54 +18,54 @@ class Manifest implements ManifestInterface {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   private $languageManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
   /**
    * The Symfony request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   private $requestStack;
 
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   private $themeManager;
 
   /**
    * Constructor; saves dependencies.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The Symfony request stack.
    *
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   The theme manager.
    */
   public function __construct(
