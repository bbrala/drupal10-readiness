diff --git a/imageshop.info.yml b/imageshop.info.yml
index 3a6550f..661f004 100644
--- a/imageshop.info.yml
+++ b/imageshop.info.yml
@@ -1,5 +1,5 @@
 name: Imageshop
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.3 || ^10
 type: module
 dependencies:
   - drupal:image
diff --git a/imageshop.module b/imageshop.module
index cbbc76b..4ffb137 100644
--- a/imageshop.module
+++ b/imageshop.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\media_library\MediaLibraryState;
+use Drupal\imageshop\TokenService;
 /**
  * @file
  * Drupal hooks for imageshop.
@@ -24,7 +26,7 @@ function imageshop_theme($existing, $type, $theme, $path) {
  * Implements hook_form_FORM_ID_alter().
  */
 function imageshop_form_media_library_add_form_upload_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\media_library\MediaLibraryState $state */
+  /** @var MediaLibraryState $state */
   $state = $form_state->get('media_library_state');
   if (empty($state)) {
     return;
@@ -63,7 +65,7 @@ function imageshop_form_media_library_add_form_upload_alter(&$form, FormStateInt
  * Implements hook_cron().
  */
 function imageshop_cron() {
-  /** @var \Drupal\imageshop\TokenService $token_service */
+  /** @var TokenService $token_service */
   $token_service = \Drupal::service('imageshop.token_service');
   $token_service->regenerateToken();
 }
diff --git a/src/Controller/ImageshopController.php b/src/Controller/ImageshopController.php
index f35c18b..9e5c157 100644
--- a/src/Controller/ImageshopController.php
+++ b/src/Controller/ImageshopController.php
@@ -16,14 +16,14 @@ class ImageshopController extends ControllerBase {
   /**
    * Bare HTML renderer.
    *
-   * @var \Drupal\Core\Render\BareHtmlPageRendererInterface
+   * @var BareHtmlPageRendererInterface
    */
   protected $bareHtmlRenderer;
 
   /**
    * Token service.
    *
-   * @var \Drupal\imageshop\TokenService
+   * @var TokenService
    */
   protected $tokenService;
 
diff --git a/src/Element/ImageShopElement.php b/src/Element/ImageShopElement.php
index e074827..f70c596 100644
--- a/src/Element/ImageShopElement.php
+++ b/src/Element/ImageShopElement.php
@@ -131,7 +131,7 @@ class ImageShopElement extends ManagedFile {
    * Helper function.
    */
   public static function getFileForUrl($url, $dir) {
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     $class = "\Symfony\Component\HttpFoundation\File\MimeType\FileBinaryMimeTypeGuesser";
     if (class_exists("\Symfony\Component\Mime\FileBinaryMimeTypeGuesser")) {
@@ -176,7 +176,7 @@ class ImageShopElement extends ManagedFile {
     }
     $file_system->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY);
     $filename = sprintf('%s/%s.%s', $dir, $filename, $extension);
-    $file = file_save_data($data, $filename);
+    $file = \Drupal::service('file.repository')->writeData($data, $filename);
     if (!$file) {
       return FALSE;
     }
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 22ab04f..17367c9 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\imageshop\Form;
 
+use Drupal\media\Entity\MediaType;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ -17,7 +18,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -74,7 +75,7 @@ class SettingsForm extends ConfigFormBase {
       '#default_value' => $this->config('imageshop.settings')->get('hide_media_browser'),
     ];
     try {
-      /** @var \Drupal\media\Entity\MediaType[] $media_types */
+      /** @var MediaType[] $media_types */
       $media_types = $this->entityTypeManager->getStorage('media_type')->loadMultiple();
       $options = [];
       foreach ($media_types as $type) {
diff --git a/src/TokenService.php b/src/TokenService.php
index c9057c0..5419fcc 100644
--- a/src/TokenService.php
+++ b/src/TokenService.php
@@ -17,41 +17,41 @@ class TokenService {
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs a TokenService object.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger.
    */
   public function __construct(ClientInterface $http_client, ConfigFactoryInterface $config_factory, StateInterface $state, LoggerInterface $logger) {
@@ -65,7 +65,7 @@ class TokenService {
    * Method description.
    */
   public function getTemporaryToken() {
-    /** @var \Drupal\imageshop\ImageShopTempToken $token */
+    /** @var ImageShopTempToken $token */
     $token = $this->state->get(self::TOKEN_STATE_KEY, FALSE);
     // Check if this token is good.
     if ($token && !$token->isExpired()) {
diff --git a/tests/modules/imageshop_test/imageshop_test.module b/tests/modules/imageshop_test/imageshop_test.module
index 6c7c3a5..15a0a7c 100644
--- a/tests/modules/imageshop_test/imageshop_test.module
+++ b/tests/modules/imageshop_test/imageshop_test.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Render\RendererInterface;
 /**
  * @file
  * Drupal hooks.
@@ -12,7 +13,7 @@ use Drupal\Core\Url;
  * Implements hook_imageshop_iframe_render_alter().
  */
 function imageshop_test_imageshop_iframe_render_alter(array &$render) {
-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');
   $render["#attached"]["drupalSettings"]["imageShop"]["baseUrl"] = $renderer->executeInRenderContext(new RenderContext(), function () {
     return Url::fromRoute('imageshop_test.mock_chooser')->setOption('absolute', TRUE)->toString() . '?';
diff --git a/tests/src/Functional/ElementTest.php b/tests/src/Functional/ElementTest.php
index 63465ff..3c8d155 100644
--- a/tests/src/Functional/ElementTest.php
+++ b/tests/src/Functional/ElementTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\imageshop\Functional;
 
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\file\Functional\FileFieldTestBase;
 use Drupal\Tests\image\Kernel\ImageFieldCreationTrait;
@@ -33,7 +34,7 @@ class ElementTest extends FileFieldTestBase {
     $field_name = 'my_imageshop_field';
     $type = 'article';
     $this->createImageField($field_name, $type);
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');
     $display_repository->getFormDisplay('node', $type)
       ->setComponent($field_name, [
@@ -44,7 +45,8 @@ class ElementTest extends FileFieldTestBase {
     $this->drupalGet('/node/add/article');
     $files = $this->container->get('entity_type.manager')->getStorage('file')->loadByProperties([]);
     $this->assertEmpty($files);
-    $this->drupalPostForm('/node/add/article', [
+    $this->drupalGet('/node/add/article');
+    $this->submitForm([
       'my_imageshop_field[0][url]' => Url::fromUserInput('/core/misc/druplicon.png')->setOption('absolute', TRUE)->toString(),
     ], 'Upload');
     $files = $this->container->get('entity_type.manager')->getStorage('file')->loadByProperties([]);
