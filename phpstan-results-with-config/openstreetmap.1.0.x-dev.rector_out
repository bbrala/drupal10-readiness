modules/contrib/openstreetmap/modules/openstreetmap_queries/OSMQueryInterface.php
modules/contrib/openstreetmap/modules/openstreetmap_queries/openstreetmap_queries.module
modules/contrib/openstreetmap/modules/openstreetmap_queries/src/Entity/OSMQuery.php
modules/contrib/openstreetmap/modules/openstreetmap_queries/src/Form/OSMQueryExecuteForm.php
modules/contrib/openstreetmap/modules/openstreetmap_queries/src/Form/OSMQueryForm.php
modules/contrib/openstreetmap/modules/openstreetmap_queries/src/Form/OSMQuerySettingsForm.php
modules/contrib/openstreetmap/modules/openstreetmap_queries/src/OSMQueryAccessControlHandler.php
modules/contrib/openstreetmap/modules/openstreetmap_queries/src/OSMQueryInterface.php
modules/contrib/openstreetmap/modules/openstreetmap_queries/src/OSMQueryListBuilder.php
modules/contrib/openstreetmap/modules/openstreetmap_queries/src/OSMQueryViewBuilder.php
modules/contrib/openstreetmap/openstreetmap.module
modules/contrib/openstreetmap/osm_node.page.inc
modules/contrib/openstreetmap/src/Controller/OSMNodeController.php
modules/contrib/openstreetmap/src/Controller/OSMNodeViewController.php
modules/contrib/openstreetmap/src/Entity/OSMNode.php
modules/contrib/openstreetmap/src/Entity/OSMNodeInterface.php
modules/contrib/openstreetmap/src/Entity/OSMNodeType.php
modules/contrib/openstreetmap/src/Entity/OSMNodeTypeInterface.php
modules/contrib/openstreetmap/src/Entity/OSMNodeViewsData.php
modules/contrib/openstreetmap/src/Form/OSMImportForm.php
modules/contrib/openstreetmap/src/Form/OSMNodeDeleteForm.php
modules/contrib/openstreetmap/src/Form/OSMNodeForm.php
modules/contrib/openstreetmap/src/Form/OSMNodeRevisionDeleteForm.php
modules/contrib/openstreetmap/src/Form/OSMNodeRevisionRevertForm.php
modules/contrib/openstreetmap/src/Form/OSMNodeRevisionRevertTranslationForm.php
modules/contrib/openstreetmap/src/Form/OSMNodeSettingsForm.php
modules/contrib/openstreetmap/src/Form/OSMNodeTypeDeleteForm.php
modules/contrib/openstreetmap/src/Form/OSMNodeTypeEntityForm.php
modules/contrib/openstreetmap/src/Form/OSMNodeTypeForm.php
modules/contrib/openstreetmap/src/Form/OSMSettingsForm.php
modules/contrib/openstreetmap/src/Form/OSMSyncForm.php
modules/contrib/openstreetmap/src/OSMNodeAccessControlHandler.php
modules/contrib/openstreetmap/src/OSMNodeHtmlRouteProvider.php
modules/contrib/openstreetmap/src/OSMNodeListBuilder.php
modules/contrib/openstreetmap/src/OSMNodeStorage.php
modules/contrib/openstreetmap/src/OSMNodeStorageInterface.php
modules/contrib/openstreetmap/src/OSMNodeTranslationHandler.php
modules/contrib/openstreetmap/src/OSMNodeTypeHtmlRouteProvider.php
modules/contrib/openstreetmap/src/OSMNodeTypeListBuilder.php
modules/contrib/openstreetmap/src/OSMNodeTypePermissions.php
modules/contrib/openstreetmap/src/Overpass.php

17 files with changes
=====================

1) modules/contrib/openstreetmap/src/Overpass.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openstreetmap;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Database\Connection;
 use GuzzleHttp\Client;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
-
   protected $database;

   /**
    * Our HTTP Connector.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * User-specified configuration.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Constructs a new Overpass object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The Drupal database connection.
-   * @param \GuzzleHttp\Client $client
+   * @param Client $client
    *   Client for making HTTP Calls.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   Drupal configuration.
    */
   public function __construct(Connection $connection, Client $client, ConfigFactory $configFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/openstreetmap/src/OSMNodeTypePermissions.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\openstreetmap\Entity\OSMNodeType $type
+   * @param OSMNodeType $type
    *   The OSMNode type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/openstreetmap/src/OSMNodeStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of OSM Node revision IDs for a specific OSM Node.
    *
-   * @param \Drupal\openstreetmap\Entity\OSMNodeInterface $entity
+   * @param OSMNodeInterface $entity
    *   The OSM Node entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as OSM Node author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\openstreetmap\Entity\OSMNodeInterface $entity
+   * @param OSMNodeInterface $entity
    *   The OSM Node entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all OSM Node with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/openstreetmap/src/OSMNodeListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openstreetmap;

+use Drupal\openstreetmap\Entity\OSMNode;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\openstreetmap\Entity\OSMNode $entity */
+    /** @var OSMNode $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/openstreetmap/src/OSMNodeHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/openstreetmap/src/OSMNodeAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openstreetmap;

+use Drupal\openstreetmap\Entity\OSMNodeInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\openstreetmap\Entity\OSMNodeInterface $entity */
-
+    /** @var OSMNodeInterface $entity */
     switch ($operation) {

       case 'view':
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/openstreetmap/src/Form/OSMNodeSettingsForm.php:24

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/openstreetmap/src/Form/OSMNodeRevisionRevertTranslationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openstreetmap\Form;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\openstreetmap\Entity\OSMNodeInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   protected function prepareRevertedRevision(OSMNodeInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\openstreetmap\Entity\OSMNodeInterface $default_revision */
+    /** @var OSMNodeInterface $default_revision */
     $latest_revision = $this->OSMNodeStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/openstreetmap/src/Form/OSMNodeRevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openstreetmap\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The OSM Node revision.
    *
-   * @var \Drupal\openstreetmap\Entity\OSMNodeInterface
+   * @var OSMNodeInterface
    */
   protected $revision;

@@ @@
   /**
    * The OSM Node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $oSMNodeStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\openstreetmap\Entity\OSMNodeInterface $revision
+   * @param OSMNodeInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\openstreetmap\Entity\OSMNodeInterface
+   * @return OSMNodeInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(OSMNodeInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/openstreetmap/src/Form/OSMNodeRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openstreetmap\Form;

+use Drupal\openstreetmap\Entity\OSMNodeInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The OSM Node revision.
    *
-   * @var \Drupal\openstreetmap\Entity\OSMNodeInterface
+   * @var OSMNodeInterface
    */
   protected $revision;

@@ @@
   /**
    * The OSM Node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $oSMNodeStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    */
   public function getQuestion() {
     return $this->t('Are you sure you want to delete the revision from %revision-date?', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
     ]);
   }

@@ @@
       '%revision' => $this->revision->getRevisionId(),
     ]);
     $this->messenger()->addMessage(t('Revision from %revision-date of OSM Node %title has been deleted.', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
       '%title' => $this->revision->label(),
     ]));
     $form_state->setRedirect(
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/openstreetmap/src/Form/OSMNodeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openstreetmap\Form;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\openstreetmap\Entity\OSMNode;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\openstreetmap\Entity\OSMNode $entity */
+    /** @var OSMNode $entity */
     $form = parent::buildForm($form, $form_state);

     if (!$this->entity->isNew()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/openstreetmap/src/Entity/OSMNodeInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openstreetmap\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the OSM Node revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/openstreetmap/src/Entity/OSMNode.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openstreetmap\Entity;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\EditorialContentEntityBase;
@@ @@
    * @return int
    *   The node ID
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save($pull_from_osm = TRUE) {
     if ($pull_from_osm) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/openstreetmap/src/Controller/OSMNodeViewController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Creates an OSMNodeViewController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user. For backwards compatibility this is optional, however
    *   this will be removed before Drupal 9.0.0.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, AccountInterface $current_user = NULL, EntityRepositoryInterface $entity_repository = NULL) {
@@ @@
   /**
    * The _title_callback for the page that renders a single osm_node.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $osm_node
+   * @param EntityInterface $osm_node
    *   The current osm_node.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/openstreetmap/src/Controller/OSMNodeController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openstreetmap\Controller;

+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Generates an overview table of older revisions of a OSM Node.
    *
-   * @param \Drupal\openstreetmap\Entity\OSMNodeInterface $osm_node
+   * @param OSMNodeInterface $osm_node
    *   A OSM Node object.
    *
    * @return array
@@ @@
           ]));
         }
         else {
-          $link = $osm_node->link($date);
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // Please confirm that `$osm_node` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+          $link = $osm_node->toLink($date)->toString();
         }

         $row = [];
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/openstreetmap/modules/openstreetmap_queries/src/OSMQueryListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new OSMQueryListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\openstreetmap_queries\OSMQueryInterface $entity */
+    /** @var OSMQueryInterface $entity */
     $row['id'] = $entity->id();
     $row['title'] = $entity->toLink();
     $row['status'] = $entity->isEnabled() ? $this->t('Enabled') : $this->t('Disabled');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/openstreetmap/modules/openstreetmap_queries/src/Form/OSMQueryForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New overpass query %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 17 files have been changed by Rector                                      

