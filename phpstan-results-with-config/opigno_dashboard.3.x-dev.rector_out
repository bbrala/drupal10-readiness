modules/contrib/opigno_dashboard/opigno_dashboard.install
modules/contrib/opigno_dashboard/opigno_dashboard.module
modules/contrib/opigno_dashboard/src/BlockService.php
modules/contrib/opigno_dashboard/src/BlockServiceInterface.php
modules/contrib/opigno_dashboard/src/Cache/Context/IsCurrentUserPageCacheContext.php
modules/contrib/opigno_dashboard/src/Controller/DashboardController.php
modules/contrib/opigno_dashboard/src/EventSubscriber/RedirectOnAccessDeniedSubscriber.php
modules/contrib/opigno_dashboard/src/Form/SettingsForm.php
modules/contrib/opigno_dashboard/src/Plugin/Block/AboutOpignoBlock.php
modules/contrib/opigno_dashboard/src/Plugin/Block/SiteHeaderBlock.php
modules/contrib/opigno_dashboard/src/Plugin/Block/UserStatisticsBlock.php
modules/contrib/opigno_dashboard/src/RedirectMiddleware.php

10 files with changes
=====================

1) modules/contrib/opigno_dashboard/src/RedirectMiddleware.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The wrapped HTTP kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * The redirect URL.
    *
-   * @var \Symfony\Component\HttpFoundation\RedirectResponse
+   * @var RedirectResponse
    */
   protected $redirectResponse;

@@ @@
    * Constructs a RedirectMiddleware
    * object.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The decorated kernel.
    */
   public function __construct(HttpKernelInterface $http_kernel) {
@@ @@
   /**
    * Stores the requested redirect response.
    *
-   * @param \Symfony\Component\HttpFoundation\RedirectResponse|null $redirectResponse
+   * @param RedirectResponse|null $redirectResponse
    *   Redirect response.
    */
   public function setRedirectResponse(?RedirectResponse $redirectResponse) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/opigno_dashboard/src/Plugin/Block/SiteHeaderBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_dashboard\Plugin\Block;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Block\BlockBase;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $user = NULL;

@@ @@
   /**
    * The user statistics manager.
    *
-   * @var \Drupal\opigno_statistics\Services\UserStatisticsManager
+   * @var UserStatisticsManager
    */
   protected $statsManager;

@@ @@
   /**
    * The menu link tree service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuTree;

@@ @@
   /**
    * Notifications manager service.
    *
-   * @var \Drupal\opigno_notification\Services\OpignoNotificationManager
+   * @var OpignoNotificationManager
    */
   protected $notificationsManager;

@@ @@
   /**
    * The private messages manager service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $pmService;

@@ @@
   /**
    * Prepare the user dropdown menu.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $role
+   * @param TranslatableMarkup $role
    *   The user role.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/opigno_dashboard/src/Plugin/Block/AboutOpignoBlock.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@

     $logo = theme_get_setting('logo_path_anonymous');
     if (!is_file($logo)) {
-      $logo = drupal_get_path('theme', 'aristotle') . '/assets/' . $logo;
+      $logo = \Drupal::service('extension.list.theme')->getPath('aristotle') . '/assets/' . $logo;
     }

     $options = [
@@ @@

     return [
       '#theme' => 'opigno_about_block',
-      '#logo' => file_exists($logo) ? file_url_transform_relative(file_create_url($logo)) : '',
+      '#logo' => file_exists($logo) ? \Drupal::service('file_url_generator')->generateString($logo) : '',
       '#texts' => [
         $this->t('Opigno™ is a Trademark of Connect-i Sàrl, based in Préverenges, Switzerland.'),
         $this->t('For more information regarding Opigno™ please consult the website @link.', [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/opigno_dashboard/src/Form/SettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The block service.
    *
-   * @var \Drupal\opigno_dashboard\BlockServiceInterface
+   * @var BlockServiceInterface
    */
   protected $blockService;

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Constructs a \Drupal\opigno_dashboard\Form\SettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\opigno_dashboard\BlockServiceInterface $block_service
+   * @param BlockServiceInterface $block_service
    *   The block service object.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, BlockServiceInterface $block_service, ThemeHandlerInterface $theme_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/opigno_dashboard/src/EventSubscriber/RedirectOnAccessDeniedSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_dashboard\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultReasonInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;

@@ @@
   /**
    * Constructs a new ResponseSubscriber instance.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(AccountInterface $current_user) {
@@ @@
   }

   /**
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     $is_anonymous = $this->user->isAnonymous();
     // Add the route name as an extra class to body.
     $route = (string) \Drupal::routeMatch()->getRouteName();
@@ @@
   /**
    * Redirect if 403 and node an event.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The route building event.
    */
-  public function redirectOn403(FilterResponseEvent $event) {
+  public function redirectOn403(ResponseEvent $event) {
     $route_name = \Drupal::routeMatch()->getRouteName();
     $status_code = $event->getResponse()->getStatusCode();
     $is_anonymous = $this->user->isAnonymous();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/opigno_dashboard/src/Controller/DashboardController.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The block service.
    *
-   * @var \Drupal\opigno_dashboard\BlockServiceInterface
+   * @var BlockServiceInterface
    */
   protected $blockService;

@@ @@
   /**
    * The database connection manager.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The users entity query.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface|null
+   * @var QueryInterface|null
    */
   protected $userEntityQuery = NULL;

@@ @@
   /**
    * DashboardController constructor.
    *
-   * @param \Drupal\opigno_dashboard\BlockServiceInterface $block_service
+   * @param BlockServiceInterface $block_service
    *   Opigno dashboard blocks service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(
@@ @@
    * @param bool $user_default
    *   Should the user default positioning be used or not.
    *
-   * @return array|\Symfony\Component\HttpFoundation\JsonResponse
+   * @return array|JsonResponse
    *   Blocks positioning.
    */
   public function getPositioning($uid = NULL, bool $default = FALSE, bool $user_default = FALSE) {
@@ @@
   /**
    * Sets the positioning.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    */
   public function setPositioning(Request $request): JsonResponse {
@@ @@
   /**
    * Returns the default positioning.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The default positioning.
    */
   public function getDefaultPositioning(): JsonResponse {
@@ @@
   /**
    * Sets default positioning.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function setDefaultPositioning(Request $request): JsonResponse {
@@ @@
   /**
    * Restore dashboard settings to defaults for the current user.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function restoreToDefaultAll(): JsonResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/opigno_dashboard/src/Cache/Context/IsCurrentUserPageCacheContext.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * IsCurrentUserPageCacheContext constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The rote match service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
    */
   public function __construct(RouteMatchInterface $route_match, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/opigno_dashboard/src/BlockServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_dashboard;

+use Symfony\Component\HttpFoundation\JsonResponse;
 /**
  * The Opigno dashboard block service definition.
  */
@@ @@
    * @param bool $user_default
    *   Should the user default positioning be used or not.
    *
-   * @return array|\Symfony\Component\HttpFoundation\JsonResponse
+   * @return array|JsonResponse
    *   Blocks positioning.
    */
   public function getPositioning($uid = NULL, bool $default = FALSE, bool $user_default = FALSE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/opigno_dashboard/src/BlockService.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The block manager service.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The database connection service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * BlockService constructor.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/opigno_dashboard/opigno_dashboard.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Menu\LocalTaskManagerInterface;
 /**
  * @file
  * Contains opigno_dashboard.module.
@@ @@
       }
     }

-    /** @var \Drupal\Core\Menu\LocalTaskManagerInterface $manager */
+    /** @var LocalTaskManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.menu.local_task');

-    /** @var \Drupal\Core\Cache\CacheableMetadata $cacheability */
+    /** @var CacheableMetadata $cacheability */
     $cacheability = new CacheableMetadata();
     $cacheability->addCacheableDependency($manager);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

