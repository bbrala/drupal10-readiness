diff --git a/content_synchronizer.info.yml b/content_synchronizer.info.yml
index 63b7585..de3afc0 100644
--- a/content_synchronizer.info.yml
+++ b/content_synchronizer.info.yml
@@ -1,6 +1,6 @@
 name: Content Synchronizer
 type: module
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: Development
 dependencies:
   - drupal:file
diff --git a/src/Base/JsonWriterTrait.php b/src/Base/JsonWriterTrait.php
index c4481f0..9127afe 100644
--- a/src/Base/JsonWriterTrait.php
+++ b/src/Base/JsonWriterTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_synchronizer\Base;
 
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\File\FileSystem;
 use Drupal\file\Entity\File;
@@ -15,7 +16,7 @@ trait JsonWriterTrait {
   /**
    * File System.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
@@ -77,7 +78,7 @@ trait JsonWriterTrait {
   /**
    * Return file system.
    *
-   * @return \Drupal\Core\File\FileSystemInterface|mixed
+   * @return FileSystemInterface|mixed
    *   The file system.
    */
   public function fileSystem() {
diff --git a/src/Commands/ContentSynchronizerCommands.php b/src/Commands/ContentSynchronizerCommands.php
index 458c85f..de311c2 100644
--- a/src/Commands/ContentSynchronizerCommands.php
+++ b/src/Commands/ContentSynchronizerCommands.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\content_synchronizer\Commands;
 
+use Drupal\content_synchronizer\Entity\ImportEntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drush\Exceptions\UserAbortException;
 use Drupal\content_synchronizer\Form\LaunchImportForm;
 use Drupal\content_synchronizer\Processors\ImportProcessor;
 use Drupal\content_synchronizer\Service\ContentSynchronizerManager;
@@ -18,14 +21,14 @@ class ContentSynchronizerCommands extends DrushCommands {
   /**
    * The Content Synchronizer manager.
    *
-   * @var \Drupal\content_synchronizer\Service\ContentSynchronizerManager
+   * @var ContentSynchronizerManager
    */
   protected $contentSynchronizerManager;
 
   /**
    * ContentSynchronizerCommands constructor.
    *
-   * @param \Drupal\content_synchronizer\Service\ContentSynchronizerManager $contentSynchronizerManager
+   * @param ContentSynchronizerManager $contentSynchronizerManager
    *   The content synchronizer manager.
    */
   public function __construct(ContentSynchronizerManager $contentSynchronizerManager) {
@@ -137,10 +140,10 @@ class ContentSynchronizerCommands extends DrushCommands {
    * @command content:synchronizer-create-import
    * @aliases csci
    *
-   * @return \Drupal\content_synchronizer\Entity\ImportEntityInterface|int|string|null
+   * @return ImportEntityInterface|int|string|null
    *   The ImportEntity generated.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function createImport($absolutePath = NULL) {
     $absolutePath = $absolutePath ?: $this->io()->ask(
@@ -250,7 +253,7 @@ class ContentSynchronizerCommands extends DrushCommands {
    * @return string
    *   The user selection.
    *
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    */
   protected function choice($question, array $options, $defaultValue): string {
     return $this->io()->choice(
diff --git a/src/Controller/ArchiveDownloaderController.php b/src/Controller/ArchiveDownloaderController.php
index ae4e5da..6321f24 100644
--- a/src/Controller/ArchiveDownloaderController.php
+++ b/src/Controller/ArchiveDownloaderController.php
@@ -21,14 +21,14 @@ class ArchiveDownloaderController extends ControllerBase {
   /**
    * File System.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * ArchiveDownloaderController constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system.
    */
   public function __construct(FileSystemInterface $fileSystem) {
@@ -47,10 +47,10 @@ class ArchiveDownloaderController extends ControllerBase {
   /**
    * Download the tmp file.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response|null
+   * @return Response|null
    *   The download response.
    */
   public function downloadArchive(Request $request) {
diff --git a/src/Controller/QuickExportController.php b/src/Controller/QuickExportController.php
index 5b3599f..2aa0688 100644
--- a/src/Controller/QuickExportController.php
+++ b/src/Controller/QuickExportController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_synchronizer\Controller;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\content_synchronizer\Processors\BatchExportProcessor;
 use Drupal\content_synchronizer\Processors\ExportEntityWriter;
 use Drupal\content_synchronizer\Service\ArchiveDownloader;
@@ -28,10 +29,10 @@ class QuickExportController {
   /**
    * Launch quick export batch.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   THe response.
    */
   public function quickExport(Request $request) {
@@ -41,7 +42,7 @@ class QuickExportController {
       ->toString();
 
     if ($request->query->has('entityTypeId') && $request->query->has('entityId')) {
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = \Drupal::entityTypeManager()
         ->getStorage($request->query->get('entityTypeId'))
         ->load($request->query->get('entityId'));
diff --git a/src/Entity/ExportEntity.php b/src/Entity/ExportEntity.php
index 25fba25..6384340 100644
--- a/src/Entity/ExportEntity.php
+++ b/src/Entity/ExportEntity.php
@@ -219,7 +219,7 @@ class ExportEntity extends ContentEntityBase implements ExportEntityInterface {
   /**
    * Add entity to the export entities list.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to add.
    */
   public function addEntity(EntityInterface $entity) {
@@ -238,7 +238,7 @@ class ExportEntity extends ContentEntityBase implements ExportEntityInterface {
   /**
    * Check if hte passed entity is already in the entities list.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    */
   public function hasEntity(EntityInterface $entity) {
@@ -248,7 +248,7 @@ class ExportEntity extends ContentEntityBase implements ExportEntityInterface {
   /**
    * Remove entity from the export entity list.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function removeEntity(EntityInterface $entity) {
diff --git a/src/Entity/ExportEntityViewBuilder.php b/src/Entity/ExportEntityViewBuilder.php
index 5b8e204..ab74a7c 100644
--- a/src/Entity/ExportEntityViewBuilder.php
+++ b/src/Entity/ExportEntityViewBuilder.php
@@ -22,24 +22,24 @@ class ExportEntityViewBuilder extends EntityViewBuilder {
   /**
    * Form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   private $formBuilder;
 
   /**
    * ExportEntityViewBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repo.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Theme\Registry|null $theme_registry
+   * @param Registry|null $theme_registry
    *   The theme registry.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface|null $entity_display_repository
+   * @param EntityDisplayRepositoryInterface|null $entity_display_repository
    *   The entity Display repo.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The form builder.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, Registry $theme_registry = NULL, EntityDisplayRepositoryInterface $entity_display_repository = NULL, FormBuilderInterface $formBuilder = NULL) {
diff --git a/src/Entity/ImportEntity.php b/src/Entity/ImportEntity.php
index 85e34f0..40eb672 100644
--- a/src/Entity/ImportEntity.php
+++ b/src/Entity/ImportEntity.php
@@ -99,7 +99,7 @@ class ImportEntity extends ContentEntityBase implements ImportEntityInterface {
   /**
    * The global reference manager service.
    *
-   * @var \Drupal\content_synchronizer\Service\GlobalReferenceManager
+   * @var GlobalReferenceManager
    */
   protected $globalReferenceManager;
 
@@ -199,7 +199,7 @@ class ImportEntity extends ContentEntityBase implements ImportEntityInterface {
   /**
    * Return the Archive file.
    *
-   * @return \Drupal\file\Entity\File|null
+   * @return File|null
    *   THe archive file.
    */
   public function getArchive() {
@@ -318,7 +318,7 @@ class ImportEntity extends ContentEntityBase implements ImportEntityInterface {
   public function save() {
     $name = $this->getName();
     if (empty($name)) {
-      /** @var \Drupal\file\Entity\File $file */
+      /** @var File $file */
       $file = $this->get(static::FIELD_ARCHIVE)->referencedEntities()[0];
       $this->setName(basename($file->getFileUri()));
     }
@@ -493,7 +493,7 @@ class ImportEntity extends ContentEntityBase implements ImportEntityInterface {
     // Get file and zip file path.
     if ($file = $this->getArchive()) {
       if ($zipUrl = $file->getFileUri()) {
-        /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
+        /** @var FileSystemInterface $fileSystem */
         $fileSystem = \Drupal::service('file_system');
         $realPathUrl = $fileSystem->realpath($zipUrl);
 
diff --git a/src/Entity/ImportEntityViewBuilder.php b/src/Entity/ImportEntityViewBuilder.php
index a12111a..e7247de 100644
--- a/src/Entity/ImportEntityViewBuilder.php
+++ b/src/Entity/ImportEntityViewBuilder.php
@@ -22,24 +22,24 @@ class ImportEntityViewBuilder extends EntityViewBuilder {
   /**
    * Form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   private $formBuilder;
 
   /**
    * ExportEntityViewBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repo.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Theme\Registry|null $theme_registry
+   * @param Registry|null $theme_registry
    *   The theme registry.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface|null $entity_display_repository
+   * @param EntityDisplayRepositoryInterface|null $entity_display_repository
    *   The entity Display repo.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The form builder.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, Registry $theme_registry = NULL, EntityDisplayRepositoryInterface $entity_display_repository = NULL, FormBuilderInterface $formBuilder = NULL) {
diff --git a/src/Events/ImportEvent.php b/src/Events/ImportEvent.php
index e8b9ecf..9acef71 100644
--- a/src/Events/ImportEvent.php
+++ b/src/Events/ImportEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\content_synchronizer\Events;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Import event.
@@ -15,7 +15,7 @@ class ImportEvent extends Event {
   /**
    * The imported entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
@@ -29,7 +29,7 @@ class ImportEvent extends Event {
   /**
    * Return the entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   THe entity.
    */
   public function getEntity() {
@@ -39,7 +39,7 @@ class ImportEvent extends Event {
   /**
    * Set the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   THe entity.
    */
   public function setEntity(EntityInterface $entity) {
diff --git a/src/ExportEntityAccessControlHandler.php b/src/ExportEntityAccessControlHandler.php
index 435df0e..e665596 100644
--- a/src/ExportEntityAccessControlHandler.php
+++ b/src/ExportEntityAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_synchronizer;
 
+use Drupal\content_synchronizer\Entity\ExportEntityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class ExportEntityAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\content_synchronizer\Entity\ExportEntityInterface $entity */
+    /** @var ExportEntityInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
diff --git a/src/ExportEntityHtmlRouteProvider.php b/src/ExportEntityHtmlRouteProvider.php
index 98559dc..265e424 100644
--- a/src/ExportEntityHtmlRouteProvider.php
+++ b/src/ExportEntityHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class ExportEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -61,10 +61,10 @@ class ExportEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/Form/ExportConfirmForm.php b/src/Form/ExportConfirmForm.php
index 6244a2e..4181a97 100644
--- a/src/Form/ExportConfirmForm.php
+++ b/src/Form/ExportConfirmForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\content_synchronizer\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\content_synchronizer\Entity\ExportEntity;
 use Drupal\content_synchronizer\Processors\BatchExportProcessor;
 use Drupal\content_synchronizer\Processors\ExportEntityWriter;
@@ -33,30 +35,30 @@ class ExportConfirmForm extends ConfirmFormBase {
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $manager;
 
   /**
    * The export manager.
    *
-   * @var \Drupal\content_synchronizer\Service\ExportManager
+   * @var ExportManager
    */
   protected $exportManager;
 
   /**
    * ExportConfirmForm constructor.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   The tempstore factory.
-   * @param \Drupal\content_synchronizer\Service\ExportManager $exportManager
+   * @param ExportManager $exportManager
    *   The export manager.
    */
   public function __construct(PrivateTempStoreFactory $tempStoreFactory, ExportManager $exportManager) {
@@ -70,7 +72,7 @@ class ExportConfirmForm extends ConfirmFormBase {
   public static function create(ContainerInterface $container) {
     return new static(
       $container->get('tempstore.private'),
-      $container->get(ExportManager::SERVICE_NAME)
+      $this->exportManager
     );
   }
 
@@ -142,7 +144,7 @@ class ExportConfirmForm extends ConfirmFormBase {
    *
    * @param array $form
    *   The form build array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    */
   public function onQuickExport(array &$form, FormStateInterface $formState) {
@@ -172,14 +174,14 @@ class ExportConfirmForm extends ConfirmFormBase {
    *
    * @param array $form
    *   The form build array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    */
   public function onAddToExport(array &$form, FormStateInterface $formState) {
     $exportsList = ExportEntity::loadMultiple($formState->getValue('exports_list'));
 
     foreach ($this->getEntities() as $entity) {
-      /** @var \Drupal\content_synchronizer\Entity\ExportEntity $export */
+      /** @var ExportEntity $export */
       foreach ($exportsList as $export) {
         $export->addEntity($entity);
       }
@@ -195,7 +197,7 @@ class ExportConfirmForm extends ConfirmFormBase {
   /**
    * Return the list of entities to export.
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
+   * @return array|EntityInterface[]
    *   The entities.
    */
   protected function getEntities() {
diff --git a/src/Form/ExportEntityForm.php b/src/Form/ExportEntityForm.php
index 0a0414d..6635bbe 100644
--- a/src/Form/ExportEntityForm.php
+++ b/src/Form/ExportEntityForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_synchronizer\Form;
 
+use Drupal\content_synchronizer\Entity\ExportEntity;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -15,7 +16,7 @@ class ExportEntityForm extends ContentEntityForm {
   /**
    * The export entity.
    *
-   * @var \Drupal\content_synchronizer\Entity\ExportEntity
+   * @var ExportEntity
    */
   protected $export;
 
diff --git a/src/Form/ExportEntitySettingsForm.php b/src/Form/ExportEntitySettingsForm.php
index 0609eee..a74b25f 100644
--- a/src/Form/ExportEntitySettingsForm.php
+++ b/src/Form/ExportEntitySettingsForm.php
@@ -29,7 +29,7 @@ class ExportEntitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class ExportEntitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/ImportEntityForm.php b/src/Form/ImportEntityForm.php
index 751ceb7..8352b28 100644
--- a/src/Form/ImportEntityForm.php
+++ b/src/Form/ImportEntityForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_synchronizer\Form;
 
+use Drupal\content_synchronizer\Entity\ImportEntity;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\ContentEntityForm;
@@ -20,7 +21,7 @@ class ImportEntityForm extends ContentEntityForm {
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -65,7 +66,7 @@ class ImportEntityForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\content_synchronizer\Entity\ImportEntity $entity */
+    /** @var ImportEntity $entity */
     $entity = &$this->entity;
 
     $status = parent::save($form, $form_state);
diff --git a/src/Form/ImportEntitySettingsForm.php b/src/Form/ImportEntitySettingsForm.php
index eb62f9b..2809b7b 100644
--- a/src/Form/ImportEntitySettingsForm.php
+++ b/src/Form/ImportEntitySettingsForm.php
@@ -29,7 +29,7 @@ class ImportEntitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class ImportEntitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/LaunchExportForm.php b/src/Form/LaunchExportForm.php
index 9c2225a..b7fb934 100644
--- a/src/Form/LaunchExportForm.php
+++ b/src/Form/LaunchExportForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\content_synchronizer\Form;
 
+use Drupal\content_synchronizer\Entity\ExportEntity;
+use Drupal\content_synchronizer\Entity\ImportEntity;
 use Drupal\content_synchronizer\Processors\BatchExportProcessor;
 use Drupal\content_synchronizer\Processors\ExportEntityWriter;
 use Drupal\content_synchronizer\Service\ArchiveDownloader;
@@ -20,7 +22,7 @@ class LaunchExportForm extends FormBase {
   /**
    * The export entity.
    *
-   * @var \Drupal\content_synchronizer\Entity\ExportEntity
+   * @var ExportEntity
    */
   protected $export;
 
@@ -34,7 +36,7 @@ class LaunchExportForm extends FormBase {
   /**
    * LaunchExportForm constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    */
   public function __construct(Request $request) {
@@ -62,7 +64,7 @@ class LaunchExportForm extends FormBase {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
 
-    /** @var \Drupal\content_synchronizer\Entity\ImportEntity $import */
+    /** @var ImportEntity $import */
     $this->export = $form_state->getBuildInfo()['export'];
 
     // Entity list :
@@ -181,7 +183,7 @@ class LaunchExportForm extends FormBase {
           '#tag'        => 'iframe',
           '#attributes' => [
             'style' => ['display:none'],
-            'src'   => file_create_url($archiveUri),
+            'src'   => \Drupal::service('file_url_generator')->generateAbsoluteString($archiveUri),
           ],
         ];
       }
@@ -191,7 +193,7 @@ class LaunchExportForm extends FormBase {
   /**
    * Return request.
    *
-   * @return mixed|\Symfony\Component\HttpFoundation\Request
+   * @return mixed|Request
    *   The value of the param.
    */
   public static function getRequestParam() {
diff --git a/src/Form/LaunchImportForm.php b/src/Form/LaunchImportForm.php
index 763660d..e995292 100644
--- a/src/Form/LaunchImportForm.php
+++ b/src/Form/LaunchImportForm.php
@@ -16,7 +16,7 @@ class LaunchImportForm extends FormBase {
   /**
    * The import entity.
    *
-   * @var \Drupal\content_synchronizer\Entity\ImportEntity
+   * @var ImportEntity
    */
   protected $import;
 
@@ -32,7 +32,7 @@ class LaunchImportForm extends FormBase {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
 
-    /** @var \Drupal\content_synchronizer\Entity\ImportEntity $import */
+    /** @var ImportEntity $import */
     $this->import = $form_state->getBuildInfo()['import'];
 
     if ($this->import->getProcessingStatus() === ImportEntity::STATUS_NOT_STARTED) {
diff --git a/src/ImportEntityAccessControlHandler.php b/src/ImportEntityAccessControlHandler.php
index 2226d12..5856467 100644
--- a/src/ImportEntityAccessControlHandler.php
+++ b/src/ImportEntityAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_synchronizer;
 
+use Drupal\content_synchronizer\Entity\ImportEntityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class ImportEntityAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\content_synchronizer\Entity\ImportEntityInterface $entity */
+    /** @var ImportEntityInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
diff --git a/src/ImportEntityHtmlRouteProvider.php b/src/ImportEntityHtmlRouteProvider.php
index fd3f692..e535b87 100644
--- a/src/ImportEntityHtmlRouteProvider.php
+++ b/src/ImportEntityHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class ImportEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -61,10 +61,10 @@ class ImportEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/Plugin/Action/ExportAction.php b/src/Plugin/Action/ExportAction.php
index a47d7df..5a42bfb 100644
--- a/src/Plugin/Action/ExportAction.php
+++ b/src/Plugin/Action/ExportAction.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\content_synchronizer\Plugin\Action;
 
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\content_synchronizer\Form\ExportConfirmForm;
 use Drupal\content_synchronizer\Service\ExportManager;
 use Drupal\Core\Action\ActionBase;
@@ -24,21 +26,21 @@ class ExportAction extends ActionBase implements ContainerFactoryPluginInterface
   /**
    * The tempstore object.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The export manager.
    *
-   * @var \Drupal\content_synchronizer\Service\ExportManager
+   * @var ExportManager
    */
   protected $exportManager;
 
@@ -68,7 +70,7 @@ class ExportAction extends ActionBase implements ContainerFactoryPluginInterface
       'url'      => \Drupal::request()->getRequestUri(),
       'entities' => [],
     ];
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     foreach ($entities as $entity) {
       $info['entities'][$entity->getEntityTypeId()][] = $entity->id();
     }
@@ -92,7 +94,7 @@ class ExportAction extends ActionBase implements ContainerFactoryPluginInterface
       $plugin_definition,
       $container->get('tempstore.private'),
       $container->get('current_user'),
-      $container->get(ExportManager::SERVICE_NAME)
+      $this->exportManager
     );
   }
 
diff --git a/src/Plugin/content_synchronizer/entity_processor/FileProcessor.php b/src/Plugin/content_synchronizer/entity_processor/FileProcessor.php
index b277668..8d0c1fd 100644
--- a/src/Plugin/content_synchronizer/entity_processor/FileProcessor.php
+++ b/src/Plugin/content_synchronizer/entity_processor/FileProcessor.php
@@ -53,7 +53,7 @@ class FileProcessor extends EntityProcessorBase implements EntityProcessorInterf
     $destination = $this->createDirTreeForFileDest(str_replace('://', '/', $file->getFileUri()), $assetsDir);
 
     // Copy file in destination directory.
-    file_copy($file, $destination);
+    \Drupal::service('file.repository')->copy($file, $destination);
   }
 
   /**
@@ -84,10 +84,10 @@ class FileProcessor extends EntityProcessorBase implements EntityProcessorInterf
    *
    * @param array $data
    *   The data to import.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entityToImport
+   * @param EntityInterface|null $entityToImport
    *   The entity to import.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity to import.
    */
   public function getEntityToImport(array $data, EntityInterface $entityToImport = NULL) {
diff --git a/src/Plugin/content_synchronizer/entity_processor/TaxonomyTermProcessor.php b/src/Plugin/content_synchronizer/entity_processor/TaxonomyTermProcessor.php
index f110780..9578d1e 100644
--- a/src/Plugin/content_synchronizer/entity_processor/TaxonomyTermProcessor.php
+++ b/src/Plugin/content_synchronizer/entity_processor/TaxonomyTermProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\content_synchronizer\Plugin\content_synchronizer\entity_processor;
 
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
+use Drupal\content_synchronizer\Entity\ImportEntity;
 use Drupal\content_synchronizer\Events\ImportEvent;
 use Drupal\content_synchronizer\Processors\Entity\EntityProcessorBase;
 use Drupal\content_synchronizer\Processors\ExportEntityWriter;
@@ -40,7 +42,7 @@ class TaxonomyTermProcessor extends EntityProcessorBase {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
 
     // Listen import event.
-    /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $dispatcher */
+    /** @var ContainerAwareEventDispatcher $dispatcher */
     $dispatcher = \Drupal::service('event_dispatcher');
     $dispatcher->addListener(ImportEvent::ON_ENTITY_IMPORTER, [
       $this,
@@ -58,10 +60,10 @@ class TaxonomyTermProcessor extends EntityProcessorBase {
     $defaultLanguageData = $this->getDefaultLanguageData($data, FALSE);
     if (array_key_exists('parents', $defaultLanguageData)) {
 
-      /** @var \Drupal\content_synchronizer\Processors\ImportProcessor $importProcessor */
+      /** @var ImportProcessor $importProcessor */
       $importProcessor = ImportProcessor::getCurrentImportProcessor();
 
-      /** @var \Drupal\content_synchronizer\Entity\ImportEntity $import */
+      /** @var ImportEntity $import */
       $import = $importProcessor->getImport();
 
       foreach ($defaultLanguageData['parents'] as $parentGid) {
@@ -79,7 +81,7 @@ class TaxonomyTermProcessor extends EntityProcessorBase {
         // The entity has not been imported yet, so we iport it.
         else {
           // Get the plugin of the entity :
-          /** @var \Drupal\content_synchronizer\Processors\Entity\EntityProcessorBase $plugin */
+          /** @var EntityProcessorBase $plugin */
           $plugin = $this->getEntityProcessorManager()
             ->getInstanceByEntityType($this->getGlobalReferenceManager()
               ->getEntityTypeFromGid($parentGid));
@@ -109,7 +111,7 @@ class TaxonomyTermProcessor extends EntityProcessorBase {
   /**
    * Action on Entity import end.
    *
-   * @param \Drupal\content_synchronizer\Events\ImportEvent $event
+   * @param ImportEvent $event
    *   The event.
    */
   public function onImportedEntity(ImportEvent $event) {
@@ -160,7 +162,7 @@ class TaxonomyTermProcessor extends EntityProcessorBase {
   /**
    * Return the list of parents terms.
    *
-   * @param \Drupal\taxonomy\Entity\Term $child
+   * @param Term $child
    *   The child term.
    *
    * @return mixed
diff --git a/src/Plugin/content_synchronizer/type_processor/EntityReferenceFieldItemListProcessor.php b/src/Plugin/content_synchronizer/type_processor/EntityReferenceFieldItemListProcessor.php
index 4f56efa..193f296 100644
--- a/src/Plugin/content_synchronizer/type_processor/EntityReferenceFieldItemListProcessor.php
+++ b/src/Plugin/content_synchronizer/type_processor/EntityReferenceFieldItemListProcessor.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\content_synchronizer\Plugin\content_synchronizer\type_processor;
 
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
+use Drupal\content_synchronizer\Processors\Entity\EntityProcessorBase;
+use Drupal\content_synchronizer\Entity\ImportEntity;
 use Drupal\content_synchronizer\Events\ImportEvent;
 use Drupal\content_synchronizer\Processors\Entity\EntityProcessorPluginManager;
 use Drupal\content_synchronizer\Processors\ImportProcessor;
@@ -35,7 +38,7 @@ class EntityReferenceFieldItemListProcessor extends TypeProcessorBase {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
 
     // Listen import event.
-    /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $dispatcher */
+    /** @var ContainerAwareEventDispatcher $dispatcher */
     $dispatcher = \Drupal::service('event_dispatcher');
     $dispatcher->addListener(ImportEvent::ON_ENTITY_IMPORTER, [
       $this,
@@ -46,7 +49,7 @@ class EntityReferenceFieldItemListProcessor extends TypeProcessorBase {
   /**
    * Return export data array.
    *
-   * @param \Drupal\Core\TypedData\TypedData $propertyData
+   * @param TypedData $propertyData
    *   The propertyData.
    *
    * @return array
@@ -56,13 +59,13 @@ class EntityReferenceFieldItemListProcessor extends TypeProcessorBase {
     $data = [];
 
     // Init processor service.
-    /** @var \Drupal\content_synchronizer\Processors\Entity\EntityProcessorPluginManager $entityProcessorManager */
+    /** @var EntityProcessorPluginManager $entityProcessorManager */
     $entityProcessorManager = \Drupal::service(EntityProcessorPluginManager::SERVICE_NAME);
 
     $order = 0;
     /** @var \Drupal\Core\Entity\Entity $entity */
     foreach ($propertyData->referencedEntities() as $entity) {
-      /** @var \Drupal\content_synchronizer\Processors\Entity\EntityProcessorBase $plugin */
+      /** @var EntityProcessorBase $plugin */
       $plugin = $entityProcessorManager->getInstanceByEntityType($entity->getEntityTypeId());
       if (get_class($entity) != "Drupal\user\Entity\User") {
         if ($gid = $plugin->export($entity)) {
@@ -79,19 +82,19 @@ class EntityReferenceFieldItemListProcessor extends TypeProcessorBase {
    * {@inheritdoc}
    */
   public function initImportedEntity(EntityInterface $entityToImport, $propertyId, array $data) {
-    /** @var \Drupal\content_synchronizer\Service\GlobalReferenceManager $referenceManager */
+    /** @var GlobalReferenceManager $referenceManager */
     $referenceManager = \Drupal::service(GlobalReferenceManager::SERVICE_NAME);
 
-    /** @var \Drupal\content_synchronizer\Processors\ImportProcessor $importProcessor */
+    /** @var ImportProcessor $importProcessor */
     $importProcessor = ImportProcessor::getCurrentImportProcessor();
 
-    /** @var \Drupal\content_synchronizer\Entity\ImportEntity $import */
+    /** @var ImportEntity $import */
     $import = $importProcessor->getImport();
 
-    /** @var \Drupal\content_synchronizer\Processors\Entity\EntityProcessorPluginManager $pluginManager */
+    /** @var EntityProcessorPluginManager $pluginManager */
     $pluginManager = \Drupal::service(EntityProcessorPluginManager::SERVICE_NAME);
 
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $referenceField */
+    /** @var EntityReferenceFieldItemList $referenceField */
     $referenceField = $entityToImport->get($propertyId);
 
     // Parse list of entities :
@@ -117,7 +120,7 @@ class EntityReferenceFieldItemListProcessor extends TypeProcessorBase {
         // The entity has not been imported yet, so we iport it.
         else {
           // Get the plugin of the entity :
-          /** @var \Drupal\content_synchronizer\Processors\Entity\EntityProcessorBase $plugin */
+          /** @var EntityProcessorBase $plugin */
           $plugin = $pluginManager->getInstanceByEntityType($referenceManager->getEntityTypeFromGid($entityGid));
           if ($entityData = $import->getEntityDataFromGid($entityGid)) {
             $referencedEntity = $plugin->import($entityData);
@@ -134,7 +137,7 @@ class EntityReferenceFieldItemListProcessor extends TypeProcessorBase {
    *
    * @param string $gid
    *   The gid.
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemList $field
+   * @param EntityReferenceFieldItemList $field
    *   The field.
    * @param int $order
    *   The order.
@@ -149,7 +152,7 @@ class EntityReferenceFieldItemListProcessor extends TypeProcessorBase {
   /**
    * Action on Entity import end.
    *
-   * @param \Drupal\content_synchronizer\Events\ImportEvent $event
+   * @param ImportEvent $event
    *   The event.
    */
   public function onImportedEntity(ImportEvent $event) {
diff --git a/src/Plugin/content_synchronizer/type_processor/FieldItemListProcessor.php b/src/Plugin/content_synchronizer/type_processor/FieldItemListProcessor.php
index 2b62b76..2d07a23 100644
--- a/src/Plugin/content_synchronizer/type_processor/FieldItemListProcessor.php
+++ b/src/Plugin/content_synchronizer/type_processor/FieldItemListProcessor.php
@@ -74,7 +74,7 @@ class FieldItemListProcessor extends TypeProcessorBase {
     $fileNameData = explode('/files/', urldecode($image));
     $fileName = end($fileNameData);
 
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = \Drupal::entityQuery('file')
       ->condition('uri', '%://' . $fileName, 'LIKE')
       ->execute();
diff --git a/src/Plugin/content_synchronizer/type_processor/FileFieldItemListProcessor.php b/src/Plugin/content_synchronizer/type_processor/FileFieldItemListProcessor.php
index 57ae07d..2eeee31 100644
--- a/src/Plugin/content_synchronizer/type_processor/FileFieldItemListProcessor.php
+++ b/src/Plugin/content_synchronizer/type_processor/FileFieldItemListProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_synchronizer\Plugin\content_synchronizer\type_processor;
 
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\content_synchronizer\Processors\ExportEntityWriter;
 use Drupal\content_synchronizer\Processors\ImportProcessor;
 use Drupal\content_synchronizer\Processors\Type\TypeProcessorBase;
@@ -30,7 +31,7 @@ class FileFieldItemListProcessor extends TypeProcessorBase {
     /** @var \Drupal\file\Entity\FileItem $data */
     foreach ($propertyData as $data) {
 
-      /** @var \Drupal\file\Entity\File $file */
+      /** @var File $file */
       $file = File::load($data->target_id);
       $plugin = $this->pluginManager->getInstanceByEntityType($file->getEntityTypeId());
       if ($fileGid = $plugin->export($file)) {
@@ -48,7 +49,7 @@ class FileFieldItemListProcessor extends TypeProcessorBase {
    * {@inheritdoc}
    */
   public function initImportedEntity(EntityInterface $entityToImport, $propertyId, array $data) {
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $referenceField */
+    /** @var EntityReferenceFieldItemListInterface $referenceField */
     $referenceField = $entityToImport->get($propertyId);
 
     // Empty previous references.
diff --git a/src/Processors/BatchExportProcessor.php b/src/Processors/BatchExportProcessor.php
index 73fdf15..77eef3b 100644
--- a/src/Processors/BatchExportProcessor.php
+++ b/src/Processors/BatchExportProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_synchronizer\Processors;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\content_synchronizer\Base\BatchProcessorBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
@@ -89,7 +90,7 @@ class BatchExportProcessor extends BatchProcessorBase {
     $writer = $entityData['writer'];
 
     // Get the entity :
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     if ($entity = \Drupal::entityTypeManager()
       ->getStorage($entityData['entity_type'])
       ->load($entityData['entity_id'])
diff --git a/src/Processors/BatchImportProcessor.php b/src/Processors/BatchImportProcessor.php
index ae86834..0e9a7db 100644
--- a/src/Processors/BatchImportProcessor.php
+++ b/src/Processors/BatchImportProcessor.php
@@ -23,7 +23,7 @@ class BatchImportProcessor extends BatchProcessorBase {
   /**
    * Launch the import of the import entity.
    *
-   * @param \Drupal\content_synchronizer\Entity\ImportEntity $import
+   * @param ImportEntity $import
    *   The import entity.
    * @param array $entitiesToImport
    *   The entities to import.
diff --git a/src/Processors/Entity/EntityProcessorBase.php b/src/Processors/Entity/EntityProcessorBase.php
index 858c213..4249e4d 100644
--- a/src/Processors/Entity/EntityProcessorBase.php
+++ b/src/Processors/Entity/EntityProcessorBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\content_synchronizer\Processors\Entity;
 
+use Drupal\Core\Language\LanguageInterface;
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
+use Drupal\content_synchronizer\Processors\Type\TypeProcessorBase;
+use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\content_synchronizer\Events\ImportEvent;
 use Drupal\content_synchronizer\Processors\ExportEntityWriter;
 use Drupal\content_synchronizer\Processors\ExportProcessor;
@@ -45,28 +49,28 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
   /**
    * The global reference manager service.
    *
-   * @var \Drupal\content_synchronizer\Service\GlobalReferenceManager
+   * @var GlobalReferenceManager
    */
   protected $globalReferenceManager;
 
   /**
    * The type processor manager service.
    *
-   * @var \Drupal\content_synchronizer\Processors\Type\TypeProcessorPluginManager
+   * @var TypeProcessorPluginManager
    */
   protected $typeProcessorManager;
 
   /**
    * The entity processor manager service.
    *
-   * @var \Drupal\content_synchronizer\Processors\Entity\EntityProcessorPluginManager
+   * @var EntityProcessorPluginManager
    */
   protected $entityProcessorManager;
 
   /**
    * The entity publisher service.
    *
-   * @var \Drupal\content_synchronizer\Service\EntityPublisher
+   * @var EntityPublisher
    */
   protected $entityPublisher;
 
@@ -80,7 +84,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
   /**
    * Export the entity and return the gid if exists, else  false.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entityToExport
+   * @param EntityInterface $entityToExport
    *   The entity to export.
    *
    * @return bool|string
@@ -173,10 +177,10 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
   /**
    * Return the entity translations.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @return array|\Drupal\Core\Language\LanguageInterface[]
+   * @return array|LanguageInterface[]
    *   The array of translations.
    */
   protected function getEntityTranslations(EntityInterface $entity) {
@@ -203,7 +207,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
    *
    * @param string $languageId
    *   The language id.
-   * @param \Drupal\Core\Entity\EntityInterface $existingEntity
+   * @param EntityInterface $existingEntity
    *   The entity to translate.
    * @param array $dataToImport
    *   The data to import.
@@ -252,7 +256,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
       if ($existingEntity) {
         $backup = clone($existingEntity);
       }
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       if ($entity = $this->getEntityToImport($dataToImport, $existingEntity)) {
         $this->setChangedTime($entity, $dataToImport);
         $this->getEntityPublisher()
@@ -260,7 +264,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
       }
     }
     else {
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       if ($entity = $this->getEntityToImport($dataToImport, NULL)) {
 
         $this->checkBundle($entity, TRUE);
@@ -289,7 +293,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
   /**
    * Check if entity's bundle exist, create-it.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param bool $force_create
    *   Force creation.
@@ -363,7 +367,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
   /**
    * Update the changed time form the data array.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to update.
    * @param array $dataToImport
    *   THe data to import.
@@ -382,14 +386,14 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
    * Callback when the entity has been imported.
    */
   protected function onEntityImported($gid, EntityInterface $entity) {
-    /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $dispatcher */
+    /** @var ContainerAwareEventDispatcher $dispatcher */
     $dispatcher = \Drupal::service('event_dispatcher');
 
     $event = new ImportEvent();
     $event->setEntity($entity);
     $event->setGid($gid);
 
-    $dispatcher->dispatch(ImportEvent::ON_ENTITY_IMPORTER, $event);
+    $dispatcher->dispatch($event, ImportEvent::ON_ENTITY_IMPORTER);
   }
 
   /**
@@ -401,7 +405,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
    *    "property_2"=>[ "value1"]
    * ].
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entityToExport
+   * @param EntityInterface $entityToExport
    *   The entity to export.
    *
    * @return array|bool
@@ -418,7 +422,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
     $propertyIdsNotToExport += array_intersect_key($contentEntityTypeKeys, array_flip($propertyIdsNotToExport));
 
     // Init keys like bundles.
-    /** @var \Drupal\Core\Entity\ContentEntityType $contentEntityType */
+    /** @var ContentEntityType $contentEntityType */
     foreach ($contentEntityTypeKeys as $key => $name) {
       if (!in_array($name, $propertyIdsNotToExport)) {
         if (method_exists($entityToExport, $key)) {
@@ -431,7 +435,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
       ->getProperties() as $propertyId => $propertyData) {
       // Check properties to export :
       if (!in_array($propertyId, $propertyIdsNotToExport)) {
-        /** @var \Drupal\content_synchronizer\Processors\Type\TypeProcessorBase $plugin */
+        /** @var TypeProcessorBase $plugin */
         if ($plugin = $this->getTypeProcessorManager()
           ->getInstanceByFieldType(get_class($propertyData))
         ) {
@@ -450,7 +454,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
    *
    * @param array $data
    *   The data to import.
-   * @param \Drupal\Core\Entity\EntityInterface $entityToImport
+   * @param EntityInterface $entityToImport
    *   The existing entity to update.
    */
   public function getEntityToImport(array $data, EntityInterface $entityToImport = NULL) {
@@ -466,11 +470,11 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
         $defaultData = $this->getDefaultLanguageData($data);
 
         // Get type manager.
-        /** @var \Drupal\Core\Entity\ContentEntityType $typeManager */
+        /** @var ContentEntityType $typeManager */
         $typeManager = \Drupal::entityTypeManager()->getDefinition($typeId);
         $bundleKey = $typeManager->getKey('bundle');
 
-        /** @var \Drupal\Core\Entity\EntityFieldManager $entityFieldManager */
+        /** @var EntityFieldManager $entityFieldManager */
         $entityFieldManager = \Drupal::service('entity_field.manager');
         $baseDefinitions = $entityFieldManager->getFieldDefinitions($typeId, $data[$bundleKey]);
         $createData = array_intersect_key($defaultData, $baseDefinitions);
@@ -512,7 +516,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
         // Check properties to import :
         if (!in_array($propertyId, $propertyIdsNotToImport)) {
 
-          /** @var \Drupal\content_synchronizer\Processors\Type\TypeProcessorBase $plugin */
+          /** @var TypeProcessorBase $plugin */
           if ($plugin = $this->getTypeProcessorManager()
             ->getInstanceByFieldType(get_class($propertyData))
           ) {
@@ -545,7 +549,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
   /**
    * Get the global reference entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entityToExport
+   * @param EntityInterface $entityToExport
    *   The entity to export.
    *
    * @return string
@@ -565,7 +569,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
   /**
    * Get the contentSyncManager.
    *
-   * @return \Drupal\content_synchronizer\Service\GlobalReferenceManager
+   * @return GlobalReferenceManager
    *   The global reference manager service.
    */
   final protected function getGlobalReferenceManager() {
@@ -579,7 +583,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
   /**
    * Get the TypeProcessor plugin manager.
    *
-   * @return \Drupal\content_synchronizer\Processors\Type\TypeProcessorPluginManager
+   * @return TypeProcessorPluginManager
    *   The type processor manager service.
    */
   protected function getTypeProcessorManager() {
@@ -593,7 +597,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
   /**
    * Get the EntityProcessor plugin manager.
    *
-   * @return \Drupal\content_synchronizer\Processors\Entity\EntityProcessorPluginManager
+   * @return EntityProcessorPluginManager
    *   The entity processor manager service.
    */
   protected function getEntityProcessorManager() {
@@ -621,7 +625,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
   /**
    * Return the entity saver service.
    *
-   * @return \Drupal\content_synchronizer\Service\EntityPublisher
+   * @return EntityPublisher
    *   The Entity publisher service.
    */
   public function getEntityPublisher() {
@@ -635,7 +639,7 @@ class EntityProcessorBase extends PluginBase implements EntityProcessorInterface
   /**
    * Return if the entity can be exported.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   THe entity.
    *
    * @return bool
diff --git a/src/Processors/Entity/EntityProcessorInterface.php b/src/Processors/Entity/EntityProcessorInterface.php
index 020e9cf..a42fda9 100644
--- a/src/Processors/Entity/EntityProcessorInterface.php
+++ b/src/Processors/Entity/EntityProcessorInterface.php
@@ -19,7 +19,7 @@ interface EntityProcessorInterface extends PluginInspectionInterface {
    *    "property_2"=>[ "value1"]
    * ].
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entityToExport
+   * @param EntityInterface $entityToExport
    *   The entity to export.
    *
    * @return array|bool
@@ -38,7 +38,7 @@ interface EntityProcessorInterface extends PluginInspectionInterface {
   /**
    * Return the entity to import.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity to import.
    */
   public function getEntityToImport(array $data, EntityInterface $existingEntity);
diff --git a/src/Processors/ExportEntityWriter.php b/src/Processors/ExportEntityWriter.php
index 268a7c0..48f91f7 100644
--- a/src/Processors/ExportEntityWriter.php
+++ b/src/Processors/ExportEntityWriter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_synchronizer\Processors;
 
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\content_synchronizer\Base\JsonWriterTrait;
 use Drupal\Core\Archiver\ArchiveTar;
 use Drupal\Core\Entity\EntityInterface;
@@ -82,7 +83,7 @@ class ExportEntityWriter {
   /**
    * Write the document to export.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entityToExport
+   * @param EntityInterface $entityToExport
    *   The entity to export.
    * @param array $dataToExport
    *   The data to export.
@@ -129,7 +130,7 @@ class ExportEntityWriter {
   /**
    * Add the entity to the exported root entities list.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The root entity to add.
    */
   public function addRootEntity(EntityInterface $entity) {
@@ -169,7 +170,7 @@ class ExportEntityWriter {
    * Zip the generated files.
    */
   public function archiveFiles() {
-    /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
+    /** @var FileSystemInterface $fileSystem */
     $fileSystem = \Drupal::service('file_system');
     $path = $fileSystem->realpath($this->getDirPath());
 
@@ -189,7 +190,7 @@ class ExportEntityWriter {
    *   The repertory path.
    * @param string $parent
    *   The parent.
-   * @param \Drupal\Core\Archiver\ArchiveTar $archiver
+   * @param ArchiveTar $archiver
    *   The archiver.
    */
   public function addRepToArchive($repPath, $parent, ArchiveTar $archiver) {
diff --git a/src/Processors/ExportProcessor.php b/src/Processors/ExportProcessor.php
index 094faf9..4192c5d 100644
--- a/src/Processors/ExportProcessor.php
+++ b/src/Processors/ExportProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_synchronizer\Processors;
 
+use Drupal\content_synchronizer\Processors\Entity\EntityProcessorBase;
 use Drupal\content_synchronizer\Processors\Entity\EntityProcessorPluginManager;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -27,7 +28,7 @@ class ExportProcessor {
   /**
    * The entity processor plugiin manager.
    *
-   * @var \Drupal\content_synchronizer\Processors\Entity\EntityProcessorPluginManager
+   * @var EntityProcessorPluginManager
    */
   protected $entityProcessorPluginManager;
 
@@ -47,7 +48,7 @@ class ExportProcessor {
 
     foreach ($entities as $entity) {
       // Get the plugin of the entity :
-      /** @var \Drupal\content_synchronizer\Processors\Entity\EntityProcessorBase $plugin */
+      /** @var EntityProcessorBase $plugin */
       $plugin = $this->entityProcessorPluginManager->getInstanceByEntityType($entity->getEntityTypeId());
       $plugin->export($entity);
       $this->writer->addRootEntity($entity);
@@ -58,7 +59,7 @@ class ExportProcessor {
   /**
    * Export the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   THe entity to export.
    */
   public function exportEntity(EntityInterface $entity) {
@@ -78,7 +79,7 @@ class ExportProcessor {
   /**
    * Get the writer.
    *
-   * @return \Drupal\content_synchronizer\Processors\ExportEntityWriter
+   * @return ExportEntityWriter
    *   The writer.
    */
   public function getWriter() {
diff --git a/src/Processors/ImportProcessor.php b/src/Processors/ImportProcessor.php
index 08d0d98..7e4b05d 100644
--- a/src/Processors/ImportProcessor.php
+++ b/src/Processors/ImportProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_synchronizer\Processors;
 
+use Drupal\content_synchronizer\Processors\Entity\EntityProcessorBase;
 use Drupal\content_synchronizer\Entity\ImportEntity;
 use Drupal\content_synchronizer\Processors\Entity\EntityProcessorPluginManager;
 use Drupal\Core\Entity\EntityInterface;
@@ -31,14 +32,14 @@ class ImportProcessor {
   /**
    * The import entity to treat.
    *
-   * @var \Drupal\content_synchronizer\Entity\ImportEntity
+   * @var ImportEntity
    */
   protected $import;
 
   /**
    * The entity processor plugin manager.
    *
-   * @var \Drupal\content_synchronizer\Processors\Entity\EntityProcessorPluginManager
+   * @var EntityProcessorPluginManager
    */
   protected $entityProcessorPluginManager;
 
@@ -72,7 +73,7 @@ class ImportProcessor {
     $entity = NULL;
 
     // Get the plugin of the entity :
-    /** @var \Drupal\content_synchronizer\Processors\Entity\EntityProcessorBase $plugin */
+    /** @var EntityProcessorBase $plugin */
     $plugin = $this->entityProcessorPluginManager->getInstanceByEntityType($rootData[ExportEntityWriter::FIELD_ENTITY_TYPE_ID]);
     if ($entityData = $this->import->getEntityDataFromGid($rootData[ExportEntityWriter::FIELD_GID])) {
       $entity = $plugin->import($entityData);
@@ -94,7 +95,7 @@ class ImportProcessor {
   /**
    * Get the import.
    *
-   * @return \Drupal\content_synchronizer\Entity\ImportEntity
+   * @return ImportEntity
    *   The import entity.
    */
   public function getImport() {
diff --git a/src/Processors/Type/TypeProcessorBase.php b/src/Processors/Type/TypeProcessorBase.php
index f9a8417..40b2e56 100644
--- a/src/Processors/Type/TypeProcessorBase.php
+++ b/src/Processors/Type/TypeProcessorBase.php
@@ -16,14 +16,14 @@ class TypeProcessorBase extends PluginBase implements TypeProcessorInterface {
   /**
    * The entity processor plugin manager.
    *
-   * @var \Drupal\content_synchronizer\Processors\Entity\EntityProcessorPluginManager
+   * @var EntityProcessorPluginManager
    */
   protected $pluginManager;
 
   /**
    * The global reference manager service.
    *
-   * @var \Drupal\content_synchronizer\Service\GlobalReferenceManager
+   * @var GlobalReferenceManager
    */
   protected $referenceManager;
 
@@ -33,7 +33,7 @@ class TypeProcessorBase extends PluginBase implements TypeProcessorInterface {
   public function __construct(array $configuration, $plugin_id, $plugin_definition) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
 
-    /** @var \Drupal\content_synchronizer\Processors\Entity\EntityProcessorPluginManager $pluginManager */
+    /** @var EntityProcessorPluginManager $pluginManager */
     $this->pluginManager = \Drupal::service(EntityProcessorPluginManager::SERVICE_NAME);
 
     $this->referenceManager = \Drupal::service(GlobalReferenceManager::SERVICE_NAME);
@@ -43,7 +43,7 @@ class TypeProcessorBase extends PluginBase implements TypeProcessorInterface {
   /**
    * Get the data to export.
    *
-   * @param \Drupal\Core\TypedData\TypedData $propertyData
+   * @param TypedData $propertyData
    *   The property data to export.
    *
    * @return array
@@ -56,7 +56,7 @@ class TypeProcessorBase extends PluginBase implements TypeProcessorInterface {
   /**
    * Init the $propertyId value in the entity to import.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entityToImport
+   * @param EntityInterface $entityToImport
    *   The entity to import.
    * @param string $propertyId
    *   The property id.
diff --git a/src/Processors/Type/TypeProcessorInterface.php b/src/Processors/Type/TypeProcessorInterface.php
index 9fb80ed..bc5b3bf 100644
--- a/src/Processors/Type/TypeProcessorInterface.php
+++ b/src/Processors/Type/TypeProcessorInterface.php
@@ -14,7 +14,7 @@ interface TypeProcessorInterface extends PluginInspectionInterface {
   /**
    * Get the data to export.
    *
-   * @param \Drupal\Core\TypedData\TypedData $propertyData
+   * @param TypedData $propertyData
    *   The property data to export.
    *
    * @return array
@@ -25,7 +25,7 @@ interface TypeProcessorInterface extends PluginInspectionInterface {
   /**
    * Init the $propertyId value in the entity to import.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entityToImport
+   * @param EntityInterface $entityToImport
    *   The entity to import.
    * @param string $propertyId
    *   THe property id.
diff --git a/src/Service/ArchiveDownloader.php b/src/Service/ArchiveDownloader.php
index 28f64ae..8de6108 100644
--- a/src/Service/ArchiveDownloader.php
+++ b/src/Service/ArchiveDownloader.php
@@ -32,14 +32,14 @@ class ArchiveDownloader {
   /**
    * Current User.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * ArchiveDownloader constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
    */
   public function __construct(AccountProxyInterface $currentUser) {
diff --git a/src/Service/ContentSynchronizerManager.php b/src/Service/ContentSynchronizerManager.php
index aa76795..3dc760c 100644
--- a/src/Service/ContentSynchronizerManager.php
+++ b/src/Service/ContentSynchronizerManager.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\content_synchronizer\Service;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\content_synchronizer\Entity\ExportEntity;
 use Drupal\content_synchronizer\Entity\ImportEntity;
 use Drupal\content_synchronizer\Entity\ImportEntityInterface;
@@ -42,21 +45,21 @@ class ContentSynchronizerManager {
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -70,11 +73,11 @@ class ContentSynchronizerManager {
   /**
    * Constructs a ContentSynchronizerManager object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type.
    * @param string $appRoot
    *   The app root.
@@ -92,10 +95,10 @@ class ContentSynchronizerManager {
    * @param string $tarGzFilePath
    *   The tar.gz file path.
    *
-   * @return \Drupal\content_synchronizer\Entity\ImportEntityInterface|null
+   * @return ImportEntityInterface|null
    *   The import entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function createImportFromTarGzFilePath($tarGzFilePath): ImportEntityInterface {
     $importEntity = NULL;
@@ -186,13 +189,13 @@ class ContentSynchronizerManager {
    *   The destination data.
    */
   public function exportEntity($entityTypeId, $id, $destination = '') {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $entityTypeManager */
+    /** @var EntityStorageInterface $entityTypeManager */
     $entityTypeManager = $this->entityTypeManager->getStorage($entityTypeId);
     if (!$entityTypeManager) {
       throw new \Exception('No entity type "' . $entityTypeId . '" found');
     }
 
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $entityTypeManager->load($id);
     if (!$entity) {
       throw new \Exception('No entity found [type:' . $entityTypeId . ', id:' . $id . ']');
diff --git a/src/Service/EntityExportFormBuilder.php b/src/Service/EntityExportFormBuilder.php
index 9259978..142ccb8 100644
--- a/src/Service/EntityExportFormBuilder.php
+++ b/src/Service/EntityExportFormBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\content_synchronizer\Service;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\content_synchronizer\Entity\ExportEntity;
 use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
 use Drupal\Core\Entity\ContentEntityBase;
@@ -40,30 +42,30 @@ class EntityExportFormBuilder {
   /**
    * Export Manager.
    *
-   * @var \Drupal\content_synchronizer\Service\ExportManager
+   * @var ExportManager
    */
   protected $exportManager;
 
   /**
    * Request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The current url.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $currentUrl;
 
   /**
    * EntityExportFormBuilder constructor.
    *
-   * @param \Drupal\content_synchronizer\Service\ExportManager $exportManager
+   * @param ExportManager $exportManager
    *   The export manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The requeststack.
    */
   public function __construct(ExportManager $exportManager, RequestStack $requestStack) {
@@ -85,14 +87,14 @@ class EntityExportFormBuilder {
    *
    * @param array $form
    *   The form build array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The formState array.
    *
    * @return bool
    *   The result.
    */
   protected function isEntityEditForm(array &$form, FormStateInterface $formState) {
-    /** @var \Drupal\Core\Entity\EntityForm $formObject */
+    /** @var EntityForm $formObject */
     $formObject = $formState->getFormObject();
 
     if ($formObject instanceof EntityForm) {
@@ -114,7 +116,7 @@ class EntityExportFormBuilder {
    *
    * @param array $form
    *   The form build array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    */
   protected function addExportFieldsToEntityForm(array &$form, FormStateInterface $formState) {
@@ -172,7 +174,7 @@ class EntityExportFormBuilder {
   /**
    * Get the batch URL.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   THe entity to download.
    *
    * @return string
@@ -194,7 +196,7 @@ class EntityExportFormBuilder {
    *
    * @param array $form
    *   The form build array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    */
   public static function onAddToExport(array &$form, FormStateInterface $formState) {
@@ -203,7 +205,7 @@ class EntityExportFormBuilder {
 
     if ($entity instanceof ConfigEntityBundleBase) {
       if ($entitiesToExport = self::getEntitiesFromBundle($entity)) {
-        /** @var \Drupal\content_synchronizer\Entity\ExportEntity $export */
+        /** @var ExportEntity $export */
         foreach (ExportEntity::loadMultiple() as $export) {
           foreach ($entitiesToExport as $entityToExport) {
             if (array_key_exists($export->id(), $exportsList)) {
@@ -214,7 +216,7 @@ class EntityExportFormBuilder {
       }
     }
     else {
-      /** @var \Drupal\content_synchronizer\Entity\ExportEntity $export */
+      /** @var ExportEntity $export */
       foreach (ExportEntity::loadMultiple() as $export) {
         if (array_key_exists($export->id(), $exportsList)) {
           $export->addEntity($entity);
@@ -229,10 +231,10 @@ class EntityExportFormBuilder {
   /**
    * Get the list of entities from a bundle entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityBundleBase $entity
+   * @param ConfigEntityBundleBase $entity
    *   The bundle entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]|null
+   * @return EntityInterface[]|null
    *   The entities of the bundle.
    */
   public static function getEntitiesFromBundle(ConfigEntityBundleBase $entity) {
@@ -255,11 +257,11 @@ class EntityExportFormBuilder {
   /**
    * Add form for menu items export.
    *
-   * @param \Drupal\system\MenuInterface $entity
+   * @param MenuInterface $entity
    *   The entity.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   THe formstate.
    */
   protected function addMenuExportForm(MenuInterface $entity, array &$form, FormStateInterface $formState) {
@@ -288,10 +290,10 @@ class EntityExportFormBuilder {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The formstate.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function onAddMenuToExport(array &$form, FormStateInterface $formState) {
     $menu = $formState->getFormObject()->getEntity();
@@ -317,7 +319,7 @@ class EntityExportFormBuilder {
    *
    * @param array $tree
    *   The tree.
-   * @param \Drupal\content_synchronizer\Entity\ExportEntity $exportEntity
+   * @param ExportEntity $exportEntity
    *   The export entity.
    */
   protected function addMenuElementsToExportEntity(array $tree, ExportEntity $exportEntity) {
diff --git a/src/Service/EntityPublisher.php b/src/Service/EntityPublisher.php
index dfd6c63..8cad53a 100644
--- a/src/Service/EntityPublisher.php
+++ b/src/Service/EntityPublisher.php
@@ -18,23 +18,23 @@ class EntityPublisher {
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Uuid.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;
 
   /**
    * EntityPublisher constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   THe uuid handler.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, UuidInterface $uuid) {
@@ -48,11 +48,11 @@ class EntityPublisher {
    * If the entity is revisionable, it creates a new revision.
    * If the entity is new and is a root entity, then it is unpublished.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to save.
    * @param string $gid
    *   The gid of the entity.
-   * @param \Drupal\Core\Entity\EntityInterface $existingEntity
+   * @param EntityInterface $existingEntity
    *   The existing entity.
    * @param array $dataToImport
    *   The data to import.
@@ -72,11 +72,11 @@ class EntityPublisher {
   /**
    * Try to create a revision of the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to save.
    * @param string $gid
    *   THe gid.
-   * @param \Drupal\Core\Entity\EntityInterface $existingEntity
+   * @param EntityInterface $existingEntity
    *   The existing entity before changes.
    */
   protected function saveEntityWithRevision(EntityInterface $entity, $gid, EntityInterface $existingEntity = NULL) {
@@ -112,11 +112,11 @@ class EntityPublisher {
   /**
    * Try to unpublish entity if it needs to be created. Either default save.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to save.
    * @param string $gid
    *   THe gid.
-   * @param \Drupal\Core\Entity\EntityInterface $existingEntity
+   * @param EntityInterface $existingEntity
    *   The existing entity before changes.
    */
   protected function saveEntityWithUnpublishedStatus(EntityInterface $entity, $gid, EntityInterface $existingEntity = NULL) {
@@ -140,9 +140,9 @@ class EntityPublisher {
   /**
    * Save without publish status care.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to save.
-   * @param \Drupal\Core\Entity\EntityInterface $existingEntity
+   * @param EntityInterface $existingEntity
    *   The existing entity before changes.
    */
   protected function defaultSave(EntityInterface $entity, EntityInterface $existingEntity = NULL) {
@@ -158,7 +158,7 @@ class EntityPublisher {
   /**
    * Check if the entity is publishable.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    *
    * @return bool
@@ -171,9 +171,9 @@ class EntityPublisher {
   /**
    * Return TRUE if the entity has to be updated.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The imported entity.
-   * @param \Drupal\Core\Entity\EntityInterface $existingEntity
+   * @param EntityInterface $existingEntity
    *   The entity before update.
    *
    * @return bool
diff --git a/src/Service/ExportManager.php b/src/Service/ExportManager.php
index e541d34..8e151f3 100644
--- a/src/Service/ExportManager.php
+++ b/src/Service/ExportManager.php
@@ -20,7 +20,7 @@ class ExportManager {
    */
   public function getExportsListOptions() {
     $exportsOptions = [];
-    /** @var \Drupal\content_synchronizer\Entity\ExportEntity $export */
+    /** @var ExportEntity $export */
     foreach (ExportEntity::loadMultiple() as $export) {
       $exportsOptions[$export->id()] = $export->label();
     }
@@ -31,7 +31,7 @@ class ExportManager {
   /**
    * Return the list of export for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
diff --git a/src/Service/GlobalReferenceManager.php b/src/Service/GlobalReferenceManager.php
index 1b1f273..3687bd2 100644
--- a/src/Service/GlobalReferenceManager.php
+++ b/src/Service/GlobalReferenceManager.php
@@ -27,7 +27,7 @@ class GlobalReferenceManager {
   /**
    * Get the global id of the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return string|null
@@ -49,7 +49,7 @@ class GlobalReferenceManager {
   /**
    * Create GID.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return string
@@ -77,7 +77,7 @@ class GlobalReferenceManager {
    * @param string $gid
    *   The gid.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity.
    */
   public function getEntityByGid($gid) {
@@ -114,7 +114,7 @@ class GlobalReferenceManager {
   /**
    * Create GID from entity and gid.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $gid
    *   THe gid.
