modules/contrib/asset_injector/asset_injector.api.php
modules/contrib/asset_injector/asset_injector.install
modules/contrib/asset_injector/asset_injector.module
modules/contrib/asset_injector/src/AssetFileStorage.php
modules/contrib/asset_injector/src/AssetInjectorAccessControlHandler.php
modules/contrib/asset_injector/src/AssetInjectorInterface.php
modules/contrib/asset_injector/src/AssetInjectorListBuilder.php
modules/contrib/asset_injector/src/Entity/AssetInjectorBase.php
modules/contrib/asset_injector/src/Entity/AssetInjectorCss.php
modules/contrib/asset_injector/src/Entity/AssetInjectorJs.php
modules/contrib/asset_injector/src/Form/AssetInjectorCssDuplicateForm.php
modules/contrib/asset_injector/src/Form/AssetInjectorCssForm.php
modules/contrib/asset_injector/src/Form/AssetInjectorDeleteForm.php
modules/contrib/asset_injector/src/Form/AssetInjectorDisableForm.php
modules/contrib/asset_injector/src/Form/AssetInjectorEnableForm.php
modules/contrib/asset_injector/src/Form/AssetInjectorFormBase.php
modules/contrib/asset_injector/src/Form/AssetInjectorJsDuplicateForm.php
modules/contrib/asset_injector/src/Form/AssetInjectorJsForm.php
modules/contrib/asset_injector/tests/src/Functional/AssetInjectorCssTest.php
modules/contrib/asset_injector/tests/src/Functional/AssetInjectorJsTest.php

16 files with changes
=====================

1) modules/contrib/asset_injector/tests/src/Functional/AssetInjectorJsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\asset_injector\Functional;

+use Drupal\user\UserInterface;
+use Drupal\asset_injector\Entity\AssetInjectorJs;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

@@ @@
   /**
    * The account to be used to test access to both workflows.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $administrator;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_tasks_block');
@@ @@

     $this->getSession()->getPage()->hasContent('asset_injector/js/blocks');

-    /** @var \Drupal\asset_injector\Entity\AssetInjectorJs $asset */
+    /** @var AssetInjectorJs $asset */
     foreach (asset_injector_get_assets(NULL, ['asset_injector_js']) as $asset) {
       $path = parse_url(file_create_url($asset->internalFileUri()), PHP_URL_PATH);
       $path = str_replace(base_path(), '/', $path);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/asset_injector/tests/src/Functional/AssetInjectorCssTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\asset_injector\Functional;

+use Drupal\asset_injector\Entity\AssetInjectorCss;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_tasks_block');
@@ @@
     ], $this->t('Save'));

     $this->getSession()->getPage()->hasContent('asset_injector/css/blocks');
-    /** @var \Drupal\asset_injector\Entity\AssetInjectorCss $asset */
+    /** @var AssetInjectorCss $asset */
     foreach (asset_injector_get_assets(NULL, ['asset_injector_css']) as $asset) {
       $path = parse_url(file_create_url($asset->internalFileUri()), PHP_URL_PATH);
       $path = str_replace(base_path(), '/', $path);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/asset_injector/src/Form/AssetInjectorJsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\asset_injector\Form;

+use Drupal\asset_injector\Entity\AssetInjectorJs;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\asset_injector\Entity\AssetInjectorJs $entity */
+    /** @var AssetInjectorJs $entity */
     $entity = $this->entity;
     // Advanced options fieldset.
     $form['advanced'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/asset_injector/src/Form/AssetInjectorJsDuplicateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\asset_injector\Form;

+use Drupal\asset_injector\Entity\AssetInjectorJs;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\asset_injector\Entity\AssetInjectorJs $entity */
+    /** @var AssetInjectorJs $entity */
     $entity = $this->entity->createDuplicate();
     $entity->label = $this->t('Duplicate of @label', ['@label' => $this->entity->label()]);
     $this->entity = $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/asset_injector/src/Form/AssetInjectorFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\asset_injector\Form;

+use Drupal\asset_injector\AssetInjectorInterface;
+use Drupal\Core\Condition\ConditionManager;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Extension\ThemeHandler;
+use Drupal\asset_injector\Entity\AssetInjectorBase;
+use Drupal\Core\Condition\ConditionInterface;
 use Psr\Log\LoggerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The Asset entity.
    *
-   * @var \Drupal\asset_injector\AssetInjectorInterface
+   * @var AssetInjectorInterface
    */
   protected $entity;

@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $manager;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $language;

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandler
+   * @var ThemeHandler
    */
   protected $themeHandler;

@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The plugin form manager.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;

@@ @@
   /**
    * AssetInjectorFormBase constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $manager
+   * @param ExecutableManagerInterface $manager
    *   The ConditionManager for building the conditions UI.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language
+   * @param LanguageManagerInterface $language
    *   The language manager.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_manager
+   * @param PluginFormFactoryInterface $plugin_form_manager
    *   The plugin form manager.
    */
   public function __construct(LoggerInterface $logger, ExecutableManagerInterface $manager, ContextRepositoryInterface $context_repository, LanguageManagerInterface $language, ThemeHandlerInterface $theme_handler, PluginFormFactoryInterface $plugin_form_manager) {
@@ @@
     // during form building.
     $form_state->setTemporaryValue('gathered_contexts', $this->contextRepository->getAvailableContexts());

-    /** @var \Drupal\asset_injector\Entity\AssetInjectorBase $entity */
+    /** @var AssetInjectorBase $entity */
     $entity = $this->entity;

     $form['label'] = [
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
       }

       $condition_config = isset($conditions[$condition_id]) ? $conditions[$condition_id] : [];
-      /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+      /** @var ConditionInterface $condition */
       $condition = $this->manager->createInstance($condition_id, $condition_config);
       $form_state->set(['conditions', $condition_id], $condition);
       $condition_form = $condition->buildConfigurationForm([], $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/asset_injector/src/Form/AssetInjectorEnableForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\asset_injector\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->enable()->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/asset_injector/src/Form/AssetInjectorDisableForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\asset_injector\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->disable()->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/asset_injector/src/Form/AssetInjectorDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\asset_injector\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $this->logger('asset_injector')->notice('%type asset %id deleted', [
       '%type' => $entity->get('entityTypeId'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/asset_injector/src/Form/AssetInjectorCssForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\asset_injector\Form;

+use Drupal\asset_injector\Entity\AssetInjectorCss;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\asset_injector\Entity\AssetInjectorCss $entity */
+    /** @var AssetInjectorCss $entity */
     $entity = $this->entity;

     // Advanced options fieldset.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/asset_injector/src/Form/AssetInjectorCssDuplicateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\asset_injector\Form;

+use Drupal\asset_injector\Entity\AssetInjectorCss;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\asset_injector\Entity\AssetInjectorCss $entity */
+    /** @var AssetInjectorCss $entity */
     $entity = $this->entity->createDuplicate();
     $entity->label = $this->t('Duplicate of @label', ['@label' => $this->entity->label()]);
     $this->entity = $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/asset_injector/src/Entity/AssetInjectorBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\asset_injector\Entity;

+use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\asset_injector\AssetInjectorInterface;
 use Drupal\asset_injector\AssetFileStorage;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ @@
   /**
    * The conditions collection.
    *
-   * @var \Drupal\Core\Condition\ConditionPluginCollection
+   * @var ConditionPluginCollection
    */
   protected $conditionsCollection;

@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected $conditionPluginManager;

@@ @@
   /**
    * Gets the condition plugin manager.
    *
-   * @return \Drupal\Core\Executable\ExecutableManagerInterface
+   * @return ExecutableManagerInterface
    *   The condition plugin manager.
    */
   protected function conditionPluginManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/asset_injector/src/AssetInjectorListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\asset_injector;

+use Drupal\Core\Condition\ConditionPluginBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ @@

     $data['conditions'] = [];

-    /** @var \Drupal\Core\Condition\ConditionPluginBase $condition */
+    /** @var ConditionPluginBase $condition */
     foreach ($entity->getConditionsCollection() as $condition_id => $condition) {
       if ($condition_id == 'current_theme') {
         $config = $condition->getConfiguration();
@@ @@
       }

       $data['conditions'][$condition_id] = $this->t('%plugin is configured.', ['%plugin' => $condition->getPluginDefinition()['label']]);
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $summary */
+      /** @var TranslatableMarkup $summary */
       if ($summary = $condition->summary()) {
         $data['conditions'][$condition_id] = Html::decodeEntities($summary->render());
       }
@@ @@
       '#list_type' => 'ul',
       '#items' => empty($data['conditions']) ? [$this->t('Global')] : $data['conditions'],
     ];
-    $data['conditions'] = render($data['conditions']);
+    $data['conditions'] = \Drupal::service('renderer')->render($data['conditions']);

     $row = [
       'class' => $entity->status() ? 'enabled' : 'disabled',
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/asset_injector/src/AssetInjectorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\asset_injector;

+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

@@ @@
   /**
    * Gets conditions for this asset.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface[]|\Drupal\Core\Condition\ConditionPluginCollection
+   * @return ConditionInterface[]|ConditionPluginCollection
    *   An array or collection of configured condition plugins.
    */
   public function getConditionsCollection();
@@ @@
   /**
    * Set new conditions on the asset.
    *
-   * @param \Drupal\Core\Condition\ConditionPluginCollection $conditions
+   * @param ConditionPluginCollection $conditions
    *   Conditions to set.
    */
   public function setConditionsCollection(ConditionPluginCollection $conditions);
@@ @@
    * @param string $instance_id
    *   The condition plugin instance ID.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    *   A condition plugin.
    */
   public function getConditionsInstance($instance_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/asset_injector/src/AssetInjectorAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\asset_injector;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\system\Plugin\Condition\CurrentThemeCondition;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\Cache;
@@ @@
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
   /**
    * The context manager service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * Constructs the asset_injector access control handler instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The ContextHandler for applying contexts to conditions properly.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
    */
   public function __construct(EntityTypeInterface $entity_type, ContextHandlerInterface $context_handler, ContextRepositoryInterface $context_repository) {
@@ @@
       return parent::checkAccess($entity, $operation, $account);
     }

-    /** @var \Drupal\asset_injector\AssetInjectorInterface $entity */
+    /** @var AssetInjectorInterface $entity */
     // Don't grant access to disabled assets.
     if (!$entity->status()) {
       return AccessResult::forbidden()->addCacheableDependency($entity);
@@ @@
   /**
    * Resolve only current_theme condition plugins.
    *
-   * @param \Drupal\asset_injector\AssetInjectorInterface $entity
+   * @param AssetInjectorInterface $entity
    *   The asset with theme conditions.
    *
    * @return bool
    *   If the theme condition resolves true or not.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function resolveThemeConditions(AssetInjectorInterface $entity) {

@@ @@
       return TRUE;
     }

-    /** @var \Drupal\system\Plugin\Condition\CurrentThemeCondition $theme_condition */
+    /** @var CurrentThemeCondition $theme_condition */
     $theme_condition = $conditions->get('current_theme');
     $config = $theme_condition->getConfig();

@@ @@
   /**
    * Merges cacheable metadata from conditions onto the access result object.
    *
-   * @param \Drupal\Core\Access\AccessResult $access
+   * @param AccessResult $access
    *   The access result object.
-   * @param \Drupal\Core\Condition\ConditionInterface[] $conditions
+   * @param ConditionInterface[] $conditions
    *   List of conditions.
    */
   protected function mergeCacheabilityFromConditions(AccessResult $access, array $conditions) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/asset_injector/src/AssetFileStorage.php:100

    ---------- begin diff ----------
@@ @@
   /**
    * Get the Drupal file system service.
    *
-   * @return \Drupal\Core\File\FileSystemInterface
+   * @return FileSystemInterface
    *   File System service.
    */
   protected static function getFileSystemService() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/asset_injector/asset_injector.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 /**
  * @file
  * Contains module asset_injector.
@@ @@
  */
 function asset_injector_ckeditor_css_alter(array &$css, Editor $editor) {
   foreach (asset_injector_get_assets(TRUE, ['asset_injector_css']) as $asset) {
-    $css[] = file_create_url($asset->internalFileUri());
+    $css[] = \Drupal::service('file_url_generator')->generateAbsoluteString($asset->internalFileUri());
   }
 }

@@ @@
  * asset creation.
  */
 function asset_injector_page_attachments(array &$attachments) {
-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');
-  /** @var \Drupal\Core\Asset\AttachedAssetsInterface $asset */
+  /** @var AttachedAssetsInterface $asset */
   foreach (asset_injector_get_assets(TRUE) as $asset) {
     $attachments['#attached']['library'][] = 'asset_injector/' . $asset->libraryNameSuffix();
     $renderer->addCacheableDependency($attachments, $asset);
@@ @@
  * @param array $types
  *   Array of entity type ids to limit the return.
  *
- * @return \Drupal\asset_injector\AssetInjectorInterface[]
+ * @return AssetInjectorInterface[]
  *   Assets from css & js injectors.
  */
 function asset_injector_get_assets($active = NULL, array $types = []) {
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+  /** @var EntityTypeManagerInterface $entity_type_manager */
   $entity_type_manager = \Drupal::entityTypeManager();
   $assets = [];
   foreach (asset_injector_get_entity_types($types) as $entity_type_id => $entity_type) {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


 [OK] 16 files have been changed by Rector                                      

