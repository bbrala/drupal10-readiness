modules/contrib/jsonapi_views/jsonapi_views.install
modules/contrib/jsonapi_views/jsonapi_views.module
modules/contrib/jsonapi_views/src/Plugin/views/display_extender/JsonapiViews.php
modules/contrib/jsonapi_views/src/Resource/ViewsResource.php
modules/contrib/jsonapi_views/src/Routing/Routes.php
modules/contrib/jsonapi_views/tests/src/Functional/JsonapiViewsResourceTest.php

3 files with changes
====================

1) modules/contrib/jsonapi_views/tests/src/Functional/JsonapiViewsResourceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\jsonapi_views\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Url;
@@ @@
   /**
    * The account to use for authentication.
    *
-   * @var null|\Drupal\Core\Session\AccountInterface
+   * @var null|AccountInterface
    */
   protected $account;

@@ @@
     $this->assertIsArray($response_document['data']);
     $this->assertArrayNotHasKey('errors', $response_document);
     $this->assertCount(2, $response_document['data']);
-    $this->assertEqual(2, $response_document['meta']['count']);
+    $this->assertEquals(2, $response_document['meta']['count']);
     $this->assertCacheContext($headers, 'url.query_args:page');
     $this->assertCacheTags($headers, [
       'config:views.view.jsonapi_views_test_node_view',
@@ @@
     $this->assertIsArray($response_document['data']);
     $this->assertArrayNotHasKey('errors', $response_document);
     $this->assertCount(1, $response_document['data']);
-    $this->assertEqual(1, $response_document['meta']['count']);
+    $this->assertEquals(1, $response_document['meta']['count']);
     $this->assertSame($room->uuid(), $response_document['data'][0]['id']);
     $this->assertCacheContext($headers, 'url.query_args:page');

@@ @@
     $this->assertIsArray($response_document['data']);
     $this->assertArrayNotHasKey('errors', $response_document);
     $this->assertCount(1, $response_document['data']);
-    $this->assertEqual(1, $response_document['meta']['count']);
+    $this->assertEquals(1, $response_document['meta']['count']);
     $this->assertSame($location->uuid(), $response_document['data'][0]['id']);
     $this->assertCacheContext($headers, 'url.query_args:page');

@@ @@
     );

     $this->assertCount(5, $response_document['data']);
-    $this->assertEqual(9, $response_document['meta']['count']);
+    $this->assertEquals(9, $response_document['meta']['count']);
     $this->assertArrayHasKey('next', $response_document['links']);
     $this->assertSame(array_slice(array_keys($nodes['all']), 0, 5), array_map(static function (array $data) {
       return $data['id'];
@@ @@
     );

     $this->assertCount(5, $response_document['data']);
-    $this->assertEqual(9, $response_document['meta']['count']);
+    $this->assertEquals(9, $response_document['meta']['count']);
     $this->assertArrayHasKey('next', $response_document['links']);
     $this->assertSame(array_slice(array_keys($nodes['all']), 0, 5), array_map(static function (array $data) {
       return $data['id'];
@@ @@
     );

     $this->assertCount(5, $response_document['data']);
-    $this->assertEqual(5, $response_document['meta']['count']);
+    $this->assertEquals(5, $response_document['meta']['count']);
     $this->assertSame(array_keys($nodes['paged'][0]), array_map(static function (array $data) {
       return $data['id'];
     }, $response_document['data']));
@@ @@
     );

     $this->assertCount(5, $response_document['data']);
-    $this->assertEqual(12, $response_document['meta']['count']);
+    $this->assertEquals(12, $response_document['meta']['count']);
     $this->assertSame(array_keys($nodes['paged'][0]), array_map(static function (array $data) {
       return $data['id'];
     }, $response_document['data']));
@@ @@
     );

     $this->assertCount(5, $response_document['data']);
-    $this->assertEqual(12, $response_document['meta']['count']);
+    $this->assertEquals(12, $response_document['meta']['count']);
     $this->assertSame(array_keys($nodes['paged'][1]), array_map(static function (array $data) {
       return $data['id'];
     }, $response_document['data']));
@@ @@
     );

     $this->assertCount(2, $response_document['data']);
-    $this->assertEqual(12, $response_document['meta']['count']);
+    $this->assertEquals(12, $response_document['meta']['count']);
     $this->assertSame(array_keys($nodes['paged'][2]), array_map(static function (array $data) {
       return $data['id'];
     }, $response_document['data']));
@@ @@
     );

     $this->assertCount(0, $response_document['data']);
-    $this->assertEqual(12, $response_document['meta']['count']);
+    $this->assertEquals(12, $response_document['meta']['count']);
     $this->assertArrayNotHasKey('next', $response_document['links']);
     $this->assertCacheContext($headers, 'url.query_args:page');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/jsonapi_views/src/Routing/Routes.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Resource type bundle repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * Entity type bundle info interface.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/jsonapi_views/src/Resource/ViewsResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_views\Resource;

+use Drupal\Core\Pager\PagerManagerInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\RenderContext;
@@ @@
   /**
    * The request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Get views pager.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   View executable.
    *
    * @return array
@@ @@
       return [$pager_links, count($view->result)];
     }

-    /** @var \Drupal\Core\Pager\PagerManagerInterface $pager_manager */
+    /** @var PagerManagerInterface $pager_manager */
     $pager_manager = \Drupal::service('pager.manager');
     $element = $view->pager->getPagerId();
     $pager = $pager_manager->getPager($element);
@@ @@
   /**
    * Process the resource request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function process(Request $request): ResourceResponse {
     $view = Views::getView($request->get('view'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

