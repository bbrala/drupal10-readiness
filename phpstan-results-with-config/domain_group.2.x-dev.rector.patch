diff --git a/domain_group.module b/domain_group.module
index 0a55c6f..1b78036 100644
--- a/domain_group.module
+++ b/domain_group.module
@@ -46,7 +46,7 @@ function domain_group_group_delete(EntityInterface $entity) {
 function domain_group_node_grants(AccountInterface $account, $op) {
   $grants = [];
 
-  /** @var \Drupal\domain\Entity\Domain $active */
+  /** @var Domain $active */
   $active = \Drupal::service('domain.negotiator')->getActiveDomain();
 
   if (empty($active)) {
@@ -132,7 +132,7 @@ function domain_group_node_access(NodeInterface $node, $op, AccountInterface $ac
 
   $domains = domain_group_node_get_domains($node);
 
-  /** @var \Drupal\domain\Entity\Domain $active */
+  /** @var Domain $active */
   $active = \Drupal::service('domain.negotiator')->getActiveDomain();
 
   if (empty($active)) {
@@ -178,7 +178,7 @@ function domain_group_group_access(EntityInterface $entity, $op, AccountInterfac
     return AccessResult::neutral();
   }
 
-  /** @var \Drupal\domain\Entity\Domain $active */
+  /** @var Domain $active */
   $active = \Drupal::service('domain.negotiator')->getActiveDomain();
 
   if (empty($active)) {
@@ -200,7 +200,7 @@ function domain_group_group_access(EntityInterface $entity, $op, AccountInterfac
 /**
  * Get domains for the given node.
  *
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   The node.
  *
  * @return array
diff --git a/modules/domain_group_alias/domain_group_alias.module b/modules/domain_group_alias/domain_group_alias.module
index 8b2dd42..97946a0 100644
--- a/modules/domain_group_alias/domain_group_alias.module
+++ b/modules/domain_group_alias/domain_group_alias.module
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\group\Entity\Group;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\domain_alias\Entity\DomainAlias;
 /**
  * @file
  * Contains domain_group_alias.module.
@@ -55,7 +60,7 @@ function domain_group_alias_form_alter(&$form, &$form_state, $form_id) {
       if ($form_state->has('group_wizard') && $form_state->get('group_wizard_id') == 'group_creator') {
         return;
       }
-      /** @var \Drupal\group\Entity\Group $group */
+      /** @var Group $group */
       $group = $entity->getGroup();
       $domain_id = 'group_' . $group->id();
       if (isset($form['path']['domain_path'])) {
@@ -133,16 +138,16 @@ function domain_group_alias_node_update(EntityInterface $entity) {
 /**
  * Create or update the domain path alias entity.
  *
- * @param \Drupal\group\Entity\GroupContent $group_content
+ * @param GroupContent $group_content
  *   The Group content.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The Source entity.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form State.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
+ * @throws EntityStorageException
  */
 function domain_group_alias_set_domain_alias(GroupContent $group_content, EntityInterface $entity, FormStateInterface $form_state = NULL) {
   $gid = $group_content->getGroup()->id();
@@ -177,7 +182,7 @@ function domain_group_alias_set_domain_alias(GroupContent $group_content, Entity
         $is_custom_alias = \Drupal::keyValue('domain_group_alias_custom.' . $domain_id)
           ->get($group_content->id(), FALSE);
         if (!$is_custom_alias) {
-          /** @var \Drupal\domain_alias\Entity\DomainAlias $domain_alias */
+          /** @var DomainAlias $domain_alias */
           $domain_alias = reset($domain_alias);
           $domain_alias_token = ($domain_alias_custom) ? $domain_alias_custom : $domain_alias_token;
           $domain_alias->set('alias', $domain_alias_token);
@@ -205,7 +210,7 @@ function domain_group_alias_set_domain_alias(GroupContent $group_content, Entity
  *
  * @param string $token_value
  *   The alias pattern.
- * @param \Drupal\group\Entity\GroupContent $group_content
+ * @param GroupContent $group_content
  *   The group content entity.
  * @param string $lang
  *   The source entity language.
@@ -232,7 +237,7 @@ function domain_group_alias_get_alias_token($token_value, GroupContent $group_co
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  */
 function domain_group_alias_validate(array &$form, FormStateInterface $form_state) {
@@ -274,12 +279,12 @@ function domain_group_alias_validate(array &$form, FormStateInterface $form_stat
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  */
 function domain_group_alias_submit(array &$form, FormStateInterface $form_state) {
   $entity = $form_state->getFormObject()->getEntity();
   $source_entity = $entity->getEntity();
-  /** @var Drupal\group\Entity\GroupContent $entity */
+  /** @var GroupContent $entity */
   domain_group_alias_set_domain_alias($entity, $source_entity, $form_state);
 }
diff --git a/modules/domain_group_alias/src/Plugin/DomainGroupSettings/GroupDomainAlias.php b/modules/domain_group_alias/src/Plugin/DomainGroupSettings/GroupDomainAlias.php
index fd5d7e5..002e418 100644
--- a/modules/domain_group_alias/src/Plugin/DomainGroupSettings/GroupDomainAlias.php
+++ b/modules/domain_group_alias/src/Plugin/DomainGroupSettings/GroupDomainAlias.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\domain_group_alias\Plugin\DomainGroupSettings;
 
+use Drupal\group\Entity\Group;
+use Drupal\domain_alias\Entity\DomainAlias;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -43,21 +45,21 @@ class GroupDomainAlias extends DomainGroupSettingsBase implements ContainerFacto
   /**
    * The domain validator.
    *
-   * @var \Drupal\domain\DomainValidatorInterface
+   * @var DomainValidatorInterface
    */
   protected $validator;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -71,21 +73,21 @@ class GroupDomainAlias extends DomainGroupSettingsBase implements ContainerFacto
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The token replacement instance.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
@@ -194,7 +196,7 @@ class GroupDomainAlias extends DomainGroupSettingsBase implements ContainerFacto
    * {@inheritdoc}
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = $form_state->get('group');
     $gid = $group->id();
     if ($domain = Domain::load('group_' . $gid)) {
@@ -231,7 +233,7 @@ class GroupDomainAlias extends DomainGroupSettingsBase implements ContainerFacto
                 ->loadByProperties($properties);
               // Check domain to update or create a new one.
               if ($domain_alias) {
-                /** @var \Drupal\domain_alias\Entity\DomainAlias $domain_alias */
+                /** @var DomainAlias $domain_alias */
                 $domain_alias = reset($domain_alias);
                 $domain_alias->set('alias', $domain_alias_token);
                 $domain_alias->save();
diff --git a/src/Annotation/DomainGroupSettings.php b/src/Annotation/DomainGroupSettings.php
index e2ca62e..f90a7ca 100644
--- a/src/Annotation/DomainGroupSettings.php
+++ b/src/Annotation/DomainGroupSettings.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\domain_group\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class DomainGroupSettings extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/EventSubscriber/LoginPageRedirect.php b/src/EventSubscriber/LoginPageRedirect.php
index 379c745..e6457f5 100644
--- a/src/EventSubscriber/LoginPageRedirect.php
+++ b/src/EventSubscriber/LoginPageRedirect.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\domain_group\EventSubscriber;
 
+use Drupal\domain\DomainStorageInterface;
+use Drupal\Core\Config\Config;
+use Drupal\domain\DomainInterface;
 use Drupal\domain\DomainNegotiatorInterface;
 use Drupal\domain\DomainRedirectResponse;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,57 +25,57 @@ class LoginPageRedirect implements EventSubscriberInterface {
   /**
    * The domain negotiator service.
    *
-   * @var \Drupal\domain\DomainNegotiatorInterface
+   * @var DomainNegotiatorInterface
    */
   protected $domainNegotiator;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Domain storage handler service.
    *
-   * @var \Drupal\domain\DomainStorageInterface
+   * @var DomainStorageInterface
    */
   protected $domainStorage;
 
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The domain_group.settings config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * Constructs a LoginPageRedirect object.
    *
-   * @param \Drupal\domain\DomainNegotiatorInterface $negotiator
+   * @param DomainNegotiatorInterface $negotiator
    *   The domain negotiator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(DomainNegotiatorInterface $negotiator, EntityTypeManagerInterface $entity_type_manager, AccountInterface $account, RouteMatchInterface $route_match, ConfigFactoryInterface $config_factory) {
@@ -87,13 +90,13 @@ class LoginPageRedirect implements EventSubscriberInterface {
   /**
    * Redirects user.login route to the Default Domain.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The RequestEvent to process.
    */
   public function loginRedirect(RequestEvent $event) {
     // Check if login is restricted to Default domain in the module config.
     if ($this->config->get('restricted_login')) {
-      /** @var \Drupal\domain\DomainInterface $default_domain */
+      /** @var DomainInterface $default_domain */
       $default_domain = $this->domainStorage->loadDefaultDomain();
       // Only redirect if there is a default domain.
       if (!$default_domain) {
diff --git a/src/Form/DomainGroupGeneralForm.php b/src/Form/DomainGroupGeneralForm.php
index d5bab45..49d0af0 100644
--- a/src/Form/DomainGroupGeneralForm.php
+++ b/src/Form/DomainGroupGeneralForm.php
@@ -17,16 +17,16 @@ class DomainGroupGeneralForm extends ConfigFormBase {
   /**
    * The domain entity storage.
    *
-   * @var \Drupal\domain\DomainStorageInterface
+   * @var DomainStorageInterface
    */
   protected $domainStorage;
 
   /**
    * DomainGroupGeneralForm constructor.
    *
-   * @param Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Config Factory.
-   * @param Drupal\domain\DomainStorageInterface $domain_storage
+   * @param DomainStorageInterface $domain_storage
    *   The domain entity storage.
    */
   public function __construct(ConfigFactoryInterface $config_factory, DomainStorageInterface $domain_storage) {
diff --git a/src/Form/DomainGroupSettingsForm.php b/src/Form/DomainGroupSettingsForm.php
index 181e3f8..809d994 100644
--- a/src/Form/DomainGroupSettingsForm.php
+++ b/src/Form/DomainGroupSettingsForm.php
@@ -16,7 +16,7 @@ class DomainGroupSettingsForm extends FormBase {
   /**
    * The DomainGroupSettingsManager service.
    *
-   * @var \Drupal\domain_group\Plugin\DomainGroupSettingsManager
+   * @var DomainGroupSettingsManager
    */
   protected $pluginManagerDomainGroupSettings;
 
diff --git a/src/Plugin/DomainGroupSettings/GroupDomain.php b/src/Plugin/DomainGroupSettings/GroupDomain.php
index 5fb19b6..30e5216 100644
--- a/src/Plugin/DomainGroupSettings/GroupDomain.php
+++ b/src/Plugin/DomainGroupSettings/GroupDomain.php
@@ -40,42 +40,42 @@ class GroupDomain extends DomainGroupSettingsBase implements ContainerFactoryPlu
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * The domain validator.
    *
-   * @var \Drupal\domain\DomainValidatorInterface
+   * @var DomainValidatorInterface
    */
   protected $validator;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The domain entity storage.
    *
-   * @var \Drupal\domain\DomainStorageInterface
+   * @var DomainStorageInterface
    */
   protected $domainStorage;
 
   /**
    * The domain negotiator.
    *
-   * @var \Drupal\domain\DomainNegotiatorInterface
+   * @var DomainNegotiatorInterface
    */
   protected $domainNegotiator;
 
diff --git a/src/Plugin/DomainGroupSettingsManager.php b/src/Plugin/DomainGroupSettingsManager.php
index ddbab82..55c882c 100644
--- a/src/Plugin/DomainGroupSettingsManager.php
+++ b/src/Plugin/DomainGroupSettingsManager.php
@@ -14,7 +14,7 @@ class DomainGroupSettingsManager extends DefaultPluginManager {
   /**
    * A collection of vanilla instances of all domain group settings plugins.
    *
-   * @var \Drupal\domain_group\Plugin\DomainGroupSettingsCollection
+   * @var DomainGroupSettingsCollection
    */
   protected $allPlugins;
 
@@ -24,9 +24,9 @@ class DomainGroupSettingsManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/tests/src/Functional/DomainGroupFormAccessTest.php b/tests/src/Functional/DomainGroupFormAccessTest.php
index 4db2a9b..49dc099 100644
--- a/tests/src/Functional/DomainGroupFormAccessTest.php
+++ b/tests/src/Functional/DomainGroupFormAccessTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\domain_group\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\domain_group\Traits\GroupCreationTrait;
 use Drupal\Tests\domain_group\Traits\InitializeGroupsTrait;
@@ -49,21 +50,21 @@ class DomainGroupFormAccessTest extends BrowserTestBase {
   /**
    * Regular authenticated User for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * Regular authenticated User for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'access administration pages',
diff --git a/tests/src/Functional/DomainSettingsFormTest.php b/tests/src/Functional/DomainSettingsFormTest.php
index d8e3ac5..b030e7e 100644
--- a/tests/src/Functional/DomainSettingsFormTest.php
+++ b/tests/src/Functional/DomainSettingsFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\domain_group\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\domain_group\Traits\GroupCreationTrait;
 use Drupal\Tests\domain_group\Traits\InitializeGroupsTrait;
@@ -48,7 +49,7 @@ class DomainSettingsFormTest extends BrowserTestBase {
   /**
    * Regular authenticated User for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Functional/UniqueGroupAccessTest.php b/tests/src/Functional/UniqueGroupAccessTest.php
index 5cd2b7e..2830d1a 100644
--- a/tests/src/Functional/UniqueGroupAccessTest.php
+++ b/tests/src/Functional/UniqueGroupAccessTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\domain_group\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\domain_group\Traits\GroupCreationTrait;
 use Drupal\Tests\domain_group\Traits\InitializeGroupsTrait;
 use Drupal\Tests\BrowserTestBase;
@@ -50,14 +51,14 @@ class UniqueGroupAccessTest extends BrowserTestBase {
   /**
    * Regular authenticated User for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Setup the group types and test groups from the InitializeGroupsTrait.
diff --git a/tests/src/Traits/GroupCreationTrait.php b/tests/src/Traits/GroupCreationTrait.php
index 5650be2..0d64722 100644
--- a/tests/src/Traits/GroupCreationTrait.php
+++ b/tests/src/Traits/GroupCreationTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\domain_group\Traits;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\group\Entity\Group;
+use Drupal\group\Entity\GroupType;
 /**
  * Provides methods to create groups and group types.
  *
@@ -12,7 +15,7 @@ trait GroupCreationTrait {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -22,7 +25,7 @@ trait GroupCreationTrait {
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\Group
+   * @return Group
    *   The created group entity.
    */
   protected function createGroup(array $values = []) {
@@ -42,7 +45,7 @@ trait GroupCreationTrait {
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\GroupType
+   * @return GroupType
    *   The created group type entity.
    */
   protected function createGroupType(array $values = []) {
@@ -58,7 +61,7 @@ trait GroupCreationTrait {
   /**
    * Returns the entity type manager service to use.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   protected function getEntityTypeManager() {
diff --git a/tests/src/Traits/InitializeGroupsTrait.php b/tests/src/Traits/InitializeGroupsTrait.php
index 71f8daf..b81d315 100644
--- a/tests/src/Traits/InitializeGroupsTrait.php
+++ b/tests/src/Traits/InitializeGroupsTrait.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\domain_group\Traits;
 
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group\Entity\GroupInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Tests\domain\Traits\DomainTestTrait;
 
 /**
@@ -18,56 +22,56 @@ trait InitializeGroupsTrait {
   /**
    * A dummy group type with ID 'a'.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeA;
 
   /**
    * A dummy group type with ID 'b'.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeB;
 
   /**
    * Test group A1, of type 'a'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupA1;
 
   /**
    * Test group A2, of type 'a'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupA2;
 
   /**
    * Test group A3, of type 'a'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupA3;
 
   /**
    * Test group B1, of type 'b'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupB1;
 
   /**
    * Test group B2, of type 'b'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupB2;
 
   /**
    * Test group B3, of type 'b'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupB3;
 
@@ -88,7 +92,7 @@ trait InitializeGroupsTrait {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -102,21 +106,21 @@ trait InitializeGroupsTrait {
   /**
    * Test node for group A1.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodeA1;
 
   /**
    * Test node for group A2.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodeA2;
 
   /**
    * Test node for group A3.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodeA3;
 
@@ -161,7 +165,7 @@ trait InitializeGroupsTrait {
   protected function initializeTestGroupsDomains() {
     // Creating domains.
     $this->domains = [''];
-    /** @var \Drupal\group\Entity\GroupInterface $group */
+    /** @var GroupInterface $group */
     foreach ($this->allTestGroups as $group) {
       $this->domains[] = [
         'subdomain' => strtolower($group->label()),
@@ -218,7 +222,7 @@ trait InitializeGroupsTrait {
   /**
    * Returns the config factory to use.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config factory.
    */
   protected function getConfigFactory() {
