modules/contrib/field_image_link/field_image_link.module
modules/contrib/field_image_link/src/ImageLinkItemInterface.php
modules/contrib/field_image_link/src/Plugin/Field/FieldFormatter/ImageLinkFormatter.php
modules/contrib/field_image_link/src/Plugin/Field/FieldType/ImageLinkItem.php
modules/contrib/field_image_link/src/Plugin/Field/FieldWidget/ImageLinkWidget.php

4 files with changes
====================

1) modules/contrib/field_image_link/src/Plugin/Field/FieldWidget/ImageLinkWidget.php:144

    ---------- begin diff ----------
@@ @@
    * Disallows saving inaccessible or untrusted URLs.
    *
    * @param $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param $form
    */
   public static function validateLinkUriElement($element, FormStateInterface $form_state, $form) {
@@ @@
    * Form element validation handler for the link type.
    *
    * @param $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param $form
    */
   public static function validateLinkTypeElement($element, FormStateInterface $form_state, $form) {
@@ @@
    *
    * @param $element
    * @param $input
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array|null
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_image_link/src/Plugin/Field/FieldFormatter/ImageLinkFormatter.php:321

    ---------- begin diff ----------
@@ @@
         // context to ensure different file URLs are generated for different
         // sites in a multisite setup, including HTTP and HTTPS versions of the
         // same site. Fix in https://www.drupal.org/node/2646744.
-        $image_url = Url::fromUri(file_create_url($image_uri));
+        $image_url = \Drupal::service('file_url_generator')->generate($image_uri);
         $cache_contexts[] = 'url.site';
       }
       if (isset($link_link)) {
@@ @@
         }
         elseif ($values['link_display_settings']['image_link'] == 'file') {
           $file = File::load($values['target_id']);
-          $elements[$delta]['#image']['#url'] = Url::fromUri(file_create_url($file->getFileUri()));
+          $elements[$delta]['#image']['#url'] = \Drupal::service('file_url_generator')->generate($file->getFileUri());
         }
         elseif ($values['link_display_settings']['image_link'] == 'content') {
           $entity = $items->getEntity();
@@ @@
   /**
    * Provides content of the file.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   File to handle.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/field_image_link/src/ImageLinkItemInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_image_link;

+use Drupal\Core\Url;
 use Drupal\Core\Field\FieldItemInterface;

 /**
@@ @@
   /**
    * Gets the URL object.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Returns a Url object.
    */
   public function getUrl();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/field_image_link/field_image_link.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\Entity\File;
 use Drupal\Component\Utility\Unicode;

 /**
@@ @@
 /**
  * Provides image file dimensions.
  *
- * @param \Drupal\file\Entity\File $file
+ * @param File $file
  *   SVG file.
  *
  * @return array
  *   Dimensions array.
  */
-function field_image_link_get_image_file_dimensions(\Drupal\file\Entity\File $file) {
+function field_image_link_get_image_file_dimensions(File $file) {
   $image = \Drupal::getContainer()->get('image.factory')->get($file->getFileUri());

   $variables = [];
@@ @@
 /**
  * Checks if current file is SVG image.
  *
- * @param \Drupal\file\Entity\File $file
+ * @param File $file
  *   File to check.
  *
  * @return bool
  *   TRUE if is SVG, FALSE otherwise.
  */
-function field_image_link_is_file_svg(\Drupal\file\Entity\File $file) {
+function field_image_link_is_file_svg(File $file) {
   return $file->getMimeType() === 'image/svg+xml';
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

