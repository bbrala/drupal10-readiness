modules/contrib/serial/serial.install
modules/contrib/serial/serial.module
modules/contrib/serial/src/Plugin/Field/FieldFormatter/SerialDefaultFormatter.php
modules/contrib/serial/src/Plugin/Field/FieldType/SerialItem.php
modules/contrib/serial/src/Plugin/Field/FieldWidget/SerialDefaultWidget.php
modules/contrib/serial/src/SerialSQLStorage.php
modules/contrib/serial/src/SerialStorageInterface.php
modules/contrib/serial/tests/src/Functional/SerialFieldTest.php

6 files with changes
====================

1) modules/contrib/serial/tests/src/Functional/SerialFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\serial\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * A user with permission to create test entities.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   /**
    * A field storage to use in this test class.
    *
-   * @var \Drupal\field\Entity\FieldStorageConfig
+   * @var FieldStorageConfig
    */
   protected $fieldStorage;

@@ @@
   /**
    * The serial field used in this test class.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $field;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->webUser = $this->drupalCreateUser([
@@ @@

     // Test basic definition of serial field on entity save.
     $edit = [];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     // Make sure the entity was saved.
     preg_match('|entity_test/manage/(\d+)|', $this->getSession()
       ->getCurrentUrl(), $match);
@@ @@
     while ($i < $entities) {
       $this->drupalGet('entity_test/add');
       $edit = [];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
       // Make sure the entity was saved.
       preg_match('|entity_test/manage/(\d+)|', $this->getSession()
         ->getCurrentUrl(), $match);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/serial/src/SerialStorageInterface.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Creates the assistant storage name for a specific field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   Field definition.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   Entity.
    *
    * @return string
@@ @@
   /**
    * Generates a unique serial value (unique per entity bundle).
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   Field definition.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   Entity.
    * @param bool $delete
    *   Indicates if temporary records should be deleted.
@@ @@
   /**
    * Creates an assistant serial storage for a new created field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   Field definition.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   Entity.
    */
   public function createStorage(FieldDefinitionInterface $fieldDefinition, FieldableEntityInterface $entity);
@@ @@
   /**
    * Drops an assistant serial storage for a deleted field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   Field definition.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   Entity.
    */
   public function dropStorage(FieldDefinitionInterface $fieldDefinition, FieldableEntityInterface $entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/serial/src/SerialSQLStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\serial;

+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/serial/src/Plugin/Field/FieldType/SerialItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\serial\Plugin\Field\FieldType;

+use Drupal\serial\SerialStorageInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the (entire) configuration form.
    */
   public function initializeEntitiesCallback(array &$form, FormStateInterface $form_state) {
@@ @@
       $ids = $query->execute();

       if (count($ids) > 0) {
-        /** @var \Drupal\serial\SerialStorageInterface $serialStorage */
+        /** @var SerialStorageInterface $serialStorage */
         $serialStorage = \Drupal::getContainer()->get('serial.sql_storage');
         // Set serial values for existing entities.
         $oldCount = $serialStorage->initOldEntries(
@@ @@
       // depending of what is the design.
       // This should probably be solved by the end user decision
       // while setting the field translation.
-      /** @var \Drupal\Core\Language\LanguageManagerInterface $languageManager */
+      /** @var LanguageManagerInterface $languageManager */
       $languageManager = \Drupal::getContainer()->get('language_manager');
       // @todo isMultilingual is global, prefer local hasTranslation
       if ($languageManager->isMultilingual() && $entity instanceof TranslatableInterface) {
@@ @@
     }

     if ($newSerial) {
-      /** @var \Drupal\serial\SerialStorageInterface $serialStorage */
+      /** @var SerialStorageInterface $serialStorage */
       $serialStorage = \Drupal::getContainer()->get('serial.sql_storage');
       $serial = $serialStorage->generateValue($this->getFieldDefinition(), $this->getEntity());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/serial/serial.module:30

    ---------- begin diff ----------
@@ @@
 function serial_field_config_create(FieldConfig $field) {
   if ($field->getType() == 'serial' && !$field->isDeleted()) {
     // Create the assistant storage.
-    /** @var \Drupal\serial\SerialStorageInterface $serialStorage */
+    /** @var SerialStorageInterface $serialStorage */
     $serialStorage = \Drupal::getContainer()->get('serial.sql_storage');
     $storageName = $serialStorage->createStorageName(
       $field->getTargetEntityTypeId(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/serial/serial.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\serial\SerialStorageInterface;
 /**
  * @file
  * Install, update and uninstall functions for the Serial module.
  */
-
 /**
  * Implements hook_schema().
  *
@@ @@
  * Return the schema of all the assistant tables (one per field instance).
  */
 function serial_schema() {
-  /** @var \Drupal\serial\SerialStorageInterface $serialStorage */
+  /** @var SerialStorageInterface $serialStorage */
   $serialStorage = \Drupal::getContainer()->get('serial.sql_storage');
   $tableSchema = $serialStorage->getSchema();
   $schema = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

