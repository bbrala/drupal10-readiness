modules/contrib/scss_compiler/scss_compiler.api.php
modules/contrib/scss_compiler/scss_compiler.install
modules/contrib/scss_compiler/scss_compiler.module
modules/contrib/scss_compiler/src/Annotation/ScssCompilerPlugin.php
modules/contrib/scss_compiler/src/Commands/ScssCompilerCommands.php
modules/contrib/scss_compiler/src/Controller/ScssCompilerController.php
modules/contrib/scss_compiler/src/Form/ScssCompilerSystemPerformanceSettingsFormAlter.php
modules/contrib/scss_compiler/src/Plugin/ScssCompiler/LessphpCompiler.php
modules/contrib/scss_compiler/src/Plugin/ScssCompiler/LibsassCompiler.php
modules/contrib/scss_compiler/src/Plugin/ScssCompiler/Scssphp.php
modules/contrib/scss_compiler/src/Plugin/ScssCompiler/ScssphpCompiler.php
modules/contrib/scss_compiler/src/ScssCompilerAlterStorage.php
modules/contrib/scss_compiler/src/ScssCompilerInterface.php
modules/contrib/scss_compiler/src/ScssCompilerPluginBase.php
modules/contrib/scss_compiler/src/ScssCompilerPluginInterface.php
modules/contrib/scss_compiler/src/ScssCompilerPluginManager.php
modules/contrib/scss_compiler/src/ScssCompilerService.php

10 files with changes
=====================

1) modules/contrib/scss_compiler/src/ScssCompilerService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scss_compiler;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Theme\ThemeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * Configuration object of scss compiler.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The default cache bin.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Altering variables.
    *
-   * @var \Drupal\scss_compiler\ScssCompilerAlterStorage
+   * @var ScssCompilerAlterStorage
    */
   protected $variables;

@@ @@
   /**
    * Constructs a SCSS Compiler service object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The configuration object factory.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The default cache bin.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(ConfigFactoryInterface $config, ThemeManagerInterface $theme_manager, ModuleHandlerInterface $module_handler, RequestStack $request_stack, CacheBackendInterface $cache, FileSystemInterface $file_system) {
@@ @@
     if ($this->moduleHandler->moduleExists($namespace)) {
       $type = 'module';
     }
-    $path = @drupal_get_path($type, $namespace);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+    $path = @\Drupal::service('extension.path.resolver')->getPath($type, $namespace);
     if (empty($path)) {
       $path = '';
     }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/scss_compiler/src/ScssCompilerPluginManager.php:27

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Returns compiler instance by id.
    *
-   * @return \Drupal\scss_compiler\ScssCompilerPluginInterface
+   * @return ScssCompilerPluginInterface
    *   Compiler instance.
    */
   public function getInstanceById($id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/scss_compiler/src/ScssCompilerPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scss_compiler;

+use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The scss compiler service.
    *
-   * @var \Drupal\scss_compiler\ScssCompilerInterface
+   * @var ScssCompilerInterface
    */
   protected $scssCompiler;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\scss_compiler\ScssCompilerInterface $scss_compiler
+   * @param ScssCompilerInterface $scss_compiler
    *   The scss compiler service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ScssCompilerInterface $scss_compiler, RequestStack $request_stack, FileSystemInterface $file_system, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/scss_compiler/src/ScssCompilerInterface.php:114

    ---------- begin diff ----------
@@ @@
    *
    * @see hook_scss_compiler_variables_alter()
    *
-   * @return \Drupal\scss_compiler\ScssCompilerAlterStorage
+   * @return ScssCompilerAlterStorage
    *   A storage with altering variables.
    */
   public function getVariables();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/scss_compiler/src/ScssCompilerAlterStorage.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The ScssCompiler service.
    *
-   * @var \Drupal\scss_compiler\ScssCompilerInterface
+   * @var ScssCompilerInterface
    */
   protected $scssCompiler;

@@ @@
   /**
    * Constructs ScssCompilerAlterStorage object.
    *
-   * @param \Drupal\scss_compiler\ScssCompilerInterface $scss_compiler
+   * @param ScssCompilerInterface $scss_compiler
    *   The ScssCompiler service.
    */
   public function __construct(ScssCompilerInterface $scss_compiler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/scss_compiler/src/Plugin/ScssCompiler/ScssphpCompiler.php:182

    ---------- begin diff ----------
@@ @@
     if ($this->moduleHandler->moduleExists($namespace)) {
       $type = 'module';
     }
-    $path = @drupal_get_path($type, $namespace);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+    $path = @\Drupal::service('extension.path.resolver')->getPath($type, $namespace);
     if (empty($path)) {
       return NULL;
     }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/scss_compiler/src/Plugin/ScssCompiler/LibsassCompiler.php:67

    ---------- begin diff ----------
@@ @@
     if ($status !== TRUE) {
       throw new \Exception($status);
     }
-    $module_path = DRUPAL_ROOT . '/' . drupal_get_path('module', 'scss_compiler');
+    $module_path = DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('scss_compiler');
     $this->scriptPath = $module_path . '/js/libsass.js';

     // Prevent the execution of the script if it contains changes.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * StringToArrayArgumentProcessRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/scss_compiler/src/Controller/ScssCompilerController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scss_compiler\Controller;

+use Drupal\scss_compiler\ScssCompilerService;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\scss_compiler\ScssCompilerInterface;
@@ @@
   /**
    * A scss compiler service instance.
    *
-   * @var \Drupal\scss_compiler\ScssCompilerService
+   * @var ScssCompilerService
    */
   protected $scssCompiler;

@@ @@
   /**
    * A request stack symfony instance.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Constructs a ScssCompilerController object.
    *
-   * @param \Drupal\scss_compiler\ScssCompilerInterface $scss_compiler
+   * @param ScssCompilerInterface $scss_compiler
    *   A scss compiler service instance.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   A request stack symfony instance.
    */
   public function __construct(ScssCompilerInterface $scss_compiler, RequestStack $request_stack) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/scss_compiler/src/Commands/ScssCompilerCommands.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Scss compiler service.
    *
-   * @var \Drupal\scss_compiler\ScssCompilerInterface
+   * @var ScssCompilerInterface
    */
   protected $scssCompiler;

@@ @@
   /**
    * ScssCompilerCommands constructor.
    *
-   * @param \Drupal\scss_compiler\ScssCompilerInterface $scss_compiler
+   * @param ScssCompilerInterface $scss_compiler
    *   ScssCompiler service.
    */
   public function __construct(ScssCompilerInterface $scss_compiler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/scss_compiler/scss_compiler.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\scss_compiler\ScssCompilerAlterStorage;
 /**
  * @file
  * Hooks related to SCSS compiler module.
@@ @@
 /**
  * Alter compiler variables.
  *
- * @param \Drupal\scss_compiler\ScssCompilerAlterStorage $storage
+ * @param ScssCompilerAlterStorage $storage
  *   Storage with variables.
  */
-function hook_scss_compiler_variables_alter(\Drupal\scss_compiler\ScssCompilerAlterStorage $storage) {
+function hook_scss_compiler_variables_alter(ScssCompilerAlterStorage $storage) {

   // Alter variables in all files.
   $storage->set([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

