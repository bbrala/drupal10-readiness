diff --git a/composer.json b/composer.json
index 4b2c648..8c0e3b1 100644
--- a/composer.json
+++ b/composer.json
@@ -16,6 +16,6 @@
         "source": "http://cgit.drupalcode.org/migrate_html_to_paragraphs"
     },
     "require": {
-        "drupal/core": "^9"
+        "drupal/core": "^9.3 || ^10"
     }
 }
diff --git a/migrate_html_to_paragraphs.info.yml b/migrate_html_to_paragraphs.info.yml
index 478c980..987339c 100644
--- a/migrate_html_to_paragraphs.info.yml
+++ b/migrate_html_to_paragraphs.info.yml
@@ -1,7 +1,7 @@
 name: "Migrate HTML to Paragraphs"
 description: "Migrate plugin API to turn HTML into Paragraphs."
 type: module
-core_version_requirement: ^9
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - drupal:migrate
 package: Migration
diff --git a/migrate_html_to_paragraphs.module b/migrate_html_to_paragraphs.module
index f681a52..517ac9f 100644
--- a/migrate_html_to_paragraphs.module
+++ b/migrate_html_to_paragraphs.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Queue\QueueFactory;
+use Drupal\Core\Queue\QueueInterface;
 /**
  * @file
  * Migrate HTML to Paragraphs module file.
@@ -36,9 +38,9 @@ function migrate_html_to_paragraphs_file_delete(EntityInterface $entity) {
  *   Array with Paragraph Ids.
  */
 function migrate_html_to_paragraphs_delete_orphaned_paragraphs(array $pids) {
-  /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
+  /** @var QueueFactory $queue_factory */
   $queue_factory = \Drupal::service('queue');
-  /** @var \Drupal\Core\Queue\QueueInterface $queue */
+  /** @var QueueInterface $queue */
   $queue = $queue_factory->get('migrate_html_to_paragraphs_delete_orphaned_paragraphs');
 
   // Only add new items if the queue is empty, otherwise we risk the queue
diff --git a/src/Annotation/MigrateHtmlParserPlugin.php b/src/Annotation/MigrateHtmlParserPlugin.php
index 1f1a567..fb813e4 100644
--- a/src/Annotation/MigrateHtmlParserPlugin.php
+++ b/src/Annotation/MigrateHtmlParserPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\migrate_html_to_paragraphs\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -34,7 +35,7 @@ class MigrateHtmlParserPlugin extends Plugin {
   /**
    * The human-readable title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/MigrateHtmlProcessPlugin.php b/src/Annotation/MigrateHtmlProcessPlugin.php
index f1a6c53..ed88342 100644
--- a/src/Annotation/MigrateHtmlProcessPlugin.php
+++ b/src/Annotation/MigrateHtmlProcessPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\migrate_html_to_paragraphs\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -34,7 +35,7 @@ class MigrateHtmlProcessPlugin extends Plugin {
   /**
    * The human-readable title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Plugin/MigrateHtmlParserInterface.php b/src/Plugin/MigrateHtmlParserInterface.php
index e69060e..a841a6c 100644
--- a/src/Plugin/MigrateHtmlParserInterface.php
+++ b/src/Plugin/MigrateHtmlParserInterface.php
@@ -29,9 +29,9 @@ interface MigrateHtmlParserInterface extends PluginInspectionInterface {
    *
    * @param mixed $value
    *   The value to be transformed.
-   * @param \Drupal\migrate\MigrateExecutableInterface $migrate_executable
+   * @param MigrateExecutableInterface $migrate_executable
    *   The migration in which this process is being executed.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row from the source to process. Normally, just transforming the value
    *   is adequate but very rarely you might need to change two columns at the
    *   same time or something like that.
diff --git a/src/Plugin/MigrateHtmlPluginManager.php b/src/Plugin/MigrateHtmlPluginManager.php
index 809b627..9af4865 100644
--- a/src/Plugin/MigrateHtmlPluginManager.php
+++ b/src/Plugin/MigrateHtmlPluginManager.php
@@ -31,9 +31,9 @@ class MigrateHtmlPluginManager extends DefaultPluginManager implements MigrateHt
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    * @param string $annotation
    *   (optional) The annotation class name. Defaults to
diff --git a/src/Plugin/MigrateHtmlPluginManagerInterface.php b/src/Plugin/MigrateHtmlPluginManagerInterface.php
index 12b6698..433838c 100644
--- a/src/Plugin/MigrateHtmlPluginManagerInterface.php
+++ b/src/Plugin/MigrateHtmlPluginManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\migrate_html_to_paragraphs\Plugin;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginManagerInterface;
 
 /**
@@ -23,7 +24,7 @@ interface MigrateHtmlPluginManagerInterface extends PluginManagerInterface {
    * @return object
    *   A fully configured plugin instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []);
diff --git a/src/Plugin/MigrateHtmlProcessInterface.php b/src/Plugin/MigrateHtmlProcessInterface.php
index 69ab330..e4ebcc2 100644
--- a/src/Plugin/MigrateHtmlProcessInterface.php
+++ b/src/Plugin/MigrateHtmlProcessInterface.php
@@ -29,9 +29,9 @@ interface MigrateHtmlProcessInterface extends PluginInspectionInterface {
    *
    * @param mixed $value
    *   The value to be transformed.
-   * @param \Drupal\migrate\MigrateExecutableInterface $migrate_executable
+   * @param MigrateExecutableInterface $migrate_executable
    *   The migration in which this process is being executed.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row from the source to process. Normally, just transforming the value
    *   is adequate but very rarely you might need to change two columns at the
    *   same time or something like that.
diff --git a/src/Plugin/QueueWorker/ParagraphDeleteBase.php b/src/Plugin/QueueWorker/ParagraphDeleteBase.php
index 1b8cd5f..caa5119 100644
--- a/src/Plugin/QueueWorker/ParagraphDeleteBase.php
+++ b/src/Plugin/QueueWorker/ParagraphDeleteBase.php
@@ -17,7 +17,7 @@ abstract class ParagraphDeleteBase extends QueueWorkerBase implements ContainerF
   /**
    * The Paragraph storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $paragraphStorage;
 
@@ -30,7 +30,7 @@ abstract class ParagraphDeleteBase extends QueueWorkerBase implements ContainerF
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $paragraph_storage
+   * @param EntityStorageInterface $paragraph_storage
    *   The Paragraph storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityStorageInterface $paragraph_storage) {
diff --git a/src/Plugin/migrate/html/process/HtmlTagImgProcess.php b/src/Plugin/migrate/html/process/HtmlTagImgProcess.php
index 694412a..9cc0239 100644
--- a/src/Plugin/migrate/html/process/HtmlTagImgProcess.php
+++ b/src/Plugin/migrate/html/process/HtmlTagImgProcess.php
@@ -15,7 +15,7 @@ abstract class HtmlTagImgProcess extends HtmlTagProcess {
   /**
    * File entity retrieved after processing the file.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $file;
 
@@ -82,7 +82,7 @@ abstract class HtmlTagImgProcess extends HtmlTagProcess {
   /**
    * Return the file entity.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   File entity.
    */
   public function getFile() {
@@ -108,7 +108,7 @@ abstract class HtmlTagImgProcess extends HtmlTagProcess {
   /**
    * Set the file entity.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File entity.
    */
   protected function setFile(FileInterface $file) {
@@ -241,7 +241,7 @@ abstract class HtmlTagImgProcess extends HtmlTagProcess {
    * @param string $target_folder
    *   The target directory URI where the file should be copied to.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The file entity object or false if the file could not be copied.
    */
   protected function copyFile($source, $target_folder) {
@@ -266,7 +266,7 @@ abstract class HtmlTagImgProcess extends HtmlTagProcess {
       $file = File::Create([
         'uri' => $source,
       ]);
-      $file = file_copy($file, $target_path, FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->copy($file, $target_path, FileSystemInterface::EXISTS_REPLACE);
     }
     else {
       // Make sure that the target folder exists and is writable.
@@ -307,14 +307,14 @@ abstract class HtmlTagImgProcess extends HtmlTagProcess {
    *     filename is unique.
    *   - FILE_EXISTS_ERROR: Do nothing and return FALSE.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The file entity object or false if the file could not be created.
    */
   protected function createFile($data, $target_file_path, $replace = FileSystemInterface::EXISTS_RENAME) {
     $file = FALSE;
 
     if (!empty($data)) {
-      $file = file_save_data($data, $target_file_path, $replace);
+      $file = \Drupal::service('file.repository')->writeData($data, $target_file_path, $replace);
 
       if ($file) {
         return $file;
@@ -349,7 +349,7 @@ abstract class HtmlTagImgProcess extends HtmlTagProcess {
    *     filename is unique.
    *   - FILE_EXISTS_ERROR: Do nothing and return FALSE.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The file entity object or false if the file could not be created.
    */
   protected function createFileByUri($source, $target_folder, $replace = FileSystemInterface::EXISTS_RENAME) {
@@ -411,7 +411,7 @@ abstract class HtmlTagImgProcess extends HtmlTagProcess {
    * @param string $source
    *   The source path of the file to copy.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The migrated file entity object or false if not yet migrated.
    */
   protected function loadFileFromMigrateMapping($source) {
@@ -436,7 +436,7 @@ abstract class HtmlTagImgProcess extends HtmlTagProcess {
    *
    * @param string $source
    *   The source path.
-   * @param \Drupal\file\FileInterface|bool $file
+   * @param FileInterface|bool $file
    *   The file entity object or FALSE.
    */
   protected function saveMigrateMapping($source, $file) {
diff --git a/src/Plugin/migrate/process/HtmlToParagraphs.php b/src/Plugin/migrate/process/HtmlToParagraphs.php
index f9ffb52..d71851b 100644
--- a/src/Plugin/migrate/process/HtmlToParagraphs.php
+++ b/src/Plugin/migrate/process/HtmlToParagraphs.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\migrate_html_to_paragraphs\Plugin\migrate\process;
 
+use Drupal\migrate_html_to_paragraphs\Plugin\MigrateHtmlPluginManager;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\migrate\MigrateException;
 use Drupal\migrate\ProcessPluginBase;
@@ -45,7 +46,7 @@ class HtmlToParagraphs extends ProcessPluginBase implements ContainerFactoryPlug
   /**
    * The parser plugin manager.
    *
-   * @var \Drupal\migrate_html_to_paragraphs\Plugin\MigrateHtmlPluginManager
+   * @var MigrateHtmlPluginManager
    */
   protected $parserPluginManager;
 
@@ -59,7 +60,7 @@ class HtmlToParagraphs extends ProcessPluginBase implements ContainerFactoryPlug
   /**
    * The process plugin manager.
    *
-   * @var \Drupal\migrate_html_to_paragraphs\Plugin\MigrateHtmlPluginManager
+   * @var MigrateHtmlPluginManager
    */
   protected $processPluginManager;
 
@@ -86,9 +87,9 @@ class HtmlToParagraphs extends ProcessPluginBase implements ContainerFactoryPlug
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\migrate_html_to_paragraphs\Plugin\MigrateHtmlPluginManagerInterface $parser_plugin_manager
+   * @param MigrateHtmlPluginManagerInterface $parser_plugin_manager
    *   The migration html parser plugin manager.
-   * @param \Drupal\migrate_html_to_paragraphs\Plugin\MigrateHtmlPluginManagerInterface $process_plugin_manager
+   * @param MigrateHtmlPluginManagerInterface $process_plugin_manager
    *   The migration html process plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrateHtmlPluginManagerInterface $parser_plugin_manager, MigrateHtmlPluginManagerInterface $process_plugin_manager) {
